
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f304  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b0  0801f498  0801f498  0002f498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020948  08020948  000403a8  2**0
                  CONTENTS
  4 .ARM          00000008  08020948  08020948  00030948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020950  08020950  000403a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020950  08020950  00030950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020954  08020954  00030954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  08020958  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bc1c  200003a8  08020d00  000403a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000bfc4  08020d00  0004bfc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000403a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cf74  00000000  00000000  000403d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000795e  00000000  00000000  0008d34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002928  00000000  00000000  00094cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002620  00000000  00000000  000975d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d26f  00000000  00000000  00099bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a6fb  00000000  00000000  000c6e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7efc  00000000  00000000  000f1562  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c945e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c248  00000000  00000000  001c94dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003a8 	.word	0x200003a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f47c 	.word	0x0801f47c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003ac 	.word	0x200003ac
 80001cc:	0801f47c 	.word	0x0801f47c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <setMotors>:
#include "main.h"
#include "config.h"
#include "run.h"

void setMotors(float dutyL, float dutyR)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001052:	edc7 0a00 	vstr	s1, [r7]
	if (motorsRunning)
 8001056:	4b38      	ldr	r3, [pc, #224]	; (8001138 <setMotors+0xf0>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d065      	beq.n	800112a <setMotors+0xe2>
	{
		if (dutyL > 1) dutyL = 1;
 800105e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	dd03      	ble.n	8001078 <setMotors+0x30>
 8001070:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	e009      	b.n	800108c <setMotors+0x44>
		else if (dutyL < 0) dutyL = 0;
 8001078:	edd7 7a01 	vldr	s15, [r7, #4]
 800107c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001084:	d502      	bpl.n	800108c <setMotors+0x44>
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
		if (dutyR > 1) dutyR = 1;
 800108c:	edd7 7a00 	vldr	s15, [r7]
 8001090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	dd03      	ble.n	80010a6 <setMotors+0x5e>
 800109e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	e009      	b.n	80010ba <setMotors+0x72>
		else if (dutyR < 0) dutyR = 0;
 80010a6:	edd7 7a00 	vldr	s15, [r7]
 80010aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d502      	bpl.n	80010ba <setMotors+0x72>
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]

		TIM3->CCR2 = (uint32_t)((float)TIM3->ARR * (1 - dutyL));
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <setMotors+0xf4>)
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <setMotors+0xf4>)
 80010d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010dc:	ee17 2a90 	vmov	r2, s15
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = (uint32_t)((float)TIM3->ARR * (1 - dutyR));
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <setMotors+0xf4>)
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010f2:	edd7 7a00 	vldr	s15, [r7]
 80010f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <setMotors+0xf4>)
 8001100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001104:	ee17 2a90 	vmov	r2, s15
 8001108:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CNT = 0;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <setMotors+0xf4>)
 800110c:	2200      	movs	r2, #0
 800110e:	625a      	str	r2, [r3, #36]	; 0x24

		TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <setMotors+0xf8>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24

		Common.mot_l = dutyL;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <setMotors+0xfc>)
 8001118:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
		Common.mot_r = dutyR;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <setMotors+0xfc>)
 8001122:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	601a      	str	r2, [r3, #0]
	}
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200003c4 	.word	0x200003c4
 800113c:	40000400 	.word	0x40000400
 8001140:	40000800 	.word	0x40000800
 8001144:	200003c8 	.word	0x200003c8

08001148 <haltMotors>:

void haltMotors(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM3->CCR2 = TIM3->ARR;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <haltMotors+0x44>)
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <haltMotors+0x44>)
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3->CCR3 = TIM3->ARR;
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <haltMotors+0x44>)
 8001156:	4a0d      	ldr	r2, [pc, #52]	; (800118c <haltMotors+0x44>)
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM3->CNT = 0;
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <haltMotors+0x44>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <haltMotors+0x48>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	; 0x24

	Common.mot_l = 0;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <haltMotors+0x4c>)
 800116a:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
	Common.mot_r = 0;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <haltMotors+0x4c>)
 8001176:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40000400 	.word	0x40000400
 8001190:	40000800 	.word	0x40000800
 8001194:	200003c8 	.word	0x200003c8

08001198 <enableMotors>:

void enableMotors(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	if (!motorsRunning)
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <enableMotors+0x70>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f083 0301 	eor.w	r3, r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d02b      	beq.n	8001202 <enableMotors+0x6a>
	{
		motorsRunning = true;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <enableMotors+0x70>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]

		//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
		//setPwmFrequency(MAX_PWM_FREQ);

		writePin(PH_L, MOTOR_L_DIR);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b6:	4815      	ldr	r0, [pc, #84]	; (800120c <enableMotors+0x74>)
 80011b8:	f006 fad4 	bl	8007764 <HAL_GPIO_WritePin>
		writePin(PH_R, MOTOR_R_DIR);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c2:	4812      	ldr	r0, [pc, #72]	; (800120c <enableMotors+0x74>)
 80011c4:	f006 face 	bl	8007764 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_2);
 80011c8:	f016 f90a 	bl	80173e0 <Get_TIM3_Instance>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2104      	movs	r1, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00b f9f9 	bl	800c5c8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 80011d6:	f016 f903 	bl	80173e0 <Get_TIM3_Instance>
 80011da:	4603      	mov	r3, r0
 80011dc:	2108      	movs	r1, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f00b f9f2 	bl	800c5c8 <HAL_TIM_PWM_Start>

		haltMotors();
 80011e4:	f7ff ffb0 	bl	8001148 <haltMotors>

		writePin(MOT_STBY, LOW);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2104      	movs	r1, #4
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <enableMotors+0x74>)
 80011ee:	f006 fab9 	bl	8007764 <HAL_GPIO_WritePin>
		delay(10);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f005 fc38 	bl	8006a68 <HAL_Delay>
		writePin(MOT_STBY, HIGH);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2104      	movs	r1, #4
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <enableMotors+0x74>)
 80011fe:	f006 fab1 	bl	8007764 <HAL_GPIO_WritePin>
	}
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200003c4 	.word	0x200003c4
 800120c:	40020400 	.word	0x40020400

08001210 <disableMotors>:

void disableMotors(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	if (motorsRunning || false)
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <disableMotors+0x40>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d017      	beq.n	800124c <disableMotors+0x3c>
	{
		writePin(MOT_STBY, LOW);
 800121c:	2200      	movs	r2, #0
 800121e:	2104      	movs	r1, #4
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <disableMotors+0x44>)
 8001222:	f006 fa9f 	bl	8007764 <HAL_GPIO_WritePin>
		haltMotors();
 8001226:	f7ff ff8f 	bl	8001148 <haltMotors>
		HAL_TIM_PWM_Stop(Get_TIM3_Instance(), TIM_CHANNEL_2);
 800122a:	f016 f8d9 	bl	80173e0 <Get_TIM3_Instance>
 800122e:	4603      	mov	r3, r0
 8001230:	2104      	movs	r1, #4
 8001232:	4618      	mov	r0, r3
 8001234:	f00b fa06 	bl	800c644 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8001238:	f016 f8d2 	bl	80173e0 <Get_TIM3_Instance>
 800123c:	4603      	mov	r3, r0
 800123e:	2108      	movs	r1, #8
 8001240:	4618      	mov	r0, r3
 8001242:	f00b f9ff 	bl	800c644 <HAL_TIM_PWM_Stop>
		motorsRunning = false;
 8001246:	4b02      	ldr	r3, [pc, #8]	; (8001250 <disableMotors+0x40>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
	}
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200003c4 	.word	0x200003c4
 8001254:	40020400 	.word	0x40020400

08001258 <SD_init>:
    return FR_OK;
}


FRESULT SD_init()
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 800125e:	f012 fcfd 	bl	8013c5c <BSP_SD_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SD_init+0x14>
 8001268:	2303      	movs	r3, #3
 800126a:	e027      	b.n	80012bc <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 800126c:	4815      	ldr	r0, [pc, #84]	; (80012c4 <SD_init+0x6c>)
 800126e:	f012 fce7 	bl	8013c40 <FATFS_UnLinkDriver>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SD_init+0x24>
 8001278:	2303      	movs	r3, #3
 800127a:	e01f      	b.n	80012bc <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 800127c:	4911      	ldr	r1, [pc, #68]	; (80012c4 <SD_init+0x6c>)
 800127e:	4812      	ldr	r0, [pc, #72]	; (80012c8 <SD_init+0x70>)
 8001280:	f012 fc96 	bl	8013bb0 <FATFS_LinkDriver>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SD_init+0x36>
 800128a:	2303      	movs	r3, #3
 800128c:	e016      	b.n	80012bc <SD_init+0x64>

	f_mount(0, SDPath, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <SD_init+0x6c>)
 8001292:	2000      	movs	r0, #0
 8001294:	f011 fee4 	bl	8013060 <f_mount>
	FRESULT mountStatus = f_mount(&fso, SDPath, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	490a      	ldr	r1, [pc, #40]	; (80012c4 <SD_init+0x6c>)
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <SD_init+0x74>)
 800129e:	f011 fedf 	bl	8013060 <f_mount>
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	if (mountStatus != FR_OK)
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	4905      	ldr	r1, [pc, #20]	; (80012c4 <SD_init+0x6c>)
 80012b0:	2000      	movs	r0, #0
 80012b2:	f011 fed5 	bl	8013060 <f_mount>
		return mountStatus;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	e000      	b.n	80012bc <SD_init+0x64>
	}

	return FR_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200085ac 	.word	0x200085ac
 80012c8:	080203e8 	.word	0x080203e8
 80012cc:	20002c90 	.word	0x20002c90

080012d0 <SD_newFile>:

	return FR_OK;
}

FRESULT SD_newFile(char* path)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	stato = f_open(&fileo, path, FA_CREATE_ALWAYS);
 80012d8:	2208      	movs	r2, #8
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <SD_newFile+0x44>)
 80012de:	f011 ff05 	bl	80130ec <f_open>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <SD_newFile+0x48>)
 80012e8:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK)
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <SD_newFile+0x48>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <SD_newFile+0x32>
	{
		f_mount(0, SDPath, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	4909      	ldr	r1, [pc, #36]	; (800131c <SD_newFile+0x4c>)
 80012f6:	2000      	movs	r0, #0
 80012f8:	f011 feb2 	bl	8013060 <f_mount>
		return stato;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <SD_newFile+0x48>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	e004      	b.n	800130c <SD_newFile+0x3c>
	}

	//DateTime now = getTime();
	//SD_setFileTime(path, &now);

	f_close(&fileo);
 8001302:	4804      	ldr	r0, [pc, #16]	; (8001314 <SD_newFile+0x44>)
 8001304:	f012 fad0 	bl	80138a8 <f_close>
	return stato;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <SD_newFile+0x48>)
 800130a:	781b      	ldrb	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20001c60 	.word	0x20001c60
 8001318:	20001c5c 	.word	0x20001c5c
 800131c:	200085ac 	.word	0x200085ac

08001320 <SD_writeToFile>:
{
	return f_unlink(path);
}

FRESULT SD_writeToFile(char* path, char* content)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	stato = f_open(&fileo, path,  FA_WRITE | FA_OPEN_APPEND);
 800132a:	2232      	movs	r2, #50	; 0x32
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4815      	ldr	r0, [pc, #84]	; (8001384 <SD_writeToFile+0x64>)
 8001330:	f011 fedc 	bl	80130ec <f_open>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <SD_writeToFile+0x68>)
 800133a:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <SD_writeToFile+0x68>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <SD_writeToFile+0x2a>
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <SD_writeToFile+0x68>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	e017      	b.n	800137a <SD_writeToFile+0x5a>

	stato = f_write(&fileo, content, strlen(content), &testByteo);
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f7fe ff4a 	bl	80001e4 <strlen>
 8001350:	4602      	mov	r2, r0
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <SD_writeToFile+0x6c>)
 8001354:	6839      	ldr	r1, [r7, #0]
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <SD_writeToFile+0x64>)
 8001358:	f012 f894 	bl	8013484 <f_write>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <SD_writeToFile+0x68>)
 8001362:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <SD_writeToFile+0x68>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <SD_writeToFile+0x52>
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <SD_writeToFile+0x68>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	e003      	b.n	800137a <SD_writeToFile+0x5a>

	return f_close(&fileo);
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <SD_writeToFile+0x64>)
 8001374:	f012 fa98 	bl	80138a8 <f_close>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20001c60 	.word	0x20001c60
 8001388:	20001c5c 	.word	0x20001c5c
 800138c:	20003cc4 	.word	0x20003cc4

08001390 <SD_newDirectory>:
	//########################
	return FR_OK;
}

FRESULT SD_newDirectory(char* path)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ implement: tree -> multiple '/'
	return f_mkdir(path);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f012 faaf 	bl	80138fc <f_mkdir>
 800139e:	4603      	mov	r3, r0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <millis>:
#include <stdbool.h>
#include "main.h"
#include "stm32f4xx_hal.h"

static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <millis+0x1c>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	10624dd3 	.word	0x10624dd3

080013c8 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 10);
 80013d4:	1cf9      	adds	r1, r7, #3
 80013d6:	230a      	movs	r3, #10
 80013d8:	2201      	movs	r2, #1
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f00a fcdf 	bl	800bd9e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 80013e0:	bf00      	nop
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f00a ffb1 	bl	800c34a <HAL_SPI_GetState>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d1f9      	bne.n	80013e2 <SX1278_write+0x1a>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	70fb      	strb	r3, [r7, #3]
 8001402:	4613      	mov	r3, r2
 8001404:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a18      	ldr	r0, [r3, #32]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	8a5b      	ldrh	r3, [r3, #18]
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	f006 f9a7 	bl	8007764 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f7ff ffcf 	bl	80013c8 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	78ba      	ldrb	r2, [r7, #2]
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ffc8 	bl	80013c8 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a18      	ldr	r0, [r3, #32]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	8a5b      	ldrh	r3, [r3, #18]
 8001440:	2201      	movs	r2, #1
 8001442:	4619      	mov	r1, r3
 8001444:	f006 f98e 	bl	8007764 <HAL_GPIO_WritePin>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	461a      	mov	r2, r3
 800145c:	460b      	mov	r3, r1
 800145e:	72fb      	strb	r3, [r7, #11]
 8001460:	4613      	mov	r3, r2
 8001462:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001464:	7abb      	ldrb	r3, [r7, #10]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d92d      	bls.n	80014c6 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6a18      	ldr	r0, [r3, #32]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8a5b      	ldrh	r3, [r3, #18]
 8001472:	2200      	movs	r2, #0
 8001474:	4619      	mov	r1, r3
 8001476:	f006 f975 	bl	8007764 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f7ff ff9d 	bl	80013c8 <SX1278_write>
	for (i = 0; i < len; i++)
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]
 8001492:	e00b      	b.n	80014ac <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff ff91 	bl	80013c8 <SX1278_write>
	for (i = 0; i < len; i++)
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	3301      	adds	r3, #1
 80014aa:	75fb      	strb	r3, [r7, #23]
 80014ac:	7dfa      	ldrb	r2, [r7, #23]
 80014ae:	7abb      	ldrb	r3, [r7, #10]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d3ef      	bcc.n	8001494 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6a18      	ldr	r0, [r3, #32]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8a5b      	ldrh	r3, [r3, #18]
 80014bc:	2201      	movs	r2, #1
 80014be:	4619      	mov	r1, r3
 80014c0:	f006 f950 	bl	8007764 <HAL_GPIO_WritePin>
 80014c4:	e000      	b.n	80014c8 <SX1278_command_burst+0x78>
	if (len <= 1) return;
 80014c6:	bf00      	nop
}
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af02      	add	r7, sp, #8
 80014d4:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80014da:	2300      	movs	r3, #0
 80014dc:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 10);
 80014de:	f107 020e 	add.w	r2, r7, #14
 80014e2:	f107 010f 	add.w	r1, r7, #15
 80014e6:	230a      	movs	r3, #10
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f00a fd8a 	bl	800c006 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 80014f2:	bf00      	nop
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f00a ff28 	bl	800c34a <HAL_SPI_GetState>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d1f9      	bne.n	80014f4 <SX1278_read+0x26>

	return rxByte;
 8001500:	7bbb      	ldrb	r3, [r7, #14]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a18      	ldr	r0, [r3, #32]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	8a5b      	ldrh	r3, [r3, #18]
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	f006 f91f 	bl	8007764 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff4a 	bl	80013c8 <SX1278_write>
	recv = SX1278_read(inst->spi);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ffc8 	bl	80014ce <SX1278_read>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a18      	ldr	r0, [r3, #32]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	8a5b      	ldrh	r3, [r3, #18]
 800154a:	2201      	movs	r2, #1
 800154c:	4619      	mov	r1, r3
 800154e:	f006 f909 	bl	8007764 <HAL_GPIO_WritePin>

	return recv;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	461a      	mov	r2, r3
 8001568:	460b      	mov	r3, r1
 800156a:	72fb      	strb	r3, [r7, #11]
 800156c:	4613      	mov	r3, r2
 800156e:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001570:	7abb      	ldrb	r3, [r7, #10]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d92b      	bls.n	80015ce <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a18      	ldr	r0, [r3, #32]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8a5b      	ldrh	r3, [r3, #18]
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	f006 f8ef 	bl	8007764 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	7afa      	ldrb	r2, [r7, #11]
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff1a 	bl	80013c8 <SX1278_write>
	for (i = 0; i < len; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	75fb      	strb	r3, [r7, #23]
 8001598:	e00c      	b.n	80015b4 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	18d4      	adds	r4, r2, r3
 80015a4:	4608      	mov	r0, r1
 80015a6:	f7ff ff92 	bl	80014ce <SX1278_read>
 80015aa:	4603      	mov	r3, r0
 80015ac:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	3301      	adds	r3, #1
 80015b2:	75fb      	strb	r3, [r7, #23]
 80015b4:	7dfa      	ldrb	r2, [r7, #23]
 80015b6:	7abb      	ldrb	r3, [r7, #10]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d3ee      	bcc.n	800159a <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6a18      	ldr	r0, [r3, #32]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8a5b      	ldrh	r3, [r3, #18]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4619      	mov	r1, r3
 80015c8:	f006 f8cc 	bl	8007764 <HAL_GPIO_WritePin>
 80015cc:	e000      	b.n	80015d0 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 80015ce:	bf00      	nop
}
 80015d0:	371c      	adds	r7, #28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
	...

080015d8 <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	inst->active = false;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
	SX1278_reset(inst);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fb02 	bl	8001bf2 <SX1278_reset>

	//unable to establish the connection with module
	uint8_t recvVersion = SX1278_read_address(inst, REG_LR_VERSION);
 80015ee:	2142      	movs	r1, #66	; 0x42
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff8a 	bl	800150a <SX1278_read_address>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]
	//printLen = s//printf(//printBuffer, "Recv: %x\r\n", recvVersion);
	//printv(//printBuffer, //printLen);
	if (recvVersion != 0x12)
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	2b12      	cmp	r3, #18
 80015fe:	d001      	beq.n	8001604 <SX1278_init+0x2c>
	{
		//println("[LoRa] Abort: Unable to access version register, SPI not working!");
		return false;
 8001600:	2300      	movs	r3, #0
 8001602:	e0d7      	b.n	80017b4 <SX1278_init+0x1dc>
	}

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 fad4 	bl	8001bb2 <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 800160a:	2288      	movs	r2, #136	; 0x88
 800160c:	2101      	movs	r1, #1
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fef1 	bl	80013f6 <SX1278_command>

	//SX1278_command(inst, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	frf = inst->config.frequency;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f04f 0400 	mov.w	r4, #0
 800161c:	4a67      	ldr	r2, [pc, #412]	; (80017bc <SX1278_init+0x1e4>)
 800161e:	e9c2 3400 	strd	r3, r4, [r2]
	frf <<= 14;
 8001622:	4b66      	ldr	r3, [pc, #408]	; (80017bc <SX1278_init+0x1e4>)
 8001624:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	f04f 0400 	mov.w	r4, #0
 8001630:	0394      	lsls	r4, r2, #14
 8001632:	ea44 4491 	orr.w	r4, r4, r1, lsr #18
 8001636:	038b      	lsls	r3, r1, #14
 8001638:	4a60      	ldr	r2, [pc, #384]	; (80017bc <SX1278_init+0x1e4>)
 800163a:	e9c2 3400 	strd	r3, r4, [r2]
	frf /= 1000000;
 800163e:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <SX1278_init+0x1e4>)
 8001640:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001644:	4a5e      	ldr	r2, [pc, #376]	; (80017c0 <SX1278_init+0x1e8>)
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	f7ff fb7d 	bl	8000d48 <__aeabi_uldivmod>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	4a5a      	ldr	r2, [pc, #360]	; (80017bc <SX1278_init+0x1e4>)
 8001654:	e9c2 3400 	strd	r3, r4, [r2]
	memcpy(frf_bytes, &frf, 8);
 8001658:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <SX1278_init+0x1ec>)
 800165a:	4a58      	ldr	r2, [pc, #352]	; (80017bc <SX1278_init+0x1e4>)
 800165c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001660:	e883 0003 	stmia.w	r3, {r0, r1}
	SX1278_command(inst, LR_RegFrMsb, frf_bytes[2]);
 8001664:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <SX1278_init+0x1ec>)
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	461a      	mov	r2, r3
 800166a:	2106      	movs	r1, #6
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fec2 	bl	80013f6 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, frf_bytes[1]);
 8001672:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <SX1278_init+0x1ec>)
 8001674:	785b      	ldrb	r3, [r3, #1]
 8001676:	461a      	mov	r2, r3
 8001678:	2107      	movs	r1, #7
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff febb 	bl	80013f6 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, frf_bytes[0]);
 8001680:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <SX1278_init+0x1ec>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	2108      	movs	r1, #8
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff feb4 	bl	80013f6 <SX1278_command>
	//printLen = s//printf(//printBuffer, "[LoRa] Frequency setting: %x_%x_%x\r\n", frf_bytes[2], frf_bytes[1], frf_bytes[0]);
	//printv(//printBuffer, //printLen);

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);	//Setting transmit power
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	791b      	ldrb	r3, [r3, #4]
 8001692:	461a      	mov	r2, r3
 8001694:	2109      	movs	r1, #9
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fead 	bl	80013f6 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 800169c:	222b      	movs	r2, #43	; 0x2b
 800169e:	210b      	movs	r1, #11
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fea8 	bl	80013f6 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 80016a6:	2223      	movs	r2, #35	; 0x23
 80016a8:	210c      	movs	r1, #12
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fea3 	bl	80013f6 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 80016b0:	2287      	movs	r2, #135	; 0x87
 80016b2:	214d      	movs	r1, #77	; 0x4d
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fe9e 	bl	80013f6 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 80016ba:	2200      	movs	r2, #0
 80016bc:	2124      	movs	r1, #36	; 0x24
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fe99 	bl	80013f6 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	795b      	ldrb	r3, [r3, #5]
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	d139      	bne.n	8001740 <SX1278_init+0x168>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	79db      	ldrb	r3, [r3, #7]
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	799b      	ldrb	r3, [r3, #6]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	211d      	movs	r1, #29
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fe84 	bl	80013f6 <SX1278_command>
		//SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	795b      	ldrb	r3, [r3, #5]
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7a1b      	ldrb	r3, [r3, #8]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	4413      	add	r3, r2
 8001700:	b2db      	uxtb	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	211e      	movs	r1, #30
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fe75 	bl	80013f6 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 800170c:	2131      	movs	r1, #49	; 0x31
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fefb 	bl	800150a <SX1278_read_address>
 8001714:	4603      	mov	r3, r0
 8001716:	73bb      	strb	r3, [r7, #14]
		tmp &= 0xF8;
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	f023 0307 	bic.w	r3, r3, #7
 800171e:	73bb      	strb	r3, [r7, #14]
		tmp |= 0x05;
 8001720:	7bbb      	ldrb	r3, [r7, #14]
 8001722:	f043 0305 	orr.w	r3, r3, #5
 8001726:	73bb      	strb	r3, [r7, #14]
		SX1278_command(inst, 0x31, tmp);
 8001728:	7bbb      	ldrb	r3, [r7, #14]
 800172a:	461a      	mov	r2, r3
 800172c:	2131      	movs	r1, #49	; 0x31
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fe61 	bl	80013f6 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 8001734:	220c      	movs	r2, #12
 8001736:	2137      	movs	r1, #55	; 0x37
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fe5c 	bl	80013f6 <SX1278_command>
 800173e:	e01d      	b.n	800177c <SX1278_init+0x1a4>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	79db      	ldrb	r3, [r3, #7]
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	b2da      	uxtb	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	799b      	ldrb	r3, [r3, #6]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4413      	add	r3, r2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	211d      	movs	r1, #29
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fe4c 	bl	80013f6 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	795b      	ldrb	r3, [r3, #5]
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	b2da      	uxtb	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7a1b      	ldrb	r3, [r3, #8]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4413      	add	r3, r2
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	211e      	movs	r1, #30
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fe3d 	bl	80013f6 <SX1278_command>
	}

	//SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
	SX1278_command(inst, LR_RegSymbTimeoutLsb, 0x64);	//recievier timeout value [timeout = symbtimeout*ts]
 800177c:	2264      	movs	r2, #100	; 0x64
 800177e:	211f      	movs	r1, #31
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fe38 	bl	80013f6 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 8001786:	2200      	movs	r2, #0
 8001788:	2120      	movs	r1, #32
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fe33 	bl	80013f6 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 8001790:	220c      	movs	r2, #12
 8001792:	2121      	movs	r1, #33	; 0x21
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fe2e 	bl	80013f6 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 800179a:	2201      	movs	r2, #1
 800179c:	2141      	movs	r1, #65	; 0x41
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fe29 	bl	80013f6 <SX1278_command>

	SX1278_standby(inst);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fa14 	bl	8001bd2 <SX1278_standby>

	inst->active = true;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
	return true;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}
 80017bc:	20000b90 	.word	0x20000b90
 80017c0:	000f4240 	.word	0x000f4240
 80017c4:	20000b98 	.word	0x20000b98

080017c8 <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	4613      	mov	r3, r2
 80017d4:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	7b1b      	ldrb	r3, [r3, #12]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d12b      	bne.n	8001836 <SX1278_transmit+0x6e>
	{
		//println("[LoRa] Starting transmission...");
		inst->txDone = false;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		SX1278_tx_mode(inst);
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f969 	bl	8001abe <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f86c 	bl	80018d0 <SX1278_tx_input>
		SX1278_tx_push(inst);
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 f898 	bl	800192e <SX1278_tx_push>

		if (inst->useDio0IRQ)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <SX1278_transmit+0x4c>
		{
			//waiting for interrupt
			//println("[LoRa] Transmission pushed! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001810:	2301      	movs	r3, #1
 8001812:	e011      	b.n	8001838 <SX1278_transmit+0x70>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001814:	bf00      	nop
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8a1b      	ldrh	r3, [r3, #16]
 800181e:	4619      	mov	r1, r3
 8001820:	4610      	mov	r0, r2
 8001822:	f005 ff87 	bl	8007734 <HAL_GPIO_ReadPin>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f4      	beq.n	8001816 <SX1278_transmit+0x4e>
			return SX1278_tx_finish(inst);
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 f894 	bl	800195a <SX1278_tx_finish>
 8001832:	4603      	mov	r3, r0
 8001834:	e000      	b.n	8001838 <SX1278_transmit+0x70>
	}
	else
	{
		//println("[LoRa] Cannot transmit...standby");
		return false;
 8001836:	2300      	movs	r3, #0
	}
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7b1b      	ldrb	r3, [r3, #12]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d13a      	bne.n	80018c6 <SX1278_receive+0x86>
	{
		//println("[LoRa] Starting receiving...");
		SX1278_rx_mode(inst);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f969 	bl	8001b28 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00a      	beq.n	8001876 <SX1278_receive+0x36>
		{
			//waiting for interrupt
			//println("[LoRa] Receiver set! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			inst->rxStart = millis();
 8001868:	f7ff fd9e 	bl	80013a8 <millis>
 800186c:	4602      	mov	r2, r0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 8001872:	2301      	movs	r3, #1
 8001874:	e028      	b.n	80018c8 <SX1278_receive+0x88>
			uint32_t recvStart = millis();
 8001876:	f7ff fd97 	bl	80013a8 <millis>
 800187a:	60f8      	str	r0, [r7, #12]
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 800187c:	e011      	b.n	80018a2 <SX1278_receive+0x62>
				if (millis() - recvStart >= inst->config.rxTimeoutSymb)
 800187e:	f7ff fd93 	bl	80013a8 <millis>
 8001882:	4602      	mov	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	8952      	ldrh	r2, [r2, #10]
 800188c:	4293      	cmp	r3, r2
 800188e:	d308      	bcc.n	80018a2 <SX1278_receive+0x62>
					SX1278_rx_get_packet(inst);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f89a 	bl	80019ca <SX1278_rx_get_packet>
					inst->rxTimeout = true;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					return false;
 800189e:	2300      	movs	r3, #0
 80018a0:	e012      	b.n	80018c8 <SX1278_receive+0x88>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69da      	ldr	r2, [r3, #28]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	8a1b      	ldrh	r3, [r3, #16]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4610      	mov	r0, r2
 80018ae:	f005 ff41 	bl	8007734 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0e2      	beq.n	800187e <SX1278_receive+0x3e>
			SX1278_rx_get_packet(inst);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f886 	bl	80019ca <SX1278_rx_get_packet>
			return inst->newPacket;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018c4:	e000      	b.n	80018c8 <SX1278_receive+0x88>
	}
	else
	{
		//println("[LoRa] Cannot receive...standby");
		return false;
 80018c6:	2300      	movs	r3, #0
	}
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	4613      	mov	r3, r2
 80018dc:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	461a      	mov	r2, r3
 80018e2:	2122      	movs	r1, #34	; 0x22
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7ff fd86 	bl	80013f6 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	2100      	movs	r1, #0
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff fdad 	bl	8001450 <SX1278_command_burst>

	//sprintf(inst->lastPacket, (char*)txBuffer);
	uint8_t l;
	for (l = 0; l < length; l++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	75fb      	strb	r3, [r7, #23]
 80018fa:	e00c      	b.n	8001916 <SX1278_tx_input+0x46>
	{
		inst->txBuffer[l] = txBuffer[l];
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	441a      	add	r2, r3
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	7811      	ldrb	r1, [r2, #0]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	460a      	mov	r2, r1
 800190c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	for (l = 0; l < length; l++)
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	3301      	adds	r3, #1
 8001914:	75fb      	strb	r3, [r7, #23]
 8001916:	7dfa      	ldrb	r2, [r7, #23]
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3ee      	bcc.n	80018fc <SX1278_tx_input+0x2c>
	}
	inst->txLen = length;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 8001936:	228b      	movs	r2, #139	; 0x8b
 8001938:	2101      	movs	r1, #1
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fd5b 	bl	80013f6 <SX1278_command>
	inst->rxStart = millis();	// Cringy but forces interrupt if something goes wrong
 8001940:	f7ff fd32 	bl	80013a8 <millis>
 8001944:	4602      	mov	r2, r0
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
	inst->pendingIRQ = true;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001962:	2112      	movs	r1, #18
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fdd0 	bl	800150a <SX1278_read_address>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	bfcc      	ite	gt
 8001982:	2301      	movgt	r3, #1
 8001984:	2300      	movle	r3, #0
 8001986:	b2da      	uxtb	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	if (inst->txDone) inst->newTxData = true;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <SX1278_tx_finish+0x46>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	inst->txCount++;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019a4:	3301      	adds	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	87da      	strh	r2, [r3, #62]	; 0x3e
	inst->pendingIRQ = false;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	SX1278_clearLoRaIrq(inst);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f9ff 	bl	8001db8 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f909 	bl	8001bd2 <SX1278_standby>

	//printLen = s//printf(//printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
	//printv(//printBuffer, //printLen);
	return true;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f9ad 	bl	8001d32 <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3348      	adds	r3, #72	; 0x48
 80019dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f017 f8c3 	bl	8018b6e <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 80019e8:	2110      	movs	r1, #16
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fd8d 	bl	800150a <SX1278_read_address>
 80019f0:	4603      	mov	r3, r0
 80019f2:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 80019f4:	7bbb      	ldrb	r3, [r7, #14]
 80019f6:	461a      	mov	r2, r3
 80019f8:	210d      	movs	r1, #13
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fcfb 	bl	80013f6 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	795b      	ldrb	r3, [r3, #5]
 8001a04:	2b06      	cmp	r3, #6
 8001a06:	d104      	bne.n	8001a12 <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e005      	b.n	8001a1e <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 8001a12:	2113      	movs	r1, #19
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fd78 	bl	800150a <SX1278_read_address>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	2100      	movs	r1, #0
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff fd97 	bl	800155c <SX1278_read_burst>

	inst->newPacket = inst->rxDone && !inst->rxTimeout && (!inst->crcError || LR_VALIDATE_CRCERROR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d011      	beq.n	8001a5c <SX1278_rx_get_packet+0x92>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001a3e:	f083 0301 	eor.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d009      	beq.n	8001a5c <SX1278_rx_get_packet+0x92>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a4e:	f083 0301 	eor.w	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SX1278_rx_get_packet+0x92>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <SX1278_rx_get_packet+0x94>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (inst->newPacket) { inst->newRxData = true; inst->rxCount++; }
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d009      	beq.n	8001a88 <SX1278_rx_get_packet+0xbe>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001a80:	3301      	adds	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	879a      	strh	r2, [r3, #60]	; 0x3c
	inst->rssi = SX1278_getRSSI(inst);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f9a2 	bl	8001dd2 <SX1278_getRSSI>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34
	inst->rxLen = packet_size;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	SX1278_clearLoRaIrq(inst);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f98b 	bl	8001db8 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f895 	bl	8001bd2 <SX1278_standby>


	//sprintf(inst->lastPacket, (char*)inst->rxBuffer);


	if (inst->rxTimeout)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001aae:	2b00      	cmp	r3, #0
	{
		//printLen = s//printf(//printBuffer, "[LoRa] Valid packet received!\r\n");
	}
	//printv(//printBuffer, //printLen);

	return inst->newPacket;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Transmit mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f976 	bl	8001db8 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8001acc:	2241      	movs	r2, #65	; 0x41
 8001ace:	2140      	movs	r1, #64	; 0x40
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fc90 	bl	80013f6 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001ad6:	22f7      	movs	r2, #247	; 0xf7
 8001ad8:	2111      	movs	r1, #17
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fc8b 	bl	80013f6 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001ae0:	210e      	movs	r1, #14
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fd11 	bl	800150a <SX1278_read_address>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	461a      	mov	r2, r3
 8001af0:	210d      	movs	r1, #13
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fc7f 	bl	80013f6 <SX1278_command>

	inst->txLen = 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	inst->txDone = false;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->mode = TX;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	731a      	strb	r2, [r3, #12]
	inst->rxTimeout = false;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxStart = millis();
 8001b16:	f7ff fc47 	bl	80013a8 <millis>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	SX1278_standby(inst);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f84e 	bl	8001bd2 <SX1278_standby>
	//println("[LoRa] Goes into Receive mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f93e 	bl	8001db8 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2140      	movs	r1, #64	; 0x40
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff fc58 	bl	80013f6 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 8001b46:	221f      	movs	r2, #31
 8001b48:	2111      	movs	r1, #17
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fc53 	bl	80013f6 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 8001b50:	210f      	movs	r1, #15
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fcd9 	bl	800150a <SX1278_read_address>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	210d      	movs	r1, #13
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fc47 	bl	80013f6 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 8001b68:	228d      	movs	r2, #141	; 0x8d
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fc42 	bl	80013f6 <SX1278_command>

	inst->crcError = false;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxLen = 0;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	inst->newPacket = false;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxDone = false;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->mode = RX;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2203      	movs	r2, #3
 8001b96:	731a      	strb	r2, [r3, #12]
	inst->rxTimeout = false;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxStart = millis();
 8001ba0:	f7ff fc02 	bl	80013a8 <millis>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
	//println("[LoRa] Finished setting RX mode.");
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Sleep mode.");
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001bba:	2208      	movs	r2, #8
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fc19 	bl	80013f6 <SX1278_command>
	inst->mode = SLEEP;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	731a      	strb	r2, [r3, #12]
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Standby mode.");
	SX1278_command(inst, LR_RegOpMode, 0x09);
 8001bda:	2209      	movs	r2, #9
 8001bdc:	2101      	movs	r1, #1
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fc09 	bl	80013f6 <SX1278_command>
	inst->mode = STANDBY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	731a      	strb	r2, [r3, #12]
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <SX1278_reset>:

void SX1278_reset(SX1278* inst) {
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Resetting...");
	inst->newPacket = true;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxTimeout = false;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxDone = false;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->crcError = false;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = 1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	635a      	str	r2, [r3, #52]	; 0x34
	inst->newPacket = false;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->pendingIRQ = false;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	inst->txLen = 0;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	inst->rxLen = 0;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	inst->mode = SLEEP;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, HIGH);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a18      	ldr	r0, [r3, #32]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	8a5b      	ldrh	r3, [r3, #18]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4619      	mov	r1, r3
 8001c52:	f005 fd87 	bl	8007764 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, LOW);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6998      	ldr	r0, [r3, #24]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	89db      	ldrh	r3, [r3, #14]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4619      	mov	r1, r3
 8001c62:	f005 fd7f 	bl	8007764 <HAL_GPIO_WritePin>
	delay(1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f004 fefe 	bl	8006a68 <HAL_Delay>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, HIGH);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6998      	ldr	r0, [r3, #24]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	89db      	ldrh	r3, [r3, #14]
 8001c74:	2201      	movs	r2, #1
 8001c76:	4619      	mov	r1, r3
 8001c78:	f005 fd74 	bl	8007764 <HAL_GPIO_WritePin>
	delay(100);
 8001c7c:	2064      	movs	r0, #100	; 0x64
 8001c7e:	f004 fef3 	bl	8006a68 <HAL_Delay>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <SX1278_dio0_IRQ>:

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01e      	beq.n	8001cda <SX1278_dio0_IRQ+0x50>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d019      	beq.n	8001cda <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7b1b      	ldrb	r3, [r3, #12]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d104      	bne.n	8001cb8 <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fe53 	bl	800195a <SX1278_tx_finish>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	e011      	b.n	8001cdc <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7b1b      	ldrb	r3, [r3, #12]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d104      	bne.n	8001cca <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff fe82 	bl	80019ca <SX1278_rx_get_packet>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	e008      	b.n	8001cdc <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f874 	bl	8001db8 <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff7e 	bl	8001bd2 <SX1278_standby>
			return false;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 8001cda:	2300      	movs	r3, #0
	}
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <SX1278_intTimeout>:

bool SX1278_intTimeout(SX1278* inst)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	if (((millis() - inst->rxStart >= inst->config.rxTimeoutSymb) && inst->mode == RX && inst->pendingIRQ))
 8001cec:	f7ff fb5c 	bl	80013a8 <millis>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	8952      	ldrh	r2, [r2, #10]
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d313      	bcc.n	8001d28 <SX1278_intTimeout+0x44>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7b1b      	ldrb	r3, [r3, #12]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d10f      	bne.n	8001d28 <SX1278_intTimeout+0x44>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00a      	beq.n	8001d28 <SX1278_intTimeout+0x44>
	{
		//println("[RADIO] RX timeout");
		inst->rxTimeout = true;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		inst->rxStart = millis();
 8001d1a:	f7ff fb45 	bl	80013a8 <millis>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40

		return true;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <SX1278_intTimeout+0x46>
	}
	return false;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001d3a:	2112      	movs	r1, #18
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fbe4 	bl	800150a <SX1278_read_address>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bfcc      	ite	gt
 8001d5a:	2301      	movgt	r3, #1
 8001d5c:	2300      	movle	r3, #0
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	// || inst->rxDone ##################################################### might cause error when reading this value!!!!!!!!!!!!!!!!!!!!!!!
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00) || !(inst->rxDone);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	dc07      	bgt.n	8001d84 <SX1278_update_IRQ_status+0x52>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001d7a:	f083 0301 	eor.w	r3, r3, #1
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SX1278_update_IRQ_status+0x56>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <SX1278_update_IRQ_status+0x58>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bfcc      	ite	gt
 8001da4:	2301      	movgt	r3, #1
 8001da6:	2300      	movle	r3, #0
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001dc0:	22ff      	movs	r2, #255	; 0xff
 8001dc2:	2112      	movs	r1, #18
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fb16 	bl	80013f6 <SX1278_command>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001dda:	211a      	movs	r1, #26
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fb94 	bl	800150a <SX1278_read_address>
 8001de2:	4603      	mov	r3, r0
 8001de4:	3ba4      	subs	r3, #164	; 0xa4
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <BMP280_readBytes>:
#include "bmp280.h"
#include "run.h"
#include "config.h"

static bool BMP280_readBytes(BMP280* inst, uint8_t mem_addr, uint8_t* data, uint8_t len)
{
 8001dee:	b590      	push	{r4, r7, lr}
 8001df0:	b089      	sub	sp, #36	; 0x24
 8001df2:	af04      	add	r7, sp, #16
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	72fb      	strb	r3, [r7, #11]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	72bb      	strb	r3, [r7, #10]
	return (HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, len, 5) == HAL_OK);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8899      	ldrh	r1, [r3, #4]
 8001e0a:	7afb      	ldrb	r3, [r7, #11]
 8001e0c:	b29c      	uxth	r4, r3
 8001e0e:	7abb      	ldrb	r3, [r7, #10]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2205      	movs	r2, #5
 8001e14:	9202      	str	r2, [sp, #8]
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	4622      	mov	r2, r4
 8001e20:	f005 fef6 	bl	8007c10 <HAL_I2C_Mem_Read>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}

08001e38 <BMP280_writeByte>:
static bool BMP280_writeByte(BMP280* inst, uint8_t mem_addr, uint8_t data)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af04      	add	r7, sp, #16
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
 8001e44:	4613      	mov	r3, r2
 8001e46:	70bb      	strb	r3, [r7, #2]
	return (HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 5) == HAL_OK);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	8899      	ldrh	r1, [r3, #4]
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	2305      	movs	r3, #5
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	1cbb      	adds	r3, r7, #2
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2301      	movs	r3, #1
 8001e62:	f005 fddb 	bl	8007a1c <HAL_I2C_Mem_Write>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <BMP280_read16>:
static bool BMP280_read16(BMP280* inst, uint8_t mem_addr, uint16_t* data)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b08a      	sub	sp, #40	; 0x28
 8001e7e:	af04      	add	r7, sp, #16
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	460b      	mov	r3, r1
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_buff[2];

	if (HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, rx_buff, 2, 5) == HAL_OK)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8899      	ldrh	r1, [r3, #4]
 8001e90:	7afb      	ldrb	r3, [r7, #11]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	2305      	movs	r3, #5
 8001e96:	9302      	str	r3, [sp, #8]
 8001e98:	2302      	movs	r3, #2
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f005 feb4 	bl	8007c10 <HAL_I2C_Mem_Read>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10b      	bne.n	8001ec6 <BMP280_read16+0x4c>
	{
		*data = (uint16_t)((rx_buff[1] << 8) | rx_buff[0]);
 8001eae:	7d7b      	ldrb	r3, [r7, #21]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	7d3b      	ldrb	r3, [r7, #20]
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	801a      	strh	r2, [r3, #0]
		return true;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <BMP280_read16+0x4e>
	}
	else return false;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <read_calibration_data>:

static bool read_calibration_data(BMP280* inst)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	return(BMP280_read16(inst, 0x88, &inst->dig_T1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	331e      	adds	r3, #30
 8001edc:	461a      	mov	r2, r3
 8001ede:	2188      	movs	r1, #136	; 0x88
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ffca 	bl	8001e7a <BMP280_read16>
 8001ee6:	4603      	mov	r3, r0
		&& BMP280_read16(inst, 0x94, (uint16_t*) &inst->dig_P4)
		&& BMP280_read16(inst, 0x96, (uint16_t*) &inst->dig_P5)
		&& BMP280_read16(inst, 0x98, (uint16_t*) &inst->dig_P6)
		&& BMP280_read16(inst, 0x9a, (uint16_t*) &inst->dig_P7)
		&& BMP280_read16(inst, 0x9c, (uint16_t*) &inst->dig_P8)
		&& BMP280_read16(inst, 0x9e, (uint16_t*) &inst->dig_P9));
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d06f      	beq.n	8001fcc <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8a, (uint16_t*) &inst->dig_T2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3320      	adds	r3, #32
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	218a      	movs	r1, #138	; 0x8a
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ffc0 	bl	8001e7a <BMP280_read16>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d065      	beq.n	8001fcc <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8c, (uint16_t*) &inst->dig_T3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3322      	adds	r3, #34	; 0x22
 8001f04:	461a      	mov	r2, r3
 8001f06:	218c      	movs	r1, #140	; 0x8c
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ffb6 	bl	8001e7a <BMP280_read16>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d05b      	beq.n	8001fcc <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8e, &inst->dig_P1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3324      	adds	r3, #36	; 0x24
 8001f18:	461a      	mov	r2, r3
 8001f1a:	218e      	movs	r1, #142	; 0x8e
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ffac 	bl	8001e7a <BMP280_read16>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d051      	beq.n	8001fcc <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x90, (uint16_t*) &inst->dig_P2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3326      	adds	r3, #38	; 0x26
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2190      	movs	r1, #144	; 0x90
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ffa2 	bl	8001e7a <BMP280_read16>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d047      	beq.n	8001fcc <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x92, (uint16_t*) &inst->dig_P3)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3328      	adds	r3, #40	; 0x28
 8001f40:	461a      	mov	r2, r3
 8001f42:	2192      	movs	r1, #146	; 0x92
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff98 	bl	8001e7a <BMP280_read16>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d03d      	beq.n	8001fcc <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x94, (uint16_t*) &inst->dig_P4)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	332a      	adds	r3, #42	; 0x2a
 8001f54:	461a      	mov	r2, r3
 8001f56:	2194      	movs	r1, #148	; 0x94
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff8e 	bl	8001e7a <BMP280_read16>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d033      	beq.n	8001fcc <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x96, (uint16_t*) &inst->dig_P5)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	332c      	adds	r3, #44	; 0x2c
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2196      	movs	r1, #150	; 0x96
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff84 	bl	8001e7a <BMP280_read16>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d029      	beq.n	8001fcc <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x98, (uint16_t*) &inst->dig_P6)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	332e      	adds	r3, #46	; 0x2e
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2198      	movs	r1, #152	; 0x98
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff7a 	bl	8001e7a <BMP280_read16>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01f      	beq.n	8001fcc <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9a, (uint16_t*) &inst->dig_P7)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3330      	adds	r3, #48	; 0x30
 8001f90:	461a      	mov	r2, r3
 8001f92:	219a      	movs	r1, #154	; 0x9a
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff70 	bl	8001e7a <BMP280_read16>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d015      	beq.n	8001fcc <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9c, (uint16_t*) &inst->dig_P8)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3332      	adds	r3, #50	; 0x32
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	219c      	movs	r1, #156	; 0x9c
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff66 	bl	8001e7a <BMP280_read16>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00b      	beq.n	8001fcc <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9e, (uint16_t*) &inst->dig_P9));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3334      	adds	r3, #52	; 0x34
 8001fb8:	461a      	mov	r2, r3
 8001fba:	219e      	movs	r1, #158	; 0x9e
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff5c 	bl	8001e7a <BMP280_read16>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <read_calibration_data+0xfc>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <read_calibration_data+0xfe>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <compensate_temperature>:

static int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp, int32_t *fine_temp)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	10da      	asrs	r2, r3, #3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8bdb      	ldrh	r3, [r3, #30]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001ffe:	12db      	asrs	r3, r3, #11
 8002000:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	111b      	asrs	r3, r3, #4
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	8bd2      	ldrh	r2, [r2, #30]
 800200a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	1112      	asrs	r2, r2, #4
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	8bc9      	ldrh	r1, [r1, #30]
 8002014:	1a52      	subs	r2, r2, r1
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8002022:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8002026:	139b      	asrs	r3, r3, #14
 8002028:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	441a      	add	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3380      	adds	r3, #128	; 0x80
 8002040:	121b      	asrs	r3, r3, #8
}
 8002042:	4618      	mov	r0, r3
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <compensate_pressure>:

static uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press, int32_t fine_temp)
{
 800204e:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4619      	mov	r1, r3
 8002060:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002064:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8002068:	f142 34ff 	adc.w	r4, r2, #4294967295
 800206c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	6a3a      	ldr	r2, [r7, #32]
 8002074:	fb02 f203 	mul.w	r2, r2, r3
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	6a39      	ldr	r1, [r7, #32]
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	441a      	add	r2, r3
 8002082:	6a39      	ldr	r1, [r7, #32]
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	fba1 3403 	umull	r3, r4, r1, r3
 800208a:	4422      	add	r2, r4
 800208c:	4614      	mov	r4, r2
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 8002094:	b211      	sxth	r1, r2
 8002096:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800209a:	fb01 f504 	mul.w	r5, r1, r4
 800209e:	fb03 f002 	mul.w	r0, r3, r2
 80020a2:	4428      	add	r0, r5
 80020a4:	fba3 3401 	umull	r3, r4, r3, r1
 80020a8:	1902      	adds	r2, r0, r4
 80020aa:	4614      	mov	r4, r2
 80020ac:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80020b0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80020c0:	6a3a      	ldr	r2, [r7, #32]
 80020c2:	fb04 f102 	mul.w	r1, r4, r2
 80020c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c8:	fb03 f202 	mul.w	r2, r3, r2
 80020cc:	1888      	adds	r0, r1, r2
 80020ce:	6a3a      	ldr	r2, [r7, #32]
 80020d0:	fba2 1203 	umull	r1, r2, r2, r3
 80020d4:	1883      	adds	r3, r0, r2
 80020d6:	461a      	mov	r2, r3
 80020d8:	f04f 0500 	mov.w	r5, #0
 80020dc:	f04f 0600 	mov.w	r6, #0
 80020e0:	0456      	lsls	r6, r2, #17
 80020e2:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80020e6:	044d      	lsls	r5, r1, #17
 80020e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80020ec:	186b      	adds	r3, r5, r1
 80020ee:	eb46 0402 	adc.w	r4, r6, r2
 80020f2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80020fc:	b219      	sxth	r1, r3
 80020fe:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002102:	f04f 0500 	mov.w	r5, #0
 8002106:	f04f 0600 	mov.w	r6, #0
 800210a:	00ce      	lsls	r6, r1, #3
 800210c:	2500      	movs	r5, #0
 800210e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002112:	186b      	adds	r3, r5, r1
 8002114:	eb46 0402 	adc.w	r4, r6, r2
 8002118:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	6a3a      	ldr	r2, [r7, #32]
 8002120:	fb02 f203 	mul.w	r2, r2, r3
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	6a39      	ldr	r1, [r7, #32]
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	441a      	add	r2, r3
 800212e:	6a39      	ldr	r1, [r7, #32]
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	fba1 3403 	umull	r3, r4, r1, r3
 8002136:	4422      	add	r2, r4
 8002138:	4614      	mov	r4, r2
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
 8002140:	b211      	sxth	r1, r2
 8002142:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002146:	fb01 f504 	mul.w	r5, r1, r4
 800214a:	fb03 f002 	mul.w	r0, r3, r2
 800214e:	4428      	add	r0, r5
 8002150:	fba3 3401 	umull	r3, r4, r3, r1
 8002154:	1902      	adds	r2, r0, r4
 8002156:	4614      	mov	r4, r2
 8002158:	f04f 0100 	mov.w	r1, #0
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	0a19      	lsrs	r1, r3, #8
 8002162:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8002166:	1222      	asrs	r2, r4, #8
		 + ((var1 * (int64_t) inst->dig_P2) << 12);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800216e:	b21b      	sxth	r3, r3
 8002170:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002174:	6a38      	ldr	r0, [r7, #32]
 8002176:	fb04 f500 	mul.w	r5, r4, r0
 800217a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800217c:	fb03 f000 	mul.w	r0, r3, r0
 8002180:	4428      	add	r0, r5
 8002182:	6a3d      	ldr	r5, [r7, #32]
 8002184:	fba5 5603 	umull	r5, r6, r5, r3
 8002188:	1983      	adds	r3, r0, r6
 800218a:	461e      	mov	r6, r3
 800218c:	f04f 0b00 	mov.w	fp, #0
 8002190:	f04f 0c00 	mov.w	ip, #0
 8002194:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8002198:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 800219c:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 80021a0:	eb1b 0301 	adds.w	r3, fp, r1
 80021a4:	eb4c 0402 	adc.w	r4, ip, r2
 80021a8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 80021ac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80021b0:	1c19      	adds	r1, r3, #0
 80021b2:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	f04f 0400 	mov.w	r4, #0
 80021c0:	fb03 f502 	mul.w	r5, r3, r2
 80021c4:	fb01 f004 	mul.w	r0, r1, r4
 80021c8:	4428      	add	r0, r5
 80021ca:	fba1 3403 	umull	r3, r4, r1, r3
 80021ce:	1902      	adds	r2, r0, r4
 80021d0:	4614      	mov	r4, r2
 80021d2:	f04f 0100 	mov.w	r1, #0
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	1061      	asrs	r1, r4, #1
 80021dc:	17e2      	asrs	r2, r4, #31
 80021de:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 80021e2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80021e6:	4323      	orrs	r3, r4
 80021e8:	d101      	bne.n	80021ee <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80021ea:	2300      	movs	r3, #0
 80021ec:	e0d4      	b.n	8002398 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80021f4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80021f8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	ea4f 0963 	mov.w	r9, r3, asr #1
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8002208:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800220c:	4645      	mov	r5, r8
 800220e:	464e      	mov	r6, r9
 8002210:	1aed      	subs	r5, r5, r3
 8002212:	eb66 0604 	sbc.w	r6, r6, r4
 8002216:	46a8      	mov	r8, r5
 8002218:	46b1      	mov	r9, r6
 800221a:	eb18 0308 	adds.w	r3, r8, r8
 800221e:	eb49 0409 	adc.w	r4, r9, r9
 8002222:	4698      	mov	r8, r3
 8002224:	46a1      	mov	r9, r4
 8002226:	eb18 0805 	adds.w	r8, r8, r5
 800222a:	eb49 0906 	adc.w	r9, r9, r6
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800223a:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 800223e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8002242:	eb18 0801 	adds.w	r8, r8, r1
 8002246:	eb49 0902 	adc.w	r9, r9, r2
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002256:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800225a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800225e:	4688      	mov	r8, r1
 8002260:	4691      	mov	r9, r2
 8002262:	eb18 0805 	adds.w	r8, r8, r5
 8002266:	eb49 0906 	adc.w	r9, r9, r6
 800226a:	f04f 0100 	mov.w	r1, #0
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002276:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800227a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800227e:	4688      	mov	r8, r1
 8002280:	4691      	mov	r9, r2
 8002282:	eb18 0005 	adds.w	r0, r8, r5
 8002286:	eb49 0106 	adc.w	r1, r9, r6
 800228a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800228e:	f7fe fd0b 	bl	8000ca8 <__aeabi_ldivmod>
 8002292:	4603      	mov	r3, r0
 8002294:	460c      	mov	r4, r1
 8002296:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80022a0:	b219      	sxth	r1, r3
 80022a2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80022a6:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	f04f 0400 	mov.w	r4, #0
 80022b2:	0b6b      	lsrs	r3, r5, #13
 80022b4:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80022b8:	1374      	asrs	r4, r6, #13
 80022ba:	fb03 f502 	mul.w	r5, r3, r2
 80022be:	fb01 f004 	mul.w	r0, r1, r4
 80022c2:	4428      	add	r0, r5
 80022c4:	fba1 1203 	umull	r1, r2, r1, r3
 80022c8:	1883      	adds	r3, r0, r2
 80022ca:	461a      	mov	r2, r3
 80022cc:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	f04f 0400 	mov.w	r4, #0
 80022d8:	0b6b      	lsrs	r3, r5, #13
 80022da:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80022de:	1374      	asrs	r4, r6, #13
 80022e0:	fb03 f502 	mul.w	r5, r3, r2
 80022e4:	fb01 f004 	mul.w	r0, r1, r4
 80022e8:	4428      	add	r0, r5
 80022ea:	fba1 1203 	umull	r1, r2, r1, r3
 80022ee:	1883      	adds	r3, r0, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	f04f 0400 	mov.w	r4, #0
 80022fa:	0e4b      	lsrs	r3, r1, #25
 80022fc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002300:	1654      	asrs	r4, r2, #25
 8002302:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800230c:	b21b      	sxth	r3, r3
 800230e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	fb04 f102 	mul.w	r1, r4, r2
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	fb03 f202 	mul.w	r2, r3, r2
 800231e:	1888      	adds	r0, r1, r2
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	fba2 1203 	umull	r1, r2, r2, r3
 8002326:	1883      	adds	r3, r0, r2
 8002328:	461a      	mov	r2, r3
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	f04f 0400 	mov.w	r4, #0
 8002332:	0ccb      	lsrs	r3, r1, #19
 8002334:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002338:	14d4      	asrs	r4, r2, #19
 800233a:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 800233e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002342:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002346:	eb11 0803 	adds.w	r8, r1, r3
 800234a:	eb42 0904 	adc.w	r9, r2, r4
 800234e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002352:	eb13 0508 	adds.w	r5, r3, r8
 8002356:	eb44 0609 	adc.w	r6, r4, r9
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	0a29      	lsrs	r1, r5, #8
 8002364:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8002368:	1232      	asrs	r2, r6, #8
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002370:	b21d      	sxth	r5, r3
 8002372:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002376:	f04f 0800 	mov.w	r8, #0
 800237a:	f04f 0900 	mov.w	r9, #0
 800237e:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002382:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8002386:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800238a:	eb18 0301 	adds.w	r3, r8, r1
 800238e:	eb49 0402 	adc.w	r4, r9, r2
 8002392:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8002396:	693b      	ldr	r3, [r7, #16]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

080023a2 <bmp280_reset>:

void bmp280_reset(BMP280* inst)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
	// soft reset
	BMP280_writeByte(inst, BMP280_REG_RESET, BMP280_RESET_VALUE);
 80023aa:	22b6      	movs	r2, #182	; 0xb6
 80023ac:	21e0      	movs	r1, #224	; 0xe0
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fd42 	bl	8001e38 <BMP280_writeByte>
	delay(100);
 80023b4:	2064      	movs	r0, #100	; 0x64
 80023b6:	f004 fb57 	bl	8006a68 <HAL_Delay>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <bmp280_present>:

bool bmp280_present(BMP280* inst, uint8_t trials)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	70fb      	strb	r3, [r7, #3]
	// request and verify chip id
	uint8_t attempts = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
	do
	{
		bmp280_reset(inst);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffe5 	bl	80023a2 <bmp280_reset>
		uint8_t who[1] = { 0x00 };
 80023d8:	2300      	movs	r3, #0
 80023da:	733b      	strb	r3, [r7, #12]
		BMP280_readBytes(inst, BMP280_REG_ID, who, 1);
 80023dc:	f107 020c 	add.w	r2, r7, #12
 80023e0:	2301      	movs	r3, #1
 80023e2:	21d0      	movs	r1, #208	; 0xd0
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff fd02 	bl	8001dee <BMP280_readBytes>
		if (who[0] == BMP280_CHIP_ID) return true;
 80023ea:	7b3b      	ldrb	r3, [r7, #12]
 80023ec:	2b58      	cmp	r3, #88	; 0x58
 80023ee:	d101      	bne.n	80023f4 <bmp280_present+0x32>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e00e      	b.n	8002412 <bmp280_present+0x50>
		else
		{
			attempts++;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	3301      	adds	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
			delay(1000);
 80023fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023fe:	f004 fb33 	bl	8006a68 <HAL_Delay>
		}
	} while (attempts <= trials);
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	429a      	cmp	r2, r3
 8002408:	d9e3      	bls.n	80023d2 <bmp280_present+0x10>
	inst->active = false;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
	return false;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <bmp280_init>:

bool bmp280_init(BMP280* inst, BMP280_config* params)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
	uint8_t temp_data[1];	// nasty temporary byte, used for everything
	inst->active = false;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	771a      	strb	r2, [r3, #28]
	inst->params = *params;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	3306      	adds	r3, #6
 8002430:	6811      	ldr	r1, [r2, #0]
 8002432:	6019      	str	r1, [r3, #0]
 8002434:	7912      	ldrb	r2, [r2, #4]
 8002436:	711a      	strb	r2, [r3, #4]

	if (!bmp280_present(inst, 1)) return false;
 8002438:	2101      	movs	r1, #1
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ffc1 	bl	80023c2 <bmp280_present>
 8002440:	4603      	mov	r3, r0
 8002442:	f083 0301 	eor.w	r3, r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <bmp280_init+0x36>
 800244c:	2300      	movs	r3, #0
 800244e:	e064      	b.n	800251a <bmp280_init+0x100>
	bmp280_reset(inst);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ffa6 	bl	80023a2 <bmp280_reset>

	while (!(BMP280_readBytes(inst, BMP280_REG_STATUS, temp_data, 1) && (temp_data[0] & 0x01) == 0)); // wait until finished copying over the NVM data
 8002456:	bf00      	nop
 8002458:	f107 020c 	add.w	r2, r7, #12
 800245c:	2301      	movs	r3, #1
 800245e:	21f3      	movs	r1, #243	; 0xf3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff fcc4 	bl	8001dee <BMP280_readBytes>
 8002466:	4603      	mov	r3, r0
 8002468:	f083 0301 	eor.w	r3, r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f2      	bne.n	8002458 <bmp280_init+0x3e>
 8002472:	7b3b      	ldrb	r3, [r7, #12]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ed      	bne.n	8002458 <bmp280_init+0x3e>

	if (!read_calibration_data(inst)) return false;
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff fd27 	bl	8001ed0 <read_calibration_data>
 8002482:	4603      	mov	r3, r0
 8002484:	f083 0301 	eor.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <bmp280_init+0x78>
 800248e:	2300      	movs	r3, #0
 8002490:	e043      	b.n	800251a <bmp280_init+0x100>

	// Setting parameters
	temp_data[0] = (params->standby << 5) | (params->filter << 2);	// config byte
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	791b      	ldrb	r3, [r3, #4]
 8002496:	015b      	lsls	r3, r3, #5
 8002498:	b25a      	sxtb	r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	785b      	ldrb	r3, [r3, #1]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b25b      	sxtb	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	733b      	strb	r3, [r7, #12]
	if (!BMP280_writeByte(inst, BMP280_REG_CONFIG, temp_data[0])) return false;
 80024aa:	7b3b      	ldrb	r3, [r7, #12]
 80024ac:	461a      	mov	r2, r3
 80024ae:	21f5      	movs	r1, #245	; 0xf5
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fcc1 	bl	8001e38 <BMP280_writeByte>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f083 0301 	eor.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <bmp280_init+0xac>
 80024c2:	2300      	movs	r3, #0
 80024c4:	e029      	b.n	800251a <bmp280_init+0x100>

	if (params->mode == BMP280_MODE_FORCED) params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d102      	bne.n	80024d4 <bmp280_init+0xba>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
	temp_data[0] = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode); // ctrl byte
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	78db      	ldrb	r3, [r3, #3]
 80024d8:	015b      	lsls	r3, r3, #5
 80024da:	b25a      	sxtb	r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	789b      	ldrb	r3, [r3, #2]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	b25b      	sxtb	r3, r3
 80024e4:	4313      	orrs	r3, r2
 80024e6:	b25a      	sxtb	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b25b      	sxtb	r3, r3
 80024ee:	4313      	orrs	r3, r2
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	733b      	strb	r3, [r7, #12]
	if (!BMP280_writeByte(inst, BMP280_REG_CTRL, temp_data[0])) return false;
 80024f6:	7b3b      	ldrb	r3, [r7, #12]
 80024f8:	461a      	mov	r2, r3
 80024fa:	21f4      	movs	r1, #244	; 0xf4
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fc9b 	bl	8001e38 <BMP280_writeByte>
 8002502:	4603      	mov	r3, r0
 8002504:	f083 0301 	eor.w	r3, r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <bmp280_init+0xf8>
 800250e:	2300      	movs	r3, #0
 8002510:	e003      	b.n	800251a <bmp280_init+0x100>

	inst->active = true;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	771a      	strb	r2, [r3, #28]
	return true;
 8002518:	2301      	movs	r3, #1
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	0000      	movs	r0, r0
 8002524:	0000      	movs	r0, r0
	...

08002528 <bmp280_update>:

bool bmp280_update(BMP280 *inst)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	size_t size = 6;
 8002530:	2306      	movs	r3, #6
 8002532:	61fb      	str	r3, [r7, #28]
	if (!BMP280_readBytes(inst, 0xf7, data, size)) return false;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f107 020c 	add.w	r2, r7, #12
 800253c:	21f7      	movs	r1, #247	; 0xf7
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fc55 	bl	8001dee <BMP280_readBytes>
 8002544:	4603      	mov	r3, r0
 8002546:	f083 0301 	eor.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <bmp280_update+0x2c>
 8002550:	2300      	movs	r3, #0
 8002552:	e065      	b.n	8002620 <bmp280_update+0xf8>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002554:	7b3b      	ldrb	r3, [r7, #12]
 8002556:	031a      	lsls	r2, r3, #12
 8002558:	7b7b      	ldrb	r3, [r7, #13]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	4313      	orrs	r3, r2
 800255e:	7bba      	ldrb	r2, [r7, #14]
 8002560:	0912      	lsrs	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	031a      	lsls	r2, r3, #12
 800256c:	7c3b      	ldrb	r3, [r7, #16]
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	4313      	orrs	r3, r2
 8002572:	7c7a      	ldrb	r2, [r7, #17]
 8002574:	0912      	lsrs	r2, r2, #4
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]

	int32_t fine_temp;
	inst->temperature = (float)(compensate_temperature(inst, adc_temp, &fine_temp)) / 100.0;
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	461a      	mov	r2, r3
 8002582:	6979      	ldr	r1, [r7, #20]
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fd29 	bl	8001fdc <compensate_temperature>
 800258a:	ee07 0a90 	vmov	s15, r0
 800258e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002592:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002638 <bmp280_update+0x110>
 8002596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->pressure = (float)(compensate_pressure(inst, adc_pressure, fine_temp)) / 25600.0;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	461a      	mov	r2, r3
 80025a4:	69b9      	ldr	r1, [r7, #24]
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fd51 	bl	800204e <compensate_pressure>
 80025ac:	ee07 0a90 	vmov	s15, r0
 80025b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025b4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800263c <bmp280_update+0x114>
 80025b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	edc3 7a03 	vstr	s15, [r3, #12]
	inst->altitude = 44330 * (1.0 - pow(inst->pressure / SEA_PRESSURE, 0.1903));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80025c8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002640 <bmp280_update+0x118>
 80025cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025d0:	ee16 0a90 	vmov	r0, s13
 80025d4:	f7fd ffc8 	bl	8000568 <__aeabi_f2d>
 80025d8:	4603      	mov	r3, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002628 <bmp280_update+0x100>
 80025e0:	ec44 3b10 	vmov	d0, r3, r4
 80025e4:	f01a f9be 	bl	801c964 <pow>
 80025e8:	ec54 3b10 	vmov	r3, r4, d0
 80025ec:	461a      	mov	r2, r3
 80025ee:	4623      	mov	r3, r4
 80025f0:	f04f 0000 	mov.w	r0, #0
 80025f4:	4913      	ldr	r1, [pc, #76]	; (8002644 <bmp280_update+0x11c>)
 80025f6:	f7fd fe57 	bl	80002a8 <__aeabi_dsub>
 80025fa:	4603      	mov	r3, r0
 80025fc:	460c      	mov	r4, r1
 80025fe:	4618      	mov	r0, r3
 8002600:	4621      	mov	r1, r4
 8002602:	a30b      	add	r3, pc, #44	; (adr r3, 8002630 <bmp280_update+0x108>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f7fe f806 	bl	8000618 <__aeabi_dmul>
 800260c:	4603      	mov	r3, r0
 800260e:	460c      	mov	r4, r1
 8002610:	4618      	mov	r0, r3
 8002612:	4621      	mov	r1, r4
 8002614:	f7fe faf8 	bl	8000c08 <__aeabi_d2f>
 8002618:	4602      	mov	r2, r0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	615a      	str	r2, [r3, #20]

	return true;
 800261e:	2301      	movs	r3, #1
}
 8002620:	4618      	mov	r0, r3
 8002622:	3724      	adds	r7, #36	; 0x24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd90      	pop	{r4, r7, pc}
 8002628:	1a36e2eb 	.word	0x1a36e2eb
 800262c:	3fc85bc0 	.word	0x3fc85bc0
 8002630:	00000000 	.word	0x00000000
 8002634:	40e5a540 	.word	0x40e5a540
 8002638:	42c80000 	.word	0x42c80000
 800263c:	46c80000 	.word	0x46c80000
 8002640:	447a8000 	.word	0x447a8000
 8002644:	3ff00000 	.word	0x3ff00000

08002648 <millis>:
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
 800264c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	4a04      	ldr	r2, [pc, #16]	; (8002664 <millis+0x1c>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	4618      	mov	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	10624dd3 	.word	0x10624dd3

08002668 <GPS_read>:
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
	return true;
}

char GPS_read(GPS* inst)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	static uint32_t firstChar = 0;	// first character received in current sentence
	uint32_t tStart = millis();		// as close as we can get to time char was sent
 8002670:	f7ff ffea 	bl	8002648 <millis>
 8002674:	60f8      	str	r0, [r7, #12]
	char c = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	72fb      	strb	r3, [r7, #11]
	if (inst->paused) return c;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <GPS_read+0x20>
 8002684:	7afb      	ldrb	r3, [r7, #11]
 8002686:	e069      	b.n	800275c <GPS_read+0xf4>

	c = (char)inst->uartBuffer[0];
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 800268e:	72fb      	strb	r3, [r7, #11]
	//char ca[2] = {c, '\0'};
	//print(ca);

	inst->currentline[inst->lineidx++] = c;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800269c:	b2db      	uxtb	r3, r3
 800269e:	1c59      	adds	r1, r3, #1
 80026a0:	b2c8      	uxtb	r0, r1
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
 80026a8:	4413      	add	r3, r2
 80026aa:	7afa      	ldrb	r2, [r7, #11]
 80026ac:	701a      	strb	r2, [r3, #0]
	// [!!!] \/ wtf is that
	if (inst->lineidx >= MAXLINELENGTH) inst->lineidx = MAXLINELENGTH - 1; // ensure there is someplace to put the next received character
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b77      	cmp	r3, #119	; 0x77
 80026b8:	d903      	bls.n	80026c2 <GPS_read+0x5a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2277      	movs	r2, #119	; 0x77
 80026be:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	if (c == '\n')
 80026c2:	7afb      	ldrb	r3, [r7, #11]
 80026c4:	2b0a      	cmp	r3, #10
 80026c6:	d141      	bne.n	800274c <GPS_read+0xe4>
	{
		inst->currentline[inst->lineidx] = 0;	// add endline character
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	4413      	add	r3, r2
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]

		if (inst->currentline == inst->line1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	33d8      	adds	r3, #216	; 0xd8
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d10c      	bne.n	8002704 <GPS_read+0x9c>
		{
			inst->currentline = inst->line2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 8002702:	e00b      	b.n	800271c <GPS_read+0xb4>
		}
		else
		{
			inst->currentline = inst->line1;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		}

		inst->lineidx = 0;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		inst->recvdflag = true;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		inst->recvdTime = millis();	// time we got the end of the string
 800272c:	f7ff ff8c 	bl	8002648 <millis>
 8002730:	4602      	mov	r2, r0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		inst->sentTime = firstChar;
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <GPS_read+0xfc>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		firstChar = 0;				// there are no characters yet
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <GPS_read+0xfc>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
		return c;					// wait until next character to set time
 8002748:	7afb      	ldrb	r3, [r7, #11]
 800274a:	e007      	b.n	800275c <GPS_read+0xf4>
	}

	if (firstChar == 0) firstChar = tStart;
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <GPS_read+0xfc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <GPS_read+0xf2>
 8002754:	4a03      	ldr	r2, [pc, #12]	; (8002764 <GPS_read+0xfc>)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6013      	str	r3, [r2, #0]
	return c;
 800275a:	7afb      	ldrb	r3, [r7, #11]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000ba0 	.word	0x20000ba0

08002768 <GPS_init>:
/*!
		@brief Initialization code used by all constructor types
*/
/**************************************************************************/
bool GPS_init(GPS* inst)
{
 8002768:	b5b0      	push	{r4, r5, r7, lr}
 800276a:	b092      	sub	sp, #72	; 0x48
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	// UART instance, code ##########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@
	//println("[GPS] init()");
	inst->active = false;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	inst->recvdflag = false;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	inst->inStandbyMode = false;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	inst->paused = false;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	inst->lineidx = 0;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	inst->currentline = inst->line1;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	inst->lastline = inst->line2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	// uint8_t
	inst->gpsTime.hour = 0;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = 0;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = 0;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->gpsTime.year = 0;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->gpsTime.month = 0;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->gpsTime.dayM = 0;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->fixquality = 0;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	inst->fixquality_3d = 0;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	inst->satellites = 0;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	// bool
	inst->fix = false;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	// char
	inst->lat = 0;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 0;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	// uint16_t
	inst->gpsTime.msecond = 0;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	875a      	strh	r2, [r3, #58]	; 0x3a
	// float
	inst->latitude = 0.0;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	63da      	str	r2, [r3, #60]	; 0x3c
	inst->longitude = 0.0;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
	inst->geoidheight = 0.0;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
	inst->altitude = 0.0;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	659a      	str	r2, [r3, #88]	; 0x58
	inst->speed = 0.0;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	65da      	str	r2, [r3, #92]	; 0x5c
	inst->angle = 0.0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	661a      	str	r2, [r3, #96]	; 0x60
	inst->magvariation = 0.0;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	665a      	str	r2, [r3, #100]	; 0x64
	inst->HDOP = 0.0;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	669a      	str	r2, [r3, #104]	; 0x68
	inst->VDOP = 0.0;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	66da      	str	r2, [r3, #108]	; 0x6c
	inst->PDOP = 0.0;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	671a      	str	r2, [r3, #112]	; 0x70

	inst->lastUpdate = 0; // millis() when last full sentence successfully parsed
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	inst->lastFix = 0;  // millis() when last fix received
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	inst->lastTime = 0; // millis() when last time received
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	inst->lastDate = 0; // millis() when last date received
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	inst->recvdTime = 0; // millis() when last full sentence received
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	inst->sentTime = 0; // millis() when first character of last full sentence received
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	inst->lat = 'X';
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2258      	movs	r2, #88	; 0x58
 80028a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 'X';
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2258      	movs	r2, #88	; 0x58
 80028aa:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 'X';
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2258      	movs	r2, #88	; 0x58
 80028b2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	inst->thisCheck = 0;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
	memset(inst->thisSource, 0x00, NMEA_MAX_SOURCE_ID);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	2203      	movs	r2, #3
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f016 f952 	bl	8018b6e <memset>
	memset(inst->thisSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3307      	adds	r3, #7
 80028ce:	2214      	movs	r2, #20
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f016 f94b 	bl	8018b6e <memset>
	memset(inst->lastSource, 0x00, NMEA_MAX_SOURCE_ID);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	331b      	adds	r3, #27
 80028dc:	2203      	movs	r2, #3
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f016 f944 	bl	8018b6e <memset>
	memset(inst->lastSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	331e      	adds	r3, #30
 80028ea:	2214      	movs	r2, #20
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f016 f93d 	bl	8018b6e <memset>

	memset(inst->txtTXT, 0x00, 63);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3388      	adds	r3, #136	; 0x88
 80028f8:	223f      	movs	r2, #63	; 0x3f
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f016 f936 	bl	8018b6e <memset>
	inst->txtTot = 0;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	inst->txtID = 0;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	inst->txtN = 0;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	inst->sources[0] = "II";
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a6e      	ldr	r2, [pc, #440]	; (8002ad8 <GPS_init+0x370>)
 800291e:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	inst->sources[1] = "WI";
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a6d      	ldr	r2, [pc, #436]	; (8002adc <GPS_init+0x374>)
 8002926:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	inst->sources[2] = "GP";
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a6c      	ldr	r2, [pc, #432]	; (8002ae0 <GPS_init+0x378>)
 800292e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	inst->sources[3] = "GN";
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a6b      	ldr	r2, [pc, #428]	; (8002ae4 <GPS_init+0x37c>)
 8002936:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	inst->sources[4] = "ZZZ";
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a6a      	ldr	r2, [pc, #424]	; (8002ae8 <GPS_init+0x380>)
 800293e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	inst->sentences_parsed[0] = "GGA";
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a69      	ldr	r2, [pc, #420]	; (8002aec <GPS_init+0x384>)
 8002946:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	inst->sentences_parsed[1] = "GLL";
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a68      	ldr	r2, [pc, #416]	; (8002af0 <GPS_init+0x388>)
 800294e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	inst->sentences_parsed[2] = "GSA";
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a67      	ldr	r2, [pc, #412]	; (8002af4 <GPS_init+0x38c>)
 8002956:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	inst->sentences_parsed[3] = "RMC";
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a66      	ldr	r2, [pc, #408]	; (8002af8 <GPS_init+0x390>)
 800295e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	inst->sentences_parsed[4] = "ZZZ";
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a60      	ldr	r2, [pc, #384]	; (8002ae8 <GPS_init+0x380>)
 8002966:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	inst->sentences_known[0] = "ZZZ";
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a5e      	ldr	r2, [pc, #376]	; (8002ae8 <GPS_init+0x380>)
 800296e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	uint8_t msg_len = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char message[50] = {0};
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	2232      	movs	r2, #50	; 0x32
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f016 f8f4 	bl	8018b6e <memset>
	msg_len = sprintf(message, "$PMTK314,1,1,0,1,5,5,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	4a5c      	ldr	r2, [pc, #368]	; (8002afc <GPS_init+0x394>)
 800298c:	461c      	mov	r4, r3
 800298e:	4615      	mov	r5, r2
 8002990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002998:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800299c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029a0:	232f      	movs	r3, #47	; 0x2f
 80029a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_UART_Transmit(inst->uart, message, msg_len, 1000);			// transmit bytes
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 80029ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	f107 010c 	add.w	r1, r7, #12
 80029b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ba:	f00a fbba 	bl	800d132 <HAL_UART_Transmit>
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
 80029be:	bf00      	nop
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80029c6:	4618      	mov	r0, r3
 80029c8:	f00a fe58 	bl	800d67c <HAL_UART_GetState>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d1f6      	bne.n	80029c0 <GPS_init+0x258>
	delay(100);
 80029d2:	2064      	movs	r0, #100	; 0x64
 80029d4:	f004 f848 	bl	8006a68 <HAL_Delay>

	msg_len = sprintf(message, "$PMTK101*32\r\n");
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	4a48      	ldr	r2, [pc, #288]	; (8002b00 <GPS_init+0x398>)
 80029de:	461c      	mov	r4, r3
 80029e0:	4613      	mov	r3, r2
 80029e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e4:	c407      	stmia	r4!, {r0, r1, r2}
 80029e6:	8023      	strh	r3, [r4, #0]
 80029e8:	230d      	movs	r3, #13
 80029ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_UART_Transmit(inst->uart, message, msg_len, 1000);			// transmit bytes
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 80029f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	f107 010c 	add.w	r1, r7, #12
 80029fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a02:	f00a fb96 	bl	800d132 <HAL_UART_Transmit>
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
 8002a06:	bf00      	nop
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f00a fe34 	bl	800d67c <HAL_UART_GetState>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	d1f6      	bne.n	8002a08 <GPS_init+0x2a0>
	delay(100);
 8002a1a:	2064      	movs	r0, #100	; 0x64
 8002a1c:	f004 f824 	bl	8006a68 <HAL_Delay>

	msg_len = sprintf(message, "$PMTK286,1*23\r\n");
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	4a37      	ldr	r2, [pc, #220]	; (8002b04 <GPS_init+0x39c>)
 8002a26:	461c      	mov	r4, r3
 8002a28:	4613      	mov	r3, r2
 8002a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a30:	230f      	movs	r3, #15
 8002a32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_UART_Transmit(inst->uart, message, msg_len, 1000);			// transmit bytes
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002a3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	f107 010c 	add.w	r1, r7, #12
 8002a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4a:	f00a fb72 	bl	800d132 <HAL_UART_Transmit>
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
 8002a4e:	bf00      	nop
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00a fe10 	bl	800d67c <HAL_UART_GetState>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d1f6      	bne.n	8002a50 <GPS_init+0x2e8>
	delay(100);
 8002a62:	2064      	movs	r0, #100	; 0x64
 8002a64:	f004 f800 	bl	8006a68 <HAL_Delay>

	HAL_UART_Receive_IT(inst->uart, inst->uartBuffer, 1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8002a74:	2201      	movs	r2, #1
 8002a76:	4619      	mov	r1, r3
 8002a78:	f00a fc9a 	bl	800d3b0 <HAL_UART_Receive_IT>

	uint32_t timeout = millis();
 8002a7c:	f7ff fde4 	bl	8002648 <millis>
 8002a80:	6438      	str	r0, [r7, #64]	; 0x40
	while (millis() - timeout <= 3000)
 8002a82:	e016      	b.n	8002ab2 <GPS_init+0x34a>
	{
		if (GPS_newNMEAreceived(inst) && GPS_parse(inst, GPS_lastNMEA(inst)))
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 ffa8 	bl	80039da <GPS_newNMEAreceived>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d010      	beq.n	8002ab2 <GPS_init+0x34a>
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 ffb0 	bl	80039f6 <GPS_lastNMEA>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f854 	bl	8002b48 <GPS_parse>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <GPS_init+0x34a>
		{
			inst->active = true;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
			return true;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00d      	b.n	8002ace <GPS_init+0x366>
	while (millis() - timeout <= 3000)
 8002ab2:	f7ff fdc9 	bl	8002648 <millis>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d9df      	bls.n	8002a84 <GPS_init+0x31c>
		}
	}

	inst->active = false;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	return false;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3748      	adds	r7, #72	; 0x48
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	0801f814 	.word	0x0801f814
 8002adc:	0801f818 	.word	0x0801f818
 8002ae0:	0801f81c 	.word	0x0801f81c
 8002ae4:	0801f820 	.word	0x0801f820
 8002ae8:	0801f824 	.word	0x0801f824
 8002aec:	0801f828 	.word	0x0801f828
 8002af0:	0801f82c 	.word	0x0801f82c
 8002af4:	0801f830 	.word	0x0801f830
 8002af8:	0801f834 	.word	0x0801f834
 8002afc:	0801f838 	.word	0x0801f838
 8002b00:	0801f868 	.word	0x0801f868
 8002b04:	0801f878 	.word	0x0801f878

08002b08 <GPS_update>:

bool GPS_update(GPS* inst)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	if (GPS_newNMEAreceived(inst))
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 ff62 	bl	80039da <GPS_newNMEAreceived>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d010      	beq.n	8002b3e <GPS_update+0x36>
	{
		if (GPS_parse(inst, GPS_lastNMEA(inst))) { inst->newData = true; return true; }
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 ff6a 	bl	80039f6 <GPS_lastNMEA>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4619      	mov	r1, r3
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f80e 	bl	8002b48 <GPS_parse>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <GPS_update+0x36>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <GPS_update+0x38>
	}
	return false;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <GPS_parse>:
		@return True if we parsed it, false if it has an invalid checksum or invalid
	 data
*/
/**************************************************************************/
bool GPS_parse(GPS* inst, char* nmea)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
	// do checksum check
	if (!GPS_check(inst, nmea)) return false;
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fb65 	bl	8003224 <GPS_check>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f083 0301 	eor.w	r3, r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <GPS_parse+0x22>
 8002b66:	2300      	movs	r3, #0
 8002b68:	e355      	b.n	8003216 <GPS_parse+0x6ce>
	// passed the check, so there's a valid source in thisSource and a valid
	// sentence in thisSentence

	// look for a few common sentences
	char* p = nmea; // Pointer to move through the sentence -- good parsers are
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	617b      	str	r3, [r7, #20]
									// non-destructive
	p = strchr(p, ',') + 1; // Skip to the character after the next comma, then check sentence.
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	6978      	ldr	r0, [r7, #20]
 8002b72:	f016 ff30 	bl	80199d6 <strchr>
 8002b76:	4603      	mov	r3, r0
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]

	if (!strcmp(inst->thisSentence, "GGA"))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3307      	adds	r3, #7
 8002b80:	49a5      	ldr	r1, [pc, #660]	; (8002e18 <GPS_parse+0x2d0>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fb24 	bl	80001d0 <strcmp>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 80e6 	bne.w	8002d5c <GPS_parse+0x214>
	{
		// found GGA
		// get time
		GPS_parseTime(inst, p);
 8002b90:	6979      	ldr	r1, [r7, #20]
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fcc6 	bl	8003524 <GPS_parseTime>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	6978      	ldr	r0, [r7, #20]
 8002b9c:	f016 ff1b 	bl	80199d6 <strchr>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002ba6:	6979      	ldr	r1, [r7, #20]
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fd09 	bl	80035c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	6978      	ldr	r0, [r7, #20]
 8002bb2:	f016 ff10 	bl	80199d6 <strchr>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	3301      	adds	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002bbc:	6979      	ldr	r1, [r7, #20]
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fdb4 	bl	800372c <GPS_parseLatDir>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f083 0301 	eor.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <GPS_parse+0x8c>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e320      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f016 fefd 	bl	80199d6 <strchr>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002be2:	6979      	ldr	r1, [r7, #20]
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fde1 	bl	80037ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	6978      	ldr	r0, [r7, #20]
 8002bee:	f016 fef2 	bl	80199d6 <strchr>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002bf8:	6979      	ldr	r1, [r7, #20]
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fe7e 	bl	80038fc <GPS_parseLonDir>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <GPS_parse+0xc8>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e302      	b.n	8003216 <GPS_parse+0x6ce>

		p = strchr(p, ',') + 1;
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f016 fedf 	bl	80199d6 <strchr>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002c1e:	6979      	ldr	r1, [r7, #20]
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fc66 	bl	80034f2 <GPS_isEmpty>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f083 0301 	eor.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01b      	beq.n	8002c6a <GPS_parse+0x122>
		{
			inst->fixquality = atoi(p);
 8002c32:	6978      	ldr	r0, [r7, #20]
 8002c34:	f015 ff4e 	bl	8018ad4 <atoi>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			if (inst->fixquality > 0)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <GPS_parse+0x11a>
			{
				inst->fix = true;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				inst->lastFix = inst->sentTime;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002c60:	e003      	b.n	8002c6a <GPS_parse+0x122>
			}
			else inst->fix = false;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		}

		p = strchr(p, ',') + 1;
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	6978      	ldr	r0, [r7, #20]
 8002c6e:	f016 feb2 	bl	80199d6 <strchr>
 8002c72:	4603      	mov	r3, r0
 8002c74:	3301      	adds	r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->satellites = atoi(p);
 8002c78:	6979      	ldr	r1, [r7, #20]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fc39 	bl	80034f2 <GPS_isEmpty>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <GPS_parse+0x154>
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f015 ff21 	bl	8018ad4 <atoi>
 8002c92:	4603      	mov	r3, r0
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

		p = strchr(p, ',') + 1;
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f016 fe99 	bl	80199d6 <strchr>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002caa:	6979      	ldr	r1, [r7, #20]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fc20 	bl	80034f2 <GPS_isEmpty>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f083 0301 	eor.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <GPS_parse+0x18e>
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f015 ff05 	bl	8018ace <atof>
 8002cc4:	ec54 3b10 	vmov	r3, r4, d0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	4621      	mov	r1, r4
 8002ccc:	f7fd ff9c 	bl	8000c08 <__aeabi_d2f>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	669a      	str	r2, [r3, #104]	; 0x68

		p = strchr(p, ',') + 1;
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f016 fe7c 	bl	80199d6 <strchr>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->altitude = (float)atof(p);
 8002ce4:	6979      	ldr	r1, [r7, #20]
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fc03 	bl	80034f2 <GPS_isEmpty>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <GPS_parse+0x1c8>
 8002cf8:	6978      	ldr	r0, [r7, #20]
 8002cfa:	f015 fee8 	bl	8018ace <atof>
 8002cfe:	ec54 3b10 	vmov	r3, r4, d0
 8002d02:	4618      	mov	r0, r3
 8002d04:	4621      	mov	r1, r4
 8002d06:	f7fd ff7f 	bl	8000c08 <__aeabi_d2f>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	659a      	str	r2, [r3, #88]	; 0x58

		p = strchr(p, ',') + 1;
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f016 fe5f 	bl	80199d6 <strchr>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
		p = strchr(p, ',') + 1;
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	6978      	ldr	r0, [r7, #20]
 8002d22:	f016 fe58 	bl	80199d6 <strchr>
 8002d26:	4603      	mov	r3, r0
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->geoidheight = (float)atof(p);
 8002d2c:	6979      	ldr	r1, [r7, #20]
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fbdf 	bl	80034f2 <GPS_isEmpty>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8251 	beq.w	80031e4 <GPS_parse+0x69c>
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f015 fec3 	bl	8018ace <atof>
 8002d48:	ec54 3b10 	vmov	r3, r4, d0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	4621      	mov	r1, r4
 8002d50:	f7fd ff5a 	bl	8000c08 <__aeabi_d2f>
 8002d54:	4602      	mov	r2, r0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
 8002d5a:	e243      	b.n	80031e4 <GPS_parse+0x69c>
	}

	else if (!strcmp(inst->thisSentence, "RMC"))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3307      	adds	r3, #7
 8002d60:	492e      	ldr	r1, [pc, #184]	; (8002e1c <GPS_parse+0x2d4>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fa34 	bl	80001d0 <strcmp>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 80e3 	bne.w	8002f36 <GPS_parse+0x3ee>
	{
		// found RMC
		// get time
		GPS_parseTime(inst, p);
 8002d70:	6979      	ldr	r1, [r7, #20]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fbd6 	bl	8003524 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f016 fe2b 	bl	80199d6 <strchr>
 8002d80:	4603      	mov	r3, r0
 8002d82:	3301      	adds	r3, #1
 8002d84:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002d86:	6979      	ldr	r1, [r7, #20]
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fe00 	bl	800398e <GPS_parseFix>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f083 0301 	eor.w	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <GPS_parse+0x256>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e23b      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	6978      	ldr	r0, [r7, #20]
 8002da2:	f016 fe18 	bl	80199d6 <strchr>
 8002da6:	4603      	mov	r3, r0
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002dac:	6979      	ldr	r1, [r7, #20]
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fc06 	bl	80035c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f016 fe0d 	bl	80199d6 <strchr>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002dc2:	6979      	ldr	r1, [r7, #20]
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fcb1 	bl	800372c <GPS_parseLatDir>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f083 0301 	eor.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <GPS_parse+0x292>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e21d      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	6978      	ldr	r0, [r7, #20]
 8002dde:	f016 fdfa 	bl	80199d6 <strchr>
 8002de2:	4603      	mov	r3, r0
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fcde 	bl	80037ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f016 fdef 	bl	80199d6 <strchr>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002dfe:	6979      	ldr	r1, [r7, #20]
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fd7b 	bl	80038fc <GPS_parseLonDir>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f083 0301 	eor.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <GPS_parse+0x2d8>
 8002e12:	2300      	movs	r3, #0
 8002e14:	e1ff      	b.n	8003216 <GPS_parse+0x6ce>
 8002e16:	bf00      	nop
 8002e18:	0801f828 	.word	0x0801f828
 8002e1c:	0801f834 	.word	0x0801f834

		// speed
		p = strchr(p, ',') + 1;
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f016 fdd7 	bl	80199d6 <strchr>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->speed = (float)atof(p);
 8002e2e:	6979      	ldr	r1, [r7, #20]
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fb5e 	bl	80034f2 <GPS_isEmpty>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f083 0301 	eor.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <GPS_parse+0x312>
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f015 fe43 	bl	8018ace <atof>
 8002e48:	ec54 3b10 	vmov	r3, r4, d0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	4621      	mov	r1, r4
 8002e50:	f7fd feda 	bl	8000c08 <__aeabi_d2f>
 8002e54:	4602      	mov	r2, r0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c

		// angle
		p = strchr(p, ',') + 1;
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	6978      	ldr	r0, [r7, #20]
 8002e5e:	f016 fdba 	bl	80199d6 <strchr>
 8002e62:	4603      	mov	r3, r0
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->angle = (float)atof(p);
 8002e68:	6979      	ldr	r1, [r7, #20]
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fb41 	bl	80034f2 <GPS_isEmpty>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f083 0301 	eor.w	r3, r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <GPS_parse+0x34c>
 8002e7c:	6978      	ldr	r0, [r7, #20]
 8002e7e:	f015 fe26 	bl	8018ace <atof>
 8002e82:	ec54 3b10 	vmov	r3, r4, d0
 8002e86:	4618      	mov	r0, r3
 8002e88:	4621      	mov	r1, r4
 8002e8a:	f7fd febd 	bl	8000c08 <__aeabi_d2f>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	661a      	str	r2, [r3, #96]	; 0x60

		p = strchr(p, ',') + 1;
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f016 fd9d 	bl	80199d6 <strchr>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002ea2:	6979      	ldr	r1, [r7, #20]
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fb24 	bl	80034f2 <GPS_isEmpty>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f083 0301 	eor.w	r3, r3, #1
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8196 	beq.w	80031e4 <GPS_parse+0x69c>
		{
			uint32_t fulldate = (float)atof(p);
 8002eb8:	6978      	ldr	r0, [r7, #20]
 8002eba:	f015 fe08 	bl	8018ace <atof>
 8002ebe:	ec54 3b10 	vmov	r3, r4, d0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	f7fd fe9f 	bl	8000c08 <__aeabi_d2f>
 8002eca:	ee07 0a90 	vmov	s15, r0
 8002ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed2:	ee17 3a90 	vmov	r3, s15
 8002ed6:	60fb      	str	r3, [r7, #12]
			inst->gpsTime.dayM = fulldate / 10000;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a8b      	ldr	r2, [pc, #556]	; (8003108 <GPS_parse+0x5c0>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0b5b      	lsrs	r3, r3, #13
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inst->gpsTime.month = (fulldate % 10000) / 100;
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4b86      	ldr	r3, [pc, #536]	; (8003108 <GPS_parse+0x5c0>)
 8002eee:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef2:	0b5b      	lsrs	r3, r3, #13
 8002ef4:	f242 7110 	movw	r1, #10000	; 0x2710
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	4a83      	ldr	r2, [pc, #524]	; (800310c <GPS_parse+0x5c4>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inst->gpsTime.year = (fulldate % 100);
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4b7e      	ldr	r3, [pc, #504]	; (800310c <GPS_parse+0x5c4>)
 8002f12:	fba3 1302 	umull	r1, r3, r3, r2
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2164      	movs	r1, #100	; 0x64
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			inst->lastDate = inst->sentTime;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002f34:	e156      	b.n	80031e4 <GPS_parse+0x69c>
		}
	}

	else if (!strcmp(inst->thisSentence, "GLL"))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3307      	adds	r3, #7
 8002f3a:	4975      	ldr	r1, [pc, #468]	; (8003110 <GPS_parse+0x5c8>)
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd f947 	bl	80001d0 <strcmp>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d153      	bne.n	8002ff0 <GPS_parse+0x4a8>
	{
		// found GLL
		// parse out latitude
		GPS_parseLat(inst, p);
 8002f48:	6979      	ldr	r1, [r7, #20]
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fb38 	bl	80035c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	6978      	ldr	r0, [r7, #20]
 8002f54:	f016 fd3f 	bl	80199d6 <strchr>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002f5e:	6979      	ldr	r1, [r7, #20]
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fbe3 	bl	800372c <GPS_parseLatDir>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f083 0301 	eor.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <GPS_parse+0x42e>
 8002f72:	2300      	movs	r3, #0
 8002f74:	e14f      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	6978      	ldr	r0, [r7, #20]
 8002f7a:	f016 fd2c 	bl	80199d6 <strchr>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	3301      	adds	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002f84:	6979      	ldr	r1, [r7, #20]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fc10 	bl	80037ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	f016 fd21 	bl	80199d6 <strchr>
 8002f94:	4603      	mov	r3, r0
 8002f96:	3301      	adds	r3, #1
 8002f98:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002f9a:	6979      	ldr	r1, [r7, #20]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fcad 	bl	80038fc <GPS_parseLonDir>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f083 0301 	eor.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <GPS_parse+0x46a>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e131      	b.n	8003216 <GPS_parse+0x6ce>

		// get time
		p = strchr(p, ',') + 1;
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	6978      	ldr	r0, [r7, #20]
 8002fb6:	f016 fd0e 	bl	80199d6 <strchr>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
		GPS_parseTime(inst, p);
 8002fc0:	6979      	ldr	r1, [r7, #20]
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 faae 	bl	8003524 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	6978      	ldr	r0, [r7, #20]
 8002fcc:	f016 fd03 	bl	80199d6 <strchr>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002fd6:	6979      	ldr	r1, [r7, #20]
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fcd8 	bl	800398e <GPS_parseFix>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f083 0301 	eor.w	r3, r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80fc 	beq.w	80031e4 <GPS_parse+0x69c>
 8002fec:	2300      	movs	r3, #0
 8002fee:	e112      	b.n	8003216 <GPS_parse+0x6ce>
	}

	else if (!strcmp(inst->thisSentence, "GSA"))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3307      	adds	r3, #7
 8002ff4:	4947      	ldr	r1, [pc, #284]	; (8003114 <GPS_parse+0x5cc>)
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd f8ea 	bl	80001d0 <strcmp>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f040 808a 	bne.w	8003118 <GPS_parse+0x5d0>
	{
		// found GSA
		// parse out Auto selection, but ignore them
		// parse out 3d fixquality
		p = strchr(p, ',') + 1;
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f016 fce5 	bl	80199d6 <strchr>
 800300c:	4603      	mov	r3, r0
 800300e:	3301      	adds	r3, #1
 8003010:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->fixquality_3d = atoi(p);
 8003012:	6979      	ldr	r1, [r7, #20]
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fa6c 	bl	80034f2 <GPS_isEmpty>
 800301a:	4603      	mov	r3, r0
 800301c:	f083 0301 	eor.w	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <GPS_parse+0x4ee>
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f015 fd54 	bl	8018ad4 <atoi>
 800302c:	4603      	mov	r3, r0
 800302e:	b2da      	uxtb	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		// skip 12 Satellite PDNs without interpreting them
		for (int i = 0; i < 12; i++)
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	e009      	b.n	8003050 <GPS_parse+0x508>
		{
			p = strchr(p, ',') + 1;
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f016 fcc9 	bl	80199d6 <strchr>
 8003044:	4603      	mov	r3, r0
 8003046:	3301      	adds	r3, #1
 8003048:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 12; i++)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3301      	adds	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b0b      	cmp	r3, #11
 8003054:	ddf2      	ble.n	800303c <GPS_parse+0x4f4>
		}
		
		// parse out PDOP
		p = strchr(p, ',') + 1;
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	6978      	ldr	r0, [r7, #20]
 800305a:	f016 fcbc 	bl	80199d6 <strchr>
 800305e:	4603      	mov	r3, r0
 8003060:	3301      	adds	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->PDOP = (float)atof(p);
 8003064:	6979      	ldr	r1, [r7, #20]
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fa43 	bl	80034f2 <GPS_isEmpty>
 800306c:	4603      	mov	r3, r0
 800306e:	f083 0301 	eor.w	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <GPS_parse+0x548>
 8003078:	6978      	ldr	r0, [r7, #20]
 800307a:	f015 fd28 	bl	8018ace <atof>
 800307e:	ec54 3b10 	vmov	r3, r4, d0
 8003082:	4618      	mov	r0, r3
 8003084:	4621      	mov	r1, r4
 8003086:	f7fd fdbf 	bl	8000c08 <__aeabi_d2f>
 800308a:	4602      	mov	r2, r0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	671a      	str	r2, [r3, #112]	; 0x70
		
		// parse out HDOP, we also parse this from the GGA sentence. Chipset should
		// report the same for both
		p = strchr(p, ',') + 1;
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f016 fc9f 	bl	80199d6 <strchr>
 8003098:	4603      	mov	r3, r0
 800309a:	3301      	adds	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fa26 	bl	80034f2 <GPS_isEmpty>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f083 0301 	eor.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <GPS_parse+0x582>
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f015 fd0b 	bl	8018ace <atof>
 80030b8:	ec54 3b10 	vmov	r3, r4, d0
 80030bc:	4618      	mov	r0, r3
 80030be:	4621      	mov	r1, r4
 80030c0:	f7fd fda2 	bl	8000c08 <__aeabi_d2f>
 80030c4:	4602      	mov	r2, r0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	669a      	str	r2, [r3, #104]	; 0x68
		
		// parse out VDOP
		p = strchr(p, ',') + 1;
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	6978      	ldr	r0, [r7, #20]
 80030ce:	f016 fc82 	bl	80199d6 <strchr>
 80030d2:	4603      	mov	r3, r0
 80030d4:	3301      	adds	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->VDOP = (float)atof(p);
 80030d8:	6979      	ldr	r1, [r7, #20]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa09 	bl	80034f2 <GPS_isEmpty>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f083 0301 	eor.w	r3, r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d07b      	beq.n	80031e4 <GPS_parse+0x69c>
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f015 fcee 	bl	8018ace <atof>
 80030f2:	ec54 3b10 	vmov	r3, r4, d0
 80030f6:	4618      	mov	r0, r3
 80030f8:	4621      	mov	r1, r4
 80030fa:	f7fd fd85 	bl	8000c08 <__aeabi_d2f>
 80030fe:	4602      	mov	r2, r0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	66da      	str	r2, [r3, #108]	; 0x6c
 8003104:	e06e      	b.n	80031e4 <GPS_parse+0x69c>
 8003106:	bf00      	nop
 8003108:	d1b71759 	.word	0xd1b71759
 800310c:	51eb851f 	.word	0x51eb851f
 8003110:	0801f82c 	.word	0x0801f82c
 8003114:	0801f830 	.word	0x0801f830
	}

#ifdef NMEA_EXTENSIONS // Sentences not required for basic GPS functionality
	else if (!strcmp(inst->thisSentence, "TXT"))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3307      	adds	r3, #7
 800311c:	4940      	ldr	r1, [pc, #256]	; (8003220 <GPS_parse+0x6d8>)
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f856 	bl	80001d0 <strcmp>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d15a      	bne.n	80031e0 <GPS_parse+0x698>
	{ //*******************************TXT
		if (!GPS_isEmpty(inst, p)) inst->txtTot = atoi(p);
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f9e0 	bl	80034f2 <GPS_isEmpty>
 8003132:	4603      	mov	r3, r0
 8003134:	f083 0301 	eor.w	r3, r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d006      	beq.n	800314c <GPS_parse+0x604>
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f015 fcc8 	bl	8018ad4 <atoi>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		p = strchr(p, ',') + 1;
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	6978      	ldr	r0, [r7, #20]
 8003150:	f016 fc41 	bl	80199d6 <strchr>
 8003154:	4603      	mov	r3, r0
 8003156:	3301      	adds	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtN = atoi(p);
 800315a:	6979      	ldr	r1, [r7, #20]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f9c8 	bl	80034f2 <GPS_isEmpty>
 8003162:	4603      	mov	r3, r0
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <GPS_parse+0x634>
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f015 fcb0 	bl	8018ad4 <atoi>
 8003174:	4602      	mov	r2, r0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p = strchr(p, ',') + 1;
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	6978      	ldr	r0, [r7, #20]
 8003180:	f016 fc29 	bl	80199d6 <strchr>
 8003184:	4603      	mov	r3, r0
 8003186:	3301      	adds	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtID = atoi(p);
 800318a:	6979      	ldr	r1, [r7, #20]
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f9b0 	bl	80034f2 <GPS_isEmpty>
 8003192:	4603      	mov	r3, r0
 8003194:	f083 0301 	eor.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <GPS_parse+0x664>
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f015 fc98 	bl	8018ad4 <atoi>
 80031a4:	4602      	mov	r2, r0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		p = strchr(p, ',') + 1;
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f016 fc11 	bl	80199d6 <strchr>
 80031b4:	4603      	mov	r3, r0
 80031b6:	3301      	adds	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) GPS_parseStr(inst, inst->txtTXT, p, 61); // copy the text to NMEA TXT max of 61 characters
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f998 	bl	80034f2 <GPS_isEmpty>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f083 0301 	eor.w	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <GPS_parse+0x69c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f103 0188 	add.w	r1, r3, #136	; 0x88
 80031d4:	233d      	movs	r3, #61	; 0x3d
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f923 	bl	8003424 <GPS_parseStr>
 80031de:	e001      	b.n	80031e4 <GPS_parse+0x69c>
	}
#endif // NMEA_EXTENSIONS

	// we dont parse the remaining, yet!
	else return false;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e018      	b.n	8003216 <GPS_parse+0x6ce>

	// Record the successful parsing of where the last data came from and when
	strcpy(inst->lastSource, inst->thisSource);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f103 021b 	add.w	r2, r3, #27
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f016 fbfd 	bl	80199f0 <strcpy>
	strcpy(inst->lastSentence, inst->thisSentence);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f103 021e 	add.w	r2, r3, #30
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3307      	adds	r3, #7
 8003200:	4619      	mov	r1, r3
 8003202:	4610      	mov	r0, r2
 8003204:	f016 fbf4 	bl	80199f0 <strcpy>
	inst->lastUpdate = millis();
 8003208:	f7ff fa1e 	bl	8002648 <millis>
 800320c:	4602      	mov	r2, r0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	return true;
 8003214:	2301      	movs	r3, #1
}
 8003216:	4618      	mov	r0, r3
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	bd90      	pop	{r4, r7, pc}
 800321e:	bf00      	nop
 8003220:	0801f88c 	.word	0x0801f88c

08003224 <GPS_check>:
		@param nmea Pointer to the NMEA string
		@return True if well formed, false if it has problems
*/
/**************************************************************************/
bool GPS_check(GPS* inst, char* nmea)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
	inst->thisCheck = 0; // new check
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
	if (*nmea != '$') return false; // doesn't start with $
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b24      	cmp	r3, #36	; 0x24
 800323a:	d001      	beq.n	8003240 <GPS_check+0x1c>
 800323c:	2300      	movs	r3, #0
 800323e:	e0ad      	b.n	800339c <GPS_check+0x178>
	else inst->thisCheck += NMEA_HAS_DOLLAR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	601a      	str	r2, [r3, #0]
	// do checksum check -- first look if we even have one -- ignore all but last
	//* 
	char* ast = nmea; // not strchr(nmea,'*'); for first* 
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
	while (*ast) ast++; // go to the end
 800324e:	e002      	b.n	8003256 <GPS_check+0x32>
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	3301      	adds	r3, #1
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f8      	bne.n	8003250 <GPS_check+0x2c>
	while (*ast != '*' && ast > nmea) ast--; // then back to*	if it's there
 800325e:	e002      	b.n	8003266 <GPS_check+0x42>
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	3b01      	subs	r3, #1
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b2a      	cmp	r3, #42	; 0x2a
 800326c:	d003      	beq.n	8003276 <GPS_check+0x52>
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d8f4      	bhi.n	8003260 <GPS_check+0x3c>
	if (*ast != '*') return false; // there is no asterisk
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b2a      	cmp	r3, #42	; 0x2a
 800327c:	d001      	beq.n	8003282 <GPS_check+0x5e>
 800327e:	2300      	movs	r3, #0
 8003280:	e08c      	b.n	800339c <GPS_check+0x178>
	else
	{
		uint16_t sum = GPS_parseHex(inst, *(ast + 1)) * 16; // extract checksum
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	3301      	adds	r3, #1
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fbc4 	bl	8003a18 <GPS_parseHex>
 8003290:	4603      	mov	r3, r0
 8003292:	b29b      	uxth	r3, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	847b      	strh	r3, [r7, #34]	; 0x22
		sum += GPS_parseHex(inst, *(ast + 2));
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	3302      	adds	r3, #2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	4619      	mov	r1, r3
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fbb9 	bl	8003a18 <GPS_parseHex>
 80032a6:	4603      	mov	r3, r0
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032ac:	4413      	add	r3, r2
 80032ae:	847b      	strh	r3, [r7, #34]	; 0x22
		char* p = nmea; // check checksum
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	61bb      	str	r3, [r7, #24]
		for (char* p1 = p + 1; p1 < ast; p1++)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	3301      	adds	r3, #1
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e008      	b.n	80032ce <GPS_check+0xaa>
		{
			sum ^=* p1;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032c4:	4053      	eors	r3, r2
 80032c6:	847b      	strh	r3, [r7, #34]	; 0x22
		for (char* p1 = p + 1; p1 < ast; p1++)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3301      	adds	r3, #1
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3f2      	bcc.n	80032bc <GPS_check+0x98>
		}
		if (sum != 0) return false; // bad checksum :(
 80032d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <GPS_check+0xbc>
 80032dc:	2300      	movs	r3, #0
 80032de:	e05d      	b.n	800339c <GPS_check+0x178>
		else inst->thisCheck += NMEA_HAS_CHECKSUM;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	1c9a      	adds	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
	}
	// extract source of variable length
	char* p = nmea + 1;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
	const char* src = GPS_tokenOnList(inst, p, inst->sources);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80032f6:	461a      	mov	r2, r3
 80032f8:	6979      	ldr	r1, [r7, #20]
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f852 	bl	80033a4 <GPS_tokenOnList>
 8003300:	6138      	str	r0, [r7, #16]
	if (src)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01f      	beq.n	8003348 <GPS_check+0x124>
	{
		strcpy(inst->thisSource, src);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	6939      	ldr	r1, [r7, #16]
 800330e:	4618      	mov	r0, r3
 8003310:	f016 fb6e 	bl	80199f0 <strcpy>
		inst->thisCheck += NMEA_HAS_SOURCE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f103 020a 	add.w	r2, r3, #10
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	601a      	str	r2, [r3, #0]
	}
	else return false;
	p += strlen(src);
 8003320:	6938      	ldr	r0, [r7, #16]
 8003322:	f7fc ff5f 	bl	80001e4 <strlen>
 8003326:	4602      	mov	r2, r0
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4413      	add	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
	// extract sentence id and check if parsed
	const char* snc = GPS_tokenOnList(inst, p, inst->sentences_parsed);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003334:	461a      	mov	r2, r3
 8003336:	6979      	ldr	r1, [r7, #20]
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f833 	bl	80033a4 <GPS_tokenOnList>
 800333e:	60f8      	str	r0, [r7, #12]
	if (snc)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00f      	beq.n	8003366 <GPS_check+0x142>
 8003346:	e001      	b.n	800334c <GPS_check+0x128>
	else return false;
 8003348:	2300      	movs	r3, #0
 800334a:	e027      	b.n	800339c <GPS_check+0x178>
	{
		strcpy(inst->thisSentence, snc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3307      	adds	r3, #7
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	4618      	mov	r0, r3
 8003354:	f016 fb4c 	bl	80199f0 <strcpy>
		inst->thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e019      	b.n	800339a <GPS_check+0x176>
	}
	else
	{ // check if known
		snc = GPS_tokenOnList(inst, p, inst->sentences_known);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800336c:	461a      	mov	r2, r3
 800336e:	6979      	ldr	r1, [r7, #20]
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f817 	bl	80033a4 <GPS_tokenOnList>
 8003376:	60f8      	str	r0, [r7, #12]
		if (snc)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <GPS_check+0x176>
		{
			strcpy(inst->thisSentence, snc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3307      	adds	r3, #7
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	4618      	mov	r0, r3
 8003386:	f016 fb33 	bl	80199f0 <strcpy>
			inst->thisCheck += NMEA_HAS_SENTENCE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f103 0214 	add.w	r2, r3, #20
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	601a      	str	r2, [r3, #0]
			return false;
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <GPS_check+0x178>
		}
	}
	return true; // passed all the tests
 800339a:	2301      	movs	r3, #1
}
 800339c:	4618      	mov	r0, r3
 800339e:	3728      	adds	r7, #40	; 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <GPS_tokenOnList>:
		@param list A list of strings, with the final entry starting "ZZ"
		@return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char* GPS_tokenOnList(GPS* inst, char* token, const char* *list)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
	int i = 0; // index in the list
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80033b4:	e01e      	b.n	80033f4 <GPS_tokenOnList+0x50>
	{ // stop at terminator and don't crash without it
		// test for a match on the sentence name
		if (!strncmp((const char* )list[i], (const char* )token, strlen(list[i]))) return list[i];
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	681c      	ldr	r4, [r3, #0]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	4413      	add	r3, r2
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fc ff0a 	bl	80001e4 <strlen>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4620      	mov	r0, r4
 80033d8:	f016 fb12 	bl	8019a00 <strncmp>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <GPS_tokenOnList+0x4a>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	e014      	b.n	8003418 <GPS_tokenOnList+0x74>
		i++;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2202      	movs	r2, #2
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <GPS_tokenOnList+0x7c>)
 8003402:	4618      	mov	r0, r3
 8003404:	f016 fafc 	bl	8019a00 <strncmp>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <GPS_tokenOnList+0x72>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003414:	dbcf      	blt.n	80033b6 <GPS_tokenOnList+0x12>
	}
	return NULL; // couldn't find a match
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd90      	pop	{r4, r7, pc}
 8003420:	0801f890 	.word	0x0801f890

08003424 <GPS_parseStr>:
		@param n Max permitted size of string including terminating 0
		@return Pointer to the string buffer
*/
/**************************************************************************/
char* GPS_parseStr(GPS* inst, char* buff, char* p, int n)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	; 0x30
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
	char* e = strchr(p, ',');
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f016 face 	bl	80199d6 <strchr>
 800343a:	62f8      	str	r0, [r7, #44]	; 0x2c
	int len = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (e) 
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d018      	beq.n	8003478 <GPS_parseStr+0x54>
	{
		len = min(e - p, n - 1);
 8003446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	3b01      	subs	r3, #1
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4293      	cmp	r3, r2
 800345a:	bfa8      	it	ge
 800345c:	4613      	movge	r3, r2
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(buff, p, len); // copy up to the comma
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	461a      	mov	r2, r3
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	68b8      	ldr	r0, [r7, #8]
 8003468:	f016 fadc 	bl	8019a24 <strncpy>
		buff[len] = 0;
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4413      	add	r3, r2
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	e037      	b.n	80034e8 <GPS_parseStr+0xc4>
	}
	else
	{
		e = strchr(p, '*');
 8003478:	212a      	movs	r1, #42	; 0x2a
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f016 faab 	bl	80199d6 <strchr>
 8003480:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (e)
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01b      	beq.n	80034c0 <GPS_parseStr+0x9c>
		{
			len = min(e - p, n - 1);
 8003488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	3b01      	subs	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4293      	cmp	r3, r2
 800349c:	bfa8      	it	ge
 800349e:	4613      	movge	r3, r2
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or up to the* 
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	461a      	mov	r2, r3
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68b8      	ldr	r0, [r7, #8]
 80034aa:	f016 fabb 	bl	8019a24 <strncpy>
			buff[e - p] = 0;
 80034ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4413      	add	r3, r2
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e013      	b.n	80034e8 <GPS_parseStr+0xc4>
		}
		else
		{
			len = min((int)strlen(p), n - 1);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fc fe8f 	bl	80001e4 <strlen>
 80034c6:	4603      	mov	r3, r0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	4293      	cmp	r3, r2
 80034d6:	bfa8      	it	ge
 80034d8:	4613      	movge	r3, r2
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or to the end or max capacity
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	461a      	mov	r2, r3
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	68b8      	ldr	r0, [r7, #8]
 80034e4:	f016 fa9e 	bl	8019a24 <strncpy>
		}
	}
	return buff;
 80034e8:	68bb      	ldr	r3, [r7, #8]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3730      	adds	r7, #48	; 0x30
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <GPS_isEmpty>:
		@param pStart Pointer to the location of the token in the NMEA string
		@return true if empty field, false if something there
*/
/**************************************************************************/
bool GPS_isEmpty(GPS* inst, char* pStart)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
	if (',' != *pStart && '*' != *pStart && pStart != NULL) return false;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b2c      	cmp	r3, #44	; 0x2c
 8003502:	d008      	beq.n	8003516 <GPS_isEmpty+0x24>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b2a      	cmp	r3, #42	; 0x2a
 800350a:	d004      	beq.n	8003516 <GPS_isEmpty+0x24>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <GPS_isEmpty+0x24>
 8003512:	2300      	movs	r3, #0
 8003514:	e000      	b.n	8003518 <GPS_isEmpty+0x26>
	else return true;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <GPS_parseTime>:
		@brief Parse a part of an NMEA string for time
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseTime(GPS* inst, char* p)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
	// get time
	uint32_t time = atol(p);
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	f015 fad4 	bl	8018adc <atol>
 8003534:	4603      	mov	r3, r0
 8003536:	60fb      	str	r3, [r7, #12]
	inst->gpsTime.hour = time / 10000;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <GPS_parseTime+0x94>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	0b5b      	lsrs	r3, r3, #13
 8003542:	b2da      	uxtb	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = (time % 10000) / 100;
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <GPS_parseTime+0x94>)
 800354e:	fba3 1302 	umull	r1, r3, r3, r2
 8003552:	0b5b      	lsrs	r3, r3, #13
 8003554:	f242 7110 	movw	r1, #10000	; 0x2710
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	4a17      	ldr	r2, [pc, #92]	; (80035bc <GPS_parseTime+0x98>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	b2da      	uxtb	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = (time % 100);
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4b12      	ldr	r3, [pc, #72]	; (80035bc <GPS_parseTime+0x98>)
 8003572:	fba3 1302 	umull	r1, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2164      	movs	r1, #100	; 0x64
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	b2da      	uxtb	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	p = strchr(p, '.') + 1;
 8003588:	212e      	movs	r1, #46	; 0x2e
 800358a:	6838      	ldr	r0, [r7, #0]
 800358c:	f016 fa23 	bl	80199d6 <strchr>
 8003590:	4603      	mov	r3, r0
 8003592:	3301      	adds	r3, #1
 8003594:	603b      	str	r3, [r7, #0]
	inst->gpsTime.msecond = (uint32_t)atoi(p);
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f015 fa9c 	bl	8018ad4 <atoi>
 800359c:	4603      	mov	r3, r0
 800359e:	b29a      	uxth	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	875a      	strh	r2, [r3, #58]	; 0x3a
	inst->lastTime = inst->sentTime;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	d1b71759 	.word	0xd1b71759
 80035bc:	51eb851f 	.word	0x51eb851f

080035c0 <GPS_parseLat>:
		@brief Parse a part of an NMEA string for latitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLat(GPS* inst, char* p)
{
 80035c0:	b5b0      	push	{r4, r5, r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	//int32_t degree;
	//long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80035ca:	6839      	ldr	r1, [r7, #0]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff90 	bl	80034f2 <GPS_isEmpty>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f083 0301 	eor.w	r3, r3, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8092 	beq.w	8003704 <GPS_parseLat+0x144>
	{
		strncpy(degreebuff, p, 2);
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	2202      	movs	r2, #2
 80035e6:	6839      	ldr	r1, [r7, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f016 fa1b 	bl	8019a24 <strncpy>
		p += 2;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	3302      	adds	r3, #2
 80035f2:	603b      	str	r3, [r7, #0]
		degreebuff[2] = '\0';
 80035f4:	2300      	movs	r3, #0
 80035f6:	73bb      	strb	r3, [r7, #14]
		long degree = atol(degreebuff) * 10000000;
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	4618      	mov	r0, r3
 80035fe:	f015 fa6d 	bl	8018adc <atol>
 8003602:	4602      	mov	r2, r0
 8003604:	4b44      	ldr	r3, [pc, #272]	; (8003718 <GPS_parseLat+0x158>)
 8003606:	fb03 f302 	mul.w	r3, r3, r2
 800360a:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 800360c:	f107 030c 	add.w	r3, r7, #12
 8003610:	2202      	movs	r2, #2
 8003612:	6839      	ldr	r1, [r7, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f016 fa05 	bl	8019a24 <strncpy>
		p += 3;										// skip decimal point
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	3303      	adds	r3, #3
 800361e:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 8003620:	f107 030c 	add.w	r3, r7, #12
 8003624:	3302      	adds	r3, #2
 8003626:	2204      	movs	r2, #4
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f016 f9fa 	bl	8019a24 <strncpy>
		degreebuff[6] = '\0';
 8003630:	2300      	movs	r3, #0
 8003632:	74bb      	strb	r3, [r7, #18]
		long minutes = 50*	atol(degreebuff) / 3;
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	4618      	mov	r0, r3
 800363a:	f015 fa4f 	bl	8018adc <atol>
 800363e:	4602      	mov	r2, r0
 8003640:	2332      	movs	r3, #50	; 0x32
 8003642:	fb03 f302 	mul.w	r3, r3, r2
 8003646:	4a35      	ldr	r2, [pc, #212]	; (800371c <GPS_parseLat+0x15c>)
 8003648:	fb82 1203 	smull	r1, r2, r2, r3
 800364c:	17db      	asrs	r3, r3, #31
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	61bb      	str	r3, [r7, #24]
		inst->latitude_fixed = degree + minutes;
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	441a      	add	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	645a      	str	r2, [r3, #68]	; 0x44
		inst->latitude = degree / 100000 + minutes * 0.000006;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4a30      	ldr	r2, [pc, #192]	; (8003720 <GPS_parseLat+0x160>)
 8003660:	fb82 1203 	smull	r1, r2, r2, r3
 8003664:	1352      	asrs	r2, r2, #13
 8003666:	17db      	asrs	r3, r3, #31
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ff6a 	bl	8000544 <__aeabi_i2d>
 8003670:	4604      	mov	r4, r0
 8003672:	460d      	mov	r5, r1
 8003674:	69b8      	ldr	r0, [r7, #24]
 8003676:	f7fc ff65 	bl	8000544 <__aeabi_i2d>
 800367a:	a325      	add	r3, pc, #148	; (adr r3, 8003710 <GPS_parseLat+0x150>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f7fc ffca 	bl	8000618 <__aeabi_dmul>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4620      	mov	r0, r4
 800368a:	4629      	mov	r1, r5
 800368c:	f7fc fe0e 	bl	80002ac <__adddf3>
 8003690:	4603      	mov	r3, r0
 8003692:	460c      	mov	r4, r1
 8003694:	4618      	mov	r0, r3
 8003696:	4621      	mov	r1, r4
 8003698:	f7fd fab6 	bl	8000c08 <__aeabi_d2f>
 800369c:	4602      	mov	r2, r0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c
		inst->latitudeDegrees = (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80036ae:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8003724 <GPS_parseLat+0x164>
 80036b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ba:	ee17 2a90 	vmov	r2, s15
 80036be:	2364      	movs	r3, #100	; 0x64
 80036c0:	fb03 f302 	mul.w	r3, r3, r2
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036d0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003728 <GPS_parseLat+0x168>
 80036d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitudeDegrees += (int)(inst->latitude / 100);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80036ea:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8003724 <GPS_parseLat+0x164>
 80036ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	}
}
 8003704:	bf00      	nop
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bdb0      	pop	{r4, r5, r7, pc}
 800370c:	f3af 8000 	nop.w
 8003710:	7110e454 	.word	0x7110e454
 8003714:	3ed92a73 	.word	0x3ed92a73
 8003718:	00989680 	.word	0x00989680
 800371c:	55555556 	.word	0x55555556
 8003720:	14f8b589 	.word	0x14f8b589
 8003724:	42c80000 	.word	0x42c80000
 8003728:	42700000 	.word	0x42700000

0800372c <GPS_parseLatDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLatDir(GPS* inst, char* p)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	if (p[0] == 'S')
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b53      	cmp	r3, #83	; 0x53
 800373c:	d11c      	bne.n	8003778 <GPS_parseLatDir+0x4c>
	{
		inst->lat = 'S';
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2253      	movs	r2, #83	; 0x53
 8003742:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inst->latitudeDegrees *= -1.0;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc ff0c 	bl	8000568 <__aeabi_f2d>
 8003750:	4603      	mov	r3, r0
 8003752:	460c      	mov	r4, r1
 8003754:	4618      	mov	r0, r3
 8003756:	4621      	mov	r1, r4
 8003758:	f7fd fa56 	bl	8000c08 <__aeabi_d2f>
 800375c:	4603      	mov	r3, r0
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef1 7a67 	vneg.f32	s15, s15
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitude_fixed *= -1;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	425a      	negs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	645a      	str	r2, [r3, #68]	; 0x44
 8003776:	e013      	b.n	80037a0 <GPS_parseLatDir+0x74>
	}
	else if (p[0] == 'N') inst->lat = 'N';
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b4e      	cmp	r3, #78	; 0x4e
 800377e:	d104      	bne.n	800378a <GPS_parseLatDir+0x5e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	224e      	movs	r2, #78	; 0x4e
 8003784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003788:	e00a      	b.n	80037a0 <GPS_parseLatDir+0x74>
	else if (p[0] == ',') inst->lat = 0;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b2c      	cmp	r3, #44	; 0x2c
 8003790:	d104      	bne.n	800379c <GPS_parseLatDir+0x70>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800379a:	e001      	b.n	80037a0 <GPS_parseLatDir+0x74>
	else return false;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <GPS_parseLatDir+0x76>
	
	return true;
 80037a0:	2301      	movs	r3, #1
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd90      	pop	{r4, r7, pc}
	...

080037ac <GPS_parseLon>:
		@brief Parse a part of an NMEA string for longitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLon(GPS* inst, char* p)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff fe9a 	bl	80034f2 <GPS_isEmpty>
 80037be:	4603      	mov	r3, r0
 80037c0:	f083 0301 	eor.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8088 	beq.w	80038dc <GPS_parseLon+0x130>
	{
		strncpy(degreebuff, p, 3);
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	2203      	movs	r2, #3
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f016 f925 	bl	8019a24 <strncpy>
		p += 3;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	3303      	adds	r3, #3
 80037de:	603b      	str	r3, [r7, #0]
		degreebuff[3] = '\0';
 80037e0:	2300      	movs	r3, #0
 80037e2:	73fb      	strb	r3, [r7, #15]
		degree = atol(degreebuff)*	10000000;
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	4618      	mov	r0, r3
 80037ea:	f015 f977 	bl	8018adc <atol>
 80037ee:	4602      	mov	r2, r0
 80037f0:	4b3c      	ldr	r3, [pc, #240]	; (80038e4 <GPS_parseLon+0x138>)
 80037f2:	fb03 f302 	mul.w	r3, r3, r2
 80037f6:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	2202      	movs	r2, #2
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f016 f90f 	bl	8019a24 <strncpy>
		p += 3;										// skip decimal point
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	3303      	adds	r3, #3
 800380a:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	3302      	adds	r3, #2
 8003812:	2204      	movs	r2, #4
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f016 f904 	bl	8019a24 <strncpy>
		degreebuff[6] = '\0';
 800381c:	2300      	movs	r3, #0
 800381e:	74bb      	strb	r3, [r7, #18]
		minutes = 50 * atol(degreebuff) / 3;
 8003820:	f107 030c 	add.w	r3, r7, #12
 8003824:	4618      	mov	r0, r3
 8003826:	f015 f959 	bl	8018adc <atol>
 800382a:	4602      	mov	r2, r0
 800382c:	2332      	movs	r3, #50	; 0x32
 800382e:	fb03 f302 	mul.w	r3, r3, r2
 8003832:	4a2d      	ldr	r2, [pc, #180]	; (80038e8 <GPS_parseLon+0x13c>)
 8003834:	fb82 1203 	smull	r1, r2, r2, r3
 8003838:	17db      	asrs	r3, r3, #31
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	61bb      	str	r3, [r7, #24]
		inst->longitude_fixed = degree + minutes;
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	441a      	add	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	649a      	str	r2, [r3, #72]	; 0x48
		inst->longitude = degree / 100000 + minutes * 0.000006f;
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4a28      	ldr	r2, [pc, #160]	; (80038ec <GPS_parseLon+0x140>)
 800384c:	fb82 1203 	smull	r1, r2, r2, r3
 8003850:	1352      	asrs	r2, r2, #13
 8003852:	17db      	asrs	r3, r3, #31
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003868:	eddf 6a21 	vldr	s13, [pc, #132]	; 80038f0 <GPS_parseLon+0x144>
 800386c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		inst->longitudeDegrees = (inst->longitude - 100 * (int)(inst->longitude / 100)) / 60.0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8003886:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80038f4 <GPS_parseLon+0x148>
 800388a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800388e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003892:	ee17 2a90 	vmov	r2, s15
 8003896:	2364      	movs	r3, #100	; 0x64
 8003898:	fb03 f302 	mul.w	r3, r3, r2
 800389c:	ee07 3a90 	vmov	s15, r3
 80038a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038a8:	eddf 6a13 	vldr	s13, [pc, #76]	; 80038f8 <GPS_parseLon+0x14c>
 80038ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		inst->longitudeDegrees += (int)(inst->longitude / 100);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80038c2:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80038f4 <GPS_parseLon+0x148>
 80038c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80038ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
}
 80038dc:	bf00      	nop
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	00989680 	.word	0x00989680
 80038e8:	55555556 	.word	0x55555556
 80038ec:	14f8b589 	.word	0x14f8b589
 80038f0:	36c9539c 	.word	0x36c9539c
 80038f4:	42c80000 	.word	0x42c80000
 80038f8:	42700000 	.word	0x42700000

080038fc <GPS_parseLonDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLonDir(GPS* inst, char* p)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	if (!GPS_isEmpty(inst, p))
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fdf2 	bl	80034f2 <GPS_isEmpty>
 800390e:	4603      	mov	r3, r0
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d034      	beq.n	8003984 <GPS_parseLonDir+0x88>
	{
		if (p[0] == 'W')
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b57      	cmp	r3, #87	; 0x57
 8003920:	d11c      	bne.n	800395c <GPS_parseLonDir+0x60>
		{
			inst->lon = 'W';
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2257      	movs	r2, #87	; 0x57
 8003926:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			inst->longitudeDegrees *= -1.0;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fe1a 	bl	8000568 <__aeabi_f2d>
 8003934:	4603      	mov	r3, r0
 8003936:	460c      	mov	r4, r1
 8003938:	4618      	mov	r0, r3
 800393a:	4621      	mov	r1, r4
 800393c:	f7fd f964 	bl	8000c08 <__aeabi_d2f>
 8003940:	4603      	mov	r3, r0
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef1 7a67 	vneg.f32	s15, s15
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			inst->longitude_fixed *= -1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003954:	425a      	negs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	649a      	str	r2, [r3, #72]	; 0x48
 800395a:	e013      	b.n	8003984 <GPS_parseLonDir+0x88>
		}
		else if (p[0] == 'E') inst->lon = 'E';
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b45      	cmp	r3, #69	; 0x45
 8003962:	d104      	bne.n	800396e <GPS_parseLonDir+0x72>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2245      	movs	r2, #69	; 0x45
 8003968:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800396c:	e00a      	b.n	8003984 <GPS_parseLonDir+0x88>
		else if (p[0] == ',') inst->lon = 0;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b2c      	cmp	r3, #44	; 0x2c
 8003974:	d104      	bne.n	8003980 <GPS_parseLonDir+0x84>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800397e:	e001      	b.n	8003984 <GPS_parseLonDir+0x88>
		else return false;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <GPS_parseLonDir+0x8a>
	}
	return true;
 8003984:	2301      	movs	r3, #1
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bd90      	pop	{r4, r7, pc}

0800398e <GPS_parseFix>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseFix(GPS* inst, char* p)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
	if (p[0] == 'A')
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b41      	cmp	r3, #65	; 0x41
 800399e:	d10a      	bne.n	80039b6 <GPS_parseFix+0x28>
	{
		inst->fix = true;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inst->lastFix = inst->sentTime;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80039b4:	e00a      	b.n	80039cc <GPS_parseFix+0x3e>
	}
	else if (p[0] == 'V') inst->fix = false;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b56      	cmp	r3, #86	; 0x56
 80039bc:	d104      	bne.n	80039c8 <GPS_parseFix+0x3a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80039c6:	e001      	b.n	80039cc <GPS_parseFix+0x3e>
	else return false;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <GPS_parseFix+0x40>
	return true;
 80039cc:	2301      	movs	r3, #1
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <GPS_newNMEAreceived>:
/*!
		@brief Check to see if a new NMEA line has been received
		@return True if received, false if not
*/
/**************************************************************************/
bool GPS_newNMEAreceived(GPS* inst) { return inst->recvdflag; }
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <GPS_lastNMEA>:
		@brief Returns the last NMEA line received and unsets the received flag
		@return Pointer to the last line string
*/
/**************************************************************************/
char* GPS_lastNMEA(GPS* inst)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
	inst->recvdflag = false;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	return (char*)inst->lastline;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <GPS_parseHex>:
	 character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t GPS_parseHex(GPS* inst, char c)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
	if (c < '0') return 0;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	2b2f      	cmp	r3, #47	; 0x2f
 8003a28:	d801      	bhi.n	8003a2e <GPS_parseHex+0x16>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e013      	b.n	8003a56 <GPS_parseHex+0x3e>
	if (c <= '9') return c - '0';
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	2b39      	cmp	r3, #57	; 0x39
 8003a32:	d803      	bhi.n	8003a3c <GPS_parseHex+0x24>
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	3b30      	subs	r3, #48	; 0x30
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e00c      	b.n	8003a56 <GPS_parseHex+0x3e>
	if (c < 'A') return 0;
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d801      	bhi.n	8003a46 <GPS_parseHex+0x2e>
 8003a42:	2300      	movs	r3, #0
 8003a44:	e007      	b.n	8003a56 <GPS_parseHex+0x3e>
	if (c <= 'F') return (c - 'A') + 10;
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	2b46      	cmp	r3, #70	; 0x46
 8003a4a:	d803      	bhi.n	8003a54 <GPS_parseHex+0x3c>
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	3b37      	subs	r3, #55	; 0x37
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e000      	b.n	8003a56 <GPS_parseHex+0x3e>
	// if (c > 'F')
	return 0;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <MPU9250_writeByte>:
#include "stm32f4xx_hal_i2c.h"

// #################### Low level communication ####################

static void MPU9250_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af04      	add	r7, sp, #16
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	70fb      	strb	r3, [r7, #3]
 8003a82:	4613      	mov	r3, r2
 8003a84:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 5);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	791b      	ldrb	r3, [r3, #4]
 8003a8e:	b299      	uxth	r1, r3
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	2305      	movs	r3, #5
 8003a96:	9302      	str	r3, [sp, #8]
 8003a98:	2301      	movs	r3, #1
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	1cbb      	adds	r3, r7, #2
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f003 ffbb 	bl	8007a1c <HAL_I2C_Mem_Write>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <MPU9250_readByte>:
static char MPU9250_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b088      	sub	sp, #32
 8003ab2:	af04      	add	r7, sp, #16
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, 1, 5);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	791b      	ldrb	r3, [r3, #4]
 8003ac2:	b299      	uxth	r1, r3
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	2305      	movs	r3, #5
 8003aca:	9302      	str	r3, [sp, #8]
 8003acc:	2301      	movs	r3, #1
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f004 f89a 	bl	8007c10 <HAL_I2C_Mem_Read>
	return (char)data[0];
 8003adc:	7b3b      	ldrb	r3, [r7, #12]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <MPU9250_readBytes>:
static void MPU9250_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 8003ae6:	b590      	push	{r4, r7, lr}
 8003ae8:	b08f      	sub	sp, #60	; 0x3c
 8003aea:	af04      	add	r7, sp, #16
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	72fb      	strb	r3, [r7, #11]
 8003af4:	4613      	mov	r3, r2
 8003af6:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, count, 5);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	791b      	ldrb	r3, [r3, #4]
 8003b00:	b299      	uxth	r1, r3
 8003b02:	7afb      	ldrb	r3, [r7, #11]
 8003b04:	b29c      	uxth	r4, r3
 8003b06:	7abb      	ldrb	r3, [r7, #10]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2205      	movs	r2, #5
 8003b0c:	9202      	str	r2, [sp, #8]
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2301      	movs	r3, #1
 8003b18:	4622      	mov	r2, r4
 8003b1a:	f004 f879 	bl	8007c10 <HAL_I2C_Mem_Read>

	int ii = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
 8003b26:	e00b      	b.n	8003b40 <MPU9250_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f107 0114 	add.w	r1, r7, #20
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	440a      	add	r2, r1
 8003b36:	7812      	ldrb	r2, [r2, #0]
 8003b38:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	7abb      	ldrb	r3, [r7, #10]
 8003b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b44:	429a      	cmp	r2, r3
 8003b46:	dbef      	blt.n	8003b28 <MPU9250_readBytes+0x42>
	}
}
 8003b48:	bf00      	nop
 8003b4a:	372c      	adds	r7, #44	; 0x2c
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd90      	pop	{r4, r7, pc}

08003b50 <AK8963_writeByte>:
static void AK8963_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af04      	add	r7, sp, #16
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	70fb      	strb	r3, [r7, #3]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, &data, 1, 5);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	795b      	ldrb	r3, [r3, #5]
 8003b68:	b299      	uxth	r1, r3
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	2305      	movs	r3, #5
 8003b70:	9302      	str	r3, [sp, #8]
 8003b72:	2301      	movs	r3, #1
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	1cbb      	adds	r3, r7, #2
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f003 ff4e 	bl	8007a1c <HAL_I2C_Mem_Write>
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <AK8963_readByte>:
static char AK8963_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af04      	add	r7, sp, #16
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, 1, 5);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	795b      	ldrb	r3, [r3, #5]
 8003b9c:	b299      	uxth	r1, r3
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	2305      	movs	r3, #5
 8003ba4:	9302      	str	r3, [sp, #8]
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	f107 030c 	add.w	r3, r7, #12
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f004 f82d 	bl	8007c10 <HAL_I2C_Mem_Read>
	return (char)data[0];
 8003bb6:	7b3b      	ldrb	r3, [r7, #12]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <AK8963_readBytes>:
static void AK8963_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b08f      	sub	sp, #60	; 0x3c
 8003bc4:	af04      	add	r7, sp, #16
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	72fb      	strb	r3, [r7, #11]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, count, 5);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	795b      	ldrb	r3, [r3, #5]
 8003bda:	b299      	uxth	r1, r3
 8003bdc:	7afb      	ldrb	r3, [r7, #11]
 8003bde:	b29c      	uxth	r4, r3
 8003be0:	7abb      	ldrb	r3, [r7, #10]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2205      	movs	r2, #5
 8003be6:	9202      	str	r2, [sp, #8]
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	f107 0314 	add.w	r3, r7, #20
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	f004 f80c 	bl	8007c10 <HAL_I2C_Mem_Read>

	int ii = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	e00b      	b.n	8003c1a <AK8963_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	f107 0114 	add.w	r1, r7, #20
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	440a      	add	r2, r1
 8003c10:	7812      	ldrb	r2, [r2, #0]
 8003c12:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	3301      	adds	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1a:	7abb      	ldrb	r3, [r7, #10]
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	dbef      	blt.n	8003c02 <AK8963_readBytes+0x42>
	}
}
 8003c22:	bf00      	nop
 8003c24:	372c      	adds	r7, #44	; 0x2c
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd90      	pop	{r4, r7, pc}

08003c2a <MPU9250_readAccelData>:

static void MPU9250_readAccelData(MPU9250* inst)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_ACCEL_XOUT_H, 6, &rawData[0]);
 8003c32:	f107 0308 	add.w	r3, r7, #8
 8003c36:	2206      	movs	r2, #6
 8003c38:	213b      	movs	r1, #59	; 0x3b
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff ff53 	bl	8003ae6 <MPU9250_readBytes>
	// calculate actual g value
	inst->ax = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->aRes - inst->accelBias[0];	
 8003c40:	7a3b      	ldrb	r3, [r7, #8]
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	b21a      	sxth	r2, r3
 8003c46:	7a7b      	ldrb	r3, [r7, #9]
 8003c48:	b21b      	sxth	r3, r3
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	b21b      	sxth	r3, r3
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	edc3 7a08 	vstr	s15, [r3, #32]
	inst->ay = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->aRes - inst->accelBias[1];
 8003c70:	7abb      	ldrb	r3, [r7, #10]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	b21a      	sxth	r2, r3
 8003c76:	7afb      	ldrb	r3, [r7, #11]
 8003c78:	b21b      	sxth	r3, r3
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	b21b      	sxth	r3, r3
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	inst->az = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->aRes - inst->accelBias[2];
 8003ca0:	7b3b      	ldrb	r3, [r7, #12]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	b21a      	sxth	r2, r3
 8003ca6:	7b7b      	ldrb	r3, [r7, #13]
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <MPU9250_readGyroData>:
static void MPU9250_readGyroData(MPU9250* inst)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_GYRO_XOUT_H, 6, &rawData[0]);
 8003ce0:	f107 0308 	add.w	r3, r7, #8
 8003ce4:	2206      	movs	r2, #6
 8003ce6:	2143      	movs	r1, #67	; 0x43
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff fefc 	bl	8003ae6 <MPU9250_readBytes>
	// calculate actual gyro value
	inst->gx = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->gRes - inst->gyroBias[0];
 8003cee:	7a3b      	ldrb	r3, [r7, #8]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	b21a      	sxth	r2, r3
 8003cf4:	7a7b      	ldrb	r3, [r7, #9]
 8003cf6:	b21b      	sxth	r3, r3
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	b21b      	sxth	r3, r3
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	inst->gy = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->gRes - inst->gyroBias[1];
 8003d1e:	7abb      	ldrb	r3, [r7, #10]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	b21a      	sxth	r2, r3
 8003d24:	7afb      	ldrb	r3, [r7, #11]
 8003d26:	b21b      	sxth	r3, r3
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	b21b      	sxth	r3, r3
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	inst->gz = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->gRes - inst->gyroBias[2];
 8003d4e:	7b3b      	ldrb	r3, [r7, #12]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	b21a      	sxth	r2, r3
 8003d54:	7b7b      	ldrb	r3, [r7, #13]
 8003d56:	b21b      	sxth	r3, r3
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	b21b      	sxth	r3, r3
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <MPU9250_readMagData>:
static void MPU9250_readMagData(MPU9250* inst)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];											// 7 because must read ST2 at end of data acquisition
	if(AK8963_readByte(inst, AK8963_ST1) & 0x01)				// wait for magnetometer data ready bit to be set
 8003d8e:	2102      	movs	r1, #2
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fef9 	bl	8003b88 <AK8963_readByte>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d064      	beq.n	8003e6a <MPU9250_readMagData+0xe4>
	{
		AK8963_readBytes(inst, AK8963_XOUT_L, 7, &rawData[0]);	// Read the six raw data and ST2 registers sequentially into data array
 8003da0:	f107 0308 	add.w	r3, r7, #8
 8003da4:	2207      	movs	r2, #7
 8003da6:	2103      	movs	r1, #3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff09 	bl	8003bc0 <AK8963_readBytes>
		uint8_t c = rawData[6];									// End data read by reading ST2 register
 8003dae:	7bbb      	ldrb	r3, [r7, #14]
 8003db0:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))											// Check if magnetic sensor overflow set, if not then report data
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d156      	bne.n	8003e6a <MPU9250_readMagData+0xe4>
		{
			// calculate actual magnetometer value including factory calibration values
			inst->mx = (float)((int16_t)(((int16_t)rawData[1] << 8) | rawData[0]))*inst->mRes*inst->magCalibration[0] - inst->magBias[0];	
 8003dbc:	7a7b      	ldrb	r3, [r7, #9]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	b21a      	sxth	r2, r3
 8003dc2:	7a3b      	ldrb	r3, [r7, #8]
 8003dc4:	b21b      	sxth	r3, r3
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	b21b      	sxth	r3, r3
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003de2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			inst->my = (float)((int16_t)(((int16_t)rawData[3] << 8) | rawData[2]))*inst->mRes*inst->magCalibration[1] - inst->magBias[1];
 8003df6:	7afb      	ldrb	r3, [r7, #11]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	b21a      	sxth	r2, r3
 8003dfc:	7abb      	ldrb	r3, [r7, #10]
 8003dfe:	b21b      	sxth	r3, r3
 8003e00:	4313      	orrs	r3, r2
 8003e02:	b21b      	sxth	r3, r3
 8003e04:	ee07 3a90 	vmov	s15, r3
 8003e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			inst->mz = (float)((int16_t)(((int16_t)rawData[5] << 8) | rawData[4]))*inst->mRes*inst->magCalibration[2] - inst->magBias[2];
 8003e30:	7b7b      	ldrb	r3, [r7, #13]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	b21a      	sxth	r2, r3
 8003e36:	7b3b      	ldrb	r3, [r7, #12]
 8003e38:	b21b      	sxth	r3, r3
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b21b      	sxth	r3, r3
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003e56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
	}
}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <MPU9250_getRes>:
	MPU9250_readBytes(inst, MPU9250_TEMP_OUT_H, 2, &rawData[0]);
	// calculate chip temperature in Celcius degrees
	inst->temperature = ((float)((int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]))) / 333.87 + 21.0;
}
static void MPU9250_getRes(MPU9250* inst, MPU9250_config* config)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
	switch (config->Mscale)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	7b9b      	ldrb	r3, [r3, #14]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <MPU9250_getRes+0x18>
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d004      	beq.n	8003e94 <MPU9250_getRes+0x20>
 8003e8a:	e007      	b.n	8003e9c <MPU9250_getRes+0x28>
	{
		case MPU9250_MFS_14BITS:	inst->mRes = 10.0*4912.0/8190.0;	break;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a28      	ldr	r2, [pc, #160]	; (8003f30 <MPU9250_getRes+0xbc>)
 8003e90:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e92:	e003      	b.n	8003e9c <MPU9250_getRes+0x28>
		case MPU9250_MFS_16BITS:	inst->mRes = 10.0*4912.0/32760.0;	break;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a27      	ldr	r2, [pc, #156]	; (8003f34 <MPU9250_getRes+0xc0>)
 8003e98:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e9a:	bf00      	nop
	}
	switch (config->Gscale)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	7b5b      	ldrb	r3, [r3, #13]
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d81b      	bhi.n	8003edc <MPU9250_getRes+0x68>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <MPU9250_getRes+0x38>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ec5 	.word	0x08003ec5
 8003eb4:	08003ecd 	.word	0x08003ecd
 8003eb8:	08003ed5 	.word	0x08003ed5
	{
		case MPU9250_GFS_250DPS:	inst->gRes = 250.0/32768.0;			break;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <MPU9250_getRes+0xc4>)
 8003ec0:	649a      	str	r2, [r3, #72]	; 0x48
 8003ec2:	e00b      	b.n	8003edc <MPU9250_getRes+0x68>
		case MPU9250_GFS_500DPS:	inst->gRes = 500.0/32768.0;			break;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <MPU9250_getRes+0xc8>)
 8003ec8:	649a      	str	r2, [r3, #72]	; 0x48
 8003eca:	e007      	b.n	8003edc <MPU9250_getRes+0x68>
		case MPU9250_GFS_1000DPS:	inst->gRes = 1000.0/32768.0;		break;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <MPU9250_getRes+0xcc>)
 8003ed0:	649a      	str	r2, [r3, #72]	; 0x48
 8003ed2:	e003      	b.n	8003edc <MPU9250_getRes+0x68>
		case MPU9250_GFS_2000DPS:	inst->gRes = 2000.0/32768.0;		break;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <MPU9250_getRes+0xd0>)
 8003ed8:	649a      	str	r2, [r3, #72]	; 0x48
 8003eda:	bf00      	nop
	}
	switch (config->Ascale)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	7b1b      	ldrb	r3, [r3, #12]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d81f      	bhi.n	8003f24 <MPU9250_getRes+0xb0>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <MPU9250_getRes+0x78>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003efd 	.word	0x08003efd
 8003ef0:	08003f07 	.word	0x08003f07
 8003ef4:	08003f11 	.word	0x08003f11
 8003ef8:	08003f1b 	.word	0x08003f1b
	{
		case MPU9250_AFS_2G:		inst->aRes = 2.0/32768.0;			break;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
 8003f04:	e00e      	b.n	8003f24 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_4G:		inst->aRes = 4.0/32768.0;			break;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f0e:	e009      	b.n	8003f24 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_8G:		inst->aRes = 8.0/32768.0;			break;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44
 8003f18:	e004      	b.n	8003f24 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_16G:		inst->aRes = 16.0/32768.0;			break;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44
 8003f22:	bf00      	nop
	}
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40bfebff 	.word	0x40bfebff
 8003f34:	3fbfebff 	.word	0x3fbfebff
 8003f38:	3bfa0000 	.word	0x3bfa0000
 8003f3c:	3c7a0000 	.word	0x3c7a0000
 8003f40:	3cfa0000 	.word	0x3cfa0000
 8003f44:	3d7a0000 	.word	0x3d7a0000

08003f48 <MPU9250_init>:

// #################### Public routines ####################

bool MPU9250_init(MPU9250* inst, MPU9250_config* config)
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
	inst->active = false;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	721a      	strb	r2, [r3, #8]
	inst->alg_lastUpdate = 0;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (config->alg_rate > 0) inst->alg_delay = 1.0 / config->alg_rate;	// calculate delay in [s] from [Hz]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6e:	dd0a      	ble.n	8003f86 <MPU9250_init+0x3e>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 8003f84:	e004      	b.n	8003f90 <MPU9250_init+0x48>
	else inst->alg_delay = 0;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	inst->euler_delay = 1000000.0 / config->euler_rate;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fc fae7 	bl	8000568 <__aeabi_f2d>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4623      	mov	r3, r4
 8003fa2:	a185      	add	r1, pc, #532	; (adr r1, 80041b8 <MPU9250_init+0x270>)
 8003fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fa8:	f7fc fc60 	bl	800086c <__aeabi_ddiv>
 8003fac:	4603      	mov	r3, r0
 8003fae:	460c      	mov	r4, r1
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	f7fc fe08 	bl	8000bc8 <__aeabi_d2uiz>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	int i;
	for (i = 0; i < 3; i++)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e020      	b.n	8004008 <MPU9250_init+0xc0>
	{
		inst->eulerOffsets[i] = config->eulerOffsets[i];
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	332c      	adds	r3, #44	; 0x2c
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	601a      	str	r2, [r3, #0]
		inst->eInt[i] = 0.0f;
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3326      	adds	r3, #38	; 0x26
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
		inst->q[i+1] = 0.0f;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	3322      	adds	r3, #34	; 0x22
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3301      	adds	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b02      	cmp	r3, #2
 800400c:	dddb      	ble.n	8003fc6 <MPU9250_init+0x7e>
	}
	inst->q[0] = 1.0f;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	//Self test was there
	delay(1000);
 8004018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800401c:	f002 fd24 	bl	8006a68 <HAL_Delay>
	MPU9250_getRes(inst, config);			// Get sensor resolutions based on config, only need to do this once
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ff26 	bl	8003e74 <MPU9250_getRes>

	if (config->calibrate)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	7c1b      	ldrb	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <MPU9250_init+0xf0>
	{
		MPU9250_calibrate(inst);			// Calibrate gyro and accelerometers, load biases in bias registers	
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f9f9 	bl	8004428 <MPU9250_calibrate>
 8004036:	e02f      	b.n	8004098 <MPU9250_init+0x150>
	}
	else
	{										// Or load biases from config
		for (i = 0; i < 3; i++)
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	e029      	b.n	8004092 <MPU9250_init+0x14a>
		{
			inst->accelBias[i] = config->accelBias[i];
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	330a      	adds	r3, #10
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	3304      	adds	r3, #4
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	331a      	adds	r3, #26
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	601a      	str	r2, [r3, #0]
			inst->gyroBias[i] = config->gyroBias[i];
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3308      	adds	r3, #8
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3316      	adds	r3, #22
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	3304      	adds	r3, #4
 8004070:	601a      	str	r2, [r3, #0]
			inst->magBias[i] = config->magBias[i];
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3304      	adds	r3, #4
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	3304      	adds	r3, #4
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3314      	adds	r3, #20
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3301      	adds	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b02      	cmp	r3, #2
 8004096:	ddd2      	ble.n	800403e <MPU9250_init+0xf6>
		}
	}
	delay(1000);
 8004098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800409c:	f002 fce4 	bl	8006a68 <HAL_Delay>
															// Initialize MPU9250 device
															// wake up device
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);		// Clear sleep mode bit (6), enable all sensors 
 80040a0:	2200      	movs	r2, #0
 80040a2:	216b      	movs	r1, #107	; 0x6b
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fce6 	bl	8003a76 <MPU9250_writeByte>
	delay(100); 											// get PLL established on x-axis gyro; should check for PLL ready interrupt  
 80040aa:	2064      	movs	r0, #100	; 0x64
 80040ac:	f002 fcdc 	bl	8006a68 <HAL_Delay>
															// get stable time source
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80040b0:	2201      	movs	r2, #1
 80040b2:	216b      	movs	r1, #107	; 0x6b
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff fcde 	bl	8003a76 <MPU9250_writeByte>
															// Configure Gyro and Accelerometer
															// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively
	delay(100);												// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 80040ba:	2064      	movs	r0, #100	; 0x64
 80040bc:	f002 fcd4 	bl	8006a68 <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x03);			// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
 80040c0:	2203      	movs	r2, #3
 80040c2:	211a      	movs	r1, #26
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff fcd6 	bl	8003a76 <MPU9250_writeByte>
	delay(100);												// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
 80040ca:	2064      	movs	r0, #100	; 0x64
 80040cc:	f002 fccc 	bl	8006a68 <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x04);		// Use a 200 Hz rate; the same rate set in CONFIG above
 80040d0:	2204      	movs	r2, #4
 80040d2:	2119      	movs	r1, #25
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff fcce 	bl	8003a76 <MPU9250_writeByte>

															// Set gyroscope full scale range
															// Range selects FS_SEL and AFS_SEL are 0 - 3
															// so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU9250_readByte(inst, MPU9250_GYRO_CONFIG);// get current GYRO_CONFIG register value
 80040da:	211b      	movs	r1, #27
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fce6 	bl	8003aae <MPU9250_readByte>
 80040e2:	4603      	mov	r3, r0
 80040e4:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0; 										// Clear self-test bits [7:5]
	c = c & ~0x03;											// Clear Fchoice bits [1:0]
 80040e6:	7afb      	ldrb	r3, [r7, #11]
 80040e8:	f023 0303 	bic.w	r3, r3, #3
 80040ec:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x18;											// Clear AFS bits [4:3]
 80040ee:	7afb      	ldrb	r3, [r7, #11]
 80040f0:	f023 0318 	bic.w	r3, r3, #24
 80040f4:	72fb      	strb	r3, [r7, #11]
	c = c | config->Gscale << 3;							// Set full scale range for the gyro
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	7b5b      	ldrb	r3, [r3, #13]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	b25a      	sxtb	r2, r3
 80040fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004102:	4313      	orrs	r3, r2
 8004104:	b25b      	sxtb	r3, r3
 8004106:	72fb      	strb	r3, [r7, #11]
	// c =| 0x00; 											// Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, c);		// Write new GYRO_CONFIG value to register
 8004108:	7afb      	ldrb	r3, [r7, #11]
 800410a:	461a      	mov	r2, r3
 800410c:	211b      	movs	r1, #27
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff fcb1 	bl	8003a76 <MPU9250_writeByte>

															// Set accelerometer full-scale range configuration
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG);		// get current ACCEL_CONFIG register value
 8004114:	211c      	movs	r1, #28
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff fcc9 	bl	8003aae <MPU9250_readByte>
 800411c:	4603      	mov	r3, r0
 800411e:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0;										// Clear self-test bits [7:5] 
	c = c & ~0x18;											// Clear AFS bits [4:3]
 8004120:	7afb      	ldrb	r3, [r7, #11]
 8004122:	f023 0318 	bic.w	r3, r3, #24
 8004126:	72fb      	strb	r3, [r7, #11]
	c = c | config->Ascale << 3;							// Set full scale range for the accelerometer
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	7b1b      	ldrb	r3, [r3, #12]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	b25a      	sxtb	r2, r3
 8004130:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004134:	4313      	orrs	r3, r2
 8004136:	b25b      	sxtb	r3, r3
 8004138:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, c);		// Write new ACCEL_CONFIG register value
 800413a:	7afb      	ldrb	r3, [r7, #11]
 800413c:	461a      	mov	r2, r3
 800413e:	211c      	movs	r1, #28
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fc98 	bl	8003a76 <MPU9250_writeByte>

															// Set accelerometer sample rate configuration
															// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1
															// for accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG2); 		// get current ACCEL_CONFIG2 register value
 8004146:	211d      	movs	r1, #29
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fcb0 	bl	8003aae <MPU9250_readByte>
 800414e:	4603      	mov	r3, r0
 8004150:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x0F; 											// Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 8004152:	7afb      	ldrb	r3, [r7, #11]
 8004154:	f023 030f 	bic.w	r3, r3, #15
 8004158:	72fb      	strb	r3, [r7, #11]
	c = c | 0x03;											// Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800415a:	7afb      	ldrb	r3, [r7, #11]
 800415c:	f043 0303 	orr.w	r3, r3, #3
 8004160:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, c);		// Write new ACCEL_CONFIG2 register value
 8004162:	7afb      	ldrb	r3, [r7, #11]
 8004164:	461a      	mov	r2, r3
 8004166:	211d      	movs	r1, #29
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fc84 	bl	8003a76 <MPU9250_writeByte>

	// The accelerometer, gyro, and thermometer are set to 1 kHz sample rates, 
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

															// Configure Interrupts and Bypass Enable
	MPU9250_writeByte(inst, MPU9250_INT_PIN_CFG, 0x22);    	// Set interrupt pin active high, push-pull,
 800416e:	2222      	movs	r2, #34	; 0x22
 8004170:	2137      	movs	r1, #55	; 0x37
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff fc7f 	bl	8003a76 <MPU9250_writeByte>
															//and clear on read of INT_STATUS, enable I2C_BYPASS_EN
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x01);		// Enable data ready (bit 0) interrupt
 8004178:	2201      	movs	r2, #1
 800417a:	2138      	movs	r1, #56	; 0x38
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fc7a 	bl	8003a76 <MPU9250_writeByte>
	{
		AK8963_init(inst, config);	 						// Get magnetometer calibration from AK8963 ROM
	}
	*/

	inst->mpu_active = true;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	719a      	strb	r2, [r3, #6]
	inst->active = inst->mpu_active && inst->ak_active;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	799b      	ldrb	r3, [r3, #6]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <MPU9250_init+0x254>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	79db      	ldrb	r3, [r3, #7]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MPU9250_init+0x254>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <MPU9250_init+0x256>
 800419c:	2300      	movs	r3, #0
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	721a      	strb	r2, [r3, #8]
	return true;
 80041a8:	2301      	movs	r3, #1
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd90      	pop	{r4, r7, pc}
 80041b2:	bf00      	nop
 80041b4:	f3af 8000 	nop.w
 80041b8:	00000000 	.word	0x00000000
 80041bc:	412e8480 	.word	0x412e8480

080041c0 <AK8963_init>:

bool AK8963_init(MPU9250* inst, MPU9250_config* config)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
	delay(1000);
 80041ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041ce:	f002 fc4b 	bl	8006a68 <HAL_Delay>
															// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  									// x/y/z gyro calibration data stored here
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 80041d2:	2200      	movs	r2, #0
 80041d4:	210a      	movs	r1, #10
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fcba 	bl	8003b50 <AK8963_writeByte>
	delay(10);
 80041dc:	200a      	movs	r0, #10
 80041de:	f002 fc43 	bl	8006a68 <HAL_Delay>
	AK8963_writeByte(inst, AK8963_CNTL, 0x0F);				// Enter Fuse ROM access mode
 80041e2:	220f      	movs	r2, #15
 80041e4:	210a      	movs	r1, #10
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff fcb2 	bl	8003b50 <AK8963_writeByte>
	delay(10);
 80041ec:	200a      	movs	r0, #10
 80041ee:	f002 fc3b 	bl	8006a68 <HAL_Delay>
	AK8963_readBytes(inst, AK8963_ASAX, 3, &rawData[0]);	// Read the x,y,z-axis calibration values
 80041f2:	f107 0308 	add.w	r3, r7, #8
 80041f6:	2203      	movs	r2, #3
 80041f8:	2110      	movs	r1, #16
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fce0 	bl	8003bc0 <AK8963_readBytes>
	inst->magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return axis sensitivity adjustment values
 8004200:	7a3b      	ldrb	r3, [r7, #8]
 8004202:	3b80      	subs	r3, #128	; 0x80
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800420c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004308 <AK8963_init+0x148>
 8004210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	inst->magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8004222:	7a7b      	ldrb	r3, [r7, #9]
 8004224:	3b80      	subs	r3, #128	; 0x80
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800422e:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004308 <AK8963_init+0x148>
 8004232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800423a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	inst->magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8004244:	7abb      	ldrb	r3, [r7, #10]
 8004246:	3b80      	subs	r3, #128	; 0x80
 8004248:	ee07 3a90 	vmov	s15, r3
 800424c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004250:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004308 <AK8963_init+0x148>
 8004254:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800425c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 8004266:	2200      	movs	r2, #0
 8004268:	210a      	movs	r1, #10
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff fc70 	bl	8003b50 <AK8963_writeByte>
	delay(10);
 8004270:	200a      	movs	r0, #10
 8004272:	f002 fbf9 	bl	8006a68 <HAL_Delay>
															// Configure the magnetometer for continuous read and highest resolution
															// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
															// and enable continuous mode data acquisition Mmode (bits [3:0]),
															// 0010 for 8 Hz and 0110 for 100 Hz sample rates
	AK8963_writeByte(inst, AK8963_CNTL, config->Mscale << 4 | config->Mmode); // Set magnetometer data resolution and sample ODR
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	7b9b      	ldrb	r3, [r3, #14]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	b25a      	sxtb	r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	7bdb      	ldrb	r3, [r3, #15]
 8004282:	b25b      	sxtb	r3, r3
 8004284:	4313      	orrs	r3, r2
 8004286:	b25b      	sxtb	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	210a      	movs	r1, #10
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff fc5e 	bl	8003b50 <AK8963_writeByte>
	delay(10);
 8004294:	200a      	movs	r0, #10
 8004296:	f002 fbe7 	bl	8006a68 <HAL_Delay>

	if (config->calibrate)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	7c1b      	ldrb	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <AK8963_init+0xea>
	{
		AK8963_calibrate(inst);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fe22 	bl	8004eec <AK8963_calibrate>
 80042a8:	e015      	b.n	80042d6 <AK8963_init+0x116>
	}
	else
	{
		int i;
		for (i = 0; i < 3; i++)
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e00f      	b.n	80042d0 <AK8963_init+0x110>
		{
			inst->magBias[i] = config->magBias[i];
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3304      	adds	r3, #4
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	3304      	adds	r3, #4
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3314      	adds	r3, #20
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3301      	adds	r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	ddec      	ble.n	80042b0 <AK8963_init+0xf0>
		}
	}
	
	inst->ak_active = true;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	71da      	strb	r2, [r3, #7]
	inst->active = inst->mpu_active && inst->ak_active;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	799b      	ldrb	r3, [r3, #6]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <AK8963_init+0x130>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	79db      	ldrb	r3, [r3, #7]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <AK8963_init+0x130>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <AK8963_init+0x132>
 80042f0:	2300      	movs	r3, #0
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	721a      	strb	r2, [r3, #8]
	return true;
 80042fc:	2301      	movs	r3, #1
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	43800000 	.word	0x43800000

0800430c <MPU9250_present>:

bool MPU9250_present(MPU9250* inst) { /*MPU9250_reset(inst);*/ return (MPU9250_readByte(inst, MPU9250_WHO_AM_I) == 0x71); }
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	2175      	movs	r1, #117	; 0x75
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff fbc9 	bl	8003aae <MPU9250_readByte>
 800431c:	4603      	mov	r3, r0
 800431e:	2b71      	cmp	r3, #113	; 0x71
 8004320:	bf0c      	ite	eq
 8004322:	2301      	moveq	r3, #1
 8004324:	2300      	movne	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <AK8963_present>:
bool AK8963_present(MPU9250* inst) { /*MPU9250_reset(inst);*/ return (AK8963_readByte(inst, AK8963_WHO_AM_I) == 0x48); }
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	2100      	movs	r1, #0
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff fc24 	bl	8003b88 <AK8963_readByte>
 8004340:	4603      	mov	r3, r0
 8004342:	2b48      	cmp	r3, #72	; 0x48
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <MPU9250_update>:

bool MPU9250_update(MPU9250* inst)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	if (MPU9250_readByte(inst, MPU9250_INT_STATUS) & 0x01)	// check if data is ready
 800435c:	213a      	movs	r1, #58	; 0x3a
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fba5 	bl	8003aae <MPU9250_readByte>
 8004364:	4603      	mov	r3, r0
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <MPU9250_update+0x2c>
	{
		MPU9250_readAccelData(inst);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff fc5b 	bl	8003c2a <MPU9250_readAccelData>
		MPU9250_readGyroData(inst);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fcaf 	bl	8003cd8 <MPU9250_readGyroData>
		MPU9250_readMagData(inst);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fd03 	bl	8003d86 <MPU9250_readMagData>
	}

	inst->alg_deltat = ((micros() - inst->alg_lastUpdate)/1000000.0f);// set integration time by time elapsed since last filter update
 8004380:	f7ff fb6f 	bl	8003a62 <micros>
 8004384:	4602      	mov	r2, r0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004396:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8004404 <MPU9250_update+0xb0>
 800439a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	if (inst->alg_deltat >= inst->alg_delay)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80043b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b8:	db1f      	blt.n	80043fa <MPU9250_update+0xa6>
	{
		//inst->lastAlgUpdate = micros();	// [!!!] check position of this line vs performance
		MadgwickQuaternionUpdate(inst);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f001 f888 	bl	80054d0 <MadgwickQuaternionUpdate>
		inst->alg_lastUpdate = micros();
 80043c0:	f7ff fb4f 	bl	8003a62 <micros>
 80043c4:	4602      	mov	r2, r0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

		if (micros() - inst->euler_lastUpdate >= inst->euler_delay)	// ! euler_delay is multiplied to be in [us]
 80043cc:	f7ff fb49 	bl	8003a62 <micros>
 80043d0:	4602      	mov	r2, r0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043d8:	1ad2      	subs	r2, r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d30a      	bcc.n	80043fa <MPU9250_update+0xa6>
		{
			MPU9250_updateEuler(inst);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fe93 	bl	8005110 <MPU9250_updateEuler>
			inst->euler_lastUpdate = micros();
 80043ea:	f7ff fb3a 	bl	8003a62 <micros>
 80043ee:	4602      	mov	r2, r0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			return true;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <MPU9250_update+0xa8>
		}
	}
	return false;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	49742400 	.word	0x49742400

08004408 <MPU9250_reset>:

void MPU9250_reset(MPU9250* inst)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8004410:	2280      	movs	r2, #128	; 0x80
 8004412:	216b      	movs	r1, #107	; 0x6b
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff fb2e 	bl	8003a76 <MPU9250_writeByte>
	delay(100);
 800441a:	2064      	movs	r0, #100	; 0x64
 800441c:	f002 fb24 	bl	8006a68 <HAL_Delay>
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <MPU9250_calibrate>:

void MPU9250_calibrate(MPU9250* inst)					// Function which accumulates gyro and accelerometer data after device initialization.
{														// It calculates the average of the at-rest readings and
 8004428:	b580      	push	{r7, lr}
 800442a:	b098      	sub	sp, #96	; 0x60
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	uint16_t i, packet_count, fifo_count;				// then loads the resulting offsets into accelerometer and gyro bias registers.
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8004430:	2300      	movs	r3, #0
 8004432:	647b      	str	r3, [r7, #68]	; 0x44
 8004434:	2300      	movs	r3, #0
 8004436:	64bb      	str	r3, [r7, #72]	; 0x48
 8004438:	2300      	movs	r3, #0
 800443a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800443c:	2300      	movs	r3, #0
 800443e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004440:	2300      	movs	r3, #0
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004444:	2300      	movs	r3, #0
 8004446:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t data[12]; 									// data array to hold accelerometer and gyro x, y, z, data

	MPU9250_reset(inst);								// clear gyro and accelerometer bias registers
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff ffdd 	bl	8004408 <MPU9250_reset>

	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  // Get stable time source
 800444e:	2201      	movs	r2, #1
 8004450:	216b      	movs	r1, #107	; 0x6b
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff fb0f 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_2, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8004458:	2200      	movs	r2, #0
 800445a:	216c      	movs	r1, #108	; 0x6c
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fb0a 	bl	8003a76 <MPU9250_writeByte>
	delay(200);
 8004462:	20c8      	movs	r0, #200	; 0xc8
 8004464:	f002 fb00 	bl	8006a68 <HAL_Delay>
														// Configure device for bias calculation
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x00);  // Disable all interrupts
 8004468:	2200      	movs	r2, #0
 800446a:	2138      	movs	r1, #56	; 0x38
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff fb02 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);     // Disable FIFO
 8004472:	2200      	movs	r2, #0
 8004474:	2123      	movs	r1, #35	; 0x23
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fafd 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);  // Turn on internal clock source
 800447c:	2200      	movs	r2, #0
 800447e:	216b      	movs	r1, #107	; 0x6b
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff faf8 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_I2C_MST_CTRL, 0x00);// Disable I2C master
 8004486:	2200      	movs	r2, #0
 8004488:	2124      	movs	r1, #36	; 0x24
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff faf3 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x00);   // Disable FIFO and I2C master modes
 8004490:	2200      	movs	r2, #0
 8004492:	216a      	movs	r1, #106	; 0x6a
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff faee 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x0C);   // Reset FIFO and DMP
 800449a:	220c      	movs	r2, #12
 800449c:	216a      	movs	r1, #106	; 0x6a
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fae9 	bl	8003a76 <MPU9250_writeByte>
	delay(15);
 80044a4:	200f      	movs	r0, #15
 80044a6:	f002 fadf 	bl	8006a68 <HAL_Delay>
														// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 80044aa:	2201      	movs	r2, #1
 80044ac:	211a      	movs	r1, #26
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fae1 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 80044b4:	2200      	movs	r2, #0
 80044b6:	2119      	movs	r1, #25
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff fadc 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80044be:	2200      	movs	r2, #0
 80044c0:	211b      	movs	r1, #27
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fad7 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 80044c8:	2200      	movs	r2, #0
 80044ca:	211c      	movs	r1, #28
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff fad2 	bl	8003a76 <MPU9250_writeByte>

	uint16_t  gyrosensitivity  = 131;					// = 131 LSB/degrees/sec
 80044d2:	2383      	movs	r3, #131	; 0x83
 80044d4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;					// = 16384 LSB/g
 80044d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044dc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

														// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x40);   // Enable FIFO
 80044e0:	2240      	movs	r2, #64	; 0x40
 80044e2:	216a      	movs	r1, #106	; 0x6a
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fac6 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 80044ea:	2278      	movs	r2, #120	; 0x78
 80044ec:	2123      	movs	r1, #35	; 0x23
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fac1 	bl	8003a76 <MPU9250_writeByte>
	delay(40);											// accumulate 40 samples in 80 milliseconds = 480 bytes
 80044f4:	2028      	movs	r0, #40	; 0x28
 80044f6:	f002 fab7 	bl	8006a68 <HAL_Delay>

														// At end of sample accumulation, turn off FIFO sensor read
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);		// Disable gyro and accelerometer sensors for FIFO
 80044fa:	2200      	movs	r2, #0
 80044fc:	2123      	movs	r1, #35	; 0x23
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fab9 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_readBytes(inst, MPU9250_FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8004504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004508:	2202      	movs	r2, #2
 800450a:	2172      	movs	r1, #114	; 0x72
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff faea 	bl	8003ae6 <MPU9250_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8004512:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	b21a      	sxth	r2, r3
 800451a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800451e:	b21b      	sxth	r3, r3
 8004520:	4313      	orrs	r3, r2
 8004522:	b21b      	sxth	r3, r3
 8004524:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;						// How many sets of full gyro and accelerometer data for averaging
 8004528:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800452c:	4aa9      	ldr	r2, [pc, #676]	; (80047d4 <MPU9250_calibrate+0x3ac>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	08db      	lsrs	r3, r3, #3
 8004534:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (i = 0; i < packet_count; i++)
 8004538:	2300      	movs	r3, #0
 800453a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800453e:	e071      	b.n	8004624 <MPU9250_calibrate+0x1fc>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};	// [!!!] strange, cannot get rid of those arrays, conversion is screwed then
 8004540:	2300      	movs	r3, #0
 8004542:	82bb      	strh	r3, [r7, #20]
 8004544:	2300      	movs	r3, #0
 8004546:	82fb      	strh	r3, [r7, #22]
 8004548:	2300      	movs	r3, #0
 800454a:	833b      	strh	r3, [r7, #24]
 800454c:	2300      	movs	r3, #0
 800454e:	81bb      	strh	r3, [r7, #12]
 8004550:	2300      	movs	r3, #0
 8004552:	81fb      	strh	r3, [r7, #14]
 8004554:	2300      	movs	r3, #0
 8004556:	823b      	strh	r3, [r7, #16]
		MPU9250_readBytes(inst, MPU9250_FIFO_R_W, 12, &data[0]); // read data for averaging
 8004558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800455c:	220c      	movs	r2, #12
 800455e:	2174      	movs	r1, #116	; 0x74
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff fac0 	bl	8003ae6 <MPU9250_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8004566:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	b21a      	sxth	r2, r3
 800456e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004572:	b21b      	sxth	r3, r3
 8004574:	4313      	orrs	r3, r2
 8004576:	b21b      	sxth	r3, r3
 8004578:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 800457a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	b21a      	sxth	r2, r3
 8004582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004586:	b21b      	sxth	r3, r3
 8004588:	4313      	orrs	r3, r2
 800458a:	b21b      	sxth	r3, r3
 800458c:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 800458e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	b21a      	sxth	r2, r3
 8004596:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800459a:	b21b      	sxth	r3, r3
 800459c:	4313      	orrs	r3, r2
 800459e:	b21b      	sxth	r3, r3
 80045a0:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80045a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	b21a      	sxth	r2, r3
 80045aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045ae:	b21b      	sxth	r3, r3
 80045b0:	4313      	orrs	r3, r2
 80045b2:	b21b      	sxth	r3, r3
 80045b4:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 80045b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	b21a      	sxth	r2, r3
 80045be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80045c2:	b21b      	sxth	r3, r3
 80045c4:	4313      	orrs	r3, r2
 80045c6:	b21b      	sxth	r3, r3
 80045c8:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 80045ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	b21a      	sxth	r2, r3
 80045d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045d6:	b21b      	sxth	r3, r3
 80045d8:	4313      	orrs	r3, r2
 80045da:	b21b      	sxth	r3, r3
 80045dc:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80045e4:	4413      	add	r3, r2
 80045e6:	63bb      	str	r3, [r7, #56]	; 0x38
		accel_bias[1] += (int32_t) accel_temp[1];
 80045e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045ee:	4413      	add	r3, r2
 80045f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		accel_bias[2] += (int32_t) accel_temp[2];
 80045f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80045f8:	4413      	add	r3, r2
 80045fa:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 80045fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	647b      	str	r3, [r7, #68]	; 0x44
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8004606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004608:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800460c:	4413      	add	r3, r2
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8004610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004612:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004616:	4413      	add	r3, r2
 8004618:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (i = 0; i < packet_count; i++)
 800461a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800461e:	3301      	adds	r3, #1
 8004620:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004624:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8004628:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800462c:	429a      	cmp	r2, r3
 800462e:	d387      	bcc.n	8004540 <MPU9250_calibrate+0x118>
	}

	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 8004630:	2300      	movs	r3, #0
 8004632:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004636:	e078      	b.n	800472a <MPU9250_calibrate+0x302>
	{
		accel_bias[i] /= (int32_t) packet_count;
 8004638:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004642:	4413      	add	r3, r2
 8004644:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8004648:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800464c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004650:	fb91 f2f2 	sdiv	r2, r1, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800465a:	440b      	add	r3, r1
 800465c:	f843 2c28 	str.w	r2, [r3, #-40]
		gyro_bias[i]  /= (int32_t) packet_count;
 8004660:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800466a:	4413      	add	r3, r2
 800466c:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8004670:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8004674:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004678:	fb91 f2f2 	sdiv	r2, r1, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004682:	440b      	add	r3, r1
 8004684:	f843 2c1c 	str.w	r2, [r3, #-28]
			//accel_bias[abs(MPU9250_VERTICAL_AXIS)] += (int32_t)(accelsensitivity * sgn(MPU9250_VERTICAL_AXIS)); // !!! not sure about sign!
																					// [!!!] \/ \/ scarry, no sgn()!
			accel_bias[abs(MPU9250_VERTICAL_AXIS)] -= (int32_t)(accelsensitivity * (accel_bias[abs(MPU9250_VERTICAL_AXIS)] / abs(accel_bias[abs(MPU9250_VERTICAL_AXIS)])));
		}
		//[!!!] this part isn't needed unless [commented STEP1]	// Construct the gyro biases for push to the hardware gyro bias registers,
		data[2*i] =  ((-gyro_bias[i]/4) >> 8) & 0xFF;	// which are reset to zero upon device startup.
 8004688:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004692:	4413      	add	r3, r2
 8004694:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004698:	425b      	negs	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	da00      	bge.n	80046a0 <MPU9250_calibrate+0x278>
 800469e:	3303      	adds	r3, #3
 80046a0:	109b      	asrs	r3, r3, #2
 80046a2:	121a      	asrs	r2, r3, #8
 80046a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80046b0:	440b      	add	r3, r1
 80046b2:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = (-gyro_bias[i]/4)		  & 0xFF;	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80046b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046c0:	4413      	add	r3, r2
 80046c2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80046c6:	425b      	negs	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	da00      	bge.n	80046ce <MPU9250_calibrate+0x2a6>
 80046cc:	3303      	adds	r3, #3
 80046ce:	109b      	asrs	r3, r3, #2
 80046d0:	461a      	mov	r2, r3
 80046d2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	3301      	adds	r3, #1
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80046e0:	440b      	add	r3, r1
 80046e2:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP1]					// Biases are additive, so change sign on calculated average gyro biases
		inst->gyroBias[i] = (float)gyro_bias[i]/(float)gyrosensitivity;	// Construct gyro bias in deg/s for later manual subtraction
 80046e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046f0:	4413      	add	r3, r2
 80046f2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046fe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800470a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800470e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	3316      	adds	r3, #22
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	3304      	adds	r3, #4
 800471c:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 8004720:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004724:	3301      	adds	r3, #1
 8004726:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800472a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800472e:	2b02      	cmp	r3, #2
 8004730:	d982      	bls.n	8004638 <MPU9250_calibrate+0x210>
	}

	if(accel_bias[2] > 0L)	accel_bias[2] -= (int32_t) accelsensitivity;
 8004732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	dd05      	ble.n	8004744 <MPU9250_calibrate+0x31c>
 8004738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800473a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	643b      	str	r3, [r7, #64]	; 0x40
 8004742:	e004      	b.n	800474e <MPU9250_calibrate+0x326>
	else 						accel_bias[2] += (int32_t) accelsensitivity;
 8004744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004746:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800474a:	4413      	add	r3, r2
 800474c:	643b      	str	r3, [r7, #64]	; 0x40
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0};							// A place to hold the factory accelerometer trim biases
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
 8004756:	2300      	movs	r3, #0
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU9250_readBytes(inst, MPU9250_XA_OFFSET_H, 2, &data[0]);		// Read factory accelerometer trim values
 800475a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800475e:	2202      	movs	r2, #2
 8004760:	2177      	movs	r1, #119	; 0x77
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff f9bf 	bl	8003ae6 <MPU9250_readBytes>
	accel_bias_reg[0] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	b21b      	sxth	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004776:	4313      	orrs	r3, r2
 8004778:	623b      	str	r3, [r7, #32]
	MPU9250_readBytes(inst, MPU9250_YA_OFFSET_H, 2, &data[0]);
 800477a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800477e:	2202      	movs	r2, #2
 8004780:	217a      	movs	r1, #122	; 0x7a
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff f9af 	bl	8003ae6 <MPU9250_readBytes>
	accel_bias_reg[1] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004788:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	b21b      	sxth	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004796:	4313      	orrs	r3, r2
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
	MPU9250_readBytes(inst, MPU9250_ZA_OFFSET_H, 2, &data[0]);
 800479a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800479e:	2202      	movs	r2, #2
 80047a0:	217d      	movs	r1, #125	; 0x7d
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff f99f 	bl	8003ae6 <MPU9250_readBytes>
	accel_bias_reg[2] = (int16_t)((int16_t)data[0] << 8) | data[1];
 80047a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	b21b      	sxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047b6:	4313      	orrs	r3, r2
 80047b8:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL;						// Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 80047ba:	2301      	movs	r3, #1
 80047bc:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0};			// Define array to hold mask bit for each accelerometer bias axis
 80047be:	2300      	movs	r3, #0
 80047c0:	773b      	strb	r3, [r7, #28]
 80047c2:	2300      	movs	r3, #0
 80047c4:	777b      	strb	r3, [r7, #29]
 80047c6:	2300      	movs	r3, #0
 80047c8:	77bb      	strb	r3, [r7, #30]
	for(i = 0; i < 3; i++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80047d0:	e096      	b.n	8004900 <MPU9250_calibrate+0x4d8>
 80047d2:	bf00      	nop
 80047d4:	aaaaaaab 	.word	0xaaaaaaab
	{											// If temperature compensation bit is set, record that fact in mask_bit
		if(accel_bias_reg[i] & mask) mask_bit[i] = 0x01;
 80047d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047e2:	4413      	add	r3, r2
 80047e4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80047e8:	461a      	mov	r2, r3
 80047ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <MPU9250_calibrate+0x3da>
 80047f2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047fa:	4413      	add	r3, r2
 80047fc:	2201      	movs	r2, #1
 80047fe:	f803 2c44 	strb.w	r2, [r3, #-68]
												// Construct total accelerometer bias
		accel_bias_reg[i] -= (accel_bias[i]/8);	// Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8004802:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800480c:	4413      	add	r3, r2
 800480e:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8004812:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800481c:	440b      	add	r3, r1
 800481e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004822:	2b00      	cmp	r3, #0
 8004824:	da00      	bge.n	8004828 <MPU9250_calibrate+0x400>
 8004826:	3307      	adds	r3, #7
 8004828:	10db      	asrs	r3, r3, #3
 800482a:	425b      	negs	r3, r3
 800482c:	4619      	mov	r1, r3
 800482e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004832:	440a      	add	r2, r1
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800483a:	440b      	add	r3, r1
 800483c:	f843 2c40 	str.w	r2, [r3, #-64]

		//[!!!] this part isn't needed unless [commented STEP2]
		data[2*i]   = (accel_bias_reg[i] >> 8) & 0xFF;
 8004840:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800484a:	4413      	add	r3, r2
 800484c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004850:	121a      	asrs	r2, r3, #8
 8004852:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800485e:	440b      	add	r3, r1
 8004860:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] =  accel_bias_reg[i]	   & 0xFF;
 8004864:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800486e:	4413      	add	r3, r2
 8004870:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8004874:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	3301      	adds	r3, #1
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004882:	440b      	add	r3, r1
 8004884:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = data[2*i+1] | mask_bit[i];// Preserve temperature compensation bit when writing back to accelerometer bias registers
 8004888:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	3301      	adds	r3, #1
 8004890:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004894:	4413      	add	r3, r2
 8004896:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 800489a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800489e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048a2:	4413      	add	r3, r2
 80048a4:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 80048a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	3301      	adds	r3, #1
 80048b0:	430a      	orrs	r2, r1
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80048b8:	440b      	add	r3, r1
 80048ba:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP2]
												// Output scaled accelerometer biases for manual subtraction in the main program
		inst->accelBias[i] = (float)accel_bias[i]/(float)accelsensitivity;
 80048be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048c8:	4413      	add	r3, r2
 80048ca:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80048d6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	331a      	adds	r3, #26
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 3; i++)
 80048f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048fa:	3301      	adds	r3, #1
 80048fc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004900:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004904:	2b02      	cmp	r3, #2
 8004906:	f67f af67 	bls.w	80047d8 <MPU9250_calibrate+0x3b0>
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_H, data[2]);
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_L, data[3]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_H, data[4]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_L, data[5]);
	*/
}
 800490a:	bf00      	nop
 800490c:	3760      	adds	r7, #96	; 0x60
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	0000      	movs	r0, r0
	...

08004918 <MPU9250_SelfTest>:

bool MPU9250_SelfTest(MPU9250* inst)						// Accelerometer and gyroscope self test; check calibration wrt factory settings
{															// percent deviation from factory trim values should be within +/- 14% to pass
 8004918:	b5b0      	push	{r4, r5, r7, lr}
 800491a:	b0a2      	sub	sp, #136	; 0x88
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
	uint8_t selfTest[6];
	float gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8004920:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	float results[6];

	inst->aRes = 1;											// Prepare instance to SelfTest
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800495c:	645a      	str	r2, [r3, #68]	; 0x44
	inst->gRes = 1;											// Configuration values (must?) not affect readings
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004964:	649a      	str	r2, [r3, #72]	; 0x48
	int i = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	for (i = 0; i < 3; i++)
 800496c:	2300      	movs	r3, #0
 800496e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004972:	e017      	b.n	80049a4 <MPU9250_SelfTest+0x8c>
	{
		inst->accelBias[i] = 0.0f;
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800497a:	331a      	adds	r3, #26
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
		inst->gyroBias[i] = 0.0f;
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800498c:	3316      	adds	r3, #22
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	3304      	adds	r3, #4
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 800499a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800499e:	3301      	adds	r3, #1
 80049a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	dde3      	ble.n	8004974 <MPU9250_SelfTest+0x5c>
	}

	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);		// Set gyro sample rate to 1 kHz
 80049ac:	2200      	movs	r2, #0
 80049ae:	2119      	movs	r1, #25
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff f860 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x02);			// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80049b6:	2202      	movs	r2, #2
 80049b8:	211a      	movs	r1, #26
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff f85b 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, FS<<3);	// Set full scale range for the gyro to 250 dps
 80049c0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	211b      	movs	r1, #27
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff f852 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80049d2:	2202      	movs	r2, #2
 80049d4:	211d      	movs	r1, #29
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff f84d 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, FS<<3);	// Set full scale range for the accelerometer to 2 g
 80049dc:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	211c      	movs	r1, #28
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff f844 	bl	8003a76 <MPU9250_writeByte>

	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 80049ee:	2300      	movs	r3, #0
 80049f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049f4:	e040      	b.n	8004a78 <MPU9250_SelfTest+0x160>
	{
		MPU9250_readAccelData(inst);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff f917 	bl	8003c2a <MPU9250_readAccelData>
		aAvg[0] += inst->ax;
 80049fc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a0a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		aAvg[1] += inst->ay;
 8004a0e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a1c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		aAvg[2] += inst->az;
 8004a20:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a2e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		MPU9250_readGyroData(inst);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff f950 	bl	8003cd8 <MPU9250_readGyroData>
		gAvg[0] += inst->gx;
 8004a38:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a46:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		gAvg[1] += inst->gy;
 8004a4a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a58:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		gAvg[2] += inst->gz;
 8004a5c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a6a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 8004a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a72:	3301      	adds	r3, #1
 8004a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a7c:	2bc7      	cmp	r3, #199	; 0xc7
 8004a7e:	ddba      	ble.n	80049f6 <MPU9250_SelfTest+0xde>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 8004a80:	2300      	movs	r3, #0
 8004a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a86:	e030      	b.n	8004aea <MPU9250_SelfTest+0x1d2>
	{
		aAvg[i] /= 200;
 8004a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a92:	4413      	add	r3, r2
 8004a94:	3b34      	subs	r3, #52	; 0x34
 8004a96:	ed93 7a00 	vldr	s14, [r3]
 8004a9a:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8004d30 <MPU9250_SelfTest+0x418>
 8004a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004aac:	4413      	add	r3, r2
 8004aae:	3b34      	subs	r3, #52	; 0x34
 8004ab0:	edc3 7a00 	vstr	s15, [r3]
		gAvg[i] /= 200;
 8004ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004abe:	4413      	add	r3, r2
 8004ac0:	3b28      	subs	r3, #40	; 0x28
 8004ac2:	ed93 7a00 	vldr	s14, [r3]
 8004ac6:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8004d30 <MPU9250_SelfTest+0x418>
 8004aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ad8:	4413      	add	r3, r2
 8004ada:	3b28      	subs	r3, #40	; 0x28
 8004adc:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 8004ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	ddca      	ble.n	8004a88 <MPU9250_SelfTest+0x170>
	}
															// Configure the accelerometer for self-test
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0xE0);	// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8004af2:	22e0      	movs	r2, #224	; 0xe0
 8004af4:	211c      	movs	r1, #28
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fe ffbd 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0xE0); 	// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8004afc:	22e0      	movs	r2, #224	; 0xe0
 8004afe:	211b      	movs	r1, #27
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fe ffb8 	bl	8003a76 <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 8004b06:	2019      	movs	r0, #25
 8004b08:	f001 ffae 	bl	8006a68 <HAL_Delay>

	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b12:	e040      	b.n	8004b96 <MPU9250_SelfTest+0x27e>
	{
		MPU9250_readAccelData(inst);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff f888 	bl	8003c2a <MPU9250_readAccelData>
		aSTAvg[0] += inst->ax;
 8004b1a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b28:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		aSTAvg[1] += inst->ay;
 8004b2c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b3a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		aSTAvg[2] += inst->az;
 8004b3e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b4c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		MPU9250_readGyroData(inst);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff f8c1 	bl	8003cd8 <MPU9250_readGyroData>
		gSTAvg[0] += inst->gx;
 8004b56:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b64:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		gSTAvg[1] += inst->gy;
 8004b68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b76:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		gSTAvg[2] += inst->gz;
 8004b7a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b88:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 8004b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b90:	3301      	adds	r3, #1
 8004b92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b9a:	2bc7      	cmp	r3, #199	; 0xc7
 8004b9c:	ddba      	ble.n	8004b14 <MPU9250_SelfTest+0x1fc>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ba4:	e030      	b.n	8004c08 <MPU9250_SelfTest+0x2f0>
	{
		aSTAvg[i] /= 200;
 8004ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3b40      	subs	r3, #64	; 0x40
 8004bb4:	ed93 7a00 	vldr	s14, [r3]
 8004bb8:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8004d30 <MPU9250_SelfTest+0x418>
 8004bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bca:	4413      	add	r3, r2
 8004bcc:	3b40      	subs	r3, #64	; 0x40
 8004bce:	edc3 7a00 	vstr	s15, [r3]
		gSTAvg[i] /= 200;
 8004bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bdc:	4413      	add	r3, r2
 8004bde:	3b4c      	subs	r3, #76	; 0x4c
 8004be0:	ed93 7a00 	vldr	s14, [r3]
 8004be4:	eddf 6a52 	vldr	s13, [pc, #328]	; 8004d30 <MPU9250_SelfTest+0x418>
 8004be8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3b4c      	subs	r3, #76	; 0x4c
 8004bfa:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 8004bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c02:	3301      	adds	r3, #1
 8004c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	ddca      	ble.n	8004ba6 <MPU9250_SelfTest+0x28e>
	}

	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);	// Configure the gyro and accelerometer for normal operation
 8004c10:	2200      	movs	r2, #0
 8004c12:	211c      	movs	r1, #28
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fe ff2e 	bl	8003a76 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00);
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	211b      	movs	r1, #27
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fe ff29 	bl	8003a76 <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 8004c24:	2019      	movs	r0, #25
 8004c26:	f001 ff1f 	bl	8006a68 <HAL_Delay>

	selfTest[0] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_ACCEL);	// Retrieve accelerometer and gyro 
 8004c2a:	210d      	movs	r1, #13
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fe ff3e 	bl	8003aae <MPU9250_readByte>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	selfTest[1] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_ACCEL);	// factory Self-Test Code from USR_Reg
 8004c38:	210e      	movs	r1, #14
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fe ff37 	bl	8003aae <MPU9250_readByte>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	selfTest[2] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_ACCEL);	// (self-test results)
 8004c46:	210f      	movs	r1, #15
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fe ff30 	bl	8003aae <MPU9250_readByte>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	selfTest[3] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_GYRO);
 8004c54:	2100      	movs	r1, #0
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fe ff29 	bl	8003aae <MPU9250_readByte>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	selfTest[4] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_GYRO);
 8004c62:	2101      	movs	r1, #1
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fe ff22 	bl	8003aae <MPU9250_readByte>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	selfTest[5] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_GYRO);
 8004c70:	2102      	movs	r1, #2
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fe ff1b 	bl	8003aae <MPU9250_readByte>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c84:	e048      	b.n	8004d18 <MPU9250_SelfTest+0x400>
	{																					// from self-test code reads
		factoryTrim[i] = (float)(2620/1<<FS)*(pow(1.01, ((float)selfTest[i] - 1.0)));	// (FT[axis] factory trim calculation)
 8004c86:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004c8a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c9a:	ee17 0a90 	vmov	r0, s15
 8004c9e:	f7fb fc63 	bl	8000568 <__aeabi_f2d>
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	460d      	mov	r5, r1
 8004ca6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004caa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cae:	4413      	add	r3, r2
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cba:	ee17 0a90 	vmov	r0, s15
 8004cbe:	f7fb fc53 	bl	8000568 <__aeabi_f2d>
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <MPU9250_SelfTest+0x41c>)
 8004cc8:	f7fb faee 	bl	80002a8 <__aeabi_dsub>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	ec43 2b17 	vmov	d7, r2, r3
 8004cd4:	eeb0 1a47 	vmov.f32	s2, s14
 8004cd8:	eef0 1a67 	vmov.f32	s3, s15
 8004cdc:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8004d28 <MPU9250_SelfTest+0x410>
 8004ce0:	f017 fe40 	bl	801c964 <pow>
 8004ce4:	ec53 2b10 	vmov	r2, r3, d0
 8004ce8:	4620      	mov	r0, r4
 8004cea:	4629      	mov	r1, r5
 8004cec:	f7fb fc94 	bl	8000618 <__aeabi_dmul>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	f7fb ff86 	bl	8000c08 <__aeabi_d2f>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004d08:	440b      	add	r3, r1
 8004d0a:	3b64      	subs	r3, #100	; 0x64
 8004d0c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8004d0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d12:	3301      	adds	r3, #1
 8004d14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d1c:	2b05      	cmp	r3, #5
 8004d1e:	ddb2      	ble.n	8004c86 <MPU9250_SelfTest+0x36e>
	}

	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8004d20:	2300      	movs	r3, #0
 8004d22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d24:	e09b      	b.n	8004e5e <MPU9250_SelfTest+0x546>
 8004d26:	bf00      	nop
 8004d28:	c28f5c29 	.word	0xc28f5c29
 8004d2c:	3ff028f5 	.word	0x3ff028f5
 8004d30:	43480000 	.word	0x43480000
 8004d34:	3ff00000 	.word	0x3ff00000
	{														// the change from Factory Trim of the Self-Test Response
		results[i]   = 	100.0*(aSTAvg[i] - aAvg[i])/factoryTrim[i]   - 100.0;
 8004d38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d40:	4413      	add	r3, r2
 8004d42:	3b40      	subs	r3, #64	; 0x40
 8004d44:	ed93 7a00 	vldr	s14, [r3]
 8004d48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d50:	4413      	add	r3, r2
 8004d52:	3b34      	subs	r3, #52	; 0x34
 8004d54:	edd3 7a00 	vldr	s15, [r3]
 8004d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d5c:	ee17 0a90 	vmov	r0, s15
 8004d60:	f7fb fc02 	bl	8000568 <__aeabi_f2d>
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	4b5f      	ldr	r3, [pc, #380]	; (8004ee8 <MPU9250_SelfTest+0x5d0>)
 8004d6a:	f7fb fc55 	bl	8000618 <__aeabi_dmul>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	460c      	mov	r4, r1
 8004d72:	4625      	mov	r5, r4
 8004d74:	461c      	mov	r4, r3
 8004d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d7e:	4413      	add	r3, r2
 8004d80:	3b64      	subs	r3, #100	; 0x64
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fb fbef 	bl	8000568 <__aeabi_f2d>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4620      	mov	r0, r4
 8004d90:	4629      	mov	r1, r5
 8004d92:	f7fb fd6b 	bl	800086c <__aeabi_ddiv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	460c      	mov	r4, r1
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	4b51      	ldr	r3, [pc, #324]	; (8004ee8 <MPU9250_SelfTest+0x5d0>)
 8004da4:	f7fb fa80 	bl	80002a8 <__aeabi_dsub>
 8004da8:	4603      	mov	r3, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	4618      	mov	r0, r3
 8004dae:	4621      	mov	r1, r4
 8004db0:	f7fb ff2a 	bl	8000c08 <__aeabi_d2f>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004dbe:	440b      	add	r3, r1
 8004dc0:	3b7c      	subs	r3, #124	; 0x7c
 8004dc2:	601a      	str	r2, [r3, #0]
		results[i+3] =	100.0*(gSTAvg[i] - gAvg[i])/factoryTrim[i+3] - 100.0;
 8004dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004dcc:	4413      	add	r3, r2
 8004dce:	3b4c      	subs	r3, #76	; 0x4c
 8004dd0:	ed93 7a00 	vldr	s14, [r3]
 8004dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ddc:	4413      	add	r3, r2
 8004dde:	3b28      	subs	r3, #40	; 0x28
 8004de0:	edd3 7a00 	vldr	s15, [r3]
 8004de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004de8:	ee17 0a90 	vmov	r0, s15
 8004dec:	f7fb fbbc 	bl	8000568 <__aeabi_f2d>
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	4b3c      	ldr	r3, [pc, #240]	; (8004ee8 <MPU9250_SelfTest+0x5d0>)
 8004df6:	f7fb fc0f 	bl	8000618 <__aeabi_dmul>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	4625      	mov	r5, r4
 8004e00:	461c      	mov	r4, r3
 8004e02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e04:	3303      	adds	r3, #3
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e0c:	4413      	add	r3, r2
 8004e0e:	3b64      	subs	r3, #100	; 0x64
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fb fba8 	bl	8000568 <__aeabi_f2d>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7fb fd24 	bl	800086c <__aeabi_ddiv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	4618      	mov	r0, r3
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	4b2d      	ldr	r3, [pc, #180]	; (8004ee8 <MPU9250_SelfTest+0x5d0>)
 8004e32:	f7fb fa39 	bl	80002a8 <__aeabi_dsub>
 8004e36:	4603      	mov	r3, r0
 8004e38:	460c      	mov	r4, r1
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4622      	mov	r2, r4
 8004e3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e40:	1cdc      	adds	r4, r3, #3
 8004e42:	4608      	mov	r0, r1
 8004e44:	4611      	mov	r1, r2
 8004e46:	f7fb fedf 	bl	8000c08 <__aeabi_d2f>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	00a3      	lsls	r3, r4, #2
 8004e4e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e52:	440b      	add	r3, r1
 8004e54:	3b7c      	subs	r3, #124	; 0x7c
 8004e56:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8004e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	f77f af69 	ble.w	8004d38 <MPU9250_SelfTest+0x420>
	}														// To get percent, must multiply by 100

	#if MPU9250_DEBUG
		println("[MPU9250] Self test results:");
	#endif
	bool passed = true;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	677b      	str	r3, [r7, #116]	; 0x74
 8004e70:	e031      	b.n	8004ed6 <MPU9250_SelfTest+0x5be>
	{
		passed &= (results[i] > -14.0) & (results[i] < 14.0);
 8004e72:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004e76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e78:	0092      	lsls	r2, r2, #2
 8004e7a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e7e:	440a      	add	r2, r1
 8004e80:	3a7c      	subs	r2, #124	; 0x7c
 8004e82:	edd2 7a00 	vldr	s15, [r2]
 8004e86:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8004e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e92:	bfcc      	ite	gt
 8004e94:	2201      	movgt	r2, #1
 8004e96:	2200      	movle	r2, #0
 8004e98:	b2d1      	uxtb	r1, r2
 8004e9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e9c:	0092      	lsls	r2, r2, #2
 8004e9e:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8004ea2:	4402      	add	r2, r0
 8004ea4:	3a7c      	subs	r2, #124	; 0x7c
 8004ea6:	edd2 7a00 	vldr	s15, [r2]
 8004eaa:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8004eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb6:	bf4c      	ite	mi
 8004eb8:	2201      	movmi	r2, #1
 8004eba:	2200      	movpl	r2, #0
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf14      	ite	ne
 8004ec8:	2301      	movne	r3, #1
 8004eca:	2300      	moveq	r3, #0
 8004ecc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8004ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	677b      	str	r3, [r7, #116]	; 0x74
 8004ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed8:	2b05      	cmp	r3, #5
 8004eda:	ddca      	ble.n	8004e72 <MPU9250_SelfTest+0x55a>
		#if MPU9250_DEBUG
			println("%f", results[i]);
		#endif
	}
	return passed;
 8004edc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3788      	adds	r7, #136	; 0x88
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ee8:	40590000 	.word	0x40590000

08004eec <AK8963_calibrate>:

void AK8963_calibrate(MPU9250* inst)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08e      	sub	sp, #56	; 0x38
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
	uint16_t i = 0, j = 0, sample_count = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ef8:	2300      	movs	r3, #0
 8004efa:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004efc:	2300      	movs	r3, #0
 8004efe:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8004f00:	4a81      	ldr	r2, [pc, #516]	; (8005108 <AK8963_calibrate+0x21c>)
 8004f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f0a:	6018      	str	r0, [r3, #0]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	8019      	strh	r1, [r3, #0]
 8004f10:	4a7e      	ldr	r2, [pc, #504]	; (800510c <AK8963_calibrate+0x220>)
 8004f12:	f107 031c 	add.w	r3, r7, #28
 8004f16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f1a:	6018      	str	r0, [r3, #0]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	8019      	strh	r1, [r3, #0]
 8004f20:	2300      	movs	r3, #0
 8004f22:	82bb      	strh	r3, [r7, #20]
 8004f24:	2300      	movs	r3, #0
 8004f26:	82fb      	strh	r3, [r7, #22]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	833b      	strh	r3, [r7, #24]

	float temp_mRes = inst->mRes;				// Temporarily store set calibation values
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	float temp_magCalibration[3] = {inst->magCalibration[0], inst->magCalibration[1], inst->magCalibration[2]};
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f42:	613b      	str	r3, [r7, #16]
	inst->mRes = 1;								// Calibration values (must?) not affect readings
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004f4a:	64da      	str	r2, [r3, #76]	; 0x4c
	for (i = 0; i < 3; i++)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f50:	e013      	b.n	8004f7a <AK8963_calibrate+0x8e>
	{
		inst->magBias[i] = 0.0f;
 8004f52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	3314      	adds	r3, #20
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
		inst->magCalibration[i] = 1.0f;
 8004f62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	331c      	adds	r3, #28
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004f72:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8004f74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f76:	3301      	adds	r3, #1
 8004f78:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d9e8      	bls.n	8004f52 <AK8963_calibrate+0x66>
	}

	delay(4000);								// [!!!] <- WHAT??, must change that
 8004f80:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004f84:	f001 fd70 	bl	8006a68 <HAL_Delay>

	sample_count = 64;
 8004f88:	2340      	movs	r3, #64	; 0x40
 8004f8a:	867b      	strh	r3, [r7, #50]	; 0x32
	for(i = 0; i < sample_count; i++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f90:	e06a      	b.n	8005068 <AK8963_calibrate+0x17c>
	{
		MPU9250_readMagData(inst);				// Read the mag data
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fe fef7 	bl	8003d86 <MPU9250_readMagData>
		mag_temp[0] = (int16_t)inst->mx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fa2:	ee17 3a90 	vmov	r3, s15
 8004fa6:	b21b      	sxth	r3, r3
 8004fa8:	82bb      	strh	r3, [r7, #20]
		mag_temp[1] = (int16_t)inst->my;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fb4:	ee17 3a90 	vmov	r3, s15
 8004fb8:	b21b      	sxth	r3, r3
 8004fba:	82fb      	strh	r3, [r7, #22]
		mag_temp[2] = (int16_t)inst->mz;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fc6:	ee17 3a90 	vmov	r3, s15
 8004fca:	b21b      	sxth	r3, r3
 8004fcc:	833b      	strh	r3, [r7, #24]
		for (j = 0; j < 3; j++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fd2:	e040      	b.n	8005056 <AK8963_calibrate+0x16a>
		{
			if(mag_temp[j] > mag_max[j]) mag_max[j] = mag_temp[j];
 8004fd4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004fdc:	4413      	add	r3, r2
 8004fde:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 8004fe2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004fea:	440b      	add	r3, r1
 8004fec:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	dd0e      	ble.n	8005012 <AK8963_calibrate+0x126>
 8004ff4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ff6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004ffe:	440b      	add	r3, r1
 8005000:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 8005004:	0053      	lsls	r3, r2, #1
 8005006:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800500a:	4413      	add	r3, r2
 800500c:	460a      	mov	r2, r1
 800500e:	f823 2c14 	strh.w	r2, [r3, #-20]
			if(mag_temp[j] < mag_min[j]) mag_min[j] = mag_temp[j];
 8005012:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800501a:	4413      	add	r3, r2
 800501c:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 8005020:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005028:	440b      	add	r3, r1
 800502a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800502e:	429a      	cmp	r2, r3
 8005030:	da0e      	bge.n	8005050 <AK8963_calibrate+0x164>
 8005032:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005034:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800503c:	440b      	add	r3, r1
 800503e:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 8005042:	0053      	lsls	r3, r2, #1
 8005044:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005048:	4413      	add	r3, r2
 800504a:	460a      	mov	r2, r1
 800504c:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (j = 0; j < 3; j++)
 8005050:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005052:	3301      	adds	r3, #1
 8005054:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005056:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005058:	2b02      	cmp	r3, #2
 800505a:	d9bb      	bls.n	8004fd4 <AK8963_calibrate+0xe8>
		}
		delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms [!!!] <- this to change also
 800505c:	2087      	movs	r0, #135	; 0x87
 800505e:	f001 fd03 	bl	8006a68 <HAL_Delay>
	for(i = 0; i < sample_count; i++)
 8005062:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005064:	3301      	adds	r3, #1
 8005066:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005068:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800506a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800506c:	429a      	cmp	r2, r3
 800506e:	d390      	bcc.n	8004f92 <AK8963_calibrate+0xa6>
	}

	inst->mRes = temp_mRes;						// Retrieve stored calibation values
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005074:	64da      	str	r2, [r3, #76]	; 0x4c

	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 8005076:	2300      	movs	r3, #0
 8005078:	86fb      	strh	r3, [r7, #54]	; 0x36
 800507a:	e03d      	b.n	80050f8 <AK8963_calibrate+0x20c>
	{											// save mag biases in G for main program
		inst->magCalibration[i] = temp_magCalibration[i]; // Retrieve stored calibration values
 800507c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800507e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005080:	0092      	lsls	r2, r2, #2
 8005082:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005086:	440a      	add	r2, r1
 8005088:	3a30      	subs	r2, #48	; 0x30
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	331c      	adds	r3, #28
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	3304      	adds	r3, #4
 8005096:	601a      	str	r2, [r3, #0]
		inst->magBias[i] = (float)((mag_max[i] + mag_min[i])/2) * inst->mRes * inst->magCalibration[i];
 8005098:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80050a0:	4413      	add	r3, r2
 80050a2:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80050a6:	461a      	mov	r2, r3
 80050a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80050b0:	440b      	add	r3, r1
 80050b2:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80050b6:	4413      	add	r3, r2
 80050b8:	0fda      	lsrs	r2, r3, #31
 80050ba:	4413      	add	r3, r2
 80050bc:	105b      	asrs	r3, r3, #1
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80050cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	331c      	adds	r3, #28
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	3304      	adds	r3, #4
 80050dc:	edd3 7a00 	vldr	s15, [r3]
 80050e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	3314      	adds	r3, #20
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 80050f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050f4:	3301      	adds	r3, #1
 80050f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d9be      	bls.n	800507c <AK8963_calibrate+0x190>
	}
}
 80050fe:	bf00      	nop
 8005100:	3738      	adds	r7, #56	; 0x38
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	0801f9d8 	.word	0x0801f9d8
 800510c:	0801f9e0 	.word	0x0801f9e0

08005110 <MPU9250_updateEuler>:

// #################### Algotithms ####################


void MPU9250_updateEuler(MPU9250* inst)		// Convert quaternions to Euler angles
{
 8005110:	b5b0      	push	{r4, r5, r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800513c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005140:	ee17 0a90 	vmov	r0, s15
 8005144:	f7fb fa10 	bl	8000568 <__aeabi_f2d>
 8005148:	4604      	mov	r4, r0
 800514a:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] + inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] - inst->q[3] * inst->q[3]);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005168:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800516c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800517c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005180:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005194:	ee77 7a67 	vsub.f32	s15, s14, s15
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 8005198:	ee17 0a90 	vmov	r0, s15
 800519c:	f7fb f9e4 	bl	8000568 <__aeabi_f2d>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	ec43 2b11 	vmov	d1, r2, r3
 80051a8:	ec45 4b10 	vmov	d0, r4, r5
 80051ac:	f017 fb74 	bl	801c898 <atan2>
 80051b0:	ec54 3b10 	vmov	r3, r4, d0
 80051b4:	4618      	mov	r0, r3
 80051b6:	4621      	mov	r1, r4
 80051b8:	f7fb fd26 	bl	8000c08 <__aeabi_d2f>
 80051bc:	4602      	mov	r2, r0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60da      	str	r2, [r3, #12]
	inst->pitch = -asin(2.0f * (inst->q[1] * inst->q[3] - inst->q[0] * inst->q[2]));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80051ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80051de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051ea:	ee17 0a90 	vmov	r0, s15
 80051ee:	f7fb f9bb 	bl	8000568 <__aeabi_f2d>
 80051f2:	4603      	mov	r3, r0
 80051f4:	460c      	mov	r4, r1
 80051f6:	ec44 3b10 	vmov	d0, r3, r4
 80051fa:	f017 faf5 	bl	801c7e8 <asin>
 80051fe:	ec54 3b10 	vmov	r3, r4, d0
 8005202:	4618      	mov	r0, r3
 8005204:	4621      	mov	r1, r4
 8005206:	f7fb fcff 	bl	8000c08 <__aeabi_d2f>
 800520a:	4603      	mov	r3, r0
 800520c:	ee07 3a90 	vmov	s15, r3
 8005210:	eef1 7a67 	vneg.f32	s15, s15
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800523a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800523e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005242:	ee17 0a90 	vmov	r0, s15
 8005246:	f7fb f98f 	bl	8000568 <__aeabi_f2d>
 800524a:	4604      	mov	r4, r0
 800524c:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] - inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] + inst->q[3] * inst->q[3]);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800525a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800526a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800526e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800527e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005282:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005296:	ee77 7a27 	vadd.f32	s15, s14, s15
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 800529a:	ee17 0a90 	vmov	r0, s15
 800529e:	f7fb f963 	bl	8000568 <__aeabi_f2d>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	ec43 2b11 	vmov	d1, r2, r3
 80052aa:	ec45 4b10 	vmov	d0, r4, r5
 80052ae:	f017 faf3 	bl	801c898 <atan2>
 80052b2:	ec54 3b10 	vmov	r3, r4, d0
 80052b6:	4618      	mov	r0, r3
 80052b8:	4621      	mov	r1, r4
 80052ba:	f7fb fca5 	bl	8000c08 <__aeabi_d2f>
 80052be:	4602      	mov	r2, r0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	615a      	str	r2, [r3, #20]
	inst->yaw	*= -180.0f / M_PI;			// Convert to degrees
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fb f94d 	bl	8000568 <__aeabi_f2d>
 80052ce:	a37c      	add	r3, pc, #496	; (adr r3, 80054c0 <MPU9250_updateEuler+0x3b0>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f7fb f9a0 	bl	8000618 <__aeabi_dmul>
 80052d8:	4603      	mov	r3, r0
 80052da:	460c      	mov	r4, r1
 80052dc:	4618      	mov	r0, r3
 80052de:	4621      	mov	r1, r4
 80052e0:	f7fb fc92 	bl	8000c08 <__aeabi_d2f>
 80052e4:	4602      	mov	r2, r0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60da      	str	r2, [r3, #12]
	inst->pitch *= 180.0f / M_PI;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fb f93a 	bl	8000568 <__aeabi_f2d>
 80052f4:	a374      	add	r3, pc, #464	; (adr r3, 80054c8 <MPU9250_updateEuler+0x3b8>)
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f7fb f98d 	bl	8000618 <__aeabi_dmul>
 80052fe:	4603      	mov	r3, r0
 8005300:	460c      	mov	r4, r1
 8005302:	4618      	mov	r0, r3
 8005304:	4621      	mov	r1, r4
 8005306:	f7fb fc7f 	bl	8000c08 <__aeabi_d2f>
 800530a:	4602      	mov	r2, r0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	611a      	str	r2, [r3, #16]
	inst->roll  *= 180.0f / M_PI;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	4618      	mov	r0, r3
 8005316:	f7fb f927 	bl	8000568 <__aeabi_f2d>
 800531a:	a36b      	add	r3, pc, #428	; (adr r3, 80054c8 <MPU9250_updateEuler+0x3b8>)
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f7fb f97a 	bl	8000618 <__aeabi_dmul>
 8005324:	4603      	mov	r3, r0
 8005326:	460c      	mov	r4, r1
 8005328:	4618      	mov	r0, r3
 800532a:	4621      	mov	r1, r4
 800532c:	f7fb fc6c 	bl	8000c08 <__aeabi_d2f>
 8005330:	4602      	mov	r2, r0
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	615a      	str	r2, [r3, #20]

	inst->yaw 	+= inst->eulerOffsets[0];	// Add offsets
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	ed93 7a03 	vldr	s14, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8005342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	edc3 7a03 	vstr	s15, [r3, #12]
	inst->pitch	+= inst->eulerOffsets[1];
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll 	+= inst->eulerOffsets[2];
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	ed93 7a05 	vldr	s14, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800536e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	edc3 7a05 	vstr	s15, [r3, #20]

	inst->yaw_dx = inst->yaw;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	619a      	str	r2, [r3, #24]
	inst->yaw_dx -= inst->yaw;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	ed93 7a06 	vldr	s14, [r3, #24]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	edd3 7a03 	vldr	s15, [r3, #12]
 800538c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	edc3 7a06 	vstr	s15, [r3, #24]
	inst->yaw_dx *= (1000000.0f / (micros() - inst->euler_lastUpdate));
 8005396:	f7fe fb64 	bl	8003a62 <micros>
 800539a:	4602      	mov	r2, r0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	ee07 3a90 	vmov	s15, r3
 80053a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ac:	eddf 6a42 	vldr	s13, [pc, #264]	; 80054b8 <MPU9250_updateEuler+0x3a8>
 80053b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	edc3 7a06 	vstr	s15, [r3, #24]

	if(inst->yaw < 0)	inst->yaw	+= 360.0f;	// Fix overflow
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80053ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d2:	d50a      	bpl.n	80053ea <MPU9250_updateEuler+0x2da>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80053da:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80054bc <MPU9250_updateEuler+0x3ac>
 80053de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	edc3 7a03 	vstr	s15, [r3, #12]
 80053e8:	e013      	b.n	8005412 <MPU9250_updateEuler+0x302>
	else if (inst->yaw > 360) inst->yaw -= 360.0f;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80053f0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80054bc <MPU9250_updateEuler+0x3ac>
 80053f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fc:	dd09      	ble.n	8005412 <MPU9250_updateEuler+0x302>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	edd3 7a03 	vldr	s15, [r3, #12]
 8005404:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80054bc <MPU9250_updateEuler+0x3ac>
 8005408:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	edc3 7a03 	vstr	s15, [r3, #12]
	if(inst->pitch < 0)	inst->pitch	+= 360.0f;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	edd3 7a04 	vldr	s15, [r3, #16]
 8005418:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800541c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005420:	d50a      	bpl.n	8005438 <MPU9250_updateEuler+0x328>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	edd3 7a04 	vldr	s15, [r3, #16]
 8005428:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80054bc <MPU9250_updateEuler+0x3ac>
 800542c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	edc3 7a04 	vstr	s15, [r3, #16]
 8005436:	e013      	b.n	8005460 <MPU9250_updateEuler+0x350>
	else if (inst->pitch > 360) inst->pitch -= 360.0f;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	edd3 7a04 	vldr	s15, [r3, #16]
 800543e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80054bc <MPU9250_updateEuler+0x3ac>
 8005442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544a:	dd09      	ble.n	8005460 <MPU9250_updateEuler+0x350>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005452:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80054bc <MPU9250_updateEuler+0x3ac>
 8005456:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	edc3 7a04 	vstr	s15, [r3, #16]
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	edd3 7a05 	vldr	s15, [r3, #20]
 8005466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546e:	d50a      	bpl.n	8005486 <MPU9250_updateEuler+0x376>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	edd3 7a05 	vldr	s15, [r3, #20]
 8005476:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80054bc <MPU9250_updateEuler+0x3ac>
 800547a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	edc3 7a05 	vstr	s15, [r3, #20]
	roll  *= 180.0f / PI;
	lin_ax = ax + a31;
	lin_ay = ay + a32;
	lin_az = az - a33;
	*/
}
 8005484:	e014      	b.n	80054b0 <MPU9250_updateEuler+0x3a0>
	else if (inst->roll > 360) inst->roll -= 360.0f;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	edd3 7a05 	vldr	s15, [r3, #20]
 800548c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80054bc <MPU9250_updateEuler+0x3ac>
 8005490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005498:	dc00      	bgt.n	800549c <MPU9250_updateEuler+0x38c>
}
 800549a:	e009      	b.n	80054b0 <MPU9250_updateEuler+0x3a0>
	else if (inst->roll > 360) inst->roll -= 360.0f;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	edd3 7a05 	vldr	s15, [r3, #20]
 80054a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80054bc <MPU9250_updateEuler+0x3ac>
 80054a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bdb0      	pop	{r4, r5, r7, pc}
 80054b8:	49742400 	.word	0x49742400
 80054bc:	43b40000 	.word	0x43b40000
 80054c0:	1a63c1f8 	.word	0x1a63c1f8
 80054c4:	c04ca5dc 	.word	0xc04ca5dc
 80054c8:	1a63c1f8 	.word	0x1a63c1f8
 80054cc:	404ca5dc 	.word	0x404ca5dc

080054d0 <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(MPU9250* inst)
{
 80054d0:	b5b0      	push	{r4, r5, r7, lr}
 80054d2:	b0b2      	sub	sp, #200	; 0xc8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	// Transform matrix for proper axis
	float ax = inst->ax, 			 ay = -(inst->ay), 				az = -(inst->az);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80054e6:	eef1 7a67 	vneg.f32	s15, s15
 80054ea:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80054f4:	eef1 7a67 	vneg.f32	s15, s15
 80054f8:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	float gx = inst->gx*M_PI/180.0f, gy = -(inst->gy)*M_PI/180.0f, 	gz = -(inst->gz)*M_PI/180.0f;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	4618      	mov	r0, r3
 8005502:	f7fb f831 	bl	8000568 <__aeabi_f2d>
 8005506:	a3b0      	add	r3, pc, #704	; (adr r3, 80057c8 <MadgwickQuaternionUpdate+0x2f8>)
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f7fb f884 	bl	8000618 <__aeabi_dmul>
 8005510:	4603      	mov	r3, r0
 8005512:	460c      	mov	r4, r1
 8005514:	4618      	mov	r0, r3
 8005516:	4621      	mov	r1, r4
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	4bac      	ldr	r3, [pc, #688]	; (80057d0 <MadgwickQuaternionUpdate+0x300>)
 800551e:	f7fb f9a5 	bl	800086c <__aeabi_ddiv>
 8005522:	4603      	mov	r3, r0
 8005524:	460c      	mov	r4, r1
 8005526:	4618      	mov	r0, r3
 8005528:	4621      	mov	r1, r4
 800552a:	f7fb fb6d 	bl	8000c08 <__aeabi_d2f>
 800552e:	4603      	mov	r3, r0
 8005530:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800553a:	eef1 7a67 	vneg.f32	s15, s15
 800553e:	ee17 3a90 	vmov	r3, s15
 8005542:	4618      	mov	r0, r3
 8005544:	f7fb f810 	bl	8000568 <__aeabi_f2d>
 8005548:	a39f      	add	r3, pc, #636	; (adr r3, 80057c8 <MadgwickQuaternionUpdate+0x2f8>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fb f863 	bl	8000618 <__aeabi_dmul>
 8005552:	4603      	mov	r3, r0
 8005554:	460c      	mov	r4, r1
 8005556:	4618      	mov	r0, r3
 8005558:	4621      	mov	r1, r4
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	4b9c      	ldr	r3, [pc, #624]	; (80057d0 <MadgwickQuaternionUpdate+0x300>)
 8005560:	f7fb f984 	bl	800086c <__aeabi_ddiv>
 8005564:	4603      	mov	r3, r0
 8005566:	460c      	mov	r4, r1
 8005568:	4618      	mov	r0, r3
 800556a:	4621      	mov	r1, r4
 800556c:	f7fb fb4c 	bl	8000c08 <__aeabi_d2f>
 8005570:	4603      	mov	r3, r0
 8005572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800557c:	eef1 7a67 	vneg.f32	s15, s15
 8005580:	ee17 3a90 	vmov	r3, s15
 8005584:	4618      	mov	r0, r3
 8005586:	f7fa ffef 	bl	8000568 <__aeabi_f2d>
 800558a:	a38f      	add	r3, pc, #572	; (adr r3, 80057c8 <MadgwickQuaternionUpdate+0x2f8>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fb f842 	bl	8000618 <__aeabi_dmul>
 8005594:	4603      	mov	r3, r0
 8005596:	460c      	mov	r4, r1
 8005598:	4618      	mov	r0, r3
 800559a:	4621      	mov	r1, r4
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	4b8b      	ldr	r3, [pc, #556]	; (80057d0 <MadgwickQuaternionUpdate+0x300>)
 80055a2:	f7fb f963 	bl	800086c <__aeabi_ddiv>
 80055a6:	4603      	mov	r3, r0
 80055a8:	460c      	mov	r4, r1
 80055aa:	4618      	mov	r0, r3
 80055ac:	4621      	mov	r1, r4
 80055ae:	f7fb fb2b 	bl	8000c08 <__aeabi_d2f>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float mx = inst->my, 			 my = -(inst->mx),				mz = inst->mz;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055c6:	eef1 7a67 	vneg.f32	s15, s15
 80055ca:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	float q1 = inst->q[0], q2 = inst->q[1], q3 = inst->q[2], q4 = inst->q[3];   // short name local variable for readability
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 80055fe:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005602:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005606:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float _2q2 = 2.0f * q2;
 800560a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800560e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005612:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float _2q3 = 2.0f * q3;
 8005616:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800561a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800561e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float _2q4 = 2.0f * q4;
 8005622:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005626:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800562a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float _2q1q3 = 2.0f * q1 * q3;
 800562e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005632:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005636:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float _2q3q4 = 2.0f * q3 * q4;
 8005642:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005646:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800564a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800564e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005652:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q1q1 = q1 * q1;
 8005656:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800565a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	float q1q2 = q1 * q2;
 8005666:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800566a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800566e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005672:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q1q3 = q1 * q3;
 8005676:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800567a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800567e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005682:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q1q4 = q1 * q4;
 8005686:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800568a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005692:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q2q2 = q2 * q2;
 8005696:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800569a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800569e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q2q3 = q2 * q3;
 80056a6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80056aa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q2q4 = q2 * q4;
 80056b6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80056ba:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q3q3 = q3 * q3;
 80056c6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80056ca:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q3q4 = q3 * q4;
 80056d6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80056da:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q4q4 = q4 * q4;
 80056e6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80056ea:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 80056f6:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80056fa:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80056fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005702:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8005706:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800570a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800570e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005712:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8005716:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800571a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800571e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005722:	eeb0 0a67 	vmov.f32	s0, s15
 8005726:	f017 fa8d 	bl	801cc44 <sqrtf>
 800572a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 800572e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005732:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573a:	f000 8614 	beq.w	8006366 <MadgwickQuaternionUpdate+0xe96>
	norm = 1.0f/norm;
 800573e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005742:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	ax *= norm;
 800574e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005752:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	ay *= norm;
 800575e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8005762:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	az *= norm;
 800576e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8005772:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577a:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 800577e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005782:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800578a:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 800578e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005796:	ee37 7a27 	vadd.f32	s14, s14, s15
 800579a:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 800579e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80057a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057aa:	eeb0 0a67 	vmov.f32	s0, s15
 80057ae:	f017 fa49 	bl	801cc44 <sqrtf>
 80057b2:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 80057b6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c2:	f000 85d2 	beq.w	800636a <MadgwickQuaternionUpdate+0xe9a>
 80057c6:	e005      	b.n	80057d4 <MadgwickQuaternionUpdate+0x304>
 80057c8:	54442d18 	.word	0x54442d18
 80057cc:	400921fb 	.word	0x400921fb
 80057d0:	40668000 	.word	0x40668000
	norm = 1.0f/norm;
 80057d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057d8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80057dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	mx *= norm;
 80057e4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80057e8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	my *= norm;
 80057f4:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80057f8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005800:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	mz *= norm;
 8005804:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005808:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800580c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005810:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8005814:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005818:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800581c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005824:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2q1my = 2.0f * q1 * my;
 8005828:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800582c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005830:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005838:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	_2q1mz = 2.0f * q1 * mz;
 800583c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005840:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005844:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_2q2mx = 2.0f * q2 * mx;
 8005850:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005854:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005858:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800585c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005860:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8005864:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005868:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800586c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005870:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8005874:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800587c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005880:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005884:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800588c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005890:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8005894:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800589c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058a0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80058a4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80058a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058ac:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80058b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058b8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80058bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80058c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058c4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80058c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058d0:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80058d4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80058d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058e0:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80058e4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80058e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058f0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80058f4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80058f8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80058fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005900:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005904:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800590c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005910:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005914:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800591c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005920:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005924:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800592c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005930:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005934:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800593c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005940:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005944:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800594c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005950:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005954:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005958:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800595c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005968:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 800596c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005978:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	_2bx = sqrtf(hx * hx + hy * hy);
 800597c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005980:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005988:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800598c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005998:	eeb0 0a67 	vmov.f32	s0, s15
 800599c:	f017 f952 	bl	801cc44 <sqrtf>
 80059a0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80059a4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80059a8:	eeb1 7a67 	vneg.f32	s14, s15
 80059ac:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80059b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059b4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80059b8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80059bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059c4:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80059c8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80059cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059d4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80059d8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80059dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059e4:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80059e8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80059ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059f4:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80059f8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80059fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a00:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a0c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a10:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a1c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a20:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a2c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	_4bx = 2.0f * _2bx;
 8005a30:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005a34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a38:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_4bz = 2.0f * _2bz;
 8005a3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005a40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a44:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005a48:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005a4c:	eeb1 7a67 	vneg.f32	s14, s15
 8005a50:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a54:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005a58:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005a5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a60:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005a64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a6c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005a70:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005a74:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005a78:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a7c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005a80:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a84:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a90:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005a94:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005a98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a9c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005aa0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005aa4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005aa8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005aac:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005ab0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ab4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005ab8:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005abc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005ac0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ac4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005ac8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005acc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ad0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005ad4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005adc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ae0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ae4:	eef1 6a67 	vneg.f32	s13, s15
 8005ae8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005aec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005af0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005af4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005af8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005afc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b00:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005b04:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005b08:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b0c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b10:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005b14:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005b18:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005b1c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005b20:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b24:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b28:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b2c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b3c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005b40:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005b44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b48:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005b4c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005b50:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005b5c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005b60:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005b64:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005b68:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005b6c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005b70:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b74:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b78:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b7c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005b80:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005b90:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005b94:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005b98:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005b9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ba0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005ba4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ba8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bb0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005bb4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005bb8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005bbc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005bc0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005bc4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005bc8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bd4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005bd8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005bdc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005be0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005be4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005be8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005bec:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005bf0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005bf4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005bf8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005bfc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005c00:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c0c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005c10:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005c14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c18:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005c1c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005c20:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c24:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005c28:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c30:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c34:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005c38:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005c3c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005c40:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005c44:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005c48:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c4c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005c50:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c5c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005c60:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c68:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005c6c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005c70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c78:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005c7c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005c80:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c8c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005c90:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005c94:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005c98:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005c9c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ca0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ca4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005ca8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005cac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cb4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005cb8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005cbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005cc0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8005cc4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cc8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005ccc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005cd0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005cd4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005cd8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005cdc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ce0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005ce4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005ce8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005cec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005cf0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005cf4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005cf8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005cfc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005d00:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d04:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005d08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d14:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005d18:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005d1c:	eeb1 7a67 	vneg.f32	s14, s15
 8005d20:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d24:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d28:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d30:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005d34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d3c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005d40:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d44:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005d48:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d4c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005d50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d54:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d60:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d64:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005d68:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005d6c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005d70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d74:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005d78:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d7c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005d80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d84:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d88:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005d8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d98:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005d9c:	eef1 6a67 	vneg.f32	s13, s15
 8005da0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005da4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005da8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005dac:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005db0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005db4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005db8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005dbc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005dc0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005dc4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005dc8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005dcc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005dd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005dd4:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005dd8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005ddc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005de0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005de4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005de8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005dec:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005df0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005df4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dfc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005e00:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005e04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e08:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005e0c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005e10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e14:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005e18:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005e1c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005e20:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005e24:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005e2c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005e30:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005e34:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005e38:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005e40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e44:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005e48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e54:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005e58:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005e5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e60:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8005e64:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005e68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005e70:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005e74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005e78:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005e84:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005e88:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005e8c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005e90:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e94:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005e98:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e9c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ea0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ea4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005ea8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eb4:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005eb8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005ebc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005ec0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005ec4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ec8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005ecc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ed0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ed8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005edc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ee0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005ee4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005ee8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005eec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ef0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005ef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ef8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005efc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005f00:	eef1 6a67 	vneg.f32	s13, s15
 8005f04:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005f08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f0c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005f10:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005f14:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f1c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005f20:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005f24:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f28:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005f2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f30:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005f38:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005f3c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005f40:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005f44:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f48:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005f4c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005f50:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f54:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f64:	eef1 6a67 	vneg.f32	s13, s15
 8005f68:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005f6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f70:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005f74:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005f78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f7c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f80:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005f84:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005f88:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f8c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005f94:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005f98:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005f9c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005fa0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005fa4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005fa8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005fac:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005fb0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fbc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005fc0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005fc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fc8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005fcc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005fd0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005fd4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005fd8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005fdc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005fe0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005fe4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005fe8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005fec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ff0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005ff4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ff8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ffc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006000:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800600c:	edc7 7a06 	vstr	s15, [r7, #24]
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8006010:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006014:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800601c:	edd7 6a08 	vldr	s13, [r7, #32]
 8006020:	edd7 7a08 	vldr	s15, [r7, #32]
 8006024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800602c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006030:	edd7 7a07 	vldr	s15, [r7, #28]
 8006034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006038:	ee37 7a27 	vadd.f32	s14, s14, s15
 800603c:	edd7 6a06 	vldr	s13, [r7, #24]
 8006040:	edd7 7a06 	vldr	s15, [r7, #24]
 8006044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800604c:	eeb0 0a67 	vmov.f32	s0, s15
 8006050:	f016 fdf8 	bl	801cc44 <sqrtf>
 8006054:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 8006058:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006064:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	s1 *= norm;
 8006068:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800606c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006074:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 *= norm;
 8006078:	ed97 7a08 	vldr	s14, [r7, #32]
 800607c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006084:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 *= norm;
 8006088:	ed97 7a07 	vldr	s14, [r7, #28]
 800608c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006094:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 *= norm;
 8006098:	ed97 7a06 	vldr	s14, [r7, #24]
 800609c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80060a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a4:	edc7 7a06 	vstr	s15, [r7, #24]

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - MPU9250_ALG_BETA * s1;
 80060a8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80060ac:	eeb1 7a67 	vneg.f32	s14, s15
 80060b0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80060b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060b8:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80060bc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80060c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060c8:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80060cc:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80060d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060e0:	ee17 0a90 	vmov	r0, s15
 80060e4:	f7fa fa40 	bl	8000568 <__aeabi_f2d>
 80060e8:	4604      	mov	r4, r0
 80060ea:	460d      	mov	r5, r1
 80060ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060ee:	f7fa fa3b 	bl	8000568 <__aeabi_f2d>
 80060f2:	a3a1      	add	r3, pc, #644	; (adr r3, 8006378 <MadgwickQuaternionUpdate+0xea8>)
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f7fa fa8e 	bl	8000618 <__aeabi_dmul>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4620      	mov	r0, r4
 8006102:	4629      	mov	r1, r5
 8006104:	f7fa f8d0 	bl	80002a8 <__aeabi_dsub>
 8006108:	4603      	mov	r3, r0
 800610a:	460c      	mov	r4, r1
 800610c:	4618      	mov	r0, r3
 800610e:	4621      	mov	r1, r4
 8006110:	f7fa fd7a 	bl	8000c08 <__aeabi_d2f>
 8006114:	4603      	mov	r3, r0
 8006116:	617b      	str	r3, [r7, #20]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - MPU9250_ALG_BETA * s2;
 8006118:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800611c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006124:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006128:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800612c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006130:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006134:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006138:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800613c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006144:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800614c:	ee17 0a90 	vmov	r0, s15
 8006150:	f7fa fa0a 	bl	8000568 <__aeabi_f2d>
 8006154:	4604      	mov	r4, r0
 8006156:	460d      	mov	r5, r1
 8006158:	6a38      	ldr	r0, [r7, #32]
 800615a:	f7fa fa05 	bl	8000568 <__aeabi_f2d>
 800615e:	a386      	add	r3, pc, #536	; (adr r3, 8006378 <MadgwickQuaternionUpdate+0xea8>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f7fa fa58 	bl	8000618 <__aeabi_dmul>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4620      	mov	r0, r4
 800616e:	4629      	mov	r1, r5
 8006170:	f7fa f89a 	bl	80002a8 <__aeabi_dsub>
 8006174:	4603      	mov	r3, r0
 8006176:	460c      	mov	r4, r1
 8006178:	4618      	mov	r0, r3
 800617a:	4621      	mov	r1, r4
 800617c:	f7fa fd44 	bl	8000c08 <__aeabi_d2f>
 8006180:	4603      	mov	r3, r0
 8006182:	613b      	str	r3, [r7, #16]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - MPU9250_ALG_BETA * s3;
 8006184:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006188:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800618c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006190:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8006194:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800619c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061a0:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80061a4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80061a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061b8:	ee17 0a90 	vmov	r0, s15
 80061bc:	f7fa f9d4 	bl	8000568 <__aeabi_f2d>
 80061c0:	4604      	mov	r4, r0
 80061c2:	460d      	mov	r5, r1
 80061c4:	69f8      	ldr	r0, [r7, #28]
 80061c6:	f7fa f9cf 	bl	8000568 <__aeabi_f2d>
 80061ca:	a36b      	add	r3, pc, #428	; (adr r3, 8006378 <MadgwickQuaternionUpdate+0xea8>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7fa fa22 	bl	8000618 <__aeabi_dmul>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4620      	mov	r0, r4
 80061da:	4629      	mov	r1, r5
 80061dc:	f7fa f864 	bl	80002a8 <__aeabi_dsub>
 80061e0:	4603      	mov	r3, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	4618      	mov	r0, r3
 80061e6:	4621      	mov	r1, r4
 80061e8:	f7fa fd0e 	bl	8000c08 <__aeabi_d2f>
 80061ec:	4603      	mov	r3, r0
 80061ee:	60fb      	str	r3, [r7, #12]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - MPU9250_ALG_BETA * s4;
 80061f0:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80061f4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80061f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061fc:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8006200:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800620c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006210:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800621c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006224:	ee17 0a90 	vmov	r0, s15
 8006228:	f7fa f99e 	bl	8000568 <__aeabi_f2d>
 800622c:	4604      	mov	r4, r0
 800622e:	460d      	mov	r5, r1
 8006230:	69b8      	ldr	r0, [r7, #24]
 8006232:	f7fa f999 	bl	8000568 <__aeabi_f2d>
 8006236:	a350      	add	r3, pc, #320	; (adr r3, 8006378 <MadgwickQuaternionUpdate+0xea8>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f7fa f9ec 	bl	8000618 <__aeabi_dmul>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f7fa f82e 	bl	80002a8 <__aeabi_dsub>
 800624c:	4603      	mov	r3, r0
 800624e:	460c      	mov	r4, r1
 8006250:	4618      	mov	r0, r3
 8006252:	4621      	mov	r1, r4
 8006254:	f7fa fcd8 	bl	8000c08 <__aeabi_d2f>
 8006258:	4603      	mov	r3, r0
 800625a:	60bb      	str	r3, [r7, #8]

	// Integrate to yield quaternion
	q1 += qDot1 * inst->alg_deltat;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8006262:	edd7 7a05 	vldr	s15, [r7, #20]
 8006266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800626e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006272:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	q2 += qDot2 * inst->alg_deltat;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800627c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006284:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8006288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800628c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	q3 += qDot3 * inst->alg_deltat;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8006296:	edd7 7a03 	vldr	s15, [r7, #12]
 800629a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80062a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062a6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	q4 += qDot4 * inst->alg_deltat;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80062b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80062b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80062bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062c0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80062c4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80062c8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80062cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062d0:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 80062d4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80062d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062e0:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80062e4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80062e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062f0:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80062f4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80062f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006300:	eeb0 0a67 	vmov.f32	s0, s15
 8006304:	f016 fc9e 	bl	801cc44 <sqrtf>
 8006308:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 800630c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006310:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006318:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	inst->q[0] = q1 * norm;
 800631c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006320:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	inst->q[1] = q2 * norm;
 800632e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8006332:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	inst->q[2] = q3 * norm;
 8006340:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006344:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	inst->q[3] = q4 * norm;
 8006352:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8006356:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800635a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 8006364:	e002      	b.n	800636c <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 8006366:	bf00      	nop
 8006368:	e000      	b.n	800636c <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 800636a:	bf00      	nop
}
 800636c:	37c8      	adds	r7, #200	; 0xc8
 800636e:	46bd      	mov	sp, r7
 8006370:	bdb0      	pop	{r4, r5, r7, pc}
 8006372:	bf00      	nop
 8006374:	f3af 8000 	nop.w
 8006378:	89f0ed0f 	.word	0x89f0ed0f
 800637c:	3fed0552 	.word	0x3fed0552

08006380 <micros>:
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
 8006384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	4618      	mov	r0, r3
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <println>:
		return true;
	}
	return false;
}
static inline bool println(const char* format, ...)
{
 8006394:	b40f      	push	{r0, r1, r2, r3}
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
	if (usbPresent)
 800639c:	4b24      	ldr	r3, [pc, #144]	; (8006430 <println+0x9c>)
 800639e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d13b      	bne.n	800641e <println+0x8a>
	{
		va_list argptr;
		va_start(argptr, format);
 80063a6:	f107 031c 	add.w	r3, r7, #28
 80063aa:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	69b9      	ldr	r1, [r7, #24]
 80063b0:	4820      	ldr	r0, [pc, #128]	; (8006434 <println+0xa0>)
 80063b2:	f014 fa3b 	bl	801a82c <vsiprintf>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <println+0xa4>)
 80063bc:	601a      	str	r2, [r3, #0]
		va_end(argptr);

		printBuffer[printLen] = '\r';
 80063be:	4b1e      	ldr	r3, [pc, #120]	; (8006438 <println+0xa4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1c      	ldr	r2, [pc, #112]	; (8006434 <println+0xa0>)
 80063c4:	210d      	movs	r1, #13
 80063c6:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 80063c8:	4b1b      	ldr	r3, [pc, #108]	; (8006438 <println+0xa4>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3301      	adds	r3, #1
 80063ce:	4a19      	ldr	r2, [pc, #100]	; (8006434 <println+0xa0>)
 80063d0:	210a      	movs	r1, #10
 80063d2:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 80063d4:	4b18      	ldr	r3, [pc, #96]	; (8006438 <println+0xa4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3302      	adds	r3, #2
 80063da:	4a16      	ldr	r2, [pc, #88]	; (8006434 <println+0xa0>)
 80063dc:	2100      	movs	r1, #0
 80063de:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 80063e0:	4b15      	ldr	r3, [pc, #84]	; (8006438 <println+0xa4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3303      	adds	r3, #3
 80063e6:	4a14      	ldr	r2, [pc, #80]	; (8006438 <println+0xa4>)
 80063e8:	6013      	str	r3, [r2, #0]

		uint32_t printStart = micros();
 80063ea:	f7ff ffc9 	bl	8006380 <micros>
 80063ee:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 80063f0:	4b11      	ldr	r3, [pc, #68]	; (8006438 <println+0xa4>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	3346      	adds	r3, #70	; 0x46
 80063fe:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8006400:	e001      	b.n	8006406 <println+0x72>
		{
			if (micros() - printStart > timeout && false)
 8006402:	f7ff ffbd 	bl	8006380 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <println+0xa4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	4619      	mov	r1, r3
 800640e:	4809      	ldr	r0, [pc, #36]	; (8006434 <println+0xa0>)
 8006410:	f011 ff00 	bl	8018214 <CDC_Transmit_FS>
 8006414:	4603      	mov	r3, r0
 8006416:	2b01      	cmp	r3, #1
 8006418:	d0f3      	beq.n	8006402 <println+0x6e>
			{
				return false;
			}
		}
		return true;
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <println+0x8c>
	}
	return false;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800642a:	b004      	add	sp, #16
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	200019c0 	.word	0x200019c0
 8006434:	20000ba8 	.word	0x20000ba8
 8006438:	20000ba4 	.word	0x20000ba4

0800643c <bytesToFloatRev>:
}

// ############### Useful #################
static inline void floatToBytes(float* value, uint8_t* buffer) { for (uint8_t i = 0; i < 4; i++) buffer[i] = *((uint8_t*)(value) + i); }
static inline void bytesToFloat(uint8_t* buffer, float* value) { for (uint8_t i = 0; i < 4; i++) *((uint8_t*)(value) + i) = buffer[i]; }
static inline void bytesToFloatRev(uint8_t* buffer, float* value) { for (uint8_t i = 0; i < 4; i++) *((uint8_t*)(value) + 3 - i) = buffer[i]; }
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
 8006446:	2300      	movs	r3, #0
 8006448:	73fb      	strb	r3, [r7, #15]
 800644a:	e00c      	b.n	8006466 <bytesToFloatRev+0x2a>
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	441a      	add	r2, r3
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	f1c3 0303 	rsb	r3, r3, #3
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	440b      	add	r3, r1
 800645c:	7812      	ldrb	r2, [r2, #0]
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	3301      	adds	r3, #1
 8006464:	73fb      	strb	r3, [r7, #15]
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b03      	cmp	r3, #3
 800646a:	d9ef      	bls.n	800644c <bytesToFloatRev+0x10>
 800646c:	bf00      	nop
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <SPS30_read>:
#include "clock.h"

#define SPS30_DEBUG 1

static bool SPS30_read(SPS30* inst)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	uint32_t temp_checksum = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]
	uint8_t incoming[1] = {0};
 8006484:	2300      	movs	r3, #0
 8006486:	723b      	strb	r3, [r7, #8]
	HAL_UART_Receive(inst->uart, incoming, 1, 5); if (incoming[0] != 0x7E) return false; // Start byte
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	f107 0108 	add.w	r1, r7, #8
 8006490:	2305      	movs	r3, #5
 8006492:	2201      	movs	r2, #1
 8006494:	f006 fee6 	bl	800d264 <HAL_UART_Receive>
 8006498:	7a3b      	ldrb	r3, [r7, #8]
 800649a:	2b7e      	cmp	r3, #126	; 0x7e
 800649c:	d001      	beq.n	80064a2 <SPS30_read+0x2a>
 800649e:	2300      	movs	r3, #0
 80064a0:	e0ea      	b.n	8006678 <SPS30_read+0x200>
	HAL_UART_Receive(inst->uart, incoming, 1, 5); if (incoming[0] != 0x00) return false;	// Address byte
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	f107 0108 	add.w	r1, r7, #8
 80064aa:	2305      	movs	r3, #5
 80064ac:	2201      	movs	r2, #1
 80064ae:	f006 fed9 	bl	800d264 <HAL_UART_Receive>
 80064b2:	7a3b      	ldrb	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <SPS30_read+0x44>
 80064b8:	2300      	movs	r3, #0
 80064ba:	e0dd      	b.n	8006678 <SPS30_read+0x200>
	HAL_UART_Receive(inst->uart, incoming, 1, 5); temp_checksum += incoming[0];			// Command byte
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	f107 0108 	add.w	r1, r7, #8
 80064c4:	2305      	movs	r3, #5
 80064c6:	2201      	movs	r2, #1
 80064c8:	f006 fecc 	bl	800d264 <HAL_UART_Receive>
 80064cc:	7a3b      	ldrb	r3, [r7, #8]
 80064ce:	461a      	mov	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive(inst->uart, incoming, 1, 5);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	f107 0108 	add.w	r1, r7, #8
 80064de:	2305      	movs	r3, #5
 80064e0:	2201      	movs	r2, #1
 80064e2:	f006 febf 	bl	800d264 <HAL_UART_Receive>
	if (incoming[0] != 0x00)						// State byte (contains errors)
 80064e6:	7a3b      	ldrb	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d006      	beq.n	80064fa <SPS30_read+0x82>
	{
		#if SPS30_DEBUG
			println("[SPS] Read error: code 0x%x", (uint8_t)incoming[0]);
 80064ec:	7a3b      	ldrb	r3, [r7, #8]
 80064ee:	4619      	mov	r1, r3
 80064f0:	4863      	ldr	r0, [pc, #396]	; (8006680 <SPS30_read+0x208>)
 80064f2:	f7ff ff4f 	bl	8006394 <println>
		#endif
		return false;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e0be      	b.n	8006678 <SPS30_read+0x200>
	}
	temp_checksum += incoming[0];
 80064fa:	7a3b      	ldrb	r3, [r7, #8]
 80064fc:	461a      	mov	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive(inst->uart, incoming, 1, 5);	inst->rxLen = incoming[0]; // Lenght byte
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	f107 0108 	add.w	r1, r7, #8
 800650c:	2305      	movs	r3, #5
 800650e:	2201      	movs	r2, #1
 8006510:	f006 fea8 	bl	800d264 <HAL_UART_Receive>
 8006514:	7a3a      	ldrb	r2, [r7, #8]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
	temp_checksum += incoming[0];
 800651c:	7a3b      	ldrb	r3, [r7, #8]
 800651e:	461a      	mov	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

	if (inst->rxLen > 0)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 800652c:	2b00      	cmp	r3, #0
 800652e:	d017      	beq.n	8006560 <SPS30_read+0xe8>
	{
		memset(inst->rxBuffer, 0x00, 255);				// Clear buffer and receive stuffed data
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	333c      	adds	r3, #60	; 0x3c
 8006534:	22ff      	movs	r2, #255	; 0xff
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f012 fb18 	bl	8018b6e <memset>
		if (HAL_UART_Receive(inst->uart, inst->rxBuffer, inst->rxLen, 5) != HAL_OK) return false;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 800654e:	b29a      	uxth	r2, r3
 8006550:	2305      	movs	r3, #5
 8006552:	f006 fe87 	bl	800d264 <HAL_UART_Receive>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <SPS30_read+0xe8>
 800655c:	2300      	movs	r3, #0
 800655e:	e08b      	b.n	8006678 <SPS30_read+0x200>
	}
	HAL_UART_Receive(inst->uart, incoming, 1, 5); inst->checksum = incoming[0];	// Checksum byte
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	f107 0108 	add.w	r1, r7, #8
 8006568:	2305      	movs	r3, #5
 800656a:	2201      	movs	r2, #1
 800656c:	f006 fe7a 	bl	800d264 <HAL_UART_Receive>
 8006570:	7a3a      	ldrb	r2, [r7, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
	HAL_UART_Receive(inst->uart, incoming, 1, 5); if (incoming[0] != 0x7E) return false;	// Stop byte
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	f107 0108 	add.w	r1, r7, #8
 8006580:	2305      	movs	r3, #5
 8006582:	2201      	movs	r2, #1
 8006584:	f006 fe6e 	bl	800d264 <HAL_UART_Receive>
 8006588:	7a3b      	ldrb	r3, [r7, #8]
 800658a:	2b7e      	cmp	r3, #126	; 0x7e
 800658c:	d001      	beq.n	8006592 <SPS30_read+0x11a>
 800658e:	2300      	movs	r3, #0
 8006590:	e072      	b.n	8006678 <SPS30_read+0x200>

	uint8_t BD = 0;	// byte index of rxData array
 8006592:	2300      	movs	r3, #0
 8006594:	72fb      	strb	r3, [r7, #11]
	memset(inst->rxData, 0x00, 255);				// Data un-stuffing, clear buffer
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f203 133b 	addw	r3, r3, #315	; 0x13b
 800659c:	22ff      	movs	r2, #255	; 0xff
 800659e:	2100      	movs	r1, #0
 80065a0:	4618      	mov	r0, r3
 80065a2:	f012 fae4 	bl	8018b6e <memset>
	for (uint8_t B = 0; B < inst->rxLen; B++)
 80065a6:	2300      	movs	r3, #0
 80065a8:	72bb      	strb	r3, [r7, #10]
 80065aa:	e050      	b.n	800664e <SPS30_read+0x1d6>
	{
		if (inst->rxBuffer[B] == 0x7D)
 80065ac:	7abb      	ldrb	r3, [r7, #10]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	4413      	add	r3, r2
 80065b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b6:	2b7d      	cmp	r3, #125	; 0x7d
 80065b8:	d12f      	bne.n	800661a <SPS30_read+0x1a2>
		{
			B++;
 80065ba:	7abb      	ldrb	r3, [r7, #10]
 80065bc:	3301      	adds	r3, #1
 80065be:	72bb      	strb	r3, [r7, #10]
			switch (inst->rxBuffer[B])				// Values for un-stuffing are from SPS30 datasheet
 80065c0:	7abb      	ldrb	r3, [r7, #10]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	4413      	add	r3, r2
 80065c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ca:	2b33      	cmp	r3, #51	; 0x33
 80065cc:	d01e      	beq.n	800660c <SPS30_read+0x194>
 80065ce:	2b33      	cmp	r3, #51	; 0x33
 80065d0:	dc02      	bgt.n	80065d8 <SPS30_read+0x160>
 80065d2:	2b31      	cmp	r3, #49	; 0x31
 80065d4:	d013      	beq.n	80065fe <SPS30_read+0x186>
					break;
				case 0x33:
					inst->rxData[BD] = 0x13;
					break;
				default:
					break;
 80065d6:	e02b      	b.n	8006630 <SPS30_read+0x1b8>
			switch (inst->rxBuffer[B])				// Values for un-stuffing are from SPS30 datasheet
 80065d8:	2b5d      	cmp	r3, #93	; 0x5d
 80065da:	d009      	beq.n	80065f0 <SPS30_read+0x178>
 80065dc:	2b5e      	cmp	r3, #94	; 0x5e
 80065de:	d000      	beq.n	80065e2 <SPS30_read+0x16a>
					break;
 80065e0:	e026      	b.n	8006630 <SPS30_read+0x1b8>
					inst->rxData[BD] = 0x7E;
 80065e2:	7afb      	ldrb	r3, [r7, #11]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	227e      	movs	r2, #126	; 0x7e
 80065ea:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
					break;
 80065ee:	e01f      	b.n	8006630 <SPS30_read+0x1b8>
					inst->rxData[BD] = 0x7D;
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	4413      	add	r3, r2
 80065f6:	227d      	movs	r2, #125	; 0x7d
 80065f8:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
					break;
 80065fc:	e018      	b.n	8006630 <SPS30_read+0x1b8>
					inst->rxData[BD] = 0x11;
 80065fe:	7afb      	ldrb	r3, [r7, #11]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	2211      	movs	r2, #17
 8006606:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
					break;
 800660a:	e011      	b.n	8006630 <SPS30_read+0x1b8>
					inst->rxData[BD] = 0x13;
 800660c:	7afb      	ldrb	r3, [r7, #11]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	4413      	add	r3, r2
 8006612:	2213      	movs	r2, #19
 8006614:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
					break;
 8006618:	e00a      	b.n	8006630 <SPS30_read+0x1b8>
			}
			//inst->rxData[BD] = inst->rxBuffer[B] + 0x20;	// [!!!] Shortcut, may not work
		}
		else
		{
			inst->rxData[BD] = inst->rxBuffer[B];
 800661a:	7aba      	ldrb	r2, [r7, #10]
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	440a      	add	r2, r1
 8006622:	f892 103c 	ldrb.w	r1, [r2, #60]	; 0x3c
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4413      	add	r3, r2
 800662a:	460a      	mov	r2, r1
 800662c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		}
		temp_checksum += inst->rxData[BD];
 8006630:	7afb      	ldrb	r3, [r7, #11]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	4413      	add	r3, r2
 8006636:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800663a:	461a      	mov	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
		BD++;
 8006642:	7afb      	ldrb	r3, [r7, #11]
 8006644:	3301      	adds	r3, #1
 8006646:	72fb      	strb	r3, [r7, #11]
	for (uint8_t B = 0; B < inst->rxLen; B++)
 8006648:	7abb      	ldrb	r3, [r7, #10]
 800664a:	3301      	adds	r3, #1
 800664c:	72bb      	strb	r3, [r7, #10]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 8006654:	7aba      	ldrb	r2, [r7, #10]
 8006656:	429a      	cmp	r2, r3
 8006658:	d3a8      	bcc.n	80065ac <SPS30_read+0x134>
	}
	if (inst->checksum != (uint8_t)~((temp_checksum & 0xFF))) // Check checksum
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 223b 	ldrb.w	r2, [r3, #571]	; 0x23b
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	43db      	mvns	r3, r3
 8006666:	b2db      	uxtb	r3, r3
 8006668:	429a      	cmp	r2, r3
 800666a:	d004      	beq.n	8006676 <SPS30_read+0x1fe>
	{
		#if SPS30_DEBUG
			println("[SPS] Read error: bad checksum");
 800666c:	4805      	ldr	r0, [pc, #20]	; (8006684 <SPS30_read+0x20c>)
 800666e:	f7ff fe91 	bl	8006394 <println>
		#endif
		return false;
 8006672:	2300      	movs	r3, #0
 8006674:	e000      	b.n	8006678 <SPS30_read+0x200>
	}
	else return true;
 8006676:	2301      	movs	r3, #1
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	0801f9e8 	.word	0x0801f9e8
 8006684:	0801fa04 	.word	0x0801fa04

08006688 <SPS30_write>:
static bool SPS30_write(SPS30* inst, uint8_t* buffer, uint8_t len)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	4613      	mov	r3, r2
 8006694:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[2] = {0};
 8006696:	2300      	movs	r3, #0
 8006698:	823b      	strh	r3, [r7, #16]
	inst->checksum = 0;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
	for (int B = 0; B < len; B++)
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e00e      	b.n	80066c6 <SPS30_write+0x3e>
	{
		inst->checksum += buffer[B];
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 223b 	ldrb.w	r2, [r3, #571]	; 0x23b
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	440b      	add	r3, r1
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	4413      	add	r3, r2
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
	for (int B = 0; B < len; B++)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	3301      	adds	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	dbec      	blt.n	80066a8 <SPS30_write+0x20>
	}
	inst->checksum = ~(inst->checksum);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 323b 	ldrb.w	r3, [r3, #571]	; 0x23b
 80066d4:	43db      	mvns	r3, r3
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b

	temp[0] = 0x7E; temp[1] = 0x00;
 80066de:	237e      	movs	r3, #126	; 0x7e
 80066e0:	743b      	strb	r3, [r7, #16]
 80066e2:	2300      	movs	r3, #0
 80066e4:	747b      	strb	r3, [r7, #17]
	HAL_UART_Transmit(inst->uart, temp, 2, 5);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	f107 0110 	add.w	r1, r7, #16
 80066ee:	2305      	movs	r3, #5
 80066f0:	2202      	movs	r2, #2
 80066f2:	f006 fd1e 	bl	800d132 <HAL_UART_Transmit>

	HAL_UART_Transmit(inst->uart, buffer, len, 5);				// transmit bytes
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	79fb      	ldrb	r3, [r7, #7]
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	2305      	movs	r3, #5
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	f006 fd16 	bl	800d132 <HAL_UART_Transmit>
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
 8006706:	bf00      	nop
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4618      	mov	r0, r3
 800670e:	f006 ffb5 	bl	800d67c <HAL_UART_GetState>
 8006712:	4603      	mov	r3, r0
 8006714:	2b20      	cmp	r3, #32
 8006716:	d1f7      	bne.n	8006708 <SPS30_write+0x80>

	temp[0] = inst->checksum; temp[1] = 0x7E;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 323b 	ldrb.w	r3, [r3, #571]	; 0x23b
 800671e:	743b      	strb	r3, [r7, #16]
 8006720:	237e      	movs	r3, #126	; 0x7e
 8006722:	747b      	strb	r3, [r7, #17]
	HAL_UART_Transmit(inst->uart, temp, 2, 5);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	f107 0110 	add.w	r1, r7, #16
 800672c:	2305      	movs	r3, #5
 800672e:	2202      	movs	r2, #2
 8006730:	f006 fcff 	bl	800d132 <HAL_UART_Transmit>
	return true;
 8006734:	2301      	movs	r3, #1
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <SPS30_init>:

bool SPS30_init(SPS30* inst)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]

	if (!SPS30_present(inst)) return false;
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f8fc 	bl	8006944 <SPS30_present>
 800674c:	4603      	mov	r3, r0
 800674e:	f083 0301 	eor.w	r3, r3, #1
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <SPS30_init+0x1e>
 8006758:	2300      	movs	r3, #0
 800675a:	e014      	b.n	8006786 <SPS30_init+0x48>

	delay(400);
 800675c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006760:	f000 f982 	bl	8006a68 <HAL_Delay>
	SPS30_reset(inst);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f8d3 	bl	8006910 <SPS30_reset>
	delay(400);
 800676a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800676e:	f000 f97b 	bl	8006a68 <HAL_Delay>

	SPS30_start_meas(inst);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f8aa 	bl	80068cc <SPS30_start_meas>

	inst->active = true;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d

	//SPS30_clean(inst);

	return inst->active;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <SPS30_update>:

bool SPS30_update(SPS30* inst)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	//SPS30_stop_meas(inst);
	// Read measurement
	inst->txBuffer[0] = SPS30_READ_MEAS;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2203      	movs	r2, #3
 800679c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txBuffer[1] = 0x00;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	SPS30_write(inst, inst->txBuffer, 2);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	332c      	adds	r3, #44	; 0x2c
 80067ac:	2202      	movs	r2, #2
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff ff69 	bl	8006688 <SPS30_write>
	if (SPS30_read(inst) && inst->rxLen >= 0x28)
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff fe5e 	bl	8006478 <SPS30_read>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d073      	beq.n	80068aa <SPS30_update+0x11a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 80067c8:	2b27      	cmp	r3, #39	; 0x27
 80067ca:	d96e      	bls.n	80068aa <SPS30_update+0x11a>
	{
		bytesToFloatRev(inst->rxData + 0, &(inst->pm1));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f203 123b 	addw	r2, r3, #315	; 0x13b
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f7ff fe2f 	bl	800643c <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 4, &(inst->pm2));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f203 133b 	addw	r3, r3, #315	; 0x13b
 80067e4:	1d1a      	adds	r2, r3, #4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3308      	adds	r3, #8
 80067ea:	4619      	mov	r1, r3
 80067ec:	4610      	mov	r0, r2
 80067ee:	f7ff fe25 	bl	800643c <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 8, &(inst->pm4));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f203 133b 	addw	r3, r3, #315	; 0x13b
 80067f8:	f103 0208 	add.w	r2, r3, #8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	330c      	adds	r3, #12
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f7ff fe1a 	bl	800643c <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 12, &(inst->pm10));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f203 133b 	addw	r3, r3, #315	; 0x13b
 800680e:	f103 020c 	add.w	r2, r3, #12
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3310      	adds	r3, #16
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f7ff fe0f 	bl	800643c <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 16, &(inst->n_pm05));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f203 133b 	addw	r3, r3, #315	; 0x13b
 8006824:	f103 0210 	add.w	r2, r3, #16
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3314      	adds	r3, #20
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f7ff fe04 	bl	800643c <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 20, &(inst->n_pm1));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f203 133b 	addw	r3, r3, #315	; 0x13b
 800683a:	f103 0214 	add.w	r2, r3, #20
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3318      	adds	r3, #24
 8006842:	4619      	mov	r1, r3
 8006844:	4610      	mov	r0, r2
 8006846:	f7ff fdf9 	bl	800643c <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 24, &(inst->n_pm2));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f203 133b 	addw	r3, r3, #315	; 0x13b
 8006850:	f103 0218 	add.w	r2, r3, #24
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	331c      	adds	r3, #28
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f7ff fdee 	bl	800643c <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 28, &(inst->n_pm4));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f203 133b 	addw	r3, r3, #315	; 0x13b
 8006866:	f103 021c 	add.w	r2, r3, #28
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3320      	adds	r3, #32
 800686e:	4619      	mov	r1, r3
 8006870:	4610      	mov	r0, r2
 8006872:	f7ff fde3 	bl	800643c <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 32, &(inst->n_pm10));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f203 133b 	addw	r3, r3, #315	; 0x13b
 800687c:	f103 0220 	add.w	r2, r3, #32
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3324      	adds	r3, #36	; 0x24
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f7ff fdd8 	bl	800643c <bytesToFloatRev>
		bytesToFloatRev(inst->rxData + 36, &(inst->typical_size));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f203 133b 	addw	r3, r3, #315	; 0x13b
 8006892:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3328      	adds	r3, #40	; 0x28
 800689a:	4619      	mov	r1, r3
 800689c:	4610      	mov	r0, r2
 800689e:	f7ff fdcd 	bl	800643c <bytesToFloatRev>
		inst->newData = true;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
	}
	#if SPS30_DEBUG
		if (inst->rxLen == 0x00) println("[SPS] No new data to read");
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <SPS30_update+0x12a>
 80068b4:	4804      	ldr	r0, [pc, #16]	; (80068c8 <SPS30_update+0x138>)
 80068b6:	f7ff fd6d 	bl	8006394 <println>
	#endif
	//SPS30_start_meas(inst);
	return inst->newData;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	0801fa24 	.word	0x0801fa24

080068cc <SPS30_start_meas>:

void SPS30_start_meas(SPS30* inst)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	inst->txBuffer[0] = SPS30_START_MEAS;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txBuffer[1] = 0x02;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->txBuffer[2] = 0x01;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->txBuffer[3] = 0x03;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2203      	movs	r2, #3
 80068f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	SPS30_write(inst, inst->txBuffer, 4);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	332c      	adds	r3, #44	; 0x2c
 80068f8:	2204      	movs	r2, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff fec3 	bl	8006688 <SPS30_write>
	SPS30_read(inst);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff fdb8 	bl	8006478 <SPS30_read>
}
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <SPS30_reset>:
	SPS30_write(inst, inst->txBuffer, 2);
	SPS30_read(inst);
}

void SPS30_reset(SPS30* inst)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	inst->txBuffer[0] = SPS30_RESET;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	22d3      	movs	r2, #211	; 0xd3
 800691c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txBuffer[1] = 0x00;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	SPS30_write(inst, inst->txBuffer, 2);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	332c      	adds	r3, #44	; 0x2c
 800692c:	2202      	movs	r2, #2
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fea9 	bl	8006688 <SPS30_write>
	SPS30_read(inst);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff fd9e 	bl	8006478 <SPS30_read>
}
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <SPS30_present>:

bool SPS30_present(SPS30* inst)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	inst->txBuffer[0] = SPS30_DEVICE_INFO;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	22d0      	movs	r2, #208	; 0xd0
 8006950:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txBuffer[1] = 0x01;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->txBuffer[2] = 0x01;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	SPS30_write(inst, inst->txBuffer, 3);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	332c      	adds	r3, #44	; 0x2c
 8006968:	2203      	movs	r2, #3
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff fe8b 	bl	8006688 <SPS30_write>

	return SPS30_read(inst);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff fd80 	bl	8006478 <SPS30_read>
 8006978:	4603      	mov	r3, r0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006988:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <HAL_Init+0x40>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a0d      	ldr	r2, [pc, #52]	; (80069c4 <HAL_Init+0x40>)
 800698e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006994:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <HAL_Init+0x40>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a0a      	ldr	r2, [pc, #40]	; (80069c4 <HAL_Init+0x40>)
 800699a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800699e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069a0:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <HAL_Init+0x40>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a07      	ldr	r2, [pc, #28]	; (80069c4 <HAL_Init+0x40>)
 80069a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069ac:	2003      	movs	r0, #3
 80069ae:	f000 f94d 	bl	8006c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80069b2:	2000      	movs	r0, #0
 80069b4:	f000 f808 	bl	80069c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80069b8:	f010 ff48 	bl	801784c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40023c00 	.word	0x40023c00

080069c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069d0:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <HAL_InitTick+0x54>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <HAL_InitTick+0x58>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	4619      	mov	r1, r3
 80069da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069de:	fbb3 f3f1 	udiv	r3, r3, r1
 80069e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f965 	bl	8006cb6 <HAL_SYSTICK_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e00e      	b.n	8006a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b0f      	cmp	r3, #15
 80069fa:	d80a      	bhi.n	8006a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069fc:	2200      	movs	r2, #0
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	f000 f92d 	bl	8006c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006a08:	4a06      	ldr	r2, [pc, #24]	; (8006a24 <HAL_InitTick+0x5c>)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e000      	b.n	8006a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	20000170 	.word	0x20000170
 8006a20:	20000004 	.word	0x20000004
 8006a24:	20000000 	.word	0x20000000

08006a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <HAL_IncTick+0x20>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_IncTick+0x24>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4413      	add	r3, r2
 8006a38:	4a04      	ldr	r2, [pc, #16]	; (8006a4c <HAL_IncTick+0x24>)
 8006a3a:	6013      	str	r3, [r2, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20000004 	.word	0x20000004
 8006a4c:	200085a4 	.word	0x200085a4

08006a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  return uwTick;
 8006a54:	4b03      	ldr	r3, [pc, #12]	; (8006a64 <HAL_GetTick+0x14>)
 8006a56:	681b      	ldr	r3, [r3, #0]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	200085a4 	.word	0x200085a4

08006a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a70:	f7ff ffee 	bl	8006a50 <HAL_GetTick>
 8006a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a80:	d005      	beq.n	8006a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a82:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <HAL_Delay+0x40>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a8e:	bf00      	nop
 8006a90:	f7ff ffde 	bl	8006a50 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d8f7      	bhi.n	8006a90 <HAL_Delay+0x28>
  {
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20000004 	.word	0x20000004

08006aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006abc:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <__NVIC_SetPriorityGrouping+0x44>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ac8:	4013      	ands	r3, r2
 8006aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ade:	4a04      	ldr	r2, [pc, #16]	; (8006af0 <__NVIC_SetPriorityGrouping+0x44>)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	60d3      	str	r3, [r2, #12]
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	e000ed00 	.word	0xe000ed00

08006af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006af8:	4b04      	ldr	r3, [pc, #16]	; (8006b0c <__NVIC_GetPriorityGrouping+0x18>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	0a1b      	lsrs	r3, r3, #8
 8006afe:	f003 0307 	and.w	r3, r3, #7
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	e000ed00 	.word	0xe000ed00

08006b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	db0b      	blt.n	8006b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	f003 021f 	and.w	r2, r3, #31
 8006b28:	4907      	ldr	r1, [pc, #28]	; (8006b48 <__NVIC_EnableIRQ+0x38>)
 8006b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	2001      	movs	r0, #1
 8006b32:	fa00 f202 	lsl.w	r2, r0, r2
 8006b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	e000e100 	.word	0xe000e100

08006b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	6039      	str	r1, [r7, #0]
 8006b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	db0a      	blt.n	8006b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	490c      	ldr	r1, [pc, #48]	; (8006b98 <__NVIC_SetPriority+0x4c>)
 8006b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b6a:	0112      	lsls	r2, r2, #4
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	440b      	add	r3, r1
 8006b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b74:	e00a      	b.n	8006b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	4908      	ldr	r1, [pc, #32]	; (8006b9c <__NVIC_SetPriority+0x50>)
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	3b04      	subs	r3, #4
 8006b84:	0112      	lsls	r2, r2, #4
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	440b      	add	r3, r1
 8006b8a:	761a      	strb	r2, [r3, #24]
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	e000e100 	.word	0xe000e100
 8006b9c:	e000ed00 	.word	0xe000ed00

08006ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b089      	sub	sp, #36	; 0x24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f1c3 0307 	rsb	r3, r3, #7
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	bf28      	it	cs
 8006bbe:	2304      	movcs	r3, #4
 8006bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	2b06      	cmp	r3, #6
 8006bc8:	d902      	bls.n	8006bd0 <NVIC_EncodePriority+0x30>
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	3b03      	subs	r3, #3
 8006bce:	e000      	b.n	8006bd2 <NVIC_EncodePriority+0x32>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	43da      	mvns	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	401a      	ands	r2, r3
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006be8:	f04f 31ff 	mov.w	r1, #4294967295
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf2:	43d9      	mvns	r1, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bf8:	4313      	orrs	r3, r2
         );
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3724      	adds	r7, #36	; 0x24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c18:	d301      	bcc.n	8006c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e00f      	b.n	8006c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c1e:	4a0a      	ldr	r2, [pc, #40]	; (8006c48 <SysTick_Config+0x40>)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c26:	210f      	movs	r1, #15
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	f7ff ff8e 	bl	8006b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <SysTick_Config+0x40>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c36:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <SysTick_Config+0x40>)
 8006c38:	2207      	movs	r2, #7
 8006c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	e000e010 	.word	0xe000e010

08006c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff ff29 	bl	8006aac <__NVIC_SetPriorityGrouping>
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b086      	sub	sp, #24
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	4603      	mov	r3, r0
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c74:	f7ff ff3e 	bl	8006af4 <__NVIC_GetPriorityGrouping>
 8006c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	6978      	ldr	r0, [r7, #20]
 8006c80:	f7ff ff8e 	bl	8006ba0 <NVIC_EncodePriority>
 8006c84:	4602      	mov	r2, r0
 8006c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff ff5d 	bl	8006b4c <__NVIC_SetPriority>
}
 8006c92:	bf00      	nop
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff ff31 	bl	8006b10 <__NVIC_EnableIRQ>
}
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff ffa2 	bl	8006c08 <SysTick_Config>
 8006cc4:	4603      	mov	r3, r0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006cdc:	f7ff feb8 	bl	8006a50 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e099      	b.n	8006e20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d0c:	e00f      	b.n	8006d2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d0e:	f7ff fe9f 	bl	8006a50 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b05      	cmp	r3, #5
 8006d1a:	d908      	bls.n	8006d2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2203      	movs	r2, #3
 8006d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e078      	b.n	8006e20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e8      	bne.n	8006d0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4b38      	ldr	r3, [pc, #224]	; (8006e28 <HAL_DMA_Init+0x158>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d107      	bne.n	8006d98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d90:	4313      	orrs	r3, r2
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 0307 	bic.w	r3, r3, #7
 8006dae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d117      	bne.n	8006df2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00e      	beq.n	8006df2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fa99 	bl	800730c <DMA_CheckFifoParam>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2240      	movs	r2, #64	; 0x40
 8006de4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006dee:	2301      	movs	r3, #1
 8006df0:	e016      	b.n	8006e20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa50 	bl	80072a0 <DMA_CalcBaseAndBitshift>
 8006e00:	4603      	mov	r3, r0
 8006e02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e08:	223f      	movs	r2, #63	; 0x3f
 8006e0a:	409a      	lsls	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	f010803f 	.word	0xf010803f

08006e2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_DMA_Start_IT+0x26>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e048      	b.n	8006ee4 <HAL_DMA_Start_IT+0xb8>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d137      	bne.n	8006ed6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 f9e2 	bl	8007244 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e84:	223f      	movs	r2, #63	; 0x3f
 8006e86:	409a      	lsls	r2, r3
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0216 	orr.w	r2, r2, #22
 8006e9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695a      	ldr	r2, [r3, #20]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006eaa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f042 0208 	orr.w	r2, r2, #8
 8006ec2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0201 	orr.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e005      	b.n	8006ee2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d004      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2280      	movs	r2, #128	; 0x80
 8006f04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e00c      	b.n	8006f24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2205      	movs	r2, #5
 8006f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0201 	bic.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f3c:	4b92      	ldr	r3, [pc, #584]	; (8007188 <HAL_DMA_IRQHandler+0x258>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a92      	ldr	r2, [pc, #584]	; (800718c <HAL_DMA_IRQHandler+0x25c>)
 8006f42:	fba2 2303 	umull	r2, r3, r2, r3
 8006f46:	0a9b      	lsrs	r3, r3, #10
 8006f48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f5a:	2208      	movs	r2, #8
 8006f5c:	409a      	lsls	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4013      	ands	r3, r2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d01a      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d013      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0204 	bic.w	r2, r2, #4
 8006f82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f88:	2208      	movs	r2, #8
 8006f8a:	409a      	lsls	r2, r3
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f94:	f043 0201 	orr.w	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	409a      	lsls	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d012      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00b      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	409a      	lsls	r2, r3
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fca:	f043 0202 	orr.w	r2, r3, #2
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	409a      	lsls	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d012      	beq.n	8007008 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00b      	beq.n	8007008 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff4:	2204      	movs	r2, #4
 8006ff6:	409a      	lsls	r2, r3
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	f043 0204 	orr.w	r2, r3, #4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700c:	2210      	movs	r2, #16
 800700e:	409a      	lsls	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4013      	ands	r3, r2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d043      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0308 	and.w	r3, r3, #8
 8007022:	2b00      	cmp	r3, #0
 8007024:	d03c      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702a:	2210      	movs	r2, #16
 800702c:	409a      	lsls	r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d018      	beq.n	8007072 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d108      	bne.n	8007060 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	d024      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
 800705e:	e01f      	b.n	80070a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01b      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
 8007070:	e016      	b.n	80070a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707c:	2b00      	cmp	r3, #0
 800707e:	d107      	bne.n	8007090 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0208 	bic.w	r2, r2, #8
 800708e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a4:	2220      	movs	r2, #32
 80070a6:	409a      	lsls	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4013      	ands	r3, r2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 808e 	beq.w	80071ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8086 	beq.w	80071ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c6:	2220      	movs	r2, #32
 80070c8:	409a      	lsls	r2, r3
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b05      	cmp	r3, #5
 80070d8:	d136      	bne.n	8007148 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0216 	bic.w	r2, r2, #22
 80070e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	695a      	ldr	r2, [r3, #20]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d103      	bne.n	800710a <HAL_DMA_IRQHandler+0x1da>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0208 	bic.w	r2, r2, #8
 8007118:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800711e:	223f      	movs	r2, #63	; 0x3f
 8007120:	409a      	lsls	r2, r3
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800713a:	2b00      	cmp	r3, #0
 800713c:	d07d      	beq.n	800723a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
        }
        return;
 8007146:	e078      	b.n	800723a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d01c      	beq.n	8007190 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d108      	bne.n	8007176 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007168:	2b00      	cmp	r3, #0
 800716a:	d030      	beq.n	80071ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
 8007174:	e02b      	b.n	80071ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717a:	2b00      	cmp	r3, #0
 800717c:	d027      	beq.n	80071ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	4798      	blx	r3
 8007186:	e022      	b.n	80071ce <HAL_DMA_IRQHandler+0x29e>
 8007188:	20000170 	.word	0x20000170
 800718c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10f      	bne.n	80071be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0210 	bic.w	r2, r2, #16
 80071ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d032      	beq.n	800723c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d022      	beq.n	8007228 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2205      	movs	r2, #5
 80071e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0201 	bic.w	r2, r2, #1
 80071f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	3301      	adds	r3, #1
 80071fe:	60bb      	str	r3, [r7, #8]
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	429a      	cmp	r2, r3
 8007204:	d307      	bcc.n	8007216 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1f2      	bne.n	80071fa <HAL_DMA_IRQHandler+0x2ca>
 8007214:	e000      	b.n	8007218 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007216:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
 8007238:	e000      	b.n	800723c <HAL_DMA_IRQHandler+0x30c>
        return;
 800723a:	bf00      	nop
    }
  }
}
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop

08007244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007260:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d108      	bne.n	8007284 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007282:	e007      	b.n	8007294 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]
}
 8007294:	bf00      	nop
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	3b10      	subs	r3, #16
 80072b0:	4a14      	ldr	r2, [pc, #80]	; (8007304 <DMA_CalcBaseAndBitshift+0x64>)
 80072b2:	fba2 2303 	umull	r2, r3, r2, r3
 80072b6:	091b      	lsrs	r3, r3, #4
 80072b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80072ba:	4a13      	ldr	r2, [pc, #76]	; (8007308 <DMA_CalcBaseAndBitshift+0x68>)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4413      	add	r3, r2
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d909      	bls.n	80072e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80072d6:	f023 0303 	bic.w	r3, r3, #3
 80072da:	1d1a      	adds	r2, r3, #4
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	659a      	str	r2, [r3, #88]	; 0x58
 80072e0:	e007      	b.n	80072f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	aaaaaaab 	.word	0xaaaaaaab
 8007308:	08020360 	.word	0x08020360

0800730c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d11f      	bne.n	8007366 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b03      	cmp	r3, #3
 800732a:	d855      	bhi.n	80073d8 <DMA_CheckFifoParam+0xcc>
 800732c:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <DMA_CheckFifoParam+0x28>)
 800732e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007332:	bf00      	nop
 8007334:	08007345 	.word	0x08007345
 8007338:	08007357 	.word	0x08007357
 800733c:	08007345 	.word	0x08007345
 8007340:	080073d9 	.word	0x080073d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d045      	beq.n	80073dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007354:	e042      	b.n	80073dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800735e:	d13f      	bne.n	80073e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007364:	e03c      	b.n	80073e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736e:	d121      	bne.n	80073b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b03      	cmp	r3, #3
 8007374:	d836      	bhi.n	80073e4 <DMA_CheckFifoParam+0xd8>
 8007376:	a201      	add	r2, pc, #4	; (adr r2, 800737c <DMA_CheckFifoParam+0x70>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	0800738d 	.word	0x0800738d
 8007380:	08007393 	.word	0x08007393
 8007384:	0800738d 	.word	0x0800738d
 8007388:	080073a5 	.word	0x080073a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	73fb      	strb	r3, [r7, #15]
      break;
 8007390:	e02f      	b.n	80073f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d024      	beq.n	80073e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073a2:	e021      	b.n	80073e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073ac:	d11e      	bne.n	80073ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80073b2:	e01b      	b.n	80073ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d902      	bls.n	80073c0 <DMA_CheckFifoParam+0xb4>
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d003      	beq.n	80073c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80073be:	e018      	b.n	80073f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	73fb      	strb	r3, [r7, #15]
      break;
 80073c4:	e015      	b.n	80073f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00e      	beq.n	80073f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	73fb      	strb	r3, [r7, #15]
      break;
 80073d6:	e00b      	b.n	80073f0 <DMA_CheckFifoParam+0xe4>
      break;
 80073d8:	bf00      	nop
 80073da:	e00a      	b.n	80073f2 <DMA_CheckFifoParam+0xe6>
      break;
 80073dc:	bf00      	nop
 80073de:	e008      	b.n	80073f2 <DMA_CheckFifoParam+0xe6>
      break;
 80073e0:	bf00      	nop
 80073e2:	e006      	b.n	80073f2 <DMA_CheckFifoParam+0xe6>
      break;
 80073e4:	bf00      	nop
 80073e6:	e004      	b.n	80073f2 <DMA_CheckFifoParam+0xe6>
      break;
 80073e8:	bf00      	nop
 80073ea:	e002      	b.n	80073f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80073ec:	bf00      	nop
 80073ee:	e000      	b.n	80073f2 <DMA_CheckFifoParam+0xe6>
      break;
 80073f0:	bf00      	nop
    }
  } 
  
  return status; 
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007400:	b480      	push	{r7}
 8007402:	b089      	sub	sp, #36	; 0x24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007412:	2300      	movs	r3, #0
 8007414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007416:	2300      	movs	r3, #0
 8007418:	61fb      	str	r3, [r7, #28]
 800741a:	e16b      	b.n	80076f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800741c:	2201      	movs	r2, #1
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	4013      	ands	r3, r2
 800742e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	429a      	cmp	r2, r3
 8007436:	f040 815a 	bne.w	80076ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d003      	beq.n	800744a <HAL_GPIO_Init+0x4a>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b12      	cmp	r3, #18
 8007448:	d123      	bne.n	8007492 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	08da      	lsrs	r2, r3, #3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3208      	adds	r2, #8
 8007452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	220f      	movs	r2, #15
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	43db      	mvns	r3, r3
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	4013      	ands	r3, r2
 800746c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	691a      	ldr	r2, [r3, #16]
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	fa02 f303 	lsl.w	r3, r2, r3
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	4313      	orrs	r3, r2
 8007482:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	08da      	lsrs	r2, r3, #3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3208      	adds	r2, #8
 800748c:	69b9      	ldr	r1, [r7, #24]
 800748e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	2203      	movs	r2, #3
 800749e:	fa02 f303 	lsl.w	r3, r2, r3
 80074a2:	43db      	mvns	r3, r3
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	4013      	ands	r3, r2
 80074a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f003 0203 	and.w	r2, r3, #3
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	4313      	orrs	r3, r2
 80074be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d00b      	beq.n	80074e6 <HAL_GPIO_Init+0xe6>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d007      	beq.n	80074e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80074da:	2b11      	cmp	r3, #17
 80074dc:	d003      	beq.n	80074e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b12      	cmp	r3, #18
 80074e4:	d130      	bne.n	8007548 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	2203      	movs	r2, #3
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	43db      	mvns	r3, r3
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	4013      	ands	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	fa02 f303 	lsl.w	r3, r2, r3
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	4313      	orrs	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800751c:	2201      	movs	r2, #1
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	43db      	mvns	r3, r3
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	4013      	ands	r3, r2
 800752a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	091b      	lsrs	r3, r3, #4
 8007532:	f003 0201 	and.w	r2, r3, #1
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	4313      	orrs	r3, r2
 8007540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	2203      	movs	r2, #3
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	43db      	mvns	r3, r3
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	4013      	ands	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	4313      	orrs	r3, r2
 8007570:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 80b4 	beq.w	80076ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	4b5f      	ldr	r3, [pc, #380]	; (8007708 <HAL_GPIO_Init+0x308>)
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	4a5e      	ldr	r2, [pc, #376]	; (8007708 <HAL_GPIO_Init+0x308>)
 8007590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007594:	6453      	str	r3, [r2, #68]	; 0x44
 8007596:	4b5c      	ldr	r3, [pc, #368]	; (8007708 <HAL_GPIO_Init+0x308>)
 8007598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075a2:	4a5a      	ldr	r2, [pc, #360]	; (800770c <HAL_GPIO_Init+0x30c>)
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	089b      	lsrs	r3, r3, #2
 80075a8:	3302      	adds	r3, #2
 80075aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	220f      	movs	r2, #15
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	43db      	mvns	r3, r3
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	4013      	ands	r3, r2
 80075c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a51      	ldr	r2, [pc, #324]	; (8007710 <HAL_GPIO_Init+0x310>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d02b      	beq.n	8007626 <HAL_GPIO_Init+0x226>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a50      	ldr	r2, [pc, #320]	; (8007714 <HAL_GPIO_Init+0x314>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d025      	beq.n	8007622 <HAL_GPIO_Init+0x222>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a4f      	ldr	r2, [pc, #316]	; (8007718 <HAL_GPIO_Init+0x318>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d01f      	beq.n	800761e <HAL_GPIO_Init+0x21e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a4e      	ldr	r2, [pc, #312]	; (800771c <HAL_GPIO_Init+0x31c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d019      	beq.n	800761a <HAL_GPIO_Init+0x21a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a4d      	ldr	r2, [pc, #308]	; (8007720 <HAL_GPIO_Init+0x320>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d013      	beq.n	8007616 <HAL_GPIO_Init+0x216>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a4c      	ldr	r2, [pc, #304]	; (8007724 <HAL_GPIO_Init+0x324>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d00d      	beq.n	8007612 <HAL_GPIO_Init+0x212>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a4b      	ldr	r2, [pc, #300]	; (8007728 <HAL_GPIO_Init+0x328>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d007      	beq.n	800760e <HAL_GPIO_Init+0x20e>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a4a      	ldr	r2, [pc, #296]	; (800772c <HAL_GPIO_Init+0x32c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d101      	bne.n	800760a <HAL_GPIO_Init+0x20a>
 8007606:	2307      	movs	r3, #7
 8007608:	e00e      	b.n	8007628 <HAL_GPIO_Init+0x228>
 800760a:	2308      	movs	r3, #8
 800760c:	e00c      	b.n	8007628 <HAL_GPIO_Init+0x228>
 800760e:	2306      	movs	r3, #6
 8007610:	e00a      	b.n	8007628 <HAL_GPIO_Init+0x228>
 8007612:	2305      	movs	r3, #5
 8007614:	e008      	b.n	8007628 <HAL_GPIO_Init+0x228>
 8007616:	2304      	movs	r3, #4
 8007618:	e006      	b.n	8007628 <HAL_GPIO_Init+0x228>
 800761a:	2303      	movs	r3, #3
 800761c:	e004      	b.n	8007628 <HAL_GPIO_Init+0x228>
 800761e:	2302      	movs	r3, #2
 8007620:	e002      	b.n	8007628 <HAL_GPIO_Init+0x228>
 8007622:	2301      	movs	r3, #1
 8007624:	e000      	b.n	8007628 <HAL_GPIO_Init+0x228>
 8007626:	2300      	movs	r3, #0
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	f002 0203 	and.w	r2, r2, #3
 800762e:	0092      	lsls	r2, r2, #2
 8007630:	4093      	lsls	r3, r2
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	4313      	orrs	r3, r2
 8007636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007638:	4934      	ldr	r1, [pc, #208]	; (800770c <HAL_GPIO_Init+0x30c>)
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	089b      	lsrs	r3, r3, #2
 800763e:	3302      	adds	r3, #2
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007646:	4b3a      	ldr	r3, [pc, #232]	; (8007730 <HAL_GPIO_Init+0x330>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	43db      	mvns	r3, r3
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	4013      	ands	r3, r2
 8007654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800766a:	4a31      	ldr	r2, [pc, #196]	; (8007730 <HAL_GPIO_Init+0x330>)
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007670:	4b2f      	ldr	r3, [pc, #188]	; (8007730 <HAL_GPIO_Init+0x330>)
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	43db      	mvns	r3, r3
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	4013      	ands	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007694:	4a26      	ldr	r2, [pc, #152]	; (8007730 <HAL_GPIO_Init+0x330>)
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800769a:	4b25      	ldr	r3, [pc, #148]	; (8007730 <HAL_GPIO_Init+0x330>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	43db      	mvns	r3, r3
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	4013      	ands	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076be:	4a1c      	ldr	r2, [pc, #112]	; (8007730 <HAL_GPIO_Init+0x330>)
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80076c4:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <HAL_GPIO_Init+0x330>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	43db      	mvns	r3, r3
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	4013      	ands	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80076e8:	4a11      	ldr	r2, [pc, #68]	; (8007730 <HAL_GPIO_Init+0x330>)
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	3301      	adds	r3, #1
 80076f2:	61fb      	str	r3, [r7, #28]
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	2b0f      	cmp	r3, #15
 80076f8:	f67f ae90 	bls.w	800741c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80076fc:	bf00      	nop
 80076fe:	3724      	adds	r7, #36	; 0x24
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	40023800 	.word	0x40023800
 800770c:	40013800 	.word	0x40013800
 8007710:	40020000 	.word	0x40020000
 8007714:	40020400 	.word	0x40020400
 8007718:	40020800 	.word	0x40020800
 800771c:	40020c00 	.word	0x40020c00
 8007720:	40021000 	.word	0x40021000
 8007724:	40021400 	.word	0x40021400
 8007728:	40021800 	.word	0x40021800
 800772c:	40021c00 	.word	0x40021c00
 8007730:	40013c00 	.word	0x40013c00

08007734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	887b      	ldrh	r3, [r7, #2]
 8007746:	4013      	ands	r3, r2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
 8007750:	e001      	b.n	8007756 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007752:	2300      	movs	r3, #0
 8007754:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	807b      	strh	r3, [r7, #2]
 8007770:	4613      	mov	r3, r2
 8007772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007774:	787b      	ldrb	r3, [r7, #1]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800777a:	887a      	ldrh	r2, [r7, #2]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007780:	e003      	b.n	800778a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007782:	887b      	ldrh	r3, [r7, #2]
 8007784:	041a      	lsls	r2, r3, #16
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	619a      	str	r2, [r3, #24]
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695a      	ldr	r2, [r3, #20]
 80077a6:	887b      	ldrh	r3, [r7, #2]
 80077a8:	401a      	ands	r2, r3
 80077aa:	887b      	ldrh	r3, [r7, #2]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d104      	bne.n	80077ba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077b0:	887b      	ldrh	r3, [r7, #2]
 80077b2:	041a      	lsls	r2, r3, #16
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80077b8:	e002      	b.n	80077c0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80077ba:	887a      	ldrh	r2, [r7, #2]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	619a      	str	r2, [r3, #24]
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e10f      	b.n	80079fe <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f010 f852 	bl	801789c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2224      	movs	r2, #36	; 0x24
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007810:	f002 fcc8 	bl	800a1a4 <HAL_RCC_GetPCLK1Freq>
 8007814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	4a7b      	ldr	r2, [pc, #492]	; (8007a08 <HAL_I2C_Init+0x23c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d807      	bhi.n	8007830 <HAL_I2C_Init+0x64>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4a7a      	ldr	r2, [pc, #488]	; (8007a0c <HAL_I2C_Init+0x240>)
 8007824:	4293      	cmp	r3, r2
 8007826:	bf94      	ite	ls
 8007828:	2301      	movls	r3, #1
 800782a:	2300      	movhi	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	e006      	b.n	800783e <HAL_I2C_Init+0x72>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4a77      	ldr	r2, [pc, #476]	; (8007a10 <HAL_I2C_Init+0x244>)
 8007834:	4293      	cmp	r3, r2
 8007836:	bf94      	ite	ls
 8007838:	2301      	movls	r3, #1
 800783a:	2300      	movhi	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e0db      	b.n	80079fe <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4a72      	ldr	r2, [pc, #456]	; (8007a14 <HAL_I2C_Init+0x248>)
 800784a:	fba2 2303 	umull	r2, r3, r2, r3
 800784e:	0c9b      	lsrs	r3, r3, #18
 8007850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	430a      	orrs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	4a64      	ldr	r2, [pc, #400]	; (8007a08 <HAL_I2C_Init+0x23c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d802      	bhi.n	8007880 <HAL_I2C_Init+0xb4>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	3301      	adds	r3, #1
 800787e:	e009      	b.n	8007894 <HAL_I2C_Init+0xc8>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007886:	fb02 f303 	mul.w	r3, r2, r3
 800788a:	4a63      	ldr	r2, [pc, #396]	; (8007a18 <HAL_I2C_Init+0x24c>)
 800788c:	fba2 2303 	umull	r2, r3, r2, r3
 8007890:	099b      	lsrs	r3, r3, #6
 8007892:	3301      	adds	r3, #1
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	6812      	ldr	r2, [r2, #0]
 8007898:	430b      	orrs	r3, r1
 800789a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80078a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	4956      	ldr	r1, [pc, #344]	; (8007a08 <HAL_I2C_Init+0x23c>)
 80078b0:	428b      	cmp	r3, r1
 80078b2:	d80d      	bhi.n	80078d0 <HAL_I2C_Init+0x104>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	1e59      	subs	r1, r3, #1
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	fbb1 f3f3 	udiv	r3, r1, r3
 80078c2:	3301      	adds	r3, #1
 80078c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	bf38      	it	cc
 80078cc:	2304      	movcc	r3, #4
 80078ce:	e04f      	b.n	8007970 <HAL_I2C_Init+0x1a4>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d111      	bne.n	80078fc <HAL_I2C_Init+0x130>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	1e58      	subs	r0, r3, #1
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6859      	ldr	r1, [r3, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	440b      	add	r3, r1
 80078e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80078ea:	3301      	adds	r3, #1
 80078ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bf0c      	ite	eq
 80078f4:	2301      	moveq	r3, #1
 80078f6:	2300      	movne	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	e012      	b.n	8007922 <HAL_I2C_Init+0x156>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	1e58      	subs	r0, r3, #1
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6859      	ldr	r1, [r3, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	440b      	add	r3, r1
 800790a:	0099      	lsls	r1, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007912:	3301      	adds	r3, #1
 8007914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007918:	2b00      	cmp	r3, #0
 800791a:	bf0c      	ite	eq
 800791c:	2301      	moveq	r3, #1
 800791e:	2300      	movne	r3, #0
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <HAL_I2C_Init+0x15e>
 8007926:	2301      	movs	r3, #1
 8007928:	e022      	b.n	8007970 <HAL_I2C_Init+0x1a4>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10e      	bne.n	8007950 <HAL_I2C_Init+0x184>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	1e58      	subs	r0, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6859      	ldr	r1, [r3, #4]
 800793a:	460b      	mov	r3, r1
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	440b      	add	r3, r1
 8007940:	fbb0 f3f3 	udiv	r3, r0, r3
 8007944:	3301      	adds	r3, #1
 8007946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800794a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794e:	e00f      	b.n	8007970 <HAL_I2C_Init+0x1a4>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	1e58      	subs	r0, r3, #1
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6859      	ldr	r1, [r3, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	440b      	add	r3, r1
 800795e:	0099      	lsls	r1, r3, #2
 8007960:	440b      	add	r3, r1
 8007962:	fbb0 f3f3 	udiv	r3, r0, r3
 8007966:	3301      	adds	r3, #1
 8007968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800796c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007970:	6879      	ldr	r1, [r7, #4]
 8007972:	6809      	ldr	r1, [r1, #0]
 8007974:	4313      	orrs	r3, r2
 8007976:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69da      	ldr	r2, [r3, #28]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800799e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6911      	ldr	r1, [r2, #16]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	68d2      	ldr	r2, [r2, #12]
 80079aa:	4311      	orrs	r1, r2
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	430b      	orrs	r3, r1
 80079b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	695a      	ldr	r2, [r3, #20]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0201 	orr.w	r2, r2, #1
 80079de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	000186a0 	.word	0x000186a0
 8007a0c:	001e847f 	.word	0x001e847f
 8007a10:	003d08ff 	.word	0x003d08ff
 8007a14:	431bde83 	.word	0x431bde83
 8007a18:	10624dd3 	.word	0x10624dd3

08007a1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	4608      	mov	r0, r1
 8007a26:	4611      	mov	r1, r2
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	817b      	strh	r3, [r7, #10]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	813b      	strh	r3, [r7, #8]
 8007a32:	4613      	mov	r3, r2
 8007a34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a36:	f7ff f80b 	bl	8006a50 <HAL_GetTick>
 8007a3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	f040 80d9 	bne.w	8007bfc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	2319      	movs	r3, #25
 8007a50:	2201      	movs	r2, #1
 8007a52:	496d      	ldr	r1, [pc, #436]	; (8007c08 <HAL_I2C_Mem_Write+0x1ec>)
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fc5b 	bl	8008310 <I2C_WaitOnFlagUntilTimeout>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007a60:	2302      	movs	r3, #2
 8007a62:	e0cc      	b.n	8007bfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d101      	bne.n	8007a72 <HAL_I2C_Mem_Write+0x56>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e0c5      	b.n	8007bfe <HAL_I2C_Mem_Write+0x1e2>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d007      	beq.n	8007a98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007aa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2221      	movs	r2, #33	; 0x21
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2240      	movs	r2, #64	; 0x40
 8007ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a3a      	ldr	r2, [r7, #32]
 8007ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4a4d      	ldr	r2, [pc, #308]	; (8007c0c <HAL_I2C_Mem_Write+0x1f0>)
 8007ad8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ada:	88f8      	ldrh	r0, [r7, #6]
 8007adc:	893a      	ldrh	r2, [r7, #8]
 8007ade:	8979      	ldrh	r1, [r7, #10]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	9301      	str	r3, [sp, #4]
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	4603      	mov	r3, r0
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 fab6 	bl	800805c <I2C_RequestMemoryWrite>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d052      	beq.n	8007b9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e081      	b.n	8007bfe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 fcdc 	bl	80084bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00d      	beq.n	8007b26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d107      	bne.n	8007b22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e06b      	b.n	8007bfe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	781a      	ldrb	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	d11b      	bne.n	8007b9c <HAL_I2C_Mem_Write+0x180>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d017      	beq.n	8007b9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	781a      	ldrb	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1aa      	bne.n	8007afa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 fcc8 	bl	800853e <I2C_WaitOnBTFFlagUntilTimeout>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00d      	beq.n	8007bd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d107      	bne.n	8007bcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e016      	b.n	8007bfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	e000      	b.n	8007bfe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007bfc:	2302      	movs	r3, #2
  }
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	00100002 	.word	0x00100002
 8007c0c:	ffff0000 	.word	0xffff0000

08007c10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08c      	sub	sp, #48	; 0x30
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	4608      	mov	r0, r1
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4603      	mov	r3, r0
 8007c20:	817b      	strh	r3, [r7, #10]
 8007c22:	460b      	mov	r3, r1
 8007c24:	813b      	strh	r3, [r7, #8]
 8007c26:	4613      	mov	r3, r2
 8007c28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c2a:	f7fe ff11 	bl	8006a50 <HAL_GetTick>
 8007c2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b20      	cmp	r3, #32
 8007c3a:	f040 8208 	bne.w	800804e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	2319      	movs	r3, #25
 8007c44:	2201      	movs	r2, #1
 8007c46:	497b      	ldr	r1, [pc, #492]	; (8007e34 <HAL_I2C_Mem_Read+0x224>)
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fb61 	bl	8008310 <I2C_WaitOnFlagUntilTimeout>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007c54:	2302      	movs	r3, #2
 8007c56:	e1fb      	b.n	8008050 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_I2C_Mem_Read+0x56>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e1f4      	b.n	8008050 <HAL_I2C_Mem_Read+0x440>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d007      	beq.n	8007c8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2222      	movs	r2, #34	; 0x22
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2240      	movs	r2, #64	; 0x40
 8007ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4a5b      	ldr	r2, [pc, #364]	; (8007e38 <HAL_I2C_Mem_Read+0x228>)
 8007ccc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cce:	88f8      	ldrh	r0, [r7, #6]
 8007cd0:	893a      	ldrh	r2, [r7, #8]
 8007cd2:	8979      	ldrh	r1, [r7, #10]
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	4603      	mov	r3, r0
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fa46 	bl	8008170 <I2C_RequestMemoryRead>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e1b0      	b.n	8008050 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d113      	bne.n	8007d1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	623b      	str	r3, [r7, #32]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	623b      	str	r3, [r7, #32]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	623b      	str	r3, [r7, #32]
 8007d0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e184      	b.n	8008028 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d11b      	bne.n	8007d5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d36:	2300      	movs	r3, #0
 8007d38:	61fb      	str	r3, [r7, #28]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	61fb      	str	r3, [r7, #28]
 8007d4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	e164      	b.n	8008028 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d11b      	bne.n	8007d9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d86:	2300      	movs	r3, #0
 8007d88:	61bb      	str	r3, [r7, #24]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	61bb      	str	r3, [r7, #24]
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	e144      	b.n	8008028 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	617b      	str	r3, [r7, #20]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	617b      	str	r3, [r7, #20]
 8007db2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007db4:	e138      	b.n	8008028 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	f200 80f1 	bhi.w	8007fa2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d123      	bne.n	8007e10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fbf7 	bl	80085c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e139      	b.n	8008050 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	b2d2      	uxtb	r2, r2
 8007de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e0e:	e10b      	b.n	8008028 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d14e      	bne.n	8007eb6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4906      	ldr	r1, [pc, #24]	; (8007e3c <HAL_I2C_Mem_Read+0x22c>)
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 fa74 	bl	8008310 <I2C_WaitOnFlagUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e10e      	b.n	8008050 <HAL_I2C_Mem_Read+0x440>
 8007e32:	bf00      	nop
 8007e34:	00100002 	.word	0x00100002
 8007e38:	ffff0000 	.word	0xffff0000
 8007e3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691a      	ldr	r2, [r3, #16]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	691a      	ldr	r2, [r3, #16]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	b2d2      	uxtb	r2, r2
 8007e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	3b01      	subs	r3, #1
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007eb4:	e0b8      	b.n	8008028 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	4966      	ldr	r1, [pc, #408]	; (8008058 <HAL_I2C_Mem_Read+0x448>)
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 fa25 	bl	8008310 <I2C_WaitOnFlagUntilTimeout>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e0bf      	b.n	8008050 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	691a      	ldr	r2, [r3, #16]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	b2d2      	uxtb	r2, r2
 8007eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	2200      	movs	r2, #0
 8007f1a:	494f      	ldr	r1, [pc, #316]	; (8008058 <HAL_I2C_Mem_Read+0x448>)
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 f9f7 	bl	8008310 <I2C_WaitOnFlagUntilTimeout>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e091      	b.n	8008050 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	691a      	ldr	r2, [r3, #16]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	3b01      	subs	r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	691a      	ldr	r2, [r3, #16]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	b2d2      	uxtb	r2, r2
 8007f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fa0:	e042      	b.n	8008028 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 fb0a 	bl	80085c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e04c      	b.n	8008050 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	691a      	ldr	r2, [r3, #16]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	b2d2      	uxtb	r2, r2
 8007fc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	f003 0304 	and.w	r3, r3, #4
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d118      	bne.n	8008028 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008012:	3b01      	subs	r3, #1
 8008014:	b29a      	uxth	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800801e:	b29b      	uxth	r3, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	b29a      	uxth	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800802c:	2b00      	cmp	r3, #0
 800802e:	f47f aec2 	bne.w	8007db6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2220      	movs	r2, #32
 8008036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	e000      	b.n	8008050 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800804e:	2302      	movs	r3, #2
  }
}
 8008050:	4618      	mov	r0, r3
 8008052:	3728      	adds	r7, #40	; 0x28
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	00010004 	.word	0x00010004

0800805c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b088      	sub	sp, #32
 8008060:	af02      	add	r7, sp, #8
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	4608      	mov	r0, r1
 8008066:	4611      	mov	r1, r2
 8008068:	461a      	mov	r2, r3
 800806a:	4603      	mov	r3, r0
 800806c:	817b      	strh	r3, [r7, #10]
 800806e:	460b      	mov	r3, r1
 8008070:	813b      	strh	r3, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008084:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	2200      	movs	r2, #0
 800808e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 f93c 	bl	8008310 <I2C_WaitOnFlagUntilTimeout>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e05f      	b.n	8008162 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80080a2:	897b      	ldrh	r3, [r7, #10]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	461a      	mov	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80080b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	6a3a      	ldr	r2, [r7, #32]
 80080b6:	492d      	ldr	r1, [pc, #180]	; (800816c <I2C_RequestMemoryWrite+0x110>)
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 f980 	bl	80083be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e04c      	b.n	8008162 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080c8:	2300      	movs	r3, #0
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e0:	6a39      	ldr	r1, [r7, #32]
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 f9ea 	bl	80084bc <I2C_WaitOnTXEFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00d      	beq.n	800810a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d107      	bne.n	8008106 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008104:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e02b      	b.n	8008162 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800810a:	88fb      	ldrh	r3, [r7, #6]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d105      	bne.n	800811c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008110:	893b      	ldrh	r3, [r7, #8]
 8008112:	b2da      	uxtb	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	611a      	str	r2, [r3, #16]
 800811a:	e021      	b.n	8008160 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800811c:	893b      	ldrh	r3, [r7, #8]
 800811e:	0a1b      	lsrs	r3, r3, #8
 8008120:	b29b      	uxth	r3, r3
 8008122:	b2da      	uxtb	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800812a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800812c:	6a39      	ldr	r1, [r7, #32]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f9c4 	bl	80084bc <I2C_WaitOnTXEFlagUntilTimeout>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00d      	beq.n	8008156 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	2b04      	cmp	r3, #4
 8008140:	d107      	bne.n	8008152 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008150:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e005      	b.n	8008162 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008156:	893b      	ldrh	r3, [r7, #8]
 8008158:	b2da      	uxtb	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	00010002 	.word	0x00010002

08008170 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	461a      	mov	r2, r3
 800817e:	4603      	mov	r3, r0
 8008180:	817b      	strh	r3, [r7, #10]
 8008182:	460b      	mov	r3, r1
 8008184:	813b      	strh	r3, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008198:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 f8aa 	bl	8008310 <I2C_WaitOnFlagUntilTimeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e09e      	b.n	8008304 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081c6:	897b      	ldrh	r3, [r7, #10]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	6a3a      	ldr	r2, [r7, #32]
 80081da:	494c      	ldr	r1, [pc, #304]	; (800830c <I2C_RequestMemoryRead+0x19c>)
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 f8ee 	bl	80083be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e08b      	b.n	8008304 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081ec:	2300      	movs	r3, #0
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	617b      	str	r3, [r7, #20]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008204:	6a39      	ldr	r1, [r7, #32]
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 f958 	bl	80084bc <I2C_WaitOnTXEFlagUntilTimeout>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00d      	beq.n	800822e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	2b04      	cmp	r3, #4
 8008218:	d107      	bne.n	800822a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e06a      	b.n	8008304 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800822e:	88fb      	ldrh	r3, [r7, #6]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d105      	bne.n	8008240 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008234:	893b      	ldrh	r3, [r7, #8]
 8008236:	b2da      	uxtb	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	611a      	str	r2, [r3, #16]
 800823e:	e021      	b.n	8008284 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008240:	893b      	ldrh	r3, [r7, #8]
 8008242:	0a1b      	lsrs	r3, r3, #8
 8008244:	b29b      	uxth	r3, r3
 8008246:	b2da      	uxtb	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800824e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008250:	6a39      	ldr	r1, [r7, #32]
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 f932 	bl	80084bc <I2C_WaitOnTXEFlagUntilTimeout>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00d      	beq.n	800827a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	2b04      	cmp	r3, #4
 8008264:	d107      	bne.n	8008276 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e044      	b.n	8008304 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800827a:	893b      	ldrh	r3, [r7, #8]
 800827c:	b2da      	uxtb	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008286:	6a39      	ldr	r1, [r7, #32]
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 f917 	bl	80084bc <I2C_WaitOnTXEFlagUntilTimeout>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00d      	beq.n	80082b0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008298:	2b04      	cmp	r3, #4
 800829a:	d107      	bne.n	80082ac <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e029      	b.n	8008304 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f81f 	bl	8008310 <I2C_WaitOnFlagUntilTimeout>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e013      	b.n	8008304 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80082dc:	897b      	ldrh	r3, [r7, #10]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	f043 0301 	orr.w	r3, r3, #1
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	6a3a      	ldr	r2, [r7, #32]
 80082f0:	4906      	ldr	r1, [pc, #24]	; (800830c <I2C_RequestMemoryRead+0x19c>)
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 f863 	bl	80083be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	00010002 	.word	0x00010002

08008310 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	4613      	mov	r3, r2
 800831e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008320:	e025      	b.n	800836e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008328:	d021      	beq.n	800836e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800832a:	f7fe fb91 	bl	8006a50 <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d302      	bcc.n	8008340 <I2C_WaitOnFlagUntilTimeout+0x30>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d116      	bne.n	800836e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2220      	movs	r2, #32
 800834a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	f043 0220 	orr.w	r2, r3, #32
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e023      	b.n	80083b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	0c1b      	lsrs	r3, r3, #16
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b01      	cmp	r3, #1
 8008376:	d10d      	bne.n	8008394 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	43da      	mvns	r2, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4013      	ands	r3, r2
 8008384:	b29b      	uxth	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	bf0c      	ite	eq
 800838a:	2301      	moveq	r3, #1
 800838c:	2300      	movne	r3, #0
 800838e:	b2db      	uxtb	r3, r3
 8008390:	461a      	mov	r2, r3
 8008392:	e00c      	b.n	80083ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	43da      	mvns	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4013      	ands	r3, r2
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	bf0c      	ite	eq
 80083a6:	2301      	moveq	r3, #1
 80083a8:	2300      	movne	r3, #0
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	461a      	mov	r2, r3
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d0b6      	beq.n	8008322 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	607a      	str	r2, [r7, #4]
 80083ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083cc:	e051      	b.n	8008472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083dc:	d123      	bne.n	8008426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2220      	movs	r2, #32
 8008402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	f043 0204 	orr.w	r2, r3, #4
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e046      	b.n	80084b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842c:	d021      	beq.n	8008472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800842e:	f7fe fb0f 	bl	8006a50 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	429a      	cmp	r2, r3
 800843c:	d302      	bcc.n	8008444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d116      	bne.n	8008472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2220      	movs	r2, #32
 800844e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	f043 0220 	orr.w	r2, r3, #32
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e020      	b.n	80084b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	0c1b      	lsrs	r3, r3, #16
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b01      	cmp	r3, #1
 800847a:	d10c      	bne.n	8008496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	43da      	mvns	r2, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4013      	ands	r3, r2
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	bf14      	ite	ne
 800848e:	2301      	movne	r3, #1
 8008490:	2300      	moveq	r3, #0
 8008492:	b2db      	uxtb	r3, r3
 8008494:	e00b      	b.n	80084ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	43da      	mvns	r2, r3
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	4013      	ands	r3, r2
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	bf14      	ite	ne
 80084a8:	2301      	movne	r3, #1
 80084aa:	2300      	moveq	r3, #0
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d18d      	bne.n	80083ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084c8:	e02d      	b.n	8008526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 f8ce 	bl	800866c <I2C_IsAcknowledgeFailed>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e02d      	b.n	8008536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e0:	d021      	beq.n	8008526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084e2:	f7fe fab5 	bl	8006a50 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d302      	bcc.n	80084f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d116      	bne.n	8008526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2220      	movs	r2, #32
 8008502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	f043 0220 	orr.w	r2, r3, #32
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e007      	b.n	8008536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008530:	2b80      	cmp	r3, #128	; 0x80
 8008532:	d1ca      	bne.n	80084ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800854a:	e02d      	b.n	80085a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 f88d 	bl	800866c <I2C_IsAcknowledgeFailed>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e02d      	b.n	80085b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008562:	d021      	beq.n	80085a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008564:	f7fe fa74 	bl	8006a50 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	429a      	cmp	r2, r3
 8008572:	d302      	bcc.n	800857a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d116      	bne.n	80085a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008594:	f043 0220 	orr.w	r2, r3, #32
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e007      	b.n	80085b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	f003 0304 	and.w	r3, r3, #4
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	d1ca      	bne.n	800854c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085cc:	e042      	b.n	8008654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b10      	cmp	r3, #16
 80085da:	d119      	bne.n	8008610 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0210 	mvn.w	r2, #16
 80085e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2220      	movs	r2, #32
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e029      	b.n	8008664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008610:	f7fe fa1e 	bl	8006a50 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	429a      	cmp	r2, r3
 800861e:	d302      	bcc.n	8008626 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d116      	bne.n	8008654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2220      	movs	r2, #32
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	f043 0220 	orr.w	r2, r3, #32
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e007      	b.n	8008664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865e:	2b40      	cmp	r3, #64	; 0x40
 8008660:	d1b5      	bne.n	80085ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800867e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008682:	d11b      	bne.n	80086bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800868c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2220      	movs	r2, #32
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a8:	f043 0204 	orr.w	r2, r3, #4
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e000      	b.n	80086be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80086ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086cc:	b08f      	sub	sp, #60	; 0x3c
 80086ce:	af0a      	add	r7, sp, #40	; 0x28
 80086d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e10f      	b.n	80088fc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d106      	bne.n	80086fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f00f fdb2 	bl	8018260 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2203      	movs	r2, #3
 8008700:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4618      	mov	r0, r3
 800871c:	f006 f9b7 	bl	800ea8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	603b      	str	r3, [r7, #0]
 8008726:	687e      	ldr	r6, [r7, #4]
 8008728:	466d      	mov	r5, sp
 800872a:	f106 0410 	add.w	r4, r6, #16
 800872e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008736:	e894 0003 	ldmia.w	r4, {r0, r1}
 800873a:	e885 0003 	stmia.w	r5, {r0, r1}
 800873e:	1d33      	adds	r3, r6, #4
 8008740:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008742:	6838      	ldr	r0, [r7, #0]
 8008744:	f006 f88e 	bl	800e864 <USB_CoreInit>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2202      	movs	r2, #2
 8008752:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e0d0      	b.n	80088fc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2100      	movs	r1, #0
 8008760:	4618      	mov	r0, r3
 8008762:	f006 f9a5 	bl	800eab0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008766:	2300      	movs	r3, #0
 8008768:	73fb      	strb	r3, [r7, #15]
 800876a:	e04a      	b.n	8008802 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800876c:	7bfa      	ldrb	r2, [r7, #15]
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	1a9b      	subs	r3, r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	333d      	adds	r3, #61	; 0x3d
 800877c:	2201      	movs	r2, #1
 800877e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008780:	7bfa      	ldrb	r2, [r7, #15]
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	1a9b      	subs	r3, r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	333c      	adds	r3, #60	; 0x3c
 8008790:	7bfa      	ldrb	r2, [r7, #15]
 8008792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008794:	7bfa      	ldrb	r2, [r7, #15]
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	b298      	uxth	r0, r3
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	4613      	mov	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	1a9b      	subs	r3, r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	3342      	adds	r3, #66	; 0x42
 80087a8:	4602      	mov	r2, r0
 80087aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80087ac:	7bfa      	ldrb	r2, [r7, #15]
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	333f      	adds	r3, #63	; 0x3f
 80087bc:	2200      	movs	r2, #0
 80087be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80087c0:	7bfa      	ldrb	r2, [r7, #15]
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4613      	mov	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	1a9b      	subs	r3, r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	3344      	adds	r3, #68	; 0x44
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80087d4:	7bfa      	ldrb	r2, [r7, #15]
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	1a9b      	subs	r3, r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	3348      	adds	r3, #72	; 0x48
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80087e8:	7bfa      	ldrb	r2, [r7, #15]
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	4613      	mov	r3, r2
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	1a9b      	subs	r3, r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	3350      	adds	r3, #80	; 0x50
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	3301      	adds	r3, #1
 8008800:	73fb      	strb	r3, [r7, #15]
 8008802:	7bfa      	ldrb	r2, [r7, #15]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d3af      	bcc.n	800876c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
 8008810:	e044      	b.n	800889c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008812:	7bfa      	ldrb	r2, [r7, #15]
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	4613      	mov	r3, r2
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	1a9b      	subs	r3, r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	440b      	add	r3, r1
 8008820:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008824:	2200      	movs	r2, #0
 8008826:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008828:	7bfa      	ldrb	r2, [r7, #15]
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	4613      	mov	r3, r2
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	1a9b      	subs	r3, r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800883a:	7bfa      	ldrb	r2, [r7, #15]
 800883c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800883e:	7bfa      	ldrb	r2, [r7, #15]
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	1a9b      	subs	r3, r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	440b      	add	r3, r1
 800884c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008850:	2200      	movs	r2, #0
 8008852:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008854:	7bfa      	ldrb	r2, [r7, #15]
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	4613      	mov	r3, r2
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	1a9b      	subs	r3, r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	440b      	add	r3, r1
 8008862:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800886a:	7bfa      	ldrb	r2, [r7, #15]
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	4613      	mov	r3, r2
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	1a9b      	subs	r3, r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008880:	7bfa      	ldrb	r2, [r7, #15]
 8008882:	6879      	ldr	r1, [r7, #4]
 8008884:	4613      	mov	r3, r2
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	1a9b      	subs	r3, r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008892:	2200      	movs	r2, #0
 8008894:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008896:	7bfb      	ldrb	r3, [r7, #15]
 8008898:	3301      	adds	r3, #1
 800889a:	73fb      	strb	r3, [r7, #15]
 800889c:	7bfa      	ldrb	r2, [r7, #15]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d3b5      	bcc.n	8008812 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	687e      	ldr	r6, [r7, #4]
 80088ae:	466d      	mov	r5, sp
 80088b0:	f106 0410 	add.w	r4, r6, #16
 80088b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80088c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80088c4:	1d33      	adds	r3, r6, #4
 80088c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088c8:	6838      	ldr	r0, [r7, #0]
 80088ca:	f006 f91b 	bl	800eb04 <USB_DevInit>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2202      	movs	r2, #2
 80088d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e00d      	b.n	80088fc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f007 f910 	bl	800fb1a <USB_DevDisconnect>

  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008904 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008918:	2b01      	cmp	r3, #1
 800891a:	d101      	bne.n	8008920 <HAL_PCD_Start+0x1c>
 800891c:	2302      	movs	r3, #2
 800891e:	e020      	b.n	8008962 <HAL_PCD_Start+0x5e>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892c:	2b01      	cmp	r3, #1
 800892e:	d109      	bne.n	8008944 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008934:	2b01      	cmp	r3, #1
 8008936:	d005      	beq.n	8008944 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f007 f8ce 	bl	800faea <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f006 f88a 	bl	800ea6c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800896a:	b590      	push	{r4, r7, lr}
 800896c:	b08d      	sub	sp, #52	; 0x34
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4618      	mov	r0, r3
 8008982:	f007 f975 	bl	800fc70 <USB_GetMode>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	f040 838e 	bne.w	80090aa <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f007 f8d9 	bl	800fb4a <USB_ReadInterrupts>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 8384 	beq.w	80090a8 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f007 f8d0 	bl	800fb4a <USB_ReadInterrupts>
 80089aa:	4603      	mov	r3, r0
 80089ac:	f003 0302 	and.w	r3, r3, #2
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d107      	bne.n	80089c4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695a      	ldr	r2, [r3, #20]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f002 0202 	and.w	r2, r2, #2
 80089c2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f007 f8be 	bl	800fb4a <USB_ReadInterrupts>
 80089ce:	4603      	mov	r3, r0
 80089d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089d8:	d17b      	bne.n	8008ad2 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f007 f8c4 	bl	800fb70 <USB_ReadDevAllOutEpInterrupt>
 80089e8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80089ea:	e06f      	b.n	8008acc <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d064      	beq.n	8008ac0 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fc:	b2d2      	uxtb	r2, r2
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f007 f8e9 	bl	800fbd8 <USB_ReadDevOutEPInterrupt>
 8008a06:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00c      	beq.n	8008a2c <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1e:	461a      	mov	r2, r3
 8008a20:	2301      	movs	r3, #1
 8008a22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fe0e 	bl	8009648 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00c      	beq.n	8008a50 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008a36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 ff0d 	bl	8009858 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	2308      	movs	r3, #8
 8008a4e:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	f003 0310 	and.w	r3, r3, #16
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a66:	461a      	mov	r2, r3
 8008a68:	2310      	movs	r3, #16
 8008a6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	f003 0320 	and.w	r3, r3, #32
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d015      	beq.n	8008aa2 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d108      	bne.n	8008a90 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008a88:	461a      	mov	r2, r3
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	f007 f934 	bl	800fcf8 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	2320      	movs	r3, #32
 8008aa0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d009      	beq.n	8008ac0 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab8:	461a      	mov	r2, r3
 8008aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008abe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	085b      	lsrs	r3, r3, #1
 8008aca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d18c      	bne.n	80089ec <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f007 f837 	bl	800fb4a <USB_ReadInterrupts>
 8008adc:	4603      	mov	r3, r0
 8008ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ae2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ae6:	f040 80c4 	bne.w	8008c72 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f007 f858 	bl	800fba4 <USB_ReadDevAllInEpInterrupt>
 8008af4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008afa:	e0b6      	b.n	8008c6a <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 80ab 	beq.w	8008c5e <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0e:	b2d2      	uxtb	r2, r2
 8008b10:	4611      	mov	r1, r2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f007 f87e 	bl	800fc14 <USB_ReadDevInEPInterrupt>
 8008b18:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d05b      	beq.n	8008bdc <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	f003 030f 	and.w	r3, r3, #15
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b30:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	43db      	mvns	r3, r3
 8008b3e:	69f9      	ldr	r1, [r7, #28]
 8008b40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b44:	4013      	ands	r3, r2
 8008b46:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b54:	461a      	mov	r2, r3
 8008b56:	2301      	movs	r3, #1
 8008b58:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d11b      	bne.n	8008b9a <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008b62:	6879      	ldr	r1, [r7, #4]
 8008b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b66:	4613      	mov	r3, r2
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	1a9b      	subs	r3, r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	440b      	add	r3, r1
 8008b70:	3348      	adds	r3, #72	; 0x48
 8008b72:	6819      	ldr	r1, [r3, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b78:	4613      	mov	r3, r2
 8008b7a:	00db      	lsls	r3, r3, #3
 8008b7c:	1a9b      	subs	r3, r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4403      	add	r3, r0
 8008b82:	3344      	adds	r3, #68	; 0x44
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4419      	add	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4403      	add	r3, r0
 8008b96:	3348      	adds	r3, #72	; 0x48
 8008b98:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f00f fbde 	bl	8018362 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d116      	bne.n	8008bdc <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d113      	bne.n	8008bdc <HAL_PCD_IRQHandler+0x272>
 8008bb4:	6879      	ldr	r1, [r7, #4]
 8008bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb8:	4613      	mov	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	3350      	adds	r3, #80	; 0x50
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d108      	bne.n	8008bdc <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	f007 f88e 	bl	800fcf8 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	f003 0308 	and.w	r3, r3, #8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d008      	beq.n	8008bf8 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	2308      	movs	r3, #8
 8008bf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	f003 0310 	and.w	r3, r3, #16
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d008      	beq.n	8008c14 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0e:	461a      	mov	r2, r3
 8008c10:	2310      	movs	r3, #16
 8008c12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d008      	beq.n	8008c30 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	2340      	movs	r3, #64	; 0x40
 8008c2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d008      	beq.n	8008c4c <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c46:	461a      	mov	r2, r3
 8008c48:	2302      	movs	r3, #2
 8008c4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008c56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fc67 	bl	800952c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	3301      	adds	r3, #1
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	085b      	lsrs	r3, r3, #1
 8008c68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f47f af45 	bne.w	8008afc <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f006 ff67 	bl	800fb4a <USB_ReadInterrupts>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c86:	d122      	bne.n	8008cce <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c96:	f023 0301 	bic.w	r3, r3, #1
 8008c9a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d108      	bne.n	8008cb8 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008cae:	2100      	movs	r1, #0
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fe89 	bl	80099c8 <HAL_PCDEx_LPM_Callback>
 8008cb6:	e002      	b.n	8008cbe <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f00f fbc9 	bl	8018450 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	695a      	ldr	r2, [r3, #20]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f006 ff39 	bl	800fb4a <USB_ReadInterrupts>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ce2:	d112      	bne.n	8008d0a <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d102      	bne.n	8008cfa <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f00f fb85 	bl	8018404 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	695a      	ldr	r2, [r3, #20]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008d08:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f006 ff1b 	bl	800fb4a <USB_ReadInterrupts>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1e:	f040 80a7 	bne.w	8008e70 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d30:	f023 0301 	bic.w	r3, r3, #1
 8008d34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2110      	movs	r1, #16
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f006 f853 	bl	800ede8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d42:	2300      	movs	r3, #0
 8008d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d46:	e036      	b.n	8008db6 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d54:	461a      	mov	r2, r3
 8008d56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d6c:	0151      	lsls	r1, r2, #5
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	440a      	add	r2, r1
 8008d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d8e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008da0:	0151      	lsls	r1, r2, #5
 8008da2:	69fa      	ldr	r2, [r7, #28]
 8008da4:	440a      	add	r2, r1
 8008da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008daa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	3301      	adds	r3, #1
 8008db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d3c3      	bcc.n	8008d48 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	69fa      	ldr	r2, [r7, #28]
 8008dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008dd2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d016      	beq.n	8008e0a <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dec:	f043 030b 	orr.w	r3, r3, #11
 8008df0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e02:	f043 030b 	orr.w	r3, r3, #11
 8008e06:	6453      	str	r3, [r2, #68]	; 0x44
 8008e08:	e015      	b.n	8008e36 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e1c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008e20:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e30:	f043 030b 	orr.w	r3, r3, #11
 8008e34:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e44:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008e48:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	f006 ff4c 	bl	800fcf8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	695a      	ldr	r2, [r3, #20]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f006 fe68 	bl	800fb4a <USB_ReadInterrupts>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e84:	d124      	bne.n	8008ed0 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f006 fefe 	bl	800fc8c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f006 f808 	bl	800eeaa <USB_GetDevSpeed>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681c      	ldr	r4, [r3, #0]
 8008ea6:	f001 f971 	bl	800a18c <HAL_RCC_GetHCLKFreq>
 8008eaa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f005 fd37 	bl	800e928 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f00f fa79 	bl	80183b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695a      	ldr	r2, [r3, #20]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f006 fe38 	bl	800fb4a <USB_ReadInterrupts>
 8008eda:	4603      	mov	r3, r0
 8008edc:	f003 0310 	and.w	r3, r3, #16
 8008ee0:	2b10      	cmp	r3, #16
 8008ee2:	d161      	bne.n	8008fa8 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	699a      	ldr	r2, [r3, #24]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0210 	bic.w	r2, r2, #16
 8008ef2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f003 020f 	and.w	r2, r3, #15
 8008f00:	4613      	mov	r3, r2
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	1a9b      	subs	r3, r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	4413      	add	r3, r2
 8008f10:	3304      	adds	r3, #4
 8008f12:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	0c5b      	lsrs	r3, r3, #17
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d124      	bne.n	8008f6a <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008f26:	4013      	ands	r3, r2
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d035      	beq.n	8008f98 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	091b      	lsrs	r3, r3, #4
 8008f34:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	6a38      	ldr	r0, [r7, #32]
 8008f40:	f006 fcb0 	bl	800f8a4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	091b      	lsrs	r3, r3, #4
 8008f4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f50:	441a      	add	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	699a      	ldr	r2, [r3, #24]
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	091b      	lsrs	r3, r3, #4
 8008f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f62:	441a      	add	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	619a      	str	r2, [r3, #24]
 8008f68:	e016      	b.n	8008f98 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	0c5b      	lsrs	r3, r3, #17
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	2b06      	cmp	r3, #6
 8008f74:	d110      	bne.n	8008f98 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6a38      	ldr	r0, [r7, #32]
 8008f82:	f006 fc8f 	bl	800f8a4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	699a      	ldr	r2, [r3, #24]
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	091b      	lsrs	r3, r3, #4
 8008f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f92:	441a      	add	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699a      	ldr	r2, [r3, #24]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f042 0210 	orr.w	r2, r2, #16
 8008fa6:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f006 fdcc 	bl	800fb4a <USB_ReadInterrupts>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f003 0308 	and.w	r3, r3, #8
 8008fb8:	2b08      	cmp	r3, #8
 8008fba:	d10a      	bne.n	8008fd2 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f00f f9ea 	bl	8018396 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	695a      	ldr	r2, [r3, #20]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f002 0208 	and.w	r2, r2, #8
 8008fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f006 fdb7 	bl	800fb4a <USB_ReadInterrupts>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fe6:	d10f      	bne.n	8009008 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f00f fa4c 	bl	8018490 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	695a      	ldr	r2, [r3, #20]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009006:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f006 fd9c 	bl	800fb4a <USB_ReadInterrupts>
 8009012:	4603      	mov	r3, r0
 8009014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800901c:	d10f      	bne.n	800903e <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	b2db      	uxtb	r3, r3
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f00f fa1f 	bl	801846c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	695a      	ldr	r2, [r3, #20]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800903c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4618      	mov	r0, r3
 8009044:	f006 fd81 	bl	800fb4a <USB_ReadInterrupts>
 8009048:	4603      	mov	r3, r0
 800904a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800904e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009052:	d10a      	bne.n	800906a <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f00f fa2d 	bl	80184b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	695a      	ldr	r2, [r3, #20]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4618      	mov	r0, r3
 8009070:	f006 fd6b 	bl	800fb4a <USB_ReadInterrupts>
 8009074:	4603      	mov	r3, r0
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b04      	cmp	r3, #4
 800907c:	d115      	bne.n	80090aa <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f00f fa1d 	bl	80184d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6859      	ldr	r1, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	605a      	str	r2, [r3, #4]
 80090a6:	e000      	b.n	80090aa <HAL_PCD_IRQHandler+0x740>
      return;
 80090a8:	bf00      	nop
    }
  }
}
 80090aa:	3734      	adds	r7, #52	; 0x34
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd90      	pop	{r4, r7, pc}

080090b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d101      	bne.n	80090ca <HAL_PCD_SetAddress+0x1a>
 80090c6:	2302      	movs	r3, #2
 80090c8:	e013      	b.n	80090f2 <HAL_PCD_SetAddress+0x42>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	78fa      	ldrb	r2, [r7, #3]
 80090d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	78fa      	ldrb	r2, [r7, #3]
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f006 fcdb 	bl	800fa9e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	4608      	mov	r0, r1
 8009104:	4611      	mov	r1, r2
 8009106:	461a      	mov	r2, r3
 8009108:	4603      	mov	r3, r0
 800910a:	70fb      	strb	r3, [r7, #3]
 800910c:	460b      	mov	r3, r1
 800910e:	803b      	strh	r3, [r7, #0]
 8009110:	4613      	mov	r3, r2
 8009112:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800911c:	2b00      	cmp	r3, #0
 800911e:	da0f      	bge.n	8009140 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009120:	78fb      	ldrb	r3, [r7, #3]
 8009122:	f003 020f 	and.w	r2, r3, #15
 8009126:	4613      	mov	r3, r2
 8009128:	00db      	lsls	r3, r3, #3
 800912a:	1a9b      	subs	r3, r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	3338      	adds	r3, #56	; 0x38
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	4413      	add	r3, r2
 8009134:	3304      	adds	r3, #4
 8009136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2201      	movs	r2, #1
 800913c:	705a      	strb	r2, [r3, #1]
 800913e:	e00f      	b.n	8009160 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009140:	78fb      	ldrb	r3, [r7, #3]
 8009142:	f003 020f 	and.w	r2, r3, #15
 8009146:	4613      	mov	r3, r2
 8009148:	00db      	lsls	r3, r3, #3
 800914a:	1a9b      	subs	r3, r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	4413      	add	r3, r2
 8009156:	3304      	adds	r3, #4
 8009158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	f003 030f 	and.w	r3, r3, #15
 8009166:	b2da      	uxtb	r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800916c:	883a      	ldrh	r2, [r7, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	78ba      	ldrb	r2, [r7, #2]
 8009176:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	785b      	ldrb	r3, [r3, #1]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d004      	beq.n	800918a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	b29a      	uxth	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800918a:	78bb      	ldrb	r3, [r7, #2]
 800918c:	2b02      	cmp	r3, #2
 800918e:	d102      	bne.n	8009196 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_PCD_EP_Open+0xaa>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e00e      	b.n	80091c2 <HAL_PCD_EP_Open+0xc8>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68f9      	ldr	r1, [r7, #12]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f005 fe9e 	bl	800eef4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80091c0:	7afb      	ldrb	r3, [r7, #11]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80091d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	da0f      	bge.n	80091fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	f003 020f 	and.w	r2, r3, #15
 80091e4:	4613      	mov	r3, r2
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	1a9b      	subs	r3, r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	3338      	adds	r3, #56	; 0x38
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	4413      	add	r3, r2
 80091f2:	3304      	adds	r3, #4
 80091f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	705a      	strb	r2, [r3, #1]
 80091fc:	e00f      	b.n	800921e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091fe:	78fb      	ldrb	r3, [r7, #3]
 8009200:	f003 020f 	and.w	r2, r3, #15
 8009204:	4613      	mov	r3, r2
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	1a9b      	subs	r3, r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	4413      	add	r3, r2
 8009214:	3304      	adds	r3, #4
 8009216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	f003 030f 	and.w	r3, r3, #15
 8009224:	b2da      	uxtb	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009230:	2b01      	cmp	r3, #1
 8009232:	d101      	bne.n	8009238 <HAL_PCD_EP_Close+0x6e>
 8009234:	2302      	movs	r3, #2
 8009236:	e00e      	b.n	8009256 <HAL_PCD_EP_Close+0x8c>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68f9      	ldr	r1, [r7, #12]
 8009246:	4618      	mov	r0, r3
 8009248:	f005 fedc 	bl	800f004 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b086      	sub	sp, #24
 8009262:	af00      	add	r7, sp, #0
 8009264:	60f8      	str	r0, [r7, #12]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
 800926a:	460b      	mov	r3, r1
 800926c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800926e:	7afb      	ldrb	r3, [r7, #11]
 8009270:	f003 020f 	and.w	r2, r3, #15
 8009274:	4613      	mov	r3, r2
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	1a9b      	subs	r3, r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	4413      	add	r3, r2
 8009284:	3304      	adds	r3, #4
 8009286:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2200      	movs	r2, #0
 8009298:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2200      	movs	r2, #0
 800929e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	f003 030f 	and.w	r3, r3, #15
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d102      	bne.n	80092ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80092ba:	7afb      	ldrb	r3, [r7, #11]
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d109      	bne.n	80092d8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6818      	ldr	r0, [r3, #0]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	461a      	mov	r2, r3
 80092d0:	6979      	ldr	r1, [r7, #20]
 80092d2:	f006 f95f 	bl	800f594 <USB_EP0StartXfer>
 80092d6:	e008      	b.n	80092ea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	461a      	mov	r2, r3
 80092e4:	6979      	ldr	r1, [r7, #20]
 80092e6:	f005 ff11 	bl	800f10c <USB_EPStartXfer>
  }

  return HAL_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	f003 020f 	and.w	r2, r3, #15
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4613      	mov	r3, r2
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	1a9b      	subs	r3, r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	440b      	add	r3, r1
 8009312:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009316:	681b      	ldr	r3, [r3, #0]
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	607a      	str	r2, [r7, #4]
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	460b      	mov	r3, r1
 8009332:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009334:	7afb      	ldrb	r3, [r7, #11]
 8009336:	f003 020f 	and.w	r2, r3, #15
 800933a:	4613      	mov	r3, r2
 800933c:	00db      	lsls	r3, r3, #3
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	3338      	adds	r3, #56	; 0x38
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	4413      	add	r3, r2
 8009348:	3304      	adds	r3, #4
 800934a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2200      	movs	r2, #0
 800935c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2201      	movs	r2, #1
 8009362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	f003 030f 	and.w	r3, r3, #15
 800936a:	b2da      	uxtb	r2, r3
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d102      	bne.n	800937e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800937e:	7afb      	ldrb	r3, [r7, #11]
 8009380:	f003 030f 	and.w	r3, r3, #15
 8009384:	2b00      	cmp	r3, #0
 8009386:	d109      	bne.n	800939c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	b2db      	uxtb	r3, r3
 8009392:	461a      	mov	r2, r3
 8009394:	6979      	ldr	r1, [r7, #20]
 8009396:	f006 f8fd 	bl	800f594 <USB_EP0StartXfer>
 800939a:	e008      	b.n	80093ae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	6979      	ldr	r1, [r7, #20]
 80093aa:	f005 feaf 	bl	800f10c <USB_EPStartXfer>
  }

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	f003 020f 	and.w	r2, r3, #15
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d901      	bls.n	80093d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e050      	b.n	8009478 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80093d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	da0f      	bge.n	80093fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	f003 020f 	and.w	r2, r3, #15
 80093e4:	4613      	mov	r3, r2
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	1a9b      	subs	r3, r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	3338      	adds	r3, #56	; 0x38
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	4413      	add	r3, r2
 80093f2:	3304      	adds	r3, #4
 80093f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2201      	movs	r2, #1
 80093fa:	705a      	strb	r2, [r3, #1]
 80093fc:	e00d      	b.n	800941a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80093fe:	78fa      	ldrb	r2, [r7, #3]
 8009400:	4613      	mov	r3, r2
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	1a9b      	subs	r3, r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	4413      	add	r3, r2
 8009410:	3304      	adds	r3, #4
 8009412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2201      	movs	r2, #1
 800941e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	f003 030f 	and.w	r3, r3, #15
 8009426:	b2da      	uxtb	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009432:	2b01      	cmp	r3, #1
 8009434:	d101      	bne.n	800943a <HAL_PCD_EP_SetStall+0x82>
 8009436:	2302      	movs	r3, #2
 8009438:	e01e      	b.n	8009478 <HAL_PCD_EP_SetStall+0xc0>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68f9      	ldr	r1, [r7, #12]
 8009448:	4618      	mov	r0, r3
 800944a:	f006 fa54 	bl	800f8f6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800944e:	78fb      	ldrb	r3, [r7, #3]
 8009450:	f003 030f 	and.w	r3, r3, #15
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10a      	bne.n	800946e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6818      	ldr	r0, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	b2d9      	uxtb	r1, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009468:	461a      	mov	r2, r3
 800946a:	f006 fc45 	bl	800fcf8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800948c:	78fb      	ldrb	r3, [r7, #3]
 800948e:	f003 020f 	and.w	r2, r3, #15
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	429a      	cmp	r2, r3
 8009498:	d901      	bls.n	800949e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e042      	b.n	8009524 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800949e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	da0f      	bge.n	80094c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094a6:	78fb      	ldrb	r3, [r7, #3]
 80094a8:	f003 020f 	and.w	r2, r3, #15
 80094ac:	4613      	mov	r3, r2
 80094ae:	00db      	lsls	r3, r3, #3
 80094b0:	1a9b      	subs	r3, r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	3338      	adds	r3, #56	; 0x38
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	4413      	add	r3, r2
 80094ba:	3304      	adds	r3, #4
 80094bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2201      	movs	r2, #1
 80094c2:	705a      	strb	r2, [r3, #1]
 80094c4:	e00f      	b.n	80094e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	f003 020f 	and.w	r2, r3, #15
 80094cc:	4613      	mov	r3, r2
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	1a9b      	subs	r3, r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	4413      	add	r3, r2
 80094dc:	3304      	adds	r3, #4
 80094de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	f003 030f 	and.w	r3, r3, #15
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d101      	bne.n	8009506 <HAL_PCD_EP_ClrStall+0x86>
 8009502:	2302      	movs	r3, #2
 8009504:	e00e      	b.n	8009524 <HAL_PCD_EP_ClrStall+0xa4>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68f9      	ldr	r1, [r7, #12]
 8009514:	4618      	mov	r0, r3
 8009516:	f006 fa5c 	bl	800f9d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08a      	sub	sp, #40	; 0x28
 8009530:	af02      	add	r7, sp, #8
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	4613      	mov	r3, r2
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	1a9b      	subs	r3, r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	3338      	adds	r3, #56	; 0x38
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	4413      	add	r3, r2
 8009550:	3304      	adds	r3, #4
 8009552:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	699a      	ldr	r2, [r3, #24]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	429a      	cmp	r2, r3
 800955e:	d901      	bls.n	8009564 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e06c      	b.n	800963e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	695a      	ldr	r2, [r3, #20]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	69fa      	ldr	r2, [r7, #28]
 8009576:	429a      	cmp	r2, r3
 8009578:	d902      	bls.n	8009580 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	3303      	adds	r3, #3
 8009584:	089b      	lsrs	r3, r3, #2
 8009586:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009588:	e02b      	b.n	80095e2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	695a      	ldr	r2, [r3, #20]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	429a      	cmp	r2, r3
 800959e:	d902      	bls.n	80095a6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	3303      	adds	r3, #3
 80095aa:	089b      	lsrs	r3, r3, #2
 80095ac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	68d9      	ldr	r1, [r3, #12]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	4603      	mov	r3, r0
 80095c4:	6978      	ldr	r0, [r7, #20]
 80095c6:	f006 f938 	bl	800f83a <USB_WritePacket>

    ep->xfer_buff  += len;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	441a      	add	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	699a      	ldr	r2, [r3, #24]
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	441a      	add	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d809      	bhi.n	800960c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	699a      	ldr	r2, [r3, #24]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009600:	429a      	cmp	r2, r3
 8009602:	d203      	bcs.n	800960c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	695b      	ldr	r3, [r3, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1be      	bne.n	800958a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	695a      	ldr	r2, [r3, #20]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	429a      	cmp	r2, r3
 8009616:	d811      	bhi.n	800963c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	f003 030f 	and.w	r3, r3, #15
 800961e:	2201      	movs	r2, #1
 8009620:	fa02 f303 	lsl.w	r3, r2, r3
 8009624:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	43db      	mvns	r3, r3
 8009632:	6939      	ldr	r1, [r7, #16]
 8009634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009638:	4013      	ands	r3, r2
 800963a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3720      	adds	r7, #32
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	333c      	adds	r3, #60	; 0x3c
 8009660:	3304      	adds	r3, #4
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	2b01      	cmp	r3, #1
 800967c:	f040 80b3 	bne.w	80097e6 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f003 0308 	and.w	r3, r3, #8
 8009686:	2b00      	cmp	r3, #0
 8009688:	d028      	beq.n	80096dc <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	4a70      	ldr	r2, [pc, #448]	; (8009850 <PCD_EP_OutXfrComplete_int+0x208>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d90e      	bls.n	80096b0 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009698:	2b00      	cmp	r3, #0
 800969a:	d009      	beq.n	80096b0 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a8:	461a      	mov	r2, r3
 80096aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096ae:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f00e fe29 	bl	8018308 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80096c0:	461a      	mov	r2, r3
 80096c2:	2101      	movs	r1, #1
 80096c4:	f006 fb18 	bl	800fcf8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d4:	461a      	mov	r2, r3
 80096d6:	2308      	movs	r3, #8
 80096d8:	6093      	str	r3, [r2, #8]
 80096da:	e0b3      	b.n	8009844 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d009      	beq.n	80096fa <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f2:	461a      	mov	r2, r3
 80096f4:	2320      	movs	r3, #32
 80096f6:	6093      	str	r3, [r2, #8]
 80096f8:	e0a4      	b.n	8009844 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009700:	2b00      	cmp	r3, #0
 8009702:	f040 809f 	bne.w	8009844 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4a51      	ldr	r2, [pc, #324]	; (8009850 <PCD_EP_OutXfrComplete_int+0x208>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d90f      	bls.n	800972e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00a      	beq.n	800972e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009724:	461a      	mov	r2, r3
 8009726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800972a:	6093      	str	r3, [r2, #8]
 800972c:	e08a      	b.n	8009844 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800972e:	6879      	ldr	r1, [r7, #4]
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	4613      	mov	r3, r2
 8009734:	00db      	lsls	r3, r3, #3
 8009736:	1a9b      	subs	r3, r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	440b      	add	r3, r1
 800973c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009740:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	0159      	lsls	r1, r3, #5
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	440b      	add	r3, r1
 800974a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009754:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	4613      	mov	r3, r2
 800975c:	00db      	lsls	r3, r3, #3
 800975e:	1a9b      	subs	r3, r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4403      	add	r3, r0
 8009764:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009768:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800976a:	6879      	ldr	r1, [r7, #4]
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	4613      	mov	r3, r2
 8009770:	00db      	lsls	r3, r3, #3
 8009772:	1a9b      	subs	r3, r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	440b      	add	r3, r1
 8009778:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800977c:	6819      	ldr	r1, [r3, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	4613      	mov	r3, r2
 8009784:	00db      	lsls	r3, r3, #3
 8009786:	1a9b      	subs	r3, r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4403      	add	r3, r0
 800978c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4419      	add	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	4613      	mov	r3, r2
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	1a9b      	subs	r3, r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4403      	add	r3, r0
 80097a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80097a6:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f00e fdbc 	bl	801832c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d144      	bne.n	8009844 <PCD_EP_OutXfrComplete_int+0x1fc>
 80097ba:	6879      	ldr	r1, [r7, #4]
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	4613      	mov	r3, r2
 80097c0:	00db      	lsls	r3, r3, #3
 80097c2:	1a9b      	subs	r3, r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	440b      	add	r3, r1
 80097c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d138      	bne.n	8009844 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80097dc:	461a      	mov	r2, r3
 80097de:	2101      	movs	r1, #1
 80097e0:	f006 fa8a 	bl	800fcf8 <USB_EP0_OutStart>
 80097e4:	e02e      	b.n	8009844 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4a1a      	ldr	r2, [pc, #104]	; (8009854 <PCD_EP_OutXfrComplete_int+0x20c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d124      	bne.n	8009838 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00a      	beq.n	800980e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009804:	461a      	mov	r2, r3
 8009806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800980a:	6093      	str	r3, [r2, #8]
 800980c:	e01a      	b.n	8009844 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b00      	cmp	r3, #0
 8009816:	d008      	beq.n	800982a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	4413      	add	r3, r2
 8009820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009824:	461a      	mov	r2, r3
 8009826:	2320      	movs	r3, #32
 8009828:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f00e fd7b 	bl	801832c <HAL_PCD_DataOutStageCallback>
 8009836:	e005      	b.n	8009844 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f00e fd74 	bl	801832c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	4f54300a 	.word	0x4f54300a
 8009854:	4f54310a 	.word	0x4f54310a

08009858 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	333c      	adds	r3, #60	; 0x3c
 8009870:	3304      	adds	r3, #4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d113      	bne.n	80098b6 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4a1f      	ldr	r2, [pc, #124]	; (8009910 <PCD_EP_OutSetupPacket_int+0xb8>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d922      	bls.n	80098dc <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800989c:	2b00      	cmp	r3, #0
 800989e:	d01d      	beq.n	80098dc <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ac:	461a      	mov	r2, r3
 80098ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098b2:	6093      	str	r3, [r2, #8]
 80098b4:	e012      	b.n	80098dc <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	4a16      	ldr	r2, [pc, #88]	; (8009914 <PCD_EP_OutSetupPacket_int+0xbc>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d10e      	bne.n	80098dc <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d009      	beq.n	80098dc <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d4:	461a      	mov	r2, r3
 80098d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f00e fd13 	bl	8018308 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4a0a      	ldr	r2, [pc, #40]	; (8009910 <PCD_EP_OutSetupPacket_int+0xb8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d90c      	bls.n	8009904 <PCD_EP_OutSetupPacket_int+0xac>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d108      	bne.n	8009904 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6818      	ldr	r0, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80098fc:	461a      	mov	r2, r3
 80098fe:	2101      	movs	r1, #1
 8009900:	f006 f9fa 	bl	800fcf8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	4f54300a 	.word	0x4f54300a
 8009914:	4f54310a 	.word	0x4f54310a

08009918 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	70fb      	strb	r3, [r7, #3]
 8009924:	4613      	mov	r3, r2
 8009926:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009930:	78fb      	ldrb	r3, [r7, #3]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d107      	bne.n	8009946 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009936:	883b      	ldrh	r3, [r7, #0]
 8009938:	0419      	lsls	r1, r3, #16
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	430a      	orrs	r2, r1
 8009942:	629a      	str	r2, [r3, #40]	; 0x28
 8009944:	e028      	b.n	8009998 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994c:	0c1b      	lsrs	r3, r3, #16
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	4413      	add	r3, r2
 8009952:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009954:	2300      	movs	r3, #0
 8009956:	73fb      	strb	r3, [r7, #15]
 8009958:	e00d      	b.n	8009976 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	3340      	adds	r3, #64	; 0x40
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	0c1b      	lsrs	r3, r3, #16
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	4413      	add	r3, r2
 800996e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	3301      	adds	r3, #1
 8009974:	73fb      	strb	r3, [r7, #15]
 8009976:	7bfa      	ldrb	r2, [r7, #15]
 8009978:	78fb      	ldrb	r3, [r7, #3]
 800997a:	3b01      	subs	r3, #1
 800997c:	429a      	cmp	r2, r3
 800997e:	d3ec      	bcc.n	800995a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009980:	883b      	ldrh	r3, [r7, #0]
 8009982:	0418      	lsls	r0, r3, #16
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6819      	ldr	r1, [r3, #0]
 8009988:	78fb      	ldrb	r3, [r7, #3]
 800998a:	3b01      	subs	r3, #1
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	4302      	orrs	r2, r0
 8009990:	3340      	adds	r3, #64	; 0x40
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	440b      	add	r3, r1
 8009996:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b083      	sub	sp, #12
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	460b      	mov	r3, r1
 80099b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	887a      	ldrh	r2, [r7, #2]
 80099b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e22d      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d075      	beq.n	8009aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80099fe:	4ba3      	ldr	r3, [pc, #652]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f003 030c 	and.w	r3, r3, #12
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d00c      	beq.n	8009a24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a0a:	4ba0      	ldr	r3, [pc, #640]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a12:	2b08      	cmp	r3, #8
 8009a14:	d112      	bne.n	8009a3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a16:	4b9d      	ldr	r3, [pc, #628]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a22:	d10b      	bne.n	8009a3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a24:	4b99      	ldr	r3, [pc, #612]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d05b      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x108>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d157      	bne.n	8009ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e208      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a44:	d106      	bne.n	8009a54 <HAL_RCC_OscConfig+0x74>
 8009a46:	4b91      	ldr	r3, [pc, #580]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a90      	ldr	r2, [pc, #576]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	e01d      	b.n	8009a90 <HAL_RCC_OscConfig+0xb0>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a5c:	d10c      	bne.n	8009a78 <HAL_RCC_OscConfig+0x98>
 8009a5e:	4b8b      	ldr	r3, [pc, #556]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a8a      	ldr	r2, [pc, #552]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	4b88      	ldr	r3, [pc, #544]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a87      	ldr	r2, [pc, #540]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	e00b      	b.n	8009a90 <HAL_RCC_OscConfig+0xb0>
 8009a78:	4b84      	ldr	r3, [pc, #528]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a83      	ldr	r2, [pc, #524]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	4b81      	ldr	r3, [pc, #516]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a80      	ldr	r2, [pc, #512]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d013      	beq.n	8009ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a98:	f7fc ffda 	bl	8006a50 <HAL_GetTick>
 8009a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a9e:	e008      	b.n	8009ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009aa0:	f7fc ffd6 	bl	8006a50 <HAL_GetTick>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	2b64      	cmp	r3, #100	; 0x64
 8009aac:	d901      	bls.n	8009ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e1cd      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ab2:	4b76      	ldr	r3, [pc, #472]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0f0      	beq.n	8009aa0 <HAL_RCC_OscConfig+0xc0>
 8009abe:	e014      	b.n	8009aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ac0:	f7fc ffc6 	bl	8006a50 <HAL_GetTick>
 8009ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ac6:	e008      	b.n	8009ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ac8:	f7fc ffc2 	bl	8006a50 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	2b64      	cmp	r3, #100	; 0x64
 8009ad4:	d901      	bls.n	8009ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e1b9      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ada:	4b6c      	ldr	r3, [pc, #432]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1f0      	bne.n	8009ac8 <HAL_RCC_OscConfig+0xe8>
 8009ae6:	e000      	b.n	8009aea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0302 	and.w	r3, r3, #2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d063      	beq.n	8009bbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009af6:	4b65      	ldr	r3, [pc, #404]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f003 030c 	and.w	r3, r3, #12
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00b      	beq.n	8009b1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b02:	4b62      	ldr	r3, [pc, #392]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b0a:	2b08      	cmp	r3, #8
 8009b0c:	d11c      	bne.n	8009b48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b0e:	4b5f      	ldr	r3, [pc, #380]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d116      	bne.n	8009b48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b1a:	4b5c      	ldr	r3, [pc, #368]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d005      	beq.n	8009b32 <HAL_RCC_OscConfig+0x152>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d001      	beq.n	8009b32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e18d      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b32:	4b56      	ldr	r3, [pc, #344]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	00db      	lsls	r3, r3, #3
 8009b40:	4952      	ldr	r1, [pc, #328]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b46:	e03a      	b.n	8009bbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d020      	beq.n	8009b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b50:	4b4f      	ldr	r3, [pc, #316]	; (8009c90 <HAL_RCC_OscConfig+0x2b0>)
 8009b52:	2201      	movs	r2, #1
 8009b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b56:	f7fc ff7b 	bl	8006a50 <HAL_GetTick>
 8009b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b5c:	e008      	b.n	8009b70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b5e:	f7fc ff77 	bl	8006a50 <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d901      	bls.n	8009b70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e16e      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b70:	4b46      	ldr	r3, [pc, #280]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 0302 	and.w	r3, r3, #2
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d0f0      	beq.n	8009b5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b7c:	4b43      	ldr	r3, [pc, #268]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	00db      	lsls	r3, r3, #3
 8009b8a:	4940      	ldr	r1, [pc, #256]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	600b      	str	r3, [r1, #0]
 8009b90:	e015      	b.n	8009bbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b92:	4b3f      	ldr	r3, [pc, #252]	; (8009c90 <HAL_RCC_OscConfig+0x2b0>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b98:	f7fc ff5a 	bl	8006a50 <HAL_GetTick>
 8009b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b9e:	e008      	b.n	8009bb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ba0:	f7fc ff56 	bl	8006a50 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d901      	bls.n	8009bb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e14d      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bb2:	4b36      	ldr	r3, [pc, #216]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0302 	and.w	r3, r3, #2
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1f0      	bne.n	8009ba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 0308 	and.w	r3, r3, #8
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d030      	beq.n	8009c2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d016      	beq.n	8009c00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bd2:	4b30      	ldr	r3, [pc, #192]	; (8009c94 <HAL_RCC_OscConfig+0x2b4>)
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bd8:	f7fc ff3a 	bl	8006a50 <HAL_GetTick>
 8009bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bde:	e008      	b.n	8009bf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009be0:	f7fc ff36 	bl	8006a50 <HAL_GetTick>
 8009be4:	4602      	mov	r2, r0
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d901      	bls.n	8009bf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e12d      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bf2:	4b26      	ldr	r3, [pc, #152]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d0f0      	beq.n	8009be0 <HAL_RCC_OscConfig+0x200>
 8009bfe:	e015      	b.n	8009c2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c00:	4b24      	ldr	r3, [pc, #144]	; (8009c94 <HAL_RCC_OscConfig+0x2b4>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c06:	f7fc ff23 	bl	8006a50 <HAL_GetTick>
 8009c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c0c:	e008      	b.n	8009c20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c0e:	f7fc ff1f 	bl	8006a50 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d901      	bls.n	8009c20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e116      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c20:	4b1a      	ldr	r3, [pc, #104]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c24:	f003 0302 	and.w	r3, r3, #2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1f0      	bne.n	8009c0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0304 	and.w	r3, r3, #4
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 80a0 	beq.w	8009d7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c3e:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10f      	bne.n	8009c6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60fb      	str	r3, [r7, #12]
 8009c4e:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c52:	4a0e      	ldr	r2, [pc, #56]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c58:	6413      	str	r3, [r2, #64]	; 0x40
 8009c5a:	4b0c      	ldr	r3, [pc, #48]	; (8009c8c <HAL_RCC_OscConfig+0x2ac>)
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009c66:	2301      	movs	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c6a:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <HAL_RCC_OscConfig+0x2b8>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d121      	bne.n	8009cba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c76:	4b08      	ldr	r3, [pc, #32]	; (8009c98 <HAL_RCC_OscConfig+0x2b8>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a07      	ldr	r2, [pc, #28]	; (8009c98 <HAL_RCC_OscConfig+0x2b8>)
 8009c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c82:	f7fc fee5 	bl	8006a50 <HAL_GetTick>
 8009c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c88:	e011      	b.n	8009cae <HAL_RCC_OscConfig+0x2ce>
 8009c8a:	bf00      	nop
 8009c8c:	40023800 	.word	0x40023800
 8009c90:	42470000 	.word	0x42470000
 8009c94:	42470e80 	.word	0x42470e80
 8009c98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c9c:	f7fc fed8 	bl	8006a50 <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d901      	bls.n	8009cae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e0cf      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cae:	4b6a      	ldr	r3, [pc, #424]	; (8009e58 <HAL_RCC_OscConfig+0x478>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0f0      	beq.n	8009c9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d106      	bne.n	8009cd0 <HAL_RCC_OscConfig+0x2f0>
 8009cc2:	4b66      	ldr	r3, [pc, #408]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc6:	4a65      	ldr	r2, [pc, #404]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009cc8:	f043 0301 	orr.w	r3, r3, #1
 8009ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8009cce:	e01c      	b.n	8009d0a <HAL_RCC_OscConfig+0x32a>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	2b05      	cmp	r3, #5
 8009cd6:	d10c      	bne.n	8009cf2 <HAL_RCC_OscConfig+0x312>
 8009cd8:	4b60      	ldr	r3, [pc, #384]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cdc:	4a5f      	ldr	r2, [pc, #380]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009cde:	f043 0304 	orr.w	r3, r3, #4
 8009ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8009ce4:	4b5d      	ldr	r3, [pc, #372]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce8:	4a5c      	ldr	r2, [pc, #368]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009cea:	f043 0301 	orr.w	r3, r3, #1
 8009cee:	6713      	str	r3, [r2, #112]	; 0x70
 8009cf0:	e00b      	b.n	8009d0a <HAL_RCC_OscConfig+0x32a>
 8009cf2:	4b5a      	ldr	r3, [pc, #360]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf6:	4a59      	ldr	r2, [pc, #356]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009cf8:	f023 0301 	bic.w	r3, r3, #1
 8009cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8009cfe:	4b57      	ldr	r3, [pc, #348]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d02:	4a56      	ldr	r2, [pc, #344]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009d04:	f023 0304 	bic.w	r3, r3, #4
 8009d08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d015      	beq.n	8009d3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d12:	f7fc fe9d 	bl	8006a50 <HAL_GetTick>
 8009d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d18:	e00a      	b.n	8009d30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d1a:	f7fc fe99 	bl	8006a50 <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d901      	bls.n	8009d30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e08e      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d30:	4b4a      	ldr	r3, [pc, #296]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d34:	f003 0302 	and.w	r3, r3, #2
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0ee      	beq.n	8009d1a <HAL_RCC_OscConfig+0x33a>
 8009d3c:	e014      	b.n	8009d68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d3e:	f7fc fe87 	bl	8006a50 <HAL_GetTick>
 8009d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d44:	e00a      	b.n	8009d5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d46:	f7fc fe83 	bl	8006a50 <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d901      	bls.n	8009d5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e078      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d5c:	4b3f      	ldr	r3, [pc, #252]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d60:	f003 0302 	and.w	r3, r3, #2
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1ee      	bne.n	8009d46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d105      	bne.n	8009d7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d6e:	4b3b      	ldr	r3, [pc, #236]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	4a3a      	ldr	r2, [pc, #232]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d064      	beq.n	8009e4c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009d82:	4b36      	ldr	r3, [pc, #216]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f003 030c 	and.w	r3, r3, #12
 8009d8a:	2b08      	cmp	r3, #8
 8009d8c:	d05c      	beq.n	8009e48 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d141      	bne.n	8009e1a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d96:	4b32      	ldr	r3, [pc, #200]	; (8009e60 <HAL_RCC_OscConfig+0x480>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d9c:	f7fc fe58 	bl	8006a50 <HAL_GetTick>
 8009da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009da2:	e008      	b.n	8009db6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009da4:	f7fc fe54 	bl	8006a50 <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d901      	bls.n	8009db6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e04b      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009db6:	4b29      	ldr	r3, [pc, #164]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f0      	bne.n	8009da4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	69da      	ldr	r2, [r3, #28]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	431a      	orrs	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	019b      	lsls	r3, r3, #6
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd8:	085b      	lsrs	r3, r3, #1
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	041b      	lsls	r3, r3, #16
 8009dde:	431a      	orrs	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de4:	061b      	lsls	r3, r3, #24
 8009de6:	491d      	ldr	r1, [pc, #116]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009de8:	4313      	orrs	r3, r2
 8009dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009dec:	4b1c      	ldr	r3, [pc, #112]	; (8009e60 <HAL_RCC_OscConfig+0x480>)
 8009dee:	2201      	movs	r2, #1
 8009df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009df2:	f7fc fe2d 	bl	8006a50 <HAL_GetTick>
 8009df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009df8:	e008      	b.n	8009e0c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009dfa:	f7fc fe29 	bl	8006a50 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d901      	bls.n	8009e0c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e020      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e0c:	4b13      	ldr	r3, [pc, #76]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0f0      	beq.n	8009dfa <HAL_RCC_OscConfig+0x41a>
 8009e18:	e018      	b.n	8009e4c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e1a:	4b11      	ldr	r3, [pc, #68]	; (8009e60 <HAL_RCC_OscConfig+0x480>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e20:	f7fc fe16 	bl	8006a50 <HAL_GetTick>
 8009e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e26:	e008      	b.n	8009e3a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e28:	f7fc fe12 	bl	8006a50 <HAL_GetTick>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d901      	bls.n	8009e3a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e009      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e3a:	4b08      	ldr	r3, [pc, #32]	; (8009e5c <HAL_RCC_OscConfig+0x47c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1f0      	bne.n	8009e28 <HAL_RCC_OscConfig+0x448>
 8009e46:	e001      	b.n	8009e4c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e000      	b.n	8009e4e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	40007000 	.word	0x40007000
 8009e5c:	40023800 	.word	0x40023800
 8009e60:	42470060 	.word	0x42470060

08009e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e0ca      	b.n	800a00e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e78:	4b67      	ldr	r3, [pc, #412]	; (800a018 <HAL_RCC_ClockConfig+0x1b4>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 030f 	and.w	r3, r3, #15
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d90c      	bls.n	8009ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e86:	4b64      	ldr	r3, [pc, #400]	; (800a018 <HAL_RCC_ClockConfig+0x1b4>)
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	b2d2      	uxtb	r2, r2
 8009e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e8e:	4b62      	ldr	r3, [pc, #392]	; (800a018 <HAL_RCC_ClockConfig+0x1b4>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 030f 	and.w	r3, r3, #15
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d001      	beq.n	8009ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e0b6      	b.n	800a00e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d020      	beq.n	8009eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 0304 	and.w	r3, r3, #4
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d005      	beq.n	8009ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009eb8:	4b58      	ldr	r3, [pc, #352]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	4a57      	ldr	r2, [pc, #348]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0308 	and.w	r3, r3, #8
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d005      	beq.n	8009edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ed0:	4b52      	ldr	r3, [pc, #328]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	4a51      	ldr	r2, [pc, #324]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009edc:	4b4f      	ldr	r3, [pc, #316]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	494c      	ldr	r1, [pc, #304]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d044      	beq.n	8009f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d107      	bne.n	8009f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f02:	4b46      	ldr	r3, [pc, #280]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d119      	bne.n	8009f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e07d      	b.n	800a00e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d003      	beq.n	8009f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d107      	bne.n	8009f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f22:	4b3e      	ldr	r3, [pc, #248]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d109      	bne.n	8009f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e06d      	b.n	800a00e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f32:	4b3a      	ldr	r3, [pc, #232]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e065      	b.n	800a00e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f42:	4b36      	ldr	r3, [pc, #216]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f023 0203 	bic.w	r2, r3, #3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	4933      	ldr	r1, [pc, #204]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009f54:	f7fc fd7c 	bl	8006a50 <HAL_GetTick>
 8009f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f5a:	e00a      	b.n	8009f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f5c:	f7fc fd78 	bl	8006a50 <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d901      	bls.n	8009f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e04d      	b.n	800a00e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f72:	4b2a      	ldr	r3, [pc, #168]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f003 020c 	and.w	r2, r3, #12
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d1eb      	bne.n	8009f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f84:	4b24      	ldr	r3, [pc, #144]	; (800a018 <HAL_RCC_ClockConfig+0x1b4>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 030f 	and.w	r3, r3, #15
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d20c      	bcs.n	8009fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f92:	4b21      	ldr	r3, [pc, #132]	; (800a018 <HAL_RCC_ClockConfig+0x1b4>)
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	b2d2      	uxtb	r2, r2
 8009f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f9a:	4b1f      	ldr	r3, [pc, #124]	; (800a018 <HAL_RCC_ClockConfig+0x1b4>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 030f 	and.w	r3, r3, #15
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d001      	beq.n	8009fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e030      	b.n	800a00e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d008      	beq.n	8009fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009fb8:	4b18      	ldr	r3, [pc, #96]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	4915      	ldr	r1, [pc, #84]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0308 	and.w	r3, r3, #8
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d009      	beq.n	8009fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009fd6:	4b11      	ldr	r3, [pc, #68]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	490d      	ldr	r1, [pc, #52]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009fea:	f000 f81d 	bl	800a028 <HAL_RCC_GetSysClockFreq>
 8009fee:	4601      	mov	r1, r0
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <HAL_RCC_ClockConfig+0x1b8>)
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	091b      	lsrs	r3, r3, #4
 8009ff6:	f003 030f 	and.w	r3, r3, #15
 8009ffa:	4a09      	ldr	r2, [pc, #36]	; (800a020 <HAL_RCC_ClockConfig+0x1bc>)
 8009ffc:	5cd3      	ldrb	r3, [r2, r3]
 8009ffe:	fa21 f303 	lsr.w	r3, r1, r3
 800a002:	4a08      	ldr	r2, [pc, #32]	; (800a024 <HAL_RCC_ClockConfig+0x1c0>)
 800a004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800a006:	2000      	movs	r0, #0
 800a008:	f7fc fcde 	bl	80069c8 <HAL_InitTick>

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	40023c00 	.word	0x40023c00
 800a01c:	40023800 	.word	0x40023800
 800a020:	080203fc 	.word	0x080203fc
 800a024:	20000170 	.word	0x20000170

0800a028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	607b      	str	r3, [r7, #4]
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
 800a036:	2300      	movs	r3, #0
 800a038:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a03e:	4b50      	ldr	r3, [pc, #320]	; (800a180 <HAL_RCC_GetSysClockFreq+0x158>)
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f003 030c 	and.w	r3, r3, #12
 800a046:	2b04      	cmp	r3, #4
 800a048:	d007      	beq.n	800a05a <HAL_RCC_GetSysClockFreq+0x32>
 800a04a:	2b08      	cmp	r3, #8
 800a04c:	d008      	beq.n	800a060 <HAL_RCC_GetSysClockFreq+0x38>
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f040 808d 	bne.w	800a16e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a054:	4b4b      	ldr	r3, [pc, #300]	; (800a184 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a056:	60bb      	str	r3, [r7, #8]
       break;
 800a058:	e08c      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a05a:	4b4b      	ldr	r3, [pc, #300]	; (800a188 <HAL_RCC_GetSysClockFreq+0x160>)
 800a05c:	60bb      	str	r3, [r7, #8]
      break;
 800a05e:	e089      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a060:	4b47      	ldr	r3, [pc, #284]	; (800a180 <HAL_RCC_GetSysClockFreq+0x158>)
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a068:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a06a:	4b45      	ldr	r3, [pc, #276]	; (800a180 <HAL_RCC_GetSysClockFreq+0x158>)
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d023      	beq.n	800a0be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a076:	4b42      	ldr	r3, [pc, #264]	; (800a180 <HAL_RCC_GetSysClockFreq+0x158>)
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	099b      	lsrs	r3, r3, #6
 800a07c:	f04f 0400 	mov.w	r4, #0
 800a080:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a084:	f04f 0200 	mov.w	r2, #0
 800a088:	ea03 0501 	and.w	r5, r3, r1
 800a08c:	ea04 0602 	and.w	r6, r4, r2
 800a090:	4a3d      	ldr	r2, [pc, #244]	; (800a188 <HAL_RCC_GetSysClockFreq+0x160>)
 800a092:	fb02 f106 	mul.w	r1, r2, r6
 800a096:	2200      	movs	r2, #0
 800a098:	fb02 f205 	mul.w	r2, r2, r5
 800a09c:	440a      	add	r2, r1
 800a09e:	493a      	ldr	r1, [pc, #232]	; (800a188 <HAL_RCC_GetSysClockFreq+0x160>)
 800a0a0:	fba5 0101 	umull	r0, r1, r5, r1
 800a0a4:	1853      	adds	r3, r2, r1
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f04f 0400 	mov.w	r4, #0
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	4623      	mov	r3, r4
 800a0b2:	f7f6 fe49 	bl	8000d48 <__aeabi_uldivmod>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	e049      	b.n	800a152 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0be:	4b30      	ldr	r3, [pc, #192]	; (800a180 <HAL_RCC_GetSysClockFreq+0x158>)
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	099b      	lsrs	r3, r3, #6
 800a0c4:	f04f 0400 	mov.w	r4, #0
 800a0c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a0cc:	f04f 0200 	mov.w	r2, #0
 800a0d0:	ea03 0501 	and.w	r5, r3, r1
 800a0d4:	ea04 0602 	and.w	r6, r4, r2
 800a0d8:	4629      	mov	r1, r5
 800a0da:	4632      	mov	r2, r6
 800a0dc:	f04f 0300 	mov.w	r3, #0
 800a0e0:	f04f 0400 	mov.w	r4, #0
 800a0e4:	0154      	lsls	r4, r2, #5
 800a0e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a0ea:	014b      	lsls	r3, r1, #5
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4622      	mov	r2, r4
 800a0f0:	1b49      	subs	r1, r1, r5
 800a0f2:	eb62 0206 	sbc.w	r2, r2, r6
 800a0f6:	f04f 0300 	mov.w	r3, #0
 800a0fa:	f04f 0400 	mov.w	r4, #0
 800a0fe:	0194      	lsls	r4, r2, #6
 800a100:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a104:	018b      	lsls	r3, r1, #6
 800a106:	1a5b      	subs	r3, r3, r1
 800a108:	eb64 0402 	sbc.w	r4, r4, r2
 800a10c:	f04f 0100 	mov.w	r1, #0
 800a110:	f04f 0200 	mov.w	r2, #0
 800a114:	00e2      	lsls	r2, r4, #3
 800a116:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a11a:	00d9      	lsls	r1, r3, #3
 800a11c:	460b      	mov	r3, r1
 800a11e:	4614      	mov	r4, r2
 800a120:	195b      	adds	r3, r3, r5
 800a122:	eb44 0406 	adc.w	r4, r4, r6
 800a126:	f04f 0100 	mov.w	r1, #0
 800a12a:	f04f 0200 	mov.w	r2, #0
 800a12e:	02a2      	lsls	r2, r4, #10
 800a130:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a134:	0299      	lsls	r1, r3, #10
 800a136:	460b      	mov	r3, r1
 800a138:	4614      	mov	r4, r2
 800a13a:	4618      	mov	r0, r3
 800a13c:	4621      	mov	r1, r4
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f04f 0400 	mov.w	r4, #0
 800a144:	461a      	mov	r2, r3
 800a146:	4623      	mov	r3, r4
 800a148:	f7f6 fdfe 	bl	8000d48 <__aeabi_uldivmod>
 800a14c:	4603      	mov	r3, r0
 800a14e:	460c      	mov	r4, r1
 800a150:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a152:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <HAL_RCC_GetSysClockFreq+0x158>)
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	0c1b      	lsrs	r3, r3, #16
 800a158:	f003 0303 	and.w	r3, r3, #3
 800a15c:	3301      	adds	r3, #1
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	fbb2 f3f3 	udiv	r3, r2, r3
 800a16a:	60bb      	str	r3, [r7, #8]
      break;
 800a16c:	e002      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a16e:	4b05      	ldr	r3, [pc, #20]	; (800a184 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a170:	60bb      	str	r3, [r7, #8]
      break;
 800a172:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a174:	68bb      	ldr	r3, [r7, #8]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a17e:	bf00      	nop
 800a180:	40023800 	.word	0x40023800
 800a184:	00f42400 	.word	0x00f42400
 800a188:	00b71b00 	.word	0x00b71b00

0800a18c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a190:	4b03      	ldr	r3, [pc, #12]	; (800a1a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a192:	681b      	ldr	r3, [r3, #0]
}
 800a194:	4618      	mov	r0, r3
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	20000170 	.word	0x20000170

0800a1a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a1a8:	f7ff fff0 	bl	800a18c <HAL_RCC_GetHCLKFreq>
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	0a9b      	lsrs	r3, r3, #10
 800a1b4:	f003 0307 	and.w	r3, r3, #7
 800a1b8:	4a03      	ldr	r2, [pc, #12]	; (800a1c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1ba:	5cd3      	ldrb	r3, [r2, r3]
 800a1bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	40023800 	.word	0x40023800
 800a1c8:	0802040c 	.word	0x0802040c

0800a1cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a1d0:	f7ff ffdc 	bl	800a18c <HAL_RCC_GetHCLKFreq>
 800a1d4:	4601      	mov	r1, r0
 800a1d6:	4b05      	ldr	r3, [pc, #20]	; (800a1ec <HAL_RCC_GetPCLK2Freq+0x20>)
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	0b5b      	lsrs	r3, r3, #13
 800a1dc:	f003 0307 	and.w	r3, r3, #7
 800a1e0:	4a03      	ldr	r2, [pc, #12]	; (800a1f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1e2:	5cd3      	ldrb	r3, [r2, r3]
 800a1e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	40023800 	.word	0x40023800
 800a1f0:	0802040c 	.word	0x0802040c

0800a1f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a200:	2300      	movs	r3, #0
 800a202:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d105      	bne.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d035      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a21c:	4b62      	ldr	r3, [pc, #392]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a21e:	2200      	movs	r2, #0
 800a220:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a222:	f7fc fc15 	bl	8006a50 <HAL_GetTick>
 800a226:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a228:	e008      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a22a:	f7fc fc11 	bl	8006a50 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	d901      	bls.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e0b0      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a23c:	4b5b      	ldr	r3, [pc, #364]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1f0      	bne.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	019a      	lsls	r2, r3, #6
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	071b      	lsls	r3, r3, #28
 800a254:	4955      	ldr	r1, [pc, #340]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a256:	4313      	orrs	r3, r2
 800a258:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a25c:	4b52      	ldr	r3, [pc, #328]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a25e:	2201      	movs	r2, #1
 800a260:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a262:	f7fc fbf5 	bl	8006a50 <HAL_GetTick>
 800a266:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a268:	e008      	b.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a26a:	f7fc fbf1 	bl	8006a50 <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d901      	bls.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e090      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a27c:	4b4b      	ldr	r3, [pc, #300]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d0f0      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 8083 	beq.w	800a39c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a296:	2300      	movs	r3, #0
 800a298:	60fb      	str	r3, [r7, #12]
 800a29a:	4b44      	ldr	r3, [pc, #272]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	4a43      	ldr	r2, [pc, #268]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a2a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2a4:	6413      	str	r3, [r2, #64]	; 0x40
 800a2a6:	4b41      	ldr	r3, [pc, #260]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a2b2:	4b3f      	ldr	r3, [pc, #252]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a3e      	ldr	r2, [pc, #248]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a2b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a2be:	f7fc fbc7 	bl	8006a50 <HAL_GetTick>
 800a2c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a2c4:	e008      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a2c6:	f7fc fbc3 	bl	8006a50 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d901      	bls.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e062      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a2d8:	4b35      	ldr	r3, [pc, #212]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0f0      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a2e4:	4b31      	ldr	r3, [pc, #196]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d02f      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d028      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a302:	4b2a      	ldr	r3, [pc, #168]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a30a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a30c:	4b29      	ldr	r3, [pc, #164]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a30e:	2201      	movs	r2, #1
 800a310:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a312:	4b28      	ldr	r3, [pc, #160]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a314:	2200      	movs	r2, #0
 800a316:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a318:	4a24      	ldr	r2, [pc, #144]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a31e:	4b23      	ldr	r3, [pc, #140]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	2b01      	cmp	r3, #1
 800a328:	d114      	bne.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a32a:	f7fc fb91 	bl	8006a50 <HAL_GetTick>
 800a32e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a330:	e00a      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a332:	f7fc fb8d 	bl	8006a50 <HAL_GetTick>
 800a336:	4602      	mov	r2, r0
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a340:	4293      	cmp	r3, r2
 800a342:	d901      	bls.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a344:	2303      	movs	r3, #3
 800a346:	e02a      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a348:	4b18      	ldr	r3, [pc, #96]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a34a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d0ee      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a35c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a360:	d10d      	bne.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a362:	4b12      	ldr	r3, [pc, #72]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a376:	490d      	ldr	r1, [pc, #52]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a378:	4313      	orrs	r3, r2
 800a37a:	608b      	str	r3, [r1, #8]
 800a37c:	e005      	b.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a37e:	4b0b      	ldr	r3, [pc, #44]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	4a0a      	ldr	r2, [pc, #40]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a384:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a388:	6093      	str	r3, [r2, #8]
 800a38a:	4b08      	ldr	r3, [pc, #32]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a38c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a396:	4905      	ldr	r1, [pc, #20]	; (800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a398:	4313      	orrs	r3, r2
 800a39a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	42470068 	.word	0x42470068
 800a3ac:	40023800 	.word	0x40023800
 800a3b0:	40007000 	.word	0x40007000
 800a3b4:	42470e40 	.word	0x42470e40

0800a3b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e083      	b.n	800a4d2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	7f5b      	ldrb	r3, [r3, #29]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d105      	bne.n	800a3e0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f00d fada 	bl	8017994 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	22ca      	movs	r2, #202	; 0xca
 800a3ec:	625a      	str	r2, [r3, #36]	; 0x24
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2253      	movs	r2, #83	; 0x53
 800a3f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f944 	bl	800a684 <RTC_EnterInitMode>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d008      	beq.n	800a414 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	22ff      	movs	r2, #255	; 0xff
 800a408:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2204      	movs	r2, #4
 800a40e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e05e      	b.n	800a4d2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	6812      	ldr	r2, [r2, #0]
 800a41e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a426:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6899      	ldr	r1, [r3, #8]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	431a      	orrs	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	431a      	orrs	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	68d2      	ldr	r2, [r2, #12]
 800a44e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6919      	ldr	r1, [r3, #16]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	041a      	lsls	r2, r3, #16
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	430a      	orrs	r2, r1
 800a462:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68da      	ldr	r2, [r3, #12]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a472:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10e      	bne.n	800a4a0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f8d6 	bl	800a634 <HAL_RTC_WaitForSynchro>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d008      	beq.n	800a4a0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	22ff      	movs	r2, #255	; 0xff
 800a494:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2204      	movs	r2, #4
 800a49a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e018      	b.n	800a4d2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a4ae:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	699a      	ldr	r2, [r3, #24]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	22ff      	movs	r2, #255	; 0xff
 800a4c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
  }
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b086      	sub	sp, #24
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a50c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a510:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	0c1b      	lsrs	r3, r3, #16
 800a516:	b2db      	uxtb	r3, r3
 800a518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	0a1b      	lsrs	r3, r3, #8
 800a526:	b2db      	uxtb	r3, r3
 800a528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	b2db      	uxtb	r3, r3
 800a536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	0c1b      	lsrs	r3, r3, #16
 800a544:	b2db      	uxtb	r3, r3
 800a546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d11a      	bne.n	800a58c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 f8be 	bl	800a6dc <RTC_Bcd2ToByte>
 800a560:	4603      	mov	r3, r0
 800a562:	461a      	mov	r2, r3
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	785b      	ldrb	r3, [r3, #1]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 f8b5 	bl	800a6dc <RTC_Bcd2ToByte>
 800a572:	4603      	mov	r3, r0
 800a574:	461a      	mov	r2, r3
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	789b      	ldrb	r3, [r3, #2]
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 f8ac 	bl	800a6dc <RTC_Bcd2ToByte>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b086      	sub	sp, #24
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a5b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	0c1b      	lsrs	r3, r3, #16
 800a5ba:	b2da      	uxtb	r2, r3
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	0a1b      	lsrs	r3, r3, #8
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 031f 	and.w	r3, r3, #31
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	0b5b      	lsrs	r3, r3, #13
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 0307 	and.w	r3, r3, #7
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d11a      	bne.n	800a62a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	78db      	ldrb	r3, [r3, #3]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 f86f 	bl	800a6dc <RTC_Bcd2ToByte>
 800a5fe:	4603      	mov	r3, r0
 800a600:	461a      	mov	r2, r3
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	785b      	ldrb	r3, [r3, #1]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 f866 	bl	800a6dc <RTC_Bcd2ToByte>
 800a610:	4603      	mov	r3, r0
 800a612:	461a      	mov	r2, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	789b      	ldrb	r3, [r3, #2]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 f85d 	bl	800a6dc <RTC_Bcd2ToByte>
 800a622:	4603      	mov	r3, r0
 800a624:	461a      	mov	r2, r3
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68da      	ldr	r2, [r3, #12]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a64e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a650:	f7fc f9fe 	bl	8006a50 <HAL_GetTick>
 800a654:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a656:	e009      	b.n	800a66c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a658:	f7fc f9fa 	bl	8006a50 <HAL_GetTick>
 800a65c:	4602      	mov	r2, r0
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a666:	d901      	bls.n	800a66c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	e007      	b.n	800a67c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	f003 0320 	and.w	r3, r3, #32
 800a676:	2b00      	cmp	r3, #0
 800a678:	d0ee      	beq.n	800a658 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d119      	bne.n	800a6d2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a6a8:	f7fc f9d2 	bl	8006a50 <HAL_GetTick>
 800a6ac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a6ae:	e009      	b.n	800a6c4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a6b0:	f7fc f9ce 	bl	8006a50 <HAL_GetTick>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6be:	d901      	bls.n	800a6c4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e007      	b.n	800a6d4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d0ee      	beq.n	800a6b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	091b      	lsrs	r3, r3, #4
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a6fc:	79fb      	ldrb	r3, [r7, #7]
 800a6fe:	f003 030f 	and.w	r3, r3, #15
 800a702:	b2da      	uxtb	r2, r3
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	b2db      	uxtb	r3, r3
 800a708:	4413      	add	r3, r2
 800a70a:	b2db      	uxtb	r3, r3
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e01d      	b.n	800a766 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d105      	bne.n	800a742 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f00d f93f 	bl	80179c0 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2203      	movs	r2, #3
 800a746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f810 	bl	800a770 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
	...

0800a770 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a770:	b5b0      	push	{r4, r5, r7, lr}
 800a772:	b08e      	sub	sp, #56	; 0x38
 800a774:	af04      	add	r7, sp, #16
 800a776:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a778:	2300      	movs	r3, #0
 800a77a:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a780:	2300      	movs	r3, #0
 800a782:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a784:	2300      	movs	r3, #0
 800a786:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a788:	2300      	movs	r3, #0
 800a78a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a78c:	2300      	movs	r3, #0
 800a78e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a790:	2376      	movs	r3, #118	; 0x76
 800a792:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681d      	ldr	r5, [r3, #0]
 800a798:	466c      	mov	r4, sp
 800a79a:	f107 0318 	add.w	r3, r7, #24
 800a79e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a7a6:	f107 030c 	add.w	r3, r7, #12
 800a7aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f003 faf9 	bl	800dda4 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800a7b2:	4b1c      	ldr	r3, [pc, #112]	; (800a824 <HAL_SD_InitCard+0xb4>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f003 fb3a 	bl	800de36 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a7c2:	4b18      	ldr	r3, [pc, #96]	; (800a824 <HAL_SD_InitCard+0xb4>)
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 800a7c8:	2002      	movs	r0, #2
 800a7ca:	f7fc f94d 	bl	8006a68 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fffe 	bl	800b7d0 <SD_PowerON>
 800a7d4:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00b      	beq.n	800a7f4 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e013      	b.n	800a81c <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 ff22 	bl	800b63e <SD_InitCard>
 800a7fa:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00b      	beq.n	800a81a <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	431a      	orrs	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e000      	b.n	800a81c <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3728      	adds	r7, #40	; 0x28
 800a820:	46bd      	mov	sp, r7
 800a822:	bdb0      	pop	{r4, r5, r7, pc}
 800a824:	422580a0 	.word	0x422580a0

0800a828 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08c      	sub	sp, #48	; 0x30
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a836:	2300      	movs	r3, #0
 800a838:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d107      	bne.n	800a850 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a844:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e0ad      	b.n	800a9ac <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b01      	cmp	r3, #1
 800a85a:	f040 80a6 	bne.w	800a9aa <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	441a      	add	r2, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a86e:	429a      	cmp	r2, r3
 800a870:	d907      	bls.n	800a882 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a876:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e094      	b.n	800a9ac <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2203      	movs	r2, #3
 800a886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2200      	movs	r2, #0
 800a890:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	6812      	ldr	r2, [r2, #0]
 800a89c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a8a0:	f043 0302 	orr.w	r3, r3, #2
 800a8a4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8aa:	4a42      	ldr	r2, [pc, #264]	; (800a9b4 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800a8ac:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b2:	4a41      	ldr	r2, [pc, #260]	; (800a9b8 <HAL_SD_ReadBlocks_DMA+0x190>)
 800a8b4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3380      	adds	r3, #128	; 0x80
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	025b      	lsls	r3, r3, #9
 800a8d0:	089b      	lsrs	r3, r3, #2
 800a8d2:	f7fc faab 	bl	8006e2c <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a8d6:	4b39      	ldr	r3, [pc, #228]	; (800a9bc <HAL_SD_ReadBlocks_DMA+0x194>)
 800a8d8:	2201      	movs	r2, #1
 800a8da:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d002      	beq.n	800a8ea <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	025b      	lsls	r3, r3, #9
 800a8e8:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a8ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ee:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	025b      	lsls	r3, r3, #9
 800a8f4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a8f6:	2390      	movs	r3, #144	; 0x90
 800a8f8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a902:	2301      	movs	r3, #1
 800a904:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f107 0214 	add.w	r2, r7, #20
 800a90e:	4611      	mov	r1, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f003 faf8 	bl	800df06 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a91e:	4618      	mov	r0, r3
 800a920:	f003 fb1d 	bl	800df5e <SDMMC_CmdBlockLength>
 800a924:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d010      	beq.n	800a94e <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a934:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93c:	431a      	orrs	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e02e      	b.n	800a9ac <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d90a      	bls.n	800a96a <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2282      	movs	r2, #130	; 0x82
 800a958:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	4618      	mov	r0, r3
 800a962:	f003 fb44 	bl	800dfee <SDMMC_CmdReadMultiBlock>
 800a966:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a968:	e009      	b.n	800a97e <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2281      	movs	r2, #129	; 0x81
 800a96e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6879      	ldr	r1, [r7, #4]
 800a976:	4618      	mov	r0, r3
 800a978:	f003 fb15 	bl	800dfa6 <SDMMC_CmdReadSingleBlock>
 800a97c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a980:	2b00      	cmp	r3, #0
 800a982:	d010      	beq.n	800a9a6 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a98c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	431a      	orrs	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e002      	b.n	800a9ac <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	e000      	b.n	800a9ac <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800a9aa:	2302      	movs	r3, #2
  }
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3730      	adds	r7, #48	; 0x30
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	0800b44f 	.word	0x0800b44f
 800a9b8:	0800b4bd 	.word	0x0800b4bd
 800a9bc:	4225858c 	.word	0x4225858c

0800a9c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b08c      	sub	sp, #48	; 0x30
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d107      	bne.n	800a9e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e0ad      	b.n	800ab44 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	f040 80a6 	bne.w	800ab42 <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	441a      	add	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d907      	bls.n	800aa1a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e094      	b.n	800ab44 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2203      	movs	r2, #3
 800aa1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2200      	movs	r2, #0
 800aa28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	6812      	ldr	r2, [r2, #0]
 800aa34:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800aa38:	f043 0302 	orr.w	r3, r3, #2
 800aa3c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa42:	4a42      	ldr	r2, [pc, #264]	; (800ab4c <HAL_SD_WriteBlocks_DMA+0x18c>)
 800aa44:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4a:	4a41      	ldr	r2, [pc, #260]	; (800ab50 <HAL_SD_WriteBlocks_DMA+0x190>)
 800aa4c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa52:	2200      	movs	r2, #0
 800aa54:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d002      	beq.n	800aa64 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	025b      	lsls	r3, r3, #9
 800aa62:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f003 fa76 	bl	800df5e <SDMMC_CmdBlockLength>
 800aa72:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d010      	beq.n	800aa9c <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aa82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e053      	b.n	800ab44 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d90a      	bls.n	800aab8 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	22a0      	movs	r2, #160	; 0xa0
 800aaa6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f003 fae5 	bl	800e07e <SDMMC_CmdWriteMultiBlock>
 800aab4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800aab6:	e009      	b.n	800aacc <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2290      	movs	r2, #144	; 0x90
 800aabc:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f003 fab6 	bl	800e036 <SDMMC_CmdWriteSingleBlock>
 800aaca:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800aacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d010      	beq.n	800aaf4 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aada:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae2:	431a      	orrs	r2, r3
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e027      	b.n	800ab44 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800aaf4:	4b17      	ldr	r3, [pc, #92]	; (800ab54 <HAL_SD_WriteBlocks_DMA+0x194>)
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800aafe:	68b9      	ldr	r1, [r7, #8]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3380      	adds	r3, #128	; 0x80
 800ab06:	461a      	mov	r2, r3
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	025b      	lsls	r3, r3, #9
 800ab0c:	089b      	lsrs	r3, r3, #2
 800ab0e:	f7fc f98d 	bl	8006e2c <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab12:	f04f 33ff 	mov.w	r3, #4294967295
 800ab16:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	025b      	lsls	r3, r3, #9
 800ab1c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ab1e:	2390      	movs	r3, #144	; 0x90
 800ab20:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ab22:	2300      	movs	r3, #0
 800ab24:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f107 0214 	add.w	r2, r7, #20
 800ab36:	4611      	mov	r1, r2
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f003 f9e4 	bl	800df06 <SDIO_ConfigData>
    
    return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e000      	b.n	800ab44 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800ab42:	2302      	movs	r3, #2
  }
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3730      	adds	r7, #48	; 0x30
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	0800b425 	.word	0x0800b425
 800ab50:	0800b4bd 	.word	0x0800b4bd
 800ab54:	4225858c 	.word	0x4225858c

0800ab58 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ab60:	2300      	movs	r3, #0
 800ab62:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 808d 	beq.w	800ac8e <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab7c:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	6812      	ldr	r2, [r2, #0]
 800ab88:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800ab8c:	f023 0302 	bic.w	r3, r3, #2
 800ab90:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab96:	f003 0308 	and.w	r3, r3, #8
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d03a      	beq.n	800ac14 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba2:	f003 0302 	and.w	r3, r3, #2
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d105      	bne.n	800abb6 <HAL_SD_IRQHandler+0x5e>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abae:	f003 0320 	and.w	r3, r3, #32
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d011      	beq.n	800abda <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4618      	mov	r0, r3
 800abbc:	f003 fa84 	bl	800e0c8 <SDMMC_CmdStopTransfer>
 800abc0:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d008      	beq.n	800abda <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	431a      	orrs	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f925 	bl	800ae24 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800abe2:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf0:	f003 0301 	and.w	r3, r3, #1
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d105      	bne.n	800ac04 <HAL_SD_IRQHandler+0xac>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfc:	f003 0302 	and.w	r3, r3, #2
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d003      	beq.n	800ac0c <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f009 f8b5 	bl	8013d74 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800ac0a:	e103      	b.n	800ae14 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f009 f8a7 	bl	8013d60 <HAL_SD_TxCpltCallback>
}
 800ac12:	e0ff      	b.n	800ae14 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 80f9 	beq.w	800ae14 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac26:	f003 0320 	and.w	r3, r3, #32
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d011      	beq.n	800ac52 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f003 fa48 	bl	800e0c8 <SDMMC_CmdStopTransfer>
 800ac38:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d008      	beq.n	800ac52 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	431a      	orrs	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f8e9 	bl	800ae24 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac56:	f003 0301 	and.w	r3, r3, #1
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f040 80da 	bne.w	800ae14 <HAL_SD_IRQHandler+0x2bc>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac64:	f003 0302 	and.w	r3, r3, #2
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f040 80d3 	bne.w	800ae14 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 0208 	bic.w	r2, r2, #8
 800ac7c:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f009 f86a 	bl	8013d60 <HAL_SD_TxCpltCallback>
}
 800ac8c:	e0c2      	b.n	800ae14 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d008      	beq.n	800acae <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aca4:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 ffef 	bl	800bc8a <SD_Write_IT>
}
 800acac:	e0b2      	b.n	800ae14 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d008      	beq.n	800acce <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800acc4:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 ffb7 	bl	800bc3a <SD_Read_IT>
}
 800accc:	e0a2      	b.n	800ae14 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acd4:	f240 233a 	movw	r3, #570	; 0x23a
 800acd8:	4013      	ands	r3, r2
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 809a 	beq.w	800ae14 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d005      	beq.n	800acfa <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf2:	f043 0202 	orr.w	r2, r3, #2
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad00:	f003 0308 	and.w	r3, r3, #8
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d005      	beq.n	800ad14 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0c:	f043 0208 	orr.w	r2, r3, #8
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad1a:	f003 0320 	and.w	r3, r3, #32
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d005      	beq.n	800ad2e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	f043 0220 	orr.w	r2, r3, #32
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad34:	f003 0310 	and.w	r3, r3, #16
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d005      	beq.n	800ad48 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad40:	f043 0210 	orr.w	r2, r3, #16
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d005      	beq.n	800ad62 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5a:	f043 0208 	orr.w	r2, r3, #8
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ad6a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	6812      	ldr	r2, [r2, #0]
 800ad76:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800ad7a:	f023 0302 	bic.w	r3, r3, #2
 800ad7e:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d036      	beq.n	800adfa <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d011      	beq.n	800adb8 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad98:	4a20      	ldr	r2, [pc, #128]	; (800ae1c <HAL_SD_IRQHandler+0x2c4>)
 800ad9a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fc f8a3 	bl	8006eec <HAL_DMA_Abort_IT>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d033      	beq.n	800ae14 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 fbc8 	bl	800b546 <SD_DMATxAbort>
}
 800adb6:	e02d      	b.n	800ae14 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d011      	beq.n	800ade4 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc4:	4a16      	ldr	r2, [pc, #88]	; (800ae20 <HAL_SD_IRQHandler+0x2c8>)
 800adc6:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fc f88d 	bl	8006eec <HAL_DMA_Abort_IT>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d01d      	beq.n	800ae14 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800addc:	4618      	mov	r0, r3
 800adde:	f000 fbf0 	bl	800b5c2 <SD_DMARxAbort>
}
 800ade2:	e017      	b.n	800ae14 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f008 ffaa 	bl	8013d4c <HAL_SD_AbortCallback>
}
 800adf8:	e00c      	b.n	800ae14 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adfe:	f003 0308 	and.w	r3, r3, #8
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d006      	beq.n	800ae14 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f808 	bl	800ae24 <HAL_SD_ErrorCallback>
}
 800ae14:	bf00      	nop
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	0800b547 	.word	0x0800b547
 800ae20:	0800b5c3 	.word	0x0800b5c3

0800ae24 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800ae42:	2300      	movs	r3, #0
 800ae44:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae4a:	0e1b      	lsrs	r3, r3, #24
 800ae4c:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	099b      	lsrs	r3, r3, #6
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	f003 0303 	and.w	r3, r3, #3
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	089b      	lsrs	r3, r3, #2
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	f003 030f 	and.w	r3, r3, #15
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	f003 0303 	and.w	r3, r3, #3
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae80:	0c1b      	lsrs	r3, r3, #16
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae92:	0a1b      	lsrs	r3, r3, #8
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aeb4:	0e1b      	lsrs	r3, r3, #24
 800aeb6:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	011b      	lsls	r3, r3, #4
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aec8:	0c1b      	lsrs	r3, r3, #16
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	88db      	ldrh	r3, [r3, #6]
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	091b      	lsrs	r3, r3, #4
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	f003 030f 	and.w	r3, r3, #15
 800aede:	b29b      	uxth	r3, r3
 800aee0:	4313      	orrs	r3, r2
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	f003 030f 	and.w	r3, r3, #15
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aefa:	0a1b      	lsrs	r3, r3, #8
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	09db      	lsrs	r3, r3, #7
 800af04:	b2db      	uxtb	r3, r3
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	099b      	lsrs	r3, r3, #6
 800af14:	b2db      	uxtb	r3, r3
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	095b      	lsrs	r3, r3, #5
 800af24:	b2db      	uxtb	r3, r3
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	091b      	lsrs	r3, r3, #4
 800af34:	b2db      	uxtb	r3, r3
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	2200      	movs	r2, #0
 800af44:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f040 8087 	bne.w	800b05e <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	029b      	lsls	r3, r3, #10
 800af54:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af60:	b2db      	uxtb	r3, r3
 800af62:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	691a      	ldr	r2, [r3, #16]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	431a      	orrs	r2, r3
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af76:	0e1b      	lsrs	r3, r3, #24
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	691a      	ldr	r2, [r3, #16]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	099b      	lsrs	r3, r3, #6
 800af84:	f003 0303 	and.w	r3, r3, #3
 800af88:	431a      	orrs	r2, r3
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	08db      	lsrs	r3, r3, #3
 800af92:	b2db      	uxtb	r3, r3
 800af94:	f003 0307 	and.w	r3, r3, #7
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	f003 0307 	and.w	r3, r3, #7
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afb0:	0c1b      	lsrs	r3, r3, #16
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	095b      	lsrs	r3, r3, #5
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	f003 0307 	and.w	r3, r3, #7
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	089b      	lsrs	r3, r3, #2
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	f003 0307 	and.w	r3, r3, #7
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	005b      	lsls	r3, r3, #1
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	f003 0306 	and.w	r3, r3, #6
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afec:	0a1b      	lsrs	r3, r3, #8
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	7e1b      	ldrb	r3, [r3, #24]
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	09db      	lsrs	r3, r3, #7
 800affc:	b2db      	uxtb	r3, r3
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	b2db      	uxtb	r3, r3
 800b004:	4313      	orrs	r3, r2
 800b006:	b2da      	uxtb	r2, r3
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	1c5a      	adds	r2, r3, #1
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	7e1b      	ldrb	r3, [r3, #24]
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	3302      	adds	r3, #2
 800b01e:	2201      	movs	r2, #1
 800b020:	fa02 f303 	lsl.w	r3, r2, r3
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b028:	fb02 f203 	mul.w	r2, r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	7a1b      	ldrb	r3, [r3, #8]
 800b034:	b2db      	uxtb	r3, r3
 800b036:	461a      	mov	r2, r3
 800b038:	2301      	movs	r3, #1
 800b03a:	fa03 f202 	lsl.w	r2, r3, r2
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b04a:	0a52      	lsrs	r2, r2, #9
 800b04c:	fb02 f203 	mul.w	r2, r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b05a:	661a      	str	r2, [r3, #96]	; 0x60
 800b05c:	e04d      	b.n	800b0fa <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b062:	2b01      	cmp	r3, #1
 800b064:	d138      	bne.n	800b0d8 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	041b      	lsls	r3, r3, #16
 800b072:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b07e:	0e1b      	lsrs	r3, r3, #24
 800b080:	b2db      	uxtb	r3, r3
 800b082:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	691a      	ldr	r2, [r3, #16]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	021b      	lsls	r3, r3, #8
 800b08c:	431a      	orrs	r2, r3
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b096:	0c1b      	lsrs	r3, r3, #16
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	691a      	ldr	r2, [r3, #16]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0ac:	0a1b      	lsrs	r3, r3, #8
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	029a      	lsls	r2, r3, #10
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	655a      	str	r2, [r3, #84]	; 0x54
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0cc:	659a      	str	r2, [r3, #88]	; 0x58
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	661a      	str	r2, [r3, #96]	; 0x60
 800b0d6:	e010      	b.n	800b0fa <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b0e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e0c1      	b.n	800b27e <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	099b      	lsrs	r3, r3, #6
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	b2da      	uxtb	r2, r3
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	005b      	lsls	r3, r3, #1
 800b110:	b2db      	uxtb	r3, r3
 800b112:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b116:	b2da      	uxtb	r2, r3
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b120:	b2db      	uxtb	r3, r3
 800b122:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	7e9b      	ldrb	r3, [r3, #26]
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	09db      	lsrs	r3, r3, #7
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	f003 0301 	and.w	r3, r3, #1
 800b134:	b2db      	uxtb	r3, r3
 800b136:	4313      	orrs	r3, r2
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	b2db      	uxtb	r3, r3
 800b142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b146:	b2da      	uxtb	r2, r3
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b150:	0e1b      	lsrs	r3, r3, #24
 800b152:	b2db      	uxtb	r3, r3
 800b154:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	09db      	lsrs	r3, r3, #7
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	f003 0301 	and.w	r3, r3, #1
 800b160:	b2da      	uxtb	r2, r3
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	095b      	lsrs	r3, r3, #5
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	f003 0303 	and.w	r3, r3, #3
 800b170:	b2da      	uxtb	r2, r3
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	089b      	lsrs	r3, r3, #2
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	f003 0307 	and.w	r3, r3, #7
 800b180:	b2da      	uxtb	r2, r3
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	f003 030c 	and.w	r3, r3, #12
 800b192:	b2da      	uxtb	r2, r3
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b19c:	0c1b      	lsrs	r3, r3, #16
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	7fdb      	ldrb	r3, [r3, #31]
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	099b      	lsrs	r3, r3, #6
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	f003 0303 	and.w	r3, r3, #3
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	095b      	lsrs	r3, r3, #5
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	f003 0301 	and.w	r3, r3, #1
 800b1de:	b2da      	uxtb	r2, r3
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ea:	0a1b      	lsrs	r3, r3, #8
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	09db      	lsrs	r3, r3, #7
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	099b      	lsrs	r3, r3, #6
 800b206:	b2db      	uxtb	r3, r3
 800b208:	f003 0301 	and.w	r3, r3, #1
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	095b      	lsrs	r3, r3, #5
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	b2da      	uxtb	r2, r3
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	091b      	lsrs	r3, r3, #4
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	b2da      	uxtb	r2, r3
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	089b      	lsrs	r3, r3, #2
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	f003 0303 	and.w	r3, r3, #3
 800b242:	b2da      	uxtb	r2, r3
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	f003 0303 	and.w	r3, r3, #3
 800b252:	b2da      	uxtb	r2, r3
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	085b      	lsrs	r3, r3, #1
 800b266:	b2db      	uxtb	r3, r3
 800b268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3714      	adds	r7, #20
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b083      	sub	sp, #12
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b2e2:	b5b0      	push	{r4, r5, r7, lr}
 800b2e4:	b08e      	sub	sp, #56	; 0x38
 800b2e6:	af04      	add	r7, sp, #16
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2203      	movs	r2, #3
 800b2f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2fc:	2b03      	cmp	r3, #3
 800b2fe:	d02e      	beq.n	800b35e <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b306:	d106      	bne.n	800b316 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	639a      	str	r2, [r3, #56]	; 0x38
 800b314:	e029      	b.n	800b36a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b31c:	d10a      	bne.n	800b334 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fb28 	bl	800b974 <SD_WideBus_Enable>
 800b324:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	431a      	orrs	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	639a      	str	r2, [r3, #56]	; 0x38
 800b332:	e01a      	b.n	800b36a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10a      	bne.n	800b350 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fb67 	bl	800ba0e <SD_WideBus_Disable>
 800b340:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	431a      	orrs	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	639a      	str	r2, [r3, #56]	; 0x38
 800b34e:	e00c      	b.n	800b36a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b354:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	639a      	str	r2, [r3, #56]	; 0x38
 800b35c:	e005      	b.n	800b36a <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b362:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00a      	beq.n	800b388 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b37a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	e024      	b.n	800b3d2 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681d      	ldr	r5, [r3, #0]
 800b3ae:	466c      	mov	r4, sp
 800b3b0:	f107 0318 	add.w	r3, r7, #24
 800b3b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b3b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b3bc:	f107 030c 	add.w	r3, r7, #12
 800b3c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f002 fcee 	bl	800dda4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3728      	adds	r7, #40	; 0x28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bdb0      	pop	{r4, r5, r7, pc}

0800b3da <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b086      	sub	sp, #24
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800b3e2:	2304      	movs	r3, #4
 800b3e4:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800b3ee:	f107 030c 	add.w	r3, r7, #12
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fa93 	bl	800b920 <SD_SendStatus>
 800b3fa:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	431a      	orrs	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	0a5b      	lsrs	r3, r3, #9
 800b412:	b2db      	uxtb	r3, r3
 800b414:	f003 030f 	and.w	r3, r3, #15
 800b418:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800b41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b430:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b440:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b442:	bf00      	nop
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b45c:	2300      	movs	r3, #0
 800b45e:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b464:	2b82      	cmp	r3, #130	; 0x82
 800b466:	d111      	bne.n	800b48c <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f002 fe2b 	bl	800e0c8 <SDMMC_CmdStopTransfer>
 800b472:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d008      	beq.n	800b48c <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	431a      	orrs	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f7ff fccc 	bl	800ae24 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f022 0208 	bic.w	r2, r2, #8
 800b49a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b4a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f008 fc60 	bl	8013d74 <HAL_SD_RxCpltCallback>
#endif
}
 800b4b4:	bf00      	nop
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d004      	beq.n	800b4de <SD_DMAError+0x22>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d12c      	bne.n	800b538 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b4e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b4f6:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f7ff ff68 	bl	800b3da <HAL_SD_GetCardState>
 800b50a:	4603      	mov	r3, r0
 800b50c:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b50e:	7afb      	ldrb	r3, [r7, #11]
 800b510:	2b06      	cmp	r3, #6
 800b512:	d002      	beq.n	800b51a <SD_DMAError+0x5e>
 800b514:	7afb      	ldrb	r3, [r7, #11]
 800b516:	2b05      	cmp	r3, #5
 800b518:	d10a      	bne.n	800b530 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4618      	mov	r0, r3
 800b520:	f002 fdd2 	bl	800e0c8 <SDMMC_CmdStopTransfer>
 800b524:	4602      	mov	r2, r0
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52a:	431a      	orrs	r2, r3
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f7ff fc73 	bl	800ae24 <HAL_SD_ErrorCallback>
#endif
}
 800b53e:	bf00      	nop
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b084      	sub	sp, #16
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b552:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b566:	2b00      	cmp	r3, #0
 800b568:	d127      	bne.n	800b5ba <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff ff35 	bl	800b3da <HAL_SD_GetCardState>
 800b570:	4603      	mov	r3, r0
 800b572:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2201      	movs	r2, #1
 800b57e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b582:	7afb      	ldrb	r3, [r7, #11]
 800b584:	2b06      	cmp	r3, #6
 800b586:	d002      	beq.n	800b58e <SD_DMATxAbort+0x48>
 800b588:	7afb      	ldrb	r3, [r7, #11]
 800b58a:	2b05      	cmp	r3, #5
 800b58c:	d115      	bne.n	800b5ba <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4618      	mov	r0, r3
 800b594:	f002 fd98 	bl	800e0c8 <SDMMC_CmdStopTransfer>
 800b598:	4602      	mov	r2, r0
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d003      	beq.n	800b5b4 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f008 fbcd 	bl	8013d4c <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800b5b2:	e002      	b.n	800b5ba <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f7ff fc35 	bl	800ae24 <HAL_SD_ErrorCallback>
}
 800b5ba:	bf00      	nop
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b084      	sub	sp, #16
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ce:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d127      	bne.n	800b636 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f7ff fef7 	bl	800b3da <HAL_SD_GetCardState>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b5fe:	7afb      	ldrb	r3, [r7, #11]
 800b600:	2b06      	cmp	r3, #6
 800b602:	d002      	beq.n	800b60a <SD_DMARxAbort+0x48>
 800b604:	7afb      	ldrb	r3, [r7, #11]
 800b606:	2b05      	cmp	r3, #5
 800b608:	d115      	bne.n	800b636 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4618      	mov	r0, r3
 800b610:	f002 fd5a 	bl	800e0c8 <SDMMC_CmdStopTransfer>
 800b614:	4602      	mov	r2, r0
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b61a:	431a      	orrs	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f008 fb8f 	bl	8013d4c <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800b62e:	e002      	b.n	800b636 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f7ff fbf7 	bl	800ae24 <HAL_SD_ErrorCallback>
}
 800b636:	bf00      	nop
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b63e:	b5b0      	push	{r4, r5, r7, lr}
 800b640:	b094      	sub	sp, #80	; 0x50
 800b642:	af04      	add	r7, sp, #16
 800b644:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b646:	2300      	movs	r3, #0
 800b648:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800b64a:	2301      	movs	r3, #1
 800b64c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4618      	mov	r0, r3
 800b654:	f002 fbfd 	bl	800de52 <SDIO_GetPowerState>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d102      	bne.n	800b664 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b65e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b662:	e0b1      	b.n	800b7c8 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b668:	2b03      	cmp	r3, #3
 800b66a:	d02f      	beq.n	800b6cc <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4618      	mov	r0, r3
 800b672:	f002 fe43 	bl	800e2fc <SDMMC_CmdSendCID>
 800b676:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <SD_InitCard+0x44>
    {
      return errorstate;
 800b67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b680:	e0a2      	b.n	800b7c8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2100      	movs	r1, #0
 800b688:	4618      	mov	r0, r3
 800b68a:	f002 fc27 	bl	800dedc <SDIO_GetResponse>
 800b68e:	4602      	mov	r2, r0
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2104      	movs	r1, #4
 800b69a:	4618      	mov	r0, r3
 800b69c:	f002 fc1e 	bl	800dedc <SDIO_GetResponse>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2108      	movs	r1, #8
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f002 fc15 	bl	800dedc <SDIO_GetResponse>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	210c      	movs	r1, #12
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f002 fc0c 	bl	800dedc <SDIO_GetResponse>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6d0:	2b03      	cmp	r3, #3
 800b6d2:	d00d      	beq.n	800b6f0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f107 020e 	add.w	r2, r7, #14
 800b6dc:	4611      	mov	r1, r2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f002 fe4d 	bl	800e37e <SDMMC_CmdSetRelAdd>
 800b6e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d001      	beq.n	800b6f0 <SD_InitCard+0xb2>
    {
      return errorstate;
 800b6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ee:	e06b      	b.n	800b7c8 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6f4:	2b03      	cmp	r3, #3
 800b6f6:	d036      	beq.n	800b766 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b6f8:	89fb      	ldrh	r3, [r7, #14]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b708:	041b      	lsls	r3, r3, #16
 800b70a:	4619      	mov	r1, r3
 800b70c:	4610      	mov	r0, r2
 800b70e:	f002 fe15 	bl	800e33c <SDMMC_CmdSendCSD>
 800b712:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <SD_InitCard+0xe0>
    {
      return errorstate;
 800b71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b71c:	e054      	b.n	800b7c8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2100      	movs	r1, #0
 800b724:	4618      	mov	r0, r3
 800b726:	f002 fbd9 	bl	800dedc <SDIO_GetResponse>
 800b72a:	4602      	mov	r2, r0
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2104      	movs	r1, #4
 800b736:	4618      	mov	r0, r3
 800b738:	f002 fbd0 	bl	800dedc <SDIO_GetResponse>
 800b73c:	4602      	mov	r2, r0
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2108      	movs	r1, #8
 800b748:	4618      	mov	r0, r3
 800b74a:	f002 fbc7 	bl	800dedc <SDIO_GetResponse>
 800b74e:	4602      	mov	r2, r0
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	210c      	movs	r1, #12
 800b75a:	4618      	mov	r0, r3
 800b75c:	f002 fbbe 	bl	800dedc <SDIO_GetResponse>
 800b760:	4602      	mov	r2, r0
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2104      	movs	r1, #4
 800b76c:	4618      	mov	r0, r3
 800b76e:	f002 fbb5 	bl	800dedc <SDIO_GetResponse>
 800b772:	4603      	mov	r3, r0
 800b774:	0d1a      	lsrs	r2, r3, #20
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800b77a:	f107 0310 	add.w	r3, r7, #16
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7ff fb59 	bl	800ae38 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6819      	ldr	r1, [r3, #0]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b78e:	041b      	lsls	r3, r3, #16
 800b790:	f04f 0400 	mov.w	r4, #0
 800b794:	461a      	mov	r2, r3
 800b796:	4623      	mov	r3, r4
 800b798:	4608      	mov	r0, r1
 800b79a:	f002 fcb9 	bl	800e110 <SDMMC_CmdSelDesel>
 800b79e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <SD_InitCard+0x16c>
  {
    return errorstate;
 800b7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a8:	e00e      	b.n	800b7c8 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681d      	ldr	r5, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	466c      	mov	r4, sp
 800b7b2:	f103 0210 	add.w	r2, r3, #16
 800b7b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800b7b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b7bc:	3304      	adds	r3, #4
 800b7be:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f002 faef 	bl	800dda4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3740      	adds	r7, #64	; 0x40
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bdb0      	pop	{r4, r5, r7, pc}

0800b7d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f002 fcb4 	bl	800e15a <SDMMC_CmdGoIdleState>
 800b7f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <SD_PowerON+0x2e>
  {
    return errorstate;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	e08c      	b.n	800b918 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4618      	mov	r0, r3
 800b804:	f002 fcc9 	bl	800e19a <SDMMC_CmdOperCond>
 800b808:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d03d      	beq.n	800b88c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800b816:	e032      	b.n	800b87e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	60ba      	str	r2, [r7, #8]
 800b81e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b822:	4293      	cmp	r3, r2
 800b824:	d102      	bne.n	800b82c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b82a:	e075      	b.n	800b918 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2100      	movs	r1, #0
 800b832:	4618      	mov	r0, r3
 800b834:	f002 fcd2 	bl	800e1dc <SDMMC_CmdAppCommand>
 800b838:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b840:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b844:	e068      	b.n	800b918 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2100      	movs	r1, #0
 800b84c:	4618      	mov	r0, r3
 800b84e:	f002 fce9 	bl	800e224 <SDMMC_CmdAppOperCommand>
 800b852:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d002      	beq.n	800b860 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b85a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b85e:	e05b      	b.n	800b918 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2100      	movs	r1, #0
 800b866:	4618      	mov	r0, r3
 800b868:	f002 fb38 	bl	800dedc <SDIO_GetResponse>
 800b86c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	0fdb      	lsrs	r3, r3, #31
 800b872:	2b01      	cmp	r3, #1
 800b874:	d101      	bne.n	800b87a <SD_PowerON+0xaa>
 800b876:	2301      	movs	r3, #1
 800b878:	e000      	b.n	800b87c <SD_PowerON+0xac>
 800b87a:	2300      	movs	r3, #0
 800b87c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d0c9      	beq.n	800b818 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	645a      	str	r2, [r3, #68]	; 0x44
 800b88a:	e044      	b.n	800b916 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800b892:	e031      	b.n	800b8f8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	1c5a      	adds	r2, r3, #1
 800b898:	60ba      	str	r2, [r7, #8]
 800b89a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d102      	bne.n	800b8a8 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b8a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8a6:	e037      	b.n	800b918 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f002 fc94 	bl	800e1dc <SDMMC_CmdAppCommand>
 800b8b4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d001      	beq.n	800b8c0 <SD_PowerON+0xf0>
      {
        return errorstate;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	e02b      	b.n	800b918 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f002 fcab 	bl	800e224 <SDMMC_CmdAppOperCommand>
 800b8ce:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d001      	beq.n	800b8da <SD_PowerON+0x10a>
      {
        return errorstate;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	e01e      	b.n	800b918 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2100      	movs	r1, #0
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f002 fafb 	bl	800dedc <SDIO_GetResponse>
 800b8e6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	0fdb      	lsrs	r3, r3, #31
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d101      	bne.n	800b8f4 <SD_PowerON+0x124>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e000      	b.n	800b8f6 <SD_PowerON+0x126>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0ca      	beq.n	800b894 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	645a      	str	r2, [r3, #68]	; 0x44
 800b90e:	e002      	b.n	800b916 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3718      	adds	r7, #24
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800b934:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b938:	e018      	b.n	800b96c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b942:	041b      	lsls	r3, r3, #16
 800b944:	4619      	mov	r1, r3
 800b946:	4610      	mov	r0, r2
 800b948:	f002 fd3c 	bl	800e3c4 <SDMMC_CmdSendStatus>
 800b94c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <SD_SendStatus+0x38>
  {
    return errorstate;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	e009      	b.n	800b96c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2100      	movs	r1, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f002 fabc 	bl	800dedc <SDIO_GetResponse>
 800b964:	4602      	mov	r2, r0
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b97c:	2300      	movs	r3, #0
 800b97e:	60fb      	str	r3, [r7, #12]
 800b980:	2300      	movs	r3, #0
 800b982:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b984:	2300      	movs	r3, #0
 800b986:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2100      	movs	r1, #0
 800b98e:	4618      	mov	r0, r3
 800b990:	f002 faa4 	bl	800dedc <SDIO_GetResponse>
 800b994:	4603      	mov	r3, r0
 800b996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b99a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b99e:	d102      	bne.n	800b9a6 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b9a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9a4:	e02f      	b.n	800ba06 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b9a6:	f107 030c 	add.w	r3, r7, #12
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 f87b 	bl	800baa8 <SD_FindSCR>
 800b9b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	e023      	b.n	800ba06 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d01c      	beq.n	800ba02 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d0:	041b      	lsls	r3, r3, #16
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	f002 fc01 	bl	800e1dc <SDMMC_CmdAppCommand>
 800b9da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d001      	beq.n	800b9e6 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	e00f      	b.n	800ba06 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2102      	movs	r1, #2
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f002 fc3e 	bl	800e26e <SDMMC_CmdBusWidth>
 800b9f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	e003      	b.n	800ba06 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	e001      	b.n	800ba06 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ba02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3718      	adds	r7, #24
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b086      	sub	sp, #24
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ba16:	2300      	movs	r3, #0
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2100      	movs	r1, #0
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f002 fa57 	bl	800dedc <SDIO_GetResponse>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba38:	d102      	bne.n	800ba40 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba3e:	e02f      	b.n	800baa0 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ba40:	f107 030c 	add.w	r3, r7, #12
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 f82e 	bl	800baa8 <SD_FindSCR>
 800ba4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	e023      	b.n	800baa0 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d01c      	beq.n	800ba9c <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba6a:	041b      	lsls	r3, r3, #16
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	4610      	mov	r0, r2
 800ba70:	f002 fbb4 	bl	800e1dc <SDMMC_CmdAppCommand>
 800ba74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	e00f      	b.n	800baa0 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2100      	movs	r1, #0
 800ba86:	4618      	mov	r0, r3
 800ba88:	f002 fbf1 	bl	800e26e <SDMMC_CmdBusWidth>
 800ba8c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	e003      	b.n	800baa0 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e001      	b.n	800baa0 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ba9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3718      	adds	r7, #24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800baa8:	b590      	push	{r4, r7, lr}
 800baaa:	b08f      	sub	sp, #60	; 0x3c
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800bab2:	2300      	movs	r3, #0
 800bab4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800bab6:	f7fa ffcb 	bl	8006a50 <HAL_GetTick>
 800baba:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800babc:	2300      	movs	r3, #0
 800babe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bac0:	2300      	movs	r3, #0
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	2300      	movs	r3, #0
 800bac6:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2108      	movs	r1, #8
 800bace:	4618      	mov	r0, r3
 800bad0:	f002 fa45 	bl	800df5e <SDMMC_CmdBlockLength>
 800bad4:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800bad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800badc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bade:	e0a8      	b.n	800bc32 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae8:	041b      	lsls	r3, r3, #16
 800baea:	4619      	mov	r1, r3
 800baec:	4610      	mov	r0, r2
 800baee:	f002 fb75 	bl	800e1dc <SDMMC_CmdAppCommand>
 800baf2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800baf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <SD_FindSCR+0x56>
  {
    return errorstate;
 800bafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafc:	e099      	b.n	800bc32 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bafe:	f04f 33ff 	mov.w	r3, #4294967295
 800bb02:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800bb04:	2308      	movs	r3, #8
 800bb06:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bb08:	2330      	movs	r3, #48	; 0x30
 800bb0a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bb10:	2300      	movs	r3, #0
 800bb12:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bb14:	2301      	movs	r3, #1
 800bb16:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f107 0214 	add.w	r2, r7, #20
 800bb20:	4611      	mov	r1, r2
 800bb22:	4618      	mov	r0, r3
 800bb24:	f002 f9ef 	bl	800df06 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f002 fbc2 	bl	800e2b6 <SDMMC_CmdSendSCR>
 800bb32:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800bb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d022      	beq.n	800bb80 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	e079      	b.n	800bc32 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00e      	beq.n	800bb6a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6819      	ldr	r1, [r3, #0]
 800bb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	f107 020c 	add.w	r2, r7, #12
 800bb58:	18d4      	adds	r4, r2, r3
 800bb5a:	4608      	mov	r0, r1
 800bb5c:	f002 f94d 	bl	800ddfa <SDIO_ReadFIFO>
 800bb60:	4603      	mov	r3, r0
 800bb62:	6023      	str	r3, [r4, #0]
      index++;
 800bb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb66:	3301      	adds	r3, #1
 800bb68:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bb6a:	f7fa ff71 	bl	8006a50 <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb78:	d102      	bne.n	800bb80 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bb7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb7e:	e058      	b.n	800bc32 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb86:	f240 432a 	movw	r3, #1066	; 0x42a
 800bb8a:	4013      	ands	r3, r2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0d6      	beq.n	800bb3e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb96:	f003 0308 	and.w	r3, r3, #8
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d005      	beq.n	800bbaa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2208      	movs	r2, #8
 800bba4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bba6:	2308      	movs	r3, #8
 800bba8:	e043      	b.n	800bc32 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbb0:	f003 0302 	and.w	r3, r3, #2
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d005      	beq.n	800bbc4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2202      	movs	r2, #2
 800bbbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	e036      	b.n	800bc32 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbca:	f003 0320 	and.w	r3, r3, #32
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d005      	beq.n	800bbde <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800bbda:	2320      	movs	r3, #32
 800bbdc:	e029      	b.n	800bc32 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800bbe6:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	061a      	lsls	r2, r3, #24
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	021b      	lsls	r3, r3, #8
 800bbf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbf4:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	0a1b      	lsrs	r3, r3, #8
 800bbfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bbfe:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800bc0a:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bc0c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	061a      	lsls	r2, r3, #24
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	021b      	lsls	r3, r3, #8
 800bc16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc1a:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	0a1b      	lsrs	r3, r3, #8
 800bc20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800bc24:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	0e1b      	lsrs	r3, r3, #24
 800bc2a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	373c      	adds	r7, #60	; 0x3c
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd90      	pop	{r4, r7, pc}

0800bc3a <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bc3a:	b590      	push	{r4, r7, lr}
 800bc3c:	b085      	sub	sp, #20
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bc42:	2300      	movs	r3, #0
 800bc44:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc4a:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60fb      	str	r3, [r7, #12]
 800bc50:	e00d      	b.n	800bc6e <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6819      	ldr	r1, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	68ba      	ldr	r2, [r7, #8]
 800bc5c:	18d4      	adds	r4, r2, r3
 800bc5e:	4608      	mov	r0, r1
 800bc60:	f002 f8cb 	bl	800ddfa <SDIO_ReadFIFO>
 800bc64:	4603      	mov	r3, r0
 800bc66:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	60fb      	str	r3, [r7, #12]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b07      	cmp	r3, #7
 800bc72:	d9ee      	bls.n	800bc52 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc78:	f103 0220 	add.w	r2, r3, #32
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd90      	pop	{r4, r7, pc}

0800bc8a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b084      	sub	sp, #16
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bc92:	2300      	movs	r3, #0
 800bc94:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a1b      	ldr	r3, [r3, #32]
 800bc9a:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	60fb      	str	r3, [r7, #12]
 800bca0:	e00b      	b.n	800bcba <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6818      	ldr	r0, [r3, #0]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	4413      	add	r3, r2
 800bcae:	4619      	mov	r1, r3
 800bcb0:	f002 f8b0 	bl	800de14 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	60fb      	str	r3, [r7, #12]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2b07      	cmp	r3, #7
 800bcbe:	d9f0      	bls.n	800bca2 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a1b      	ldr	r3, [r3, #32]
 800bcc4:	f103 0220 	add.w	r2, r3, #32
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b082      	sub	sp, #8
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e056      	b.n	800bd96 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d106      	bne.n	800bd08 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f00b ff5c 	bl	8017bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2202      	movs	r2, #2
 800bd0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685a      	ldr	r2, [r3, #4]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	431a      	orrs	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	431a      	orrs	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	431a      	orrs	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	431a      	orrs	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	699b      	ldr	r3, [r3, #24]
 800bd40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd44:	431a      	orrs	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	69db      	ldr	r3, [r3, #28]
 800bd4a:	431a      	orrs	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a1b      	ldr	r3, [r3, #32]
 800bd50:	ea42 0103 	orr.w	r1, r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	430a      	orrs	r2, r1
 800bd5e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	0c1b      	lsrs	r3, r3, #16
 800bd66:	f003 0104 	and.w	r1, r3, #4
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	430a      	orrs	r2, r1
 800bd74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	69da      	ldr	r2, [r3, #28]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b088      	sub	sp, #32
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	60f8      	str	r0, [r7, #12]
 800bda6:	60b9      	str	r1, [r7, #8]
 800bda8:	603b      	str	r3, [r7, #0]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d101      	bne.n	800bdc0 <HAL_SPI_Transmit+0x22>
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	e11e      	b.n	800bffe <HAL_SPI_Transmit+0x260>
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bdc8:	f7fa fe42 	bl	8006a50 <HAL_GetTick>
 800bdcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bdce:	88fb      	ldrh	r3, [r7, #6]
 800bdd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d002      	beq.n	800bde4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bdde:	2302      	movs	r3, #2
 800bde0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bde2:	e103      	b.n	800bfec <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <HAL_SPI_Transmit+0x52>
 800bdea:	88fb      	ldrh	r3, [r7, #6]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d102      	bne.n	800bdf6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bdf4:	e0fa      	b.n	800bfec <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2203      	movs	r2, #3
 800bdfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2200      	movs	r2, #0
 800be02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	68ba      	ldr	r2, [r7, #8]
 800be08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	88fa      	ldrh	r2, [r7, #6]
 800be0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	88fa      	ldrh	r2, [r7, #6]
 800be14:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2200      	movs	r2, #0
 800be2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2200      	movs	r2, #0
 800be32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be3c:	d107      	bne.n	800be4e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be58:	2b40      	cmp	r3, #64	; 0x40
 800be5a:	d007      	beq.n	800be6c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be74:	d14b      	bne.n	800bf0e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d002      	beq.n	800be84 <HAL_SPI_Transmit+0xe6>
 800be7e:	8afb      	ldrh	r3, [r7, #22]
 800be80:	2b01      	cmp	r3, #1
 800be82:	d13e      	bne.n	800bf02 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be88:	881a      	ldrh	r2, [r3, #0]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be94:	1c9a      	adds	r2, r3, #2
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	3b01      	subs	r3, #1
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bea8:	e02b      	b.n	800bf02 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	f003 0302 	and.w	r3, r3, #2
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d112      	bne.n	800bede <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebc:	881a      	ldrh	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec8:	1c9a      	adds	r2, r3, #2
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	3b01      	subs	r3, #1
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	86da      	strh	r2, [r3, #54]	; 0x36
 800bedc:	e011      	b.n	800bf02 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bede:	f7fa fdb7 	bl	8006a50 <HAL_GetTick>
 800bee2:	4602      	mov	r2, r0
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	429a      	cmp	r2, r3
 800beec:	d803      	bhi.n	800bef6 <HAL_SPI_Transmit+0x158>
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef4:	d102      	bne.n	800befc <HAL_SPI_Transmit+0x15e>
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d102      	bne.n	800bf02 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800befc:	2303      	movs	r3, #3
 800befe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bf00:	e074      	b.n	800bfec <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1ce      	bne.n	800beaa <HAL_SPI_Transmit+0x10c>
 800bf0c:	e04c      	b.n	800bfa8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d002      	beq.n	800bf1c <HAL_SPI_Transmit+0x17e>
 800bf16:	8afb      	ldrh	r3, [r7, #22]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d140      	bne.n	800bf9e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	330c      	adds	r3, #12
 800bf26:	7812      	ldrb	r2, [r2, #0]
 800bf28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bf42:	e02c      	b.n	800bf9e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	f003 0302 	and.w	r3, r3, #2
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	d113      	bne.n	800bf7a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	330c      	adds	r3, #12
 800bf5c:	7812      	ldrb	r2, [r2, #0]
 800bf5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf64:	1c5a      	adds	r2, r3, #1
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	3b01      	subs	r3, #1
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	86da      	strh	r2, [r3, #54]	; 0x36
 800bf78:	e011      	b.n	800bf9e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf7a:	f7fa fd69 	bl	8006a50 <HAL_GetTick>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d803      	bhi.n	800bf92 <HAL_SPI_Transmit+0x1f4>
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf90:	d102      	bne.n	800bf98 <HAL_SPI_Transmit+0x1fa>
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bf9c:	e026      	b.n	800bfec <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1cd      	bne.n	800bf44 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bfa8:	69ba      	ldr	r2, [r7, #24]
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f000 fa45 	bl	800c43c <SPI_EndRxTxTransaction>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2220      	movs	r2, #32
 800bfbc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10a      	bne.n	800bfdc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	613b      	str	r3, [r7, #16]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	613b      	str	r3, [r7, #16]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	613b      	str	r3, [r7, #16]
 800bfda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	77fb      	strb	r3, [r7, #31]
 800bfe8:	e000      	b.n	800bfec <HAL_SPI_Transmit+0x24e>
  }

error:
 800bfea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bffc:	7ffb      	ldrb	r3, [r7, #31]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3720      	adds	r7, #32
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b08c      	sub	sp, #48	; 0x30
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	60f8      	str	r0, [r7, #12]
 800c00e:	60b9      	str	r1, [r7, #8]
 800c010:	607a      	str	r2, [r7, #4]
 800c012:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c014:	2301      	movs	r3, #1
 800c016:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c024:	2b01      	cmp	r3, #1
 800c026:	d101      	bne.n	800c02c <HAL_SPI_TransmitReceive+0x26>
 800c028:	2302      	movs	r3, #2
 800c02a:	e18a      	b.n	800c342 <HAL_SPI_TransmitReceive+0x33c>
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2201      	movs	r2, #1
 800c030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c034:	f7fa fd0c 	bl	8006a50 <HAL_GetTick>
 800c038:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c04a:	887b      	ldrh	r3, [r7, #2]
 800c04c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c04e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c052:	2b01      	cmp	r3, #1
 800c054:	d00f      	beq.n	800c076 <HAL_SPI_TransmitReceive+0x70>
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c05c:	d107      	bne.n	800c06e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d103      	bne.n	800c06e <HAL_SPI_TransmitReceive+0x68>
 800c066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c06a:	2b04      	cmp	r3, #4
 800c06c:	d003      	beq.n	800c076 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c06e:	2302      	movs	r3, #2
 800c070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c074:	e15b      	b.n	800c32e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d005      	beq.n	800c088 <HAL_SPI_TransmitReceive+0x82>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d002      	beq.n	800c088 <HAL_SPI_TransmitReceive+0x82>
 800c082:	887b      	ldrh	r3, [r7, #2]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d103      	bne.n	800c090 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c08e:	e14e      	b.n	800c32e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b04      	cmp	r3, #4
 800c09a:	d003      	beq.n	800c0a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2205      	movs	r2, #5
 800c0a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	887a      	ldrh	r2, [r7, #2]
 800c0b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	887a      	ldrh	r2, [r7, #2]
 800c0ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	68ba      	ldr	r2, [r7, #8]
 800c0c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	887a      	ldrh	r2, [r7, #2]
 800c0c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	887a      	ldrh	r2, [r7, #2]
 800c0cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0e4:	2b40      	cmp	r3, #64	; 0x40
 800c0e6:	d007      	beq.n	800c0f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c100:	d178      	bne.n	800c1f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d002      	beq.n	800c110 <HAL_SPI_TransmitReceive+0x10a>
 800c10a:	8b7b      	ldrh	r3, [r7, #26]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d166      	bne.n	800c1de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c114:	881a      	ldrh	r2, [r3, #0]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c120:	1c9a      	adds	r2, r3, #2
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	3b01      	subs	r3, #1
 800c12e:	b29a      	uxth	r2, r3
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c134:	e053      	b.n	800c1de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f003 0302 	and.w	r3, r3, #2
 800c140:	2b02      	cmp	r3, #2
 800c142:	d11b      	bne.n	800c17c <HAL_SPI_TransmitReceive+0x176>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c148:	b29b      	uxth	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d016      	beq.n	800c17c <HAL_SPI_TransmitReceive+0x176>
 800c14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c150:	2b01      	cmp	r3, #1
 800c152:	d113      	bne.n	800c17c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c158:	881a      	ldrh	r2, [r3, #0]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c164:	1c9a      	adds	r2, r3, #2
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c16e:	b29b      	uxth	r3, r3
 800c170:	3b01      	subs	r3, #1
 800c172:	b29a      	uxth	r2, r3
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c178:	2300      	movs	r3, #0
 800c17a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	2b01      	cmp	r3, #1
 800c188:	d119      	bne.n	800c1be <HAL_SPI_TransmitReceive+0x1b8>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c18e:	b29b      	uxth	r3, r3
 800c190:	2b00      	cmp	r3, #0
 800c192:	d014      	beq.n	800c1be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68da      	ldr	r2, [r3, #12]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19e:	b292      	uxth	r2, r2
 800c1a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a6:	1c9a      	adds	r2, r3, #2
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c1be:	f7fa fc47 	bl	8006a50 <HAL_GetTick>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d807      	bhi.n	800c1de <HAL_SPI_TransmitReceive+0x1d8>
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d4:	d003      	beq.n	800c1de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c1dc:	e0a7      	b.n	800c32e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1a6      	bne.n	800c136 <HAL_SPI_TransmitReceive+0x130>
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1a1      	bne.n	800c136 <HAL_SPI_TransmitReceive+0x130>
 800c1f2:	e07c      	b.n	800c2ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d002      	beq.n	800c202 <HAL_SPI_TransmitReceive+0x1fc>
 800c1fc:	8b7b      	ldrh	r3, [r7, #26]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d16b      	bne.n	800c2da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	330c      	adds	r3, #12
 800c20c:	7812      	ldrb	r2, [r2, #0]
 800c20e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c214:	1c5a      	adds	r2, r3, #1
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c21e:	b29b      	uxth	r3, r3
 800c220:	3b01      	subs	r3, #1
 800c222:	b29a      	uxth	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c228:	e057      	b.n	800c2da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	f003 0302 	and.w	r3, r3, #2
 800c234:	2b02      	cmp	r3, #2
 800c236:	d11c      	bne.n	800c272 <HAL_SPI_TransmitReceive+0x26c>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d017      	beq.n	800c272 <HAL_SPI_TransmitReceive+0x26c>
 800c242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c244:	2b01      	cmp	r3, #1
 800c246:	d114      	bne.n	800c272 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	330c      	adds	r3, #12
 800c252:	7812      	ldrb	r2, [r2, #0]
 800c254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c25a:	1c5a      	adds	r2, r3, #1
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c264:	b29b      	uxth	r3, r3
 800c266:	3b01      	subs	r3, #1
 800c268:	b29a      	uxth	r2, r3
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c26e:	2300      	movs	r3, #0
 800c270:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	f003 0301 	and.w	r3, r3, #1
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d119      	bne.n	800c2b4 <HAL_SPI_TransmitReceive+0x2ae>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c284:	b29b      	uxth	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d014      	beq.n	800c2b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68da      	ldr	r2, [r3, #12]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c294:	b2d2      	uxtb	r2, r2
 800c296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29c:	1c5a      	adds	r2, r3, #1
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c2b4:	f7fa fbcc 	bl	8006a50 <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d803      	bhi.n	800c2cc <HAL_SPI_TransmitReceive+0x2c6>
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ca:	d102      	bne.n	800c2d2 <HAL_SPI_TransmitReceive+0x2cc>
 800c2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d103      	bne.n	800c2da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c2d8:	e029      	b.n	800c32e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1a2      	bne.n	800c22a <HAL_SPI_TransmitReceive+0x224>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d19d      	bne.n	800c22a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f000 f8a2 	bl	800c43c <SPI_EndRxTxTransaction>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d006      	beq.n	800c30c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c2fe:	2301      	movs	r3, #1
 800c300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2220      	movs	r2, #32
 800c308:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c30a:	e010      	b.n	800c32e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10b      	bne.n	800c32c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c314:	2300      	movs	r3, #0
 800c316:	617b      	str	r3, [r7, #20]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	617b      	str	r3, [r7, #20]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	617b      	str	r3, [r7, #20]
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	e000      	b.n	800c32e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c32c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2201      	movs	r2, #1
 800c332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c33e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c342:	4618      	mov	r0, r3
 800c344:	3730      	adds	r7, #48	; 0x30
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b083      	sub	sp, #12
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c358:	b2db      	uxtb	r3, r3
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	370c      	adds	r7, #12
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr

0800c366 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	603b      	str	r3, [r7, #0]
 800c372:	4613      	mov	r3, r2
 800c374:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c376:	e04c      	b.n	800c412 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c37e:	d048      	beq.n	800c412 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c380:	f7fa fb66 	bl	8006a50 <HAL_GetTick>
 800c384:	4602      	mov	r2, r0
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d902      	bls.n	800c396 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d13d      	bne.n	800c412 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c3a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3ae:	d111      	bne.n	800c3d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3b8:	d004      	beq.n	800c3c4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3c2:	d107      	bne.n	800c3d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3dc:	d10f      	bne.n	800c3fe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c3fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2200      	movs	r2, #0
 800c40a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c40e:	2303      	movs	r3, #3
 800c410:	e00f      	b.n	800c432 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	689a      	ldr	r2, [r3, #8]
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	4013      	ands	r3, r2
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	429a      	cmp	r2, r3
 800c420:	bf0c      	ite	eq
 800c422:	2301      	moveq	r3, #1
 800c424:	2300      	movne	r3, #0
 800c426:	b2db      	uxtb	r3, r3
 800c428:	461a      	mov	r2, r3
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d1a3      	bne.n	800c378 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
	...

0800c43c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b088      	sub	sp, #32
 800c440:	af02      	add	r7, sp, #8
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c448:	4b1b      	ldr	r3, [pc, #108]	; (800c4b8 <SPI_EndRxTxTransaction+0x7c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a1b      	ldr	r2, [pc, #108]	; (800c4bc <SPI_EndRxTxTransaction+0x80>)
 800c44e:	fba2 2303 	umull	r2, r3, r2, r3
 800c452:	0d5b      	lsrs	r3, r3, #21
 800c454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c458:	fb02 f303 	mul.w	r3, r2, r3
 800c45c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c466:	d112      	bne.n	800c48e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	2200      	movs	r2, #0
 800c470:	2180      	movs	r1, #128	; 0x80
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f7ff ff77 	bl	800c366 <SPI_WaitFlagStateUntilTimeout>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d016      	beq.n	800c4ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c482:	f043 0220 	orr.w	r2, r3, #32
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c48a:	2303      	movs	r3, #3
 800c48c:	e00f      	b.n	800c4ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00a      	beq.n	800c4aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	3b01      	subs	r3, #1
 800c498:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4a4:	2b80      	cmp	r3, #128	; 0x80
 800c4a6:	d0f2      	beq.n	800c48e <SPI_EndRxTxTransaction+0x52>
 800c4a8:	e000      	b.n	800c4ac <SPI_EndRxTxTransaction+0x70>
        break;
 800c4aa:	bf00      	nop
  }

  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3718      	adds	r7, #24
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	20000170 	.word	0x20000170
 800c4bc:	165e9f81 	.word	0x165e9f81

0800c4c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e01d      	b.n	800c50e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d106      	bne.n	800c4ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f00b fbb2 	bl	8017c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2202      	movs	r2, #2
 800c4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	3304      	adds	r3, #4
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	4610      	mov	r0, r2
 800c500:	f000 fa76 	bl	800c9f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2201      	movs	r2, #1
 800c508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c516:	b480      	push	{r7}
 800c518:	b085      	sub	sp, #20
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2202      	movs	r2, #2
 800c522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	f003 0307 	and.w	r3, r3, #7
 800c530:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b06      	cmp	r3, #6
 800c536:	d007      	beq.n	800c548 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f042 0201 	orr.w	r2, r2, #1
 800c546:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3714      	adds	r7, #20
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b082      	sub	sp, #8
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d101      	bne.n	800c570 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	e01d      	b.n	800c5ac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c576:	b2db      	uxtb	r3, r3
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d106      	bne.n	800c58a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f815 	bl	800c5b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2202      	movs	r2, #2
 800c58e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	3304      	adds	r3, #4
 800c59a:	4619      	mov	r1, r3
 800c59c:	4610      	mov	r0, r2
 800c59e:	f000 fa27 	bl	800c9f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c5bc:	bf00      	nop
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 fcf2 	bl	800cfc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a15      	ldr	r2, [pc, #84]	; (800c63c <HAL_TIM_PWM_Start+0x74>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d004      	beq.n	800c5f4 <HAL_TIM_PWM_Start+0x2c>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a14      	ldr	r2, [pc, #80]	; (800c640 <HAL_TIM_PWM_Start+0x78>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d101      	bne.n	800c5f8 <HAL_TIM_PWM_Start+0x30>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e000      	b.n	800c5fa <HAL_TIM_PWM_Start+0x32>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c60c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	f003 0307 	and.w	r3, r3, #7
 800c618:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b06      	cmp	r3, #6
 800c61e:	d007      	beq.n	800c630 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f042 0201 	orr.w	r2, r2, #1
 800c62e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	40010000 	.word	0x40010000
 800c640:	40010400 	.word	0x40010400

0800c644 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2200      	movs	r2, #0
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	4618      	mov	r0, r3
 800c658:	f000 fcb4 	bl	800cfc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a22      	ldr	r2, [pc, #136]	; (800c6ec <HAL_TIM_PWM_Stop+0xa8>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d004      	beq.n	800c670 <HAL_TIM_PWM_Stop+0x2c>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a21      	ldr	r2, [pc, #132]	; (800c6f0 <HAL_TIM_PWM_Stop+0xac>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d101      	bne.n	800c674 <HAL_TIM_PWM_Stop+0x30>
 800c670:	2301      	movs	r3, #1
 800c672:	e000      	b.n	800c676 <HAL_TIM_PWM_Stop+0x32>
 800c674:	2300      	movs	r3, #0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d017      	beq.n	800c6aa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	6a1a      	ldr	r2, [r3, #32]
 800c680:	f241 1311 	movw	r3, #4369	; 0x1111
 800c684:	4013      	ands	r3, r2
 800c686:	2b00      	cmp	r3, #0
 800c688:	d10f      	bne.n	800c6aa <HAL_TIM_PWM_Stop+0x66>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	6a1a      	ldr	r2, [r3, #32]
 800c690:	f240 4344 	movw	r3, #1092	; 0x444
 800c694:	4013      	ands	r3, r2
 800c696:	2b00      	cmp	r3, #0
 800c698:	d107      	bne.n	800c6aa <HAL_TIM_PWM_Stop+0x66>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	6a1a      	ldr	r2, [r3, #32]
 800c6b0:	f241 1311 	movw	r3, #4369	; 0x1111
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10f      	bne.n	800c6da <HAL_TIM_PWM_Stop+0x96>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	6a1a      	ldr	r2, [r3, #32]
 800c6c0:	f240 4344 	movw	r3, #1092	; 0x444
 800c6c4:	4013      	ands	r3, r2
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d107      	bne.n	800c6da <HAL_TIM_PWM_Stop+0x96>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f022 0201 	bic.w	r2, r2, #1
 800c6d8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c6e2:	2300      	movs	r3, #0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	40010000 	.word	0x40010000
 800c6f0:	40010400 	.word	0x40010400

0800c6f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c706:	2b01      	cmp	r3, #1
 800c708:	d101      	bne.n	800c70e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c70a:	2302      	movs	r3, #2
 800c70c:	e0b4      	b.n	800c878 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2201      	movs	r2, #1
 800c712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2202      	movs	r2, #2
 800c71a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b0c      	cmp	r3, #12
 800c722:	f200 809f 	bhi.w	800c864 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c726:	a201      	add	r2, pc, #4	; (adr r2, 800c72c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72c:	0800c761 	.word	0x0800c761
 800c730:	0800c865 	.word	0x0800c865
 800c734:	0800c865 	.word	0x0800c865
 800c738:	0800c865 	.word	0x0800c865
 800c73c:	0800c7a1 	.word	0x0800c7a1
 800c740:	0800c865 	.word	0x0800c865
 800c744:	0800c865 	.word	0x0800c865
 800c748:	0800c865 	.word	0x0800c865
 800c74c:	0800c7e3 	.word	0x0800c7e3
 800c750:	0800c865 	.word	0x0800c865
 800c754:	0800c865 	.word	0x0800c865
 800c758:	0800c865 	.word	0x0800c865
 800c75c:	0800c823 	.word	0x0800c823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68b9      	ldr	r1, [r7, #8]
 800c766:	4618      	mov	r0, r3
 800c768:	f000 f9e2 	bl	800cb30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	699a      	ldr	r2, [r3, #24]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f042 0208 	orr.w	r2, r2, #8
 800c77a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	699a      	ldr	r2, [r3, #24]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f022 0204 	bic.w	r2, r2, #4
 800c78a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	6999      	ldr	r1, [r3, #24]
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	691a      	ldr	r2, [r3, #16]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	430a      	orrs	r2, r1
 800c79c:	619a      	str	r2, [r3, #24]
      break;
 800c79e:	e062      	b.n	800c866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	68b9      	ldr	r1, [r7, #8]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 fa32 	bl	800cc10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	699a      	ldr	r2, [r3, #24]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	699a      	ldr	r2, [r3, #24]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	6999      	ldr	r1, [r3, #24]
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	021a      	lsls	r2, r3, #8
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	619a      	str	r2, [r3, #24]
      break;
 800c7e0:	e041      	b.n	800c866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68b9      	ldr	r1, [r7, #8]
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 fa87 	bl	800ccfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	69da      	ldr	r2, [r3, #28]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f042 0208 	orr.w	r2, r2, #8
 800c7fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	69da      	ldr	r2, [r3, #28]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f022 0204 	bic.w	r2, r2, #4
 800c80c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	69d9      	ldr	r1, [r3, #28]
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	691a      	ldr	r2, [r3, #16]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	430a      	orrs	r2, r1
 800c81e:	61da      	str	r2, [r3, #28]
      break;
 800c820:	e021      	b.n	800c866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68b9      	ldr	r1, [r7, #8]
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 fadb 	bl	800cde4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	69da      	ldr	r2, [r3, #28]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c83c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	69da      	ldr	r2, [r3, #28]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c84c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	69d9      	ldr	r1, [r3, #28]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	021a      	lsls	r2, r3, #8
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	430a      	orrs	r2, r1
 800c860:	61da      	str	r2, [r3, #28]
      break;
 800c862:	e000      	b.n	800c866 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c864:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c890:	2b01      	cmp	r3, #1
 800c892:	d101      	bne.n	800c898 <HAL_TIM_ConfigClockSource+0x18>
 800c894:	2302      	movs	r3, #2
 800c896:	e0a6      	b.n	800c9e6 <HAL_TIM_ConfigClockSource+0x166>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2202      	movs	r2, #2
 800c8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c8b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2b40      	cmp	r3, #64	; 0x40
 800c8ce:	d067      	beq.n	800c9a0 <HAL_TIM_ConfigClockSource+0x120>
 800c8d0:	2b40      	cmp	r3, #64	; 0x40
 800c8d2:	d80b      	bhi.n	800c8ec <HAL_TIM_ConfigClockSource+0x6c>
 800c8d4:	2b10      	cmp	r3, #16
 800c8d6:	d073      	beq.n	800c9c0 <HAL_TIM_ConfigClockSource+0x140>
 800c8d8:	2b10      	cmp	r3, #16
 800c8da:	d802      	bhi.n	800c8e2 <HAL_TIM_ConfigClockSource+0x62>
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d06f      	beq.n	800c9c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c8e0:	e078      	b.n	800c9d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c8e2:	2b20      	cmp	r3, #32
 800c8e4:	d06c      	beq.n	800c9c0 <HAL_TIM_ConfigClockSource+0x140>
 800c8e6:	2b30      	cmp	r3, #48	; 0x30
 800c8e8:	d06a      	beq.n	800c9c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c8ea:	e073      	b.n	800c9d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c8ec:	2b70      	cmp	r3, #112	; 0x70
 800c8ee:	d00d      	beq.n	800c90c <HAL_TIM_ConfigClockSource+0x8c>
 800c8f0:	2b70      	cmp	r3, #112	; 0x70
 800c8f2:	d804      	bhi.n	800c8fe <HAL_TIM_ConfigClockSource+0x7e>
 800c8f4:	2b50      	cmp	r3, #80	; 0x50
 800c8f6:	d033      	beq.n	800c960 <HAL_TIM_ConfigClockSource+0xe0>
 800c8f8:	2b60      	cmp	r3, #96	; 0x60
 800c8fa:	d041      	beq.n	800c980 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c8fc:	e06a      	b.n	800c9d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c8fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c902:	d066      	beq.n	800c9d2 <HAL_TIM_ConfigClockSource+0x152>
 800c904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c908:	d017      	beq.n	800c93a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c90a:	e063      	b.n	800c9d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6818      	ldr	r0, [r3, #0]
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	6899      	ldr	r1, [r3, #8]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	685a      	ldr	r2, [r3, #4]
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	f000 fb32 	bl	800cf84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c92e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	609a      	str	r2, [r3, #8]
      break;
 800c938:	e04c      	b.n	800c9d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6818      	ldr	r0, [r3, #0]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	6899      	ldr	r1, [r3, #8]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	685a      	ldr	r2, [r3, #4]
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	f000 fb1b 	bl	800cf84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	689a      	ldr	r2, [r3, #8]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c95c:	609a      	str	r2, [r3, #8]
      break;
 800c95e:	e039      	b.n	800c9d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6818      	ldr	r0, [r3, #0]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	6859      	ldr	r1, [r3, #4]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	461a      	mov	r2, r3
 800c96e:	f000 fa8f 	bl	800ce90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2150      	movs	r1, #80	; 0x50
 800c978:	4618      	mov	r0, r3
 800c97a:	f000 fae8 	bl	800cf4e <TIM_ITRx_SetConfig>
      break;
 800c97e:	e029      	b.n	800c9d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6818      	ldr	r0, [r3, #0]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	6859      	ldr	r1, [r3, #4]
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	461a      	mov	r2, r3
 800c98e:	f000 faae 	bl	800ceee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2160      	movs	r1, #96	; 0x60
 800c998:	4618      	mov	r0, r3
 800c99a:	f000 fad8 	bl	800cf4e <TIM_ITRx_SetConfig>
      break;
 800c99e:	e019      	b.n	800c9d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6818      	ldr	r0, [r3, #0]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	6859      	ldr	r1, [r3, #4]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	f000 fa6f 	bl	800ce90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2140      	movs	r1, #64	; 0x40
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f000 fac8 	bl	800cf4e <TIM_ITRx_SetConfig>
      break;
 800c9be:	e009      	b.n	800c9d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	4610      	mov	r0, r2
 800c9cc:	f000 fabf 	bl	800cf4e <TIM_ITRx_SetConfig>
      break;
 800c9d0:	e000      	b.n	800c9d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c9d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
	...

0800c9f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a40      	ldr	r2, [pc, #256]	; (800cb04 <TIM_Base_SetConfig+0x114>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d013      	beq.n	800ca30 <TIM_Base_SetConfig+0x40>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca0e:	d00f      	beq.n	800ca30 <TIM_Base_SetConfig+0x40>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a3d      	ldr	r2, [pc, #244]	; (800cb08 <TIM_Base_SetConfig+0x118>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d00b      	beq.n	800ca30 <TIM_Base_SetConfig+0x40>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4a3c      	ldr	r2, [pc, #240]	; (800cb0c <TIM_Base_SetConfig+0x11c>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d007      	beq.n	800ca30 <TIM_Base_SetConfig+0x40>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4a3b      	ldr	r2, [pc, #236]	; (800cb10 <TIM_Base_SetConfig+0x120>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d003      	beq.n	800ca30 <TIM_Base_SetConfig+0x40>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a3a      	ldr	r2, [pc, #232]	; (800cb14 <TIM_Base_SetConfig+0x124>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d108      	bne.n	800ca42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	68fa      	ldr	r2, [r7, #12]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a2f      	ldr	r2, [pc, #188]	; (800cb04 <TIM_Base_SetConfig+0x114>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d02b      	beq.n	800caa2 <TIM_Base_SetConfig+0xb2>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca50:	d027      	beq.n	800caa2 <TIM_Base_SetConfig+0xb2>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4a2c      	ldr	r2, [pc, #176]	; (800cb08 <TIM_Base_SetConfig+0x118>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d023      	beq.n	800caa2 <TIM_Base_SetConfig+0xb2>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4a2b      	ldr	r2, [pc, #172]	; (800cb0c <TIM_Base_SetConfig+0x11c>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d01f      	beq.n	800caa2 <TIM_Base_SetConfig+0xb2>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a2a      	ldr	r2, [pc, #168]	; (800cb10 <TIM_Base_SetConfig+0x120>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d01b      	beq.n	800caa2 <TIM_Base_SetConfig+0xb2>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a29      	ldr	r2, [pc, #164]	; (800cb14 <TIM_Base_SetConfig+0x124>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d017      	beq.n	800caa2 <TIM_Base_SetConfig+0xb2>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a28      	ldr	r2, [pc, #160]	; (800cb18 <TIM_Base_SetConfig+0x128>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d013      	beq.n	800caa2 <TIM_Base_SetConfig+0xb2>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4a27      	ldr	r2, [pc, #156]	; (800cb1c <TIM_Base_SetConfig+0x12c>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d00f      	beq.n	800caa2 <TIM_Base_SetConfig+0xb2>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4a26      	ldr	r2, [pc, #152]	; (800cb20 <TIM_Base_SetConfig+0x130>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d00b      	beq.n	800caa2 <TIM_Base_SetConfig+0xb2>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4a25      	ldr	r2, [pc, #148]	; (800cb24 <TIM_Base_SetConfig+0x134>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d007      	beq.n	800caa2 <TIM_Base_SetConfig+0xb2>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	4a24      	ldr	r2, [pc, #144]	; (800cb28 <TIM_Base_SetConfig+0x138>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d003      	beq.n	800caa2 <TIM_Base_SetConfig+0xb2>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4a23      	ldr	r2, [pc, #140]	; (800cb2c <TIM_Base_SetConfig+0x13c>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d108      	bne.n	800cab4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800caa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	695b      	ldr	r3, [r3, #20]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	689a      	ldr	r2, [r3, #8]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a0a      	ldr	r2, [pc, #40]	; (800cb04 <TIM_Base_SetConfig+0x114>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d003      	beq.n	800cae8 <TIM_Base_SetConfig+0xf8>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4a0c      	ldr	r2, [pc, #48]	; (800cb14 <TIM_Base_SetConfig+0x124>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d103      	bne.n	800caf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	691a      	ldr	r2, [r3, #16]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	615a      	str	r2, [r3, #20]
}
 800caf6:	bf00      	nop
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	40010000 	.word	0x40010000
 800cb08:	40000400 	.word	0x40000400
 800cb0c:	40000800 	.word	0x40000800
 800cb10:	40000c00 	.word	0x40000c00
 800cb14:	40010400 	.word	0x40010400
 800cb18:	40014000 	.word	0x40014000
 800cb1c:	40014400 	.word	0x40014400
 800cb20:	40014800 	.word	0x40014800
 800cb24:	40001800 	.word	0x40001800
 800cb28:	40001c00 	.word	0x40001c00
 800cb2c:	40002000 	.word	0x40002000

0800cb30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b087      	sub	sp, #28
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a1b      	ldr	r3, [r3, #32]
 800cb3e:	f023 0201 	bic.w	r2, r3, #1
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6a1b      	ldr	r3, [r3, #32]
 800cb4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	699b      	ldr	r3, [r3, #24]
 800cb56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f023 0303 	bic.w	r3, r3, #3
 800cb66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	f023 0302 	bic.w	r3, r3, #2
 800cb78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	697a      	ldr	r2, [r7, #20]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a20      	ldr	r2, [pc, #128]	; (800cc08 <TIM_OC1_SetConfig+0xd8>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d003      	beq.n	800cb94 <TIM_OC1_SetConfig+0x64>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a1f      	ldr	r2, [pc, #124]	; (800cc0c <TIM_OC1_SetConfig+0xdc>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d10c      	bne.n	800cbae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	f023 0308 	bic.w	r3, r3, #8
 800cb9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	697a      	ldr	r2, [r7, #20]
 800cba2:	4313      	orrs	r3, r2
 800cba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	f023 0304 	bic.w	r3, r3, #4
 800cbac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a15      	ldr	r2, [pc, #84]	; (800cc08 <TIM_OC1_SetConfig+0xd8>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d003      	beq.n	800cbbe <TIM_OC1_SetConfig+0x8e>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a14      	ldr	r2, [pc, #80]	; (800cc0c <TIM_OC1_SetConfig+0xdc>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d111      	bne.n	800cbe2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cbcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	699b      	ldr	r3, [r3, #24]
 800cbdc:	693a      	ldr	r2, [r7, #16]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	685a      	ldr	r2, [r3, #4]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	697a      	ldr	r2, [r7, #20]
 800cbfa:	621a      	str	r2, [r3, #32]
}
 800cbfc:	bf00      	nop
 800cbfe:	371c      	adds	r7, #28
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr
 800cc08:	40010000 	.word	0x40010000
 800cc0c:	40010400 	.word	0x40010400

0800cc10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b087      	sub	sp, #28
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	f023 0210 	bic.w	r2, r3, #16
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	021b      	lsls	r3, r3, #8
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	f023 0320 	bic.w	r3, r3, #32
 800cc5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	011b      	lsls	r3, r3, #4
 800cc62:	697a      	ldr	r2, [r7, #20]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4a22      	ldr	r2, [pc, #136]	; (800ccf4 <TIM_OC2_SetConfig+0xe4>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d003      	beq.n	800cc78 <TIM_OC2_SetConfig+0x68>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	4a21      	ldr	r2, [pc, #132]	; (800ccf8 <TIM_OC2_SetConfig+0xe8>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d10d      	bne.n	800cc94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	011b      	lsls	r3, r3, #4
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	4a17      	ldr	r2, [pc, #92]	; (800ccf4 <TIM_OC2_SetConfig+0xe4>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d003      	beq.n	800cca4 <TIM_OC2_SetConfig+0x94>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a16      	ldr	r2, [pc, #88]	; (800ccf8 <TIM_OC2_SetConfig+0xe8>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d113      	bne.n	800cccc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ccaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	695b      	ldr	r3, [r3, #20]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	693a      	ldr	r2, [r7, #16]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	699b      	ldr	r3, [r3, #24]
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	693a      	ldr	r2, [r7, #16]
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	693a      	ldr	r2, [r7, #16]
 800ccd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	685a      	ldr	r2, [r3, #4]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	697a      	ldr	r2, [r7, #20]
 800cce4:	621a      	str	r2, [r3, #32]
}
 800cce6:	bf00      	nop
 800cce8:	371c      	adds	r7, #28
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	40010000 	.word	0x40010000
 800ccf8:	40010400 	.word	0x40010400

0800ccfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	69db      	ldr	r3, [r3, #28]
 800cd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f023 0303 	bic.w	r3, r3, #3
 800cd32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	021b      	lsls	r3, r3, #8
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4a21      	ldr	r2, [pc, #132]	; (800cddc <TIM_OC3_SetConfig+0xe0>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d003      	beq.n	800cd62 <TIM_OC3_SetConfig+0x66>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4a20      	ldr	r2, [pc, #128]	; (800cde0 <TIM_OC3_SetConfig+0xe4>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d10d      	bne.n	800cd7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	021b      	lsls	r3, r3, #8
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	4313      	orrs	r3, r2
 800cd74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4a16      	ldr	r2, [pc, #88]	; (800cddc <TIM_OC3_SetConfig+0xe0>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d003      	beq.n	800cd8e <TIM_OC3_SetConfig+0x92>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4a15      	ldr	r2, [pc, #84]	; (800cde0 <TIM_OC3_SetConfig+0xe4>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d113      	bne.n	800cdb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	011b      	lsls	r3, r3, #4
 800cda4:	693a      	ldr	r2, [r7, #16]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	699b      	ldr	r3, [r3, #24]
 800cdae:	011b      	lsls	r3, r3, #4
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	693a      	ldr	r2, [r7, #16]
 800cdba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	697a      	ldr	r2, [r7, #20]
 800cdce:	621a      	str	r2, [r3, #32]
}
 800cdd0:	bf00      	nop
 800cdd2:	371c      	adds	r7, #28
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	40010000 	.word	0x40010000
 800cde0:	40010400 	.word	0x40010400

0800cde4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b087      	sub	sp, #28
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
 800cdf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a1b      	ldr	r3, [r3, #32]
 800cdfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	69db      	ldr	r3, [r3, #28]
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	021b      	lsls	r3, r3, #8
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	4313      	orrs	r3, r2
 800ce26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	031b      	lsls	r3, r3, #12
 800ce36:	693a      	ldr	r2, [r7, #16]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a12      	ldr	r2, [pc, #72]	; (800ce88 <TIM_OC4_SetConfig+0xa4>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d003      	beq.n	800ce4c <TIM_OC4_SetConfig+0x68>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a11      	ldr	r2, [pc, #68]	; (800ce8c <TIM_OC4_SetConfig+0xa8>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d109      	bne.n	800ce60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	695b      	ldr	r3, [r3, #20]
 800ce58:	019b      	lsls	r3, r3, #6
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	697a      	ldr	r2, [r7, #20]
 800ce64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	685a      	ldr	r2, [r3, #4]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	693a      	ldr	r2, [r7, #16]
 800ce78:	621a      	str	r2, [r3, #32]
}
 800ce7a:	bf00      	nop
 800ce7c:	371c      	adds	r7, #28
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	40010000 	.word	0x40010000
 800ce8c:	40010400 	.word	0x40010400

0800ce90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b087      	sub	sp, #28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6a1b      	ldr	r3, [r3, #32]
 800cea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	f023 0201 	bic.w	r2, r3, #1
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	699b      	ldr	r3, [r3, #24]
 800ceb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ceba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	011b      	lsls	r3, r3, #4
 800cec0:	693a      	ldr	r2, [r7, #16]
 800cec2:	4313      	orrs	r3, r2
 800cec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	f023 030a 	bic.w	r3, r3, #10
 800cecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	621a      	str	r2, [r3, #32]
}
 800cee2:	bf00      	nop
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ceee:	b480      	push	{r7}
 800cef0:	b087      	sub	sp, #28
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	60f8      	str	r0, [r7, #12]
 800cef6:	60b9      	str	r1, [r7, #8]
 800cef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6a1b      	ldr	r3, [r3, #32]
 800cefe:	f023 0210 	bic.w	r2, r3, #16
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	699b      	ldr	r3, [r3, #24]
 800cf0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6a1b      	ldr	r3, [r3, #32]
 800cf10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cf18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	031b      	lsls	r3, r3, #12
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cf2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	011b      	lsls	r3, r3, #4
 800cf30:	693a      	ldr	r2, [r7, #16]
 800cf32:	4313      	orrs	r3, r2
 800cf34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	697a      	ldr	r2, [r7, #20]
 800cf3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	621a      	str	r2, [r3, #32]
}
 800cf42:	bf00      	nop
 800cf44:	371c      	adds	r7, #28
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf4e:	b480      	push	{r7}
 800cf50:	b085      	sub	sp, #20
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	f043 0307 	orr.w	r3, r3, #7
 800cf70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	609a      	str	r2, [r3, #8]
}
 800cf78:	bf00      	nop
 800cf7a:	3714      	adds	r7, #20
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b087      	sub	sp, #28
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
 800cf90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	689b      	ldr	r3, [r3, #8]
 800cf96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	021a      	lsls	r2, r3, #8
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	431a      	orrs	r2, r3
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	697a      	ldr	r2, [r7, #20]
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	609a      	str	r2, [r3, #8]
}
 800cfb8:	bf00      	nop
 800cfba:	371c      	adds	r7, #28
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b087      	sub	sp, #28
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	f003 031f 	and.w	r3, r3, #31
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	fa02 f303 	lsl.w	r3, r2, r3
 800cfdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6a1a      	ldr	r2, [r3, #32]
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	43db      	mvns	r3, r3
 800cfe6:	401a      	ands	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6a1a      	ldr	r2, [r3, #32]
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	f003 031f 	and.w	r3, r3, #31
 800cff6:	6879      	ldr	r1, [r7, #4]
 800cff8:	fa01 f303 	lsl.w	r3, r1, r3
 800cffc:	431a      	orrs	r2, r3
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	621a      	str	r2, [r3, #32]
}
 800d002:	bf00      	nop
 800d004:	371c      	adds	r7, #28
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr

0800d00e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d00e:	b480      	push	{r7}
 800d010:	b085      	sub	sp, #20
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d101      	bne.n	800d026 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d022:	2302      	movs	r3, #2
 800d024:	e032      	b.n	800d08c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2201      	movs	r2, #1
 800d02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2202      	movs	r2, #2
 800d032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d04c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	4313      	orrs	r3, r2
 800d056:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d05e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	4313      	orrs	r3, r2
 800d068:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3714      	adds	r7, #20
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e03f      	b.n	800d12a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d106      	bne.n	800d0c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f00a fe6c 	bl	8017d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2224      	movs	r2, #36	; 0x24
 800d0c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68da      	ldr	r2, [r3, #12]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 fc57 	bl	800d990 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	691a      	ldr	r2, [r3, #16]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d0f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	695a      	ldr	r2, [r3, #20]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	68da      	ldr	r2, [r3, #12]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2220      	movs	r2, #32
 800d11c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2220      	movs	r2, #32
 800d124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d128:	2300      	movs	r3, #0
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b088      	sub	sp, #32
 800d136:	af02      	add	r7, sp, #8
 800d138:	60f8      	str	r0, [r7, #12]
 800d13a:	60b9      	str	r1, [r7, #8]
 800d13c:	603b      	str	r3, [r7, #0]
 800d13e:	4613      	mov	r3, r2
 800d140:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800d142:	2300      	movs	r3, #0
 800d144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b20      	cmp	r3, #32
 800d150:	f040 8083 	bne.w	800d25a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d002      	beq.n	800d160 <HAL_UART_Transmit+0x2e>
 800d15a:	88fb      	ldrh	r3, [r7, #6]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d101      	bne.n	800d164 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	e07b      	b.n	800d25c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d101      	bne.n	800d172 <HAL_UART_Transmit+0x40>
 800d16e:	2302      	movs	r3, #2
 800d170:	e074      	b.n	800d25c <HAL_UART_Transmit+0x12a>
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2201      	movs	r2, #1
 800d176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2200      	movs	r2, #0
 800d17e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2221      	movs	r2, #33	; 0x21
 800d184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800d188:	f7f9 fc62 	bl	8006a50 <HAL_GetTick>
 800d18c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	88fa      	ldrh	r2, [r7, #6]
 800d192:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	88fa      	ldrh	r2, [r7, #6]
 800d198:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d19a:	e042      	b.n	800d222 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1b2:	d122      	bne.n	800d1fa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	2180      	movs	r1, #128	; 0x80
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f000 fa7a 	bl	800d6b8 <UART_WaitOnFlagUntilTimeout>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d001      	beq.n	800d1ce <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	e046      	b.n	800d25c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	881b      	ldrh	r3, [r3, #0]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d103      	bne.n	800d1f2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	3302      	adds	r3, #2
 800d1ee:	60bb      	str	r3, [r7, #8]
 800d1f0:	e017      	b.n	800d222 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	60bb      	str	r3, [r7, #8]
 800d1f8:	e013      	b.n	800d222 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	2200      	movs	r2, #0
 800d202:	2180      	movs	r1, #128	; 0x80
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f000 fa57 	bl	800d6b8 <UART_WaitOnFlagUntilTimeout>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d001      	beq.n	800d214 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800d210:	2303      	movs	r3, #3
 800d212:	e023      	b.n	800d25c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	1c5a      	adds	r2, r3, #1
 800d218:	60ba      	str	r2, [r7, #8]
 800d21a:	781a      	ldrb	r2, [r3, #0]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d226:	b29b      	uxth	r3, r3
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1b7      	bne.n	800d19c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	2200      	movs	r2, #0
 800d234:	2140      	movs	r1, #64	; 0x40
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f000 fa3e 	bl	800d6b8 <UART_WaitOnFlagUntilTimeout>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800d242:	2303      	movs	r3, #3
 800d244:	e00a      	b.n	800d25c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2220      	movs	r2, #32
 800d24a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	e000      	b.n	800d25c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800d25a:	2302      	movs	r3, #2
  }
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3718      	adds	r7, #24
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b088      	sub	sp, #32
 800d268:	af02      	add	r7, sp, #8
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	603b      	str	r3, [r7, #0]
 800d270:	4613      	mov	r3, r2
 800d272:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800d274:	2300      	movs	r3, #0
 800d276:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b20      	cmp	r3, #32
 800d282:	f040 8090 	bne.w	800d3a6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <HAL_UART_Receive+0x2e>
 800d28c:	88fb      	ldrh	r3, [r7, #6]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d101      	bne.n	800d296 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800d292:	2301      	movs	r3, #1
 800d294:	e088      	b.n	800d3a8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d101      	bne.n	800d2a4 <HAL_UART_Receive+0x40>
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	e081      	b.n	800d3a8 <HAL_UART_Receive+0x144>
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2222      	movs	r2, #34	; 0x22
 800d2b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800d2ba:	f7f9 fbc9 	bl	8006a50 <HAL_GetTick>
 800d2be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	88fa      	ldrh	r2, [r7, #6]
 800d2c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	88fa      	ldrh	r2, [r7, #6]
 800d2ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d2cc:	e05c      	b.n	800d388 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	3b01      	subs	r3, #1
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2e4:	d12b      	bne.n	800d33e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	2120      	movs	r1, #32
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f000 f9e1 	bl	800d6b8 <UART_WaitOnFlagUntilTimeout>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d001      	beq.n	800d300 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800d2fc:	2303      	movs	r3, #3
 800d2fe:	e053      	b.n	800d3a8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	691b      	ldr	r3, [r3, #16]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10c      	bne.n	800d326 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	b29b      	uxth	r3, r3
 800d314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d318:	b29a      	uxth	r2, r3
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	3302      	adds	r3, #2
 800d322:	60bb      	str	r3, [r7, #8]
 800d324:	e030      	b.n	800d388 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	b29a      	uxth	r2, r3
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	3301      	adds	r3, #1
 800d33a:	60bb      	str	r3, [r7, #8]
 800d33c:	e024      	b.n	800d388 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2200      	movs	r2, #0
 800d346:	2120      	movs	r1, #32
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f000 f9b5 	bl	800d6b8 <UART_WaitOnFlagUntilTimeout>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d001      	beq.n	800d358 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800d354:	2303      	movs	r3, #3
 800d356:	e027      	b.n	800d3a8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	691b      	ldr	r3, [r3, #16]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d108      	bne.n	800d372 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6859      	ldr	r1, [r3, #4]
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	60ba      	str	r2, [r7, #8]
 800d36c:	b2ca      	uxtb	r2, r1
 800d36e:	701a      	strb	r2, [r3, #0]
 800d370:	e00a      	b.n	800d388 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	1c59      	adds	r1, r3, #1
 800d37e:	60b9      	str	r1, [r7, #8]
 800d380:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d384:	b2d2      	uxtb	r2, r2
 800d386:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d19d      	bne.n	800d2ce <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2220      	movs	r2, #32
 800d396:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	e000      	b.n	800d3a8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d3a6:	2302      	movs	r3, #2
  }
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	2b20      	cmp	r3, #32
 800d3c8:	d140      	bne.n	800d44c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d002      	beq.n	800d3d6 <HAL_UART_Receive_IT+0x26>
 800d3d0:	88fb      	ldrh	r3, [r7, #6]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e039      	b.n	800d44e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d101      	bne.n	800d3e8 <HAL_UART_Receive_IT+0x38>
 800d3e4:	2302      	movs	r3, #2
 800d3e6:	e032      	b.n	800d44e <HAL_UART_Receive_IT+0x9e>
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	88fa      	ldrh	r2, [r7, #6]
 800d3fa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	88fa      	ldrh	r2, [r7, #6]
 800d400:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2200      	movs	r2, #0
 800d406:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2222      	movs	r2, #34	; 0x22
 800d40c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2200      	movs	r2, #0
 800d414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	68da      	ldr	r2, [r3, #12]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d426:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	695a      	ldr	r2, [r3, #20]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f042 0201 	orr.w	r2, r2, #1
 800d436:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	68da      	ldr	r2, [r3, #12]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f042 0220 	orr.w	r2, r2, #32
 800d446:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800d448:	2300      	movs	r3, #0
 800d44a:	e000      	b.n	800d44e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d44c:	2302      	movs	r3, #2
  }
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3714      	adds	r7, #20
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
	...

0800d45c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b088      	sub	sp, #32
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d47c:	2300      	movs	r3, #0
 800d47e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d480:	2300      	movs	r3, #0
 800d482:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	f003 030f 	and.w	r3, r3, #15
 800d48a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10d      	bne.n	800d4ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	f003 0320 	and.w	r3, r3, #32
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d008      	beq.n	800d4ae <HAL_UART_IRQHandler+0x52>
 800d49c:	69bb      	ldr	r3, [r7, #24]
 800d49e:	f003 0320 	and.w	r3, r3, #32
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d003      	beq.n	800d4ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 f9f0 	bl	800d88c <UART_Receive_IT>
      return;
 800d4ac:	e0cc      	b.n	800d648 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 80ab 	beq.w	800d60c <HAL_UART_IRQHandler+0x1b0>
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	f003 0301 	and.w	r3, r3, #1
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d105      	bne.n	800d4cc <HAL_UART_IRQHandler+0x70>
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	f000 80a0 	beq.w	800d60c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00a      	beq.n	800d4ec <HAL_UART_IRQHandler+0x90>
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d005      	beq.n	800d4ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e4:	f043 0201 	orr.w	r2, r3, #1
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	f003 0304 	and.w	r3, r3, #4
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00a      	beq.n	800d50c <HAL_UART_IRQHandler+0xb0>
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	f003 0301 	and.w	r3, r3, #1
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d005      	beq.n	800d50c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d504:	f043 0202 	orr.w	r2, r3, #2
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	f003 0302 	and.w	r3, r3, #2
 800d512:	2b00      	cmp	r3, #0
 800d514:	d00a      	beq.n	800d52c <HAL_UART_IRQHandler+0xd0>
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	f003 0301 	and.w	r3, r3, #1
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d005      	beq.n	800d52c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d524:	f043 0204 	orr.w	r2, r3, #4
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	f003 0308 	and.w	r3, r3, #8
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00a      	beq.n	800d54c <HAL_UART_IRQHandler+0xf0>
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	f003 0301 	and.w	r3, r3, #1
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d005      	beq.n	800d54c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d544:	f043 0208 	orr.w	r2, r3, #8
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d550:	2b00      	cmp	r3, #0
 800d552:	d078      	beq.n	800d646 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	f003 0320 	and.w	r3, r3, #32
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d007      	beq.n	800d56e <HAL_UART_IRQHandler+0x112>
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	f003 0320 	and.w	r3, r3, #32
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f98f 	bl	800d88c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	695b      	ldr	r3, [r3, #20]
 800d574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d578:	2b40      	cmp	r3, #64	; 0x40
 800d57a:	bf0c      	ite	eq
 800d57c:	2301      	moveq	r3, #1
 800d57e:	2300      	movne	r3, #0
 800d580:	b2db      	uxtb	r3, r3
 800d582:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d588:	f003 0308 	and.w	r3, r3, #8
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d102      	bne.n	800d596 <HAL_UART_IRQHandler+0x13a>
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d031      	beq.n	800d5fa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 f8d8 	bl	800d74c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	695b      	ldr	r3, [r3, #20]
 800d5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5a6:	2b40      	cmp	r3, #64	; 0x40
 800d5a8:	d123      	bne.n	800d5f2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	695a      	ldr	r2, [r3, #20]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d013      	beq.n	800d5ea <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c6:	4a22      	ldr	r2, [pc, #136]	; (800d650 <HAL_UART_IRQHandler+0x1f4>)
 800d5c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7f9 fc8c 	bl	8006eec <HAL_DMA_Abort_IT>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d016      	beq.n	800d608 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d5e4:	4610      	mov	r0, r2
 800d5e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5e8:	e00e      	b.n	800d608 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f83c 	bl	800d668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5f0:	e00a      	b.n	800d608 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 f838 	bl	800d668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5f8:	e006      	b.n	800d608 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 f834 	bl	800d668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800d606:	e01e      	b.n	800d646 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d608:	bf00      	nop
    return;
 800d60a:	e01c      	b.n	800d646 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d612:	2b00      	cmp	r3, #0
 800d614:	d008      	beq.n	800d628 <HAL_UART_IRQHandler+0x1cc>
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d003      	beq.n	800d628 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 f8c5 	bl	800d7b0 <UART_Transmit_IT>
    return;
 800d626:	e00f      	b.n	800d648 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00a      	beq.n	800d648 <HAL_UART_IRQHandler+0x1ec>
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d005      	beq.n	800d648 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 f90d 	bl	800d85c <UART_EndTransmit_IT>
    return;
 800d642:	bf00      	nop
 800d644:	e000      	b.n	800d648 <HAL_UART_IRQHandler+0x1ec>
    return;
 800d646:	bf00      	nop
  }
}
 800d648:	3720      	adds	r7, #32
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	0800d789 	.word	0x0800d789

0800d654 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800d684:	2300      	movs	r3, #0
 800d686:	60fb      	str	r3, [r7, #12]
 800d688:	2300      	movs	r3, #0
 800d68a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d692:	b2db      	uxtb	r3, r3
 800d694:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	b2db      	uxtb	r3, r3
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3714      	adds	r7, #20
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	603b      	str	r3, [r7, #0]
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6c8:	e02c      	b.n	800d724 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d0:	d028      	beq.n	800d724 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d007      	beq.n	800d6e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d6d8:	f7f9 f9ba 	bl	8006a50 <HAL_GetTick>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	1ad3      	subs	r3, r2, r3
 800d6e2:	69ba      	ldr	r2, [r7, #24]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d21d      	bcs.n	800d724 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	68da      	ldr	r2, [r3, #12]
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d6f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	695a      	ldr	r2, [r3, #20]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f022 0201 	bic.w	r2, r2, #1
 800d706:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2220      	movs	r2, #32
 800d70c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2220      	movs	r2, #32
 800d714:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2200      	movs	r2, #0
 800d71c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800d720:	2303      	movs	r3, #3
 800d722:	e00f      	b.n	800d744 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	4013      	ands	r3, r2
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	429a      	cmp	r2, r3
 800d732:	bf0c      	ite	eq
 800d734:	2301      	moveq	r3, #1
 800d736:	2300      	movne	r3, #0
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	461a      	mov	r2, r3
 800d73c:	79fb      	ldrb	r3, [r7, #7]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d0c3      	beq.n	800d6ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d742:	2300      	movs	r3, #0
}
 800d744:	4618      	mov	r0, r3
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68da      	ldr	r2, [r3, #12]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d762:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	695a      	ldr	r2, [r3, #20]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f022 0201 	bic.w	r2, r2, #1
 800d772:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2220      	movs	r2, #32
 800d778:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2200      	movs	r2, #0
 800d79a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7a2:	68f8      	ldr	r0, [r7, #12]
 800d7a4:	f7ff ff60 	bl	800d668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7a8:	bf00      	nop
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	2b21      	cmp	r3, #33	; 0x21
 800d7c2:	d144      	bne.n	800d84e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7cc:	d11a      	bne.n	800d804 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a1b      	ldr	r3, [r3, #32]
 800d7d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	881b      	ldrh	r3, [r3, #0]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d7e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	691b      	ldr	r3, [r3, #16]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d105      	bne.n	800d7f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a1b      	ldr	r3, [r3, #32]
 800d7f0:	1c9a      	adds	r2, r3, #2
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	621a      	str	r2, [r3, #32]
 800d7f6:	e00e      	b.n	800d816 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6a1b      	ldr	r3, [r3, #32]
 800d7fc:	1c5a      	adds	r2, r3, #1
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	621a      	str	r2, [r3, #32]
 800d802:	e008      	b.n	800d816 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6a1b      	ldr	r3, [r3, #32]
 800d808:	1c59      	adds	r1, r3, #1
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	6211      	str	r1, [r2, #32]
 800d80e:	781a      	ldrb	r2, [r3, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	3b01      	subs	r3, #1
 800d81e:	b29b      	uxth	r3, r3
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	4619      	mov	r1, r3
 800d824:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d826:	2b00      	cmp	r3, #0
 800d828:	d10f      	bne.n	800d84a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	68da      	ldr	r2, [r3, #12]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d838:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68da      	ldr	r2, [r3, #12]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d848:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	e000      	b.n	800d850 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d84e:	2302      	movs	r3, #2
  }
}
 800d850:	4618      	mov	r0, r3
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	68da      	ldr	r2, [r3, #12]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d872:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2220      	movs	r2, #32
 800d878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f7ff fee9 	bl	800d654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	2b22      	cmp	r3, #34	; 0x22
 800d89e:	d171      	bne.n	800d984 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8a8:	d123      	bne.n	800d8f2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	691b      	ldr	r3, [r3, #16]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d10e      	bne.n	800d8d6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ce:	1c9a      	adds	r2, r3, #2
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	629a      	str	r2, [r3, #40]	; 0x28
 800d8d4:	e029      	b.n	800d92a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	b29a      	uxth	r2, r3
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ea:	1c5a      	adds	r2, r3, #1
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	629a      	str	r2, [r3, #40]	; 0x28
 800d8f0:	e01b      	b.n	800d92a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	691b      	ldr	r3, [r3, #16]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d10a      	bne.n	800d910 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	6858      	ldr	r0, [r3, #4]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d904:	1c59      	adds	r1, r3, #1
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	6291      	str	r1, [r2, #40]	; 0x28
 800d90a:	b2c2      	uxtb	r2, r0
 800d90c:	701a      	strb	r2, [r3, #0]
 800d90e:	e00c      	b.n	800d92a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	b2da      	uxtb	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d91c:	1c58      	adds	r0, r3, #1
 800d91e:	6879      	ldr	r1, [r7, #4]
 800d920:	6288      	str	r0, [r1, #40]	; 0x28
 800d922:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d926:	b2d2      	uxtb	r2, r2
 800d928:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d92e:	b29b      	uxth	r3, r3
 800d930:	3b01      	subs	r3, #1
 800d932:	b29b      	uxth	r3, r3
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	4619      	mov	r1, r3
 800d938:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d120      	bne.n	800d980 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68da      	ldr	r2, [r3, #12]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f022 0220 	bic.w	r2, r2, #32
 800d94c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d95c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	695a      	ldr	r2, [r3, #20]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f022 0201 	bic.w	r2, r2, #1
 800d96c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2220      	movs	r2, #32
 800d972:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f009 f8d8 	bl	8016b2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d97c:	2300      	movs	r3, #0
 800d97e:	e002      	b.n	800d986 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d980:	2300      	movs	r3, #0
 800d982:	e000      	b.n	800d986 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d984:	2302      	movs	r3, #2
  }
}
 800d986:	4618      	mov	r0, r3
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
	...

0800d990 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d990:	b5b0      	push	{r4, r5, r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	68da      	ldr	r2, [r3, #12]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	430a      	orrs	r2, r1
 800d9ac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	689a      	ldr	r2, [r3, #8]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	431a      	orrs	r2, r3
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	695b      	ldr	r3, [r3, #20]
 800d9bc:	431a      	orrs	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	69db      	ldr	r3, [r3, #28]
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d9d0:	f023 030c 	bic.w	r3, r3, #12
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	6812      	ldr	r2, [r2, #0]
 800d9d8:	68f9      	ldr	r1, [r7, #12]
 800d9da:	430b      	orrs	r3, r1
 800d9dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	695b      	ldr	r3, [r3, #20]
 800d9e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	699a      	ldr	r2, [r3, #24]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	430a      	orrs	r2, r1
 800d9f2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	69db      	ldr	r3, [r3, #28]
 800d9f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9fc:	f040 80e4 	bne.w	800dbc8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4aab      	ldr	r2, [pc, #684]	; (800dcb4 <UART_SetConfig+0x324>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d004      	beq.n	800da14 <UART_SetConfig+0x84>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4aaa      	ldr	r2, [pc, #680]	; (800dcb8 <UART_SetConfig+0x328>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d16c      	bne.n	800daee <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800da14:	f7fc fbda 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800da18:	4602      	mov	r2, r0
 800da1a:	4613      	mov	r3, r2
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	4413      	add	r3, r2
 800da20:	009a      	lsls	r2, r3, #2
 800da22:	441a      	add	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	005b      	lsls	r3, r3, #1
 800da2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da2e:	4aa3      	ldr	r2, [pc, #652]	; (800dcbc <UART_SetConfig+0x32c>)
 800da30:	fba2 2303 	umull	r2, r3, r2, r3
 800da34:	095b      	lsrs	r3, r3, #5
 800da36:	011c      	lsls	r4, r3, #4
 800da38:	f7fc fbc8 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800da3c:	4602      	mov	r2, r0
 800da3e:	4613      	mov	r3, r2
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	4413      	add	r3, r2
 800da44:	009a      	lsls	r2, r3, #2
 800da46:	441a      	add	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	005b      	lsls	r3, r3, #1
 800da4e:	fbb2 f5f3 	udiv	r5, r2, r3
 800da52:	f7fc fbbb 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800da56:	4602      	mov	r2, r0
 800da58:	4613      	mov	r3, r2
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	4413      	add	r3, r2
 800da5e:	009a      	lsls	r2, r3, #2
 800da60:	441a      	add	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	005b      	lsls	r3, r3, #1
 800da68:	fbb2 f3f3 	udiv	r3, r2, r3
 800da6c:	4a93      	ldr	r2, [pc, #588]	; (800dcbc <UART_SetConfig+0x32c>)
 800da6e:	fba2 2303 	umull	r2, r3, r2, r3
 800da72:	095b      	lsrs	r3, r3, #5
 800da74:	2264      	movs	r2, #100	; 0x64
 800da76:	fb02 f303 	mul.w	r3, r2, r3
 800da7a:	1aeb      	subs	r3, r5, r3
 800da7c:	00db      	lsls	r3, r3, #3
 800da7e:	3332      	adds	r3, #50	; 0x32
 800da80:	4a8e      	ldr	r2, [pc, #568]	; (800dcbc <UART_SetConfig+0x32c>)
 800da82:	fba2 2303 	umull	r2, r3, r2, r3
 800da86:	095b      	lsrs	r3, r3, #5
 800da88:	005b      	lsls	r3, r3, #1
 800da8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800da8e:	441c      	add	r4, r3
 800da90:	f7fc fb9c 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800da94:	4602      	mov	r2, r0
 800da96:	4613      	mov	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	009a      	lsls	r2, r3, #2
 800da9e:	441a      	add	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	005b      	lsls	r3, r3, #1
 800daa6:	fbb2 f5f3 	udiv	r5, r2, r3
 800daaa:	f7fc fb8f 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800daae:	4602      	mov	r2, r0
 800dab0:	4613      	mov	r3, r2
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	4413      	add	r3, r2
 800dab6:	009a      	lsls	r2, r3, #2
 800dab8:	441a      	add	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	005b      	lsls	r3, r3, #1
 800dac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dac4:	4a7d      	ldr	r2, [pc, #500]	; (800dcbc <UART_SetConfig+0x32c>)
 800dac6:	fba2 2303 	umull	r2, r3, r2, r3
 800daca:	095b      	lsrs	r3, r3, #5
 800dacc:	2264      	movs	r2, #100	; 0x64
 800dace:	fb02 f303 	mul.w	r3, r2, r3
 800dad2:	1aeb      	subs	r3, r5, r3
 800dad4:	00db      	lsls	r3, r3, #3
 800dad6:	3332      	adds	r3, #50	; 0x32
 800dad8:	4a78      	ldr	r2, [pc, #480]	; (800dcbc <UART_SetConfig+0x32c>)
 800dada:	fba2 2303 	umull	r2, r3, r2, r3
 800dade:	095b      	lsrs	r3, r3, #5
 800dae0:	f003 0207 	and.w	r2, r3, #7
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4422      	add	r2, r4
 800daea:	609a      	str	r2, [r3, #8]
 800daec:	e154      	b.n	800dd98 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800daee:	f7fc fb59 	bl	800a1a4 <HAL_RCC_GetPCLK1Freq>
 800daf2:	4602      	mov	r2, r0
 800daf4:	4613      	mov	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4413      	add	r3, r2
 800dafa:	009a      	lsls	r2, r3, #2
 800dafc:	441a      	add	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	fbb2 f3f3 	udiv	r3, r2, r3
 800db08:	4a6c      	ldr	r2, [pc, #432]	; (800dcbc <UART_SetConfig+0x32c>)
 800db0a:	fba2 2303 	umull	r2, r3, r2, r3
 800db0e:	095b      	lsrs	r3, r3, #5
 800db10:	011c      	lsls	r4, r3, #4
 800db12:	f7fc fb47 	bl	800a1a4 <HAL_RCC_GetPCLK1Freq>
 800db16:	4602      	mov	r2, r0
 800db18:	4613      	mov	r3, r2
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	4413      	add	r3, r2
 800db1e:	009a      	lsls	r2, r3, #2
 800db20:	441a      	add	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	005b      	lsls	r3, r3, #1
 800db28:	fbb2 f5f3 	udiv	r5, r2, r3
 800db2c:	f7fc fb3a 	bl	800a1a4 <HAL_RCC_GetPCLK1Freq>
 800db30:	4602      	mov	r2, r0
 800db32:	4613      	mov	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	4413      	add	r3, r2
 800db38:	009a      	lsls	r2, r3, #2
 800db3a:	441a      	add	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	005b      	lsls	r3, r3, #1
 800db42:	fbb2 f3f3 	udiv	r3, r2, r3
 800db46:	4a5d      	ldr	r2, [pc, #372]	; (800dcbc <UART_SetConfig+0x32c>)
 800db48:	fba2 2303 	umull	r2, r3, r2, r3
 800db4c:	095b      	lsrs	r3, r3, #5
 800db4e:	2264      	movs	r2, #100	; 0x64
 800db50:	fb02 f303 	mul.w	r3, r2, r3
 800db54:	1aeb      	subs	r3, r5, r3
 800db56:	00db      	lsls	r3, r3, #3
 800db58:	3332      	adds	r3, #50	; 0x32
 800db5a:	4a58      	ldr	r2, [pc, #352]	; (800dcbc <UART_SetConfig+0x32c>)
 800db5c:	fba2 2303 	umull	r2, r3, r2, r3
 800db60:	095b      	lsrs	r3, r3, #5
 800db62:	005b      	lsls	r3, r3, #1
 800db64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800db68:	441c      	add	r4, r3
 800db6a:	f7fc fb1b 	bl	800a1a4 <HAL_RCC_GetPCLK1Freq>
 800db6e:	4602      	mov	r2, r0
 800db70:	4613      	mov	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4413      	add	r3, r2
 800db76:	009a      	lsls	r2, r3, #2
 800db78:	441a      	add	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	005b      	lsls	r3, r3, #1
 800db80:	fbb2 f5f3 	udiv	r5, r2, r3
 800db84:	f7fc fb0e 	bl	800a1a4 <HAL_RCC_GetPCLK1Freq>
 800db88:	4602      	mov	r2, r0
 800db8a:	4613      	mov	r3, r2
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4413      	add	r3, r2
 800db90:	009a      	lsls	r2, r3, #2
 800db92:	441a      	add	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	005b      	lsls	r3, r3, #1
 800db9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db9e:	4a47      	ldr	r2, [pc, #284]	; (800dcbc <UART_SetConfig+0x32c>)
 800dba0:	fba2 2303 	umull	r2, r3, r2, r3
 800dba4:	095b      	lsrs	r3, r3, #5
 800dba6:	2264      	movs	r2, #100	; 0x64
 800dba8:	fb02 f303 	mul.w	r3, r2, r3
 800dbac:	1aeb      	subs	r3, r5, r3
 800dbae:	00db      	lsls	r3, r3, #3
 800dbb0:	3332      	adds	r3, #50	; 0x32
 800dbb2:	4a42      	ldr	r2, [pc, #264]	; (800dcbc <UART_SetConfig+0x32c>)
 800dbb4:	fba2 2303 	umull	r2, r3, r2, r3
 800dbb8:	095b      	lsrs	r3, r3, #5
 800dbba:	f003 0207 	and.w	r2, r3, #7
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4422      	add	r2, r4
 800dbc4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800dbc6:	e0e7      	b.n	800dd98 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4a39      	ldr	r2, [pc, #228]	; (800dcb4 <UART_SetConfig+0x324>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d004      	beq.n	800dbdc <UART_SetConfig+0x24c>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4a38      	ldr	r2, [pc, #224]	; (800dcb8 <UART_SetConfig+0x328>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d171      	bne.n	800dcc0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800dbdc:	f7fc faf6 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	4613      	mov	r3, r2
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	4413      	add	r3, r2
 800dbe8:	009a      	lsls	r2, r3, #2
 800dbea:	441a      	add	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbf6:	4a31      	ldr	r2, [pc, #196]	; (800dcbc <UART_SetConfig+0x32c>)
 800dbf8:	fba2 2303 	umull	r2, r3, r2, r3
 800dbfc:	095b      	lsrs	r3, r3, #5
 800dbfe:	011c      	lsls	r4, r3, #4
 800dc00:	f7fc fae4 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800dc04:	4602      	mov	r2, r0
 800dc06:	4613      	mov	r3, r2
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	4413      	add	r3, r2
 800dc0c:	009a      	lsls	r2, r3, #2
 800dc0e:	441a      	add	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	fbb2 f5f3 	udiv	r5, r2, r3
 800dc1a:	f7fc fad7 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	4613      	mov	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4413      	add	r3, r2
 800dc26:	009a      	lsls	r2, r3, #2
 800dc28:	441a      	add	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc34:	4a21      	ldr	r2, [pc, #132]	; (800dcbc <UART_SetConfig+0x32c>)
 800dc36:	fba2 2303 	umull	r2, r3, r2, r3
 800dc3a:	095b      	lsrs	r3, r3, #5
 800dc3c:	2264      	movs	r2, #100	; 0x64
 800dc3e:	fb02 f303 	mul.w	r3, r2, r3
 800dc42:	1aeb      	subs	r3, r5, r3
 800dc44:	011b      	lsls	r3, r3, #4
 800dc46:	3332      	adds	r3, #50	; 0x32
 800dc48:	4a1c      	ldr	r2, [pc, #112]	; (800dcbc <UART_SetConfig+0x32c>)
 800dc4a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc4e:	095b      	lsrs	r3, r3, #5
 800dc50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc54:	441c      	add	r4, r3
 800dc56:	f7fc fab9 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	4413      	add	r3, r2
 800dc62:	009a      	lsls	r2, r3, #2
 800dc64:	441a      	add	r2, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	fbb2 f5f3 	udiv	r5, r2, r3
 800dc70:	f7fc faac 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800dc74:	4602      	mov	r2, r0
 800dc76:	4613      	mov	r3, r2
 800dc78:	009b      	lsls	r3, r3, #2
 800dc7a:	4413      	add	r3, r2
 800dc7c:	009a      	lsls	r2, r3, #2
 800dc7e:	441a      	add	r2, r3
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc8a:	4a0c      	ldr	r2, [pc, #48]	; (800dcbc <UART_SetConfig+0x32c>)
 800dc8c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc90:	095b      	lsrs	r3, r3, #5
 800dc92:	2264      	movs	r2, #100	; 0x64
 800dc94:	fb02 f303 	mul.w	r3, r2, r3
 800dc98:	1aeb      	subs	r3, r5, r3
 800dc9a:	011b      	lsls	r3, r3, #4
 800dc9c:	3332      	adds	r3, #50	; 0x32
 800dc9e:	4a07      	ldr	r2, [pc, #28]	; (800dcbc <UART_SetConfig+0x32c>)
 800dca0:	fba2 2303 	umull	r2, r3, r2, r3
 800dca4:	095b      	lsrs	r3, r3, #5
 800dca6:	f003 020f 	and.w	r2, r3, #15
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4422      	add	r2, r4
 800dcb0:	609a      	str	r2, [r3, #8]
 800dcb2:	e071      	b.n	800dd98 <UART_SetConfig+0x408>
 800dcb4:	40011000 	.word	0x40011000
 800dcb8:	40011400 	.word	0x40011400
 800dcbc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800dcc0:	f7fc fa70 	bl	800a1a4 <HAL_RCC_GetPCLK1Freq>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4413      	add	r3, r2
 800dccc:	009a      	lsls	r2, r3, #2
 800dcce:	441a      	add	r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcda:	4a31      	ldr	r2, [pc, #196]	; (800dda0 <UART_SetConfig+0x410>)
 800dcdc:	fba2 2303 	umull	r2, r3, r2, r3
 800dce0:	095b      	lsrs	r3, r3, #5
 800dce2:	011c      	lsls	r4, r3, #4
 800dce4:	f7fc fa5e 	bl	800a1a4 <HAL_RCC_GetPCLK1Freq>
 800dce8:	4602      	mov	r2, r0
 800dcea:	4613      	mov	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	4413      	add	r3, r2
 800dcf0:	009a      	lsls	r2, r3, #2
 800dcf2:	441a      	add	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	fbb2 f5f3 	udiv	r5, r2, r3
 800dcfe:	f7fc fa51 	bl	800a1a4 <HAL_RCC_GetPCLK1Freq>
 800dd02:	4602      	mov	r2, r0
 800dd04:	4613      	mov	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	4413      	add	r3, r2
 800dd0a:	009a      	lsls	r2, r3, #2
 800dd0c:	441a      	add	r2, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd18:	4a21      	ldr	r2, [pc, #132]	; (800dda0 <UART_SetConfig+0x410>)
 800dd1a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd1e:	095b      	lsrs	r3, r3, #5
 800dd20:	2264      	movs	r2, #100	; 0x64
 800dd22:	fb02 f303 	mul.w	r3, r2, r3
 800dd26:	1aeb      	subs	r3, r5, r3
 800dd28:	011b      	lsls	r3, r3, #4
 800dd2a:	3332      	adds	r3, #50	; 0x32
 800dd2c:	4a1c      	ldr	r2, [pc, #112]	; (800dda0 <UART_SetConfig+0x410>)
 800dd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd32:	095b      	lsrs	r3, r3, #5
 800dd34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd38:	441c      	add	r4, r3
 800dd3a:	f7fc fa33 	bl	800a1a4 <HAL_RCC_GetPCLK1Freq>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	4613      	mov	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4413      	add	r3, r2
 800dd46:	009a      	lsls	r2, r3, #2
 800dd48:	441a      	add	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	fbb2 f5f3 	udiv	r5, r2, r3
 800dd54:	f7fc fa26 	bl	800a1a4 <HAL_RCC_GetPCLK1Freq>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4413      	add	r3, r2
 800dd60:	009a      	lsls	r2, r3, #2
 800dd62:	441a      	add	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd6e:	4a0c      	ldr	r2, [pc, #48]	; (800dda0 <UART_SetConfig+0x410>)
 800dd70:	fba2 2303 	umull	r2, r3, r2, r3
 800dd74:	095b      	lsrs	r3, r3, #5
 800dd76:	2264      	movs	r2, #100	; 0x64
 800dd78:	fb02 f303 	mul.w	r3, r2, r3
 800dd7c:	1aeb      	subs	r3, r5, r3
 800dd7e:	011b      	lsls	r3, r3, #4
 800dd80:	3332      	adds	r3, #50	; 0x32
 800dd82:	4a07      	ldr	r2, [pc, #28]	; (800dda0 <UART_SetConfig+0x410>)
 800dd84:	fba2 2303 	umull	r2, r3, r2, r3
 800dd88:	095b      	lsrs	r3, r3, #5
 800dd8a:	f003 020f 	and.w	r2, r3, #15
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4422      	add	r2, r4
 800dd94:	609a      	str	r2, [r3, #8]
}
 800dd96:	e7ff      	b.n	800dd98 <UART_SetConfig+0x408>
 800dd98:	bf00      	nop
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bdb0      	pop	{r4, r5, r7, pc}
 800dda0:	51eb851f 	.word	0x51eb851f

0800dda4 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800dda4:	b084      	sub	sp, #16
 800dda6:	b480      	push	{r7}
 800dda8:	b085      	sub	sp, #20
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	f107 001c 	add.w	r0, r7, #28
 800ddb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ddba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ddbe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ddc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ddc2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ddc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ddc6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ddca:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ddce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ddde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	431a      	orrs	r2, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3714      	adds	r7, #20
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	b004      	add	sp, #16
 800ddf8:	4770      	bx	lr

0800ddfa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ddfa:	b480      	push	{r7}
 800ddfc:	b083      	sub	sp, #12
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800de08:	4618      	mov	r0, r3
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	681a      	ldr	r2, [r3, #0]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	370c      	adds	r7, #12
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr

0800de36 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800de36:	b480      	push	{r7}
 800de38:	b083      	sub	sp, #12
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2203      	movs	r2, #3
 800de42:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800de44:	2300      	movs	r3, #0
}
 800de46:	4618      	mov	r0, r3
 800de48:	370c      	adds	r7, #12
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr

0800de52 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800de52:	b480      	push	{r7}
 800de54:	b083      	sub	sp, #12
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f003 0303 	and.w	r3, r3, #3
}
 800de62:	4618      	mov	r0, r3
 800de64:	370c      	adds	r7, #12
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800de6e:	b480      	push	{r7}
 800de70:	b085      	sub	sp, #20
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
 800de76:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800de78:	2300      	movs	r3, #0
 800de7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de8c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800de92:	431a      	orrs	r2, r3
                       Command->CPSM);
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800de98:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dea8:	f023 030f 	bic.w	r3, r3, #15
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	431a      	orrs	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3714      	adds	r7, #20
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr

0800dec2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800dec2:	b480      	push	{r7}
 800dec4:	b083      	sub	sp, #12
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	b2db      	uxtb	r3, r3
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800dedc:	b480      	push	{r7}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800dee6:	2300      	movs	r3, #0
 800dee8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	3314      	adds	r3, #20
 800deee:	461a      	mov	r2, r3
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	4413      	add	r3, r2
 800def4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
}  
 800defa:	4618      	mov	r0, r3
 800defc:	3714      	adds	r7, #20
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800df06:	b480      	push	{r7}
 800df08:	b085      	sub	sp, #20
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
 800df0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800df10:	2300      	movs	r3, #0
 800df12:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	685a      	ldr	r2, [r3, #4]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df2c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800df32:	431a      	orrs	r2, r3
                       Data->DPSM);
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800df38:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	4313      	orrs	r3, r2
 800df3e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df44:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	431a      	orrs	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800df50:	2300      	movs	r3, #0

}
 800df52:	4618      	mov	r0, r3
 800df54:	3714      	adds	r7, #20
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr

0800df5e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b088      	sub	sp, #32
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
 800df66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800df68:	2300      	movs	r3, #0
 800df6a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800df70:	2310      	movs	r3, #16
 800df72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df74:	2340      	movs	r3, #64	; 0x40
 800df76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df78:	2300      	movs	r3, #0
 800df7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df80:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df82:	f107 0308 	add.w	r3, r7, #8
 800df86:	4619      	mov	r1, r3
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f7ff ff70 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800df8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800df92:	2110      	movs	r1, #16
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 fa63 	bl	800e460 <SDMMC_GetCmdResp1>
 800df9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df9c:	69fb      	ldr	r3, [r7, #28]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3720      	adds	r7, #32
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dfa6:	b580      	push	{r7, lr}
 800dfa8:	b088      	sub	sp, #32
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dfb8:	2311      	movs	r3, #17
 800dfba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfbc:	2340      	movs	r3, #64	; 0x40
 800dfbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfc8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfca:	f107 0308 	add.w	r3, r7, #8
 800dfce:	4619      	mov	r1, r3
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7ff ff4c 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dfd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfda:	2111      	movs	r1, #17
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 fa3f 	bl	800e460 <SDMMC_GetCmdResp1>
 800dfe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfe4:	69fb      	ldr	r3, [r7, #28]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3720      	adds	r7, #32
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b088      	sub	sp, #32
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dff8:	2300      	movs	r3, #0
 800dffa:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e000:	2312      	movs	r3, #18
 800e002:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e004:	2340      	movs	r3, #64	; 0x40
 800e006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e008:	2300      	movs	r3, #0
 800e00a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e00c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e010:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e012:	f107 0308 	add.w	r3, r7, #8
 800e016:	4619      	mov	r1, r3
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7ff ff28 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e01e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e022:	2112      	movs	r1, #18
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fa1b 	bl	800e460 <SDMMC_GetCmdResp1>
 800e02a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e02c:	69fb      	ldr	r3, [r7, #28]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3720      	adds	r7, #32
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b088      	sub	sp, #32
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
 800e03e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e040:	2300      	movs	r3, #0
 800e042:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e048:	2318      	movs	r3, #24
 800e04a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e04c:	2340      	movs	r3, #64	; 0x40
 800e04e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e050:	2300      	movs	r3, #0
 800e052:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e058:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e05a:	f107 0308 	add.w	r3, r7, #8
 800e05e:	4619      	mov	r1, r3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7ff ff04 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e066:	f241 3288 	movw	r2, #5000	; 0x1388
 800e06a:	2118      	movs	r1, #24
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f000 f9f7 	bl	800e460 <SDMMC_GetCmdResp1>
 800e072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e074:	69fb      	ldr	r3, [r7, #28]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3720      	adds	r7, #32
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b088      	sub	sp, #32
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e088:	2300      	movs	r3, #0
 800e08a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e090:	2319      	movs	r3, #25
 800e092:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e094:	2340      	movs	r3, #64	; 0x40
 800e096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e098:	2300      	movs	r3, #0
 800e09a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0a0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0a2:	f107 0308 	add.w	r3, r7, #8
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7ff fee0 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e0ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0b2:	2119      	movs	r1, #25
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 f9d3 	bl	800e460 <SDMMC_GetCmdResp1>
 800e0ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0bc:	69fb      	ldr	r3, [r7, #28]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3720      	adds	r7, #32
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
	...

0800e0c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b088      	sub	sp, #32
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e0d8:	230c      	movs	r3, #12
 800e0da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0dc:	2340      	movs	r3, #64	; 0x40
 800e0de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0e8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0ea:	f107 0308 	add.w	r3, r7, #8
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f7ff febc 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800e0f6:	4a05      	ldr	r2, [pc, #20]	; (800e10c <SDMMC_CmdStopTransfer+0x44>)
 800e0f8:	210c      	movs	r1, #12
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 f9b0 	bl	800e460 <SDMMC_GetCmdResp1>
 800e100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e102:	69fb      	ldr	r3, [r7, #28]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3720      	adds	r7, #32
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	05f5e100 	.word	0x05f5e100

0800e110 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b08a      	sub	sp, #40	; 0x28
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e11c:	2300      	movs	r3, #0
 800e11e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e124:	2307      	movs	r3, #7
 800e126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e128:	2340      	movs	r3, #64	; 0x40
 800e12a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e12c:	2300      	movs	r3, #0
 800e12e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e134:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e136:	f107 0310 	add.w	r3, r7, #16
 800e13a:	4619      	mov	r1, r3
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f7ff fe96 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e142:	f241 3288 	movw	r2, #5000	; 0x1388
 800e146:	2107      	movs	r1, #7
 800e148:	68f8      	ldr	r0, [r7, #12]
 800e14a:	f000 f989 	bl	800e460 <SDMMC_GetCmdResp1>
 800e14e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e152:	4618      	mov	r0, r3
 800e154:	3728      	adds	r7, #40	; 0x28
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b088      	sub	sp, #32
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e162:	2300      	movs	r3, #0
 800e164:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e16a:	2300      	movs	r3, #0
 800e16c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e16e:	2300      	movs	r3, #0
 800e170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e172:	2300      	movs	r3, #0
 800e174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e17a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e17c:	f107 0308 	add.w	r3, r7, #8
 800e180:	4619      	mov	r1, r3
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7ff fe73 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 f93f 	bl	800e40c <SDMMC_GetCmdError>
 800e18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e190:	69fb      	ldr	r3, [r7, #28]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3720      	adds	r7, #32
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b088      	sub	sp, #32
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e1a6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e1aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e1ac:	2308      	movs	r3, #8
 800e1ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1b0:	2340      	movs	r3, #64	; 0x40
 800e1b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1bc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1be:	f107 0308 	add.w	r3, r7, #8
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f7ff fe52 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 fb10 	bl	800e7f0 <SDMMC_GetCmdResp7>
 800e1d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1d2:	69fb      	ldr	r3, [r7, #28]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3720      	adds	r7, #32
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b088      	sub	sp, #32
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e1ee:	2337      	movs	r3, #55	; 0x37
 800e1f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1f2:	2340      	movs	r3, #64	; 0x40
 800e1f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1fe:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e200:	f107 0308 	add.w	r3, r7, #8
 800e204:	4619      	mov	r1, r3
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7ff fe31 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e20c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e210:	2137      	movs	r1, #55	; 0x37
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f924 	bl	800e460 <SDMMC_GetCmdResp1>
 800e218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e21a:	69fb      	ldr	r3, [r7, #28]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3720      	adds	r7, #32
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e22e:	2300      	movs	r3, #0
 800e230:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e23e:	2329      	movs	r3, #41	; 0x29
 800e240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e242:	2340      	movs	r3, #64	; 0x40
 800e244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e246:	2300      	movs	r3, #0
 800e248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e24e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e250:	f107 0308 	add.w	r3, r7, #8
 800e254:	4619      	mov	r1, r3
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f7ff fe09 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 fa25 	bl	800e6ac <SDMMC_GetCmdResp3>
 800e262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e264:	69fb      	ldr	r3, [r7, #28]
}
 800e266:	4618      	mov	r0, r3
 800e268:	3720      	adds	r7, #32
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e26e:	b580      	push	{r7, lr}
 800e270:	b088      	sub	sp, #32
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e278:	2300      	movs	r3, #0
 800e27a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e280:	2306      	movs	r3, #6
 800e282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e284:	2340      	movs	r3, #64	; 0x40
 800e286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e288:	2300      	movs	r3, #0
 800e28a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e28c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e290:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e292:	f107 0308 	add.w	r3, r7, #8
 800e296:	4619      	mov	r1, r3
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f7ff fde8 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e29e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2a2:	2106      	movs	r1, #6
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f8db 	bl	800e460 <SDMMC_GetCmdResp1>
 800e2aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ac:	69fb      	ldr	r3, [r7, #28]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3720      	adds	r7, #32
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e2b6:	b580      	push	{r7, lr}
 800e2b8:	b088      	sub	sp, #32
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e2c6:	2333      	movs	r3, #51	; 0x33
 800e2c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2ca:	2340      	movs	r3, #64	; 0x40
 800e2cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2d6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2d8:	f107 0308 	add.w	r3, r7, #8
 800e2dc:	4619      	mov	r1, r3
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff fdc5 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e2e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2e8:	2133      	movs	r1, #51	; 0x33
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 f8b8 	bl	800e460 <SDMMC_GetCmdResp1>
 800e2f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2f2:	69fb      	ldr	r3, [r7, #28]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3720      	adds	r7, #32
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b088      	sub	sp, #32
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e304:	2300      	movs	r3, #0
 800e306:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e308:	2300      	movs	r3, #0
 800e30a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e30c:	2302      	movs	r3, #2
 800e30e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e310:	23c0      	movs	r3, #192	; 0xc0
 800e312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e314:	2300      	movs	r3, #0
 800e316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e31c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e31e:	f107 0308 	add.w	r3, r7, #8
 800e322:	4619      	mov	r1, r3
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7ff fda2 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 f97e 	bl	800e62c <SDMMC_GetCmdResp2>
 800e330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e332:	69fb      	ldr	r3, [r7, #28]
}
 800e334:	4618      	mov	r0, r3
 800e336:	3720      	adds	r7, #32
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b088      	sub	sp, #32
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e346:	2300      	movs	r3, #0
 800e348:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e34e:	2309      	movs	r3, #9
 800e350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e352:	23c0      	movs	r3, #192	; 0xc0
 800e354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e356:	2300      	movs	r3, #0
 800e358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e35a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e35e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e360:	f107 0308 	add.w	r3, r7, #8
 800e364:	4619      	mov	r1, r3
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f7ff fd81 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f000 f95d 	bl	800e62c <SDMMC_GetCmdResp2>
 800e372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e374:	69fb      	ldr	r3, [r7, #28]
}
 800e376:	4618      	mov	r0, r3
 800e378:	3720      	adds	r7, #32
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}

0800e37e <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b088      	sub	sp, #32
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
 800e386:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e388:	2300      	movs	r3, #0
 800e38a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e38c:	2300      	movs	r3, #0
 800e38e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e390:	2303      	movs	r3, #3
 800e392:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e394:	2340      	movs	r3, #64	; 0x40
 800e396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e398:	2300      	movs	r3, #0
 800e39a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e39c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3a0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3a2:	f107 0308 	add.w	r3, r7, #8
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f7ff fd60 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e3ae:	683a      	ldr	r2, [r7, #0]
 800e3b0:	2103      	movs	r1, #3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 f9ae 	bl	800e714 <SDMMC_GetCmdResp6>
 800e3b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3ba:	69fb      	ldr	r3, [r7, #28]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3720      	adds	r7, #32
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b088      	sub	sp, #32
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e3d6:	230d      	movs	r3, #13
 800e3d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3da:	2340      	movs	r3, #64	; 0x40
 800e3dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3e6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3e8:	f107 0308 	add.w	r3, r7, #8
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7ff fd3d 	bl	800de6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3f8:	210d      	movs	r1, #13
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f830 	bl	800e460 <SDMMC_GetCmdResp1>
 800e400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e402:	69fb      	ldr	r3, [r7, #28]
}
 800e404:	4618      	mov	r0, r3
 800e406:	3720      	adds	r7, #32
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e40c:	b490      	push	{r4, r7}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e414:	4b10      	ldr	r3, [pc, #64]	; (800e458 <SDMMC_GetCmdError+0x4c>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4a10      	ldr	r2, [pc, #64]	; (800e45c <SDMMC_GetCmdError+0x50>)
 800e41a:	fba2 2303 	umull	r2, r3, r2, r3
 800e41e:	0a5b      	lsrs	r3, r3, #9
 800e420:	f241 3288 	movw	r2, #5000	; 0x1388
 800e424:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e428:	4623      	mov	r3, r4
 800e42a:	1e5c      	subs	r4, r3, #1
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d102      	bne.n	800e436 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e434:	e00a      	b.n	800e44c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d0f2      	beq.n	800e428 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e448:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bc90      	pop	{r4, r7}
 800e454:	4770      	bx	lr
 800e456:	bf00      	nop
 800e458:	20000170 	.word	0x20000170
 800e45c:	10624dd3 	.word	0x10624dd3

0800e460 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e460:	b590      	push	{r4, r7, lr}
 800e462:	b087      	sub	sp, #28
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	460b      	mov	r3, r1
 800e46a:	607a      	str	r2, [r7, #4]
 800e46c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e46e:	4b6c      	ldr	r3, [pc, #432]	; (800e620 <SDMMC_GetCmdResp1+0x1c0>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4a6c      	ldr	r2, [pc, #432]	; (800e624 <SDMMC_GetCmdResp1+0x1c4>)
 800e474:	fba2 2303 	umull	r2, r3, r2, r3
 800e478:	0a5b      	lsrs	r3, r3, #9
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e480:	4623      	mov	r3, r4
 800e482:	1e5c      	subs	r4, r3, #1
 800e484:	2b00      	cmp	r3, #0
 800e486:	d102      	bne.n	800e48e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e48c:	e0c3      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e492:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e496:	2b00      	cmp	r3, #0
 800e498:	d0f2      	beq.n	800e480 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e49e:	f003 0304 	and.w	r3, r3, #4
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d004      	beq.n	800e4b0 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2204      	movs	r2, #4
 800e4aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4ac:	2304      	movs	r3, #4
 800e4ae:	e0b2      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4b4:	f003 0301 	and.w	r3, r3, #1
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d004      	beq.n	800e4c6 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e0a7      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	f7ff fcfb 	bl	800dec2 <SDIO_GetCommandResponse>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	7afb      	ldrb	r3, [r7, #11]
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d001      	beq.n	800e4da <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e09d      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e4e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e4e2:	2100      	movs	r1, #0
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f7ff fcf9 	bl	800dedc <SDIO_GetResponse>
 800e4ea:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e4ec:	697a      	ldr	r2, [r7, #20]
 800e4ee:	4b4e      	ldr	r3, [pc, #312]	; (800e628 <SDMMC_GetCmdResp1+0x1c8>)
 800e4f0:	4013      	ands	r3, r2
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d101      	bne.n	800e4fa <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	e08d      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	da02      	bge.n	800e506 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e504:	e087      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d001      	beq.n	800e514 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e510:	2340      	movs	r3, #64	; 0x40
 800e512:	e080      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d001      	beq.n	800e522 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e51e:	2380      	movs	r3, #128	; 0x80
 800e520:	e079      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d002      	beq.n	800e532 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e52c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e530:	e071      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e53c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e540:	e069      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d002      	beq.n	800e552 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e54c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e550:	e061      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d002      	beq.n	800e562 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e55c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e560:	e059      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d002      	beq.n	800e572 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e56c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e570:	e051      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d002      	beq.n	800e582 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e57c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e580:	e049      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e58c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e590:	e041      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800e59c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5a0:	e039      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e5ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e5b0:	e031      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d002      	beq.n	800e5c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e5bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e5c0:	e029      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e5cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e5d0:	e021      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e5dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e5e0:	e019      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d002      	beq.n	800e5f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e5ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e5f0:	e011      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e5fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e600:	e009      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	f003 0308 	and.w	r3, r3, #8
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e60c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e610:	e001      	b.n	800e616 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e616:	4618      	mov	r0, r3
 800e618:	371c      	adds	r7, #28
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd90      	pop	{r4, r7, pc}
 800e61e:	bf00      	nop
 800e620:	20000170 	.word	0x20000170
 800e624:	10624dd3 	.word	0x10624dd3
 800e628:	fdffe008 	.word	0xfdffe008

0800e62c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e62c:	b490      	push	{r4, r7}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e634:	4b1b      	ldr	r3, [pc, #108]	; (800e6a4 <SDMMC_GetCmdResp2+0x78>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4a1b      	ldr	r2, [pc, #108]	; (800e6a8 <SDMMC_GetCmdResp2+0x7c>)
 800e63a:	fba2 2303 	umull	r2, r3, r2, r3
 800e63e:	0a5b      	lsrs	r3, r3, #9
 800e640:	f241 3288 	movw	r2, #5000	; 0x1388
 800e644:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e648:	4623      	mov	r3, r4
 800e64a:	1e5c      	subs	r4, r3, #1
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d102      	bne.n	800e656 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e650:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e654:	e020      	b.n	800e698 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e65a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d0f2      	beq.n	800e648 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e666:	f003 0304 	and.w	r3, r3, #4
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d004      	beq.n	800e678 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2204      	movs	r2, #4
 800e672:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e674:	2304      	movs	r3, #4
 800e676:	e00f      	b.n	800e698 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e67c:	f003 0301 	and.w	r3, r3, #1
 800e680:	2b00      	cmp	r3, #0
 800e682:	d004      	beq.n	800e68e <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2201      	movs	r2, #1
 800e688:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e68a:	2301      	movs	r3, #1
 800e68c:	e004      	b.n	800e698 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e694:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e696:	2300      	movs	r3, #0
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bc90      	pop	{r4, r7}
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	20000170 	.word	0x20000170
 800e6a8:	10624dd3 	.word	0x10624dd3

0800e6ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e6ac:	b490      	push	{r4, r7}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e6b4:	4b15      	ldr	r3, [pc, #84]	; (800e70c <SDMMC_GetCmdResp3+0x60>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a15      	ldr	r2, [pc, #84]	; (800e710 <SDMMC_GetCmdResp3+0x64>)
 800e6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800e6be:	0a5b      	lsrs	r3, r3, #9
 800e6c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e6c8:	4623      	mov	r3, r4
 800e6ca:	1e5c      	subs	r4, r3, #1
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d102      	bne.n	800e6d6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e6d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6d4:	e015      	b.n	800e702 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6da:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d0f2      	beq.n	800e6c8 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6e6:	f003 0304 	and.w	r3, r3, #4
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d004      	beq.n	800e6f8 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2204      	movs	r2, #4
 800e6f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6f4:	2304      	movs	r3, #4
 800e6f6:	e004      	b.n	800e702 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e6fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e700:	2300      	movs	r3, #0
}
 800e702:	4618      	mov	r0, r3
 800e704:	3708      	adds	r7, #8
 800e706:	46bd      	mov	sp, r7
 800e708:	bc90      	pop	{r4, r7}
 800e70a:	4770      	bx	lr
 800e70c:	20000170 	.word	0x20000170
 800e710:	10624dd3 	.word	0x10624dd3

0800e714 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e714:	b590      	push	{r4, r7, lr}
 800e716:	b087      	sub	sp, #28
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	460b      	mov	r3, r1
 800e71e:	607a      	str	r2, [r7, #4]
 800e720:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e722:	4b31      	ldr	r3, [pc, #196]	; (800e7e8 <SDMMC_GetCmdResp6+0xd4>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4a31      	ldr	r2, [pc, #196]	; (800e7ec <SDMMC_GetCmdResp6+0xd8>)
 800e728:	fba2 2303 	umull	r2, r3, r2, r3
 800e72c:	0a5b      	lsrs	r3, r3, #9
 800e72e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e732:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e736:	4623      	mov	r3, r4
 800e738:	1e5c      	subs	r4, r3, #1
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d102      	bne.n	800e744 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e73e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e742:	e04c      	b.n	800e7de <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e748:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d0f2      	beq.n	800e736 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e754:	f003 0304 	and.w	r3, r3, #4
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d004      	beq.n	800e766 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2204      	movs	r2, #4
 800e760:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e762:	2304      	movs	r3, #4
 800e764:	e03b      	b.n	800e7de <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e76a:	f003 0301 	and.w	r3, r3, #1
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d004      	beq.n	800e77c <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2201      	movs	r2, #1
 800e776:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e778:	2301      	movs	r3, #1
 800e77a:	e030      	b.n	800e7de <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f7ff fba0 	bl	800dec2 <SDIO_GetCommandResponse>
 800e782:	4603      	mov	r3, r0
 800e784:	461a      	mov	r2, r3
 800e786:	7afb      	ldrb	r3, [r7, #11]
 800e788:	4293      	cmp	r3, r2
 800e78a:	d001      	beq.n	800e790 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e78c:	2301      	movs	r3, #1
 800e78e:	e026      	b.n	800e7de <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e796:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e798:	2100      	movs	r1, #0
 800e79a:	68f8      	ldr	r0, [r7, #12]
 800e79c:	f7ff fb9e 	bl	800dedc <SDIO_GetResponse>
 800e7a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d106      	bne.n	800e7ba <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	0c1b      	lsrs	r3, r3, #16
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	e011      	b.n	800e7de <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e7c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7c8:	e009      	b.n	800e7de <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d002      	beq.n	800e7da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e7d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e7d8:	e001      	b.n	800e7de <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e7da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	371c      	adds	r7, #28
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd90      	pop	{r4, r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20000170 	.word	0x20000170
 800e7ec:	10624dd3 	.word	0x10624dd3

0800e7f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e7f0:	b490      	push	{r4, r7}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7f8:	4b18      	ldr	r3, [pc, #96]	; (800e85c <SDMMC_GetCmdResp7+0x6c>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a18      	ldr	r2, [pc, #96]	; (800e860 <SDMMC_GetCmdResp7+0x70>)
 800e7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e802:	0a5b      	lsrs	r3, r3, #9
 800e804:	f241 3288 	movw	r2, #5000	; 0x1388
 800e808:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e80c:	4623      	mov	r3, r4
 800e80e:	1e5c      	subs	r4, r3, #1
 800e810:	2b00      	cmp	r3, #0
 800e812:	d102      	bne.n	800e81a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e814:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e818:	e01a      	b.n	800e850 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e81e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e822:	2b00      	cmp	r3, #0
 800e824:	d0f2      	beq.n	800e80c <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e82a:	f003 0304 	and.w	r3, r3, #4
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d004      	beq.n	800e83c <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2240      	movs	r2, #64	; 0x40
 800e836:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e838:	2304      	movs	r3, #4
 800e83a:	e009      	b.n	800e850 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e844:	2b00      	cmp	r3, #0
 800e846:	d002      	beq.n	800e84e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2240      	movs	r2, #64	; 0x40
 800e84c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e84e:	2300      	movs	r3, #0
  
}
 800e850:	4618      	mov	r0, r3
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bc90      	pop	{r4, r7}
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	20000170 	.word	0x20000170
 800e860:	10624dd3 	.word	0x10624dd3

0800e864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e864:	b084      	sub	sp, #16
 800e866:	b580      	push	{r7, lr}
 800e868:	b084      	sub	sp, #16
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	f107 001c 	add.w	r0, r7, #28
 800e872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d122      	bne.n	800e8c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e8a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d105      	bne.n	800e8b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f001 fa7c 	bl	800fdb4 <USB_CoreReset>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	73fb      	strb	r3, [r7, #15]
 800e8c0:	e01a      	b.n	800e8f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f001 fa70 	bl	800fdb4 <USB_CoreReset>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d106      	bne.n	800e8ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	639a      	str	r2, [r3, #56]	; 0x38
 800e8ea:	e005      	b.n	800e8f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d10b      	bne.n	800e916 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	f043 0206 	orr.w	r2, r3, #6
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	f043 0220 	orr.w	r2, r3, #32
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e916:	7bfb      	ldrb	r3, [r7, #15]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e922:	b004      	add	sp, #16
 800e924:	4770      	bx	lr
	...

0800e928 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e928:	b480      	push	{r7}
 800e92a:	b087      	sub	sp, #28
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	4613      	mov	r3, r2
 800e934:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e936:	79fb      	ldrb	r3, [r7, #7]
 800e938:	2b02      	cmp	r3, #2
 800e93a:	d165      	bne.n	800ea08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	4a41      	ldr	r2, [pc, #260]	; (800ea44 <USB_SetTurnaroundTime+0x11c>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d906      	bls.n	800e952 <USB_SetTurnaroundTime+0x2a>
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	4a40      	ldr	r2, [pc, #256]	; (800ea48 <USB_SetTurnaroundTime+0x120>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d802      	bhi.n	800e952 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e94c:	230f      	movs	r3, #15
 800e94e:	617b      	str	r3, [r7, #20]
 800e950:	e062      	b.n	800ea18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	4a3c      	ldr	r2, [pc, #240]	; (800ea48 <USB_SetTurnaroundTime+0x120>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d906      	bls.n	800e968 <USB_SetTurnaroundTime+0x40>
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	4a3b      	ldr	r2, [pc, #236]	; (800ea4c <USB_SetTurnaroundTime+0x124>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d802      	bhi.n	800e968 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e962:	230e      	movs	r3, #14
 800e964:	617b      	str	r3, [r7, #20]
 800e966:	e057      	b.n	800ea18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	4a38      	ldr	r2, [pc, #224]	; (800ea4c <USB_SetTurnaroundTime+0x124>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d906      	bls.n	800e97e <USB_SetTurnaroundTime+0x56>
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	4a37      	ldr	r2, [pc, #220]	; (800ea50 <USB_SetTurnaroundTime+0x128>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d802      	bhi.n	800e97e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e978:	230d      	movs	r3, #13
 800e97a:	617b      	str	r3, [r7, #20]
 800e97c:	e04c      	b.n	800ea18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	4a33      	ldr	r2, [pc, #204]	; (800ea50 <USB_SetTurnaroundTime+0x128>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d906      	bls.n	800e994 <USB_SetTurnaroundTime+0x6c>
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	4a32      	ldr	r2, [pc, #200]	; (800ea54 <USB_SetTurnaroundTime+0x12c>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d802      	bhi.n	800e994 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e98e:	230c      	movs	r3, #12
 800e990:	617b      	str	r3, [r7, #20]
 800e992:	e041      	b.n	800ea18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	4a2f      	ldr	r2, [pc, #188]	; (800ea54 <USB_SetTurnaroundTime+0x12c>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	d906      	bls.n	800e9aa <USB_SetTurnaroundTime+0x82>
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	4a2e      	ldr	r2, [pc, #184]	; (800ea58 <USB_SetTurnaroundTime+0x130>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d802      	bhi.n	800e9aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e9a4:	230b      	movs	r3, #11
 800e9a6:	617b      	str	r3, [r7, #20]
 800e9a8:	e036      	b.n	800ea18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	4a2a      	ldr	r2, [pc, #168]	; (800ea58 <USB_SetTurnaroundTime+0x130>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	d906      	bls.n	800e9c0 <USB_SetTurnaroundTime+0x98>
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	4a29      	ldr	r2, [pc, #164]	; (800ea5c <USB_SetTurnaroundTime+0x134>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d802      	bhi.n	800e9c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e9ba:	230a      	movs	r3, #10
 800e9bc:	617b      	str	r3, [r7, #20]
 800e9be:	e02b      	b.n	800ea18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	4a26      	ldr	r2, [pc, #152]	; (800ea5c <USB_SetTurnaroundTime+0x134>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d906      	bls.n	800e9d6 <USB_SetTurnaroundTime+0xae>
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	4a25      	ldr	r2, [pc, #148]	; (800ea60 <USB_SetTurnaroundTime+0x138>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d802      	bhi.n	800e9d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e9d0:	2309      	movs	r3, #9
 800e9d2:	617b      	str	r3, [r7, #20]
 800e9d4:	e020      	b.n	800ea18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	4a21      	ldr	r2, [pc, #132]	; (800ea60 <USB_SetTurnaroundTime+0x138>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d906      	bls.n	800e9ec <USB_SetTurnaroundTime+0xc4>
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	4a20      	ldr	r2, [pc, #128]	; (800ea64 <USB_SetTurnaroundTime+0x13c>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d802      	bhi.n	800e9ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e9e6:	2308      	movs	r3, #8
 800e9e8:	617b      	str	r3, [r7, #20]
 800e9ea:	e015      	b.n	800ea18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	4a1d      	ldr	r2, [pc, #116]	; (800ea64 <USB_SetTurnaroundTime+0x13c>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d906      	bls.n	800ea02 <USB_SetTurnaroundTime+0xda>
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	4a1c      	ldr	r2, [pc, #112]	; (800ea68 <USB_SetTurnaroundTime+0x140>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d802      	bhi.n	800ea02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e9fc:	2307      	movs	r3, #7
 800e9fe:	617b      	str	r3, [r7, #20]
 800ea00:	e00a      	b.n	800ea18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ea02:	2306      	movs	r3, #6
 800ea04:	617b      	str	r3, [r7, #20]
 800ea06:	e007      	b.n	800ea18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ea08:	79fb      	ldrb	r3, [r7, #7]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d102      	bne.n	800ea14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ea0e:	2309      	movs	r3, #9
 800ea10:	617b      	str	r3, [r7, #20]
 800ea12:	e001      	b.n	800ea18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ea14:	2309      	movs	r3, #9
 800ea16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	68da      	ldr	r2, [r3, #12]
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	029b      	lsls	r3, r3, #10
 800ea2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ea30:	431a      	orrs	r2, r3
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ea36:	2300      	movs	r3, #0
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	371c      	adds	r7, #28
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr
 800ea44:	00d8acbf 	.word	0x00d8acbf
 800ea48:	00e4e1bf 	.word	0x00e4e1bf
 800ea4c:	00f423ff 	.word	0x00f423ff
 800ea50:	0106737f 	.word	0x0106737f
 800ea54:	011a499f 	.word	0x011a499f
 800ea58:	01312cff 	.word	0x01312cff
 800ea5c:	014ca43f 	.word	0x014ca43f
 800ea60:	016e35ff 	.word	0x016e35ff
 800ea64:	01a6ab1f 	.word	0x01a6ab1f
 800ea68:	01e847ff 	.word	0x01e847ff

0800ea6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	f043 0201 	orr.w	r2, r3, #1
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	370c      	adds	r7, #12
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr

0800ea8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea8e:	b480      	push	{r7}
 800ea90:	b083      	sub	sp, #12
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	689b      	ldr	r3, [r3, #8]
 800ea9a:	f023 0201 	bic.w	r2, r3, #1
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	460b      	mov	r3, r1
 800eaba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800eac8:	78fb      	ldrb	r3, [r7, #3]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d106      	bne.n	800eadc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	60da      	str	r2, [r3, #12]
 800eada:	e00b      	b.n	800eaf4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800eadc:	78fb      	ldrb	r3, [r7, #3]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d106      	bne.n	800eaf0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	60da      	str	r2, [r3, #12]
 800eaee:	e001      	b.n	800eaf4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e003      	b.n	800eafc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800eaf4:	2032      	movs	r0, #50	; 0x32
 800eaf6:	f7f7 ffb7 	bl	8006a68 <HAL_Delay>

  return HAL_OK;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb04:	b084      	sub	sp, #16
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b086      	sub	sp, #24
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
 800eb0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800eb12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800eb16:	2300      	movs	r3, #0
 800eb18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800eb1e:	2300      	movs	r3, #0
 800eb20:	613b      	str	r3, [r7, #16]
 800eb22:	e009      	b.n	800eb38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	3340      	adds	r3, #64	; 0x40
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	4413      	add	r3, r2
 800eb2e:	2200      	movs	r2, #0
 800eb30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	3301      	adds	r3, #1
 800eb36:	613b      	str	r3, [r7, #16]
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	2b0e      	cmp	r3, #14
 800eb3c:	d9f2      	bls.n	800eb24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800eb3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d112      	bne.n	800eb6a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb54:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb60:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	639a      	str	r2, [r3, #56]	; 0x38
 800eb68:	e00b      	b.n	800eb82 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb88:	461a      	mov	r2, r3
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb94:	4619      	mov	r1, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	680b      	ldr	r3, [r1, #0]
 800eba0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d10c      	bne.n	800ebc2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d104      	bne.n	800ebb8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ebae:	2100      	movs	r1, #0
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 f961 	bl	800ee78 <USB_SetDevSpeed>
 800ebb6:	e008      	b.n	800ebca <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ebb8:	2101      	movs	r1, #1
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 f95c 	bl	800ee78 <USB_SetDevSpeed>
 800ebc0:	e003      	b.n	800ebca <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ebc2:	2103      	movs	r1, #3
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 f957 	bl	800ee78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ebca:	2110      	movs	r1, #16
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 f90b 	bl	800ede8 <USB_FlushTxFifo>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d001      	beq.n	800ebdc <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 f929 	bl	800ee34 <USB_FlushRxFifo>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d001      	beq.n	800ebec <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800ebe8:	2301      	movs	r3, #1
 800ebea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebfe:	461a      	mov	r2, r3
 800ec00:	2300      	movs	r3, #0
 800ec02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec10:	2300      	movs	r3, #0
 800ec12:	613b      	str	r3, [r7, #16]
 800ec14:	e043      	b.n	800ec9e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	015a      	lsls	r2, r3, #5
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec2c:	d118      	bne.n	800ec60 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d10a      	bne.n	800ec4a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	015a      	lsls	r2, r3, #5
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec40:	461a      	mov	r2, r3
 800ec42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec46:	6013      	str	r3, [r2, #0]
 800ec48:	e013      	b.n	800ec72 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	015a      	lsls	r2, r3, #5
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	4413      	add	r3, r2
 800ec52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec56:	461a      	mov	r2, r3
 800ec58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ec5c:	6013      	str	r3, [r2, #0]
 800ec5e:	e008      	b.n	800ec72 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	015a      	lsls	r2, r3, #5
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	4413      	add	r3, r2
 800ec68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	2300      	movs	r3, #0
 800ec70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	015a      	lsls	r2, r3, #5
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	4413      	add	r3, r2
 800ec7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec7e:	461a      	mov	r2, r3
 800ec80:	2300      	movs	r3, #0
 800ec82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	015a      	lsls	r2, r3, #5
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec90:	461a      	mov	r2, r3
 800ec92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ec96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	613b      	str	r3, [r7, #16]
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca0:	693a      	ldr	r2, [r7, #16]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d3b7      	bcc.n	800ec16 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eca6:	2300      	movs	r3, #0
 800eca8:	613b      	str	r3, [r7, #16]
 800ecaa:	e043      	b.n	800ed34 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	015a      	lsls	r2, r3, #5
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ecbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ecc2:	d118      	bne.n	800ecf6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d10a      	bne.n	800ece0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	015a      	lsls	r2, r3, #5
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	4413      	add	r3, r2
 800ecd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ecdc:	6013      	str	r3, [r2, #0]
 800ecde:	e013      	b.n	800ed08 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	015a      	lsls	r2, r3, #5
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	4413      	add	r3, r2
 800ece8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecec:	461a      	mov	r2, r3
 800ecee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ecf2:	6013      	str	r3, [r2, #0]
 800ecf4:	e008      	b.n	800ed08 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	015a      	lsls	r2, r3, #5
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed02:	461a      	mov	r2, r3
 800ed04:	2300      	movs	r3, #0
 800ed06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	015a      	lsls	r2, r3, #5
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	4413      	add	r3, r2
 800ed10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed14:	461a      	mov	r2, r3
 800ed16:	2300      	movs	r3, #0
 800ed18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	015a      	lsls	r2, r3, #5
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	4413      	add	r3, r2
 800ed22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed26:	461a      	mov	r2, r3
 800ed28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ed2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	3301      	adds	r3, #1
 800ed32:	613b      	str	r3, [r7, #16]
 800ed34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed36:	693a      	ldr	r2, [r7, #16]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d3b7      	bcc.n	800ecac <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed42:	691b      	ldr	r3, [r3, #16]
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed4e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800ed50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d111      	bne.n	800ed7a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	4b20      	ldr	r3, [pc, #128]	; (800ede0 <USB_DevInit+0x2dc>)
 800ed60:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ed74:	f043 0303 	orr.w	r3, r3, #3
 800ed78:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ed86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ed88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d105      	bne.n	800ed9a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	699b      	ldr	r3, [r3, #24]
 800ed92:	f043 0210 	orr.w	r2, r3, #16
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	699a      	ldr	r2, [r3, #24]
 800ed9e:	4b11      	ldr	r3, [pc, #68]	; (800ede4 <USB_DevInit+0x2e0>)
 800eda0:	4313      	orrs	r3, r2
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800eda6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d005      	beq.n	800edb8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	699b      	ldr	r3, [r3, #24]
 800edb0:	f043 0208 	orr.w	r2, r3, #8
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800edb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d107      	bne.n	800edce <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	699b      	ldr	r3, [r3, #24]
 800edc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800edc6:	f043 0304 	orr.w	r3, r3, #4
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800edce:	7dfb      	ldrb	r3, [r7, #23]
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3718      	adds	r7, #24
 800edd4:	46bd      	mov	sp, r7
 800edd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800edda:	b004      	add	sp, #16
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	00800100 	.word	0x00800100
 800ede4:	803c3800 	.word	0x803c3800

0800ede8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ede8:	b480      	push	{r7}
 800edea:	b085      	sub	sp, #20
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800edf2:	2300      	movs	r3, #0
 800edf4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	019b      	lsls	r3, r3, #6
 800edfa:	f043 0220 	orr.w	r2, r3, #32
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	3301      	adds	r3, #1
 800ee06:	60fb      	str	r3, [r7, #12]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	4a09      	ldr	r2, [pc, #36]	; (800ee30 <USB_FlushTxFifo+0x48>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d901      	bls.n	800ee14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ee10:	2303      	movs	r3, #3
 800ee12:	e006      	b.n	800ee22 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	691b      	ldr	r3, [r3, #16]
 800ee18:	f003 0320 	and.w	r3, r3, #32
 800ee1c:	2b20      	cmp	r3, #32
 800ee1e:	d0f0      	beq.n	800ee02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3714      	adds	r7, #20
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop
 800ee30:	00030d40 	.word	0x00030d40

0800ee34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b085      	sub	sp, #20
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2210      	movs	r2, #16
 800ee44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	60fb      	str	r3, [r7, #12]
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	4a09      	ldr	r2, [pc, #36]	; (800ee74 <USB_FlushRxFifo+0x40>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d901      	bls.n	800ee58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ee54:	2303      	movs	r3, #3
 800ee56:	e006      	b.n	800ee66 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	691b      	ldr	r3, [r3, #16]
 800ee5c:	f003 0310 	and.w	r3, r3, #16
 800ee60:	2b10      	cmp	r3, #16
 800ee62:	d0f0      	beq.n	800ee46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ee64:	2300      	movs	r3, #0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3714      	adds	r7, #20
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr
 800ee72:	bf00      	nop
 800ee74:	00030d40 	.word	0x00030d40

0800ee78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b085      	sub	sp, #20
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	460b      	mov	r3, r1
 800ee82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	78fb      	ldrb	r3, [r7, #3]
 800ee92:	68f9      	ldr	r1, [r7, #12]
 800ee94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee98:	4313      	orrs	r3, r2
 800ee9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ee9c:	2300      	movs	r3, #0
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3714      	adds	r7, #20
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr

0800eeaa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800eeaa:	b480      	push	{r7}
 800eeac:	b087      	sub	sp, #28
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eebc:	689b      	ldr	r3, [r3, #8]
 800eebe:	f003 0306 	and.w	r3, r3, #6
 800eec2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d102      	bne.n	800eed0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800eeca:	2300      	movs	r3, #0
 800eecc:	75fb      	strb	r3, [r7, #23]
 800eece:	e00a      	b.n	800eee6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2b02      	cmp	r3, #2
 800eed4:	d002      	beq.n	800eedc <USB_GetDevSpeed+0x32>
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2b06      	cmp	r3, #6
 800eeda:	d102      	bne.n	800eee2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800eedc:	2302      	movs	r3, #2
 800eede:	75fb      	strb	r3, [r7, #23]
 800eee0:	e001      	b.n	800eee6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800eee2:	230f      	movs	r3, #15
 800eee4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800eee6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	371c      	adds	r7, #28
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	785b      	ldrb	r3, [r3, #1]
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d13a      	bne.n	800ef86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef16:	69da      	ldr	r2, [r3, #28]
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	f003 030f 	and.w	r3, r3, #15
 800ef20:	2101      	movs	r1, #1
 800ef22:	fa01 f303 	lsl.w	r3, r1, r3
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	68f9      	ldr	r1, [r7, #12]
 800ef2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	015a      	lsls	r2, r3, #5
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	4413      	add	r3, r2
 800ef3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d155      	bne.n	800eff4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	015a      	lsls	r2, r3, #5
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	4413      	add	r3, r2
 800ef50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	689b      	ldr	r3, [r3, #8]
 800ef5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	78db      	ldrb	r3, [r3, #3]
 800ef62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	059b      	lsls	r3, r3, #22
 800ef6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef6c:	4313      	orrs	r3, r2
 800ef6e:	68ba      	ldr	r2, [r7, #8]
 800ef70:	0151      	lsls	r1, r2, #5
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	440a      	add	r2, r1
 800ef76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef82:	6013      	str	r3, [r2, #0]
 800ef84:	e036      	b.n	800eff4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef8c:	69da      	ldr	r2, [r3, #28]
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	f003 030f 	and.w	r3, r3, #15
 800ef96:	2101      	movs	r1, #1
 800ef98:	fa01 f303 	lsl.w	r3, r1, r3
 800ef9c:	041b      	lsls	r3, r3, #16
 800ef9e:	68f9      	ldr	r1, [r7, #12]
 800efa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efa4:	4313      	orrs	r3, r2
 800efa6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	015a      	lsls	r2, r3, #5
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	4413      	add	r3, r2
 800efb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d11a      	bne.n	800eff4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	015a      	lsls	r2, r3, #5
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	4413      	add	r3, r2
 800efc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	78db      	ldrb	r3, [r3, #3]
 800efd8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800efda:	430b      	orrs	r3, r1
 800efdc:	4313      	orrs	r3, r2
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	0151      	lsls	r1, r2, #5
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	440a      	add	r2, r1
 800efe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800efea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800efee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eff2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800eff4:	2300      	movs	r3, #0
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3714      	adds	r7, #20
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr
	...

0800f004 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	785b      	ldrb	r3, [r3, #1]
 800f01c:	2b01      	cmp	r3, #1
 800f01e:	d135      	bne.n	800f08c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	f003 030f 	and.w	r3, r3, #15
 800f030:	2101      	movs	r1, #1
 800f032:	fa01 f303 	lsl.w	r3, r1, r3
 800f036:	b29b      	uxth	r3, r3
 800f038:	43db      	mvns	r3, r3
 800f03a:	68f9      	ldr	r1, [r7, #12]
 800f03c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f040:	4013      	ands	r3, r2
 800f042:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f04a:	69da      	ldr	r2, [r3, #28]
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	f003 030f 	and.w	r3, r3, #15
 800f054:	2101      	movs	r1, #1
 800f056:	fa01 f303 	lsl.w	r3, r1, r3
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	43db      	mvns	r3, r3
 800f05e:	68f9      	ldr	r1, [r7, #12]
 800f060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f064:	4013      	ands	r3, r2
 800f066:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	015a      	lsls	r2, r3, #5
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	4413      	add	r3, r2
 800f070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	0159      	lsls	r1, r3, #5
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	440b      	add	r3, r1
 800f07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f082:	4619      	mov	r1, r3
 800f084:	4b1f      	ldr	r3, [pc, #124]	; (800f104 <USB_DeactivateEndpoint+0x100>)
 800f086:	4013      	ands	r3, r2
 800f088:	600b      	str	r3, [r1, #0]
 800f08a:	e034      	b.n	800f0f6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	f003 030f 	and.w	r3, r3, #15
 800f09c:	2101      	movs	r1, #1
 800f09e:	fa01 f303 	lsl.w	r3, r1, r3
 800f0a2:	041b      	lsls	r3, r3, #16
 800f0a4:	43db      	mvns	r3, r3
 800f0a6:	68f9      	ldr	r1, [r7, #12]
 800f0a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f0ac:	4013      	ands	r3, r2
 800f0ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0b6:	69da      	ldr	r2, [r3, #28]
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	f003 030f 	and.w	r3, r3, #15
 800f0c0:	2101      	movs	r1, #1
 800f0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800f0c6:	041b      	lsls	r3, r3, #16
 800f0c8:	43db      	mvns	r3, r3
 800f0ca:	68f9      	ldr	r1, [r7, #12]
 800f0cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	015a      	lsls	r2, r3, #5
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	4413      	add	r3, r2
 800f0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	0159      	lsls	r1, r3, #5
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	440b      	add	r3, r1
 800f0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	4b05      	ldr	r3, [pc, #20]	; (800f108 <USB_DeactivateEndpoint+0x104>)
 800f0f2:	4013      	ands	r3, r2
 800f0f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f0f6:	2300      	movs	r3, #0
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3714      	adds	r7, #20
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr
 800f104:	ec337800 	.word	0xec337800
 800f108:	eff37800 	.word	0xeff37800

0800f10c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b08a      	sub	sp, #40	; 0x28
 800f110:	af02      	add	r7, sp, #8
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	4613      	mov	r3, r2
 800f118:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	785b      	ldrb	r3, [r3, #1]
 800f128:	2b01      	cmp	r3, #1
 800f12a:	f040 815c 	bne.w	800f3e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d132      	bne.n	800f19c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	015a      	lsls	r2, r3, #5
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	4413      	add	r3, r2
 800f13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f142:	691b      	ldr	r3, [r3, #16]
 800f144:	69ba      	ldr	r2, [r7, #24]
 800f146:	0151      	lsls	r1, r2, #5
 800f148:	69fa      	ldr	r2, [r7, #28]
 800f14a:	440a      	add	r2, r1
 800f14c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f158:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f15a:	69bb      	ldr	r3, [r7, #24]
 800f15c:	015a      	lsls	r2, r3, #5
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	4413      	add	r3, r2
 800f162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f166:	691b      	ldr	r3, [r3, #16]
 800f168:	69ba      	ldr	r2, [r7, #24]
 800f16a:	0151      	lsls	r1, r2, #5
 800f16c:	69fa      	ldr	r2, [r7, #28]
 800f16e:	440a      	add	r2, r1
 800f170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f178:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	015a      	lsls	r2, r3, #5
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	4413      	add	r3, r2
 800f182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f186:	691b      	ldr	r3, [r3, #16]
 800f188:	69ba      	ldr	r2, [r7, #24]
 800f18a:	0151      	lsls	r1, r2, #5
 800f18c:	69fa      	ldr	r2, [r7, #28]
 800f18e:	440a      	add	r2, r1
 800f190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f194:	0cdb      	lsrs	r3, r3, #19
 800f196:	04db      	lsls	r3, r3, #19
 800f198:	6113      	str	r3, [r2, #16]
 800f19a:	e074      	b.n	800f286 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f19c:	69bb      	ldr	r3, [r7, #24]
 800f19e:	015a      	lsls	r2, r3, #5
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	4413      	add	r3, r2
 800f1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1a8:	691b      	ldr	r3, [r3, #16]
 800f1aa:	69ba      	ldr	r2, [r7, #24]
 800f1ac:	0151      	lsls	r1, r2, #5
 800f1ae:	69fa      	ldr	r2, [r7, #28]
 800f1b0:	440a      	add	r2, r1
 800f1b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1b6:	0cdb      	lsrs	r3, r3, #19
 800f1b8:	04db      	lsls	r3, r3, #19
 800f1ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1bc:	69bb      	ldr	r3, [r7, #24]
 800f1be:	015a      	lsls	r2, r3, #5
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1c8:	691b      	ldr	r3, [r3, #16]
 800f1ca:	69ba      	ldr	r2, [r7, #24]
 800f1cc:	0151      	lsls	r1, r2, #5
 800f1ce:	69fa      	ldr	r2, [r7, #28]
 800f1d0:	440a      	add	r2, r1
 800f1d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f1da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f1de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f1e0:	69bb      	ldr	r3, [r7, #24]
 800f1e2:	015a      	lsls	r2, r3, #5
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	4413      	add	r3, r2
 800f1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1ec:	691a      	ldr	r2, [r3, #16]
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	6959      	ldr	r1, [r3, #20]
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	440b      	add	r3, r1
 800f1f8:	1e59      	subs	r1, r3, #1
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	689b      	ldr	r3, [r3, #8]
 800f1fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800f202:	04d9      	lsls	r1, r3, #19
 800f204:	4b9d      	ldr	r3, [pc, #628]	; (800f47c <USB_EPStartXfer+0x370>)
 800f206:	400b      	ands	r3, r1
 800f208:	69b9      	ldr	r1, [r7, #24]
 800f20a:	0148      	lsls	r0, r1, #5
 800f20c:	69f9      	ldr	r1, [r7, #28]
 800f20e:	4401      	add	r1, r0
 800f210:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f214:	4313      	orrs	r3, r2
 800f216:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f218:	69bb      	ldr	r3, [r7, #24]
 800f21a:	015a      	lsls	r2, r3, #5
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	4413      	add	r3, r2
 800f220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f224:	691a      	ldr	r2, [r3, #16]
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	695b      	ldr	r3, [r3, #20]
 800f22a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f22e:	69b9      	ldr	r1, [r7, #24]
 800f230:	0148      	lsls	r0, r1, #5
 800f232:	69f9      	ldr	r1, [r7, #28]
 800f234:	4401      	add	r1, r0
 800f236:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f23a:	4313      	orrs	r3, r2
 800f23c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	78db      	ldrb	r3, [r3, #3]
 800f242:	2b01      	cmp	r3, #1
 800f244:	d11f      	bne.n	800f286 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	015a      	lsls	r2, r3, #5
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	4413      	add	r3, r2
 800f24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f252:	691b      	ldr	r3, [r3, #16]
 800f254:	69ba      	ldr	r2, [r7, #24]
 800f256:	0151      	lsls	r1, r2, #5
 800f258:	69fa      	ldr	r2, [r7, #28]
 800f25a:	440a      	add	r2, r1
 800f25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f260:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f264:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	015a      	lsls	r2, r3, #5
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	4413      	add	r3, r2
 800f26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f272:	691b      	ldr	r3, [r3, #16]
 800f274:	69ba      	ldr	r2, [r7, #24]
 800f276:	0151      	lsls	r1, r2, #5
 800f278:	69fa      	ldr	r2, [r7, #28]
 800f27a:	440a      	add	r2, r1
 800f27c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f280:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f284:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f286:	79fb      	ldrb	r3, [r7, #7]
 800f288:	2b01      	cmp	r3, #1
 800f28a:	d14b      	bne.n	800f324 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	691b      	ldr	r3, [r3, #16]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d009      	beq.n	800f2a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	015a      	lsls	r2, r3, #5
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	4413      	add	r3, r2
 800f29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	78db      	ldrb	r3, [r3, #3]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d128      	bne.n	800f302 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d110      	bne.n	800f2e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	015a      	lsls	r2, r3, #5
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	69ba      	ldr	r2, [r7, #24]
 800f2d0:	0151      	lsls	r1, r2, #5
 800f2d2:	69fa      	ldr	r2, [r7, #28]
 800f2d4:	440a      	add	r2, r1
 800f2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f2de:	6013      	str	r3, [r2, #0]
 800f2e0:	e00f      	b.n	800f302 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	015a      	lsls	r2, r3, #5
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	69ba      	ldr	r2, [r7, #24]
 800f2f2:	0151      	lsls	r1, r2, #5
 800f2f4:	69fa      	ldr	r2, [r7, #28]
 800f2f6:	440a      	add	r2, r1
 800f2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f300:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	015a      	lsls	r2, r3, #5
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	4413      	add	r3, r2
 800f30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	69ba      	ldr	r2, [r7, #24]
 800f312:	0151      	lsls	r1, r2, #5
 800f314:	69fa      	ldr	r2, [r7, #28]
 800f316:	440a      	add	r2, r1
 800f318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f31c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f320:	6013      	str	r3, [r2, #0]
 800f322:	e12f      	b.n	800f584 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	015a      	lsls	r2, r3, #5
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	4413      	add	r3, r2
 800f32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	69ba      	ldr	r2, [r7, #24]
 800f334:	0151      	lsls	r1, r2, #5
 800f336:	69fa      	ldr	r2, [r7, #28]
 800f338:	440a      	add	r2, r1
 800f33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f33e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f342:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	78db      	ldrb	r3, [r3, #3]
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d015      	beq.n	800f378 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	695b      	ldr	r3, [r3, #20]
 800f350:	2b00      	cmp	r3, #0
 800f352:	f000 8117 	beq.w	800f584 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	f003 030f 	and.w	r3, r3, #15
 800f366:	2101      	movs	r1, #1
 800f368:	fa01 f303 	lsl.w	r3, r1, r3
 800f36c:	69f9      	ldr	r1, [r7, #28]
 800f36e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f372:	4313      	orrs	r3, r2
 800f374:	634b      	str	r3, [r1, #52]	; 0x34
 800f376:	e105      	b.n	800f584 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f37e:	689b      	ldr	r3, [r3, #8]
 800f380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f384:	2b00      	cmp	r3, #0
 800f386:	d110      	bne.n	800f3aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	015a      	lsls	r2, r3, #5
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	4413      	add	r3, r2
 800f390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	69ba      	ldr	r2, [r7, #24]
 800f398:	0151      	lsls	r1, r2, #5
 800f39a:	69fa      	ldr	r2, [r7, #28]
 800f39c:	440a      	add	r2, r1
 800f39e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3a6:	6013      	str	r3, [r2, #0]
 800f3a8:	e00f      	b.n	800f3ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	015a      	lsls	r2, r3, #5
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	4413      	add	r3, r2
 800f3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	69ba      	ldr	r2, [r7, #24]
 800f3ba:	0151      	lsls	r1, r2, #5
 800f3bc:	69fa      	ldr	r2, [r7, #28]
 800f3be:	440a      	add	r2, r1
 800f3c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	68d9      	ldr	r1, [r3, #12]
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	781a      	ldrb	r2, [r3, #0]
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	695b      	ldr	r3, [r3, #20]
 800f3d6:	b298      	uxth	r0, r3
 800f3d8:	79fb      	ldrb	r3, [r7, #7]
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	4603      	mov	r3, r0
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f000 fa2b 	bl	800f83a <USB_WritePacket>
 800f3e4:	e0ce      	b.n	800f584 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	015a      	lsls	r2, r3, #5
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3f2:	691b      	ldr	r3, [r3, #16]
 800f3f4:	69ba      	ldr	r2, [r7, #24]
 800f3f6:	0151      	lsls	r1, r2, #5
 800f3f8:	69fa      	ldr	r2, [r7, #28]
 800f3fa:	440a      	add	r2, r1
 800f3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f400:	0cdb      	lsrs	r3, r3, #19
 800f402:	04db      	lsls	r3, r3, #19
 800f404:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	015a      	lsls	r2, r3, #5
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	4413      	add	r3, r2
 800f40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f412:	691b      	ldr	r3, [r3, #16]
 800f414:	69ba      	ldr	r2, [r7, #24]
 800f416:	0151      	lsls	r1, r2, #5
 800f418:	69fa      	ldr	r2, [r7, #28]
 800f41a:	440a      	add	r2, r1
 800f41c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f428:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	695b      	ldr	r3, [r3, #20]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d126      	bne.n	800f480 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	015a      	lsls	r2, r3, #5
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	4413      	add	r3, r2
 800f43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f43e:	691a      	ldr	r2, [r3, #16]
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f448:	69b9      	ldr	r1, [r7, #24]
 800f44a:	0148      	lsls	r0, r1, #5
 800f44c:	69f9      	ldr	r1, [r7, #28]
 800f44e:	4401      	add	r1, r0
 800f450:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f454:	4313      	orrs	r3, r2
 800f456:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	015a      	lsls	r2, r3, #5
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	4413      	add	r3, r2
 800f460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	69ba      	ldr	r2, [r7, #24]
 800f468:	0151      	lsls	r1, r2, #5
 800f46a:	69fa      	ldr	r2, [r7, #28]
 800f46c:	440a      	add	r2, r1
 800f46e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f476:	6113      	str	r3, [r2, #16]
 800f478:	e036      	b.n	800f4e8 <USB_EPStartXfer+0x3dc>
 800f47a:	bf00      	nop
 800f47c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	695a      	ldr	r2, [r3, #20]
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	4413      	add	r3, r2
 800f48a:	1e5a      	subs	r2, r3, #1
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	689b      	ldr	r3, [r3, #8]
 800f490:	fbb2 f3f3 	udiv	r3, r2, r3
 800f494:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f496:	69bb      	ldr	r3, [r7, #24]
 800f498:	015a      	lsls	r2, r3, #5
 800f49a:	69fb      	ldr	r3, [r7, #28]
 800f49c:	4413      	add	r3, r2
 800f49e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4a2:	691a      	ldr	r2, [r3, #16]
 800f4a4:	8afb      	ldrh	r3, [r7, #22]
 800f4a6:	04d9      	lsls	r1, r3, #19
 800f4a8:	4b39      	ldr	r3, [pc, #228]	; (800f590 <USB_EPStartXfer+0x484>)
 800f4aa:	400b      	ands	r3, r1
 800f4ac:	69b9      	ldr	r1, [r7, #24]
 800f4ae:	0148      	lsls	r0, r1, #5
 800f4b0:	69f9      	ldr	r1, [r7, #28]
 800f4b2:	4401      	add	r1, r0
 800f4b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	015a      	lsls	r2, r3, #5
 800f4c0:	69fb      	ldr	r3, [r7, #28]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4c8:	691a      	ldr	r2, [r3, #16]
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	8af9      	ldrh	r1, [r7, #22]
 800f4d0:	fb01 f303 	mul.w	r3, r1, r3
 800f4d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f4d8:	69b9      	ldr	r1, [r7, #24]
 800f4da:	0148      	lsls	r0, r1, #5
 800f4dc:	69f9      	ldr	r1, [r7, #28]
 800f4de:	4401      	add	r1, r0
 800f4e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f4e8:	79fb      	ldrb	r3, [r7, #7]
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d10d      	bne.n	800f50a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	68db      	ldr	r3, [r3, #12]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d009      	beq.n	800f50a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	68d9      	ldr	r1, [r3, #12]
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	015a      	lsls	r2, r3, #5
 800f4fe:	69fb      	ldr	r3, [r7, #28]
 800f500:	4413      	add	r3, r2
 800f502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f506:	460a      	mov	r2, r1
 800f508:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	78db      	ldrb	r3, [r3, #3]
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d128      	bne.n	800f564 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d110      	bne.n	800f544 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	015a      	lsls	r2, r3, #5
 800f526:	69fb      	ldr	r3, [r7, #28]
 800f528:	4413      	add	r3, r2
 800f52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	69ba      	ldr	r2, [r7, #24]
 800f532:	0151      	lsls	r1, r2, #5
 800f534:	69fa      	ldr	r2, [r7, #28]
 800f536:	440a      	add	r2, r1
 800f538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f53c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f540:	6013      	str	r3, [r2, #0]
 800f542:	e00f      	b.n	800f564 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	015a      	lsls	r2, r3, #5
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	4413      	add	r3, r2
 800f54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	69ba      	ldr	r2, [r7, #24]
 800f554:	0151      	lsls	r1, r2, #5
 800f556:	69fa      	ldr	r2, [r7, #28]
 800f558:	440a      	add	r2, r1
 800f55a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f55e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f562:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	015a      	lsls	r2, r3, #5
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	4413      	add	r3, r2
 800f56c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	69ba      	ldr	r2, [r7, #24]
 800f574:	0151      	lsls	r1, r2, #5
 800f576:	69fa      	ldr	r2, [r7, #28]
 800f578:	440a      	add	r2, r1
 800f57a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f57e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f582:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	3720      	adds	r7, #32
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	1ff80000 	.word	0x1ff80000

0800f594 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f594:	b480      	push	{r7}
 800f596:	b087      	sub	sp, #28
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	785b      	ldrb	r3, [r3, #1]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	f040 80cd 	bne.w	800f750 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	695b      	ldr	r3, [r3, #20]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d132      	bne.n	800f624 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	015a      	lsls	r2, r3, #5
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5ca:	691b      	ldr	r3, [r3, #16]
 800f5cc:	693a      	ldr	r2, [r7, #16]
 800f5ce:	0151      	lsls	r1, r2, #5
 800f5d0:	697a      	ldr	r2, [r7, #20]
 800f5d2:	440a      	add	r2, r1
 800f5d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f5dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f5e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	015a      	lsls	r2, r3, #5
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5ee:	691b      	ldr	r3, [r3, #16]
 800f5f0:	693a      	ldr	r2, [r7, #16]
 800f5f2:	0151      	lsls	r1, r2, #5
 800f5f4:	697a      	ldr	r2, [r7, #20]
 800f5f6:	440a      	add	r2, r1
 800f5f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	015a      	lsls	r2, r3, #5
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	4413      	add	r3, r2
 800f60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f60e:	691b      	ldr	r3, [r3, #16]
 800f610:	693a      	ldr	r2, [r7, #16]
 800f612:	0151      	lsls	r1, r2, #5
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	440a      	add	r2, r1
 800f618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f61c:	0cdb      	lsrs	r3, r3, #19
 800f61e:	04db      	lsls	r3, r3, #19
 800f620:	6113      	str	r3, [r2, #16]
 800f622:	e04e      	b.n	800f6c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	015a      	lsls	r2, r3, #5
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	4413      	add	r3, r2
 800f62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f630:	691b      	ldr	r3, [r3, #16]
 800f632:	693a      	ldr	r2, [r7, #16]
 800f634:	0151      	lsls	r1, r2, #5
 800f636:	697a      	ldr	r2, [r7, #20]
 800f638:	440a      	add	r2, r1
 800f63a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f63e:	0cdb      	lsrs	r3, r3, #19
 800f640:	04db      	lsls	r3, r3, #19
 800f642:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	015a      	lsls	r2, r3, #5
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	4413      	add	r3, r2
 800f64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f650:	691b      	ldr	r3, [r3, #16]
 800f652:	693a      	ldr	r2, [r7, #16]
 800f654:	0151      	lsls	r1, r2, #5
 800f656:	697a      	ldr	r2, [r7, #20]
 800f658:	440a      	add	r2, r1
 800f65a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f65e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f662:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f666:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	695a      	ldr	r2, [r3, #20]
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	429a      	cmp	r2, r3
 800f672:	d903      	bls.n	800f67c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	689a      	ldr	r2, [r3, #8]
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	015a      	lsls	r2, r3, #5
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	4413      	add	r3, r2
 800f684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f688:	691b      	ldr	r3, [r3, #16]
 800f68a:	693a      	ldr	r2, [r7, #16]
 800f68c:	0151      	lsls	r1, r2, #5
 800f68e:	697a      	ldr	r2, [r7, #20]
 800f690:	440a      	add	r2, r1
 800f692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f69a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	015a      	lsls	r2, r3, #5
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6a8:	691a      	ldr	r2, [r3, #16]
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	695b      	ldr	r3, [r3, #20]
 800f6ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f6b2:	6939      	ldr	r1, [r7, #16]
 800f6b4:	0148      	lsls	r0, r1, #5
 800f6b6:	6979      	ldr	r1, [r7, #20]
 800f6b8:	4401      	add	r1, r0
 800f6ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f6c2:	79fb      	ldrb	r3, [r7, #7]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d11e      	bne.n	800f706 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	691b      	ldr	r3, [r3, #16]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d009      	beq.n	800f6e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	015a      	lsls	r2, r3, #5
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6dc:	461a      	mov	r2, r3
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	015a      	lsls	r2, r3, #5
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	693a      	ldr	r2, [r7, #16]
 800f6f4:	0151      	lsls	r1, r2, #5
 800f6f6:	697a      	ldr	r2, [r7, #20]
 800f6f8:	440a      	add	r2, r1
 800f6fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f702:	6013      	str	r3, [r2, #0]
 800f704:	e092      	b.n	800f82c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	015a      	lsls	r2, r3, #5
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	4413      	add	r3, r2
 800f70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	693a      	ldr	r2, [r7, #16]
 800f716:	0151      	lsls	r1, r2, #5
 800f718:	697a      	ldr	r2, [r7, #20]
 800f71a:	440a      	add	r2, r1
 800f71c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f720:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f724:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	695b      	ldr	r3, [r3, #20]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d07e      	beq.n	800f82c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	f003 030f 	and.w	r3, r3, #15
 800f73e:	2101      	movs	r1, #1
 800f740:	fa01 f303 	lsl.w	r3, r1, r3
 800f744:	6979      	ldr	r1, [r7, #20]
 800f746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f74a:	4313      	orrs	r3, r2
 800f74c:	634b      	str	r3, [r1, #52]	; 0x34
 800f74e:	e06d      	b.n	800f82c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	015a      	lsls	r2, r3, #5
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	4413      	add	r3, r2
 800f758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f75c:	691b      	ldr	r3, [r3, #16]
 800f75e:	693a      	ldr	r2, [r7, #16]
 800f760:	0151      	lsls	r1, r2, #5
 800f762:	697a      	ldr	r2, [r7, #20]
 800f764:	440a      	add	r2, r1
 800f766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f76a:	0cdb      	lsrs	r3, r3, #19
 800f76c:	04db      	lsls	r3, r3, #19
 800f76e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	015a      	lsls	r2, r3, #5
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	4413      	add	r3, r2
 800f778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f77c:	691b      	ldr	r3, [r3, #16]
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	0151      	lsls	r1, r2, #5
 800f782:	697a      	ldr	r2, [r7, #20]
 800f784:	440a      	add	r2, r1
 800f786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f78a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f78e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f792:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	695b      	ldr	r3, [r3, #20]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d003      	beq.n	800f7a4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	689a      	ldr	r2, [r3, #8]
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	015a      	lsls	r2, r3, #5
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	4413      	add	r3, r2
 800f7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7b0:	691b      	ldr	r3, [r3, #16]
 800f7b2:	693a      	ldr	r2, [r7, #16]
 800f7b4:	0151      	lsls	r1, r2, #5
 800f7b6:	697a      	ldr	r2, [r7, #20]
 800f7b8:	440a      	add	r2, r1
 800f7ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	015a      	lsls	r2, r3, #5
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	4413      	add	r3, r2
 800f7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7d0:	691a      	ldr	r2, [r3, #16]
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	689b      	ldr	r3, [r3, #8]
 800f7d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7da:	6939      	ldr	r1, [r7, #16]
 800f7dc:	0148      	lsls	r0, r1, #5
 800f7de:	6979      	ldr	r1, [r7, #20]
 800f7e0:	4401      	add	r1, r0
 800f7e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f7ea:	79fb      	ldrb	r3, [r7, #7]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d10d      	bne.n	800f80c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d009      	beq.n	800f80c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	68d9      	ldr	r1, [r3, #12]
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	015a      	lsls	r2, r3, #5
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	4413      	add	r3, r2
 800f804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f808:	460a      	mov	r2, r1
 800f80a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	015a      	lsls	r2, r3, #5
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	4413      	add	r3, r2
 800f814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	693a      	ldr	r2, [r7, #16]
 800f81c:	0151      	lsls	r1, r2, #5
 800f81e:	697a      	ldr	r2, [r7, #20]
 800f820:	440a      	add	r2, r1
 800f822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f826:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f82a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f82c:	2300      	movs	r3, #0
}
 800f82e:	4618      	mov	r0, r3
 800f830:	371c      	adds	r7, #28
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr

0800f83a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f83a:	b480      	push	{r7}
 800f83c:	b089      	sub	sp, #36	; 0x24
 800f83e:	af00      	add	r7, sp, #0
 800f840:	60f8      	str	r0, [r7, #12]
 800f842:	60b9      	str	r1, [r7, #8]
 800f844:	4611      	mov	r1, r2
 800f846:	461a      	mov	r2, r3
 800f848:	460b      	mov	r3, r1
 800f84a:	71fb      	strb	r3, [r7, #7]
 800f84c:	4613      	mov	r3, r2
 800f84e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f858:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d11a      	bne.n	800f896 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f860:	88bb      	ldrh	r3, [r7, #4]
 800f862:	3303      	adds	r3, #3
 800f864:	089b      	lsrs	r3, r3, #2
 800f866:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f868:	2300      	movs	r3, #0
 800f86a:	61bb      	str	r3, [r7, #24]
 800f86c:	e00f      	b.n	800f88e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f86e:	79fb      	ldrb	r3, [r7, #7]
 800f870:	031a      	lsls	r2, r3, #12
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	4413      	add	r3, r2
 800f876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f87a:	461a      	mov	r2, r3
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	3304      	adds	r3, #4
 800f886:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f888:	69bb      	ldr	r3, [r7, #24]
 800f88a:	3301      	adds	r3, #1
 800f88c:	61bb      	str	r3, [r7, #24]
 800f88e:	69ba      	ldr	r2, [r7, #24]
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	429a      	cmp	r2, r3
 800f894:	d3eb      	bcc.n	800f86e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f896:	2300      	movs	r3, #0
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3724      	adds	r7, #36	; 0x24
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b089      	sub	sp, #36	; 0x24
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	60f8      	str	r0, [r7, #12]
 800f8ac:	60b9      	str	r1, [r7, #8]
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f8ba:	88fb      	ldrh	r3, [r7, #6]
 800f8bc:	3303      	adds	r3, #3
 800f8be:	089b      	lsrs	r3, r3, #2
 800f8c0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	61bb      	str	r3, [r7, #24]
 800f8c6:	e00b      	b.n	800f8e0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8ce:	681a      	ldr	r2, [r3, #0]
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	61bb      	str	r3, [r7, #24]
 800f8e0:	69ba      	ldr	r2, [r7, #24]
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d3ef      	bcc.n	800f8c8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f8e8:	69fb      	ldr	r3, [r7, #28]
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3724      	adds	r7, #36	; 0x24
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr

0800f8f6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f8f6:	b480      	push	{r7}
 800f8f8:	b085      	sub	sp, #20
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
 800f8fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	785b      	ldrb	r3, [r3, #1]
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d12c      	bne.n	800f96c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	015a      	lsls	r2, r3, #5
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	4413      	add	r3, r2
 800f91a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	db12      	blt.n	800f94a <USB_EPSetStall+0x54>
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00f      	beq.n	800f94a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	015a      	lsls	r2, r3, #5
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	4413      	add	r3, r2
 800f932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	68ba      	ldr	r2, [r7, #8]
 800f93a:	0151      	lsls	r1, r2, #5
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	440a      	add	r2, r1
 800f940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f944:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f948:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	015a      	lsls	r2, r3, #5
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	4413      	add	r3, r2
 800f952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	0151      	lsls	r1, r2, #5
 800f95c:	68fa      	ldr	r2, [r7, #12]
 800f95e:	440a      	add	r2, r1
 800f960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f968:	6013      	str	r3, [r2, #0]
 800f96a:	e02b      	b.n	800f9c4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	015a      	lsls	r2, r3, #5
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	4413      	add	r3, r2
 800f974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	db12      	blt.n	800f9a4 <USB_EPSetStall+0xae>
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d00f      	beq.n	800f9a4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	015a      	lsls	r2, r3, #5
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	4413      	add	r3, r2
 800f98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	68ba      	ldr	r2, [r7, #8]
 800f994:	0151      	lsls	r1, r2, #5
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	440a      	add	r2, r1
 800f99a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f99e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f9a2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	015a      	lsls	r2, r3, #5
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	68ba      	ldr	r2, [r7, #8]
 800f9b4:	0151      	lsls	r1, r2, #5
 800f9b6:	68fa      	ldr	r2, [r7, #12]
 800f9b8:	440a      	add	r2, r1
 800f9ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f9c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f9c4:	2300      	movs	r3, #0
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3714      	adds	r7, #20
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr

0800f9d2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f9d2:	b480      	push	{r7}
 800f9d4:	b085      	sub	sp, #20
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	785b      	ldrb	r3, [r3, #1]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d128      	bne.n	800fa40 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	015a      	lsls	r2, r3, #5
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	68ba      	ldr	r2, [r7, #8]
 800f9fe:	0151      	lsls	r1, r2, #5
 800fa00:	68fa      	ldr	r2, [r7, #12]
 800fa02:	440a      	add	r2, r1
 800fa04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	78db      	ldrb	r3, [r3, #3]
 800fa12:	2b03      	cmp	r3, #3
 800fa14:	d003      	beq.n	800fa1e <USB_EPClearStall+0x4c>
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	78db      	ldrb	r3, [r3, #3]
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	d138      	bne.n	800fa90 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	015a      	lsls	r2, r3, #5
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	4413      	add	r3, r2
 800fa26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	68ba      	ldr	r2, [r7, #8]
 800fa2e:	0151      	lsls	r1, r2, #5
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	440a      	add	r2, r1
 800fa34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa3c:	6013      	str	r3, [r2, #0]
 800fa3e:	e027      	b.n	800fa90 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	015a      	lsls	r2, r3, #5
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	4413      	add	r3, r2
 800fa48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	68ba      	ldr	r2, [r7, #8]
 800fa50:	0151      	lsls	r1, r2, #5
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	440a      	add	r2, r1
 800fa56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	78db      	ldrb	r3, [r3, #3]
 800fa64:	2b03      	cmp	r3, #3
 800fa66:	d003      	beq.n	800fa70 <USB_EPClearStall+0x9e>
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	78db      	ldrb	r3, [r3, #3]
 800fa6c:	2b02      	cmp	r3, #2
 800fa6e:	d10f      	bne.n	800fa90 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	015a      	lsls	r2, r3, #5
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	4413      	add	r3, r2
 800fa78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	68ba      	ldr	r2, [r7, #8]
 800fa80:	0151      	lsls	r1, r2, #5
 800fa82:	68fa      	ldr	r2, [r7, #12]
 800fa84:	440a      	add	r2, r1
 800fa86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa8e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fa90:	2300      	movs	r3, #0
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3714      	adds	r7, #20
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr

0800fa9e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fa9e:	b480      	push	{r7}
 800faa0:	b085      	sub	sp, #20
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
 800faa6:	460b      	mov	r3, r1
 800faa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	68fa      	ldr	r2, [r7, #12]
 800fab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fabc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fac0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	78fb      	ldrb	r3, [r7, #3]
 800facc:	011b      	lsls	r3, r3, #4
 800face:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fad2:	68f9      	ldr	r1, [r7, #12]
 800fad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fad8:	4313      	orrs	r3, r2
 800fada:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fadc:	2300      	movs	r3, #0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3714      	adds	r7, #20
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr

0800faea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b084      	sub	sp, #16
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb04:	f023 0302 	bic.w	r3, r3, #2
 800fb08:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fb0a:	2003      	movs	r0, #3
 800fb0c:	f7f6 ffac 	bl	8006a68 <HAL_Delay>

  return HAL_OK;
 800fb10:	2300      	movs	r3, #0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3710      	adds	r7, #16
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b084      	sub	sp, #16
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	68fa      	ldr	r2, [r7, #12]
 800fb30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb34:	f043 0302 	orr.w	r3, r3, #2
 800fb38:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fb3a:	2003      	movs	r0, #3
 800fb3c:	f7f6 ff94 	bl	8006a68 <HAL_Delay>

  return HAL_OK;
 800fb40:	2300      	movs	r3, #0
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fb4a:	b480      	push	{r7}
 800fb4c:	b085      	sub	sp, #20
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	695b      	ldr	r3, [r3, #20]
 800fb56:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	699b      	ldr	r3, [r3, #24]
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	4013      	ands	r3, r2
 800fb60:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fb62:	68fb      	ldr	r3, [r7, #12]
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3714      	adds	r7, #20
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr

0800fb70 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b085      	sub	sp, #20
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb82:	699b      	ldr	r3, [r3, #24]
 800fb84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb8c:	69db      	ldr	r3, [r3, #28]
 800fb8e:	68ba      	ldr	r2, [r7, #8]
 800fb90:	4013      	ands	r3, r2
 800fb92:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	0c1b      	lsrs	r3, r3, #16
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3714      	adds	r7, #20
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b085      	sub	sp, #20
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbb6:	699b      	ldr	r3, [r3, #24]
 800fbb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbc0:	69db      	ldr	r3, [r3, #28]
 800fbc2:	68ba      	ldr	r2, [r7, #8]
 800fbc4:	4013      	ands	r3, r2
 800fbc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	b29b      	uxth	r3, r3
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3714      	adds	r7, #20
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b085      	sub	sp, #20
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fbe8:	78fb      	ldrb	r3, [r7, #3]
 800fbea:	015a      	lsls	r2, r3, #5
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	4413      	add	r3, r2
 800fbf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbfe:	695b      	ldr	r3, [r3, #20]
 800fc00:	68ba      	ldr	r2, [r7, #8]
 800fc02:	4013      	ands	r3, r2
 800fc04:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fc06:	68bb      	ldr	r3, [r7, #8]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3714      	adds	r7, #20
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b087      	sub	sp, #28
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc2a:	691b      	ldr	r3, [r3, #16]
 800fc2c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc36:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fc38:	78fb      	ldrb	r3, [r7, #3]
 800fc3a:	f003 030f 	and.w	r3, r3, #15
 800fc3e:	68fa      	ldr	r2, [r7, #12]
 800fc40:	fa22 f303 	lsr.w	r3, r2, r3
 800fc44:	01db      	lsls	r3, r3, #7
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	693a      	ldr	r2, [r7, #16]
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fc4e:	78fb      	ldrb	r3, [r7, #3]
 800fc50:	015a      	lsls	r2, r3, #5
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	4413      	add	r3, r2
 800fc56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc5a:	689b      	ldr	r3, [r3, #8]
 800fc5c:	693a      	ldr	r2, [r7, #16]
 800fc5e:	4013      	ands	r3, r2
 800fc60:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fc62:	68bb      	ldr	r3, [r7, #8]
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	371c      	adds	r7, #28
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr

0800fc70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	695b      	ldr	r3, [r3, #20]
 800fc7c:	f003 0301 	and.w	r3, r3, #1
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	370c      	adds	r7, #12
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr

0800fc8c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b085      	sub	sp, #20
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	68fa      	ldr	r2, [r7, #12]
 800fca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fca6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fcaa:	f023 0307 	bic.w	r3, r3, #7
 800fcae:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcb6:	689b      	ldr	r3, [r3, #8]
 800fcb8:	f003 0306 	and.w	r3, r3, #6
 800fcbc:	2b04      	cmp	r3, #4
 800fcbe:	d109      	bne.n	800fcd4 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcce:	f043 0303 	orr.w	r3, r3, #3
 800fcd2:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fce6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fce8:	2300      	movs	r3, #0
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3714      	adds	r7, #20
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf4:	4770      	bx	lr
	...

0800fcf8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b087      	sub	sp, #28
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	460b      	mov	r3, r1
 800fd02:	607a      	str	r2, [r7, #4]
 800fd04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	333c      	adds	r3, #60	; 0x3c
 800fd0e:	3304      	adds	r3, #4
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	4a26      	ldr	r2, [pc, #152]	; (800fdb0 <USB_EP0_OutStart+0xb8>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d90a      	bls.n	800fd32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd2c:	d101      	bne.n	800fd32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	e037      	b.n	800fda2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd38:	461a      	mov	r2, r3
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd44:	691b      	ldr	r3, [r3, #16]
 800fd46:	697a      	ldr	r2, [r7, #20]
 800fd48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fd50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd58:	691b      	ldr	r3, [r3, #16]
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd60:	f043 0318 	orr.w	r3, r3, #24
 800fd64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	697a      	ldr	r2, [r7, #20]
 800fd70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fd78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fd7a:	7afb      	ldrb	r3, [r7, #11]
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d10f      	bne.n	800fda0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd86:	461a      	mov	r2, r3
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	697a      	ldr	r2, [r7, #20]
 800fd96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fd9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fda0:	2300      	movs	r3, #0
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	371c      	adds	r7, #28
 800fda6:	46bd      	mov	sp, r7
 800fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdac:	4770      	bx	lr
 800fdae:	bf00      	nop
 800fdb0:	4f54300a 	.word	0x4f54300a

0800fdb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	60fb      	str	r3, [r7, #12]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	4a13      	ldr	r2, [pc, #76]	; (800fe18 <USB_CoreReset+0x64>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d901      	bls.n	800fdd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fdce:	2303      	movs	r3, #3
 800fdd0:	e01b      	b.n	800fe0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	691b      	ldr	r3, [r3, #16]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	daf2      	bge.n	800fdc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fdda:	2300      	movs	r3, #0
 800fddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	691b      	ldr	r3, [r3, #16]
 800fde2:	f043 0201 	orr.w	r2, r3, #1
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	3301      	adds	r3, #1
 800fdee:	60fb      	str	r3, [r7, #12]
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	4a09      	ldr	r2, [pc, #36]	; (800fe18 <USB_CoreReset+0x64>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d901      	bls.n	800fdfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fdf8:	2303      	movs	r3, #3
 800fdfa:	e006      	b.n	800fe0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	691b      	ldr	r3, [r3, #16]
 800fe00:	f003 0301 	and.w	r3, r3, #1
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d0f0      	beq.n	800fdea <USB_CoreReset+0x36>

  return HAL_OK;
 800fe08:	2300      	movs	r3, #0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3714      	adds	r7, #20
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop
 800fe18:	00030d40 	.word	0x00030d40

0800fe1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	460b      	mov	r3, r1
 800fe26:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	7c1b      	ldrb	r3, [r3, #16]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d115      	bne.n	800fe60 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fe34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe38:	2202      	movs	r2, #2
 800fe3a:	2181      	movs	r1, #129	; 0x81
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f008 fbbc 	bl	80185ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2201      	movs	r2, #1
 800fe46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fe48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe4c:	2202      	movs	r2, #2
 800fe4e:	2101      	movs	r1, #1
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f008 fbb2 	bl	80185ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2201      	movs	r2, #1
 800fe5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800fe5e:	e012      	b.n	800fe86 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fe60:	2340      	movs	r3, #64	; 0x40
 800fe62:	2202      	movs	r2, #2
 800fe64:	2181      	movs	r1, #129	; 0x81
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f008 fba7 	bl	80185ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2201      	movs	r2, #1
 800fe70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fe72:	2340      	movs	r3, #64	; 0x40
 800fe74:	2202      	movs	r2, #2
 800fe76:	2101      	movs	r1, #1
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f008 fb9e 	bl	80185ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2201      	movs	r2, #1
 800fe82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fe86:	2308      	movs	r3, #8
 800fe88:	2203      	movs	r2, #3
 800fe8a:	2182      	movs	r1, #130	; 0x82
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f008 fb94 	bl	80185ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2201      	movs	r2, #1
 800fe96:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800fe98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fe9c:	f008 fe4c 	bl	8018b38 <malloc>
 800fea0:	4603      	mov	r3, r0
 800fea2:	461a      	mov	r2, r3
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d102      	bne.n	800feba <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800feb4:	2301      	movs	r3, #1
 800feb6:	73fb      	strb	r3, [r7, #15]
 800feb8:	e026      	b.n	800ff08 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fec0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	2200      	movs	r2, #0
 800fed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	2200      	movs	r2, #0
 800fed8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	7c1b      	ldrb	r3, [r3, #16]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d109      	bne.n	800fef8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800feea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800feee:	2101      	movs	r1, #1
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f008 fc53 	bl	801879c <USBD_LL_PrepareReceive>
 800fef6:	e007      	b.n	800ff08 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fefe:	2340      	movs	r3, #64	; 0x40
 800ff00:	2101      	movs	r1, #1
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f008 fc4a 	bl	801879c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ff08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3710      	adds	r7, #16
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b084      	sub	sp, #16
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ff22:	2181      	movs	r1, #129	; 0x81
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f008 fb6e 	bl	8018606 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ff30:	2101      	movs	r1, #1
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f008 fb67 	bl	8018606 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ff40:	2182      	movs	r1, #130	; 0x82
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f008 fb5f 	bl	8018606 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00e      	beq.n	800ff76 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f008 fded 	bl	8018b48 <free>
    pdev->pClassData = NULL;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800ff76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b086      	sub	sp, #24
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ff90:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ff92:	2300      	movs	r3, #0
 800ff94:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ff96:	2300      	movs	r3, #0
 800ff98:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d039      	beq.n	801001e <USBD_CDC_Setup+0x9e>
 800ffaa:	2b20      	cmp	r3, #32
 800ffac:	d17c      	bne.n	80100a8 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	88db      	ldrh	r3, [r3, #6]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d029      	beq.n	801000a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	b25b      	sxtb	r3, r3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	da11      	bge.n	800ffe4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ffc6:	689b      	ldr	r3, [r3, #8]
 800ffc8:	683a      	ldr	r2, [r7, #0]
 800ffca:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800ffcc:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ffce:	683a      	ldr	r2, [r7, #0]
 800ffd0:	88d2      	ldrh	r2, [r2, #6]
 800ffd2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ffd4:	6939      	ldr	r1, [r7, #16]
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	88db      	ldrh	r3, [r3, #6]
 800ffda:	461a      	mov	r2, r3
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f001 f9c9 	bl	8011374 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800ffe2:	e068      	b.n	80100b6 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	785a      	ldrb	r2, [r3, #1]
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	88db      	ldrh	r3, [r3, #6]
 800fff2:	b2da      	uxtb	r2, r3
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800fffa:	6939      	ldr	r1, [r7, #16]
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	88db      	ldrh	r3, [r3, #6]
 8010000:	461a      	mov	r2, r3
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f001 f9e4 	bl	80113d0 <USBD_CtlPrepareRx>
    break;
 8010008:	e055      	b.n	80100b6 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	683a      	ldr	r2, [r7, #0]
 8010014:	7850      	ldrb	r0, [r2, #1]
 8010016:	2200      	movs	r2, #0
 8010018:	6839      	ldr	r1, [r7, #0]
 801001a:	4798      	blx	r3
    break;
 801001c:	e04b      	b.n	80100b6 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	785b      	ldrb	r3, [r3, #1]
 8010022:	2b0a      	cmp	r3, #10
 8010024:	d017      	beq.n	8010056 <USBD_CDC_Setup+0xd6>
 8010026:	2b0b      	cmp	r3, #11
 8010028:	d029      	beq.n	801007e <USBD_CDC_Setup+0xfe>
 801002a:	2b00      	cmp	r3, #0
 801002c:	d133      	bne.n	8010096 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010034:	2b03      	cmp	r3, #3
 8010036:	d107      	bne.n	8010048 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8010038:	f107 030c 	add.w	r3, r7, #12
 801003c:	2202      	movs	r2, #2
 801003e:	4619      	mov	r1, r3
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f001 f997 	bl	8011374 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8010046:	e02e      	b.n	80100a6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8010048:	6839      	ldr	r1, [r7, #0]
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f001 f927 	bl	801129e <USBD_CtlError>
			  ret = USBD_FAIL;
 8010050:	2302      	movs	r3, #2
 8010052:	75fb      	strb	r3, [r7, #23]
      break;
 8010054:	e027      	b.n	80100a6 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801005c:	2b03      	cmp	r3, #3
 801005e:	d107      	bne.n	8010070 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8010060:	f107 030f 	add.w	r3, r7, #15
 8010064:	2201      	movs	r2, #1
 8010066:	4619      	mov	r1, r3
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f001 f983 	bl	8011374 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 801006e:	e01a      	b.n	80100a6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8010070:	6839      	ldr	r1, [r7, #0]
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f001 f913 	bl	801129e <USBD_CtlError>
			  ret = USBD_FAIL;
 8010078:	2302      	movs	r3, #2
 801007a:	75fb      	strb	r3, [r7, #23]
      break;
 801007c:	e013      	b.n	80100a6 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010084:	2b03      	cmp	r3, #3
 8010086:	d00d      	beq.n	80100a4 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8010088:	6839      	ldr	r1, [r7, #0]
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f001 f907 	bl	801129e <USBD_CtlError>
			  ret = USBD_FAIL;
 8010090:	2302      	movs	r3, #2
 8010092:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010094:	e006      	b.n	80100a4 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8010096:	6839      	ldr	r1, [r7, #0]
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f001 f900 	bl	801129e <USBD_CtlError>
      ret = USBD_FAIL;
 801009e:	2302      	movs	r3, #2
 80100a0:	75fb      	strb	r3, [r7, #23]
      break;
 80100a2:	e000      	b.n	80100a6 <USBD_CDC_Setup+0x126>
      break;
 80100a4:	bf00      	nop
    }
    break;
 80100a6:	e006      	b.n	80100b6 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80100a8:	6839      	ldr	r1, [r7, #0]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f001 f8f7 	bl	801129e <USBD_CtlError>
    ret = USBD_FAIL;
 80100b0:	2302      	movs	r3, #2
 80100b2:	75fb      	strb	r3, [r7, #23]
    break;
 80100b4:	bf00      	nop
  }

  return ret;
 80100b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3718      	adds	r7, #24
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	460b      	mov	r3, r1
 80100ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80100d2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80100da:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d03a      	beq.n	801015c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80100e6:	78fa      	ldrb	r2, [r7, #3]
 80100e8:	6879      	ldr	r1, [r7, #4]
 80100ea:	4613      	mov	r3, r2
 80100ec:	009b      	lsls	r3, r3, #2
 80100ee:	4413      	add	r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	440b      	add	r3, r1
 80100f4:	331c      	adds	r3, #28
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d029      	beq.n	8010150 <USBD_CDC_DataIn+0x90>
 80100fc:	78fa      	ldrb	r2, [r7, #3]
 80100fe:	6879      	ldr	r1, [r7, #4]
 8010100:	4613      	mov	r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	4413      	add	r3, r2
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	440b      	add	r3, r1
 801010a:	331c      	adds	r3, #28
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	78f9      	ldrb	r1, [r7, #3]
 8010110:	68b8      	ldr	r0, [r7, #8]
 8010112:	460b      	mov	r3, r1
 8010114:	00db      	lsls	r3, r3, #3
 8010116:	1a5b      	subs	r3, r3, r1
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	4403      	add	r3, r0
 801011c:	3344      	adds	r3, #68	; 0x44
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	fbb2 f1f3 	udiv	r1, r2, r3
 8010124:	fb03 f301 	mul.w	r3, r3, r1
 8010128:	1ad3      	subs	r3, r2, r3
 801012a:	2b00      	cmp	r3, #0
 801012c:	d110      	bne.n	8010150 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801012e:	78fa      	ldrb	r2, [r7, #3]
 8010130:	6879      	ldr	r1, [r7, #4]
 8010132:	4613      	mov	r3, r2
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	4413      	add	r3, r2
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	440b      	add	r3, r1
 801013c:	331c      	adds	r3, #28
 801013e:	2200      	movs	r2, #0
 8010140:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8010142:	78f9      	ldrb	r1, [r7, #3]
 8010144:	2300      	movs	r3, #0
 8010146:	2200      	movs	r2, #0
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f008 fb04 	bl	8018756 <USBD_LL_Transmit>
 801014e:	e003      	b.n	8010158 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2200      	movs	r2, #0
 8010154:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8010158:	2300      	movs	r3, #0
 801015a:	e000      	b.n	801015e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801015c:	2302      	movs	r3, #2
  }
}
 801015e:	4618      	mov	r0, r3
 8010160:	3710      	adds	r7, #16
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b084      	sub	sp, #16
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
 801016e:	460b      	mov	r3, r1
 8010170:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010178:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 801017a:	78fb      	ldrb	r3, [r7, #3]
 801017c:	4619      	mov	r1, r3
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f008 fb2f 	bl	80187e2 <USBD_LL_GetRxDataSize>
 8010184:	4602      	mov	r2, r0
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010192:	2b00      	cmp	r3, #0
 8010194:	d00d      	beq.n	80101b2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801019c:	68db      	ldr	r3, [r3, #12]
 801019e:	68fa      	ldr	r2, [r7, #12]
 80101a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80101a4:	68fa      	ldr	r2, [r7, #12]
 80101a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80101aa:	4611      	mov	r1, r2
 80101ac:	4798      	blx	r3

    return USBD_OK;
 80101ae:	2300      	movs	r3, #0
 80101b0:	e000      	b.n	80101b4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80101b2:	2302      	movs	r3, #2
  }
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3710      	adds	r7, #16
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b084      	sub	sp, #16
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80101ca:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d015      	beq.n	8010202 <USBD_CDC_EP0_RxReady+0x46>
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80101dc:	2bff      	cmp	r3, #255	; 0xff
 80101de:	d010      	beq.n	8010202 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80101e6:	689b      	ldr	r3, [r3, #8]
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80101ee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80101f6:	b292      	uxth	r2, r2
 80101f8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	22ff      	movs	r2, #255	; 0xff
 80101fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	3710      	adds	r7, #16
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 801020c:	b480      	push	{r7}
 801020e:	b083      	sub	sp, #12
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2243      	movs	r2, #67	; 0x43
 8010218:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801021a:	4b03      	ldr	r3, [pc, #12]	; (8010228 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801021c:	4618      	mov	r0, r3
 801021e:	370c      	adds	r7, #12
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr
 8010228:	20000090 	.word	0x20000090

0801022c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2243      	movs	r2, #67	; 0x43
 8010238:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801023a:	4b03      	ldr	r3, [pc, #12]	; (8010248 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801023c:	4618      	mov	r0, r3
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	2000004c 	.word	0x2000004c

0801024c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2243      	movs	r2, #67	; 0x43
 8010258:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801025a:	4b03      	ldr	r3, [pc, #12]	; (8010268 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801025c:	4618      	mov	r0, r3
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr
 8010268:	200000d4 	.word	0x200000d4

0801026c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	220a      	movs	r2, #10
 8010278:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801027a:	4b03      	ldr	r3, [pc, #12]	; (8010288 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801027c:	4618      	mov	r0, r3
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr
 8010288:	20000008 	.word	0x20000008

0801028c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 801028c:	b480      	push	{r7}
 801028e:	b085      	sub	sp, #20
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8010296:	2302      	movs	r3, #2
 8010298:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d005      	beq.n	80102ac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	683a      	ldr	r2, [r7, #0]
 80102a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80102a8:	2300      	movs	r3, #0
 80102aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80102ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3714      	adds	r7, #20
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr

080102ba <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80102ba:	b480      	push	{r7}
 80102bc:	b087      	sub	sp, #28
 80102be:	af00      	add	r7, sp, #0
 80102c0:	60f8      	str	r0, [r7, #12]
 80102c2:	60b9      	str	r1, [r7, #8]
 80102c4:	4613      	mov	r3, r2
 80102c6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80102ce:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	68ba      	ldr	r2, [r7, #8]
 80102d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80102d8:	88fa      	ldrh	r2, [r7, #6]
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80102e0:	2300      	movs	r3, #0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	371c      	adds	r7, #28
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr

080102ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80102ee:	b480      	push	{r7}
 80102f0:	b085      	sub	sp, #20
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
 80102f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80102fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	683a      	ldr	r2, [r7, #0]
 8010304:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8010308:	2300      	movs	r3, #0
}
 801030a:	4618      	mov	r0, r3
 801030c:	3714      	adds	r7, #20
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr

08010316 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010316:	b580      	push	{r7, lr}
 8010318:	b084      	sub	sp, #16
 801031a:	af00      	add	r7, sp, #0
 801031c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010324:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801032c:	2b00      	cmp	r3, #0
 801032e:	d01c      	beq.n	801036a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010336:	2b00      	cmp	r3, #0
 8010338:	d115      	bne.n	8010366 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2201      	movs	r2, #1
 801033e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010358:	b29b      	uxth	r3, r3
 801035a:	2181      	movs	r1, #129	; 0x81
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f008 f9fa 	bl	8018756 <USBD_LL_Transmit>

      return USBD_OK;
 8010362:	2300      	movs	r3, #0
 8010364:	e002      	b.n	801036c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8010366:	2301      	movs	r3, #1
 8010368:	e000      	b.n	801036c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 801036a:	2302      	movs	r3, #2
  }
}
 801036c:	4618      	mov	r0, r3
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010382:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801038a:	2b00      	cmp	r3, #0
 801038c:	d017      	beq.n	80103be <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	7c1b      	ldrb	r3, [r3, #16]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d109      	bne.n	80103aa <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801039c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103a0:	2101      	movs	r1, #1
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f008 f9fa 	bl	801879c <USBD_LL_PrepareReceive>
 80103a8:	e007      	b.n	80103ba <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80103b0:	2340      	movs	r3, #64	; 0x40
 80103b2:	2101      	movs	r1, #1
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f008 f9f1 	bl	801879c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80103ba:	2300      	movs	r3, #0
 80103bc:	e000      	b.n	80103c0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80103be:	2302      	movs	r3, #2
  }
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3710      	adds	r7, #16
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	4613      	mov	r3, r2
 80103d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d101      	bne.n	80103e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80103dc:	2302      	movs	r3, #2
 80103de:	e01a      	b.n	8010416 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d003      	beq.n	80103f2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	2200      	movs	r2, #0
 80103ee:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d003      	beq.n	8010400 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	68ba      	ldr	r2, [r7, #8]
 80103fc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2201      	movs	r2, #1
 8010404:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	79fa      	ldrb	r2, [r7, #7]
 801040c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f008 f86c 	bl	80184ec <USBD_LL_Init>

  return USBD_OK;
 8010414:	2300      	movs	r3, #0
}
 8010416:	4618      	mov	r0, r3
 8010418:	3710      	adds	r7, #16
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801041e:	b480      	push	{r7}
 8010420:	b085      	sub	sp, #20
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
 8010426:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8010428:	2300      	movs	r3, #0
 801042a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d006      	beq.n	8010440 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	683a      	ldr	r2, [r7, #0]
 8010436:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 801043a:	2300      	movs	r3, #0
 801043c:	73fb      	strb	r3, [r7, #15]
 801043e:	e001      	b.n	8010444 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010440:	2302      	movs	r3, #2
 8010442:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010444:	7bfb      	ldrb	r3, [r7, #15]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3714      	adds	r7, #20
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr

08010452 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b082      	sub	sp, #8
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f008 f892 	bl	8018584 <USBD_LL_Start>

  return USBD_OK;
 8010460:	2300      	movs	r3, #0
}
 8010462:	4618      	mov	r0, r3
 8010464:	3708      	adds	r7, #8
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}

0801046a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 801046a:	b480      	push	{r7}
 801046c:	b083      	sub	sp, #12
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010472:	2300      	movs	r3, #0
}
 8010474:	4618      	mov	r0, r3
 8010476:	370c      	adds	r7, #12
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr

08010480 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	460b      	mov	r3, r1
 801048a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 801048c:	2302      	movs	r3, #2
 801048e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010496:	2b00      	cmp	r3, #0
 8010498:	d00c      	beq.n	80104b4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	78fa      	ldrb	r2, [r7, #3]
 80104a4:	4611      	mov	r1, r2
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	4798      	blx	r3
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d101      	bne.n	80104b4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80104b0:	2300      	movs	r3, #0
 80104b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80104b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3710      	adds	r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}

080104be <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80104be:	b580      	push	{r7, lr}
 80104c0:	b082      	sub	sp, #8
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
 80104c6:	460b      	mov	r3, r1
 80104c8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	78fa      	ldrb	r2, [r7, #3]
 80104d4:	4611      	mov	r1, r2
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	4798      	blx	r3
  return USBD_OK;
 80104da:	2300      	movs	r3, #0
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80104f4:	6839      	ldr	r1, [r7, #0]
 80104f6:	4618      	mov	r0, r3
 80104f8:	f000 fe94 	bl	8011224 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2201      	movs	r2, #1
 8010500:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 801050a:	461a      	mov	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010518:	f003 031f 	and.w	r3, r3, #31
 801051c:	2b01      	cmp	r3, #1
 801051e:	d00c      	beq.n	801053a <USBD_LL_SetupStage+0x56>
 8010520:	2b01      	cmp	r3, #1
 8010522:	d302      	bcc.n	801052a <USBD_LL_SetupStage+0x46>
 8010524:	2b02      	cmp	r3, #2
 8010526:	d010      	beq.n	801054a <USBD_LL_SetupStage+0x66>
 8010528:	e017      	b.n	801055a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010530:	4619      	mov	r1, r3
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f000 fa04 	bl	8010940 <USBD_StdDevReq>
    break;
 8010538:	e01a      	b.n	8010570 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010540:	4619      	mov	r1, r3
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f000 fa66 	bl	8010a14 <USBD_StdItfReq>
    break;
 8010548:	e012      	b.n	8010570 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010550:	4619      	mov	r1, r3
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f000 faa4 	bl	8010aa0 <USBD_StdEPReq>
    break;
 8010558:	e00a      	b.n	8010570 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010560:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010564:	b2db      	uxtb	r3, r3
 8010566:	4619      	mov	r1, r3
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f008 f86b 	bl	8018644 <USBD_LL_StallEP>
    break;
 801056e:	bf00      	nop
  }

  return USBD_OK;
 8010570:	2300      	movs	r3, #0
}
 8010572:	4618      	mov	r0, r3
 8010574:	3708      	adds	r7, #8
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}

0801057a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801057a:	b580      	push	{r7, lr}
 801057c:	b086      	sub	sp, #24
 801057e:	af00      	add	r7, sp, #0
 8010580:	60f8      	str	r0, [r7, #12]
 8010582:	460b      	mov	r3, r1
 8010584:	607a      	str	r2, [r7, #4]
 8010586:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8010588:	7afb      	ldrb	r3, [r7, #11]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d14b      	bne.n	8010626 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010594:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 801059c:	2b03      	cmp	r3, #3
 801059e:	d134      	bne.n	801060a <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	68da      	ldr	r2, [r3, #12]
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	691b      	ldr	r3, [r3, #16]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d919      	bls.n	80105e0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	68da      	ldr	r2, [r3, #12]
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	691b      	ldr	r3, [r3, #16]
 80105b4:	1ad2      	subs	r2, r2, r3
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	68da      	ldr	r2, [r3, #12]
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d203      	bcs.n	80105ce <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	e002      	b.n	80105d4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	461a      	mov	r2, r3
 80105d6:	6879      	ldr	r1, [r7, #4]
 80105d8:	68f8      	ldr	r0, [r7, #12]
 80105da:	f000 ff17 	bl	801140c <USBD_CtlContinueRx>
 80105de:	e038      	b.n	8010652 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80105e6:	691b      	ldr	r3, [r3, #16]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d00a      	beq.n	8010602 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80105f2:	2b03      	cmp	r3, #3
 80105f4:	d105      	bne.n	8010602 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80105fc:	691b      	ldr	r3, [r3, #16]
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010602:	68f8      	ldr	r0, [r7, #12]
 8010604:	f000 ff14 	bl	8011430 <USBD_CtlSendStatus>
 8010608:	e023      	b.n	8010652 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010610:	2b05      	cmp	r3, #5
 8010612:	d11e      	bne.n	8010652 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2200      	movs	r2, #0
 8010618:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 801061c:	2100      	movs	r1, #0
 801061e:	68f8      	ldr	r0, [r7, #12]
 8010620:	f008 f810 	bl	8018644 <USBD_LL_StallEP>
 8010624:	e015      	b.n	8010652 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801062c:	699b      	ldr	r3, [r3, #24]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d00d      	beq.n	801064e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8010638:	2b03      	cmp	r3, #3
 801063a:	d108      	bne.n	801064e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010642:	699b      	ldr	r3, [r3, #24]
 8010644:	7afa      	ldrb	r2, [r7, #11]
 8010646:	4611      	mov	r1, r2
 8010648:	68f8      	ldr	r0, [r7, #12]
 801064a:	4798      	blx	r3
 801064c:	e001      	b.n	8010652 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801064e:	2302      	movs	r3, #2
 8010650:	e000      	b.n	8010654 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8010652:	2300      	movs	r3, #0
}
 8010654:	4618      	mov	r0, r3
 8010656:	3718      	adds	r7, #24
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b086      	sub	sp, #24
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	460b      	mov	r3, r1
 8010666:	607a      	str	r2, [r7, #4]
 8010668:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 801066a:	7afb      	ldrb	r3, [r7, #11]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d17f      	bne.n	8010770 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	3314      	adds	r3, #20
 8010674:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 801067c:	2b02      	cmp	r3, #2
 801067e:	d15c      	bne.n	801073a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	68da      	ldr	r2, [r3, #12]
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	691b      	ldr	r3, [r3, #16]
 8010688:	429a      	cmp	r2, r3
 801068a:	d915      	bls.n	80106b8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	68da      	ldr	r2, [r3, #12]
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	691b      	ldr	r3, [r3, #16]
 8010694:	1ad2      	subs	r2, r2, r3
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	68db      	ldr	r3, [r3, #12]
 801069e:	b29b      	uxth	r3, r3
 80106a0:	461a      	mov	r2, r3
 80106a2:	6879      	ldr	r1, [r7, #4]
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f000 fe81 	bl	80113ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80106aa:	2300      	movs	r3, #0
 80106ac:	2200      	movs	r2, #0
 80106ae:	2100      	movs	r1, #0
 80106b0:	68f8      	ldr	r0, [r7, #12]
 80106b2:	f008 f873 	bl	801879c <USBD_LL_PrepareReceive>
 80106b6:	e04e      	b.n	8010756 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	689b      	ldr	r3, [r3, #8]
 80106bc:	697a      	ldr	r2, [r7, #20]
 80106be:	6912      	ldr	r2, [r2, #16]
 80106c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80106c4:	fb02 f201 	mul.w	r2, r2, r1
 80106c8:	1a9b      	subs	r3, r3, r2
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d11c      	bne.n	8010708 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	689a      	ldr	r2, [r3, #8]
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d316      	bcc.n	8010708 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	689a      	ldr	r2, [r3, #8]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d20f      	bcs.n	8010708 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80106e8:	2200      	movs	r2, #0
 80106ea:	2100      	movs	r1, #0
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	f000 fe5d 	bl	80113ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80106fa:	2300      	movs	r3, #0
 80106fc:	2200      	movs	r2, #0
 80106fe:	2100      	movs	r1, #0
 8010700:	68f8      	ldr	r0, [r7, #12]
 8010702:	f008 f84b 	bl	801879c <USBD_LL_PrepareReceive>
 8010706:	e026      	b.n	8010756 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d00a      	beq.n	801072a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 801071a:	2b03      	cmp	r3, #3
 801071c:	d105      	bne.n	801072a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	68f8      	ldr	r0, [r7, #12]
 8010728:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801072a:	2180      	movs	r1, #128	; 0x80
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f007 ff89 	bl	8018644 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010732:	68f8      	ldr	r0, [r7, #12]
 8010734:	f000 fe8f 	bl	8011456 <USBD_CtlReceiveStatus>
 8010738:	e00d      	b.n	8010756 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010740:	2b04      	cmp	r3, #4
 8010742:	d004      	beq.n	801074e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801074a:	2b00      	cmp	r3, #0
 801074c:	d103      	bne.n	8010756 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801074e:	2180      	movs	r1, #128	; 0x80
 8010750:	68f8      	ldr	r0, [r7, #12]
 8010752:	f007 ff77 	bl	8018644 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 801075c:	2b01      	cmp	r3, #1
 801075e:	d11d      	bne.n	801079c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8010760:	68f8      	ldr	r0, [r7, #12]
 8010762:	f7ff fe82 	bl	801046a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2200      	movs	r2, #0
 801076a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 801076e:	e015      	b.n	801079c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010776:	695b      	ldr	r3, [r3, #20]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d00d      	beq.n	8010798 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8010782:	2b03      	cmp	r3, #3
 8010784:	d108      	bne.n	8010798 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801078c:	695b      	ldr	r3, [r3, #20]
 801078e:	7afa      	ldrb	r2, [r7, #11]
 8010790:	4611      	mov	r1, r2
 8010792:	68f8      	ldr	r0, [r7, #12]
 8010794:	4798      	blx	r3
 8010796:	e001      	b.n	801079c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010798:	2302      	movs	r3, #2
 801079a:	e000      	b.n	801079e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801079c:	2300      	movs	r3, #0
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3718      	adds	r7, #24
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b082      	sub	sp, #8
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107ae:	2340      	movs	r3, #64	; 0x40
 80107b0:	2200      	movs	r2, #0
 80107b2:	2100      	movs	r1, #0
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f007 ff00 	bl	80185ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2201      	movs	r2, #1
 80107be:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2240      	movs	r2, #64	; 0x40
 80107c6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107ca:	2340      	movs	r3, #64	; 0x40
 80107cc:	2200      	movs	r2, #0
 80107ce:	2180      	movs	r1, #128	; 0x80
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f007 fef2 	bl	80185ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2201      	movs	r2, #1
 80107da:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2240      	movs	r2, #64	; 0x40
 80107e0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2201      	movs	r2, #1
 80107e6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2200      	movs	r2, #0
 80107fc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010806:	2b00      	cmp	r3, #0
 8010808:	d009      	beq.n	801081e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	6852      	ldr	r2, [r2, #4]
 8010816:	b2d2      	uxtb	r2, r2
 8010818:	4611      	mov	r1, r2
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	4798      	blx	r3
  }

  return USBD_OK;
 801081e:	2300      	movs	r3, #0
}
 8010820:	4618      	mov	r0, r3
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}

08010828 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	460b      	mov	r3, r1
 8010832:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	78fa      	ldrb	r2, [r7, #3]
 8010838:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 801083a:	2300      	movs	r3, #0
}
 801083c:	4618      	mov	r0, r3
 801083e:	370c      	adds	r7, #12
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr

08010848 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2204      	movs	r2, #4
 8010860:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010864:	2300      	movs	r3, #0
}
 8010866:	4618      	mov	r0, r3
 8010868:	370c      	adds	r7, #12
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr

08010872 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8010872:	b480      	push	{r7}
 8010874:	b083      	sub	sp, #12
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010886:	2300      	movs	r3, #0
}
 8010888:	4618      	mov	r0, r3
 801088a:	370c      	adds	r7, #12
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr

08010894 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80108a2:	2b03      	cmp	r3, #3
 80108a4:	d10b      	bne.n	80108be <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80108ac:	69db      	ldr	r3, [r3, #28]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d005      	beq.n	80108be <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80108b8:	69db      	ldr	r3, [r3, #28]
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80108be:	2300      	movs	r3, #0
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	460b      	mov	r3, r1
 80108d2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	370c      	adds	r7, #12
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr

080108e2 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80108e2:	b480      	push	{r7}
 80108e4:	b083      	sub	sp, #12
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
 80108ea:	460b      	mov	r3, r1
 80108ec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80108ee:	2300      	movs	r3, #0
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	370c      	adds	r7, #12
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr

080108fc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b083      	sub	sp, #12
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	370c      	adds	r7, #12
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr

08010912 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8010912:	b580      	push	{r7, lr}
 8010914:	b082      	sub	sp, #8
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2201      	movs	r2, #1
 801091e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	6852      	ldr	r2, [r2, #4]
 801092e:	b2d2      	uxtb	r2, r2
 8010930:	4611      	mov	r1, r2
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	4798      	blx	r3

  return USBD_OK;
 8010936:	2300      	movs	r3, #0
}
 8010938:	4618      	mov	r0, r3
 801093a:	3708      	adds	r7, #8
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801094a:	2300      	movs	r3, #0
 801094c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010956:	2b20      	cmp	r3, #32
 8010958:	d004      	beq.n	8010964 <USBD_StdDevReq+0x24>
 801095a:	2b40      	cmp	r3, #64	; 0x40
 801095c:	d002      	beq.n	8010964 <USBD_StdDevReq+0x24>
 801095e:	2b00      	cmp	r3, #0
 8010960:	d008      	beq.n	8010974 <USBD_StdDevReq+0x34>
 8010962:	e04c      	b.n	80109fe <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	6839      	ldr	r1, [r7, #0]
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	4798      	blx	r3
    break;
 8010972:	e049      	b.n	8010a08 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	785b      	ldrb	r3, [r3, #1]
 8010978:	2b09      	cmp	r3, #9
 801097a:	d83a      	bhi.n	80109f2 <USBD_StdDevReq+0xb2>
 801097c:	a201      	add	r2, pc, #4	; (adr r2, 8010984 <USBD_StdDevReq+0x44>)
 801097e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010982:	bf00      	nop
 8010984:	080109d5 	.word	0x080109d5
 8010988:	080109e9 	.word	0x080109e9
 801098c:	080109f3 	.word	0x080109f3
 8010990:	080109df 	.word	0x080109df
 8010994:	080109f3 	.word	0x080109f3
 8010998:	080109b7 	.word	0x080109b7
 801099c:	080109ad 	.word	0x080109ad
 80109a0:	080109f3 	.word	0x080109f3
 80109a4:	080109cb 	.word	0x080109cb
 80109a8:	080109c1 	.word	0x080109c1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80109ac:	6839      	ldr	r1, [r7, #0]
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f000 f9d2 	bl	8010d58 <USBD_GetDescriptor>
      break;
 80109b4:	e022      	b.n	80109fc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80109b6:	6839      	ldr	r1, [r7, #0]
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 fac7 	bl	8010f4c <USBD_SetAddress>
      break;
 80109be:	e01d      	b.n	80109fc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80109c0:	6839      	ldr	r1, [r7, #0]
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 fb04 	bl	8010fd0 <USBD_SetConfig>
      break;
 80109c8:	e018      	b.n	80109fc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80109ca:	6839      	ldr	r1, [r7, #0]
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f000 fb8d 	bl	80110ec <USBD_GetConfig>
      break;
 80109d2:	e013      	b.n	80109fc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80109d4:	6839      	ldr	r1, [r7, #0]
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 fbbc 	bl	8011154 <USBD_GetStatus>
      break;
 80109dc:	e00e      	b.n	80109fc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80109de:	6839      	ldr	r1, [r7, #0]
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 fbea 	bl	80111ba <USBD_SetFeature>
      break;
 80109e6:	e009      	b.n	80109fc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80109e8:	6839      	ldr	r1, [r7, #0]
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f000 fbf9 	bl	80111e2 <USBD_ClrFeature>
      break;
 80109f0:	e004      	b.n	80109fc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80109f2:	6839      	ldr	r1, [r7, #0]
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 fc52 	bl	801129e <USBD_CtlError>
      break;
 80109fa:	bf00      	nop
    }
    break;
 80109fc:	e004      	b.n	8010a08 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80109fe:	6839      	ldr	r1, [r7, #0]
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f000 fc4c 	bl	801129e <USBD_CtlError>
    break;
 8010a06:	bf00      	nop
  }

  return ret;
 8010a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop

08010a14 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b084      	sub	sp, #16
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a2a:	2b20      	cmp	r3, #32
 8010a2c:	d003      	beq.n	8010a36 <USBD_StdItfReq+0x22>
 8010a2e:	2b40      	cmp	r3, #64	; 0x40
 8010a30:	d001      	beq.n	8010a36 <USBD_StdItfReq+0x22>
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d12a      	bne.n	8010a8c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	2b02      	cmp	r3, #2
 8010a40:	d81d      	bhi.n	8010a7e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	889b      	ldrh	r3, [r3, #4]
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	2b01      	cmp	r3, #1
 8010a4a:	d813      	bhi.n	8010a74 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010a52:	689b      	ldr	r3, [r3, #8]
 8010a54:	6839      	ldr	r1, [r7, #0]
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	4798      	blx	r3
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	88db      	ldrh	r3, [r3, #6]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d110      	bne.n	8010a88 <USBD_StdItfReq+0x74>
 8010a66:	7bfb      	ldrb	r3, [r7, #15]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d10d      	bne.n	8010a88 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f000 fcdf 	bl	8011430 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010a72:	e009      	b.n	8010a88 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010a74:	6839      	ldr	r1, [r7, #0]
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 fc11 	bl	801129e <USBD_CtlError>
      break;
 8010a7c:	e004      	b.n	8010a88 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010a7e:	6839      	ldr	r1, [r7, #0]
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 fc0c 	bl	801129e <USBD_CtlError>
      break;
 8010a86:	e000      	b.n	8010a8a <USBD_StdItfReq+0x76>
      break;
 8010a88:	bf00      	nop
    }
    break;
 8010a8a:	e004      	b.n	8010a96 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010a8c:	6839      	ldr	r1, [r7, #0]
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 fc05 	bl	801129e <USBD_CtlError>
    break;
 8010a94:	bf00      	nop
  }

  return USBD_OK;
 8010a96:	2300      	movs	r3, #0
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3710      	adds	r7, #16
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	889b      	ldrh	r3, [r3, #4]
 8010ab2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010abc:	2b20      	cmp	r3, #32
 8010abe:	d004      	beq.n	8010aca <USBD_StdEPReq+0x2a>
 8010ac0:	2b40      	cmp	r3, #64	; 0x40
 8010ac2:	d002      	beq.n	8010aca <USBD_StdEPReq+0x2a>
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d008      	beq.n	8010ada <USBD_StdEPReq+0x3a>
 8010ac8:	e13b      	b.n	8010d42 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ad0:	689b      	ldr	r3, [r3, #8]
 8010ad2:	6839      	ldr	r1, [r7, #0]
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	4798      	blx	r3
    break;
 8010ad8:	e138      	b.n	8010d4c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ae2:	2b20      	cmp	r3, #32
 8010ae4:	d10a      	bne.n	8010afc <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	6839      	ldr	r1, [r7, #0]
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	4798      	blx	r3
 8010af4:	4603      	mov	r3, r0
 8010af6:	73fb      	strb	r3, [r7, #15]

      return ret;
 8010af8:	7bfb      	ldrb	r3, [r7, #15]
 8010afa:	e128      	b.n	8010d4e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	785b      	ldrb	r3, [r3, #1]
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d03e      	beq.n	8010b82 <USBD_StdEPReq+0xe2>
 8010b04:	2b03      	cmp	r3, #3
 8010b06:	d002      	beq.n	8010b0e <USBD_StdEPReq+0x6e>
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d070      	beq.n	8010bee <USBD_StdEPReq+0x14e>
 8010b0c:	e113      	b.n	8010d36 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010b14:	2b02      	cmp	r3, #2
 8010b16:	d002      	beq.n	8010b1e <USBD_StdEPReq+0x7e>
 8010b18:	2b03      	cmp	r3, #3
 8010b1a:	d015      	beq.n	8010b48 <USBD_StdEPReq+0xa8>
 8010b1c:	e02b      	b.n	8010b76 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b1e:	7bbb      	ldrb	r3, [r7, #14]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d00c      	beq.n	8010b3e <USBD_StdEPReq+0x9e>
 8010b24:	7bbb      	ldrb	r3, [r7, #14]
 8010b26:	2b80      	cmp	r3, #128	; 0x80
 8010b28:	d009      	beq.n	8010b3e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010b2a:	7bbb      	ldrb	r3, [r7, #14]
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f007 fd88 	bl	8018644 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010b34:	2180      	movs	r1, #128	; 0x80
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f007 fd84 	bl	8018644 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010b3c:	e020      	b.n	8010b80 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8010b3e:	6839      	ldr	r1, [r7, #0]
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 fbac 	bl	801129e <USBD_CtlError>
        break;
 8010b46:	e01b      	b.n	8010b80 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	885b      	ldrh	r3, [r3, #2]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d10e      	bne.n	8010b6e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010b50:	7bbb      	ldrb	r3, [r7, #14]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d00b      	beq.n	8010b6e <USBD_StdEPReq+0xce>
 8010b56:	7bbb      	ldrb	r3, [r7, #14]
 8010b58:	2b80      	cmp	r3, #128	; 0x80
 8010b5a:	d008      	beq.n	8010b6e <USBD_StdEPReq+0xce>
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	88db      	ldrh	r3, [r3, #6]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d104      	bne.n	8010b6e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8010b64:	7bbb      	ldrb	r3, [r7, #14]
 8010b66:	4619      	mov	r1, r3
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f007 fd6b 	bl	8018644 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f000 fc5e 	bl	8011430 <USBD_CtlSendStatus>

        break;
 8010b74:	e004      	b.n	8010b80 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8010b76:	6839      	ldr	r1, [r7, #0]
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f000 fb90 	bl	801129e <USBD_CtlError>
        break;
 8010b7e:	bf00      	nop
      }
      break;
 8010b80:	e0de      	b.n	8010d40 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010b88:	2b02      	cmp	r3, #2
 8010b8a:	d002      	beq.n	8010b92 <USBD_StdEPReq+0xf2>
 8010b8c:	2b03      	cmp	r3, #3
 8010b8e:	d015      	beq.n	8010bbc <USBD_StdEPReq+0x11c>
 8010b90:	e026      	b.n	8010be0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b92:	7bbb      	ldrb	r3, [r7, #14]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d00c      	beq.n	8010bb2 <USBD_StdEPReq+0x112>
 8010b98:	7bbb      	ldrb	r3, [r7, #14]
 8010b9a:	2b80      	cmp	r3, #128	; 0x80
 8010b9c:	d009      	beq.n	8010bb2 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010b9e:	7bbb      	ldrb	r3, [r7, #14]
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f007 fd4e 	bl	8018644 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010ba8:	2180      	movs	r1, #128	; 0x80
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f007 fd4a 	bl	8018644 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010bb0:	e01c      	b.n	8010bec <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8010bb2:	6839      	ldr	r1, [r7, #0]
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 fb72 	bl	801129e <USBD_CtlError>
        break;
 8010bba:	e017      	b.n	8010bec <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	885b      	ldrh	r3, [r3, #2]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d112      	bne.n	8010bea <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010bc4:	7bbb      	ldrb	r3, [r7, #14]
 8010bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d004      	beq.n	8010bd8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8010bce:	7bbb      	ldrb	r3, [r7, #14]
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f007 fd55 	bl	8018682 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f000 fc29 	bl	8011430 <USBD_CtlSendStatus>
        }
        break;
 8010bde:	e004      	b.n	8010bea <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8010be0:	6839      	ldr	r1, [r7, #0]
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f000 fb5b 	bl	801129e <USBD_CtlError>
        break;
 8010be8:	e000      	b.n	8010bec <USBD_StdEPReq+0x14c>
        break;
 8010bea:	bf00      	nop
      }
      break;
 8010bec:	e0a8      	b.n	8010d40 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010bf4:	2b02      	cmp	r3, #2
 8010bf6:	d002      	beq.n	8010bfe <USBD_StdEPReq+0x15e>
 8010bf8:	2b03      	cmp	r3, #3
 8010bfa:	d031      	beq.n	8010c60 <USBD_StdEPReq+0x1c0>
 8010bfc:	e095      	b.n	8010d2a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010bfe:	7bbb      	ldrb	r3, [r7, #14]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d007      	beq.n	8010c14 <USBD_StdEPReq+0x174>
 8010c04:	7bbb      	ldrb	r3, [r7, #14]
 8010c06:	2b80      	cmp	r3, #128	; 0x80
 8010c08:	d004      	beq.n	8010c14 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8010c0a:	6839      	ldr	r1, [r7, #0]
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f000 fb46 	bl	801129e <USBD_CtlError>
          break;
 8010c12:	e08f      	b.n	8010d34 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	da0b      	bge.n	8010c34 <USBD_StdEPReq+0x194>
 8010c1c:	7bbb      	ldrb	r3, [r7, #14]
 8010c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c22:	4613      	mov	r3, r2
 8010c24:	009b      	lsls	r3, r3, #2
 8010c26:	4413      	add	r3, r2
 8010c28:	009b      	lsls	r3, r3, #2
 8010c2a:	3310      	adds	r3, #16
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	4413      	add	r3, r2
 8010c30:	3304      	adds	r3, #4
 8010c32:	e00a      	b.n	8010c4a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010c34:	7bbb      	ldrb	r3, [r7, #14]
 8010c36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	009b      	lsls	r3, r3, #2
 8010c3e:	4413      	add	r3, r2
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	4413      	add	r3, r2
 8010c4a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	2202      	movs	r2, #2
 8010c56:	4619      	mov	r1, r3
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f000 fb8b 	bl	8011374 <USBD_CtlSendData>
          break;
 8010c5e:	e069      	b.n	8010d34 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8010c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	da11      	bge.n	8010c8c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010c68:	7bbb      	ldrb	r3, [r7, #14]
 8010c6a:	f003 020f 	and.w	r2, r3, #15
 8010c6e:	6879      	ldr	r1, [r7, #4]
 8010c70:	4613      	mov	r3, r2
 8010c72:	009b      	lsls	r3, r3, #2
 8010c74:	4413      	add	r3, r2
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	440b      	add	r3, r1
 8010c7a:	3318      	adds	r3, #24
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d117      	bne.n	8010cb2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8010c82:	6839      	ldr	r1, [r7, #0]
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f000 fb0a 	bl	801129e <USBD_CtlError>
            break;
 8010c8a:	e053      	b.n	8010d34 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010c8c:	7bbb      	ldrb	r3, [r7, #14]
 8010c8e:	f003 020f 	and.w	r2, r3, #15
 8010c92:	6879      	ldr	r1, [r7, #4]
 8010c94:	4613      	mov	r3, r2
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	4413      	add	r3, r2
 8010c9a:	009b      	lsls	r3, r3, #2
 8010c9c:	440b      	add	r3, r1
 8010c9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d104      	bne.n	8010cb2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8010ca8:	6839      	ldr	r1, [r7, #0]
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 faf7 	bl	801129e <USBD_CtlError>
            break;
 8010cb0:	e040      	b.n	8010d34 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	da0b      	bge.n	8010cd2 <USBD_StdEPReq+0x232>
 8010cba:	7bbb      	ldrb	r3, [r7, #14]
 8010cbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010cc0:	4613      	mov	r3, r2
 8010cc2:	009b      	lsls	r3, r3, #2
 8010cc4:	4413      	add	r3, r2
 8010cc6:	009b      	lsls	r3, r3, #2
 8010cc8:	3310      	adds	r3, #16
 8010cca:	687a      	ldr	r2, [r7, #4]
 8010ccc:	4413      	add	r3, r2
 8010cce:	3304      	adds	r3, #4
 8010cd0:	e00a      	b.n	8010ce8 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010cd2:	7bbb      	ldrb	r3, [r7, #14]
 8010cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010cd8:	4613      	mov	r3, r2
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	4413      	add	r3, r2
 8010cde:	009b      	lsls	r3, r3, #2
 8010ce0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010cea:	7bbb      	ldrb	r3, [r7, #14]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d002      	beq.n	8010cf6 <USBD_StdEPReq+0x256>
 8010cf0:	7bbb      	ldrb	r3, [r7, #14]
 8010cf2:	2b80      	cmp	r3, #128	; 0x80
 8010cf4:	d103      	bne.n	8010cfe <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	601a      	str	r2, [r3, #0]
 8010cfc:	e00e      	b.n	8010d1c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8010cfe:	7bbb      	ldrb	r3, [r7, #14]
 8010d00:	4619      	mov	r1, r3
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f007 fcdc 	bl	80186c0 <USBD_LL_IsStallEP>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d003      	beq.n	8010d16 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	2201      	movs	r2, #1
 8010d12:	601a      	str	r2, [r3, #0]
 8010d14:	e002      	b.n	8010d1c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	2202      	movs	r2, #2
 8010d20:	4619      	mov	r1, r3
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f000 fb26 	bl	8011374 <USBD_CtlSendData>
          break;
 8010d28:	e004      	b.n	8010d34 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8010d2a:	6839      	ldr	r1, [r7, #0]
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 fab6 	bl	801129e <USBD_CtlError>
        break;
 8010d32:	bf00      	nop
      }
      break;
 8010d34:	e004      	b.n	8010d40 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8010d36:	6839      	ldr	r1, [r7, #0]
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 fab0 	bl	801129e <USBD_CtlError>
      break;
 8010d3e:	bf00      	nop
    }
    break;
 8010d40:	e004      	b.n	8010d4c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8010d42:	6839      	ldr	r1, [r7, #0]
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 faaa 	bl	801129e <USBD_CtlError>
    break;
 8010d4a:	bf00      	nop
  }

  return ret;
 8010d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3710      	adds	r7, #16
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
	...

08010d58 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b084      	sub	sp, #16
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	885b      	ldrh	r3, [r3, #2]
 8010d66:	0a1b      	lsrs	r3, r3, #8
 8010d68:	b29b      	uxth	r3, r3
 8010d6a:	3b01      	subs	r3, #1
 8010d6c:	2b06      	cmp	r3, #6
 8010d6e:	f200 80c9 	bhi.w	8010f04 <USBD_GetDescriptor+0x1ac>
 8010d72:	a201      	add	r2, pc, #4	; (adr r2, 8010d78 <USBD_GetDescriptor+0x20>)
 8010d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d78:	08010d95 	.word	0x08010d95
 8010d7c:	08010dad 	.word	0x08010dad
 8010d80:	08010ded 	.word	0x08010ded
 8010d84:	08010f05 	.word	0x08010f05
 8010d88:	08010f05 	.word	0x08010f05
 8010d8c:	08010eb1 	.word	0x08010eb1
 8010d90:	08010ed7 	.word	0x08010ed7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	7c12      	ldrb	r2, [r2, #16]
 8010da0:	f107 010a 	add.w	r1, r7, #10
 8010da4:	4610      	mov	r0, r2
 8010da6:	4798      	blx	r3
 8010da8:	60f8      	str	r0, [r7, #12]
    break;
 8010daa:	e0b0      	b.n	8010f0e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	7c1b      	ldrb	r3, [r3, #16]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d10d      	bne.n	8010dd0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dbc:	f107 020a 	add.w	r2, r7, #10
 8010dc0:	4610      	mov	r0, r2
 8010dc2:	4798      	blx	r3
 8010dc4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	2202      	movs	r2, #2
 8010dcc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8010dce:	e09e      	b.n	8010f0e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd8:	f107 020a 	add.w	r2, r7, #10
 8010ddc:	4610      	mov	r0, r2
 8010dde:	4798      	blx	r3
 8010de0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	3301      	adds	r3, #1
 8010de6:	2202      	movs	r2, #2
 8010de8:	701a      	strb	r2, [r3, #0]
    break;
 8010dea:	e090      	b.n	8010f0e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	885b      	ldrh	r3, [r3, #2]
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	2b05      	cmp	r3, #5
 8010df4:	d856      	bhi.n	8010ea4 <USBD_GetDescriptor+0x14c>
 8010df6:	a201      	add	r2, pc, #4	; (adr r2, 8010dfc <USBD_GetDescriptor+0xa4>)
 8010df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dfc:	08010e15 	.word	0x08010e15
 8010e00:	08010e2d 	.word	0x08010e2d
 8010e04:	08010e45 	.word	0x08010e45
 8010e08:	08010e5d 	.word	0x08010e5d
 8010e0c:	08010e75 	.word	0x08010e75
 8010e10:	08010e8d 	.word	0x08010e8d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	687a      	ldr	r2, [r7, #4]
 8010e1e:	7c12      	ldrb	r2, [r2, #16]
 8010e20:	f107 010a 	add.w	r1, r7, #10
 8010e24:	4610      	mov	r0, r2
 8010e26:	4798      	blx	r3
 8010e28:	60f8      	str	r0, [r7, #12]
      break;
 8010e2a:	e040      	b.n	8010eae <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	7c12      	ldrb	r2, [r2, #16]
 8010e38:	f107 010a 	add.w	r1, r7, #10
 8010e3c:	4610      	mov	r0, r2
 8010e3e:	4798      	blx	r3
 8010e40:	60f8      	str	r0, [r7, #12]
      break;
 8010e42:	e034      	b.n	8010eae <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010e4a:	68db      	ldr	r3, [r3, #12]
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	7c12      	ldrb	r2, [r2, #16]
 8010e50:	f107 010a 	add.w	r1, r7, #10
 8010e54:	4610      	mov	r0, r2
 8010e56:	4798      	blx	r3
 8010e58:	60f8      	str	r0, [r7, #12]
      break;
 8010e5a:	e028      	b.n	8010eae <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010e62:	691b      	ldr	r3, [r3, #16]
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	7c12      	ldrb	r2, [r2, #16]
 8010e68:	f107 010a 	add.w	r1, r7, #10
 8010e6c:	4610      	mov	r0, r2
 8010e6e:	4798      	blx	r3
 8010e70:	60f8      	str	r0, [r7, #12]
      break;
 8010e72:	e01c      	b.n	8010eae <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010e7a:	695b      	ldr	r3, [r3, #20]
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	7c12      	ldrb	r2, [r2, #16]
 8010e80:	f107 010a 	add.w	r1, r7, #10
 8010e84:	4610      	mov	r0, r2
 8010e86:	4798      	blx	r3
 8010e88:	60f8      	str	r0, [r7, #12]
      break;
 8010e8a:	e010      	b.n	8010eae <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010e92:	699b      	ldr	r3, [r3, #24]
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	7c12      	ldrb	r2, [r2, #16]
 8010e98:	f107 010a 	add.w	r1, r7, #10
 8010e9c:	4610      	mov	r0, r2
 8010e9e:	4798      	blx	r3
 8010ea0:	60f8      	str	r0, [r7, #12]
      break;
 8010ea2:	e004      	b.n	8010eae <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8010ea4:	6839      	ldr	r1, [r7, #0]
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f000 f9f9 	bl	801129e <USBD_CtlError>
      return;
 8010eac:	e04b      	b.n	8010f46 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8010eae:	e02e      	b.n	8010f0e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	7c1b      	ldrb	r3, [r3, #16]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d109      	bne.n	8010ecc <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ec0:	f107 020a 	add.w	r2, r7, #10
 8010ec4:	4610      	mov	r0, r2
 8010ec6:	4798      	blx	r3
 8010ec8:	60f8      	str	r0, [r7, #12]
      break;
 8010eca:	e020      	b.n	8010f0e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010ecc:	6839      	ldr	r1, [r7, #0]
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f000 f9e5 	bl	801129e <USBD_CtlError>
      return;
 8010ed4:	e037      	b.n	8010f46 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	7c1b      	ldrb	r3, [r3, #16]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d10d      	bne.n	8010efa <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ee6:	f107 020a 	add.w	r2, r7, #10
 8010eea:	4610      	mov	r0, r2
 8010eec:	4798      	blx	r3
 8010eee:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	2207      	movs	r2, #7
 8010ef6:	701a      	strb	r2, [r3, #0]
      break;
 8010ef8:	e009      	b.n	8010f0e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010efa:	6839      	ldr	r1, [r7, #0]
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 f9ce 	bl	801129e <USBD_CtlError>
      return;
 8010f02:	e020      	b.n	8010f46 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8010f04:	6839      	ldr	r1, [r7, #0]
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f000 f9c9 	bl	801129e <USBD_CtlError>
    return;
 8010f0c:	e01b      	b.n	8010f46 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8010f0e:	897b      	ldrh	r3, [r7, #10]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d011      	beq.n	8010f38 <USBD_GetDescriptor+0x1e0>
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	88db      	ldrh	r3, [r3, #6]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d00d      	beq.n	8010f38 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	88da      	ldrh	r2, [r3, #6]
 8010f20:	897b      	ldrh	r3, [r7, #10]
 8010f22:	4293      	cmp	r3, r2
 8010f24:	bf28      	it	cs
 8010f26:	4613      	movcs	r3, r2
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8010f2c:	897b      	ldrh	r3, [r7, #10]
 8010f2e:	461a      	mov	r2, r3
 8010f30:	68f9      	ldr	r1, [r7, #12]
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 fa1e 	bl	8011374 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	88db      	ldrh	r3, [r3, #6]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d102      	bne.n	8010f46 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f000 fa75 	bl	8011430 <USBD_CtlSendStatus>
  }
}
 8010f46:	3710      	adds	r7, #16
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	889b      	ldrh	r3, [r3, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d130      	bne.n	8010fc0 <USBD_SetAddress+0x74>
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	88db      	ldrh	r3, [r3, #6]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d12c      	bne.n	8010fc0 <USBD_SetAddress+0x74>
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	885b      	ldrh	r3, [r3, #2]
 8010f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8010f6c:	d828      	bhi.n	8010fc0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	885b      	ldrh	r3, [r3, #2]
 8010f72:	b2db      	uxtb	r3, r3
 8010f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010f80:	2b03      	cmp	r3, #3
 8010f82:	d104      	bne.n	8010f8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8010f84:	6839      	ldr	r1, [r7, #0]
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f000 f989 	bl	801129e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f8c:	e01c      	b.n	8010fc8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	7bfa      	ldrb	r2, [r7, #15]
 8010f92:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010f96:	7bfb      	ldrb	r3, [r7, #15]
 8010f98:	4619      	mov	r1, r3
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f007 fbbc 	bl	8018718 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f000 fa45 	bl	8011430 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010fa6:	7bfb      	ldrb	r3, [r7, #15]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d004      	beq.n	8010fb6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2202      	movs	r2, #2
 8010fb0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fb4:	e008      	b.n	8010fc8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2201      	movs	r2, #1
 8010fba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fbe:	e003      	b.n	8010fc8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010fc0:	6839      	ldr	r1, [r7, #0]
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f000 f96b 	bl	801129e <USBD_CtlError>
  }
}
 8010fc8:	bf00      	nop
 8010fca:	3710      	adds	r7, #16
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	885b      	ldrh	r3, [r3, #2]
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	4b41      	ldr	r3, [pc, #260]	; (80110e8 <USBD_SetConfig+0x118>)
 8010fe2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010fe4:	4b40      	ldr	r3, [pc, #256]	; (80110e8 <USBD_SetConfig+0x118>)
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d904      	bls.n	8010ff6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010fec:	6839      	ldr	r1, [r7, #0]
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 f955 	bl	801129e <USBD_CtlError>
 8010ff4:	e075      	b.n	80110e2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010ffc:	2b02      	cmp	r3, #2
 8010ffe:	d002      	beq.n	8011006 <USBD_SetConfig+0x36>
 8011000:	2b03      	cmp	r3, #3
 8011002:	d023      	beq.n	801104c <USBD_SetConfig+0x7c>
 8011004:	e062      	b.n	80110cc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8011006:	4b38      	ldr	r3, [pc, #224]	; (80110e8 <USBD_SetConfig+0x118>)
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d01a      	beq.n	8011044 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 801100e:	4b36      	ldr	r3, [pc, #216]	; (80110e8 <USBD_SetConfig+0x118>)
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	461a      	mov	r2, r3
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2203      	movs	r2, #3
 801101c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011020:	4b31      	ldr	r3, [pc, #196]	; (80110e8 <USBD_SetConfig+0x118>)
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	4619      	mov	r1, r3
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f7ff fa2a 	bl	8010480 <USBD_SetClassConfig>
 801102c:	4603      	mov	r3, r0
 801102e:	2b02      	cmp	r3, #2
 8011030:	d104      	bne.n	801103c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8011032:	6839      	ldr	r1, [r7, #0]
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 f932 	bl	801129e <USBD_CtlError>
          return;
 801103a:	e052      	b.n	80110e2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f000 f9f7 	bl	8011430 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8011042:	e04e      	b.n	80110e2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 f9f3 	bl	8011430 <USBD_CtlSendStatus>
      break;
 801104a:	e04a      	b.n	80110e2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801104c:	4b26      	ldr	r3, [pc, #152]	; (80110e8 <USBD_SetConfig+0x118>)
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d112      	bne.n	801107a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2202      	movs	r2, #2
 8011058:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 801105c:	4b22      	ldr	r3, [pc, #136]	; (80110e8 <USBD_SetConfig+0x118>)
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	461a      	mov	r2, r3
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8011066:	4b20      	ldr	r3, [pc, #128]	; (80110e8 <USBD_SetConfig+0x118>)
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	4619      	mov	r1, r3
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f7ff fa26 	bl	80104be <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f000 f9dc 	bl	8011430 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8011078:	e033      	b.n	80110e2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 801107a:	4b1b      	ldr	r3, [pc, #108]	; (80110e8 <USBD_SetConfig+0x118>)
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	461a      	mov	r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	429a      	cmp	r2, r3
 8011086:	d01d      	beq.n	80110c4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	b2db      	uxtb	r3, r3
 801108e:	4619      	mov	r1, r3
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f7ff fa14 	bl	80104be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011096:	4b14      	ldr	r3, [pc, #80]	; (80110e8 <USBD_SetConfig+0x118>)
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	461a      	mov	r2, r3
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80110a0:	4b11      	ldr	r3, [pc, #68]	; (80110e8 <USBD_SetConfig+0x118>)
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	4619      	mov	r1, r3
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7ff f9ea 	bl	8010480 <USBD_SetClassConfig>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b02      	cmp	r3, #2
 80110b0:	d104      	bne.n	80110bc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80110b2:	6839      	ldr	r1, [r7, #0]
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f000 f8f2 	bl	801129e <USBD_CtlError>
          return;
 80110ba:	e012      	b.n	80110e2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 f9b7 	bl	8011430 <USBD_CtlSendStatus>
      break;
 80110c2:	e00e      	b.n	80110e2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 f9b3 	bl	8011430 <USBD_CtlSendStatus>
      break;
 80110ca:	e00a      	b.n	80110e2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80110cc:	6839      	ldr	r1, [r7, #0]
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f000 f8e5 	bl	801129e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80110d4:	4b04      	ldr	r3, [pc, #16]	; (80110e8 <USBD_SetConfig+0x118>)
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	4619      	mov	r1, r3
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f7ff f9ef 	bl	80104be <USBD_ClrClassConfig>
      break;
 80110e0:	bf00      	nop
    }
  }
}
 80110e2:	3708      	adds	r7, #8
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	20000da8 	.word	0x20000da8

080110ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	88db      	ldrh	r3, [r3, #6]
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d004      	beq.n	8011108 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80110fe:	6839      	ldr	r1, [r7, #0]
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 f8cc 	bl	801129e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8011106:	e021      	b.n	801114c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801110e:	2b01      	cmp	r3, #1
 8011110:	db17      	blt.n	8011142 <USBD_GetConfig+0x56>
 8011112:	2b02      	cmp	r3, #2
 8011114:	dd02      	ble.n	801111c <USBD_GetConfig+0x30>
 8011116:	2b03      	cmp	r3, #3
 8011118:	d00b      	beq.n	8011132 <USBD_GetConfig+0x46>
 801111a:	e012      	b.n	8011142 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2200      	movs	r2, #0
 8011120:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	3308      	adds	r3, #8
 8011126:	2201      	movs	r2, #1
 8011128:	4619      	mov	r1, r3
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f000 f922 	bl	8011374 <USBD_CtlSendData>
      break;
 8011130:	e00c      	b.n	801114c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	3304      	adds	r3, #4
 8011136:	2201      	movs	r2, #1
 8011138:	4619      	mov	r1, r3
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 f91a 	bl	8011374 <USBD_CtlSendData>
      break;
 8011140:	e004      	b.n	801114c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8011142:	6839      	ldr	r1, [r7, #0]
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 f8aa 	bl	801129e <USBD_CtlError>
      break;
 801114a:	bf00      	nop
}
 801114c:	bf00      	nop
 801114e:	3708      	adds	r7, #8
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}

08011154 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b082      	sub	sp, #8
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
 801115c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011164:	3b01      	subs	r3, #1
 8011166:	2b02      	cmp	r3, #2
 8011168:	d81e      	bhi.n	80111a8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	88db      	ldrh	r3, [r3, #6]
 801116e:	2b02      	cmp	r3, #2
 8011170:	d004      	beq.n	801117c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8011172:	6839      	ldr	r1, [r7, #0]
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f000 f892 	bl	801129e <USBD_CtlError>
      break;
 801117a:	e01a      	b.n	80111b2 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2201      	movs	r2, #1
 8011180:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8011188:	2b00      	cmp	r3, #0
 801118a:	d005      	beq.n	8011198 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	f043 0202 	orr.w	r2, r3, #2
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	330c      	adds	r3, #12
 801119c:	2202      	movs	r2, #2
 801119e:	4619      	mov	r1, r3
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f000 f8e7 	bl	8011374 <USBD_CtlSendData>
    break;
 80111a6:	e004      	b.n	80111b2 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80111a8:	6839      	ldr	r1, [r7, #0]
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f000 f877 	bl	801129e <USBD_CtlError>
    break;
 80111b0:	bf00      	nop
  }
}
 80111b2:	bf00      	nop
 80111b4:	3708      	adds	r7, #8
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b082      	sub	sp, #8
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
 80111c2:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	885b      	ldrh	r3, [r3, #2]
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d106      	bne.n	80111da <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2201      	movs	r2, #1
 80111d0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 f92b 	bl	8011430 <USBD_CtlSendStatus>
  }

}
 80111da:	bf00      	nop
 80111dc:	3708      	adds	r7, #8
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}

080111e2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b082      	sub	sp, #8
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
 80111ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80111f2:	3b01      	subs	r3, #1
 80111f4:	2b02      	cmp	r3, #2
 80111f6:	d80b      	bhi.n	8011210 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	885b      	ldrh	r3, [r3, #2]
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d10c      	bne.n	801121a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2200      	movs	r2, #0
 8011204:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f000 f911 	bl	8011430 <USBD_CtlSendStatus>
    }
    break;
 801120e:	e004      	b.n	801121a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8011210:	6839      	ldr	r1, [r7, #0]
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f000 f843 	bl	801129e <USBD_CtlError>
    break;
 8011218:	e000      	b.n	801121c <USBD_ClrFeature+0x3a>
    break;
 801121a:	bf00      	nop
  }
}
 801121c:	bf00      	nop
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	781a      	ldrb	r2, [r3, #0]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	785a      	ldrb	r2, [r3, #1]
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	3302      	adds	r3, #2
 8011242:	781b      	ldrb	r3, [r3, #0]
 8011244:	b29a      	uxth	r2, r3
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	3303      	adds	r3, #3
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	b29b      	uxth	r3, r3
 801124e:	021b      	lsls	r3, r3, #8
 8011250:	b29b      	uxth	r3, r3
 8011252:	4413      	add	r3, r2
 8011254:	b29a      	uxth	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	3304      	adds	r3, #4
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	b29a      	uxth	r2, r3
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	3305      	adds	r3, #5
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	b29b      	uxth	r3, r3
 801126a:	021b      	lsls	r3, r3, #8
 801126c:	b29b      	uxth	r3, r3
 801126e:	4413      	add	r3, r2
 8011270:	b29a      	uxth	r2, r3
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	3306      	adds	r3, #6
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	b29a      	uxth	r2, r3
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	3307      	adds	r3, #7
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	b29b      	uxth	r3, r3
 8011286:	021b      	lsls	r3, r3, #8
 8011288:	b29b      	uxth	r3, r3
 801128a:	4413      	add	r3, r2
 801128c:	b29a      	uxth	r2, r3
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	80da      	strh	r2, [r3, #6]

}
 8011292:	bf00      	nop
 8011294:	370c      	adds	r7, #12
 8011296:	46bd      	mov	sp, r7
 8011298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129c:	4770      	bx	lr

0801129e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801129e:	b580      	push	{r7, lr}
 80112a0:	b082      	sub	sp, #8
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	6078      	str	r0, [r7, #4]
 80112a6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80112a8:	2180      	movs	r1, #128	; 0x80
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f007 f9ca 	bl	8018644 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80112b0:	2100      	movs	r1, #0
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f007 f9c6 	bl	8018644 <USBD_LL_StallEP>
}
 80112b8:	bf00      	nop
 80112ba:	3708      	adds	r7, #8
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b086      	sub	sp, #24
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	60f8      	str	r0, [r7, #12]
 80112c8:	60b9      	str	r1, [r7, #8]
 80112ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80112cc:	2300      	movs	r3, #0
 80112ce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d032      	beq.n	801133c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80112d6:	68f8      	ldr	r0, [r7, #12]
 80112d8:	f000 f834 	bl	8011344 <USBD_GetLen>
 80112dc:	4603      	mov	r3, r0
 80112de:	3301      	adds	r3, #1
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	005b      	lsls	r3, r3, #1
 80112e4:	b29a      	uxth	r2, r3
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80112ea:	7dfb      	ldrb	r3, [r7, #23]
 80112ec:	1c5a      	adds	r2, r3, #1
 80112ee:	75fa      	strb	r2, [r7, #23]
 80112f0:	461a      	mov	r2, r3
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	4413      	add	r3, r2
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	7812      	ldrb	r2, [r2, #0]
 80112fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80112fc:	7dfb      	ldrb	r3, [r7, #23]
 80112fe:	1c5a      	adds	r2, r3, #1
 8011300:	75fa      	strb	r2, [r7, #23]
 8011302:	461a      	mov	r2, r3
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	4413      	add	r3, r2
 8011308:	2203      	movs	r2, #3
 801130a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801130c:	e012      	b.n	8011334 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	1c5a      	adds	r2, r3, #1
 8011312:	60fa      	str	r2, [r7, #12]
 8011314:	7dfa      	ldrb	r2, [r7, #23]
 8011316:	1c51      	adds	r1, r2, #1
 8011318:	75f9      	strb	r1, [r7, #23]
 801131a:	4611      	mov	r1, r2
 801131c:	68ba      	ldr	r2, [r7, #8]
 801131e:	440a      	add	r2, r1
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8011324:	7dfb      	ldrb	r3, [r7, #23]
 8011326:	1c5a      	adds	r2, r3, #1
 8011328:	75fa      	strb	r2, [r7, #23]
 801132a:	461a      	mov	r2, r3
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	4413      	add	r3, r2
 8011330:	2200      	movs	r2, #0
 8011332:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1e8      	bne.n	801130e <USBD_GetString+0x4e>
    }
  }
}
 801133c:	bf00      	nop
 801133e:	3718      	adds	r7, #24
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011344:	b480      	push	{r7}
 8011346:	b085      	sub	sp, #20
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 801134c:	2300      	movs	r3, #0
 801134e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8011350:	e005      	b.n	801135e <USBD_GetLen+0x1a>
    {
        len++;
 8011352:	7bfb      	ldrb	r3, [r7, #15]
 8011354:	3301      	adds	r3, #1
 8011356:	73fb      	strb	r3, [r7, #15]
        buf++;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	3301      	adds	r3, #1
 801135c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d1f5      	bne.n	8011352 <USBD_GetLen+0xe>
    }

    return len;
 8011366:	7bfb      	ldrb	r3, [r7, #15]
}
 8011368:	4618      	mov	r0, r3
 801136a:	3714      	adds	r7, #20
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr

08011374 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	4613      	mov	r3, r2
 8011380:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2202      	movs	r2, #2
 8011386:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 801138a:	88fa      	ldrh	r2, [r7, #6]
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8011390:	88fa      	ldrh	r2, [r7, #6]
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8011396:	88fb      	ldrh	r3, [r7, #6]
 8011398:	68ba      	ldr	r2, [r7, #8]
 801139a:	2100      	movs	r1, #0
 801139c:	68f8      	ldr	r0, [r7, #12]
 801139e:	f007 f9da 	bl	8018756 <USBD_LL_Transmit>

  return USBD_OK;
 80113a2:	2300      	movs	r3, #0
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3710      	adds	r7, #16
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	60f8      	str	r0, [r7, #12]
 80113b4:	60b9      	str	r1, [r7, #8]
 80113b6:	4613      	mov	r3, r2
 80113b8:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80113ba:	88fb      	ldrh	r3, [r7, #6]
 80113bc:	68ba      	ldr	r2, [r7, #8]
 80113be:	2100      	movs	r1, #0
 80113c0:	68f8      	ldr	r0, [r7, #12]
 80113c2:	f007 f9c8 	bl	8018756 <USBD_LL_Transmit>

  return USBD_OK;
 80113c6:	2300      	movs	r3, #0
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	3710      	adds	r7, #16
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}

080113d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	4613      	mov	r3, r2
 80113dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2203      	movs	r2, #3
 80113e2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80113e6:	88fa      	ldrh	r2, [r7, #6]
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80113ee:	88fa      	ldrh	r2, [r7, #6]
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80113f6:	88fb      	ldrh	r3, [r7, #6]
 80113f8:	68ba      	ldr	r2, [r7, #8]
 80113fa:	2100      	movs	r1, #0
 80113fc:	68f8      	ldr	r0, [r7, #12]
 80113fe:	f007 f9cd 	bl	801879c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011402:	2300      	movs	r3, #0
}
 8011404:	4618      	mov	r0, r3
 8011406:	3710      	adds	r7, #16
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	60f8      	str	r0, [r7, #12]
 8011414:	60b9      	str	r1, [r7, #8]
 8011416:	4613      	mov	r3, r2
 8011418:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801141a:	88fb      	ldrh	r3, [r7, #6]
 801141c:	68ba      	ldr	r2, [r7, #8]
 801141e:	2100      	movs	r1, #0
 8011420:	68f8      	ldr	r0, [r7, #12]
 8011422:	f007 f9bb 	bl	801879c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011426:	2300      	movs	r3, #0
}
 8011428:	4618      	mov	r0, r3
 801142a:	3710      	adds	r7, #16
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2204      	movs	r2, #4
 801143c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011440:	2300      	movs	r3, #0
 8011442:	2200      	movs	r2, #0
 8011444:	2100      	movs	r1, #0
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f007 f985 	bl	8018756 <USBD_LL_Transmit>

  return USBD_OK;
 801144c:	2300      	movs	r3, #0
}
 801144e:	4618      	mov	r0, r3
 8011450:	3708      	adds	r7, #8
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}

08011456 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8011456:	b580      	push	{r7, lr}
 8011458:	b082      	sub	sp, #8
 801145a:	af00      	add	r7, sp, #0
 801145c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2205      	movs	r2, #5
 8011462:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8011466:	2300      	movs	r3, #0
 8011468:	2200      	movs	r2, #0
 801146a:	2100      	movs	r1, #0
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f007 f995 	bl	801879c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011472:	2300      	movs	r3, #0
}
 8011474:	4618      	mov	r0, r3
 8011476:	3708      	adds	r7, #8
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}

0801147c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b084      	sub	sp, #16
 8011480:	af00      	add	r7, sp, #0
 8011482:	4603      	mov	r3, r0
 8011484:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011486:	79fb      	ldrb	r3, [r7, #7]
 8011488:	4a08      	ldr	r2, [pc, #32]	; (80114ac <disk_status+0x30>)
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	4413      	add	r3, r2
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	79fa      	ldrb	r2, [r7, #7]
 8011494:	4905      	ldr	r1, [pc, #20]	; (80114ac <disk_status+0x30>)
 8011496:	440a      	add	r2, r1
 8011498:	7a12      	ldrb	r2, [r2, #8]
 801149a:	4610      	mov	r0, r2
 801149c:	4798      	blx	r3
 801149e:	4603      	mov	r3, r0
 80114a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80114a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3710      	adds	r7, #16
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	20000dd4 	.word	0x20000dd4

080114b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b084      	sub	sp, #16
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	4603      	mov	r3, r0
 80114b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80114ba:	2300      	movs	r3, #0
 80114bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80114be:	79fb      	ldrb	r3, [r7, #7]
 80114c0:	4a0d      	ldr	r2, [pc, #52]	; (80114f8 <disk_initialize+0x48>)
 80114c2:	5cd3      	ldrb	r3, [r2, r3]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d111      	bne.n	80114ec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80114c8:	79fb      	ldrb	r3, [r7, #7]
 80114ca:	4a0b      	ldr	r2, [pc, #44]	; (80114f8 <disk_initialize+0x48>)
 80114cc:	2101      	movs	r1, #1
 80114ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80114d0:	79fb      	ldrb	r3, [r7, #7]
 80114d2:	4a09      	ldr	r2, [pc, #36]	; (80114f8 <disk_initialize+0x48>)
 80114d4:	009b      	lsls	r3, r3, #2
 80114d6:	4413      	add	r3, r2
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	79fa      	ldrb	r2, [r7, #7]
 80114de:	4906      	ldr	r1, [pc, #24]	; (80114f8 <disk_initialize+0x48>)
 80114e0:	440a      	add	r2, r1
 80114e2:	7a12      	ldrb	r2, [r2, #8]
 80114e4:	4610      	mov	r0, r2
 80114e6:	4798      	blx	r3
 80114e8:	4603      	mov	r3, r0
 80114ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80114ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3710      	adds	r7, #16
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}
 80114f6:	bf00      	nop
 80114f8:	20000dd4 	.word	0x20000dd4

080114fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80114fc:	b590      	push	{r4, r7, lr}
 80114fe:	b087      	sub	sp, #28
 8011500:	af00      	add	r7, sp, #0
 8011502:	60b9      	str	r1, [r7, #8]
 8011504:	607a      	str	r2, [r7, #4]
 8011506:	603b      	str	r3, [r7, #0]
 8011508:	4603      	mov	r3, r0
 801150a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801150c:	7bfb      	ldrb	r3, [r7, #15]
 801150e:	4a0a      	ldr	r2, [pc, #40]	; (8011538 <disk_read+0x3c>)
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	4413      	add	r3, r2
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	689c      	ldr	r4, [r3, #8]
 8011518:	7bfb      	ldrb	r3, [r7, #15]
 801151a:	4a07      	ldr	r2, [pc, #28]	; (8011538 <disk_read+0x3c>)
 801151c:	4413      	add	r3, r2
 801151e:	7a18      	ldrb	r0, [r3, #8]
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	68b9      	ldr	r1, [r7, #8]
 8011526:	47a0      	blx	r4
 8011528:	4603      	mov	r3, r0
 801152a:	75fb      	strb	r3, [r7, #23]
  return res;
 801152c:	7dfb      	ldrb	r3, [r7, #23]
}
 801152e:	4618      	mov	r0, r3
 8011530:	371c      	adds	r7, #28
 8011532:	46bd      	mov	sp, r7
 8011534:	bd90      	pop	{r4, r7, pc}
 8011536:	bf00      	nop
 8011538:	20000dd4 	.word	0x20000dd4

0801153c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801153c:	b590      	push	{r4, r7, lr}
 801153e:	b087      	sub	sp, #28
 8011540:	af00      	add	r7, sp, #0
 8011542:	60b9      	str	r1, [r7, #8]
 8011544:	607a      	str	r2, [r7, #4]
 8011546:	603b      	str	r3, [r7, #0]
 8011548:	4603      	mov	r3, r0
 801154a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801154c:	7bfb      	ldrb	r3, [r7, #15]
 801154e:	4a0a      	ldr	r2, [pc, #40]	; (8011578 <disk_write+0x3c>)
 8011550:	009b      	lsls	r3, r3, #2
 8011552:	4413      	add	r3, r2
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	68dc      	ldr	r4, [r3, #12]
 8011558:	7bfb      	ldrb	r3, [r7, #15]
 801155a:	4a07      	ldr	r2, [pc, #28]	; (8011578 <disk_write+0x3c>)
 801155c:	4413      	add	r3, r2
 801155e:	7a18      	ldrb	r0, [r3, #8]
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	687a      	ldr	r2, [r7, #4]
 8011564:	68b9      	ldr	r1, [r7, #8]
 8011566:	47a0      	blx	r4
 8011568:	4603      	mov	r3, r0
 801156a:	75fb      	strb	r3, [r7, #23]
  return res;
 801156c:	7dfb      	ldrb	r3, [r7, #23]
}
 801156e:	4618      	mov	r0, r3
 8011570:	371c      	adds	r7, #28
 8011572:	46bd      	mov	sp, r7
 8011574:	bd90      	pop	{r4, r7, pc}
 8011576:	bf00      	nop
 8011578:	20000dd4 	.word	0x20000dd4

0801157c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b084      	sub	sp, #16
 8011580:	af00      	add	r7, sp, #0
 8011582:	4603      	mov	r3, r0
 8011584:	603a      	str	r2, [r7, #0]
 8011586:	71fb      	strb	r3, [r7, #7]
 8011588:	460b      	mov	r3, r1
 801158a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801158c:	79fb      	ldrb	r3, [r7, #7]
 801158e:	4a09      	ldr	r2, [pc, #36]	; (80115b4 <disk_ioctl+0x38>)
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	4413      	add	r3, r2
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	691b      	ldr	r3, [r3, #16]
 8011598:	79fa      	ldrb	r2, [r7, #7]
 801159a:	4906      	ldr	r1, [pc, #24]	; (80115b4 <disk_ioctl+0x38>)
 801159c:	440a      	add	r2, r1
 801159e:	7a10      	ldrb	r0, [r2, #8]
 80115a0:	79b9      	ldrb	r1, [r7, #6]
 80115a2:	683a      	ldr	r2, [r7, #0]
 80115a4:	4798      	blx	r3
 80115a6:	4603      	mov	r3, r0
 80115a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80115aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3710      	adds	r7, #16
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	20000dd4 	.word	0x20000dd4

080115b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80115b8:	b480      	push	{r7}
 80115ba:	b085      	sub	sp, #20
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	3301      	adds	r3, #1
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80115c8:	89fb      	ldrh	r3, [r7, #14]
 80115ca:	021b      	lsls	r3, r3, #8
 80115cc:	b21a      	sxth	r2, r3
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	781b      	ldrb	r3, [r3, #0]
 80115d2:	b21b      	sxth	r3, r3
 80115d4:	4313      	orrs	r3, r2
 80115d6:	b21b      	sxth	r3, r3
 80115d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80115da:	89fb      	ldrh	r3, [r7, #14]
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3714      	adds	r7, #20
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr

080115e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80115e8:	b480      	push	{r7}
 80115ea:	b085      	sub	sp, #20
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	3303      	adds	r3, #3
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	021b      	lsls	r3, r3, #8
 80115fc:	687a      	ldr	r2, [r7, #4]
 80115fe:	3202      	adds	r2, #2
 8011600:	7812      	ldrb	r2, [r2, #0]
 8011602:	4313      	orrs	r3, r2
 8011604:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	021b      	lsls	r3, r3, #8
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	3201      	adds	r2, #1
 801160e:	7812      	ldrb	r2, [r2, #0]
 8011610:	4313      	orrs	r3, r2
 8011612:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	021b      	lsls	r3, r3, #8
 8011618:	687a      	ldr	r2, [r7, #4]
 801161a:	7812      	ldrb	r2, [r2, #0]
 801161c:	4313      	orrs	r3, r2
 801161e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011620:	68fb      	ldr	r3, [r7, #12]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3714      	adds	r7, #20
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr

0801162e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801162e:	b480      	push	{r7}
 8011630:	b083      	sub	sp, #12
 8011632:	af00      	add	r7, sp, #0
 8011634:	6078      	str	r0, [r7, #4]
 8011636:	460b      	mov	r3, r1
 8011638:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	1c5a      	adds	r2, r3, #1
 801163e:	607a      	str	r2, [r7, #4]
 8011640:	887a      	ldrh	r2, [r7, #2]
 8011642:	b2d2      	uxtb	r2, r2
 8011644:	701a      	strb	r2, [r3, #0]
 8011646:	887b      	ldrh	r3, [r7, #2]
 8011648:	0a1b      	lsrs	r3, r3, #8
 801164a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	1c5a      	adds	r2, r3, #1
 8011650:	607a      	str	r2, [r7, #4]
 8011652:	887a      	ldrh	r2, [r7, #2]
 8011654:	b2d2      	uxtb	r2, r2
 8011656:	701a      	strb	r2, [r3, #0]
}
 8011658:	bf00      	nop
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	1c5a      	adds	r2, r3, #1
 8011672:	607a      	str	r2, [r7, #4]
 8011674:	683a      	ldr	r2, [r7, #0]
 8011676:	b2d2      	uxtb	r2, r2
 8011678:	701a      	strb	r2, [r3, #0]
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	0a1b      	lsrs	r3, r3, #8
 801167e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	1c5a      	adds	r2, r3, #1
 8011684:	607a      	str	r2, [r7, #4]
 8011686:	683a      	ldr	r2, [r7, #0]
 8011688:	b2d2      	uxtb	r2, r2
 801168a:	701a      	strb	r2, [r3, #0]
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	0a1b      	lsrs	r3, r3, #8
 8011690:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	1c5a      	adds	r2, r3, #1
 8011696:	607a      	str	r2, [r7, #4]
 8011698:	683a      	ldr	r2, [r7, #0]
 801169a:	b2d2      	uxtb	r2, r2
 801169c:	701a      	strb	r2, [r3, #0]
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	0a1b      	lsrs	r3, r3, #8
 80116a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	1c5a      	adds	r2, r3, #1
 80116a8:	607a      	str	r2, [r7, #4]
 80116aa:	683a      	ldr	r2, [r7, #0]
 80116ac:	b2d2      	uxtb	r2, r2
 80116ae:	701a      	strb	r2, [r3, #0]
}
 80116b0:	bf00      	nop
 80116b2:	370c      	adds	r7, #12
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr

080116bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80116bc:	b480      	push	{r7}
 80116be:	b087      	sub	sp, #28
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	60b9      	str	r1, [r7, #8]
 80116c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00d      	beq.n	80116f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80116d6:	693a      	ldr	r2, [r7, #16]
 80116d8:	1c53      	adds	r3, r2, #1
 80116da:	613b      	str	r3, [r7, #16]
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	1c59      	adds	r1, r3, #1
 80116e0:	6179      	str	r1, [r7, #20]
 80116e2:	7812      	ldrb	r2, [r2, #0]
 80116e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	3b01      	subs	r3, #1
 80116ea:	607b      	str	r3, [r7, #4]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d1f1      	bne.n	80116d6 <mem_cpy+0x1a>
	}
}
 80116f2:	bf00      	nop
 80116f4:	371c      	adds	r7, #28
 80116f6:	46bd      	mov	sp, r7
 80116f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fc:	4770      	bx	lr

080116fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80116fe:	b480      	push	{r7}
 8011700:	b087      	sub	sp, #28
 8011702:	af00      	add	r7, sp, #0
 8011704:	60f8      	str	r0, [r7, #12]
 8011706:	60b9      	str	r1, [r7, #8]
 8011708:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	1c5a      	adds	r2, r3, #1
 8011712:	617a      	str	r2, [r7, #20]
 8011714:	68ba      	ldr	r2, [r7, #8]
 8011716:	b2d2      	uxtb	r2, r2
 8011718:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	3b01      	subs	r3, #1
 801171e:	607b      	str	r3, [r7, #4]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d1f3      	bne.n	801170e <mem_set+0x10>
}
 8011726:	bf00      	nop
 8011728:	371c      	adds	r7, #28
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr

08011732 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011732:	b480      	push	{r7}
 8011734:	b089      	sub	sp, #36	; 0x24
 8011736:	af00      	add	r7, sp, #0
 8011738:	60f8      	str	r0, [r7, #12]
 801173a:	60b9      	str	r1, [r7, #8]
 801173c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	61fb      	str	r3, [r7, #28]
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011746:	2300      	movs	r3, #0
 8011748:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	1c5a      	adds	r2, r3, #1
 801174e:	61fa      	str	r2, [r7, #28]
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	4619      	mov	r1, r3
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	1c5a      	adds	r2, r3, #1
 8011758:	61ba      	str	r2, [r7, #24]
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	1acb      	subs	r3, r1, r3
 801175e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	3b01      	subs	r3, #1
 8011764:	607b      	str	r3, [r7, #4]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d002      	beq.n	8011772 <mem_cmp+0x40>
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d0eb      	beq.n	801174a <mem_cmp+0x18>

	return r;
 8011772:	697b      	ldr	r3, [r7, #20]
}
 8011774:	4618      	mov	r0, r3
 8011776:	3724      	adds	r7, #36	; 0x24
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr

08011780 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011780:	b480      	push	{r7}
 8011782:	b083      	sub	sp, #12
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801178a:	e002      	b.n	8011792 <chk_chr+0x12>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	3301      	adds	r3, #1
 8011790:	607b      	str	r3, [r7, #4]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d005      	beq.n	80117a6 <chk_chr+0x26>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	461a      	mov	r2, r3
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d1f2      	bne.n	801178c <chk_chr+0xc>
	return *str;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	781b      	ldrb	r3, [r3, #0]
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	370c      	adds	r7, #12
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr
	...

080117b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b085      	sub	sp, #20
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80117c2:	2300      	movs	r3, #0
 80117c4:	60bb      	str	r3, [r7, #8]
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	60fb      	str	r3, [r7, #12]
 80117ca:	e029      	b.n	8011820 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80117cc:	4a27      	ldr	r2, [pc, #156]	; (801186c <chk_lock+0xb4>)
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	011b      	lsls	r3, r3, #4
 80117d2:	4413      	add	r3, r2
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d01d      	beq.n	8011816 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80117da:	4a24      	ldr	r2, [pc, #144]	; (801186c <chk_lock+0xb4>)
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	011b      	lsls	r3, r3, #4
 80117e0:	4413      	add	r3, r2
 80117e2:	681a      	ldr	r2, [r3, #0]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d116      	bne.n	801181a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80117ec:	4a1f      	ldr	r2, [pc, #124]	; (801186c <chk_lock+0xb4>)
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	011b      	lsls	r3, r3, #4
 80117f2:	4413      	add	r3, r2
 80117f4:	3304      	adds	r3, #4
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d10c      	bne.n	801181a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011800:	4a1a      	ldr	r2, [pc, #104]	; (801186c <chk_lock+0xb4>)
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	011b      	lsls	r3, r3, #4
 8011806:	4413      	add	r3, r2
 8011808:	3308      	adds	r3, #8
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011810:	429a      	cmp	r2, r3
 8011812:	d102      	bne.n	801181a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011814:	e007      	b.n	8011826 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011816:	2301      	movs	r3, #1
 8011818:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	3301      	adds	r3, #1
 801181e:	60fb      	str	r3, [r7, #12]
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	2b01      	cmp	r3, #1
 8011824:	d9d2      	bls.n	80117cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2b02      	cmp	r3, #2
 801182a:	d109      	bne.n	8011840 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d102      	bne.n	8011838 <chk_lock+0x80>
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	2b02      	cmp	r3, #2
 8011836:	d101      	bne.n	801183c <chk_lock+0x84>
 8011838:	2300      	movs	r3, #0
 801183a:	e010      	b.n	801185e <chk_lock+0xa6>
 801183c:	2312      	movs	r3, #18
 801183e:	e00e      	b.n	801185e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d108      	bne.n	8011858 <chk_lock+0xa0>
 8011846:	4a09      	ldr	r2, [pc, #36]	; (801186c <chk_lock+0xb4>)
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	011b      	lsls	r3, r3, #4
 801184c:	4413      	add	r3, r2
 801184e:	330c      	adds	r3, #12
 8011850:	881b      	ldrh	r3, [r3, #0]
 8011852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011856:	d101      	bne.n	801185c <chk_lock+0xa4>
 8011858:	2310      	movs	r3, #16
 801185a:	e000      	b.n	801185e <chk_lock+0xa6>
 801185c:	2300      	movs	r3, #0
}
 801185e:	4618      	mov	r0, r3
 8011860:	3714      	adds	r7, #20
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr
 801186a:	bf00      	nop
 801186c:	20000db4 	.word	0x20000db4

08011870 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011870:	b480      	push	{r7}
 8011872:	b083      	sub	sp, #12
 8011874:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011876:	2300      	movs	r3, #0
 8011878:	607b      	str	r3, [r7, #4]
 801187a:	e002      	b.n	8011882 <enq_lock+0x12>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	3301      	adds	r3, #1
 8011880:	607b      	str	r3, [r7, #4]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2b01      	cmp	r3, #1
 8011886:	d806      	bhi.n	8011896 <enq_lock+0x26>
 8011888:	4a09      	ldr	r2, [pc, #36]	; (80118b0 <enq_lock+0x40>)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	011b      	lsls	r3, r3, #4
 801188e:	4413      	add	r3, r2
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d1f2      	bne.n	801187c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2b02      	cmp	r3, #2
 801189a:	bf14      	ite	ne
 801189c:	2301      	movne	r3, #1
 801189e:	2300      	moveq	r3, #0
 80118a0:	b2db      	uxtb	r3, r3
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	370c      	adds	r7, #12
 80118a6:	46bd      	mov	sp, r7
 80118a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ac:	4770      	bx	lr
 80118ae:	bf00      	nop
 80118b0:	20000db4 	.word	0x20000db4

080118b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b085      	sub	sp, #20
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80118be:	2300      	movs	r3, #0
 80118c0:	60fb      	str	r3, [r7, #12]
 80118c2:	e01f      	b.n	8011904 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80118c4:	4a41      	ldr	r2, [pc, #260]	; (80119cc <inc_lock+0x118>)
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	011b      	lsls	r3, r3, #4
 80118ca:	4413      	add	r3, r2
 80118cc:	681a      	ldr	r2, [r3, #0]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d113      	bne.n	80118fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80118d6:	4a3d      	ldr	r2, [pc, #244]	; (80119cc <inc_lock+0x118>)
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	011b      	lsls	r3, r3, #4
 80118dc:	4413      	add	r3, r2
 80118de:	3304      	adds	r3, #4
 80118e0:	681a      	ldr	r2, [r3, #0]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d109      	bne.n	80118fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80118ea:	4a38      	ldr	r2, [pc, #224]	; (80119cc <inc_lock+0x118>)
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	011b      	lsls	r3, r3, #4
 80118f0:	4413      	add	r3, r2
 80118f2:	3308      	adds	r3, #8
 80118f4:	681a      	ldr	r2, [r3, #0]
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d006      	beq.n	801190c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	3301      	adds	r3, #1
 8011902:	60fb      	str	r3, [r7, #12]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	2b01      	cmp	r3, #1
 8011908:	d9dc      	bls.n	80118c4 <inc_lock+0x10>
 801190a:	e000      	b.n	801190e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801190c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2b02      	cmp	r3, #2
 8011912:	d132      	bne.n	801197a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011914:	2300      	movs	r3, #0
 8011916:	60fb      	str	r3, [r7, #12]
 8011918:	e002      	b.n	8011920 <inc_lock+0x6c>
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	3301      	adds	r3, #1
 801191e:	60fb      	str	r3, [r7, #12]
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2b01      	cmp	r3, #1
 8011924:	d806      	bhi.n	8011934 <inc_lock+0x80>
 8011926:	4a29      	ldr	r2, [pc, #164]	; (80119cc <inc_lock+0x118>)
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	011b      	lsls	r3, r3, #4
 801192c:	4413      	add	r3, r2
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d1f2      	bne.n	801191a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	2b02      	cmp	r3, #2
 8011938:	d101      	bne.n	801193e <inc_lock+0x8a>
 801193a:	2300      	movs	r3, #0
 801193c:	e040      	b.n	80119c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	4922      	ldr	r1, [pc, #136]	; (80119cc <inc_lock+0x118>)
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	011b      	lsls	r3, r3, #4
 8011948:	440b      	add	r3, r1
 801194a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	689a      	ldr	r2, [r3, #8]
 8011950:	491e      	ldr	r1, [pc, #120]	; (80119cc <inc_lock+0x118>)
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	011b      	lsls	r3, r3, #4
 8011956:	440b      	add	r3, r1
 8011958:	3304      	adds	r3, #4
 801195a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	695a      	ldr	r2, [r3, #20]
 8011960:	491a      	ldr	r1, [pc, #104]	; (80119cc <inc_lock+0x118>)
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	011b      	lsls	r3, r3, #4
 8011966:	440b      	add	r3, r1
 8011968:	3308      	adds	r3, #8
 801196a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801196c:	4a17      	ldr	r2, [pc, #92]	; (80119cc <inc_lock+0x118>)
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	011b      	lsls	r3, r3, #4
 8011972:	4413      	add	r3, r2
 8011974:	330c      	adds	r3, #12
 8011976:	2200      	movs	r2, #0
 8011978:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d009      	beq.n	8011994 <inc_lock+0xe0>
 8011980:	4a12      	ldr	r2, [pc, #72]	; (80119cc <inc_lock+0x118>)
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	011b      	lsls	r3, r3, #4
 8011986:	4413      	add	r3, r2
 8011988:	330c      	adds	r3, #12
 801198a:	881b      	ldrh	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d001      	beq.n	8011994 <inc_lock+0xe0>
 8011990:	2300      	movs	r3, #0
 8011992:	e015      	b.n	80119c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d108      	bne.n	80119ac <inc_lock+0xf8>
 801199a:	4a0c      	ldr	r2, [pc, #48]	; (80119cc <inc_lock+0x118>)
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	011b      	lsls	r3, r3, #4
 80119a0:	4413      	add	r3, r2
 80119a2:	330c      	adds	r3, #12
 80119a4:	881b      	ldrh	r3, [r3, #0]
 80119a6:	3301      	adds	r3, #1
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	e001      	b.n	80119b0 <inc_lock+0xfc>
 80119ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80119b0:	4906      	ldr	r1, [pc, #24]	; (80119cc <inc_lock+0x118>)
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	011b      	lsls	r3, r3, #4
 80119b6:	440b      	add	r3, r1
 80119b8:	330c      	adds	r3, #12
 80119ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	3301      	adds	r3, #1
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3714      	adds	r7, #20
 80119c4:	46bd      	mov	sp, r7
 80119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ca:	4770      	bx	lr
 80119cc:	20000db4 	.word	0x20000db4

080119d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80119d0:	b480      	push	{r7}
 80119d2:	b085      	sub	sp, #20
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	3b01      	subs	r3, #1
 80119dc:	607b      	str	r3, [r7, #4]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d825      	bhi.n	8011a30 <dec_lock+0x60>
		n = Files[i].ctr;
 80119e4:	4a17      	ldr	r2, [pc, #92]	; (8011a44 <dec_lock+0x74>)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	011b      	lsls	r3, r3, #4
 80119ea:	4413      	add	r3, r2
 80119ec:	330c      	adds	r3, #12
 80119ee:	881b      	ldrh	r3, [r3, #0]
 80119f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80119f2:	89fb      	ldrh	r3, [r7, #14]
 80119f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119f8:	d101      	bne.n	80119fe <dec_lock+0x2e>
 80119fa:	2300      	movs	r3, #0
 80119fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80119fe:	89fb      	ldrh	r3, [r7, #14]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d002      	beq.n	8011a0a <dec_lock+0x3a>
 8011a04:	89fb      	ldrh	r3, [r7, #14]
 8011a06:	3b01      	subs	r3, #1
 8011a08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011a0a:	4a0e      	ldr	r2, [pc, #56]	; (8011a44 <dec_lock+0x74>)
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	011b      	lsls	r3, r3, #4
 8011a10:	4413      	add	r3, r2
 8011a12:	330c      	adds	r3, #12
 8011a14:	89fa      	ldrh	r2, [r7, #14]
 8011a16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011a18:	89fb      	ldrh	r3, [r7, #14]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d105      	bne.n	8011a2a <dec_lock+0x5a>
 8011a1e:	4a09      	ldr	r2, [pc, #36]	; (8011a44 <dec_lock+0x74>)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	011b      	lsls	r3, r3, #4
 8011a24:	4413      	add	r3, r2
 8011a26:	2200      	movs	r2, #0
 8011a28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	737b      	strb	r3, [r7, #13]
 8011a2e:	e001      	b.n	8011a34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011a30:	2302      	movs	r3, #2
 8011a32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011a34:	7b7b      	ldrb	r3, [r7, #13]
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3714      	adds	r7, #20
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop
 8011a44:	20000db4 	.word	0x20000db4

08011a48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b085      	sub	sp, #20
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011a50:	2300      	movs	r3, #0
 8011a52:	60fb      	str	r3, [r7, #12]
 8011a54:	e010      	b.n	8011a78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011a56:	4a0d      	ldr	r2, [pc, #52]	; (8011a8c <clear_lock+0x44>)
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	011b      	lsls	r3, r3, #4
 8011a5c:	4413      	add	r3, r2
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d105      	bne.n	8011a72 <clear_lock+0x2a>
 8011a66:	4a09      	ldr	r2, [pc, #36]	; (8011a8c <clear_lock+0x44>)
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	011b      	lsls	r3, r3, #4
 8011a6c:	4413      	add	r3, r2
 8011a6e:	2200      	movs	r2, #0
 8011a70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	3301      	adds	r3, #1
 8011a76:	60fb      	str	r3, [r7, #12]
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	d9eb      	bls.n	8011a56 <clear_lock+0xe>
	}
}
 8011a7e:	bf00      	nop
 8011a80:	3714      	adds	r7, #20
 8011a82:	46bd      	mov	sp, r7
 8011a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a88:	4770      	bx	lr
 8011a8a:	bf00      	nop
 8011a8c:	20000db4 	.word	0x20000db4

08011a90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b086      	sub	sp, #24
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	78db      	ldrb	r3, [r3, #3]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d034      	beq.n	8011b0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aa8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	7858      	ldrb	r0, [r3, #1]
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	697a      	ldr	r2, [r7, #20]
 8011ab8:	f7ff fd40 	bl	801153c <disk_write>
 8011abc:	4603      	mov	r3, r0
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d002      	beq.n	8011ac8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	73fb      	strb	r3, [r7, #15]
 8011ac6:	e022      	b.n	8011b0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad2:	697a      	ldr	r2, [r7, #20]
 8011ad4:	1ad2      	subs	r2, r2, r3
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	69db      	ldr	r3, [r3, #28]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d217      	bcs.n	8011b0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	789b      	ldrb	r3, [r3, #2]
 8011ae2:	613b      	str	r3, [r7, #16]
 8011ae4:	e010      	b.n	8011b08 <sync_window+0x78>
					wsect += fs->fsize;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	69db      	ldr	r3, [r3, #28]
 8011aea:	697a      	ldr	r2, [r7, #20]
 8011aec:	4413      	add	r3, r2
 8011aee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	7858      	ldrb	r0, [r3, #1]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011afa:	2301      	movs	r3, #1
 8011afc:	697a      	ldr	r2, [r7, #20]
 8011afe:	f7ff fd1d 	bl	801153c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	3b01      	subs	r3, #1
 8011b06:	613b      	str	r3, [r7, #16]
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	2b01      	cmp	r3, #1
 8011b0c:	d8eb      	bhi.n	8011ae6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3718      	adds	r7, #24
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}

08011b18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b084      	sub	sp, #16
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011b22:	2300      	movs	r3, #0
 8011b24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b2a:	683a      	ldr	r2, [r7, #0]
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d01b      	beq.n	8011b68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f7ff ffad 	bl	8011a90 <sync_window>
 8011b36:	4603      	mov	r3, r0
 8011b38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011b3a:	7bfb      	ldrb	r3, [r7, #15]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d113      	bne.n	8011b68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	7858      	ldrb	r0, [r3, #1]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	683a      	ldr	r2, [r7, #0]
 8011b4e:	f7ff fcd5 	bl	80114fc <disk_read>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d004      	beq.n	8011b62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011b58:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011b5e:	2301      	movs	r3, #1
 8011b60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	683a      	ldr	r2, [r7, #0]
 8011b66:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
	...

08011b74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b084      	sub	sp, #16
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f7ff ff87 	bl	8011a90 <sync_window>
 8011b82:	4603      	mov	r3, r0
 8011b84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011b86:	7bfb      	ldrb	r3, [r7, #15]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d159      	bne.n	8011c40 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	2b03      	cmp	r3, #3
 8011b92:	d149      	bne.n	8011c28 <sync_fs+0xb4>
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	791b      	ldrb	r3, [r3, #4]
 8011b98:	2b01      	cmp	r3, #1
 8011b9a:	d145      	bne.n	8011c28 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	899b      	ldrh	r3, [r3, #12]
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	2100      	movs	r1, #0
 8011baa:	f7ff fda8 	bl	80116fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	3334      	adds	r3, #52	; 0x34
 8011bb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011bb6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7ff fd37 	bl	801162e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	3334      	adds	r3, #52	; 0x34
 8011bc4:	4921      	ldr	r1, [pc, #132]	; (8011c4c <sync_fs+0xd8>)
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7ff fd4c 	bl	8011664 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	3334      	adds	r3, #52	; 0x34
 8011bd0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011bd4:	491e      	ldr	r1, [pc, #120]	; (8011c50 <sync_fs+0xdc>)
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7ff fd44 	bl	8011664 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	3334      	adds	r3, #52	; 0x34
 8011be0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	695b      	ldr	r3, [r3, #20]
 8011be8:	4619      	mov	r1, r3
 8011bea:	4610      	mov	r0, r2
 8011bec:	f7ff fd3a 	bl	8011664 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	3334      	adds	r3, #52	; 0x34
 8011bf4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	691b      	ldr	r3, [r3, #16]
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	4610      	mov	r0, r2
 8011c00:	f7ff fd30 	bl	8011664 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6a1b      	ldr	r3, [r3, #32]
 8011c08:	1c5a      	adds	r2, r3, #1
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	7858      	ldrb	r0, [r3, #1]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	f7ff fc8d 	bl	801153c <disk_write>
			fs->fsi_flag = 0;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2200      	movs	r2, #0
 8011c26:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	785b      	ldrb	r3, [r3, #1]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	2100      	movs	r1, #0
 8011c30:	4618      	mov	r0, r3
 8011c32:	f7ff fca3 	bl	801157c <disk_ioctl>
 8011c36:	4603      	mov	r3, r0
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d001      	beq.n	8011c40 <sync_fs+0xcc>
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3710      	adds	r7, #16
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	41615252 	.word	0x41615252
 8011c50:	61417272 	.word	0x61417272

08011c54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b083      	sub	sp, #12
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	3b02      	subs	r3, #2
 8011c62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	699b      	ldr	r3, [r3, #24]
 8011c68:	3b02      	subs	r3, #2
 8011c6a:	683a      	ldr	r2, [r7, #0]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d301      	bcc.n	8011c74 <clust2sect+0x20>
 8011c70:	2300      	movs	r3, #0
 8011c72:	e008      	b.n	8011c86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	895b      	ldrh	r3, [r3, #10]
 8011c78:	461a      	mov	r2, r3
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	fb03 f202 	mul.w	r2, r3, r2
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c84:	4413      	add	r3, r2
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	370c      	adds	r7, #12
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c90:	4770      	bx	lr

08011c92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011c92:	b580      	push	{r7, lr}
 8011c94:	b086      	sub	sp, #24
 8011c96:	af00      	add	r7, sp, #0
 8011c98:	6078      	str	r0, [r7, #4]
 8011c9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d904      	bls.n	8011cb2 <get_fat+0x20>
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	699b      	ldr	r3, [r3, #24]
 8011cac:	683a      	ldr	r2, [r7, #0]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d302      	bcc.n	8011cb8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	617b      	str	r3, [r7, #20]
 8011cb6:	e0b7      	b.n	8011e28 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cbc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	2b02      	cmp	r3, #2
 8011cc4:	d05a      	beq.n	8011d7c <get_fat+0xea>
 8011cc6:	2b03      	cmp	r3, #3
 8011cc8:	d07d      	beq.n	8011dc6 <get_fat+0x134>
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	f040 80a2 	bne.w	8011e14 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	60fb      	str	r3, [r7, #12]
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	085b      	lsrs	r3, r3, #1
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	4413      	add	r3, r2
 8011cdc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ce2:	693b      	ldr	r3, [r7, #16]
 8011ce4:	899b      	ldrh	r3, [r3, #12]
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8011cee:	4413      	add	r3, r2
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	6938      	ldr	r0, [r7, #16]
 8011cf4:	f7ff ff10 	bl	8011b18 <move_window>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	f040 808d 	bne.w	8011e1a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	1c5a      	adds	r2, r3, #1
 8011d04:	60fa      	str	r2, [r7, #12]
 8011d06:	693a      	ldr	r2, [r7, #16]
 8011d08:	8992      	ldrh	r2, [r2, #12]
 8011d0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d0e:	fb02 f201 	mul.w	r2, r2, r1
 8011d12:	1a9b      	subs	r3, r3, r2
 8011d14:	693a      	ldr	r2, [r7, #16]
 8011d16:	4413      	add	r3, r2
 8011d18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011d1c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	899b      	ldrh	r3, [r3, #12]
 8011d26:	4619      	mov	r1, r3
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d2e:	4413      	add	r3, r2
 8011d30:	4619      	mov	r1, r3
 8011d32:	6938      	ldr	r0, [r7, #16]
 8011d34:	f7ff fef0 	bl	8011b18 <move_window>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d16f      	bne.n	8011e1e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	899b      	ldrh	r3, [r3, #12]
 8011d42:	461a      	mov	r2, r3
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d4a:	fb02 f201 	mul.w	r2, r2, r1
 8011d4e:	1a9b      	subs	r3, r3, r2
 8011d50:	693a      	ldr	r2, [r7, #16]
 8011d52:	4413      	add	r3, r2
 8011d54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011d58:	021b      	lsls	r3, r3, #8
 8011d5a:	461a      	mov	r2, r3
 8011d5c:	68bb      	ldr	r3, [r7, #8]
 8011d5e:	4313      	orrs	r3, r2
 8011d60:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	f003 0301 	and.w	r3, r3, #1
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d002      	beq.n	8011d72 <get_fat+0xe0>
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	091b      	lsrs	r3, r3, #4
 8011d70:	e002      	b.n	8011d78 <get_fat+0xe6>
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011d78:	617b      	str	r3, [r7, #20]
			break;
 8011d7a:	e055      	b.n	8011e28 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	899b      	ldrh	r3, [r3, #12]
 8011d84:	085b      	lsrs	r3, r3, #1
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	4619      	mov	r1, r3
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d90:	4413      	add	r3, r2
 8011d92:	4619      	mov	r1, r3
 8011d94:	6938      	ldr	r0, [r7, #16]
 8011d96:	f7ff febf 	bl	8011b18 <move_window>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d140      	bne.n	8011e22 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	005b      	lsls	r3, r3, #1
 8011daa:	693a      	ldr	r2, [r7, #16]
 8011dac:	8992      	ldrh	r2, [r2, #12]
 8011dae:	fbb3 f0f2 	udiv	r0, r3, r2
 8011db2:	fb02 f200 	mul.w	r2, r2, r0
 8011db6:	1a9b      	subs	r3, r3, r2
 8011db8:	440b      	add	r3, r1
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7ff fbfc 	bl	80115b8 <ld_word>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	617b      	str	r3, [r7, #20]
			break;
 8011dc4:	e030      	b.n	8011e28 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	899b      	ldrh	r3, [r3, #12]
 8011dce:	089b      	lsrs	r3, r3, #2
 8011dd0:	b29b      	uxth	r3, r3
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dda:	4413      	add	r3, r2
 8011ddc:	4619      	mov	r1, r3
 8011dde:	6938      	ldr	r0, [r7, #16]
 8011de0:	f7ff fe9a 	bl	8011b18 <move_window>
 8011de4:	4603      	mov	r3, r0
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d11d      	bne.n	8011e26 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	693a      	ldr	r2, [r7, #16]
 8011df6:	8992      	ldrh	r2, [r2, #12]
 8011df8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011dfc:	fb02 f200 	mul.w	r2, r2, r0
 8011e00:	1a9b      	subs	r3, r3, r2
 8011e02:	440b      	add	r3, r1
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7ff fbef 	bl	80115e8 <ld_dword>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011e10:	617b      	str	r3, [r7, #20]
			break;
 8011e12:	e009      	b.n	8011e28 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011e14:	2301      	movs	r3, #1
 8011e16:	617b      	str	r3, [r7, #20]
 8011e18:	e006      	b.n	8011e28 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e1a:	bf00      	nop
 8011e1c:	e004      	b.n	8011e28 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e1e:	bf00      	nop
 8011e20:	e002      	b.n	8011e28 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e22:	bf00      	nop
 8011e24:	e000      	b.n	8011e28 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e26:	bf00      	nop
		}
	}

	return val;
 8011e28:	697b      	ldr	r3, [r7, #20]
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3718      	adds	r7, #24
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011e32:	b590      	push	{r4, r7, lr}
 8011e34:	b089      	sub	sp, #36	; 0x24
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	60f8      	str	r0, [r7, #12]
 8011e3a:	60b9      	str	r1, [r7, #8]
 8011e3c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011e3e:	2302      	movs	r3, #2
 8011e40:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	f240 8106 	bls.w	8012056 <put_fat+0x224>
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	699b      	ldr	r3, [r3, #24]
 8011e4e:	68ba      	ldr	r2, [r7, #8]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	f080 8100 	bcs.w	8012056 <put_fat+0x224>
		switch (fs->fs_type) {
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	2b02      	cmp	r3, #2
 8011e5c:	f000 8088 	beq.w	8011f70 <put_fat+0x13e>
 8011e60:	2b03      	cmp	r3, #3
 8011e62:	f000 80b0 	beq.w	8011fc6 <put_fat+0x194>
 8011e66:	2b01      	cmp	r3, #1
 8011e68:	f040 80f5 	bne.w	8012056 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	61bb      	str	r3, [r7, #24]
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	085b      	lsrs	r3, r3, #1
 8011e74:	69ba      	ldr	r2, [r7, #24]
 8011e76:	4413      	add	r3, r2
 8011e78:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	899b      	ldrh	r3, [r3, #12]
 8011e82:	4619      	mov	r1, r3
 8011e84:	69bb      	ldr	r3, [r7, #24]
 8011e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e8a:	4413      	add	r3, r2
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	f7ff fe42 	bl	8011b18 <move_window>
 8011e94:	4603      	mov	r3, r0
 8011e96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e98:	7ffb      	ldrb	r3, [r7, #31]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	f040 80d4 	bne.w	8012048 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011ea6:	69bb      	ldr	r3, [r7, #24]
 8011ea8:	1c5a      	adds	r2, r3, #1
 8011eaa:	61ba      	str	r2, [r7, #24]
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	8992      	ldrh	r2, [r2, #12]
 8011eb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011eb4:	fb02 f200 	mul.w	r2, r2, r0
 8011eb8:	1a9b      	subs	r3, r3, r2
 8011eba:	440b      	add	r3, r1
 8011ebc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	f003 0301 	and.w	r3, r3, #1
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d00d      	beq.n	8011ee4 <put_fat+0xb2>
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	781b      	ldrb	r3, [r3, #0]
 8011ecc:	b25b      	sxtb	r3, r3
 8011ece:	f003 030f 	and.w	r3, r3, #15
 8011ed2:	b25a      	sxtb	r2, r3
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	011b      	lsls	r3, r3, #4
 8011eda:	b25b      	sxtb	r3, r3
 8011edc:	4313      	orrs	r3, r2
 8011ede:	b25b      	sxtb	r3, r3
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	e001      	b.n	8011ee8 <put_fat+0xb6>
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	b2db      	uxtb	r3, r3
 8011ee8:	697a      	ldr	r2, [r7, #20]
 8011eea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2201      	movs	r2, #1
 8011ef0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	899b      	ldrh	r3, [r3, #12]
 8011efa:	4619      	mov	r1, r3
 8011efc:	69bb      	ldr	r3, [r7, #24]
 8011efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f02:	4413      	add	r3, r2
 8011f04:	4619      	mov	r1, r3
 8011f06:	68f8      	ldr	r0, [r7, #12]
 8011f08:	f7ff fe06 	bl	8011b18 <move_window>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f10:	7ffb      	ldrb	r3, [r7, #31]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	f040 809a 	bne.w	801204c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	899b      	ldrh	r3, [r3, #12]
 8011f22:	461a      	mov	r2, r3
 8011f24:	69bb      	ldr	r3, [r7, #24]
 8011f26:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f2a:	fb02 f200 	mul.w	r2, r2, r0
 8011f2e:	1a9b      	subs	r3, r3, r2
 8011f30:	440b      	add	r3, r1
 8011f32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	f003 0301 	and.w	r3, r3, #1
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d003      	beq.n	8011f46 <put_fat+0x114>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	091b      	lsrs	r3, r3, #4
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	e00e      	b.n	8011f64 <put_fat+0x132>
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	b25b      	sxtb	r3, r3
 8011f4c:	f023 030f 	bic.w	r3, r3, #15
 8011f50:	b25a      	sxtb	r2, r3
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	0a1b      	lsrs	r3, r3, #8
 8011f56:	b25b      	sxtb	r3, r3
 8011f58:	f003 030f 	and.w	r3, r3, #15
 8011f5c:	b25b      	sxtb	r3, r3
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	b25b      	sxtb	r3, r3
 8011f62:	b2db      	uxtb	r3, r3
 8011f64:	697a      	ldr	r2, [r7, #20]
 8011f66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	70da      	strb	r2, [r3, #3]
			break;
 8011f6e:	e072      	b.n	8012056 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	899b      	ldrh	r3, [r3, #12]
 8011f78:	085b      	lsrs	r3, r3, #1
 8011f7a:	b29b      	uxth	r3, r3
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f84:	4413      	add	r3, r2
 8011f86:	4619      	mov	r1, r3
 8011f88:	68f8      	ldr	r0, [r7, #12]
 8011f8a:	f7ff fdc5 	bl	8011b18 <move_window>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f92:	7ffb      	ldrb	r3, [r7, #31]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d15b      	bne.n	8012050 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	005b      	lsls	r3, r3, #1
 8011fa2:	68fa      	ldr	r2, [r7, #12]
 8011fa4:	8992      	ldrh	r2, [r2, #12]
 8011fa6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011faa:	fb02 f200 	mul.w	r2, r2, r0
 8011fae:	1a9b      	subs	r3, r3, r2
 8011fb0:	440b      	add	r3, r1
 8011fb2:	687a      	ldr	r2, [r7, #4]
 8011fb4:	b292      	uxth	r2, r2
 8011fb6:	4611      	mov	r1, r2
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7ff fb38 	bl	801162e <st_word>
			fs->wflag = 1;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	70da      	strb	r2, [r3, #3]
			break;
 8011fc4:	e047      	b.n	8012056 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	899b      	ldrh	r3, [r3, #12]
 8011fce:	089b      	lsrs	r3, r3, #2
 8011fd0:	b29b      	uxth	r3, r3
 8011fd2:	4619      	mov	r1, r3
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fda:	4413      	add	r3, r2
 8011fdc:	4619      	mov	r1, r3
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f7ff fd9a 	bl	8011b18 <move_window>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fe8:	7ffb      	ldrb	r3, [r7, #31]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d132      	bne.n	8012054 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	009b      	lsls	r3, r3, #2
 8011ffe:	68fa      	ldr	r2, [r7, #12]
 8012000:	8992      	ldrh	r2, [r2, #12]
 8012002:	fbb3 f0f2 	udiv	r0, r3, r2
 8012006:	fb02 f200 	mul.w	r2, r2, r0
 801200a:	1a9b      	subs	r3, r3, r2
 801200c:	440b      	add	r3, r1
 801200e:	4618      	mov	r0, r3
 8012010:	f7ff faea 	bl	80115e8 <ld_dword>
 8012014:	4603      	mov	r3, r0
 8012016:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801201a:	4323      	orrs	r3, r4
 801201c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	009b      	lsls	r3, r3, #2
 8012028:	68fa      	ldr	r2, [r7, #12]
 801202a:	8992      	ldrh	r2, [r2, #12]
 801202c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012030:	fb02 f200 	mul.w	r2, r2, r0
 8012034:	1a9b      	subs	r3, r3, r2
 8012036:	440b      	add	r3, r1
 8012038:	6879      	ldr	r1, [r7, #4]
 801203a:	4618      	mov	r0, r3
 801203c:	f7ff fb12 	bl	8011664 <st_dword>
			fs->wflag = 1;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	2201      	movs	r2, #1
 8012044:	70da      	strb	r2, [r3, #3]
			break;
 8012046:	e006      	b.n	8012056 <put_fat+0x224>
			if (res != FR_OK) break;
 8012048:	bf00      	nop
 801204a:	e004      	b.n	8012056 <put_fat+0x224>
			if (res != FR_OK) break;
 801204c:	bf00      	nop
 801204e:	e002      	b.n	8012056 <put_fat+0x224>
			if (res != FR_OK) break;
 8012050:	bf00      	nop
 8012052:	e000      	b.n	8012056 <put_fat+0x224>
			if (res != FR_OK) break;
 8012054:	bf00      	nop
		}
	}
	return res;
 8012056:	7ffb      	ldrb	r3, [r7, #31]
}
 8012058:	4618      	mov	r0, r3
 801205a:	3724      	adds	r7, #36	; 0x24
 801205c:	46bd      	mov	sp, r7
 801205e:	bd90      	pop	{r4, r7, pc}

08012060 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b088      	sub	sp, #32
 8012064:	af00      	add	r7, sp, #0
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	60b9      	str	r1, [r7, #8]
 801206a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801206c:	2300      	movs	r3, #0
 801206e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	2b01      	cmp	r3, #1
 801207a:	d904      	bls.n	8012086 <remove_chain+0x26>
 801207c:	69bb      	ldr	r3, [r7, #24]
 801207e:	699b      	ldr	r3, [r3, #24]
 8012080:	68ba      	ldr	r2, [r7, #8]
 8012082:	429a      	cmp	r2, r3
 8012084:	d301      	bcc.n	801208a <remove_chain+0x2a>
 8012086:	2302      	movs	r3, #2
 8012088:	e04b      	b.n	8012122 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d00c      	beq.n	80120aa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012090:	f04f 32ff 	mov.w	r2, #4294967295
 8012094:	6879      	ldr	r1, [r7, #4]
 8012096:	69b8      	ldr	r0, [r7, #24]
 8012098:	f7ff fecb 	bl	8011e32 <put_fat>
 801209c:	4603      	mov	r3, r0
 801209e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80120a0:	7ffb      	ldrb	r3, [r7, #31]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d001      	beq.n	80120aa <remove_chain+0x4a>
 80120a6:	7ffb      	ldrb	r3, [r7, #31]
 80120a8:	e03b      	b.n	8012122 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80120aa:	68b9      	ldr	r1, [r7, #8]
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f7ff fdf0 	bl	8011c92 <get_fat>
 80120b2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d031      	beq.n	801211e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d101      	bne.n	80120c4 <remove_chain+0x64>
 80120c0:	2302      	movs	r3, #2
 80120c2:	e02e      	b.n	8012122 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120ca:	d101      	bne.n	80120d0 <remove_chain+0x70>
 80120cc:	2301      	movs	r3, #1
 80120ce:	e028      	b.n	8012122 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80120d0:	2200      	movs	r2, #0
 80120d2:	68b9      	ldr	r1, [r7, #8]
 80120d4:	69b8      	ldr	r0, [r7, #24]
 80120d6:	f7ff feac 	bl	8011e32 <put_fat>
 80120da:	4603      	mov	r3, r0
 80120dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80120de:	7ffb      	ldrb	r3, [r7, #31]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d001      	beq.n	80120e8 <remove_chain+0x88>
 80120e4:	7ffb      	ldrb	r3, [r7, #31]
 80120e6:	e01c      	b.n	8012122 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	695a      	ldr	r2, [r3, #20]
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	699b      	ldr	r3, [r3, #24]
 80120f0:	3b02      	subs	r3, #2
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d20b      	bcs.n	801210e <remove_chain+0xae>
			fs->free_clst++;
 80120f6:	69bb      	ldr	r3, [r7, #24]
 80120f8:	695b      	ldr	r3, [r3, #20]
 80120fa:	1c5a      	adds	r2, r3, #1
 80120fc:	69bb      	ldr	r3, [r7, #24]
 80120fe:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012100:	69bb      	ldr	r3, [r7, #24]
 8012102:	791b      	ldrb	r3, [r3, #4]
 8012104:	f043 0301 	orr.w	r3, r3, #1
 8012108:	b2da      	uxtb	r2, r3
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012112:	69bb      	ldr	r3, [r7, #24]
 8012114:	699b      	ldr	r3, [r3, #24]
 8012116:	68ba      	ldr	r2, [r7, #8]
 8012118:	429a      	cmp	r2, r3
 801211a:	d3c6      	bcc.n	80120aa <remove_chain+0x4a>
 801211c:	e000      	b.n	8012120 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801211e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012120:	2300      	movs	r3, #0
}
 8012122:	4618      	mov	r0, r3
 8012124:	3720      	adds	r7, #32
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}

0801212a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801212a:	b580      	push	{r7, lr}
 801212c:	b088      	sub	sp, #32
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
 8012132:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10d      	bne.n	801215c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	691b      	ldr	r3, [r3, #16]
 8012144:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012146:	69bb      	ldr	r3, [r7, #24]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d004      	beq.n	8012156 <create_chain+0x2c>
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	699b      	ldr	r3, [r3, #24]
 8012150:	69ba      	ldr	r2, [r7, #24]
 8012152:	429a      	cmp	r2, r3
 8012154:	d31b      	bcc.n	801218e <create_chain+0x64>
 8012156:	2301      	movs	r3, #1
 8012158:	61bb      	str	r3, [r7, #24]
 801215a:	e018      	b.n	801218e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801215c:	6839      	ldr	r1, [r7, #0]
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f7ff fd97 	bl	8011c92 <get_fat>
 8012164:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d801      	bhi.n	8012170 <create_chain+0x46>
 801216c:	2301      	movs	r3, #1
 801216e:	e070      	b.n	8012252 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012176:	d101      	bne.n	801217c <create_chain+0x52>
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	e06a      	b.n	8012252 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	699b      	ldr	r3, [r3, #24]
 8012180:	68fa      	ldr	r2, [r7, #12]
 8012182:	429a      	cmp	r2, r3
 8012184:	d201      	bcs.n	801218a <create_chain+0x60>
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	e063      	b.n	8012252 <create_chain+0x128>
		scl = clst;
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	3301      	adds	r3, #1
 8012196:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	699b      	ldr	r3, [r3, #24]
 801219c:	69fa      	ldr	r2, [r7, #28]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d307      	bcc.n	80121b2 <create_chain+0x88>
				ncl = 2;
 80121a2:	2302      	movs	r3, #2
 80121a4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80121a6:	69fa      	ldr	r2, [r7, #28]
 80121a8:	69bb      	ldr	r3, [r7, #24]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d901      	bls.n	80121b2 <create_chain+0x88>
 80121ae:	2300      	movs	r3, #0
 80121b0:	e04f      	b.n	8012252 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80121b2:	69f9      	ldr	r1, [r7, #28]
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7ff fd6c 	bl	8011c92 <get_fat>
 80121ba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d00e      	beq.n	80121e0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d003      	beq.n	80121d0 <create_chain+0xa6>
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ce:	d101      	bne.n	80121d4 <create_chain+0xaa>
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	e03e      	b.n	8012252 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80121d4:	69fa      	ldr	r2, [r7, #28]
 80121d6:	69bb      	ldr	r3, [r7, #24]
 80121d8:	429a      	cmp	r2, r3
 80121da:	d1da      	bne.n	8012192 <create_chain+0x68>
 80121dc:	2300      	movs	r3, #0
 80121de:	e038      	b.n	8012252 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80121e0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80121e2:	f04f 32ff 	mov.w	r2, #4294967295
 80121e6:	69f9      	ldr	r1, [r7, #28]
 80121e8:	6938      	ldr	r0, [r7, #16]
 80121ea:	f7ff fe22 	bl	8011e32 <put_fat>
 80121ee:	4603      	mov	r3, r0
 80121f0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80121f2:	7dfb      	ldrb	r3, [r7, #23]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d109      	bne.n	801220c <create_chain+0xe2>
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d006      	beq.n	801220c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80121fe:	69fa      	ldr	r2, [r7, #28]
 8012200:	6839      	ldr	r1, [r7, #0]
 8012202:	6938      	ldr	r0, [r7, #16]
 8012204:	f7ff fe15 	bl	8011e32 <put_fat>
 8012208:	4603      	mov	r3, r0
 801220a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801220c:	7dfb      	ldrb	r3, [r7, #23]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d116      	bne.n	8012240 <create_chain+0x116>
		fs->last_clst = ncl;
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	69fa      	ldr	r2, [r7, #28]
 8012216:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	695a      	ldr	r2, [r3, #20]
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	699b      	ldr	r3, [r3, #24]
 8012220:	3b02      	subs	r3, #2
 8012222:	429a      	cmp	r2, r3
 8012224:	d804      	bhi.n	8012230 <create_chain+0x106>
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	695b      	ldr	r3, [r3, #20]
 801222a:	1e5a      	subs	r2, r3, #1
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	791b      	ldrb	r3, [r3, #4]
 8012234:	f043 0301 	orr.w	r3, r3, #1
 8012238:	b2da      	uxtb	r2, r3
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	711a      	strb	r2, [r3, #4]
 801223e:	e007      	b.n	8012250 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012240:	7dfb      	ldrb	r3, [r7, #23]
 8012242:	2b01      	cmp	r3, #1
 8012244:	d102      	bne.n	801224c <create_chain+0x122>
 8012246:	f04f 33ff 	mov.w	r3, #4294967295
 801224a:	e000      	b.n	801224e <create_chain+0x124>
 801224c:	2301      	movs	r3, #1
 801224e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012250:	69fb      	ldr	r3, [r7, #28]
}
 8012252:	4618      	mov	r0, r3
 8012254:	3720      	adds	r7, #32
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}

0801225a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801225a:	b480      	push	{r7}
 801225c:	b087      	sub	sp, #28
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
 8012262:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801226e:	3304      	adds	r3, #4
 8012270:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	899b      	ldrh	r3, [r3, #12]
 8012276:	461a      	mov	r2, r3
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	fbb3 f3f2 	udiv	r3, r3, r2
 801227e:	68fa      	ldr	r2, [r7, #12]
 8012280:	8952      	ldrh	r2, [r2, #10]
 8012282:	fbb3 f3f2 	udiv	r3, r3, r2
 8012286:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	1d1a      	adds	r2, r3, #4
 801228c:	613a      	str	r2, [r7, #16]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d101      	bne.n	801229c <clmt_clust+0x42>
 8012298:	2300      	movs	r3, #0
 801229a:	e010      	b.n	80122be <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801229c:	697a      	ldr	r2, [r7, #20]
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	429a      	cmp	r2, r3
 80122a2:	d307      	bcc.n	80122b4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80122a4:	697a      	ldr	r2, [r7, #20]
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	1ad3      	subs	r3, r2, r3
 80122aa:	617b      	str	r3, [r7, #20]
 80122ac:	693b      	ldr	r3, [r7, #16]
 80122ae:	3304      	adds	r3, #4
 80122b0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80122b2:	e7e9      	b.n	8012288 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80122b4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	681a      	ldr	r2, [r3, #0]
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	4413      	add	r3, r2
}
 80122be:	4618      	mov	r0, r3
 80122c0:	371c      	adds	r7, #28
 80122c2:	46bd      	mov	sp, r7
 80122c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c8:	4770      	bx	lr

080122ca <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80122ca:	b580      	push	{r7, lr}
 80122cc:	b086      	sub	sp, #24
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	6078      	str	r0, [r7, #4]
 80122d2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80122e0:	d204      	bcs.n	80122ec <dir_sdi+0x22>
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	f003 031f 	and.w	r3, r3, #31
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d001      	beq.n	80122f0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80122ec:	2302      	movs	r3, #2
 80122ee:	e071      	b.n	80123d4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	683a      	ldr	r2, [r7, #0]
 80122f4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	689b      	ldr	r3, [r3, #8]
 80122fa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d106      	bne.n	8012310 <dir_sdi+0x46>
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	781b      	ldrb	r3, [r3, #0]
 8012306:	2b02      	cmp	r3, #2
 8012308:	d902      	bls.n	8012310 <dir_sdi+0x46>
		clst = fs->dirbase;
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801230e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d10c      	bne.n	8012330 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	095b      	lsrs	r3, r3, #5
 801231a:	693a      	ldr	r2, [r7, #16]
 801231c:	8912      	ldrh	r2, [r2, #8]
 801231e:	4293      	cmp	r3, r2
 8012320:	d301      	bcc.n	8012326 <dir_sdi+0x5c>
 8012322:	2302      	movs	r3, #2
 8012324:	e056      	b.n	80123d4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012326:	693b      	ldr	r3, [r7, #16]
 8012328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	61da      	str	r2, [r3, #28]
 801232e:	e02d      	b.n	801238c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	895b      	ldrh	r3, [r3, #10]
 8012334:	461a      	mov	r2, r3
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	899b      	ldrh	r3, [r3, #12]
 801233a:	fb03 f302 	mul.w	r3, r3, r2
 801233e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012340:	e019      	b.n	8012376 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6979      	ldr	r1, [r7, #20]
 8012346:	4618      	mov	r0, r3
 8012348:	f7ff fca3 	bl	8011c92 <get_fat>
 801234c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012354:	d101      	bne.n	801235a <dir_sdi+0x90>
 8012356:	2301      	movs	r3, #1
 8012358:	e03c      	b.n	80123d4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801235a:	697b      	ldr	r3, [r7, #20]
 801235c:	2b01      	cmp	r3, #1
 801235e:	d904      	bls.n	801236a <dir_sdi+0xa0>
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	699b      	ldr	r3, [r3, #24]
 8012364:	697a      	ldr	r2, [r7, #20]
 8012366:	429a      	cmp	r2, r3
 8012368:	d301      	bcc.n	801236e <dir_sdi+0xa4>
 801236a:	2302      	movs	r3, #2
 801236c:	e032      	b.n	80123d4 <dir_sdi+0x10a>
			ofs -= csz;
 801236e:	683a      	ldr	r2, [r7, #0]
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	1ad3      	subs	r3, r2, r3
 8012374:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012376:	683a      	ldr	r2, [r7, #0]
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	429a      	cmp	r2, r3
 801237c:	d2e1      	bcs.n	8012342 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801237e:	6979      	ldr	r1, [r7, #20]
 8012380:	6938      	ldr	r0, [r7, #16]
 8012382:	f7ff fc67 	bl	8011c54 <clust2sect>
 8012386:	4602      	mov	r2, r0
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	697a      	ldr	r2, [r7, #20]
 8012390:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	69db      	ldr	r3, [r3, #28]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d101      	bne.n	801239e <dir_sdi+0xd4>
 801239a:	2302      	movs	r3, #2
 801239c:	e01a      	b.n	80123d4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	69da      	ldr	r2, [r3, #28]
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	899b      	ldrh	r3, [r3, #12]
 80123a6:	4619      	mov	r1, r3
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80123ae:	441a      	add	r2, r3
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	899b      	ldrh	r3, [r3, #12]
 80123be:	461a      	mov	r2, r3
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80123c6:	fb02 f200 	mul.w	r2, r2, r0
 80123ca:	1a9b      	subs	r3, r3, r2
 80123cc:	18ca      	adds	r2, r1, r3
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80123d2:	2300      	movs	r3, #0
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3718      	adds	r7, #24
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	695b      	ldr	r3, [r3, #20]
 80123f0:	3320      	adds	r3, #32
 80123f2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	69db      	ldr	r3, [r3, #28]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d003      	beq.n	8012404 <dir_next+0x28>
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012402:	d301      	bcc.n	8012408 <dir_next+0x2c>
 8012404:	2304      	movs	r3, #4
 8012406:	e0bb      	b.n	8012580 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	899b      	ldrh	r3, [r3, #12]
 801240c:	461a      	mov	r2, r3
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	fbb3 f1f2 	udiv	r1, r3, r2
 8012414:	fb02 f201 	mul.w	r2, r2, r1
 8012418:	1a9b      	subs	r3, r3, r2
 801241a:	2b00      	cmp	r3, #0
 801241c:	f040 809d 	bne.w	801255a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	69db      	ldr	r3, [r3, #28]
 8012424:	1c5a      	adds	r2, r3, #1
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	699b      	ldr	r3, [r3, #24]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d10b      	bne.n	801244a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	095b      	lsrs	r3, r3, #5
 8012436:	68fa      	ldr	r2, [r7, #12]
 8012438:	8912      	ldrh	r2, [r2, #8]
 801243a:	4293      	cmp	r3, r2
 801243c:	f0c0 808d 	bcc.w	801255a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2200      	movs	r2, #0
 8012444:	61da      	str	r2, [r3, #28]
 8012446:	2304      	movs	r3, #4
 8012448:	e09a      	b.n	8012580 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	899b      	ldrh	r3, [r3, #12]
 801244e:	461a      	mov	r2, r3
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	fbb3 f3f2 	udiv	r3, r3, r2
 8012456:	68fa      	ldr	r2, [r7, #12]
 8012458:	8952      	ldrh	r2, [r2, #10]
 801245a:	3a01      	subs	r2, #1
 801245c:	4013      	ands	r3, r2
 801245e:	2b00      	cmp	r3, #0
 8012460:	d17b      	bne.n	801255a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	699b      	ldr	r3, [r3, #24]
 8012468:	4619      	mov	r1, r3
 801246a:	4610      	mov	r0, r2
 801246c:	f7ff fc11 	bl	8011c92 <get_fat>
 8012470:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	2b01      	cmp	r3, #1
 8012476:	d801      	bhi.n	801247c <dir_next+0xa0>
 8012478:	2302      	movs	r3, #2
 801247a:	e081      	b.n	8012580 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012482:	d101      	bne.n	8012488 <dir_next+0xac>
 8012484:	2301      	movs	r3, #1
 8012486:	e07b      	b.n	8012580 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	699b      	ldr	r3, [r3, #24]
 801248c:	697a      	ldr	r2, [r7, #20]
 801248e:	429a      	cmp	r2, r3
 8012490:	d359      	bcc.n	8012546 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d104      	bne.n	80124a2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2200      	movs	r2, #0
 801249c:	61da      	str	r2, [r3, #28]
 801249e:	2304      	movs	r3, #4
 80124a0:	e06e      	b.n	8012580 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	699b      	ldr	r3, [r3, #24]
 80124a8:	4619      	mov	r1, r3
 80124aa:	4610      	mov	r0, r2
 80124ac:	f7ff fe3d 	bl	801212a <create_chain>
 80124b0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d101      	bne.n	80124bc <dir_next+0xe0>
 80124b8:	2307      	movs	r3, #7
 80124ba:	e061      	b.n	8012580 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	2b01      	cmp	r3, #1
 80124c0:	d101      	bne.n	80124c6 <dir_next+0xea>
 80124c2:	2302      	movs	r3, #2
 80124c4:	e05c      	b.n	8012580 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124cc:	d101      	bne.n	80124d2 <dir_next+0xf6>
 80124ce:	2301      	movs	r3, #1
 80124d0:	e056      	b.n	8012580 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80124d2:	68f8      	ldr	r0, [r7, #12]
 80124d4:	f7ff fadc 	bl	8011a90 <sync_window>
 80124d8:	4603      	mov	r3, r0
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d001      	beq.n	80124e2 <dir_next+0x106>
 80124de:	2301      	movs	r3, #1
 80124e0:	e04e      	b.n	8012580 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	899b      	ldrh	r3, [r3, #12]
 80124ec:	461a      	mov	r2, r3
 80124ee:	2100      	movs	r1, #0
 80124f0:	f7ff f905 	bl	80116fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124f4:	2300      	movs	r3, #0
 80124f6:	613b      	str	r3, [r7, #16]
 80124f8:	6979      	ldr	r1, [r7, #20]
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f7ff fbaa 	bl	8011c54 <clust2sect>
 8012500:	4602      	mov	r2, r0
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	631a      	str	r2, [r3, #48]	; 0x30
 8012506:	e012      	b.n	801252e <dir_next+0x152>
						fs->wflag = 1;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2201      	movs	r2, #1
 801250c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	f7ff fabe 	bl	8011a90 <sync_window>
 8012514:	4603      	mov	r3, r0
 8012516:	2b00      	cmp	r3, #0
 8012518:	d001      	beq.n	801251e <dir_next+0x142>
 801251a:	2301      	movs	r3, #1
 801251c:	e030      	b.n	8012580 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	3301      	adds	r3, #1
 8012522:	613b      	str	r3, [r7, #16]
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012528:	1c5a      	adds	r2, r3, #1
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	631a      	str	r2, [r3, #48]	; 0x30
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	895b      	ldrh	r3, [r3, #10]
 8012532:	461a      	mov	r2, r3
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	4293      	cmp	r3, r2
 8012538:	d3e6      	bcc.n	8012508 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	1ad2      	subs	r2, r2, r3
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	697a      	ldr	r2, [r7, #20]
 801254a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801254c:	6979      	ldr	r1, [r7, #20]
 801254e:	68f8      	ldr	r0, [r7, #12]
 8012550:	f7ff fb80 	bl	8011c54 <clust2sect>
 8012554:	4602      	mov	r2, r0
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	68ba      	ldr	r2, [r7, #8]
 801255e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	899b      	ldrh	r3, [r3, #12]
 801256a:	461a      	mov	r2, r3
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012572:	fb02 f200 	mul.w	r2, r2, r0
 8012576:	1a9b      	subs	r3, r3, r2
 8012578:	18ca      	adds	r2, r1, r3
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801257e:	2300      	movs	r3, #0
}
 8012580:	4618      	mov	r0, r3
 8012582:	3718      	adds	r7, #24
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b086      	sub	sp, #24
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012598:	2100      	movs	r1, #0
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f7ff fe95 	bl	80122ca <dir_sdi>
 80125a0:	4603      	mov	r3, r0
 80125a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80125a4:	7dfb      	ldrb	r3, [r7, #23]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d12b      	bne.n	8012602 <dir_alloc+0x7a>
		n = 0;
 80125aa:	2300      	movs	r3, #0
 80125ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	69db      	ldr	r3, [r3, #28]
 80125b2:	4619      	mov	r1, r3
 80125b4:	68f8      	ldr	r0, [r7, #12]
 80125b6:	f7ff faaf 	bl	8011b18 <move_window>
 80125ba:	4603      	mov	r3, r0
 80125bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80125be:	7dfb      	ldrb	r3, [r7, #23]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d11d      	bne.n	8012600 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6a1b      	ldr	r3, [r3, #32]
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	2be5      	cmp	r3, #229	; 0xe5
 80125cc:	d004      	beq.n	80125d8 <dir_alloc+0x50>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6a1b      	ldr	r3, [r3, #32]
 80125d2:	781b      	ldrb	r3, [r3, #0]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d107      	bne.n	80125e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	3301      	adds	r3, #1
 80125dc:	613b      	str	r3, [r7, #16]
 80125de:	693a      	ldr	r2, [r7, #16]
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d102      	bne.n	80125ec <dir_alloc+0x64>
 80125e6:	e00c      	b.n	8012602 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80125e8:	2300      	movs	r3, #0
 80125ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80125ec:	2101      	movs	r1, #1
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f7ff fef4 	bl	80123dc <dir_next>
 80125f4:	4603      	mov	r3, r0
 80125f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80125f8:	7dfb      	ldrb	r3, [r7, #23]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d0d7      	beq.n	80125ae <dir_alloc+0x26>
 80125fe:	e000      	b.n	8012602 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012600:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012602:	7dfb      	ldrb	r3, [r7, #23]
 8012604:	2b04      	cmp	r3, #4
 8012606:	d101      	bne.n	801260c <dir_alloc+0x84>
 8012608:	2307      	movs	r3, #7
 801260a:	75fb      	strb	r3, [r7, #23]
	return res;
 801260c:	7dfb      	ldrb	r3, [r7, #23]
}
 801260e:	4618      	mov	r0, r3
 8012610:	3718      	adds	r7, #24
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}

08012616 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012616:	b580      	push	{r7, lr}
 8012618:	b084      	sub	sp, #16
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
 801261e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	331a      	adds	r3, #26
 8012624:	4618      	mov	r0, r3
 8012626:	f7fe ffc7 	bl	80115b8 <ld_word>
 801262a:	4603      	mov	r3, r0
 801262c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	2b03      	cmp	r3, #3
 8012634:	d109      	bne.n	801264a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	3314      	adds	r3, #20
 801263a:	4618      	mov	r0, r3
 801263c:	f7fe ffbc 	bl	80115b8 <ld_word>
 8012640:	4603      	mov	r3, r0
 8012642:	041b      	lsls	r3, r3, #16
 8012644:	68fa      	ldr	r2, [r7, #12]
 8012646:	4313      	orrs	r3, r2
 8012648:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801264a:	68fb      	ldr	r3, [r7, #12]
}
 801264c:	4618      	mov	r0, r3
 801264e:	3710      	adds	r7, #16
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b084      	sub	sp, #16
 8012658:	af00      	add	r7, sp, #0
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	60b9      	str	r1, [r7, #8]
 801265e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	331a      	adds	r3, #26
 8012664:	687a      	ldr	r2, [r7, #4]
 8012666:	b292      	uxth	r2, r2
 8012668:	4611      	mov	r1, r2
 801266a:	4618      	mov	r0, r3
 801266c:	f7fe ffdf 	bl	801162e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	2b03      	cmp	r3, #3
 8012676:	d109      	bne.n	801268c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	f103 0214 	add.w	r2, r3, #20
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	0c1b      	lsrs	r3, r3, #16
 8012682:	b29b      	uxth	r3, r3
 8012684:	4619      	mov	r1, r3
 8012686:	4610      	mov	r0, r2
 8012688:	f7fe ffd1 	bl	801162e <st_word>
	}
}
 801268c:	bf00      	nop
 801268e:	3710      	adds	r7, #16
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}

08012694 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b086      	sub	sp, #24
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80126a2:	2100      	movs	r1, #0
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f7ff fe10 	bl	80122ca <dir_sdi>
 80126aa:	4603      	mov	r3, r0
 80126ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80126ae:	7dfb      	ldrb	r3, [r7, #23]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d001      	beq.n	80126b8 <dir_find+0x24>
 80126b4:	7dfb      	ldrb	r3, [r7, #23]
 80126b6:	e03e      	b.n	8012736 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	69db      	ldr	r3, [r3, #28]
 80126bc:	4619      	mov	r1, r3
 80126be:	6938      	ldr	r0, [r7, #16]
 80126c0:	f7ff fa2a 	bl	8011b18 <move_window>
 80126c4:	4603      	mov	r3, r0
 80126c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80126c8:	7dfb      	ldrb	r3, [r7, #23]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d12f      	bne.n	801272e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6a1b      	ldr	r3, [r3, #32]
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80126d6:	7bfb      	ldrb	r3, [r7, #15]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d102      	bne.n	80126e2 <dir_find+0x4e>
 80126dc:	2304      	movs	r3, #4
 80126de:	75fb      	strb	r3, [r7, #23]
 80126e0:	e028      	b.n	8012734 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6a1b      	ldr	r3, [r3, #32]
 80126e6:	330b      	adds	r3, #11
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126ee:	b2da      	uxtb	r2, r3
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6a1b      	ldr	r3, [r3, #32]
 80126f8:	330b      	adds	r3, #11
 80126fa:	781b      	ldrb	r3, [r3, #0]
 80126fc:	f003 0308 	and.w	r3, r3, #8
 8012700:	2b00      	cmp	r3, #0
 8012702:	d10a      	bne.n	801271a <dir_find+0x86>
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6a18      	ldr	r0, [r3, #32]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	3324      	adds	r3, #36	; 0x24
 801270c:	220b      	movs	r2, #11
 801270e:	4619      	mov	r1, r3
 8012710:	f7ff f80f 	bl	8011732 <mem_cmp>
 8012714:	4603      	mov	r3, r0
 8012716:	2b00      	cmp	r3, #0
 8012718:	d00b      	beq.n	8012732 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801271a:	2100      	movs	r1, #0
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f7ff fe5d 	bl	80123dc <dir_next>
 8012722:	4603      	mov	r3, r0
 8012724:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012726:	7dfb      	ldrb	r3, [r7, #23]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d0c5      	beq.n	80126b8 <dir_find+0x24>
 801272c:	e002      	b.n	8012734 <dir_find+0xa0>
		if (res != FR_OK) break;
 801272e:	bf00      	nop
 8012730:	e000      	b.n	8012734 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012732:	bf00      	nop

	return res;
 8012734:	7dfb      	ldrb	r3, [r7, #23]
}
 8012736:	4618      	mov	r0, r3
 8012738:	3718      	adds	r7, #24
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}

0801273e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801273e:	b580      	push	{r7, lr}
 8012740:	b084      	sub	sp, #16
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801274c:	2101      	movs	r1, #1
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f7ff ff1a 	bl	8012588 <dir_alloc>
 8012754:	4603      	mov	r3, r0
 8012756:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012758:	7bfb      	ldrb	r3, [r7, #15]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d11c      	bne.n	8012798 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	69db      	ldr	r3, [r3, #28]
 8012762:	4619      	mov	r1, r3
 8012764:	68b8      	ldr	r0, [r7, #8]
 8012766:	f7ff f9d7 	bl	8011b18 <move_window>
 801276a:	4603      	mov	r3, r0
 801276c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801276e:	7bfb      	ldrb	r3, [r7, #15]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d111      	bne.n	8012798 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	6a1b      	ldr	r3, [r3, #32]
 8012778:	2220      	movs	r2, #32
 801277a:	2100      	movs	r1, #0
 801277c:	4618      	mov	r0, r3
 801277e:	f7fe ffbe 	bl	80116fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6a18      	ldr	r0, [r3, #32]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	3324      	adds	r3, #36	; 0x24
 801278a:	220b      	movs	r2, #11
 801278c:	4619      	mov	r1, r3
 801278e:	f7fe ff95 	bl	80116bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	2201      	movs	r2, #1
 8012796:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012798:	7bfb      	ldrb	r3, [r7, #15]
}
 801279a:	4618      	mov	r0, r3
 801279c:	3710      	adds	r7, #16
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
	...

080127a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b088      	sub	sp, #32
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	60fb      	str	r3, [r7, #12]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	3324      	adds	r3, #36	; 0x24
 80127b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80127ba:	220b      	movs	r2, #11
 80127bc:	2120      	movs	r1, #32
 80127be:	68b8      	ldr	r0, [r7, #8]
 80127c0:	f7fe ff9d 	bl	80116fe <mem_set>
	si = i = 0; ni = 8;
 80127c4:	2300      	movs	r3, #0
 80127c6:	613b      	str	r3, [r7, #16]
 80127c8:	693b      	ldr	r3, [r7, #16]
 80127ca:	617b      	str	r3, [r7, #20]
 80127cc:	2308      	movs	r3, #8
 80127ce:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	1c5a      	adds	r2, r3, #1
 80127d4:	617a      	str	r2, [r7, #20]
 80127d6:	68fa      	ldr	r2, [r7, #12]
 80127d8:	4413      	add	r3, r2
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80127de:	7ffb      	ldrb	r3, [r7, #31]
 80127e0:	2b20      	cmp	r3, #32
 80127e2:	d94e      	bls.n	8012882 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80127e4:	7ffb      	ldrb	r3, [r7, #31]
 80127e6:	2b2f      	cmp	r3, #47	; 0x2f
 80127e8:	d006      	beq.n	80127f8 <create_name+0x54>
 80127ea:	7ffb      	ldrb	r3, [r7, #31]
 80127ec:	2b5c      	cmp	r3, #92	; 0x5c
 80127ee:	d110      	bne.n	8012812 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80127f0:	e002      	b.n	80127f8 <create_name+0x54>
 80127f2:	697b      	ldr	r3, [r7, #20]
 80127f4:	3301      	adds	r3, #1
 80127f6:	617b      	str	r3, [r7, #20]
 80127f8:	68fa      	ldr	r2, [r7, #12]
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	4413      	add	r3, r2
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	2b2f      	cmp	r3, #47	; 0x2f
 8012802:	d0f6      	beq.n	80127f2 <create_name+0x4e>
 8012804:	68fa      	ldr	r2, [r7, #12]
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	4413      	add	r3, r2
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	2b5c      	cmp	r3, #92	; 0x5c
 801280e:	d0f0      	beq.n	80127f2 <create_name+0x4e>
			break;
 8012810:	e038      	b.n	8012884 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012812:	7ffb      	ldrb	r3, [r7, #31]
 8012814:	2b2e      	cmp	r3, #46	; 0x2e
 8012816:	d003      	beq.n	8012820 <create_name+0x7c>
 8012818:	693a      	ldr	r2, [r7, #16]
 801281a:	69bb      	ldr	r3, [r7, #24]
 801281c:	429a      	cmp	r2, r3
 801281e:	d30c      	bcc.n	801283a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012820:	69bb      	ldr	r3, [r7, #24]
 8012822:	2b0b      	cmp	r3, #11
 8012824:	d002      	beq.n	801282c <create_name+0x88>
 8012826:	7ffb      	ldrb	r3, [r7, #31]
 8012828:	2b2e      	cmp	r3, #46	; 0x2e
 801282a:	d001      	beq.n	8012830 <create_name+0x8c>
 801282c:	2306      	movs	r3, #6
 801282e:	e044      	b.n	80128ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012830:	2308      	movs	r3, #8
 8012832:	613b      	str	r3, [r7, #16]
 8012834:	230b      	movs	r3, #11
 8012836:	61bb      	str	r3, [r7, #24]
			continue;
 8012838:	e022      	b.n	8012880 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801283a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801283e:	2b00      	cmp	r3, #0
 8012840:	da04      	bge.n	801284c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012842:	7ffb      	ldrb	r3, [r7, #31]
 8012844:	3b80      	subs	r3, #128	; 0x80
 8012846:	4a1f      	ldr	r2, [pc, #124]	; (80128c4 <create_name+0x120>)
 8012848:	5cd3      	ldrb	r3, [r2, r3]
 801284a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801284c:	7ffb      	ldrb	r3, [r7, #31]
 801284e:	4619      	mov	r1, r3
 8012850:	481d      	ldr	r0, [pc, #116]	; (80128c8 <create_name+0x124>)
 8012852:	f7fe ff95 	bl	8011780 <chk_chr>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d001      	beq.n	8012860 <create_name+0xbc>
 801285c:	2306      	movs	r3, #6
 801285e:	e02c      	b.n	80128ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012860:	7ffb      	ldrb	r3, [r7, #31]
 8012862:	2b60      	cmp	r3, #96	; 0x60
 8012864:	d905      	bls.n	8012872 <create_name+0xce>
 8012866:	7ffb      	ldrb	r3, [r7, #31]
 8012868:	2b7a      	cmp	r3, #122	; 0x7a
 801286a:	d802      	bhi.n	8012872 <create_name+0xce>
 801286c:	7ffb      	ldrb	r3, [r7, #31]
 801286e:	3b20      	subs	r3, #32
 8012870:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	1c5a      	adds	r2, r3, #1
 8012876:	613a      	str	r2, [r7, #16]
 8012878:	68ba      	ldr	r2, [r7, #8]
 801287a:	4413      	add	r3, r2
 801287c:	7ffa      	ldrb	r2, [r7, #31]
 801287e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012880:	e7a6      	b.n	80127d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012882:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012884:	68fa      	ldr	r2, [r7, #12]
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	441a      	add	r2, r3
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d101      	bne.n	8012898 <create_name+0xf4>
 8012894:	2306      	movs	r3, #6
 8012896:	e010      	b.n	80128ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	2be5      	cmp	r3, #229	; 0xe5
 801289e:	d102      	bne.n	80128a6 <create_name+0x102>
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	2205      	movs	r2, #5
 80128a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80128a6:	7ffb      	ldrb	r3, [r7, #31]
 80128a8:	2b20      	cmp	r3, #32
 80128aa:	d801      	bhi.n	80128b0 <create_name+0x10c>
 80128ac:	2204      	movs	r2, #4
 80128ae:	e000      	b.n	80128b2 <create_name+0x10e>
 80128b0:	2200      	movs	r2, #0
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	330b      	adds	r3, #11
 80128b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80128b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3720      	adds	r7, #32
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}
 80128c2:	bf00      	nop
 80128c4:	08020368 	.word	0x08020368
 80128c8:	0801fa40 	.word	0x0801fa40

080128cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b086      	sub	sp, #24
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80128e0:	e002      	b.n	80128e8 <follow_path+0x1c>
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	3301      	adds	r3, #1
 80128e6:	603b      	str	r3, [r7, #0]
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	2b2f      	cmp	r3, #47	; 0x2f
 80128ee:	d0f8      	beq.n	80128e2 <follow_path+0x16>
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	2b5c      	cmp	r3, #92	; 0x5c
 80128f6:	d0f4      	beq.n	80128e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80128f8:	693b      	ldr	r3, [r7, #16]
 80128fa:	2200      	movs	r2, #0
 80128fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	2b1f      	cmp	r3, #31
 8012904:	d80a      	bhi.n	801291c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2280      	movs	r2, #128	; 0x80
 801290a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801290e:	2100      	movs	r1, #0
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f7ff fcda 	bl	80122ca <dir_sdi>
 8012916:	4603      	mov	r3, r0
 8012918:	75fb      	strb	r3, [r7, #23]
 801291a:	e048      	b.n	80129ae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801291c:	463b      	mov	r3, r7
 801291e:	4619      	mov	r1, r3
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f7ff ff3f 	bl	80127a4 <create_name>
 8012926:	4603      	mov	r3, r0
 8012928:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801292a:	7dfb      	ldrb	r3, [r7, #23]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d139      	bne.n	80129a4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f7ff feaf 	bl	8012694 <dir_find>
 8012936:	4603      	mov	r3, r0
 8012938:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012940:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012942:	7dfb      	ldrb	r3, [r7, #23]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d00a      	beq.n	801295e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012948:	7dfb      	ldrb	r3, [r7, #23]
 801294a:	2b04      	cmp	r3, #4
 801294c:	d12c      	bne.n	80129a8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801294e:	7afb      	ldrb	r3, [r7, #11]
 8012950:	f003 0304 	and.w	r3, r3, #4
 8012954:	2b00      	cmp	r3, #0
 8012956:	d127      	bne.n	80129a8 <follow_path+0xdc>
 8012958:	2305      	movs	r3, #5
 801295a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801295c:	e024      	b.n	80129a8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801295e:	7afb      	ldrb	r3, [r7, #11]
 8012960:	f003 0304 	and.w	r3, r3, #4
 8012964:	2b00      	cmp	r3, #0
 8012966:	d121      	bne.n	80129ac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012968:	693b      	ldr	r3, [r7, #16]
 801296a:	799b      	ldrb	r3, [r3, #6]
 801296c:	f003 0310 	and.w	r3, r3, #16
 8012970:	2b00      	cmp	r3, #0
 8012972:	d102      	bne.n	801297a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012974:	2305      	movs	r3, #5
 8012976:	75fb      	strb	r3, [r7, #23]
 8012978:	e019      	b.n	80129ae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	695b      	ldr	r3, [r3, #20]
 8012984:	68fa      	ldr	r2, [r7, #12]
 8012986:	8992      	ldrh	r2, [r2, #12]
 8012988:	fbb3 f0f2 	udiv	r0, r3, r2
 801298c:	fb02 f200 	mul.w	r2, r2, r0
 8012990:	1a9b      	subs	r3, r3, r2
 8012992:	440b      	add	r3, r1
 8012994:	4619      	mov	r1, r3
 8012996:	68f8      	ldr	r0, [r7, #12]
 8012998:	f7ff fe3d 	bl	8012616 <ld_clust>
 801299c:	4602      	mov	r2, r0
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80129a2:	e7bb      	b.n	801291c <follow_path+0x50>
			if (res != FR_OK) break;
 80129a4:	bf00      	nop
 80129a6:	e002      	b.n	80129ae <follow_path+0xe2>
				break;
 80129a8:	bf00      	nop
 80129aa:	e000      	b.n	80129ae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80129ac:	bf00      	nop
			}
		}
	}

	return res;
 80129ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	3718      	adds	r7, #24
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80129b8:	b480      	push	{r7}
 80129ba:	b087      	sub	sp, #28
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80129c0:	f04f 33ff 	mov.w	r3, #4294967295
 80129c4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d031      	beq.n	8012a32 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	617b      	str	r3, [r7, #20]
 80129d4:	e002      	b.n	80129dc <get_ldnumber+0x24>
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	3301      	adds	r3, #1
 80129da:	617b      	str	r3, [r7, #20]
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	2b20      	cmp	r3, #32
 80129e2:	d903      	bls.n	80129ec <get_ldnumber+0x34>
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	2b3a      	cmp	r3, #58	; 0x3a
 80129ea:	d1f4      	bne.n	80129d6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	2b3a      	cmp	r3, #58	; 0x3a
 80129f2:	d11c      	bne.n	8012a2e <get_ldnumber+0x76>
			tp = *path;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	1c5a      	adds	r2, r3, #1
 80129fe:	60fa      	str	r2, [r7, #12]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	3b30      	subs	r3, #48	; 0x30
 8012a04:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	2b09      	cmp	r3, #9
 8012a0a:	d80e      	bhi.n	8012a2a <get_ldnumber+0x72>
 8012a0c:	68fa      	ldr	r2, [r7, #12]
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	d10a      	bne.n	8012a2a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d107      	bne.n	8012a2a <get_ldnumber+0x72>
					vol = (int)i;
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	3301      	adds	r3, #1
 8012a22:	617b      	str	r3, [r7, #20]
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	697a      	ldr	r2, [r7, #20]
 8012a28:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	e002      	b.n	8012a34 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012a2e:	2300      	movs	r3, #0
 8012a30:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012a32:	693b      	ldr	r3, [r7, #16]
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	371c      	adds	r7, #28
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr

08012a40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	70da      	strb	r2, [r3, #3]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f04f 32ff 	mov.w	r2, #4294967295
 8012a56:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012a58:	6839      	ldr	r1, [r7, #0]
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f7ff f85c 	bl	8011b18 <move_window>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d001      	beq.n	8012a6a <check_fs+0x2a>
 8012a66:	2304      	movs	r3, #4
 8012a68:	e038      	b.n	8012adc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	3334      	adds	r3, #52	; 0x34
 8012a6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7fe fda0 	bl	80115b8 <ld_word>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	461a      	mov	r2, r3
 8012a7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d001      	beq.n	8012a88 <check_fs+0x48>
 8012a84:	2303      	movs	r3, #3
 8012a86:	e029      	b.n	8012adc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012a8e:	2be9      	cmp	r3, #233	; 0xe9
 8012a90:	d009      	beq.n	8012aa6 <check_fs+0x66>
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012a98:	2beb      	cmp	r3, #235	; 0xeb
 8012a9a:	d11e      	bne.n	8012ada <check_fs+0x9a>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012aa2:	2b90      	cmp	r3, #144	; 0x90
 8012aa4:	d119      	bne.n	8012ada <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	3334      	adds	r3, #52	; 0x34
 8012aaa:	3336      	adds	r3, #54	; 0x36
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7fe fd9b 	bl	80115e8 <ld_dword>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012ab8:	4a0a      	ldr	r2, [pc, #40]	; (8012ae4 <check_fs+0xa4>)
 8012aba:	4293      	cmp	r3, r2
 8012abc:	d101      	bne.n	8012ac2 <check_fs+0x82>
 8012abe:	2300      	movs	r3, #0
 8012ac0:	e00c      	b.n	8012adc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	3334      	adds	r3, #52	; 0x34
 8012ac6:	3352      	adds	r3, #82	; 0x52
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f7fe fd8d 	bl	80115e8 <ld_dword>
 8012ace:	4602      	mov	r2, r0
 8012ad0:	4b05      	ldr	r3, [pc, #20]	; (8012ae8 <check_fs+0xa8>)
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d101      	bne.n	8012ada <check_fs+0x9a>
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	e000      	b.n	8012adc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012ada:	2302      	movs	r3, #2
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3708      	adds	r7, #8
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}
 8012ae4:	00544146 	.word	0x00544146
 8012ae8:	33544146 	.word	0x33544146

08012aec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b096      	sub	sp, #88	; 0x58
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	60f8      	str	r0, [r7, #12]
 8012af4:	60b9      	str	r1, [r7, #8]
 8012af6:	4613      	mov	r3, r2
 8012af8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	2200      	movs	r2, #0
 8012afe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012b00:	68f8      	ldr	r0, [r7, #12]
 8012b02:	f7ff ff59 	bl	80129b8 <get_ldnumber>
 8012b06:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	da01      	bge.n	8012b12 <find_volume+0x26>
 8012b0e:	230b      	movs	r3, #11
 8012b10:	e265      	b.n	8012fde <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012b12:	4ab0      	ldr	r2, [pc, #704]	; (8012dd4 <find_volume+0x2e8>)
 8012b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b1a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d101      	bne.n	8012b26 <find_volume+0x3a>
 8012b22:	230c      	movs	r3, #12
 8012b24:	e25b      	b.n	8012fde <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012b2c:	79fb      	ldrb	r3, [r7, #7]
 8012b2e:	f023 0301 	bic.w	r3, r3, #1
 8012b32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d01a      	beq.n	8012b72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3e:	785b      	ldrb	r3, [r3, #1]
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7fe fc9b 	bl	801147c <disk_status>
 8012b46:	4603      	mov	r3, r0
 8012b48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012b4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b50:	f003 0301 	and.w	r3, r3, #1
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d10c      	bne.n	8012b72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012b58:	79fb      	ldrb	r3, [r7, #7]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d007      	beq.n	8012b6e <find_volume+0x82>
 8012b5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b62:	f003 0304 	and.w	r3, r3, #4
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d001      	beq.n	8012b6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012b6a:	230a      	movs	r3, #10
 8012b6c:	e237      	b.n	8012fde <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8012b6e:	2300      	movs	r3, #0
 8012b70:	e235      	b.n	8012fde <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b74:	2200      	movs	r2, #0
 8012b76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b7a:	b2da      	uxtb	r2, r3
 8012b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b82:	785b      	ldrb	r3, [r3, #1]
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7fe fc93 	bl	80114b0 <disk_initialize>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012b90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b94:	f003 0301 	and.w	r3, r3, #1
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d001      	beq.n	8012ba0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012b9c:	2303      	movs	r3, #3
 8012b9e:	e21e      	b.n	8012fde <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012ba0:	79fb      	ldrb	r3, [r7, #7]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d007      	beq.n	8012bb6 <find_volume+0xca>
 8012ba6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012baa:	f003 0304 	and.w	r3, r3, #4
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d001      	beq.n	8012bb6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012bb2:	230a      	movs	r3, #10
 8012bb4:	e213      	b.n	8012fde <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb8:	7858      	ldrb	r0, [r3, #1]
 8012bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbc:	330c      	adds	r3, #12
 8012bbe:	461a      	mov	r2, r3
 8012bc0:	2102      	movs	r1, #2
 8012bc2:	f7fe fcdb 	bl	801157c <disk_ioctl>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d001      	beq.n	8012bd0 <find_volume+0xe4>
 8012bcc:	2301      	movs	r3, #1
 8012bce:	e206      	b.n	8012fde <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd2:	899b      	ldrh	r3, [r3, #12]
 8012bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012bd8:	d80d      	bhi.n	8012bf6 <find_volume+0x10a>
 8012bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bdc:	899b      	ldrh	r3, [r3, #12]
 8012bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012be2:	d308      	bcc.n	8012bf6 <find_volume+0x10a>
 8012be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be6:	899b      	ldrh	r3, [r3, #12]
 8012be8:	461a      	mov	r2, r3
 8012bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bec:	899b      	ldrh	r3, [r3, #12]
 8012bee:	3b01      	subs	r3, #1
 8012bf0:	4013      	ands	r3, r2
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d001      	beq.n	8012bfa <find_volume+0x10e>
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	e1f1      	b.n	8012fde <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012bfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c02:	f7ff ff1d 	bl	8012a40 <check_fs>
 8012c06:	4603      	mov	r3, r0
 8012c08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c10:	2b02      	cmp	r3, #2
 8012c12:	d14b      	bne.n	8012cac <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012c14:	2300      	movs	r3, #0
 8012c16:	643b      	str	r3, [r7, #64]	; 0x40
 8012c18:	e01f      	b.n	8012c5a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c22:	011b      	lsls	r3, r3, #4
 8012c24:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012c28:	4413      	add	r3, r2
 8012c2a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c2e:	3304      	adds	r3, #4
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d006      	beq.n	8012c44 <find_volume+0x158>
 8012c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c38:	3308      	adds	r3, #8
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7fe fcd4 	bl	80115e8 <ld_dword>
 8012c40:	4602      	mov	r2, r0
 8012c42:	e000      	b.n	8012c46 <find_volume+0x15a>
 8012c44:	2200      	movs	r2, #0
 8012c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012c4e:	440b      	add	r3, r1
 8012c50:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c56:	3301      	adds	r3, #1
 8012c58:	643b      	str	r3, [r7, #64]	; 0x40
 8012c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c5c:	2b03      	cmp	r3, #3
 8012c5e:	d9dc      	bls.n	8012c1a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012c60:	2300      	movs	r3, #0
 8012c62:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d002      	beq.n	8012c70 <find_volume+0x184>
 8012c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c6c:	3b01      	subs	r3, #1
 8012c6e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012c78:	4413      	add	r3, r2
 8012c7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012c7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d005      	beq.n	8012c92 <find_volume+0x1a6>
 8012c86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c8a:	f7ff fed9 	bl	8012a40 <check_fs>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	e000      	b.n	8012c94 <find_volume+0x1a8>
 8012c92:	2303      	movs	r3, #3
 8012c94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012c98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	d905      	bls.n	8012cac <find_volume+0x1c0>
 8012ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8012ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ca8:	2b03      	cmp	r3, #3
 8012caa:	d9e1      	bls.n	8012c70 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012cac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cb0:	2b04      	cmp	r3, #4
 8012cb2:	d101      	bne.n	8012cb8 <find_volume+0x1cc>
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	e192      	b.n	8012fde <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d901      	bls.n	8012cc4 <find_volume+0x1d8>
 8012cc0:	230d      	movs	r3, #13
 8012cc2:	e18c      	b.n	8012fde <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc6:	3334      	adds	r3, #52	; 0x34
 8012cc8:	330b      	adds	r3, #11
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f7fe fc74 	bl	80115b8 <ld_word>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd6:	899b      	ldrh	r3, [r3, #12]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d001      	beq.n	8012ce0 <find_volume+0x1f4>
 8012cdc:	230d      	movs	r3, #13
 8012cde:	e17e      	b.n	8012fde <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce2:	3334      	adds	r3, #52	; 0x34
 8012ce4:	3316      	adds	r3, #22
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7fe fc66 	bl	80115b8 <ld_word>
 8012cec:	4603      	mov	r3, r0
 8012cee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d106      	bne.n	8012d04 <find_volume+0x218>
 8012cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf8:	3334      	adds	r3, #52	; 0x34
 8012cfa:	3324      	adds	r3, #36	; 0x24
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7fe fc73 	bl	80115e8 <ld_dword>
 8012d02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d08:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d16:	789b      	ldrb	r3, [r3, #2]
 8012d18:	2b01      	cmp	r3, #1
 8012d1a:	d005      	beq.n	8012d28 <find_volume+0x23c>
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1e:	789b      	ldrb	r3, [r3, #2]
 8012d20:	2b02      	cmp	r3, #2
 8012d22:	d001      	beq.n	8012d28 <find_volume+0x23c>
 8012d24:	230d      	movs	r3, #13
 8012d26:	e15a      	b.n	8012fde <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2a:	789b      	ldrb	r3, [r3, #2]
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d30:	fb02 f303 	mul.w	r3, r2, r3
 8012d34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012d3c:	b29a      	uxth	r2, r3
 8012d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d44:	895b      	ldrh	r3, [r3, #10]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d008      	beq.n	8012d5c <find_volume+0x270>
 8012d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4c:	895b      	ldrh	r3, [r3, #10]
 8012d4e:	461a      	mov	r2, r3
 8012d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d52:	895b      	ldrh	r3, [r3, #10]
 8012d54:	3b01      	subs	r3, #1
 8012d56:	4013      	ands	r3, r2
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d001      	beq.n	8012d60 <find_volume+0x274>
 8012d5c:	230d      	movs	r3, #13
 8012d5e:	e13e      	b.n	8012fde <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d62:	3334      	adds	r3, #52	; 0x34
 8012d64:	3311      	adds	r3, #17
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7fe fc26 	bl	80115b8 <ld_word>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	461a      	mov	r2, r3
 8012d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d76:	891b      	ldrh	r3, [r3, #8]
 8012d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d7a:	8992      	ldrh	r2, [r2, #12]
 8012d7c:	0952      	lsrs	r2, r2, #5
 8012d7e:	b292      	uxth	r2, r2
 8012d80:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d84:	fb02 f201 	mul.w	r2, r2, r1
 8012d88:	1a9b      	subs	r3, r3, r2
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d001      	beq.n	8012d94 <find_volume+0x2a8>
 8012d90:	230d      	movs	r3, #13
 8012d92:	e124      	b.n	8012fde <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d96:	3334      	adds	r3, #52	; 0x34
 8012d98:	3313      	adds	r3, #19
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7fe fc0c 	bl	80115b8 <ld_word>
 8012da0:	4603      	mov	r3, r0
 8012da2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d106      	bne.n	8012db8 <find_volume+0x2cc>
 8012daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dac:	3334      	adds	r3, #52	; 0x34
 8012dae:	3320      	adds	r3, #32
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7fe fc19 	bl	80115e8 <ld_dword>
 8012db6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dba:	3334      	adds	r3, #52	; 0x34
 8012dbc:	330e      	adds	r3, #14
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7fe fbfa 	bl	80115b8 <ld_word>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012dc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d104      	bne.n	8012dd8 <find_volume+0x2ec>
 8012dce:	230d      	movs	r3, #13
 8012dd0:	e105      	b.n	8012fde <find_volume+0x4f2>
 8012dd2:	bf00      	nop
 8012dd4:	20000dac 	.word	0x20000dac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012dd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ddc:	4413      	add	r3, r2
 8012dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012de0:	8911      	ldrh	r1, [r2, #8]
 8012de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012de4:	8992      	ldrh	r2, [r2, #12]
 8012de6:	0952      	lsrs	r2, r2, #5
 8012de8:	b292      	uxth	r2, r2
 8012dea:	fbb1 f2f2 	udiv	r2, r1, r2
 8012dee:	b292      	uxth	r2, r2
 8012df0:	4413      	add	r3, r2
 8012df2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d201      	bcs.n	8012e00 <find_volume+0x314>
 8012dfc:	230d      	movs	r3, #13
 8012dfe:	e0ee      	b.n	8012fde <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e04:	1ad3      	subs	r3, r2, r3
 8012e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e08:	8952      	ldrh	r2, [r2, #10]
 8012e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e0e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d101      	bne.n	8012e1a <find_volume+0x32e>
 8012e16:	230d      	movs	r3, #13
 8012e18:	e0e1      	b.n	8012fde <find_volume+0x4f2>
		fmt = FS_FAT32;
 8012e1a:	2303      	movs	r3, #3
 8012e1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e22:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012e26:	4293      	cmp	r3, r2
 8012e28:	d802      	bhi.n	8012e30 <find_volume+0x344>
 8012e2a:	2302      	movs	r3, #2
 8012e2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e32:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012e36:	4293      	cmp	r3, r2
 8012e38:	d802      	bhi.n	8012e40 <find_volume+0x354>
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e42:	1c9a      	adds	r2, r3, #2
 8012e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e46:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e4c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012e4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e52:	441a      	add	r2, r3
 8012e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e56:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012e58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5c:	441a      	add	r2, r3
 8012e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e60:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012e62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e66:	2b03      	cmp	r3, #3
 8012e68:	d11e      	bne.n	8012ea8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6c:	3334      	adds	r3, #52	; 0x34
 8012e6e:	332a      	adds	r3, #42	; 0x2a
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7fe fba1 	bl	80115b8 <ld_word>
 8012e76:	4603      	mov	r3, r0
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d001      	beq.n	8012e80 <find_volume+0x394>
 8012e7c:	230d      	movs	r3, #13
 8012e7e:	e0ae      	b.n	8012fde <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e82:	891b      	ldrh	r3, [r3, #8]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d001      	beq.n	8012e8c <find_volume+0x3a0>
 8012e88:	230d      	movs	r3, #13
 8012e8a:	e0a8      	b.n	8012fde <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e8e:	3334      	adds	r3, #52	; 0x34
 8012e90:	332c      	adds	r3, #44	; 0x2c
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fe fba8 	bl	80115e8 <ld_dword>
 8012e98:	4602      	mov	r2, r0
 8012e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea0:	699b      	ldr	r3, [r3, #24]
 8012ea2:	009b      	lsls	r3, r3, #2
 8012ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8012ea6:	e01f      	b.n	8012ee8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eaa:	891b      	ldrh	r3, [r3, #8]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d101      	bne.n	8012eb4 <find_volume+0x3c8>
 8012eb0:	230d      	movs	r3, #13
 8012eb2:	e094      	b.n	8012fde <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012eba:	441a      	add	r2, r3
 8012ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012ec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ec4:	2b02      	cmp	r3, #2
 8012ec6:	d103      	bne.n	8012ed0 <find_volume+0x3e4>
 8012ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eca:	699b      	ldr	r3, [r3, #24]
 8012ecc:	005b      	lsls	r3, r3, #1
 8012ece:	e00a      	b.n	8012ee6 <find_volume+0x3fa>
 8012ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed2:	699a      	ldr	r2, [r3, #24]
 8012ed4:	4613      	mov	r3, r2
 8012ed6:	005b      	lsls	r3, r3, #1
 8012ed8:	4413      	add	r3, r2
 8012eda:	085a      	lsrs	r2, r3, #1
 8012edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ede:	699b      	ldr	r3, [r3, #24]
 8012ee0:	f003 0301 	and.w	r3, r3, #1
 8012ee4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012ee6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eea:	69da      	ldr	r2, [r3, #28]
 8012eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eee:	899b      	ldrh	r3, [r3, #12]
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ef4:	440b      	add	r3, r1
 8012ef6:	3b01      	subs	r3, #1
 8012ef8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012efa:	8989      	ldrh	r1, [r1, #12]
 8012efc:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f00:	429a      	cmp	r2, r3
 8012f02:	d201      	bcs.n	8012f08 <find_volume+0x41c>
 8012f04:	230d      	movs	r3, #13
 8012f06:	e06a      	b.n	8012fde <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f0e:	615a      	str	r2, [r3, #20]
 8012f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f12:	695a      	ldr	r2, [r3, #20]
 8012f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f16:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1a:	2280      	movs	r2, #128	; 0x80
 8012f1c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012f1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f22:	2b03      	cmp	r3, #3
 8012f24:	d149      	bne.n	8012fba <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f28:	3334      	adds	r3, #52	; 0x34
 8012f2a:	3330      	adds	r3, #48	; 0x30
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7fe fb43 	bl	80115b8 <ld_word>
 8012f32:	4603      	mov	r3, r0
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d140      	bne.n	8012fba <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f40:	f7fe fdea 	bl	8011b18 <move_window>
 8012f44:	4603      	mov	r3, r0
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d137      	bne.n	8012fba <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f52:	3334      	adds	r3, #52	; 0x34
 8012f54:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7fe fb2d 	bl	80115b8 <ld_word>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	461a      	mov	r2, r3
 8012f62:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d127      	bne.n	8012fba <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f6c:	3334      	adds	r3, #52	; 0x34
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7fe fb3a 	bl	80115e8 <ld_dword>
 8012f74:	4602      	mov	r2, r0
 8012f76:	4b1c      	ldr	r3, [pc, #112]	; (8012fe8 <find_volume+0x4fc>)
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d11e      	bne.n	8012fba <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7e:	3334      	adds	r3, #52	; 0x34
 8012f80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7fe fb2f 	bl	80115e8 <ld_dword>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	4b17      	ldr	r3, [pc, #92]	; (8012fec <find_volume+0x500>)
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	d113      	bne.n	8012fba <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f94:	3334      	adds	r3, #52	; 0x34
 8012f96:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fe fb24 	bl	80115e8 <ld_dword>
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa8:	3334      	adds	r3, #52	; 0x34
 8012faa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7fe fb1a 	bl	80115e8 <ld_dword>
 8012fb4:	4602      	mov	r2, r0
 8012fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fbc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012fc0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012fc2:	4b0b      	ldr	r3, [pc, #44]	; (8012ff0 <find_volume+0x504>)
 8012fc4:	881b      	ldrh	r3, [r3, #0]
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	b29a      	uxth	r2, r3
 8012fca:	4b09      	ldr	r3, [pc, #36]	; (8012ff0 <find_volume+0x504>)
 8012fcc:	801a      	strh	r2, [r3, #0]
 8012fce:	4b08      	ldr	r3, [pc, #32]	; (8012ff0 <find_volume+0x504>)
 8012fd0:	881a      	ldrh	r2, [r3, #0]
 8012fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012fd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012fd8:	f7fe fd36 	bl	8011a48 <clear_lock>
#endif
	return FR_OK;
 8012fdc:	2300      	movs	r3, #0
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3758      	adds	r7, #88	; 0x58
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	41615252 	.word	0x41615252
 8012fec:	61417272 	.word	0x61417272
 8012ff0:	20000db0 	.word	0x20000db0

08012ff4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b084      	sub	sp, #16
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012ffe:	2309      	movs	r3, #9
 8013000:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d01c      	beq.n	8013042 <validate+0x4e>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d018      	beq.n	8013042 <validate+0x4e>
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d013      	beq.n	8013042 <validate+0x4e>
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	889a      	ldrh	r2, [r3, #4]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	88db      	ldrh	r3, [r3, #6]
 8013024:	429a      	cmp	r2, r3
 8013026:	d10c      	bne.n	8013042 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	785b      	ldrb	r3, [r3, #1]
 801302e:	4618      	mov	r0, r3
 8013030:	f7fe fa24 	bl	801147c <disk_status>
 8013034:	4603      	mov	r3, r0
 8013036:	f003 0301 	and.w	r3, r3, #1
 801303a:	2b00      	cmp	r3, #0
 801303c:	d101      	bne.n	8013042 <validate+0x4e>
			res = FR_OK;
 801303e:	2300      	movs	r3, #0
 8013040:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013042:	7bfb      	ldrb	r3, [r7, #15]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d102      	bne.n	801304e <validate+0x5a>
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	e000      	b.n	8013050 <validate+0x5c>
 801304e:	2300      	movs	r3, #0
 8013050:	683a      	ldr	r2, [r7, #0]
 8013052:	6013      	str	r3, [r2, #0]
	return res;
 8013054:	7bfb      	ldrb	r3, [r7, #15]
}
 8013056:	4618      	mov	r0, r3
 8013058:	3710      	adds	r7, #16
 801305a:	46bd      	mov	sp, r7
 801305c:	bd80      	pop	{r7, pc}
	...

08013060 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b088      	sub	sp, #32
 8013064:	af00      	add	r7, sp, #0
 8013066:	60f8      	str	r0, [r7, #12]
 8013068:	60b9      	str	r1, [r7, #8]
 801306a:	4613      	mov	r3, r2
 801306c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013072:	f107 0310 	add.w	r3, r7, #16
 8013076:	4618      	mov	r0, r3
 8013078:	f7ff fc9e 	bl	80129b8 <get_ldnumber>
 801307c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801307e:	69fb      	ldr	r3, [r7, #28]
 8013080:	2b00      	cmp	r3, #0
 8013082:	da01      	bge.n	8013088 <f_mount+0x28>
 8013084:	230b      	movs	r3, #11
 8013086:	e02b      	b.n	80130e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013088:	4a17      	ldr	r2, [pc, #92]	; (80130e8 <f_mount+0x88>)
 801308a:	69fb      	ldr	r3, [r7, #28]
 801308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013090:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013092:	69bb      	ldr	r3, [r7, #24]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d005      	beq.n	80130a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013098:	69b8      	ldr	r0, [r7, #24]
 801309a:	f7fe fcd5 	bl	8011a48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801309e:	69bb      	ldr	r3, [r7, #24]
 80130a0:	2200      	movs	r2, #0
 80130a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d002      	beq.n	80130b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	2200      	movs	r2, #0
 80130ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80130b0:	68fa      	ldr	r2, [r7, #12]
 80130b2:	490d      	ldr	r1, [pc, #52]	; (80130e8 <f_mount+0x88>)
 80130b4:	69fb      	ldr	r3, [r7, #28]
 80130b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d002      	beq.n	80130c6 <f_mount+0x66>
 80130c0:	79fb      	ldrb	r3, [r7, #7]
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d001      	beq.n	80130ca <f_mount+0x6a>
 80130c6:	2300      	movs	r3, #0
 80130c8:	e00a      	b.n	80130e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80130ca:	f107 010c 	add.w	r1, r7, #12
 80130ce:	f107 0308 	add.w	r3, r7, #8
 80130d2:	2200      	movs	r2, #0
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7ff fd09 	bl	8012aec <find_volume>
 80130da:	4603      	mov	r3, r0
 80130dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80130de:	7dfb      	ldrb	r3, [r7, #23]
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	3720      	adds	r7, #32
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}
 80130e8:	20000dac 	.word	0x20000dac

080130ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b098      	sub	sp, #96	; 0x60
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	60b9      	str	r1, [r7, #8]
 80130f6:	4613      	mov	r3, r2
 80130f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d101      	bne.n	8013104 <f_open+0x18>
 8013100:	2309      	movs	r3, #9
 8013102:	e1bb      	b.n	801347c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013104:	79fb      	ldrb	r3, [r7, #7]
 8013106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801310a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801310c:	79fa      	ldrb	r2, [r7, #7]
 801310e:	f107 0110 	add.w	r1, r7, #16
 8013112:	f107 0308 	add.w	r3, r7, #8
 8013116:	4618      	mov	r0, r3
 8013118:	f7ff fce8 	bl	8012aec <find_volume>
 801311c:	4603      	mov	r3, r0
 801311e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013122:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013126:	2b00      	cmp	r3, #0
 8013128:	f040 819f 	bne.w	801346a <f_open+0x37e>
		dj.obj.fs = fs;
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013130:	68ba      	ldr	r2, [r7, #8]
 8013132:	f107 0314 	add.w	r3, r7, #20
 8013136:	4611      	mov	r1, r2
 8013138:	4618      	mov	r0, r3
 801313a:	f7ff fbc7 	bl	80128cc <follow_path>
 801313e:	4603      	mov	r3, r0
 8013140:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013148:	2b00      	cmp	r3, #0
 801314a:	d11a      	bne.n	8013182 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801314c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013150:	b25b      	sxtb	r3, r3
 8013152:	2b00      	cmp	r3, #0
 8013154:	da03      	bge.n	801315e <f_open+0x72>
				res = FR_INVALID_NAME;
 8013156:	2306      	movs	r3, #6
 8013158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801315c:	e011      	b.n	8013182 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801315e:	79fb      	ldrb	r3, [r7, #7]
 8013160:	f023 0301 	bic.w	r3, r3, #1
 8013164:	2b00      	cmp	r3, #0
 8013166:	bf14      	ite	ne
 8013168:	2301      	movne	r3, #1
 801316a:	2300      	moveq	r3, #0
 801316c:	b2db      	uxtb	r3, r3
 801316e:	461a      	mov	r2, r3
 8013170:	f107 0314 	add.w	r3, r7, #20
 8013174:	4611      	mov	r1, r2
 8013176:	4618      	mov	r0, r3
 8013178:	f7fe fb1e 	bl	80117b8 <chk_lock>
 801317c:	4603      	mov	r3, r0
 801317e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013182:	79fb      	ldrb	r3, [r7, #7]
 8013184:	f003 031c 	and.w	r3, r3, #28
 8013188:	2b00      	cmp	r3, #0
 801318a:	d07f      	beq.n	801328c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801318c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013190:	2b00      	cmp	r3, #0
 8013192:	d017      	beq.n	80131c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013194:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013198:	2b04      	cmp	r3, #4
 801319a:	d10e      	bne.n	80131ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801319c:	f7fe fb68 	bl	8011870 <enq_lock>
 80131a0:	4603      	mov	r3, r0
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d006      	beq.n	80131b4 <f_open+0xc8>
 80131a6:	f107 0314 	add.w	r3, r7, #20
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7ff fac7 	bl	801273e <dir_register>
 80131b0:	4603      	mov	r3, r0
 80131b2:	e000      	b.n	80131b6 <f_open+0xca>
 80131b4:	2312      	movs	r3, #18
 80131b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80131ba:	79fb      	ldrb	r3, [r7, #7]
 80131bc:	f043 0308 	orr.w	r3, r3, #8
 80131c0:	71fb      	strb	r3, [r7, #7]
 80131c2:	e010      	b.n	80131e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80131c4:	7ebb      	ldrb	r3, [r7, #26]
 80131c6:	f003 0311 	and.w	r3, r3, #17
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d003      	beq.n	80131d6 <f_open+0xea>
					res = FR_DENIED;
 80131ce:	2307      	movs	r3, #7
 80131d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80131d4:	e007      	b.n	80131e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80131d6:	79fb      	ldrb	r3, [r7, #7]
 80131d8:	f003 0304 	and.w	r3, r3, #4
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d002      	beq.n	80131e6 <f_open+0xfa>
 80131e0:	2308      	movs	r3, #8
 80131e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80131e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d168      	bne.n	80132c0 <f_open+0x1d4>
 80131ee:	79fb      	ldrb	r3, [r7, #7]
 80131f0:	f003 0308 	and.w	r3, r3, #8
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d063      	beq.n	80132c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80131f8:	f000 fdf2 	bl	8013de0 <get_fattime>
 80131fc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80131fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013200:	330e      	adds	r3, #14
 8013202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013204:	4618      	mov	r0, r3
 8013206:	f7fe fa2d 	bl	8011664 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801320c:	3316      	adds	r3, #22
 801320e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013210:	4618      	mov	r0, r3
 8013212:	f7fe fa27 	bl	8011664 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013218:	330b      	adds	r3, #11
 801321a:	2220      	movs	r2, #32
 801321c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801321e:	693b      	ldr	r3, [r7, #16]
 8013220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013222:	4611      	mov	r1, r2
 8013224:	4618      	mov	r0, r3
 8013226:	f7ff f9f6 	bl	8012616 <ld_clust>
 801322a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013230:	2200      	movs	r2, #0
 8013232:	4618      	mov	r0, r3
 8013234:	f7ff fa0e 	bl	8012654 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801323a:	331c      	adds	r3, #28
 801323c:	2100      	movs	r1, #0
 801323e:	4618      	mov	r0, r3
 8013240:	f7fe fa10 	bl	8011664 <st_dword>
					fs->wflag = 1;
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	2201      	movs	r2, #1
 8013248:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801324a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801324c:	2b00      	cmp	r3, #0
 801324e:	d037      	beq.n	80132c0 <f_open+0x1d4>
						dw = fs->winsect;
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013254:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013256:	f107 0314 	add.w	r3, r7, #20
 801325a:	2200      	movs	r2, #0
 801325c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801325e:	4618      	mov	r0, r3
 8013260:	f7fe fefe 	bl	8012060 <remove_chain>
 8013264:	4603      	mov	r3, r0
 8013266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801326a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801326e:	2b00      	cmp	r3, #0
 8013270:	d126      	bne.n	80132c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013276:	4618      	mov	r0, r3
 8013278:	f7fe fc4e 	bl	8011b18 <move_window>
 801327c:	4603      	mov	r3, r0
 801327e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013286:	3a01      	subs	r2, #1
 8013288:	611a      	str	r2, [r3, #16]
 801328a:	e019      	b.n	80132c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801328c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013290:	2b00      	cmp	r3, #0
 8013292:	d115      	bne.n	80132c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013294:	7ebb      	ldrb	r3, [r7, #26]
 8013296:	f003 0310 	and.w	r3, r3, #16
 801329a:	2b00      	cmp	r3, #0
 801329c:	d003      	beq.n	80132a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 801329e:	2304      	movs	r3, #4
 80132a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80132a4:	e00c      	b.n	80132c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80132a6:	79fb      	ldrb	r3, [r7, #7]
 80132a8:	f003 0302 	and.w	r3, r3, #2
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d007      	beq.n	80132c0 <f_open+0x1d4>
 80132b0:	7ebb      	ldrb	r3, [r7, #26]
 80132b2:	f003 0301 	and.w	r3, r3, #1
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d002      	beq.n	80132c0 <f_open+0x1d4>
						res = FR_DENIED;
 80132ba:	2307      	movs	r3, #7
 80132bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80132c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d128      	bne.n	801331a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80132c8:	79fb      	ldrb	r3, [r7, #7]
 80132ca:	f003 0308 	and.w	r3, r3, #8
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d003      	beq.n	80132da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80132d2:	79fb      	ldrb	r3, [r7, #7]
 80132d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80132e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80132e8:	79fb      	ldrb	r3, [r7, #7]
 80132ea:	f023 0301 	bic.w	r3, r3, #1
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	bf14      	ite	ne
 80132f2:	2301      	movne	r3, #1
 80132f4:	2300      	moveq	r3, #0
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	461a      	mov	r2, r3
 80132fa:	f107 0314 	add.w	r3, r7, #20
 80132fe:	4611      	mov	r1, r2
 8013300:	4618      	mov	r0, r3
 8013302:	f7fe fad7 	bl	80118b4 <inc_lock>
 8013306:	4602      	mov	r2, r0
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	691b      	ldr	r3, [r3, #16]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d102      	bne.n	801331a <f_open+0x22e>
 8013314:	2302      	movs	r3, #2
 8013316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801331a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801331e:	2b00      	cmp	r3, #0
 8013320:	f040 80a3 	bne.w	801346a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013328:	4611      	mov	r1, r2
 801332a:	4618      	mov	r0, r3
 801332c:	f7ff f973 	bl	8012616 <ld_clust>
 8013330:	4602      	mov	r2, r0
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013338:	331c      	adds	r3, #28
 801333a:	4618      	mov	r0, r3
 801333c:	f7fe f954 	bl	80115e8 <ld_dword>
 8013340:	4602      	mov	r2, r0
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	2200      	movs	r2, #0
 801334a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801334c:	693a      	ldr	r2, [r7, #16]
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	88da      	ldrh	r2, [r3, #6]
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	79fa      	ldrb	r2, [r7, #7]
 801335e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	2200      	movs	r2, #0
 8013364:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	2200      	movs	r2, #0
 801336a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2200      	movs	r2, #0
 8013370:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	3330      	adds	r3, #48	; 0x30
 8013376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801337a:	2100      	movs	r1, #0
 801337c:	4618      	mov	r0, r3
 801337e:	f7fe f9be 	bl	80116fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013382:	79fb      	ldrb	r3, [r7, #7]
 8013384:	f003 0320 	and.w	r3, r3, #32
 8013388:	2b00      	cmp	r3, #0
 801338a:	d06e      	beq.n	801346a <f_open+0x37e>
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	68db      	ldr	r3, [r3, #12]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d06a      	beq.n	801346a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	68da      	ldr	r2, [r3, #12]
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801339c:	693b      	ldr	r3, [r7, #16]
 801339e:	895b      	ldrh	r3, [r3, #10]
 80133a0:	461a      	mov	r2, r3
 80133a2:	693b      	ldr	r3, [r7, #16]
 80133a4:	899b      	ldrh	r3, [r3, #12]
 80133a6:	fb03 f302 	mul.w	r3, r3, r2
 80133aa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	689b      	ldr	r3, [r3, #8]
 80133b0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	68db      	ldr	r3, [r3, #12]
 80133b6:	657b      	str	r3, [r7, #84]	; 0x54
 80133b8:	e016      	b.n	80133e8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80133be:	4618      	mov	r0, r3
 80133c0:	f7fe fc67 	bl	8011c92 <get_fat>
 80133c4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80133c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80133c8:	2b01      	cmp	r3, #1
 80133ca:	d802      	bhi.n	80133d2 <f_open+0x2e6>
 80133cc:	2302      	movs	r3, #2
 80133ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80133d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80133d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133d8:	d102      	bne.n	80133e0 <f_open+0x2f4>
 80133da:	2301      	movs	r3, #1
 80133dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80133e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80133e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133e4:	1ad3      	subs	r3, r2, r3
 80133e6:	657b      	str	r3, [r7, #84]	; 0x54
 80133e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d103      	bne.n	80133f8 <f_open+0x30c>
 80133f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80133f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d8e0      	bhi.n	80133ba <f_open+0x2ce>
				}
				fp->clust = clst;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80133fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80133fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013402:	2b00      	cmp	r3, #0
 8013404:	d131      	bne.n	801346a <f_open+0x37e>
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	899b      	ldrh	r3, [r3, #12]
 801340a:	461a      	mov	r2, r3
 801340c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801340e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013412:	fb02 f201 	mul.w	r2, r2, r1
 8013416:	1a9b      	subs	r3, r3, r2
 8013418:	2b00      	cmp	r3, #0
 801341a:	d026      	beq.n	801346a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013420:	4618      	mov	r0, r3
 8013422:	f7fe fc17 	bl	8011c54 <clust2sect>
 8013426:	6478      	str	r0, [r7, #68]	; 0x44
 8013428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801342a:	2b00      	cmp	r3, #0
 801342c:	d103      	bne.n	8013436 <f_open+0x34a>
						res = FR_INT_ERR;
 801342e:	2302      	movs	r3, #2
 8013430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013434:	e019      	b.n	801346a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	899b      	ldrh	r3, [r3, #12]
 801343a:	461a      	mov	r2, r3
 801343c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801343e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013444:	441a      	add	r2, r3
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	7858      	ldrb	r0, [r3, #1]
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	6a1a      	ldr	r2, [r3, #32]
 8013458:	2301      	movs	r3, #1
 801345a:	f7fe f84f 	bl	80114fc <disk_read>
 801345e:	4603      	mov	r3, r0
 8013460:	2b00      	cmp	r3, #0
 8013462:	d002      	beq.n	801346a <f_open+0x37e>
 8013464:	2301      	movs	r3, #1
 8013466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801346a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801346e:	2b00      	cmp	r3, #0
 8013470:	d002      	beq.n	8013478 <f_open+0x38c>
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2200      	movs	r2, #0
 8013476:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801347c:	4618      	mov	r0, r3
 801347e:	3760      	adds	r7, #96	; 0x60
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}

08013484 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b08c      	sub	sp, #48	; 0x30
 8013488:	af00      	add	r7, sp, #0
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	607a      	str	r2, [r7, #4]
 8013490:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	2200      	movs	r2, #0
 801349a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f107 0210 	add.w	r2, r7, #16
 80134a2:	4611      	mov	r1, r2
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7ff fda5 	bl	8012ff4 <validate>
 80134aa:	4603      	mov	r3, r0
 80134ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80134b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d107      	bne.n	80134c8 <f_write+0x44>
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	7d5b      	ldrb	r3, [r3, #21]
 80134bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80134c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d002      	beq.n	80134ce <f_write+0x4a>
 80134c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134cc:	e16a      	b.n	80137a4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	7d1b      	ldrb	r3, [r3, #20]
 80134d2:	f003 0302 	and.w	r3, r3, #2
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d101      	bne.n	80134de <f_write+0x5a>
 80134da:	2307      	movs	r3, #7
 80134dc:	e162      	b.n	80137a4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	699a      	ldr	r2, [r3, #24]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	441a      	add	r2, r3
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	699b      	ldr	r3, [r3, #24]
 80134ea:	429a      	cmp	r2, r3
 80134ec:	f080 814c 	bcs.w	8013788 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	699b      	ldr	r3, [r3, #24]
 80134f4:	43db      	mvns	r3, r3
 80134f6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80134f8:	e146      	b.n	8013788 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	699b      	ldr	r3, [r3, #24]
 80134fe:	693a      	ldr	r2, [r7, #16]
 8013500:	8992      	ldrh	r2, [r2, #12]
 8013502:	fbb3 f1f2 	udiv	r1, r3, r2
 8013506:	fb02 f201 	mul.w	r2, r2, r1
 801350a:	1a9b      	subs	r3, r3, r2
 801350c:	2b00      	cmp	r3, #0
 801350e:	f040 80f1 	bne.w	80136f4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	699b      	ldr	r3, [r3, #24]
 8013516:	693a      	ldr	r2, [r7, #16]
 8013518:	8992      	ldrh	r2, [r2, #12]
 801351a:	fbb3 f3f2 	udiv	r3, r3, r2
 801351e:	693a      	ldr	r2, [r7, #16]
 8013520:	8952      	ldrh	r2, [r2, #10]
 8013522:	3a01      	subs	r2, #1
 8013524:	4013      	ands	r3, r2
 8013526:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d143      	bne.n	80135b6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	699b      	ldr	r3, [r3, #24]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d10c      	bne.n	8013550 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	689b      	ldr	r3, [r3, #8]
 801353a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801353e:	2b00      	cmp	r3, #0
 8013540:	d11a      	bne.n	8013578 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	2100      	movs	r1, #0
 8013546:	4618      	mov	r0, r3
 8013548:	f7fe fdef 	bl	801212a <create_chain>
 801354c:	62b8      	str	r0, [r7, #40]	; 0x28
 801354e:	e013      	b.n	8013578 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013554:	2b00      	cmp	r3, #0
 8013556:	d007      	beq.n	8013568 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	699b      	ldr	r3, [r3, #24]
 801355c:	4619      	mov	r1, r3
 801355e:	68f8      	ldr	r0, [r7, #12]
 8013560:	f7fe fe7b 	bl	801225a <clmt_clust>
 8013564:	62b8      	str	r0, [r7, #40]	; 0x28
 8013566:	e007      	b.n	8013578 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013568:	68fa      	ldr	r2, [r7, #12]
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	69db      	ldr	r3, [r3, #28]
 801356e:	4619      	mov	r1, r3
 8013570:	4610      	mov	r0, r2
 8013572:	f7fe fdda 	bl	801212a <create_chain>
 8013576:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801357a:	2b00      	cmp	r3, #0
 801357c:	f000 8109 	beq.w	8013792 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013582:	2b01      	cmp	r3, #1
 8013584:	d104      	bne.n	8013590 <f_write+0x10c>
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	2202      	movs	r2, #2
 801358a:	755a      	strb	r2, [r3, #21]
 801358c:	2302      	movs	r3, #2
 801358e:	e109      	b.n	80137a4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013596:	d104      	bne.n	80135a2 <f_write+0x11e>
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	2201      	movs	r2, #1
 801359c:	755a      	strb	r2, [r3, #21]
 801359e:	2301      	movs	r3, #1
 80135a0:	e100      	b.n	80137a4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80135a6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	689b      	ldr	r3, [r3, #8]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d102      	bne.n	80135b6 <f_write+0x132>
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80135b4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	7d1b      	ldrb	r3, [r3, #20]
 80135ba:	b25b      	sxtb	r3, r3
 80135bc:	2b00      	cmp	r3, #0
 80135be:	da18      	bge.n	80135f2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	7858      	ldrb	r0, [r3, #1]
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	6a1a      	ldr	r2, [r3, #32]
 80135ce:	2301      	movs	r3, #1
 80135d0:	f7fd ffb4 	bl	801153c <disk_write>
 80135d4:	4603      	mov	r3, r0
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d004      	beq.n	80135e4 <f_write+0x160>
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2201      	movs	r2, #1
 80135de:	755a      	strb	r2, [r3, #21]
 80135e0:	2301      	movs	r3, #1
 80135e2:	e0df      	b.n	80137a4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	7d1b      	ldrb	r3, [r3, #20]
 80135e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135ec:	b2da      	uxtb	r2, r3
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80135f2:	693a      	ldr	r2, [r7, #16]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	69db      	ldr	r3, [r3, #28]
 80135f8:	4619      	mov	r1, r3
 80135fa:	4610      	mov	r0, r2
 80135fc:	f7fe fb2a 	bl	8011c54 <clust2sect>
 8013600:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d104      	bne.n	8013612 <f_write+0x18e>
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	2202      	movs	r2, #2
 801360c:	755a      	strb	r2, [r3, #21]
 801360e:	2302      	movs	r3, #2
 8013610:	e0c8      	b.n	80137a4 <f_write+0x320>
			sect += csect;
 8013612:	697a      	ldr	r2, [r7, #20]
 8013614:	69bb      	ldr	r3, [r7, #24]
 8013616:	4413      	add	r3, r2
 8013618:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	899b      	ldrh	r3, [r3, #12]
 801361e:	461a      	mov	r2, r3
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	fbb3 f3f2 	udiv	r3, r3, r2
 8013626:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013628:	6a3b      	ldr	r3, [r7, #32]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d043      	beq.n	80136b6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801362e:	69ba      	ldr	r2, [r7, #24]
 8013630:	6a3b      	ldr	r3, [r7, #32]
 8013632:	4413      	add	r3, r2
 8013634:	693a      	ldr	r2, [r7, #16]
 8013636:	8952      	ldrh	r2, [r2, #10]
 8013638:	4293      	cmp	r3, r2
 801363a:	d905      	bls.n	8013648 <f_write+0x1c4>
					cc = fs->csize - csect;
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	895b      	ldrh	r3, [r3, #10]
 8013640:	461a      	mov	r2, r3
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	1ad3      	subs	r3, r2, r3
 8013646:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013648:	693b      	ldr	r3, [r7, #16]
 801364a:	7858      	ldrb	r0, [r3, #1]
 801364c:	6a3b      	ldr	r3, [r7, #32]
 801364e:	697a      	ldr	r2, [r7, #20]
 8013650:	69f9      	ldr	r1, [r7, #28]
 8013652:	f7fd ff73 	bl	801153c <disk_write>
 8013656:	4603      	mov	r3, r0
 8013658:	2b00      	cmp	r3, #0
 801365a:	d004      	beq.n	8013666 <f_write+0x1e2>
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	2201      	movs	r2, #1
 8013660:	755a      	strb	r2, [r3, #21]
 8013662:	2301      	movs	r3, #1
 8013664:	e09e      	b.n	80137a4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	6a1a      	ldr	r2, [r3, #32]
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	1ad3      	subs	r3, r2, r3
 801366e:	6a3a      	ldr	r2, [r7, #32]
 8013670:	429a      	cmp	r2, r3
 8013672:	d918      	bls.n	80136a6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	6a1a      	ldr	r2, [r3, #32]
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	1ad3      	subs	r3, r2, r3
 8013682:	693a      	ldr	r2, [r7, #16]
 8013684:	8992      	ldrh	r2, [r2, #12]
 8013686:	fb02 f303 	mul.w	r3, r2, r3
 801368a:	69fa      	ldr	r2, [r7, #28]
 801368c:	18d1      	adds	r1, r2, r3
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	899b      	ldrh	r3, [r3, #12]
 8013692:	461a      	mov	r2, r3
 8013694:	f7fe f812 	bl	80116bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	7d1b      	ldrb	r3, [r3, #20]
 801369c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80136a0:	b2da      	uxtb	r2, r3
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	899b      	ldrh	r3, [r3, #12]
 80136aa:	461a      	mov	r2, r3
 80136ac:	6a3b      	ldr	r3, [r7, #32]
 80136ae:	fb02 f303 	mul.w	r3, r2, r3
 80136b2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80136b4:	e04b      	b.n	801374e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	6a1b      	ldr	r3, [r3, #32]
 80136ba:	697a      	ldr	r2, [r7, #20]
 80136bc:	429a      	cmp	r2, r3
 80136be:	d016      	beq.n	80136ee <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	699a      	ldr	r2, [r3, #24]
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d210      	bcs.n	80136ee <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	7858      	ldrb	r0, [r3, #1]
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136d6:	2301      	movs	r3, #1
 80136d8:	697a      	ldr	r2, [r7, #20]
 80136da:	f7fd ff0f 	bl	80114fc <disk_read>
 80136de:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d004      	beq.n	80136ee <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	2201      	movs	r2, #1
 80136e8:	755a      	strb	r2, [r3, #21]
 80136ea:	2301      	movs	r3, #1
 80136ec:	e05a      	b.n	80137a4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	697a      	ldr	r2, [r7, #20]
 80136f2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80136f4:	693b      	ldr	r3, [r7, #16]
 80136f6:	899b      	ldrh	r3, [r3, #12]
 80136f8:	4618      	mov	r0, r3
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	699b      	ldr	r3, [r3, #24]
 80136fe:	693a      	ldr	r2, [r7, #16]
 8013700:	8992      	ldrh	r2, [r2, #12]
 8013702:	fbb3 f1f2 	udiv	r1, r3, r2
 8013706:	fb02 f201 	mul.w	r2, r2, r1
 801370a:	1a9b      	subs	r3, r3, r2
 801370c:	1ac3      	subs	r3, r0, r3
 801370e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	429a      	cmp	r2, r3
 8013716:	d901      	bls.n	801371c <f_write+0x298>
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	699b      	ldr	r3, [r3, #24]
 8013726:	693a      	ldr	r2, [r7, #16]
 8013728:	8992      	ldrh	r2, [r2, #12]
 801372a:	fbb3 f0f2 	udiv	r0, r3, r2
 801372e:	fb02 f200 	mul.w	r2, r2, r0
 8013732:	1a9b      	subs	r3, r3, r2
 8013734:	440b      	add	r3, r1
 8013736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013738:	69f9      	ldr	r1, [r7, #28]
 801373a:	4618      	mov	r0, r3
 801373c:	f7fd ffbe 	bl	80116bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	7d1b      	ldrb	r3, [r3, #20]
 8013744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013748:	b2da      	uxtb	r2, r3
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801374e:	69fa      	ldr	r2, [r7, #28]
 8013750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013752:	4413      	add	r3, r2
 8013754:	61fb      	str	r3, [r7, #28]
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	699a      	ldr	r2, [r3, #24]
 801375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375c:	441a      	add	r2, r3
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	619a      	str	r2, [r3, #24]
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	68da      	ldr	r2, [r3, #12]
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	699b      	ldr	r3, [r3, #24]
 801376a:	429a      	cmp	r2, r3
 801376c:	bf38      	it	cc
 801376e:	461a      	movcc	r2, r3
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	60da      	str	r2, [r3, #12]
 8013774:	683b      	ldr	r3, [r7, #0]
 8013776:	681a      	ldr	r2, [r3, #0]
 8013778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377a:	441a      	add	r2, r3
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	601a      	str	r2, [r3, #0]
 8013780:	687a      	ldr	r2, [r7, #4]
 8013782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013784:	1ad3      	subs	r3, r2, r3
 8013786:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2b00      	cmp	r3, #0
 801378c:	f47f aeb5 	bne.w	80134fa <f_write+0x76>
 8013790:	e000      	b.n	8013794 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013792:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	7d1b      	ldrb	r3, [r3, #20]
 8013798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801379c:	b2da      	uxtb	r2, r3
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80137a2:	2300      	movs	r3, #0
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	3730      	adds	r7, #48	; 0x30
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}

080137ac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b086      	sub	sp, #24
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f107 0208 	add.w	r2, r7, #8
 80137ba:	4611      	mov	r1, r2
 80137bc:	4618      	mov	r0, r3
 80137be:	f7ff fc19 	bl	8012ff4 <validate>
 80137c2:	4603      	mov	r3, r0
 80137c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80137c6:	7dfb      	ldrb	r3, [r7, #23]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d168      	bne.n	801389e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	7d1b      	ldrb	r3, [r3, #20]
 80137d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d062      	beq.n	801389e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	7d1b      	ldrb	r3, [r3, #20]
 80137dc:	b25b      	sxtb	r3, r3
 80137de:	2b00      	cmp	r3, #0
 80137e0:	da15      	bge.n	801380e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	7858      	ldrb	r0, [r3, #1]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6a1a      	ldr	r2, [r3, #32]
 80137f0:	2301      	movs	r3, #1
 80137f2:	f7fd fea3 	bl	801153c <disk_write>
 80137f6:	4603      	mov	r3, r0
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d001      	beq.n	8013800 <f_sync+0x54>
 80137fc:	2301      	movs	r3, #1
 80137fe:	e04f      	b.n	80138a0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	7d1b      	ldrb	r3, [r3, #20]
 8013804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013808:	b2da      	uxtb	r2, r3
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801380e:	f000 fae7 	bl	8013de0 <get_fattime>
 8013812:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013814:	68ba      	ldr	r2, [r7, #8]
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801381a:	4619      	mov	r1, r3
 801381c:	4610      	mov	r0, r2
 801381e:	f7fe f97b 	bl	8011b18 <move_window>
 8013822:	4603      	mov	r3, r0
 8013824:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013826:	7dfb      	ldrb	r3, [r7, #23]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d138      	bne.n	801389e <f_sync+0xf2>
					dir = fp->dir_ptr;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013830:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	330b      	adds	r3, #11
 8013836:	781a      	ldrb	r2, [r3, #0]
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	330b      	adds	r3, #11
 801383c:	f042 0220 	orr.w	r2, r2, #32
 8013840:	b2d2      	uxtb	r2, r2
 8013842:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6818      	ldr	r0, [r3, #0]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	689b      	ldr	r3, [r3, #8]
 801384c:	461a      	mov	r2, r3
 801384e:	68f9      	ldr	r1, [r7, #12]
 8013850:	f7fe ff00 	bl	8012654 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	f103 021c 	add.w	r2, r3, #28
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	68db      	ldr	r3, [r3, #12]
 801385e:	4619      	mov	r1, r3
 8013860:	4610      	mov	r0, r2
 8013862:	f7fd feff 	bl	8011664 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	3316      	adds	r3, #22
 801386a:	6939      	ldr	r1, [r7, #16]
 801386c:	4618      	mov	r0, r3
 801386e:	f7fd fef9 	bl	8011664 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	3312      	adds	r3, #18
 8013876:	2100      	movs	r1, #0
 8013878:	4618      	mov	r0, r3
 801387a:	f7fd fed8 	bl	801162e <st_word>
					fs->wflag = 1;
 801387e:	68bb      	ldr	r3, [r7, #8]
 8013880:	2201      	movs	r2, #1
 8013882:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	4618      	mov	r0, r3
 8013888:	f7fe f974 	bl	8011b74 <sync_fs>
 801388c:	4603      	mov	r3, r0
 801388e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	7d1b      	ldrb	r3, [r3, #20]
 8013894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013898:	b2da      	uxtb	r2, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801389e:	7dfb      	ldrb	r3, [r7, #23]
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	3718      	adds	r7, #24
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}

080138a8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b084      	sub	sp, #16
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f7ff ff7b 	bl	80137ac <f_sync>
 80138b6:	4603      	mov	r3, r0
 80138b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80138ba:	7bfb      	ldrb	r3, [r7, #15]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d118      	bne.n	80138f2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f107 0208 	add.w	r2, r7, #8
 80138c6:	4611      	mov	r1, r2
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7ff fb93 	bl	8012ff4 <validate>
 80138ce:	4603      	mov	r3, r0
 80138d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80138d2:	7bfb      	ldrb	r3, [r7, #15]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d10c      	bne.n	80138f2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	691b      	ldr	r3, [r3, #16]
 80138dc:	4618      	mov	r0, r3
 80138de:	f7fe f877 	bl	80119d0 <dec_lock>
 80138e2:	4603      	mov	r3, r0
 80138e4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80138e6:	7bfb      	ldrb	r3, [r7, #15]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d102      	bne.n	80138f2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2200      	movs	r2, #0
 80138f0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80138f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	3710      	adds	r7, #16
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}

080138fc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b096      	sub	sp, #88	; 0x58
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013904:	f107 0108 	add.w	r1, r7, #8
 8013908:	1d3b      	adds	r3, r7, #4
 801390a:	2202      	movs	r2, #2
 801390c:	4618      	mov	r0, r3
 801390e:	f7ff f8ed 	bl	8012aec <find_volume>
 8013912:	4603      	mov	r3, r0
 8013914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801391c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013920:	2b00      	cmp	r3, #0
 8013922:	f040 80f2 	bne.w	8013b0a <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013926:	687a      	ldr	r2, [r7, #4]
 8013928:	f107 030c 	add.w	r3, r7, #12
 801392c:	4611      	mov	r1, r2
 801392e:	4618      	mov	r0, r3
 8013930:	f7fe ffcc 	bl	80128cc <follow_path>
 8013934:	4603      	mov	r3, r0
 8013936:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801393a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801393e:	2b00      	cmp	r3, #0
 8013940:	d102      	bne.n	8013948 <f_mkdir+0x4c>
 8013942:	2308      	movs	r3, #8
 8013944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013948:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801394c:	2b04      	cmp	r3, #4
 801394e:	f040 80dc 	bne.w	8013b0a <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013952:	f107 030c 	add.w	r3, r7, #12
 8013956:	2100      	movs	r1, #0
 8013958:	4618      	mov	r0, r3
 801395a:	f7fe fbe6 	bl	801212a <create_chain>
 801395e:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	895b      	ldrh	r3, [r3, #10]
 8013964:	461a      	mov	r2, r3
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	899b      	ldrh	r3, [r3, #12]
 801396a:	fb03 f302 	mul.w	r3, r3, r2
 801396e:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013970:	2300      	movs	r3, #0
 8013972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013978:	2b00      	cmp	r3, #0
 801397a:	d102      	bne.n	8013982 <f_mkdir+0x86>
 801397c:	2307      	movs	r3, #7
 801397e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013984:	2b01      	cmp	r3, #1
 8013986:	d102      	bne.n	801398e <f_mkdir+0x92>
 8013988:	2302      	movs	r3, #2
 801398a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801398e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013994:	d102      	bne.n	801399c <f_mkdir+0xa0>
 8013996:	2301      	movs	r3, #1
 8013998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801399c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d106      	bne.n	80139b2 <f_mkdir+0xb6>
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fe f872 	bl	8011a90 <sync_window>
 80139ac:	4603      	mov	r3, r0
 80139ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80139b2:	f000 fa15 	bl	8013de0 <get_fattime>
 80139b6:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80139b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d16c      	bne.n	8013a9a <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7fe f945 	bl	8011c54 <clust2sect>
 80139ca:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	3334      	adds	r3, #52	; 0x34
 80139d0:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	899b      	ldrh	r3, [r3, #12]
 80139d6:	461a      	mov	r2, r3
 80139d8:	2100      	movs	r1, #0
 80139da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80139dc:	f7fd fe8f 	bl	80116fe <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80139e0:	220b      	movs	r2, #11
 80139e2:	2120      	movs	r1, #32
 80139e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80139e6:	f7fd fe8a 	bl	80116fe <mem_set>
					dir[DIR_Name] = '.';
 80139ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139ec:	222e      	movs	r2, #46	; 0x2e
 80139ee:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80139f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139f2:	330b      	adds	r3, #11
 80139f4:	2210      	movs	r2, #16
 80139f6:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80139f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139fa:	3316      	adds	r3, #22
 80139fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7fd fe30 	bl	8011664 <st_dword>
					st_clust(fs, dir, dcl);
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fe fe22 	bl	8012654 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a12:	3320      	adds	r3, #32
 8013a14:	2220      	movs	r2, #32
 8013a16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7fd fe4f 	bl	80116bc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a20:	3321      	adds	r3, #33	; 0x21
 8013a22:	222e      	movs	r2, #46	; 0x2e
 8013a24:	701a      	strb	r2, [r3, #0]
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013a2a:	68bb      	ldr	r3, [r7, #8]
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	2b03      	cmp	r3, #3
 8013a30:	d106      	bne.n	8013a40 <f_mkdir+0x144>
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d101      	bne.n	8013a40 <f_mkdir+0x144>
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013a40:	68b8      	ldr	r0, [r7, #8]
 8013a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a44:	3320      	adds	r3, #32
 8013a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a48:	4619      	mov	r1, r3
 8013a4a:	f7fe fe03 	bl	8012654 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	895b      	ldrh	r3, [r3, #10]
 8013a52:	653b      	str	r3, [r7, #80]	; 0x50
 8013a54:	e01c      	b.n	8013a90 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8013a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a58:	1c5a      	adds	r2, r3, #1
 8013a5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013a5c:	68ba      	ldr	r2, [r7, #8]
 8013a5e:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	2201      	movs	r2, #1
 8013a64:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7fe f811 	bl	8011a90 <sync_window>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013a74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d10d      	bne.n	8013a98 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	899b      	ldrh	r3, [r3, #12]
 8013a80:	461a      	mov	r2, r3
 8013a82:	2100      	movs	r1, #0
 8013a84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a86:	f7fd fe3a 	bl	80116fe <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a8c:	3b01      	subs	r3, #1
 8013a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8013a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d1df      	bne.n	8013a56 <f_mkdir+0x15a>
 8013a96:	e000      	b.n	8013a9a <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8013a98:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013a9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d107      	bne.n	8013ab2 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013aa2:	f107 030c 	add.w	r3, r7, #12
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7fe fe49 	bl	801273e <dir_register>
 8013aac:	4603      	mov	r3, r0
 8013aae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013ab2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d120      	bne.n	8013afc <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013abc:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ac0:	3316      	adds	r3, #22
 8013ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7fd fdcd 	bl	8011664 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013aca:	68bb      	ldr	r3, [r7, #8]
 8013acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7fe fdbf 	bl	8012654 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ad8:	330b      	adds	r3, #11
 8013ada:	2210      	movs	r2, #16
 8013adc:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	2201      	movs	r2, #1
 8013ae2:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d10e      	bne.n	8013b0a <f_mkdir+0x20e>
					res = sync_fs(fs);
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7fe f840 	bl	8011b74 <sync_fs>
 8013af4:	4603      	mov	r3, r0
 8013af6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013afa:	e006      	b.n	8013b0a <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013afc:	f107 030c 	add.w	r3, r7, #12
 8013b00:	2200      	movs	r2, #0
 8013b02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7fe faab 	bl	8012060 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013b0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3758      	adds	r7, #88	; 0x58
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}
	...

08013b18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013b18:	b480      	push	{r7}
 8013b1a:	b087      	sub	sp, #28
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	60f8      	str	r0, [r7, #12]
 8013b20:	60b9      	str	r1, [r7, #8]
 8013b22:	4613      	mov	r3, r2
 8013b24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013b26:	2301      	movs	r3, #1
 8013b28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013b2e:	4b1f      	ldr	r3, [pc, #124]	; (8013bac <FATFS_LinkDriverEx+0x94>)
 8013b30:	7a5b      	ldrb	r3, [r3, #9]
 8013b32:	b2db      	uxtb	r3, r3
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d131      	bne.n	8013b9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013b38:	4b1c      	ldr	r3, [pc, #112]	; (8013bac <FATFS_LinkDriverEx+0x94>)
 8013b3a:	7a5b      	ldrb	r3, [r3, #9]
 8013b3c:	b2db      	uxtb	r3, r3
 8013b3e:	461a      	mov	r2, r3
 8013b40:	4b1a      	ldr	r3, [pc, #104]	; (8013bac <FATFS_LinkDriverEx+0x94>)
 8013b42:	2100      	movs	r1, #0
 8013b44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013b46:	4b19      	ldr	r3, [pc, #100]	; (8013bac <FATFS_LinkDriverEx+0x94>)
 8013b48:	7a5b      	ldrb	r3, [r3, #9]
 8013b4a:	b2db      	uxtb	r3, r3
 8013b4c:	4a17      	ldr	r2, [pc, #92]	; (8013bac <FATFS_LinkDriverEx+0x94>)
 8013b4e:	009b      	lsls	r3, r3, #2
 8013b50:	4413      	add	r3, r2
 8013b52:	68fa      	ldr	r2, [r7, #12]
 8013b54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013b56:	4b15      	ldr	r3, [pc, #84]	; (8013bac <FATFS_LinkDriverEx+0x94>)
 8013b58:	7a5b      	ldrb	r3, [r3, #9]
 8013b5a:	b2db      	uxtb	r3, r3
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	4b13      	ldr	r3, [pc, #76]	; (8013bac <FATFS_LinkDriverEx+0x94>)
 8013b60:	4413      	add	r3, r2
 8013b62:	79fa      	ldrb	r2, [r7, #7]
 8013b64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013b66:	4b11      	ldr	r3, [pc, #68]	; (8013bac <FATFS_LinkDriverEx+0x94>)
 8013b68:	7a5b      	ldrb	r3, [r3, #9]
 8013b6a:	b2db      	uxtb	r3, r3
 8013b6c:	1c5a      	adds	r2, r3, #1
 8013b6e:	b2d1      	uxtb	r1, r2
 8013b70:	4a0e      	ldr	r2, [pc, #56]	; (8013bac <FATFS_LinkDriverEx+0x94>)
 8013b72:	7251      	strb	r1, [r2, #9]
 8013b74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013b76:	7dbb      	ldrb	r3, [r7, #22]
 8013b78:	3330      	adds	r3, #48	; 0x30
 8013b7a:	b2da      	uxtb	r2, r3
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	3301      	adds	r3, #1
 8013b84:	223a      	movs	r2, #58	; 0x3a
 8013b86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	3302      	adds	r3, #2
 8013b8c:	222f      	movs	r2, #47	; 0x2f
 8013b8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	3303      	adds	r3, #3
 8013b94:	2200      	movs	r2, #0
 8013b96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	371c      	adds	r7, #28
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba8:	4770      	bx	lr
 8013baa:	bf00      	nop
 8013bac:	20000dd4 	.word	0x20000dd4

08013bb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b082      	sub	sp, #8
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013bba:	2200      	movs	r2, #0
 8013bbc:	6839      	ldr	r1, [r7, #0]
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f7ff ffaa 	bl	8013b18 <FATFS_LinkDriverEx>
 8013bc4:	4603      	mov	r3, r0
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3708      	adds	r7, #8
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
	...

08013bd0 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b085      	sub	sp, #20
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	460b      	mov	r3, r1
 8013bda:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8013be0:	2301      	movs	r3, #1
 8013be2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8013be4:	4b15      	ldr	r3, [pc, #84]	; (8013c3c <FATFS_UnLinkDriverEx+0x6c>)
 8013be6:	7a5b      	ldrb	r3, [r3, #9]
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d01e      	beq.n	8013c2c <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	3b30      	subs	r3, #48	; 0x30
 8013bf4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8013bf6:	7bbb      	ldrb	r3, [r7, #14]
 8013bf8:	4a10      	ldr	r2, [pc, #64]	; (8013c3c <FATFS_UnLinkDriverEx+0x6c>)
 8013bfa:	009b      	lsls	r3, r3, #2
 8013bfc:	4413      	add	r3, r2
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d013      	beq.n	8013c2c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8013c04:	7bbb      	ldrb	r3, [r7, #14]
 8013c06:	4a0d      	ldr	r2, [pc, #52]	; (8013c3c <FATFS_UnLinkDriverEx+0x6c>)
 8013c08:	009b      	lsls	r3, r3, #2
 8013c0a:	4413      	add	r3, r2
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8013c10:	7bbb      	ldrb	r3, [r7, #14]
 8013c12:	4a0a      	ldr	r2, [pc, #40]	; (8013c3c <FATFS_UnLinkDriverEx+0x6c>)
 8013c14:	4413      	add	r3, r2
 8013c16:	2200      	movs	r2, #0
 8013c18:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8013c1a:	4b08      	ldr	r3, [pc, #32]	; (8013c3c <FATFS_UnLinkDriverEx+0x6c>)
 8013c1c:	7a5b      	ldrb	r3, [r3, #9]
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	3b01      	subs	r3, #1
 8013c22:	b2da      	uxtb	r2, r3
 8013c24:	4b05      	ldr	r3, [pc, #20]	; (8013c3c <FATFS_UnLinkDriverEx+0x6c>)
 8013c26:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	3714      	adds	r7, #20
 8013c32:	46bd      	mov	sp, r7
 8013c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c38:	4770      	bx	lr
 8013c3a:	bf00      	nop
 8013c3c:	20000dd4 	.word	0x20000dd4

08013c40 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b082      	sub	sp, #8
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8013c48:	2100      	movs	r1, #0
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f7ff ffc0 	bl	8013bd0 <FATFS_UnLinkDriverEx>
 8013c50:	4603      	mov	r3, r0
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3708      	adds	r7, #8
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
	...

08013c5c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b082      	sub	sp, #8
 8013c60:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013c62:	2300      	movs	r3, #0
 8013c64:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013c66:	f000 f896 	bl	8013d96 <BSP_SD_IsDetected>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b01      	cmp	r3, #1
 8013c6e:	d001      	beq.n	8013c74 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8013c70:	2301      	movs	r3, #1
 8013c72:	e012      	b.n	8013c9a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8013c74:	480b      	ldr	r0, [pc, #44]	; (8013ca4 <BSP_SD_Init+0x48>)
 8013c76:	f7f6 fd4f 	bl	800a718 <HAL_SD_Init>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013c7e:	79fb      	ldrb	r3, [r7, #7]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d109      	bne.n	8013c98 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8013c84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013c88:	4806      	ldr	r0, [pc, #24]	; (8013ca4 <BSP_SD_Init+0x48>)
 8013c8a:	f7f7 fb2a 	bl	800b2e2 <HAL_SD_ConfigWideBusOperation>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d001      	beq.n	8013c98 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013c94:	2301      	movs	r3, #1
 8013c96:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013c98:	79fb      	ldrb	r3, [r7, #7]
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3708      	adds	r7, #8
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	2000a85c 	.word	0x2000a85c

08013ca8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b086      	sub	sp, #24
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	60f8      	str	r0, [r7, #12]
 8013cb0:	60b9      	str	r1, [r7, #8]
 8013cb2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	68ba      	ldr	r2, [r7, #8]
 8013cbc:	68f9      	ldr	r1, [r7, #12]
 8013cbe:	4806      	ldr	r0, [pc, #24]	; (8013cd8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013cc0:	f7f6 fdb2 	bl	800a828 <HAL_SD_ReadBlocks_DMA>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d001      	beq.n	8013cce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013cca:	2301      	movs	r3, #1
 8013ccc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8013cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	3718      	adds	r7, #24
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}
 8013cd8:	2000a85c 	.word	0x2000a85c

08013cdc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b086      	sub	sp, #24
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	68ba      	ldr	r2, [r7, #8]
 8013cf0:	68f9      	ldr	r1, [r7, #12]
 8013cf2:	4806      	ldr	r0, [pc, #24]	; (8013d0c <BSP_SD_WriteBlocks_DMA+0x30>)
 8013cf4:	f7f6 fe64 	bl	800a9c0 <HAL_SD_WriteBlocks_DMA>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d001      	beq.n	8013d02 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013cfe:	2301      	movs	r3, #1
 8013d00:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8013d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3718      	adds	r7, #24
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	2000a85c 	.word	0x2000a85c

08013d10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013d14:	4805      	ldr	r0, [pc, #20]	; (8013d2c <BSP_SD_GetCardState+0x1c>)
 8013d16:	f7f7 fb60 	bl	800b3da <HAL_SD_GetCardState>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	2b04      	cmp	r3, #4
 8013d1e:	bf14      	ite	ne
 8013d20:	2301      	movne	r3, #1
 8013d22:	2300      	moveq	r3, #0
 8013d24:	b2db      	uxtb	r3, r3
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	2000a85c 	.word	0x2000a85c

08013d30 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b082      	sub	sp, #8
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8013d38:	6879      	ldr	r1, [r7, #4]
 8013d3a:	4803      	ldr	r0, [pc, #12]	; (8013d48 <BSP_SD_GetCardInfo+0x18>)
 8013d3c:	f7f7 faa5 	bl	800b28a <HAL_SD_GetCardInfo>
}
 8013d40:	bf00      	nop
 8013d42:	3708      	adds	r7, #8
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}
 8013d48:	2000a85c 	.word	0x2000a85c

08013d4c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b082      	sub	sp, #8
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8013d54:	f000 f818 	bl	8013d88 <BSP_SD_AbortCallback>
}
 8013d58:	bf00      	nop
 8013d5a:	3708      	adds	r7, #8
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013d68:	f003 fd58 	bl	801781c <BSP_SD_WriteCpltCallback>
}
 8013d6c:	bf00      	nop
 8013d6e:	3708      	adds	r7, #8
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}

08013d74 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b082      	sub	sp, #8
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013d7c:	f003 fd5a 	bl	8017834 <BSP_SD_ReadCpltCallback>
}
 8013d80:	bf00      	nop
 8013d82:	3708      	adds	r7, #8
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8013d88:	b480      	push	{r7}
 8013d8a:	af00      	add	r7, sp, #0

}
 8013d8c:	bf00      	nop
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr

08013d96 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8013d96:	b580      	push	{r7, lr}
 8013d98:	b082      	sub	sp, #8
 8013d9a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8013da0:	f000 f826 	bl	8013df0 <BSP_PlatformIsDetected>
 8013da4:	4603      	mov	r3, r0
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d101      	bne.n	8013dae <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013daa:	2300      	movs	r3, #0
 8013dac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013dae:	79fb      	ldrb	r3, [r7, #7]
 8013db0:	b2db      	uxtb	r3, r3
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3708      	adds	r7, #8
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
	...

08013dbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013dc0:	4904      	ldr	r1, [pc, #16]	; (8013dd4 <MX_FATFS_Init+0x18>)
 8013dc2:	4805      	ldr	r0, [pc, #20]	; (8013dd8 <MX_FATFS_Init+0x1c>)
 8013dc4:	f7ff fef4 	bl	8013bb0 <FATFS_LinkDriver>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	461a      	mov	r2, r3
 8013dcc:	4b03      	ldr	r3, [pc, #12]	; (8013ddc <MX_FATFS_Init+0x20>)
 8013dce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8013dd0:	bf00      	nop
 8013dd2:	bd80      	pop	{r7, pc}
 8013dd4:	200085ac 	.word	0x200085ac
 8013dd8:	080203e8 	.word	0x080203e8
 8013ddc:	200085a8 	.word	0x200085a8

08013de0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013de0:	b480      	push	{r7}
 8013de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013de4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	46bd      	mov	sp, r7
 8013dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dee:	4770      	bx	lr

08013df0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b082      	sub	sp, #8
 8013df4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013df6:	2301      	movs	r3, #1
 8013df8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013dfe:	4806      	ldr	r0, [pc, #24]	; (8013e18 <BSP_PlatformIsDetected+0x28>)
 8013e00:	f7f3 fc98 	bl	8007734 <HAL_GPIO_ReadPin>
 8013e04:	4603      	mov	r3, r0
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d001      	beq.n	8013e0e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8013e0e:	79fb      	ldrb	r3, [r7, #7]
}  
 8013e10:	4618      	mov	r0, r3
 8013e12:	3708      	adds	r7, #8
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}
 8013e18:	40020000 	.word	0x40020000

08013e1c <micros>:
 8013e1c:	b480      	push	{r7}
 8013e1e:	af00      	add	r7, sp, #0
 8013e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e26:	4618      	mov	r0, r3
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8013e30:	b480      	push	{r7}
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e3a:	4a04      	ldr	r2, [pc, #16]	; (8013e4c <millis+0x1c>)
 8013e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8013e40:	099b      	lsrs	r3, r3, #6
 8013e42:	4618      	mov	r0, r3
 8013e44:	46bd      	mov	sp, r7
 8013e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4a:	4770      	bx	lr
 8013e4c:	10624dd3 	.word	0x10624dd3

08013e50 <getTime>:
	
	return true;
}

static inline DateTime getTime(void)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b08c      	sub	sp, #48	; 0x30
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8013e58:	f107 031c 	add.w	r3, r7, #28
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	601a      	str	r2, [r3, #0]
 8013e60:	605a      	str	r2, [r3, #4]
 8013e62:	609a      	str	r2, [r3, #8]
 8013e64:	60da      	str	r2, [r3, #12]
 8013e66:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8013e68:	2300      	movs	r3, #0
 8013e6a:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8013e6c:	f107 030c 	add.w	r3, r7, #12
 8013e70:	2200      	movs	r2, #0
 8013e72:	601a      	str	r2, [r3, #0]
 8013e74:	605a      	str	r2, [r3, #4]
 8013e76:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8013e78:	f003 faa8 	bl	80173cc <Get_RTC_Instance>
 8013e7c:	f107 031c 	add.w	r3, r7, #28
 8013e80:	2200      	movs	r2, #0
 8013e82:	4619      	mov	r1, r3
 8013e84:	f7f6 fb29 	bl	800a4da <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8013e88:	f003 faa0 	bl	80173cc <Get_RTC_Instance>
 8013e8c:	f107 0318 	add.w	r3, r7, #24
 8013e90:	2200      	movs	r2, #0
 8013e92:	4619      	mov	r1, r3
 8013e94:	f7f6 fb7f 	bl	800a596 <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8013e98:	7efb      	ldrb	r3, [r7, #27]
 8013e9a:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8013e9c:	7e7b      	ldrb	r3, [r7, #25]
 8013e9e:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 8013ea0:	7ebb      	ldrb	r3, [r7, #26]
 8013ea2:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8013ea4:	7e3b      	ldrb	r3, [r7, #24]
 8013ea6:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8013ea8:	7f3b      	ldrb	r3, [r7, #28]
 8013eaa:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8013eac:	7f7b      	ldrb	r3, [r7, #29]
 8013eae:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8013eb0:	7fbb      	ldrb	r3, [r7, #30]
 8013eb2:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8013eb4:	f7ff ffbc 	bl	8013e30 <millis>
 8013eb8:	4602      	mov	r2, r0
 8013eba:	4b0c      	ldr	r3, [pc, #48]	; (8013eec <getTime+0x9c>)
 8013ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8013ec0:	099b      	lsrs	r3, r3, #6
 8013ec2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013ec6:	fb01 f303 	mul.w	r3, r1, r3
 8013eca:	1ad3      	subs	r3, r2, r3
 8013ecc:	b29b      	uxth	r3, r3
 8013ece:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	f107 030c 	add.w	r3, r7, #12
 8013ed8:	cb03      	ldmia	r3!, {r0, r1}
 8013eda:	6010      	str	r0, [r2, #0]
 8013edc:	6051      	str	r1, [r2, #4]
 8013ede:	881b      	ldrh	r3, [r3, #0]
 8013ee0:	8113      	strh	r3, [r2, #8]
}
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	3730      	adds	r7, #48	; 0x30
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}
 8013eea:	bf00      	nop
 8013eec:	10624dd3 	.word	0x10624dd3

08013ef0 <println>:
{
 8013ef0:	b40f      	push	{r0, r1, r2, r3}
 8013ef2:	b580      	push	{r7, lr}
 8013ef4:	b084      	sub	sp, #16
 8013ef6:	af00      	add	r7, sp, #0
	if (usbPresent)
 8013ef8:	4b24      	ldr	r3, [pc, #144]	; (8013f8c <println+0x9c>)
 8013efa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8013efe:	2b03      	cmp	r3, #3
 8013f00:	d13b      	bne.n	8013f7a <println+0x8a>
		va_start(argptr, format);
 8013f02:	f107 031c 	add.w	r3, r7, #28
 8013f06:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8013f08:	687a      	ldr	r2, [r7, #4]
 8013f0a:	69b9      	ldr	r1, [r7, #24]
 8013f0c:	4820      	ldr	r0, [pc, #128]	; (8013f90 <println+0xa0>)
 8013f0e:	f006 fc8d 	bl	801a82c <vsiprintf>
 8013f12:	4603      	mov	r3, r0
 8013f14:	461a      	mov	r2, r3
 8013f16:	4b1f      	ldr	r3, [pc, #124]	; (8013f94 <println+0xa4>)
 8013f18:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 8013f1a:	4b1e      	ldr	r3, [pc, #120]	; (8013f94 <println+0xa4>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	4a1c      	ldr	r2, [pc, #112]	; (8013f90 <println+0xa0>)
 8013f20:	210d      	movs	r1, #13
 8013f22:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 8013f24:	4b1b      	ldr	r3, [pc, #108]	; (8013f94 <println+0xa4>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	3301      	adds	r3, #1
 8013f2a:	4a19      	ldr	r2, [pc, #100]	; (8013f90 <println+0xa0>)
 8013f2c:	210a      	movs	r1, #10
 8013f2e:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8013f30:	4b18      	ldr	r3, [pc, #96]	; (8013f94 <println+0xa4>)
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	3302      	adds	r3, #2
 8013f36:	4a16      	ldr	r2, [pc, #88]	; (8013f90 <println+0xa0>)
 8013f38:	2100      	movs	r1, #0
 8013f3a:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8013f3c:	4b15      	ldr	r3, [pc, #84]	; (8013f94 <println+0xa4>)
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	3303      	adds	r3, #3
 8013f42:	4a14      	ldr	r2, [pc, #80]	; (8013f94 <println+0xa4>)
 8013f44:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 8013f46:	f7ff ff69 	bl	8013e1c <micros>
 8013f4a:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8013f4c:	4b11      	ldr	r3, [pc, #68]	; (8013f94 <println+0xa4>)
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	4613      	mov	r3, r2
 8013f52:	009b      	lsls	r3, r3, #2
 8013f54:	4413      	add	r3, r2
 8013f56:	005b      	lsls	r3, r3, #1
 8013f58:	3346      	adds	r3, #70	; 0x46
 8013f5a:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8013f5c:	e001      	b.n	8013f62 <println+0x72>
			if (micros() - printStart > timeout && false)
 8013f5e:	f7ff ff5d 	bl	8013e1c <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8013f62:	4b0c      	ldr	r3, [pc, #48]	; (8013f94 <println+0xa4>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	4619      	mov	r1, r3
 8013f6a:	4809      	ldr	r0, [pc, #36]	; (8013f90 <println+0xa0>)
 8013f6c:	f004 f952 	bl	8018214 <CDC_Transmit_FS>
 8013f70:	4603      	mov	r3, r0
 8013f72:	2b01      	cmp	r3, #1
 8013f74:	d0f3      	beq.n	8013f5e <println+0x6e>
		return true;
 8013f76:	2301      	movs	r3, #1
 8013f78:	e000      	b.n	8013f7c <println+0x8c>
	return false;
 8013f7a:	2300      	movs	r3, #0
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	3710      	adds	r7, #16
 8013f80:	46bd      	mov	sp, r7
 8013f82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013f86:	b004      	add	sp, #16
 8013f88:	4770      	bx	lr
 8013f8a:	bf00      	nop
 8013f8c:	200019c0 	.word	0x200019c0
 8013f90:	200015a8 	.word	0x200015a8
 8013f94:	200015a4 	.word	0x200015a4

08013f98 <floatToBytes>:
static inline void floatToBytes(float* value, uint8_t* buffer) { for (uint8_t i = 0; i < 4; i++) buffer[i] = *((uint8_t*)(value) + i); }
 8013f98:	b480      	push	{r7}
 8013f9a:	b085      	sub	sp, #20
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	6039      	str	r1, [r7, #0]
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	73fb      	strb	r3, [r7, #15]
 8013fa6:	e00a      	b.n	8013fbe <floatToBytes+0x26>
 8013fa8:	7bfb      	ldrb	r3, [r7, #15]
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	441a      	add	r2, r3
 8013fae:	7bfb      	ldrb	r3, [r7, #15]
 8013fb0:	6839      	ldr	r1, [r7, #0]
 8013fb2:	440b      	add	r3, r1
 8013fb4:	7812      	ldrb	r2, [r2, #0]
 8013fb6:	701a      	strb	r2, [r3, #0]
 8013fb8:	7bfb      	ldrb	r3, [r7, #15]
 8013fba:	3301      	adds	r3, #1
 8013fbc:	73fb      	strb	r3, [r7, #15]
 8013fbe:	7bfb      	ldrb	r3, [r7, #15]
 8013fc0:	2b03      	cmp	r3, #3
 8013fc2:	d9f1      	bls.n	8013fa8 <floatToBytes+0x10>
 8013fc4:	bf00      	nop
 8013fc6:	3714      	adds	r7, #20
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fce:	4770      	bx	lr

08013fd0 <bytesToFloat>:
static inline void bytesToFloat(uint8_t* buffer, float* value) { for (uint8_t i = 0; i < 4; i++) *((uint8_t*)(value) + i) = buffer[i]; }
 8013fd0:	b480      	push	{r7}
 8013fd2:	b085      	sub	sp, #20
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
 8013fda:	2300      	movs	r3, #0
 8013fdc:	73fb      	strb	r3, [r7, #15]
 8013fde:	e00a      	b.n	8013ff6 <bytesToFloat+0x26>
 8013fe0:	7bfb      	ldrb	r3, [r7, #15]
 8013fe2:	687a      	ldr	r2, [r7, #4]
 8013fe4:	441a      	add	r2, r3
 8013fe6:	7bfb      	ldrb	r3, [r7, #15]
 8013fe8:	6839      	ldr	r1, [r7, #0]
 8013fea:	440b      	add	r3, r1
 8013fec:	7812      	ldrb	r2, [r2, #0]
 8013fee:	701a      	strb	r2, [r3, #0]
 8013ff0:	7bfb      	ldrb	r3, [r7, #15]
 8013ff2:	3301      	adds	r3, #1
 8013ff4:	73fb      	strb	r3, [r7, #15]
 8013ff6:	7bfb      	ldrb	r3, [r7, #15]
 8013ff8:	2b03      	cmp	r3, #3
 8013ffa:	d9f1      	bls.n	8013fe0 <bytesToFloat+0x10>
 8013ffc:	bf00      	nop
 8013ffe:	3714      	adds	r7, #20
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr

08014008 <log_print_dummy>:

//void log_new();
char logBuffer[4096];
uint16_t logBufferIndex;
//void log_print(const char* format, ...);
static void log_print_dummy(const char* format, ...) { return; }
 8014008:	b40f      	push	{r0, r1, r2, r3}
 801400a:	b480      	push	{r7}
 801400c:	af00      	add	r7, sp, #0
 801400e:	bf00      	nop
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	b004      	add	sp, #16
 8014018:	4770      	bx	lr
	...

0801401c <log_new>:
uint32_t lastGpsLog;
uint32_t lastTargetYawLog;


static void log_new()
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b086      	sub	sp, #24
 8014020:	af02      	add	r7, sp, #8
	DateTime now = getTime();
 8014022:	1d3b      	adds	r3, r7, #4
 8014024:	4618      	mov	r0, r3
 8014026:	f7ff ff13 	bl	8013e50 <getTime>
	sprintf(directoryName, "/%02d%02d%02d%02d", now.hour, now.minute, now.dayM, now.month);
 801402a:	7a3b      	ldrb	r3, [r7, #8]
 801402c:	4619      	mov	r1, r3
 801402e:	7a7b      	ldrb	r3, [r7, #9]
 8014030:	4618      	mov	r0, r3
 8014032:	79bb      	ldrb	r3, [r7, #6]
 8014034:	797a      	ldrb	r2, [r7, #5]
 8014036:	9201      	str	r2, [sp, #4]
 8014038:	9300      	str	r3, [sp, #0]
 801403a:	4603      	mov	r3, r0
 801403c:	460a      	mov	r2, r1
 801403e:	4964      	ldr	r1, [pc, #400]	; (80141d0 <log_new+0x1b4>)
 8014040:	4864      	ldr	r0, [pc, #400]	; (80141d4 <log_new+0x1b8>)
 8014042:	f005 fc99 	bl	8019978 <siprintf>
	sprintf(directoryNameCopy, directoryName);
 8014046:	4963      	ldr	r1, [pc, #396]	; (80141d4 <log_new+0x1b8>)
 8014048:	4863      	ldr	r0, [pc, #396]	; (80141d8 <log_new+0x1bc>)
 801404a:	f005 fc95 	bl	8019978 <siprintf>

	SD_init();
 801404e:	f7ed f903 	bl	8001258 <SD_init>
	SD_newDirectory((char*)directoryName);
 8014052:	4860      	ldr	r0, [pc, #384]	; (80141d4 <log_new+0x1b8>)
 8014054:	f7ed f99c 	bl	8001390 <SD_newDirectory>
	SD_newFile(strcat(directoryName, "/LOG.TXT"));
 8014058:	485e      	ldr	r0, [pc, #376]	; (80141d4 <log_new+0x1b8>)
 801405a:	f7ec f8c3 	bl	80001e4 <strlen>
 801405e:	4603      	mov	r3, r0
 8014060:	461a      	mov	r2, r3
 8014062:	4b5c      	ldr	r3, [pc, #368]	; (80141d4 <log_new+0x1b8>)
 8014064:	4413      	add	r3, r2
 8014066:	495d      	ldr	r1, [pc, #372]	; (80141dc <log_new+0x1c0>)
 8014068:	461a      	mov	r2, r3
 801406a:	460b      	mov	r3, r1
 801406c:	cb03      	ldmia	r3!, {r0, r1}
 801406e:	6010      	str	r0, [r2, #0]
 8014070:	6051      	str	r1, [r2, #4]
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	7213      	strb	r3, [r2, #8]
 8014076:	4b57      	ldr	r3, [pc, #348]	; (80141d4 <log_new+0x1b8>)
 8014078:	4618      	mov	r0, r3
 801407a:	f7ed f929 	bl	80012d0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 801407e:	4956      	ldr	r1, [pc, #344]	; (80141d8 <log_new+0x1bc>)
 8014080:	4854      	ldr	r0, [pc, #336]	; (80141d4 <log_new+0x1b8>)
 8014082:	f005 fc79 	bl	8019978 <siprintf>
	SD_newFile(strcat(directoryName, "/BMP.TXT"));
 8014086:	4853      	ldr	r0, [pc, #332]	; (80141d4 <log_new+0x1b8>)
 8014088:	f7ec f8ac 	bl	80001e4 <strlen>
 801408c:	4603      	mov	r3, r0
 801408e:	461a      	mov	r2, r3
 8014090:	4b50      	ldr	r3, [pc, #320]	; (80141d4 <log_new+0x1b8>)
 8014092:	4413      	add	r3, r2
 8014094:	4952      	ldr	r1, [pc, #328]	; (80141e0 <log_new+0x1c4>)
 8014096:	461a      	mov	r2, r3
 8014098:	460b      	mov	r3, r1
 801409a:	cb03      	ldmia	r3!, {r0, r1}
 801409c:	6010      	str	r0, [r2, #0]
 801409e:	6051      	str	r1, [r2, #4]
 80140a0:	781b      	ldrb	r3, [r3, #0]
 80140a2:	7213      	strb	r3, [r2, #8]
 80140a4:	4b4b      	ldr	r3, [pc, #300]	; (80141d4 <log_new+0x1b8>)
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7ed f912 	bl	80012d0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 80140ac:	494a      	ldr	r1, [pc, #296]	; (80141d8 <log_new+0x1bc>)
 80140ae:	4849      	ldr	r0, [pc, #292]	; (80141d4 <log_new+0x1b8>)
 80140b0:	f005 fc62 	bl	8019978 <siprintf>
	SD_newFile(strcat(directoryName, "/GPS.TXT"));
 80140b4:	4847      	ldr	r0, [pc, #284]	; (80141d4 <log_new+0x1b8>)
 80140b6:	f7ec f895 	bl	80001e4 <strlen>
 80140ba:	4603      	mov	r3, r0
 80140bc:	461a      	mov	r2, r3
 80140be:	4b45      	ldr	r3, [pc, #276]	; (80141d4 <log_new+0x1b8>)
 80140c0:	4413      	add	r3, r2
 80140c2:	4948      	ldr	r1, [pc, #288]	; (80141e4 <log_new+0x1c8>)
 80140c4:	461a      	mov	r2, r3
 80140c6:	460b      	mov	r3, r1
 80140c8:	cb03      	ldmia	r3!, {r0, r1}
 80140ca:	6010      	str	r0, [r2, #0]
 80140cc:	6051      	str	r1, [r2, #4]
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	7213      	strb	r3, [r2, #8]
 80140d2:	4b40      	ldr	r3, [pc, #256]	; (80141d4 <log_new+0x1b8>)
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7ed f8fb 	bl	80012d0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 80140da:	493f      	ldr	r1, [pc, #252]	; (80141d8 <log_new+0x1bc>)
 80140dc:	483d      	ldr	r0, [pc, #244]	; (80141d4 <log_new+0x1b8>)
 80140de:	f005 fc4b 	bl	8019978 <siprintf>
	SD_newFile(strcat(directoryName, "/IMU.TXT"));
 80140e2:	483c      	ldr	r0, [pc, #240]	; (80141d4 <log_new+0x1b8>)
 80140e4:	f7ec f87e 	bl	80001e4 <strlen>
 80140e8:	4603      	mov	r3, r0
 80140ea:	461a      	mov	r2, r3
 80140ec:	4b39      	ldr	r3, [pc, #228]	; (80141d4 <log_new+0x1b8>)
 80140ee:	4413      	add	r3, r2
 80140f0:	493d      	ldr	r1, [pc, #244]	; (80141e8 <log_new+0x1cc>)
 80140f2:	461a      	mov	r2, r3
 80140f4:	460b      	mov	r3, r1
 80140f6:	cb03      	ldmia	r3!, {r0, r1}
 80140f8:	6010      	str	r0, [r2, #0]
 80140fa:	6051      	str	r1, [r2, #4]
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	7213      	strb	r3, [r2, #8]
 8014100:	4b34      	ldr	r3, [pc, #208]	; (80141d4 <log_new+0x1b8>)
 8014102:	4618      	mov	r0, r3
 8014104:	f7ed f8e4 	bl	80012d0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8014108:	4933      	ldr	r1, [pc, #204]	; (80141d8 <log_new+0x1bc>)
 801410a:	4832      	ldr	r0, [pc, #200]	; (80141d4 <log_new+0x1b8>)
 801410c:	f005 fc34 	bl	8019978 <siprintf>
	SD_newFile(strcat(directoryName, "/MOT.TXT"));
 8014110:	4830      	ldr	r0, [pc, #192]	; (80141d4 <log_new+0x1b8>)
 8014112:	f7ec f867 	bl	80001e4 <strlen>
 8014116:	4603      	mov	r3, r0
 8014118:	461a      	mov	r2, r3
 801411a:	4b2e      	ldr	r3, [pc, #184]	; (80141d4 <log_new+0x1b8>)
 801411c:	4413      	add	r3, r2
 801411e:	4933      	ldr	r1, [pc, #204]	; (80141ec <log_new+0x1d0>)
 8014120:	461a      	mov	r2, r3
 8014122:	460b      	mov	r3, r1
 8014124:	cb03      	ldmia	r3!, {r0, r1}
 8014126:	6010      	str	r0, [r2, #0]
 8014128:	6051      	str	r1, [r2, #4]
 801412a:	781b      	ldrb	r3, [r3, #0]
 801412c:	7213      	strb	r3, [r2, #8]
 801412e:	4b29      	ldr	r3, [pc, #164]	; (80141d4 <log_new+0x1b8>)
 8014130:	4618      	mov	r0, r3
 8014132:	f7ed f8cd 	bl	80012d0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8014136:	4928      	ldr	r1, [pc, #160]	; (80141d8 <log_new+0x1bc>)
 8014138:	4826      	ldr	r0, [pc, #152]	; (80141d4 <log_new+0x1b8>)
 801413a:	f005 fc1d 	bl	8019978 <siprintf>
	SD_newFile(strcat(directoryName, "/RADIO.TXT"));
 801413e:	4825      	ldr	r0, [pc, #148]	; (80141d4 <log_new+0x1b8>)
 8014140:	f7ec f850 	bl	80001e4 <strlen>
 8014144:	4603      	mov	r3, r0
 8014146:	461a      	mov	r2, r3
 8014148:	4b22      	ldr	r3, [pc, #136]	; (80141d4 <log_new+0x1b8>)
 801414a:	4413      	add	r3, r2
 801414c:	4928      	ldr	r1, [pc, #160]	; (80141f0 <log_new+0x1d4>)
 801414e:	461a      	mov	r2, r3
 8014150:	460b      	mov	r3, r1
 8014152:	cb03      	ldmia	r3!, {r0, r1}
 8014154:	6010      	str	r0, [r2, #0]
 8014156:	6051      	str	r1, [r2, #4]
 8014158:	8819      	ldrh	r1, [r3, #0]
 801415a:	789b      	ldrb	r3, [r3, #2]
 801415c:	8111      	strh	r1, [r2, #8]
 801415e:	7293      	strb	r3, [r2, #10]
 8014160:	4b1c      	ldr	r3, [pc, #112]	; (80141d4 <log_new+0x1b8>)
 8014162:	4618      	mov	r0, r3
 8014164:	f7ed f8b4 	bl	80012d0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8014168:	491b      	ldr	r1, [pc, #108]	; (80141d8 <log_new+0x1bc>)
 801416a:	481a      	ldr	r0, [pc, #104]	; (80141d4 <log_new+0x1b8>)
 801416c:	f005 fc04 	bl	8019978 <siprintf>
	SD_newFile(strcat(directoryName, "/SPS.TXT"));
 8014170:	4818      	ldr	r0, [pc, #96]	; (80141d4 <log_new+0x1b8>)
 8014172:	f7ec f837 	bl	80001e4 <strlen>
 8014176:	4603      	mov	r3, r0
 8014178:	461a      	mov	r2, r3
 801417a:	4b16      	ldr	r3, [pc, #88]	; (80141d4 <log_new+0x1b8>)
 801417c:	4413      	add	r3, r2
 801417e:	491d      	ldr	r1, [pc, #116]	; (80141f4 <log_new+0x1d8>)
 8014180:	461a      	mov	r2, r3
 8014182:	460b      	mov	r3, r1
 8014184:	cb03      	ldmia	r3!, {r0, r1}
 8014186:	6010      	str	r0, [r2, #0]
 8014188:	6051      	str	r1, [r2, #4]
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	7213      	strb	r3, [r2, #8]
 801418e:	4b11      	ldr	r3, [pc, #68]	; (80141d4 <log_new+0x1b8>)
 8014190:	4618      	mov	r0, r3
 8014192:	f7ed f89d 	bl	80012d0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8014196:	4910      	ldr	r1, [pc, #64]	; (80141d8 <log_new+0x1bc>)
 8014198:	480e      	ldr	r0, [pc, #56]	; (80141d4 <log_new+0x1b8>)
 801419a:	f005 fbed 	bl	8019978 <siprintf>

	logBufferIndex = 0;
 801419e:	4b16      	ldr	r3, [pc, #88]	; (80141f8 <log_new+0x1dc>)
 80141a0:	2200      	movs	r2, #0
 80141a2:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 80141a4:	4b15      	ldr	r3, [pc, #84]	; (80141fc <log_new+0x1e0>)
 80141a6:	2200      	movs	r2, #0
 80141a8:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 80141aa:	4b15      	ldr	r3, [pc, #84]	; (8014200 <log_new+0x1e4>)
 80141ac:	2200      	movs	r2, #0
 80141ae:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 80141b0:	4b14      	ldr	r3, [pc, #80]	; (8014204 <log_new+0x1e8>)
 80141b2:	2200      	movs	r2, #0
 80141b4:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 80141b6:	4b14      	ldr	r3, [pc, #80]	; (8014208 <log_new+0x1ec>)
 80141b8:	2200      	movs	r2, #0
 80141ba:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 80141bc:	4b13      	ldr	r3, [pc, #76]	; (801420c <log_new+0x1f0>)
 80141be:	2200      	movs	r2, #0
 80141c0:	801a      	strh	r2, [r3, #0]
	spsBufferIndex = 0;
 80141c2:	4b13      	ldr	r3, [pc, #76]	; (8014210 <log_new+0x1f4>)
 80141c4:	2200      	movs	r2, #0
 80141c6:	801a      	strh	r2, [r3, #0]
}
 80141c8:	bf00      	nop
 80141ca:	3710      	adds	r7, #16
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	0801fa84 	.word	0x0801fa84
 80141d4:	20007948 	.word	0x20007948
 80141d8:	20004cd4 	.word	0x20004cd4
 80141dc:	0801fa98 	.word	0x0801fa98
 80141e0:	0801faa4 	.word	0x0801faa4
 80141e4:	0801fab0 	.word	0x0801fab0
 80141e8:	0801fabc 	.word	0x0801fabc
 80141ec:	0801fac8 	.word	0x0801fac8
 80141f0:	0801fad4 	.word	0x0801fad4
 80141f4:	0801fae0 	.word	0x0801fae0
 80141f8:	20007978 	.word	0x20007978
 80141fc:	20007974 	.word	0x20007974
 8014200:	20005944 	.word	0x20005944
 8014204:	2000797c 	.word	0x2000797c
 8014208:	20005540 	.word	0x20005540
 801420c:	20005518 	.word	0x20005518
 8014210:	20007976 	.word	0x20007976

08014214 <log_save>:
static void log_save()
{
 8014214:	b580      	push	{r7, lr}
 8014216:	af00      	add	r7, sp, #0
	lastLogSave = millis();
 8014218:	f7ff fe0a 	bl	8013e30 <millis>
 801421c:	4602      	mov	r2, r0
 801421e:	4b92      	ldr	r3, [pc, #584]	; (8014468 <log_save+0x254>)
 8014220:	601a      	str	r2, [r3, #0]
	//__disable_irq();
	if (logBufferIndex > 0)
 8014222:	4b92      	ldr	r3, [pc, #584]	; (801446c <log_save+0x258>)
 8014224:	881b      	ldrh	r3, [r3, #0]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d01b      	beq.n	8014262 <log_save+0x4e>
	{
		sprintf(openedPath, strcat(directoryName, "/LOG.TXT"));
 801422a:	4891      	ldr	r0, [pc, #580]	; (8014470 <log_save+0x25c>)
 801422c:	f7eb ffda 	bl	80001e4 <strlen>
 8014230:	4603      	mov	r3, r0
 8014232:	461a      	mov	r2, r3
 8014234:	4b8e      	ldr	r3, [pc, #568]	; (8014470 <log_save+0x25c>)
 8014236:	4413      	add	r3, r2
 8014238:	498e      	ldr	r1, [pc, #568]	; (8014474 <log_save+0x260>)
 801423a:	461a      	mov	r2, r3
 801423c:	460b      	mov	r3, r1
 801423e:	cb03      	ldmia	r3!, {r0, r1}
 8014240:	6010      	str	r0, [r2, #0]
 8014242:	6051      	str	r1, [r2, #4]
 8014244:	781b      	ldrb	r3, [r3, #0]
 8014246:	7213      	strb	r3, [r2, #8]
 8014248:	4b89      	ldr	r3, [pc, #548]	; (8014470 <log_save+0x25c>)
 801424a:	4619      	mov	r1, r3
 801424c:	488a      	ldr	r0, [pc, #552]	; (8014478 <log_save+0x264>)
 801424e:	f005 fb93 	bl	8019978 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8014252:	498a      	ldr	r1, [pc, #552]	; (801447c <log_save+0x268>)
 8014254:	4886      	ldr	r0, [pc, #536]	; (8014470 <log_save+0x25c>)
 8014256:	f005 fb8f 	bl	8019978 <siprintf>
		SD_writeToFile(openedPath, logBuffer);
 801425a:	4989      	ldr	r1, [pc, #548]	; (8014480 <log_save+0x26c>)
 801425c:	4886      	ldr	r0, [pc, #536]	; (8014478 <log_save+0x264>)
 801425e:	f7ed f85f 	bl	8001320 <SD_writeToFile>
	}

	if (bmpBufferIndex > 0)
 8014262:	4b88      	ldr	r3, [pc, #544]	; (8014484 <log_save+0x270>)
 8014264:	881b      	ldrh	r3, [r3, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d01b      	beq.n	80142a2 <log_save+0x8e>
	{
		sprintf(openedPath, strcat(directoryName, "/BMP.TXT"));
 801426a:	4881      	ldr	r0, [pc, #516]	; (8014470 <log_save+0x25c>)
 801426c:	f7eb ffba 	bl	80001e4 <strlen>
 8014270:	4603      	mov	r3, r0
 8014272:	461a      	mov	r2, r3
 8014274:	4b7e      	ldr	r3, [pc, #504]	; (8014470 <log_save+0x25c>)
 8014276:	4413      	add	r3, r2
 8014278:	4983      	ldr	r1, [pc, #524]	; (8014488 <log_save+0x274>)
 801427a:	461a      	mov	r2, r3
 801427c:	460b      	mov	r3, r1
 801427e:	cb03      	ldmia	r3!, {r0, r1}
 8014280:	6010      	str	r0, [r2, #0]
 8014282:	6051      	str	r1, [r2, #4]
 8014284:	781b      	ldrb	r3, [r3, #0]
 8014286:	7213      	strb	r3, [r2, #8]
 8014288:	4b79      	ldr	r3, [pc, #484]	; (8014470 <log_save+0x25c>)
 801428a:	4619      	mov	r1, r3
 801428c:	487a      	ldr	r0, [pc, #488]	; (8014478 <log_save+0x264>)
 801428e:	f005 fb73 	bl	8019978 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8014292:	497a      	ldr	r1, [pc, #488]	; (801447c <log_save+0x268>)
 8014294:	4876      	ldr	r0, [pc, #472]	; (8014470 <log_save+0x25c>)
 8014296:	f005 fb6f 	bl	8019978 <siprintf>
		SD_writeToFile(openedPath, bmpBuffer);
 801429a:	497c      	ldr	r1, [pc, #496]	; (801448c <log_save+0x278>)
 801429c:	4876      	ldr	r0, [pc, #472]	; (8014478 <log_save+0x264>)
 801429e:	f7ed f83f 	bl	8001320 <SD_writeToFile>
	}

	if (gpsBufferIndex > 0)
 80142a2:	4b7b      	ldr	r3, [pc, #492]	; (8014490 <log_save+0x27c>)
 80142a4:	881b      	ldrh	r3, [r3, #0]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d01b      	beq.n	80142e2 <log_save+0xce>
	{
		sprintf(openedPath, strcat(directoryName, "/GPS.TXT"));
 80142aa:	4871      	ldr	r0, [pc, #452]	; (8014470 <log_save+0x25c>)
 80142ac:	f7eb ff9a 	bl	80001e4 <strlen>
 80142b0:	4603      	mov	r3, r0
 80142b2:	461a      	mov	r2, r3
 80142b4:	4b6e      	ldr	r3, [pc, #440]	; (8014470 <log_save+0x25c>)
 80142b6:	4413      	add	r3, r2
 80142b8:	4976      	ldr	r1, [pc, #472]	; (8014494 <log_save+0x280>)
 80142ba:	461a      	mov	r2, r3
 80142bc:	460b      	mov	r3, r1
 80142be:	cb03      	ldmia	r3!, {r0, r1}
 80142c0:	6010      	str	r0, [r2, #0]
 80142c2:	6051      	str	r1, [r2, #4]
 80142c4:	781b      	ldrb	r3, [r3, #0]
 80142c6:	7213      	strb	r3, [r2, #8]
 80142c8:	4b69      	ldr	r3, [pc, #420]	; (8014470 <log_save+0x25c>)
 80142ca:	4619      	mov	r1, r3
 80142cc:	486a      	ldr	r0, [pc, #424]	; (8014478 <log_save+0x264>)
 80142ce:	f005 fb53 	bl	8019978 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 80142d2:	496a      	ldr	r1, [pc, #424]	; (801447c <log_save+0x268>)
 80142d4:	4866      	ldr	r0, [pc, #408]	; (8014470 <log_save+0x25c>)
 80142d6:	f005 fb4f 	bl	8019978 <siprintf>
		SD_writeToFile(openedPath, gpsBuffer);
 80142da:	496f      	ldr	r1, [pc, #444]	; (8014498 <log_save+0x284>)
 80142dc:	4866      	ldr	r0, [pc, #408]	; (8014478 <log_save+0x264>)
 80142de:	f7ed f81f 	bl	8001320 <SD_writeToFile>
	}

	if (imuBufferIndex > 0)
 80142e2:	4b6e      	ldr	r3, [pc, #440]	; (801449c <log_save+0x288>)
 80142e4:	881b      	ldrh	r3, [r3, #0]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d01b      	beq.n	8014322 <log_save+0x10e>
	{
		sprintf(openedPath, strcat(directoryName, "/IMU.TXT"));
 80142ea:	4861      	ldr	r0, [pc, #388]	; (8014470 <log_save+0x25c>)
 80142ec:	f7eb ff7a 	bl	80001e4 <strlen>
 80142f0:	4603      	mov	r3, r0
 80142f2:	461a      	mov	r2, r3
 80142f4:	4b5e      	ldr	r3, [pc, #376]	; (8014470 <log_save+0x25c>)
 80142f6:	4413      	add	r3, r2
 80142f8:	4969      	ldr	r1, [pc, #420]	; (80144a0 <log_save+0x28c>)
 80142fa:	461a      	mov	r2, r3
 80142fc:	460b      	mov	r3, r1
 80142fe:	cb03      	ldmia	r3!, {r0, r1}
 8014300:	6010      	str	r0, [r2, #0]
 8014302:	6051      	str	r1, [r2, #4]
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	7213      	strb	r3, [r2, #8]
 8014308:	4b59      	ldr	r3, [pc, #356]	; (8014470 <log_save+0x25c>)
 801430a:	4619      	mov	r1, r3
 801430c:	485a      	ldr	r0, [pc, #360]	; (8014478 <log_save+0x264>)
 801430e:	f005 fb33 	bl	8019978 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8014312:	495a      	ldr	r1, [pc, #360]	; (801447c <log_save+0x268>)
 8014314:	4856      	ldr	r0, [pc, #344]	; (8014470 <log_save+0x25c>)
 8014316:	f005 fb2f 	bl	8019978 <siprintf>
		SD_writeToFile(openedPath, imuBuffer);
 801431a:	4962      	ldr	r1, [pc, #392]	; (80144a4 <log_save+0x290>)
 801431c:	4856      	ldr	r0, [pc, #344]	; (8014478 <log_save+0x264>)
 801431e:	f7ec ffff 	bl	8001320 <SD_writeToFile>
	}

	if (motBufferIndex > 0)
 8014322:	4b61      	ldr	r3, [pc, #388]	; (80144a8 <log_save+0x294>)
 8014324:	881b      	ldrh	r3, [r3, #0]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d01b      	beq.n	8014362 <log_save+0x14e>
	{
		sprintf(openedPath, strcat(directoryName, "/MOT.TXT"));
 801432a:	4851      	ldr	r0, [pc, #324]	; (8014470 <log_save+0x25c>)
 801432c:	f7eb ff5a 	bl	80001e4 <strlen>
 8014330:	4603      	mov	r3, r0
 8014332:	461a      	mov	r2, r3
 8014334:	4b4e      	ldr	r3, [pc, #312]	; (8014470 <log_save+0x25c>)
 8014336:	4413      	add	r3, r2
 8014338:	495c      	ldr	r1, [pc, #368]	; (80144ac <log_save+0x298>)
 801433a:	461a      	mov	r2, r3
 801433c:	460b      	mov	r3, r1
 801433e:	cb03      	ldmia	r3!, {r0, r1}
 8014340:	6010      	str	r0, [r2, #0]
 8014342:	6051      	str	r1, [r2, #4]
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	7213      	strb	r3, [r2, #8]
 8014348:	4b49      	ldr	r3, [pc, #292]	; (8014470 <log_save+0x25c>)
 801434a:	4619      	mov	r1, r3
 801434c:	484a      	ldr	r0, [pc, #296]	; (8014478 <log_save+0x264>)
 801434e:	f005 fb13 	bl	8019978 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8014352:	494a      	ldr	r1, [pc, #296]	; (801447c <log_save+0x268>)
 8014354:	4846      	ldr	r0, [pc, #280]	; (8014470 <log_save+0x25c>)
 8014356:	f005 fb0f 	bl	8019978 <siprintf>
		SD_writeToFile(openedPath, motBuffer);
 801435a:	4955      	ldr	r1, [pc, #340]	; (80144b0 <log_save+0x29c>)
 801435c:	4846      	ldr	r0, [pc, #280]	; (8014478 <log_save+0x264>)
 801435e:	f7ec ffdf 	bl	8001320 <SD_writeToFile>
	}

	if (radioBufferIndex > 0)
 8014362:	4b54      	ldr	r3, [pc, #336]	; (80144b4 <log_save+0x2a0>)
 8014364:	881b      	ldrh	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d01d      	beq.n	80143a6 <log_save+0x192>
	{
		sprintf(openedPath, strcat(directoryName, "/RADIO.TXT"));
 801436a:	4841      	ldr	r0, [pc, #260]	; (8014470 <log_save+0x25c>)
 801436c:	f7eb ff3a 	bl	80001e4 <strlen>
 8014370:	4603      	mov	r3, r0
 8014372:	461a      	mov	r2, r3
 8014374:	4b3e      	ldr	r3, [pc, #248]	; (8014470 <log_save+0x25c>)
 8014376:	4413      	add	r3, r2
 8014378:	494f      	ldr	r1, [pc, #316]	; (80144b8 <log_save+0x2a4>)
 801437a:	461a      	mov	r2, r3
 801437c:	460b      	mov	r3, r1
 801437e:	cb03      	ldmia	r3!, {r0, r1}
 8014380:	6010      	str	r0, [r2, #0]
 8014382:	6051      	str	r1, [r2, #4]
 8014384:	8819      	ldrh	r1, [r3, #0]
 8014386:	789b      	ldrb	r3, [r3, #2]
 8014388:	8111      	strh	r1, [r2, #8]
 801438a:	7293      	strb	r3, [r2, #10]
 801438c:	4b38      	ldr	r3, [pc, #224]	; (8014470 <log_save+0x25c>)
 801438e:	4619      	mov	r1, r3
 8014390:	4839      	ldr	r0, [pc, #228]	; (8014478 <log_save+0x264>)
 8014392:	f005 faf1 	bl	8019978 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8014396:	4939      	ldr	r1, [pc, #228]	; (801447c <log_save+0x268>)
 8014398:	4835      	ldr	r0, [pc, #212]	; (8014470 <log_save+0x25c>)
 801439a:	f005 faed 	bl	8019978 <siprintf>
		SD_writeToFile(openedPath, radioBuffer);
 801439e:	4947      	ldr	r1, [pc, #284]	; (80144bc <log_save+0x2a8>)
 80143a0:	4835      	ldr	r0, [pc, #212]	; (8014478 <log_save+0x264>)
 80143a2:	f7ec ffbd 	bl	8001320 <SD_writeToFile>
	}

	if (spsBufferIndex > 0)
 80143a6:	4b46      	ldr	r3, [pc, #280]	; (80144c0 <log_save+0x2ac>)
 80143a8:	881b      	ldrh	r3, [r3, #0]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d01b      	beq.n	80143e6 <log_save+0x1d2>
	{
		sprintf(openedPath, strcat(directoryName, "/SPS.TXT"));
 80143ae:	4830      	ldr	r0, [pc, #192]	; (8014470 <log_save+0x25c>)
 80143b0:	f7eb ff18 	bl	80001e4 <strlen>
 80143b4:	4603      	mov	r3, r0
 80143b6:	461a      	mov	r2, r3
 80143b8:	4b2d      	ldr	r3, [pc, #180]	; (8014470 <log_save+0x25c>)
 80143ba:	4413      	add	r3, r2
 80143bc:	4941      	ldr	r1, [pc, #260]	; (80144c4 <log_save+0x2b0>)
 80143be:	461a      	mov	r2, r3
 80143c0:	460b      	mov	r3, r1
 80143c2:	cb03      	ldmia	r3!, {r0, r1}
 80143c4:	6010      	str	r0, [r2, #0]
 80143c6:	6051      	str	r1, [r2, #4]
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	7213      	strb	r3, [r2, #8]
 80143cc:	4b28      	ldr	r3, [pc, #160]	; (8014470 <log_save+0x25c>)
 80143ce:	4619      	mov	r1, r3
 80143d0:	4829      	ldr	r0, [pc, #164]	; (8014478 <log_save+0x264>)
 80143d2:	f005 fad1 	bl	8019978 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 80143d6:	4929      	ldr	r1, [pc, #164]	; (801447c <log_save+0x268>)
 80143d8:	4825      	ldr	r0, [pc, #148]	; (8014470 <log_save+0x25c>)
 80143da:	f005 facd 	bl	8019978 <siprintf>
		SD_writeToFile(openedPath, spsBuffer);
 80143de:	493a      	ldr	r1, [pc, #232]	; (80144c8 <log_save+0x2b4>)
 80143e0:	4825      	ldr	r0, [pc, #148]	; (8014478 <log_save+0x264>)
 80143e2:	f7ec ff9d 	bl	8001320 <SD_writeToFile>
	#if LOGING_DEBUG
		println("[LOGING] Buffers saved, took: %ums, ", millis() - lastLogSave);
		println("%d/4096 %d/1024 %d/1024 %d/1024 %d/1024 %d/4096 %d/2048", logBufferIndex, bmpBufferIndex, gpsBufferIndex, imuBufferIndex, motBufferIndex, radioBufferIndex, spsBufferIndex);
	#endif

	logBufferIndex = 0;
 80143e6:	4b21      	ldr	r3, [pc, #132]	; (801446c <log_save+0x258>)
 80143e8:	2200      	movs	r2, #0
 80143ea:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 80143ec:	4b25      	ldr	r3, [pc, #148]	; (8014484 <log_save+0x270>)
 80143ee:	2200      	movs	r2, #0
 80143f0:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 80143f2:	4b27      	ldr	r3, [pc, #156]	; (8014490 <log_save+0x27c>)
 80143f4:	2200      	movs	r2, #0
 80143f6:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 80143f8:	4b28      	ldr	r3, [pc, #160]	; (801449c <log_save+0x288>)
 80143fa:	2200      	movs	r2, #0
 80143fc:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 80143fe:	4b2a      	ldr	r3, [pc, #168]	; (80144a8 <log_save+0x294>)
 8014400:	2200      	movs	r2, #0
 8014402:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 8014404:	4b2b      	ldr	r3, [pc, #172]	; (80144b4 <log_save+0x2a0>)
 8014406:	2200      	movs	r2, #0
 8014408:	801a      	strh	r2, [r3, #0]
	spsBufferIndex = 0;
 801440a:	4b2d      	ldr	r3, [pc, #180]	; (80144c0 <log_save+0x2ac>)
 801440c:	2200      	movs	r2, #0
 801440e:	801a      	strh	r2, [r3, #0]
	memset(logBuffer, 0x00, 4096);
 8014410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014414:	2100      	movs	r1, #0
 8014416:	481a      	ldr	r0, [pc, #104]	; (8014480 <log_save+0x26c>)
 8014418:	f004 fba9 	bl	8018b6e <memset>
	memset(bmpBuffer, 0x00, 1024);
 801441c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014420:	2100      	movs	r1, #0
 8014422:	481a      	ldr	r0, [pc, #104]	; (801448c <log_save+0x278>)
 8014424:	f004 fba3 	bl	8018b6e <memset>
	memset(gpsBuffer, 0x00, 1024);
 8014428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801442c:	2100      	movs	r1, #0
 801442e:	481a      	ldr	r0, [pc, #104]	; (8014498 <log_save+0x284>)
 8014430:	f004 fb9d 	bl	8018b6e <memset>
	memset(imuBuffer, 0x00, 1024);
 8014434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014438:	2100      	movs	r1, #0
 801443a:	481a      	ldr	r0, [pc, #104]	; (80144a4 <log_save+0x290>)
 801443c:	f004 fb97 	bl	8018b6e <memset>
	memset(motBuffer, 0x00, 1024);
 8014440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014444:	2100      	movs	r1, #0
 8014446:	481a      	ldr	r0, [pc, #104]	; (80144b0 <log_save+0x29c>)
 8014448:	f004 fb91 	bl	8018b6e <memset>
	memset(radioBuffer, 0x00, 4096);
 801444c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014450:	2100      	movs	r1, #0
 8014452:	481a      	ldr	r0, [pc, #104]	; (80144bc <log_save+0x2a8>)
 8014454:	f004 fb8b 	bl	8018b6e <memset>
	memset(spsBuffer, 0x00, 2048);
 8014458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801445c:	2100      	movs	r1, #0
 801445e:	481a      	ldr	r0, [pc, #104]	; (80144c8 <log_save+0x2b4>)
 8014460:	f004 fb85 	bl	8018b6e <memset>
}
 8014464:	bf00      	nop
 8014466:	bd80      	pop	{r7, pc}
 8014468:	20007970 	.word	0x20007970
 801446c:	20007978 	.word	0x20007978
 8014470:	20007948 	.word	0x20007948
 8014474:	0801fa98 	.word	0x0801fa98
 8014478:	200050f4 	.word	0x200050f4
 801447c:	20004cd4 	.word	0x20004cd4
 8014480:	20006948 	.word	0x20006948
 8014484:	20007974 	.word	0x20007974
 8014488:	0801faa4 	.word	0x0801faa4
 801448c:	20007984 	.word	0x20007984
 8014490:	20005944 	.word	0x20005944
 8014494:	0801fab0 	.word	0x0801fab0
 8014498:	20004cf4 	.word	0x20004cf4
 801449c:	2000797c 	.word	0x2000797c
 80144a0:	0801fabc 	.word	0x0801fabc
 80144a4:	20005544 	.word	0x20005544
 80144a8:	20005540 	.word	0x20005540
 80144ac:	0801fac8 	.word	0x0801fac8
 80144b0:	20005118 	.word	0x20005118
 80144b4:	20005518 	.word	0x20005518
 80144b8:	0801fad4 	.word	0x0801fad4
 80144bc:	20003cd4 	.word	0x20003cd4
 80144c0:	20007976 	.word	0x20007976
 80144c4:	0801fae0 	.word	0x0801fae0
 80144c8:	20007d84 	.word	0x20007d84

080144cc <log_print>:

static void log_print(const char* format, ...)
{
 80144cc:	b40f      	push	{r0, r1, r2, r3}
 80144ce:	b580      	push	{r7, lr}
 80144d0:	b082      	sub	sp, #8
 80144d2:	af00      	add	r7, sp, #0
	if (logBufferIndex < 3700)
 80144d4:	4b18      	ldr	r3, [pc, #96]	; (8014538 <log_print+0x6c>)
 80144d6:	881b      	ldrh	r3, [r3, #0]
 80144d8:	f640 6273 	movw	r2, #3699	; 0xe73
 80144dc:	4293      	cmp	r3, r2
 80144de:	d824      	bhi.n	801452a <log_print+0x5e>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 80144e0:	f7ff fca6 	bl	8013e30 <millis>
 80144e4:	4603      	mov	r3, r0
 80144e6:	461a      	mov	r2, r3
 80144e8:	4914      	ldr	r1, [pc, #80]	; (801453c <log_print+0x70>)
 80144ea:	4815      	ldr	r0, [pc, #84]	; (8014540 <log_print+0x74>)
 80144ec:	f005 fa44 	bl	8019978 <siprintf>

		va_list argptr;
		va_start(argptr, format);
 80144f0:	f107 0314 	add.w	r3, r7, #20
 80144f4:	607b      	str	r3, [r7, #4]
		vsprintf(tempBuffer, format, argptr);
 80144f6:	687a      	ldr	r2, [r7, #4]
 80144f8:	6939      	ldr	r1, [r7, #16]
 80144fa:	4812      	ldr	r0, [pc, #72]	; (8014544 <log_print+0x78>)
 80144fc:	f006 f996 	bl	801a82c <vsiprintf>
		va_end(argptr);

		strcat(logBuffer, tempBuffer);
 8014500:	4910      	ldr	r1, [pc, #64]	; (8014544 <log_print+0x78>)
 8014502:	4811      	ldr	r0, [pc, #68]	; (8014548 <log_print+0x7c>)
 8014504:	f005 fa58 	bl	80199b8 <strcat>
		strcat(logBuffer, timestamp);
 8014508:	490d      	ldr	r1, [pc, #52]	; (8014540 <log_print+0x74>)
 801450a:	480f      	ldr	r0, [pc, #60]	; (8014548 <log_print+0x7c>)
 801450c:	f005 fa54 	bl	80199b8 <strcat>
		logBufferIndex = strlen(logBuffer);
 8014510:	480d      	ldr	r0, [pc, #52]	; (8014548 <log_print+0x7c>)
 8014512:	f7eb fe67 	bl	80001e4 <strlen>
 8014516:	4603      	mov	r3, r0
 8014518:	b29a      	uxth	r2, r3
 801451a:	4b07      	ldr	r3, [pc, #28]	; (8014538 <log_print+0x6c>)
 801451c:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 801451e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014522:	2100      	movs	r1, #0
 8014524:	4807      	ldr	r0, [pc, #28]	; (8014544 <log_print+0x78>)
 8014526:	f004 fb22 	bl	8018b6e <memset>
	}
}
 801452a:	bf00      	nop
 801452c:	3708      	adds	r7, #8
 801452e:	46bd      	mov	sp, r7
 8014530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014534:	b004      	add	sp, #16
 8014536:	4770      	bx	lr
 8014538:	20007978 	.word	0x20007978
 801453c:	0801faec 	.word	0x0801faec
 8014540:	20005520 	.word	0x20005520
 8014544:	20005948 	.word	0x20005948
 8014548:	20006948 	.word	0x20006948

0801454c <log_bmp>:

static void log_bmp(BMP280* bmp)
{
 801454c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801454e:	b085      	sub	sp, #20
 8014550:	af02      	add	r7, sp, #8
 8014552:	6078      	str	r0, [r7, #4]
	if (bmpBufferIndex < 950)
 8014554:	4b1e      	ldr	r3, [pc, #120]	; (80145d0 <log_bmp+0x84>)
 8014556:	881b      	ldrh	r3, [r3, #0]
 8014558:	f240 32b5 	movw	r2, #949	; 0x3b5
 801455c:	4293      	cmp	r3, r2
 801455e:	d832      	bhi.n	80145c6 <log_bmp+0x7a>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8014560:	f7ff fc66 	bl	8013e30 <millis>
 8014564:	4603      	mov	r3, r0
 8014566:	461a      	mov	r2, r3
 8014568:	491a      	ldr	r1, [pc, #104]	; (80145d4 <log_bmp+0x88>)
 801456a:	481b      	ldr	r0, [pc, #108]	; (80145d8 <log_bmp+0x8c>)
 801456c:	f005 fa04 	bl	8019978 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f", bmp->pressure, bmp->temperature);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	68db      	ldr	r3, [r3, #12]
 8014574:	4618      	mov	r0, r3
 8014576:	f7eb fff7 	bl	8000568 <__aeabi_f2d>
 801457a:	4605      	mov	r5, r0
 801457c:	460e      	mov	r6, r1
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	691b      	ldr	r3, [r3, #16]
 8014582:	4618      	mov	r0, r3
 8014584:	f7eb fff0 	bl	8000568 <__aeabi_f2d>
 8014588:	4603      	mov	r3, r0
 801458a:	460c      	mov	r4, r1
 801458c:	e9cd 3400 	strd	r3, r4, [sp]
 8014590:	462a      	mov	r2, r5
 8014592:	4633      	mov	r3, r6
 8014594:	4911      	ldr	r1, [pc, #68]	; (80145dc <log_bmp+0x90>)
 8014596:	4812      	ldr	r0, [pc, #72]	; (80145e0 <log_bmp+0x94>)
 8014598:	f005 f9ee 	bl	8019978 <siprintf>
		strcat(tempBuffer, timestamp);
 801459c:	490e      	ldr	r1, [pc, #56]	; (80145d8 <log_bmp+0x8c>)
 801459e:	4810      	ldr	r0, [pc, #64]	; (80145e0 <log_bmp+0x94>)
 80145a0:	f005 fa0a 	bl	80199b8 <strcat>
		strcat(bmpBuffer, tempBuffer);
 80145a4:	490e      	ldr	r1, [pc, #56]	; (80145e0 <log_bmp+0x94>)
 80145a6:	480f      	ldr	r0, [pc, #60]	; (80145e4 <log_bmp+0x98>)
 80145a8:	f005 fa06 	bl	80199b8 <strcat>
		bmpBufferIndex = strlen(bmpBuffer);
 80145ac:	480d      	ldr	r0, [pc, #52]	; (80145e4 <log_bmp+0x98>)
 80145ae:	f7eb fe19 	bl	80001e4 <strlen>
 80145b2:	4603      	mov	r3, r0
 80145b4:	b29a      	uxth	r2, r3
 80145b6:	4b06      	ldr	r3, [pc, #24]	; (80145d0 <log_bmp+0x84>)
 80145b8:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 80145ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80145be:	2100      	movs	r1, #0
 80145c0:	4807      	ldr	r0, [pc, #28]	; (80145e0 <log_bmp+0x94>)
 80145c2:	f004 fad4 	bl	8018b6e <memset>
	}
}
 80145c6:	bf00      	nop
 80145c8:	370c      	adds	r7, #12
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145ce:	bf00      	nop
 80145d0:	20007974 	.word	0x20007974
 80145d4:	0801faec 	.word	0x0801faec
 80145d8:	20005520 	.word	0x20005520
 80145dc:	0801faf4 	.word	0x0801faf4
 80145e0:	20005948 	.word	0x20005948
 80145e4:	20007984 	.word	0x20007984

080145e8 <log_gps>:
static void log_gps(GPS* gps)
{
 80145e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145ec:	b08f      	sub	sp, #60	; 0x3c
 80145ee:	af0a      	add	r7, sp, #40	; 0x28
 80145f0:	60f8      	str	r0, [r7, #12]
	if (gpsBufferIndex < 950)
 80145f2:	4b33      	ldr	r3, [pc, #204]	; (80146c0 <log_gps+0xd8>)
 80145f4:	881b      	ldrh	r3, [r3, #0]
 80145f6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80145fa:	4293      	cmp	r3, r2
 80145fc:	d85b      	bhi.n	80146b6 <log_gps+0xce>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 80145fe:	f7ff fc17 	bl	8013e30 <millis>
 8014602:	4603      	mov	r3, r0
 8014604:	461a      	mov	r2, r3
 8014606:	492f      	ldr	r1, [pc, #188]	; (80146c4 <log_gps+0xdc>)
 8014608:	482f      	ldr	r0, [pc, #188]	; (80146c8 <log_gps+0xe0>)
 801460a:	f005 f9b5 	bl	8019978 <siprintf>
		sprintf(tempBuffer, "%.07f %.07f %.01f %.2d-%.2d-20%.2d %.2d:%.2d:%.2d",
				gps->latitudeDegrees, gps->longitudeDegrees, gps->altitude,
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
		sprintf(tempBuffer, "%.07f %.07f %.01f %.2d-%.2d-20%.2d %.2d:%.2d:%.2d",
 8014612:	4618      	mov	r0, r3
 8014614:	f7eb ffa8 	bl	8000568 <__aeabi_f2d>
 8014618:	4680      	mov	r8, r0
 801461a:	4689      	mov	r9, r1
				gps->latitudeDegrees, gps->longitudeDegrees, gps->altitude,
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
		sprintf(tempBuffer, "%.07f %.07f %.01f %.2d-%.2d-20%.2d %.2d:%.2d:%.2d",
 8014620:	4618      	mov	r0, r3
 8014622:	f7eb ffa1 	bl	8000568 <__aeabi_f2d>
 8014626:	4604      	mov	r4, r0
 8014628:	460d      	mov	r5, r1
				gps->latitudeDegrees, gps->longitudeDegrees, gps->altitude,
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		sprintf(tempBuffer, "%.07f %.07f %.01f %.2d-%.2d-20%.2d %.2d:%.2d:%.2d",
 801462e:	4618      	mov	r0, r3
 8014630:	f7eb ff9a 	bl	8000568 <__aeabi_f2d>
 8014634:	4602      	mov	r2, r0
 8014636:	460b      	mov	r3, r1
				gps->gpsTime.dayM, gps->gpsTime.month, gps->gpsTime.year,
 8014638:	68f9      	ldr	r1, [r7, #12]
 801463a:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
		sprintf(tempBuffer, "%.07f %.07f %.01f %.2d-%.2d-20%.2d %.2d:%.2d:%.2d",
 801463e:	4608      	mov	r0, r1
				gps->gpsTime.dayM, gps->gpsTime.month, gps->gpsTime.year,
 8014640:	68f9      	ldr	r1, [r7, #12]
 8014642:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
		sprintf(tempBuffer, "%.07f %.07f %.01f %.2d-%.2d-20%.2d %.2d:%.2d:%.2d",
 8014646:	460e      	mov	r6, r1
				gps->gpsTime.dayM, gps->gpsTime.month, gps->gpsTime.year,
 8014648:	68f9      	ldr	r1, [r7, #12]
 801464a:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
		sprintf(tempBuffer, "%.07f %.07f %.01f %.2d-%.2d-20%.2d %.2d:%.2d:%.2d",
 801464e:	60b9      	str	r1, [r7, #8]
				gps->gpsTime.hour, gps->gpsTime.minute, gps->gpsTime.second);
 8014650:	68f9      	ldr	r1, [r7, #12]
 8014652:	f891 1036 	ldrb.w	r1, [r1, #54]	; 0x36
		sprintf(tempBuffer, "%.07f %.07f %.01f %.2d-%.2d-20%.2d %.2d:%.2d:%.2d",
 8014656:	6079      	str	r1, [r7, #4]
				gps->gpsTime.hour, gps->gpsTime.minute, gps->gpsTime.second);
 8014658:	68f9      	ldr	r1, [r7, #12]
 801465a:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
		sprintf(tempBuffer, "%.07f %.07f %.01f %.2d-%.2d-20%.2d %.2d:%.2d:%.2d",
 801465e:	6039      	str	r1, [r7, #0]
				gps->gpsTime.hour, gps->gpsTime.minute, gps->gpsTime.second);
 8014660:	68f9      	ldr	r1, [r7, #12]
 8014662:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
		sprintf(tempBuffer, "%.07f %.07f %.01f %.2d-%.2d-20%.2d %.2d:%.2d:%.2d",
 8014666:	9109      	str	r1, [sp, #36]	; 0x24
 8014668:	6839      	ldr	r1, [r7, #0]
 801466a:	9108      	str	r1, [sp, #32]
 801466c:	6879      	ldr	r1, [r7, #4]
 801466e:	9107      	str	r1, [sp, #28]
 8014670:	68b9      	ldr	r1, [r7, #8]
 8014672:	9106      	str	r1, [sp, #24]
 8014674:	9605      	str	r6, [sp, #20]
 8014676:	9004      	str	r0, [sp, #16]
 8014678:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801467c:	e9cd 4500 	strd	r4, r5, [sp]
 8014680:	4642      	mov	r2, r8
 8014682:	464b      	mov	r3, r9
 8014684:	4911      	ldr	r1, [pc, #68]	; (80146cc <log_gps+0xe4>)
 8014686:	4812      	ldr	r0, [pc, #72]	; (80146d0 <log_gps+0xe8>)
 8014688:	f005 f976 	bl	8019978 <siprintf>
		strcat(tempBuffer, timestamp);
 801468c:	490e      	ldr	r1, [pc, #56]	; (80146c8 <log_gps+0xe0>)
 801468e:	4810      	ldr	r0, [pc, #64]	; (80146d0 <log_gps+0xe8>)
 8014690:	f005 f992 	bl	80199b8 <strcat>
		strcat(gpsBuffer, tempBuffer);
 8014694:	490e      	ldr	r1, [pc, #56]	; (80146d0 <log_gps+0xe8>)
 8014696:	480f      	ldr	r0, [pc, #60]	; (80146d4 <log_gps+0xec>)
 8014698:	f005 f98e 	bl	80199b8 <strcat>
		gpsBufferIndex = strlen(gpsBuffer);
 801469c:	480d      	ldr	r0, [pc, #52]	; (80146d4 <log_gps+0xec>)
 801469e:	f7eb fda1 	bl	80001e4 <strlen>
 80146a2:	4603      	mov	r3, r0
 80146a4:	b29a      	uxth	r2, r3
 80146a6:	4b06      	ldr	r3, [pc, #24]	; (80146c0 <log_gps+0xd8>)
 80146a8:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 80146aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80146ae:	2100      	movs	r1, #0
 80146b0:	4807      	ldr	r0, [pc, #28]	; (80146d0 <log_gps+0xe8>)
 80146b2:	f004 fa5c 	bl	8018b6e <memset>
	}
}
 80146b6:	bf00      	nop
 80146b8:	3714      	adds	r7, #20
 80146ba:	46bd      	mov	sp, r7
 80146bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146c0:	20005944 	.word	0x20005944
 80146c4:	0801faec 	.word	0x0801faec
 80146c8:	20005520 	.word	0x20005520
 80146cc:	0801fb00 	.word	0x0801fb00
 80146d0:	20005948 	.word	0x20005948
 80146d4:	20004cf4 	.word	0x20004cf4

080146d8 <log_imu>:
static void log_imu(MPU9250* mpu)
{
 80146d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80146dc:	b086      	sub	sp, #24
 80146de:	af04      	add	r7, sp, #16
 80146e0:	6078      	str	r0, [r7, #4]
	if (imuBufferIndex < 950)
 80146e2:	4b23      	ldr	r3, [pc, #140]	; (8014770 <log_imu+0x98>)
 80146e4:	881b      	ldrh	r3, [r3, #0]
 80146e6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80146ea:	4293      	cmp	r3, r2
 80146ec:	d83b      	bhi.n	8014766 <log_imu+0x8e>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 80146ee:	f7ff fb9f 	bl	8013e30 <millis>
 80146f2:	4603      	mov	r3, r0
 80146f4:	461a      	mov	r2, r3
 80146f6:	491f      	ldr	r1, [pc, #124]	; (8014774 <log_imu+0x9c>)
 80146f8:	481f      	ldr	r0, [pc, #124]	; (8014778 <log_imu+0xa0>)
 80146fa:	f005 f93d 	bl	8019978 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f %.02f", mpu->yaw, mpu->pitch, mpu->roll);
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	68db      	ldr	r3, [r3, #12]
 8014702:	4618      	mov	r0, r3
 8014704:	f7eb ff30 	bl	8000568 <__aeabi_f2d>
 8014708:	4680      	mov	r8, r0
 801470a:	4689      	mov	r9, r1
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	691b      	ldr	r3, [r3, #16]
 8014710:	4618      	mov	r0, r3
 8014712:	f7eb ff29 	bl	8000568 <__aeabi_f2d>
 8014716:	4604      	mov	r4, r0
 8014718:	460d      	mov	r5, r1
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	695b      	ldr	r3, [r3, #20]
 801471e:	4618      	mov	r0, r3
 8014720:	f7eb ff22 	bl	8000568 <__aeabi_f2d>
 8014724:	4602      	mov	r2, r0
 8014726:	460b      	mov	r3, r1
 8014728:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801472c:	e9cd 4500 	strd	r4, r5, [sp]
 8014730:	4642      	mov	r2, r8
 8014732:	464b      	mov	r3, r9
 8014734:	4911      	ldr	r1, [pc, #68]	; (801477c <log_imu+0xa4>)
 8014736:	4812      	ldr	r0, [pc, #72]	; (8014780 <log_imu+0xa8>)
 8014738:	f005 f91e 	bl	8019978 <siprintf>
		strcat(tempBuffer, timestamp);
 801473c:	490e      	ldr	r1, [pc, #56]	; (8014778 <log_imu+0xa0>)
 801473e:	4810      	ldr	r0, [pc, #64]	; (8014780 <log_imu+0xa8>)
 8014740:	f005 f93a 	bl	80199b8 <strcat>
		strcat(imuBuffer, tempBuffer);
 8014744:	490e      	ldr	r1, [pc, #56]	; (8014780 <log_imu+0xa8>)
 8014746:	480f      	ldr	r0, [pc, #60]	; (8014784 <log_imu+0xac>)
 8014748:	f005 f936 	bl	80199b8 <strcat>
		imuBufferIndex = strlen(imuBuffer);
 801474c:	480d      	ldr	r0, [pc, #52]	; (8014784 <log_imu+0xac>)
 801474e:	f7eb fd49 	bl	80001e4 <strlen>
 8014752:	4603      	mov	r3, r0
 8014754:	b29a      	uxth	r2, r3
 8014756:	4b06      	ldr	r3, [pc, #24]	; (8014770 <log_imu+0x98>)
 8014758:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 801475a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801475e:	2100      	movs	r1, #0
 8014760:	4807      	ldr	r0, [pc, #28]	; (8014780 <log_imu+0xa8>)
 8014762:	f004 fa04 	bl	8018b6e <memset>
	}
}
 8014766:	bf00      	nop
 8014768:	3708      	adds	r7, #8
 801476a:	46bd      	mov	sp, r7
 801476c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014770:	2000797c 	.word	0x2000797c
 8014774:	0801faec 	.word	0x0801faec
 8014778:	20005520 	.word	0x20005520
 801477c:	0801fb34 	.word	0x0801fb34
 8014780:	20005948 	.word	0x20005948
 8014784:	20005544 	.word	0x20005544

08014788 <log_mot>:
static void log_mot(float left, float right)
{
 8014788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801478a:	b085      	sub	sp, #20
 801478c:	af02      	add	r7, sp, #8
 801478e:	ed87 0a01 	vstr	s0, [r7, #4]
 8014792:	edc7 0a00 	vstr	s1, [r7]
	if (motBufferIndex < 950)
 8014796:	4b1c      	ldr	r3, [pc, #112]	; (8014808 <log_mot+0x80>)
 8014798:	881b      	ldrh	r3, [r3, #0]
 801479a:	f240 32b5 	movw	r2, #949	; 0x3b5
 801479e:	4293      	cmp	r3, r2
 80147a0:	d82e      	bhi.n	8014800 <log_mot+0x78>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 80147a2:	f7ff fb45 	bl	8013e30 <millis>
 80147a6:	4603      	mov	r3, r0
 80147a8:	461a      	mov	r2, r3
 80147aa:	4918      	ldr	r1, [pc, #96]	; (801480c <log_mot+0x84>)
 80147ac:	4818      	ldr	r0, [pc, #96]	; (8014810 <log_mot+0x88>)
 80147ae:	f005 f8e3 	bl	8019978 <siprintf>
		sprintf(tempBuffer, "%.01f %.01f", left, right);
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f7eb fed8 	bl	8000568 <__aeabi_f2d>
 80147b8:	4605      	mov	r5, r0
 80147ba:	460e      	mov	r6, r1
 80147bc:	6838      	ldr	r0, [r7, #0]
 80147be:	f7eb fed3 	bl	8000568 <__aeabi_f2d>
 80147c2:	4603      	mov	r3, r0
 80147c4:	460c      	mov	r4, r1
 80147c6:	e9cd 3400 	strd	r3, r4, [sp]
 80147ca:	462a      	mov	r2, r5
 80147cc:	4633      	mov	r3, r6
 80147ce:	4911      	ldr	r1, [pc, #68]	; (8014814 <log_mot+0x8c>)
 80147d0:	4811      	ldr	r0, [pc, #68]	; (8014818 <log_mot+0x90>)
 80147d2:	f005 f8d1 	bl	8019978 <siprintf>
		strcat(tempBuffer, timestamp);
 80147d6:	490e      	ldr	r1, [pc, #56]	; (8014810 <log_mot+0x88>)
 80147d8:	480f      	ldr	r0, [pc, #60]	; (8014818 <log_mot+0x90>)
 80147da:	f005 f8ed 	bl	80199b8 <strcat>
		strcat(motBuffer, tempBuffer);
 80147de:	490e      	ldr	r1, [pc, #56]	; (8014818 <log_mot+0x90>)
 80147e0:	480e      	ldr	r0, [pc, #56]	; (801481c <log_mot+0x94>)
 80147e2:	f005 f8e9 	bl	80199b8 <strcat>
		motBufferIndex = strlen(motBuffer);
 80147e6:	480d      	ldr	r0, [pc, #52]	; (801481c <log_mot+0x94>)
 80147e8:	f7eb fcfc 	bl	80001e4 <strlen>
 80147ec:	4603      	mov	r3, r0
 80147ee:	b29a      	uxth	r2, r3
 80147f0:	4b05      	ldr	r3, [pc, #20]	; (8014808 <log_mot+0x80>)
 80147f2:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 80147f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80147f8:	2100      	movs	r1, #0
 80147fa:	4807      	ldr	r0, [pc, #28]	; (8014818 <log_mot+0x90>)
 80147fc:	f004 f9b7 	bl	8018b6e <memset>
	}
}
 8014800:	bf00      	nop
 8014802:	370c      	adds	r7, #12
 8014804:	46bd      	mov	sp, r7
 8014806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014808:	20005540 	.word	0x20005540
 801480c:	0801faec 	.word	0x0801faec
 8014810:	20005520 	.word	0x20005520
 8014814:	0801fb48 	.word	0x0801fb48
 8014818:	20005948 	.word	0x20005948
 801481c:	20005118 	.word	0x20005118

08014820 <log_radio>:
static void log_radio(SX1278* radio)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
	if (radioBufferIndex < 3700)
 8014828:	4b32      	ldr	r3, [pc, #200]	; (80148f4 <log_radio+0xd4>)
 801482a:	881b      	ldrh	r3, [r3, #0]
 801482c:	f640 6273 	movw	r2, #3699	; 0xe73
 8014830:	4293      	cmp	r3, r2
 8014832:	d85a      	bhi.n	80148ea <log_radio+0xca>
	{
		sprintf(timestamp, "]\t@%lu\r\n", millis());
 8014834:	f7ff fafc 	bl	8013e30 <millis>
 8014838:	4603      	mov	r3, r0
 801483a:	461a      	mov	r2, r3
 801483c:	492e      	ldr	r1, [pc, #184]	; (80148f8 <log_radio+0xd8>)
 801483e:	482f      	ldr	r0, [pc, #188]	; (80148fc <log_radio+0xdc>)
 8014840:	f005 f89a 	bl	8019978 <siprintf>

		if (radio->newTxData)
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801484a:	2b00      	cmp	r3, #0
 801484c:	d019      	beq.n	8014882 <log_radio+0x62>
		{
			sprintf(tempBuffer, "TX\t[");
 801484e:	4b2c      	ldr	r3, [pc, #176]	; (8014900 <log_radio+0xe0>)
 8014850:	4a2c      	ldr	r2, [pc, #176]	; (8014904 <log_radio+0xe4>)
 8014852:	6810      	ldr	r0, [r2, #0]
 8014854:	6018      	str	r0, [r3, #0]
 8014856:	7912      	ldrb	r2, [r2, #4]
 8014858:	711a      	strb	r2, [r3, #4]
			radio->txBuffer[radio->txLen] = '\0';
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014860:	461a      	mov	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	4413      	add	r3, r2
 8014866:	2200      	movs	r2, #0
 8014868:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
			strcat(tempBuffer, radio->txBuffer);
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8014872:	4619      	mov	r1, r3
 8014874:	4822      	ldr	r0, [pc, #136]	; (8014900 <log_radio+0xe0>)
 8014876:	f005 f89f 	bl	80199b8 <strcat>
			radio->newTxData = false;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2200      	movs	r2, #0
 801487e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		}
		if (radio->newRxData)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014888:	2b00      	cmp	r3, #0
 801488a:	d019      	beq.n	80148c0 <log_radio+0xa0>
		{
			sprintf(tempBuffer, "RX\t%d\t[", radio->rssi);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014890:	461a      	mov	r2, r3
 8014892:	491d      	ldr	r1, [pc, #116]	; (8014908 <log_radio+0xe8>)
 8014894:	481a      	ldr	r0, [pc, #104]	; (8014900 <log_radio+0xe0>)
 8014896:	f005 f86f 	bl	8019978 <siprintf>
			radio->txBuffer[radio->rxLen] = '\0';
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80148a0:	461a      	mov	r2, r3
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	4413      	add	r3, r2
 80148a6:	2200      	movs	r2, #0
 80148a8:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
			strcat(tempBuffer, radio->rxBuffer);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	3348      	adds	r3, #72	; 0x48
 80148b0:	4619      	mov	r1, r3
 80148b2:	4813      	ldr	r0, [pc, #76]	; (8014900 <log_radio+0xe0>)
 80148b4:	f005 f880 	bl	80199b8 <strcat>
			radio->newRxData = false;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	2200      	movs	r2, #0
 80148bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		}

		strcat(tempBuffer, timestamp);
 80148c0:	490e      	ldr	r1, [pc, #56]	; (80148fc <log_radio+0xdc>)
 80148c2:	480f      	ldr	r0, [pc, #60]	; (8014900 <log_radio+0xe0>)
 80148c4:	f005 f878 	bl	80199b8 <strcat>
		strcat(radioBuffer, tempBuffer);
 80148c8:	490d      	ldr	r1, [pc, #52]	; (8014900 <log_radio+0xe0>)
 80148ca:	4810      	ldr	r0, [pc, #64]	; (801490c <log_radio+0xec>)
 80148cc:	f005 f874 	bl	80199b8 <strcat>
		radioBufferIndex = strlen(radioBuffer);
 80148d0:	480e      	ldr	r0, [pc, #56]	; (801490c <log_radio+0xec>)
 80148d2:	f7eb fc87 	bl	80001e4 <strlen>
 80148d6:	4603      	mov	r3, r0
 80148d8:	b29a      	uxth	r2, r3
 80148da:	4b06      	ldr	r3, [pc, #24]	; (80148f4 <log_radio+0xd4>)
 80148dc:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 80148de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80148e2:	2100      	movs	r1, #0
 80148e4:	4806      	ldr	r0, [pc, #24]	; (8014900 <log_radio+0xe0>)
 80148e6:	f004 f942 	bl	8018b6e <memset>
	}
}
 80148ea:	bf00      	nop
 80148ec:	3708      	adds	r7, #8
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	20005518 	.word	0x20005518
 80148f8:	0801fb54 	.word	0x0801fb54
 80148fc:	20005520 	.word	0x20005520
 8014900:	20005948 	.word	0x20005948
 8014904:	0801fb60 	.word	0x0801fb60
 8014908:	0801fb68 	.word	0x0801fb68
 801490c:	20003cd4 	.word	0x20003cd4

08014910 <log_sps>:
static void log_sps(SPS30* sps)
{
 8014910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014914:	b0a1      	sub	sp, #132	; 0x84
 8014916:	af12      	add	r7, sp, #72	; 0x48
 8014918:	6378      	str	r0, [r7, #52]	; 0x34
	if (spsBufferIndex < 1900)
 801491a:	4b48      	ldr	r3, [pc, #288]	; (8014a3c <log_sps+0x12c>)
 801491c:	881b      	ldrh	r3, [r3, #0]
 801491e:	f240 726b 	movw	r2, #1899	; 0x76b
 8014922:	4293      	cmp	r3, r2
 8014924:	f200 8085 	bhi.w	8014a32 <log_sps+0x122>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8014928:	f7ff fa82 	bl	8013e30 <millis>
 801492c:	4603      	mov	r3, r0
 801492e:	461a      	mov	r2, r3
 8014930:	4943      	ldr	r1, [pc, #268]	; (8014a40 <log_sps+0x130>)
 8014932:	4844      	ldr	r0, [pc, #272]	; (8014a44 <log_sps+0x134>)
 8014934:	f005 f820 	bl	8019978 <siprintf>
		sprintf(tempBuffer, "%.1f %.1f %.1f %.1f | %.1f %.1f %.1f %.1f %.1f | %.1f",
							sps->pm1, sps->pm2, sps->pm4, sps->pm10,
 8014938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801493a:	685b      	ldr	r3, [r3, #4]
		sprintf(tempBuffer, "%.1f %.1f %.1f %.1f | %.1f %.1f %.1f %.1f %.1f | %.1f",
 801493c:	4618      	mov	r0, r3
 801493e:	f7eb fe13 	bl	8000568 <__aeabi_f2d>
 8014942:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
							sps->pm1, sps->pm2, sps->pm4, sps->pm10,
 8014946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014948:	689b      	ldr	r3, [r3, #8]
		sprintf(tempBuffer, "%.1f %.1f %.1f %.1f | %.1f %.1f %.1f %.1f %.1f | %.1f",
 801494a:	4618      	mov	r0, r3
 801494c:	f7eb fe0c 	bl	8000568 <__aeabi_f2d>
 8014950:	e9c7 0108 	strd	r0, r1, [r7, #32]
							sps->pm1, sps->pm2, sps->pm4, sps->pm10,
 8014954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014956:	68db      	ldr	r3, [r3, #12]
		sprintf(tempBuffer, "%.1f %.1f %.1f %.1f | %.1f %.1f %.1f %.1f %.1f | %.1f",
 8014958:	4618      	mov	r0, r3
 801495a:	f7eb fe05 	bl	8000568 <__aeabi_f2d>
 801495e:	e9c7 0106 	strd	r0, r1, [r7, #24]
							sps->pm1, sps->pm2, sps->pm4, sps->pm10,
 8014962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014964:	691b      	ldr	r3, [r3, #16]
		sprintf(tempBuffer, "%.1f %.1f %.1f %.1f | %.1f %.1f %.1f %.1f %.1f | %.1f",
 8014966:	4618      	mov	r0, r3
 8014968:	f7eb fdfe 	bl	8000568 <__aeabi_f2d>
 801496c:	e9c7 0104 	strd	r0, r1, [r7, #16]
							sps->n_pm05, sps->n_pm1, sps->n_pm2, sps->n_pm4, sps->n_pm10,
 8014970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014972:	695b      	ldr	r3, [r3, #20]
		sprintf(tempBuffer, "%.1f %.1f %.1f %.1f | %.1f %.1f %.1f %.1f %.1f | %.1f",
 8014974:	4618      	mov	r0, r3
 8014976:	f7eb fdf7 	bl	8000568 <__aeabi_f2d>
 801497a:	e9c7 0102 	strd	r0, r1, [r7, #8]
							sps->n_pm05, sps->n_pm1, sps->n_pm2, sps->n_pm4, sps->n_pm10,
 801497e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014980:	699b      	ldr	r3, [r3, #24]
		sprintf(tempBuffer, "%.1f %.1f %.1f %.1f | %.1f %.1f %.1f %.1f %.1f | %.1f",
 8014982:	4618      	mov	r0, r3
 8014984:	f7eb fdf0 	bl	8000568 <__aeabi_f2d>
 8014988:	e9c7 0100 	strd	r0, r1, [r7]
							sps->n_pm05, sps->n_pm1, sps->n_pm2, sps->n_pm4, sps->n_pm10,
 801498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801498e:	69db      	ldr	r3, [r3, #28]
		sprintf(tempBuffer, "%.1f %.1f %.1f %.1f | %.1f %.1f %.1f %.1f %.1f | %.1f",
 8014990:	4618      	mov	r0, r3
 8014992:	f7eb fde9 	bl	8000568 <__aeabi_f2d>
 8014996:	4682      	mov	sl, r0
 8014998:	468b      	mov	fp, r1
							sps->n_pm05, sps->n_pm1, sps->n_pm2, sps->n_pm4, sps->n_pm10,
 801499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801499c:	6a1b      	ldr	r3, [r3, #32]
		sprintf(tempBuffer, "%.1f %.1f %.1f %.1f | %.1f %.1f %.1f %.1f %.1f | %.1f",
 801499e:	4618      	mov	r0, r3
 80149a0:	f7eb fde2 	bl	8000568 <__aeabi_f2d>
 80149a4:	4680      	mov	r8, r0
 80149a6:	4689      	mov	r9, r1
							sps->n_pm05, sps->n_pm1, sps->n_pm2, sps->n_pm4, sps->n_pm10,
 80149a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		sprintf(tempBuffer, "%.1f %.1f %.1f %.1f | %.1f %.1f %.1f %.1f %.1f | %.1f",
 80149ac:	4618      	mov	r0, r3
 80149ae:	f7eb fddb 	bl	8000568 <__aeabi_f2d>
 80149b2:	4605      	mov	r5, r0
 80149b4:	460e      	mov	r6, r1
							sps->typical_size);
 80149b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		sprintf(tempBuffer, "%.1f %.1f %.1f %.1f | %.1f %.1f %.1f %.1f %.1f | %.1f",
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7eb fdd4 	bl	8000568 <__aeabi_f2d>
 80149c0:	4603      	mov	r3, r0
 80149c2:	460c      	mov	r4, r1
 80149c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80149c8:	e9cd 560e 	strd	r5, r6, [sp, #56]	; 0x38
 80149cc:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80149d0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80149d4:	ed97 7b00 	vldr	d7, [r7]
 80149d8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80149dc:	ed97 7b02 	vldr	d7, [r7, #8]
 80149e0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80149e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80149e8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80149ec:	ed97 7b06 	vldr	d7, [r7, #24]
 80149f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80149f4:	ed97 7b08 	vldr	d7, [r7, #32]
 80149f8:	ed8d 7b00 	vstr	d7, [sp]
 80149fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014a00:	4911      	ldr	r1, [pc, #68]	; (8014a48 <log_sps+0x138>)
 8014a02:	4812      	ldr	r0, [pc, #72]	; (8014a4c <log_sps+0x13c>)
 8014a04:	f004 ffb8 	bl	8019978 <siprintf>
		strcat(tempBuffer, timestamp);
 8014a08:	490e      	ldr	r1, [pc, #56]	; (8014a44 <log_sps+0x134>)
 8014a0a:	4810      	ldr	r0, [pc, #64]	; (8014a4c <log_sps+0x13c>)
 8014a0c:	f004 ffd4 	bl	80199b8 <strcat>
		strcat(spsBuffer, tempBuffer);
 8014a10:	490e      	ldr	r1, [pc, #56]	; (8014a4c <log_sps+0x13c>)
 8014a12:	480f      	ldr	r0, [pc, #60]	; (8014a50 <log_sps+0x140>)
 8014a14:	f004 ffd0 	bl	80199b8 <strcat>
		spsBufferIndex = strlen(spsBuffer);
 8014a18:	480d      	ldr	r0, [pc, #52]	; (8014a50 <log_sps+0x140>)
 8014a1a:	f7eb fbe3 	bl	80001e4 <strlen>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	b29a      	uxth	r2, r3
 8014a22:	4b06      	ldr	r3, [pc, #24]	; (8014a3c <log_sps+0x12c>)
 8014a24:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8014a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014a2a:	2100      	movs	r1, #0
 8014a2c:	4807      	ldr	r0, [pc, #28]	; (8014a4c <log_sps+0x13c>)
 8014a2e:	f004 f89e 	bl	8018b6e <memset>
	}
}
 8014a32:	bf00      	nop
 8014a34:	373c      	adds	r7, #60	; 0x3c
 8014a36:	46bd      	mov	sp, r7
 8014a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a3c:	20007976 	.word	0x20007976
 8014a40:	0801faec 	.word	0x0801faec
 8014a44:	20005520 	.word	0x20005520
 8014a48:	0801fb70 	.word	0x0801fb70
 8014a4c:	20005948 	.word	0x20005948
 8014a50:	20007d84 	.word	0x20007d84

08014a54 <loging_setup>:


static bool loging_setup(void)		// Writes test file to SD card, if successful creates new log folder
{
 8014a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a56:	b091      	sub	sp, #68	; 0x44
 8014a58:	af06      	add	r7, sp, #24
	#if SD_ENABLE
		if (SD_init() == FR_OK)
 8014a5a:	f7ec fbfd 	bl	8001258 <SD_init>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d168      	bne.n	8014b36 <loging_setup+0xe2>
		{
			#if LOGING_DEBUG
				println("[LOGING] SD detected, creating test file");
			#endif
			if (SD_newFile("/TEST.TXT") == FR_OK)
 8014a64:	483b      	ldr	r0, [pc, #236]	; (8014b54 <loging_setup+0x100>)
 8014a66:	f7ec fc33 	bl	80012d0 <SD_newFile>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d164      	bne.n	8014b3a <loging_setup+0xe6>
			{
				bool status = true;
 8014a70:	2301      	movs	r3, #1
 8014a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				status &= (SD_writeToFile("/TEST.TXT", "Created on: ") == FR_OK);
 8014a76:	4938      	ldr	r1, [pc, #224]	; (8014b58 <loging_setup+0x104>)
 8014a78:	4836      	ldr	r0, [pc, #216]	; (8014b54 <loging_setup+0x100>)
 8014a7a:	f7ec fc51 	bl	8001320 <SD_writeToFile>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	bf0c      	ite	eq
 8014a84:	2301      	moveq	r3, #1
 8014a86:	2300      	movne	r3, #0
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	461a      	mov	r2, r3
 8014a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a90:	4013      	ands	r3, r2
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	bf14      	ite	ne
 8014a96:	2301      	movne	r3, #1
 8014a98:	2300      	moveq	r3, #0
 8014a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				DateTime fileCreated = getTime();
 8014a9e:	f107 031c 	add.w	r3, r7, #28
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7ff f9d4 	bl	8013e50 <getTime>
				char dateStr[26] = {0};
 8014aa8:	463b      	mov	r3, r7
 8014aaa:	2200      	movs	r2, #0
 8014aac:	601a      	str	r2, [r3, #0]
 8014aae:	605a      	str	r2, [r3, #4]
 8014ab0:	609a      	str	r2, [r3, #8]
 8014ab2:	60da      	str	r2, [r3, #12]
 8014ab4:	611a      	str	r2, [r3, #16]
 8014ab6:	615a      	str	r2, [r3, #20]
 8014ab8:	831a      	strh	r2, [r3, #24]
				sprintf(dateStr, "%.2d-%.2d-20%.2d %.2d:%.2d:%.2d:%.4d",
						fileCreated.dayM, fileCreated.month, fileCreated.year,
 8014aba:	7fbb      	ldrb	r3, [r7, #30]
				sprintf(dateStr, "%.2d-%.2d-20%.2d %.2d:%.2d:%.2d:%.4d",
 8014abc:	461e      	mov	r6, r3
						fileCreated.dayM, fileCreated.month, fileCreated.year,
 8014abe:	7f7b      	ldrb	r3, [r7, #29]
				sprintf(dateStr, "%.2d-%.2d-20%.2d %.2d:%.2d:%.2d:%.4d",
 8014ac0:	469c      	mov	ip, r3
						fileCreated.dayM, fileCreated.month, fileCreated.year,
 8014ac2:	7f3b      	ldrb	r3, [r7, #28]
						fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 8014ac4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8014ac8:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8014acc:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
				sprintf(dateStr, "%.2d-%.2d-20%.2d %.2d:%.2d:%.2d:%.4d",
 8014ad0:	4604      	mov	r4, r0
						fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 8014ad2:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
				sprintf(dateStr, "%.2d-%.2d-20%.2d %.2d:%.2d:%.2d:%.4d",
 8014ad4:	4605      	mov	r5, r0
 8014ad6:	4638      	mov	r0, r7
 8014ad8:	9504      	str	r5, [sp, #16]
 8014ada:	9403      	str	r4, [sp, #12]
 8014adc:	9102      	str	r1, [sp, #8]
 8014ade:	9201      	str	r2, [sp, #4]
 8014ae0:	9300      	str	r3, [sp, #0]
 8014ae2:	4663      	mov	r3, ip
 8014ae4:	4632      	mov	r2, r6
 8014ae6:	491d      	ldr	r1, [pc, #116]	; (8014b5c <loging_setup+0x108>)
 8014ae8:	f004 ff46 	bl	8019978 <siprintf>

				status &= (SD_writeToFile("/TEST.TXT", dateStr) == FR_OK);
 8014aec:	463b      	mov	r3, r7
 8014aee:	4619      	mov	r1, r3
 8014af0:	4818      	ldr	r0, [pc, #96]	; (8014b54 <loging_setup+0x100>)
 8014af2:	f7ec fc15 	bl	8001320 <SD_writeToFile>
 8014af6:	4603      	mov	r3, r0
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	bf0c      	ite	eq
 8014afc:	2301      	moveq	r3, #1
 8014afe:	2300      	movne	r3, #0
 8014b00:	b2db      	uxtb	r3, r3
 8014b02:	461a      	mov	r2, r3
 8014b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b08:	4013      	ands	r3, r2
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	bf14      	ite	ne
 8014b0e:	2301      	movne	r3, #1
 8014b10:	2300      	moveq	r3, #0
 8014b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				println("[LOGING] SD Init fail!");
			#endif
			goto error_handler;
		}

		sdActive = true;
 8014b16:	4b12      	ldr	r3, [pc, #72]	; (8014b60 <loging_setup+0x10c>)
 8014b18:	2201      	movs	r2, #1
 8014b1a:	701a      	strb	r2, [r3, #0]
		log_new();
 8014b1c:	f7ff fa7e 	bl	801401c <log_new>
		Common.log_print = &log_print;
 8014b20:	4b10      	ldr	r3, [pc, #64]	; (8014b64 <loging_setup+0x110>)
 8014b22:	4a11      	ldr	r2, [pc, #68]	; (8014b68 <loging_setup+0x114>)
 8014b24:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
		(*Common.log_print)("*L00"); // [LOGING] SD works, welcome onboard!
 8014b28:	4b0e      	ldr	r3, [pc, #56]	; (8014b64 <loging_setup+0x110>)
 8014b2a:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8014b2e:	480f      	ldr	r0, [pc, #60]	; (8014b6c <loging_setup+0x118>)
 8014b30:	4798      	blx	r3
		return true;
 8014b32:	2301      	movs	r3, #1
 8014b34:	e00a      	b.n	8014b4c <loging_setup+0xf8>
			goto error_handler;
 8014b36:	bf00      	nop
 8014b38:	e000      	b.n	8014b3c <loging_setup+0xe8>
				goto error_handler;
 8014b3a:	bf00      	nop

		error_handler:
			#if LOGING_DEBUG
				println("error: [LOGING] SD logging is not active due to occured errors");
			#endif
			sdActive = false;
 8014b3c:	4b08      	ldr	r3, [pc, #32]	; (8014b60 <loging_setup+0x10c>)
 8014b3e:	2200      	movs	r2, #0
 8014b40:	701a      	strb	r2, [r3, #0]
			Common.log_print = &log_print_dummy;
 8014b42:	4b08      	ldr	r3, [pc, #32]	; (8014b64 <loging_setup+0x110>)
 8014b44:	4a0a      	ldr	r2, [pc, #40]	; (8014b70 <loging_setup+0x11c>)
 8014b46:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
			return false;
 8014b4a:	2300      	movs	r3, #0
	#else // SD_ENABLE
		println("warning: [LOGING] SD DISABLED!");
		Common.log_print = &log_print_dummy;
		return false;
	#endif
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	372c      	adds	r7, #44	; 0x2c
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b54:	0801fba8 	.word	0x0801fba8
 8014b58:	0801fbb4 	.word	0x0801fbb4
 8014b5c:	0801fbc4 	.word	0x0801fbc4
 8014b60:	2000797a 	.word	0x2000797a
 8014b64:	20000de0 	.word	0x20000de0
 8014b68:	080144cd 	.word	0x080144cd
 8014b6c:	0801fbec 	.word	0x0801fbec
 8014b70:	08014009 	.word	0x08014009

08014b74 <loging_loop>:

static void loging_loop(void)
{
 8014b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b78:	b08f      	sub	sp, #60	; 0x3c
 8014b7a:	af08      	add	r7, sp, #32
	#if SD_ENABLE
		if (Common.bmp.active && millis() - lastBmpLog >= LOG_BMP_DELAY) { log_bmp(&(Common.bmp)); lastBmpLog = millis(); }
 8014b7c:	4b87      	ldr	r3, [pc, #540]	; (8014d9c <loging_loop+0x228>)
 8014b7e:	7f1b      	ldrb	r3, [r3, #28]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d00f      	beq.n	8014ba4 <loging_loop+0x30>
 8014b84:	f7ff f954 	bl	8013e30 <millis>
 8014b88:	4602      	mov	r2, r0
 8014b8a:	4b85      	ldr	r3, [pc, #532]	; (8014da0 <loging_loop+0x22c>)
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	1ad3      	subs	r3, r2, r3
 8014b90:	2b63      	cmp	r3, #99	; 0x63
 8014b92:	d907      	bls.n	8014ba4 <loging_loop+0x30>
 8014b94:	4881      	ldr	r0, [pc, #516]	; (8014d9c <loging_loop+0x228>)
 8014b96:	f7ff fcd9 	bl	801454c <log_bmp>
 8014b9a:	f7ff f949 	bl	8013e30 <millis>
 8014b9e:	4602      	mov	r2, r0
 8014ba0:	4b7f      	ldr	r3, [pc, #508]	; (8014da0 <loging_loop+0x22c>)
 8014ba2:	601a      	str	r2, [r3, #0]
		if (Common.mpu.active && millis() - lastImuLog >= LOG_IMU_DELAY) { log_imu(&(Common.mpu)); lastImuLog = millis(); }
 8014ba4:	4b7d      	ldr	r3, [pc, #500]	; (8014d9c <loging_loop+0x228>)
 8014ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d00f      	beq.n	8014bce <loging_loop+0x5a>
 8014bae:	f7ff f93f 	bl	8013e30 <millis>
 8014bb2:	4602      	mov	r2, r0
 8014bb4:	4b7b      	ldr	r3, [pc, #492]	; (8014da4 <loging_loop+0x230>)
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	1ad3      	subs	r3, r2, r3
 8014bba:	2b63      	cmp	r3, #99	; 0x63
 8014bbc:	d907      	bls.n	8014bce <loging_loop+0x5a>
 8014bbe:	487a      	ldr	r0, [pc, #488]	; (8014da8 <loging_loop+0x234>)
 8014bc0:	f7ff fd8a 	bl	80146d8 <log_imu>
 8014bc4:	f7ff f934 	bl	8013e30 <millis>
 8014bc8:	4602      	mov	r2, r0
 8014bca:	4b76      	ldr	r3, [pc, #472]	; (8014da4 <loging_loop+0x230>)
 8014bcc:	601a      	str	r2, [r3, #0]
		if (millis() - lastMotLog >= LOG_MOT_DELAY) { log_mot(Common.mot_l, Common.mot_r); lastMotLog = millis(); }
 8014bce:	f7ff f92f 	bl	8013e30 <millis>
 8014bd2:	4602      	mov	r2, r0
 8014bd4:	4b75      	ldr	r3, [pc, #468]	; (8014dac <loging_loop+0x238>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	1ad3      	subs	r3, r2, r3
 8014bda:	2b63      	cmp	r3, #99	; 0x63
 8014bdc:	d914      	bls.n	8014c08 <loging_loop+0x94>
 8014bde:	4b6f      	ldr	r3, [pc, #444]	; (8014d9c <loging_loop+0x228>)
 8014be0:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8014be4:	edd3 7a00 	vldr	s15, [r3]
 8014be8:	4b6c      	ldr	r3, [pc, #432]	; (8014d9c <loging_loop+0x228>)
 8014bea:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8014bee:	ed93 7a00 	vldr	s14, [r3]
 8014bf2:	eef0 0a47 	vmov.f32	s1, s14
 8014bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8014bfa:	f7ff fdc5 	bl	8014788 <log_mot>
 8014bfe:	f7ff f917 	bl	8013e30 <millis>
 8014c02:	4602      	mov	r2, r0
 8014c04:	4b69      	ldr	r3, [pc, #420]	; (8014dac <loging_loop+0x238>)
 8014c06:	601a      	str	r2, [r3, #0]
		if (Common.gps.active && millis() - lastGpsLog >= LOG_GPS_DELAY /*Common.gps.newData*/) { log_gps(&(Common.gps)); Common.gps.newData = false; lastGpsLog = millis();}
 8014c08:	4b64      	ldr	r3, [pc, #400]	; (8014d9c <loging_loop+0x228>)
 8014c0a:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d014      	beq.n	8014c3c <loging_loop+0xc8>
 8014c12:	f7ff f90d 	bl	8013e30 <millis>
 8014c16:	4602      	mov	r2, r0
 8014c18:	4b65      	ldr	r3, [pc, #404]	; (8014db0 <loging_loop+0x23c>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	1ad3      	subs	r3, r2, r3
 8014c1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8014c22:	d30b      	bcc.n	8014c3c <loging_loop+0xc8>
 8014c24:	4863      	ldr	r0, [pc, #396]	; (8014db4 <loging_loop+0x240>)
 8014c26:	f7ff fcdf 	bl	80145e8 <log_gps>
 8014c2a:	4b5c      	ldr	r3, [pc, #368]	; (8014d9c <loging_loop+0x228>)
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 8014c32:	f7ff f8fd 	bl	8013e30 <millis>
 8014c36:	4602      	mov	r2, r0
 8014c38:	4b5d      	ldr	r3, [pc, #372]	; (8014db0 <loging_loop+0x23c>)
 8014c3a:	601a      	str	r2, [r3, #0]
		if (Common.radio.active && (Common.radio.newTxData || Common.radio.newRxData)) { log_radio(&(Common.radio)); }
 8014c3c:	4b57      	ldr	r3, [pc, #348]	; (8014d9c <loging_loop+0x228>)
 8014c3e:	f893 355c 	ldrb.w	r3, [r3, #1372]	; 0x55c
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d00c      	beq.n	8014c60 <loging_loop+0xec>
 8014c46:	4b55      	ldr	r3, [pc, #340]	; (8014d9c <loging_loop+0x228>)
 8014c48:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d104      	bne.n	8014c5a <loging_loop+0xe6>
 8014c50:	4b52      	ldr	r3, [pc, #328]	; (8014d9c <loging_loop+0x228>)
 8014c52:	f893 334d 	ldrb.w	r3, [r3, #845]	; 0x34d
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d002      	beq.n	8014c60 <loging_loop+0xec>
 8014c5a:	4857      	ldr	r0, [pc, #348]	; (8014db8 <loging_loop+0x244>)
 8014c5c:	f7ff fde0 	bl	8014820 <log_radio>
		if (Common.sps.newData) { log_sps(&(Common.sps)); Common.sps.newData = false; }
 8014c60:	4b4e      	ldr	r3, [pc, #312]	; (8014d9c <loging_loop+0x228>)
 8014c62:	f893 379c 	ldrb.w	r3, [r3, #1948]	; 0x79c
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d006      	beq.n	8014c78 <loging_loop+0x104>
 8014c6a:	4854      	ldr	r0, [pc, #336]	; (8014dbc <loging_loop+0x248>)
 8014c6c:	f7ff fe50 	bl	8014910 <log_sps>
 8014c70:	4b4a      	ldr	r3, [pc, #296]	; (8014d9c <loging_loop+0x228>)
 8014c72:	2200      	movs	r2, #0
 8014c74:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
		if (Common.operation_mode != 31 && millis() - lastTargetYawLog >= LOG_TARGET_YAW_DELAY) { log_print("TY: %.1f*", Common.target_yaw); lastTargetYawLog = millis(); }
 8014c78:	4b48      	ldr	r3, [pc, #288]	; (8014d9c <loging_loop+0x228>)
 8014c7a:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 8014c7e:	2b1f      	cmp	r3, #31
 8014c80:	d01b      	beq.n	8014cba <loging_loop+0x146>
 8014c82:	f7ff f8d5 	bl	8013e30 <millis>
 8014c86:	4602      	mov	r2, r0
 8014c88:	4b4d      	ldr	r3, [pc, #308]	; (8014dc0 <loging_loop+0x24c>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	1ad3      	subs	r3, r2, r3
 8014c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014c92:	d312      	bcc.n	8014cba <loging_loop+0x146>
 8014c94:	4b41      	ldr	r3, [pc, #260]	; (8014d9c <loging_loop+0x228>)
 8014c96:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f7eb fc63 	bl	8000568 <__aeabi_f2d>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	460c      	mov	r4, r1
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	4623      	mov	r3, r4
 8014caa:	4846      	ldr	r0, [pc, #280]	; (8014dc4 <loging_loop+0x250>)
 8014cac:	f7ff fc0e 	bl	80144cc <log_print>
 8014cb0:	f7ff f8be 	bl	8013e30 <millis>
 8014cb4:	4602      	mov	r2, r0
 8014cb6:	4b42      	ldr	r3, [pc, #264]	; (8014dc0 <loging_loop+0x24c>)
 8014cb8:	601a      	str	r2, [r3, #0]

		if (millis() - lastLogSave >= LOG_SAVE_DELAY) { log_save(); }
 8014cba:	f7ff f8b9 	bl	8013e30 <millis>
 8014cbe:	4602      	mov	r2, r0
 8014cc0:	4b41      	ldr	r3, [pc, #260]	; (8014dc8 <loging_loop+0x254>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	1ad3      	subs	r3, r2, r3
 8014cc6:	f640 1244 	movw	r2, #2372	; 0x944
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	d901      	bls.n	8014cd2 <loging_loop+0x15e>
 8014cce:	f7ff faa1 	bl	8014214 <log_save>
	#endif

	#if LOGING_PRINT_DATA
		if (millis() - lastDataPrint >= DATA_PRINT_DELAY)
 8014cd2:	f7ff f8ad 	bl	8013e30 <millis>
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	4b3c      	ldr	r3, [pc, #240]	; (8014dcc <loging_loop+0x258>)
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	1ad3      	subs	r3, r2, r3
 8014cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014ce2:	f0c0 81de 	bcc.w	80150a2 <loging_loop+0x52e>
		{
			#if LOGING_PRINT_SENSORS
				if (Common.bmp.active)
 8014ce6:	4b2d      	ldr	r3, [pc, #180]	; (8014d9c <loging_loop+0x228>)
 8014ce8:	7f1b      	ldrb	r3, [r3, #28]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d023      	beq.n	8014d36 <loging_loop+0x1c2>
				{
					println("Pressure: %.4f", Common.bmp.pressure);
 8014cee:	4b2b      	ldr	r3, [pc, #172]	; (8014d9c <loging_loop+0x228>)
 8014cf0:	68db      	ldr	r3, [r3, #12]
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f7eb fc38 	bl	8000568 <__aeabi_f2d>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	460c      	mov	r4, r1
 8014cfc:	461a      	mov	r2, r3
 8014cfe:	4623      	mov	r3, r4
 8014d00:	4833      	ldr	r0, [pc, #204]	; (8014dd0 <loging_loop+0x25c>)
 8014d02:	f7ff f8f5 	bl	8013ef0 <println>
					println("Temperature: %.4f", Common.bmp.temperature);
 8014d06:	4b25      	ldr	r3, [pc, #148]	; (8014d9c <loging_loop+0x228>)
 8014d08:	691b      	ldr	r3, [r3, #16]
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7eb fc2c 	bl	8000568 <__aeabi_f2d>
 8014d10:	4603      	mov	r3, r0
 8014d12:	460c      	mov	r4, r1
 8014d14:	461a      	mov	r2, r3
 8014d16:	4623      	mov	r3, r4
 8014d18:	482e      	ldr	r0, [pc, #184]	; (8014dd4 <loging_loop+0x260>)
 8014d1a:	f7ff f8e9 	bl	8013ef0 <println>
					println("Altitude(P): %.1f", Common.bmp.altitude);
 8014d1e:	4b1f      	ldr	r3, [pc, #124]	; (8014d9c <loging_loop+0x228>)
 8014d20:	695b      	ldr	r3, [r3, #20]
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7eb fc20 	bl	8000568 <__aeabi_f2d>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	460c      	mov	r4, r1
 8014d2c:	461a      	mov	r2, r3
 8014d2e:	4623      	mov	r3, r4
 8014d30:	4829      	ldr	r0, [pc, #164]	; (8014dd8 <loging_loop+0x264>)
 8014d32:	f7ff f8dd 	bl	8013ef0 <println>
				}
				if (Common.gps.active && Common.gps.fix)
 8014d36:	4b19      	ldr	r3, [pc, #100]	; (8014d9c <loging_loop+0x228>)
 8014d38:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d053      	beq.n	8014de8 <loging_loop+0x274>
 8014d40:	4b16      	ldr	r3, [pc, #88]	; (8014d9c <loging_loop+0x228>)
 8014d42:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d04e      	beq.n	8014de8 <loging_loop+0x274>
				{
					println("Latitude: %.6f", Common.gps.latitudeDegrees);
 8014d4a:	4b14      	ldr	r3, [pc, #80]	; (8014d9c <loging_loop+0x228>)
 8014d4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7eb fc09 	bl	8000568 <__aeabi_f2d>
 8014d56:	4603      	mov	r3, r0
 8014d58:	460c      	mov	r4, r1
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	4623      	mov	r3, r4
 8014d5e:	481f      	ldr	r0, [pc, #124]	; (8014ddc <loging_loop+0x268>)
 8014d60:	f7ff f8c6 	bl	8013ef0 <println>
					println("Longitude: %.6f", Common.gps.longitudeDegrees);
 8014d64:	4b0d      	ldr	r3, [pc, #52]	; (8014d9c <loging_loop+0x228>)
 8014d66:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7eb fbfc 	bl	8000568 <__aeabi_f2d>
 8014d70:	4603      	mov	r3, r0
 8014d72:	460c      	mov	r4, r1
 8014d74:	461a      	mov	r2, r3
 8014d76:	4623      	mov	r3, r4
 8014d78:	4819      	ldr	r0, [pc, #100]	; (8014de0 <loging_loop+0x26c>)
 8014d7a:	f7ff f8b9 	bl	8013ef0 <println>
					println("Altitude(G): %.1f", Common.gps.altitude);
 8014d7e:	4b07      	ldr	r3, [pc, #28]	; (8014d9c <loging_loop+0x228>)
 8014d80:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7eb fbef 	bl	8000568 <__aeabi_f2d>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	460c      	mov	r4, r1
 8014d8e:	461a      	mov	r2, r3
 8014d90:	4623      	mov	r3, r4
 8014d92:	4814      	ldr	r0, [pc, #80]	; (8014de4 <loging_loop+0x270>)
 8014d94:	f7ff f8ac 	bl	8013ef0 <println>
 8014d98:	e02e      	b.n	8014df8 <loging_loop+0x284>
 8014d9a:	bf00      	nop
 8014d9c:	20000de0 	.word	0x20000de0
 8014da0:	20008584 	.word	0x20008584
 8014da4:	2000551c 	.word	0x2000551c
 8014da8:	20000e18 	.word	0x20000e18
 8014dac:	2000796c 	.word	0x2000796c
 8014db0:	20005114 	.word	0x20005114
 8014db4:	20000ed4 	.word	0x20000ed4
 8014db8:	200010f4 	.word	0x200010f4
 8014dbc:	20001340 	.word	0x20001340
 8014dc0:	20007968 	.word	0x20007968
 8014dc4:	0801fbf4 	.word	0x0801fbf4
 8014dc8:	20007970 	.word	0x20007970
 8014dcc:	20007980 	.word	0x20007980
 8014dd0:	0801fc00 	.word	0x0801fc00
 8014dd4:	0801fc10 	.word	0x0801fc10
 8014dd8:	0801fc24 	.word	0x0801fc24
 8014ddc:	0801fc38 	.word	0x0801fc38
 8014de0:	0801fc48 	.word	0x0801fc48
 8014de4:	0801fc58 	.word	0x0801fc58
				}
				else if (Common.gps.active) println("GPS has no fix");
 8014de8:	4bb0      	ldr	r3, [pc, #704]	; (80150ac <loging_loop+0x538>)
 8014dea:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d002      	beq.n	8014df8 <loging_loop+0x284>
 8014df2:	48af      	ldr	r0, [pc, #700]	; (80150b0 <loging_loop+0x53c>)
 8014df4:	f7ff f87c 	bl	8013ef0 <println>
				if (Common.mpu.active) println("Rotation: %.0f, %.0f, %.0f", Common.mpu.yaw, Common.mpu.pitch, Common.mpu.roll);
 8014df8:	4bac      	ldr	r3, [pc, #688]	; (80150ac <loging_loop+0x538>)
 8014dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d01d      	beq.n	8014e3e <loging_loop+0x2ca>
 8014e02:	4baa      	ldr	r3, [pc, #680]	; (80150ac <loging_loop+0x538>)
 8014e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7eb fbae 	bl	8000568 <__aeabi_f2d>
 8014e0c:	4680      	mov	r8, r0
 8014e0e:	4689      	mov	r9, r1
 8014e10:	4ba6      	ldr	r3, [pc, #664]	; (80150ac <loging_loop+0x538>)
 8014e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7eb fba7 	bl	8000568 <__aeabi_f2d>
 8014e1a:	4604      	mov	r4, r0
 8014e1c:	460d      	mov	r5, r1
 8014e1e:	4ba3      	ldr	r3, [pc, #652]	; (80150ac <loging_loop+0x538>)
 8014e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7eb fba0 	bl	8000568 <__aeabi_f2d>
 8014e28:	4602      	mov	r2, r0
 8014e2a:	460b      	mov	r3, r1
 8014e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014e30:	e9cd 4500 	strd	r4, r5, [sp]
 8014e34:	4642      	mov	r2, r8
 8014e36:	464b      	mov	r3, r9
 8014e38:	489e      	ldr	r0, [pc, #632]	; (80150b4 <loging_loop+0x540>)
 8014e3a:	f7ff f859 	bl	8013ef0 <println>
				if (Common.sps.active)
 8014e3e:	4b9b      	ldr	r3, [pc, #620]	; (80150ac <loging_loop+0x538>)
 8014e40:	f893 379d 	ldrb.w	r3, [r3, #1949]	; 0x79d
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d076      	beq.n	8014f36 <loging_loop+0x3c2>
				{
					println("Mass concentraion: %.1f %.1f %.1f %.1f", Common.sps.pm1, Common.sps.pm2, Common.sps.pm4, Common.sps.pm10);
 8014e48:	4b98      	ldr	r3, [pc, #608]	; (80150ac <loging_loop+0x538>)
 8014e4a:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7eb fb89 	bl	8000568 <__aeabi_f2d>
 8014e56:	4682      	mov	sl, r0
 8014e58:	468b      	mov	fp, r1
 8014e5a:	4b94      	ldr	r3, [pc, #592]	; (80150ac <loging_loop+0x538>)
 8014e5c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	4618      	mov	r0, r3
 8014e64:	f7eb fb80 	bl	8000568 <__aeabi_f2d>
 8014e68:	4604      	mov	r4, r0
 8014e6a:	460d      	mov	r5, r1
 8014e6c:	4b8f      	ldr	r3, [pc, #572]	; (80150ac <loging_loop+0x538>)
 8014e6e:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7eb fb77 	bl	8000568 <__aeabi_f2d>
 8014e7a:	4680      	mov	r8, r0
 8014e7c:	4689      	mov	r9, r1
 8014e7e:	4b8b      	ldr	r3, [pc, #556]	; (80150ac <loging_loop+0x538>)
 8014e80:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7eb fb6e 	bl	8000568 <__aeabi_f2d>
 8014e8c:	4602      	mov	r2, r0
 8014e8e:	460b      	mov	r3, r1
 8014e90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014e94:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014e98:	e9cd 4500 	strd	r4, r5, [sp]
 8014e9c:	4652      	mov	r2, sl
 8014e9e:	465b      	mov	r3, fp
 8014ea0:	4885      	ldr	r0, [pc, #532]	; (80150b8 <loging_loop+0x544>)
 8014ea2:	f7ff f825 	bl	8013ef0 <println>
					println("Number concentraion: %.1f %.1f %.1f %.1f %.1f", Common.sps.n_pm05, Common.sps.n_pm1, Common.sps.n_pm2, Common.sps.n_pm4, Common.sps.n_pm10);
 8014ea6:	4b81      	ldr	r3, [pc, #516]	; (80150ac <loging_loop+0x538>)
 8014ea8:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7eb fb5a 	bl	8000568 <__aeabi_f2d>
 8014eb4:	e9c7 0100 	strd	r0, r1, [r7]
 8014eb8:	4b7c      	ldr	r3, [pc, #496]	; (80150ac <loging_loop+0x538>)
 8014eba:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f7eb fb51 	bl	8000568 <__aeabi_f2d>
 8014ec6:	4604      	mov	r4, r0
 8014ec8:	460d      	mov	r5, r1
 8014eca:	4b78      	ldr	r3, [pc, #480]	; (80150ac <loging_loop+0x538>)
 8014ecc:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f7eb fb48 	bl	8000568 <__aeabi_f2d>
 8014ed8:	4680      	mov	r8, r0
 8014eda:	4689      	mov	r9, r1
 8014edc:	4b73      	ldr	r3, [pc, #460]	; (80150ac <loging_loop+0x538>)
 8014ede:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f7eb fb3f 	bl	8000568 <__aeabi_f2d>
 8014eea:	4682      	mov	sl, r0
 8014eec:	468b      	mov	fp, r1
 8014eee:	4b6f      	ldr	r3, [pc, #444]	; (80150ac <loging_loop+0x538>)
 8014ef0:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7eb fb36 	bl	8000568 <__aeabi_f2d>
 8014efc:	4602      	mov	r2, r0
 8014efe:	460b      	mov	r3, r1
 8014f00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014f04:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8014f08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014f0c:	e9cd 4500 	strd	r4, r5, [sp]
 8014f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f14:	4869      	ldr	r0, [pc, #420]	; (80150bc <loging_loop+0x548>)
 8014f16:	f7fe ffeb 	bl	8013ef0 <println>
					println("Typical size: %.2f", Common.sps.typical_size);
 8014f1a:	4b64      	ldr	r3, [pc, #400]	; (80150ac <loging_loop+0x538>)
 8014f1c:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7eb fb20 	bl	8000568 <__aeabi_f2d>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	460c      	mov	r4, r1
 8014f2c:	461a      	mov	r2, r3
 8014f2e:	4623      	mov	r3, r4
 8014f30:	4863      	ldr	r0, [pc, #396]	; (80150c0 <loging_loop+0x54c>)
 8014f32:	f7fe ffdd 	bl	8013ef0 <println>
				}
			#endif
			#if LOGING_PRINT_RADIO
				if (Common.radio.active)
 8014f36:	4b5d      	ldr	r3, [pc, #372]	; (80150ac <loging_loop+0x538>)
 8014f38:	f893 355c 	ldrb.w	r3, [r3, #1372]	; 0x55c
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d00d      	beq.n	8014f5c <loging_loop+0x3e8>
				{
					println("Packets transmitted: %d", Common.radio.txCount);
 8014f40:	4b5a      	ldr	r3, [pc, #360]	; (80150ac <loging_loop+0x538>)
 8014f42:	f8b3 3352 	ldrh.w	r3, [r3, #850]	; 0x352
 8014f46:	4619      	mov	r1, r3
 8014f48:	485e      	ldr	r0, [pc, #376]	; (80150c4 <loging_loop+0x550>)
 8014f4a:	f7fe ffd1 	bl	8013ef0 <println>
					println("Packets received: %d", Common.radio.rxCount);
 8014f4e:	4b57      	ldr	r3, [pc, #348]	; (80150ac <loging_loop+0x538>)
 8014f50:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8014f54:	4619      	mov	r1, r3
 8014f56:	485c      	ldr	r0, [pc, #368]	; (80150c8 <loging_loop+0x554>)
 8014f58:	f7fe ffca 	bl	8013ef0 <println>
				}
			#endif
			#if LOGING_PRINT_INFO
				println("Motor state: %s", Common.motors_enabled ? "enabled" : "disabled");
 8014f5c:	4b53      	ldr	r3, [pc, #332]	; (80150ac <loging_loop+0x538>)
 8014f5e:	f893 37a8 	ldrb.w	r3, [r3, #1960]	; 0x7a8
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d001      	beq.n	8014f6a <loging_loop+0x3f6>
 8014f66:	4b59      	ldr	r3, [pc, #356]	; (80150cc <loging_loop+0x558>)
 8014f68:	e000      	b.n	8014f6c <loging_loop+0x3f8>
 8014f6a:	4b59      	ldr	r3, [pc, #356]	; (80150d0 <loging_loop+0x55c>)
 8014f6c:	4619      	mov	r1, r3
 8014f6e:	4859      	ldr	r0, [pc, #356]	; (80150d4 <loging_loop+0x560>)
 8014f70:	f7fe ffbe 	bl	8013ef0 <println>
				println("Motor power: %.1f %.1f", Common.mot_l, Common.mot_r);
 8014f74:	4b4d      	ldr	r3, [pc, #308]	; (80150ac <loging_loop+0x538>)
 8014f76:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f7eb faf3 	bl	8000568 <__aeabi_f2d>
 8014f82:	4605      	mov	r5, r0
 8014f84:	460e      	mov	r6, r1
 8014f86:	4b49      	ldr	r3, [pc, #292]	; (80150ac <loging_loop+0x538>)
 8014f88:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7eb faea 	bl	8000568 <__aeabi_f2d>
 8014f94:	4603      	mov	r3, r0
 8014f96:	460c      	mov	r4, r1
 8014f98:	e9cd 3400 	strd	r3, r4, [sp]
 8014f9c:	462a      	mov	r2, r5
 8014f9e:	4633      	mov	r3, r6
 8014fa0:	484d      	ldr	r0, [pc, #308]	; (80150d8 <loging_loop+0x564>)
 8014fa2:	f7fe ffa5 	bl	8013ef0 <println>
				println("Servo state: %s", Common.servo_enabled ? "open" : "closed");
 8014fa6:	4b41      	ldr	r3, [pc, #260]	; (80150ac <loging_loop+0x538>)
 8014fa8:	f893 37a9 	ldrb.w	r3, [r3, #1961]	; 0x7a9
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d001      	beq.n	8014fb4 <loging_loop+0x440>
 8014fb0:	4b4a      	ldr	r3, [pc, #296]	; (80150dc <loging_loop+0x568>)
 8014fb2:	e000      	b.n	8014fb6 <loging_loop+0x442>
 8014fb4:	4b4a      	ldr	r3, [pc, #296]	; (80150e0 <loging_loop+0x56c>)
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	484a      	ldr	r0, [pc, #296]	; (80150e4 <loging_loop+0x570>)
 8014fba:	f7fe ff99 	bl	8013ef0 <println>
				println("Targeting to: %.4f, %.4f, %.1f at %.1f*", Common.target_lat, Common.target_lon, Common.target_alt, Common.target_yaw);
 8014fbe:	4b3b      	ldr	r3, [pc, #236]	; (80150ac <loging_loop+0x538>)
 8014fc0:	f203 73ac 	addw	r3, r3, #1964	; 0x7ac
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7eb face 	bl	8000568 <__aeabi_f2d>
 8014fcc:	4682      	mov	sl, r0
 8014fce:	468b      	mov	fp, r1
 8014fd0:	4b36      	ldr	r3, [pc, #216]	; (80150ac <loging_loop+0x538>)
 8014fd2:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f7eb fac5 	bl	8000568 <__aeabi_f2d>
 8014fde:	4604      	mov	r4, r0
 8014fe0:	460d      	mov	r5, r1
 8014fe2:	4b32      	ldr	r3, [pc, #200]	; (80150ac <loging_loop+0x538>)
 8014fe4:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	4618      	mov	r0, r3
 8014fec:	f7eb fabc 	bl	8000568 <__aeabi_f2d>
 8014ff0:	4680      	mov	r8, r0
 8014ff2:	4689      	mov	r9, r1
 8014ff4:	4b2d      	ldr	r3, [pc, #180]	; (80150ac <loging_loop+0x538>)
 8014ff6:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f7eb fab3 	bl	8000568 <__aeabi_f2d>
 8015002:	4602      	mov	r2, r0
 8015004:	460b      	mov	r3, r1
 8015006:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801500a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801500e:	e9cd 4500 	strd	r4, r5, [sp]
 8015012:	4652      	mov	r2, sl
 8015014:	465b      	mov	r3, fp
 8015016:	4834      	ldr	r0, [pc, #208]	; (80150e8 <loging_loop+0x574>)
 8015018:	f7fe ff6a 	bl	8013ef0 <println>
				char operation_string[10];
				switch (Common.operation_mode)
 801501c:	4b23      	ldr	r3, [pc, #140]	; (80150ac <loging_loop+0x538>)
 801501e:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 8015022:	2b03      	cmp	r3, #3
 8015024:	d82a      	bhi.n	801507c <loging_loop+0x508>
 8015026:	a201      	add	r2, pc, #4	; (adr r2, 801502c <loging_loop+0x4b8>)
 8015028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801502c:	0801503d 	.word	0x0801503d
 8015030:	0801504f 	.word	0x0801504f
 8015034:	0801505d 	.word	0x0801505d
 8015038:	0801506b 	.word	0x0801506b
				{
					case 0:
						sprintf(operation_string, "auto"); break;
 801503c:	f107 030c 	add.w	r3, r7, #12
 8015040:	4a2a      	ldr	r2, [pc, #168]	; (80150ec <loging_loop+0x578>)
 8015042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015046:	6018      	str	r0, [r3, #0]
 8015048:	3304      	adds	r3, #4
 801504a:	7019      	strb	r1, [r3, #0]
 801504c:	e01d      	b.n	801508a <loging_loop+0x516>
					case 1:
						sprintf(operation_string, "settarget"); break;
 801504e:	4a28      	ldr	r2, [pc, #160]	; (80150f0 <loging_loop+0x57c>)
 8015050:	f107 030c 	add.w	r3, r7, #12
 8015054:	ca07      	ldmia	r2, {r0, r1, r2}
 8015056:	c303      	stmia	r3!, {r0, r1}
 8015058:	801a      	strh	r2, [r3, #0]
 801505a:	e016      	b.n	801508a <loging_loop+0x516>
					case 2:
						sprintf(operation_string, "direction"); break;
 801505c:	4a25      	ldr	r2, [pc, #148]	; (80150f4 <loging_loop+0x580>)
 801505e:	f107 030c 	add.w	r3, r7, #12
 8015062:	ca07      	ldmia	r2, {r0, r1, r2}
 8015064:	c303      	stmia	r3!, {r0, r1}
 8015066:	801a      	strh	r2, [r3, #0]
 8015068:	e00f      	b.n	801508a <loging_loop+0x516>
					case 3:
						sprintf(operation_string, "manul"); break;
 801506a:	f107 030c 	add.w	r3, r7, #12
 801506e:	4a22      	ldr	r2, [pc, #136]	; (80150f8 <loging_loop+0x584>)
 8015070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015074:	6018      	str	r0, [r3, #0]
 8015076:	3304      	adds	r3, #4
 8015078:	8019      	strh	r1, [r3, #0]
 801507a:	e006      	b.n	801508a <loging_loop+0x516>
					case 31:
					default:
						sprintf(operation_string, "terminate"); break;
 801507c:	4a1f      	ldr	r2, [pc, #124]	; (80150fc <loging_loop+0x588>)
 801507e:	f107 030c 	add.w	r3, r7, #12
 8015082:	ca07      	ldmia	r2, {r0, r1, r2}
 8015084:	c303      	stmia	r3!, {r0, r1}
 8015086:	801a      	strh	r2, [r3, #0]
 8015088:	bf00      	nop
				}
				println("Operation mode: %s", operation_string);
 801508a:	f107 030c 	add.w	r3, r7, #12
 801508e:	4619      	mov	r1, r3
 8015090:	481b      	ldr	r0, [pc, #108]	; (8015100 <loging_loop+0x58c>)
 8015092:	f7fe ff2d 	bl	8013ef0 <println>
			#endif
			lastDataPrint = millis();
 8015096:	f7fe fecb 	bl	8013e30 <millis>
 801509a:	4602      	mov	r2, r0
 801509c:	4b19      	ldr	r3, [pc, #100]	; (8015104 <loging_loop+0x590>)
 801509e:	601a      	str	r2, [r3, #0]
		}
	#endif
	return;
 80150a0:	bf00      	nop
 80150a2:	bf00      	nop
}
 80150a4:	371c      	adds	r7, #28
 80150a6:	46bd      	mov	sp, r7
 80150a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ac:	20000de0 	.word	0x20000de0
 80150b0:	0801fc6c 	.word	0x0801fc6c
 80150b4:	0801fc7c 	.word	0x0801fc7c
 80150b8:	0801fc98 	.word	0x0801fc98
 80150bc:	0801fcc0 	.word	0x0801fcc0
 80150c0:	0801fcf0 	.word	0x0801fcf0
 80150c4:	0801fd04 	.word	0x0801fd04
 80150c8:	0801fd1c 	.word	0x0801fd1c
 80150cc:	0801fd34 	.word	0x0801fd34
 80150d0:	0801fd3c 	.word	0x0801fd3c
 80150d4:	0801fd48 	.word	0x0801fd48
 80150d8:	0801fd58 	.word	0x0801fd58
 80150dc:	0801fd70 	.word	0x0801fd70
 80150e0:	0801fd78 	.word	0x0801fd78
 80150e4:	0801fd80 	.word	0x0801fd80
 80150e8:	0801fd90 	.word	0x0801fd90
 80150ec:	0801fdb8 	.word	0x0801fdb8
 80150f0:	0801fdc0 	.word	0x0801fdc0
 80150f4:	0801fdcc 	.word	0x0801fdcc
 80150f8:	0801fdd8 	.word	0x0801fdd8
 80150fc:	0801fde0 	.word	0x0801fde0
 8015100:	0801fdec 	.word	0x0801fdec
 8015104:	20007980 	.word	0x20007980

08015108 <send_info_packet>:

bool transmitting;
uint8_t packetNumber;

static void send_info_packet(void)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	af00      	add	r7, sp, #0
	SX1278_transmit(&(Common.radio), Common.radio.txBuffer, 22);	
 801510c:	2216      	movs	r2, #22
 801510e:	4903      	ldr	r1, [pc, #12]	; (801511c <send_info_packet+0x14>)
 8015110:	4803      	ldr	r0, [pc, #12]	; (8015120 <send_info_packet+0x18>)
 8015112:	f7ec fb59 	bl	80017c8 <SX1278_transmit>
}
 8015116:	bf00      	nop
 8015118:	bd80      	pop	{r7, pc}
 801511a:	bf00      	nop
 801511c:	2000123c 	.word	0x2000123c
 8015120:	200010f4 	.word	0x200010f4

08015124 <duplex_setup>:

static bool duplex_setup(void)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
	(*Common.log_print)("*D00"); // [DUPLEX] Hello!
 801512a:	4b32      	ldr	r3, [pc, #200]	; (80151f4 <duplex_setup+0xd0>)
 801512c:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8015130:	4831      	ldr	r0, [pc, #196]	; (80151f8 <duplex_setup+0xd4>)
 8015132:	4798      	blx	r3
	#if RADIO_ENABLE
		Common.radio.reset = LR_RESET_Pin;		Common.radio.reset_port = LR_RESET_GPIO_Port;
 8015134:	4b2f      	ldr	r3, [pc, #188]	; (80151f4 <duplex_setup+0xd0>)
 8015136:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801513a:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
 801513e:	4b2d      	ldr	r3, [pc, #180]	; (80151f4 <duplex_setup+0xd0>)
 8015140:	4a2e      	ldr	r2, [pc, #184]	; (80151fc <duplex_setup+0xd8>)
 8015142:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
		Common.radio.dio0 = LR_DIO0_Pin;		Common.radio.dio0_port = LR_DIO0_GPIO_Port;
 8015146:	4b2b      	ldr	r3, [pc, #172]	; (80151f4 <duplex_setup+0xd0>)
 8015148:	2210      	movs	r2, #16
 801514a:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
 801514e:	4b29      	ldr	r3, [pc, #164]	; (80151f4 <duplex_setup+0xd0>)
 8015150:	4a2b      	ldr	r2, [pc, #172]	; (8015200 <duplex_setup+0xdc>)
 8015152:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
		Common.radio.nss = LR_NSS_Pin;			Common.radio.nss_port = LR_NSS_GPIO_Port;
 8015156:	4b27      	ldr	r3, [pc, #156]	; (80151f4 <duplex_setup+0xd0>)
 8015158:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801515c:	f8a3 2326 	strh.w	r2, [r3, #806]	; 0x326
 8015160:	4b24      	ldr	r3, [pc, #144]	; (80151f4 <duplex_setup+0xd0>)
 8015162:	4a27      	ldr	r2, [pc, #156]	; (8015200 <duplex_setup+0xdc>)
 8015164:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
		Common.radio.spi = Get_SPI1_Instance();
 8015168:	f002 f912 	bl	8017390 <Get_SPI1_Instance>
 801516c:	4602      	mov	r2, r0
 801516e:	4b21      	ldr	r3, [pc, #132]	; (80151f4 <duplex_setup+0xd0>)
 8015170:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
		Common.radio.config = sx1278_default_config;
 8015174:	4b1f      	ldr	r3, [pc, #124]	; (80151f4 <duplex_setup+0xd0>)
 8015176:	4a23      	ldr	r2, [pc, #140]	; (8015204 <duplex_setup+0xe0>)
 8015178:	f503 7345 	add.w	r3, r3, #788	; 0x314
 801517c:	ca07      	ldmia	r2, {r0, r1, r2}
 801517e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Common.radio.useDio0IRQ = true;
 8015182:	4b1c      	ldr	r3, [pc, #112]	; (80151f4 <duplex_setup+0xd0>)
 8015184:	2201      	movs	r2, #1
 8015186:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

		#if DUPLEX_DEBUG
			println("[DUPLEX] Initializing SX1278");
		#endif
		(*Common.log_print)("*D01");
 801518a:	4b1a      	ldr	r3, [pc, #104]	; (80151f4 <duplex_setup+0xd0>)
 801518c:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8015190:	481d      	ldr	r0, [pc, #116]	; (8015208 <duplex_setup+0xe4>)
 8015192:	4798      	blx	r3

		uint8_t attempts = 0;
 8015194:	2300      	movs	r3, #0
 8015196:	71fb      	strb	r3, [r7, #7]
		while (!SX1278_init(&(Common.radio)))
 8015198:	e010      	b.n	80151bc <duplex_setup+0x98>
		{
			if (++attempts > 5)
 801519a:	79fb      	ldrb	r3, [r7, #7]
 801519c:	3301      	adds	r3, #1
 801519e:	71fb      	strb	r3, [r7, #7]
 80151a0:	79fb      	ldrb	r3, [r7, #7]
 80151a2:	2b05      	cmp	r3, #5
 80151a4:	d906      	bls.n	80151b4 <duplex_setup+0x90>
			{
				#if DUPLEX_DEBUG
					println("error: [DUPLEX] No connection with SX1278, radio is not active");
				#endif
				(*Common.log_print)("*ED01");
 80151a6:	4b13      	ldr	r3, [pc, #76]	; (80151f4 <duplex_setup+0xd0>)
 80151a8:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80151ac:	4817      	ldr	r0, [pc, #92]	; (801520c <duplex_setup+0xe8>)
 80151ae:	4798      	blx	r3
				return false;
 80151b0:	2300      	movs	r3, #0
 80151b2:	e01a      	b.n	80151ea <duplex_setup+0xc6>
			}

			#if DUPLEX_DEBUG
				println("[DUPLEX] Init unsuccessful, retrying...");
			#endif
			delay(500);
 80151b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80151b8:	f7f1 fc56 	bl	8006a68 <HAL_Delay>
		while (!SX1278_init(&(Common.radio)))
 80151bc:	4814      	ldr	r0, [pc, #80]	; (8015210 <duplex_setup+0xec>)
 80151be:	f7ec fa0b 	bl	80015d8 <SX1278_init>
 80151c2:	4603      	mov	r3, r0
 80151c4:	f083 0301 	eor.w	r3, r3, #1
 80151c8:	b2db      	uxtb	r3, r3
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d1e5      	bne.n	801519a <duplex_setup+0x76>
		}
		#if DUPLEX_DEBUG
			println("[DUPLEX] Successful radio init");
		#endif
		(*Common.log_print)("*D02");
 80151ce:	4b09      	ldr	r3, [pc, #36]	; (80151f4 <duplex_setup+0xd0>)
 80151d0:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80151d4:	480f      	ldr	r0, [pc, #60]	; (8015214 <duplex_setup+0xf0>)
 80151d6:	4798      	blx	r3
		
		packetNumber = 1;
 80151d8:	4b0f      	ldr	r3, [pc, #60]	; (8015218 <duplex_setup+0xf4>)
 80151da:	2201      	movs	r2, #1
 80151dc:	701a      	strb	r2, [r3, #0]
		transmitting = true;
 80151de:	4b0f      	ldr	r3, [pc, #60]	; (801521c <duplex_setup+0xf8>)
 80151e0:	2201      	movs	r2, #1
 80151e2:	701a      	strb	r2, [r3, #0]

		send_info_packet(); // Send packet to kickstart duplex
 80151e4:	f7ff ff90 	bl	8015108 <send_info_packet>
		return true;
 80151e8:	2301      	movs	r3, #1
		#endif
		(*Common.log_print)("*WD00");
		Common.radio.active = false;
		return false;
	#endif
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	3708      	adds	r7, #8
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	bf00      	nop
 80151f4:	20000de0 	.word	0x20000de0
 80151f8:	0801fe00 	.word	0x0801fe00
 80151fc:	40020000 	.word	0x40020000
 8015200:	40020800 	.word	0x40020800
 8015204:	20000118 	.word	0x20000118
 8015208:	0801fe08 	.word	0x0801fe08
 801520c:	0801fe10 	.word	0x0801fe10
 8015210:	200010f4 	.word	0x200010f4
 8015214:	0801fe18 	.word	0x0801fe18
 8015218:	20003cd2 	.word	0x20003cd2
 801521c:	20003cd3 	.word	0x20003cd3

08015220 <duplex_checkINT>:

static bool duplex_checkINT(void)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	af00      	add	r7, sp, #0
	return ((Common.radio.pendingIRQ && HAL_GPIO_ReadPin(Common.radio.dio0_port, Common.radio.dio0) == HIGH) || SX1278_intTimeout(&(Common.radio)));
 8015224:	4b0f      	ldr	r3, [pc, #60]	; (8015264 <duplex_checkINT+0x44>)
 8015226:	f893 3359 	ldrb.w	r3, [r3, #857]	; 0x359
 801522a:	2b00      	cmp	r3, #0
 801522c:	d00c      	beq.n	8015248 <duplex_checkINT+0x28>
 801522e:	4b0d      	ldr	r3, [pc, #52]	; (8015264 <duplex_checkINT+0x44>)
 8015230:	f8d3 2330 	ldr.w	r2, [r3, #816]	; 0x330
 8015234:	4b0b      	ldr	r3, [pc, #44]	; (8015264 <duplex_checkINT+0x44>)
 8015236:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 801523a:	4619      	mov	r1, r3
 801523c:	4610      	mov	r0, r2
 801523e:	f7f2 fa79 	bl	8007734 <HAL_GPIO_ReadPin>
 8015242:	4603      	mov	r3, r0
 8015244:	2b01      	cmp	r3, #1
 8015246:	d005      	beq.n	8015254 <duplex_checkINT+0x34>
 8015248:	4807      	ldr	r0, [pc, #28]	; (8015268 <duplex_checkINT+0x48>)
 801524a:	f7ec fd4b 	bl	8001ce4 <SX1278_intTimeout>
 801524e:	4603      	mov	r3, r0
 8015250:	2b00      	cmp	r3, #0
 8015252:	d001      	beq.n	8015258 <duplex_checkINT+0x38>
 8015254:	2301      	movs	r3, #1
 8015256:	e000      	b.n	801525a <duplex_checkINT+0x3a>
 8015258:	2300      	movs	r3, #0
 801525a:	f003 0301 	and.w	r3, r3, #1
 801525e:	b2db      	uxtb	r3, r3
}
 8015260:	4618      	mov	r0, r3
 8015262:	bd80      	pop	{r7, pc}
 8015264:	20000de0 	.word	0x20000de0
 8015268:	200010f4 	.word	0x200010f4
 801526c:	00000000 	.word	0x00000000

08015270 <decodePacket>:

static void decodePacket()
{
 8015270:	b590      	push	{r4, r7, lr}
 8015272:	b083      	sub	sp, #12
 8015274:	af00      	add	r7, sp, #0
	if (Common.radio.newPacket)
 8015276:	4b50      	ldr	r3, [pc, #320]	; (80153b8 <decodePacket+0x148>)
 8015278:	f893 334c 	ldrb.w	r3, [r3, #844]	; 0x34c
 801527c:	2b00      	cmp	r3, #0
 801527e:	f000 8090 	beq.w	80153a2 <decodePacket+0x132>
	{
		// format: MOT-1/8, SER-1/8, OPMOD-6/8, ANG-1, LAT-4, LON-4, ALT-2
		uint32_t temv = 0;
 8015282:	2300      	movs	r3, #0
 8015284:	607b      	str	r3, [r7, #4]

		temv = (uint32_t)Common.radio.rxBuffer[0];
 8015286:	4b4c      	ldr	r3, [pc, #304]	; (80153b8 <decodePacket+0x148>)
 8015288:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 801528c:	607b      	str	r3, [r7, #4]
		Common.operation_mode = temv >> 2;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	089b      	lsrs	r3, r3, #2
 8015292:	b2da      	uxtb	r2, r3
 8015294:	4b48      	ldr	r3, [pc, #288]	; (80153b8 <decodePacket+0x148>)
 8015296:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc
		if (Common.operation_mode == 3)
 801529a:	4b47      	ldr	r3, [pc, #284]	; (80153b8 <decodePacket+0x148>)
 801529c:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 80152a0:	2b03      	cmp	r3, #3
 80152a2:	d116      	bne.n	80152d2 <decodePacket+0x62>
		{
			Common.motors_enabled = temv & (1 << 0);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f003 0301 	and.w	r3, r3, #1
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	bf14      	ite	ne
 80152ae:	2301      	movne	r3, #1
 80152b0:	2300      	moveq	r3, #0
 80152b2:	b2da      	uxtb	r2, r3
 80152b4:	4b40      	ldr	r3, [pc, #256]	; (80153b8 <decodePacket+0x148>)
 80152b6:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
			Common.servo_enabled = temv & (1 << 1);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f003 0302 	and.w	r3, r3, #2
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	bf14      	ite	ne
 80152c4:	2301      	movne	r3, #1
 80152c6:	2300      	moveq	r3, #0
 80152c8:	b2da      	uxtb	r2, r3
 80152ca:	4b3b      	ldr	r3, [pc, #236]	; (80153b8 <decodePacket+0x148>)
 80152cc:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
 80152d0:	e00d      	b.n	80152ee <decodePacket+0x7e>
		}
		else if (Common.operation_mode > 3 && Common.operation_mode != 31) Common.operation_mode = 0;
 80152d2:	4b39      	ldr	r3, [pc, #228]	; (80153b8 <decodePacket+0x148>)
 80152d4:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 80152d8:	2b03      	cmp	r3, #3
 80152da:	d908      	bls.n	80152ee <decodePacket+0x7e>
 80152dc:	4b36      	ldr	r3, [pc, #216]	; (80153b8 <decodePacket+0x148>)
 80152de:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 80152e2:	2b1f      	cmp	r3, #31
 80152e4:	d003      	beq.n	80152ee <decodePacket+0x7e>
 80152e6:	4b34      	ldr	r3, [pc, #208]	; (80153b8 <decodePacket+0x148>)
 80152e8:	2200      	movs	r2, #0
 80152ea:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc

		if (Common.operation_mode == 2 || Common.operation_mode == 3)
 80152ee:	4b32      	ldr	r3, [pc, #200]	; (80153b8 <decodePacket+0x148>)
 80152f0:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 80152f4:	2b02      	cmp	r3, #2
 80152f6:	d004      	beq.n	8015302 <decodePacket+0x92>
 80152f8:	4b2f      	ldr	r3, [pc, #188]	; (80153b8 <decodePacket+0x148>)
 80152fa:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 80152fe:	2b03      	cmp	r3, #3
 8015300:	d125      	bne.n	801534e <decodePacket+0xde>
		{
			temv = (uint32_t)Common.radio.rxBuffer[1];
 8015302:	4b2d      	ldr	r3, [pc, #180]	; (80153b8 <decodePacket+0x148>)
 8015304:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 8015308:	607b      	str	r3, [r7, #4]
			Common.target_yaw = (float)(temv) * 360.0 / 255.0;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	ee07 3a90 	vmov	s15, r3
 8015310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015314:	ee17 0a90 	vmov	r0, s15
 8015318:	f7eb f926 	bl	8000568 <__aeabi_f2d>
 801531c:	f04f 0200 	mov.w	r2, #0
 8015320:	4b26      	ldr	r3, [pc, #152]	; (80153bc <decodePacket+0x14c>)
 8015322:	f7eb f979 	bl	8000618 <__aeabi_dmul>
 8015326:	4603      	mov	r3, r0
 8015328:	460c      	mov	r4, r1
 801532a:	4618      	mov	r0, r3
 801532c:	4621      	mov	r1, r4
 801532e:	a320      	add	r3, pc, #128	; (adr r3, 80153b0 <decodePacket+0x140>)
 8015330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015334:	f7eb fa9a 	bl	800086c <__aeabi_ddiv>
 8015338:	4603      	mov	r3, r0
 801533a:	460c      	mov	r4, r1
 801533c:	4618      	mov	r0, r3
 801533e:	4621      	mov	r1, r4
 8015340:	f7eb fc62 	bl	8000c08 <__aeabi_d2f>
 8015344:	4602      	mov	r2, r0
 8015346:	4b1c      	ldr	r3, [pc, #112]	; (80153b8 <decodePacket+0x148>)
 8015348:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 801534c:	601a      	str	r2, [r3, #0]
		}
		if (Common.radio.rxLen == 13 && Common.operation_mode == 1)
 801534e:	4b1a      	ldr	r3, [pc, #104]	; (80153b8 <decodePacket+0x148>)
 8015350:	f893 335b 	ldrb.w	r3, [r3, #859]	; 0x35b
 8015354:	2b0d      	cmp	r3, #13
 8015356:	d120      	bne.n	801539a <decodePacket+0x12a>
 8015358:	4b17      	ldr	r3, [pc, #92]	; (80153b8 <decodePacket+0x148>)
 801535a:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 801535e:	2b01      	cmp	r3, #1
 8015360:	d11b      	bne.n	801539a <decodePacket+0x12a>
		{
			bytesToFloat(Common.radio.rxBuffer + 3, &(Common.target_lat));
 8015362:	4b17      	ldr	r3, [pc, #92]	; (80153c0 <decodePacket+0x150>)
 8015364:	4917      	ldr	r1, [pc, #92]	; (80153c4 <decodePacket+0x154>)
 8015366:	4618      	mov	r0, r3
 8015368:	f7fe fe32 	bl	8013fd0 <bytesToFloat>
			bytesToFloat(Common.radio.rxBuffer + 7, &(Common.target_lon));
 801536c:	4b16      	ldr	r3, [pc, #88]	; (80153c8 <decodePacket+0x158>)
 801536e:	4917      	ldr	r1, [pc, #92]	; (80153cc <decodePacket+0x15c>)
 8015370:	4618      	mov	r0, r3
 8015372:	f7fe fe2d 	bl	8013fd0 <bytesToFloat>
			
			memcpy((uint8_t*)&temv, Common.radio.rxBuffer + 11, 2);
 8015376:	4b16      	ldr	r3, [pc, #88]	; (80153d0 <decodePacket+0x160>)
 8015378:	881b      	ldrh	r3, [r3, #0]
 801537a:	b29b      	uxth	r3, r3
 801537c:	80bb      	strh	r3, [r7, #4]
			Common.target_alt = (float)(temv) / 10;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	ee07 3a90 	vmov	s15, r3
 8015384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015388:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801538c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015390:	4b09      	ldr	r3, [pc, #36]	; (80153b8 <decodePacket+0x148>)
 8015392:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8015396:	edc3 7a00 	vstr	s15, [r3]
		}
		togglePin(LEDB);
 801539a:	2102      	movs	r1, #2
 801539c:	480d      	ldr	r0, [pc, #52]	; (80153d4 <decodePacket+0x164>)
 801539e:	f7f2 f9fa 	bl	8007796 <HAL_GPIO_TogglePin>
	}
}
 80153a2:	bf00      	nop
 80153a4:	370c      	adds	r7, #12
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd90      	pop	{r4, r7, pc}
 80153aa:	bf00      	nop
 80153ac:	f3af 8000 	nop.w
 80153b0:	00000000 	.word	0x00000000
 80153b4:	406fe000 	.word	0x406fe000
 80153b8:	20000de0 	.word	0x20000de0
 80153bc:	40768000 	.word	0x40768000
 80153c0:	2000113f 	.word	0x2000113f
 80153c4:	2000158c 	.word	0x2000158c
 80153c8:	20001143 	.word	0x20001143
 80153cc:	20001590 	.word	0x20001590
 80153d0:	20001147 	.word	0x20001147
 80153d4:	40020800 	.word	0x40020800

080153d8 <preparePacket>:

static void preparePacket()
{
 80153d8:	b590      	push	{r4, r7, lr}
 80153da:	b083      	sub	sp, #12
 80153dc:	af00      	add	r7, sp, #0
	// format: TEMP-2, PRES-3, LAT-4, LON-4, ALT-2, YAW-1, PITCH-1, ROLL-1, SPS1-1, SPS10-1, OPMODE-1, PN-1
	uint32_t temv = 0;
 80153de:	2300      	movs	r3, #0
 80153e0:	607b      	str	r3, [r7, #4]

	temv = (uint32_t)((Common.bmp.temperature + 10) * 1000);
 80153e2:	4b63      	ldr	r3, [pc, #396]	; (8015570 <preparePacket+0x198>)
 80153e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80153e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80153ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80153f0:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8015574 <preparePacket+0x19c>
 80153f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80153f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80153fc:	ee17 3a90 	vmov	r3, s15
 8015400:	607b      	str	r3, [r7, #4]
	memcpy(Common.radio.txBuffer + 0, (uint8_t*)&temv, 2);	// 0:1
 8015402:	88ba      	ldrh	r2, [r7, #4]
 8015404:	4b5a      	ldr	r3, [pc, #360]	; (8015570 <preparePacket+0x198>)
 8015406:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c

	temv = (uint32_t)(Common.bmp.pressure * 10000);
 801540a:	4b59      	ldr	r3, [pc, #356]	; (8015570 <preparePacket+0x198>)
 801540c:	edd3 7a03 	vldr	s15, [r3, #12]
 8015410:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015578 <preparePacket+0x1a0>
 8015414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801541c:	ee17 3a90 	vmov	r3, s15
 8015420:	607b      	str	r3, [r7, #4]
	memcpy(Common.radio.txBuffer + 2, (uint8_t*)&temv, 3);	// 2:5
 8015422:	4856      	ldr	r0, [pc, #344]	; (801557c <preparePacket+0x1a4>)
 8015424:	1d3b      	adds	r3, r7, #4
 8015426:	2203      	movs	r2, #3
 8015428:	4619      	mov	r1, r3
 801542a:	f003 fb95 	bl	8018b58 <memcpy>

	floatToBytes(&(Common.gps.latitudeDegrees), Common.radio.txBuffer + 6);		// 6:9
 801542e:	4b54      	ldr	r3, [pc, #336]	; (8015580 <preparePacket+0x1a8>)
 8015430:	4619      	mov	r1, r3
 8015432:	4854      	ldr	r0, [pc, #336]	; (8015584 <preparePacket+0x1ac>)
 8015434:	f7fe fdb0 	bl	8013f98 <floatToBytes>
	floatToBytes(&(Common.gps.longitudeDegrees), Common.radio.txBuffer + 10);	// 10:13
 8015438:	4b53      	ldr	r3, [pc, #332]	; (8015588 <preparePacket+0x1b0>)
 801543a:	4619      	mov	r1, r3
 801543c:	4853      	ldr	r0, [pc, #332]	; (801558c <preparePacket+0x1b4>)
 801543e:	f7fe fdab 	bl	8013f98 <floatToBytes>

	temv = (uint32_t)(Common.gps.altitude * 10);
 8015442:	4b4b      	ldr	r3, [pc, #300]	; (8015570 <preparePacket+0x198>)
 8015444:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8015448:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801544c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015454:	ee17 3a90 	vmov	r3, s15
 8015458:	607b      	str	r3, [r7, #4]
	memcpy(Common.radio.txBuffer + 14, (uint8_t*)&temv, 2);	// 14:15
 801545a:	4a4d      	ldr	r2, [pc, #308]	; (8015590 <preparePacket+0x1b8>)
 801545c:	88bb      	ldrh	r3, [r7, #4]
 801545e:	8013      	strh	r3, [r2, #0]

	Common.radio.txBuffer[16] = (uint8_t)(Common.mpu.yaw * (255.0 / 360.0));	// 16
 8015460:	4b43      	ldr	r3, [pc, #268]	; (8015570 <preparePacket+0x198>)
 8015462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015464:	4618      	mov	r0, r3
 8015466:	f7eb f87f 	bl	8000568 <__aeabi_f2d>
 801546a:	a33d      	add	r3, pc, #244	; (adr r3, 8015560 <preparePacket+0x188>)
 801546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015470:	f7eb f8d2 	bl	8000618 <__aeabi_dmul>
 8015474:	4603      	mov	r3, r0
 8015476:	460c      	mov	r4, r1
 8015478:	4618      	mov	r0, r3
 801547a:	4621      	mov	r1, r4
 801547c:	f7eb fba4 	bl	8000bc8 <__aeabi_d2uiz>
 8015480:	4603      	mov	r3, r0
 8015482:	b2da      	uxtb	r2, r3
 8015484:	4b3a      	ldr	r3, [pc, #232]	; (8015570 <preparePacket+0x198>)
 8015486:	f883 246c 	strb.w	r2, [r3, #1132]	; 0x46c
	Common.radio.txBuffer[17] = (uint8_t)(Common.mpu.pitch * (255.0 / 360.0));	// 17
 801548a:	4b39      	ldr	r3, [pc, #228]	; (8015570 <preparePacket+0x198>)
 801548c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801548e:	4618      	mov	r0, r3
 8015490:	f7eb f86a 	bl	8000568 <__aeabi_f2d>
 8015494:	a332      	add	r3, pc, #200	; (adr r3, 8015560 <preparePacket+0x188>)
 8015496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801549a:	f7eb f8bd 	bl	8000618 <__aeabi_dmul>
 801549e:	4603      	mov	r3, r0
 80154a0:	460c      	mov	r4, r1
 80154a2:	4618      	mov	r0, r3
 80154a4:	4621      	mov	r1, r4
 80154a6:	f7eb fb8f 	bl	8000bc8 <__aeabi_d2uiz>
 80154aa:	4603      	mov	r3, r0
 80154ac:	b2da      	uxtb	r2, r3
 80154ae:	4b30      	ldr	r3, [pc, #192]	; (8015570 <preparePacket+0x198>)
 80154b0:	f883 246d 	strb.w	r2, [r3, #1133]	; 0x46d
	Common.radio.txBuffer[18] = (uint8_t)(Common.mpu.roll * (255.0 / 360.0));	// 18
 80154b4:	4b2e      	ldr	r3, [pc, #184]	; (8015570 <preparePacket+0x198>)
 80154b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7eb f855 	bl	8000568 <__aeabi_f2d>
 80154be:	a328      	add	r3, pc, #160	; (adr r3, 8015560 <preparePacket+0x188>)
 80154c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c4:	f7eb f8a8 	bl	8000618 <__aeabi_dmul>
 80154c8:	4603      	mov	r3, r0
 80154ca:	460c      	mov	r4, r1
 80154cc:	4618      	mov	r0, r3
 80154ce:	4621      	mov	r1, r4
 80154d0:	f7eb fb7a 	bl	8000bc8 <__aeabi_d2uiz>
 80154d4:	4603      	mov	r3, r0
 80154d6:	b2da      	uxtb	r2, r3
 80154d8:	4b25      	ldr	r3, [pc, #148]	; (8015570 <preparePacket+0x198>)
 80154da:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e

	Common.radio.txBuffer[19] = (uint8_t)(Common.sps.pm1 * (255.0 / 50.0));	// 19
 80154de:	4b24      	ldr	r3, [pc, #144]	; (8015570 <preparePacket+0x198>)
 80154e0:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7eb f83e 	bl	8000568 <__aeabi_f2d>
 80154ec:	a31e      	add	r3, pc, #120	; (adr r3, 8015568 <preparePacket+0x190>)
 80154ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f2:	f7eb f891 	bl	8000618 <__aeabi_dmul>
 80154f6:	4603      	mov	r3, r0
 80154f8:	460c      	mov	r4, r1
 80154fa:	4618      	mov	r0, r3
 80154fc:	4621      	mov	r1, r4
 80154fe:	f7eb fb63 	bl	8000bc8 <__aeabi_d2uiz>
 8015502:	4603      	mov	r3, r0
 8015504:	b2da      	uxtb	r2, r3
 8015506:	4b1a      	ldr	r3, [pc, #104]	; (8015570 <preparePacket+0x198>)
 8015508:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
	Common.radio.txBuffer[20] = (uint8_t)(Common.sps.pm10 * (255.0 / 50.0));	// 20
 801550c:	4b18      	ldr	r3, [pc, #96]	; (8015570 <preparePacket+0x198>)
 801550e:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	4618      	mov	r0, r3
 8015516:	f7eb f827 	bl	8000568 <__aeabi_f2d>
 801551a:	a313      	add	r3, pc, #76	; (adr r3, 8015568 <preparePacket+0x190>)
 801551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015520:	f7eb f87a 	bl	8000618 <__aeabi_dmul>
 8015524:	4603      	mov	r3, r0
 8015526:	460c      	mov	r4, r1
 8015528:	4618      	mov	r0, r3
 801552a:	4621      	mov	r1, r4
 801552c:	f7eb fb4c 	bl	8000bc8 <__aeabi_d2uiz>
 8015530:	4603      	mov	r3, r0
 8015532:	b2da      	uxtb	r2, r3
 8015534:	4b0e      	ldr	r3, [pc, #56]	; (8015570 <preparePacket+0x198>)
 8015536:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470

	Common.radio.txBuffer[21] = Common.operation_mode;	// 21
 801553a:	4b0d      	ldr	r3, [pc, #52]	; (8015570 <preparePacket+0x198>)
 801553c:	f893 27bc 	ldrb.w	r2, [r3, #1980]	; 0x7bc
 8015540:	4b0b      	ldr	r3, [pc, #44]	; (8015570 <preparePacket+0x198>)
 8015542:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
	Common.radio.txBuffer[22] = packetNumber;			// 22
 8015546:	4b13      	ldr	r3, [pc, #76]	; (8015594 <preparePacket+0x1bc>)
 8015548:	781a      	ldrb	r2, [r3, #0]
 801554a:	4b09      	ldr	r3, [pc, #36]	; (8015570 <preparePacket+0x198>)
 801554c:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
	Common.radio.txLen = 23;
 8015550:	4b07      	ldr	r3, [pc, #28]	; (8015570 <preparePacket+0x198>)
 8015552:	2217      	movs	r2, #23
 8015554:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}
 8015558:	bf00      	nop
 801555a:	370c      	adds	r7, #12
 801555c:	46bd      	mov	sp, r7
 801555e:	bd90      	pop	{r4, r7, pc}
 8015560:	aaaaaaab 	.word	0xaaaaaaab
 8015564:	3fe6aaaa 	.word	0x3fe6aaaa
 8015568:	66666666 	.word	0x66666666
 801556c:	40146666 	.word	0x40146666
 8015570:	20000de0 	.word	0x20000de0
 8015574:	447a0000 	.word	0x447a0000
 8015578:	461c4000 	.word	0x461c4000
 801557c:	2000123e 	.word	0x2000123e
 8015580:	20001242 	.word	0x20001242
 8015584:	20000f20 	.word	0x20000f20
 8015588:	20001246 	.word	0x20001246
 801558c:	20000f24 	.word	0x20000f24
 8015590:	2000124a 	.word	0x2000124a
 8015594:	20003cd2 	.word	0x20003cd2

08015598 <duplex_loop>:

static void duplex_loop(void)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	af00      	add	r7, sp, #0
	#if RADIO_ENABLE
		if (Common.radio.active && Common.radio.useDio0IRQ && duplex_checkINT())	// Manually check for interrupt
 801559c:	4b21      	ldr	r3, [pc, #132]	; (8015624 <duplex_loop+0x8c>)
 801559e:	f893 355c 	ldrb.w	r3, [r3, #1372]	; 0x55c
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d03b      	beq.n	801561e <duplex_loop+0x86>
 80155a6:	4b1f      	ldr	r3, [pc, #124]	; (8015624 <duplex_loop+0x8c>)
 80155a8:	f893 3358 	ldrb.w	r3, [r3, #856]	; 0x358
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d036      	beq.n	801561e <duplex_loop+0x86>
 80155b0:	f7ff fe36 	bl	8015220 <duplex_checkINT>
 80155b4:	4603      	mov	r3, r0
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d031      	beq.n	801561e <duplex_loop+0x86>
		{
			SX1278_dio0_IRQ(&(Common.radio));
 80155ba:	481b      	ldr	r0, [pc, #108]	; (8015628 <duplex_loop+0x90>)
 80155bc:	f7ec fb65 	bl	8001c8a <SX1278_dio0_IRQ>
			if (!transmitting)	// If in receiving mode: decode packet
 80155c0:	4b1a      	ldr	r3, [pc, #104]	; (801562c <duplex_loop+0x94>)
 80155c2:	781b      	ldrb	r3, [r3, #0]
 80155c4:	f083 0301 	eor.w	r3, r3, #1
 80155c8:	b2db      	uxtb	r3, r3
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d001      	beq.n	80155d2 <duplex_loop+0x3a>
			{
				decodePacket();
 80155ce:	f7ff fe4f 	bl	8015270 <decodePacket>
						println("[DUPLEX] Receive timeout.");
					}
				#endif
			}

			transmitting = true;
 80155d2:	4b16      	ldr	r3, [pc, #88]	; (801562c <duplex_loop+0x94>)
 80155d4:	2201      	movs	r2, #1
 80155d6:	701a      	strb	r2, [r3, #0]

			if (packetNumber == DUPLEX_TX_COUNT)
 80155d8:	4b15      	ldr	r3, [pc, #84]	; (8015630 <duplex_loop+0x98>)
 80155da:	781b      	ldrb	r3, [r3, #0]
 80155dc:	2b05      	cmp	r3, #5
 80155de:	d109      	bne.n	80155f4 <duplex_loop+0x5c>
			{
				SX1278_receive(&(Common.radio));
 80155e0:	4811      	ldr	r0, [pc, #68]	; (8015628 <duplex_loop+0x90>)
 80155e2:	f7ec f92d 	bl	8001840 <SX1278_receive>
					if (Common.radio.rxTimeout)
					{
						println("[DUPLEX] Receive start.");
					}
				#endif
				packetNumber = 0;
 80155e6:	4b12      	ldr	r3, [pc, #72]	; (8015630 <duplex_loop+0x98>)
 80155e8:	2200      	movs	r2, #0
 80155ea:	701a      	strb	r2, [r3, #0]
				transmitting = false;
 80155ec:	4b0f      	ldr	r3, [pc, #60]	; (801562c <duplex_loop+0x94>)
 80155ee:	2200      	movs	r2, #0
 80155f0:	701a      	strb	r2, [r3, #0]
				return;
 80155f2:	e015      	b.n	8015620 <duplex_loop+0x88>
			}
			else
			{
				preparePacket();
 80155f4:	f7ff fef0 	bl	80153d8 <preparePacket>
				SX1278_transmit(&(Common.radio), Common.radio.txBuffer, Common.radio.txLen);	// Packet is written directly to memory buffer of the instance
 80155f8:	4b0a      	ldr	r3, [pc, #40]	; (8015624 <duplex_loop+0x8c>)
 80155fa:	f893 335a 	ldrb.w	r3, [r3, #858]	; 0x35a
 80155fe:	461a      	mov	r2, r3
 8015600:	490c      	ldr	r1, [pc, #48]	; (8015634 <duplex_loop+0x9c>)
 8015602:	4809      	ldr	r0, [pc, #36]	; (8015628 <duplex_loop+0x90>)
 8015604:	f7ec f8e0 	bl	80017c8 <SX1278_transmit>
				togglePin(LEDA);
 8015608:	2101      	movs	r1, #1
 801560a:	480b      	ldr	r0, [pc, #44]	; (8015638 <duplex_loop+0xa0>)
 801560c:	f7f2 f8c3 	bl	8007796 <HAL_GPIO_TogglePin>
				packetNumber++;
 8015610:	4b07      	ldr	r3, [pc, #28]	; (8015630 <duplex_loop+0x98>)
 8015612:	781b      	ldrb	r3, [r3, #0]
 8015614:	3301      	adds	r3, #1
 8015616:	b2da      	uxtb	r2, r3
 8015618:	4b05      	ldr	r3, [pc, #20]	; (8015630 <duplex_loop+0x98>)
 801561a:	701a      	strb	r2, [r3, #0]
				return;
 801561c:	e000      	b.n	8015620 <duplex_loop+0x88>
			}
		}
	#endif
	return;
 801561e:	bf00      	nop
}
 8015620:	bd80      	pop	{r7, pc}
 8015622:	bf00      	nop
 8015624:	20000de0 	.word	0x20000de0
 8015628:	200010f4 	.word	0x200010f4
 801562c:	20003cd3 	.word	0x20003cd3
 8015630:	20003cd2 	.word	0x20003cd2
 8015634:	2000123c 	.word	0x2000123c
 8015638:	40020800 	.word	0x40020800

0801563c <sensing_setup>:

uint32_t lastBmpRead;
uint32_t lastSpsRead;

static bool sensing_setup(void)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b082      	sub	sp, #8
 8015640:	af00      	add	r7, sp, #0
	(*Common.log_print)("*S00"); // [SENSING] Hello!
 8015642:	4bb2      	ldr	r3, [pc, #712]	; (801590c <sensing_setup+0x2d0>)
 8015644:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8015648:	48b1      	ldr	r0, [pc, #708]	; (8015910 <sensing_setup+0x2d4>)
 801564a:	4798      	blx	r3
	uint8_t attempts;
	#if BMP_ENABLE
		attempts = 0;
 801564c:	2300      	movs	r3, #0
 801564e:	71fb      	strb	r3, [r7, #7]
		Common.bmp.i2c_addr = BMP280_I2C_ADDRESS;
 8015650:	4bae      	ldr	r3, [pc, #696]	; (801590c <sensing_setup+0x2d0>)
 8015652:	22ee      	movs	r2, #238	; 0xee
 8015654:	809a      	strh	r2, [r3, #4]
		Common.bmp.i2c = Get_I2C1_Instance();
 8015656:	f001 fe91 	bl	801737c <Get_I2C1_Instance>
 801565a:	4602      	mov	r2, r0
 801565c:	4bab      	ldr	r3, [pc, #684]	; (801590c <sensing_setup+0x2d0>)
 801565e:	601a      	str	r2, [r3, #0]
		#if SENSING_DEBUG
			println("[SENSING] Initializing BMP280");
 8015660:	48ac      	ldr	r0, [pc, #688]	; (8015914 <sensing_setup+0x2d8>)
 8015662:	f7fe fc45 	bl	8013ef0 <println>
		#endif
		(*Common.log_print)("*S10");
 8015666:	4ba9      	ldr	r3, [pc, #676]	; (801590c <sensing_setup+0x2d0>)
 8015668:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 801566c:	48aa      	ldr	r0, [pc, #680]	; (8015918 <sensing_setup+0x2dc>)
 801566e:	4798      	blx	r3
		
		while (!bmp280_init(&(Common.bmp), &bmp280_default_config))
 8015670:	e015      	b.n	801569e <sensing_setup+0x62>
		{
			if (++attempts > 5)
 8015672:	79fb      	ldrb	r3, [r7, #7]
 8015674:	3301      	adds	r3, #1
 8015676:	71fb      	strb	r3, [r7, #7]
 8015678:	79fb      	ldrb	r3, [r7, #7]
 801567a:	2b05      	cmp	r3, #5
 801567c:	d908      	bls.n	8015690 <sensing_setup+0x54>
			{
				#if SENSING_DEBUG
					println("error: [SENSING] No connection with BMP280, sensor is not active");
 801567e:	48a7      	ldr	r0, [pc, #668]	; (801591c <sensing_setup+0x2e0>)
 8015680:	f7fe fc36 	bl	8013ef0 <println>
				#endif
				(*Common.log_print)("*ES10");
 8015684:	4ba1      	ldr	r3, [pc, #644]	; (801590c <sensing_setup+0x2d0>)
 8015686:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 801568a:	48a5      	ldr	r0, [pc, #660]	; (8015920 <sensing_setup+0x2e4>)
 801568c:	4798      	blx	r3
				break;
 801568e:	e010      	b.n	80156b2 <sensing_setup+0x76>
			}

			delay(500);
 8015690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015694:	f7f1 f9e8 	bl	8006a68 <HAL_Delay>
			#if SENSING_DEBUG
				println("[SENSING] BMP280 init unsuccesfull, retrying...");
 8015698:	48a2      	ldr	r0, [pc, #648]	; (8015924 <sensing_setup+0x2e8>)
 801569a:	f7fe fc29 	bl	8013ef0 <println>
		while (!bmp280_init(&(Common.bmp), &bmp280_default_config))
 801569e:	49a2      	ldr	r1, [pc, #648]	; (8015928 <sensing_setup+0x2ec>)
 80156a0:	489a      	ldr	r0, [pc, #616]	; (801590c <sensing_setup+0x2d0>)
 80156a2:	f7ec feba 	bl	800241a <bmp280_init>
 80156a6:	4603      	mov	r3, r0
 80156a8:	f083 0301 	eor.w	r3, r3, #1
 80156ac:	b2db      	uxtb	r3, r3
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d1df      	bne.n	8015672 <sensing_setup+0x36>
		(*Common.log_print)("*WS10");
		Common.bmp.active = false;
	#endif

	#if GPS_ENABLE
		attempts = 0;
 80156b2:	2300      	movs	r3, #0
 80156b4:	71fb      	strb	r3, [r7, #7]
		Common.gps.uart = Get_UART1_Instance();
 80156b6:	f001 fe75 	bl	80173a4 <Get_UART1_Instance>
 80156ba:	4602      	mov	r2, r0
 80156bc:	4b93      	ldr	r3, [pc, #588]	; (801590c <sensing_setup+0x2d0>)
 80156be:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		#if SENSING_DEBUG
			println("[SENSING] Initializing L86");
 80156c2:	489a      	ldr	r0, [pc, #616]	; (801592c <sensing_setup+0x2f0>)
 80156c4:	f7fe fc14 	bl	8013ef0 <println>
		#endif
		(*Common.log_print)("*S20");
 80156c8:	4b90      	ldr	r3, [pc, #576]	; (801590c <sensing_setup+0x2d0>)
 80156ca:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80156ce:	4898      	ldr	r0, [pc, #608]	; (8015930 <sensing_setup+0x2f4>)
 80156d0:	4798      	blx	r3

		while (!GPS_init(&(Common.gps)))
 80156d2:	e015      	b.n	8015700 <sensing_setup+0xc4>
		{
			if (++attempts > 5)
 80156d4:	79fb      	ldrb	r3, [r7, #7]
 80156d6:	3301      	adds	r3, #1
 80156d8:	71fb      	strb	r3, [r7, #7]
 80156da:	79fb      	ldrb	r3, [r7, #7]
 80156dc:	2b05      	cmp	r3, #5
 80156de:	d908      	bls.n	80156f2 <sensing_setup+0xb6>
			{
				#if SENSING_DEBUG
					println("error: [SENSING] No connection with L86, no GPS data will be avaliable");
 80156e0:	4894      	ldr	r0, [pc, #592]	; (8015934 <sensing_setup+0x2f8>)
 80156e2:	f7fe fc05 	bl	8013ef0 <println>
				#endif
				(*Common.log_print)("*ES20");
 80156e6:	4b89      	ldr	r3, [pc, #548]	; (801590c <sensing_setup+0x2d0>)
 80156e8:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80156ec:	4892      	ldr	r0, [pc, #584]	; (8015938 <sensing_setup+0x2fc>)
 80156ee:	4798      	blx	r3
				break;
 80156f0:	e00f      	b.n	8015712 <sensing_setup+0xd6>
			}

			delay(500);
 80156f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80156f6:	f7f1 f9b7 	bl	8006a68 <HAL_Delay>
			#if SENSING_DEBUG
				println("[SENSING] L86 init unsuccesfull, retrying...");
 80156fa:	4890      	ldr	r0, [pc, #576]	; (801593c <sensing_setup+0x300>)
 80156fc:	f7fe fbf8 	bl	8013ef0 <println>
		while (!GPS_init(&(Common.gps)))
 8015700:	488f      	ldr	r0, [pc, #572]	; (8015940 <sensing_setup+0x304>)
 8015702:	f7ed f831 	bl	8002768 <GPS_init>
 8015706:	4603      	mov	r3, r0
 8015708:	f083 0301 	eor.w	r3, r3, #1
 801570c:	b2db      	uxtb	r3, r3
 801570e:	2b00      	cmp	r3, #0
 8015710:	d1e0      	bne.n	80156d4 <sensing_setup+0x98>
			#endif
		}
		Common.gps.active = true; //######################
 8015712:	4b7e      	ldr	r3, [pc, #504]	; (801590c <sensing_setup+0x2d0>)
 8015714:	2201      	movs	r2, #1
 8015716:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
		Common.gps.paused = false;
 801571a:	4b7c      	ldr	r3, [pc, #496]	; (801590c <sensing_setup+0x2d0>)
 801571c:	2200      	movs	r2, #0
 801571e:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
		if (Common.gps.active && !Common.gps.fix)
 8015722:	4b7a      	ldr	r3, [pc, #488]	; (801590c <sensing_setup+0x2d0>)
 8015724:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 8015728:	2b00      	cmp	r3, #0
 801572a:	d013      	beq.n	8015754 <sensing_setup+0x118>
 801572c:	4b77      	ldr	r3, [pc, #476]	; (801590c <sensing_setup+0x2d0>)
 801572e:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8015732:	f083 0301 	eor.w	r3, r3, #1
 8015736:	b2db      	uxtb	r3, r3
 8015738:	2b00      	cmp	r3, #0
 801573a:	d00b      	beq.n	8015754 <sensing_setup+0x118>
		{
			Common.gps.latitudeDegrees = DEFAULT_TARGET_LAT;
 801573c:	4b73      	ldr	r3, [pc, #460]	; (801590c <sensing_setup+0x2d0>)
 801573e:	4a81      	ldr	r2, [pc, #516]	; (8015944 <sensing_setup+0x308>)
 8015740:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			Common.gps.longitudeDegrees = DEFAULT_TARGET_LON;
 8015744:	4b71      	ldr	r3, [pc, #452]	; (801590c <sensing_setup+0x2d0>)
 8015746:	4a80      	ldr	r2, [pc, #512]	; (8015948 <sensing_setup+0x30c>)
 8015748:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
			Common.gps.altitude = DEFAULT_TARGET_ALT;
 801574c:	4b6f      	ldr	r3, [pc, #444]	; (801590c <sensing_setup+0x2d0>)
 801574e:	4a7f      	ldr	r2, [pc, #508]	; (801594c <sensing_setup+0x310>)
 8015750:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
		(*Common.log_print)("*WS20");
		Common.gps.active = false;
	#endif

	#if IMU_ENABLE
		attempts = 0;
 8015754:	2300      	movs	r3, #0
 8015756:	71fb      	strb	r3, [r7, #7]
		Common.mpu.i2c_addr = MPU9250_I2C_ADDRESS;
 8015758:	4b6c      	ldr	r3, [pc, #432]	; (801590c <sensing_setup+0x2d0>)
 801575a:	22d2      	movs	r2, #210	; 0xd2
 801575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		Common.mpu.i2c_addr_ak = AK8963_I2C_ADDRESS;
 8015760:	4b6a      	ldr	r3, [pc, #424]	; (801590c <sensing_setup+0x2d0>)
 8015762:	2218      	movs	r2, #24
 8015764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		Common.mpu.i2c = Get_I2C1_Instance();
 8015768:	f001 fe08 	bl	801737c <Get_I2C1_Instance>
 801576c:	4602      	mov	r2, r0
 801576e:	4b67      	ldr	r3, [pc, #412]	; (801590c <sensing_setup+0x2d0>)
 8015770:	639a      	str	r2, [r3, #56]	; 0x38
		#if SENSING_DEBUG
			println("[SENSING] Initializing MPU9250");
 8015772:	4877      	ldr	r0, [pc, #476]	; (8015950 <sensing_setup+0x314>)
 8015774:	f7fe fbbc 	bl	8013ef0 <println>
		#endif
		(*Common.log_print)("*S30");
 8015778:	4b64      	ldr	r3, [pc, #400]	; (801590c <sensing_setup+0x2d0>)
 801577a:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 801577e:	4875      	ldr	r0, [pc, #468]	; (8015954 <sensing_setup+0x318>)
 8015780:	4798      	blx	r3

		Common.mpu.active = true;
 8015782:	4b62      	ldr	r3, [pc, #392]	; (801590c <sensing_setup+0x2d0>)
 8015784:	2201      	movs	r2, #1
 8015786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		while (!MPU9250_present(&(Common.mpu)))
 801578a:	e019      	b.n	80157c0 <sensing_setup+0x184>
		{
			if (++attempts > 5)
 801578c:	79fb      	ldrb	r3, [r7, #7]
 801578e:	3301      	adds	r3, #1
 8015790:	71fb      	strb	r3, [r7, #7]
 8015792:	79fb      	ldrb	r3, [r7, #7]
 8015794:	2b05      	cmp	r3, #5
 8015796:	d90c      	bls.n	80157b2 <sensing_setup+0x176>
			{
				#if SENSING_DEBUG
					println("error: [SENSING] No connection with MPU9250, no IMU data will be avaliable");
 8015798:	486f      	ldr	r0, [pc, #444]	; (8015958 <sensing_setup+0x31c>)
 801579a:	f7fe fba9 	bl	8013ef0 <println>
				#endif
				(*Common.log_print)("*ES30");
 801579e:	4b5b      	ldr	r3, [pc, #364]	; (801590c <sensing_setup+0x2d0>)
 80157a0:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80157a4:	486d      	ldr	r0, [pc, #436]	; (801595c <sensing_setup+0x320>)
 80157a6:	4798      	blx	r3
				Common.mpu.active = false;
 80157a8:	4b58      	ldr	r3, [pc, #352]	; (801590c <sensing_setup+0x2d0>)
 80157aa:	2200      	movs	r2, #0
 80157ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
				break;
 80157b0:	e00f      	b.n	80157d2 <sensing_setup+0x196>
			}

			delay(500);
 80157b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80157b6:	f7f1 f957 	bl	8006a68 <HAL_Delay>
			#if SENSING_DEBUG
				println("[SENSING] MPU9250 init unsuccesfull, retrying...");
 80157ba:	4869      	ldr	r0, [pc, #420]	; (8015960 <sensing_setup+0x324>)
 80157bc:	f7fe fb98 	bl	8013ef0 <println>
		while (!MPU9250_present(&(Common.mpu)))
 80157c0:	4868      	ldr	r0, [pc, #416]	; (8015964 <sensing_setup+0x328>)
 80157c2:	f7ee fda3 	bl	800430c <MPU9250_present>
 80157c6:	4603      	mov	r3, r0
 80157c8:	f083 0301 	eor.w	r3, r3, #1
 80157cc:	b2db      	uxtb	r3, r3
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d1dc      	bne.n	801578c <sensing_setup+0x150>
			#endif
		}
		if (Common.mpu.active)
 80157d2:	4b4e      	ldr	r3, [pc, #312]	; (801590c <sensing_setup+0x2d0>)
 80157d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d00b      	beq.n	80157f4 <sensing_setup+0x1b8>
		{
			#if SENSING_DEBUG
				println("[SENSING] Initializing AK8963");
 80157dc:	4862      	ldr	r0, [pc, #392]	; (8015968 <sensing_setup+0x32c>)
 80157de:	f7fe fb87 	bl	8013ef0 <println>
			#endif
			(*Common.log_print)("*S31");
 80157e2:	4b4a      	ldr	r3, [pc, #296]	; (801590c <sensing_setup+0x2d0>)
 80157e4:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80157e8:	4860      	ldr	r0, [pc, #384]	; (801596c <sensing_setup+0x330>)
 80157ea:	4798      	blx	r3
			while (!AK8963_present(&(Common.mpu)) && false) //####################
 80157ec:	bf00      	nop
 80157ee:	485d      	ldr	r0, [pc, #372]	; (8015964 <sensing_setup+0x328>)
 80157f0:	f7ee fd9e 	bl	8004330 <AK8963_present>
				#if SENSING_DEBUG
					println("[SENSING] AK8963 init unsuccesfull, retrying...");
				#endif
			}
		}
		if (Common.mpu.active)
 80157f4:	4b45      	ldr	r3, [pc, #276]	; (801590c <sensing_setup+0x2d0>)
 80157f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d065      	beq.n	80158ca <sensing_setup+0x28e>
		{	
			#if SENSING_DEBUG
					println("[SENSING] Checking MPU9250 readings. Don't move the board!");
 80157fe:	485c      	ldr	r0, [pc, #368]	; (8015970 <sensing_setup+0x334>)
 8015800:	f7fe fb76 	bl	8013ef0 <println>
			#endif
			(*Common.log_print)("*S32");
 8015804:	4b41      	ldr	r3, [pc, #260]	; (801590c <sensing_setup+0x2d0>)
 8015806:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 801580a:	485a      	ldr	r0, [pc, #360]	; (8015974 <sensing_setup+0x338>)
 801580c:	4798      	blx	r3
			attempts = 0;
 801580e:	2300      	movs	r3, #0
 8015810:	71fb      	strb	r3, [r7, #7]
			writePin(LEDA, HIGH);
 8015812:	2201      	movs	r2, #1
 8015814:	2101      	movs	r1, #1
 8015816:	4858      	ldr	r0, [pc, #352]	; (8015978 <sensing_setup+0x33c>)
 8015818:	f7f1 ffa4 	bl	8007764 <HAL_GPIO_WritePin>
			delay(500);
 801581c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015820:	f7f1 f922 	bl	8006a68 <HAL_Delay>
			while (!MPU9250_SelfTest(&(Common.mpu)))
 8015824:	e015      	b.n	8015852 <sensing_setup+0x216>
			{
				if (++attempts > 5)
 8015826:	79fb      	ldrb	r3, [r7, #7]
 8015828:	3301      	adds	r3, #1
 801582a:	71fb      	strb	r3, [r7, #7]
 801582c:	79fb      	ldrb	r3, [r7, #7]
 801582e:	2b05      	cmp	r3, #5
 8015830:	d908      	bls.n	8015844 <sensing_setup+0x208>
				{
					#if SENSING_DEBUG
						println("warning: [SENSING] MPU9250 SelfTest not passed, performance issues may occur");
 8015832:	4852      	ldr	r0, [pc, #328]	; (801597c <sensing_setup+0x340>)
 8015834:	f7fe fb5c 	bl	8013ef0 <println>
					#endif
					(*Common.log_print)("*WS32");
 8015838:	4b34      	ldr	r3, [pc, #208]	; (801590c <sensing_setup+0x2d0>)
 801583a:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 801583e:	4850      	ldr	r0, [pc, #320]	; (8015980 <sensing_setup+0x344>)
 8015840:	4798      	blx	r3
					break;
 8015842:	e00f      	b.n	8015864 <sensing_setup+0x228>
				}
				
				delay(500);
 8015844:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015848:	f7f1 f90e 	bl	8006a68 <HAL_Delay>
				#if SENSING_DEBUG
					println("[SENSING] MPU9250 SelfTest failed, retrying...");
 801584c:	484d      	ldr	r0, [pc, #308]	; (8015984 <sensing_setup+0x348>)
 801584e:	f7fe fb4f 	bl	8013ef0 <println>
			while (!MPU9250_SelfTest(&(Common.mpu)))
 8015852:	4844      	ldr	r0, [pc, #272]	; (8015964 <sensing_setup+0x328>)
 8015854:	f7ef f860 	bl	8004918 <MPU9250_SelfTest>
 8015858:	4603      	mov	r3, r0
 801585a:	f083 0301 	eor.w	r3, r3, #1
 801585e:	b2db      	uxtb	r3, r3
 8015860:	2b00      	cmp	r3, #0
 8015862:	d1e0      	bne.n	8015826 <sensing_setup+0x1ea>
				#endif
			}
			(*Common.log_print)("*S33");
 8015864:	4b29      	ldr	r3, [pc, #164]	; (801590c <sensing_setup+0x2d0>)
 8015866:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 801586a:	4847      	ldr	r0, [pc, #284]	; (8015988 <sensing_setup+0x34c>)
 801586c:	4798      	blx	r3
			if (mpu9250_default_config.calibrate)
 801586e:	4b47      	ldr	r3, [pc, #284]	; (801598c <sensing_setup+0x350>)
 8015870:	7c1b      	ldrb	r3, [r3, #16]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d003      	beq.n	801587e <sensing_setup+0x242>
			{
				#if SENSING_DEBUG
					println("[SENSING] Performing MPU9250 calibration. Don't move the board!");
 8015876:	4846      	ldr	r0, [pc, #280]	; (8015990 <sensing_setup+0x354>)
 8015878:	f7fe fb3a 	bl	8013ef0 <println>
 801587c:	e007      	b.n	801588e <sensing_setup+0x252>
				#endif
			}
			else
			{
				#if SENSING_DEBUG
					println("warning: [SENSING] Skipping IMU calibration!");
 801587e:	4845      	ldr	r0, [pc, #276]	; (8015994 <sensing_setup+0x358>)
 8015880:	f7fe fb36 	bl	8013ef0 <println>
				#endif
				(*Common.log_print)("*WS33");
 8015884:	4b21      	ldr	r3, [pc, #132]	; (801590c <sensing_setup+0x2d0>)
 8015886:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 801588a:	4843      	ldr	r0, [pc, #268]	; (8015998 <sensing_setup+0x35c>)
 801588c:	4798      	blx	r3
			}
			MPU9250_init(&(Common.mpu), &mpu9250_default_config);
 801588e:	493f      	ldr	r1, [pc, #252]	; (801598c <sensing_setup+0x350>)
 8015890:	4834      	ldr	r0, [pc, #208]	; (8015964 <sensing_setup+0x328>)
 8015892:	f7ee fb59 	bl	8003f48 <MPU9250_init>
			writePin(LEDA, LOW);
 8015896:	2200      	movs	r2, #0
 8015898:	2101      	movs	r1, #1
 801589a:	4837      	ldr	r0, [pc, #220]	; (8015978 <sensing_setup+0x33c>)
 801589c:	f7f1 ff62 	bl	8007764 <HAL_GPIO_WritePin>
			writePin(LEDB, HIGH);
 80158a0:	2201      	movs	r2, #1
 80158a2:	2102      	movs	r1, #2
 80158a4:	4834      	ldr	r0, [pc, #208]	; (8015978 <sensing_setup+0x33c>)
 80158a6:	f7f1 ff5d 	bl	8007764 <HAL_GPIO_WritePin>
			if (mpu9250_default_config.calibrate)
 80158aa:	4b38      	ldr	r3, [pc, #224]	; (801598c <sensing_setup+0x350>)
 80158ac:	7c1b      	ldrb	r3, [r3, #16]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d002      	beq.n	80158b8 <sensing_setup+0x27c>
			{
				#if SENSING_DEBUG
					println("[SENSING] Performing AK8963 calibration. Rotate the board.");
 80158b2:	483a      	ldr	r0, [pc, #232]	; (801599c <sensing_setup+0x360>)
 80158b4:	f7fe fb1c 	bl	8013ef0 <println>
				#endif
			}
			AK8963_init(&(Common.mpu), &mpu9250_default_config);
 80158b8:	4934      	ldr	r1, [pc, #208]	; (801598c <sensing_setup+0x350>)
 80158ba:	482a      	ldr	r0, [pc, #168]	; (8015964 <sensing_setup+0x328>)
 80158bc:	f7ee fc80 	bl	80041c0 <AK8963_init>
			writePin(LEDB, LOW);
 80158c0:	2200      	movs	r2, #0
 80158c2:	2102      	movs	r1, #2
 80158c4:	482c      	ldr	r0, [pc, #176]	; (8015978 <sensing_setup+0x33c>)
 80158c6:	f7f1 ff4d 	bl	8007764 <HAL_GPIO_WritePin>
		(*Common.log_print)("*WS30");
		Common.mpu.active = false;
	#endif

	#if SPS_ENABLE
		attempts = 0;
 80158ca:	2300      	movs	r3, #0
 80158cc:	71fb      	strb	r3, [r7, #7]
		Common.sps.uart = Get_UART2_Instance();
 80158ce:	f001 fd73 	bl	80173b8 <Get_UART2_Instance>
 80158d2:	4602      	mov	r2, r0
 80158d4:	4b0d      	ldr	r3, [pc, #52]	; (801590c <sensing_setup+0x2d0>)
 80158d6:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
		#if SENSING_DEBUG
			println("[SENSING] Initializing SPS30");
 80158da:	4831      	ldr	r0, [pc, #196]	; (80159a0 <sensing_setup+0x364>)
 80158dc:	f7fe fb08 	bl	8013ef0 <println>
		#endif
		(*Common.log_print)("*S40");
 80158e0:	4b0a      	ldr	r3, [pc, #40]	; (801590c <sensing_setup+0x2d0>)
 80158e2:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80158e6:	482f      	ldr	r0, [pc, #188]	; (80159a4 <sensing_setup+0x368>)
 80158e8:	4798      	blx	r3

		while (!SPS30_init(&(Common.sps)))
 80158ea:	e068      	b.n	80159be <sensing_setup+0x382>
		{
			if (++attempts > 5)
 80158ec:	79fb      	ldrb	r3, [r7, #7]
 80158ee:	3301      	adds	r3, #1
 80158f0:	71fb      	strb	r3, [r7, #7]
 80158f2:	79fb      	ldrb	r3, [r7, #7]
 80158f4:	2b05      	cmp	r3, #5
 80158f6:	d95b      	bls.n	80159b0 <sensing_setup+0x374>
			{
				#if SENSING_DEBUG
					println("error: [SENSING] No connection with SPS30, sensor is not active");
 80158f8:	482b      	ldr	r0, [pc, #172]	; (80159a8 <sensing_setup+0x36c>)
 80158fa:	f7fe faf9 	bl	8013ef0 <println>
				#endif
				(*Common.log_print)("*ES40");
 80158fe:	4b03      	ldr	r3, [pc, #12]	; (801590c <sensing_setup+0x2d0>)
 8015900:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8015904:	4829      	ldr	r0, [pc, #164]	; (80159ac <sensing_setup+0x370>)
 8015906:	4798      	blx	r3
				break;
 8015908:	e062      	b.n	80159d0 <sensing_setup+0x394>
 801590a:	bf00      	nop
 801590c:	20000de0 	.word	0x20000de0
 8015910:	0801fe20 	.word	0x0801fe20
 8015914:	0801fe28 	.word	0x0801fe28
 8015918:	0801fe48 	.word	0x0801fe48
 801591c:	0801fe50 	.word	0x0801fe50
 8015920:	0801fe94 	.word	0x0801fe94
 8015924:	0801fe9c 	.word	0x0801fe9c
 8015928:	20000124 	.word	0x20000124
 801592c:	0801fecc 	.word	0x0801fecc
 8015930:	0801fee8 	.word	0x0801fee8
 8015934:	0801fef0 	.word	0x0801fef0
 8015938:	0801ff38 	.word	0x0801ff38
 801593c:	0801ff40 	.word	0x0801ff40
 8015940:	20000ed4 	.word	0x20000ed4
 8015944:	424836d1 	.word	0x424836d1
 8015948:	419f7b4b 	.word	0x419f7b4b
 801594c:	43828000 	.word	0x43828000
 8015950:	0801ff70 	.word	0x0801ff70
 8015954:	0801ff90 	.word	0x0801ff90
 8015958:	0801ff98 	.word	0x0801ff98
 801595c:	0801ffe4 	.word	0x0801ffe4
 8015960:	0801ffec 	.word	0x0801ffec
 8015964:	20000e18 	.word	0x20000e18
 8015968:	08020020 	.word	0x08020020
 801596c:	08020040 	.word	0x08020040
 8015970:	08020048 	.word	0x08020048
 8015974:	08020084 	.word	0x08020084
 8015978:	40020800 	.word	0x40020800
 801597c:	0802008c 	.word	0x0802008c
 8015980:	080200dc 	.word	0x080200dc
 8015984:	080200e4 	.word	0x080200e4
 8015988:	08020114 	.word	0x08020114
 801598c:	2000012c 	.word	0x2000012c
 8015990:	0802011c 	.word	0x0802011c
 8015994:	0802015c 	.word	0x0802015c
 8015998:	0802018c 	.word	0x0802018c
 801599c:	08020194 	.word	0x08020194
 80159a0:	080201d0 	.word	0x080201d0
 80159a4:	080201f0 	.word	0x080201f0
 80159a8:	080201f8 	.word	0x080201f8
 80159ac:	08020238 	.word	0x08020238
			}

			delay(500);
 80159b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80159b4:	f7f1 f858 	bl	8006a68 <HAL_Delay>
			#if SENSING_DEBUG
				println("[SENSING] SPS30 init unsuccesfull, retrying...");
 80159b8:	483f      	ldr	r0, [pc, #252]	; (8015ab8 <sensing_setup+0x47c>)
 80159ba:	f7fe fa99 	bl	8013ef0 <println>
		while (!SPS30_init(&(Common.sps)))
 80159be:	483f      	ldr	r0, [pc, #252]	; (8015abc <sensing_setup+0x480>)
 80159c0:	f7f0 febd 	bl	800673e <SPS30_init>
 80159c4:	4603      	mov	r3, r0
 80159c6:	f083 0301 	eor.w	r3, r3, #1
 80159ca:	b2db      	uxtb	r3, r3
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d18d      	bne.n	80158ec <sensing_setup+0x2b0>
		(*Common.log_print)("*WS40");
		Common.sps.active = false;
	#endif

	#if SENSING_DEBUG
		println("[SENSING] Sensor init summary:");
 80159d0:	483b      	ldr	r0, [pc, #236]	; (8015ac0 <sensing_setup+0x484>)
 80159d2:	f7fe fa8d 	bl	8013ef0 <println>
		println("- BMP %s", Common.bmp.active ? "active" : "not active");
 80159d6:	4b3b      	ldr	r3, [pc, #236]	; (8015ac4 <sensing_setup+0x488>)
 80159d8:	7f1b      	ldrb	r3, [r3, #28]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d001      	beq.n	80159e2 <sensing_setup+0x3a6>
 80159de:	4b3a      	ldr	r3, [pc, #232]	; (8015ac8 <sensing_setup+0x48c>)
 80159e0:	e000      	b.n	80159e4 <sensing_setup+0x3a8>
 80159e2:	4b3a      	ldr	r3, [pc, #232]	; (8015acc <sensing_setup+0x490>)
 80159e4:	4619      	mov	r1, r3
 80159e6:	483a      	ldr	r0, [pc, #232]	; (8015ad0 <sensing_setup+0x494>)
 80159e8:	f7fe fa82 	bl	8013ef0 <println>
		println("- GPS %s", Common.gps.active ? "active" : "not active");
 80159ec:	4b35      	ldr	r3, [pc, #212]	; (8015ac4 <sensing_setup+0x488>)
 80159ee:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d001      	beq.n	80159fa <sensing_setup+0x3be>
 80159f6:	4b34      	ldr	r3, [pc, #208]	; (8015ac8 <sensing_setup+0x48c>)
 80159f8:	e000      	b.n	80159fc <sensing_setup+0x3c0>
 80159fa:	4b34      	ldr	r3, [pc, #208]	; (8015acc <sensing_setup+0x490>)
 80159fc:	4619      	mov	r1, r3
 80159fe:	4835      	ldr	r0, [pc, #212]	; (8015ad4 <sensing_setup+0x498>)
 8015a00:	f7fe fa76 	bl	8013ef0 <println>
		println("- IMU %s", Common.mpu.active ? "active" : "not active");
 8015a04:	4b2f      	ldr	r3, [pc, #188]	; (8015ac4 <sensing_setup+0x488>)
 8015a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d001      	beq.n	8015a12 <sensing_setup+0x3d6>
 8015a0e:	4b2e      	ldr	r3, [pc, #184]	; (8015ac8 <sensing_setup+0x48c>)
 8015a10:	e000      	b.n	8015a14 <sensing_setup+0x3d8>
 8015a12:	4b2e      	ldr	r3, [pc, #184]	; (8015acc <sensing_setup+0x490>)
 8015a14:	4619      	mov	r1, r3
 8015a16:	4830      	ldr	r0, [pc, #192]	; (8015ad8 <sensing_setup+0x49c>)
 8015a18:	f7fe fa6a 	bl	8013ef0 <println>
		println("- SPS %s", Common.sps.active ? "active" : "not active");
 8015a1c:	4b29      	ldr	r3, [pc, #164]	; (8015ac4 <sensing_setup+0x488>)
 8015a1e:	f893 379d 	ldrb.w	r3, [r3, #1949]	; 0x79d
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d001      	beq.n	8015a2a <sensing_setup+0x3ee>
 8015a26:	4b28      	ldr	r3, [pc, #160]	; (8015ac8 <sensing_setup+0x48c>)
 8015a28:	e000      	b.n	8015a2c <sensing_setup+0x3f0>
 8015a2a:	4b28      	ldr	r3, [pc, #160]	; (8015acc <sensing_setup+0x490>)
 8015a2c:	4619      	mov	r1, r3
 8015a2e:	482b      	ldr	r0, [pc, #172]	; (8015adc <sensing_setup+0x4a0>)
 8015a30:	f7fe fa5e 	bl	8013ef0 <println>
	#endif
	if (!Common.bmp.active || !Common.gps.active || !Common.mpu.active || !Common.sps.active) (*Common.log_print)("*WS00");
 8015a34:	4b23      	ldr	r3, [pc, #140]	; (8015ac4 <sensing_setup+0x488>)
 8015a36:	7f1b      	ldrb	r3, [r3, #28]
 8015a38:	f083 0301 	eor.w	r3, r3, #1
 8015a3c:	b2db      	uxtb	r3, r3
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d117      	bne.n	8015a72 <sensing_setup+0x436>
 8015a42:	4b20      	ldr	r3, [pc, #128]	; (8015ac4 <sensing_setup+0x488>)
 8015a44:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 8015a48:	f083 0301 	eor.w	r3, r3, #1
 8015a4c:	b2db      	uxtb	r3, r3
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d10f      	bne.n	8015a72 <sensing_setup+0x436>
 8015a52:	4b1c      	ldr	r3, [pc, #112]	; (8015ac4 <sensing_setup+0x488>)
 8015a54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015a58:	f083 0301 	eor.w	r3, r3, #1
 8015a5c:	b2db      	uxtb	r3, r3
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d107      	bne.n	8015a72 <sensing_setup+0x436>
 8015a62:	4b18      	ldr	r3, [pc, #96]	; (8015ac4 <sensing_setup+0x488>)
 8015a64:	f893 379d 	ldrb.w	r3, [r3, #1949]	; 0x79d
 8015a68:	f083 0301 	eor.w	r3, r3, #1
 8015a6c:	b2db      	uxtb	r3, r3
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d004      	beq.n	8015a7c <sensing_setup+0x440>
 8015a72:	4b14      	ldr	r3, [pc, #80]	; (8015ac4 <sensing_setup+0x488>)
 8015a74:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8015a78:	4819      	ldr	r0, [pc, #100]	; (8015ae0 <sensing_setup+0x4a4>)
 8015a7a:	4798      	blx	r3

	return (Common.bmp.active || !BMP_ENABLE) && (Common.gps.active || !GPS_ENABLE) && (Common.mpu.active || !IMU_ENABLE) && (Common.sps.active || !SPS_ENABLE);
 8015a7c:	4b11      	ldr	r3, [pc, #68]	; (8015ac4 <sensing_setup+0x488>)
 8015a7e:	7f1b      	ldrb	r3, [r3, #28]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d010      	beq.n	8015aa6 <sensing_setup+0x46a>
 8015a84:	4b0f      	ldr	r3, [pc, #60]	; (8015ac4 <sensing_setup+0x488>)
 8015a86:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d00b      	beq.n	8015aa6 <sensing_setup+0x46a>
 8015a8e:	4b0d      	ldr	r3, [pc, #52]	; (8015ac4 <sensing_setup+0x488>)
 8015a90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d006      	beq.n	8015aa6 <sensing_setup+0x46a>
 8015a98:	4b0a      	ldr	r3, [pc, #40]	; (8015ac4 <sensing_setup+0x488>)
 8015a9a:	f893 379d 	ldrb.w	r3, [r3, #1949]	; 0x79d
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d001      	beq.n	8015aa6 <sensing_setup+0x46a>
 8015aa2:	2301      	movs	r3, #1
 8015aa4:	e000      	b.n	8015aa8 <sensing_setup+0x46c>
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	f003 0301 	and.w	r3, r3, #1
 8015aac:	b2db      	uxtb	r3, r3
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3708      	adds	r7, #8
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
 8015ab6:	bf00      	nop
 8015ab8:	08020240 	.word	0x08020240
 8015abc:	20001340 	.word	0x20001340
 8015ac0:	08020270 	.word	0x08020270
 8015ac4:	20000de0 	.word	0x20000de0
 8015ac8:	08020290 	.word	0x08020290
 8015acc:	08020298 	.word	0x08020298
 8015ad0:	080202a4 	.word	0x080202a4
 8015ad4:	080202b0 	.word	0x080202b0
 8015ad8:	080202bc 	.word	0x080202bc
 8015adc:	080202c8 	.word	0x080202c8
 8015ae0:	080202d4 	.word	0x080202d4

08015ae4 <sensing_loop>:

static void sensing_loop(void)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	af00      	add	r7, sp, #0
	#if BMP_ENABLE
		if (Common.bmp.active && millis() - lastBmpRead >= SENSING_BMP_DELAY)
 8015ae8:	4b30      	ldr	r3, [pc, #192]	; (8015bac <sensing_loop+0xc8>)
 8015aea:	7f1b      	ldrb	r3, [r3, #28]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d034      	beq.n	8015b5a <sensing_loop+0x76>
 8015af0:	f7fe f99e 	bl	8013e30 <millis>
 8015af4:	4602      	mov	r2, r0
 8015af6:	4b2e      	ldr	r3, [pc, #184]	; (8015bb0 <sensing_loop+0xcc>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	1ad3      	subs	r3, r2, r3
 8015afc:	2b31      	cmp	r3, #49	; 0x31
 8015afe:	d92c      	bls.n	8015b5a <sensing_loop+0x76>
		{
			Common.bmp.alt_dx = Common.bmp.altitude;
 8015b00:	4b2a      	ldr	r3, [pc, #168]	; (8015bac <sensing_loop+0xc8>)
 8015b02:	695b      	ldr	r3, [r3, #20]
 8015b04:	4a29      	ldr	r2, [pc, #164]	; (8015bac <sensing_loop+0xc8>)
 8015b06:	6193      	str	r3, [r2, #24]
			bmp280_update(&(Common.bmp));
 8015b08:	4828      	ldr	r0, [pc, #160]	; (8015bac <sensing_loop+0xc8>)
 8015b0a:	f7ec fd0d 	bl	8002528 <bmp280_update>
			Common.bmp.alt_dx -= Common.bmp.altitude;
 8015b0e:	4b27      	ldr	r3, [pc, #156]	; (8015bac <sensing_loop+0xc8>)
 8015b10:	ed93 7a06 	vldr	s14, [r3, #24]
 8015b14:	4b25      	ldr	r3, [pc, #148]	; (8015bac <sensing_loop+0xc8>)
 8015b16:	edd3 7a05 	vldr	s15, [r3, #20]
 8015b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b1e:	4b23      	ldr	r3, [pc, #140]	; (8015bac <sensing_loop+0xc8>)
 8015b20:	edc3 7a06 	vstr	s15, [r3, #24]
			Common.bmp.alt_dx *= 1000 / (millis() - lastBmpRead);
 8015b24:	f7fe f984 	bl	8013e30 <millis>
 8015b28:	4602      	mov	r2, r0
 8015b2a:	4b21      	ldr	r3, [pc, #132]	; (8015bb0 <sensing_loop+0xcc>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	1ad3      	subs	r3, r2, r3
 8015b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8015b38:	4b1c      	ldr	r3, [pc, #112]	; (8015bac <sensing_loop+0xc8>)
 8015b3a:	ed93 7a06 	vldr	s14, [r3, #24]
 8015b3e:	ee07 2a90 	vmov	s15, r2
 8015b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b4a:	4b18      	ldr	r3, [pc, #96]	; (8015bac <sensing_loop+0xc8>)
 8015b4c:	edc3 7a06 	vstr	s15, [r3, #24]
			lastBmpRead = millis();
 8015b50:	f7fe f96e 	bl	8013e30 <millis>
 8015b54:	4602      	mov	r2, r0
 8015b56:	4b16      	ldr	r3, [pc, #88]	; (8015bb0 <sensing_loop+0xcc>)
 8015b58:	601a      	str	r2, [r3, #0]
		}
	#endif

	#if GPS_ENABLE
		if (Common.gps.active)
 8015b5a:	4b14      	ldr	r3, [pc, #80]	; (8015bac <sensing_loop+0xc8>)
 8015b5c:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d002      	beq.n	8015b6a <sensing_loop+0x86>
		{
			GPS_update(&(Common.gps));
 8015b64:	4813      	ldr	r0, [pc, #76]	; (8015bb4 <sensing_loop+0xd0>)
 8015b66:	f7ec ffcf 	bl	8002b08 <GPS_update>
		}
	#endif

	#if IMU_ENABLE
		if (Common.mpu.active) MPU9250_update(&(Common.mpu));
 8015b6a:	4b10      	ldr	r3, [pc, #64]	; (8015bac <sensing_loop+0xc8>)
 8015b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d002      	beq.n	8015b7a <sensing_loop+0x96>
 8015b74:	4810      	ldr	r0, [pc, #64]	; (8015bb8 <sensing_loop+0xd4>)
 8015b76:	f7ee fbed 	bl	8004354 <MPU9250_update>
	#endif

	#if SPS_ENABLE
		if (Common.sps.active && millis() - lastSpsRead >= SENSING_SPS_DELAY) { SPS30_update(&(Common.sps)); lastSpsRead = millis(); }
 8015b7a:	4b0c      	ldr	r3, [pc, #48]	; (8015bac <sensing_loop+0xc8>)
 8015b7c:	f893 379d 	ldrb.w	r3, [r3, #1949]	; 0x79d
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d010      	beq.n	8015ba6 <sensing_loop+0xc2>
 8015b84:	f7fe f954 	bl	8013e30 <millis>
 8015b88:	4602      	mov	r2, r0
 8015b8a:	4b0c      	ldr	r3, [pc, #48]	; (8015bbc <sensing_loop+0xd8>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	1ad3      	subs	r3, r2, r3
 8015b90:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8015b94:	d307      	bcc.n	8015ba6 <sensing_loop+0xc2>
 8015b96:	480a      	ldr	r0, [pc, #40]	; (8015bc0 <sensing_loop+0xdc>)
 8015b98:	f7f0 fdfa 	bl	8006790 <SPS30_update>
 8015b9c:	f7fe f948 	bl	8013e30 <millis>
 8015ba0:	4602      	mov	r2, r0
 8015ba2:	4b06      	ldr	r3, [pc, #24]	; (8015bbc <sensing_loop+0xd8>)
 8015ba4:	601a      	str	r2, [r3, #0]
	#endif

	//SPS30
}
 8015ba6:	bf00      	nop
 8015ba8:	bd80      	pop	{r7, pc}
 8015baa:	bf00      	nop
 8015bac:	20000de0 	.word	0x20000de0
 8015bb0:	2000858c 	.word	0x2000858c
 8015bb4:	20000ed4 	.word	0x20000ed4
 8015bb8:	20000e18 	.word	0x20000e18
 8015bbc:	20008588 	.word	0x20008588
 8015bc0:	20001340 	.word	0x20001340
 8015bc4:	00000000 	.word	0x00000000

08015bc8 <PID>:
uint32_t lastAlgo;

float yaw_last_error;

static void PID(float yaw, float target_yaw)
{
 8015bc8:	b5b0      	push	{r4, r5, r7, lr}
 8015bca:	ed2d 8b02 	vpush	{d8}
 8015bce:	b08a      	sub	sp, #40	; 0x28
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8015bd6:	edc7 0a00 	vstr	s1, [r7]
	float maxPower = 0.5;	// scale of motor power
 8015bda:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8015bde:	61bb      	str	r3, [r7, #24]
	float TurboMode= 50.0;
 8015be0:	4b7f      	ldr	r3, [pc, #508]	; (8015de0 <PID+0x218>)
 8015be2:	617b      	str	r3, [r7, #20]
	float error= target_yaw-yaw;
 8015be4:	ed97 7a00 	vldr	s14, [r7]
 8015be8:	edd7 7a01 	vldr	s15, [r7, #4]
 8015bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bf0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float thrust;

	if (error<-180.0) //ulomne modulo
 8015bf4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015bf8:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8015de4 <PID+0x21c>
 8015bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c04:	d50c      	bpl.n	8015c20 <PID+0x58>
		error = target_yaw-yaw+360.0;
 8015c06:	ed97 7a00 	vldr	s14, [r7]
 8015c0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8015c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c12:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8015de8 <PID+0x220>
 8015c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015c1a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8015c1e:	e014      	b.n	8015c4a <PID+0x82>
	else if (error>180.0)
 8015c20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015c24:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8015dec <PID+0x224>
 8015c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c30:	dd0b      	ble.n	8015c4a <PID+0x82>
		error = target_yaw-yaw-360.0;
 8015c32:	ed97 7a00 	vldr	s14, [r7]
 8015c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8015c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c3e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8015de8 <PID+0x220>
 8015c42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if (error>-10 && error<10)
 8015c4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015c4e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8015c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5a:	dd0b      	ble.n	8015c74 <PID+0xac>
 8015c5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015c60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8015c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c6c:	d502      	bpl.n	8015c74 <PID+0xac>
		thrust = 340.0;
 8015c6e:	4b60      	ldr	r3, [pc, #384]	; (8015df0 <PID+0x228>)
 8015c70:	623b      	str	r3, [r7, #32]
 8015c72:	e007      	b.n	8015c84 <PID+0xbc>
	else
		thrust = 180.0+TurboMode;
 8015c74:	edd7 7a05 	vldr	s15, [r7, #20]
 8015c78:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8015dec <PID+0x224>
 8015c7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015c80:	edc7 7a08 	vstr	s15, [r7, #32]

	float pid_p, pid_i, pid_d;

	pid_p=PID_kp*error;
 8015c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c86:	613b      	str	r3, [r7, #16]
	pid_d=PID_kd*((error-yaw_last_error)/(millis() - lastAlgo));
 8015c88:	4b5a      	ldr	r3, [pc, #360]	; (8015df4 <PID+0x22c>)
 8015c8a:	edd3 7a00 	vldr	s15, [r3]
 8015c8e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015c92:	ee37 8a67 	vsub.f32	s16, s14, s15
 8015c96:	f7fe f8cb 	bl	8013e30 <millis>
 8015c9a:	4602      	mov	r2, r0
 8015c9c:	4b56      	ldr	r3, [pc, #344]	; (8015df8 <PID+0x230>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	1ad3      	subs	r3, r2, r3
 8015ca2:	ee07 3a90 	vmov	s15, r3
 8015ca6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015caa:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015cae:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8015dfc <PID+0x234>
 8015cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015cb6:	edc7 7a03 	vstr	s15, [r7, #12]

	float PID_coef;
	//if (error>-15 && error <15)
	//	PID_coef=pid_p+pid_d+pid_i;
	//else
		PID_coef=pid_p+pid_d;
 8015cba:	ed97 7a04 	vldr	s14, [r7, #16]
 8015cbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8015cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cc6:	edc7 7a07 	vstr	s15, [r7, #28]

	if (PID_coef>180.0-TurboMode)
 8015cca:	69f8      	ldr	r0, [r7, #28]
 8015ccc:	f7ea fc4c 	bl	8000568 <__aeabi_f2d>
 8015cd0:	4604      	mov	r4, r0
 8015cd2:	460d      	mov	r5, r1
 8015cd4:	6978      	ldr	r0, [r7, #20]
 8015cd6:	f7ea fc47 	bl	8000568 <__aeabi_f2d>
 8015cda:	4602      	mov	r2, r0
 8015cdc:	460b      	mov	r3, r1
 8015cde:	f04f 0000 	mov.w	r0, #0
 8015ce2:	4947      	ldr	r1, [pc, #284]	; (8015e00 <PID+0x238>)
 8015ce4:	f7ea fae0 	bl	80002a8 <__aeabi_dsub>
 8015ce8:	4602      	mov	r2, r0
 8015cea:	460b      	mov	r3, r1
 8015cec:	4620      	mov	r0, r4
 8015cee:	4629      	mov	r1, r5
 8015cf0:	f7ea ff22 	bl	8000b38 <__aeabi_dcmpgt>
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d008      	beq.n	8015d0c <PID+0x144>
			PID_coef=180.0-TurboMode;
 8015cfa:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8015dec <PID+0x224>
 8015cfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8015d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d06:	edc7 7a07 	vstr	s15, [r7, #28]
 8015d0a:	e01d      	b.n	8015d48 <PID+0x180>
		else if (PID_coef<-180.0+TurboMode)
 8015d0c:	69f8      	ldr	r0, [r7, #28]
 8015d0e:	f7ea fc2b 	bl	8000568 <__aeabi_f2d>
 8015d12:	4604      	mov	r4, r0
 8015d14:	460d      	mov	r5, r1
 8015d16:	6978      	ldr	r0, [r7, #20]
 8015d18:	f7ea fc26 	bl	8000568 <__aeabi_f2d>
 8015d1c:	f04f 0200 	mov.w	r2, #0
 8015d20:	4b37      	ldr	r3, [pc, #220]	; (8015e00 <PID+0x238>)
 8015d22:	f7ea fac1 	bl	80002a8 <__aeabi_dsub>
 8015d26:	4602      	mov	r2, r0
 8015d28:	460b      	mov	r3, r1
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	4629      	mov	r1, r5
 8015d2e:	f7ea fee5 	bl	8000afc <__aeabi_dcmplt>
 8015d32:	4603      	mov	r3, r0
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d007      	beq.n	8015d48 <PID+0x180>
			PID_coef=-180.0+TurboMode;
 8015d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8015d3c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8015dec <PID+0x224>
 8015d40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d44:	edc7 7a07 	vstr	s15, [r7, #28]

	setMotors((thrust - PID_coef) * maxPower * (1.0 / 360.0), (thrust + PID_coef) * maxPower * (1.0 / 360.0));
 8015d48:	ed97 7a08 	vldr	s14, [r7, #32]
 8015d4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8015d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015d54:	edd7 7a06 	vldr	s15, [r7, #24]
 8015d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d5c:	ee17 0a90 	vmov	r0, s15
 8015d60:	f7ea fc02 	bl	8000568 <__aeabi_f2d>
 8015d64:	a31c      	add	r3, pc, #112	; (adr r3, 8015dd8 <PID+0x210>)
 8015d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d6a:	f7ea fc55 	bl	8000618 <__aeabi_dmul>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	460c      	mov	r4, r1
 8015d72:	4618      	mov	r0, r3
 8015d74:	4621      	mov	r1, r4
 8015d76:	f7ea ff47 	bl	8000c08 <__aeabi_d2f>
 8015d7a:	4605      	mov	r5, r0
 8015d7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8015d80:	edd7 7a07 	vldr	s15, [r7, #28]
 8015d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015d88:	edd7 7a06 	vldr	s15, [r7, #24]
 8015d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d90:	ee17 0a90 	vmov	r0, s15
 8015d94:	f7ea fbe8 	bl	8000568 <__aeabi_f2d>
 8015d98:	a30f      	add	r3, pc, #60	; (adr r3, 8015dd8 <PID+0x210>)
 8015d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d9e:	f7ea fc3b 	bl	8000618 <__aeabi_dmul>
 8015da2:	4603      	mov	r3, r0
 8015da4:	460c      	mov	r4, r1
 8015da6:	4618      	mov	r0, r3
 8015da8:	4621      	mov	r1, r4
 8015daa:	f7ea ff2d 	bl	8000c08 <__aeabi_d2f>
 8015dae:	4603      	mov	r3, r0
 8015db0:	ee00 3a90 	vmov	s1, r3
 8015db4:	ee00 5a10 	vmov	s0, r5
 8015db8:	f7eb f946 	bl	8001048 <setMotors>

	//setMotors(maxPower, maxPower*0.9); //prawie skalibrowane
	//setMotors((thrust - error) * maxPower * (1.0 / 360.0), (thrust + error) * maxPower * (1.0 / 360.0));

	yaw_last_error=error;
 8015dbc:	4a0d      	ldr	r2, [pc, #52]	; (8015df4 <PID+0x22c>)
 8015dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc0:	6013      	str	r3, [r2, #0]
	lastAlgo = millis();
 8015dc2:	f7fe f835 	bl	8013e30 <millis>
 8015dc6:	4602      	mov	r2, r0
 8015dc8:	4b0b      	ldr	r3, [pc, #44]	; (8015df8 <PID+0x230>)
 8015dca:	601a      	str	r2, [r3, #0]
}
 8015dcc:	bf00      	nop
 8015dce:	3728      	adds	r7, #40	; 0x28
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	ecbd 8b02 	vpop	{d8}
 8015dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8015dd8:	16c16c17 	.word	0x16c16c17
 8015ddc:	3f66c16c 	.word	0x3f66c16c
 8015de0:	42480000 	.word	0x42480000
 8015de4:	c3340000 	.word	0xc3340000
 8015de8:	43b40000 	.word	0x43b40000
 8015dec:	43340000 	.word	0x43340000
 8015df0:	43aa0000 	.word	0x43aa0000
 8015df4:	2000859c 	.word	0x2000859c
 8015df8:	20008594 	.word	0x20008594
 8015dfc:	43fa0000 	.word	0x43fa0000
 8015e00:	40668000 	.word	0x40668000
 8015e04:	00000000 	.word	0x00000000

08015e08 <bearing>:

static float bearing(float lat, float lon, float lat2, float lon2)
{
 8015e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015e0c:	b08c      	sub	sp, #48	; 0x30
 8015e0e:	af00      	add	r7, sp, #0
 8015e10:	ed87 0a03 	vstr	s0, [r7, #12]
 8015e14:	edc7 0a02 	vstr	s1, [r7, #8]
 8015e18:	ed87 1a01 	vstr	s2, [r7, #4]
 8015e1c:	edc7 1a00 	vstr	s3, [r7]
	//lat = your current gps latitude.
	//lon = your current gps longitude.
	//lat2 = your destiny gps latitude.
	//lon2 = your destiny gps longitude.

    float teta1 = lat*M_PI/180;
 8015e20:	68f8      	ldr	r0, [r7, #12]
 8015e22:	f7ea fba1 	bl	8000568 <__aeabi_f2d>
 8015e26:	a39e      	add	r3, pc, #632	; (adr r3, 80160a0 <bearing+0x298>)
 8015e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e2c:	f7ea fbf4 	bl	8000618 <__aeabi_dmul>
 8015e30:	4603      	mov	r3, r0
 8015e32:	460c      	mov	r4, r1
 8015e34:	4618      	mov	r0, r3
 8015e36:	4621      	mov	r1, r4
 8015e38:	f04f 0200 	mov.w	r2, #0
 8015e3c:	4b9c      	ldr	r3, [pc, #624]	; (80160b0 <bearing+0x2a8>)
 8015e3e:	f7ea fd15 	bl	800086c <__aeabi_ddiv>
 8015e42:	4603      	mov	r3, r0
 8015e44:	460c      	mov	r4, r1
 8015e46:	4618      	mov	r0, r3
 8015e48:	4621      	mov	r1, r4
 8015e4a:	f7ea fedd 	bl	8000c08 <__aeabi_d2f>
 8015e4e:	4603      	mov	r3, r0
 8015e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    float teta2 = lat2*M_PI/180;
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f7ea fb88 	bl	8000568 <__aeabi_f2d>
 8015e58:	a391      	add	r3, pc, #580	; (adr r3, 80160a0 <bearing+0x298>)
 8015e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e5e:	f7ea fbdb 	bl	8000618 <__aeabi_dmul>
 8015e62:	4603      	mov	r3, r0
 8015e64:	460c      	mov	r4, r1
 8015e66:	4618      	mov	r0, r3
 8015e68:	4621      	mov	r1, r4
 8015e6a:	f04f 0200 	mov.w	r2, #0
 8015e6e:	4b90      	ldr	r3, [pc, #576]	; (80160b0 <bearing+0x2a8>)
 8015e70:	f7ea fcfc 	bl	800086c <__aeabi_ddiv>
 8015e74:	4603      	mov	r3, r0
 8015e76:	460c      	mov	r4, r1
 8015e78:	4618      	mov	r0, r3
 8015e7a:	4621      	mov	r1, r4
 8015e7c:	f7ea fec4 	bl	8000c08 <__aeabi_d2f>
 8015e80:	4603      	mov	r3, r0
 8015e82:	62bb      	str	r3, [r7, #40]	; 0x28
    float delta1 = (lat2-lat)*M_PI/180;
 8015e84:	ed97 7a01 	vldr	s14, [r7, #4]
 8015e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8015e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e90:	ee17 0a90 	vmov	r0, s15
 8015e94:	f7ea fb68 	bl	8000568 <__aeabi_f2d>
 8015e98:	a381      	add	r3, pc, #516	; (adr r3, 80160a0 <bearing+0x298>)
 8015e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e9e:	f7ea fbbb 	bl	8000618 <__aeabi_dmul>
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	460c      	mov	r4, r1
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	4621      	mov	r1, r4
 8015eaa:	f04f 0200 	mov.w	r2, #0
 8015eae:	4b80      	ldr	r3, [pc, #512]	; (80160b0 <bearing+0x2a8>)
 8015eb0:	f7ea fcdc 	bl	800086c <__aeabi_ddiv>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	460c      	mov	r4, r1
 8015eb8:	4618      	mov	r0, r3
 8015eba:	4621      	mov	r1, r4
 8015ebc:	f7ea fea4 	bl	8000c08 <__aeabi_d2f>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	627b      	str	r3, [r7, #36]	; 0x24
    float delta2 = (lon2-lon)*M_PI/180;
 8015ec4:	ed97 7a00 	vldr	s14, [r7]
 8015ec8:	edd7 7a02 	vldr	s15, [r7, #8]
 8015ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ed0:	ee17 0a90 	vmov	r0, s15
 8015ed4:	f7ea fb48 	bl	8000568 <__aeabi_f2d>
 8015ed8:	a371      	add	r3, pc, #452	; (adr r3, 80160a0 <bearing+0x298>)
 8015eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ede:	f7ea fb9b 	bl	8000618 <__aeabi_dmul>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	460c      	mov	r4, r1
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	4621      	mov	r1, r4
 8015eea:	f04f 0200 	mov.w	r2, #0
 8015eee:	4b70      	ldr	r3, [pc, #448]	; (80160b0 <bearing+0x2a8>)
 8015ef0:	f7ea fcbc 	bl	800086c <__aeabi_ddiv>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	460c      	mov	r4, r1
 8015ef8:	4618      	mov	r0, r3
 8015efa:	4621      	mov	r1, r4
 8015efc:	f7ea fe84 	bl	8000c08 <__aeabi_d2f>
 8015f00:	4603      	mov	r3, r0
 8015f02:	623b      	str	r3, [r7, #32]

    //==================Heading Formula Calculation================//

    float y = sin(delta2) * cos(teta2);
 8015f04:	6a38      	ldr	r0, [r7, #32]
 8015f06:	f7ea fb2f 	bl	8000568 <__aeabi_f2d>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	460c      	mov	r4, r1
 8015f0e:	ec44 3b10 	vmov	d0, r3, r4
 8015f12:	f006 fc21 	bl	801c758 <sin>
 8015f16:	ec55 4b10 	vmov	r4, r5, d0
 8015f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f1c:	f7ea fb24 	bl	8000568 <__aeabi_f2d>
 8015f20:	4602      	mov	r2, r0
 8015f22:	460b      	mov	r3, r1
 8015f24:	ec43 2b10 	vmov	d0, r2, r3
 8015f28:	f006 fbd2 	bl	801c6d0 <cos>
 8015f2c:	ec53 2b10 	vmov	r2, r3, d0
 8015f30:	4620      	mov	r0, r4
 8015f32:	4629      	mov	r1, r5
 8015f34:	f7ea fb70 	bl	8000618 <__aeabi_dmul>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	460c      	mov	r4, r1
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	4621      	mov	r1, r4
 8015f40:	f7ea fe62 	bl	8000c08 <__aeabi_d2f>
 8015f44:	4603      	mov	r3, r0
 8015f46:	61fb      	str	r3, [r7, #28]
    float x = cos(teta1)*sin(teta2) - sin(teta1)*cos(teta2)*cos(delta2);
 8015f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f4a:	f7ea fb0d 	bl	8000568 <__aeabi_f2d>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	460c      	mov	r4, r1
 8015f52:	ec44 3b10 	vmov	d0, r3, r4
 8015f56:	f006 fbbb 	bl	801c6d0 <cos>
 8015f5a:	ec55 4b10 	vmov	r4, r5, d0
 8015f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f60:	f7ea fb02 	bl	8000568 <__aeabi_f2d>
 8015f64:	4602      	mov	r2, r0
 8015f66:	460b      	mov	r3, r1
 8015f68:	ec43 2b10 	vmov	d0, r2, r3
 8015f6c:	f006 fbf4 	bl	801c758 <sin>
 8015f70:	ec53 2b10 	vmov	r2, r3, d0
 8015f74:	4620      	mov	r0, r4
 8015f76:	4629      	mov	r1, r5
 8015f78:	f7ea fb4e 	bl	8000618 <__aeabi_dmul>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	460c      	mov	r4, r1
 8015f80:	4625      	mov	r5, r4
 8015f82:	461c      	mov	r4, r3
 8015f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f86:	f7ea faef 	bl	8000568 <__aeabi_f2d>
 8015f8a:	4602      	mov	r2, r0
 8015f8c:	460b      	mov	r3, r1
 8015f8e:	ec43 2b10 	vmov	d0, r2, r3
 8015f92:	f006 fbe1 	bl	801c758 <sin>
 8015f96:	ec59 8b10 	vmov	r8, r9, d0
 8015f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f9c:	f7ea fae4 	bl	8000568 <__aeabi_f2d>
 8015fa0:	4602      	mov	r2, r0
 8015fa2:	460b      	mov	r3, r1
 8015fa4:	ec43 2b10 	vmov	d0, r2, r3
 8015fa8:	f006 fb92 	bl	801c6d0 <cos>
 8015fac:	ec53 2b10 	vmov	r2, r3, d0
 8015fb0:	4640      	mov	r0, r8
 8015fb2:	4649      	mov	r1, r9
 8015fb4:	f7ea fb30 	bl	8000618 <__aeabi_dmul>
 8015fb8:	4602      	mov	r2, r0
 8015fba:	460b      	mov	r3, r1
 8015fbc:	4690      	mov	r8, r2
 8015fbe:	4699      	mov	r9, r3
 8015fc0:	6a38      	ldr	r0, [r7, #32]
 8015fc2:	f7ea fad1 	bl	8000568 <__aeabi_f2d>
 8015fc6:	4602      	mov	r2, r0
 8015fc8:	460b      	mov	r3, r1
 8015fca:	ec43 2b10 	vmov	d0, r2, r3
 8015fce:	f006 fb7f 	bl	801c6d0 <cos>
 8015fd2:	ec53 2b10 	vmov	r2, r3, d0
 8015fd6:	4640      	mov	r0, r8
 8015fd8:	4649      	mov	r1, r9
 8015fda:	f7ea fb1d 	bl	8000618 <__aeabi_dmul>
 8015fde:	4602      	mov	r2, r0
 8015fe0:	460b      	mov	r3, r1
 8015fe2:	4620      	mov	r0, r4
 8015fe4:	4629      	mov	r1, r5
 8015fe6:	f7ea f95f 	bl	80002a8 <__aeabi_dsub>
 8015fea:	4603      	mov	r3, r0
 8015fec:	460c      	mov	r4, r1
 8015fee:	4618      	mov	r0, r3
 8015ff0:	4621      	mov	r1, r4
 8015ff2:	f7ea fe09 	bl	8000c08 <__aeabi_d2f>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	61bb      	str	r3, [r7, #24]
    float brng = atan2(y,x);
 8015ffa:	69f8      	ldr	r0, [r7, #28]
 8015ffc:	f7ea fab4 	bl	8000568 <__aeabi_f2d>
 8016000:	4604      	mov	r4, r0
 8016002:	460d      	mov	r5, r1
 8016004:	69b8      	ldr	r0, [r7, #24]
 8016006:	f7ea faaf 	bl	8000568 <__aeabi_f2d>
 801600a:	4602      	mov	r2, r0
 801600c:	460b      	mov	r3, r1
 801600e:	ec43 2b11 	vmov	d1, r2, r3
 8016012:	ec45 4b10 	vmov	d0, r4, r5
 8016016:	f006 fc3f 	bl	801c898 <atan2>
 801601a:	ec54 3b10 	vmov	r3, r4, d0
 801601e:	4618      	mov	r0, r3
 8016020:	4621      	mov	r1, r4
 8016022:	f7ea fdf1 	bl	8000c08 <__aeabi_d2f>
 8016026:	4603      	mov	r3, r0
 8016028:	617b      	str	r3, [r7, #20]
    brng = brng*180/M_PI;			// radians to degrees
 801602a:	edd7 7a05 	vldr	s15, [r7, #20]
 801602e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80160b4 <bearing+0x2ac>
 8016032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016036:	ee17 0a90 	vmov	r0, s15
 801603a:	f7ea fa95 	bl	8000568 <__aeabi_f2d>
 801603e:	a318      	add	r3, pc, #96	; (adr r3, 80160a0 <bearing+0x298>)
 8016040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016044:	f7ea fc12 	bl	800086c <__aeabi_ddiv>
 8016048:	4603      	mov	r3, r0
 801604a:	460c      	mov	r4, r1
 801604c:	4618      	mov	r0, r3
 801604e:	4621      	mov	r1, r4
 8016050:	f7ea fdda 	bl	8000c08 <__aeabi_d2f>
 8016054:	4603      	mov	r3, r0
 8016056:	617b      	str	r3, [r7, #20]
    brng = fmod((brng + 360), 360);
 8016058:	edd7 7a05 	vldr	s15, [r7, #20]
 801605c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80160b8 <bearing+0x2b0>
 8016060:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016064:	ee17 0a90 	vmov	r0, s15
 8016068:	f7ea fa7e 	bl	8000568 <__aeabi_f2d>
 801606c:	4603      	mov	r3, r0
 801606e:	460c      	mov	r4, r1
 8016070:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80160a8 <bearing+0x2a0>
 8016074:	ec44 3b10 	vmov	d0, r3, r4
 8016078:	f006 fc10 	bl	801c89c <fmod>
 801607c:	ec54 3b10 	vmov	r3, r4, d0
 8016080:	4618      	mov	r0, r3
 8016082:	4621      	mov	r1, r4
 8016084:	f7ea fdc0 	bl	8000c08 <__aeabi_d2f>
 8016088:	4603      	mov	r3, r0
 801608a:	617b      	str	r3, [r7, #20]

    return brng;
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	ee07 3a90 	vmov	s15, r3
}
 8016092:	eeb0 0a67 	vmov.f32	s0, s15
 8016096:	3730      	adds	r7, #48	; 0x30
 8016098:	46bd      	mov	sp, r7
 801609a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801609e:	bf00      	nop
 80160a0:	54442d18 	.word	0x54442d18
 80160a4:	400921fb 	.word	0x400921fb
 80160a8:	00000000 	.word	0x00000000
 80160ac:	40768000 	.word	0x40768000
 80160b0:	40668000 	.word	0x40668000
 80160b4:	43340000 	.word	0x43340000
 80160b8:	43b40000 	.word	0x43b40000

080160bc <steering_setup>:

static bool steering_setup(void)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	af00      	add	r7, sp, #0
	#if STEERING_ENABLE
		#if STEERING_DEBUG
			println("[STEERING] Activating PID algorithm");
		#endif
		(*Common.log_print)("*P00");
 80160c0:	4b21      	ldr	r3, [pc, #132]	; (8016148 <steering_setup+0x8c>)
 80160c2:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80160c6:	4821      	ldr	r0, [pc, #132]	; (801614c <steering_setup+0x90>)
 80160c8:	4798      	blx	r3

		yaw_last_error=0.0;
 80160ca:	4b21      	ldr	r3, [pc, #132]	; (8016150 <steering_setup+0x94>)
 80160cc:	f04f 0200 	mov.w	r2, #0
 80160d0:	601a      	str	r2, [r3, #0]
		Common.target_lat = DEFAULT_TARGET_LAT;
 80160d2:	4b1d      	ldr	r3, [pc, #116]	; (8016148 <steering_setup+0x8c>)
 80160d4:	f203 73ac 	addw	r3, r3, #1964	; 0x7ac
 80160d8:	4a1e      	ldr	r2, [pc, #120]	; (8016154 <steering_setup+0x98>)
 80160da:	601a      	str	r2, [r3, #0]
		Common.target_lon = DEFAULT_TARGET_LON;
 80160dc:	4b1a      	ldr	r3, [pc, #104]	; (8016148 <steering_setup+0x8c>)
 80160de:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 80160e2:	4a1d      	ldr	r2, [pc, #116]	; (8016158 <steering_setup+0x9c>)
 80160e4:	601a      	str	r2, [r3, #0]
		Common.target_alt = DEFAULT_TARGET_ALT;
 80160e6:	4b18      	ldr	r3, [pc, #96]	; (8016148 <steering_setup+0x8c>)
 80160e8:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 80160ec:	4a1b      	ldr	r2, [pc, #108]	; (801615c <steering_setup+0xa0>)
 80160ee:	601a      	str	r2, [r3, #0]
		Common.target_yaw = DEFAULT_TARGET_YAW;
 80160f0:	4b15      	ldr	r3, [pc, #84]	; (8016148 <steering_setup+0x8c>)
 80160f2:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80160f6:	f04f 0200 	mov.w	r2, #0
 80160fa:	601a      	str	r2, [r3, #0]
		motorsRunning = false;
 80160fc:	4b18      	ldr	r3, [pc, #96]	; (8016160 <steering_setup+0xa4>)
 80160fe:	2200      	movs	r2, #0
 8016100:	701a      	strb	r2, [r3, #0]
		enableMotors();
 8016102:	f7eb f849 	bl	8001198 <enableMotors>
		setMotors(0.9, 0.9);
 8016106:	eddf 0a17 	vldr	s1, [pc, #92]	; 8016164 <steering_setup+0xa8>
 801610a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8016164 <steering_setup+0xa8>
 801610e:	f7ea ff9b 	bl	8001048 <setMotors>
		delay(200);
 8016112:	20c8      	movs	r0, #200	; 0xc8
 8016114:	f7f0 fca8 	bl	8006a68 <HAL_Delay>
		setMotors(0, 0);
 8016118:	eddf 0a13 	vldr	s1, [pc, #76]	; 8016168 <steering_setup+0xac>
 801611c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8016168 <steering_setup+0xac>
 8016120:	f7ea ff92 	bl	8001048 <setMotors>
		//disableMotors();
		if (!Common.mpu.active)
 8016124:	4b08      	ldr	r3, [pc, #32]	; (8016148 <steering_setup+0x8c>)
 8016126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801612a:	f083 0301 	eor.w	r3, r3, #1
 801612e:	b2db      	uxtb	r3, r3
 8016130:	2b00      	cmp	r3, #0
 8016132:	d006      	beq.n	8016142 <steering_setup+0x86>
		{
			#if STEERING_DEBUG
				println("error: [STEERING] PID cannot function because IMU is not active!");
			#endif
			(*Common.log_print)("*EP00");
 8016134:	4b04      	ldr	r3, [pc, #16]	; (8016148 <steering_setup+0x8c>)
 8016136:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 801613a:	480c      	ldr	r0, [pc, #48]	; (801616c <steering_setup+0xb0>)
 801613c:	4798      	blx	r3
			return false;
 801613e:	2300      	movs	r3, #0
 8016140:	e000      	b.n	8016144 <steering_setup+0x88>
		}
		return true;
 8016142:	2301      	movs	r3, #1
		(*Common.log_print)("*WP00");
		disableMotors();
		Common.motors_enabled = false;
		return false;
	#endif
}
 8016144:	4618      	mov	r0, r3
 8016146:	bd80      	pop	{r7, pc}
 8016148:	20000de0 	.word	0x20000de0
 801614c:	080202dc 	.word	0x080202dc
 8016150:	2000859c 	.word	0x2000859c
 8016154:	424836d1 	.word	0x424836d1
 8016158:	419f7b4b 	.word	0x419f7b4b
 801615c:	43828000 	.word	0x43828000
 8016160:	200017a8 	.word	0x200017a8
 8016164:	3f666666 	.word	0x3f666666
 8016168:	00000000 	.word	0x00000000
 801616c:	080202e4 	.word	0x080202e4

08016170 <steering_loop>:

static void steering_loop(void)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	af00      	add	r7, sp, #0
	#if STEERING_ENABLE
	if (Common.mpu.active && Common.operation_mode != 31 && Common.motors_enabled && Common.servo_enabled) 
 8016174:	4b4d      	ldr	r3, [pc, #308]	; (80162ac <steering_loop+0x13c>)
 8016176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801617a:	2b00      	cmp	r3, #0
 801617c:	f000 8094 	beq.w	80162a8 <steering_loop+0x138>
 8016180:	4b4a      	ldr	r3, [pc, #296]	; (80162ac <steering_loop+0x13c>)
 8016182:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 8016186:	2b1f      	cmp	r3, #31
 8016188:	f000 808e 	beq.w	80162a8 <steering_loop+0x138>
 801618c:	4b47      	ldr	r3, [pc, #284]	; (80162ac <steering_loop+0x13c>)
 801618e:	f893 37a8 	ldrb.w	r3, [r3, #1960]	; 0x7a8
 8016192:	2b00      	cmp	r3, #0
 8016194:	f000 8088 	beq.w	80162a8 <steering_loop+0x138>
 8016198:	4b44      	ldr	r3, [pc, #272]	; (80162ac <steering_loop+0x13c>)
 801619a:	f893 37a9 	ldrb.w	r3, [r3, #1961]	; 0x7a9
 801619e:	2b00      	cmp	r3, #0
 80161a0:	f000 8082 	beq.w	80162a8 <steering_loop+0x138>
	{
		if (millis() - lastMotUpdate >= STEERING_PID_DELAY)	// run motor alogrithm
 80161a4:	f7fd fe44 	bl	8013e30 <millis>
 80161a8:	4602      	mov	r2, r0
 80161aa:	4b41      	ldr	r3, [pc, #260]	; (80162b0 <steering_loop+0x140>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	1ad3      	subs	r3, r2, r3
 80161b0:	2b09      	cmp	r3, #9
 80161b2:	d93c      	bls.n	801622e <steering_loop+0xbe>
		{	
			PID(Common.mpu.yaw, Common.target_yaw);
 80161b4:	4b3d      	ldr	r3, [pc, #244]	; (80162ac <steering_loop+0x13c>)
 80161b6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80161ba:	4b3c      	ldr	r3, [pc, #240]	; (80162ac <steering_loop+0x13c>)
 80161bc:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80161c0:	ed93 7a00 	vldr	s14, [r3]
 80161c4:	eef0 0a47 	vmov.f32	s1, s14
 80161c8:	eeb0 0a67 	vmov.f32	s0, s15
 80161cc:	f7ff fcfc 	bl	8015bc8 <PID>
			lastMotUpdate = millis();
 80161d0:	f7fd fe2e 	bl	8013e30 <millis>
 80161d4:	4602      	mov	r2, r0
 80161d6:	4b36      	ldr	r3, [pc, #216]	; (80162b0 <steering_loop+0x140>)
 80161d8:	601a      	str	r2, [r3, #0]
			writePin(LEDD, abs(Common.mpu.yaw - Common.target_yaw) < 3);
 80161da:	4b34      	ldr	r3, [pc, #208]	; (80162ac <steering_loop+0x13c>)
 80161dc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80161e0:	4b32      	ldr	r3, [pc, #200]	; (80162ac <steering_loop+0x13c>)
 80161e2:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80161e6:	edd3 7a00 	vldr	s15, [r3]
 80161ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80161f2:	ee17 3a90 	vmov	r3, s15
 80161f6:	f113 0f02 	cmn.w	r3, #2
 80161fa:	db11      	blt.n	8016220 <steering_loop+0xb0>
 80161fc:	4b2b      	ldr	r3, [pc, #172]	; (80162ac <steering_loop+0x13c>)
 80161fe:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8016202:	4b2a      	ldr	r3, [pc, #168]	; (80162ac <steering_loop+0x13c>)
 8016204:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8016208:	edd3 7a00 	vldr	s15, [r3]
 801620c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016214:	ee17 3a90 	vmov	r3, s15
 8016218:	2b02      	cmp	r3, #2
 801621a:	dc01      	bgt.n	8016220 <steering_loop+0xb0>
 801621c:	2301      	movs	r3, #1
 801621e:	e000      	b.n	8016222 <steering_loop+0xb2>
 8016220:	2300      	movs	r3, #0
 8016222:	b2db      	uxtb	r3, r3
 8016224:	461a      	mov	r2, r3
 8016226:	2108      	movs	r1, #8
 8016228:	4822      	ldr	r0, [pc, #136]	; (80162b4 <steering_loop+0x144>)
 801622a:	f7f1 fa9b 	bl	8007764 <HAL_GPIO_WritePin>
		}

		if ((Common.operation_mode == 0 || Common.operation_mode == 1) && millis() - lastYawUpdate >= STEERING_YAW_DELAY && Common.gps.fix)
 801622e:	4b1f      	ldr	r3, [pc, #124]	; (80162ac <steering_loop+0x13c>)
 8016230:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 8016234:	2b00      	cmp	r3, #0
 8016236:	d004      	beq.n	8016242 <steering_loop+0xd2>
 8016238:	4b1c      	ldr	r3, [pc, #112]	; (80162ac <steering_loop+0x13c>)
 801623a:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 801623e:	2b01      	cmp	r3, #1
 8016240:	d132      	bne.n	80162a8 <steering_loop+0x138>
 8016242:	f7fd fdf5 	bl	8013e30 <millis>
 8016246:	4602      	mov	r2, r0
 8016248:	4b1b      	ldr	r3, [pc, #108]	; (80162b8 <steering_loop+0x148>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	1ad3      	subs	r3, r2, r3
 801624e:	2b63      	cmp	r3, #99	; 0x63
 8016250:	d92a      	bls.n	80162a8 <steering_loop+0x138>
 8016252:	4b16      	ldr	r3, [pc, #88]	; (80162ac <steering_loop+0x13c>)
 8016254:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8016258:	2b00      	cmp	r3, #0
 801625a:	d025      	beq.n	80162a8 <steering_loop+0x138>
		{
			Common.target_yaw = bearing(Common.gps.latitudeDegrees, Common.gps.longitudeDegrees, Common.target_lat, Common.target_lon); // target_yaw wyliczane z pozycji anteny
 801625c:	4b13      	ldr	r3, [pc, #76]	; (80162ac <steering_loop+0x13c>)
 801625e:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8016262:	4b12      	ldr	r3, [pc, #72]	; (80162ac <steering_loop+0x13c>)
 8016264:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8016268:	4b10      	ldr	r3, [pc, #64]	; (80162ac <steering_loop+0x13c>)
 801626a:	f203 73ac 	addw	r3, r3, #1964	; 0x7ac
 801626e:	edd3 6a00 	vldr	s13, [r3]
 8016272:	4b0e      	ldr	r3, [pc, #56]	; (80162ac <steering_loop+0x13c>)
 8016274:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8016278:	ed93 6a00 	vldr	s12, [r3]
 801627c:	eef0 1a46 	vmov.f32	s3, s12
 8016280:	eeb0 1a66 	vmov.f32	s2, s13
 8016284:	eef0 0a47 	vmov.f32	s1, s14
 8016288:	eeb0 0a67 	vmov.f32	s0, s15
 801628c:	f7ff fdbc 	bl	8015e08 <bearing>
 8016290:	eef0 7a40 	vmov.f32	s15, s0
 8016294:	4b05      	ldr	r3, [pc, #20]	; (80162ac <steering_loop+0x13c>)
 8016296:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 801629a:	edc3 7a00 	vstr	s15, [r3]
			lastYawUpdate = millis();
 801629e:	f7fd fdc7 	bl	8013e30 <millis>
 80162a2:	4602      	mov	r2, r0
 80162a4:	4b04      	ldr	r3, [pc, #16]	; (80162b8 <steering_loop+0x148>)
 80162a6:	601a      	str	r2, [r3, #0]
		}
	}
	#endif
}
 80162a8:	bf00      	nop
 80162aa:	bd80      	pop	{r7, pc}
 80162ac:	20000de0 	.word	0x20000de0
 80162b0:	20008590 	.word	0x20008590
 80162b4:	40020800 	.word	0x40020800
 80162b8:	20008598 	.word	0x20008598

080162bc <play_animation>:

uint32_t animation_timer;
uint16_t animation_step;
int8_t animation_dir;

static void play_animation(void (*animation)(void), uint32_t duration) { animation_timer = millis(); while (millis() - animation_timer <= duration) { (*animation)(); delay(1); } }
 80162bc:	b580      	push	{r7, lr}
 80162be:	b082      	sub	sp, #8
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
 80162c4:	6039      	str	r1, [r7, #0]
 80162c6:	f7fd fdb3 	bl	8013e30 <millis>
 80162ca:	4602      	mov	r2, r0
 80162cc:	4b0a      	ldr	r3, [pc, #40]	; (80162f8 <play_animation+0x3c>)
 80162ce:	601a      	str	r2, [r3, #0]
 80162d0:	e004      	b.n	80162dc <play_animation+0x20>
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	4798      	blx	r3
 80162d6:	2001      	movs	r0, #1
 80162d8:	f7f0 fbc6 	bl	8006a68 <HAL_Delay>
 80162dc:	f7fd fda8 	bl	8013e30 <millis>
 80162e0:	4602      	mov	r2, r0
 80162e2:	4b05      	ldr	r3, [pc, #20]	; (80162f8 <play_animation+0x3c>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	1ad3      	subs	r3, r2, r3
 80162e8:	683a      	ldr	r2, [r7, #0]
 80162ea:	429a      	cmp	r2, r3
 80162ec:	d2f1      	bcs.n	80162d2 <play_animation+0x16>
 80162ee:	bf00      	nop
 80162f0:	3708      	adds	r7, #8
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}
 80162f6:	bf00      	nop
 80162f8:	20003ccc 	.word	0x20003ccc

080162fc <leds_low>:

static const void leds_low(void) { writePin(LEDA, LOW); writePin(LEDB, LOW); writePin(LEDC, LOW); writePin(LEDD, LOW); }
 80162fc:	b580      	push	{r7, lr}
 80162fe:	af00      	add	r7, sp, #0
 8016300:	2200      	movs	r2, #0
 8016302:	2101      	movs	r1, #1
 8016304:	4809      	ldr	r0, [pc, #36]	; (801632c <leds_low+0x30>)
 8016306:	f7f1 fa2d 	bl	8007764 <HAL_GPIO_WritePin>
 801630a:	2200      	movs	r2, #0
 801630c:	2102      	movs	r1, #2
 801630e:	4807      	ldr	r0, [pc, #28]	; (801632c <leds_low+0x30>)
 8016310:	f7f1 fa28 	bl	8007764 <HAL_GPIO_WritePin>
 8016314:	2200      	movs	r2, #0
 8016316:	2104      	movs	r1, #4
 8016318:	4804      	ldr	r0, [pc, #16]	; (801632c <leds_low+0x30>)
 801631a:	f7f1 fa23 	bl	8007764 <HAL_GPIO_WritePin>
 801631e:	2200      	movs	r2, #0
 8016320:	2108      	movs	r1, #8
 8016322:	4802      	ldr	r0, [pc, #8]	; (801632c <leds_low+0x30>)
 8016324:	f7f1 fa1e 	bl	8007764 <HAL_GPIO_WritePin>
 8016328:	bf00      	nop
 801632a:	bd80      	pop	{r7, pc}
 801632c:	40020800 	.word	0x40020800

08016330 <leds_bounce>:
static const void leds_high(void) { writePin(LEDA, HIGH); writePin(LEDB, HIGH); writePin(LEDC, HIGH); writePin(LEDD, HIGH); }

static const void leds_bounce(void)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	af00      	add	r7, sp, #0
	writePin(LEDA, (animation_step >= 50 && animation_step < 150));
 8016334:	4b30      	ldr	r3, [pc, #192]	; (80163f8 <leds_bounce+0xc8>)
 8016336:	881b      	ldrh	r3, [r3, #0]
 8016338:	2b31      	cmp	r3, #49	; 0x31
 801633a:	d905      	bls.n	8016348 <leds_bounce+0x18>
 801633c:	4b2e      	ldr	r3, [pc, #184]	; (80163f8 <leds_bounce+0xc8>)
 801633e:	881b      	ldrh	r3, [r3, #0]
 8016340:	2b95      	cmp	r3, #149	; 0x95
 8016342:	d801      	bhi.n	8016348 <leds_bounce+0x18>
 8016344:	2301      	movs	r3, #1
 8016346:	e000      	b.n	801634a <leds_bounce+0x1a>
 8016348:	2300      	movs	r3, #0
 801634a:	b2db      	uxtb	r3, r3
 801634c:	461a      	mov	r2, r3
 801634e:	2101      	movs	r1, #1
 8016350:	482a      	ldr	r0, [pc, #168]	; (80163fc <leds_bounce+0xcc>)
 8016352:	f7f1 fa07 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDB, (animation_step >= 150 && animation_step < 250));
 8016356:	4b28      	ldr	r3, [pc, #160]	; (80163f8 <leds_bounce+0xc8>)
 8016358:	881b      	ldrh	r3, [r3, #0]
 801635a:	2b95      	cmp	r3, #149	; 0x95
 801635c:	d905      	bls.n	801636a <leds_bounce+0x3a>
 801635e:	4b26      	ldr	r3, [pc, #152]	; (80163f8 <leds_bounce+0xc8>)
 8016360:	881b      	ldrh	r3, [r3, #0]
 8016362:	2bf9      	cmp	r3, #249	; 0xf9
 8016364:	d801      	bhi.n	801636a <leds_bounce+0x3a>
 8016366:	2301      	movs	r3, #1
 8016368:	e000      	b.n	801636c <leds_bounce+0x3c>
 801636a:	2300      	movs	r3, #0
 801636c:	b2db      	uxtb	r3, r3
 801636e:	461a      	mov	r2, r3
 8016370:	2102      	movs	r1, #2
 8016372:	4822      	ldr	r0, [pc, #136]	; (80163fc <leds_bounce+0xcc>)
 8016374:	f7f1 f9f6 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDC, (animation_step >= 250 && animation_step < 350));
 8016378:	4b1f      	ldr	r3, [pc, #124]	; (80163f8 <leds_bounce+0xc8>)
 801637a:	881b      	ldrh	r3, [r3, #0]
 801637c:	2bf9      	cmp	r3, #249	; 0xf9
 801637e:	d906      	bls.n	801638e <leds_bounce+0x5e>
 8016380:	4b1d      	ldr	r3, [pc, #116]	; (80163f8 <leds_bounce+0xc8>)
 8016382:	881b      	ldrh	r3, [r3, #0]
 8016384:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8016388:	d201      	bcs.n	801638e <leds_bounce+0x5e>
 801638a:	2301      	movs	r3, #1
 801638c:	e000      	b.n	8016390 <leds_bounce+0x60>
 801638e:	2300      	movs	r3, #0
 8016390:	b2db      	uxtb	r3, r3
 8016392:	461a      	mov	r2, r3
 8016394:	2104      	movs	r1, #4
 8016396:	4819      	ldr	r0, [pc, #100]	; (80163fc <leds_bounce+0xcc>)
 8016398:	f7f1 f9e4 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDD, (animation_step >= 350 && animation_step < 450));
 801639c:	4b16      	ldr	r3, [pc, #88]	; (80163f8 <leds_bounce+0xc8>)
 801639e:	881b      	ldrh	r3, [r3, #0]
 80163a0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80163a4:	d306      	bcc.n	80163b4 <leds_bounce+0x84>
 80163a6:	4b14      	ldr	r3, [pc, #80]	; (80163f8 <leds_bounce+0xc8>)
 80163a8:	881b      	ldrh	r3, [r3, #0]
 80163aa:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80163ae:	d201      	bcs.n	80163b4 <leds_bounce+0x84>
 80163b0:	2301      	movs	r3, #1
 80163b2:	e000      	b.n	80163b6 <leds_bounce+0x86>
 80163b4:	2300      	movs	r3, #0
 80163b6:	b2db      	uxtb	r3, r3
 80163b8:	461a      	mov	r2, r3
 80163ba:	2108      	movs	r1, #8
 80163bc:	480f      	ldr	r0, [pc, #60]	; (80163fc <leds_bounce+0xcc>)
 80163be:	f7f1 f9d1 	bl	8007764 <HAL_GPIO_WritePin>
	animation_step += animation_dir;
 80163c2:	4b0f      	ldr	r3, [pc, #60]	; (8016400 <leds_bounce+0xd0>)
 80163c4:	f993 3000 	ldrsb.w	r3, [r3]
 80163c8:	b29a      	uxth	r2, r3
 80163ca:	4b0b      	ldr	r3, [pc, #44]	; (80163f8 <leds_bounce+0xc8>)
 80163cc:	881b      	ldrh	r3, [r3, #0]
 80163ce:	4413      	add	r3, r2
 80163d0:	b29a      	uxth	r2, r3
 80163d2:	4b09      	ldr	r3, [pc, #36]	; (80163f8 <leds_bounce+0xc8>)
 80163d4:	801a      	strh	r2, [r3, #0]
	if (animation_step > 500) { animation_dir *= -1; }
 80163d6:	4b08      	ldr	r3, [pc, #32]	; (80163f8 <leds_bounce+0xc8>)
 80163d8:	881b      	ldrh	r3, [r3, #0]
 80163da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80163de:	d908      	bls.n	80163f2 <leds_bounce+0xc2>
 80163e0:	4b07      	ldr	r3, [pc, #28]	; (8016400 <leds_bounce+0xd0>)
 80163e2:	f993 3000 	ldrsb.w	r3, [r3]
 80163e6:	b2db      	uxtb	r3, r3
 80163e8:	425b      	negs	r3, r3
 80163ea:	b2db      	uxtb	r3, r3
 80163ec:	b25a      	sxtb	r2, r3
 80163ee:	4b04      	ldr	r3, [pc, #16]	; (8016400 <leds_bounce+0xd0>)
 80163f0:	701a      	strb	r2, [r3, #0]
}
 80163f2:	bf00      	nop
 80163f4:	bd80      	pop	{r7, pc}
 80163f6:	bf00      	nop
 80163f8:	20003cd0 	.word	0x20003cd0
 80163fc:	40020800 	.word	0x40020800
 8016400:	20003cc8 	.word	0x20003cc8

08016404 <leds_fill>:

static const void leds_fill(void)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	af00      	add	r7, sp, #0
	writePin(LEDA, (animation_step >= 100));
 8016408:	4b26      	ldr	r3, [pc, #152]	; (80164a4 <leds_fill+0xa0>)
 801640a:	881b      	ldrh	r3, [r3, #0]
 801640c:	2b63      	cmp	r3, #99	; 0x63
 801640e:	bf8c      	ite	hi
 8016410:	2301      	movhi	r3, #1
 8016412:	2300      	movls	r3, #0
 8016414:	b2db      	uxtb	r3, r3
 8016416:	461a      	mov	r2, r3
 8016418:	2101      	movs	r1, #1
 801641a:	4823      	ldr	r0, [pc, #140]	; (80164a8 <leds_fill+0xa4>)
 801641c:	f7f1 f9a2 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDB, (animation_step >= 200));
 8016420:	4b20      	ldr	r3, [pc, #128]	; (80164a4 <leds_fill+0xa0>)
 8016422:	881b      	ldrh	r3, [r3, #0]
 8016424:	2bc7      	cmp	r3, #199	; 0xc7
 8016426:	bf8c      	ite	hi
 8016428:	2301      	movhi	r3, #1
 801642a:	2300      	movls	r3, #0
 801642c:	b2db      	uxtb	r3, r3
 801642e:	461a      	mov	r2, r3
 8016430:	2102      	movs	r1, #2
 8016432:	481d      	ldr	r0, [pc, #116]	; (80164a8 <leds_fill+0xa4>)
 8016434:	f7f1 f996 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDC, (animation_step >= 300));
 8016438:	4b1a      	ldr	r3, [pc, #104]	; (80164a4 <leds_fill+0xa0>)
 801643a:	881b      	ldrh	r3, [r3, #0]
 801643c:	f240 122b 	movw	r2, #299	; 0x12b
 8016440:	4293      	cmp	r3, r2
 8016442:	bf8c      	ite	hi
 8016444:	2301      	movhi	r3, #1
 8016446:	2300      	movls	r3, #0
 8016448:	b2db      	uxtb	r3, r3
 801644a:	461a      	mov	r2, r3
 801644c:	2104      	movs	r1, #4
 801644e:	4816      	ldr	r0, [pc, #88]	; (80164a8 <leds_fill+0xa4>)
 8016450:	f7f1 f988 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDD, (animation_step >= 400));
 8016454:	4b13      	ldr	r3, [pc, #76]	; (80164a4 <leds_fill+0xa0>)
 8016456:	881b      	ldrh	r3, [r3, #0]
 8016458:	f240 128f 	movw	r2, #399	; 0x18f
 801645c:	4293      	cmp	r3, r2
 801645e:	bf8c      	ite	hi
 8016460:	2301      	movhi	r3, #1
 8016462:	2300      	movls	r3, #0
 8016464:	b2db      	uxtb	r3, r3
 8016466:	461a      	mov	r2, r3
 8016468:	2108      	movs	r1, #8
 801646a:	480f      	ldr	r0, [pc, #60]	; (80164a8 <leds_fill+0xa4>)
 801646c:	f7f1 f97a 	bl	8007764 <HAL_GPIO_WritePin>
	animation_step += animation_dir;
 8016470:	4b0e      	ldr	r3, [pc, #56]	; (80164ac <leds_fill+0xa8>)
 8016472:	f993 3000 	ldrsb.w	r3, [r3]
 8016476:	b29a      	uxth	r2, r3
 8016478:	4b0a      	ldr	r3, [pc, #40]	; (80164a4 <leds_fill+0xa0>)
 801647a:	881b      	ldrh	r3, [r3, #0]
 801647c:	4413      	add	r3, r2
 801647e:	b29a      	uxth	r2, r3
 8016480:	4b08      	ldr	r3, [pc, #32]	; (80164a4 <leds_fill+0xa0>)
 8016482:	801a      	strh	r2, [r3, #0]
	if (animation_step > 500) { animation_dir *= -1; }
 8016484:	4b07      	ldr	r3, [pc, #28]	; (80164a4 <leds_fill+0xa0>)
 8016486:	881b      	ldrh	r3, [r3, #0]
 8016488:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801648c:	d908      	bls.n	80164a0 <leds_fill+0x9c>
 801648e:	4b07      	ldr	r3, [pc, #28]	; (80164ac <leds_fill+0xa8>)
 8016490:	f993 3000 	ldrsb.w	r3, [r3]
 8016494:	b2db      	uxtb	r3, r3
 8016496:	425b      	negs	r3, r3
 8016498:	b2db      	uxtb	r3, r3
 801649a:	b25a      	sxtb	r2, r3
 801649c:	4b03      	ldr	r3, [pc, #12]	; (80164ac <leds_fill+0xa8>)
 801649e:	701a      	strb	r2, [r3, #0]
}
 80164a0:	bf00      	nop
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	20003cd0 	.word	0x20003cd0
 80164a8:	40020800 	.word	0x40020800
 80164ac:	20003cc8 	.word	0x20003cc8

080164b0 <leds_confirm>:

static const void leds_confirm(void)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	af00      	add	r7, sp, #0
	writePin(LEDA, (animation_step % 200 > 60));
 80164b4:	4b36      	ldr	r3, [pc, #216]	; (8016590 <leds_confirm+0xe0>)
 80164b6:	881b      	ldrh	r3, [r3, #0]
 80164b8:	4a36      	ldr	r2, [pc, #216]	; (8016594 <leds_confirm+0xe4>)
 80164ba:	fba2 1203 	umull	r1, r2, r2, r3
 80164be:	0992      	lsrs	r2, r2, #6
 80164c0:	21c8      	movs	r1, #200	; 0xc8
 80164c2:	fb01 f202 	mul.w	r2, r1, r2
 80164c6:	1a9b      	subs	r3, r3, r2
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	2b3c      	cmp	r3, #60	; 0x3c
 80164cc:	bf8c      	ite	hi
 80164ce:	2301      	movhi	r3, #1
 80164d0:	2300      	movls	r3, #0
 80164d2:	b2db      	uxtb	r3, r3
 80164d4:	461a      	mov	r2, r3
 80164d6:	2101      	movs	r1, #1
 80164d8:	482f      	ldr	r0, [pc, #188]	; (8016598 <leds_confirm+0xe8>)
 80164da:	f7f1 f943 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDB, (animation_step % 200 > 60));
 80164de:	4b2c      	ldr	r3, [pc, #176]	; (8016590 <leds_confirm+0xe0>)
 80164e0:	881b      	ldrh	r3, [r3, #0]
 80164e2:	4a2c      	ldr	r2, [pc, #176]	; (8016594 <leds_confirm+0xe4>)
 80164e4:	fba2 1203 	umull	r1, r2, r2, r3
 80164e8:	0992      	lsrs	r2, r2, #6
 80164ea:	21c8      	movs	r1, #200	; 0xc8
 80164ec:	fb01 f202 	mul.w	r2, r1, r2
 80164f0:	1a9b      	subs	r3, r3, r2
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	2b3c      	cmp	r3, #60	; 0x3c
 80164f6:	bf8c      	ite	hi
 80164f8:	2301      	movhi	r3, #1
 80164fa:	2300      	movls	r3, #0
 80164fc:	b2db      	uxtb	r3, r3
 80164fe:	461a      	mov	r2, r3
 8016500:	2102      	movs	r1, #2
 8016502:	4825      	ldr	r0, [pc, #148]	; (8016598 <leds_confirm+0xe8>)
 8016504:	f7f1 f92e 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDC, (animation_step % 200 > 60));
 8016508:	4b21      	ldr	r3, [pc, #132]	; (8016590 <leds_confirm+0xe0>)
 801650a:	881b      	ldrh	r3, [r3, #0]
 801650c:	4a21      	ldr	r2, [pc, #132]	; (8016594 <leds_confirm+0xe4>)
 801650e:	fba2 1203 	umull	r1, r2, r2, r3
 8016512:	0992      	lsrs	r2, r2, #6
 8016514:	21c8      	movs	r1, #200	; 0xc8
 8016516:	fb01 f202 	mul.w	r2, r1, r2
 801651a:	1a9b      	subs	r3, r3, r2
 801651c:	b29b      	uxth	r3, r3
 801651e:	2b3c      	cmp	r3, #60	; 0x3c
 8016520:	bf8c      	ite	hi
 8016522:	2301      	movhi	r3, #1
 8016524:	2300      	movls	r3, #0
 8016526:	b2db      	uxtb	r3, r3
 8016528:	461a      	mov	r2, r3
 801652a:	2104      	movs	r1, #4
 801652c:	481a      	ldr	r0, [pc, #104]	; (8016598 <leds_confirm+0xe8>)
 801652e:	f7f1 f919 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDD, (animation_step % 200 > 60));
 8016532:	4b17      	ldr	r3, [pc, #92]	; (8016590 <leds_confirm+0xe0>)
 8016534:	881b      	ldrh	r3, [r3, #0]
 8016536:	4a17      	ldr	r2, [pc, #92]	; (8016594 <leds_confirm+0xe4>)
 8016538:	fba2 1203 	umull	r1, r2, r2, r3
 801653c:	0992      	lsrs	r2, r2, #6
 801653e:	21c8      	movs	r1, #200	; 0xc8
 8016540:	fb01 f202 	mul.w	r2, r1, r2
 8016544:	1a9b      	subs	r3, r3, r2
 8016546:	b29b      	uxth	r3, r3
 8016548:	2b3c      	cmp	r3, #60	; 0x3c
 801654a:	bf8c      	ite	hi
 801654c:	2301      	movhi	r3, #1
 801654e:	2300      	movls	r3, #0
 8016550:	b2db      	uxtb	r3, r3
 8016552:	461a      	mov	r2, r3
 8016554:	2108      	movs	r1, #8
 8016556:	4810      	ldr	r0, [pc, #64]	; (8016598 <leds_confirm+0xe8>)
 8016558:	f7f1 f904 	bl	8007764 <HAL_GPIO_WritePin>
	animation_step += animation_dir;
 801655c:	4b0f      	ldr	r3, [pc, #60]	; (801659c <leds_confirm+0xec>)
 801655e:	f993 3000 	ldrsb.w	r3, [r3]
 8016562:	b29a      	uxth	r2, r3
 8016564:	4b0a      	ldr	r3, [pc, #40]	; (8016590 <leds_confirm+0xe0>)
 8016566:	881b      	ldrh	r3, [r3, #0]
 8016568:	4413      	add	r3, r2
 801656a:	b29a      	uxth	r2, r3
 801656c:	4b08      	ldr	r3, [pc, #32]	; (8016590 <leds_confirm+0xe0>)
 801656e:	801a      	strh	r2, [r3, #0]
	if (animation_step > 500) { animation_dir *= -1; }
 8016570:	4b07      	ldr	r3, [pc, #28]	; (8016590 <leds_confirm+0xe0>)
 8016572:	881b      	ldrh	r3, [r3, #0]
 8016574:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8016578:	d908      	bls.n	801658c <leds_confirm+0xdc>
 801657a:	4b08      	ldr	r3, [pc, #32]	; (801659c <leds_confirm+0xec>)
 801657c:	f993 3000 	ldrsb.w	r3, [r3]
 8016580:	b2db      	uxtb	r3, r3
 8016582:	425b      	negs	r3, r3
 8016584:	b2db      	uxtb	r3, r3
 8016586:	b25a      	sxtb	r2, r3
 8016588:	4b04      	ldr	r3, [pc, #16]	; (801659c <leds_confirm+0xec>)
 801658a:	701a      	strb	r2, [r3, #0]
}
 801658c:	bf00      	nop
 801658e:	bd80      	pop	{r7, pc}
 8016590:	20003cd0 	.word	0x20003cd0
 8016594:	51eb851f 	.word	0x51eb851f
 8016598:	40020800 	.word	0x40020800
 801659c:	20003cc8 	.word	0x20003cc8

080165a0 <leds_negate>:

static const void leds_negate(void)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	af00      	add	r7, sp, #0
	writePin(LEDA, (animation_step % 30 > 15));
 80165a4:	4b38      	ldr	r3, [pc, #224]	; (8016688 <leds_negate+0xe8>)
 80165a6:	881a      	ldrh	r2, [r3, #0]
 80165a8:	4b38      	ldr	r3, [pc, #224]	; (801668c <leds_negate+0xec>)
 80165aa:	fba3 1302 	umull	r1, r3, r3, r2
 80165ae:	0919      	lsrs	r1, r3, #4
 80165b0:	460b      	mov	r3, r1
 80165b2:	011b      	lsls	r3, r3, #4
 80165b4:	1a5b      	subs	r3, r3, r1
 80165b6:	005b      	lsls	r3, r3, #1
 80165b8:	1ad3      	subs	r3, r2, r3
 80165ba:	b29b      	uxth	r3, r3
 80165bc:	2b0f      	cmp	r3, #15
 80165be:	bf8c      	ite	hi
 80165c0:	2301      	movhi	r3, #1
 80165c2:	2300      	movls	r3, #0
 80165c4:	b2db      	uxtb	r3, r3
 80165c6:	461a      	mov	r2, r3
 80165c8:	2101      	movs	r1, #1
 80165ca:	4831      	ldr	r0, [pc, #196]	; (8016690 <leds_negate+0xf0>)
 80165cc:	f7f1 f8ca 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDB, (animation_step % 30 > 15));
 80165d0:	4b2d      	ldr	r3, [pc, #180]	; (8016688 <leds_negate+0xe8>)
 80165d2:	881a      	ldrh	r2, [r3, #0]
 80165d4:	4b2d      	ldr	r3, [pc, #180]	; (801668c <leds_negate+0xec>)
 80165d6:	fba3 1302 	umull	r1, r3, r3, r2
 80165da:	0919      	lsrs	r1, r3, #4
 80165dc:	460b      	mov	r3, r1
 80165de:	011b      	lsls	r3, r3, #4
 80165e0:	1a5b      	subs	r3, r3, r1
 80165e2:	005b      	lsls	r3, r3, #1
 80165e4:	1ad3      	subs	r3, r2, r3
 80165e6:	b29b      	uxth	r3, r3
 80165e8:	2b0f      	cmp	r3, #15
 80165ea:	bf8c      	ite	hi
 80165ec:	2301      	movhi	r3, #1
 80165ee:	2300      	movls	r3, #0
 80165f0:	b2db      	uxtb	r3, r3
 80165f2:	461a      	mov	r2, r3
 80165f4:	2102      	movs	r1, #2
 80165f6:	4826      	ldr	r0, [pc, #152]	; (8016690 <leds_negate+0xf0>)
 80165f8:	f7f1 f8b4 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDC, (animation_step % 30 > 15));
 80165fc:	4b22      	ldr	r3, [pc, #136]	; (8016688 <leds_negate+0xe8>)
 80165fe:	881a      	ldrh	r2, [r3, #0]
 8016600:	4b22      	ldr	r3, [pc, #136]	; (801668c <leds_negate+0xec>)
 8016602:	fba3 1302 	umull	r1, r3, r3, r2
 8016606:	0919      	lsrs	r1, r3, #4
 8016608:	460b      	mov	r3, r1
 801660a:	011b      	lsls	r3, r3, #4
 801660c:	1a5b      	subs	r3, r3, r1
 801660e:	005b      	lsls	r3, r3, #1
 8016610:	1ad3      	subs	r3, r2, r3
 8016612:	b29b      	uxth	r3, r3
 8016614:	2b0f      	cmp	r3, #15
 8016616:	bf8c      	ite	hi
 8016618:	2301      	movhi	r3, #1
 801661a:	2300      	movls	r3, #0
 801661c:	b2db      	uxtb	r3, r3
 801661e:	461a      	mov	r2, r3
 8016620:	2104      	movs	r1, #4
 8016622:	481b      	ldr	r0, [pc, #108]	; (8016690 <leds_negate+0xf0>)
 8016624:	f7f1 f89e 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDD, (animation_step % 30 > 15));
 8016628:	4b17      	ldr	r3, [pc, #92]	; (8016688 <leds_negate+0xe8>)
 801662a:	881a      	ldrh	r2, [r3, #0]
 801662c:	4b17      	ldr	r3, [pc, #92]	; (801668c <leds_negate+0xec>)
 801662e:	fba3 1302 	umull	r1, r3, r3, r2
 8016632:	0919      	lsrs	r1, r3, #4
 8016634:	460b      	mov	r3, r1
 8016636:	011b      	lsls	r3, r3, #4
 8016638:	1a5b      	subs	r3, r3, r1
 801663a:	005b      	lsls	r3, r3, #1
 801663c:	1ad3      	subs	r3, r2, r3
 801663e:	b29b      	uxth	r3, r3
 8016640:	2b0f      	cmp	r3, #15
 8016642:	bf8c      	ite	hi
 8016644:	2301      	movhi	r3, #1
 8016646:	2300      	movls	r3, #0
 8016648:	b2db      	uxtb	r3, r3
 801664a:	461a      	mov	r2, r3
 801664c:	2108      	movs	r1, #8
 801664e:	4810      	ldr	r0, [pc, #64]	; (8016690 <leds_negate+0xf0>)
 8016650:	f7f1 f888 	bl	8007764 <HAL_GPIO_WritePin>
	animation_step += animation_dir;
 8016654:	4b0f      	ldr	r3, [pc, #60]	; (8016694 <leds_negate+0xf4>)
 8016656:	f993 3000 	ldrsb.w	r3, [r3]
 801665a:	b29a      	uxth	r2, r3
 801665c:	4b0a      	ldr	r3, [pc, #40]	; (8016688 <leds_negate+0xe8>)
 801665e:	881b      	ldrh	r3, [r3, #0]
 8016660:	4413      	add	r3, r2
 8016662:	b29a      	uxth	r2, r3
 8016664:	4b08      	ldr	r3, [pc, #32]	; (8016688 <leds_negate+0xe8>)
 8016666:	801a      	strh	r2, [r3, #0]
	if (animation_step > 500) { animation_dir *= -1; }
 8016668:	4b07      	ldr	r3, [pc, #28]	; (8016688 <leds_negate+0xe8>)
 801666a:	881b      	ldrh	r3, [r3, #0]
 801666c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8016670:	d908      	bls.n	8016684 <leds_negate+0xe4>
 8016672:	4b08      	ldr	r3, [pc, #32]	; (8016694 <leds_negate+0xf4>)
 8016674:	f993 3000 	ldrsb.w	r3, [r3]
 8016678:	b2db      	uxtb	r3, r3
 801667a:	425b      	negs	r3, r3
 801667c:	b2db      	uxtb	r3, r3
 801667e:	b25a      	sxtb	r2, r3
 8016680:	4b04      	ldr	r3, [pc, #16]	; (8016694 <leds_negate+0xf4>)
 8016682:	701a      	strb	r2, [r3, #0]
}
 8016684:	bf00      	nop
 8016686:	bd80      	pop	{r7, pc}
 8016688:	20003cd0 	.word	0x20003cd0
 801668c:	88888889 	.word	0x88888889
 8016690:	40020800 	.word	0x40020800
 8016694:	20003cc8 	.word	0x20003cc8

08016698 <latchArms>:

uint8_t flight_safety;
bool armsOpen, setupSuccess;
uint8_t terminate;

static void latchArms(void) { if (armsOpen)  { /*TIM_->CCR_ = 900;*/ armsOpen = false; }}
 8016698:	b480      	push	{r7}
 801669a:	af00      	add	r7, sp, #0
 801669c:	4b05      	ldr	r3, [pc, #20]	; (80166b4 <latchArms+0x1c>)
 801669e:	781b      	ldrb	r3, [r3, #0]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d002      	beq.n	80166aa <latchArms+0x12>
 80166a4:	4b03      	ldr	r3, [pc, #12]	; (80166b4 <latchArms+0x1c>)
 80166a6:	2200      	movs	r2, #0
 80166a8:	701a      	strb	r2, [r3, #0]
 80166aa:	bf00      	nop
 80166ac:	46bd      	mov	sp, r7
 80166ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b2:	4770      	bx	lr
 80166b4:	200085a0 	.word	0x200085a0

080166b8 <openArms>:
static void openArms(void)  { if (!armsOpen) { /*TIM_->CCR_ = 550;*/ armsOpen = true; }}
 80166b8:	b480      	push	{r7}
 80166ba:	af00      	add	r7, sp, #0
 80166bc:	4b07      	ldr	r3, [pc, #28]	; (80166dc <openArms+0x24>)
 80166be:	781b      	ldrb	r3, [r3, #0]
 80166c0:	f083 0301 	eor.w	r3, r3, #1
 80166c4:	b2db      	uxtb	r3, r3
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d002      	beq.n	80166d0 <openArms+0x18>
 80166ca:	4b04      	ldr	r3, [pc, #16]	; (80166dc <openArms+0x24>)
 80166cc:	2201      	movs	r2, #1
 80166ce:	701a      	strb	r2, [r3, #0]
 80166d0:	bf00      	nop
 80166d2:	46bd      	mov	sp, r7
 80166d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d8:	4770      	bx	lr
 80166da:	bf00      	nop
 80166dc:	200085a0 	.word	0x200085a0

080166e0 <terminator>:

static void terminator(void)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	af00      	add	r7, sp, #0
	terminate = 0;
 80166e4:	4bae      	ldr	r3, [pc, #696]	; (80169a0 <terminator+0x2c0>)
 80166e6:	2200      	movs	r2, #0
 80166e8:	701a      	strb	r2, [r3, #0]
	terminate |= ((Common.bmp.active) && (abs(Common.bmp.alt_dx) > TERMINAL_ALT_DX)) << 1; // Falling too fast
 80166ea:	4bae      	ldr	r3, [pc, #696]	; (80169a4 <terminator+0x2c4>)
 80166ec:	7f1b      	ldrb	r3, [r3, #28]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d016      	beq.n	8016720 <terminator+0x40>
 80166f2:	4bac      	ldr	r3, [pc, #688]	; (80169a4 <terminator+0x2c4>)
 80166f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80166f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80166fc:	ee17 3a90 	vmov	r3, s15
 8016700:	2b00      	cmp	r3, #0
 8016702:	bfb8      	it	lt
 8016704:	425b      	neglt	r3, r3
 8016706:	4618      	mov	r0, r3
 8016708:	f7e9 ff1c 	bl	8000544 <__aeabi_i2d>
 801670c:	f04f 0200 	mov.w	r2, #0
 8016710:	4ba5      	ldr	r3, [pc, #660]	; (80169a8 <terminator+0x2c8>)
 8016712:	f7ea fa11 	bl	8000b38 <__aeabi_dcmpgt>
 8016716:	4603      	mov	r3, r0
 8016718:	2b00      	cmp	r3, #0
 801671a:	d001      	beq.n	8016720 <terminator+0x40>
 801671c:	2301      	movs	r3, #1
 801671e:	e000      	b.n	8016722 <terminator+0x42>
 8016720:	2300      	movs	r3, #0
 8016722:	005b      	lsls	r3, r3, #1
 8016724:	b25a      	sxtb	r2, r3
 8016726:	4b9e      	ldr	r3, [pc, #632]	; (80169a0 <terminator+0x2c0>)
 8016728:	781b      	ldrb	r3, [r3, #0]
 801672a:	b25b      	sxtb	r3, r3
 801672c:	4313      	orrs	r3, r2
 801672e:	b25b      	sxtb	r3, r3
 8016730:	b2da      	uxtb	r2, r3
 8016732:	4b9b      	ldr	r3, [pc, #620]	; (80169a0 <terminator+0x2c0>)
 8016734:	701a      	strb	r2, [r3, #0]
	terminate |= (abs(Common.mpu.yaw_dx) > TERMINAL_YAW_DX) << 2;	// Spinning too fast
 8016736:	4b9b      	ldr	r3, [pc, #620]	; (80169a4 <terminator+0x2c4>)
 8016738:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 801673c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016740:	ee17 3a90 	vmov	r3, s15
 8016744:	2b00      	cmp	r3, #0
 8016746:	bfb8      	it	lt
 8016748:	425b      	neglt	r3, r3
 801674a:	4618      	mov	r0, r3
 801674c:	f7e9 fefa 	bl	8000544 <__aeabi_i2d>
 8016750:	f04f 0200 	mov.w	r2, #0
 8016754:	4b95      	ldr	r3, [pc, #596]	; (80169ac <terminator+0x2cc>)
 8016756:	f7ea f9ef 	bl	8000b38 <__aeabi_dcmpgt>
 801675a:	4603      	mov	r3, r0
 801675c:	2b00      	cmp	r3, #0
 801675e:	d001      	beq.n	8016764 <terminator+0x84>
 8016760:	2204      	movs	r2, #4
 8016762:	e000      	b.n	8016766 <terminator+0x86>
 8016764:	2200      	movs	r2, #0
 8016766:	4b8e      	ldr	r3, [pc, #568]	; (80169a0 <terminator+0x2c0>)
 8016768:	781b      	ldrb	r3, [r3, #0]
 801676a:	b25b      	sxtb	r3, r3
 801676c:	4313      	orrs	r3, r2
 801676e:	b25b      	sxtb	r3, r3
 8016770:	b2da      	uxtb	r2, r3
 8016772:	4b8b      	ldr	r3, [pc, #556]	; (80169a0 <terminator+0x2c0>)
 8016774:	701a      	strb	r2, [r3, #0]
	terminate |= ((abs(Common.mpu.pitch - 90) > TERMINAL_HOR) ||
 8016776:	4b8b      	ldr	r3, [pc, #556]	; (80169a4 <terminator+0x2c4>)
 8016778:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 801677c:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80169b0 <terminator+0x2d0>
 8016780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016788:	ee17 3a90 	vmov	r3, s15
 801678c:	2b00      	cmp	r3, #0
 801678e:	bfb8      	it	lt
 8016790:	425b      	neglt	r3, r3
 8016792:	4618      	mov	r0, r3
 8016794:	f7e9 fed6 	bl	8000544 <__aeabi_i2d>
 8016798:	f04f 0200 	mov.w	r2, #0
 801679c:	4b85      	ldr	r3, [pc, #532]	; (80169b4 <terminator+0x2d4>)
 801679e:	f7ea f9cb 	bl	8000b38 <__aeabi_dcmpgt>
 80167a2:	4603      	mov	r3, r0
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d118      	bne.n	80167da <terminator+0xfa>
				  (abs(Common.mpu.roll - 90) > TERMINAL_HOR)) << 3;		// In vertical position
 80167a8:	4b7e      	ldr	r3, [pc, #504]	; (80169a4 <terminator+0x2c4>)
 80167aa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80167ae:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80169b0 <terminator+0x2d0>
 80167b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80167b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80167ba:	ee17 3a90 	vmov	r3, s15
 80167be:	2b00      	cmp	r3, #0
 80167c0:	bfb8      	it	lt
 80167c2:	425b      	neglt	r3, r3
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7e9 febd 	bl	8000544 <__aeabi_i2d>
	terminate |= ((abs(Common.mpu.pitch - 90) > TERMINAL_HOR) ||
 80167ca:	f04f 0200 	mov.w	r2, #0
 80167ce:	4b79      	ldr	r3, [pc, #484]	; (80169b4 <terminator+0x2d4>)
 80167d0:	f7ea f9b2 	bl	8000b38 <__aeabi_dcmpgt>
 80167d4:	4603      	mov	r3, r0
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d001      	beq.n	80167de <terminator+0xfe>
 80167da:	2301      	movs	r3, #1
 80167dc:	e000      	b.n	80167e0 <terminator+0x100>
 80167de:	2300      	movs	r3, #0
				  (abs(Common.mpu.roll - 90) > TERMINAL_HOR)) << 3;		// In vertical position
 80167e0:	00db      	lsls	r3, r3, #3
	terminate |= ((abs(Common.mpu.pitch - 90) > TERMINAL_HOR) ||
 80167e2:	b25a      	sxtb	r2, r3
 80167e4:	4b6e      	ldr	r3, [pc, #440]	; (80169a0 <terminator+0x2c0>)
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	b25b      	sxtb	r3, r3
 80167ea:	4313      	orrs	r3, r2
 80167ec:	b25b      	sxtb	r3, r3
 80167ee:	b2da      	uxtb	r2, r3
 80167f0:	4b6b      	ldr	r3, [pc, #428]	; (80169a0 <terminator+0x2c0>)
 80167f2:	701a      	strb	r2, [r3, #0]
	terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) &&
 80167f4:	4b6b      	ldr	r3, [pc, #428]	; (80169a4 <terminator+0x2c4>)
 80167f6:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 80167fa:	4b6a      	ldr	r3, [pc, #424]	; (80169a4 <terminator+0x2c4>)
 80167fc:	f203 73ac 	addw	r3, r3, #1964	; 0x7ac
 8016800:	edd3 7a00 	vldr	s15, [r3]
 8016804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801680c:	ee17 3a90 	vmov	r3, s15
 8016810:	2b00      	cmp	r3, #0
 8016812:	bfb8      	it	lt
 8016814:	425b      	neglt	r3, r3
 8016816:	4618      	mov	r0, r3
 8016818:	f7e9 fe94 	bl	8000544 <__aeabi_i2d>
 801681c:	a35e      	add	r3, pc, #376	; (adr r3, 8016998 <terminator+0x2b8>)
 801681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016822:	f7ea f96b 	bl	8000afc <__aeabi_dcmplt>
 8016826:	4603      	mov	r3, r0
 8016828:	2b00      	cmp	r3, #0
 801682a:	d01d      	beq.n	8016868 <terminator+0x188>
				  (abs(Common.gps.longitudeDegrees - Common.target_lon) < KEEPOUT_LON)) << 4;	// At the destination (planar)
 801682c:	4b5d      	ldr	r3, [pc, #372]	; (80169a4 <terminator+0x2c4>)
 801682e:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8016832:	4b5c      	ldr	r3, [pc, #368]	; (80169a4 <terminator+0x2c4>)
 8016834:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8016838:	edd3 7a00 	vldr	s15, [r3]
 801683c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016844:	ee17 3a90 	vmov	r3, s15
 8016848:	2b00      	cmp	r3, #0
 801684a:	bfb8      	it	lt
 801684c:	425b      	neglt	r3, r3
 801684e:	4618      	mov	r0, r3
 8016850:	f7e9 fe78 	bl	8000544 <__aeabi_i2d>
	terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) &&
 8016854:	a350      	add	r3, pc, #320	; (adr r3, 8016998 <terminator+0x2b8>)
 8016856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801685a:	f7ea f94f 	bl	8000afc <__aeabi_dcmplt>
 801685e:	4603      	mov	r3, r0
 8016860:	2b00      	cmp	r3, #0
 8016862:	d001      	beq.n	8016868 <terminator+0x188>
 8016864:	2301      	movs	r3, #1
 8016866:	e000      	b.n	801686a <terminator+0x18a>
 8016868:	2300      	movs	r3, #0
				  (abs(Common.gps.longitudeDegrees - Common.target_lon) < KEEPOUT_LON)) << 4;	// At the destination (planar)
 801686a:	011b      	lsls	r3, r3, #4
	terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) &&
 801686c:	b25a      	sxtb	r2, r3
 801686e:	4b4c      	ldr	r3, [pc, #304]	; (80169a0 <terminator+0x2c0>)
 8016870:	781b      	ldrb	r3, [r3, #0]
 8016872:	b25b      	sxtb	r3, r3
 8016874:	4313      	orrs	r3, r2
 8016876:	b25b      	sxtb	r3, r3
 8016878:	b2da      	uxtb	r2, r3
 801687a:	4b49      	ldr	r3, [pc, #292]	; (80169a0 <terminator+0x2c0>)
 801687c:	701a      	strb	r2, [r3, #0]
	terminate |= (Common.bmp.altitude - Common.target_alt < KEEPOUT_ALT) << 5;	// Close to the ground
 801687e:	4b49      	ldr	r3, [pc, #292]	; (80169a4 <terminator+0x2c4>)
 8016880:	ed93 7a05 	vldr	s14, [r3, #20]
 8016884:	4b47      	ldr	r3, [pc, #284]	; (80169a4 <terminator+0x2c4>)
 8016886:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 801688a:	edd3 7a00 	vldr	s15, [r3]
 801688e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016892:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8016896:	eef4 7ac7 	vcmpe.f32	s15, s14
 801689a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689e:	d501      	bpl.n	80168a4 <terminator+0x1c4>
 80168a0:	2220      	movs	r2, #32
 80168a2:	e000      	b.n	80168a6 <terminator+0x1c6>
 80168a4:	2200      	movs	r2, #0
 80168a6:	4b3e      	ldr	r3, [pc, #248]	; (80169a0 <terminator+0x2c0>)
 80168a8:	781b      	ldrb	r3, [r3, #0]
 80168aa:	b25b      	sxtb	r3, r3
 80168ac:	4313      	orrs	r3, r2
 80168ae:	b25b      	sxtb	r3, r3
 80168b0:	b2da      	uxtb	r2, r3
 80168b2:	4b3b      	ldr	r3, [pc, #236]	; (80169a0 <terminator+0x2c0>)
 80168b4:	701a      	strb	r2, [r3, #0]

	if (Common.operation_mode != 31)
 80168b6:	4b3b      	ldr	r3, [pc, #236]	; (80169a4 <terminator+0x2c4>)
 80168b8:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 80168bc:	2b1f      	cmp	r3, #31
 80168be:	d055      	beq.n	801696c <terminator+0x28c>
	{
		if (Common.operation_mode == 3) flight_safety = FLIGHT_START_THRE;
 80168c0:	4b38      	ldr	r3, [pc, #224]	; (80169a4 <terminator+0x2c4>)
 80168c2:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 80168c6:	2b03      	cmp	r3, #3
 80168c8:	d103      	bne.n	80168d2 <terminator+0x1f2>
 80168ca:	4b3b      	ldr	r3, [pc, #236]	; (80169b8 <terminator+0x2d8>)
 80168cc:	2210      	movs	r2, #16
 80168ce:	701a      	strb	r2, [r3, #0]
 80168d0:	e025      	b.n	801691e <terminator+0x23e>
		else if (terminate > 0)
 80168d2:	4b33      	ldr	r3, [pc, #204]	; (80169a0 <terminator+0x2c0>)
 80168d4:	781b      	ldrb	r3, [r3, #0]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d021      	beq.n	801691e <terminator+0x23e>
		{
			Common.operation_mode = 31;
 80168da:	4b32      	ldr	r3, [pc, #200]	; (80169a4 <terminator+0x2c4>)
 80168dc:	221f      	movs	r2, #31
 80168de:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc
			#if RUN_DEBUG
				println("warning: [RUN] Flight terminated! Code: 0x%x", terminate);
 80168e2:	4b2f      	ldr	r3, [pc, #188]	; (80169a0 <terminator+0x2c0>)
 80168e4:	781b      	ldrb	r3, [r3, #0]
 80168e6:	4619      	mov	r1, r3
 80168e8:	4834      	ldr	r0, [pc, #208]	; (80169bc <terminator+0x2dc>)
 80168ea:	f7fd fb01 	bl	8013ef0 <println>
			#endif
			(*Common.log_print)("*T0x%x", terminate);
 80168ee:	4b2d      	ldr	r3, [pc, #180]	; (80169a4 <terminator+0x2c4>)
 80168f0:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80168f4:	4a2a      	ldr	r2, [pc, #168]	; (80169a0 <terminator+0x2c0>)
 80168f6:	7812      	ldrb	r2, [r2, #0]
 80168f8:	4611      	mov	r1, r2
 80168fa:	4831      	ldr	r0, [pc, #196]	; (80169c0 <terminator+0x2e0>)
 80168fc:	4798      	blx	r3
			flight_safety = 0;
 80168fe:	4b2e      	ldr	r3, [pc, #184]	; (80169b8 <terminator+0x2d8>)
 8016900:	2200      	movs	r2, #0
 8016902:	701a      	strb	r2, [r3, #0]
			Common.servo_enabled = false;
 8016904:	4b27      	ldr	r3, [pc, #156]	; (80169a4 <terminator+0x2c4>)
 8016906:	2200      	movs	r2, #0
 8016908:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
			Common.motors_enabled = false;
 801690c:	4b25      	ldr	r3, [pc, #148]	; (80169a4 <terminator+0x2c4>)
 801690e:	2200      	movs	r2, #0
 8016910:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
			latchArms();
 8016914:	f7ff fec0 	bl	8016698 <latchArms>
			disableMotors();
 8016918:	f7ea fc7a 	bl	8001210 <disableMotors>
			return;
 801691c:	e03b      	b.n	8016996 <terminator+0x2b6>
		}

		if (flight_safety >= FLIGHT_START_THRE)
 801691e:	4b26      	ldr	r3, [pc, #152]	; (80169b8 <terminator+0x2d8>)
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	2b0f      	cmp	r3, #15
 8016924:	d91b      	bls.n	801695e <terminator+0x27e>
		{
			if (Common.operation_mode != 3)
 8016926:	4b1f      	ldr	r3, [pc, #124]	; (80169a4 <terminator+0x2c4>)
 8016928:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 801692c:	2b03      	cmp	r3, #3
 801692e:	d007      	beq.n	8016940 <terminator+0x260>
			{
				Common.servo_enabled = true;
 8016930:	4b1c      	ldr	r3, [pc, #112]	; (80169a4 <terminator+0x2c4>)
 8016932:	2201      	movs	r2, #1
 8016934:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
				Common.motors_enabled = true;
 8016938:	4b1a      	ldr	r3, [pc, #104]	; (80169a4 <terminator+0x2c4>)
 801693a:	2201      	movs	r2, #1
 801693c:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
			}

			if (Common.servo_enabled) openArms();
 8016940:	4b18      	ldr	r3, [pc, #96]	; (80169a4 <terminator+0x2c4>)
 8016942:	f893 37a9 	ldrb.w	r3, [r3, #1961]	; 0x7a9
 8016946:	2b00      	cmp	r3, #0
 8016948:	d001      	beq.n	801694e <terminator+0x26e>
 801694a:	f7ff feb5 	bl	80166b8 <openArms>
			if (Common.motors_enabled) enableMotors();
 801694e:	4b15      	ldr	r3, [pc, #84]	; (80169a4 <terminator+0x2c4>)
 8016950:	f893 37a8 	ldrb.w	r3, [r3, #1960]	; 0x7a8
 8016954:	2b00      	cmp	r3, #0
 8016956:	d01e      	beq.n	8016996 <terminator+0x2b6>
 8016958:	f7ea fc1e 	bl	8001198 <enableMotors>
 801695c:	e01b      	b.n	8016996 <terminator+0x2b6>
		}
		else flight_safety++;
 801695e:	4b16      	ldr	r3, [pc, #88]	; (80169b8 <terminator+0x2d8>)
 8016960:	781b      	ldrb	r3, [r3, #0]
 8016962:	3301      	adds	r3, #1
 8016964:	b2da      	uxtb	r2, r3
 8016966:	4b14      	ldr	r3, [pc, #80]	; (80169b8 <terminator+0x2d8>)
 8016968:	701a      	strb	r2, [r3, #0]
 801696a:	e014      	b.n	8016996 <terminator+0x2b6>

	}
	else
	{
		if (terminate == 0) Common.operation_mode = 0;
 801696c:	4b0c      	ldr	r3, [pc, #48]	; (80169a0 <terminator+0x2c0>)
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d104      	bne.n	801697e <terminator+0x29e>
 8016974:	4b0b      	ldr	r3, [pc, #44]	; (80169a4 <terminator+0x2c4>)
 8016976:	2200      	movs	r2, #0
 8016978:	f883 27bc 	strb.w	r2, [r3, #1980]	; 0x7bc
 801697c:	e00b      	b.n	8016996 <terminator+0x2b6>
		else
		{
			Common.servo_enabled = false;
 801697e:	4b09      	ldr	r3, [pc, #36]	; (80169a4 <terminator+0x2c4>)
 8016980:	2200      	movs	r2, #0
 8016982:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
			Common.motors_enabled = false;
 8016986:	4b07      	ldr	r3, [pc, #28]	; (80169a4 <terminator+0x2c4>)
 8016988:	2200      	movs	r2, #0
 801698a:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
			latchArms();
 801698e:	f7ff fe83 	bl	8016698 <latchArms>
			disableMotors();
 8016992:	f7ea fc3d 	bl	8001210 <disableMotors>
		}
	}
}
 8016996:	bd80      	pop	{r7, pc}
 8016998:	eb1c432d 	.word	0xeb1c432d
 801699c:	3f1a36e2 	.word	0x3f1a36e2
 80169a0:	200085a3 	.word	0x200085a3
 80169a4:	20000de0 	.word	0x20000de0
 80169a8:	402e0000 	.word	0x402e0000
 80169ac:	40440000 	.word	0x40440000
 80169b0:	42b40000 	.word	0x42b40000
 80169b4:	40468000 	.word	0x40468000
 80169b8:	200085a1 	.word	0x200085a1
 80169bc:	080202ec 	.word	0x080202ec
 80169c0:	0802031c 	.word	0x0802031c

080169c4 <setup>:

static void setup(void)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	af00      	add	r7, sp, #0

	setupSuccess = true;
 80169c8:	4b44      	ldr	r3, [pc, #272]	; (8016adc <setup+0x118>)
 80169ca:	2201      	movs	r2, #1
 80169cc:	701a      	strb	r2, [r3, #0]
	animation_dir = 1;
 80169ce:	4b44      	ldr	r3, [pc, #272]	; (8016ae0 <setup+0x11c>)
 80169d0:	2201      	movs	r2, #1
 80169d2:	701a      	strb	r2, [r3, #0]
	#if INTERFACE_BTN
		while (readPin(BTN_1) == LOW) { leds_bounce(); delay(1); }
 80169d4:	e004      	b.n	80169e0 <setup+0x1c>
 80169d6:	f7ff fcab 	bl	8016330 <leds_bounce>
 80169da:	2001      	movs	r0, #1
 80169dc:	f7f0 f844 	bl	8006a68 <HAL_Delay>
 80169e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80169e4:	483f      	ldr	r0, [pc, #252]	; (8016ae4 <setup+0x120>)
 80169e6:	f7f0 fea5 	bl	8007734 <HAL_GPIO_ReadPin>
 80169ea:	4603      	mov	r3, r0
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d0f2      	beq.n	80169d6 <setup+0x12>
	#endif
	play_animation(&leds_fill, 2000);
 80169f0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80169f4:	483c      	ldr	r0, [pc, #240]	; (8016ae8 <setup+0x124>)
 80169f6:	f7ff fc61 	bl	80162bc <play_animation>
	leds_low();
 80169fa:	f7ff fc7f 	bl	80162fc <leds_low>

	armsOpen = true;
 80169fe:	4b3b      	ldr	r3, [pc, #236]	; (8016aec <setup+0x128>)
 8016a00:	2201      	movs	r2, #1
 8016a02:	701a      	strb	r2, [r3, #0]
	flight_safety = 0;
 8016a04:	4b3a      	ldr	r3, [pc, #232]	; (8016af0 <setup+0x12c>)
 8016a06:	2200      	movs	r2, #0
 8016a08:	701a      	strb	r2, [r3, #0]
	latchArms();
 8016a0a:	f7ff fe45 	bl	8016698 <latchArms>
	Common.servo_enabled = false;
 8016a0e:	4b39      	ldr	r3, [pc, #228]	; (8016af4 <setup+0x130>)
 8016a10:	2200      	movs	r2, #0
 8016a12:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
	Common.motors_enabled = false;
 8016a16:	4b37      	ldr	r3, [pc, #220]	; (8016af4 <setup+0x130>)
 8016a18:	2200      	movs	r2, #0
 8016a1a:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8

	setupSuccess &= loging_setup();
 8016a1e:	f7fe f819 	bl	8014a54 <loging_setup>
 8016a22:	4603      	mov	r3, r0
 8016a24:	4619      	mov	r1, r3
 8016a26:	4b2d      	ldr	r3, [pc, #180]	; (8016adc <setup+0x118>)
 8016a28:	781b      	ldrb	r3, [r3, #0]
 8016a2a:	461a      	mov	r2, r3
 8016a2c:	460b      	mov	r3, r1
 8016a2e:	4013      	ands	r3, r2
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	bf14      	ite	ne
 8016a34:	2301      	movne	r3, #1
 8016a36:	2300      	moveq	r3, #0
 8016a38:	b2da      	uxtb	r2, r3
 8016a3a:	4b28      	ldr	r3, [pc, #160]	; (8016adc <setup+0x118>)
 8016a3c:	701a      	strb	r2, [r3, #0]
	setupSuccess &= duplex_setup();
 8016a3e:	f7fe fb71 	bl	8015124 <duplex_setup>
 8016a42:	4603      	mov	r3, r0
 8016a44:	4619      	mov	r1, r3
 8016a46:	4b25      	ldr	r3, [pc, #148]	; (8016adc <setup+0x118>)
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	461a      	mov	r2, r3
 8016a4c:	460b      	mov	r3, r1
 8016a4e:	4013      	ands	r3, r2
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	bf14      	ite	ne
 8016a54:	2301      	movne	r3, #1
 8016a56:	2300      	moveq	r3, #0
 8016a58:	b2da      	uxtb	r2, r3
 8016a5a:	4b20      	ldr	r3, [pc, #128]	; (8016adc <setup+0x118>)
 8016a5c:	701a      	strb	r2, [r3, #0]
	setupSuccess &= sensing_setup();
 8016a5e:	f7fe fded 	bl	801563c <sensing_setup>
 8016a62:	4603      	mov	r3, r0
 8016a64:	4619      	mov	r1, r3
 8016a66:	4b1d      	ldr	r3, [pc, #116]	; (8016adc <setup+0x118>)
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	461a      	mov	r2, r3
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	4013      	ands	r3, r2
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	bf14      	ite	ne
 8016a74:	2301      	movne	r3, #1
 8016a76:	2300      	moveq	r3, #0
 8016a78:	b2da      	uxtb	r2, r3
 8016a7a:	4b18      	ldr	r3, [pc, #96]	; (8016adc <setup+0x118>)
 8016a7c:	701a      	strb	r2, [r3, #0]
	setupSuccess &= steering_setup();
 8016a7e:	f7ff fb1d 	bl	80160bc <steering_setup>
 8016a82:	4603      	mov	r3, r0
 8016a84:	4619      	mov	r1, r3
 8016a86:	4b15      	ldr	r3, [pc, #84]	; (8016adc <setup+0x118>)
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	461a      	mov	r2, r3
 8016a8c:	460b      	mov	r3, r1
 8016a8e:	4013      	ands	r3, r2
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	bf14      	ite	ne
 8016a94:	2301      	movne	r3, #1
 8016a96:	2300      	moveq	r3, #0
 8016a98:	b2da      	uxtb	r2, r3
 8016a9a:	4b10      	ldr	r3, [pc, #64]	; (8016adc <setup+0x118>)
 8016a9c:	701a      	strb	r2, [r3, #0]

	#if INTERFACE_BTN
		while (readPin(BTN_1) == LOW) { setupSuccess ? leds_confirm() : leds_negate(); delay(1); }
 8016a9e:	e00b      	b.n	8016ab8 <setup+0xf4>
 8016aa0:	4b0e      	ldr	r3, [pc, #56]	; (8016adc <setup+0x118>)
 8016aa2:	781b      	ldrb	r3, [r3, #0]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d002      	beq.n	8016aae <setup+0xea>
 8016aa8:	f7ff fd02 	bl	80164b0 <leds_confirm>
 8016aac:	e001      	b.n	8016ab2 <setup+0xee>
 8016aae:	f7ff fd77 	bl	80165a0 <leds_negate>
 8016ab2:	2001      	movs	r0, #1
 8016ab4:	f7ef ffd8 	bl	8006a68 <HAL_Delay>
 8016ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016abc:	4809      	ldr	r0, [pc, #36]	; (8016ae4 <setup+0x120>)
 8016abe:	f7f0 fe39 	bl	8007734 <HAL_GPIO_ReadPin>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d0eb      	beq.n	8016aa0 <setup+0xdc>
	#endif
	play_animation(&leds_fill, 2000);
 8016ac8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8016acc:	4806      	ldr	r0, [pc, #24]	; (8016ae8 <setup+0x124>)
 8016ace:	f7ff fbf5 	bl	80162bc <play_animation>
	leds_low();
 8016ad2:	f7ff fc13 	bl	80162fc <leds_low>
}
 8016ad6:	bf00      	nop
 8016ad8:	bd80      	pop	{r7, pc}
 8016ada:	bf00      	nop
 8016adc:	200085a2 	.word	0x200085a2
 8016ae0:	20003cc8 	.word	0x20003cc8
 8016ae4:	40020400 	.word	0x40020400
 8016ae8:	08016405 	.word	0x08016405
 8016aec:	200085a0 	.word	0x200085a0
 8016af0:	200085a1 	.word	0x200085a1
 8016af4:	20000de0 	.word	0x20000de0

08016af8 <loop>:

static void loop(void)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	af00      	add	r7, sp, #0
	sensing_loop();
 8016afc:	f7fe fff2 	bl	8015ae4 <sensing_loop>

	duplex_loop();
 8016b00:	f7fe fd4a 	bl	8015598 <duplex_loop>

	writePin(LEDC, Common.motors_enabled);
 8016b04:	4b07      	ldr	r3, [pc, #28]	; (8016b24 <loop+0x2c>)
 8016b06:	f893 37a8 	ldrb.w	r3, [r3, #1960]	; 0x7a8
 8016b0a:	461a      	mov	r2, r3
 8016b0c:	2104      	movs	r1, #4
 8016b0e:	4806      	ldr	r0, [pc, #24]	; (8016b28 <loop+0x30>)
 8016b10:	f7f0 fe28 	bl	8007764 <HAL_GPIO_WritePin>

	terminator();
 8016b14:	f7ff fde4 	bl	80166e0 <terminator>

	steering_loop();
 8016b18:	f7ff fb2a 	bl	8016170 <steering_loop>

	loging_loop();
 8016b1c:	f7fe f82a 	bl	8014b74 <loging_loop>
}
 8016b20:	bf00      	nop
 8016b22:	bd80      	pop	{r7, pc}
 8016b24:	20000de0 	.word	0x20000de0
 8016b28:	40020800 	.word	0x40020800

08016b2c <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b082      	sub	sp, #8
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
	//if (huart == Common.gps.uart)
	//{
		HAL_UART_Receive_IT(huart, Common.gps.uartBuffer, 1);
 8016b34:	2201      	movs	r2, #1
 8016b36:	4905      	ldr	r1, [pc, #20]	; (8016b4c <HAL_UART_RxCpltCallback+0x20>)
 8016b38:	6878      	ldr	r0, [r7, #4]
 8016b3a:	f7f6 fc39 	bl	800d3b0 <HAL_UART_Receive_IT>
		GPS_read(&Common.gps);
 8016b3e:	4804      	ldr	r0, [pc, #16]	; (8016b50 <HAL_UART_RxCpltCallback+0x24>)
 8016b40:	f7eb fd92 	bl	8002668 <GPS_read>
	//}
}
 8016b44:	bf00      	nop
 8016b46:	3708      	adds	r7, #8
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd80      	pop	{r7, pc}
 8016b4c:	200010f3 	.word	0x200010f3
 8016b50:	20000ed4 	.word	0x20000ed4

08016b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8016b58:	f7ef ff14 	bl	8006984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8016b5c:	f000 f83c 	bl	8016bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8016b60:	f000 fb2e 	bl	80171c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8016b64:	f000 fb04 	bl	8017170 <MX_DMA_Init>
  MX_I2C1_Init();
 8016b68:	f000 f8b8 	bl	8016cdc <MX_I2C1_Init>
  MX_RTC_Init();
 8016b6c:	f000 f912 	bl	8016d94 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8016b70:	f000 f936 	bl	8016de0 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8016b74:	f000 f954 	bl	8016e20 <MX_SPI1_Init>
  MX_TIM2_Init();
 8016b78:	f000 f988 	bl	8016e8c <MX_TIM2_Init>
  MX_TIM3_Init();
 8016b7c:	f000 f9d4 	bl	8016f28 <MX_TIM3_Init>
  MX_TIM5_Init();
 8016b80:	f000 fa54 	bl	801702c <MX_TIM5_Init>
  MX_FATFS_Init();
 8016b84:	f7fd f91a 	bl	8013dbc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8016b88:	f001 fa4e 	bl	8018028 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8016b8c:	f000 fa9c 	bl	80170c8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8016b90:	f000 f8d2 	bl	8016d38 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8016b94:	f000 fac2 	bl	801711c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 8016b98:	480d      	ldr	r0, [pc, #52]	; (8016bd0 <main+0x7c>)
 8016b9a:	f7f5 fcbc 	bl	800c516 <HAL_TIM_Base_Start>

	// Setup pins
	writePin(LEDA, LOW);
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	2101      	movs	r1, #1
 8016ba2:	480c      	ldr	r0, [pc, #48]	; (8016bd4 <main+0x80>)
 8016ba4:	f7f0 fdde 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDB, LOW);
 8016ba8:	2200      	movs	r2, #0
 8016baa:	2102      	movs	r1, #2
 8016bac:	4809      	ldr	r0, [pc, #36]	; (8016bd4 <main+0x80>)
 8016bae:	f7f0 fdd9 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDC, LOW);
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	2104      	movs	r1, #4
 8016bb6:	4807      	ldr	r0, [pc, #28]	; (8016bd4 <main+0x80>)
 8016bb8:	f7f0 fdd4 	bl	8007764 <HAL_GPIO_WritePin>
	writePin(LEDD, LOW);
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	2108      	movs	r1, #8
 8016bc0:	4804      	ldr	r0, [pc, #16]	; (8016bd4 <main+0x80>)
 8016bc2:	f7f0 fdcf 	bl	8007764 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 8016bc6:	f7ff fefd 	bl	80169c4 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 8016bca:	f7ff ff95 	bl	8016af8 <loop>
 8016bce:	e7fc      	b.n	8016bca <main+0x76>
 8016bd0:	2000a938 	.word	0x2000a938
 8016bd4:	40020800 	.word	0x40020800

08016bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b098      	sub	sp, #96	; 0x60
 8016bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016bde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016be2:	2230      	movs	r2, #48	; 0x30
 8016be4:	2100      	movs	r1, #0
 8016be6:	4618      	mov	r0, r3
 8016be8:	f001 ffc1 	bl	8018b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016bec:	f107 031c 	add.w	r3, r7, #28
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	601a      	str	r2, [r3, #0]
 8016bf4:	605a      	str	r2, [r3, #4]
 8016bf6:	609a      	str	r2, [r3, #8]
 8016bf8:	60da      	str	r2, [r3, #12]
 8016bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016bfc:	f107 030c 	add.w	r3, r7, #12
 8016c00:	2200      	movs	r2, #0
 8016c02:	601a      	str	r2, [r3, #0]
 8016c04:	605a      	str	r2, [r3, #4]
 8016c06:	609a      	str	r2, [r3, #8]
 8016c08:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	60bb      	str	r3, [r7, #8]
 8016c0e:	4b31      	ldr	r3, [pc, #196]	; (8016cd4 <SystemClock_Config+0xfc>)
 8016c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c12:	4a30      	ldr	r2, [pc, #192]	; (8016cd4 <SystemClock_Config+0xfc>)
 8016c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016c18:	6413      	str	r3, [r2, #64]	; 0x40
 8016c1a:	4b2e      	ldr	r3, [pc, #184]	; (8016cd4 <SystemClock_Config+0xfc>)
 8016c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016c22:	60bb      	str	r3, [r7, #8]
 8016c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8016c26:	2300      	movs	r3, #0
 8016c28:	607b      	str	r3, [r7, #4]
 8016c2a:	4b2b      	ldr	r3, [pc, #172]	; (8016cd8 <SystemClock_Config+0x100>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	4a2a      	ldr	r2, [pc, #168]	; (8016cd8 <SystemClock_Config+0x100>)
 8016c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016c34:	6013      	str	r3, [r2, #0]
 8016c36:	4b28      	ldr	r3, [pc, #160]	; (8016cd8 <SystemClock_Config+0x100>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016c3e:	607b      	str	r3, [r7, #4]
 8016c40:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8016c42:	2305      	movs	r3, #5
 8016c44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8016c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8016c4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8016c4c:	2301      	movs	r3, #1
 8016c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8016c50:	2302      	movs	r3, #2
 8016c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8016c54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016c58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8016c5a:	2306      	movs	r3, #6
 8016c5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8016c5e:	23a8      	movs	r3, #168	; 0xa8
 8016c60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8016c62:	2302      	movs	r3, #2
 8016c64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8016c66:	2307      	movs	r3, #7
 8016c68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8016c6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7f2 feb6 	bl	80099e0 <HAL_RCC_OscConfig>
 8016c74:	4603      	mov	r3, r0
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d001      	beq.n	8016c7e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8016c7a:	f000 fbbb 	bl	80173f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016c7e:	230f      	movs	r3, #15
 8016c80:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016c82:	2302      	movs	r3, #2
 8016c84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8016c86:	2300      	movs	r3, #0
 8016c88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8016c8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8016c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016c94:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8016c96:	f107 031c 	add.w	r3, r7, #28
 8016c9a:	2105      	movs	r1, #5
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	f7f3 f8e1 	bl	8009e64 <HAL_RCC_ClockConfig>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d001      	beq.n	8016cac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8016ca8:	f000 fba4 	bl	80173f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8016cac:	2302      	movs	r3, #2
 8016cae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8016cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016cb4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016cb6:	f107 030c 	add.w	r3, r7, #12
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7f3 fa9a 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d001      	beq.n	8016cca <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8016cc6:	f000 fb95 	bl	80173f4 <Error_Handler>
  }
}
 8016cca:	bf00      	nop
 8016ccc:	3760      	adds	r7, #96	; 0x60
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd80      	pop	{r7, pc}
 8016cd2:	bf00      	nop
 8016cd4:	40023800 	.word	0x40023800
 8016cd8:	40007000 	.word	0x40007000

08016cdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8016ce0:	4b12      	ldr	r3, [pc, #72]	; (8016d2c <MX_I2C1_Init+0x50>)
 8016ce2:	4a13      	ldr	r2, [pc, #76]	; (8016d30 <MX_I2C1_Init+0x54>)
 8016ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8016ce6:	4b11      	ldr	r3, [pc, #68]	; (8016d2c <MX_I2C1_Init+0x50>)
 8016ce8:	4a12      	ldr	r2, [pc, #72]	; (8016d34 <MX_I2C1_Init+0x58>)
 8016cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8016cec:	4b0f      	ldr	r3, [pc, #60]	; (8016d2c <MX_I2C1_Init+0x50>)
 8016cee:	2200      	movs	r2, #0
 8016cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8016cf2:	4b0e      	ldr	r3, [pc, #56]	; (8016d2c <MX_I2C1_Init+0x50>)
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8016cf8:	4b0c      	ldr	r3, [pc, #48]	; (8016d2c <MX_I2C1_Init+0x50>)
 8016cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8016cfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8016d00:	4b0a      	ldr	r3, [pc, #40]	; (8016d2c <MX_I2C1_Init+0x50>)
 8016d02:	2200      	movs	r2, #0
 8016d04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8016d06:	4b09      	ldr	r3, [pc, #36]	; (8016d2c <MX_I2C1_Init+0x50>)
 8016d08:	2200      	movs	r2, #0
 8016d0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8016d0c:	4b07      	ldr	r3, [pc, #28]	; (8016d2c <MX_I2C1_Init+0x50>)
 8016d0e:	2200      	movs	r2, #0
 8016d10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8016d12:	4b06      	ldr	r3, [pc, #24]	; (8016d2c <MX_I2C1_Init+0x50>)
 8016d14:	2200      	movs	r2, #0
 8016d16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8016d18:	4804      	ldr	r0, [pc, #16]	; (8016d2c <MX_I2C1_Init+0x50>)
 8016d1a:	f7f0 fd57 	bl	80077cc <HAL_I2C_Init>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d001      	beq.n	8016d28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8016d24:	f000 fb66 	bl	80173f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8016d28:	bf00      	nop
 8016d2a:	bd80      	pop	{r7, pc}
 8016d2c:	2000a674 	.word	0x2000a674
 8016d30:	40005400 	.word	0x40005400
 8016d34:	00061a80 	.word	0x00061a80

08016d38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8016d3c:	4b12      	ldr	r3, [pc, #72]	; (8016d88 <MX_I2C2_Init+0x50>)
 8016d3e:	4a13      	ldr	r2, [pc, #76]	; (8016d8c <MX_I2C2_Init+0x54>)
 8016d40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8016d42:	4b11      	ldr	r3, [pc, #68]	; (8016d88 <MX_I2C2_Init+0x50>)
 8016d44:	4a12      	ldr	r2, [pc, #72]	; (8016d90 <MX_I2C2_Init+0x58>)
 8016d46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8016d48:	4b0f      	ldr	r3, [pc, #60]	; (8016d88 <MX_I2C2_Init+0x50>)
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8016d4e:	4b0e      	ldr	r3, [pc, #56]	; (8016d88 <MX_I2C2_Init+0x50>)
 8016d50:	2200      	movs	r2, #0
 8016d52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8016d54:	4b0c      	ldr	r3, [pc, #48]	; (8016d88 <MX_I2C2_Init+0x50>)
 8016d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8016d5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8016d5c:	4b0a      	ldr	r3, [pc, #40]	; (8016d88 <MX_I2C2_Init+0x50>)
 8016d5e:	2200      	movs	r2, #0
 8016d60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8016d62:	4b09      	ldr	r3, [pc, #36]	; (8016d88 <MX_I2C2_Init+0x50>)
 8016d64:	2200      	movs	r2, #0
 8016d66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8016d68:	4b07      	ldr	r3, [pc, #28]	; (8016d88 <MX_I2C2_Init+0x50>)
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8016d6e:	4b06      	ldr	r3, [pc, #24]	; (8016d88 <MX_I2C2_Init+0x50>)
 8016d70:	2200      	movs	r2, #0
 8016d72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8016d74:	4804      	ldr	r0, [pc, #16]	; (8016d88 <MX_I2C2_Init+0x50>)
 8016d76:	f7f0 fd29 	bl	80077cc <HAL_I2C_Init>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d001      	beq.n	8016d84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8016d80:	f000 fb38 	bl	80173f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8016d84:	bf00      	nop
 8016d86:	bd80      	pop	{r7, pc}
 8016d88:	2000a6c8 	.word	0x2000a6c8
 8016d8c:	40005800 	.word	0x40005800
 8016d90:	000186a0 	.word	0x000186a0

08016d94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8016d98:	4b0f      	ldr	r3, [pc, #60]	; (8016dd8 <MX_RTC_Init+0x44>)
 8016d9a:	4a10      	ldr	r2, [pc, #64]	; (8016ddc <MX_RTC_Init+0x48>)
 8016d9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8016d9e:	4b0e      	ldr	r3, [pc, #56]	; (8016dd8 <MX_RTC_Init+0x44>)
 8016da0:	2200      	movs	r2, #0
 8016da2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8016da4:	4b0c      	ldr	r3, [pc, #48]	; (8016dd8 <MX_RTC_Init+0x44>)
 8016da6:	227f      	movs	r2, #127	; 0x7f
 8016da8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8016daa:	4b0b      	ldr	r3, [pc, #44]	; (8016dd8 <MX_RTC_Init+0x44>)
 8016dac:	22ff      	movs	r2, #255	; 0xff
 8016dae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8016db0:	4b09      	ldr	r3, [pc, #36]	; (8016dd8 <MX_RTC_Init+0x44>)
 8016db2:	2200      	movs	r2, #0
 8016db4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8016db6:	4b08      	ldr	r3, [pc, #32]	; (8016dd8 <MX_RTC_Init+0x44>)
 8016db8:	2200      	movs	r2, #0
 8016dba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8016dbc:	4b06      	ldr	r3, [pc, #24]	; (8016dd8 <MX_RTC_Init+0x44>)
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8016dc2:	4805      	ldr	r0, [pc, #20]	; (8016dd8 <MX_RTC_Init+0x44>)
 8016dc4:	f7f3 faf8 	bl	800a3b8 <HAL_RTC_Init>
 8016dc8:	4603      	mov	r3, r0
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d001      	beq.n	8016dd2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8016dce:	f000 fb11 	bl	80173f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8016dd2:	bf00      	nop
 8016dd4:	bd80      	pop	{r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	2000a7dc 	.word	0x2000a7dc
 8016ddc:	40002800 	.word	0x40002800

08016de0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8016de0:	b480      	push	{r7}
 8016de2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8016de4:	4b0c      	ldr	r3, [pc, #48]	; (8016e18 <MX_SDIO_SD_Init+0x38>)
 8016de6:	4a0d      	ldr	r2, [pc, #52]	; (8016e1c <MX_SDIO_SD_Init+0x3c>)
 8016de8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8016dea:	4b0b      	ldr	r3, [pc, #44]	; (8016e18 <MX_SDIO_SD_Init+0x38>)
 8016dec:	2200      	movs	r2, #0
 8016dee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8016df0:	4b09      	ldr	r3, [pc, #36]	; (8016e18 <MX_SDIO_SD_Init+0x38>)
 8016df2:	2200      	movs	r2, #0
 8016df4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8016df6:	4b08      	ldr	r3, [pc, #32]	; (8016e18 <MX_SDIO_SD_Init+0x38>)
 8016df8:	2200      	movs	r2, #0
 8016dfa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8016dfc:	4b06      	ldr	r3, [pc, #24]	; (8016e18 <MX_SDIO_SD_Init+0x38>)
 8016dfe:	2200      	movs	r2, #0
 8016e00:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8016e02:	4b05      	ldr	r3, [pc, #20]	; (8016e18 <MX_SDIO_SD_Init+0x38>)
 8016e04:	2200      	movs	r2, #0
 8016e06:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8016e08:	4b03      	ldr	r3, [pc, #12]	; (8016e18 <MX_SDIO_SD_Init+0x38>)
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8016e0e:	bf00      	nop
 8016e10:	46bd      	mov	sp, r7
 8016e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e16:	4770      	bx	lr
 8016e18:	2000a85c 	.word	0x2000a85c
 8016e1c:	40012c00 	.word	0x40012c00

08016e20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8016e24:	4b17      	ldr	r3, [pc, #92]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e26:	4a18      	ldr	r2, [pc, #96]	; (8016e88 <MX_SPI1_Init+0x68>)
 8016e28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8016e2a:	4b16      	ldr	r3, [pc, #88]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016e30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8016e32:	4b14      	ldr	r3, [pc, #80]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e34:	2200      	movs	r2, #0
 8016e36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8016e38:	4b12      	ldr	r3, [pc, #72]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016e3e:	4b11      	ldr	r3, [pc, #68]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e40:	2200      	movs	r2, #0
 8016e42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8016e44:	4b0f      	ldr	r3, [pc, #60]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e46:	2200      	movs	r2, #0
 8016e48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8016e4a:	4b0e      	ldr	r3, [pc, #56]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016e50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8016e52:	4b0c      	ldr	r3, [pc, #48]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e54:	2218      	movs	r2, #24
 8016e56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016e58:	4b0a      	ldr	r3, [pc, #40]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8016e5e:	4b09      	ldr	r3, [pc, #36]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e60:	2200      	movs	r2, #0
 8016e62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016e64:	4b07      	ldr	r3, [pc, #28]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e66:	2200      	movs	r2, #0
 8016e68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8016e6a:	4b06      	ldr	r3, [pc, #24]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e6c:	220a      	movs	r2, #10
 8016e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8016e70:	4804      	ldr	r0, [pc, #16]	; (8016e84 <MX_SPI1_Init+0x64>)
 8016e72:	f7f4 ff30 	bl	800bcd6 <HAL_SPI_Init>
 8016e76:	4603      	mov	r3, r0
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d001      	beq.n	8016e80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8016e7c:	f000 faba 	bl	80173f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8016e80:	bf00      	nop
 8016e82:	bd80      	pop	{r7, pc}
 8016e84:	2000a8e0 	.word	0x2000a8e0
 8016e88:	40013000 	.word	0x40013000

08016e8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b086      	sub	sp, #24
 8016e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016e92:	f107 0308 	add.w	r3, r7, #8
 8016e96:	2200      	movs	r2, #0
 8016e98:	601a      	str	r2, [r3, #0]
 8016e9a:	605a      	str	r2, [r3, #4]
 8016e9c:	609a      	str	r2, [r3, #8]
 8016e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016ea0:	463b      	mov	r3, r7
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	601a      	str	r2, [r3, #0]
 8016ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8016ea8:	4b1d      	ldr	r3, [pc, #116]	; (8016f20 <MX_TIM2_Init+0x94>)
 8016eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8016eb0:	4b1b      	ldr	r3, [pc, #108]	; (8016f20 <MX_TIM2_Init+0x94>)
 8016eb2:	2253      	movs	r2, #83	; 0x53
 8016eb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016eb6:	4b1a      	ldr	r3, [pc, #104]	; (8016f20 <MX_TIM2_Init+0x94>)
 8016eb8:	2200      	movs	r2, #0
 8016eba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 8016ebc:	4b18      	ldr	r3, [pc, #96]	; (8016f20 <MX_TIM2_Init+0x94>)
 8016ebe:	4a19      	ldr	r2, [pc, #100]	; (8016f24 <MX_TIM2_Init+0x98>)
 8016ec0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016ec2:	4b17      	ldr	r3, [pc, #92]	; (8016f20 <MX_TIM2_Init+0x94>)
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016ec8:	4b15      	ldr	r3, [pc, #84]	; (8016f20 <MX_TIM2_Init+0x94>)
 8016eca:	2200      	movs	r2, #0
 8016ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8016ece:	4814      	ldr	r0, [pc, #80]	; (8016f20 <MX_TIM2_Init+0x94>)
 8016ed0:	f7f5 faf6 	bl	800c4c0 <HAL_TIM_Base_Init>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d001      	beq.n	8016ede <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8016eda:	f000 fa8b 	bl	80173f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8016ee4:	f107 0308 	add.w	r3, r7, #8
 8016ee8:	4619      	mov	r1, r3
 8016eea:	480d      	ldr	r0, [pc, #52]	; (8016f20 <MX_TIM2_Init+0x94>)
 8016eec:	f7f5 fcc8 	bl	800c880 <HAL_TIM_ConfigClockSource>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d001      	beq.n	8016efa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8016ef6:	f000 fa7d 	bl	80173f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016efa:	2300      	movs	r3, #0
 8016efc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016efe:	2300      	movs	r3, #0
 8016f00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8016f02:	463b      	mov	r3, r7
 8016f04:	4619      	mov	r1, r3
 8016f06:	4806      	ldr	r0, [pc, #24]	; (8016f20 <MX_TIM2_Init+0x94>)
 8016f08:	f7f6 f881 	bl	800d00e <HAL_TIMEx_MasterConfigSynchronization>
 8016f0c:	4603      	mov	r3, r0
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d001      	beq.n	8016f16 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8016f12:	f000 fa6f 	bl	80173f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8016f16:	bf00      	nop
 8016f18:	3718      	adds	r7, #24
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}
 8016f1e:	bf00      	nop
 8016f20:	2000a938 	.word	0x2000a938
 8016f24:	fa56ea00 	.word	0xfa56ea00

08016f28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b08e      	sub	sp, #56	; 0x38
 8016f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016f32:	2200      	movs	r2, #0
 8016f34:	601a      	str	r2, [r3, #0]
 8016f36:	605a      	str	r2, [r3, #4]
 8016f38:	609a      	str	r2, [r3, #8]
 8016f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016f3c:	f107 0320 	add.w	r3, r7, #32
 8016f40:	2200      	movs	r2, #0
 8016f42:	601a      	str	r2, [r3, #0]
 8016f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016f46:	1d3b      	adds	r3, r7, #4
 8016f48:	2200      	movs	r2, #0
 8016f4a:	601a      	str	r2, [r3, #0]
 8016f4c:	605a      	str	r2, [r3, #4]
 8016f4e:	609a      	str	r2, [r3, #8]
 8016f50:	60da      	str	r2, [r3, #12]
 8016f52:	611a      	str	r2, [r3, #16]
 8016f54:	615a      	str	r2, [r3, #20]
 8016f56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8016f58:	4b32      	ldr	r3, [pc, #200]	; (8017024 <MX_TIM3_Init+0xfc>)
 8016f5a:	4a33      	ldr	r2, [pc, #204]	; (8017028 <MX_TIM3_Init+0x100>)
 8016f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8016f5e:	4b31      	ldr	r3, [pc, #196]	; (8017024 <MX_TIM3_Init+0xfc>)
 8016f60:	2201      	movs	r2, #1
 8016f62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016f64:	4b2f      	ldr	r3, [pc, #188]	; (8017024 <MX_TIM3_Init+0xfc>)
 8016f66:	2200      	movs	r2, #0
 8016f68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 8016f6a:	4b2e      	ldr	r3, [pc, #184]	; (8017024 <MX_TIM3_Init+0xfc>)
 8016f6c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8016f70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016f72:	4b2c      	ldr	r3, [pc, #176]	; (8017024 <MX_TIM3_Init+0xfc>)
 8016f74:	2200      	movs	r2, #0
 8016f76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016f78:	4b2a      	ldr	r3, [pc, #168]	; (8017024 <MX_TIM3_Init+0xfc>)
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8016f7e:	4829      	ldr	r0, [pc, #164]	; (8017024 <MX_TIM3_Init+0xfc>)
 8016f80:	f7f5 fa9e 	bl	800c4c0 <HAL_TIM_Base_Init>
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d001      	beq.n	8016f8e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8016f8a:	f000 fa33 	bl	80173f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016f92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8016f94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016f98:	4619      	mov	r1, r3
 8016f9a:	4822      	ldr	r0, [pc, #136]	; (8017024 <MX_TIM3_Init+0xfc>)
 8016f9c:	f7f5 fc70 	bl	800c880 <HAL_TIM_ConfigClockSource>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d001      	beq.n	8016faa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8016fa6:	f000 fa25 	bl	80173f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8016faa:	481e      	ldr	r0, [pc, #120]	; (8017024 <MX_TIM3_Init+0xfc>)
 8016fac:	f7f5 fad7 	bl	800c55e <HAL_TIM_PWM_Init>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d001      	beq.n	8016fba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8016fb6:	f000 fa1d 	bl	80173f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016fba:	2300      	movs	r3, #0
 8016fbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8016fc2:	f107 0320 	add.w	r3, r7, #32
 8016fc6:	4619      	mov	r1, r3
 8016fc8:	4816      	ldr	r0, [pc, #88]	; (8017024 <MX_TIM3_Init+0xfc>)
 8016fca:	f7f6 f820 	bl	800d00e <HAL_TIMEx_MasterConfigSynchronization>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d001      	beq.n	8016fd8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8016fd4:	f000 fa0e 	bl	80173f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016fd8:	2360      	movs	r3, #96	; 0x60
 8016fda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8016fdc:	2300      	movs	r3, #0
 8016fde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8016fe0:	2302      	movs	r3, #2
 8016fe2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8016fe8:	1d3b      	adds	r3, r7, #4
 8016fea:	2204      	movs	r2, #4
 8016fec:	4619      	mov	r1, r3
 8016fee:	480d      	ldr	r0, [pc, #52]	; (8017024 <MX_TIM3_Init+0xfc>)
 8016ff0:	f7f5 fb80 	bl	800c6f4 <HAL_TIM_PWM_ConfigChannel>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d001      	beq.n	8016ffe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8016ffa:	f000 f9fb 	bl	80173f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8016ffe:	1d3b      	adds	r3, r7, #4
 8017000:	2208      	movs	r2, #8
 8017002:	4619      	mov	r1, r3
 8017004:	4807      	ldr	r0, [pc, #28]	; (8017024 <MX_TIM3_Init+0xfc>)
 8017006:	f7f5 fb75 	bl	800c6f4 <HAL_TIM_PWM_ConfigChannel>
 801700a:	4603      	mov	r3, r0
 801700c:	2b00      	cmp	r3, #0
 801700e:	d001      	beq.n	8017014 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8017010:	f000 f9f0 	bl	80173f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8017014:	4803      	ldr	r0, [pc, #12]	; (8017024 <MX_TIM3_Init+0xfc>)
 8017016:	f000 fe67 	bl	8017ce8 <HAL_TIM_MspPostInit>

}
 801701a:	bf00      	nop
 801701c:	3738      	adds	r7, #56	; 0x38
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
 8017022:	bf00      	nop
 8017024:	2000a75c 	.word	0x2000a75c
 8017028:	40000400 	.word	0x40000400

0801702c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b086      	sub	sp, #24
 8017030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017032:	f107 0308 	add.w	r3, r7, #8
 8017036:	2200      	movs	r2, #0
 8017038:	601a      	str	r2, [r3, #0]
 801703a:	605a      	str	r2, [r3, #4]
 801703c:	609a      	str	r2, [r3, #8]
 801703e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017040:	463b      	mov	r3, r7
 8017042:	2200      	movs	r2, #0
 8017044:	601a      	str	r2, [r3, #0]
 8017046:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8017048:	4b1d      	ldr	r3, [pc, #116]	; (80170c0 <MX_TIM5_Init+0x94>)
 801704a:	4a1e      	ldr	r2, [pc, #120]	; (80170c4 <MX_TIM5_Init+0x98>)
 801704c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 801704e:	4b1c      	ldr	r3, [pc, #112]	; (80170c0 <MX_TIM5_Init+0x94>)
 8017050:	2201      	movs	r2, #1
 8017052:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017054:	4b1a      	ldr	r3, [pc, #104]	; (80170c0 <MX_TIM5_Init+0x94>)
 8017056:	2200      	movs	r2, #0
 8017058:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 801705a:	4b19      	ldr	r3, [pc, #100]	; (80170c0 <MX_TIM5_Init+0x94>)
 801705c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017060:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017062:	4b17      	ldr	r3, [pc, #92]	; (80170c0 <MX_TIM5_Init+0x94>)
 8017064:	2200      	movs	r2, #0
 8017066:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017068:	4b15      	ldr	r3, [pc, #84]	; (80170c0 <MX_TIM5_Init+0x94>)
 801706a:	2200      	movs	r2, #0
 801706c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801706e:	4814      	ldr	r0, [pc, #80]	; (80170c0 <MX_TIM5_Init+0x94>)
 8017070:	f7f5 fa26 	bl	800c4c0 <HAL_TIM_Base_Init>
 8017074:	4603      	mov	r3, r0
 8017076:	2b00      	cmp	r3, #0
 8017078:	d001      	beq.n	801707e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 801707a:	f000 f9bb 	bl	80173f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801707e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017082:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8017084:	f107 0308 	add.w	r3, r7, #8
 8017088:	4619      	mov	r1, r3
 801708a:	480d      	ldr	r0, [pc, #52]	; (80170c0 <MX_TIM5_Init+0x94>)
 801708c:	f7f5 fbf8 	bl	800c880 <HAL_TIM_ConfigClockSource>
 8017090:	4603      	mov	r3, r0
 8017092:	2b00      	cmp	r3, #0
 8017094:	d001      	beq.n	801709a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8017096:	f000 f9ad 	bl	80173f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801709a:	2300      	movs	r3, #0
 801709c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801709e:	2300      	movs	r3, #0
 80170a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80170a2:	463b      	mov	r3, r7
 80170a4:	4619      	mov	r1, r3
 80170a6:	4806      	ldr	r0, [pc, #24]	; (80170c0 <MX_TIM5_Init+0x94>)
 80170a8:	f7f5 ffb1 	bl	800d00e <HAL_TIMEx_MasterConfigSynchronization>
 80170ac:	4603      	mov	r3, r0
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d001      	beq.n	80170b6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80170b2:	f000 f99f 	bl	80173f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80170b6:	bf00      	nop
 80170b8:	3718      	adds	r7, #24
 80170ba:	46bd      	mov	sp, r7
 80170bc:	bd80      	pop	{r7, pc}
 80170be:	bf00      	nop
 80170c0:	2000a71c 	.word	0x2000a71c
 80170c4:	40000c00 	.word	0x40000c00

080170c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80170cc:	4b11      	ldr	r3, [pc, #68]	; (8017114 <MX_USART1_UART_Init+0x4c>)
 80170ce:	4a12      	ldr	r2, [pc, #72]	; (8017118 <MX_USART1_UART_Init+0x50>)
 80170d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80170d2:	4b10      	ldr	r3, [pc, #64]	; (8017114 <MX_USART1_UART_Init+0x4c>)
 80170d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80170d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80170da:	4b0e      	ldr	r3, [pc, #56]	; (8017114 <MX_USART1_UART_Init+0x4c>)
 80170dc:	2200      	movs	r2, #0
 80170de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80170e0:	4b0c      	ldr	r3, [pc, #48]	; (8017114 <MX_USART1_UART_Init+0x4c>)
 80170e2:	2200      	movs	r2, #0
 80170e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80170e6:	4b0b      	ldr	r3, [pc, #44]	; (8017114 <MX_USART1_UART_Init+0x4c>)
 80170e8:	2200      	movs	r2, #0
 80170ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80170ec:	4b09      	ldr	r3, [pc, #36]	; (8017114 <MX_USART1_UART_Init+0x4c>)
 80170ee:	220c      	movs	r2, #12
 80170f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80170f2:	4b08      	ldr	r3, [pc, #32]	; (8017114 <MX_USART1_UART_Init+0x4c>)
 80170f4:	2200      	movs	r2, #0
 80170f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80170f8:	4b06      	ldr	r3, [pc, #24]	; (8017114 <MX_USART1_UART_Init+0x4c>)
 80170fa:	2200      	movs	r2, #0
 80170fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80170fe:	4805      	ldr	r0, [pc, #20]	; (8017114 <MX_USART1_UART_Init+0x4c>)
 8017100:	f7f5 ffca 	bl	800d098 <HAL_UART_Init>
 8017104:	4603      	mov	r3, r0
 8017106:	2b00      	cmp	r3, #0
 8017108:	d001      	beq.n	801710e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 801710a:	f000 f973 	bl	80173f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801710e:	bf00      	nop
 8017110:	bd80      	pop	{r7, pc}
 8017112:	bf00      	nop
 8017114:	2000a79c 	.word	0x2000a79c
 8017118:	40011000 	.word	0x40011000

0801711c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8017120:	4b11      	ldr	r3, [pc, #68]	; (8017168 <MX_USART2_UART_Init+0x4c>)
 8017122:	4a12      	ldr	r2, [pc, #72]	; (801716c <MX_USART2_UART_Init+0x50>)
 8017124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8017126:	4b10      	ldr	r3, [pc, #64]	; (8017168 <MX_USART2_UART_Init+0x4c>)
 8017128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801712c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801712e:	4b0e      	ldr	r3, [pc, #56]	; (8017168 <MX_USART2_UART_Init+0x4c>)
 8017130:	2200      	movs	r2, #0
 8017132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8017134:	4b0c      	ldr	r3, [pc, #48]	; (8017168 <MX_USART2_UART_Init+0x4c>)
 8017136:	2200      	movs	r2, #0
 8017138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801713a:	4b0b      	ldr	r3, [pc, #44]	; (8017168 <MX_USART2_UART_Init+0x4c>)
 801713c:	2200      	movs	r2, #0
 801713e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8017140:	4b09      	ldr	r3, [pc, #36]	; (8017168 <MX_USART2_UART_Init+0x4c>)
 8017142:	220c      	movs	r2, #12
 8017144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017146:	4b08      	ldr	r3, [pc, #32]	; (8017168 <MX_USART2_UART_Init+0x4c>)
 8017148:	2200      	movs	r2, #0
 801714a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801714c:	4b06      	ldr	r3, [pc, #24]	; (8017168 <MX_USART2_UART_Init+0x4c>)
 801714e:	2200      	movs	r2, #0
 8017150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8017152:	4805      	ldr	r0, [pc, #20]	; (8017168 <MX_USART2_UART_Init+0x4c>)
 8017154:	f7f5 ffa0 	bl	800d098 <HAL_UART_Init>
 8017158:	4603      	mov	r3, r0
 801715a:	2b00      	cmp	r3, #0
 801715c:	d001      	beq.n	8017162 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801715e:	f000 f949 	bl	80173f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8017162:	bf00      	nop
 8017164:	bd80      	pop	{r7, pc}
 8017166:	bf00      	nop
 8017168:	2000a978 	.word	0x2000a978
 801716c:	40004400 	.word	0x40004400

08017170 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b082      	sub	sp, #8
 8017174:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8017176:	2300      	movs	r3, #0
 8017178:	607b      	str	r3, [r7, #4]
 801717a:	4b10      	ldr	r3, [pc, #64]	; (80171bc <MX_DMA_Init+0x4c>)
 801717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801717e:	4a0f      	ldr	r2, [pc, #60]	; (80171bc <MX_DMA_Init+0x4c>)
 8017180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017184:	6313      	str	r3, [r2, #48]	; 0x30
 8017186:	4b0d      	ldr	r3, [pc, #52]	; (80171bc <MX_DMA_Init+0x4c>)
 8017188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801718a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801718e:	607b      	str	r3, [r7, #4]
 8017190:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8017192:	2200      	movs	r2, #0
 8017194:	2100      	movs	r1, #0
 8017196:	203b      	movs	r0, #59	; 0x3b
 8017198:	f7ef fd63 	bl	8006c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 801719c:	203b      	movs	r0, #59	; 0x3b
 801719e:	f7ef fd7c 	bl	8006c9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80171a2:	2200      	movs	r2, #0
 80171a4:	2100      	movs	r1, #0
 80171a6:	2045      	movs	r0, #69	; 0x45
 80171a8:	f7ef fd5b 	bl	8006c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80171ac:	2045      	movs	r0, #69	; 0x45
 80171ae:	f7ef fd74 	bl	8006c9a <HAL_NVIC_EnableIRQ>

}
 80171b2:	bf00      	nop
 80171b4:	3708      	adds	r7, #8
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}
 80171ba:	bf00      	nop
 80171bc:	40023800 	.word	0x40023800

080171c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b08a      	sub	sp, #40	; 0x28
 80171c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80171c6:	f107 0314 	add.w	r3, r7, #20
 80171ca:	2200      	movs	r2, #0
 80171cc:	601a      	str	r2, [r3, #0]
 80171ce:	605a      	str	r2, [r3, #4]
 80171d0:	609a      	str	r2, [r3, #8]
 80171d2:	60da      	str	r2, [r3, #12]
 80171d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80171d6:	2300      	movs	r3, #0
 80171d8:	613b      	str	r3, [r7, #16]
 80171da:	4b64      	ldr	r3, [pc, #400]	; (801736c <MX_GPIO_Init+0x1ac>)
 80171dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171de:	4a63      	ldr	r2, [pc, #396]	; (801736c <MX_GPIO_Init+0x1ac>)
 80171e0:	f043 0304 	orr.w	r3, r3, #4
 80171e4:	6313      	str	r3, [r2, #48]	; 0x30
 80171e6:	4b61      	ldr	r3, [pc, #388]	; (801736c <MX_GPIO_Init+0x1ac>)
 80171e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171ea:	f003 0304 	and.w	r3, r3, #4
 80171ee:	613b      	str	r3, [r7, #16]
 80171f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80171f2:	2300      	movs	r3, #0
 80171f4:	60fb      	str	r3, [r7, #12]
 80171f6:	4b5d      	ldr	r3, [pc, #372]	; (801736c <MX_GPIO_Init+0x1ac>)
 80171f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171fa:	4a5c      	ldr	r2, [pc, #368]	; (801736c <MX_GPIO_Init+0x1ac>)
 80171fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017200:	6313      	str	r3, [r2, #48]	; 0x30
 8017202:	4b5a      	ldr	r3, [pc, #360]	; (801736c <MX_GPIO_Init+0x1ac>)
 8017204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801720a:	60fb      	str	r3, [r7, #12]
 801720c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801720e:	2300      	movs	r3, #0
 8017210:	60bb      	str	r3, [r7, #8]
 8017212:	4b56      	ldr	r3, [pc, #344]	; (801736c <MX_GPIO_Init+0x1ac>)
 8017214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017216:	4a55      	ldr	r2, [pc, #340]	; (801736c <MX_GPIO_Init+0x1ac>)
 8017218:	f043 0301 	orr.w	r3, r3, #1
 801721c:	6313      	str	r3, [r2, #48]	; 0x30
 801721e:	4b53      	ldr	r3, [pc, #332]	; (801736c <MX_GPIO_Init+0x1ac>)
 8017220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017222:	f003 0301 	and.w	r3, r3, #1
 8017226:	60bb      	str	r3, [r7, #8]
 8017228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801722a:	2300      	movs	r3, #0
 801722c:	607b      	str	r3, [r7, #4]
 801722e:	4b4f      	ldr	r3, [pc, #316]	; (801736c <MX_GPIO_Init+0x1ac>)
 8017230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017232:	4a4e      	ldr	r2, [pc, #312]	; (801736c <MX_GPIO_Init+0x1ac>)
 8017234:	f043 0302 	orr.w	r3, r3, #2
 8017238:	6313      	str	r3, [r2, #48]	; 0x30
 801723a:	4b4c      	ldr	r3, [pc, #304]	; (801736c <MX_GPIO_Init+0x1ac>)
 801723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801723e:	f003 0302 	and.w	r3, r3, #2
 8017242:	607b      	str	r3, [r7, #4]
 8017244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8017246:	2300      	movs	r3, #0
 8017248:	603b      	str	r3, [r7, #0]
 801724a:	4b48      	ldr	r3, [pc, #288]	; (801736c <MX_GPIO_Init+0x1ac>)
 801724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801724e:	4a47      	ldr	r2, [pc, #284]	; (801736c <MX_GPIO_Init+0x1ac>)
 8017250:	f043 0308 	orr.w	r3, r3, #8
 8017254:	6313      	str	r3, [r2, #48]	; 0x30
 8017256:	4b45      	ldr	r3, [pc, #276]	; (801736c <MX_GPIO_Init+0x1ac>)
 8017258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801725a:	f003 0308 	and.w	r3, r3, #8
 801725e:	603b      	str	r3, [r7, #0]
 8017260:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LR_NSS_Pin|LEDA_Pin|LEDB_Pin|LEDC_Pin 
 8017262:	2200      	movs	r2, #0
 8017264:	f242 010f 	movw	r1, #8207	; 0x200f
 8017268:	4841      	ldr	r0, [pc, #260]	; (8017370 <MX_GPIO_Init+0x1b0>)
 801726a:	f7f0 fa7b 	bl	8007764 <HAL_GPIO_WritePin>
                          |LEDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_STBY_Pin|PH_R_Pin|PH_L_Pin, GPIO_PIN_RESET);
 801726e:	2200      	movs	r2, #0
 8017270:	f245 0104 	movw	r1, #20484	; 0x5004
 8017274:	483f      	ldr	r0, [pc, #252]	; (8017374 <MX_GPIO_Init+0x1b4>)
 8017276:	f7f0 fa75 	bl	8007764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LR_RESET_GPIO_Port, LR_RESET_Pin, GPIO_PIN_RESET);
 801727a:	2200      	movs	r2, #0
 801727c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8017280:	483d      	ldr	r0, [pc, #244]	; (8017378 <MX_GPIO_Init+0x1b8>)
 8017282:	f7f0 fa6f 	bl	8007764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 8017286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801728a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801728c:	2301      	movs	r3, #1
 801728e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8017290:	2302      	movs	r3, #2
 8017292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017294:	2300      	movs	r3, #0
 8017296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 8017298:	f107 0314 	add.w	r3, r7, #20
 801729c:	4619      	mov	r1, r3
 801729e:	4834      	ldr	r0, [pc, #208]	; (8017370 <MX_GPIO_Init+0x1b0>)
 80172a0:	f7f0 f8ae 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin;
 80172a4:	230f      	movs	r3, #15
 80172a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80172a8:	2301      	movs	r3, #1
 80172aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80172ac:	2300      	movs	r3, #0
 80172ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80172b0:	2300      	movs	r3, #0
 80172b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80172b4:	f107 0314 	add.w	r3, r7, #20
 80172b8:	4619      	mov	r1, r3
 80172ba:	482d      	ldr	r0, [pc, #180]	; (8017370 <MX_GPIO_Init+0x1b0>)
 80172bc:	f7f0 f8a0 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_DIO1_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_DIO1_Pin;
 80172c0:	2330      	movs	r3, #48	; 0x30
 80172c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80172c4:	2300      	movs	r3, #0
 80172c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80172c8:	2302      	movs	r3, #2
 80172ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80172cc:	f107 0314 	add.w	r3, r7, #20
 80172d0:	4619      	mov	r1, r3
 80172d2:	4827      	ldr	r0, [pc, #156]	; (8017370 <MX_GPIO_Init+0x1b0>)
 80172d4:	f7f0 f894 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOT_STBY_Pin */
  GPIO_InitStruct.Pin = MOT_STBY_Pin;
 80172d8:	2304      	movs	r3, #4
 80172da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80172dc:	2301      	movs	r3, #1
 80172de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80172e0:	2300      	movs	r3, #0
 80172e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80172e4:	2300      	movs	r3, #0
 80172e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOT_STBY_GPIO_Port, &GPIO_InitStruct);
 80172e8:	f107 0314 	add.w	r3, r7, #20
 80172ec:	4619      	mov	r1, r3
 80172ee:	4821      	ldr	r0, [pc, #132]	; (8017374 <MX_GPIO_Init+0x1b4>)
 80172f0:	f7f0 f886 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_R_Pin PH_L_Pin */
  GPIO_InitStruct.Pin = PH_R_Pin|PH_L_Pin;
 80172f4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80172f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80172fa:	2301      	movs	r3, #1
 80172fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80172fe:	2302      	movs	r3, #2
 8017300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017302:	2300      	movs	r3, #0
 8017304:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017306:	f107 0314 	add.w	r3, r7, #20
 801730a:	4619      	mov	r1, r3
 801730c:	4819      	ldr	r0, [pc, #100]	; (8017374 <MX_GPIO_Init+0x1b4>)
 801730e:	f7f0 f877 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 8017312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017318:	2300      	movs	r3, #0
 801731a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801731c:	2301      	movs	r3, #1
 801731e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 8017320:	f107 0314 	add.w	r3, r7, #20
 8017324:	4619      	mov	r1, r3
 8017326:	4814      	ldr	r0, [pc, #80]	; (8017378 <MX_GPIO_Init+0x1b8>)
 8017328:	f7f0 f86a 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 801732c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017332:	2301      	movs	r3, #1
 8017334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8017336:	2302      	movs	r3, #2
 8017338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801733a:	2300      	movs	r3, #0
 801733c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 801733e:	f107 0314 	add.w	r3, r7, #20
 8017342:	4619      	mov	r1, r3
 8017344:	480c      	ldr	r0, [pc, #48]	; (8017378 <MX_GPIO_Init+0x1b8>)
 8017346:	f7f0 f85b 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 801734a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801734e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017350:	2300      	movs	r3, #0
 8017352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8017354:	2302      	movs	r3, #2
 8017356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017358:	f107 0314 	add.w	r3, r7, #20
 801735c:	4619      	mov	r1, r3
 801735e:	4805      	ldr	r0, [pc, #20]	; (8017374 <MX_GPIO_Init+0x1b4>)
 8017360:	f7f0 f84e 	bl	8007400 <HAL_GPIO_Init>

}
 8017364:	bf00      	nop
 8017366:	3728      	adds	r7, #40	; 0x28
 8017368:	46bd      	mov	sp, r7
 801736a:	bd80      	pop	{r7, pc}
 801736c:	40023800 	.word	0x40023800
 8017370:	40020800 	.word	0x40020800
 8017374:	40020400 	.word	0x40020400
 8017378:	40020000 	.word	0x40020000

0801737c <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 801737c:	b480      	push	{r7}
 801737e:	af00      	add	r7, sp, #0
 8017380:	4b02      	ldr	r3, [pc, #8]	; (801738c <Get_I2C1_Instance+0x10>)
 8017382:	4618      	mov	r0, r3
 8017384:	46bd      	mov	sp, r7
 8017386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738a:	4770      	bx	lr
 801738c:	2000a674 	.word	0x2000a674

08017390 <Get_SPI1_Instance>:
I2C_HandleTypeDef* Get_I2C2_Instance(void) { return &hi2c2; }
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
 8017390:	b480      	push	{r7}
 8017392:	af00      	add	r7, sp, #0
 8017394:	4b02      	ldr	r3, [pc, #8]	; (80173a0 <Get_SPI1_Instance+0x10>)
 8017396:	4618      	mov	r0, r3
 8017398:	46bd      	mov	sp, r7
 801739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739e:	4770      	bx	lr
 80173a0:	2000a8e0 	.word	0x2000a8e0

080173a4 <Get_UART1_Instance>:
UART_HandleTypeDef* Get_UART1_Instance(void) { return &huart1; }
 80173a4:	b480      	push	{r7}
 80173a6:	af00      	add	r7, sp, #0
 80173a8:	4b02      	ldr	r3, [pc, #8]	; (80173b4 <Get_UART1_Instance+0x10>)
 80173aa:	4618      	mov	r0, r3
 80173ac:	46bd      	mov	sp, r7
 80173ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b2:	4770      	bx	lr
 80173b4:	2000a79c 	.word	0x2000a79c

080173b8 <Get_UART2_Instance>:
UART_HandleTypeDef* Get_UART2_Instance(void) { return &huart2; }
 80173b8:	b480      	push	{r7}
 80173ba:	af00      	add	r7, sp, #0
 80173bc:	4b02      	ldr	r3, [pc, #8]	; (80173c8 <Get_UART2_Instance+0x10>)
 80173be:	4618      	mov	r0, r3
 80173c0:	46bd      	mov	sp, r7
 80173c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c6:	4770      	bx	lr
 80173c8:	2000a978 	.word	0x2000a978

080173cc <Get_RTC_Instance>:
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
 80173cc:	b480      	push	{r7}
 80173ce:	af00      	add	r7, sp, #0
 80173d0:	4b02      	ldr	r3, [pc, #8]	; (80173dc <Get_RTC_Instance+0x10>)
 80173d2:	4618      	mov	r0, r3
 80173d4:	46bd      	mov	sp, r7
 80173d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173da:	4770      	bx	lr
 80173dc:	2000a7dc 	.word	0x2000a7dc

080173e0 <Get_TIM3_Instance>:
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
 80173e0:	b480      	push	{r7}
 80173e2:	af00      	add	r7, sp, #0
 80173e4:	4b02      	ldr	r3, [pc, #8]	; (80173f0 <Get_TIM3_Instance+0x10>)
 80173e6:	4618      	mov	r0, r3
 80173e8:	46bd      	mov	sp, r7
 80173ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ee:	4770      	bx	lr
 80173f0:	2000a75c 	.word	0x2000a75c

080173f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80173f4:	b480      	push	{r7}
 80173f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80173f8:	bf00      	nop
 80173fa:	46bd      	mov	sp, r7
 80173fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017400:	4770      	bx	lr

08017402 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8017402:	b580      	push	{r7, lr}
 8017404:	b084      	sub	sp, #16
 8017406:	af00      	add	r7, sp, #0
 8017408:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801740a:	f7ef fb21 	bl	8006a50 <HAL_GetTick>
 801740e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8017410:	e006      	b.n	8017420 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8017412:	f7fc fc7d 	bl	8013d10 <BSP_SD_GetCardState>
 8017416:	4603      	mov	r3, r0
 8017418:	2b00      	cmp	r3, #0
 801741a:	d101      	bne.n	8017420 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801741c:	2300      	movs	r3, #0
 801741e:	e009      	b.n	8017434 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8017420:	f7ef fb16 	bl	8006a50 <HAL_GetTick>
 8017424:	4602      	mov	r2, r0
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	1ad3      	subs	r3, r2, r3
 801742a:	687a      	ldr	r2, [r7, #4]
 801742c:	429a      	cmp	r2, r3
 801742e:	d8f0      	bhi.n	8017412 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8017430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017434:	4618      	mov	r0, r3
 8017436:	3710      	adds	r7, #16
 8017438:	46bd      	mov	sp, r7
 801743a:	bd80      	pop	{r7, pc}

0801743c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b082      	sub	sp, #8
 8017440:	af00      	add	r7, sp, #0
 8017442:	4603      	mov	r3, r0
 8017444:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8017446:	4b0b      	ldr	r3, [pc, #44]	; (8017474 <SD_CheckStatus+0x38>)
 8017448:	2201      	movs	r2, #1
 801744a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801744c:	f7fc fc60 	bl	8013d10 <BSP_SD_GetCardState>
 8017450:	4603      	mov	r3, r0
 8017452:	2b00      	cmp	r3, #0
 8017454:	d107      	bne.n	8017466 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8017456:	4b07      	ldr	r3, [pc, #28]	; (8017474 <SD_CheckStatus+0x38>)
 8017458:	781b      	ldrb	r3, [r3, #0]
 801745a:	b2db      	uxtb	r3, r3
 801745c:	f023 0301 	bic.w	r3, r3, #1
 8017460:	b2da      	uxtb	r2, r3
 8017462:	4b04      	ldr	r3, [pc, #16]	; (8017474 <SD_CheckStatus+0x38>)
 8017464:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8017466:	4b03      	ldr	r3, [pc, #12]	; (8017474 <SD_CheckStatus+0x38>)
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	b2db      	uxtb	r3, r3
}
 801746c:	4618      	mov	r0, r3
 801746e:	3708      	adds	r7, #8
 8017470:	46bd      	mov	sp, r7
 8017472:	bd80      	pop	{r7, pc}
 8017474:	2000016c 	.word	0x2000016c

08017478 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b082      	sub	sp, #8
 801747c:	af00      	add	r7, sp, #0
 801747e:	4603      	mov	r3, r0
 8017480:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8017482:	f7fc fbeb 	bl	8013c5c <BSP_SD_Init>
 8017486:	4603      	mov	r3, r0
 8017488:	2b00      	cmp	r3, #0
 801748a:	d107      	bne.n	801749c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801748c:	79fb      	ldrb	r3, [r7, #7]
 801748e:	4618      	mov	r0, r3
 8017490:	f7ff ffd4 	bl	801743c <SD_CheckStatus>
 8017494:	4603      	mov	r3, r0
 8017496:	461a      	mov	r2, r3
 8017498:	4b04      	ldr	r3, [pc, #16]	; (80174ac <SD_initialize+0x34>)
 801749a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 801749c:	4b03      	ldr	r3, [pc, #12]	; (80174ac <SD_initialize+0x34>)
 801749e:	781b      	ldrb	r3, [r3, #0]
 80174a0:	b2db      	uxtb	r3, r3
}
 80174a2:	4618      	mov	r0, r3
 80174a4:	3708      	adds	r7, #8
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}
 80174aa:	bf00      	nop
 80174ac:	2000016c 	.word	0x2000016c

080174b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b082      	sub	sp, #8
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	4603      	mov	r3, r0
 80174b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80174ba:	79fb      	ldrb	r3, [r7, #7]
 80174bc:	4618      	mov	r0, r3
 80174be:	f7ff ffbd 	bl	801743c <SD_CheckStatus>
 80174c2:	4603      	mov	r3, r0
}
 80174c4:	4618      	mov	r0, r3
 80174c6:	3708      	adds	r7, #8
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}

080174cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b088      	sub	sp, #32
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	60b9      	str	r1, [r7, #8]
 80174d4:	607a      	str	r2, [r7, #4]
 80174d6:	603b      	str	r3, [r7, #0]
 80174d8:	4603      	mov	r3, r0
 80174da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80174dc:	2301      	movs	r3, #1
 80174de:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80174e0:	f247 5030 	movw	r0, #30000	; 0x7530
 80174e4:	f7ff ff8d 	bl	8017402 <SD_CheckStatusWithTimeout>
 80174e8:	4603      	mov	r3, r0
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	da01      	bge.n	80174f2 <SD_read+0x26>
  {
    return res;
 80174ee:	7ffb      	ldrb	r3, [r7, #31]
 80174f0:	e08b      	b.n	801760a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	f003 0303 	and.w	r3, r3, #3
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	f040 8085 	bne.w	8017608 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80174fe:	683a      	ldr	r2, [r7, #0]
 8017500:	6879      	ldr	r1, [r7, #4]
 8017502:	68b8      	ldr	r0, [r7, #8]
 8017504:	f7fc fbd0 	bl	8013ca8 <BSP_SD_ReadBlocks_DMA>
 8017508:	4603      	mov	r3, r0
 801750a:	2b00      	cmp	r3, #0
 801750c:	d133      	bne.n	8017576 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801750e:	4b41      	ldr	r3, [pc, #260]	; (8017614 <SD_read+0x148>)
 8017510:	2200      	movs	r2, #0
 8017512:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8017514:	f7ef fa9c 	bl	8006a50 <HAL_GetTick>
 8017518:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801751a:	bf00      	nop
 801751c:	4b3d      	ldr	r3, [pc, #244]	; (8017614 <SD_read+0x148>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d108      	bne.n	8017536 <SD_read+0x6a>
 8017524:	f7ef fa94 	bl	8006a50 <HAL_GetTick>
 8017528:	4602      	mov	r2, r0
 801752a:	697b      	ldr	r3, [r7, #20]
 801752c:	1ad3      	subs	r3, r2, r3
 801752e:	f247 522f 	movw	r2, #29999	; 0x752f
 8017532:	4293      	cmp	r3, r2
 8017534:	d9f2      	bls.n	801751c <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8017536:	4b37      	ldr	r3, [pc, #220]	; (8017614 <SD_read+0x148>)
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d102      	bne.n	8017544 <SD_read+0x78>
      {
        res = RES_ERROR;
 801753e:	2301      	movs	r3, #1
 8017540:	77fb      	strb	r3, [r7, #31]
 8017542:	e061      	b.n	8017608 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8017544:	4b33      	ldr	r3, [pc, #204]	; (8017614 <SD_read+0x148>)
 8017546:	2200      	movs	r2, #0
 8017548:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801754a:	f7ef fa81 	bl	8006a50 <HAL_GetTick>
 801754e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8017550:	e007      	b.n	8017562 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8017552:	f7fc fbdd 	bl	8013d10 <BSP_SD_GetCardState>
 8017556:	4603      	mov	r3, r0
 8017558:	2b00      	cmp	r3, #0
 801755a:	d102      	bne.n	8017562 <SD_read+0x96>
          {
            res = RES_OK;
 801755c:	2300      	movs	r3, #0
 801755e:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8017560:	e052      	b.n	8017608 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8017562:	f7ef fa75 	bl	8006a50 <HAL_GetTick>
 8017566:	4602      	mov	r2, r0
 8017568:	697b      	ldr	r3, [r7, #20]
 801756a:	1ad3      	subs	r3, r2, r3
 801756c:	f247 522f 	movw	r2, #29999	; 0x752f
 8017570:	4293      	cmp	r3, r2
 8017572:	d9ee      	bls.n	8017552 <SD_read+0x86>
 8017574:	e048      	b.n	8017608 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8017576:	2300      	movs	r3, #0
 8017578:	61bb      	str	r3, [r7, #24]
 801757a:	e034      	b.n	80175e6 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	1c5a      	adds	r2, r3, #1
 8017580:	607a      	str	r2, [r7, #4]
 8017582:	2201      	movs	r2, #1
 8017584:	4619      	mov	r1, r3
 8017586:	4824      	ldr	r0, [pc, #144]	; (8017618 <SD_read+0x14c>)
 8017588:	f7fc fb8e 	bl	8013ca8 <BSP_SD_ReadBlocks_DMA>
 801758c:	4603      	mov	r3, r0
 801758e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8017590:	7fbb      	ldrb	r3, [r7, #30]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d12c      	bne.n	80175f0 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8017596:	4b1f      	ldr	r3, [pc, #124]	; (8017614 <SD_read+0x148>)
 8017598:	2200      	movs	r2, #0
 801759a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 801759c:	f7ef fa58 	bl	8006a50 <HAL_GetTick>
 80175a0:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80175a2:	bf00      	nop
 80175a4:	4b1b      	ldr	r3, [pc, #108]	; (8017614 <SD_read+0x148>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d108      	bne.n	80175be <SD_read+0xf2>
 80175ac:	f7ef fa50 	bl	8006a50 <HAL_GetTick>
 80175b0:	4602      	mov	r2, r0
 80175b2:	697b      	ldr	r3, [r7, #20]
 80175b4:	1ad3      	subs	r3, r2, r3
 80175b6:	f247 522f 	movw	r2, #29999	; 0x752f
 80175ba:	4293      	cmp	r3, r2
 80175bc:	d9f2      	bls.n	80175a4 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 80175be:	4b15      	ldr	r3, [pc, #84]	; (8017614 <SD_read+0x148>)
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d016      	beq.n	80175f4 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 80175c6:	68bb      	ldr	r3, [r7, #8]
 80175c8:	4a13      	ldr	r2, [pc, #76]	; (8017618 <SD_read+0x14c>)
 80175ca:	4618      	mov	r0, r3
 80175cc:	4611      	mov	r1, r2
 80175ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80175d2:	461a      	mov	r2, r3
 80175d4:	f001 fac0 	bl	8018b58 <memcpy>
          buff += BLOCKSIZE;
 80175d8:	68bb      	ldr	r3, [r7, #8]
 80175da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80175de:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 80175e0:	69bb      	ldr	r3, [r7, #24]
 80175e2:	3301      	adds	r3, #1
 80175e4:	61bb      	str	r3, [r7, #24]
 80175e6:	69bb      	ldr	r3, [r7, #24]
 80175e8:	683a      	ldr	r2, [r7, #0]
 80175ea:	429a      	cmp	r2, r3
 80175ec:	d8c6      	bhi.n	801757c <SD_read+0xb0>
 80175ee:	e002      	b.n	80175f6 <SD_read+0x12a>
        }
        else
        {
          break;
 80175f0:	bf00      	nop
 80175f2:	e000      	b.n	80175f6 <SD_read+0x12a>
            break;
 80175f4:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 80175f6:	69bb      	ldr	r3, [r7, #24]
 80175f8:	683a      	ldr	r2, [r7, #0]
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d104      	bne.n	8017608 <SD_read+0x13c>
 80175fe:	7fbb      	ldrb	r3, [r7, #30]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d101      	bne.n	8017608 <SD_read+0x13c>
        res = RES_OK;
 8017604:	2300      	movs	r3, #0
 8017606:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8017608:	7ffb      	ldrb	r3, [r7, #31]
}
 801760a:	4618      	mov	r0, r3
 801760c:	3720      	adds	r7, #32
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
 8017612:	bf00      	nop
 8017614:	200019b0 	.word	0x200019b0
 8017618:	200017ac 	.word	0x200017ac

0801761c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b088      	sub	sp, #32
 8017620:	af00      	add	r7, sp, #0
 8017622:	60b9      	str	r1, [r7, #8]
 8017624:	607a      	str	r2, [r7, #4]
 8017626:	603b      	str	r3, [r7, #0]
 8017628:	4603      	mov	r3, r0
 801762a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801762c:	2301      	movs	r3, #1
 801762e:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 8017630:	4b4c      	ldr	r3, [pc, #304]	; (8017764 <SD_write+0x148>)
 8017632:	2200      	movs	r2, #0
 8017634:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8017636:	f247 5030 	movw	r0, #30000	; 0x7530
 801763a:	f7ff fee2 	bl	8017402 <SD_CheckStatusWithTimeout>
 801763e:	4603      	mov	r3, r0
 8017640:	2b00      	cmp	r3, #0
 8017642:	da01      	bge.n	8017648 <SD_write+0x2c>
  {
    return res;
 8017644:	7ffb      	ldrb	r3, [r7, #31]
 8017646:	e088      	b.n	801775a <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8017648:	68bb      	ldr	r3, [r7, #8]
 801764a:	f003 0303 	and.w	r3, r3, #3
 801764e:	2b00      	cmp	r3, #0
 8017650:	f040 8082 	bne.w	8017758 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8017654:	683a      	ldr	r2, [r7, #0]
 8017656:	6879      	ldr	r1, [r7, #4]
 8017658:	68b8      	ldr	r0, [r7, #8]
 801765a:	f7fc fb3f 	bl	8013cdc <BSP_SD_WriteBlocks_DMA>
 801765e:	4603      	mov	r3, r0
 8017660:	2b00      	cmp	r3, #0
 8017662:	d130      	bne.n	80176c6 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8017664:	f7ef f9f4 	bl	8006a50 <HAL_GetTick>
 8017668:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801766a:	bf00      	nop
 801766c:	4b3d      	ldr	r3, [pc, #244]	; (8017764 <SD_write+0x148>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d108      	bne.n	8017686 <SD_write+0x6a>
 8017674:	f7ef f9ec 	bl	8006a50 <HAL_GetTick>
 8017678:	4602      	mov	r2, r0
 801767a:	697b      	ldr	r3, [r7, #20]
 801767c:	1ad3      	subs	r3, r2, r3
 801767e:	f247 522f 	movw	r2, #29999	; 0x752f
 8017682:	4293      	cmp	r3, r2
 8017684:	d9f2      	bls.n	801766c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8017686:	4b37      	ldr	r3, [pc, #220]	; (8017764 <SD_write+0x148>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d102      	bne.n	8017694 <SD_write+0x78>
      {
        res = RES_ERROR;
 801768e:	2301      	movs	r3, #1
 8017690:	77fb      	strb	r3, [r7, #31]
 8017692:	e061      	b.n	8017758 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8017694:	4b33      	ldr	r3, [pc, #204]	; (8017764 <SD_write+0x148>)
 8017696:	2200      	movs	r2, #0
 8017698:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801769a:	f7ef f9d9 	bl	8006a50 <HAL_GetTick>
 801769e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80176a0:	e007      	b.n	80176b2 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80176a2:	f7fc fb35 	bl	8013d10 <BSP_SD_GetCardState>
 80176a6:	4603      	mov	r3, r0
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d102      	bne.n	80176b2 <SD_write+0x96>
          {
            res = RES_OK;
 80176ac:	2300      	movs	r3, #0
 80176ae:	77fb      	strb	r3, [r7, #31]
            break;
 80176b0:	e052      	b.n	8017758 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80176b2:	f7ef f9cd 	bl	8006a50 <HAL_GetTick>
 80176b6:	4602      	mov	r2, r0
 80176b8:	697b      	ldr	r3, [r7, #20]
 80176ba:	1ad3      	subs	r3, r2, r3
 80176bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80176c0:	4293      	cmp	r3, r2
 80176c2:	d9ee      	bls.n	80176a2 <SD_write+0x86>
 80176c4:	e048      	b.n	8017758 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 80176c6:	2300      	movs	r3, #0
 80176c8:	61bb      	str	r3, [r7, #24]
 80176ca:	e034      	b.n	8017736 <SD_write+0x11a>
      {
        WriteStatus = 0;
 80176cc:	4b25      	ldr	r3, [pc, #148]	; (8017764 <SD_write+0x148>)
 80176ce:	2200      	movs	r2, #0
 80176d0:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	1c5a      	adds	r2, r3, #1
 80176d6:	607a      	str	r2, [r7, #4]
 80176d8:	2201      	movs	r2, #1
 80176da:	4619      	mov	r1, r3
 80176dc:	4822      	ldr	r0, [pc, #136]	; (8017768 <SD_write+0x14c>)
 80176de:	f7fc fafd 	bl	8013cdc <BSP_SD_WriteBlocks_DMA>
 80176e2:	4603      	mov	r3, r0
 80176e4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80176e6:	7fbb      	ldrb	r3, [r7, #30]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d129      	bne.n	8017740 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 80176ec:	f7ef f9b0 	bl	8006a50 <HAL_GetTick>
 80176f0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80176f2:	bf00      	nop
 80176f4:	4b1b      	ldr	r3, [pc, #108]	; (8017764 <SD_write+0x148>)
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d108      	bne.n	801770e <SD_write+0xf2>
 80176fc:	f7ef f9a8 	bl	8006a50 <HAL_GetTick>
 8017700:	4602      	mov	r2, r0
 8017702:	697b      	ldr	r3, [r7, #20]
 8017704:	1ad3      	subs	r3, r2, r3
 8017706:	f247 522f 	movw	r2, #29999	; 0x752f
 801770a:	4293      	cmp	r3, r2
 801770c:	d9f2      	bls.n	80176f4 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 801770e:	4b15      	ldr	r3, [pc, #84]	; (8017764 <SD_write+0x148>)
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d016      	beq.n	8017744 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8017716:	68bb      	ldr	r3, [r7, #8]
 8017718:	4a13      	ldr	r2, [pc, #76]	; (8017768 <SD_write+0x14c>)
 801771a:	4618      	mov	r0, r3
 801771c:	4611      	mov	r1, r2
 801771e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017722:	461a      	mov	r2, r3
 8017724:	f001 fa18 	bl	8018b58 <memcpy>
          buff += BLOCKSIZE;
 8017728:	68bb      	ldr	r3, [r7, #8]
 801772a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801772e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8017730:	69bb      	ldr	r3, [r7, #24]
 8017732:	3301      	adds	r3, #1
 8017734:	61bb      	str	r3, [r7, #24]
 8017736:	69bb      	ldr	r3, [r7, #24]
 8017738:	683a      	ldr	r2, [r7, #0]
 801773a:	429a      	cmp	r2, r3
 801773c:	d8c6      	bhi.n	80176cc <SD_write+0xb0>
 801773e:	e002      	b.n	8017746 <SD_write+0x12a>
        }
        else
        {
          break;
 8017740:	bf00      	nop
 8017742:	e000      	b.n	8017746 <SD_write+0x12a>
            break;
 8017744:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8017746:	69bb      	ldr	r3, [r7, #24]
 8017748:	683a      	ldr	r2, [r7, #0]
 801774a:	429a      	cmp	r2, r3
 801774c:	d104      	bne.n	8017758 <SD_write+0x13c>
 801774e:	7fbb      	ldrb	r3, [r7, #30]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d101      	bne.n	8017758 <SD_write+0x13c>
        res = RES_OK;
 8017754:	2300      	movs	r3, #0
 8017756:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8017758:	7ffb      	ldrb	r3, [r7, #31]
}
 801775a:	4618      	mov	r0, r3
 801775c:	3720      	adds	r7, #32
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}
 8017762:	bf00      	nop
 8017764:	200019ac 	.word	0x200019ac
 8017768:	200017ac 	.word	0x200017ac

0801776c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b08c      	sub	sp, #48	; 0x30
 8017770:	af00      	add	r7, sp, #0
 8017772:	4603      	mov	r3, r0
 8017774:	603a      	str	r2, [r7, #0]
 8017776:	71fb      	strb	r3, [r7, #7]
 8017778:	460b      	mov	r3, r1
 801777a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801777c:	2301      	movs	r3, #1
 801777e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8017782:	4b25      	ldr	r3, [pc, #148]	; (8017818 <SD_ioctl+0xac>)
 8017784:	781b      	ldrb	r3, [r3, #0]
 8017786:	b2db      	uxtb	r3, r3
 8017788:	f003 0301 	and.w	r3, r3, #1
 801778c:	2b00      	cmp	r3, #0
 801778e:	d001      	beq.n	8017794 <SD_ioctl+0x28>
 8017790:	2303      	movs	r3, #3
 8017792:	e03c      	b.n	801780e <SD_ioctl+0xa2>

  switch (cmd)
 8017794:	79bb      	ldrb	r3, [r7, #6]
 8017796:	2b03      	cmp	r3, #3
 8017798:	d834      	bhi.n	8017804 <SD_ioctl+0x98>
 801779a:	a201      	add	r2, pc, #4	; (adr r2, 80177a0 <SD_ioctl+0x34>)
 801779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177a0:	080177b1 	.word	0x080177b1
 80177a4:	080177b9 	.word	0x080177b9
 80177a8:	080177d1 	.word	0x080177d1
 80177ac:	080177eb 	.word	0x080177eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80177b0:	2300      	movs	r3, #0
 80177b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80177b6:	e028      	b.n	801780a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80177b8:	f107 030c 	add.w	r3, r7, #12
 80177bc:	4618      	mov	r0, r3
 80177be:	f7fc fab7 	bl	8013d30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80177c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177c4:	683b      	ldr	r3, [r7, #0]
 80177c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80177c8:	2300      	movs	r3, #0
 80177ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80177ce:	e01c      	b.n	801780a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80177d0:	f107 030c 	add.w	r3, r7, #12
 80177d4:	4618      	mov	r0, r3
 80177d6:	f7fc faab 	bl	8013d30 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80177da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177dc:	b29a      	uxth	r2, r3
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80177e2:	2300      	movs	r3, #0
 80177e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80177e8:	e00f      	b.n	801780a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80177ea:	f107 030c 	add.w	r3, r7, #12
 80177ee:	4618      	mov	r0, r3
 80177f0:	f7fc fa9e 	bl	8013d30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80177f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f6:	0a5a      	lsrs	r2, r3, #9
 80177f8:	683b      	ldr	r3, [r7, #0]
 80177fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80177fc:	2300      	movs	r3, #0
 80177fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8017802:	e002      	b.n	801780a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8017804:	2304      	movs	r3, #4
 8017806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801780a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801780e:	4618      	mov	r0, r3
 8017810:	3730      	adds	r7, #48	; 0x30
 8017812:	46bd      	mov	sp, r7
 8017814:	bd80      	pop	{r7, pc}
 8017816:	bf00      	nop
 8017818:	2000016c 	.word	0x2000016c

0801781c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801781c:	b480      	push	{r7}
 801781e:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8017820:	4b03      	ldr	r3, [pc, #12]	; (8017830 <BSP_SD_WriteCpltCallback+0x14>)
 8017822:	2201      	movs	r2, #1
 8017824:	601a      	str	r2, [r3, #0]
}
 8017826:	bf00      	nop
 8017828:	46bd      	mov	sp, r7
 801782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782e:	4770      	bx	lr
 8017830:	200019ac 	.word	0x200019ac

08017834 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8017834:	b480      	push	{r7}
 8017836:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8017838:	4b03      	ldr	r3, [pc, #12]	; (8017848 <BSP_SD_ReadCpltCallback+0x14>)
 801783a:	2201      	movs	r2, #1
 801783c:	601a      	str	r2, [r3, #0]
}
 801783e:	bf00      	nop
 8017840:	46bd      	mov	sp, r7
 8017842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017846:	4770      	bx	lr
 8017848:	200019b0 	.word	0x200019b0

0801784c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801784c:	b480      	push	{r7}
 801784e:	b083      	sub	sp, #12
 8017850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017852:	2300      	movs	r3, #0
 8017854:	607b      	str	r3, [r7, #4]
 8017856:	4b10      	ldr	r3, [pc, #64]	; (8017898 <HAL_MspInit+0x4c>)
 8017858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801785a:	4a0f      	ldr	r2, [pc, #60]	; (8017898 <HAL_MspInit+0x4c>)
 801785c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017860:	6453      	str	r3, [r2, #68]	; 0x44
 8017862:	4b0d      	ldr	r3, [pc, #52]	; (8017898 <HAL_MspInit+0x4c>)
 8017864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801786a:	607b      	str	r3, [r7, #4]
 801786c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801786e:	2300      	movs	r3, #0
 8017870:	603b      	str	r3, [r7, #0]
 8017872:	4b09      	ldr	r3, [pc, #36]	; (8017898 <HAL_MspInit+0x4c>)
 8017874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017876:	4a08      	ldr	r2, [pc, #32]	; (8017898 <HAL_MspInit+0x4c>)
 8017878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801787c:	6413      	str	r3, [r2, #64]	; 0x40
 801787e:	4b06      	ldr	r3, [pc, #24]	; (8017898 <HAL_MspInit+0x4c>)
 8017880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017886:	603b      	str	r3, [r7, #0]
 8017888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801788a:	bf00      	nop
 801788c:	370c      	adds	r7, #12
 801788e:	46bd      	mov	sp, r7
 8017890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017894:	4770      	bx	lr
 8017896:	bf00      	nop
 8017898:	40023800 	.word	0x40023800

0801789c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b08c      	sub	sp, #48	; 0x30
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80178a4:	f107 031c 	add.w	r3, r7, #28
 80178a8:	2200      	movs	r2, #0
 80178aa:	601a      	str	r2, [r3, #0]
 80178ac:	605a      	str	r2, [r3, #4]
 80178ae:	609a      	str	r2, [r3, #8]
 80178b0:	60da      	str	r2, [r3, #12]
 80178b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	4a32      	ldr	r2, [pc, #200]	; (8017984 <HAL_I2C_MspInit+0xe8>)
 80178ba:	4293      	cmp	r3, r2
 80178bc:	d12c      	bne.n	8017918 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80178be:	2300      	movs	r3, #0
 80178c0:	61bb      	str	r3, [r7, #24]
 80178c2:	4b31      	ldr	r3, [pc, #196]	; (8017988 <HAL_I2C_MspInit+0xec>)
 80178c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178c6:	4a30      	ldr	r2, [pc, #192]	; (8017988 <HAL_I2C_MspInit+0xec>)
 80178c8:	f043 0302 	orr.w	r3, r3, #2
 80178cc:	6313      	str	r3, [r2, #48]	; 0x30
 80178ce:	4b2e      	ldr	r3, [pc, #184]	; (8017988 <HAL_I2C_MspInit+0xec>)
 80178d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178d2:	f003 0302 	and.w	r3, r3, #2
 80178d6:	61bb      	str	r3, [r7, #24]
 80178d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80178da:	23c0      	movs	r3, #192	; 0xc0
 80178dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80178de:	2312      	movs	r3, #18
 80178e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178e2:	2300      	movs	r3, #0
 80178e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80178e6:	2303      	movs	r3, #3
 80178e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80178ea:	2304      	movs	r3, #4
 80178ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80178ee:	f107 031c 	add.w	r3, r7, #28
 80178f2:	4619      	mov	r1, r3
 80178f4:	4825      	ldr	r0, [pc, #148]	; (801798c <HAL_I2C_MspInit+0xf0>)
 80178f6:	f7ef fd83 	bl	8007400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80178fa:	2300      	movs	r3, #0
 80178fc:	617b      	str	r3, [r7, #20]
 80178fe:	4b22      	ldr	r3, [pc, #136]	; (8017988 <HAL_I2C_MspInit+0xec>)
 8017900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017902:	4a21      	ldr	r2, [pc, #132]	; (8017988 <HAL_I2C_MspInit+0xec>)
 8017904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017908:	6413      	str	r3, [r2, #64]	; 0x40
 801790a:	4b1f      	ldr	r3, [pc, #124]	; (8017988 <HAL_I2C_MspInit+0xec>)
 801790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801790e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017912:	617b      	str	r3, [r7, #20]
 8017914:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8017916:	e031      	b.n	801797c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	4a1c      	ldr	r2, [pc, #112]	; (8017990 <HAL_I2C_MspInit+0xf4>)
 801791e:	4293      	cmp	r3, r2
 8017920:	d12c      	bne.n	801797c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017922:	2300      	movs	r3, #0
 8017924:	613b      	str	r3, [r7, #16]
 8017926:	4b18      	ldr	r3, [pc, #96]	; (8017988 <HAL_I2C_MspInit+0xec>)
 8017928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801792a:	4a17      	ldr	r2, [pc, #92]	; (8017988 <HAL_I2C_MspInit+0xec>)
 801792c:	f043 0302 	orr.w	r3, r3, #2
 8017930:	6313      	str	r3, [r2, #48]	; 0x30
 8017932:	4b15      	ldr	r3, [pc, #84]	; (8017988 <HAL_I2C_MspInit+0xec>)
 8017934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017936:	f003 0302 	and.w	r3, r3, #2
 801793a:	613b      	str	r3, [r7, #16]
 801793c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801793e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8017942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8017944:	2312      	movs	r3, #18
 8017946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017948:	2301      	movs	r3, #1
 801794a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801794c:	2303      	movs	r3, #3
 801794e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8017950:	2304      	movs	r3, #4
 8017952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017954:	f107 031c 	add.w	r3, r7, #28
 8017958:	4619      	mov	r1, r3
 801795a:	480c      	ldr	r0, [pc, #48]	; (801798c <HAL_I2C_MspInit+0xf0>)
 801795c:	f7ef fd50 	bl	8007400 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8017960:	2300      	movs	r3, #0
 8017962:	60fb      	str	r3, [r7, #12]
 8017964:	4b08      	ldr	r3, [pc, #32]	; (8017988 <HAL_I2C_MspInit+0xec>)
 8017966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017968:	4a07      	ldr	r2, [pc, #28]	; (8017988 <HAL_I2C_MspInit+0xec>)
 801796a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801796e:	6413      	str	r3, [r2, #64]	; 0x40
 8017970:	4b05      	ldr	r3, [pc, #20]	; (8017988 <HAL_I2C_MspInit+0xec>)
 8017972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017978:	60fb      	str	r3, [r7, #12]
 801797a:	68fb      	ldr	r3, [r7, #12]
}
 801797c:	bf00      	nop
 801797e:	3730      	adds	r7, #48	; 0x30
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}
 8017984:	40005400 	.word	0x40005400
 8017988:	40023800 	.word	0x40023800
 801798c:	40020400 	.word	0x40020400
 8017990:	40005800 	.word	0x40005800

08017994 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8017994:	b480      	push	{r7}
 8017996:	b083      	sub	sp, #12
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	4a05      	ldr	r2, [pc, #20]	; (80179b8 <HAL_RTC_MspInit+0x24>)
 80179a2:	4293      	cmp	r3, r2
 80179a4:	d102      	bne.n	80179ac <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80179a6:	4b05      	ldr	r3, [pc, #20]	; (80179bc <HAL_RTC_MspInit+0x28>)
 80179a8:	2201      	movs	r2, #1
 80179aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80179ac:	bf00      	nop
 80179ae:	370c      	adds	r7, #12
 80179b0:	46bd      	mov	sp, r7
 80179b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b6:	4770      	bx	lr
 80179b8:	40002800 	.word	0x40002800
 80179bc:	42470e3c 	.word	0x42470e3c

080179c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b08a      	sub	sp, #40	; 0x28
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80179c8:	f107 0314 	add.w	r3, r7, #20
 80179cc:	2200      	movs	r2, #0
 80179ce:	601a      	str	r2, [r3, #0]
 80179d0:	605a      	str	r2, [r3, #4]
 80179d2:	609a      	str	r2, [r3, #8]
 80179d4:	60da      	str	r2, [r3, #12]
 80179d6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	4a70      	ldr	r2, [pc, #448]	; (8017ba0 <HAL_SD_MspInit+0x1e0>)
 80179de:	4293      	cmp	r3, r2
 80179e0:	f040 80da 	bne.w	8017b98 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80179e4:	2300      	movs	r3, #0
 80179e6:	613b      	str	r3, [r7, #16]
 80179e8:	4b6e      	ldr	r3, [pc, #440]	; (8017ba4 <HAL_SD_MspInit+0x1e4>)
 80179ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179ec:	4a6d      	ldr	r2, [pc, #436]	; (8017ba4 <HAL_SD_MspInit+0x1e4>)
 80179ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80179f2:	6453      	str	r3, [r2, #68]	; 0x44
 80179f4:	4b6b      	ldr	r3, [pc, #428]	; (8017ba4 <HAL_SD_MspInit+0x1e4>)
 80179f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80179fc:	613b      	str	r3, [r7, #16]
 80179fe:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017a00:	2300      	movs	r3, #0
 8017a02:	60fb      	str	r3, [r7, #12]
 8017a04:	4b67      	ldr	r3, [pc, #412]	; (8017ba4 <HAL_SD_MspInit+0x1e4>)
 8017a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a08:	4a66      	ldr	r2, [pc, #408]	; (8017ba4 <HAL_SD_MspInit+0x1e4>)
 8017a0a:	f043 0304 	orr.w	r3, r3, #4
 8017a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8017a10:	4b64      	ldr	r3, [pc, #400]	; (8017ba4 <HAL_SD_MspInit+0x1e4>)
 8017a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a14:	f003 0304 	and.w	r3, r3, #4
 8017a18:	60fb      	str	r3, [r7, #12]
 8017a1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	60bb      	str	r3, [r7, #8]
 8017a20:	4b60      	ldr	r3, [pc, #384]	; (8017ba4 <HAL_SD_MspInit+0x1e4>)
 8017a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a24:	4a5f      	ldr	r2, [pc, #380]	; (8017ba4 <HAL_SD_MspInit+0x1e4>)
 8017a26:	f043 0308 	orr.w	r3, r3, #8
 8017a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8017a2c:	4b5d      	ldr	r3, [pc, #372]	; (8017ba4 <HAL_SD_MspInit+0x1e4>)
 8017a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a30:	f003 0308 	and.w	r3, r3, #8
 8017a34:	60bb      	str	r3, [r7, #8]
 8017a36:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8017a38:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8017a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a3e:	2302      	movs	r3, #2
 8017a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017a42:	2301      	movs	r3, #1
 8017a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a46:	2303      	movs	r3, #3
 8017a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8017a4a:	230c      	movs	r3, #12
 8017a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017a4e:	f107 0314 	add.w	r3, r7, #20
 8017a52:	4619      	mov	r1, r3
 8017a54:	4854      	ldr	r0, [pc, #336]	; (8017ba8 <HAL_SD_MspInit+0x1e8>)
 8017a56:	f7ef fcd3 	bl	8007400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017a5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a60:	2302      	movs	r3, #2
 8017a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a64:	2300      	movs	r3, #0
 8017a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a68:	2303      	movs	r3, #3
 8017a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8017a6c:	230c      	movs	r3, #12
 8017a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017a70:	f107 0314 	add.w	r3, r7, #20
 8017a74:	4619      	mov	r1, r3
 8017a76:	484c      	ldr	r0, [pc, #304]	; (8017ba8 <HAL_SD_MspInit+0x1e8>)
 8017a78:	f7ef fcc2 	bl	8007400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8017a7c:	2304      	movs	r3, #4
 8017a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a80:	2302      	movs	r3, #2
 8017a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017a84:	2301      	movs	r3, #1
 8017a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a88:	2303      	movs	r3, #3
 8017a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8017a8c:	230c      	movs	r3, #12
 8017a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017a90:	f107 0314 	add.w	r3, r7, #20
 8017a94:	4619      	mov	r1, r3
 8017a96:	4845      	ldr	r0, [pc, #276]	; (8017bac <HAL_SD_MspInit+0x1ec>)
 8017a98:	f7ef fcb2 	bl	8007400 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8017a9c:	4b44      	ldr	r3, [pc, #272]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017a9e:	4a45      	ldr	r2, [pc, #276]	; (8017bb4 <HAL_SD_MspInit+0x1f4>)
 8017aa0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8017aa2:	4b43      	ldr	r3, [pc, #268]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017aa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8017aa8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017aaa:	4b41      	ldr	r3, [pc, #260]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017aac:	2200      	movs	r2, #0
 8017aae:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8017ab0:	4b3f      	ldr	r3, [pc, #252]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8017ab6:	4b3e      	ldr	r3, [pc, #248]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017abc:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8017abe:	4b3c      	ldr	r3, [pc, #240]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017ac4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8017ac6:	4b3a      	ldr	r3, [pc, #232]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017ac8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8017acc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8017ace:	4b38      	ldr	r3, [pc, #224]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017ad0:	2220      	movs	r2, #32
 8017ad2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8017ad4:	4b36      	ldr	r3, [pc, #216]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8017ada:	4b35      	ldr	r3, [pc, #212]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017adc:	2204      	movs	r2, #4
 8017ade:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8017ae0:	4b33      	ldr	r3, [pc, #204]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017ae2:	2203      	movs	r2, #3
 8017ae4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8017ae6:	4b32      	ldr	r3, [pc, #200]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017ae8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8017aec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8017aee:	4b30      	ldr	r3, [pc, #192]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017af0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8017af4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8017af6:	482e      	ldr	r0, [pc, #184]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017af8:	f7ef f8ea 	bl	8006cd0 <HAL_DMA_Init>
 8017afc:	4603      	mov	r3, r0
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d001      	beq.n	8017b06 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8017b02:	f7ff fc77 	bl	80173f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	4a29      	ldr	r2, [pc, #164]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017b0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8017b0c:	4a28      	ldr	r2, [pc, #160]	; (8017bb0 <HAL_SD_MspInit+0x1f0>)
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8017b12:	4b29      	ldr	r3, [pc, #164]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b14:	4a29      	ldr	r2, [pc, #164]	; (8017bbc <HAL_SD_MspInit+0x1fc>)
 8017b16:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8017b18:	4b27      	ldr	r3, [pc, #156]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8017b1e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8017b20:	4b25      	ldr	r3, [pc, #148]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b22:	2240      	movs	r2, #64	; 0x40
 8017b24:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8017b26:	4b24      	ldr	r3, [pc, #144]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b28:	2200      	movs	r2, #0
 8017b2a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8017b2c:	4b22      	ldr	r3, [pc, #136]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017b32:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8017b34:	4b20      	ldr	r3, [pc, #128]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017b3a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8017b3c:	4b1e      	ldr	r3, [pc, #120]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8017b42:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8017b44:	4b1c      	ldr	r3, [pc, #112]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b46:	2220      	movs	r2, #32
 8017b48:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8017b4a:	4b1b      	ldr	r3, [pc, #108]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8017b50:	4b19      	ldr	r3, [pc, #100]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b52:	2204      	movs	r2, #4
 8017b54:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8017b56:	4b18      	ldr	r3, [pc, #96]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b58:	2203      	movs	r2, #3
 8017b5a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8017b5c:	4b16      	ldr	r3, [pc, #88]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8017b62:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8017b64:	4b14      	ldr	r3, [pc, #80]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8017b6a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8017b6c:	4812      	ldr	r0, [pc, #72]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b6e:	f7ef f8af 	bl	8006cd0 <HAL_DMA_Init>
 8017b72:	4603      	mov	r3, r0
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d001      	beq.n	8017b7c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8017b78:	f7ff fc3c 	bl	80173f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	4a0e      	ldr	r2, [pc, #56]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b80:	641a      	str	r2, [r3, #64]	; 0x40
 8017b82:	4a0d      	ldr	r2, [pc, #52]	; (8017bb8 <HAL_SD_MspInit+0x1f8>)
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8017b88:	2200      	movs	r2, #0
 8017b8a:	2100      	movs	r1, #0
 8017b8c:	2031      	movs	r0, #49	; 0x31
 8017b8e:	f7ef f868 	bl	8006c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8017b92:	2031      	movs	r0, #49	; 0x31
 8017b94:	f7ef f881 	bl	8006c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8017b98:	bf00      	nop
 8017b9a:	3728      	adds	r7, #40	; 0x28
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd80      	pop	{r7, pc}
 8017ba0:	40012c00 	.word	0x40012c00
 8017ba4:	40023800 	.word	0x40023800
 8017ba8:	40020800 	.word	0x40020800
 8017bac:	40020c00 	.word	0x40020c00
 8017bb0:	2000a614 	.word	0x2000a614
 8017bb4:	40026458 	.word	0x40026458
 8017bb8:	2000a7fc 	.word	0x2000a7fc
 8017bbc:	400264a0 	.word	0x400264a0

08017bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b08a      	sub	sp, #40	; 0x28
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017bc8:	f107 0314 	add.w	r3, r7, #20
 8017bcc:	2200      	movs	r2, #0
 8017bce:	601a      	str	r2, [r3, #0]
 8017bd0:	605a      	str	r2, [r3, #4]
 8017bd2:	609a      	str	r2, [r3, #8]
 8017bd4:	60da      	str	r2, [r3, #12]
 8017bd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	4a19      	ldr	r2, [pc, #100]	; (8017c44 <HAL_SPI_MspInit+0x84>)
 8017bde:	4293      	cmp	r3, r2
 8017be0:	d12b      	bne.n	8017c3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8017be2:	2300      	movs	r3, #0
 8017be4:	613b      	str	r3, [r7, #16]
 8017be6:	4b18      	ldr	r3, [pc, #96]	; (8017c48 <HAL_SPI_MspInit+0x88>)
 8017be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bea:	4a17      	ldr	r2, [pc, #92]	; (8017c48 <HAL_SPI_MspInit+0x88>)
 8017bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8017bf2:	4b15      	ldr	r3, [pc, #84]	; (8017c48 <HAL_SPI_MspInit+0x88>)
 8017bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017bfa:	613b      	str	r3, [r7, #16]
 8017bfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017bfe:	2300      	movs	r3, #0
 8017c00:	60fb      	str	r3, [r7, #12]
 8017c02:	4b11      	ldr	r3, [pc, #68]	; (8017c48 <HAL_SPI_MspInit+0x88>)
 8017c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c06:	4a10      	ldr	r2, [pc, #64]	; (8017c48 <HAL_SPI_MspInit+0x88>)
 8017c08:	f043 0302 	orr.w	r3, r3, #2
 8017c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8017c0e:	4b0e      	ldr	r3, [pc, #56]	; (8017c48 <HAL_SPI_MspInit+0x88>)
 8017c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c12:	f003 0302 	and.w	r3, r3, #2
 8017c16:	60fb      	str	r3, [r7, #12]
 8017c18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8017c1a:	2338      	movs	r3, #56	; 0x38
 8017c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017c1e:	2302      	movs	r3, #2
 8017c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c22:	2300      	movs	r3, #0
 8017c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017c26:	2303      	movs	r3, #3
 8017c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017c2a:	2305      	movs	r3, #5
 8017c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017c2e:	f107 0314 	add.w	r3, r7, #20
 8017c32:	4619      	mov	r1, r3
 8017c34:	4805      	ldr	r0, [pc, #20]	; (8017c4c <HAL_SPI_MspInit+0x8c>)
 8017c36:	f7ef fbe3 	bl	8007400 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8017c3a:	bf00      	nop
 8017c3c:	3728      	adds	r7, #40	; 0x28
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}
 8017c42:	bf00      	nop
 8017c44:	40013000 	.word	0x40013000
 8017c48:	40023800 	.word	0x40023800
 8017c4c:	40020400 	.word	0x40020400

08017c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8017c50:	b480      	push	{r7}
 8017c52:	b087      	sub	sp, #28
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017c60:	d10e      	bne.n	8017c80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8017c62:	2300      	movs	r3, #0
 8017c64:	617b      	str	r3, [r7, #20]
 8017c66:	4b1d      	ldr	r3, [pc, #116]	; (8017cdc <HAL_TIM_Base_MspInit+0x8c>)
 8017c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c6a:	4a1c      	ldr	r2, [pc, #112]	; (8017cdc <HAL_TIM_Base_MspInit+0x8c>)
 8017c6c:	f043 0301 	orr.w	r3, r3, #1
 8017c70:	6413      	str	r3, [r2, #64]	; 0x40
 8017c72:	4b1a      	ldr	r3, [pc, #104]	; (8017cdc <HAL_TIM_Base_MspInit+0x8c>)
 8017c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c76:	f003 0301 	and.w	r3, r3, #1
 8017c7a:	617b      	str	r3, [r7, #20]
 8017c7c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8017c7e:	e026      	b.n	8017cce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	4a16      	ldr	r2, [pc, #88]	; (8017ce0 <HAL_TIM_Base_MspInit+0x90>)
 8017c86:	4293      	cmp	r3, r2
 8017c88:	d10e      	bne.n	8017ca8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	613b      	str	r3, [r7, #16]
 8017c8e:	4b13      	ldr	r3, [pc, #76]	; (8017cdc <HAL_TIM_Base_MspInit+0x8c>)
 8017c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c92:	4a12      	ldr	r2, [pc, #72]	; (8017cdc <HAL_TIM_Base_MspInit+0x8c>)
 8017c94:	f043 0302 	orr.w	r3, r3, #2
 8017c98:	6413      	str	r3, [r2, #64]	; 0x40
 8017c9a:	4b10      	ldr	r3, [pc, #64]	; (8017cdc <HAL_TIM_Base_MspInit+0x8c>)
 8017c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c9e:	f003 0302 	and.w	r3, r3, #2
 8017ca2:	613b      	str	r3, [r7, #16]
 8017ca4:	693b      	ldr	r3, [r7, #16]
}
 8017ca6:	e012      	b.n	8017cce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	4a0d      	ldr	r2, [pc, #52]	; (8017ce4 <HAL_TIM_Base_MspInit+0x94>)
 8017cae:	4293      	cmp	r3, r2
 8017cb0:	d10d      	bne.n	8017cce <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	60fb      	str	r3, [r7, #12]
 8017cb6:	4b09      	ldr	r3, [pc, #36]	; (8017cdc <HAL_TIM_Base_MspInit+0x8c>)
 8017cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cba:	4a08      	ldr	r2, [pc, #32]	; (8017cdc <HAL_TIM_Base_MspInit+0x8c>)
 8017cbc:	f043 0308 	orr.w	r3, r3, #8
 8017cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8017cc2:	4b06      	ldr	r3, [pc, #24]	; (8017cdc <HAL_TIM_Base_MspInit+0x8c>)
 8017cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cc6:	f003 0308 	and.w	r3, r3, #8
 8017cca:	60fb      	str	r3, [r7, #12]
 8017ccc:	68fb      	ldr	r3, [r7, #12]
}
 8017cce:	bf00      	nop
 8017cd0:	371c      	adds	r7, #28
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd8:	4770      	bx	lr
 8017cda:	bf00      	nop
 8017cdc:	40023800 	.word	0x40023800
 8017ce0:	40000400 	.word	0x40000400
 8017ce4:	40000c00 	.word	0x40000c00

08017ce8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b08a      	sub	sp, #40	; 0x28
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017cf0:	f107 0314 	add.w	r3, r7, #20
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	601a      	str	r2, [r3, #0]
 8017cf8:	605a      	str	r2, [r3, #4]
 8017cfa:	609a      	str	r2, [r3, #8]
 8017cfc:	60da      	str	r2, [r3, #12]
 8017cfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	4a21      	ldr	r2, [pc, #132]	; (8017d8c <HAL_TIM_MspPostInit+0xa4>)
 8017d06:	4293      	cmp	r3, r2
 8017d08:	d13b      	bne.n	8017d82 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	613b      	str	r3, [r7, #16]
 8017d0e:	4b20      	ldr	r3, [pc, #128]	; (8017d90 <HAL_TIM_MspPostInit+0xa8>)
 8017d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d12:	4a1f      	ldr	r2, [pc, #124]	; (8017d90 <HAL_TIM_MspPostInit+0xa8>)
 8017d14:	f043 0302 	orr.w	r3, r3, #2
 8017d18:	6313      	str	r3, [r2, #48]	; 0x30
 8017d1a:	4b1d      	ldr	r3, [pc, #116]	; (8017d90 <HAL_TIM_MspPostInit+0xa8>)
 8017d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d1e:	f003 0302 	and.w	r3, r3, #2
 8017d22:	613b      	str	r3, [r7, #16]
 8017d24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017d26:	2300      	movs	r3, #0
 8017d28:	60fb      	str	r3, [r7, #12]
 8017d2a:	4b19      	ldr	r3, [pc, #100]	; (8017d90 <HAL_TIM_MspPostInit+0xa8>)
 8017d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d2e:	4a18      	ldr	r2, [pc, #96]	; (8017d90 <HAL_TIM_MspPostInit+0xa8>)
 8017d30:	f043 0304 	orr.w	r3, r3, #4
 8017d34:	6313      	str	r3, [r2, #48]	; 0x30
 8017d36:	4b16      	ldr	r3, [pc, #88]	; (8017d90 <HAL_TIM_MspPostInit+0xa8>)
 8017d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d3a:	f003 0304 	and.w	r3, r3, #4
 8017d3e:	60fb      	str	r3, [r7, #12]
 8017d40:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = EN_R_Pin;
 8017d42:	2301      	movs	r3, #1
 8017d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d46:	2302      	movs	r3, #2
 8017d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d4e:	2300      	movs	r3, #0
 8017d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8017d52:	2302      	movs	r3, #2
 8017d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EN_R_GPIO_Port, &GPIO_InitStruct);
 8017d56:	f107 0314 	add.w	r3, r7, #20
 8017d5a:	4619      	mov	r1, r3
 8017d5c:	480d      	ldr	r0, [pc, #52]	; (8017d94 <HAL_TIM_MspPostInit+0xac>)
 8017d5e:	f7ef fb4f 	bl	8007400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EN_L_Pin;
 8017d62:	2380      	movs	r3, #128	; 0x80
 8017d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d66:	2302      	movs	r3, #2
 8017d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d6e:	2300      	movs	r3, #0
 8017d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8017d72:	2302      	movs	r3, #2
 8017d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EN_L_GPIO_Port, &GPIO_InitStruct);
 8017d76:	f107 0314 	add.w	r3, r7, #20
 8017d7a:	4619      	mov	r1, r3
 8017d7c:	4806      	ldr	r0, [pc, #24]	; (8017d98 <HAL_TIM_MspPostInit+0xb0>)
 8017d7e:	f7ef fb3f 	bl	8007400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8017d82:	bf00      	nop
 8017d84:	3728      	adds	r7, #40	; 0x28
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}
 8017d8a:	bf00      	nop
 8017d8c:	40000400 	.word	0x40000400
 8017d90:	40023800 	.word	0x40023800
 8017d94:	40020400 	.word	0x40020400
 8017d98:	40020800 	.word	0x40020800

08017d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b08c      	sub	sp, #48	; 0x30
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017da4:	f107 031c 	add.w	r3, r7, #28
 8017da8:	2200      	movs	r2, #0
 8017daa:	601a      	str	r2, [r3, #0]
 8017dac:	605a      	str	r2, [r3, #4]
 8017dae:	609a      	str	r2, [r3, #8]
 8017db0:	60da      	str	r2, [r3, #12]
 8017db2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	4a36      	ldr	r2, [pc, #216]	; (8017e94 <HAL_UART_MspInit+0xf8>)
 8017dba:	4293      	cmp	r3, r2
 8017dbc:	d135      	bne.n	8017e2a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	61bb      	str	r3, [r7, #24]
 8017dc2:	4b35      	ldr	r3, [pc, #212]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017dc6:	4a34      	ldr	r2, [pc, #208]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017dc8:	f043 0310 	orr.w	r3, r3, #16
 8017dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8017dce:	4b32      	ldr	r3, [pc, #200]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017dd2:	f003 0310 	and.w	r3, r3, #16
 8017dd6:	61bb      	str	r3, [r7, #24]
 8017dd8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017dda:	2300      	movs	r3, #0
 8017ddc:	617b      	str	r3, [r7, #20]
 8017dde:	4b2e      	ldr	r3, [pc, #184]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017de2:	4a2d      	ldr	r2, [pc, #180]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017de4:	f043 0301 	orr.w	r3, r3, #1
 8017de8:	6313      	str	r3, [r2, #48]	; 0x30
 8017dea:	4b2b      	ldr	r3, [pc, #172]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dee:	f003 0301 	and.w	r3, r3, #1
 8017df2:	617b      	str	r3, [r7, #20]
 8017df4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8017df6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8017dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017dfc:	2302      	movs	r3, #2
 8017dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017e00:	2301      	movs	r3, #1
 8017e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017e04:	2303      	movs	r3, #3
 8017e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8017e08:	2307      	movs	r3, #7
 8017e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017e0c:	f107 031c 	add.w	r3, r7, #28
 8017e10:	4619      	mov	r1, r3
 8017e12:	4822      	ldr	r0, [pc, #136]	; (8017e9c <HAL_UART_MspInit+0x100>)
 8017e14:	f7ef faf4 	bl	8007400 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8017e18:	2200      	movs	r2, #0
 8017e1a:	2100      	movs	r1, #0
 8017e1c:	2025      	movs	r0, #37	; 0x25
 8017e1e:	f7ee ff20 	bl	8006c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8017e22:	2025      	movs	r0, #37	; 0x25
 8017e24:	f7ee ff39 	bl	8006c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8017e28:	e030      	b.n	8017e8c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	4a1c      	ldr	r2, [pc, #112]	; (8017ea0 <HAL_UART_MspInit+0x104>)
 8017e30:	4293      	cmp	r3, r2
 8017e32:	d12b      	bne.n	8017e8c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8017e34:	2300      	movs	r3, #0
 8017e36:	613b      	str	r3, [r7, #16]
 8017e38:	4b17      	ldr	r3, [pc, #92]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e3c:	4a16      	ldr	r2, [pc, #88]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017e42:	6413      	str	r3, [r2, #64]	; 0x40
 8017e44:	4b14      	ldr	r3, [pc, #80]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017e4c:	613b      	str	r3, [r7, #16]
 8017e4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017e50:	2300      	movs	r3, #0
 8017e52:	60fb      	str	r3, [r7, #12]
 8017e54:	4b10      	ldr	r3, [pc, #64]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e58:	4a0f      	ldr	r2, [pc, #60]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017e5a:	f043 0301 	orr.w	r3, r3, #1
 8017e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8017e60:	4b0d      	ldr	r3, [pc, #52]	; (8017e98 <HAL_UART_MspInit+0xfc>)
 8017e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e64:	f003 0301 	and.w	r3, r3, #1
 8017e68:	60fb      	str	r3, [r7, #12]
 8017e6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8017e6c:	230c      	movs	r3, #12
 8017e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017e70:	2302      	movs	r3, #2
 8017e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017e74:	2301      	movs	r3, #1
 8017e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017e78:	2303      	movs	r3, #3
 8017e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8017e7c:	2307      	movs	r3, #7
 8017e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017e80:	f107 031c 	add.w	r3, r7, #28
 8017e84:	4619      	mov	r1, r3
 8017e86:	4805      	ldr	r0, [pc, #20]	; (8017e9c <HAL_UART_MspInit+0x100>)
 8017e88:	f7ef faba 	bl	8007400 <HAL_GPIO_Init>
}
 8017e8c:	bf00      	nop
 8017e8e:	3730      	adds	r7, #48	; 0x30
 8017e90:	46bd      	mov	sp, r7
 8017e92:	bd80      	pop	{r7, pc}
 8017e94:	40011000 	.word	0x40011000
 8017e98:	40023800 	.word	0x40023800
 8017e9c:	40020000 	.word	0x40020000
 8017ea0:	40004400 	.word	0x40004400

08017ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017ea4:	b480      	push	{r7}
 8017ea6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8017ea8:	bf00      	nop
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb0:	4770      	bx	lr

08017eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017eb2:	b480      	push	{r7}
 8017eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017eb6:	e7fe      	b.n	8017eb6 <HardFault_Handler+0x4>

08017eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017eb8:	b480      	push	{r7}
 8017eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017ebc:	e7fe      	b.n	8017ebc <MemManage_Handler+0x4>

08017ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017ebe:	b480      	push	{r7}
 8017ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017ec2:	e7fe      	b.n	8017ec2 <BusFault_Handler+0x4>

08017ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017ec4:	b480      	push	{r7}
 8017ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017ec8:	e7fe      	b.n	8017ec8 <UsageFault_Handler+0x4>

08017eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8017eca:	b480      	push	{r7}
 8017ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8017ece:	bf00      	nop
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed6:	4770      	bx	lr

08017ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017ed8:	b480      	push	{r7}
 8017eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017edc:	bf00      	nop
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee4:	4770      	bx	lr

08017ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8017ee6:	b480      	push	{r7}
 8017ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8017eea:	bf00      	nop
 8017eec:	46bd      	mov	sp, r7
 8017eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef2:	4770      	bx	lr

08017ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017ef8:	f7ee fd96 	bl	8006a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8017efc:	bf00      	nop
 8017efe:	bd80      	pop	{r7, pc}

08017f00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8017f04:	4802      	ldr	r0, [pc, #8]	; (8017f10 <USART1_IRQHandler+0x10>)
 8017f06:	f7f5 faa9 	bl	800d45c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8017f0a:	bf00      	nop
 8017f0c:	bd80      	pop	{r7, pc}
 8017f0e:	bf00      	nop
 8017f10:	2000a79c 	.word	0x2000a79c

08017f14 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8017f14:	b580      	push	{r7, lr}
 8017f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8017f18:	4802      	ldr	r0, [pc, #8]	; (8017f24 <SDIO_IRQHandler+0x10>)
 8017f1a:	f7f2 fe1d 	bl	800ab58 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8017f1e:	bf00      	nop
 8017f20:	bd80      	pop	{r7, pc}
 8017f22:	bf00      	nop
 8017f24:	2000a85c 	.word	0x2000a85c

08017f28 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8017f2c:	4802      	ldr	r0, [pc, #8]	; (8017f38 <DMA2_Stream3_IRQHandler+0x10>)
 8017f2e:	f7ee ffff 	bl	8006f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8017f32:	bf00      	nop
 8017f34:	bd80      	pop	{r7, pc}
 8017f36:	bf00      	nop
 8017f38:	2000a614 	.word	0x2000a614

08017f3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8017f40:	4802      	ldr	r0, [pc, #8]	; (8017f4c <OTG_FS_IRQHandler+0x10>)
 8017f42:	f7f0 fd12 	bl	800896a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8017f46:	bf00      	nop
 8017f48:	bd80      	pop	{r7, pc}
 8017f4a:	bf00      	nop
 8017f4c:	2000b9b8 	.word	0x2000b9b8

08017f50 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8017f54:	4802      	ldr	r0, [pc, #8]	; (8017f60 <DMA2_Stream6_IRQHandler+0x10>)
 8017f56:	f7ee ffeb 	bl	8006f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8017f5a:	bf00      	nop
 8017f5c:	bd80      	pop	{r7, pc}
 8017f5e:	bf00      	nop
 8017f60:	2000a7fc 	.word	0x2000a7fc

08017f64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8017f64:	b580      	push	{r7, lr}
 8017f66:	b084      	sub	sp, #16
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8017f6c:	4b11      	ldr	r3, [pc, #68]	; (8017fb4 <_sbrk+0x50>)
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d102      	bne.n	8017f7a <_sbrk+0x16>
		heap_end = &end;
 8017f74:	4b0f      	ldr	r3, [pc, #60]	; (8017fb4 <_sbrk+0x50>)
 8017f76:	4a10      	ldr	r2, [pc, #64]	; (8017fb8 <_sbrk+0x54>)
 8017f78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8017f7a:	4b0e      	ldr	r3, [pc, #56]	; (8017fb4 <_sbrk+0x50>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8017f80:	4b0c      	ldr	r3, [pc, #48]	; (8017fb4 <_sbrk+0x50>)
 8017f82:	681a      	ldr	r2, [r3, #0]
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	4413      	add	r3, r2
 8017f88:	466a      	mov	r2, sp
 8017f8a:	4293      	cmp	r3, r2
 8017f8c:	d907      	bls.n	8017f9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8017f8e:	f000 fda9 	bl	8018ae4 <__errno>
 8017f92:	4602      	mov	r2, r0
 8017f94:	230c      	movs	r3, #12
 8017f96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8017f98:	f04f 33ff 	mov.w	r3, #4294967295
 8017f9c:	e006      	b.n	8017fac <_sbrk+0x48>
	}

	heap_end += incr;
 8017f9e:	4b05      	ldr	r3, [pc, #20]	; (8017fb4 <_sbrk+0x50>)
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	4413      	add	r3, r2
 8017fa6:	4a03      	ldr	r2, [pc, #12]	; (8017fb4 <_sbrk+0x50>)
 8017fa8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8017faa:	68fb      	ldr	r3, [r7, #12]
}
 8017fac:	4618      	mov	r0, r3
 8017fae:	3710      	adds	r7, #16
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}
 8017fb4:	200019b4 	.word	0x200019b4
 8017fb8:	2000bfc8 	.word	0x2000bfc8

08017fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017fbc:	b480      	push	{r7}
 8017fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017fc0:	4b16      	ldr	r3, [pc, #88]	; (801801c <SystemInit+0x60>)
 8017fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017fc6:	4a15      	ldr	r2, [pc, #84]	; (801801c <SystemInit+0x60>)
 8017fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8017fd0:	4b13      	ldr	r3, [pc, #76]	; (8018020 <SystemInit+0x64>)
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	4a12      	ldr	r2, [pc, #72]	; (8018020 <SystemInit+0x64>)
 8017fd6:	f043 0301 	orr.w	r3, r3, #1
 8017fda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8017fdc:	4b10      	ldr	r3, [pc, #64]	; (8018020 <SystemInit+0x64>)
 8017fde:	2200      	movs	r2, #0
 8017fe0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8017fe2:	4b0f      	ldr	r3, [pc, #60]	; (8018020 <SystemInit+0x64>)
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	4a0e      	ldr	r2, [pc, #56]	; (8018020 <SystemInit+0x64>)
 8017fe8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8017fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017ff0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8017ff2:	4b0b      	ldr	r3, [pc, #44]	; (8018020 <SystemInit+0x64>)
 8017ff4:	4a0b      	ldr	r2, [pc, #44]	; (8018024 <SystemInit+0x68>)
 8017ff6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8017ff8:	4b09      	ldr	r3, [pc, #36]	; (8018020 <SystemInit+0x64>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	4a08      	ldr	r2, [pc, #32]	; (8018020 <SystemInit+0x64>)
 8017ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018002:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8018004:	4b06      	ldr	r3, [pc, #24]	; (8018020 <SystemInit+0x64>)
 8018006:	2200      	movs	r2, #0
 8018008:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801800a:	4b04      	ldr	r3, [pc, #16]	; (801801c <SystemInit+0x60>)
 801800c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8018010:	609a      	str	r2, [r3, #8]
#endif
}
 8018012:	bf00      	nop
 8018014:	46bd      	mov	sp, r7
 8018016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801a:	4770      	bx	lr
 801801c:	e000ed00 	.word	0xe000ed00
 8018020:	40023800 	.word	0x40023800
 8018024:	24003010 	.word	0x24003010

08018028 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018028:	b580      	push	{r7, lr}
 801802a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801802c:	2200      	movs	r2, #0
 801802e:	4912      	ldr	r1, [pc, #72]	; (8018078 <MX_USB_DEVICE_Init+0x50>)
 8018030:	4812      	ldr	r0, [pc, #72]	; (801807c <MX_USB_DEVICE_Init+0x54>)
 8018032:	f7f8 f9c9 	bl	80103c8 <USBD_Init>
 8018036:	4603      	mov	r3, r0
 8018038:	2b00      	cmp	r3, #0
 801803a:	d001      	beq.n	8018040 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801803c:	f7ff f9da 	bl	80173f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018040:	490f      	ldr	r1, [pc, #60]	; (8018080 <MX_USB_DEVICE_Init+0x58>)
 8018042:	480e      	ldr	r0, [pc, #56]	; (801807c <MX_USB_DEVICE_Init+0x54>)
 8018044:	f7f8 f9eb 	bl	801041e <USBD_RegisterClass>
 8018048:	4603      	mov	r3, r0
 801804a:	2b00      	cmp	r3, #0
 801804c:	d001      	beq.n	8018052 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801804e:	f7ff f9d1 	bl	80173f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018052:	490c      	ldr	r1, [pc, #48]	; (8018084 <MX_USB_DEVICE_Init+0x5c>)
 8018054:	4809      	ldr	r0, [pc, #36]	; (801807c <MX_USB_DEVICE_Init+0x54>)
 8018056:	f7f8 f919 	bl	801028c <USBD_CDC_RegisterInterface>
 801805a:	4603      	mov	r3, r0
 801805c:	2b00      	cmp	r3, #0
 801805e:	d001      	beq.n	8018064 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018060:	f7ff f9c8 	bl	80173f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018064:	4805      	ldr	r0, [pc, #20]	; (801807c <MX_USB_DEVICE_Init+0x54>)
 8018066:	f7f8 f9f4 	bl	8010452 <USBD_Start>
 801806a:	4603      	mov	r3, r0
 801806c:	2b00      	cmp	r3, #0
 801806e:	d001      	beq.n	8018074 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018070:	f7ff f9c0 	bl	80173f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018074:	bf00      	nop
 8018076:	bd80      	pop	{r7, pc}
 8018078:	20000184 	.word	0x20000184
 801807c:	200019c0 	.word	0x200019c0
 8018080:	20000014 	.word	0x20000014
 8018084:	20000174 	.word	0x20000174

08018088 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801808c:	2200      	movs	r2, #0
 801808e:	4905      	ldr	r1, [pc, #20]	; (80180a4 <CDC_Init_FS+0x1c>)
 8018090:	4805      	ldr	r0, [pc, #20]	; (80180a8 <CDC_Init_FS+0x20>)
 8018092:	f7f8 f912 	bl	80102ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018096:	4905      	ldr	r1, [pc, #20]	; (80180ac <CDC_Init_FS+0x24>)
 8018098:	4803      	ldr	r0, [pc, #12]	; (80180a8 <CDC_Init_FS+0x20>)
 801809a:	f7f8 f928 	bl	80102ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801809e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80180a0:	4618      	mov	r0, r3
 80180a2:	bd80      	pop	{r7, pc}
 80180a4:	2000b1b8 	.word	0x2000b1b8
 80180a8:	200019c0 	.word	0x200019c0
 80180ac:	2000a9b8 	.word	0x2000a9b8

080180b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80180b0:	b480      	push	{r7}
 80180b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80180b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80180b6:	4618      	mov	r0, r3
 80180b8:	46bd      	mov	sp, r7
 80180ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180be:	4770      	bx	lr

080180c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80180c0:	b480      	push	{r7}
 80180c2:	b085      	sub	sp, #20
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	4603      	mov	r3, r0
 80180c8:	6039      	str	r1, [r7, #0]
 80180ca:	71fb      	strb	r3, [r7, #7]
 80180cc:	4613      	mov	r3, r2
 80180ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 80180d0:	f107 0308 	add.w	r3, r7, #8
 80180d4:	2200      	movs	r2, #0
 80180d6:	601a      	str	r2, [r3, #0]
 80180d8:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 80180dc:	79fb      	ldrb	r3, [r7, #7]
 80180de:	2b23      	cmp	r3, #35	; 0x23
 80180e0:	d87c      	bhi.n	80181dc <CDC_Control_FS+0x11c>
 80180e2:	a201      	add	r2, pc, #4	; (adr r2, 80180e8 <CDC_Control_FS+0x28>)
 80180e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180e8:	080181dd 	.word	0x080181dd
 80180ec:	080181dd 	.word	0x080181dd
 80180f0:	080181dd 	.word	0x080181dd
 80180f4:	080181dd 	.word	0x080181dd
 80180f8:	080181dd 	.word	0x080181dd
 80180fc:	080181dd 	.word	0x080181dd
 8018100:	080181dd 	.word	0x080181dd
 8018104:	080181dd 	.word	0x080181dd
 8018108:	080181dd 	.word	0x080181dd
 801810c:	080181dd 	.word	0x080181dd
 8018110:	080181dd 	.word	0x080181dd
 8018114:	080181dd 	.word	0x080181dd
 8018118:	080181dd 	.word	0x080181dd
 801811c:	080181dd 	.word	0x080181dd
 8018120:	080181dd 	.word	0x080181dd
 8018124:	080181dd 	.word	0x080181dd
 8018128:	080181dd 	.word	0x080181dd
 801812c:	080181dd 	.word	0x080181dd
 8018130:	080181dd 	.word	0x080181dd
 8018134:	080181dd 	.word	0x080181dd
 8018138:	080181dd 	.word	0x080181dd
 801813c:	080181dd 	.word	0x080181dd
 8018140:	080181dd 	.word	0x080181dd
 8018144:	080181dd 	.word	0x080181dd
 8018148:	080181dd 	.word	0x080181dd
 801814c:	080181dd 	.word	0x080181dd
 8018150:	080181dd 	.word	0x080181dd
 8018154:	080181dd 	.word	0x080181dd
 8018158:	080181dd 	.word	0x080181dd
 801815c:	080181dd 	.word	0x080181dd
 8018160:	080181dd 	.word	0x080181dd
 8018164:	080181dd 	.word	0x080181dd
 8018168:	08018179 	.word	0x08018179
 801816c:	080181a5 	.word	0x080181a5
 8018170:	080181dd 	.word	0x080181dd
 8018174:	080181dd 	.word	0x080181dd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 8018178:	683b      	ldr	r3, [r7, #0]
 801817a:	781b      	ldrb	r3, [r3, #0]
 801817c:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 801817e:	683b      	ldr	r3, [r7, #0]
 8018180:	785b      	ldrb	r3, [r3, #1]
 8018182:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 8018184:	683b      	ldr	r3, [r7, #0]
 8018186:	789b      	ldrb	r3, [r3, #2]
 8018188:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 801818a:	683b      	ldr	r3, [r7, #0]
 801818c:	78db      	ldrb	r3, [r3, #3]
 801818e:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 8018190:	683b      	ldr	r3, [r7, #0]
 8018192:	791b      	ldrb	r3, [r3, #4]
 8018194:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 8018196:	683b      	ldr	r3, [r7, #0]
 8018198:	795b      	ldrb	r3, [r3, #5]
 801819a:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 801819c:	683b      	ldr	r3, [r7, #0]
 801819e:	799b      	ldrb	r3, [r3, #6]
 80181a0:	73bb      	strb	r3, [r7, #14]
        	break;
 80181a2:	e01c      	b.n	80181de <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 80181a4:	7a3a      	ldrb	r2, [r7, #8]
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 80181aa:	683b      	ldr	r3, [r7, #0]
 80181ac:	3301      	adds	r3, #1
 80181ae:	7a7a      	ldrb	r2, [r7, #9]
 80181b0:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 80181b2:	683b      	ldr	r3, [r7, #0]
 80181b4:	3302      	adds	r3, #2
 80181b6:	7aba      	ldrb	r2, [r7, #10]
 80181b8:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 80181ba:	683b      	ldr	r3, [r7, #0]
 80181bc:	3303      	adds	r3, #3
 80181be:	7afa      	ldrb	r2, [r7, #11]
 80181c0:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 80181c2:	683b      	ldr	r3, [r7, #0]
 80181c4:	3304      	adds	r3, #4
 80181c6:	7b3a      	ldrb	r2, [r7, #12]
 80181c8:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 80181ca:	683b      	ldr	r3, [r7, #0]
 80181cc:	3305      	adds	r3, #5
 80181ce:	7b7a      	ldrb	r2, [r7, #13]
 80181d0:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 80181d2:	683b      	ldr	r3, [r7, #0]
 80181d4:	3306      	adds	r3, #6
 80181d6:	7bba      	ldrb	r2, [r7, #14]
 80181d8:	701a      	strb	r2, [r3, #0]
        	break;
 80181da:	e000      	b.n	80181de <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80181dc:	bf00      	nop
  }

  return (USBD_OK);
 80181de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80181e0:	4618      	mov	r0, r3
 80181e2:	3714      	adds	r7, #20
 80181e4:	46bd      	mov	sp, r7
 80181e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ea:	4770      	bx	lr

080181ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b082      	sub	sp, #8
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
 80181f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80181f6:	6879      	ldr	r1, [r7, #4]
 80181f8:	4805      	ldr	r0, [pc, #20]	; (8018210 <CDC_Receive_FS+0x24>)
 80181fa:	f7f8 f878 	bl	80102ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80181fe:	4804      	ldr	r0, [pc, #16]	; (8018210 <CDC_Receive_FS+0x24>)
 8018200:	f7f8 f8b8 	bl	8010374 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018204:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018206:	4618      	mov	r0, r3
 8018208:	3708      	adds	r7, #8
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}
 801820e:	bf00      	nop
 8018210:	200019c0 	.word	0x200019c0

08018214 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b084      	sub	sp, #16
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	460b      	mov	r3, r1
 801821e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018220:	2300      	movs	r3, #0
 8018222:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018224:	4b0d      	ldr	r3, [pc, #52]	; (801825c <CDC_Transmit_FS+0x48>)
 8018226:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801822a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801822c:	68bb      	ldr	r3, [r7, #8]
 801822e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8018232:	2b00      	cmp	r3, #0
 8018234:	d001      	beq.n	801823a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8018236:	2301      	movs	r3, #1
 8018238:	e00b      	b.n	8018252 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801823a:	887b      	ldrh	r3, [r7, #2]
 801823c:	461a      	mov	r2, r3
 801823e:	6879      	ldr	r1, [r7, #4]
 8018240:	4806      	ldr	r0, [pc, #24]	; (801825c <CDC_Transmit_FS+0x48>)
 8018242:	f7f8 f83a 	bl	80102ba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018246:	4805      	ldr	r0, [pc, #20]	; (801825c <CDC_Transmit_FS+0x48>)
 8018248:	f7f8 f865 	bl	8010316 <USBD_CDC_TransmitPacket>
 801824c:	4603      	mov	r3, r0
 801824e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018250:	7bfb      	ldrb	r3, [r7, #15]
}
 8018252:	4618      	mov	r0, r3
 8018254:	3710      	adds	r7, #16
 8018256:	46bd      	mov	sp, r7
 8018258:	bd80      	pop	{r7, pc}
 801825a:	bf00      	nop
 801825c:	200019c0 	.word	0x200019c0

08018260 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b08a      	sub	sp, #40	; 0x28
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018268:	f107 0314 	add.w	r3, r7, #20
 801826c:	2200      	movs	r2, #0
 801826e:	601a      	str	r2, [r3, #0]
 8018270:	605a      	str	r2, [r3, #4]
 8018272:	609a      	str	r2, [r3, #8]
 8018274:	60da      	str	r2, [r3, #12]
 8018276:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018280:	d13a      	bne.n	80182f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018282:	2300      	movs	r3, #0
 8018284:	613b      	str	r3, [r7, #16]
 8018286:	4b1e      	ldr	r3, [pc, #120]	; (8018300 <HAL_PCD_MspInit+0xa0>)
 8018288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801828a:	4a1d      	ldr	r2, [pc, #116]	; (8018300 <HAL_PCD_MspInit+0xa0>)
 801828c:	f043 0301 	orr.w	r3, r3, #1
 8018290:	6313      	str	r3, [r2, #48]	; 0x30
 8018292:	4b1b      	ldr	r3, [pc, #108]	; (8018300 <HAL_PCD_MspInit+0xa0>)
 8018294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018296:	f003 0301 	and.w	r3, r3, #1
 801829a:	613b      	str	r3, [r7, #16]
 801829c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 801829e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80182a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80182a4:	2302      	movs	r3, #2
 80182a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80182a8:	2300      	movs	r3, #0
 80182aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80182ac:	2303      	movs	r3, #3
 80182ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80182b0:	230a      	movs	r3, #10
 80182b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80182b4:	f107 0314 	add.w	r3, r7, #20
 80182b8:	4619      	mov	r1, r3
 80182ba:	4812      	ldr	r0, [pc, #72]	; (8018304 <HAL_PCD_MspInit+0xa4>)
 80182bc:	f7ef f8a0 	bl	8007400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80182c0:	4b0f      	ldr	r3, [pc, #60]	; (8018300 <HAL_PCD_MspInit+0xa0>)
 80182c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182c4:	4a0e      	ldr	r2, [pc, #56]	; (8018300 <HAL_PCD_MspInit+0xa0>)
 80182c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80182ca:	6353      	str	r3, [r2, #52]	; 0x34
 80182cc:	2300      	movs	r3, #0
 80182ce:	60fb      	str	r3, [r7, #12]
 80182d0:	4b0b      	ldr	r3, [pc, #44]	; (8018300 <HAL_PCD_MspInit+0xa0>)
 80182d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182d4:	4a0a      	ldr	r2, [pc, #40]	; (8018300 <HAL_PCD_MspInit+0xa0>)
 80182d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80182da:	6453      	str	r3, [r2, #68]	; 0x44
 80182dc:	4b08      	ldr	r3, [pc, #32]	; (8018300 <HAL_PCD_MspInit+0xa0>)
 80182de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80182e4:	60fb      	str	r3, [r7, #12]
 80182e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80182e8:	2200      	movs	r2, #0
 80182ea:	2100      	movs	r1, #0
 80182ec:	2043      	movs	r0, #67	; 0x43
 80182ee:	f7ee fcb8 	bl	8006c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80182f2:	2043      	movs	r0, #67	; 0x43
 80182f4:	f7ee fcd1 	bl	8006c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80182f8:	bf00      	nop
 80182fa:	3728      	adds	r7, #40	; 0x28
 80182fc:	46bd      	mov	sp, r7
 80182fe:	bd80      	pop	{r7, pc}
 8018300:	40023800 	.word	0x40023800
 8018304:	40020000 	.word	0x40020000

08018308 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b082      	sub	sp, #8
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801831c:	4619      	mov	r1, r3
 801831e:	4610      	mov	r0, r2
 8018320:	f7f8 f8e0 	bl	80104e4 <USBD_LL_SetupStage>
}
 8018324:	bf00      	nop
 8018326:	3708      	adds	r7, #8
 8018328:	46bd      	mov	sp, r7
 801832a:	bd80      	pop	{r7, pc}

0801832c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b082      	sub	sp, #8
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
 8018334:	460b      	mov	r3, r1
 8018336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801833e:	78fa      	ldrb	r2, [r7, #3]
 8018340:	6879      	ldr	r1, [r7, #4]
 8018342:	4613      	mov	r3, r2
 8018344:	00db      	lsls	r3, r3, #3
 8018346:	1a9b      	subs	r3, r3, r2
 8018348:	009b      	lsls	r3, r3, #2
 801834a:	440b      	add	r3, r1
 801834c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018350:	681a      	ldr	r2, [r3, #0]
 8018352:	78fb      	ldrb	r3, [r7, #3]
 8018354:	4619      	mov	r1, r3
 8018356:	f7f8 f910 	bl	801057a <USBD_LL_DataOutStage>
}
 801835a:	bf00      	nop
 801835c:	3708      	adds	r7, #8
 801835e:	46bd      	mov	sp, r7
 8018360:	bd80      	pop	{r7, pc}

08018362 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018362:	b580      	push	{r7, lr}
 8018364:	b082      	sub	sp, #8
 8018366:	af00      	add	r7, sp, #0
 8018368:	6078      	str	r0, [r7, #4]
 801836a:	460b      	mov	r3, r1
 801836c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018374:	78fa      	ldrb	r2, [r7, #3]
 8018376:	6879      	ldr	r1, [r7, #4]
 8018378:	4613      	mov	r3, r2
 801837a:	00db      	lsls	r3, r3, #3
 801837c:	1a9b      	subs	r3, r3, r2
 801837e:	009b      	lsls	r3, r3, #2
 8018380:	440b      	add	r3, r1
 8018382:	3348      	adds	r3, #72	; 0x48
 8018384:	681a      	ldr	r2, [r3, #0]
 8018386:	78fb      	ldrb	r3, [r7, #3]
 8018388:	4619      	mov	r1, r3
 801838a:	f7f8 f967 	bl	801065c <USBD_LL_DataInStage>
}
 801838e:	bf00      	nop
 8018390:	3708      	adds	r7, #8
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}

08018396 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018396:	b580      	push	{r7, lr}
 8018398:	b082      	sub	sp, #8
 801839a:	af00      	add	r7, sp, #0
 801839c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80183a4:	4618      	mov	r0, r3
 80183a6:	f7f8 fa75 	bl	8010894 <USBD_LL_SOF>
}
 80183aa:	bf00      	nop
 80183ac:	3708      	adds	r7, #8
 80183ae:	46bd      	mov	sp, r7
 80183b0:	bd80      	pop	{r7, pc}

080183b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80183b2:	b580      	push	{r7, lr}
 80183b4:	b084      	sub	sp, #16
 80183b6:	af00      	add	r7, sp, #0
 80183b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80183ba:	2301      	movs	r3, #1
 80183bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	68db      	ldr	r3, [r3, #12]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d102      	bne.n	80183cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80183c6:	2300      	movs	r3, #0
 80183c8:	73fb      	strb	r3, [r7, #15]
 80183ca:	e008      	b.n	80183de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	68db      	ldr	r3, [r3, #12]
 80183d0:	2b02      	cmp	r3, #2
 80183d2:	d102      	bne.n	80183da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80183d4:	2301      	movs	r3, #1
 80183d6:	73fb      	strb	r3, [r7, #15]
 80183d8:	e001      	b.n	80183de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80183da:	f7ff f80b 	bl	80173f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80183e4:	7bfa      	ldrb	r2, [r7, #15]
 80183e6:	4611      	mov	r1, r2
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7f8 fa1d 	bl	8010828 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80183f4:	4618      	mov	r0, r3
 80183f6:	f7f8 f9d6 	bl	80107a6 <USBD_LL_Reset>
}
 80183fa:	bf00      	nop
 80183fc:	3710      	adds	r7, #16
 80183fe:	46bd      	mov	sp, r7
 8018400:	bd80      	pop	{r7, pc}
	...

08018404 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018404:	b580      	push	{r7, lr}
 8018406:	b082      	sub	sp, #8
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018412:	4618      	mov	r0, r3
 8018414:	f7f8 fa18 	bl	8010848 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	687a      	ldr	r2, [r7, #4]
 8018424:	6812      	ldr	r2, [r2, #0]
 8018426:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801842a:	f043 0301 	orr.w	r3, r3, #1
 801842e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	6a1b      	ldr	r3, [r3, #32]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d005      	beq.n	8018444 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018438:	4b04      	ldr	r3, [pc, #16]	; (801844c <HAL_PCD_SuspendCallback+0x48>)
 801843a:	691b      	ldr	r3, [r3, #16]
 801843c:	4a03      	ldr	r2, [pc, #12]	; (801844c <HAL_PCD_SuspendCallback+0x48>)
 801843e:	f043 0306 	orr.w	r3, r3, #6
 8018442:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018444:	bf00      	nop
 8018446:	3708      	adds	r7, #8
 8018448:	46bd      	mov	sp, r7
 801844a:	bd80      	pop	{r7, pc}
 801844c:	e000ed00 	.word	0xe000ed00

08018450 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018450:	b580      	push	{r7, lr}
 8018452:	b082      	sub	sp, #8
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801845e:	4618      	mov	r0, r3
 8018460:	f7f8 fa07 	bl	8010872 <USBD_LL_Resume>
}
 8018464:	bf00      	nop
 8018466:	3708      	adds	r7, #8
 8018468:	46bd      	mov	sp, r7
 801846a:	bd80      	pop	{r7, pc}

0801846c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b082      	sub	sp, #8
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
 8018474:	460b      	mov	r3, r1
 8018476:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801847e:	78fa      	ldrb	r2, [r7, #3]
 8018480:	4611      	mov	r1, r2
 8018482:	4618      	mov	r0, r3
 8018484:	f7f8 fa2d 	bl	80108e2 <USBD_LL_IsoOUTIncomplete>
}
 8018488:	bf00      	nop
 801848a:	3708      	adds	r7, #8
 801848c:	46bd      	mov	sp, r7
 801848e:	bd80      	pop	{r7, pc}

08018490 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b082      	sub	sp, #8
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
 8018498:	460b      	mov	r3, r1
 801849a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80184a2:	78fa      	ldrb	r2, [r7, #3]
 80184a4:	4611      	mov	r1, r2
 80184a6:	4618      	mov	r0, r3
 80184a8:	f7f8 fa0e 	bl	80108c8 <USBD_LL_IsoINIncomplete>
}
 80184ac:	bf00      	nop
 80184ae:	3708      	adds	r7, #8
 80184b0:	46bd      	mov	sp, r7
 80184b2:	bd80      	pop	{r7, pc}

080184b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b082      	sub	sp, #8
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80184c2:	4618      	mov	r0, r3
 80184c4:	f7f8 fa1a 	bl	80108fc <USBD_LL_DevConnected>
}
 80184c8:	bf00      	nop
 80184ca:	3708      	adds	r7, #8
 80184cc:	46bd      	mov	sp, r7
 80184ce:	bd80      	pop	{r7, pc}

080184d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184d0:	b580      	push	{r7, lr}
 80184d2:	b082      	sub	sp, #8
 80184d4:	af00      	add	r7, sp, #0
 80184d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80184de:	4618      	mov	r0, r3
 80184e0:	f7f8 fa17 	bl	8010912 <USBD_LL_DevDisconnected>
}
 80184e4:	bf00      	nop
 80184e6:	3708      	adds	r7, #8
 80184e8:	46bd      	mov	sp, r7
 80184ea:	bd80      	pop	{r7, pc}

080184ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b082      	sub	sp, #8
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	781b      	ldrb	r3, [r3, #0]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d13c      	bne.n	8018576 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80184fc:	4a20      	ldr	r2, [pc, #128]	; (8018580 <USBD_LL_Init+0x94>)
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	4a1e      	ldr	r2, [pc, #120]	; (8018580 <USBD_LL_Init+0x94>)
 8018508:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801850c:	4b1c      	ldr	r3, [pc, #112]	; (8018580 <USBD_LL_Init+0x94>)
 801850e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018512:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018514:	4b1a      	ldr	r3, [pc, #104]	; (8018580 <USBD_LL_Init+0x94>)
 8018516:	2204      	movs	r2, #4
 8018518:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801851a:	4b19      	ldr	r3, [pc, #100]	; (8018580 <USBD_LL_Init+0x94>)
 801851c:	2202      	movs	r2, #2
 801851e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018520:	4b17      	ldr	r3, [pc, #92]	; (8018580 <USBD_LL_Init+0x94>)
 8018522:	2200      	movs	r2, #0
 8018524:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018526:	4b16      	ldr	r3, [pc, #88]	; (8018580 <USBD_LL_Init+0x94>)
 8018528:	2202      	movs	r2, #2
 801852a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801852c:	4b14      	ldr	r3, [pc, #80]	; (8018580 <USBD_LL_Init+0x94>)
 801852e:	2200      	movs	r2, #0
 8018530:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018532:	4b13      	ldr	r3, [pc, #76]	; (8018580 <USBD_LL_Init+0x94>)
 8018534:	2200      	movs	r2, #0
 8018536:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018538:	4b11      	ldr	r3, [pc, #68]	; (8018580 <USBD_LL_Init+0x94>)
 801853a:	2200      	movs	r2, #0
 801853c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801853e:	4b10      	ldr	r3, [pc, #64]	; (8018580 <USBD_LL_Init+0x94>)
 8018540:	2200      	movs	r2, #0
 8018542:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018544:	4b0e      	ldr	r3, [pc, #56]	; (8018580 <USBD_LL_Init+0x94>)
 8018546:	2200      	movs	r2, #0
 8018548:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801854a:	480d      	ldr	r0, [pc, #52]	; (8018580 <USBD_LL_Init+0x94>)
 801854c:	f7f0 f8bd 	bl	80086ca <HAL_PCD_Init>
 8018550:	4603      	mov	r3, r0
 8018552:	2b00      	cmp	r3, #0
 8018554:	d001      	beq.n	801855a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018556:	f7fe ff4d 	bl	80173f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801855a:	2180      	movs	r1, #128	; 0x80
 801855c:	4808      	ldr	r0, [pc, #32]	; (8018580 <USBD_LL_Init+0x94>)
 801855e:	f7f1 fa22 	bl	80099a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018562:	2240      	movs	r2, #64	; 0x40
 8018564:	2100      	movs	r1, #0
 8018566:	4806      	ldr	r0, [pc, #24]	; (8018580 <USBD_LL_Init+0x94>)
 8018568:	f7f1 f9d6 	bl	8009918 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801856c:	2280      	movs	r2, #128	; 0x80
 801856e:	2101      	movs	r1, #1
 8018570:	4803      	ldr	r0, [pc, #12]	; (8018580 <USBD_LL_Init+0x94>)
 8018572:	f7f1 f9d1 	bl	8009918 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018576:	2300      	movs	r3, #0
}
 8018578:	4618      	mov	r0, r3
 801857a:	3708      	adds	r7, #8
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}
 8018580:	2000b9b8 	.word	0x2000b9b8

08018584 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b084      	sub	sp, #16
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801858c:	2300      	movs	r3, #0
 801858e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018590:	2300      	movs	r3, #0
 8018592:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801859a:	4618      	mov	r0, r3
 801859c:	f7f0 f9b2 	bl	8008904 <HAL_PCD_Start>
 80185a0:	4603      	mov	r3, r0
 80185a2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80185a4:	7bfb      	ldrb	r3, [r7, #15]
 80185a6:	4618      	mov	r0, r3
 80185a8:	f000 f92e 	bl	8018808 <USBD_Get_USB_Status>
 80185ac:	4603      	mov	r3, r0
 80185ae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80185b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80185b2:	4618      	mov	r0, r3
 80185b4:	3710      	adds	r7, #16
 80185b6:	46bd      	mov	sp, r7
 80185b8:	bd80      	pop	{r7, pc}

080185ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80185ba:	b580      	push	{r7, lr}
 80185bc:	b084      	sub	sp, #16
 80185be:	af00      	add	r7, sp, #0
 80185c0:	6078      	str	r0, [r7, #4]
 80185c2:	4608      	mov	r0, r1
 80185c4:	4611      	mov	r1, r2
 80185c6:	461a      	mov	r2, r3
 80185c8:	4603      	mov	r3, r0
 80185ca:	70fb      	strb	r3, [r7, #3]
 80185cc:	460b      	mov	r3, r1
 80185ce:	70bb      	strb	r3, [r7, #2]
 80185d0:	4613      	mov	r3, r2
 80185d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185d4:	2300      	movs	r3, #0
 80185d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185d8:	2300      	movs	r3, #0
 80185da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80185e2:	78bb      	ldrb	r3, [r7, #2]
 80185e4:	883a      	ldrh	r2, [r7, #0]
 80185e6:	78f9      	ldrb	r1, [r7, #3]
 80185e8:	f7f0 fd87 	bl	80090fa <HAL_PCD_EP_Open>
 80185ec:	4603      	mov	r3, r0
 80185ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185f0:	7bfb      	ldrb	r3, [r7, #15]
 80185f2:	4618      	mov	r0, r3
 80185f4:	f000 f908 	bl	8018808 <USBD_Get_USB_Status>
 80185f8:	4603      	mov	r3, r0
 80185fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80185fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80185fe:	4618      	mov	r0, r3
 8018600:	3710      	adds	r7, #16
 8018602:	46bd      	mov	sp, r7
 8018604:	bd80      	pop	{r7, pc}

08018606 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018606:	b580      	push	{r7, lr}
 8018608:	b084      	sub	sp, #16
 801860a:	af00      	add	r7, sp, #0
 801860c:	6078      	str	r0, [r7, #4]
 801860e:	460b      	mov	r3, r1
 8018610:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018612:	2300      	movs	r3, #0
 8018614:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018616:	2300      	movs	r3, #0
 8018618:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8018620:	78fa      	ldrb	r2, [r7, #3]
 8018622:	4611      	mov	r1, r2
 8018624:	4618      	mov	r0, r3
 8018626:	f7f0 fdd0 	bl	80091ca <HAL_PCD_EP_Close>
 801862a:	4603      	mov	r3, r0
 801862c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801862e:	7bfb      	ldrb	r3, [r7, #15]
 8018630:	4618      	mov	r0, r3
 8018632:	f000 f8e9 	bl	8018808 <USBD_Get_USB_Status>
 8018636:	4603      	mov	r3, r0
 8018638:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801863a:	7bbb      	ldrb	r3, [r7, #14]
}
 801863c:	4618      	mov	r0, r3
 801863e:	3710      	adds	r7, #16
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}

08018644 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b084      	sub	sp, #16
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
 801864c:	460b      	mov	r3, r1
 801864e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018650:	2300      	movs	r3, #0
 8018652:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018654:	2300      	movs	r3, #0
 8018656:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801865e:	78fa      	ldrb	r2, [r7, #3]
 8018660:	4611      	mov	r1, r2
 8018662:	4618      	mov	r0, r3
 8018664:	f7f0 fea8 	bl	80093b8 <HAL_PCD_EP_SetStall>
 8018668:	4603      	mov	r3, r0
 801866a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801866c:	7bfb      	ldrb	r3, [r7, #15]
 801866e:	4618      	mov	r0, r3
 8018670:	f000 f8ca 	bl	8018808 <USBD_Get_USB_Status>
 8018674:	4603      	mov	r3, r0
 8018676:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8018678:	7bbb      	ldrb	r3, [r7, #14]
}
 801867a:	4618      	mov	r0, r3
 801867c:	3710      	adds	r7, #16
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}

08018682 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018682:	b580      	push	{r7, lr}
 8018684:	b084      	sub	sp, #16
 8018686:	af00      	add	r7, sp, #0
 8018688:	6078      	str	r0, [r7, #4]
 801868a:	460b      	mov	r3, r1
 801868c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801868e:	2300      	movs	r3, #0
 8018690:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018692:	2300      	movs	r3, #0
 8018694:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801869c:	78fa      	ldrb	r2, [r7, #3]
 801869e:	4611      	mov	r1, r2
 80186a0:	4618      	mov	r0, r3
 80186a2:	f7f0 feed 	bl	8009480 <HAL_PCD_EP_ClrStall>
 80186a6:	4603      	mov	r3, r0
 80186a8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80186aa:	7bfb      	ldrb	r3, [r7, #15]
 80186ac:	4618      	mov	r0, r3
 80186ae:	f000 f8ab 	bl	8018808 <USBD_Get_USB_Status>
 80186b2:	4603      	mov	r3, r0
 80186b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80186b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80186b8:	4618      	mov	r0, r3
 80186ba:	3710      	adds	r7, #16
 80186bc:	46bd      	mov	sp, r7
 80186be:	bd80      	pop	{r7, pc}

080186c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186c0:	b480      	push	{r7}
 80186c2:	b085      	sub	sp, #20
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
 80186c8:	460b      	mov	r3, r1
 80186ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80186d2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80186d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	da0b      	bge.n	80186f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80186dc:	78fb      	ldrb	r3, [r7, #3]
 80186de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80186e2:	68f9      	ldr	r1, [r7, #12]
 80186e4:	4613      	mov	r3, r2
 80186e6:	00db      	lsls	r3, r3, #3
 80186e8:	1a9b      	subs	r3, r3, r2
 80186ea:	009b      	lsls	r3, r3, #2
 80186ec:	440b      	add	r3, r1
 80186ee:	333e      	adds	r3, #62	; 0x3e
 80186f0:	781b      	ldrb	r3, [r3, #0]
 80186f2:	e00b      	b.n	801870c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80186f4:	78fb      	ldrb	r3, [r7, #3]
 80186f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80186fa:	68f9      	ldr	r1, [r7, #12]
 80186fc:	4613      	mov	r3, r2
 80186fe:	00db      	lsls	r3, r3, #3
 8018700:	1a9b      	subs	r3, r3, r2
 8018702:	009b      	lsls	r3, r3, #2
 8018704:	440b      	add	r3, r1
 8018706:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801870a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801870c:	4618      	mov	r0, r3
 801870e:	3714      	adds	r7, #20
 8018710:	46bd      	mov	sp, r7
 8018712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018716:	4770      	bx	lr

08018718 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b084      	sub	sp, #16
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
 8018720:	460b      	mov	r3, r1
 8018722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018724:	2300      	movs	r3, #0
 8018726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018728:	2300      	movs	r3, #0
 801872a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8018732:	78fa      	ldrb	r2, [r7, #3]
 8018734:	4611      	mov	r1, r2
 8018736:	4618      	mov	r0, r3
 8018738:	f7f0 fcba 	bl	80090b0 <HAL_PCD_SetAddress>
 801873c:	4603      	mov	r3, r0
 801873e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8018740:	7bfb      	ldrb	r3, [r7, #15]
 8018742:	4618      	mov	r0, r3
 8018744:	f000 f860 	bl	8018808 <USBD_Get_USB_Status>
 8018748:	4603      	mov	r3, r0
 801874a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801874c:	7bbb      	ldrb	r3, [r7, #14]
}
 801874e:	4618      	mov	r0, r3
 8018750:	3710      	adds	r7, #16
 8018752:	46bd      	mov	sp, r7
 8018754:	bd80      	pop	{r7, pc}

08018756 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8018756:	b580      	push	{r7, lr}
 8018758:	b086      	sub	sp, #24
 801875a:	af00      	add	r7, sp, #0
 801875c:	60f8      	str	r0, [r7, #12]
 801875e:	607a      	str	r2, [r7, #4]
 8018760:	461a      	mov	r2, r3
 8018762:	460b      	mov	r3, r1
 8018764:	72fb      	strb	r3, [r7, #11]
 8018766:	4613      	mov	r3, r2
 8018768:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801876a:	2300      	movs	r3, #0
 801876c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801876e:	2300      	movs	r3, #0
 8018770:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8018778:	893b      	ldrh	r3, [r7, #8]
 801877a:	7af9      	ldrb	r1, [r7, #11]
 801877c:	687a      	ldr	r2, [r7, #4]
 801877e:	f7f0 fdd1 	bl	8009324 <HAL_PCD_EP_Transmit>
 8018782:	4603      	mov	r3, r0
 8018784:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8018786:	7dfb      	ldrb	r3, [r7, #23]
 8018788:	4618      	mov	r0, r3
 801878a:	f000 f83d 	bl	8018808 <USBD_Get_USB_Status>
 801878e:	4603      	mov	r3, r0
 8018790:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8018792:	7dbb      	ldrb	r3, [r7, #22]
}
 8018794:	4618      	mov	r0, r3
 8018796:	3718      	adds	r7, #24
 8018798:	46bd      	mov	sp, r7
 801879a:	bd80      	pop	{r7, pc}

0801879c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b086      	sub	sp, #24
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	60f8      	str	r0, [r7, #12]
 80187a4:	607a      	str	r2, [r7, #4]
 80187a6:	461a      	mov	r2, r3
 80187a8:	460b      	mov	r3, r1
 80187aa:	72fb      	strb	r3, [r7, #11]
 80187ac:	4613      	mov	r3, r2
 80187ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187b0:	2300      	movs	r3, #0
 80187b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187b4:	2300      	movs	r3, #0
 80187b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80187be:	893b      	ldrh	r3, [r7, #8]
 80187c0:	7af9      	ldrb	r1, [r7, #11]
 80187c2:	687a      	ldr	r2, [r7, #4]
 80187c4:	f7f0 fd4b 	bl	800925e <HAL_PCD_EP_Receive>
 80187c8:	4603      	mov	r3, r0
 80187ca:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80187cc:	7dfb      	ldrb	r3, [r7, #23]
 80187ce:	4618      	mov	r0, r3
 80187d0:	f000 f81a 	bl	8018808 <USBD_Get_USB_Status>
 80187d4:	4603      	mov	r3, r0
 80187d6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80187d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80187da:	4618      	mov	r0, r3
 80187dc:	3718      	adds	r7, #24
 80187de:	46bd      	mov	sp, r7
 80187e0:	bd80      	pop	{r7, pc}

080187e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80187e2:	b580      	push	{r7, lr}
 80187e4:	b082      	sub	sp, #8
 80187e6:	af00      	add	r7, sp, #0
 80187e8:	6078      	str	r0, [r7, #4]
 80187ea:	460b      	mov	r3, r1
 80187ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80187f4:	78fa      	ldrb	r2, [r7, #3]
 80187f6:	4611      	mov	r1, r2
 80187f8:	4618      	mov	r0, r3
 80187fa:	f7f0 fd7b 	bl	80092f4 <HAL_PCD_EP_GetRxCount>
 80187fe:	4603      	mov	r3, r0
}
 8018800:	4618      	mov	r0, r3
 8018802:	3708      	adds	r7, #8
 8018804:	46bd      	mov	sp, r7
 8018806:	bd80      	pop	{r7, pc}

08018808 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018808:	b480      	push	{r7}
 801880a:	b085      	sub	sp, #20
 801880c:	af00      	add	r7, sp, #0
 801880e:	4603      	mov	r3, r0
 8018810:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018812:	2300      	movs	r3, #0
 8018814:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018816:	79fb      	ldrb	r3, [r7, #7]
 8018818:	2b03      	cmp	r3, #3
 801881a:	d817      	bhi.n	801884c <USBD_Get_USB_Status+0x44>
 801881c:	a201      	add	r2, pc, #4	; (adr r2, 8018824 <USBD_Get_USB_Status+0x1c>)
 801881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018822:	bf00      	nop
 8018824:	08018835 	.word	0x08018835
 8018828:	0801883b 	.word	0x0801883b
 801882c:	08018841 	.word	0x08018841
 8018830:	08018847 	.word	0x08018847
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018834:	2300      	movs	r3, #0
 8018836:	73fb      	strb	r3, [r7, #15]
    break;
 8018838:	e00b      	b.n	8018852 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801883a:	2302      	movs	r3, #2
 801883c:	73fb      	strb	r3, [r7, #15]
    break;
 801883e:	e008      	b.n	8018852 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018840:	2301      	movs	r3, #1
 8018842:	73fb      	strb	r3, [r7, #15]
    break;
 8018844:	e005      	b.n	8018852 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018846:	2302      	movs	r3, #2
 8018848:	73fb      	strb	r3, [r7, #15]
    break;
 801884a:	e002      	b.n	8018852 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801884c:	2302      	movs	r3, #2
 801884e:	73fb      	strb	r3, [r7, #15]
    break;
 8018850:	bf00      	nop
  }
  return usb_status;
 8018852:	7bfb      	ldrb	r3, [r7, #15]
}
 8018854:	4618      	mov	r0, r3
 8018856:	3714      	adds	r7, #20
 8018858:	46bd      	mov	sp, r7
 801885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801885e:	4770      	bx	lr

08018860 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018860:	b480      	push	{r7}
 8018862:	b083      	sub	sp, #12
 8018864:	af00      	add	r7, sp, #0
 8018866:	4603      	mov	r3, r0
 8018868:	6039      	str	r1, [r7, #0]
 801886a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801886c:	683b      	ldr	r3, [r7, #0]
 801886e:	2212      	movs	r2, #18
 8018870:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018872:	4b03      	ldr	r3, [pc, #12]	; (8018880 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018874:	4618      	mov	r0, r3
 8018876:	370c      	adds	r7, #12
 8018878:	46bd      	mov	sp, r7
 801887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801887e:	4770      	bx	lr
 8018880:	200001a0 	.word	0x200001a0

08018884 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018884:	b480      	push	{r7}
 8018886:	b083      	sub	sp, #12
 8018888:	af00      	add	r7, sp, #0
 801888a:	4603      	mov	r3, r0
 801888c:	6039      	str	r1, [r7, #0]
 801888e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018890:	683b      	ldr	r3, [r7, #0]
 8018892:	2204      	movs	r2, #4
 8018894:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018896:	4b03      	ldr	r3, [pc, #12]	; (80188a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018898:	4618      	mov	r0, r3
 801889a:	370c      	adds	r7, #12
 801889c:	46bd      	mov	sp, r7
 801889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a2:	4770      	bx	lr
 80188a4:	200001b4 	.word	0x200001b4

080188a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b082      	sub	sp, #8
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	4603      	mov	r3, r0
 80188b0:	6039      	str	r1, [r7, #0]
 80188b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80188b4:	79fb      	ldrb	r3, [r7, #7]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d105      	bne.n	80188c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80188ba:	683a      	ldr	r2, [r7, #0]
 80188bc:	4907      	ldr	r1, [pc, #28]	; (80188dc <USBD_FS_ProductStrDescriptor+0x34>)
 80188be:	4808      	ldr	r0, [pc, #32]	; (80188e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80188c0:	f7f8 fcfe 	bl	80112c0 <USBD_GetString>
 80188c4:	e004      	b.n	80188d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80188c6:	683a      	ldr	r2, [r7, #0]
 80188c8:	4904      	ldr	r1, [pc, #16]	; (80188dc <USBD_FS_ProductStrDescriptor+0x34>)
 80188ca:	4805      	ldr	r0, [pc, #20]	; (80188e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80188cc:	f7f8 fcf8 	bl	80112c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80188d0:	4b02      	ldr	r3, [pc, #8]	; (80188dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80188d2:	4618      	mov	r0, r3
 80188d4:	3708      	adds	r7, #8
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bd80      	pop	{r7, pc}
 80188da:	bf00      	nop
 80188dc:	2000bdc0 	.word	0x2000bdc0
 80188e0:	08020324 	.word	0x08020324

080188e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b082      	sub	sp, #8
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	4603      	mov	r3, r0
 80188ec:	6039      	str	r1, [r7, #0]
 80188ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80188f0:	683a      	ldr	r2, [r7, #0]
 80188f2:	4904      	ldr	r1, [pc, #16]	; (8018904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80188f4:	4804      	ldr	r0, [pc, #16]	; (8018908 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80188f6:	f7f8 fce3 	bl	80112c0 <USBD_GetString>
  return USBD_StrDesc;
 80188fa:	4b02      	ldr	r3, [pc, #8]	; (8018904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80188fc:	4618      	mov	r0, r3
 80188fe:	3708      	adds	r7, #8
 8018900:	46bd      	mov	sp, r7
 8018902:	bd80      	pop	{r7, pc}
 8018904:	2000bdc0 	.word	0x2000bdc0
 8018908:	08020330 	.word	0x08020330

0801890c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b082      	sub	sp, #8
 8018910:	af00      	add	r7, sp, #0
 8018912:	4603      	mov	r3, r0
 8018914:	6039      	str	r1, [r7, #0]
 8018916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018918:	683b      	ldr	r3, [r7, #0]
 801891a:	221a      	movs	r2, #26
 801891c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801891e:	f000 f843 	bl	80189a8 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8018922:	4b02      	ldr	r3, [pc, #8]	; (801892c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018924:	4618      	mov	r0, r3
 8018926:	3708      	adds	r7, #8
 8018928:	46bd      	mov	sp, r7
 801892a:	bd80      	pop	{r7, pc}
 801892c:	200001b8 	.word	0x200001b8

08018930 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b082      	sub	sp, #8
 8018934:	af00      	add	r7, sp, #0
 8018936:	4603      	mov	r3, r0
 8018938:	6039      	str	r1, [r7, #0]
 801893a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801893c:	79fb      	ldrb	r3, [r7, #7]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d105      	bne.n	801894e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018942:	683a      	ldr	r2, [r7, #0]
 8018944:	4907      	ldr	r1, [pc, #28]	; (8018964 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018946:	4808      	ldr	r0, [pc, #32]	; (8018968 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018948:	f7f8 fcba 	bl	80112c0 <USBD_GetString>
 801894c:	e004      	b.n	8018958 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801894e:	683a      	ldr	r2, [r7, #0]
 8018950:	4904      	ldr	r1, [pc, #16]	; (8018964 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018952:	4805      	ldr	r0, [pc, #20]	; (8018968 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018954:	f7f8 fcb4 	bl	80112c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018958:	4b02      	ldr	r3, [pc, #8]	; (8018964 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801895a:	4618      	mov	r0, r3
 801895c:	3708      	adds	r7, #8
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
 8018962:	bf00      	nop
 8018964:	2000bdc0 	.word	0x2000bdc0
 8018968:	08020344 	.word	0x08020344

0801896c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b082      	sub	sp, #8
 8018970:	af00      	add	r7, sp, #0
 8018972:	4603      	mov	r3, r0
 8018974:	6039      	str	r1, [r7, #0]
 8018976:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018978:	79fb      	ldrb	r3, [r7, #7]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d105      	bne.n	801898a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801897e:	683a      	ldr	r2, [r7, #0]
 8018980:	4907      	ldr	r1, [pc, #28]	; (80189a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018982:	4808      	ldr	r0, [pc, #32]	; (80189a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018984:	f7f8 fc9c 	bl	80112c0 <USBD_GetString>
 8018988:	e004      	b.n	8018994 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801898a:	683a      	ldr	r2, [r7, #0]
 801898c:	4904      	ldr	r1, [pc, #16]	; (80189a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801898e:	4805      	ldr	r0, [pc, #20]	; (80189a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018990:	f7f8 fc96 	bl	80112c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018994:	4b02      	ldr	r3, [pc, #8]	; (80189a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018996:	4618      	mov	r0, r3
 8018998:	3708      	adds	r7, #8
 801899a:	46bd      	mov	sp, r7
 801899c:	bd80      	pop	{r7, pc}
 801899e:	bf00      	nop
 80189a0:	2000bdc0 	.word	0x2000bdc0
 80189a4:	08020350 	.word	0x08020350

080189a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b084      	sub	sp, #16
 80189ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80189ae:	4b0f      	ldr	r3, [pc, #60]	; (80189ec <Get_SerialNum+0x44>)
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80189b4:	4b0e      	ldr	r3, [pc, #56]	; (80189f0 <Get_SerialNum+0x48>)
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80189ba:	4b0e      	ldr	r3, [pc, #56]	; (80189f4 <Get_SerialNum+0x4c>)
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80189c0:	68fa      	ldr	r2, [r7, #12]
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	4413      	add	r3, r2
 80189c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d009      	beq.n	80189e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80189ce:	2208      	movs	r2, #8
 80189d0:	4909      	ldr	r1, [pc, #36]	; (80189f8 <Get_SerialNum+0x50>)
 80189d2:	68f8      	ldr	r0, [r7, #12]
 80189d4:	f000 f814 	bl	8018a00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80189d8:	2204      	movs	r2, #4
 80189da:	4908      	ldr	r1, [pc, #32]	; (80189fc <Get_SerialNum+0x54>)
 80189dc:	68b8      	ldr	r0, [r7, #8]
 80189de:	f000 f80f 	bl	8018a00 <IntToUnicode>
  }
}
 80189e2:	bf00      	nop
 80189e4:	3710      	adds	r7, #16
 80189e6:	46bd      	mov	sp, r7
 80189e8:	bd80      	pop	{r7, pc}
 80189ea:	bf00      	nop
 80189ec:	1fff7a10 	.word	0x1fff7a10
 80189f0:	1fff7a14 	.word	0x1fff7a14
 80189f4:	1fff7a18 	.word	0x1fff7a18
 80189f8:	200001ba 	.word	0x200001ba
 80189fc:	200001ca 	.word	0x200001ca

08018a00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018a00:	b480      	push	{r7}
 8018a02:	b087      	sub	sp, #28
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	60f8      	str	r0, [r7, #12]
 8018a08:	60b9      	str	r1, [r7, #8]
 8018a0a:	4613      	mov	r3, r2
 8018a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018a0e:	2300      	movs	r3, #0
 8018a10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018a12:	2300      	movs	r3, #0
 8018a14:	75fb      	strb	r3, [r7, #23]
 8018a16:	e027      	b.n	8018a68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	0f1b      	lsrs	r3, r3, #28
 8018a1c:	2b09      	cmp	r3, #9
 8018a1e:	d80b      	bhi.n	8018a38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	0f1b      	lsrs	r3, r3, #28
 8018a24:	b2da      	uxtb	r2, r3
 8018a26:	7dfb      	ldrb	r3, [r7, #23]
 8018a28:	005b      	lsls	r3, r3, #1
 8018a2a:	4619      	mov	r1, r3
 8018a2c:	68bb      	ldr	r3, [r7, #8]
 8018a2e:	440b      	add	r3, r1
 8018a30:	3230      	adds	r2, #48	; 0x30
 8018a32:	b2d2      	uxtb	r2, r2
 8018a34:	701a      	strb	r2, [r3, #0]
 8018a36:	e00a      	b.n	8018a4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	0f1b      	lsrs	r3, r3, #28
 8018a3c:	b2da      	uxtb	r2, r3
 8018a3e:	7dfb      	ldrb	r3, [r7, #23]
 8018a40:	005b      	lsls	r3, r3, #1
 8018a42:	4619      	mov	r1, r3
 8018a44:	68bb      	ldr	r3, [r7, #8]
 8018a46:	440b      	add	r3, r1
 8018a48:	3237      	adds	r2, #55	; 0x37
 8018a4a:	b2d2      	uxtb	r2, r2
 8018a4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	011b      	lsls	r3, r3, #4
 8018a52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018a54:	7dfb      	ldrb	r3, [r7, #23]
 8018a56:	005b      	lsls	r3, r3, #1
 8018a58:	3301      	adds	r3, #1
 8018a5a:	68ba      	ldr	r2, [r7, #8]
 8018a5c:	4413      	add	r3, r2
 8018a5e:	2200      	movs	r2, #0
 8018a60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018a62:	7dfb      	ldrb	r3, [r7, #23]
 8018a64:	3301      	adds	r3, #1
 8018a66:	75fb      	strb	r3, [r7, #23]
 8018a68:	7dfa      	ldrb	r2, [r7, #23]
 8018a6a:	79fb      	ldrb	r3, [r7, #7]
 8018a6c:	429a      	cmp	r2, r3
 8018a6e:	d3d3      	bcc.n	8018a18 <IntToUnicode+0x18>
  }
}
 8018a70:	bf00      	nop
 8018a72:	371c      	adds	r7, #28
 8018a74:	46bd      	mov	sp, r7
 8018a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a7a:	4770      	bx	lr

08018a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8018a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8018ab4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8018a80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8018a82:	e003      	b.n	8018a8c <LoopCopyDataInit>

08018a84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8018a84:	4b0c      	ldr	r3, [pc, #48]	; (8018ab8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8018a86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8018a88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8018a8a:	3104      	adds	r1, #4

08018a8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8018a8c:	480b      	ldr	r0, [pc, #44]	; (8018abc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8018a8e:	4b0c      	ldr	r3, [pc, #48]	; (8018ac0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8018a90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8018a92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8018a94:	d3f6      	bcc.n	8018a84 <CopyDataInit>
  ldr  r2, =_sbss
 8018a96:	4a0b      	ldr	r2, [pc, #44]	; (8018ac4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8018a98:	e002      	b.n	8018aa0 <LoopFillZerobss>

08018a9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8018a9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8018a9c:	f842 3b04 	str.w	r3, [r2], #4

08018aa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8018aa0:	4b09      	ldr	r3, [pc, #36]	; (8018ac8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8018aa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8018aa4:	d3f9      	bcc.n	8018a9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8018aa6:	f7ff fa89 	bl	8017fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018aaa:	f000 f821 	bl	8018af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8018aae:	f7fe f851 	bl	8016b54 <main>
  bx  lr    
 8018ab2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8018ab4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8018ab8:	08020958 	.word	0x08020958
  ldr  r0, =_sdata
 8018abc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8018ac0:	200003a8 	.word	0x200003a8
  ldr  r2, =_sbss
 8018ac4:	200003a8 	.word	0x200003a8
  ldr  r3, = _ebss
 8018ac8:	2000bfc4 	.word	0x2000bfc4

08018acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018acc:	e7fe      	b.n	8018acc <ADC_IRQHandler>

08018ace <atof>:
 8018ace:	2100      	movs	r1, #0
 8018ad0:	f001 bdde 	b.w	801a690 <strtod>

08018ad4 <atoi>:
 8018ad4:	220a      	movs	r2, #10
 8018ad6:	2100      	movs	r1, #0
 8018ad8:	f001 be7c 	b.w	801a7d4 <strtol>

08018adc <atol>:
 8018adc:	220a      	movs	r2, #10
 8018ade:	2100      	movs	r1, #0
 8018ae0:	f001 be78 	b.w	801a7d4 <strtol>

08018ae4 <__errno>:
 8018ae4:	4b01      	ldr	r3, [pc, #4]	; (8018aec <__errno+0x8>)
 8018ae6:	6818      	ldr	r0, [r3, #0]
 8018ae8:	4770      	bx	lr
 8018aea:	bf00      	nop
 8018aec:	200001d4 	.word	0x200001d4

08018af0 <__libc_init_array>:
 8018af0:	b570      	push	{r4, r5, r6, lr}
 8018af2:	4e0d      	ldr	r6, [pc, #52]	; (8018b28 <__libc_init_array+0x38>)
 8018af4:	4c0d      	ldr	r4, [pc, #52]	; (8018b2c <__libc_init_array+0x3c>)
 8018af6:	1ba4      	subs	r4, r4, r6
 8018af8:	10a4      	asrs	r4, r4, #2
 8018afa:	2500      	movs	r5, #0
 8018afc:	42a5      	cmp	r5, r4
 8018afe:	d109      	bne.n	8018b14 <__libc_init_array+0x24>
 8018b00:	4e0b      	ldr	r6, [pc, #44]	; (8018b30 <__libc_init_array+0x40>)
 8018b02:	4c0c      	ldr	r4, [pc, #48]	; (8018b34 <__libc_init_array+0x44>)
 8018b04:	f006 fcba 	bl	801f47c <_init>
 8018b08:	1ba4      	subs	r4, r4, r6
 8018b0a:	10a4      	asrs	r4, r4, #2
 8018b0c:	2500      	movs	r5, #0
 8018b0e:	42a5      	cmp	r5, r4
 8018b10:	d105      	bne.n	8018b1e <__libc_init_array+0x2e>
 8018b12:	bd70      	pop	{r4, r5, r6, pc}
 8018b14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018b18:	4798      	blx	r3
 8018b1a:	3501      	adds	r5, #1
 8018b1c:	e7ee      	b.n	8018afc <__libc_init_array+0xc>
 8018b1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018b22:	4798      	blx	r3
 8018b24:	3501      	adds	r5, #1
 8018b26:	e7f2      	b.n	8018b0e <__libc_init_array+0x1e>
 8018b28:	08020950 	.word	0x08020950
 8018b2c:	08020950 	.word	0x08020950
 8018b30:	08020950 	.word	0x08020950
 8018b34:	08020954 	.word	0x08020954

08018b38 <malloc>:
 8018b38:	4b02      	ldr	r3, [pc, #8]	; (8018b44 <malloc+0xc>)
 8018b3a:	4601      	mov	r1, r0
 8018b3c:	6818      	ldr	r0, [r3, #0]
 8018b3e:	f000 b86d 	b.w	8018c1c <_malloc_r>
 8018b42:	bf00      	nop
 8018b44:	200001d4 	.word	0x200001d4

08018b48 <free>:
 8018b48:	4b02      	ldr	r3, [pc, #8]	; (8018b54 <free+0xc>)
 8018b4a:	4601      	mov	r1, r0
 8018b4c:	6818      	ldr	r0, [r3, #0]
 8018b4e:	f000 b817 	b.w	8018b80 <_free_r>
 8018b52:	bf00      	nop
 8018b54:	200001d4 	.word	0x200001d4

08018b58 <memcpy>:
 8018b58:	b510      	push	{r4, lr}
 8018b5a:	1e43      	subs	r3, r0, #1
 8018b5c:	440a      	add	r2, r1
 8018b5e:	4291      	cmp	r1, r2
 8018b60:	d100      	bne.n	8018b64 <memcpy+0xc>
 8018b62:	bd10      	pop	{r4, pc}
 8018b64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018b6c:	e7f7      	b.n	8018b5e <memcpy+0x6>

08018b6e <memset>:
 8018b6e:	4402      	add	r2, r0
 8018b70:	4603      	mov	r3, r0
 8018b72:	4293      	cmp	r3, r2
 8018b74:	d100      	bne.n	8018b78 <memset+0xa>
 8018b76:	4770      	bx	lr
 8018b78:	f803 1b01 	strb.w	r1, [r3], #1
 8018b7c:	e7f9      	b.n	8018b72 <memset+0x4>
	...

08018b80 <_free_r>:
 8018b80:	b538      	push	{r3, r4, r5, lr}
 8018b82:	4605      	mov	r5, r0
 8018b84:	2900      	cmp	r1, #0
 8018b86:	d045      	beq.n	8018c14 <_free_r+0x94>
 8018b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b8c:	1f0c      	subs	r4, r1, #4
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	bfb8      	it	lt
 8018b92:	18e4      	addlt	r4, r4, r3
 8018b94:	f002 ffe4 	bl	801bb60 <__malloc_lock>
 8018b98:	4a1f      	ldr	r2, [pc, #124]	; (8018c18 <_free_r+0x98>)
 8018b9a:	6813      	ldr	r3, [r2, #0]
 8018b9c:	4610      	mov	r0, r2
 8018b9e:	b933      	cbnz	r3, 8018bae <_free_r+0x2e>
 8018ba0:	6063      	str	r3, [r4, #4]
 8018ba2:	6014      	str	r4, [r2, #0]
 8018ba4:	4628      	mov	r0, r5
 8018ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018baa:	f002 bfda 	b.w	801bb62 <__malloc_unlock>
 8018bae:	42a3      	cmp	r3, r4
 8018bb0:	d90c      	bls.n	8018bcc <_free_r+0x4c>
 8018bb2:	6821      	ldr	r1, [r4, #0]
 8018bb4:	1862      	adds	r2, r4, r1
 8018bb6:	4293      	cmp	r3, r2
 8018bb8:	bf04      	itt	eq
 8018bba:	681a      	ldreq	r2, [r3, #0]
 8018bbc:	685b      	ldreq	r3, [r3, #4]
 8018bbe:	6063      	str	r3, [r4, #4]
 8018bc0:	bf04      	itt	eq
 8018bc2:	1852      	addeq	r2, r2, r1
 8018bc4:	6022      	streq	r2, [r4, #0]
 8018bc6:	6004      	str	r4, [r0, #0]
 8018bc8:	e7ec      	b.n	8018ba4 <_free_r+0x24>
 8018bca:	4613      	mov	r3, r2
 8018bcc:	685a      	ldr	r2, [r3, #4]
 8018bce:	b10a      	cbz	r2, 8018bd4 <_free_r+0x54>
 8018bd0:	42a2      	cmp	r2, r4
 8018bd2:	d9fa      	bls.n	8018bca <_free_r+0x4a>
 8018bd4:	6819      	ldr	r1, [r3, #0]
 8018bd6:	1858      	adds	r0, r3, r1
 8018bd8:	42a0      	cmp	r0, r4
 8018bda:	d10b      	bne.n	8018bf4 <_free_r+0x74>
 8018bdc:	6820      	ldr	r0, [r4, #0]
 8018bde:	4401      	add	r1, r0
 8018be0:	1858      	adds	r0, r3, r1
 8018be2:	4282      	cmp	r2, r0
 8018be4:	6019      	str	r1, [r3, #0]
 8018be6:	d1dd      	bne.n	8018ba4 <_free_r+0x24>
 8018be8:	6810      	ldr	r0, [r2, #0]
 8018bea:	6852      	ldr	r2, [r2, #4]
 8018bec:	605a      	str	r2, [r3, #4]
 8018bee:	4401      	add	r1, r0
 8018bf0:	6019      	str	r1, [r3, #0]
 8018bf2:	e7d7      	b.n	8018ba4 <_free_r+0x24>
 8018bf4:	d902      	bls.n	8018bfc <_free_r+0x7c>
 8018bf6:	230c      	movs	r3, #12
 8018bf8:	602b      	str	r3, [r5, #0]
 8018bfa:	e7d3      	b.n	8018ba4 <_free_r+0x24>
 8018bfc:	6820      	ldr	r0, [r4, #0]
 8018bfe:	1821      	adds	r1, r4, r0
 8018c00:	428a      	cmp	r2, r1
 8018c02:	bf04      	itt	eq
 8018c04:	6811      	ldreq	r1, [r2, #0]
 8018c06:	6852      	ldreq	r2, [r2, #4]
 8018c08:	6062      	str	r2, [r4, #4]
 8018c0a:	bf04      	itt	eq
 8018c0c:	1809      	addeq	r1, r1, r0
 8018c0e:	6021      	streq	r1, [r4, #0]
 8018c10:	605c      	str	r4, [r3, #4]
 8018c12:	e7c7      	b.n	8018ba4 <_free_r+0x24>
 8018c14:	bd38      	pop	{r3, r4, r5, pc}
 8018c16:	bf00      	nop
 8018c18:	200019b8 	.word	0x200019b8

08018c1c <_malloc_r>:
 8018c1c:	b570      	push	{r4, r5, r6, lr}
 8018c1e:	1ccd      	adds	r5, r1, #3
 8018c20:	f025 0503 	bic.w	r5, r5, #3
 8018c24:	3508      	adds	r5, #8
 8018c26:	2d0c      	cmp	r5, #12
 8018c28:	bf38      	it	cc
 8018c2a:	250c      	movcc	r5, #12
 8018c2c:	2d00      	cmp	r5, #0
 8018c2e:	4606      	mov	r6, r0
 8018c30:	db01      	blt.n	8018c36 <_malloc_r+0x1a>
 8018c32:	42a9      	cmp	r1, r5
 8018c34:	d903      	bls.n	8018c3e <_malloc_r+0x22>
 8018c36:	230c      	movs	r3, #12
 8018c38:	6033      	str	r3, [r6, #0]
 8018c3a:	2000      	movs	r0, #0
 8018c3c:	bd70      	pop	{r4, r5, r6, pc}
 8018c3e:	f002 ff8f 	bl	801bb60 <__malloc_lock>
 8018c42:	4a21      	ldr	r2, [pc, #132]	; (8018cc8 <_malloc_r+0xac>)
 8018c44:	6814      	ldr	r4, [r2, #0]
 8018c46:	4621      	mov	r1, r4
 8018c48:	b991      	cbnz	r1, 8018c70 <_malloc_r+0x54>
 8018c4a:	4c20      	ldr	r4, [pc, #128]	; (8018ccc <_malloc_r+0xb0>)
 8018c4c:	6823      	ldr	r3, [r4, #0]
 8018c4e:	b91b      	cbnz	r3, 8018c58 <_malloc_r+0x3c>
 8018c50:	4630      	mov	r0, r6
 8018c52:	f000 fe7b 	bl	801994c <_sbrk_r>
 8018c56:	6020      	str	r0, [r4, #0]
 8018c58:	4629      	mov	r1, r5
 8018c5a:	4630      	mov	r0, r6
 8018c5c:	f000 fe76 	bl	801994c <_sbrk_r>
 8018c60:	1c43      	adds	r3, r0, #1
 8018c62:	d124      	bne.n	8018cae <_malloc_r+0x92>
 8018c64:	230c      	movs	r3, #12
 8018c66:	6033      	str	r3, [r6, #0]
 8018c68:	4630      	mov	r0, r6
 8018c6a:	f002 ff7a 	bl	801bb62 <__malloc_unlock>
 8018c6e:	e7e4      	b.n	8018c3a <_malloc_r+0x1e>
 8018c70:	680b      	ldr	r3, [r1, #0]
 8018c72:	1b5b      	subs	r3, r3, r5
 8018c74:	d418      	bmi.n	8018ca8 <_malloc_r+0x8c>
 8018c76:	2b0b      	cmp	r3, #11
 8018c78:	d90f      	bls.n	8018c9a <_malloc_r+0x7e>
 8018c7a:	600b      	str	r3, [r1, #0]
 8018c7c:	50cd      	str	r5, [r1, r3]
 8018c7e:	18cc      	adds	r4, r1, r3
 8018c80:	4630      	mov	r0, r6
 8018c82:	f002 ff6e 	bl	801bb62 <__malloc_unlock>
 8018c86:	f104 000b 	add.w	r0, r4, #11
 8018c8a:	1d23      	adds	r3, r4, #4
 8018c8c:	f020 0007 	bic.w	r0, r0, #7
 8018c90:	1ac3      	subs	r3, r0, r3
 8018c92:	d0d3      	beq.n	8018c3c <_malloc_r+0x20>
 8018c94:	425a      	negs	r2, r3
 8018c96:	50e2      	str	r2, [r4, r3]
 8018c98:	e7d0      	b.n	8018c3c <_malloc_r+0x20>
 8018c9a:	428c      	cmp	r4, r1
 8018c9c:	684b      	ldr	r3, [r1, #4]
 8018c9e:	bf16      	itet	ne
 8018ca0:	6063      	strne	r3, [r4, #4]
 8018ca2:	6013      	streq	r3, [r2, #0]
 8018ca4:	460c      	movne	r4, r1
 8018ca6:	e7eb      	b.n	8018c80 <_malloc_r+0x64>
 8018ca8:	460c      	mov	r4, r1
 8018caa:	6849      	ldr	r1, [r1, #4]
 8018cac:	e7cc      	b.n	8018c48 <_malloc_r+0x2c>
 8018cae:	1cc4      	adds	r4, r0, #3
 8018cb0:	f024 0403 	bic.w	r4, r4, #3
 8018cb4:	42a0      	cmp	r0, r4
 8018cb6:	d005      	beq.n	8018cc4 <_malloc_r+0xa8>
 8018cb8:	1a21      	subs	r1, r4, r0
 8018cba:	4630      	mov	r0, r6
 8018cbc:	f000 fe46 	bl	801994c <_sbrk_r>
 8018cc0:	3001      	adds	r0, #1
 8018cc2:	d0cf      	beq.n	8018c64 <_malloc_r+0x48>
 8018cc4:	6025      	str	r5, [r4, #0]
 8018cc6:	e7db      	b.n	8018c80 <_malloc_r+0x64>
 8018cc8:	200019b8 	.word	0x200019b8
 8018ccc:	200019bc 	.word	0x200019bc

08018cd0 <__cvt>:
 8018cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018cd4:	ec55 4b10 	vmov	r4, r5, d0
 8018cd8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8018cda:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8018cde:	2d00      	cmp	r5, #0
 8018ce0:	460e      	mov	r6, r1
 8018ce2:	4691      	mov	r9, r2
 8018ce4:	4619      	mov	r1, r3
 8018ce6:	bfb8      	it	lt
 8018ce8:	4622      	movlt	r2, r4
 8018cea:	462b      	mov	r3, r5
 8018cec:	f027 0720 	bic.w	r7, r7, #32
 8018cf0:	bfbb      	ittet	lt
 8018cf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8018cf6:	461d      	movlt	r5, r3
 8018cf8:	2300      	movge	r3, #0
 8018cfa:	232d      	movlt	r3, #45	; 0x2d
 8018cfc:	bfb8      	it	lt
 8018cfe:	4614      	movlt	r4, r2
 8018d00:	2f46      	cmp	r7, #70	; 0x46
 8018d02:	700b      	strb	r3, [r1, #0]
 8018d04:	d004      	beq.n	8018d10 <__cvt+0x40>
 8018d06:	2f45      	cmp	r7, #69	; 0x45
 8018d08:	d100      	bne.n	8018d0c <__cvt+0x3c>
 8018d0a:	3601      	adds	r6, #1
 8018d0c:	2102      	movs	r1, #2
 8018d0e:	e000      	b.n	8018d12 <__cvt+0x42>
 8018d10:	2103      	movs	r1, #3
 8018d12:	ab03      	add	r3, sp, #12
 8018d14:	9301      	str	r3, [sp, #4]
 8018d16:	ab02      	add	r3, sp, #8
 8018d18:	9300      	str	r3, [sp, #0]
 8018d1a:	4632      	mov	r2, r6
 8018d1c:	4653      	mov	r3, sl
 8018d1e:	ec45 4b10 	vmov	d0, r4, r5
 8018d22:	f001 fe19 	bl	801a958 <_dtoa_r>
 8018d26:	2f47      	cmp	r7, #71	; 0x47
 8018d28:	4680      	mov	r8, r0
 8018d2a:	d102      	bne.n	8018d32 <__cvt+0x62>
 8018d2c:	f019 0f01 	tst.w	r9, #1
 8018d30:	d026      	beq.n	8018d80 <__cvt+0xb0>
 8018d32:	2f46      	cmp	r7, #70	; 0x46
 8018d34:	eb08 0906 	add.w	r9, r8, r6
 8018d38:	d111      	bne.n	8018d5e <__cvt+0x8e>
 8018d3a:	f898 3000 	ldrb.w	r3, [r8]
 8018d3e:	2b30      	cmp	r3, #48	; 0x30
 8018d40:	d10a      	bne.n	8018d58 <__cvt+0x88>
 8018d42:	2200      	movs	r2, #0
 8018d44:	2300      	movs	r3, #0
 8018d46:	4620      	mov	r0, r4
 8018d48:	4629      	mov	r1, r5
 8018d4a:	f7e7 fecd 	bl	8000ae8 <__aeabi_dcmpeq>
 8018d4e:	b918      	cbnz	r0, 8018d58 <__cvt+0x88>
 8018d50:	f1c6 0601 	rsb	r6, r6, #1
 8018d54:	f8ca 6000 	str.w	r6, [sl]
 8018d58:	f8da 3000 	ldr.w	r3, [sl]
 8018d5c:	4499      	add	r9, r3
 8018d5e:	2200      	movs	r2, #0
 8018d60:	2300      	movs	r3, #0
 8018d62:	4620      	mov	r0, r4
 8018d64:	4629      	mov	r1, r5
 8018d66:	f7e7 febf 	bl	8000ae8 <__aeabi_dcmpeq>
 8018d6a:	b938      	cbnz	r0, 8018d7c <__cvt+0xac>
 8018d6c:	2230      	movs	r2, #48	; 0x30
 8018d6e:	9b03      	ldr	r3, [sp, #12]
 8018d70:	454b      	cmp	r3, r9
 8018d72:	d205      	bcs.n	8018d80 <__cvt+0xb0>
 8018d74:	1c59      	adds	r1, r3, #1
 8018d76:	9103      	str	r1, [sp, #12]
 8018d78:	701a      	strb	r2, [r3, #0]
 8018d7a:	e7f8      	b.n	8018d6e <__cvt+0x9e>
 8018d7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8018d80:	9b03      	ldr	r3, [sp, #12]
 8018d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018d84:	eba3 0308 	sub.w	r3, r3, r8
 8018d88:	4640      	mov	r0, r8
 8018d8a:	6013      	str	r3, [r2, #0]
 8018d8c:	b004      	add	sp, #16
 8018d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018d92 <__exponent>:
 8018d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d94:	2900      	cmp	r1, #0
 8018d96:	4604      	mov	r4, r0
 8018d98:	bfba      	itte	lt
 8018d9a:	4249      	neglt	r1, r1
 8018d9c:	232d      	movlt	r3, #45	; 0x2d
 8018d9e:	232b      	movge	r3, #43	; 0x2b
 8018da0:	2909      	cmp	r1, #9
 8018da2:	f804 2b02 	strb.w	r2, [r4], #2
 8018da6:	7043      	strb	r3, [r0, #1]
 8018da8:	dd20      	ble.n	8018dec <__exponent+0x5a>
 8018daa:	f10d 0307 	add.w	r3, sp, #7
 8018dae:	461f      	mov	r7, r3
 8018db0:	260a      	movs	r6, #10
 8018db2:	fb91 f5f6 	sdiv	r5, r1, r6
 8018db6:	fb06 1115 	mls	r1, r6, r5, r1
 8018dba:	3130      	adds	r1, #48	; 0x30
 8018dbc:	2d09      	cmp	r5, #9
 8018dbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018dc2:	f103 32ff 	add.w	r2, r3, #4294967295
 8018dc6:	4629      	mov	r1, r5
 8018dc8:	dc09      	bgt.n	8018dde <__exponent+0x4c>
 8018dca:	3130      	adds	r1, #48	; 0x30
 8018dcc:	3b02      	subs	r3, #2
 8018dce:	f802 1c01 	strb.w	r1, [r2, #-1]
 8018dd2:	42bb      	cmp	r3, r7
 8018dd4:	4622      	mov	r2, r4
 8018dd6:	d304      	bcc.n	8018de2 <__exponent+0x50>
 8018dd8:	1a10      	subs	r0, r2, r0
 8018dda:	b003      	add	sp, #12
 8018ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018dde:	4613      	mov	r3, r2
 8018de0:	e7e7      	b.n	8018db2 <__exponent+0x20>
 8018de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018de6:	f804 2b01 	strb.w	r2, [r4], #1
 8018dea:	e7f2      	b.n	8018dd2 <__exponent+0x40>
 8018dec:	2330      	movs	r3, #48	; 0x30
 8018dee:	4419      	add	r1, r3
 8018df0:	7083      	strb	r3, [r0, #2]
 8018df2:	1d02      	adds	r2, r0, #4
 8018df4:	70c1      	strb	r1, [r0, #3]
 8018df6:	e7ef      	b.n	8018dd8 <__exponent+0x46>

08018df8 <_printf_float>:
 8018df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dfc:	b08d      	sub	sp, #52	; 0x34
 8018dfe:	460c      	mov	r4, r1
 8018e00:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8018e04:	4616      	mov	r6, r2
 8018e06:	461f      	mov	r7, r3
 8018e08:	4605      	mov	r5, r0
 8018e0a:	f002 fe89 	bl	801bb20 <_localeconv_r>
 8018e0e:	6803      	ldr	r3, [r0, #0]
 8018e10:	9304      	str	r3, [sp, #16]
 8018e12:	4618      	mov	r0, r3
 8018e14:	f7e7 f9e6 	bl	80001e4 <strlen>
 8018e18:	2300      	movs	r3, #0
 8018e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8018e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8018e20:	9005      	str	r0, [sp, #20]
 8018e22:	3307      	adds	r3, #7
 8018e24:	f023 0307 	bic.w	r3, r3, #7
 8018e28:	f103 0208 	add.w	r2, r3, #8
 8018e2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8018e30:	f8d4 b000 	ldr.w	fp, [r4]
 8018e34:	f8c8 2000 	str.w	r2, [r8]
 8018e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e3c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8018e40:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8018e44:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018e48:	9307      	str	r3, [sp, #28]
 8018e4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8018e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8018e52:	4ba7      	ldr	r3, [pc, #668]	; (80190f0 <_printf_float+0x2f8>)
 8018e54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018e58:	f7e7 fe78 	bl	8000b4c <__aeabi_dcmpun>
 8018e5c:	bb70      	cbnz	r0, 8018ebc <_printf_float+0xc4>
 8018e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8018e62:	4ba3      	ldr	r3, [pc, #652]	; (80190f0 <_printf_float+0x2f8>)
 8018e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018e68:	f7e7 fe52 	bl	8000b10 <__aeabi_dcmple>
 8018e6c:	bb30      	cbnz	r0, 8018ebc <_printf_float+0xc4>
 8018e6e:	2200      	movs	r2, #0
 8018e70:	2300      	movs	r3, #0
 8018e72:	4640      	mov	r0, r8
 8018e74:	4649      	mov	r1, r9
 8018e76:	f7e7 fe41 	bl	8000afc <__aeabi_dcmplt>
 8018e7a:	b110      	cbz	r0, 8018e82 <_printf_float+0x8a>
 8018e7c:	232d      	movs	r3, #45	; 0x2d
 8018e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018e82:	4a9c      	ldr	r2, [pc, #624]	; (80190f4 <_printf_float+0x2fc>)
 8018e84:	4b9c      	ldr	r3, [pc, #624]	; (80190f8 <_printf_float+0x300>)
 8018e86:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8018e8a:	bf8c      	ite	hi
 8018e8c:	4690      	movhi	r8, r2
 8018e8e:	4698      	movls	r8, r3
 8018e90:	2303      	movs	r3, #3
 8018e92:	f02b 0204 	bic.w	r2, fp, #4
 8018e96:	6123      	str	r3, [r4, #16]
 8018e98:	6022      	str	r2, [r4, #0]
 8018e9a:	f04f 0900 	mov.w	r9, #0
 8018e9e:	9700      	str	r7, [sp, #0]
 8018ea0:	4633      	mov	r3, r6
 8018ea2:	aa0b      	add	r2, sp, #44	; 0x2c
 8018ea4:	4621      	mov	r1, r4
 8018ea6:	4628      	mov	r0, r5
 8018ea8:	f000 f9e6 	bl	8019278 <_printf_common>
 8018eac:	3001      	adds	r0, #1
 8018eae:	f040 808d 	bne.w	8018fcc <_printf_float+0x1d4>
 8018eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8018eb6:	b00d      	add	sp, #52	; 0x34
 8018eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ebc:	4642      	mov	r2, r8
 8018ebe:	464b      	mov	r3, r9
 8018ec0:	4640      	mov	r0, r8
 8018ec2:	4649      	mov	r1, r9
 8018ec4:	f7e7 fe42 	bl	8000b4c <__aeabi_dcmpun>
 8018ec8:	b110      	cbz	r0, 8018ed0 <_printf_float+0xd8>
 8018eca:	4a8c      	ldr	r2, [pc, #560]	; (80190fc <_printf_float+0x304>)
 8018ecc:	4b8c      	ldr	r3, [pc, #560]	; (8019100 <_printf_float+0x308>)
 8018ece:	e7da      	b.n	8018e86 <_printf_float+0x8e>
 8018ed0:	6861      	ldr	r1, [r4, #4]
 8018ed2:	1c4b      	adds	r3, r1, #1
 8018ed4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8018ed8:	a80a      	add	r0, sp, #40	; 0x28
 8018eda:	d13e      	bne.n	8018f5a <_printf_float+0x162>
 8018edc:	2306      	movs	r3, #6
 8018ede:	6063      	str	r3, [r4, #4]
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8018ee6:	ab09      	add	r3, sp, #36	; 0x24
 8018ee8:	9300      	str	r3, [sp, #0]
 8018eea:	ec49 8b10 	vmov	d0, r8, r9
 8018eee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018ef2:	6022      	str	r2, [r4, #0]
 8018ef4:	f8cd a004 	str.w	sl, [sp, #4]
 8018ef8:	6861      	ldr	r1, [r4, #4]
 8018efa:	4628      	mov	r0, r5
 8018efc:	f7ff fee8 	bl	8018cd0 <__cvt>
 8018f00:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8018f04:	2b47      	cmp	r3, #71	; 0x47
 8018f06:	4680      	mov	r8, r0
 8018f08:	d109      	bne.n	8018f1e <_printf_float+0x126>
 8018f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f0c:	1cd8      	adds	r0, r3, #3
 8018f0e:	db02      	blt.n	8018f16 <_printf_float+0x11e>
 8018f10:	6862      	ldr	r2, [r4, #4]
 8018f12:	4293      	cmp	r3, r2
 8018f14:	dd47      	ble.n	8018fa6 <_printf_float+0x1ae>
 8018f16:	f1aa 0a02 	sub.w	sl, sl, #2
 8018f1a:	fa5f fa8a 	uxtb.w	sl, sl
 8018f1e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8018f22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018f24:	d824      	bhi.n	8018f70 <_printf_float+0x178>
 8018f26:	3901      	subs	r1, #1
 8018f28:	4652      	mov	r2, sl
 8018f2a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018f2e:	9109      	str	r1, [sp, #36]	; 0x24
 8018f30:	f7ff ff2f 	bl	8018d92 <__exponent>
 8018f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f36:	1813      	adds	r3, r2, r0
 8018f38:	2a01      	cmp	r2, #1
 8018f3a:	4681      	mov	r9, r0
 8018f3c:	6123      	str	r3, [r4, #16]
 8018f3e:	dc02      	bgt.n	8018f46 <_printf_float+0x14e>
 8018f40:	6822      	ldr	r2, [r4, #0]
 8018f42:	07d1      	lsls	r1, r2, #31
 8018f44:	d501      	bpl.n	8018f4a <_printf_float+0x152>
 8018f46:	3301      	adds	r3, #1
 8018f48:	6123      	str	r3, [r4, #16]
 8018f4a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d0a5      	beq.n	8018e9e <_printf_float+0xa6>
 8018f52:	232d      	movs	r3, #45	; 0x2d
 8018f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018f58:	e7a1      	b.n	8018e9e <_printf_float+0xa6>
 8018f5a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8018f5e:	f000 8177 	beq.w	8019250 <_printf_float+0x458>
 8018f62:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8018f66:	d1bb      	bne.n	8018ee0 <_printf_float+0xe8>
 8018f68:	2900      	cmp	r1, #0
 8018f6a:	d1b9      	bne.n	8018ee0 <_printf_float+0xe8>
 8018f6c:	2301      	movs	r3, #1
 8018f6e:	e7b6      	b.n	8018ede <_printf_float+0xe6>
 8018f70:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8018f74:	d119      	bne.n	8018faa <_printf_float+0x1b2>
 8018f76:	2900      	cmp	r1, #0
 8018f78:	6863      	ldr	r3, [r4, #4]
 8018f7a:	dd0c      	ble.n	8018f96 <_printf_float+0x19e>
 8018f7c:	6121      	str	r1, [r4, #16]
 8018f7e:	b913      	cbnz	r3, 8018f86 <_printf_float+0x18e>
 8018f80:	6822      	ldr	r2, [r4, #0]
 8018f82:	07d2      	lsls	r2, r2, #31
 8018f84:	d502      	bpl.n	8018f8c <_printf_float+0x194>
 8018f86:	3301      	adds	r3, #1
 8018f88:	440b      	add	r3, r1
 8018f8a:	6123      	str	r3, [r4, #16]
 8018f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8018f90:	f04f 0900 	mov.w	r9, #0
 8018f94:	e7d9      	b.n	8018f4a <_printf_float+0x152>
 8018f96:	b913      	cbnz	r3, 8018f9e <_printf_float+0x1a6>
 8018f98:	6822      	ldr	r2, [r4, #0]
 8018f9a:	07d0      	lsls	r0, r2, #31
 8018f9c:	d501      	bpl.n	8018fa2 <_printf_float+0x1aa>
 8018f9e:	3302      	adds	r3, #2
 8018fa0:	e7f3      	b.n	8018f8a <_printf_float+0x192>
 8018fa2:	2301      	movs	r3, #1
 8018fa4:	e7f1      	b.n	8018f8a <_printf_float+0x192>
 8018fa6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8018faa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8018fae:	4293      	cmp	r3, r2
 8018fb0:	db05      	blt.n	8018fbe <_printf_float+0x1c6>
 8018fb2:	6822      	ldr	r2, [r4, #0]
 8018fb4:	6123      	str	r3, [r4, #16]
 8018fb6:	07d1      	lsls	r1, r2, #31
 8018fb8:	d5e8      	bpl.n	8018f8c <_printf_float+0x194>
 8018fba:	3301      	adds	r3, #1
 8018fbc:	e7e5      	b.n	8018f8a <_printf_float+0x192>
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	bfd4      	ite	le
 8018fc2:	f1c3 0302 	rsble	r3, r3, #2
 8018fc6:	2301      	movgt	r3, #1
 8018fc8:	4413      	add	r3, r2
 8018fca:	e7de      	b.n	8018f8a <_printf_float+0x192>
 8018fcc:	6823      	ldr	r3, [r4, #0]
 8018fce:	055a      	lsls	r2, r3, #21
 8018fd0:	d407      	bmi.n	8018fe2 <_printf_float+0x1ea>
 8018fd2:	6923      	ldr	r3, [r4, #16]
 8018fd4:	4642      	mov	r2, r8
 8018fd6:	4631      	mov	r1, r6
 8018fd8:	4628      	mov	r0, r5
 8018fda:	47b8      	blx	r7
 8018fdc:	3001      	adds	r0, #1
 8018fde:	d12b      	bne.n	8019038 <_printf_float+0x240>
 8018fe0:	e767      	b.n	8018eb2 <_printf_float+0xba>
 8018fe2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8018fe6:	f240 80dc 	bls.w	80191a2 <_printf_float+0x3aa>
 8018fea:	2200      	movs	r2, #0
 8018fec:	2300      	movs	r3, #0
 8018fee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018ff2:	f7e7 fd79 	bl	8000ae8 <__aeabi_dcmpeq>
 8018ff6:	2800      	cmp	r0, #0
 8018ff8:	d033      	beq.n	8019062 <_printf_float+0x26a>
 8018ffa:	2301      	movs	r3, #1
 8018ffc:	4a41      	ldr	r2, [pc, #260]	; (8019104 <_printf_float+0x30c>)
 8018ffe:	4631      	mov	r1, r6
 8019000:	4628      	mov	r0, r5
 8019002:	47b8      	blx	r7
 8019004:	3001      	adds	r0, #1
 8019006:	f43f af54 	beq.w	8018eb2 <_printf_float+0xba>
 801900a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801900e:	429a      	cmp	r2, r3
 8019010:	db02      	blt.n	8019018 <_printf_float+0x220>
 8019012:	6823      	ldr	r3, [r4, #0]
 8019014:	07d8      	lsls	r0, r3, #31
 8019016:	d50f      	bpl.n	8019038 <_printf_float+0x240>
 8019018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801901c:	4631      	mov	r1, r6
 801901e:	4628      	mov	r0, r5
 8019020:	47b8      	blx	r7
 8019022:	3001      	adds	r0, #1
 8019024:	f43f af45 	beq.w	8018eb2 <_printf_float+0xba>
 8019028:	f04f 0800 	mov.w	r8, #0
 801902c:	f104 091a 	add.w	r9, r4, #26
 8019030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019032:	3b01      	subs	r3, #1
 8019034:	4543      	cmp	r3, r8
 8019036:	dc09      	bgt.n	801904c <_printf_float+0x254>
 8019038:	6823      	ldr	r3, [r4, #0]
 801903a:	079b      	lsls	r3, r3, #30
 801903c:	f100 8103 	bmi.w	8019246 <_printf_float+0x44e>
 8019040:	68e0      	ldr	r0, [r4, #12]
 8019042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019044:	4298      	cmp	r0, r3
 8019046:	bfb8      	it	lt
 8019048:	4618      	movlt	r0, r3
 801904a:	e734      	b.n	8018eb6 <_printf_float+0xbe>
 801904c:	2301      	movs	r3, #1
 801904e:	464a      	mov	r2, r9
 8019050:	4631      	mov	r1, r6
 8019052:	4628      	mov	r0, r5
 8019054:	47b8      	blx	r7
 8019056:	3001      	adds	r0, #1
 8019058:	f43f af2b 	beq.w	8018eb2 <_printf_float+0xba>
 801905c:	f108 0801 	add.w	r8, r8, #1
 8019060:	e7e6      	b.n	8019030 <_printf_float+0x238>
 8019062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019064:	2b00      	cmp	r3, #0
 8019066:	dc2b      	bgt.n	80190c0 <_printf_float+0x2c8>
 8019068:	2301      	movs	r3, #1
 801906a:	4a26      	ldr	r2, [pc, #152]	; (8019104 <_printf_float+0x30c>)
 801906c:	4631      	mov	r1, r6
 801906e:	4628      	mov	r0, r5
 8019070:	47b8      	blx	r7
 8019072:	3001      	adds	r0, #1
 8019074:	f43f af1d 	beq.w	8018eb2 <_printf_float+0xba>
 8019078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801907a:	b923      	cbnz	r3, 8019086 <_printf_float+0x28e>
 801907c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801907e:	b913      	cbnz	r3, 8019086 <_printf_float+0x28e>
 8019080:	6823      	ldr	r3, [r4, #0]
 8019082:	07d9      	lsls	r1, r3, #31
 8019084:	d5d8      	bpl.n	8019038 <_printf_float+0x240>
 8019086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801908a:	4631      	mov	r1, r6
 801908c:	4628      	mov	r0, r5
 801908e:	47b8      	blx	r7
 8019090:	3001      	adds	r0, #1
 8019092:	f43f af0e 	beq.w	8018eb2 <_printf_float+0xba>
 8019096:	f04f 0900 	mov.w	r9, #0
 801909a:	f104 0a1a 	add.w	sl, r4, #26
 801909e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190a0:	425b      	negs	r3, r3
 80190a2:	454b      	cmp	r3, r9
 80190a4:	dc01      	bgt.n	80190aa <_printf_float+0x2b2>
 80190a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190a8:	e794      	b.n	8018fd4 <_printf_float+0x1dc>
 80190aa:	2301      	movs	r3, #1
 80190ac:	4652      	mov	r2, sl
 80190ae:	4631      	mov	r1, r6
 80190b0:	4628      	mov	r0, r5
 80190b2:	47b8      	blx	r7
 80190b4:	3001      	adds	r0, #1
 80190b6:	f43f aefc 	beq.w	8018eb2 <_printf_float+0xba>
 80190ba:	f109 0901 	add.w	r9, r9, #1
 80190be:	e7ee      	b.n	801909e <_printf_float+0x2a6>
 80190c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80190c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80190c4:	429a      	cmp	r2, r3
 80190c6:	bfa8      	it	ge
 80190c8:	461a      	movge	r2, r3
 80190ca:	2a00      	cmp	r2, #0
 80190cc:	4691      	mov	r9, r2
 80190ce:	dd07      	ble.n	80190e0 <_printf_float+0x2e8>
 80190d0:	4613      	mov	r3, r2
 80190d2:	4631      	mov	r1, r6
 80190d4:	4642      	mov	r2, r8
 80190d6:	4628      	mov	r0, r5
 80190d8:	47b8      	blx	r7
 80190da:	3001      	adds	r0, #1
 80190dc:	f43f aee9 	beq.w	8018eb2 <_printf_float+0xba>
 80190e0:	f104 031a 	add.w	r3, r4, #26
 80190e4:	f04f 0b00 	mov.w	fp, #0
 80190e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80190ec:	9306      	str	r3, [sp, #24]
 80190ee:	e015      	b.n	801911c <_printf_float+0x324>
 80190f0:	7fefffff 	.word	0x7fefffff
 80190f4:	08020418 	.word	0x08020418
 80190f8:	08020414 	.word	0x08020414
 80190fc:	08020420 	.word	0x08020420
 8019100:	0802041c 	.word	0x0802041c
 8019104:	08020424 	.word	0x08020424
 8019108:	2301      	movs	r3, #1
 801910a:	9a06      	ldr	r2, [sp, #24]
 801910c:	4631      	mov	r1, r6
 801910e:	4628      	mov	r0, r5
 8019110:	47b8      	blx	r7
 8019112:	3001      	adds	r0, #1
 8019114:	f43f aecd 	beq.w	8018eb2 <_printf_float+0xba>
 8019118:	f10b 0b01 	add.w	fp, fp, #1
 801911c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8019120:	ebaa 0309 	sub.w	r3, sl, r9
 8019124:	455b      	cmp	r3, fp
 8019126:	dcef      	bgt.n	8019108 <_printf_float+0x310>
 8019128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801912c:	429a      	cmp	r2, r3
 801912e:	44d0      	add	r8, sl
 8019130:	db15      	blt.n	801915e <_printf_float+0x366>
 8019132:	6823      	ldr	r3, [r4, #0]
 8019134:	07da      	lsls	r2, r3, #31
 8019136:	d412      	bmi.n	801915e <_printf_float+0x366>
 8019138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801913a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801913c:	eba3 020a 	sub.w	r2, r3, sl
 8019140:	eba3 0a01 	sub.w	sl, r3, r1
 8019144:	4592      	cmp	sl, r2
 8019146:	bfa8      	it	ge
 8019148:	4692      	movge	sl, r2
 801914a:	f1ba 0f00 	cmp.w	sl, #0
 801914e:	dc0e      	bgt.n	801916e <_printf_float+0x376>
 8019150:	f04f 0800 	mov.w	r8, #0
 8019154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019158:	f104 091a 	add.w	r9, r4, #26
 801915c:	e019      	b.n	8019192 <_printf_float+0x39a>
 801915e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019162:	4631      	mov	r1, r6
 8019164:	4628      	mov	r0, r5
 8019166:	47b8      	blx	r7
 8019168:	3001      	adds	r0, #1
 801916a:	d1e5      	bne.n	8019138 <_printf_float+0x340>
 801916c:	e6a1      	b.n	8018eb2 <_printf_float+0xba>
 801916e:	4653      	mov	r3, sl
 8019170:	4642      	mov	r2, r8
 8019172:	4631      	mov	r1, r6
 8019174:	4628      	mov	r0, r5
 8019176:	47b8      	blx	r7
 8019178:	3001      	adds	r0, #1
 801917a:	d1e9      	bne.n	8019150 <_printf_float+0x358>
 801917c:	e699      	b.n	8018eb2 <_printf_float+0xba>
 801917e:	2301      	movs	r3, #1
 8019180:	464a      	mov	r2, r9
 8019182:	4631      	mov	r1, r6
 8019184:	4628      	mov	r0, r5
 8019186:	47b8      	blx	r7
 8019188:	3001      	adds	r0, #1
 801918a:	f43f ae92 	beq.w	8018eb2 <_printf_float+0xba>
 801918e:	f108 0801 	add.w	r8, r8, #1
 8019192:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019196:	1a9b      	subs	r3, r3, r2
 8019198:	eba3 030a 	sub.w	r3, r3, sl
 801919c:	4543      	cmp	r3, r8
 801919e:	dcee      	bgt.n	801917e <_printf_float+0x386>
 80191a0:	e74a      	b.n	8019038 <_printf_float+0x240>
 80191a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80191a4:	2a01      	cmp	r2, #1
 80191a6:	dc01      	bgt.n	80191ac <_printf_float+0x3b4>
 80191a8:	07db      	lsls	r3, r3, #31
 80191aa:	d53a      	bpl.n	8019222 <_printf_float+0x42a>
 80191ac:	2301      	movs	r3, #1
 80191ae:	4642      	mov	r2, r8
 80191b0:	4631      	mov	r1, r6
 80191b2:	4628      	mov	r0, r5
 80191b4:	47b8      	blx	r7
 80191b6:	3001      	adds	r0, #1
 80191b8:	f43f ae7b 	beq.w	8018eb2 <_printf_float+0xba>
 80191bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80191c0:	4631      	mov	r1, r6
 80191c2:	4628      	mov	r0, r5
 80191c4:	47b8      	blx	r7
 80191c6:	3001      	adds	r0, #1
 80191c8:	f108 0801 	add.w	r8, r8, #1
 80191cc:	f43f ae71 	beq.w	8018eb2 <_printf_float+0xba>
 80191d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191d2:	2200      	movs	r2, #0
 80191d4:	f103 3aff 	add.w	sl, r3, #4294967295
 80191d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80191dc:	2300      	movs	r3, #0
 80191de:	f7e7 fc83 	bl	8000ae8 <__aeabi_dcmpeq>
 80191e2:	b9c8      	cbnz	r0, 8019218 <_printf_float+0x420>
 80191e4:	4653      	mov	r3, sl
 80191e6:	4642      	mov	r2, r8
 80191e8:	4631      	mov	r1, r6
 80191ea:	4628      	mov	r0, r5
 80191ec:	47b8      	blx	r7
 80191ee:	3001      	adds	r0, #1
 80191f0:	d10e      	bne.n	8019210 <_printf_float+0x418>
 80191f2:	e65e      	b.n	8018eb2 <_printf_float+0xba>
 80191f4:	2301      	movs	r3, #1
 80191f6:	4652      	mov	r2, sl
 80191f8:	4631      	mov	r1, r6
 80191fa:	4628      	mov	r0, r5
 80191fc:	47b8      	blx	r7
 80191fe:	3001      	adds	r0, #1
 8019200:	f43f ae57 	beq.w	8018eb2 <_printf_float+0xba>
 8019204:	f108 0801 	add.w	r8, r8, #1
 8019208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801920a:	3b01      	subs	r3, #1
 801920c:	4543      	cmp	r3, r8
 801920e:	dcf1      	bgt.n	80191f4 <_printf_float+0x3fc>
 8019210:	464b      	mov	r3, r9
 8019212:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019216:	e6de      	b.n	8018fd6 <_printf_float+0x1de>
 8019218:	f04f 0800 	mov.w	r8, #0
 801921c:	f104 0a1a 	add.w	sl, r4, #26
 8019220:	e7f2      	b.n	8019208 <_printf_float+0x410>
 8019222:	2301      	movs	r3, #1
 8019224:	e7df      	b.n	80191e6 <_printf_float+0x3ee>
 8019226:	2301      	movs	r3, #1
 8019228:	464a      	mov	r2, r9
 801922a:	4631      	mov	r1, r6
 801922c:	4628      	mov	r0, r5
 801922e:	47b8      	blx	r7
 8019230:	3001      	adds	r0, #1
 8019232:	f43f ae3e 	beq.w	8018eb2 <_printf_float+0xba>
 8019236:	f108 0801 	add.w	r8, r8, #1
 801923a:	68e3      	ldr	r3, [r4, #12]
 801923c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801923e:	1a9b      	subs	r3, r3, r2
 8019240:	4543      	cmp	r3, r8
 8019242:	dcf0      	bgt.n	8019226 <_printf_float+0x42e>
 8019244:	e6fc      	b.n	8019040 <_printf_float+0x248>
 8019246:	f04f 0800 	mov.w	r8, #0
 801924a:	f104 0919 	add.w	r9, r4, #25
 801924e:	e7f4      	b.n	801923a <_printf_float+0x442>
 8019250:	2900      	cmp	r1, #0
 8019252:	f43f ae8b 	beq.w	8018f6c <_printf_float+0x174>
 8019256:	2300      	movs	r3, #0
 8019258:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801925c:	ab09      	add	r3, sp, #36	; 0x24
 801925e:	9300      	str	r3, [sp, #0]
 8019260:	ec49 8b10 	vmov	d0, r8, r9
 8019264:	6022      	str	r2, [r4, #0]
 8019266:	f8cd a004 	str.w	sl, [sp, #4]
 801926a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801926e:	4628      	mov	r0, r5
 8019270:	f7ff fd2e 	bl	8018cd0 <__cvt>
 8019274:	4680      	mov	r8, r0
 8019276:	e648      	b.n	8018f0a <_printf_float+0x112>

08019278 <_printf_common>:
 8019278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801927c:	4691      	mov	r9, r2
 801927e:	461f      	mov	r7, r3
 8019280:	688a      	ldr	r2, [r1, #8]
 8019282:	690b      	ldr	r3, [r1, #16]
 8019284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019288:	4293      	cmp	r3, r2
 801928a:	bfb8      	it	lt
 801928c:	4613      	movlt	r3, r2
 801928e:	f8c9 3000 	str.w	r3, [r9]
 8019292:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019296:	4606      	mov	r6, r0
 8019298:	460c      	mov	r4, r1
 801929a:	b112      	cbz	r2, 80192a2 <_printf_common+0x2a>
 801929c:	3301      	adds	r3, #1
 801929e:	f8c9 3000 	str.w	r3, [r9]
 80192a2:	6823      	ldr	r3, [r4, #0]
 80192a4:	0699      	lsls	r1, r3, #26
 80192a6:	bf42      	ittt	mi
 80192a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80192ac:	3302      	addmi	r3, #2
 80192ae:	f8c9 3000 	strmi.w	r3, [r9]
 80192b2:	6825      	ldr	r5, [r4, #0]
 80192b4:	f015 0506 	ands.w	r5, r5, #6
 80192b8:	d107      	bne.n	80192ca <_printf_common+0x52>
 80192ba:	f104 0a19 	add.w	sl, r4, #25
 80192be:	68e3      	ldr	r3, [r4, #12]
 80192c0:	f8d9 2000 	ldr.w	r2, [r9]
 80192c4:	1a9b      	subs	r3, r3, r2
 80192c6:	42ab      	cmp	r3, r5
 80192c8:	dc28      	bgt.n	801931c <_printf_common+0xa4>
 80192ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80192ce:	6822      	ldr	r2, [r4, #0]
 80192d0:	3300      	adds	r3, #0
 80192d2:	bf18      	it	ne
 80192d4:	2301      	movne	r3, #1
 80192d6:	0692      	lsls	r2, r2, #26
 80192d8:	d42d      	bmi.n	8019336 <_printf_common+0xbe>
 80192da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80192de:	4639      	mov	r1, r7
 80192e0:	4630      	mov	r0, r6
 80192e2:	47c0      	blx	r8
 80192e4:	3001      	adds	r0, #1
 80192e6:	d020      	beq.n	801932a <_printf_common+0xb2>
 80192e8:	6823      	ldr	r3, [r4, #0]
 80192ea:	68e5      	ldr	r5, [r4, #12]
 80192ec:	f8d9 2000 	ldr.w	r2, [r9]
 80192f0:	f003 0306 	and.w	r3, r3, #6
 80192f4:	2b04      	cmp	r3, #4
 80192f6:	bf08      	it	eq
 80192f8:	1aad      	subeq	r5, r5, r2
 80192fa:	68a3      	ldr	r3, [r4, #8]
 80192fc:	6922      	ldr	r2, [r4, #16]
 80192fe:	bf0c      	ite	eq
 8019300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019304:	2500      	movne	r5, #0
 8019306:	4293      	cmp	r3, r2
 8019308:	bfc4      	itt	gt
 801930a:	1a9b      	subgt	r3, r3, r2
 801930c:	18ed      	addgt	r5, r5, r3
 801930e:	f04f 0900 	mov.w	r9, #0
 8019312:	341a      	adds	r4, #26
 8019314:	454d      	cmp	r5, r9
 8019316:	d11a      	bne.n	801934e <_printf_common+0xd6>
 8019318:	2000      	movs	r0, #0
 801931a:	e008      	b.n	801932e <_printf_common+0xb6>
 801931c:	2301      	movs	r3, #1
 801931e:	4652      	mov	r2, sl
 8019320:	4639      	mov	r1, r7
 8019322:	4630      	mov	r0, r6
 8019324:	47c0      	blx	r8
 8019326:	3001      	adds	r0, #1
 8019328:	d103      	bne.n	8019332 <_printf_common+0xba>
 801932a:	f04f 30ff 	mov.w	r0, #4294967295
 801932e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019332:	3501      	adds	r5, #1
 8019334:	e7c3      	b.n	80192be <_printf_common+0x46>
 8019336:	18e1      	adds	r1, r4, r3
 8019338:	1c5a      	adds	r2, r3, #1
 801933a:	2030      	movs	r0, #48	; 0x30
 801933c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019340:	4422      	add	r2, r4
 8019342:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019346:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801934a:	3302      	adds	r3, #2
 801934c:	e7c5      	b.n	80192da <_printf_common+0x62>
 801934e:	2301      	movs	r3, #1
 8019350:	4622      	mov	r2, r4
 8019352:	4639      	mov	r1, r7
 8019354:	4630      	mov	r0, r6
 8019356:	47c0      	blx	r8
 8019358:	3001      	adds	r0, #1
 801935a:	d0e6      	beq.n	801932a <_printf_common+0xb2>
 801935c:	f109 0901 	add.w	r9, r9, #1
 8019360:	e7d8      	b.n	8019314 <_printf_common+0x9c>
	...

08019364 <_printf_i>:
 8019364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019368:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801936c:	460c      	mov	r4, r1
 801936e:	7e09      	ldrb	r1, [r1, #24]
 8019370:	b085      	sub	sp, #20
 8019372:	296e      	cmp	r1, #110	; 0x6e
 8019374:	4617      	mov	r7, r2
 8019376:	4606      	mov	r6, r0
 8019378:	4698      	mov	r8, r3
 801937a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801937c:	f000 80b3 	beq.w	80194e6 <_printf_i+0x182>
 8019380:	d822      	bhi.n	80193c8 <_printf_i+0x64>
 8019382:	2963      	cmp	r1, #99	; 0x63
 8019384:	d036      	beq.n	80193f4 <_printf_i+0x90>
 8019386:	d80a      	bhi.n	801939e <_printf_i+0x3a>
 8019388:	2900      	cmp	r1, #0
 801938a:	f000 80b9 	beq.w	8019500 <_printf_i+0x19c>
 801938e:	2958      	cmp	r1, #88	; 0x58
 8019390:	f000 8083 	beq.w	801949a <_printf_i+0x136>
 8019394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019398:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801939c:	e032      	b.n	8019404 <_printf_i+0xa0>
 801939e:	2964      	cmp	r1, #100	; 0x64
 80193a0:	d001      	beq.n	80193a6 <_printf_i+0x42>
 80193a2:	2969      	cmp	r1, #105	; 0x69
 80193a4:	d1f6      	bne.n	8019394 <_printf_i+0x30>
 80193a6:	6820      	ldr	r0, [r4, #0]
 80193a8:	6813      	ldr	r3, [r2, #0]
 80193aa:	0605      	lsls	r5, r0, #24
 80193ac:	f103 0104 	add.w	r1, r3, #4
 80193b0:	d52a      	bpl.n	8019408 <_printf_i+0xa4>
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	6011      	str	r1, [r2, #0]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	da03      	bge.n	80193c2 <_printf_i+0x5e>
 80193ba:	222d      	movs	r2, #45	; 0x2d
 80193bc:	425b      	negs	r3, r3
 80193be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80193c2:	486f      	ldr	r0, [pc, #444]	; (8019580 <_printf_i+0x21c>)
 80193c4:	220a      	movs	r2, #10
 80193c6:	e039      	b.n	801943c <_printf_i+0xd8>
 80193c8:	2973      	cmp	r1, #115	; 0x73
 80193ca:	f000 809d 	beq.w	8019508 <_printf_i+0x1a4>
 80193ce:	d808      	bhi.n	80193e2 <_printf_i+0x7e>
 80193d0:	296f      	cmp	r1, #111	; 0x6f
 80193d2:	d020      	beq.n	8019416 <_printf_i+0xb2>
 80193d4:	2970      	cmp	r1, #112	; 0x70
 80193d6:	d1dd      	bne.n	8019394 <_printf_i+0x30>
 80193d8:	6823      	ldr	r3, [r4, #0]
 80193da:	f043 0320 	orr.w	r3, r3, #32
 80193de:	6023      	str	r3, [r4, #0]
 80193e0:	e003      	b.n	80193ea <_printf_i+0x86>
 80193e2:	2975      	cmp	r1, #117	; 0x75
 80193e4:	d017      	beq.n	8019416 <_printf_i+0xb2>
 80193e6:	2978      	cmp	r1, #120	; 0x78
 80193e8:	d1d4      	bne.n	8019394 <_printf_i+0x30>
 80193ea:	2378      	movs	r3, #120	; 0x78
 80193ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80193f0:	4864      	ldr	r0, [pc, #400]	; (8019584 <_printf_i+0x220>)
 80193f2:	e055      	b.n	80194a0 <_printf_i+0x13c>
 80193f4:	6813      	ldr	r3, [r2, #0]
 80193f6:	1d19      	adds	r1, r3, #4
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	6011      	str	r1, [r2, #0]
 80193fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019404:	2301      	movs	r3, #1
 8019406:	e08c      	b.n	8019522 <_printf_i+0x1be>
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	6011      	str	r1, [r2, #0]
 801940c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019410:	bf18      	it	ne
 8019412:	b21b      	sxthne	r3, r3
 8019414:	e7cf      	b.n	80193b6 <_printf_i+0x52>
 8019416:	6813      	ldr	r3, [r2, #0]
 8019418:	6825      	ldr	r5, [r4, #0]
 801941a:	1d18      	adds	r0, r3, #4
 801941c:	6010      	str	r0, [r2, #0]
 801941e:	0628      	lsls	r0, r5, #24
 8019420:	d501      	bpl.n	8019426 <_printf_i+0xc2>
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	e002      	b.n	801942c <_printf_i+0xc8>
 8019426:	0668      	lsls	r0, r5, #25
 8019428:	d5fb      	bpl.n	8019422 <_printf_i+0xbe>
 801942a:	881b      	ldrh	r3, [r3, #0]
 801942c:	4854      	ldr	r0, [pc, #336]	; (8019580 <_printf_i+0x21c>)
 801942e:	296f      	cmp	r1, #111	; 0x6f
 8019430:	bf14      	ite	ne
 8019432:	220a      	movne	r2, #10
 8019434:	2208      	moveq	r2, #8
 8019436:	2100      	movs	r1, #0
 8019438:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801943c:	6865      	ldr	r5, [r4, #4]
 801943e:	60a5      	str	r5, [r4, #8]
 8019440:	2d00      	cmp	r5, #0
 8019442:	f2c0 8095 	blt.w	8019570 <_printf_i+0x20c>
 8019446:	6821      	ldr	r1, [r4, #0]
 8019448:	f021 0104 	bic.w	r1, r1, #4
 801944c:	6021      	str	r1, [r4, #0]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d13d      	bne.n	80194ce <_printf_i+0x16a>
 8019452:	2d00      	cmp	r5, #0
 8019454:	f040 808e 	bne.w	8019574 <_printf_i+0x210>
 8019458:	4665      	mov	r5, ip
 801945a:	2a08      	cmp	r2, #8
 801945c:	d10b      	bne.n	8019476 <_printf_i+0x112>
 801945e:	6823      	ldr	r3, [r4, #0]
 8019460:	07db      	lsls	r3, r3, #31
 8019462:	d508      	bpl.n	8019476 <_printf_i+0x112>
 8019464:	6923      	ldr	r3, [r4, #16]
 8019466:	6862      	ldr	r2, [r4, #4]
 8019468:	429a      	cmp	r2, r3
 801946a:	bfde      	ittt	le
 801946c:	2330      	movle	r3, #48	; 0x30
 801946e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019472:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019476:	ebac 0305 	sub.w	r3, ip, r5
 801947a:	6123      	str	r3, [r4, #16]
 801947c:	f8cd 8000 	str.w	r8, [sp]
 8019480:	463b      	mov	r3, r7
 8019482:	aa03      	add	r2, sp, #12
 8019484:	4621      	mov	r1, r4
 8019486:	4630      	mov	r0, r6
 8019488:	f7ff fef6 	bl	8019278 <_printf_common>
 801948c:	3001      	adds	r0, #1
 801948e:	d14d      	bne.n	801952c <_printf_i+0x1c8>
 8019490:	f04f 30ff 	mov.w	r0, #4294967295
 8019494:	b005      	add	sp, #20
 8019496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801949a:	4839      	ldr	r0, [pc, #228]	; (8019580 <_printf_i+0x21c>)
 801949c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80194a0:	6813      	ldr	r3, [r2, #0]
 80194a2:	6821      	ldr	r1, [r4, #0]
 80194a4:	1d1d      	adds	r5, r3, #4
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	6015      	str	r5, [r2, #0]
 80194aa:	060a      	lsls	r2, r1, #24
 80194ac:	d50b      	bpl.n	80194c6 <_printf_i+0x162>
 80194ae:	07ca      	lsls	r2, r1, #31
 80194b0:	bf44      	itt	mi
 80194b2:	f041 0120 	orrmi.w	r1, r1, #32
 80194b6:	6021      	strmi	r1, [r4, #0]
 80194b8:	b91b      	cbnz	r3, 80194c2 <_printf_i+0x15e>
 80194ba:	6822      	ldr	r2, [r4, #0]
 80194bc:	f022 0220 	bic.w	r2, r2, #32
 80194c0:	6022      	str	r2, [r4, #0]
 80194c2:	2210      	movs	r2, #16
 80194c4:	e7b7      	b.n	8019436 <_printf_i+0xd2>
 80194c6:	064d      	lsls	r5, r1, #25
 80194c8:	bf48      	it	mi
 80194ca:	b29b      	uxthmi	r3, r3
 80194cc:	e7ef      	b.n	80194ae <_printf_i+0x14a>
 80194ce:	4665      	mov	r5, ip
 80194d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80194d4:	fb02 3311 	mls	r3, r2, r1, r3
 80194d8:	5cc3      	ldrb	r3, [r0, r3]
 80194da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80194de:	460b      	mov	r3, r1
 80194e0:	2900      	cmp	r1, #0
 80194e2:	d1f5      	bne.n	80194d0 <_printf_i+0x16c>
 80194e4:	e7b9      	b.n	801945a <_printf_i+0xf6>
 80194e6:	6813      	ldr	r3, [r2, #0]
 80194e8:	6825      	ldr	r5, [r4, #0]
 80194ea:	6961      	ldr	r1, [r4, #20]
 80194ec:	1d18      	adds	r0, r3, #4
 80194ee:	6010      	str	r0, [r2, #0]
 80194f0:	0628      	lsls	r0, r5, #24
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	d501      	bpl.n	80194fa <_printf_i+0x196>
 80194f6:	6019      	str	r1, [r3, #0]
 80194f8:	e002      	b.n	8019500 <_printf_i+0x19c>
 80194fa:	066a      	lsls	r2, r5, #25
 80194fc:	d5fb      	bpl.n	80194f6 <_printf_i+0x192>
 80194fe:	8019      	strh	r1, [r3, #0]
 8019500:	2300      	movs	r3, #0
 8019502:	6123      	str	r3, [r4, #16]
 8019504:	4665      	mov	r5, ip
 8019506:	e7b9      	b.n	801947c <_printf_i+0x118>
 8019508:	6813      	ldr	r3, [r2, #0]
 801950a:	1d19      	adds	r1, r3, #4
 801950c:	6011      	str	r1, [r2, #0]
 801950e:	681d      	ldr	r5, [r3, #0]
 8019510:	6862      	ldr	r2, [r4, #4]
 8019512:	2100      	movs	r1, #0
 8019514:	4628      	mov	r0, r5
 8019516:	f7e6 fe73 	bl	8000200 <memchr>
 801951a:	b108      	cbz	r0, 8019520 <_printf_i+0x1bc>
 801951c:	1b40      	subs	r0, r0, r5
 801951e:	6060      	str	r0, [r4, #4]
 8019520:	6863      	ldr	r3, [r4, #4]
 8019522:	6123      	str	r3, [r4, #16]
 8019524:	2300      	movs	r3, #0
 8019526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801952a:	e7a7      	b.n	801947c <_printf_i+0x118>
 801952c:	6923      	ldr	r3, [r4, #16]
 801952e:	462a      	mov	r2, r5
 8019530:	4639      	mov	r1, r7
 8019532:	4630      	mov	r0, r6
 8019534:	47c0      	blx	r8
 8019536:	3001      	adds	r0, #1
 8019538:	d0aa      	beq.n	8019490 <_printf_i+0x12c>
 801953a:	6823      	ldr	r3, [r4, #0]
 801953c:	079b      	lsls	r3, r3, #30
 801953e:	d413      	bmi.n	8019568 <_printf_i+0x204>
 8019540:	68e0      	ldr	r0, [r4, #12]
 8019542:	9b03      	ldr	r3, [sp, #12]
 8019544:	4298      	cmp	r0, r3
 8019546:	bfb8      	it	lt
 8019548:	4618      	movlt	r0, r3
 801954a:	e7a3      	b.n	8019494 <_printf_i+0x130>
 801954c:	2301      	movs	r3, #1
 801954e:	464a      	mov	r2, r9
 8019550:	4639      	mov	r1, r7
 8019552:	4630      	mov	r0, r6
 8019554:	47c0      	blx	r8
 8019556:	3001      	adds	r0, #1
 8019558:	d09a      	beq.n	8019490 <_printf_i+0x12c>
 801955a:	3501      	adds	r5, #1
 801955c:	68e3      	ldr	r3, [r4, #12]
 801955e:	9a03      	ldr	r2, [sp, #12]
 8019560:	1a9b      	subs	r3, r3, r2
 8019562:	42ab      	cmp	r3, r5
 8019564:	dcf2      	bgt.n	801954c <_printf_i+0x1e8>
 8019566:	e7eb      	b.n	8019540 <_printf_i+0x1dc>
 8019568:	2500      	movs	r5, #0
 801956a:	f104 0919 	add.w	r9, r4, #25
 801956e:	e7f5      	b.n	801955c <_printf_i+0x1f8>
 8019570:	2b00      	cmp	r3, #0
 8019572:	d1ac      	bne.n	80194ce <_printf_i+0x16a>
 8019574:	7803      	ldrb	r3, [r0, #0]
 8019576:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801957a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801957e:	e76c      	b.n	801945a <_printf_i+0xf6>
 8019580:	08020426 	.word	0x08020426
 8019584:	08020437 	.word	0x08020437

08019588 <_scanf_float>:
 8019588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801958c:	469a      	mov	sl, r3
 801958e:	688b      	ldr	r3, [r1, #8]
 8019590:	4616      	mov	r6, r2
 8019592:	1e5a      	subs	r2, r3, #1
 8019594:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019598:	b087      	sub	sp, #28
 801959a:	bf83      	ittte	hi
 801959c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80195a0:	189b      	addhi	r3, r3, r2
 80195a2:	9301      	strhi	r3, [sp, #4]
 80195a4:	2300      	movls	r3, #0
 80195a6:	bf86      	itte	hi
 80195a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80195ac:	608b      	strhi	r3, [r1, #8]
 80195ae:	9301      	strls	r3, [sp, #4]
 80195b0:	680b      	ldr	r3, [r1, #0]
 80195b2:	4688      	mov	r8, r1
 80195b4:	f04f 0b00 	mov.w	fp, #0
 80195b8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80195bc:	f848 3b1c 	str.w	r3, [r8], #28
 80195c0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80195c4:	4607      	mov	r7, r0
 80195c6:	460c      	mov	r4, r1
 80195c8:	4645      	mov	r5, r8
 80195ca:	465a      	mov	r2, fp
 80195cc:	46d9      	mov	r9, fp
 80195ce:	f8cd b008 	str.w	fp, [sp, #8]
 80195d2:	68a1      	ldr	r1, [r4, #8]
 80195d4:	b181      	cbz	r1, 80195f8 <_scanf_float+0x70>
 80195d6:	6833      	ldr	r3, [r6, #0]
 80195d8:	781b      	ldrb	r3, [r3, #0]
 80195da:	2b49      	cmp	r3, #73	; 0x49
 80195dc:	d071      	beq.n	80196c2 <_scanf_float+0x13a>
 80195de:	d84d      	bhi.n	801967c <_scanf_float+0xf4>
 80195e0:	2b39      	cmp	r3, #57	; 0x39
 80195e2:	d840      	bhi.n	8019666 <_scanf_float+0xde>
 80195e4:	2b31      	cmp	r3, #49	; 0x31
 80195e6:	f080 8088 	bcs.w	80196fa <_scanf_float+0x172>
 80195ea:	2b2d      	cmp	r3, #45	; 0x2d
 80195ec:	f000 8090 	beq.w	8019710 <_scanf_float+0x188>
 80195f0:	d815      	bhi.n	801961e <_scanf_float+0x96>
 80195f2:	2b2b      	cmp	r3, #43	; 0x2b
 80195f4:	f000 808c 	beq.w	8019710 <_scanf_float+0x188>
 80195f8:	f1b9 0f00 	cmp.w	r9, #0
 80195fc:	d003      	beq.n	8019606 <_scanf_float+0x7e>
 80195fe:	6823      	ldr	r3, [r4, #0]
 8019600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019604:	6023      	str	r3, [r4, #0]
 8019606:	3a01      	subs	r2, #1
 8019608:	2a01      	cmp	r2, #1
 801960a:	f200 80ea 	bhi.w	80197e2 <_scanf_float+0x25a>
 801960e:	4545      	cmp	r5, r8
 8019610:	f200 80dc 	bhi.w	80197cc <_scanf_float+0x244>
 8019614:	2601      	movs	r6, #1
 8019616:	4630      	mov	r0, r6
 8019618:	b007      	add	sp, #28
 801961a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801961e:	2b2e      	cmp	r3, #46	; 0x2e
 8019620:	f000 809f 	beq.w	8019762 <_scanf_float+0x1da>
 8019624:	2b30      	cmp	r3, #48	; 0x30
 8019626:	d1e7      	bne.n	80195f8 <_scanf_float+0x70>
 8019628:	6820      	ldr	r0, [r4, #0]
 801962a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801962e:	d064      	beq.n	80196fa <_scanf_float+0x172>
 8019630:	9b01      	ldr	r3, [sp, #4]
 8019632:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8019636:	6020      	str	r0, [r4, #0]
 8019638:	f109 0901 	add.w	r9, r9, #1
 801963c:	b11b      	cbz	r3, 8019646 <_scanf_float+0xbe>
 801963e:	3b01      	subs	r3, #1
 8019640:	3101      	adds	r1, #1
 8019642:	9301      	str	r3, [sp, #4]
 8019644:	60a1      	str	r1, [r4, #8]
 8019646:	68a3      	ldr	r3, [r4, #8]
 8019648:	3b01      	subs	r3, #1
 801964a:	60a3      	str	r3, [r4, #8]
 801964c:	6923      	ldr	r3, [r4, #16]
 801964e:	3301      	adds	r3, #1
 8019650:	6123      	str	r3, [r4, #16]
 8019652:	6873      	ldr	r3, [r6, #4]
 8019654:	3b01      	subs	r3, #1
 8019656:	2b00      	cmp	r3, #0
 8019658:	6073      	str	r3, [r6, #4]
 801965a:	f340 80ac 	ble.w	80197b6 <_scanf_float+0x22e>
 801965e:	6833      	ldr	r3, [r6, #0]
 8019660:	3301      	adds	r3, #1
 8019662:	6033      	str	r3, [r6, #0]
 8019664:	e7b5      	b.n	80195d2 <_scanf_float+0x4a>
 8019666:	2b45      	cmp	r3, #69	; 0x45
 8019668:	f000 8085 	beq.w	8019776 <_scanf_float+0x1ee>
 801966c:	2b46      	cmp	r3, #70	; 0x46
 801966e:	d06a      	beq.n	8019746 <_scanf_float+0x1be>
 8019670:	2b41      	cmp	r3, #65	; 0x41
 8019672:	d1c1      	bne.n	80195f8 <_scanf_float+0x70>
 8019674:	2a01      	cmp	r2, #1
 8019676:	d1bf      	bne.n	80195f8 <_scanf_float+0x70>
 8019678:	2202      	movs	r2, #2
 801967a:	e046      	b.n	801970a <_scanf_float+0x182>
 801967c:	2b65      	cmp	r3, #101	; 0x65
 801967e:	d07a      	beq.n	8019776 <_scanf_float+0x1ee>
 8019680:	d818      	bhi.n	80196b4 <_scanf_float+0x12c>
 8019682:	2b54      	cmp	r3, #84	; 0x54
 8019684:	d066      	beq.n	8019754 <_scanf_float+0x1cc>
 8019686:	d811      	bhi.n	80196ac <_scanf_float+0x124>
 8019688:	2b4e      	cmp	r3, #78	; 0x4e
 801968a:	d1b5      	bne.n	80195f8 <_scanf_float+0x70>
 801968c:	2a00      	cmp	r2, #0
 801968e:	d146      	bne.n	801971e <_scanf_float+0x196>
 8019690:	f1b9 0f00 	cmp.w	r9, #0
 8019694:	d145      	bne.n	8019722 <_scanf_float+0x19a>
 8019696:	6821      	ldr	r1, [r4, #0]
 8019698:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801969c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80196a0:	d13f      	bne.n	8019722 <_scanf_float+0x19a>
 80196a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80196a6:	6021      	str	r1, [r4, #0]
 80196a8:	2201      	movs	r2, #1
 80196aa:	e02e      	b.n	801970a <_scanf_float+0x182>
 80196ac:	2b59      	cmp	r3, #89	; 0x59
 80196ae:	d01e      	beq.n	80196ee <_scanf_float+0x166>
 80196b0:	2b61      	cmp	r3, #97	; 0x61
 80196b2:	e7de      	b.n	8019672 <_scanf_float+0xea>
 80196b4:	2b6e      	cmp	r3, #110	; 0x6e
 80196b6:	d0e9      	beq.n	801968c <_scanf_float+0x104>
 80196b8:	d815      	bhi.n	80196e6 <_scanf_float+0x15e>
 80196ba:	2b66      	cmp	r3, #102	; 0x66
 80196bc:	d043      	beq.n	8019746 <_scanf_float+0x1be>
 80196be:	2b69      	cmp	r3, #105	; 0x69
 80196c0:	d19a      	bne.n	80195f8 <_scanf_float+0x70>
 80196c2:	f1bb 0f00 	cmp.w	fp, #0
 80196c6:	d138      	bne.n	801973a <_scanf_float+0x1b2>
 80196c8:	f1b9 0f00 	cmp.w	r9, #0
 80196cc:	d197      	bne.n	80195fe <_scanf_float+0x76>
 80196ce:	6821      	ldr	r1, [r4, #0]
 80196d0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80196d4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80196d8:	d195      	bne.n	8019606 <_scanf_float+0x7e>
 80196da:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80196de:	6021      	str	r1, [r4, #0]
 80196e0:	f04f 0b01 	mov.w	fp, #1
 80196e4:	e011      	b.n	801970a <_scanf_float+0x182>
 80196e6:	2b74      	cmp	r3, #116	; 0x74
 80196e8:	d034      	beq.n	8019754 <_scanf_float+0x1cc>
 80196ea:	2b79      	cmp	r3, #121	; 0x79
 80196ec:	d184      	bne.n	80195f8 <_scanf_float+0x70>
 80196ee:	f1bb 0f07 	cmp.w	fp, #7
 80196f2:	d181      	bne.n	80195f8 <_scanf_float+0x70>
 80196f4:	f04f 0b08 	mov.w	fp, #8
 80196f8:	e007      	b.n	801970a <_scanf_float+0x182>
 80196fa:	eb12 0f0b 	cmn.w	r2, fp
 80196fe:	f47f af7b 	bne.w	80195f8 <_scanf_float+0x70>
 8019702:	6821      	ldr	r1, [r4, #0]
 8019704:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8019708:	6021      	str	r1, [r4, #0]
 801970a:	702b      	strb	r3, [r5, #0]
 801970c:	3501      	adds	r5, #1
 801970e:	e79a      	b.n	8019646 <_scanf_float+0xbe>
 8019710:	6821      	ldr	r1, [r4, #0]
 8019712:	0608      	lsls	r0, r1, #24
 8019714:	f57f af70 	bpl.w	80195f8 <_scanf_float+0x70>
 8019718:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801971c:	e7f4      	b.n	8019708 <_scanf_float+0x180>
 801971e:	2a02      	cmp	r2, #2
 8019720:	d047      	beq.n	80197b2 <_scanf_float+0x22a>
 8019722:	f1bb 0f01 	cmp.w	fp, #1
 8019726:	d003      	beq.n	8019730 <_scanf_float+0x1a8>
 8019728:	f1bb 0f04 	cmp.w	fp, #4
 801972c:	f47f af64 	bne.w	80195f8 <_scanf_float+0x70>
 8019730:	f10b 0b01 	add.w	fp, fp, #1
 8019734:	fa5f fb8b 	uxtb.w	fp, fp
 8019738:	e7e7      	b.n	801970a <_scanf_float+0x182>
 801973a:	f1bb 0f03 	cmp.w	fp, #3
 801973e:	d0f7      	beq.n	8019730 <_scanf_float+0x1a8>
 8019740:	f1bb 0f05 	cmp.w	fp, #5
 8019744:	e7f2      	b.n	801972c <_scanf_float+0x1a4>
 8019746:	f1bb 0f02 	cmp.w	fp, #2
 801974a:	f47f af55 	bne.w	80195f8 <_scanf_float+0x70>
 801974e:	f04f 0b03 	mov.w	fp, #3
 8019752:	e7da      	b.n	801970a <_scanf_float+0x182>
 8019754:	f1bb 0f06 	cmp.w	fp, #6
 8019758:	f47f af4e 	bne.w	80195f8 <_scanf_float+0x70>
 801975c:	f04f 0b07 	mov.w	fp, #7
 8019760:	e7d3      	b.n	801970a <_scanf_float+0x182>
 8019762:	6821      	ldr	r1, [r4, #0]
 8019764:	0588      	lsls	r0, r1, #22
 8019766:	f57f af47 	bpl.w	80195f8 <_scanf_float+0x70>
 801976a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801976e:	6021      	str	r1, [r4, #0]
 8019770:	f8cd 9008 	str.w	r9, [sp, #8]
 8019774:	e7c9      	b.n	801970a <_scanf_float+0x182>
 8019776:	6821      	ldr	r1, [r4, #0]
 8019778:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801977c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8019780:	d006      	beq.n	8019790 <_scanf_float+0x208>
 8019782:	0548      	lsls	r0, r1, #21
 8019784:	f57f af38 	bpl.w	80195f8 <_scanf_float+0x70>
 8019788:	f1b9 0f00 	cmp.w	r9, #0
 801978c:	f43f af3b 	beq.w	8019606 <_scanf_float+0x7e>
 8019790:	0588      	lsls	r0, r1, #22
 8019792:	bf58      	it	pl
 8019794:	9802      	ldrpl	r0, [sp, #8]
 8019796:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801979a:	bf58      	it	pl
 801979c:	eba9 0000 	subpl.w	r0, r9, r0
 80197a0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80197a4:	bf58      	it	pl
 80197a6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80197aa:	6021      	str	r1, [r4, #0]
 80197ac:	f04f 0900 	mov.w	r9, #0
 80197b0:	e7ab      	b.n	801970a <_scanf_float+0x182>
 80197b2:	2203      	movs	r2, #3
 80197b4:	e7a9      	b.n	801970a <_scanf_float+0x182>
 80197b6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80197ba:	9205      	str	r2, [sp, #20]
 80197bc:	4631      	mov	r1, r6
 80197be:	4638      	mov	r0, r7
 80197c0:	4798      	blx	r3
 80197c2:	9a05      	ldr	r2, [sp, #20]
 80197c4:	2800      	cmp	r0, #0
 80197c6:	f43f af04 	beq.w	80195d2 <_scanf_float+0x4a>
 80197ca:	e715      	b.n	80195f8 <_scanf_float+0x70>
 80197cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80197d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80197d4:	4632      	mov	r2, r6
 80197d6:	4638      	mov	r0, r7
 80197d8:	4798      	blx	r3
 80197da:	6923      	ldr	r3, [r4, #16]
 80197dc:	3b01      	subs	r3, #1
 80197de:	6123      	str	r3, [r4, #16]
 80197e0:	e715      	b.n	801960e <_scanf_float+0x86>
 80197e2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80197e6:	2b06      	cmp	r3, #6
 80197e8:	d80a      	bhi.n	8019800 <_scanf_float+0x278>
 80197ea:	f1bb 0f02 	cmp.w	fp, #2
 80197ee:	d968      	bls.n	80198c2 <_scanf_float+0x33a>
 80197f0:	f1ab 0b03 	sub.w	fp, fp, #3
 80197f4:	fa5f fb8b 	uxtb.w	fp, fp
 80197f8:	eba5 0b0b 	sub.w	fp, r5, fp
 80197fc:	455d      	cmp	r5, fp
 80197fe:	d14b      	bne.n	8019898 <_scanf_float+0x310>
 8019800:	6823      	ldr	r3, [r4, #0]
 8019802:	05da      	lsls	r2, r3, #23
 8019804:	d51f      	bpl.n	8019846 <_scanf_float+0x2be>
 8019806:	055b      	lsls	r3, r3, #21
 8019808:	d468      	bmi.n	80198dc <_scanf_float+0x354>
 801980a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801980e:	6923      	ldr	r3, [r4, #16]
 8019810:	2965      	cmp	r1, #101	; 0x65
 8019812:	f103 33ff 	add.w	r3, r3, #4294967295
 8019816:	f105 3bff 	add.w	fp, r5, #4294967295
 801981a:	6123      	str	r3, [r4, #16]
 801981c:	d00d      	beq.n	801983a <_scanf_float+0x2b2>
 801981e:	2945      	cmp	r1, #69	; 0x45
 8019820:	d00b      	beq.n	801983a <_scanf_float+0x2b2>
 8019822:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019826:	4632      	mov	r2, r6
 8019828:	4638      	mov	r0, r7
 801982a:	4798      	blx	r3
 801982c:	6923      	ldr	r3, [r4, #16]
 801982e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8019832:	3b01      	subs	r3, #1
 8019834:	f1a5 0b02 	sub.w	fp, r5, #2
 8019838:	6123      	str	r3, [r4, #16]
 801983a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801983e:	4632      	mov	r2, r6
 8019840:	4638      	mov	r0, r7
 8019842:	4798      	blx	r3
 8019844:	465d      	mov	r5, fp
 8019846:	6826      	ldr	r6, [r4, #0]
 8019848:	f016 0610 	ands.w	r6, r6, #16
 801984c:	d17a      	bne.n	8019944 <_scanf_float+0x3bc>
 801984e:	702e      	strb	r6, [r5, #0]
 8019850:	6823      	ldr	r3, [r4, #0]
 8019852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8019856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801985a:	d142      	bne.n	80198e2 <_scanf_float+0x35a>
 801985c:	9b02      	ldr	r3, [sp, #8]
 801985e:	eba9 0303 	sub.w	r3, r9, r3
 8019862:	425a      	negs	r2, r3
 8019864:	2b00      	cmp	r3, #0
 8019866:	d149      	bne.n	80198fc <_scanf_float+0x374>
 8019868:	2200      	movs	r2, #0
 801986a:	4641      	mov	r1, r8
 801986c:	4638      	mov	r0, r7
 801986e:	f000 feff 	bl	801a670 <_strtod_r>
 8019872:	6825      	ldr	r5, [r4, #0]
 8019874:	f8da 3000 	ldr.w	r3, [sl]
 8019878:	f015 0f02 	tst.w	r5, #2
 801987c:	f103 0204 	add.w	r2, r3, #4
 8019880:	ec59 8b10 	vmov	r8, r9, d0
 8019884:	f8ca 2000 	str.w	r2, [sl]
 8019888:	d043      	beq.n	8019912 <_scanf_float+0x38a>
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	e9c3 8900 	strd	r8, r9, [r3]
 8019890:	68e3      	ldr	r3, [r4, #12]
 8019892:	3301      	adds	r3, #1
 8019894:	60e3      	str	r3, [r4, #12]
 8019896:	e6be      	b.n	8019616 <_scanf_float+0x8e>
 8019898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801989c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80198a0:	4632      	mov	r2, r6
 80198a2:	4638      	mov	r0, r7
 80198a4:	4798      	blx	r3
 80198a6:	6923      	ldr	r3, [r4, #16]
 80198a8:	3b01      	subs	r3, #1
 80198aa:	6123      	str	r3, [r4, #16]
 80198ac:	e7a6      	b.n	80197fc <_scanf_float+0x274>
 80198ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80198b2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80198b6:	4632      	mov	r2, r6
 80198b8:	4638      	mov	r0, r7
 80198ba:	4798      	blx	r3
 80198bc:	6923      	ldr	r3, [r4, #16]
 80198be:	3b01      	subs	r3, #1
 80198c0:	6123      	str	r3, [r4, #16]
 80198c2:	4545      	cmp	r5, r8
 80198c4:	d8f3      	bhi.n	80198ae <_scanf_float+0x326>
 80198c6:	e6a5      	b.n	8019614 <_scanf_float+0x8c>
 80198c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80198cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80198d0:	4632      	mov	r2, r6
 80198d2:	4638      	mov	r0, r7
 80198d4:	4798      	blx	r3
 80198d6:	6923      	ldr	r3, [r4, #16]
 80198d8:	3b01      	subs	r3, #1
 80198da:	6123      	str	r3, [r4, #16]
 80198dc:	4545      	cmp	r5, r8
 80198de:	d8f3      	bhi.n	80198c8 <_scanf_float+0x340>
 80198e0:	e698      	b.n	8019614 <_scanf_float+0x8c>
 80198e2:	9b03      	ldr	r3, [sp, #12]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d0bf      	beq.n	8019868 <_scanf_float+0x2e0>
 80198e8:	9904      	ldr	r1, [sp, #16]
 80198ea:	230a      	movs	r3, #10
 80198ec:	4632      	mov	r2, r6
 80198ee:	3101      	adds	r1, #1
 80198f0:	4638      	mov	r0, r7
 80198f2:	f000 ff5d 	bl	801a7b0 <_strtol_r>
 80198f6:	9b03      	ldr	r3, [sp, #12]
 80198f8:	9d04      	ldr	r5, [sp, #16]
 80198fa:	1ac2      	subs	r2, r0, r3
 80198fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019900:	429d      	cmp	r5, r3
 8019902:	bf28      	it	cs
 8019904:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8019908:	490f      	ldr	r1, [pc, #60]	; (8019948 <_scanf_float+0x3c0>)
 801990a:	4628      	mov	r0, r5
 801990c:	f000 f834 	bl	8019978 <siprintf>
 8019910:	e7aa      	b.n	8019868 <_scanf_float+0x2e0>
 8019912:	f015 0504 	ands.w	r5, r5, #4
 8019916:	d1b8      	bne.n	801988a <_scanf_float+0x302>
 8019918:	681f      	ldr	r7, [r3, #0]
 801991a:	ee10 2a10 	vmov	r2, s0
 801991e:	464b      	mov	r3, r9
 8019920:	ee10 0a10 	vmov	r0, s0
 8019924:	4649      	mov	r1, r9
 8019926:	f7e7 f911 	bl	8000b4c <__aeabi_dcmpun>
 801992a:	b128      	cbz	r0, 8019938 <_scanf_float+0x3b0>
 801992c:	4628      	mov	r0, r5
 801992e:	f000 f81d 	bl	801996c <nanf>
 8019932:	ed87 0a00 	vstr	s0, [r7]
 8019936:	e7ab      	b.n	8019890 <_scanf_float+0x308>
 8019938:	4640      	mov	r0, r8
 801993a:	4649      	mov	r1, r9
 801993c:	f7e7 f964 	bl	8000c08 <__aeabi_d2f>
 8019940:	6038      	str	r0, [r7, #0]
 8019942:	e7a5      	b.n	8019890 <_scanf_float+0x308>
 8019944:	2600      	movs	r6, #0
 8019946:	e666      	b.n	8019616 <_scanf_float+0x8e>
 8019948:	08020448 	.word	0x08020448

0801994c <_sbrk_r>:
 801994c:	b538      	push	{r3, r4, r5, lr}
 801994e:	4c06      	ldr	r4, [pc, #24]	; (8019968 <_sbrk_r+0x1c>)
 8019950:	2300      	movs	r3, #0
 8019952:	4605      	mov	r5, r0
 8019954:	4608      	mov	r0, r1
 8019956:	6023      	str	r3, [r4, #0]
 8019958:	f7fe fb04 	bl	8017f64 <_sbrk>
 801995c:	1c43      	adds	r3, r0, #1
 801995e:	d102      	bne.n	8019966 <_sbrk_r+0x1a>
 8019960:	6823      	ldr	r3, [r4, #0]
 8019962:	b103      	cbz	r3, 8019966 <_sbrk_r+0x1a>
 8019964:	602b      	str	r3, [r5, #0]
 8019966:	bd38      	pop	{r3, r4, r5, pc}
 8019968:	2000bfc0 	.word	0x2000bfc0

0801996c <nanf>:
 801996c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019974 <nanf+0x8>
 8019970:	4770      	bx	lr
 8019972:	bf00      	nop
 8019974:	7fc00000 	.word	0x7fc00000

08019978 <siprintf>:
 8019978:	b40e      	push	{r1, r2, r3}
 801997a:	b500      	push	{lr}
 801997c:	b09c      	sub	sp, #112	; 0x70
 801997e:	ab1d      	add	r3, sp, #116	; 0x74
 8019980:	9002      	str	r0, [sp, #8]
 8019982:	9006      	str	r0, [sp, #24]
 8019984:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019988:	4809      	ldr	r0, [pc, #36]	; (80199b0 <siprintf+0x38>)
 801998a:	9107      	str	r1, [sp, #28]
 801998c:	9104      	str	r1, [sp, #16]
 801998e:	4909      	ldr	r1, [pc, #36]	; (80199b4 <siprintf+0x3c>)
 8019990:	f853 2b04 	ldr.w	r2, [r3], #4
 8019994:	9105      	str	r1, [sp, #20]
 8019996:	6800      	ldr	r0, [r0, #0]
 8019998:	9301      	str	r3, [sp, #4]
 801999a:	a902      	add	r1, sp, #8
 801999c:	f002 fd4a 	bl	801c434 <_svfiprintf_r>
 80199a0:	9b02      	ldr	r3, [sp, #8]
 80199a2:	2200      	movs	r2, #0
 80199a4:	701a      	strb	r2, [r3, #0]
 80199a6:	b01c      	add	sp, #112	; 0x70
 80199a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80199ac:	b003      	add	sp, #12
 80199ae:	4770      	bx	lr
 80199b0:	200001d4 	.word	0x200001d4
 80199b4:	ffff0208 	.word	0xffff0208

080199b8 <strcat>:
 80199b8:	b510      	push	{r4, lr}
 80199ba:	4603      	mov	r3, r0
 80199bc:	781a      	ldrb	r2, [r3, #0]
 80199be:	1c5c      	adds	r4, r3, #1
 80199c0:	b93a      	cbnz	r2, 80199d2 <strcat+0x1a>
 80199c2:	3b01      	subs	r3, #1
 80199c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80199c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80199cc:	2a00      	cmp	r2, #0
 80199ce:	d1f9      	bne.n	80199c4 <strcat+0xc>
 80199d0:	bd10      	pop	{r4, pc}
 80199d2:	4623      	mov	r3, r4
 80199d4:	e7f2      	b.n	80199bc <strcat+0x4>

080199d6 <strchr>:
 80199d6:	b2c9      	uxtb	r1, r1
 80199d8:	4603      	mov	r3, r0
 80199da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199de:	b11a      	cbz	r2, 80199e8 <strchr+0x12>
 80199e0:	428a      	cmp	r2, r1
 80199e2:	d1f9      	bne.n	80199d8 <strchr+0x2>
 80199e4:	4618      	mov	r0, r3
 80199e6:	4770      	bx	lr
 80199e8:	2900      	cmp	r1, #0
 80199ea:	bf18      	it	ne
 80199ec:	2300      	movne	r3, #0
 80199ee:	e7f9      	b.n	80199e4 <strchr+0xe>

080199f0 <strcpy>:
 80199f0:	4603      	mov	r3, r0
 80199f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80199f6:	f803 2b01 	strb.w	r2, [r3], #1
 80199fa:	2a00      	cmp	r2, #0
 80199fc:	d1f9      	bne.n	80199f2 <strcpy+0x2>
 80199fe:	4770      	bx	lr

08019a00 <strncmp>:
 8019a00:	b510      	push	{r4, lr}
 8019a02:	b16a      	cbz	r2, 8019a20 <strncmp+0x20>
 8019a04:	3901      	subs	r1, #1
 8019a06:	1884      	adds	r4, r0, r2
 8019a08:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019a0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019a10:	4293      	cmp	r3, r2
 8019a12:	d103      	bne.n	8019a1c <strncmp+0x1c>
 8019a14:	42a0      	cmp	r0, r4
 8019a16:	d001      	beq.n	8019a1c <strncmp+0x1c>
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d1f5      	bne.n	8019a08 <strncmp+0x8>
 8019a1c:	1a98      	subs	r0, r3, r2
 8019a1e:	bd10      	pop	{r4, pc}
 8019a20:	4610      	mov	r0, r2
 8019a22:	e7fc      	b.n	8019a1e <strncmp+0x1e>

08019a24 <strncpy>:
 8019a24:	b570      	push	{r4, r5, r6, lr}
 8019a26:	3901      	subs	r1, #1
 8019a28:	4604      	mov	r4, r0
 8019a2a:	b902      	cbnz	r2, 8019a2e <strncpy+0xa>
 8019a2c:	bd70      	pop	{r4, r5, r6, pc}
 8019a2e:	4623      	mov	r3, r4
 8019a30:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8019a34:	f803 5b01 	strb.w	r5, [r3], #1
 8019a38:	1e56      	subs	r6, r2, #1
 8019a3a:	b92d      	cbnz	r5, 8019a48 <strncpy+0x24>
 8019a3c:	4414      	add	r4, r2
 8019a3e:	42a3      	cmp	r3, r4
 8019a40:	d0f4      	beq.n	8019a2c <strncpy+0x8>
 8019a42:	f803 5b01 	strb.w	r5, [r3], #1
 8019a46:	e7fa      	b.n	8019a3e <strncpy+0x1a>
 8019a48:	461c      	mov	r4, r3
 8019a4a:	4632      	mov	r2, r6
 8019a4c:	e7ed      	b.n	8019a2a <strncpy+0x6>

08019a4e <sulp>:
 8019a4e:	b570      	push	{r4, r5, r6, lr}
 8019a50:	4604      	mov	r4, r0
 8019a52:	460d      	mov	r5, r1
 8019a54:	ec45 4b10 	vmov	d0, r4, r5
 8019a58:	4616      	mov	r6, r2
 8019a5a:	f002 fb4f 	bl	801c0fc <__ulp>
 8019a5e:	ec51 0b10 	vmov	r0, r1, d0
 8019a62:	b17e      	cbz	r6, 8019a84 <sulp+0x36>
 8019a64:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019a68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	dd09      	ble.n	8019a84 <sulp+0x36>
 8019a70:	051b      	lsls	r3, r3, #20
 8019a72:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019a76:	2400      	movs	r4, #0
 8019a78:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8019a7c:	4622      	mov	r2, r4
 8019a7e:	462b      	mov	r3, r5
 8019a80:	f7e6 fdca 	bl	8000618 <__aeabi_dmul>
 8019a84:	bd70      	pop	{r4, r5, r6, pc}
	...

08019a88 <_strtod_l>:
 8019a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a8c:	461f      	mov	r7, r3
 8019a8e:	b0a1      	sub	sp, #132	; 0x84
 8019a90:	2300      	movs	r3, #0
 8019a92:	4681      	mov	r9, r0
 8019a94:	4638      	mov	r0, r7
 8019a96:	460e      	mov	r6, r1
 8019a98:	9217      	str	r2, [sp, #92]	; 0x5c
 8019a9a:	931c      	str	r3, [sp, #112]	; 0x70
 8019a9c:	f002 f83d 	bl	801bb1a <__localeconv_l>
 8019aa0:	4680      	mov	r8, r0
 8019aa2:	6800      	ldr	r0, [r0, #0]
 8019aa4:	f7e6 fb9e 	bl	80001e4 <strlen>
 8019aa8:	f04f 0a00 	mov.w	sl, #0
 8019aac:	4604      	mov	r4, r0
 8019aae:	f04f 0b00 	mov.w	fp, #0
 8019ab2:	961b      	str	r6, [sp, #108]	; 0x6c
 8019ab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019ab6:	781a      	ldrb	r2, [r3, #0]
 8019ab8:	2a0d      	cmp	r2, #13
 8019aba:	d832      	bhi.n	8019b22 <_strtod_l+0x9a>
 8019abc:	2a09      	cmp	r2, #9
 8019abe:	d236      	bcs.n	8019b2e <_strtod_l+0xa6>
 8019ac0:	2a00      	cmp	r2, #0
 8019ac2:	d03e      	beq.n	8019b42 <_strtod_l+0xba>
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8019ac8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8019aca:	782b      	ldrb	r3, [r5, #0]
 8019acc:	2b30      	cmp	r3, #48	; 0x30
 8019ace:	f040 80ac 	bne.w	8019c2a <_strtod_l+0x1a2>
 8019ad2:	786b      	ldrb	r3, [r5, #1]
 8019ad4:	2b58      	cmp	r3, #88	; 0x58
 8019ad6:	d001      	beq.n	8019adc <_strtod_l+0x54>
 8019ad8:	2b78      	cmp	r3, #120	; 0x78
 8019ada:	d167      	bne.n	8019bac <_strtod_l+0x124>
 8019adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ade:	9301      	str	r3, [sp, #4]
 8019ae0:	ab1c      	add	r3, sp, #112	; 0x70
 8019ae2:	9300      	str	r3, [sp, #0]
 8019ae4:	9702      	str	r7, [sp, #8]
 8019ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8019ae8:	4a88      	ldr	r2, [pc, #544]	; (8019d0c <_strtod_l+0x284>)
 8019aea:	a91b      	add	r1, sp, #108	; 0x6c
 8019aec:	4648      	mov	r0, r9
 8019aee:	f001 fd3a 	bl	801b566 <__gethex>
 8019af2:	f010 0407 	ands.w	r4, r0, #7
 8019af6:	4606      	mov	r6, r0
 8019af8:	d005      	beq.n	8019b06 <_strtod_l+0x7e>
 8019afa:	2c06      	cmp	r4, #6
 8019afc:	d12b      	bne.n	8019b56 <_strtod_l+0xce>
 8019afe:	3501      	adds	r5, #1
 8019b00:	2300      	movs	r3, #0
 8019b02:	951b      	str	r5, [sp, #108]	; 0x6c
 8019b04:	930d      	str	r3, [sp, #52]	; 0x34
 8019b06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	f040 859a 	bne.w	801a642 <_strtod_l+0xbba>
 8019b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b10:	b1e3      	cbz	r3, 8019b4c <_strtod_l+0xc4>
 8019b12:	4652      	mov	r2, sl
 8019b14:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8019b18:	ec43 2b10 	vmov	d0, r2, r3
 8019b1c:	b021      	add	sp, #132	; 0x84
 8019b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b22:	2a2b      	cmp	r2, #43	; 0x2b
 8019b24:	d015      	beq.n	8019b52 <_strtod_l+0xca>
 8019b26:	2a2d      	cmp	r2, #45	; 0x2d
 8019b28:	d004      	beq.n	8019b34 <_strtod_l+0xac>
 8019b2a:	2a20      	cmp	r2, #32
 8019b2c:	d1ca      	bne.n	8019ac4 <_strtod_l+0x3c>
 8019b2e:	3301      	adds	r3, #1
 8019b30:	931b      	str	r3, [sp, #108]	; 0x6c
 8019b32:	e7bf      	b.n	8019ab4 <_strtod_l+0x2c>
 8019b34:	2201      	movs	r2, #1
 8019b36:	920d      	str	r2, [sp, #52]	; 0x34
 8019b38:	1c5a      	adds	r2, r3, #1
 8019b3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8019b3c:	785b      	ldrb	r3, [r3, #1]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d1c2      	bne.n	8019ac8 <_strtod_l+0x40>
 8019b42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019b44:	961b      	str	r6, [sp, #108]	; 0x6c
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	f040 8579 	bne.w	801a63e <_strtod_l+0xbb6>
 8019b4c:	4652      	mov	r2, sl
 8019b4e:	465b      	mov	r3, fp
 8019b50:	e7e2      	b.n	8019b18 <_strtod_l+0x90>
 8019b52:	2200      	movs	r2, #0
 8019b54:	e7ef      	b.n	8019b36 <_strtod_l+0xae>
 8019b56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019b58:	b13a      	cbz	r2, 8019b6a <_strtod_l+0xe2>
 8019b5a:	2135      	movs	r1, #53	; 0x35
 8019b5c:	a81e      	add	r0, sp, #120	; 0x78
 8019b5e:	f002 fbc5 	bl	801c2ec <__copybits>
 8019b62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019b64:	4648      	mov	r0, r9
 8019b66:	f002 f831 	bl	801bbcc <_Bfree>
 8019b6a:	3c01      	subs	r4, #1
 8019b6c:	2c04      	cmp	r4, #4
 8019b6e:	d806      	bhi.n	8019b7e <_strtod_l+0xf6>
 8019b70:	e8df f004 	tbb	[pc, r4]
 8019b74:	1714030a 	.word	0x1714030a
 8019b78:	0a          	.byte	0x0a
 8019b79:	00          	.byte	0x00
 8019b7a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8019b7e:	0730      	lsls	r0, r6, #28
 8019b80:	d5c1      	bpl.n	8019b06 <_strtod_l+0x7e>
 8019b82:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8019b86:	e7be      	b.n	8019b06 <_strtod_l+0x7e>
 8019b88:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8019b8c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019b8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019b92:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019b96:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019b9a:	e7f0      	b.n	8019b7e <_strtod_l+0xf6>
 8019b9c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8019d10 <_strtod_l+0x288>
 8019ba0:	e7ed      	b.n	8019b7e <_strtod_l+0xf6>
 8019ba2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8019ba6:	f04f 3aff 	mov.w	sl, #4294967295
 8019baa:	e7e8      	b.n	8019b7e <_strtod_l+0xf6>
 8019bac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019bae:	1c5a      	adds	r2, r3, #1
 8019bb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8019bb2:	785b      	ldrb	r3, [r3, #1]
 8019bb4:	2b30      	cmp	r3, #48	; 0x30
 8019bb6:	d0f9      	beq.n	8019bac <_strtod_l+0x124>
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d0a4      	beq.n	8019b06 <_strtod_l+0x7e>
 8019bbc:	2301      	movs	r3, #1
 8019bbe:	2500      	movs	r5, #0
 8019bc0:	9306      	str	r3, [sp, #24]
 8019bc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019bc4:	9308      	str	r3, [sp, #32]
 8019bc6:	9507      	str	r5, [sp, #28]
 8019bc8:	9505      	str	r5, [sp, #20]
 8019bca:	220a      	movs	r2, #10
 8019bcc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8019bce:	7807      	ldrb	r7, [r0, #0]
 8019bd0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8019bd4:	b2d9      	uxtb	r1, r3
 8019bd6:	2909      	cmp	r1, #9
 8019bd8:	d929      	bls.n	8019c2e <_strtod_l+0x1a6>
 8019bda:	4622      	mov	r2, r4
 8019bdc:	f8d8 1000 	ldr.w	r1, [r8]
 8019be0:	f7ff ff0e 	bl	8019a00 <strncmp>
 8019be4:	2800      	cmp	r0, #0
 8019be6:	d031      	beq.n	8019c4c <_strtod_l+0x1c4>
 8019be8:	2000      	movs	r0, #0
 8019bea:	9c05      	ldr	r4, [sp, #20]
 8019bec:	9004      	str	r0, [sp, #16]
 8019bee:	463b      	mov	r3, r7
 8019bf0:	4602      	mov	r2, r0
 8019bf2:	2b65      	cmp	r3, #101	; 0x65
 8019bf4:	d001      	beq.n	8019bfa <_strtod_l+0x172>
 8019bf6:	2b45      	cmp	r3, #69	; 0x45
 8019bf8:	d114      	bne.n	8019c24 <_strtod_l+0x19c>
 8019bfa:	b924      	cbnz	r4, 8019c06 <_strtod_l+0x17e>
 8019bfc:	b910      	cbnz	r0, 8019c04 <_strtod_l+0x17c>
 8019bfe:	9b06      	ldr	r3, [sp, #24]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d09e      	beq.n	8019b42 <_strtod_l+0xba>
 8019c04:	2400      	movs	r4, #0
 8019c06:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8019c08:	1c73      	adds	r3, r6, #1
 8019c0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8019c0c:	7873      	ldrb	r3, [r6, #1]
 8019c0e:	2b2b      	cmp	r3, #43	; 0x2b
 8019c10:	d078      	beq.n	8019d04 <_strtod_l+0x27c>
 8019c12:	2b2d      	cmp	r3, #45	; 0x2d
 8019c14:	d070      	beq.n	8019cf8 <_strtod_l+0x270>
 8019c16:	f04f 0c00 	mov.w	ip, #0
 8019c1a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8019c1e:	2f09      	cmp	r7, #9
 8019c20:	d97c      	bls.n	8019d1c <_strtod_l+0x294>
 8019c22:	961b      	str	r6, [sp, #108]	; 0x6c
 8019c24:	f04f 0e00 	mov.w	lr, #0
 8019c28:	e09a      	b.n	8019d60 <_strtod_l+0x2d8>
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	e7c7      	b.n	8019bbe <_strtod_l+0x136>
 8019c2e:	9905      	ldr	r1, [sp, #20]
 8019c30:	2908      	cmp	r1, #8
 8019c32:	bfdd      	ittte	le
 8019c34:	9907      	ldrle	r1, [sp, #28]
 8019c36:	fb02 3301 	mlale	r3, r2, r1, r3
 8019c3a:	9307      	strle	r3, [sp, #28]
 8019c3c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8019c40:	9b05      	ldr	r3, [sp, #20]
 8019c42:	3001      	adds	r0, #1
 8019c44:	3301      	adds	r3, #1
 8019c46:	9305      	str	r3, [sp, #20]
 8019c48:	901b      	str	r0, [sp, #108]	; 0x6c
 8019c4a:	e7bf      	b.n	8019bcc <_strtod_l+0x144>
 8019c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019c4e:	191a      	adds	r2, r3, r4
 8019c50:	921b      	str	r2, [sp, #108]	; 0x6c
 8019c52:	9a05      	ldr	r2, [sp, #20]
 8019c54:	5d1b      	ldrb	r3, [r3, r4]
 8019c56:	2a00      	cmp	r2, #0
 8019c58:	d037      	beq.n	8019cca <_strtod_l+0x242>
 8019c5a:	9c05      	ldr	r4, [sp, #20]
 8019c5c:	4602      	mov	r2, r0
 8019c5e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8019c62:	2909      	cmp	r1, #9
 8019c64:	d913      	bls.n	8019c8e <_strtod_l+0x206>
 8019c66:	2101      	movs	r1, #1
 8019c68:	9104      	str	r1, [sp, #16]
 8019c6a:	e7c2      	b.n	8019bf2 <_strtod_l+0x16a>
 8019c6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019c6e:	1c5a      	adds	r2, r3, #1
 8019c70:	921b      	str	r2, [sp, #108]	; 0x6c
 8019c72:	785b      	ldrb	r3, [r3, #1]
 8019c74:	3001      	adds	r0, #1
 8019c76:	2b30      	cmp	r3, #48	; 0x30
 8019c78:	d0f8      	beq.n	8019c6c <_strtod_l+0x1e4>
 8019c7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8019c7e:	2a08      	cmp	r2, #8
 8019c80:	f200 84e4 	bhi.w	801a64c <_strtod_l+0xbc4>
 8019c84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019c86:	9208      	str	r2, [sp, #32]
 8019c88:	4602      	mov	r2, r0
 8019c8a:	2000      	movs	r0, #0
 8019c8c:	4604      	mov	r4, r0
 8019c8e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8019c92:	f100 0101 	add.w	r1, r0, #1
 8019c96:	d012      	beq.n	8019cbe <_strtod_l+0x236>
 8019c98:	440a      	add	r2, r1
 8019c9a:	eb00 0c04 	add.w	ip, r0, r4
 8019c9e:	4621      	mov	r1, r4
 8019ca0:	270a      	movs	r7, #10
 8019ca2:	458c      	cmp	ip, r1
 8019ca4:	d113      	bne.n	8019cce <_strtod_l+0x246>
 8019ca6:	1821      	adds	r1, r4, r0
 8019ca8:	2908      	cmp	r1, #8
 8019caa:	f104 0401 	add.w	r4, r4, #1
 8019cae:	4404      	add	r4, r0
 8019cb0:	dc19      	bgt.n	8019ce6 <_strtod_l+0x25e>
 8019cb2:	9b07      	ldr	r3, [sp, #28]
 8019cb4:	210a      	movs	r1, #10
 8019cb6:	fb01 e303 	mla	r3, r1, r3, lr
 8019cba:	9307      	str	r3, [sp, #28]
 8019cbc:	2100      	movs	r1, #0
 8019cbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019cc0:	1c58      	adds	r0, r3, #1
 8019cc2:	901b      	str	r0, [sp, #108]	; 0x6c
 8019cc4:	785b      	ldrb	r3, [r3, #1]
 8019cc6:	4608      	mov	r0, r1
 8019cc8:	e7c9      	b.n	8019c5e <_strtod_l+0x1d6>
 8019cca:	9805      	ldr	r0, [sp, #20]
 8019ccc:	e7d3      	b.n	8019c76 <_strtod_l+0x1ee>
 8019cce:	2908      	cmp	r1, #8
 8019cd0:	f101 0101 	add.w	r1, r1, #1
 8019cd4:	dc03      	bgt.n	8019cde <_strtod_l+0x256>
 8019cd6:	9b07      	ldr	r3, [sp, #28]
 8019cd8:	437b      	muls	r3, r7
 8019cda:	9307      	str	r3, [sp, #28]
 8019cdc:	e7e1      	b.n	8019ca2 <_strtod_l+0x21a>
 8019cde:	2910      	cmp	r1, #16
 8019ce0:	bfd8      	it	le
 8019ce2:	437d      	mulle	r5, r7
 8019ce4:	e7dd      	b.n	8019ca2 <_strtod_l+0x21a>
 8019ce6:	2c10      	cmp	r4, #16
 8019ce8:	bfdc      	itt	le
 8019cea:	210a      	movle	r1, #10
 8019cec:	fb01 e505 	mlale	r5, r1, r5, lr
 8019cf0:	e7e4      	b.n	8019cbc <_strtod_l+0x234>
 8019cf2:	2301      	movs	r3, #1
 8019cf4:	9304      	str	r3, [sp, #16]
 8019cf6:	e781      	b.n	8019bfc <_strtod_l+0x174>
 8019cf8:	f04f 0c01 	mov.w	ip, #1
 8019cfc:	1cb3      	adds	r3, r6, #2
 8019cfe:	931b      	str	r3, [sp, #108]	; 0x6c
 8019d00:	78b3      	ldrb	r3, [r6, #2]
 8019d02:	e78a      	b.n	8019c1a <_strtod_l+0x192>
 8019d04:	f04f 0c00 	mov.w	ip, #0
 8019d08:	e7f8      	b.n	8019cfc <_strtod_l+0x274>
 8019d0a:	bf00      	nop
 8019d0c:	08020450 	.word	0x08020450
 8019d10:	7ff00000 	.word	0x7ff00000
 8019d14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019d16:	1c5f      	adds	r7, r3, #1
 8019d18:	971b      	str	r7, [sp, #108]	; 0x6c
 8019d1a:	785b      	ldrb	r3, [r3, #1]
 8019d1c:	2b30      	cmp	r3, #48	; 0x30
 8019d1e:	d0f9      	beq.n	8019d14 <_strtod_l+0x28c>
 8019d20:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8019d24:	2f08      	cmp	r7, #8
 8019d26:	f63f af7d 	bhi.w	8019c24 <_strtod_l+0x19c>
 8019d2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8019d2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019d30:	930a      	str	r3, [sp, #40]	; 0x28
 8019d32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019d34:	1c5f      	adds	r7, r3, #1
 8019d36:	971b      	str	r7, [sp, #108]	; 0x6c
 8019d38:	785b      	ldrb	r3, [r3, #1]
 8019d3a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8019d3e:	f1b8 0f09 	cmp.w	r8, #9
 8019d42:	d937      	bls.n	8019db4 <_strtod_l+0x32c>
 8019d44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019d46:	1a7f      	subs	r7, r7, r1
 8019d48:	2f08      	cmp	r7, #8
 8019d4a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8019d4e:	dc37      	bgt.n	8019dc0 <_strtod_l+0x338>
 8019d50:	45be      	cmp	lr, r7
 8019d52:	bfa8      	it	ge
 8019d54:	46be      	movge	lr, r7
 8019d56:	f1bc 0f00 	cmp.w	ip, #0
 8019d5a:	d001      	beq.n	8019d60 <_strtod_l+0x2d8>
 8019d5c:	f1ce 0e00 	rsb	lr, lr, #0
 8019d60:	2c00      	cmp	r4, #0
 8019d62:	d151      	bne.n	8019e08 <_strtod_l+0x380>
 8019d64:	2800      	cmp	r0, #0
 8019d66:	f47f aece 	bne.w	8019b06 <_strtod_l+0x7e>
 8019d6a:	9a06      	ldr	r2, [sp, #24]
 8019d6c:	2a00      	cmp	r2, #0
 8019d6e:	f47f aeca 	bne.w	8019b06 <_strtod_l+0x7e>
 8019d72:	9a04      	ldr	r2, [sp, #16]
 8019d74:	2a00      	cmp	r2, #0
 8019d76:	f47f aee4 	bne.w	8019b42 <_strtod_l+0xba>
 8019d7a:	2b4e      	cmp	r3, #78	; 0x4e
 8019d7c:	d027      	beq.n	8019dce <_strtod_l+0x346>
 8019d7e:	dc21      	bgt.n	8019dc4 <_strtod_l+0x33c>
 8019d80:	2b49      	cmp	r3, #73	; 0x49
 8019d82:	f47f aede 	bne.w	8019b42 <_strtod_l+0xba>
 8019d86:	49a0      	ldr	r1, [pc, #640]	; (801a008 <_strtod_l+0x580>)
 8019d88:	a81b      	add	r0, sp, #108	; 0x6c
 8019d8a:	f001 fe1f 	bl	801b9cc <__match>
 8019d8e:	2800      	cmp	r0, #0
 8019d90:	f43f aed7 	beq.w	8019b42 <_strtod_l+0xba>
 8019d94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019d96:	499d      	ldr	r1, [pc, #628]	; (801a00c <_strtod_l+0x584>)
 8019d98:	3b01      	subs	r3, #1
 8019d9a:	a81b      	add	r0, sp, #108	; 0x6c
 8019d9c:	931b      	str	r3, [sp, #108]	; 0x6c
 8019d9e:	f001 fe15 	bl	801b9cc <__match>
 8019da2:	b910      	cbnz	r0, 8019daa <_strtod_l+0x322>
 8019da4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019da6:	3301      	adds	r3, #1
 8019da8:	931b      	str	r3, [sp, #108]	; 0x6c
 8019daa:	f8df b274 	ldr.w	fp, [pc, #628]	; 801a020 <_strtod_l+0x598>
 8019dae:	f04f 0a00 	mov.w	sl, #0
 8019db2:	e6a8      	b.n	8019b06 <_strtod_l+0x7e>
 8019db4:	210a      	movs	r1, #10
 8019db6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8019dba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8019dbe:	e7b8      	b.n	8019d32 <_strtod_l+0x2aa>
 8019dc0:	46be      	mov	lr, r7
 8019dc2:	e7c8      	b.n	8019d56 <_strtod_l+0x2ce>
 8019dc4:	2b69      	cmp	r3, #105	; 0x69
 8019dc6:	d0de      	beq.n	8019d86 <_strtod_l+0x2fe>
 8019dc8:	2b6e      	cmp	r3, #110	; 0x6e
 8019dca:	f47f aeba 	bne.w	8019b42 <_strtod_l+0xba>
 8019dce:	4990      	ldr	r1, [pc, #576]	; (801a010 <_strtod_l+0x588>)
 8019dd0:	a81b      	add	r0, sp, #108	; 0x6c
 8019dd2:	f001 fdfb 	bl	801b9cc <__match>
 8019dd6:	2800      	cmp	r0, #0
 8019dd8:	f43f aeb3 	beq.w	8019b42 <_strtod_l+0xba>
 8019ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019dde:	781b      	ldrb	r3, [r3, #0]
 8019de0:	2b28      	cmp	r3, #40	; 0x28
 8019de2:	d10e      	bne.n	8019e02 <_strtod_l+0x37a>
 8019de4:	aa1e      	add	r2, sp, #120	; 0x78
 8019de6:	498b      	ldr	r1, [pc, #556]	; (801a014 <_strtod_l+0x58c>)
 8019de8:	a81b      	add	r0, sp, #108	; 0x6c
 8019dea:	f001 fe03 	bl	801b9f4 <__hexnan>
 8019dee:	2805      	cmp	r0, #5
 8019df0:	d107      	bne.n	8019e02 <_strtod_l+0x37a>
 8019df2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019df4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8019df8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8019dfc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8019e00:	e681      	b.n	8019b06 <_strtod_l+0x7e>
 8019e02:	f8df b224 	ldr.w	fp, [pc, #548]	; 801a028 <_strtod_l+0x5a0>
 8019e06:	e7d2      	b.n	8019dae <_strtod_l+0x326>
 8019e08:	ebae 0302 	sub.w	r3, lr, r2
 8019e0c:	9306      	str	r3, [sp, #24]
 8019e0e:	9b05      	ldr	r3, [sp, #20]
 8019e10:	9807      	ldr	r0, [sp, #28]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	bf08      	it	eq
 8019e16:	4623      	moveq	r3, r4
 8019e18:	2c10      	cmp	r4, #16
 8019e1a:	9305      	str	r3, [sp, #20]
 8019e1c:	46a0      	mov	r8, r4
 8019e1e:	bfa8      	it	ge
 8019e20:	f04f 0810 	movge.w	r8, #16
 8019e24:	f7e6 fb7e 	bl	8000524 <__aeabi_ui2d>
 8019e28:	2c09      	cmp	r4, #9
 8019e2a:	4682      	mov	sl, r0
 8019e2c:	468b      	mov	fp, r1
 8019e2e:	dc13      	bgt.n	8019e58 <_strtod_l+0x3d0>
 8019e30:	9b06      	ldr	r3, [sp, #24]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	f43f ae67 	beq.w	8019b06 <_strtod_l+0x7e>
 8019e38:	9b06      	ldr	r3, [sp, #24]
 8019e3a:	dd7a      	ble.n	8019f32 <_strtod_l+0x4aa>
 8019e3c:	2b16      	cmp	r3, #22
 8019e3e:	dc61      	bgt.n	8019f04 <_strtod_l+0x47c>
 8019e40:	4a75      	ldr	r2, [pc, #468]	; (801a018 <_strtod_l+0x590>)
 8019e42:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8019e46:	e9de 0100 	ldrd	r0, r1, [lr]
 8019e4a:	4652      	mov	r2, sl
 8019e4c:	465b      	mov	r3, fp
 8019e4e:	f7e6 fbe3 	bl	8000618 <__aeabi_dmul>
 8019e52:	4682      	mov	sl, r0
 8019e54:	468b      	mov	fp, r1
 8019e56:	e656      	b.n	8019b06 <_strtod_l+0x7e>
 8019e58:	4b6f      	ldr	r3, [pc, #444]	; (801a018 <_strtod_l+0x590>)
 8019e5a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019e5e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8019e62:	f7e6 fbd9 	bl	8000618 <__aeabi_dmul>
 8019e66:	4606      	mov	r6, r0
 8019e68:	4628      	mov	r0, r5
 8019e6a:	460f      	mov	r7, r1
 8019e6c:	f7e6 fb5a 	bl	8000524 <__aeabi_ui2d>
 8019e70:	4602      	mov	r2, r0
 8019e72:	460b      	mov	r3, r1
 8019e74:	4630      	mov	r0, r6
 8019e76:	4639      	mov	r1, r7
 8019e78:	f7e6 fa18 	bl	80002ac <__adddf3>
 8019e7c:	2c0f      	cmp	r4, #15
 8019e7e:	4682      	mov	sl, r0
 8019e80:	468b      	mov	fp, r1
 8019e82:	ddd5      	ble.n	8019e30 <_strtod_l+0x3a8>
 8019e84:	9b06      	ldr	r3, [sp, #24]
 8019e86:	eba4 0808 	sub.w	r8, r4, r8
 8019e8a:	4498      	add	r8, r3
 8019e8c:	f1b8 0f00 	cmp.w	r8, #0
 8019e90:	f340 8096 	ble.w	8019fc0 <_strtod_l+0x538>
 8019e94:	f018 030f 	ands.w	r3, r8, #15
 8019e98:	d00a      	beq.n	8019eb0 <_strtod_l+0x428>
 8019e9a:	495f      	ldr	r1, [pc, #380]	; (801a018 <_strtod_l+0x590>)
 8019e9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019ea0:	4652      	mov	r2, sl
 8019ea2:	465b      	mov	r3, fp
 8019ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ea8:	f7e6 fbb6 	bl	8000618 <__aeabi_dmul>
 8019eac:	4682      	mov	sl, r0
 8019eae:	468b      	mov	fp, r1
 8019eb0:	f038 080f 	bics.w	r8, r8, #15
 8019eb4:	d073      	beq.n	8019f9e <_strtod_l+0x516>
 8019eb6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8019eba:	dd47      	ble.n	8019f4c <_strtod_l+0x4c4>
 8019ebc:	2400      	movs	r4, #0
 8019ebe:	46a0      	mov	r8, r4
 8019ec0:	9407      	str	r4, [sp, #28]
 8019ec2:	9405      	str	r4, [sp, #20]
 8019ec4:	2322      	movs	r3, #34	; 0x22
 8019ec6:	f8df b158 	ldr.w	fp, [pc, #344]	; 801a020 <_strtod_l+0x598>
 8019eca:	f8c9 3000 	str.w	r3, [r9]
 8019ece:	f04f 0a00 	mov.w	sl, #0
 8019ed2:	9b07      	ldr	r3, [sp, #28]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	f43f ae16 	beq.w	8019b06 <_strtod_l+0x7e>
 8019eda:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019edc:	4648      	mov	r0, r9
 8019ede:	f001 fe75 	bl	801bbcc <_Bfree>
 8019ee2:	9905      	ldr	r1, [sp, #20]
 8019ee4:	4648      	mov	r0, r9
 8019ee6:	f001 fe71 	bl	801bbcc <_Bfree>
 8019eea:	4641      	mov	r1, r8
 8019eec:	4648      	mov	r0, r9
 8019eee:	f001 fe6d 	bl	801bbcc <_Bfree>
 8019ef2:	9907      	ldr	r1, [sp, #28]
 8019ef4:	4648      	mov	r0, r9
 8019ef6:	f001 fe69 	bl	801bbcc <_Bfree>
 8019efa:	4621      	mov	r1, r4
 8019efc:	4648      	mov	r0, r9
 8019efe:	f001 fe65 	bl	801bbcc <_Bfree>
 8019f02:	e600      	b.n	8019b06 <_strtod_l+0x7e>
 8019f04:	9a06      	ldr	r2, [sp, #24]
 8019f06:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8019f0a:	4293      	cmp	r3, r2
 8019f0c:	dbba      	blt.n	8019e84 <_strtod_l+0x3fc>
 8019f0e:	4d42      	ldr	r5, [pc, #264]	; (801a018 <_strtod_l+0x590>)
 8019f10:	f1c4 040f 	rsb	r4, r4, #15
 8019f14:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8019f18:	4652      	mov	r2, sl
 8019f1a:	465b      	mov	r3, fp
 8019f1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f20:	f7e6 fb7a 	bl	8000618 <__aeabi_dmul>
 8019f24:	9b06      	ldr	r3, [sp, #24]
 8019f26:	1b1c      	subs	r4, r3, r4
 8019f28:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8019f2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019f30:	e78d      	b.n	8019e4e <_strtod_l+0x3c6>
 8019f32:	f113 0f16 	cmn.w	r3, #22
 8019f36:	dba5      	blt.n	8019e84 <_strtod_l+0x3fc>
 8019f38:	4a37      	ldr	r2, [pc, #220]	; (801a018 <_strtod_l+0x590>)
 8019f3a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8019f3e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8019f42:	4650      	mov	r0, sl
 8019f44:	4659      	mov	r1, fp
 8019f46:	f7e6 fc91 	bl	800086c <__aeabi_ddiv>
 8019f4a:	e782      	b.n	8019e52 <_strtod_l+0x3ca>
 8019f4c:	2300      	movs	r3, #0
 8019f4e:	4e33      	ldr	r6, [pc, #204]	; (801a01c <_strtod_l+0x594>)
 8019f50:	ea4f 1828 	mov.w	r8, r8, asr #4
 8019f54:	4650      	mov	r0, sl
 8019f56:	4659      	mov	r1, fp
 8019f58:	461d      	mov	r5, r3
 8019f5a:	f1b8 0f01 	cmp.w	r8, #1
 8019f5e:	dc21      	bgt.n	8019fa4 <_strtod_l+0x51c>
 8019f60:	b10b      	cbz	r3, 8019f66 <_strtod_l+0x4de>
 8019f62:	4682      	mov	sl, r0
 8019f64:	468b      	mov	fp, r1
 8019f66:	4b2d      	ldr	r3, [pc, #180]	; (801a01c <_strtod_l+0x594>)
 8019f68:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8019f6c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8019f70:	4652      	mov	r2, sl
 8019f72:	465b      	mov	r3, fp
 8019f74:	e9d5 0100 	ldrd	r0, r1, [r5]
 8019f78:	f7e6 fb4e 	bl	8000618 <__aeabi_dmul>
 8019f7c:	4b28      	ldr	r3, [pc, #160]	; (801a020 <_strtod_l+0x598>)
 8019f7e:	460a      	mov	r2, r1
 8019f80:	400b      	ands	r3, r1
 8019f82:	4928      	ldr	r1, [pc, #160]	; (801a024 <_strtod_l+0x59c>)
 8019f84:	428b      	cmp	r3, r1
 8019f86:	4682      	mov	sl, r0
 8019f88:	d898      	bhi.n	8019ebc <_strtod_l+0x434>
 8019f8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8019f8e:	428b      	cmp	r3, r1
 8019f90:	bf86      	itte	hi
 8019f92:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801a02c <_strtod_l+0x5a4>
 8019f96:	f04f 3aff 	movhi.w	sl, #4294967295
 8019f9a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	9304      	str	r3, [sp, #16]
 8019fa2:	e077      	b.n	801a094 <_strtod_l+0x60c>
 8019fa4:	f018 0f01 	tst.w	r8, #1
 8019fa8:	d006      	beq.n	8019fb8 <_strtod_l+0x530>
 8019faa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8019fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fb2:	f7e6 fb31 	bl	8000618 <__aeabi_dmul>
 8019fb6:	2301      	movs	r3, #1
 8019fb8:	3501      	adds	r5, #1
 8019fba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8019fbe:	e7cc      	b.n	8019f5a <_strtod_l+0x4d2>
 8019fc0:	d0ed      	beq.n	8019f9e <_strtod_l+0x516>
 8019fc2:	f1c8 0800 	rsb	r8, r8, #0
 8019fc6:	f018 020f 	ands.w	r2, r8, #15
 8019fca:	d00a      	beq.n	8019fe2 <_strtod_l+0x55a>
 8019fcc:	4b12      	ldr	r3, [pc, #72]	; (801a018 <_strtod_l+0x590>)
 8019fce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019fd2:	4650      	mov	r0, sl
 8019fd4:	4659      	mov	r1, fp
 8019fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fda:	f7e6 fc47 	bl	800086c <__aeabi_ddiv>
 8019fde:	4682      	mov	sl, r0
 8019fe0:	468b      	mov	fp, r1
 8019fe2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8019fe6:	d0da      	beq.n	8019f9e <_strtod_l+0x516>
 8019fe8:	f1b8 0f1f 	cmp.w	r8, #31
 8019fec:	dd20      	ble.n	801a030 <_strtod_l+0x5a8>
 8019fee:	2400      	movs	r4, #0
 8019ff0:	46a0      	mov	r8, r4
 8019ff2:	9407      	str	r4, [sp, #28]
 8019ff4:	9405      	str	r4, [sp, #20]
 8019ff6:	2322      	movs	r3, #34	; 0x22
 8019ff8:	f04f 0a00 	mov.w	sl, #0
 8019ffc:	f04f 0b00 	mov.w	fp, #0
 801a000:	f8c9 3000 	str.w	r3, [r9]
 801a004:	e765      	b.n	8019ed2 <_strtod_l+0x44a>
 801a006:	bf00      	nop
 801a008:	08020419 	.word	0x08020419
 801a00c:	080204a3 	.word	0x080204a3
 801a010:	08020421 	.word	0x08020421
 801a014:	08020464 	.word	0x08020464
 801a018:	080204e0 	.word	0x080204e0
 801a01c:	080204b8 	.word	0x080204b8
 801a020:	7ff00000 	.word	0x7ff00000
 801a024:	7ca00000 	.word	0x7ca00000
 801a028:	fff80000 	.word	0xfff80000
 801a02c:	7fefffff 	.word	0x7fefffff
 801a030:	f018 0310 	ands.w	r3, r8, #16
 801a034:	bf18      	it	ne
 801a036:	236a      	movne	r3, #106	; 0x6a
 801a038:	4da0      	ldr	r5, [pc, #640]	; (801a2bc <_strtod_l+0x834>)
 801a03a:	9304      	str	r3, [sp, #16]
 801a03c:	4650      	mov	r0, sl
 801a03e:	4659      	mov	r1, fp
 801a040:	2300      	movs	r3, #0
 801a042:	f1b8 0f00 	cmp.w	r8, #0
 801a046:	f300 810a 	bgt.w	801a25e <_strtod_l+0x7d6>
 801a04a:	b10b      	cbz	r3, 801a050 <_strtod_l+0x5c8>
 801a04c:	4682      	mov	sl, r0
 801a04e:	468b      	mov	fp, r1
 801a050:	9b04      	ldr	r3, [sp, #16]
 801a052:	b1bb      	cbz	r3, 801a084 <_strtod_l+0x5fc>
 801a054:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801a058:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	4659      	mov	r1, fp
 801a060:	dd10      	ble.n	801a084 <_strtod_l+0x5fc>
 801a062:	2b1f      	cmp	r3, #31
 801a064:	f340 8107 	ble.w	801a276 <_strtod_l+0x7ee>
 801a068:	2b34      	cmp	r3, #52	; 0x34
 801a06a:	bfde      	ittt	le
 801a06c:	3b20      	suble	r3, #32
 801a06e:	f04f 32ff 	movle.w	r2, #4294967295
 801a072:	fa02 f303 	lslle.w	r3, r2, r3
 801a076:	f04f 0a00 	mov.w	sl, #0
 801a07a:	bfcc      	ite	gt
 801a07c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a080:	ea03 0b01 	andle.w	fp, r3, r1
 801a084:	2200      	movs	r2, #0
 801a086:	2300      	movs	r3, #0
 801a088:	4650      	mov	r0, sl
 801a08a:	4659      	mov	r1, fp
 801a08c:	f7e6 fd2c 	bl	8000ae8 <__aeabi_dcmpeq>
 801a090:	2800      	cmp	r0, #0
 801a092:	d1ac      	bne.n	8019fee <_strtod_l+0x566>
 801a094:	9b07      	ldr	r3, [sp, #28]
 801a096:	9300      	str	r3, [sp, #0]
 801a098:	9a05      	ldr	r2, [sp, #20]
 801a09a:	9908      	ldr	r1, [sp, #32]
 801a09c:	4623      	mov	r3, r4
 801a09e:	4648      	mov	r0, r9
 801a0a0:	f001 fde6 	bl	801bc70 <__s2b>
 801a0a4:	9007      	str	r0, [sp, #28]
 801a0a6:	2800      	cmp	r0, #0
 801a0a8:	f43f af08 	beq.w	8019ebc <_strtod_l+0x434>
 801a0ac:	9a06      	ldr	r2, [sp, #24]
 801a0ae:	9b06      	ldr	r3, [sp, #24]
 801a0b0:	2a00      	cmp	r2, #0
 801a0b2:	f1c3 0300 	rsb	r3, r3, #0
 801a0b6:	bfa8      	it	ge
 801a0b8:	2300      	movge	r3, #0
 801a0ba:	930e      	str	r3, [sp, #56]	; 0x38
 801a0bc:	2400      	movs	r4, #0
 801a0be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a0c2:	9316      	str	r3, [sp, #88]	; 0x58
 801a0c4:	46a0      	mov	r8, r4
 801a0c6:	9b07      	ldr	r3, [sp, #28]
 801a0c8:	4648      	mov	r0, r9
 801a0ca:	6859      	ldr	r1, [r3, #4]
 801a0cc:	f001 fd4a 	bl	801bb64 <_Balloc>
 801a0d0:	9005      	str	r0, [sp, #20]
 801a0d2:	2800      	cmp	r0, #0
 801a0d4:	f43f aef6 	beq.w	8019ec4 <_strtod_l+0x43c>
 801a0d8:	9b07      	ldr	r3, [sp, #28]
 801a0da:	691a      	ldr	r2, [r3, #16]
 801a0dc:	3202      	adds	r2, #2
 801a0de:	f103 010c 	add.w	r1, r3, #12
 801a0e2:	0092      	lsls	r2, r2, #2
 801a0e4:	300c      	adds	r0, #12
 801a0e6:	f7fe fd37 	bl	8018b58 <memcpy>
 801a0ea:	aa1e      	add	r2, sp, #120	; 0x78
 801a0ec:	a91d      	add	r1, sp, #116	; 0x74
 801a0ee:	ec4b ab10 	vmov	d0, sl, fp
 801a0f2:	4648      	mov	r0, r9
 801a0f4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801a0f8:	f002 f876 	bl	801c1e8 <__d2b>
 801a0fc:	901c      	str	r0, [sp, #112]	; 0x70
 801a0fe:	2800      	cmp	r0, #0
 801a100:	f43f aee0 	beq.w	8019ec4 <_strtod_l+0x43c>
 801a104:	2101      	movs	r1, #1
 801a106:	4648      	mov	r0, r9
 801a108:	f001 fe3e 	bl	801bd88 <__i2b>
 801a10c:	4680      	mov	r8, r0
 801a10e:	2800      	cmp	r0, #0
 801a110:	f43f aed8 	beq.w	8019ec4 <_strtod_l+0x43c>
 801a114:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801a116:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a118:	2e00      	cmp	r6, #0
 801a11a:	bfab      	itete	ge
 801a11c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801a11e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801a120:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801a122:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801a124:	bfac      	ite	ge
 801a126:	18f7      	addge	r7, r6, r3
 801a128:	1b9d      	sublt	r5, r3, r6
 801a12a:	9b04      	ldr	r3, [sp, #16]
 801a12c:	1af6      	subs	r6, r6, r3
 801a12e:	4416      	add	r6, r2
 801a130:	4b63      	ldr	r3, [pc, #396]	; (801a2c0 <_strtod_l+0x838>)
 801a132:	3e01      	subs	r6, #1
 801a134:	429e      	cmp	r6, r3
 801a136:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a13a:	f280 80af 	bge.w	801a29c <_strtod_l+0x814>
 801a13e:	1b9b      	subs	r3, r3, r6
 801a140:	2b1f      	cmp	r3, #31
 801a142:	eba2 0203 	sub.w	r2, r2, r3
 801a146:	f04f 0101 	mov.w	r1, #1
 801a14a:	f300 809b 	bgt.w	801a284 <_strtod_l+0x7fc>
 801a14e:	fa01 f303 	lsl.w	r3, r1, r3
 801a152:	930f      	str	r3, [sp, #60]	; 0x3c
 801a154:	2300      	movs	r3, #0
 801a156:	930a      	str	r3, [sp, #40]	; 0x28
 801a158:	18be      	adds	r6, r7, r2
 801a15a:	9b04      	ldr	r3, [sp, #16]
 801a15c:	42b7      	cmp	r7, r6
 801a15e:	4415      	add	r5, r2
 801a160:	441d      	add	r5, r3
 801a162:	463b      	mov	r3, r7
 801a164:	bfa8      	it	ge
 801a166:	4633      	movge	r3, r6
 801a168:	42ab      	cmp	r3, r5
 801a16a:	bfa8      	it	ge
 801a16c:	462b      	movge	r3, r5
 801a16e:	2b00      	cmp	r3, #0
 801a170:	bfc2      	ittt	gt
 801a172:	1af6      	subgt	r6, r6, r3
 801a174:	1aed      	subgt	r5, r5, r3
 801a176:	1aff      	subgt	r7, r7, r3
 801a178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a17a:	b1bb      	cbz	r3, 801a1ac <_strtod_l+0x724>
 801a17c:	4641      	mov	r1, r8
 801a17e:	461a      	mov	r2, r3
 801a180:	4648      	mov	r0, r9
 801a182:	f001 fea1 	bl	801bec8 <__pow5mult>
 801a186:	4680      	mov	r8, r0
 801a188:	2800      	cmp	r0, #0
 801a18a:	f43f ae9b 	beq.w	8019ec4 <_strtod_l+0x43c>
 801a18e:	4601      	mov	r1, r0
 801a190:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a192:	4648      	mov	r0, r9
 801a194:	f001 fe01 	bl	801bd9a <__multiply>
 801a198:	900c      	str	r0, [sp, #48]	; 0x30
 801a19a:	2800      	cmp	r0, #0
 801a19c:	f43f ae92 	beq.w	8019ec4 <_strtod_l+0x43c>
 801a1a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a1a2:	4648      	mov	r0, r9
 801a1a4:	f001 fd12 	bl	801bbcc <_Bfree>
 801a1a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a1aa:	931c      	str	r3, [sp, #112]	; 0x70
 801a1ac:	2e00      	cmp	r6, #0
 801a1ae:	dc7a      	bgt.n	801a2a6 <_strtod_l+0x81e>
 801a1b0:	9b06      	ldr	r3, [sp, #24]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	dd08      	ble.n	801a1c8 <_strtod_l+0x740>
 801a1b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a1b8:	9905      	ldr	r1, [sp, #20]
 801a1ba:	4648      	mov	r0, r9
 801a1bc:	f001 fe84 	bl	801bec8 <__pow5mult>
 801a1c0:	9005      	str	r0, [sp, #20]
 801a1c2:	2800      	cmp	r0, #0
 801a1c4:	f43f ae7e 	beq.w	8019ec4 <_strtod_l+0x43c>
 801a1c8:	2d00      	cmp	r5, #0
 801a1ca:	dd08      	ble.n	801a1de <_strtod_l+0x756>
 801a1cc:	462a      	mov	r2, r5
 801a1ce:	9905      	ldr	r1, [sp, #20]
 801a1d0:	4648      	mov	r0, r9
 801a1d2:	f001 fec7 	bl	801bf64 <__lshift>
 801a1d6:	9005      	str	r0, [sp, #20]
 801a1d8:	2800      	cmp	r0, #0
 801a1da:	f43f ae73 	beq.w	8019ec4 <_strtod_l+0x43c>
 801a1de:	2f00      	cmp	r7, #0
 801a1e0:	dd08      	ble.n	801a1f4 <_strtod_l+0x76c>
 801a1e2:	4641      	mov	r1, r8
 801a1e4:	463a      	mov	r2, r7
 801a1e6:	4648      	mov	r0, r9
 801a1e8:	f001 febc 	bl	801bf64 <__lshift>
 801a1ec:	4680      	mov	r8, r0
 801a1ee:	2800      	cmp	r0, #0
 801a1f0:	f43f ae68 	beq.w	8019ec4 <_strtod_l+0x43c>
 801a1f4:	9a05      	ldr	r2, [sp, #20]
 801a1f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a1f8:	4648      	mov	r0, r9
 801a1fa:	f001 ff21 	bl	801c040 <__mdiff>
 801a1fe:	4604      	mov	r4, r0
 801a200:	2800      	cmp	r0, #0
 801a202:	f43f ae5f 	beq.w	8019ec4 <_strtod_l+0x43c>
 801a206:	68c3      	ldr	r3, [r0, #12]
 801a208:	930c      	str	r3, [sp, #48]	; 0x30
 801a20a:	2300      	movs	r3, #0
 801a20c:	60c3      	str	r3, [r0, #12]
 801a20e:	4641      	mov	r1, r8
 801a210:	f001 fefc 	bl	801c00c <__mcmp>
 801a214:	2800      	cmp	r0, #0
 801a216:	da55      	bge.n	801a2c4 <_strtod_l+0x83c>
 801a218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a21a:	b9e3      	cbnz	r3, 801a256 <_strtod_l+0x7ce>
 801a21c:	f1ba 0f00 	cmp.w	sl, #0
 801a220:	d119      	bne.n	801a256 <_strtod_l+0x7ce>
 801a222:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a226:	b9b3      	cbnz	r3, 801a256 <_strtod_l+0x7ce>
 801a228:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a22c:	0d1b      	lsrs	r3, r3, #20
 801a22e:	051b      	lsls	r3, r3, #20
 801a230:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a234:	d90f      	bls.n	801a256 <_strtod_l+0x7ce>
 801a236:	6963      	ldr	r3, [r4, #20]
 801a238:	b913      	cbnz	r3, 801a240 <_strtod_l+0x7b8>
 801a23a:	6923      	ldr	r3, [r4, #16]
 801a23c:	2b01      	cmp	r3, #1
 801a23e:	dd0a      	ble.n	801a256 <_strtod_l+0x7ce>
 801a240:	4621      	mov	r1, r4
 801a242:	2201      	movs	r2, #1
 801a244:	4648      	mov	r0, r9
 801a246:	f001 fe8d 	bl	801bf64 <__lshift>
 801a24a:	4641      	mov	r1, r8
 801a24c:	4604      	mov	r4, r0
 801a24e:	f001 fedd 	bl	801c00c <__mcmp>
 801a252:	2800      	cmp	r0, #0
 801a254:	dc67      	bgt.n	801a326 <_strtod_l+0x89e>
 801a256:	9b04      	ldr	r3, [sp, #16]
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d171      	bne.n	801a340 <_strtod_l+0x8b8>
 801a25c:	e63d      	b.n	8019eda <_strtod_l+0x452>
 801a25e:	f018 0f01 	tst.w	r8, #1
 801a262:	d004      	beq.n	801a26e <_strtod_l+0x7e6>
 801a264:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a268:	f7e6 f9d6 	bl	8000618 <__aeabi_dmul>
 801a26c:	2301      	movs	r3, #1
 801a26e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a272:	3508      	adds	r5, #8
 801a274:	e6e5      	b.n	801a042 <_strtod_l+0x5ba>
 801a276:	f04f 32ff 	mov.w	r2, #4294967295
 801a27a:	fa02 f303 	lsl.w	r3, r2, r3
 801a27e:	ea03 0a0a 	and.w	sl, r3, sl
 801a282:	e6ff      	b.n	801a084 <_strtod_l+0x5fc>
 801a284:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801a288:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801a28c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801a290:	36e2      	adds	r6, #226	; 0xe2
 801a292:	fa01 f306 	lsl.w	r3, r1, r6
 801a296:	930a      	str	r3, [sp, #40]	; 0x28
 801a298:	910f      	str	r1, [sp, #60]	; 0x3c
 801a29a:	e75d      	b.n	801a158 <_strtod_l+0x6d0>
 801a29c:	2300      	movs	r3, #0
 801a29e:	930a      	str	r3, [sp, #40]	; 0x28
 801a2a0:	2301      	movs	r3, #1
 801a2a2:	930f      	str	r3, [sp, #60]	; 0x3c
 801a2a4:	e758      	b.n	801a158 <_strtod_l+0x6d0>
 801a2a6:	4632      	mov	r2, r6
 801a2a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a2aa:	4648      	mov	r0, r9
 801a2ac:	f001 fe5a 	bl	801bf64 <__lshift>
 801a2b0:	901c      	str	r0, [sp, #112]	; 0x70
 801a2b2:	2800      	cmp	r0, #0
 801a2b4:	f47f af7c 	bne.w	801a1b0 <_strtod_l+0x728>
 801a2b8:	e604      	b.n	8019ec4 <_strtod_l+0x43c>
 801a2ba:	bf00      	nop
 801a2bc:	08020478 	.word	0x08020478
 801a2c0:	fffffc02 	.word	0xfffffc02
 801a2c4:	465d      	mov	r5, fp
 801a2c6:	f040 8086 	bne.w	801a3d6 <_strtod_l+0x94e>
 801a2ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a2cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a2d0:	b32a      	cbz	r2, 801a31e <_strtod_l+0x896>
 801a2d2:	4aaf      	ldr	r2, [pc, #700]	; (801a590 <_strtod_l+0xb08>)
 801a2d4:	4293      	cmp	r3, r2
 801a2d6:	d153      	bne.n	801a380 <_strtod_l+0x8f8>
 801a2d8:	9b04      	ldr	r3, [sp, #16]
 801a2da:	4650      	mov	r0, sl
 801a2dc:	b1d3      	cbz	r3, 801a314 <_strtod_l+0x88c>
 801a2de:	4aad      	ldr	r2, [pc, #692]	; (801a594 <_strtod_l+0xb0c>)
 801a2e0:	402a      	ands	r2, r5
 801a2e2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801a2e6:	f04f 31ff 	mov.w	r1, #4294967295
 801a2ea:	d816      	bhi.n	801a31a <_strtod_l+0x892>
 801a2ec:	0d12      	lsrs	r2, r2, #20
 801a2ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801a2f2:	fa01 f303 	lsl.w	r3, r1, r3
 801a2f6:	4298      	cmp	r0, r3
 801a2f8:	d142      	bne.n	801a380 <_strtod_l+0x8f8>
 801a2fa:	4ba7      	ldr	r3, [pc, #668]	; (801a598 <_strtod_l+0xb10>)
 801a2fc:	429d      	cmp	r5, r3
 801a2fe:	d102      	bne.n	801a306 <_strtod_l+0x87e>
 801a300:	3001      	adds	r0, #1
 801a302:	f43f addf 	beq.w	8019ec4 <_strtod_l+0x43c>
 801a306:	4ba3      	ldr	r3, [pc, #652]	; (801a594 <_strtod_l+0xb0c>)
 801a308:	402b      	ands	r3, r5
 801a30a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801a30e:	f04f 0a00 	mov.w	sl, #0
 801a312:	e7a0      	b.n	801a256 <_strtod_l+0x7ce>
 801a314:	f04f 33ff 	mov.w	r3, #4294967295
 801a318:	e7ed      	b.n	801a2f6 <_strtod_l+0x86e>
 801a31a:	460b      	mov	r3, r1
 801a31c:	e7eb      	b.n	801a2f6 <_strtod_l+0x86e>
 801a31e:	bb7b      	cbnz	r3, 801a380 <_strtod_l+0x8f8>
 801a320:	f1ba 0f00 	cmp.w	sl, #0
 801a324:	d12c      	bne.n	801a380 <_strtod_l+0x8f8>
 801a326:	9904      	ldr	r1, [sp, #16]
 801a328:	4a9a      	ldr	r2, [pc, #616]	; (801a594 <_strtod_l+0xb0c>)
 801a32a:	465b      	mov	r3, fp
 801a32c:	b1f1      	cbz	r1, 801a36c <_strtod_l+0x8e4>
 801a32e:	ea02 010b 	and.w	r1, r2, fp
 801a332:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a336:	dc19      	bgt.n	801a36c <_strtod_l+0x8e4>
 801a338:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a33c:	f77f ae5b 	ble.w	8019ff6 <_strtod_l+0x56e>
 801a340:	4a96      	ldr	r2, [pc, #600]	; (801a59c <_strtod_l+0xb14>)
 801a342:	2300      	movs	r3, #0
 801a344:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801a348:	4650      	mov	r0, sl
 801a34a:	4659      	mov	r1, fp
 801a34c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801a350:	f7e6 f962 	bl	8000618 <__aeabi_dmul>
 801a354:	4682      	mov	sl, r0
 801a356:	468b      	mov	fp, r1
 801a358:	2900      	cmp	r1, #0
 801a35a:	f47f adbe 	bne.w	8019eda <_strtod_l+0x452>
 801a35e:	2800      	cmp	r0, #0
 801a360:	f47f adbb 	bne.w	8019eda <_strtod_l+0x452>
 801a364:	2322      	movs	r3, #34	; 0x22
 801a366:	f8c9 3000 	str.w	r3, [r9]
 801a36a:	e5b6      	b.n	8019eda <_strtod_l+0x452>
 801a36c:	4013      	ands	r3, r2
 801a36e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a372:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a376:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a37a:	f04f 3aff 	mov.w	sl, #4294967295
 801a37e:	e76a      	b.n	801a256 <_strtod_l+0x7ce>
 801a380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a382:	b193      	cbz	r3, 801a3aa <_strtod_l+0x922>
 801a384:	422b      	tst	r3, r5
 801a386:	f43f af66 	beq.w	801a256 <_strtod_l+0x7ce>
 801a38a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a38c:	9a04      	ldr	r2, [sp, #16]
 801a38e:	4650      	mov	r0, sl
 801a390:	4659      	mov	r1, fp
 801a392:	b173      	cbz	r3, 801a3b2 <_strtod_l+0x92a>
 801a394:	f7ff fb5b 	bl	8019a4e <sulp>
 801a398:	4602      	mov	r2, r0
 801a39a:	460b      	mov	r3, r1
 801a39c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a3a0:	f7e5 ff84 	bl	80002ac <__adddf3>
 801a3a4:	4682      	mov	sl, r0
 801a3a6:	468b      	mov	fp, r1
 801a3a8:	e755      	b.n	801a256 <_strtod_l+0x7ce>
 801a3aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a3ac:	ea13 0f0a 	tst.w	r3, sl
 801a3b0:	e7e9      	b.n	801a386 <_strtod_l+0x8fe>
 801a3b2:	f7ff fb4c 	bl	8019a4e <sulp>
 801a3b6:	4602      	mov	r2, r0
 801a3b8:	460b      	mov	r3, r1
 801a3ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a3be:	f7e5 ff73 	bl	80002a8 <__aeabi_dsub>
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	2300      	movs	r3, #0
 801a3c6:	4682      	mov	sl, r0
 801a3c8:	468b      	mov	fp, r1
 801a3ca:	f7e6 fb8d 	bl	8000ae8 <__aeabi_dcmpeq>
 801a3ce:	2800      	cmp	r0, #0
 801a3d0:	f47f ae11 	bne.w	8019ff6 <_strtod_l+0x56e>
 801a3d4:	e73f      	b.n	801a256 <_strtod_l+0x7ce>
 801a3d6:	4641      	mov	r1, r8
 801a3d8:	4620      	mov	r0, r4
 801a3da:	f001 ff54 	bl	801c286 <__ratio>
 801a3de:	ec57 6b10 	vmov	r6, r7, d0
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a3e8:	ee10 0a10 	vmov	r0, s0
 801a3ec:	4639      	mov	r1, r7
 801a3ee:	f7e6 fb8f 	bl	8000b10 <__aeabi_dcmple>
 801a3f2:	2800      	cmp	r0, #0
 801a3f4:	d077      	beq.n	801a4e6 <_strtod_l+0xa5e>
 801a3f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d04a      	beq.n	801a492 <_strtod_l+0xa0a>
 801a3fc:	4b68      	ldr	r3, [pc, #416]	; (801a5a0 <_strtod_l+0xb18>)
 801a3fe:	2200      	movs	r2, #0
 801a400:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801a404:	4f66      	ldr	r7, [pc, #408]	; (801a5a0 <_strtod_l+0xb18>)
 801a406:	2600      	movs	r6, #0
 801a408:	4b62      	ldr	r3, [pc, #392]	; (801a594 <_strtod_l+0xb0c>)
 801a40a:	402b      	ands	r3, r5
 801a40c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a40e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a410:	4b64      	ldr	r3, [pc, #400]	; (801a5a4 <_strtod_l+0xb1c>)
 801a412:	429a      	cmp	r2, r3
 801a414:	f040 80ce 	bne.w	801a5b4 <_strtod_l+0xb2c>
 801a418:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a41c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a420:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801a424:	ec4b ab10 	vmov	d0, sl, fp
 801a428:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801a42c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a430:	f001 fe64 	bl	801c0fc <__ulp>
 801a434:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a438:	ec53 2b10 	vmov	r2, r3, d0
 801a43c:	f7e6 f8ec 	bl	8000618 <__aeabi_dmul>
 801a440:	4652      	mov	r2, sl
 801a442:	465b      	mov	r3, fp
 801a444:	f7e5 ff32 	bl	80002ac <__adddf3>
 801a448:	460b      	mov	r3, r1
 801a44a:	4952      	ldr	r1, [pc, #328]	; (801a594 <_strtod_l+0xb0c>)
 801a44c:	4a56      	ldr	r2, [pc, #344]	; (801a5a8 <_strtod_l+0xb20>)
 801a44e:	4019      	ands	r1, r3
 801a450:	4291      	cmp	r1, r2
 801a452:	4682      	mov	sl, r0
 801a454:	d95b      	bls.n	801a50e <_strtod_l+0xa86>
 801a456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a458:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801a45c:	4293      	cmp	r3, r2
 801a45e:	d103      	bne.n	801a468 <_strtod_l+0x9e0>
 801a460:	9b08      	ldr	r3, [sp, #32]
 801a462:	3301      	adds	r3, #1
 801a464:	f43f ad2e 	beq.w	8019ec4 <_strtod_l+0x43c>
 801a468:	f8df b12c 	ldr.w	fp, [pc, #300]	; 801a598 <_strtod_l+0xb10>
 801a46c:	f04f 3aff 	mov.w	sl, #4294967295
 801a470:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a472:	4648      	mov	r0, r9
 801a474:	f001 fbaa 	bl	801bbcc <_Bfree>
 801a478:	9905      	ldr	r1, [sp, #20]
 801a47a:	4648      	mov	r0, r9
 801a47c:	f001 fba6 	bl	801bbcc <_Bfree>
 801a480:	4641      	mov	r1, r8
 801a482:	4648      	mov	r0, r9
 801a484:	f001 fba2 	bl	801bbcc <_Bfree>
 801a488:	4621      	mov	r1, r4
 801a48a:	4648      	mov	r0, r9
 801a48c:	f001 fb9e 	bl	801bbcc <_Bfree>
 801a490:	e619      	b.n	801a0c6 <_strtod_l+0x63e>
 801a492:	f1ba 0f00 	cmp.w	sl, #0
 801a496:	d11a      	bne.n	801a4ce <_strtod_l+0xa46>
 801a498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a49c:	b9eb      	cbnz	r3, 801a4da <_strtod_l+0xa52>
 801a49e:	2200      	movs	r2, #0
 801a4a0:	4b3f      	ldr	r3, [pc, #252]	; (801a5a0 <_strtod_l+0xb18>)
 801a4a2:	4630      	mov	r0, r6
 801a4a4:	4639      	mov	r1, r7
 801a4a6:	f7e6 fb29 	bl	8000afc <__aeabi_dcmplt>
 801a4aa:	b9c8      	cbnz	r0, 801a4e0 <_strtod_l+0xa58>
 801a4ac:	4630      	mov	r0, r6
 801a4ae:	4639      	mov	r1, r7
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	4b3e      	ldr	r3, [pc, #248]	; (801a5ac <_strtod_l+0xb24>)
 801a4b4:	f7e6 f8b0 	bl	8000618 <__aeabi_dmul>
 801a4b8:	4606      	mov	r6, r0
 801a4ba:	460f      	mov	r7, r1
 801a4bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801a4c0:	9618      	str	r6, [sp, #96]	; 0x60
 801a4c2:	9319      	str	r3, [sp, #100]	; 0x64
 801a4c4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801a4c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801a4cc:	e79c      	b.n	801a408 <_strtod_l+0x980>
 801a4ce:	f1ba 0f01 	cmp.w	sl, #1
 801a4d2:	d102      	bne.n	801a4da <_strtod_l+0xa52>
 801a4d4:	2d00      	cmp	r5, #0
 801a4d6:	f43f ad8e 	beq.w	8019ff6 <_strtod_l+0x56e>
 801a4da:	2200      	movs	r2, #0
 801a4dc:	4b34      	ldr	r3, [pc, #208]	; (801a5b0 <_strtod_l+0xb28>)
 801a4de:	e78f      	b.n	801a400 <_strtod_l+0x978>
 801a4e0:	2600      	movs	r6, #0
 801a4e2:	4f32      	ldr	r7, [pc, #200]	; (801a5ac <_strtod_l+0xb24>)
 801a4e4:	e7ea      	b.n	801a4bc <_strtod_l+0xa34>
 801a4e6:	4b31      	ldr	r3, [pc, #196]	; (801a5ac <_strtod_l+0xb24>)
 801a4e8:	4630      	mov	r0, r6
 801a4ea:	4639      	mov	r1, r7
 801a4ec:	2200      	movs	r2, #0
 801a4ee:	f7e6 f893 	bl	8000618 <__aeabi_dmul>
 801a4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4f4:	4606      	mov	r6, r0
 801a4f6:	460f      	mov	r7, r1
 801a4f8:	b933      	cbnz	r3, 801a508 <_strtod_l+0xa80>
 801a4fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a4fe:	9010      	str	r0, [sp, #64]	; 0x40
 801a500:	9311      	str	r3, [sp, #68]	; 0x44
 801a502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a506:	e7df      	b.n	801a4c8 <_strtod_l+0xa40>
 801a508:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801a50c:	e7f9      	b.n	801a502 <_strtod_l+0xa7a>
 801a50e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801a512:	9b04      	ldr	r3, [sp, #16]
 801a514:	2b00      	cmp	r3, #0
 801a516:	d1ab      	bne.n	801a470 <_strtod_l+0x9e8>
 801a518:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a51c:	0d1b      	lsrs	r3, r3, #20
 801a51e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a520:	051b      	lsls	r3, r3, #20
 801a522:	429a      	cmp	r2, r3
 801a524:	465d      	mov	r5, fp
 801a526:	d1a3      	bne.n	801a470 <_strtod_l+0x9e8>
 801a528:	4639      	mov	r1, r7
 801a52a:	4630      	mov	r0, r6
 801a52c:	f7e6 fb24 	bl	8000b78 <__aeabi_d2iz>
 801a530:	f7e6 f808 	bl	8000544 <__aeabi_i2d>
 801a534:	460b      	mov	r3, r1
 801a536:	4602      	mov	r2, r0
 801a538:	4639      	mov	r1, r7
 801a53a:	4630      	mov	r0, r6
 801a53c:	f7e5 feb4 	bl	80002a8 <__aeabi_dsub>
 801a540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a542:	4606      	mov	r6, r0
 801a544:	460f      	mov	r7, r1
 801a546:	b933      	cbnz	r3, 801a556 <_strtod_l+0xace>
 801a548:	f1ba 0f00 	cmp.w	sl, #0
 801a54c:	d103      	bne.n	801a556 <_strtod_l+0xace>
 801a54e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801a552:	2d00      	cmp	r5, #0
 801a554:	d06d      	beq.n	801a632 <_strtod_l+0xbaa>
 801a556:	a30a      	add	r3, pc, #40	; (adr r3, 801a580 <_strtod_l+0xaf8>)
 801a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a55c:	4630      	mov	r0, r6
 801a55e:	4639      	mov	r1, r7
 801a560:	f7e6 facc 	bl	8000afc <__aeabi_dcmplt>
 801a564:	2800      	cmp	r0, #0
 801a566:	f47f acb8 	bne.w	8019eda <_strtod_l+0x452>
 801a56a:	a307      	add	r3, pc, #28	; (adr r3, 801a588 <_strtod_l+0xb00>)
 801a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a570:	4630      	mov	r0, r6
 801a572:	4639      	mov	r1, r7
 801a574:	f7e6 fae0 	bl	8000b38 <__aeabi_dcmpgt>
 801a578:	2800      	cmp	r0, #0
 801a57a:	f43f af79 	beq.w	801a470 <_strtod_l+0x9e8>
 801a57e:	e4ac      	b.n	8019eda <_strtod_l+0x452>
 801a580:	94a03595 	.word	0x94a03595
 801a584:	3fdfffff 	.word	0x3fdfffff
 801a588:	35afe535 	.word	0x35afe535
 801a58c:	3fe00000 	.word	0x3fe00000
 801a590:	000fffff 	.word	0x000fffff
 801a594:	7ff00000 	.word	0x7ff00000
 801a598:	7fefffff 	.word	0x7fefffff
 801a59c:	39500000 	.word	0x39500000
 801a5a0:	3ff00000 	.word	0x3ff00000
 801a5a4:	7fe00000 	.word	0x7fe00000
 801a5a8:	7c9fffff 	.word	0x7c9fffff
 801a5ac:	3fe00000 	.word	0x3fe00000
 801a5b0:	bff00000 	.word	0xbff00000
 801a5b4:	9b04      	ldr	r3, [sp, #16]
 801a5b6:	b333      	cbz	r3, 801a606 <_strtod_l+0xb7e>
 801a5b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a5ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a5be:	d822      	bhi.n	801a606 <_strtod_l+0xb7e>
 801a5c0:	a327      	add	r3, pc, #156	; (adr r3, 801a660 <_strtod_l+0xbd8>)
 801a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5c6:	4630      	mov	r0, r6
 801a5c8:	4639      	mov	r1, r7
 801a5ca:	f7e6 faa1 	bl	8000b10 <__aeabi_dcmple>
 801a5ce:	b1a0      	cbz	r0, 801a5fa <_strtod_l+0xb72>
 801a5d0:	4639      	mov	r1, r7
 801a5d2:	4630      	mov	r0, r6
 801a5d4:	f7e6 faf8 	bl	8000bc8 <__aeabi_d2uiz>
 801a5d8:	2800      	cmp	r0, #0
 801a5da:	bf08      	it	eq
 801a5dc:	2001      	moveq	r0, #1
 801a5de:	f7e5 ffa1 	bl	8000524 <__aeabi_ui2d>
 801a5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a5e4:	4606      	mov	r6, r0
 801a5e6:	460f      	mov	r7, r1
 801a5e8:	bb03      	cbnz	r3, 801a62c <_strtod_l+0xba4>
 801a5ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a5ee:	9012      	str	r0, [sp, #72]	; 0x48
 801a5f0:	9313      	str	r3, [sp, #76]	; 0x4c
 801a5f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801a5f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801a5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a5fe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801a602:	1a9b      	subs	r3, r3, r2
 801a604:	930b      	str	r3, [sp, #44]	; 0x2c
 801a606:	ed9d 0b08 	vldr	d0, [sp, #32]
 801a60a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801a60e:	f001 fd75 	bl	801c0fc <__ulp>
 801a612:	4650      	mov	r0, sl
 801a614:	ec53 2b10 	vmov	r2, r3, d0
 801a618:	4659      	mov	r1, fp
 801a61a:	f7e5 fffd 	bl	8000618 <__aeabi_dmul>
 801a61e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a622:	f7e5 fe43 	bl	80002ac <__adddf3>
 801a626:	4682      	mov	sl, r0
 801a628:	468b      	mov	fp, r1
 801a62a:	e772      	b.n	801a512 <_strtod_l+0xa8a>
 801a62c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 801a630:	e7df      	b.n	801a5f2 <_strtod_l+0xb6a>
 801a632:	a30d      	add	r3, pc, #52	; (adr r3, 801a668 <_strtod_l+0xbe0>)
 801a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a638:	f7e6 fa60 	bl	8000afc <__aeabi_dcmplt>
 801a63c:	e79c      	b.n	801a578 <_strtod_l+0xaf0>
 801a63e:	2300      	movs	r3, #0
 801a640:	930d      	str	r3, [sp, #52]	; 0x34
 801a642:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a646:	6013      	str	r3, [r2, #0]
 801a648:	f7ff ba61 	b.w	8019b0e <_strtod_l+0x86>
 801a64c:	2b65      	cmp	r3, #101	; 0x65
 801a64e:	f04f 0200 	mov.w	r2, #0
 801a652:	f43f ab4e 	beq.w	8019cf2 <_strtod_l+0x26a>
 801a656:	2101      	movs	r1, #1
 801a658:	4614      	mov	r4, r2
 801a65a:	9104      	str	r1, [sp, #16]
 801a65c:	f7ff bacb 	b.w	8019bf6 <_strtod_l+0x16e>
 801a660:	ffc00000 	.word	0xffc00000
 801a664:	41dfffff 	.word	0x41dfffff
 801a668:	94a03595 	.word	0x94a03595
 801a66c:	3fcfffff 	.word	0x3fcfffff

0801a670 <_strtod_r>:
 801a670:	4b05      	ldr	r3, [pc, #20]	; (801a688 <_strtod_r+0x18>)
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	b410      	push	{r4}
 801a676:	6a1b      	ldr	r3, [r3, #32]
 801a678:	4c04      	ldr	r4, [pc, #16]	; (801a68c <_strtod_r+0x1c>)
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	bf08      	it	eq
 801a67e:	4623      	moveq	r3, r4
 801a680:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a684:	f7ff ba00 	b.w	8019a88 <_strtod_l>
 801a688:	200001d4 	.word	0x200001d4
 801a68c:	20000238 	.word	0x20000238

0801a690 <strtod>:
 801a690:	4b07      	ldr	r3, [pc, #28]	; (801a6b0 <strtod+0x20>)
 801a692:	4a08      	ldr	r2, [pc, #32]	; (801a6b4 <strtod+0x24>)
 801a694:	b410      	push	{r4}
 801a696:	681c      	ldr	r4, [r3, #0]
 801a698:	6a23      	ldr	r3, [r4, #32]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	bf08      	it	eq
 801a69e:	4613      	moveq	r3, r2
 801a6a0:	460a      	mov	r2, r1
 801a6a2:	4601      	mov	r1, r0
 801a6a4:	4620      	mov	r0, r4
 801a6a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a6aa:	f7ff b9ed 	b.w	8019a88 <_strtod_l>
 801a6ae:	bf00      	nop
 801a6b0:	200001d4 	.word	0x200001d4
 801a6b4:	20000238 	.word	0x20000238

0801a6b8 <_strtol_l.isra.0>:
 801a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6bc:	4680      	mov	r8, r0
 801a6be:	4689      	mov	r9, r1
 801a6c0:	4692      	mov	sl, r2
 801a6c2:	461e      	mov	r6, r3
 801a6c4:	460f      	mov	r7, r1
 801a6c6:	463d      	mov	r5, r7
 801a6c8:	9808      	ldr	r0, [sp, #32]
 801a6ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a6ce:	f001 fa21 	bl	801bb14 <__locale_ctype_ptr_l>
 801a6d2:	4420      	add	r0, r4
 801a6d4:	7843      	ldrb	r3, [r0, #1]
 801a6d6:	f013 0308 	ands.w	r3, r3, #8
 801a6da:	d132      	bne.n	801a742 <_strtol_l.isra.0+0x8a>
 801a6dc:	2c2d      	cmp	r4, #45	; 0x2d
 801a6de:	d132      	bne.n	801a746 <_strtol_l.isra.0+0x8e>
 801a6e0:	787c      	ldrb	r4, [r7, #1]
 801a6e2:	1cbd      	adds	r5, r7, #2
 801a6e4:	2201      	movs	r2, #1
 801a6e6:	2e00      	cmp	r6, #0
 801a6e8:	d05d      	beq.n	801a7a6 <_strtol_l.isra.0+0xee>
 801a6ea:	2e10      	cmp	r6, #16
 801a6ec:	d109      	bne.n	801a702 <_strtol_l.isra.0+0x4a>
 801a6ee:	2c30      	cmp	r4, #48	; 0x30
 801a6f0:	d107      	bne.n	801a702 <_strtol_l.isra.0+0x4a>
 801a6f2:	782b      	ldrb	r3, [r5, #0]
 801a6f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a6f8:	2b58      	cmp	r3, #88	; 0x58
 801a6fa:	d14f      	bne.n	801a79c <_strtol_l.isra.0+0xe4>
 801a6fc:	786c      	ldrb	r4, [r5, #1]
 801a6fe:	2610      	movs	r6, #16
 801a700:	3502      	adds	r5, #2
 801a702:	2a00      	cmp	r2, #0
 801a704:	bf14      	ite	ne
 801a706:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801a70a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801a70e:	2700      	movs	r7, #0
 801a710:	fbb1 fcf6 	udiv	ip, r1, r6
 801a714:	4638      	mov	r0, r7
 801a716:	fb06 1e1c 	mls	lr, r6, ip, r1
 801a71a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801a71e:	2b09      	cmp	r3, #9
 801a720:	d817      	bhi.n	801a752 <_strtol_l.isra.0+0x9a>
 801a722:	461c      	mov	r4, r3
 801a724:	42a6      	cmp	r6, r4
 801a726:	dd23      	ble.n	801a770 <_strtol_l.isra.0+0xb8>
 801a728:	1c7b      	adds	r3, r7, #1
 801a72a:	d007      	beq.n	801a73c <_strtol_l.isra.0+0x84>
 801a72c:	4584      	cmp	ip, r0
 801a72e:	d31c      	bcc.n	801a76a <_strtol_l.isra.0+0xb2>
 801a730:	d101      	bne.n	801a736 <_strtol_l.isra.0+0x7e>
 801a732:	45a6      	cmp	lr, r4
 801a734:	db19      	blt.n	801a76a <_strtol_l.isra.0+0xb2>
 801a736:	fb00 4006 	mla	r0, r0, r6, r4
 801a73a:	2701      	movs	r7, #1
 801a73c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a740:	e7eb      	b.n	801a71a <_strtol_l.isra.0+0x62>
 801a742:	462f      	mov	r7, r5
 801a744:	e7bf      	b.n	801a6c6 <_strtol_l.isra.0+0xe>
 801a746:	2c2b      	cmp	r4, #43	; 0x2b
 801a748:	bf04      	itt	eq
 801a74a:	1cbd      	addeq	r5, r7, #2
 801a74c:	787c      	ldrbeq	r4, [r7, #1]
 801a74e:	461a      	mov	r2, r3
 801a750:	e7c9      	b.n	801a6e6 <_strtol_l.isra.0+0x2e>
 801a752:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801a756:	2b19      	cmp	r3, #25
 801a758:	d801      	bhi.n	801a75e <_strtol_l.isra.0+0xa6>
 801a75a:	3c37      	subs	r4, #55	; 0x37
 801a75c:	e7e2      	b.n	801a724 <_strtol_l.isra.0+0x6c>
 801a75e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801a762:	2b19      	cmp	r3, #25
 801a764:	d804      	bhi.n	801a770 <_strtol_l.isra.0+0xb8>
 801a766:	3c57      	subs	r4, #87	; 0x57
 801a768:	e7dc      	b.n	801a724 <_strtol_l.isra.0+0x6c>
 801a76a:	f04f 37ff 	mov.w	r7, #4294967295
 801a76e:	e7e5      	b.n	801a73c <_strtol_l.isra.0+0x84>
 801a770:	1c7b      	adds	r3, r7, #1
 801a772:	d108      	bne.n	801a786 <_strtol_l.isra.0+0xce>
 801a774:	2322      	movs	r3, #34	; 0x22
 801a776:	f8c8 3000 	str.w	r3, [r8]
 801a77a:	4608      	mov	r0, r1
 801a77c:	f1ba 0f00 	cmp.w	sl, #0
 801a780:	d107      	bne.n	801a792 <_strtol_l.isra.0+0xda>
 801a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a786:	b102      	cbz	r2, 801a78a <_strtol_l.isra.0+0xd2>
 801a788:	4240      	negs	r0, r0
 801a78a:	f1ba 0f00 	cmp.w	sl, #0
 801a78e:	d0f8      	beq.n	801a782 <_strtol_l.isra.0+0xca>
 801a790:	b10f      	cbz	r7, 801a796 <_strtol_l.isra.0+0xde>
 801a792:	f105 39ff 	add.w	r9, r5, #4294967295
 801a796:	f8ca 9000 	str.w	r9, [sl]
 801a79a:	e7f2      	b.n	801a782 <_strtol_l.isra.0+0xca>
 801a79c:	2430      	movs	r4, #48	; 0x30
 801a79e:	2e00      	cmp	r6, #0
 801a7a0:	d1af      	bne.n	801a702 <_strtol_l.isra.0+0x4a>
 801a7a2:	2608      	movs	r6, #8
 801a7a4:	e7ad      	b.n	801a702 <_strtol_l.isra.0+0x4a>
 801a7a6:	2c30      	cmp	r4, #48	; 0x30
 801a7a8:	d0a3      	beq.n	801a6f2 <_strtol_l.isra.0+0x3a>
 801a7aa:	260a      	movs	r6, #10
 801a7ac:	e7a9      	b.n	801a702 <_strtol_l.isra.0+0x4a>
	...

0801a7b0 <_strtol_r>:
 801a7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a7b2:	4c06      	ldr	r4, [pc, #24]	; (801a7cc <_strtol_r+0x1c>)
 801a7b4:	4d06      	ldr	r5, [pc, #24]	; (801a7d0 <_strtol_r+0x20>)
 801a7b6:	6824      	ldr	r4, [r4, #0]
 801a7b8:	6a24      	ldr	r4, [r4, #32]
 801a7ba:	2c00      	cmp	r4, #0
 801a7bc:	bf08      	it	eq
 801a7be:	462c      	moveq	r4, r5
 801a7c0:	9400      	str	r4, [sp, #0]
 801a7c2:	f7ff ff79 	bl	801a6b8 <_strtol_l.isra.0>
 801a7c6:	b003      	add	sp, #12
 801a7c8:	bd30      	pop	{r4, r5, pc}
 801a7ca:	bf00      	nop
 801a7cc:	200001d4 	.word	0x200001d4
 801a7d0:	20000238 	.word	0x20000238

0801a7d4 <strtol>:
 801a7d4:	4b08      	ldr	r3, [pc, #32]	; (801a7f8 <strtol+0x24>)
 801a7d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a7d8:	681c      	ldr	r4, [r3, #0]
 801a7da:	4d08      	ldr	r5, [pc, #32]	; (801a7fc <strtol+0x28>)
 801a7dc:	6a23      	ldr	r3, [r4, #32]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	bf08      	it	eq
 801a7e2:	462b      	moveq	r3, r5
 801a7e4:	9300      	str	r3, [sp, #0]
 801a7e6:	4613      	mov	r3, r2
 801a7e8:	460a      	mov	r2, r1
 801a7ea:	4601      	mov	r1, r0
 801a7ec:	4620      	mov	r0, r4
 801a7ee:	f7ff ff63 	bl	801a6b8 <_strtol_l.isra.0>
 801a7f2:	b003      	add	sp, #12
 801a7f4:	bd30      	pop	{r4, r5, pc}
 801a7f6:	bf00      	nop
 801a7f8:	200001d4 	.word	0x200001d4
 801a7fc:	20000238 	.word	0x20000238

0801a800 <_vsiprintf_r>:
 801a800:	b500      	push	{lr}
 801a802:	b09b      	sub	sp, #108	; 0x6c
 801a804:	9100      	str	r1, [sp, #0]
 801a806:	9104      	str	r1, [sp, #16]
 801a808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a80c:	9105      	str	r1, [sp, #20]
 801a80e:	9102      	str	r1, [sp, #8]
 801a810:	4905      	ldr	r1, [pc, #20]	; (801a828 <_vsiprintf_r+0x28>)
 801a812:	9103      	str	r1, [sp, #12]
 801a814:	4669      	mov	r1, sp
 801a816:	f001 fe0d 	bl	801c434 <_svfiprintf_r>
 801a81a:	9b00      	ldr	r3, [sp, #0]
 801a81c:	2200      	movs	r2, #0
 801a81e:	701a      	strb	r2, [r3, #0]
 801a820:	b01b      	add	sp, #108	; 0x6c
 801a822:	f85d fb04 	ldr.w	pc, [sp], #4
 801a826:	bf00      	nop
 801a828:	ffff0208 	.word	0xffff0208

0801a82c <vsiprintf>:
 801a82c:	4613      	mov	r3, r2
 801a82e:	460a      	mov	r2, r1
 801a830:	4601      	mov	r1, r0
 801a832:	4802      	ldr	r0, [pc, #8]	; (801a83c <vsiprintf+0x10>)
 801a834:	6800      	ldr	r0, [r0, #0]
 801a836:	f7ff bfe3 	b.w	801a800 <_vsiprintf_r>
 801a83a:	bf00      	nop
 801a83c:	200001d4 	.word	0x200001d4

0801a840 <quorem>:
 801a840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a844:	6903      	ldr	r3, [r0, #16]
 801a846:	690c      	ldr	r4, [r1, #16]
 801a848:	42a3      	cmp	r3, r4
 801a84a:	4680      	mov	r8, r0
 801a84c:	f2c0 8082 	blt.w	801a954 <quorem+0x114>
 801a850:	3c01      	subs	r4, #1
 801a852:	f101 0714 	add.w	r7, r1, #20
 801a856:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801a85a:	f100 0614 	add.w	r6, r0, #20
 801a85e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801a862:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801a866:	eb06 030c 	add.w	r3, r6, ip
 801a86a:	3501      	adds	r5, #1
 801a86c:	eb07 090c 	add.w	r9, r7, ip
 801a870:	9301      	str	r3, [sp, #4]
 801a872:	fbb0 f5f5 	udiv	r5, r0, r5
 801a876:	b395      	cbz	r5, 801a8de <quorem+0x9e>
 801a878:	f04f 0a00 	mov.w	sl, #0
 801a87c:	4638      	mov	r0, r7
 801a87e:	46b6      	mov	lr, r6
 801a880:	46d3      	mov	fp, sl
 801a882:	f850 2b04 	ldr.w	r2, [r0], #4
 801a886:	b293      	uxth	r3, r2
 801a888:	fb05 a303 	mla	r3, r5, r3, sl
 801a88c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a890:	b29b      	uxth	r3, r3
 801a892:	ebab 0303 	sub.w	r3, fp, r3
 801a896:	0c12      	lsrs	r2, r2, #16
 801a898:	f8de b000 	ldr.w	fp, [lr]
 801a89c:	fb05 a202 	mla	r2, r5, r2, sl
 801a8a0:	fa13 f38b 	uxtah	r3, r3, fp
 801a8a4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801a8a8:	fa1f fb82 	uxth.w	fp, r2
 801a8ac:	f8de 2000 	ldr.w	r2, [lr]
 801a8b0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801a8b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a8b8:	b29b      	uxth	r3, r3
 801a8ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a8be:	4581      	cmp	r9, r0
 801a8c0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801a8c4:	f84e 3b04 	str.w	r3, [lr], #4
 801a8c8:	d2db      	bcs.n	801a882 <quorem+0x42>
 801a8ca:	f856 300c 	ldr.w	r3, [r6, ip]
 801a8ce:	b933      	cbnz	r3, 801a8de <quorem+0x9e>
 801a8d0:	9b01      	ldr	r3, [sp, #4]
 801a8d2:	3b04      	subs	r3, #4
 801a8d4:	429e      	cmp	r6, r3
 801a8d6:	461a      	mov	r2, r3
 801a8d8:	d330      	bcc.n	801a93c <quorem+0xfc>
 801a8da:	f8c8 4010 	str.w	r4, [r8, #16]
 801a8de:	4640      	mov	r0, r8
 801a8e0:	f001 fb94 	bl	801c00c <__mcmp>
 801a8e4:	2800      	cmp	r0, #0
 801a8e6:	db25      	blt.n	801a934 <quorem+0xf4>
 801a8e8:	3501      	adds	r5, #1
 801a8ea:	4630      	mov	r0, r6
 801a8ec:	f04f 0c00 	mov.w	ip, #0
 801a8f0:	f857 2b04 	ldr.w	r2, [r7], #4
 801a8f4:	f8d0 e000 	ldr.w	lr, [r0]
 801a8f8:	b293      	uxth	r3, r2
 801a8fa:	ebac 0303 	sub.w	r3, ip, r3
 801a8fe:	0c12      	lsrs	r2, r2, #16
 801a900:	fa13 f38e 	uxtah	r3, r3, lr
 801a904:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a90c:	b29b      	uxth	r3, r3
 801a90e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a912:	45b9      	cmp	r9, r7
 801a914:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a918:	f840 3b04 	str.w	r3, [r0], #4
 801a91c:	d2e8      	bcs.n	801a8f0 <quorem+0xb0>
 801a91e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801a922:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801a926:	b92a      	cbnz	r2, 801a934 <quorem+0xf4>
 801a928:	3b04      	subs	r3, #4
 801a92a:	429e      	cmp	r6, r3
 801a92c:	461a      	mov	r2, r3
 801a92e:	d30b      	bcc.n	801a948 <quorem+0x108>
 801a930:	f8c8 4010 	str.w	r4, [r8, #16]
 801a934:	4628      	mov	r0, r5
 801a936:	b003      	add	sp, #12
 801a938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a93c:	6812      	ldr	r2, [r2, #0]
 801a93e:	3b04      	subs	r3, #4
 801a940:	2a00      	cmp	r2, #0
 801a942:	d1ca      	bne.n	801a8da <quorem+0x9a>
 801a944:	3c01      	subs	r4, #1
 801a946:	e7c5      	b.n	801a8d4 <quorem+0x94>
 801a948:	6812      	ldr	r2, [r2, #0]
 801a94a:	3b04      	subs	r3, #4
 801a94c:	2a00      	cmp	r2, #0
 801a94e:	d1ef      	bne.n	801a930 <quorem+0xf0>
 801a950:	3c01      	subs	r4, #1
 801a952:	e7ea      	b.n	801a92a <quorem+0xea>
 801a954:	2000      	movs	r0, #0
 801a956:	e7ee      	b.n	801a936 <quorem+0xf6>

0801a958 <_dtoa_r>:
 801a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a95c:	ec57 6b10 	vmov	r6, r7, d0
 801a960:	b097      	sub	sp, #92	; 0x5c
 801a962:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a964:	9106      	str	r1, [sp, #24]
 801a966:	4604      	mov	r4, r0
 801a968:	920b      	str	r2, [sp, #44]	; 0x2c
 801a96a:	9312      	str	r3, [sp, #72]	; 0x48
 801a96c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a970:	e9cd 6700 	strd	r6, r7, [sp]
 801a974:	b93d      	cbnz	r5, 801a986 <_dtoa_r+0x2e>
 801a976:	2010      	movs	r0, #16
 801a978:	f7fe f8de 	bl	8018b38 <malloc>
 801a97c:	6260      	str	r0, [r4, #36]	; 0x24
 801a97e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a982:	6005      	str	r5, [r0, #0]
 801a984:	60c5      	str	r5, [r0, #12]
 801a986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a988:	6819      	ldr	r1, [r3, #0]
 801a98a:	b151      	cbz	r1, 801a9a2 <_dtoa_r+0x4a>
 801a98c:	685a      	ldr	r2, [r3, #4]
 801a98e:	604a      	str	r2, [r1, #4]
 801a990:	2301      	movs	r3, #1
 801a992:	4093      	lsls	r3, r2
 801a994:	608b      	str	r3, [r1, #8]
 801a996:	4620      	mov	r0, r4
 801a998:	f001 f918 	bl	801bbcc <_Bfree>
 801a99c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a99e:	2200      	movs	r2, #0
 801a9a0:	601a      	str	r2, [r3, #0]
 801a9a2:	1e3b      	subs	r3, r7, #0
 801a9a4:	bfbb      	ittet	lt
 801a9a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a9aa:	9301      	strlt	r3, [sp, #4]
 801a9ac:	2300      	movge	r3, #0
 801a9ae:	2201      	movlt	r2, #1
 801a9b0:	bfac      	ite	ge
 801a9b2:	f8c8 3000 	strge.w	r3, [r8]
 801a9b6:	f8c8 2000 	strlt.w	r2, [r8]
 801a9ba:	4baf      	ldr	r3, [pc, #700]	; (801ac78 <_dtoa_r+0x320>)
 801a9bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a9c0:	ea33 0308 	bics.w	r3, r3, r8
 801a9c4:	d114      	bne.n	801a9f0 <_dtoa_r+0x98>
 801a9c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a9c8:	f242 730f 	movw	r3, #9999	; 0x270f
 801a9cc:	6013      	str	r3, [r2, #0]
 801a9ce:	9b00      	ldr	r3, [sp, #0]
 801a9d0:	b923      	cbnz	r3, 801a9dc <_dtoa_r+0x84>
 801a9d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801a9d6:	2800      	cmp	r0, #0
 801a9d8:	f000 8542 	beq.w	801b460 <_dtoa_r+0xb08>
 801a9dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a9de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801ac8c <_dtoa_r+0x334>
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	f000 8544 	beq.w	801b470 <_dtoa_r+0xb18>
 801a9e8:	f10b 0303 	add.w	r3, fp, #3
 801a9ec:	f000 bd3e 	b.w	801b46c <_dtoa_r+0xb14>
 801a9f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a9f4:	2200      	movs	r2, #0
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	4630      	mov	r0, r6
 801a9fa:	4639      	mov	r1, r7
 801a9fc:	f7e6 f874 	bl	8000ae8 <__aeabi_dcmpeq>
 801aa00:	4681      	mov	r9, r0
 801aa02:	b168      	cbz	r0, 801aa20 <_dtoa_r+0xc8>
 801aa04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aa06:	2301      	movs	r3, #1
 801aa08:	6013      	str	r3, [r2, #0]
 801aa0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	f000 8524 	beq.w	801b45a <_dtoa_r+0xb02>
 801aa12:	4b9a      	ldr	r3, [pc, #616]	; (801ac7c <_dtoa_r+0x324>)
 801aa14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801aa16:	f103 3bff 	add.w	fp, r3, #4294967295
 801aa1a:	6013      	str	r3, [r2, #0]
 801aa1c:	f000 bd28 	b.w	801b470 <_dtoa_r+0xb18>
 801aa20:	aa14      	add	r2, sp, #80	; 0x50
 801aa22:	a915      	add	r1, sp, #84	; 0x54
 801aa24:	ec47 6b10 	vmov	d0, r6, r7
 801aa28:	4620      	mov	r0, r4
 801aa2a:	f001 fbdd 	bl	801c1e8 <__d2b>
 801aa2e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801aa32:	9004      	str	r0, [sp, #16]
 801aa34:	2d00      	cmp	r5, #0
 801aa36:	d07c      	beq.n	801ab32 <_dtoa_r+0x1da>
 801aa38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801aa3c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801aa40:	46b2      	mov	sl, r6
 801aa42:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801aa46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801aa4a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801aa4e:	2200      	movs	r2, #0
 801aa50:	4b8b      	ldr	r3, [pc, #556]	; (801ac80 <_dtoa_r+0x328>)
 801aa52:	4650      	mov	r0, sl
 801aa54:	4659      	mov	r1, fp
 801aa56:	f7e5 fc27 	bl	80002a8 <__aeabi_dsub>
 801aa5a:	a381      	add	r3, pc, #516	; (adr r3, 801ac60 <_dtoa_r+0x308>)
 801aa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa60:	f7e5 fdda 	bl	8000618 <__aeabi_dmul>
 801aa64:	a380      	add	r3, pc, #512	; (adr r3, 801ac68 <_dtoa_r+0x310>)
 801aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa6a:	f7e5 fc1f 	bl	80002ac <__adddf3>
 801aa6e:	4606      	mov	r6, r0
 801aa70:	4628      	mov	r0, r5
 801aa72:	460f      	mov	r7, r1
 801aa74:	f7e5 fd66 	bl	8000544 <__aeabi_i2d>
 801aa78:	a37d      	add	r3, pc, #500	; (adr r3, 801ac70 <_dtoa_r+0x318>)
 801aa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa7e:	f7e5 fdcb 	bl	8000618 <__aeabi_dmul>
 801aa82:	4602      	mov	r2, r0
 801aa84:	460b      	mov	r3, r1
 801aa86:	4630      	mov	r0, r6
 801aa88:	4639      	mov	r1, r7
 801aa8a:	f7e5 fc0f 	bl	80002ac <__adddf3>
 801aa8e:	4606      	mov	r6, r0
 801aa90:	460f      	mov	r7, r1
 801aa92:	f7e6 f871 	bl	8000b78 <__aeabi_d2iz>
 801aa96:	2200      	movs	r2, #0
 801aa98:	4682      	mov	sl, r0
 801aa9a:	2300      	movs	r3, #0
 801aa9c:	4630      	mov	r0, r6
 801aa9e:	4639      	mov	r1, r7
 801aaa0:	f7e6 f82c 	bl	8000afc <__aeabi_dcmplt>
 801aaa4:	b148      	cbz	r0, 801aaba <_dtoa_r+0x162>
 801aaa6:	4650      	mov	r0, sl
 801aaa8:	f7e5 fd4c 	bl	8000544 <__aeabi_i2d>
 801aaac:	4632      	mov	r2, r6
 801aaae:	463b      	mov	r3, r7
 801aab0:	f7e6 f81a 	bl	8000ae8 <__aeabi_dcmpeq>
 801aab4:	b908      	cbnz	r0, 801aaba <_dtoa_r+0x162>
 801aab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aaba:	f1ba 0f16 	cmp.w	sl, #22
 801aabe:	d859      	bhi.n	801ab74 <_dtoa_r+0x21c>
 801aac0:	4970      	ldr	r1, [pc, #448]	; (801ac84 <_dtoa_r+0x32c>)
 801aac2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801aac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aaca:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aace:	f7e6 f833 	bl	8000b38 <__aeabi_dcmpgt>
 801aad2:	2800      	cmp	r0, #0
 801aad4:	d050      	beq.n	801ab78 <_dtoa_r+0x220>
 801aad6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aada:	2300      	movs	r3, #0
 801aadc:	930f      	str	r3, [sp, #60]	; 0x3c
 801aade:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801aae0:	1b5d      	subs	r5, r3, r5
 801aae2:	f1b5 0801 	subs.w	r8, r5, #1
 801aae6:	bf49      	itett	mi
 801aae8:	f1c5 0301 	rsbmi	r3, r5, #1
 801aaec:	2300      	movpl	r3, #0
 801aaee:	9305      	strmi	r3, [sp, #20]
 801aaf0:	f04f 0800 	movmi.w	r8, #0
 801aaf4:	bf58      	it	pl
 801aaf6:	9305      	strpl	r3, [sp, #20]
 801aaf8:	f1ba 0f00 	cmp.w	sl, #0
 801aafc:	db3e      	blt.n	801ab7c <_dtoa_r+0x224>
 801aafe:	2300      	movs	r3, #0
 801ab00:	44d0      	add	r8, sl
 801ab02:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801ab06:	9307      	str	r3, [sp, #28]
 801ab08:	9b06      	ldr	r3, [sp, #24]
 801ab0a:	2b09      	cmp	r3, #9
 801ab0c:	f200 8090 	bhi.w	801ac30 <_dtoa_r+0x2d8>
 801ab10:	2b05      	cmp	r3, #5
 801ab12:	bfc4      	itt	gt
 801ab14:	3b04      	subgt	r3, #4
 801ab16:	9306      	strgt	r3, [sp, #24]
 801ab18:	9b06      	ldr	r3, [sp, #24]
 801ab1a:	f1a3 0302 	sub.w	r3, r3, #2
 801ab1e:	bfcc      	ite	gt
 801ab20:	2500      	movgt	r5, #0
 801ab22:	2501      	movle	r5, #1
 801ab24:	2b03      	cmp	r3, #3
 801ab26:	f200 808f 	bhi.w	801ac48 <_dtoa_r+0x2f0>
 801ab2a:	e8df f003 	tbb	[pc, r3]
 801ab2e:	7f7d      	.short	0x7f7d
 801ab30:	7131      	.short	0x7131
 801ab32:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801ab36:	441d      	add	r5, r3
 801ab38:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801ab3c:	2820      	cmp	r0, #32
 801ab3e:	dd13      	ble.n	801ab68 <_dtoa_r+0x210>
 801ab40:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801ab44:	9b00      	ldr	r3, [sp, #0]
 801ab46:	fa08 f800 	lsl.w	r8, r8, r0
 801ab4a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801ab4e:	fa23 f000 	lsr.w	r0, r3, r0
 801ab52:	ea48 0000 	orr.w	r0, r8, r0
 801ab56:	f7e5 fce5 	bl	8000524 <__aeabi_ui2d>
 801ab5a:	2301      	movs	r3, #1
 801ab5c:	4682      	mov	sl, r0
 801ab5e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801ab62:	3d01      	subs	r5, #1
 801ab64:	9313      	str	r3, [sp, #76]	; 0x4c
 801ab66:	e772      	b.n	801aa4e <_dtoa_r+0xf6>
 801ab68:	9b00      	ldr	r3, [sp, #0]
 801ab6a:	f1c0 0020 	rsb	r0, r0, #32
 801ab6e:	fa03 f000 	lsl.w	r0, r3, r0
 801ab72:	e7f0      	b.n	801ab56 <_dtoa_r+0x1fe>
 801ab74:	2301      	movs	r3, #1
 801ab76:	e7b1      	b.n	801aadc <_dtoa_r+0x184>
 801ab78:	900f      	str	r0, [sp, #60]	; 0x3c
 801ab7a:	e7b0      	b.n	801aade <_dtoa_r+0x186>
 801ab7c:	9b05      	ldr	r3, [sp, #20]
 801ab7e:	eba3 030a 	sub.w	r3, r3, sl
 801ab82:	9305      	str	r3, [sp, #20]
 801ab84:	f1ca 0300 	rsb	r3, sl, #0
 801ab88:	9307      	str	r3, [sp, #28]
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	930e      	str	r3, [sp, #56]	; 0x38
 801ab8e:	e7bb      	b.n	801ab08 <_dtoa_r+0x1b0>
 801ab90:	2301      	movs	r3, #1
 801ab92:	930a      	str	r3, [sp, #40]	; 0x28
 801ab94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	dd59      	ble.n	801ac4e <_dtoa_r+0x2f6>
 801ab9a:	9302      	str	r3, [sp, #8]
 801ab9c:	4699      	mov	r9, r3
 801ab9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801aba0:	2200      	movs	r2, #0
 801aba2:	6072      	str	r2, [r6, #4]
 801aba4:	2204      	movs	r2, #4
 801aba6:	f102 0014 	add.w	r0, r2, #20
 801abaa:	4298      	cmp	r0, r3
 801abac:	6871      	ldr	r1, [r6, #4]
 801abae:	d953      	bls.n	801ac58 <_dtoa_r+0x300>
 801abb0:	4620      	mov	r0, r4
 801abb2:	f000 ffd7 	bl	801bb64 <_Balloc>
 801abb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801abb8:	6030      	str	r0, [r6, #0]
 801abba:	f1b9 0f0e 	cmp.w	r9, #14
 801abbe:	f8d3 b000 	ldr.w	fp, [r3]
 801abc2:	f200 80e6 	bhi.w	801ad92 <_dtoa_r+0x43a>
 801abc6:	2d00      	cmp	r5, #0
 801abc8:	f000 80e3 	beq.w	801ad92 <_dtoa_r+0x43a>
 801abcc:	ed9d 7b00 	vldr	d7, [sp]
 801abd0:	f1ba 0f00 	cmp.w	sl, #0
 801abd4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801abd8:	dd74      	ble.n	801acc4 <_dtoa_r+0x36c>
 801abda:	4a2a      	ldr	r2, [pc, #168]	; (801ac84 <_dtoa_r+0x32c>)
 801abdc:	f00a 030f 	and.w	r3, sl, #15
 801abe0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801abe4:	ed93 7b00 	vldr	d7, [r3]
 801abe8:	ea4f 162a 	mov.w	r6, sl, asr #4
 801abec:	06f0      	lsls	r0, r6, #27
 801abee:	ed8d 7b08 	vstr	d7, [sp, #32]
 801abf2:	d565      	bpl.n	801acc0 <_dtoa_r+0x368>
 801abf4:	4b24      	ldr	r3, [pc, #144]	; (801ac88 <_dtoa_r+0x330>)
 801abf6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801abfa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801abfe:	f7e5 fe35 	bl	800086c <__aeabi_ddiv>
 801ac02:	e9cd 0100 	strd	r0, r1, [sp]
 801ac06:	f006 060f 	and.w	r6, r6, #15
 801ac0a:	2503      	movs	r5, #3
 801ac0c:	4f1e      	ldr	r7, [pc, #120]	; (801ac88 <_dtoa_r+0x330>)
 801ac0e:	e04c      	b.n	801acaa <_dtoa_r+0x352>
 801ac10:	2301      	movs	r3, #1
 801ac12:	930a      	str	r3, [sp, #40]	; 0x28
 801ac14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac16:	4453      	add	r3, sl
 801ac18:	f103 0901 	add.w	r9, r3, #1
 801ac1c:	9302      	str	r3, [sp, #8]
 801ac1e:	464b      	mov	r3, r9
 801ac20:	2b01      	cmp	r3, #1
 801ac22:	bfb8      	it	lt
 801ac24:	2301      	movlt	r3, #1
 801ac26:	e7ba      	b.n	801ab9e <_dtoa_r+0x246>
 801ac28:	2300      	movs	r3, #0
 801ac2a:	e7b2      	b.n	801ab92 <_dtoa_r+0x23a>
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	e7f0      	b.n	801ac12 <_dtoa_r+0x2ba>
 801ac30:	2501      	movs	r5, #1
 801ac32:	2300      	movs	r3, #0
 801ac34:	9306      	str	r3, [sp, #24]
 801ac36:	950a      	str	r5, [sp, #40]	; 0x28
 801ac38:	f04f 33ff 	mov.w	r3, #4294967295
 801ac3c:	9302      	str	r3, [sp, #8]
 801ac3e:	4699      	mov	r9, r3
 801ac40:	2200      	movs	r2, #0
 801ac42:	2312      	movs	r3, #18
 801ac44:	920b      	str	r2, [sp, #44]	; 0x2c
 801ac46:	e7aa      	b.n	801ab9e <_dtoa_r+0x246>
 801ac48:	2301      	movs	r3, #1
 801ac4a:	930a      	str	r3, [sp, #40]	; 0x28
 801ac4c:	e7f4      	b.n	801ac38 <_dtoa_r+0x2e0>
 801ac4e:	2301      	movs	r3, #1
 801ac50:	9302      	str	r3, [sp, #8]
 801ac52:	4699      	mov	r9, r3
 801ac54:	461a      	mov	r2, r3
 801ac56:	e7f5      	b.n	801ac44 <_dtoa_r+0x2ec>
 801ac58:	3101      	adds	r1, #1
 801ac5a:	6071      	str	r1, [r6, #4]
 801ac5c:	0052      	lsls	r2, r2, #1
 801ac5e:	e7a2      	b.n	801aba6 <_dtoa_r+0x24e>
 801ac60:	636f4361 	.word	0x636f4361
 801ac64:	3fd287a7 	.word	0x3fd287a7
 801ac68:	8b60c8b3 	.word	0x8b60c8b3
 801ac6c:	3fc68a28 	.word	0x3fc68a28
 801ac70:	509f79fb 	.word	0x509f79fb
 801ac74:	3fd34413 	.word	0x3fd34413
 801ac78:	7ff00000 	.word	0x7ff00000
 801ac7c:	08020425 	.word	0x08020425
 801ac80:	3ff80000 	.word	0x3ff80000
 801ac84:	080204e0 	.word	0x080204e0
 801ac88:	080204b8 	.word	0x080204b8
 801ac8c:	080204a9 	.word	0x080204a9
 801ac90:	07f1      	lsls	r1, r6, #31
 801ac92:	d508      	bpl.n	801aca6 <_dtoa_r+0x34e>
 801ac94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ac98:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ac9c:	f7e5 fcbc 	bl	8000618 <__aeabi_dmul>
 801aca0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801aca4:	3501      	adds	r5, #1
 801aca6:	1076      	asrs	r6, r6, #1
 801aca8:	3708      	adds	r7, #8
 801acaa:	2e00      	cmp	r6, #0
 801acac:	d1f0      	bne.n	801ac90 <_dtoa_r+0x338>
 801acae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801acb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801acb6:	f7e5 fdd9 	bl	800086c <__aeabi_ddiv>
 801acba:	e9cd 0100 	strd	r0, r1, [sp]
 801acbe:	e01a      	b.n	801acf6 <_dtoa_r+0x39e>
 801acc0:	2502      	movs	r5, #2
 801acc2:	e7a3      	b.n	801ac0c <_dtoa_r+0x2b4>
 801acc4:	f000 80a0 	beq.w	801ae08 <_dtoa_r+0x4b0>
 801acc8:	f1ca 0600 	rsb	r6, sl, #0
 801accc:	4b9f      	ldr	r3, [pc, #636]	; (801af4c <_dtoa_r+0x5f4>)
 801acce:	4fa0      	ldr	r7, [pc, #640]	; (801af50 <_dtoa_r+0x5f8>)
 801acd0:	f006 020f 	and.w	r2, r6, #15
 801acd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801ace0:	f7e5 fc9a 	bl	8000618 <__aeabi_dmul>
 801ace4:	e9cd 0100 	strd	r0, r1, [sp]
 801ace8:	1136      	asrs	r6, r6, #4
 801acea:	2300      	movs	r3, #0
 801acec:	2502      	movs	r5, #2
 801acee:	2e00      	cmp	r6, #0
 801acf0:	d17f      	bne.n	801adf2 <_dtoa_r+0x49a>
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d1e1      	bne.n	801acba <_dtoa_r+0x362>
 801acf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	f000 8087 	beq.w	801ae0c <_dtoa_r+0x4b4>
 801acfe:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ad02:	2200      	movs	r2, #0
 801ad04:	4b93      	ldr	r3, [pc, #588]	; (801af54 <_dtoa_r+0x5fc>)
 801ad06:	4630      	mov	r0, r6
 801ad08:	4639      	mov	r1, r7
 801ad0a:	f7e5 fef7 	bl	8000afc <__aeabi_dcmplt>
 801ad0e:	2800      	cmp	r0, #0
 801ad10:	d07c      	beq.n	801ae0c <_dtoa_r+0x4b4>
 801ad12:	f1b9 0f00 	cmp.w	r9, #0
 801ad16:	d079      	beq.n	801ae0c <_dtoa_r+0x4b4>
 801ad18:	9b02      	ldr	r3, [sp, #8]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	dd35      	ble.n	801ad8a <_dtoa_r+0x432>
 801ad1e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ad22:	9308      	str	r3, [sp, #32]
 801ad24:	4639      	mov	r1, r7
 801ad26:	2200      	movs	r2, #0
 801ad28:	4b8b      	ldr	r3, [pc, #556]	; (801af58 <_dtoa_r+0x600>)
 801ad2a:	4630      	mov	r0, r6
 801ad2c:	f7e5 fc74 	bl	8000618 <__aeabi_dmul>
 801ad30:	e9cd 0100 	strd	r0, r1, [sp]
 801ad34:	9f02      	ldr	r7, [sp, #8]
 801ad36:	3501      	adds	r5, #1
 801ad38:	4628      	mov	r0, r5
 801ad3a:	f7e5 fc03 	bl	8000544 <__aeabi_i2d>
 801ad3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ad42:	f7e5 fc69 	bl	8000618 <__aeabi_dmul>
 801ad46:	2200      	movs	r2, #0
 801ad48:	4b84      	ldr	r3, [pc, #528]	; (801af5c <_dtoa_r+0x604>)
 801ad4a:	f7e5 faaf 	bl	80002ac <__adddf3>
 801ad4e:	4605      	mov	r5, r0
 801ad50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801ad54:	2f00      	cmp	r7, #0
 801ad56:	d15d      	bne.n	801ae14 <_dtoa_r+0x4bc>
 801ad58:	2200      	movs	r2, #0
 801ad5a:	4b81      	ldr	r3, [pc, #516]	; (801af60 <_dtoa_r+0x608>)
 801ad5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ad60:	f7e5 faa2 	bl	80002a8 <__aeabi_dsub>
 801ad64:	462a      	mov	r2, r5
 801ad66:	4633      	mov	r3, r6
 801ad68:	e9cd 0100 	strd	r0, r1, [sp]
 801ad6c:	f7e5 fee4 	bl	8000b38 <__aeabi_dcmpgt>
 801ad70:	2800      	cmp	r0, #0
 801ad72:	f040 8288 	bne.w	801b286 <_dtoa_r+0x92e>
 801ad76:	462a      	mov	r2, r5
 801ad78:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801ad7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ad80:	f7e5 febc 	bl	8000afc <__aeabi_dcmplt>
 801ad84:	2800      	cmp	r0, #0
 801ad86:	f040 827c 	bne.w	801b282 <_dtoa_r+0x92a>
 801ad8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ad8e:	e9cd 2300 	strd	r2, r3, [sp]
 801ad92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	f2c0 8150 	blt.w	801b03a <_dtoa_r+0x6e2>
 801ad9a:	f1ba 0f0e 	cmp.w	sl, #14
 801ad9e:	f300 814c 	bgt.w	801b03a <_dtoa_r+0x6e2>
 801ada2:	4b6a      	ldr	r3, [pc, #424]	; (801af4c <_dtoa_r+0x5f4>)
 801ada4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ada8:	ed93 7b00 	vldr	d7, [r3]
 801adac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801adae:	2b00      	cmp	r3, #0
 801adb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801adb4:	f280 80d8 	bge.w	801af68 <_dtoa_r+0x610>
 801adb8:	f1b9 0f00 	cmp.w	r9, #0
 801adbc:	f300 80d4 	bgt.w	801af68 <_dtoa_r+0x610>
 801adc0:	f040 825e 	bne.w	801b280 <_dtoa_r+0x928>
 801adc4:	2200      	movs	r2, #0
 801adc6:	4b66      	ldr	r3, [pc, #408]	; (801af60 <_dtoa_r+0x608>)
 801adc8:	ec51 0b17 	vmov	r0, r1, d7
 801adcc:	f7e5 fc24 	bl	8000618 <__aeabi_dmul>
 801add0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801add4:	f7e5 fea6 	bl	8000b24 <__aeabi_dcmpge>
 801add8:	464f      	mov	r7, r9
 801adda:	464e      	mov	r6, r9
 801addc:	2800      	cmp	r0, #0
 801adde:	f040 8234 	bne.w	801b24a <_dtoa_r+0x8f2>
 801ade2:	2331      	movs	r3, #49	; 0x31
 801ade4:	f10b 0501 	add.w	r5, fp, #1
 801ade8:	f88b 3000 	strb.w	r3, [fp]
 801adec:	f10a 0a01 	add.w	sl, sl, #1
 801adf0:	e22f      	b.n	801b252 <_dtoa_r+0x8fa>
 801adf2:	07f2      	lsls	r2, r6, #31
 801adf4:	d505      	bpl.n	801ae02 <_dtoa_r+0x4aa>
 801adf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801adfa:	f7e5 fc0d 	bl	8000618 <__aeabi_dmul>
 801adfe:	3501      	adds	r5, #1
 801ae00:	2301      	movs	r3, #1
 801ae02:	1076      	asrs	r6, r6, #1
 801ae04:	3708      	adds	r7, #8
 801ae06:	e772      	b.n	801acee <_dtoa_r+0x396>
 801ae08:	2502      	movs	r5, #2
 801ae0a:	e774      	b.n	801acf6 <_dtoa_r+0x39e>
 801ae0c:	f8cd a020 	str.w	sl, [sp, #32]
 801ae10:	464f      	mov	r7, r9
 801ae12:	e791      	b.n	801ad38 <_dtoa_r+0x3e0>
 801ae14:	4b4d      	ldr	r3, [pc, #308]	; (801af4c <_dtoa_r+0x5f4>)
 801ae16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ae1a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801ae1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d047      	beq.n	801aeb4 <_dtoa_r+0x55c>
 801ae24:	4602      	mov	r2, r0
 801ae26:	460b      	mov	r3, r1
 801ae28:	2000      	movs	r0, #0
 801ae2a:	494e      	ldr	r1, [pc, #312]	; (801af64 <_dtoa_r+0x60c>)
 801ae2c:	f7e5 fd1e 	bl	800086c <__aeabi_ddiv>
 801ae30:	462a      	mov	r2, r5
 801ae32:	4633      	mov	r3, r6
 801ae34:	f7e5 fa38 	bl	80002a8 <__aeabi_dsub>
 801ae38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ae3c:	465d      	mov	r5, fp
 801ae3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ae42:	f7e5 fe99 	bl	8000b78 <__aeabi_d2iz>
 801ae46:	4606      	mov	r6, r0
 801ae48:	f7e5 fb7c 	bl	8000544 <__aeabi_i2d>
 801ae4c:	4602      	mov	r2, r0
 801ae4e:	460b      	mov	r3, r1
 801ae50:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ae54:	f7e5 fa28 	bl	80002a8 <__aeabi_dsub>
 801ae58:	3630      	adds	r6, #48	; 0x30
 801ae5a:	f805 6b01 	strb.w	r6, [r5], #1
 801ae5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801ae62:	e9cd 0100 	strd	r0, r1, [sp]
 801ae66:	f7e5 fe49 	bl	8000afc <__aeabi_dcmplt>
 801ae6a:	2800      	cmp	r0, #0
 801ae6c:	d163      	bne.n	801af36 <_dtoa_r+0x5de>
 801ae6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae72:	2000      	movs	r0, #0
 801ae74:	4937      	ldr	r1, [pc, #220]	; (801af54 <_dtoa_r+0x5fc>)
 801ae76:	f7e5 fa17 	bl	80002a8 <__aeabi_dsub>
 801ae7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801ae7e:	f7e5 fe3d 	bl	8000afc <__aeabi_dcmplt>
 801ae82:	2800      	cmp	r0, #0
 801ae84:	f040 80b7 	bne.w	801aff6 <_dtoa_r+0x69e>
 801ae88:	eba5 030b 	sub.w	r3, r5, fp
 801ae8c:	429f      	cmp	r7, r3
 801ae8e:	f77f af7c 	ble.w	801ad8a <_dtoa_r+0x432>
 801ae92:	2200      	movs	r2, #0
 801ae94:	4b30      	ldr	r3, [pc, #192]	; (801af58 <_dtoa_r+0x600>)
 801ae96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ae9a:	f7e5 fbbd 	bl	8000618 <__aeabi_dmul>
 801ae9e:	2200      	movs	r2, #0
 801aea0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801aea4:	4b2c      	ldr	r3, [pc, #176]	; (801af58 <_dtoa_r+0x600>)
 801aea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aeaa:	f7e5 fbb5 	bl	8000618 <__aeabi_dmul>
 801aeae:	e9cd 0100 	strd	r0, r1, [sp]
 801aeb2:	e7c4      	b.n	801ae3e <_dtoa_r+0x4e6>
 801aeb4:	462a      	mov	r2, r5
 801aeb6:	4633      	mov	r3, r6
 801aeb8:	f7e5 fbae 	bl	8000618 <__aeabi_dmul>
 801aebc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801aec0:	eb0b 0507 	add.w	r5, fp, r7
 801aec4:	465e      	mov	r6, fp
 801aec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aeca:	f7e5 fe55 	bl	8000b78 <__aeabi_d2iz>
 801aece:	4607      	mov	r7, r0
 801aed0:	f7e5 fb38 	bl	8000544 <__aeabi_i2d>
 801aed4:	3730      	adds	r7, #48	; 0x30
 801aed6:	4602      	mov	r2, r0
 801aed8:	460b      	mov	r3, r1
 801aeda:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aede:	f7e5 f9e3 	bl	80002a8 <__aeabi_dsub>
 801aee2:	f806 7b01 	strb.w	r7, [r6], #1
 801aee6:	42ae      	cmp	r6, r5
 801aee8:	e9cd 0100 	strd	r0, r1, [sp]
 801aeec:	f04f 0200 	mov.w	r2, #0
 801aef0:	d126      	bne.n	801af40 <_dtoa_r+0x5e8>
 801aef2:	4b1c      	ldr	r3, [pc, #112]	; (801af64 <_dtoa_r+0x60c>)
 801aef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801aef8:	f7e5 f9d8 	bl	80002ac <__adddf3>
 801aefc:	4602      	mov	r2, r0
 801aefe:	460b      	mov	r3, r1
 801af00:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af04:	f7e5 fe18 	bl	8000b38 <__aeabi_dcmpgt>
 801af08:	2800      	cmp	r0, #0
 801af0a:	d174      	bne.n	801aff6 <_dtoa_r+0x69e>
 801af0c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801af10:	2000      	movs	r0, #0
 801af12:	4914      	ldr	r1, [pc, #80]	; (801af64 <_dtoa_r+0x60c>)
 801af14:	f7e5 f9c8 	bl	80002a8 <__aeabi_dsub>
 801af18:	4602      	mov	r2, r0
 801af1a:	460b      	mov	r3, r1
 801af1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af20:	f7e5 fdec 	bl	8000afc <__aeabi_dcmplt>
 801af24:	2800      	cmp	r0, #0
 801af26:	f43f af30 	beq.w	801ad8a <_dtoa_r+0x432>
 801af2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801af2e:	2b30      	cmp	r3, #48	; 0x30
 801af30:	f105 32ff 	add.w	r2, r5, #4294967295
 801af34:	d002      	beq.n	801af3c <_dtoa_r+0x5e4>
 801af36:	f8dd a020 	ldr.w	sl, [sp, #32]
 801af3a:	e04a      	b.n	801afd2 <_dtoa_r+0x67a>
 801af3c:	4615      	mov	r5, r2
 801af3e:	e7f4      	b.n	801af2a <_dtoa_r+0x5d2>
 801af40:	4b05      	ldr	r3, [pc, #20]	; (801af58 <_dtoa_r+0x600>)
 801af42:	f7e5 fb69 	bl	8000618 <__aeabi_dmul>
 801af46:	e9cd 0100 	strd	r0, r1, [sp]
 801af4a:	e7bc      	b.n	801aec6 <_dtoa_r+0x56e>
 801af4c:	080204e0 	.word	0x080204e0
 801af50:	080204b8 	.word	0x080204b8
 801af54:	3ff00000 	.word	0x3ff00000
 801af58:	40240000 	.word	0x40240000
 801af5c:	401c0000 	.word	0x401c0000
 801af60:	40140000 	.word	0x40140000
 801af64:	3fe00000 	.word	0x3fe00000
 801af68:	e9dd 6700 	ldrd	r6, r7, [sp]
 801af6c:	465d      	mov	r5, fp
 801af6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801af72:	4630      	mov	r0, r6
 801af74:	4639      	mov	r1, r7
 801af76:	f7e5 fc79 	bl	800086c <__aeabi_ddiv>
 801af7a:	f7e5 fdfd 	bl	8000b78 <__aeabi_d2iz>
 801af7e:	4680      	mov	r8, r0
 801af80:	f7e5 fae0 	bl	8000544 <__aeabi_i2d>
 801af84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801af88:	f7e5 fb46 	bl	8000618 <__aeabi_dmul>
 801af8c:	4602      	mov	r2, r0
 801af8e:	460b      	mov	r3, r1
 801af90:	4630      	mov	r0, r6
 801af92:	4639      	mov	r1, r7
 801af94:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801af98:	f7e5 f986 	bl	80002a8 <__aeabi_dsub>
 801af9c:	f805 6b01 	strb.w	r6, [r5], #1
 801afa0:	eba5 060b 	sub.w	r6, r5, fp
 801afa4:	45b1      	cmp	r9, r6
 801afa6:	4602      	mov	r2, r0
 801afa8:	460b      	mov	r3, r1
 801afaa:	d139      	bne.n	801b020 <_dtoa_r+0x6c8>
 801afac:	f7e5 f97e 	bl	80002ac <__adddf3>
 801afb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801afb4:	4606      	mov	r6, r0
 801afb6:	460f      	mov	r7, r1
 801afb8:	f7e5 fdbe 	bl	8000b38 <__aeabi_dcmpgt>
 801afbc:	b9c8      	cbnz	r0, 801aff2 <_dtoa_r+0x69a>
 801afbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801afc2:	4630      	mov	r0, r6
 801afc4:	4639      	mov	r1, r7
 801afc6:	f7e5 fd8f 	bl	8000ae8 <__aeabi_dcmpeq>
 801afca:	b110      	cbz	r0, 801afd2 <_dtoa_r+0x67a>
 801afcc:	f018 0f01 	tst.w	r8, #1
 801afd0:	d10f      	bne.n	801aff2 <_dtoa_r+0x69a>
 801afd2:	9904      	ldr	r1, [sp, #16]
 801afd4:	4620      	mov	r0, r4
 801afd6:	f000 fdf9 	bl	801bbcc <_Bfree>
 801afda:	2300      	movs	r3, #0
 801afdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801afde:	702b      	strb	r3, [r5, #0]
 801afe0:	f10a 0301 	add.w	r3, sl, #1
 801afe4:	6013      	str	r3, [r2, #0]
 801afe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801afe8:	2b00      	cmp	r3, #0
 801afea:	f000 8241 	beq.w	801b470 <_dtoa_r+0xb18>
 801afee:	601d      	str	r5, [r3, #0]
 801aff0:	e23e      	b.n	801b470 <_dtoa_r+0xb18>
 801aff2:	f8cd a020 	str.w	sl, [sp, #32]
 801aff6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801affa:	2a39      	cmp	r2, #57	; 0x39
 801affc:	f105 33ff 	add.w	r3, r5, #4294967295
 801b000:	d108      	bne.n	801b014 <_dtoa_r+0x6bc>
 801b002:	459b      	cmp	fp, r3
 801b004:	d10a      	bne.n	801b01c <_dtoa_r+0x6c4>
 801b006:	9b08      	ldr	r3, [sp, #32]
 801b008:	3301      	adds	r3, #1
 801b00a:	9308      	str	r3, [sp, #32]
 801b00c:	2330      	movs	r3, #48	; 0x30
 801b00e:	f88b 3000 	strb.w	r3, [fp]
 801b012:	465b      	mov	r3, fp
 801b014:	781a      	ldrb	r2, [r3, #0]
 801b016:	3201      	adds	r2, #1
 801b018:	701a      	strb	r2, [r3, #0]
 801b01a:	e78c      	b.n	801af36 <_dtoa_r+0x5de>
 801b01c:	461d      	mov	r5, r3
 801b01e:	e7ea      	b.n	801aff6 <_dtoa_r+0x69e>
 801b020:	2200      	movs	r2, #0
 801b022:	4b9b      	ldr	r3, [pc, #620]	; (801b290 <_dtoa_r+0x938>)
 801b024:	f7e5 faf8 	bl	8000618 <__aeabi_dmul>
 801b028:	2200      	movs	r2, #0
 801b02a:	2300      	movs	r3, #0
 801b02c:	4606      	mov	r6, r0
 801b02e:	460f      	mov	r7, r1
 801b030:	f7e5 fd5a 	bl	8000ae8 <__aeabi_dcmpeq>
 801b034:	2800      	cmp	r0, #0
 801b036:	d09a      	beq.n	801af6e <_dtoa_r+0x616>
 801b038:	e7cb      	b.n	801afd2 <_dtoa_r+0x67a>
 801b03a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b03c:	2a00      	cmp	r2, #0
 801b03e:	f000 808b 	beq.w	801b158 <_dtoa_r+0x800>
 801b042:	9a06      	ldr	r2, [sp, #24]
 801b044:	2a01      	cmp	r2, #1
 801b046:	dc6e      	bgt.n	801b126 <_dtoa_r+0x7ce>
 801b048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b04a:	2a00      	cmp	r2, #0
 801b04c:	d067      	beq.n	801b11e <_dtoa_r+0x7c6>
 801b04e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b052:	9f07      	ldr	r7, [sp, #28]
 801b054:	9d05      	ldr	r5, [sp, #20]
 801b056:	9a05      	ldr	r2, [sp, #20]
 801b058:	2101      	movs	r1, #1
 801b05a:	441a      	add	r2, r3
 801b05c:	4620      	mov	r0, r4
 801b05e:	9205      	str	r2, [sp, #20]
 801b060:	4498      	add	r8, r3
 801b062:	f000 fe91 	bl	801bd88 <__i2b>
 801b066:	4606      	mov	r6, r0
 801b068:	2d00      	cmp	r5, #0
 801b06a:	dd0c      	ble.n	801b086 <_dtoa_r+0x72e>
 801b06c:	f1b8 0f00 	cmp.w	r8, #0
 801b070:	dd09      	ble.n	801b086 <_dtoa_r+0x72e>
 801b072:	4545      	cmp	r5, r8
 801b074:	9a05      	ldr	r2, [sp, #20]
 801b076:	462b      	mov	r3, r5
 801b078:	bfa8      	it	ge
 801b07a:	4643      	movge	r3, r8
 801b07c:	1ad2      	subs	r2, r2, r3
 801b07e:	9205      	str	r2, [sp, #20]
 801b080:	1aed      	subs	r5, r5, r3
 801b082:	eba8 0803 	sub.w	r8, r8, r3
 801b086:	9b07      	ldr	r3, [sp, #28]
 801b088:	b1eb      	cbz	r3, 801b0c6 <_dtoa_r+0x76e>
 801b08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d067      	beq.n	801b160 <_dtoa_r+0x808>
 801b090:	b18f      	cbz	r7, 801b0b6 <_dtoa_r+0x75e>
 801b092:	4631      	mov	r1, r6
 801b094:	463a      	mov	r2, r7
 801b096:	4620      	mov	r0, r4
 801b098:	f000 ff16 	bl	801bec8 <__pow5mult>
 801b09c:	9a04      	ldr	r2, [sp, #16]
 801b09e:	4601      	mov	r1, r0
 801b0a0:	4606      	mov	r6, r0
 801b0a2:	4620      	mov	r0, r4
 801b0a4:	f000 fe79 	bl	801bd9a <__multiply>
 801b0a8:	9904      	ldr	r1, [sp, #16]
 801b0aa:	9008      	str	r0, [sp, #32]
 801b0ac:	4620      	mov	r0, r4
 801b0ae:	f000 fd8d 	bl	801bbcc <_Bfree>
 801b0b2:	9b08      	ldr	r3, [sp, #32]
 801b0b4:	9304      	str	r3, [sp, #16]
 801b0b6:	9b07      	ldr	r3, [sp, #28]
 801b0b8:	1bda      	subs	r2, r3, r7
 801b0ba:	d004      	beq.n	801b0c6 <_dtoa_r+0x76e>
 801b0bc:	9904      	ldr	r1, [sp, #16]
 801b0be:	4620      	mov	r0, r4
 801b0c0:	f000 ff02 	bl	801bec8 <__pow5mult>
 801b0c4:	9004      	str	r0, [sp, #16]
 801b0c6:	2101      	movs	r1, #1
 801b0c8:	4620      	mov	r0, r4
 801b0ca:	f000 fe5d 	bl	801bd88 <__i2b>
 801b0ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0d0:	4607      	mov	r7, r0
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	f000 81d0 	beq.w	801b478 <_dtoa_r+0xb20>
 801b0d8:	461a      	mov	r2, r3
 801b0da:	4601      	mov	r1, r0
 801b0dc:	4620      	mov	r0, r4
 801b0de:	f000 fef3 	bl	801bec8 <__pow5mult>
 801b0e2:	9b06      	ldr	r3, [sp, #24]
 801b0e4:	2b01      	cmp	r3, #1
 801b0e6:	4607      	mov	r7, r0
 801b0e8:	dc40      	bgt.n	801b16c <_dtoa_r+0x814>
 801b0ea:	9b00      	ldr	r3, [sp, #0]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d139      	bne.n	801b164 <_dtoa_r+0x80c>
 801b0f0:	9b01      	ldr	r3, [sp, #4]
 801b0f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d136      	bne.n	801b168 <_dtoa_r+0x810>
 801b0fa:	9b01      	ldr	r3, [sp, #4]
 801b0fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b100:	0d1b      	lsrs	r3, r3, #20
 801b102:	051b      	lsls	r3, r3, #20
 801b104:	b12b      	cbz	r3, 801b112 <_dtoa_r+0x7ba>
 801b106:	9b05      	ldr	r3, [sp, #20]
 801b108:	3301      	adds	r3, #1
 801b10a:	9305      	str	r3, [sp, #20]
 801b10c:	f108 0801 	add.w	r8, r8, #1
 801b110:	2301      	movs	r3, #1
 801b112:	9307      	str	r3, [sp, #28]
 801b114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b116:	2b00      	cmp	r3, #0
 801b118:	d12a      	bne.n	801b170 <_dtoa_r+0x818>
 801b11a:	2001      	movs	r0, #1
 801b11c:	e030      	b.n	801b180 <_dtoa_r+0x828>
 801b11e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b120:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b124:	e795      	b.n	801b052 <_dtoa_r+0x6fa>
 801b126:	9b07      	ldr	r3, [sp, #28]
 801b128:	f109 37ff 	add.w	r7, r9, #4294967295
 801b12c:	42bb      	cmp	r3, r7
 801b12e:	bfbf      	itttt	lt
 801b130:	9b07      	ldrlt	r3, [sp, #28]
 801b132:	9707      	strlt	r7, [sp, #28]
 801b134:	1afa      	sublt	r2, r7, r3
 801b136:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801b138:	bfbb      	ittet	lt
 801b13a:	189b      	addlt	r3, r3, r2
 801b13c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b13e:	1bdf      	subge	r7, r3, r7
 801b140:	2700      	movlt	r7, #0
 801b142:	f1b9 0f00 	cmp.w	r9, #0
 801b146:	bfb5      	itete	lt
 801b148:	9b05      	ldrlt	r3, [sp, #20]
 801b14a:	9d05      	ldrge	r5, [sp, #20]
 801b14c:	eba3 0509 	sublt.w	r5, r3, r9
 801b150:	464b      	movge	r3, r9
 801b152:	bfb8      	it	lt
 801b154:	2300      	movlt	r3, #0
 801b156:	e77e      	b.n	801b056 <_dtoa_r+0x6fe>
 801b158:	9f07      	ldr	r7, [sp, #28]
 801b15a:	9d05      	ldr	r5, [sp, #20]
 801b15c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801b15e:	e783      	b.n	801b068 <_dtoa_r+0x710>
 801b160:	9a07      	ldr	r2, [sp, #28]
 801b162:	e7ab      	b.n	801b0bc <_dtoa_r+0x764>
 801b164:	2300      	movs	r3, #0
 801b166:	e7d4      	b.n	801b112 <_dtoa_r+0x7ba>
 801b168:	9b00      	ldr	r3, [sp, #0]
 801b16a:	e7d2      	b.n	801b112 <_dtoa_r+0x7ba>
 801b16c:	2300      	movs	r3, #0
 801b16e:	9307      	str	r3, [sp, #28]
 801b170:	693b      	ldr	r3, [r7, #16]
 801b172:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801b176:	6918      	ldr	r0, [r3, #16]
 801b178:	f000 fdb8 	bl	801bcec <__hi0bits>
 801b17c:	f1c0 0020 	rsb	r0, r0, #32
 801b180:	4440      	add	r0, r8
 801b182:	f010 001f 	ands.w	r0, r0, #31
 801b186:	d047      	beq.n	801b218 <_dtoa_r+0x8c0>
 801b188:	f1c0 0320 	rsb	r3, r0, #32
 801b18c:	2b04      	cmp	r3, #4
 801b18e:	dd3b      	ble.n	801b208 <_dtoa_r+0x8b0>
 801b190:	9b05      	ldr	r3, [sp, #20]
 801b192:	f1c0 001c 	rsb	r0, r0, #28
 801b196:	4403      	add	r3, r0
 801b198:	9305      	str	r3, [sp, #20]
 801b19a:	4405      	add	r5, r0
 801b19c:	4480      	add	r8, r0
 801b19e:	9b05      	ldr	r3, [sp, #20]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	dd05      	ble.n	801b1b0 <_dtoa_r+0x858>
 801b1a4:	461a      	mov	r2, r3
 801b1a6:	9904      	ldr	r1, [sp, #16]
 801b1a8:	4620      	mov	r0, r4
 801b1aa:	f000 fedb 	bl	801bf64 <__lshift>
 801b1ae:	9004      	str	r0, [sp, #16]
 801b1b0:	f1b8 0f00 	cmp.w	r8, #0
 801b1b4:	dd05      	ble.n	801b1c2 <_dtoa_r+0x86a>
 801b1b6:	4639      	mov	r1, r7
 801b1b8:	4642      	mov	r2, r8
 801b1ba:	4620      	mov	r0, r4
 801b1bc:	f000 fed2 	bl	801bf64 <__lshift>
 801b1c0:	4607      	mov	r7, r0
 801b1c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b1c4:	b353      	cbz	r3, 801b21c <_dtoa_r+0x8c4>
 801b1c6:	4639      	mov	r1, r7
 801b1c8:	9804      	ldr	r0, [sp, #16]
 801b1ca:	f000 ff1f 	bl	801c00c <__mcmp>
 801b1ce:	2800      	cmp	r0, #0
 801b1d0:	da24      	bge.n	801b21c <_dtoa_r+0x8c4>
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	220a      	movs	r2, #10
 801b1d6:	9904      	ldr	r1, [sp, #16]
 801b1d8:	4620      	mov	r0, r4
 801b1da:	f000 fd0e 	bl	801bbfa <__multadd>
 801b1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1e0:	9004      	str	r0, [sp, #16]
 801b1e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	f000 814d 	beq.w	801b486 <_dtoa_r+0xb2e>
 801b1ec:	2300      	movs	r3, #0
 801b1ee:	4631      	mov	r1, r6
 801b1f0:	220a      	movs	r2, #10
 801b1f2:	4620      	mov	r0, r4
 801b1f4:	f000 fd01 	bl	801bbfa <__multadd>
 801b1f8:	9b02      	ldr	r3, [sp, #8]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	4606      	mov	r6, r0
 801b1fe:	dc4f      	bgt.n	801b2a0 <_dtoa_r+0x948>
 801b200:	9b06      	ldr	r3, [sp, #24]
 801b202:	2b02      	cmp	r3, #2
 801b204:	dd4c      	ble.n	801b2a0 <_dtoa_r+0x948>
 801b206:	e011      	b.n	801b22c <_dtoa_r+0x8d4>
 801b208:	d0c9      	beq.n	801b19e <_dtoa_r+0x846>
 801b20a:	9a05      	ldr	r2, [sp, #20]
 801b20c:	331c      	adds	r3, #28
 801b20e:	441a      	add	r2, r3
 801b210:	9205      	str	r2, [sp, #20]
 801b212:	441d      	add	r5, r3
 801b214:	4498      	add	r8, r3
 801b216:	e7c2      	b.n	801b19e <_dtoa_r+0x846>
 801b218:	4603      	mov	r3, r0
 801b21a:	e7f6      	b.n	801b20a <_dtoa_r+0x8b2>
 801b21c:	f1b9 0f00 	cmp.w	r9, #0
 801b220:	dc38      	bgt.n	801b294 <_dtoa_r+0x93c>
 801b222:	9b06      	ldr	r3, [sp, #24]
 801b224:	2b02      	cmp	r3, #2
 801b226:	dd35      	ble.n	801b294 <_dtoa_r+0x93c>
 801b228:	f8cd 9008 	str.w	r9, [sp, #8]
 801b22c:	9b02      	ldr	r3, [sp, #8]
 801b22e:	b963      	cbnz	r3, 801b24a <_dtoa_r+0x8f2>
 801b230:	4639      	mov	r1, r7
 801b232:	2205      	movs	r2, #5
 801b234:	4620      	mov	r0, r4
 801b236:	f000 fce0 	bl	801bbfa <__multadd>
 801b23a:	4601      	mov	r1, r0
 801b23c:	4607      	mov	r7, r0
 801b23e:	9804      	ldr	r0, [sp, #16]
 801b240:	f000 fee4 	bl	801c00c <__mcmp>
 801b244:	2800      	cmp	r0, #0
 801b246:	f73f adcc 	bgt.w	801ade2 <_dtoa_r+0x48a>
 801b24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b24c:	465d      	mov	r5, fp
 801b24e:	ea6f 0a03 	mvn.w	sl, r3
 801b252:	f04f 0900 	mov.w	r9, #0
 801b256:	4639      	mov	r1, r7
 801b258:	4620      	mov	r0, r4
 801b25a:	f000 fcb7 	bl	801bbcc <_Bfree>
 801b25e:	2e00      	cmp	r6, #0
 801b260:	f43f aeb7 	beq.w	801afd2 <_dtoa_r+0x67a>
 801b264:	f1b9 0f00 	cmp.w	r9, #0
 801b268:	d005      	beq.n	801b276 <_dtoa_r+0x91e>
 801b26a:	45b1      	cmp	r9, r6
 801b26c:	d003      	beq.n	801b276 <_dtoa_r+0x91e>
 801b26e:	4649      	mov	r1, r9
 801b270:	4620      	mov	r0, r4
 801b272:	f000 fcab 	bl	801bbcc <_Bfree>
 801b276:	4631      	mov	r1, r6
 801b278:	4620      	mov	r0, r4
 801b27a:	f000 fca7 	bl	801bbcc <_Bfree>
 801b27e:	e6a8      	b.n	801afd2 <_dtoa_r+0x67a>
 801b280:	2700      	movs	r7, #0
 801b282:	463e      	mov	r6, r7
 801b284:	e7e1      	b.n	801b24a <_dtoa_r+0x8f2>
 801b286:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b28a:	463e      	mov	r6, r7
 801b28c:	e5a9      	b.n	801ade2 <_dtoa_r+0x48a>
 801b28e:	bf00      	nop
 801b290:	40240000 	.word	0x40240000
 801b294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b296:	f8cd 9008 	str.w	r9, [sp, #8]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	f000 80fa 	beq.w	801b494 <_dtoa_r+0xb3c>
 801b2a0:	2d00      	cmp	r5, #0
 801b2a2:	dd05      	ble.n	801b2b0 <_dtoa_r+0x958>
 801b2a4:	4631      	mov	r1, r6
 801b2a6:	462a      	mov	r2, r5
 801b2a8:	4620      	mov	r0, r4
 801b2aa:	f000 fe5b 	bl	801bf64 <__lshift>
 801b2ae:	4606      	mov	r6, r0
 801b2b0:	9b07      	ldr	r3, [sp, #28]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d04c      	beq.n	801b350 <_dtoa_r+0x9f8>
 801b2b6:	6871      	ldr	r1, [r6, #4]
 801b2b8:	4620      	mov	r0, r4
 801b2ba:	f000 fc53 	bl	801bb64 <_Balloc>
 801b2be:	6932      	ldr	r2, [r6, #16]
 801b2c0:	3202      	adds	r2, #2
 801b2c2:	4605      	mov	r5, r0
 801b2c4:	0092      	lsls	r2, r2, #2
 801b2c6:	f106 010c 	add.w	r1, r6, #12
 801b2ca:	300c      	adds	r0, #12
 801b2cc:	f7fd fc44 	bl	8018b58 <memcpy>
 801b2d0:	2201      	movs	r2, #1
 801b2d2:	4629      	mov	r1, r5
 801b2d4:	4620      	mov	r0, r4
 801b2d6:	f000 fe45 	bl	801bf64 <__lshift>
 801b2da:	9b00      	ldr	r3, [sp, #0]
 801b2dc:	f8cd b014 	str.w	fp, [sp, #20]
 801b2e0:	f003 0301 	and.w	r3, r3, #1
 801b2e4:	46b1      	mov	r9, r6
 801b2e6:	9307      	str	r3, [sp, #28]
 801b2e8:	4606      	mov	r6, r0
 801b2ea:	4639      	mov	r1, r7
 801b2ec:	9804      	ldr	r0, [sp, #16]
 801b2ee:	f7ff faa7 	bl	801a840 <quorem>
 801b2f2:	4649      	mov	r1, r9
 801b2f4:	4605      	mov	r5, r0
 801b2f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801b2fa:	9804      	ldr	r0, [sp, #16]
 801b2fc:	f000 fe86 	bl	801c00c <__mcmp>
 801b300:	4632      	mov	r2, r6
 801b302:	9000      	str	r0, [sp, #0]
 801b304:	4639      	mov	r1, r7
 801b306:	4620      	mov	r0, r4
 801b308:	f000 fe9a 	bl	801c040 <__mdiff>
 801b30c:	68c3      	ldr	r3, [r0, #12]
 801b30e:	4602      	mov	r2, r0
 801b310:	bb03      	cbnz	r3, 801b354 <_dtoa_r+0x9fc>
 801b312:	4601      	mov	r1, r0
 801b314:	9008      	str	r0, [sp, #32]
 801b316:	9804      	ldr	r0, [sp, #16]
 801b318:	f000 fe78 	bl	801c00c <__mcmp>
 801b31c:	9a08      	ldr	r2, [sp, #32]
 801b31e:	4603      	mov	r3, r0
 801b320:	4611      	mov	r1, r2
 801b322:	4620      	mov	r0, r4
 801b324:	9308      	str	r3, [sp, #32]
 801b326:	f000 fc51 	bl	801bbcc <_Bfree>
 801b32a:	9b08      	ldr	r3, [sp, #32]
 801b32c:	b9a3      	cbnz	r3, 801b358 <_dtoa_r+0xa00>
 801b32e:	9a06      	ldr	r2, [sp, #24]
 801b330:	b992      	cbnz	r2, 801b358 <_dtoa_r+0xa00>
 801b332:	9a07      	ldr	r2, [sp, #28]
 801b334:	b982      	cbnz	r2, 801b358 <_dtoa_r+0xa00>
 801b336:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b33a:	d029      	beq.n	801b390 <_dtoa_r+0xa38>
 801b33c:	9b00      	ldr	r3, [sp, #0]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	dd01      	ble.n	801b346 <_dtoa_r+0x9ee>
 801b342:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801b346:	9b05      	ldr	r3, [sp, #20]
 801b348:	1c5d      	adds	r5, r3, #1
 801b34a:	f883 8000 	strb.w	r8, [r3]
 801b34e:	e782      	b.n	801b256 <_dtoa_r+0x8fe>
 801b350:	4630      	mov	r0, r6
 801b352:	e7c2      	b.n	801b2da <_dtoa_r+0x982>
 801b354:	2301      	movs	r3, #1
 801b356:	e7e3      	b.n	801b320 <_dtoa_r+0x9c8>
 801b358:	9a00      	ldr	r2, [sp, #0]
 801b35a:	2a00      	cmp	r2, #0
 801b35c:	db04      	blt.n	801b368 <_dtoa_r+0xa10>
 801b35e:	d125      	bne.n	801b3ac <_dtoa_r+0xa54>
 801b360:	9a06      	ldr	r2, [sp, #24]
 801b362:	bb1a      	cbnz	r2, 801b3ac <_dtoa_r+0xa54>
 801b364:	9a07      	ldr	r2, [sp, #28]
 801b366:	bb0a      	cbnz	r2, 801b3ac <_dtoa_r+0xa54>
 801b368:	2b00      	cmp	r3, #0
 801b36a:	ddec      	ble.n	801b346 <_dtoa_r+0x9ee>
 801b36c:	2201      	movs	r2, #1
 801b36e:	9904      	ldr	r1, [sp, #16]
 801b370:	4620      	mov	r0, r4
 801b372:	f000 fdf7 	bl	801bf64 <__lshift>
 801b376:	4639      	mov	r1, r7
 801b378:	9004      	str	r0, [sp, #16]
 801b37a:	f000 fe47 	bl	801c00c <__mcmp>
 801b37e:	2800      	cmp	r0, #0
 801b380:	dc03      	bgt.n	801b38a <_dtoa_r+0xa32>
 801b382:	d1e0      	bne.n	801b346 <_dtoa_r+0x9ee>
 801b384:	f018 0f01 	tst.w	r8, #1
 801b388:	d0dd      	beq.n	801b346 <_dtoa_r+0x9ee>
 801b38a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b38e:	d1d8      	bne.n	801b342 <_dtoa_r+0x9ea>
 801b390:	9b05      	ldr	r3, [sp, #20]
 801b392:	9a05      	ldr	r2, [sp, #20]
 801b394:	1c5d      	adds	r5, r3, #1
 801b396:	2339      	movs	r3, #57	; 0x39
 801b398:	7013      	strb	r3, [r2, #0]
 801b39a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b39e:	2b39      	cmp	r3, #57	; 0x39
 801b3a0:	f105 32ff 	add.w	r2, r5, #4294967295
 801b3a4:	d04f      	beq.n	801b446 <_dtoa_r+0xaee>
 801b3a6:	3301      	adds	r3, #1
 801b3a8:	7013      	strb	r3, [r2, #0]
 801b3aa:	e754      	b.n	801b256 <_dtoa_r+0x8fe>
 801b3ac:	9a05      	ldr	r2, [sp, #20]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	f102 0501 	add.w	r5, r2, #1
 801b3b4:	dd06      	ble.n	801b3c4 <_dtoa_r+0xa6c>
 801b3b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b3ba:	d0e9      	beq.n	801b390 <_dtoa_r+0xa38>
 801b3bc:	f108 0801 	add.w	r8, r8, #1
 801b3c0:	9b05      	ldr	r3, [sp, #20]
 801b3c2:	e7c2      	b.n	801b34a <_dtoa_r+0x9f2>
 801b3c4:	9a02      	ldr	r2, [sp, #8]
 801b3c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 801b3ca:	eba5 030b 	sub.w	r3, r5, fp
 801b3ce:	4293      	cmp	r3, r2
 801b3d0:	d021      	beq.n	801b416 <_dtoa_r+0xabe>
 801b3d2:	2300      	movs	r3, #0
 801b3d4:	220a      	movs	r2, #10
 801b3d6:	9904      	ldr	r1, [sp, #16]
 801b3d8:	4620      	mov	r0, r4
 801b3da:	f000 fc0e 	bl	801bbfa <__multadd>
 801b3de:	45b1      	cmp	r9, r6
 801b3e0:	9004      	str	r0, [sp, #16]
 801b3e2:	f04f 0300 	mov.w	r3, #0
 801b3e6:	f04f 020a 	mov.w	r2, #10
 801b3ea:	4649      	mov	r1, r9
 801b3ec:	4620      	mov	r0, r4
 801b3ee:	d105      	bne.n	801b3fc <_dtoa_r+0xaa4>
 801b3f0:	f000 fc03 	bl	801bbfa <__multadd>
 801b3f4:	4681      	mov	r9, r0
 801b3f6:	4606      	mov	r6, r0
 801b3f8:	9505      	str	r5, [sp, #20]
 801b3fa:	e776      	b.n	801b2ea <_dtoa_r+0x992>
 801b3fc:	f000 fbfd 	bl	801bbfa <__multadd>
 801b400:	4631      	mov	r1, r6
 801b402:	4681      	mov	r9, r0
 801b404:	2300      	movs	r3, #0
 801b406:	220a      	movs	r2, #10
 801b408:	4620      	mov	r0, r4
 801b40a:	f000 fbf6 	bl	801bbfa <__multadd>
 801b40e:	4606      	mov	r6, r0
 801b410:	e7f2      	b.n	801b3f8 <_dtoa_r+0xaa0>
 801b412:	f04f 0900 	mov.w	r9, #0
 801b416:	2201      	movs	r2, #1
 801b418:	9904      	ldr	r1, [sp, #16]
 801b41a:	4620      	mov	r0, r4
 801b41c:	f000 fda2 	bl	801bf64 <__lshift>
 801b420:	4639      	mov	r1, r7
 801b422:	9004      	str	r0, [sp, #16]
 801b424:	f000 fdf2 	bl	801c00c <__mcmp>
 801b428:	2800      	cmp	r0, #0
 801b42a:	dcb6      	bgt.n	801b39a <_dtoa_r+0xa42>
 801b42c:	d102      	bne.n	801b434 <_dtoa_r+0xadc>
 801b42e:	f018 0f01 	tst.w	r8, #1
 801b432:	d1b2      	bne.n	801b39a <_dtoa_r+0xa42>
 801b434:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b438:	2b30      	cmp	r3, #48	; 0x30
 801b43a:	f105 32ff 	add.w	r2, r5, #4294967295
 801b43e:	f47f af0a 	bne.w	801b256 <_dtoa_r+0x8fe>
 801b442:	4615      	mov	r5, r2
 801b444:	e7f6      	b.n	801b434 <_dtoa_r+0xadc>
 801b446:	4593      	cmp	fp, r2
 801b448:	d105      	bne.n	801b456 <_dtoa_r+0xafe>
 801b44a:	2331      	movs	r3, #49	; 0x31
 801b44c:	f10a 0a01 	add.w	sl, sl, #1
 801b450:	f88b 3000 	strb.w	r3, [fp]
 801b454:	e6ff      	b.n	801b256 <_dtoa_r+0x8fe>
 801b456:	4615      	mov	r5, r2
 801b458:	e79f      	b.n	801b39a <_dtoa_r+0xa42>
 801b45a:	f8df b064 	ldr.w	fp, [pc, #100]	; 801b4c0 <_dtoa_r+0xb68>
 801b45e:	e007      	b.n	801b470 <_dtoa_r+0xb18>
 801b460:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b462:	f8df b060 	ldr.w	fp, [pc, #96]	; 801b4c4 <_dtoa_r+0xb6c>
 801b466:	b11b      	cbz	r3, 801b470 <_dtoa_r+0xb18>
 801b468:	f10b 0308 	add.w	r3, fp, #8
 801b46c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b46e:	6013      	str	r3, [r2, #0]
 801b470:	4658      	mov	r0, fp
 801b472:	b017      	add	sp, #92	; 0x5c
 801b474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b478:	9b06      	ldr	r3, [sp, #24]
 801b47a:	2b01      	cmp	r3, #1
 801b47c:	f77f ae35 	ble.w	801b0ea <_dtoa_r+0x792>
 801b480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b482:	9307      	str	r3, [sp, #28]
 801b484:	e649      	b.n	801b11a <_dtoa_r+0x7c2>
 801b486:	9b02      	ldr	r3, [sp, #8]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	dc03      	bgt.n	801b494 <_dtoa_r+0xb3c>
 801b48c:	9b06      	ldr	r3, [sp, #24]
 801b48e:	2b02      	cmp	r3, #2
 801b490:	f73f aecc 	bgt.w	801b22c <_dtoa_r+0x8d4>
 801b494:	465d      	mov	r5, fp
 801b496:	4639      	mov	r1, r7
 801b498:	9804      	ldr	r0, [sp, #16]
 801b49a:	f7ff f9d1 	bl	801a840 <quorem>
 801b49e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801b4a2:	f805 8b01 	strb.w	r8, [r5], #1
 801b4a6:	9a02      	ldr	r2, [sp, #8]
 801b4a8:	eba5 030b 	sub.w	r3, r5, fp
 801b4ac:	429a      	cmp	r2, r3
 801b4ae:	ddb0      	ble.n	801b412 <_dtoa_r+0xaba>
 801b4b0:	2300      	movs	r3, #0
 801b4b2:	220a      	movs	r2, #10
 801b4b4:	9904      	ldr	r1, [sp, #16]
 801b4b6:	4620      	mov	r0, r4
 801b4b8:	f000 fb9f 	bl	801bbfa <__multadd>
 801b4bc:	9004      	str	r0, [sp, #16]
 801b4be:	e7ea      	b.n	801b496 <_dtoa_r+0xb3e>
 801b4c0:	08020424 	.word	0x08020424
 801b4c4:	080204a0 	.word	0x080204a0

0801b4c8 <rshift>:
 801b4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4ca:	6906      	ldr	r6, [r0, #16]
 801b4cc:	114b      	asrs	r3, r1, #5
 801b4ce:	429e      	cmp	r6, r3
 801b4d0:	f100 0414 	add.w	r4, r0, #20
 801b4d4:	dd30      	ble.n	801b538 <rshift+0x70>
 801b4d6:	f011 011f 	ands.w	r1, r1, #31
 801b4da:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801b4de:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801b4e2:	d108      	bne.n	801b4f6 <rshift+0x2e>
 801b4e4:	4621      	mov	r1, r4
 801b4e6:	42b2      	cmp	r2, r6
 801b4e8:	460b      	mov	r3, r1
 801b4ea:	d211      	bcs.n	801b510 <rshift+0x48>
 801b4ec:	f852 3b04 	ldr.w	r3, [r2], #4
 801b4f0:	f841 3b04 	str.w	r3, [r1], #4
 801b4f4:	e7f7      	b.n	801b4e6 <rshift+0x1e>
 801b4f6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801b4fa:	f1c1 0c20 	rsb	ip, r1, #32
 801b4fe:	40cd      	lsrs	r5, r1
 801b500:	3204      	adds	r2, #4
 801b502:	4623      	mov	r3, r4
 801b504:	42b2      	cmp	r2, r6
 801b506:	4617      	mov	r7, r2
 801b508:	d30c      	bcc.n	801b524 <rshift+0x5c>
 801b50a:	601d      	str	r5, [r3, #0]
 801b50c:	b105      	cbz	r5, 801b510 <rshift+0x48>
 801b50e:	3304      	adds	r3, #4
 801b510:	1b1a      	subs	r2, r3, r4
 801b512:	42a3      	cmp	r3, r4
 801b514:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b518:	bf08      	it	eq
 801b51a:	2300      	moveq	r3, #0
 801b51c:	6102      	str	r2, [r0, #16]
 801b51e:	bf08      	it	eq
 801b520:	6143      	streq	r3, [r0, #20]
 801b522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b524:	683f      	ldr	r7, [r7, #0]
 801b526:	fa07 f70c 	lsl.w	r7, r7, ip
 801b52a:	433d      	orrs	r5, r7
 801b52c:	f843 5b04 	str.w	r5, [r3], #4
 801b530:	f852 5b04 	ldr.w	r5, [r2], #4
 801b534:	40cd      	lsrs	r5, r1
 801b536:	e7e5      	b.n	801b504 <rshift+0x3c>
 801b538:	4623      	mov	r3, r4
 801b53a:	e7e9      	b.n	801b510 <rshift+0x48>

0801b53c <__hexdig_fun>:
 801b53c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b540:	2b09      	cmp	r3, #9
 801b542:	d802      	bhi.n	801b54a <__hexdig_fun+0xe>
 801b544:	3820      	subs	r0, #32
 801b546:	b2c0      	uxtb	r0, r0
 801b548:	4770      	bx	lr
 801b54a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b54e:	2b05      	cmp	r3, #5
 801b550:	d801      	bhi.n	801b556 <__hexdig_fun+0x1a>
 801b552:	3847      	subs	r0, #71	; 0x47
 801b554:	e7f7      	b.n	801b546 <__hexdig_fun+0xa>
 801b556:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b55a:	2b05      	cmp	r3, #5
 801b55c:	d801      	bhi.n	801b562 <__hexdig_fun+0x26>
 801b55e:	3827      	subs	r0, #39	; 0x27
 801b560:	e7f1      	b.n	801b546 <__hexdig_fun+0xa>
 801b562:	2000      	movs	r0, #0
 801b564:	4770      	bx	lr

0801b566 <__gethex>:
 801b566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b56a:	b08b      	sub	sp, #44	; 0x2c
 801b56c:	468a      	mov	sl, r1
 801b56e:	9002      	str	r0, [sp, #8]
 801b570:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b572:	9306      	str	r3, [sp, #24]
 801b574:	4690      	mov	r8, r2
 801b576:	f000 fad0 	bl	801bb1a <__localeconv_l>
 801b57a:	6803      	ldr	r3, [r0, #0]
 801b57c:	9303      	str	r3, [sp, #12]
 801b57e:	4618      	mov	r0, r3
 801b580:	f7e4 fe30 	bl	80001e4 <strlen>
 801b584:	9b03      	ldr	r3, [sp, #12]
 801b586:	9001      	str	r0, [sp, #4]
 801b588:	4403      	add	r3, r0
 801b58a:	f04f 0b00 	mov.w	fp, #0
 801b58e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b592:	9307      	str	r3, [sp, #28]
 801b594:	f8da 3000 	ldr.w	r3, [sl]
 801b598:	3302      	adds	r3, #2
 801b59a:	461f      	mov	r7, r3
 801b59c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b5a0:	2830      	cmp	r0, #48	; 0x30
 801b5a2:	d06c      	beq.n	801b67e <__gethex+0x118>
 801b5a4:	f7ff ffca 	bl	801b53c <__hexdig_fun>
 801b5a8:	4604      	mov	r4, r0
 801b5aa:	2800      	cmp	r0, #0
 801b5ac:	d16a      	bne.n	801b684 <__gethex+0x11e>
 801b5ae:	9a01      	ldr	r2, [sp, #4]
 801b5b0:	9903      	ldr	r1, [sp, #12]
 801b5b2:	4638      	mov	r0, r7
 801b5b4:	f7fe fa24 	bl	8019a00 <strncmp>
 801b5b8:	2800      	cmp	r0, #0
 801b5ba:	d166      	bne.n	801b68a <__gethex+0x124>
 801b5bc:	9b01      	ldr	r3, [sp, #4]
 801b5be:	5cf8      	ldrb	r0, [r7, r3]
 801b5c0:	18fe      	adds	r6, r7, r3
 801b5c2:	f7ff ffbb 	bl	801b53c <__hexdig_fun>
 801b5c6:	2800      	cmp	r0, #0
 801b5c8:	d062      	beq.n	801b690 <__gethex+0x12a>
 801b5ca:	4633      	mov	r3, r6
 801b5cc:	7818      	ldrb	r0, [r3, #0]
 801b5ce:	2830      	cmp	r0, #48	; 0x30
 801b5d0:	461f      	mov	r7, r3
 801b5d2:	f103 0301 	add.w	r3, r3, #1
 801b5d6:	d0f9      	beq.n	801b5cc <__gethex+0x66>
 801b5d8:	f7ff ffb0 	bl	801b53c <__hexdig_fun>
 801b5dc:	fab0 f580 	clz	r5, r0
 801b5e0:	096d      	lsrs	r5, r5, #5
 801b5e2:	4634      	mov	r4, r6
 801b5e4:	f04f 0b01 	mov.w	fp, #1
 801b5e8:	463a      	mov	r2, r7
 801b5ea:	4616      	mov	r6, r2
 801b5ec:	3201      	adds	r2, #1
 801b5ee:	7830      	ldrb	r0, [r6, #0]
 801b5f0:	f7ff ffa4 	bl	801b53c <__hexdig_fun>
 801b5f4:	2800      	cmp	r0, #0
 801b5f6:	d1f8      	bne.n	801b5ea <__gethex+0x84>
 801b5f8:	9a01      	ldr	r2, [sp, #4]
 801b5fa:	9903      	ldr	r1, [sp, #12]
 801b5fc:	4630      	mov	r0, r6
 801b5fe:	f7fe f9ff 	bl	8019a00 <strncmp>
 801b602:	b950      	cbnz	r0, 801b61a <__gethex+0xb4>
 801b604:	b954      	cbnz	r4, 801b61c <__gethex+0xb6>
 801b606:	9b01      	ldr	r3, [sp, #4]
 801b608:	18f4      	adds	r4, r6, r3
 801b60a:	4622      	mov	r2, r4
 801b60c:	4616      	mov	r6, r2
 801b60e:	3201      	adds	r2, #1
 801b610:	7830      	ldrb	r0, [r6, #0]
 801b612:	f7ff ff93 	bl	801b53c <__hexdig_fun>
 801b616:	2800      	cmp	r0, #0
 801b618:	d1f8      	bne.n	801b60c <__gethex+0xa6>
 801b61a:	b10c      	cbz	r4, 801b620 <__gethex+0xba>
 801b61c:	1ba4      	subs	r4, r4, r6
 801b61e:	00a4      	lsls	r4, r4, #2
 801b620:	7833      	ldrb	r3, [r6, #0]
 801b622:	2b50      	cmp	r3, #80	; 0x50
 801b624:	d001      	beq.n	801b62a <__gethex+0xc4>
 801b626:	2b70      	cmp	r3, #112	; 0x70
 801b628:	d140      	bne.n	801b6ac <__gethex+0x146>
 801b62a:	7873      	ldrb	r3, [r6, #1]
 801b62c:	2b2b      	cmp	r3, #43	; 0x2b
 801b62e:	d031      	beq.n	801b694 <__gethex+0x12e>
 801b630:	2b2d      	cmp	r3, #45	; 0x2d
 801b632:	d033      	beq.n	801b69c <__gethex+0x136>
 801b634:	1c71      	adds	r1, r6, #1
 801b636:	f04f 0900 	mov.w	r9, #0
 801b63a:	7808      	ldrb	r0, [r1, #0]
 801b63c:	f7ff ff7e 	bl	801b53c <__hexdig_fun>
 801b640:	1e43      	subs	r3, r0, #1
 801b642:	b2db      	uxtb	r3, r3
 801b644:	2b18      	cmp	r3, #24
 801b646:	d831      	bhi.n	801b6ac <__gethex+0x146>
 801b648:	f1a0 0210 	sub.w	r2, r0, #16
 801b64c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b650:	f7ff ff74 	bl	801b53c <__hexdig_fun>
 801b654:	1e43      	subs	r3, r0, #1
 801b656:	b2db      	uxtb	r3, r3
 801b658:	2b18      	cmp	r3, #24
 801b65a:	d922      	bls.n	801b6a2 <__gethex+0x13c>
 801b65c:	f1b9 0f00 	cmp.w	r9, #0
 801b660:	d000      	beq.n	801b664 <__gethex+0xfe>
 801b662:	4252      	negs	r2, r2
 801b664:	4414      	add	r4, r2
 801b666:	f8ca 1000 	str.w	r1, [sl]
 801b66a:	b30d      	cbz	r5, 801b6b0 <__gethex+0x14a>
 801b66c:	f1bb 0f00 	cmp.w	fp, #0
 801b670:	bf0c      	ite	eq
 801b672:	2706      	moveq	r7, #6
 801b674:	2700      	movne	r7, #0
 801b676:	4638      	mov	r0, r7
 801b678:	b00b      	add	sp, #44	; 0x2c
 801b67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b67e:	f10b 0b01 	add.w	fp, fp, #1
 801b682:	e78a      	b.n	801b59a <__gethex+0x34>
 801b684:	2500      	movs	r5, #0
 801b686:	462c      	mov	r4, r5
 801b688:	e7ae      	b.n	801b5e8 <__gethex+0x82>
 801b68a:	463e      	mov	r6, r7
 801b68c:	2501      	movs	r5, #1
 801b68e:	e7c7      	b.n	801b620 <__gethex+0xba>
 801b690:	4604      	mov	r4, r0
 801b692:	e7fb      	b.n	801b68c <__gethex+0x126>
 801b694:	f04f 0900 	mov.w	r9, #0
 801b698:	1cb1      	adds	r1, r6, #2
 801b69a:	e7ce      	b.n	801b63a <__gethex+0xd4>
 801b69c:	f04f 0901 	mov.w	r9, #1
 801b6a0:	e7fa      	b.n	801b698 <__gethex+0x132>
 801b6a2:	230a      	movs	r3, #10
 801b6a4:	fb03 0202 	mla	r2, r3, r2, r0
 801b6a8:	3a10      	subs	r2, #16
 801b6aa:	e7cf      	b.n	801b64c <__gethex+0xe6>
 801b6ac:	4631      	mov	r1, r6
 801b6ae:	e7da      	b.n	801b666 <__gethex+0x100>
 801b6b0:	1bf3      	subs	r3, r6, r7
 801b6b2:	3b01      	subs	r3, #1
 801b6b4:	4629      	mov	r1, r5
 801b6b6:	2b07      	cmp	r3, #7
 801b6b8:	dc49      	bgt.n	801b74e <__gethex+0x1e8>
 801b6ba:	9802      	ldr	r0, [sp, #8]
 801b6bc:	f000 fa52 	bl	801bb64 <_Balloc>
 801b6c0:	9b01      	ldr	r3, [sp, #4]
 801b6c2:	f100 0914 	add.w	r9, r0, #20
 801b6c6:	f04f 0b00 	mov.w	fp, #0
 801b6ca:	f1c3 0301 	rsb	r3, r3, #1
 801b6ce:	4605      	mov	r5, r0
 801b6d0:	f8cd 9010 	str.w	r9, [sp, #16]
 801b6d4:	46da      	mov	sl, fp
 801b6d6:	9308      	str	r3, [sp, #32]
 801b6d8:	42b7      	cmp	r7, r6
 801b6da:	d33b      	bcc.n	801b754 <__gethex+0x1ee>
 801b6dc:	9804      	ldr	r0, [sp, #16]
 801b6de:	f840 ab04 	str.w	sl, [r0], #4
 801b6e2:	eba0 0009 	sub.w	r0, r0, r9
 801b6e6:	1080      	asrs	r0, r0, #2
 801b6e8:	6128      	str	r0, [r5, #16]
 801b6ea:	0147      	lsls	r7, r0, #5
 801b6ec:	4650      	mov	r0, sl
 801b6ee:	f000 fafd 	bl	801bcec <__hi0bits>
 801b6f2:	f8d8 6000 	ldr.w	r6, [r8]
 801b6f6:	1a3f      	subs	r7, r7, r0
 801b6f8:	42b7      	cmp	r7, r6
 801b6fa:	dd64      	ble.n	801b7c6 <__gethex+0x260>
 801b6fc:	1bbf      	subs	r7, r7, r6
 801b6fe:	4639      	mov	r1, r7
 801b700:	4628      	mov	r0, r5
 801b702:	f000 fe0d 	bl	801c320 <__any_on>
 801b706:	4682      	mov	sl, r0
 801b708:	b178      	cbz	r0, 801b72a <__gethex+0x1c4>
 801b70a:	1e7b      	subs	r3, r7, #1
 801b70c:	1159      	asrs	r1, r3, #5
 801b70e:	f003 021f 	and.w	r2, r3, #31
 801b712:	f04f 0a01 	mov.w	sl, #1
 801b716:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801b71a:	fa0a f202 	lsl.w	r2, sl, r2
 801b71e:	420a      	tst	r2, r1
 801b720:	d003      	beq.n	801b72a <__gethex+0x1c4>
 801b722:	4553      	cmp	r3, sl
 801b724:	dc46      	bgt.n	801b7b4 <__gethex+0x24e>
 801b726:	f04f 0a02 	mov.w	sl, #2
 801b72a:	4639      	mov	r1, r7
 801b72c:	4628      	mov	r0, r5
 801b72e:	f7ff fecb 	bl	801b4c8 <rshift>
 801b732:	443c      	add	r4, r7
 801b734:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b738:	42a3      	cmp	r3, r4
 801b73a:	da52      	bge.n	801b7e2 <__gethex+0x27c>
 801b73c:	4629      	mov	r1, r5
 801b73e:	9802      	ldr	r0, [sp, #8]
 801b740:	f000 fa44 	bl	801bbcc <_Bfree>
 801b744:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b746:	2300      	movs	r3, #0
 801b748:	6013      	str	r3, [r2, #0]
 801b74a:	27a3      	movs	r7, #163	; 0xa3
 801b74c:	e793      	b.n	801b676 <__gethex+0x110>
 801b74e:	3101      	adds	r1, #1
 801b750:	105b      	asrs	r3, r3, #1
 801b752:	e7b0      	b.n	801b6b6 <__gethex+0x150>
 801b754:	1e73      	subs	r3, r6, #1
 801b756:	9305      	str	r3, [sp, #20]
 801b758:	9a07      	ldr	r2, [sp, #28]
 801b75a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b75e:	4293      	cmp	r3, r2
 801b760:	d018      	beq.n	801b794 <__gethex+0x22e>
 801b762:	f1bb 0f20 	cmp.w	fp, #32
 801b766:	d107      	bne.n	801b778 <__gethex+0x212>
 801b768:	9b04      	ldr	r3, [sp, #16]
 801b76a:	f8c3 a000 	str.w	sl, [r3]
 801b76e:	3304      	adds	r3, #4
 801b770:	f04f 0a00 	mov.w	sl, #0
 801b774:	9304      	str	r3, [sp, #16]
 801b776:	46d3      	mov	fp, sl
 801b778:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801b77c:	f7ff fede 	bl	801b53c <__hexdig_fun>
 801b780:	f000 000f 	and.w	r0, r0, #15
 801b784:	fa00 f00b 	lsl.w	r0, r0, fp
 801b788:	ea4a 0a00 	orr.w	sl, sl, r0
 801b78c:	f10b 0b04 	add.w	fp, fp, #4
 801b790:	9b05      	ldr	r3, [sp, #20]
 801b792:	e00d      	b.n	801b7b0 <__gethex+0x24a>
 801b794:	9b05      	ldr	r3, [sp, #20]
 801b796:	9a08      	ldr	r2, [sp, #32]
 801b798:	4413      	add	r3, r2
 801b79a:	42bb      	cmp	r3, r7
 801b79c:	d3e1      	bcc.n	801b762 <__gethex+0x1fc>
 801b79e:	4618      	mov	r0, r3
 801b7a0:	9a01      	ldr	r2, [sp, #4]
 801b7a2:	9903      	ldr	r1, [sp, #12]
 801b7a4:	9309      	str	r3, [sp, #36]	; 0x24
 801b7a6:	f7fe f92b 	bl	8019a00 <strncmp>
 801b7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7ac:	2800      	cmp	r0, #0
 801b7ae:	d1d8      	bne.n	801b762 <__gethex+0x1fc>
 801b7b0:	461e      	mov	r6, r3
 801b7b2:	e791      	b.n	801b6d8 <__gethex+0x172>
 801b7b4:	1eb9      	subs	r1, r7, #2
 801b7b6:	4628      	mov	r0, r5
 801b7b8:	f000 fdb2 	bl	801c320 <__any_on>
 801b7bc:	2800      	cmp	r0, #0
 801b7be:	d0b2      	beq.n	801b726 <__gethex+0x1c0>
 801b7c0:	f04f 0a03 	mov.w	sl, #3
 801b7c4:	e7b1      	b.n	801b72a <__gethex+0x1c4>
 801b7c6:	da09      	bge.n	801b7dc <__gethex+0x276>
 801b7c8:	1bf7      	subs	r7, r6, r7
 801b7ca:	4629      	mov	r1, r5
 801b7cc:	463a      	mov	r2, r7
 801b7ce:	9802      	ldr	r0, [sp, #8]
 801b7d0:	f000 fbc8 	bl	801bf64 <__lshift>
 801b7d4:	1be4      	subs	r4, r4, r7
 801b7d6:	4605      	mov	r5, r0
 801b7d8:	f100 0914 	add.w	r9, r0, #20
 801b7dc:	f04f 0a00 	mov.w	sl, #0
 801b7e0:	e7a8      	b.n	801b734 <__gethex+0x1ce>
 801b7e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b7e6:	42a0      	cmp	r0, r4
 801b7e8:	dd6a      	ble.n	801b8c0 <__gethex+0x35a>
 801b7ea:	1b04      	subs	r4, r0, r4
 801b7ec:	42a6      	cmp	r6, r4
 801b7ee:	dc2e      	bgt.n	801b84e <__gethex+0x2e8>
 801b7f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b7f4:	2b02      	cmp	r3, #2
 801b7f6:	d022      	beq.n	801b83e <__gethex+0x2d8>
 801b7f8:	2b03      	cmp	r3, #3
 801b7fa:	d024      	beq.n	801b846 <__gethex+0x2e0>
 801b7fc:	2b01      	cmp	r3, #1
 801b7fe:	d115      	bne.n	801b82c <__gethex+0x2c6>
 801b800:	42a6      	cmp	r6, r4
 801b802:	d113      	bne.n	801b82c <__gethex+0x2c6>
 801b804:	2e01      	cmp	r6, #1
 801b806:	dc0b      	bgt.n	801b820 <__gethex+0x2ba>
 801b808:	9a06      	ldr	r2, [sp, #24]
 801b80a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b80e:	6013      	str	r3, [r2, #0]
 801b810:	2301      	movs	r3, #1
 801b812:	612b      	str	r3, [r5, #16]
 801b814:	f8c9 3000 	str.w	r3, [r9]
 801b818:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b81a:	2762      	movs	r7, #98	; 0x62
 801b81c:	601d      	str	r5, [r3, #0]
 801b81e:	e72a      	b.n	801b676 <__gethex+0x110>
 801b820:	1e71      	subs	r1, r6, #1
 801b822:	4628      	mov	r0, r5
 801b824:	f000 fd7c 	bl	801c320 <__any_on>
 801b828:	2800      	cmp	r0, #0
 801b82a:	d1ed      	bne.n	801b808 <__gethex+0x2a2>
 801b82c:	4629      	mov	r1, r5
 801b82e:	9802      	ldr	r0, [sp, #8]
 801b830:	f000 f9cc 	bl	801bbcc <_Bfree>
 801b834:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b836:	2300      	movs	r3, #0
 801b838:	6013      	str	r3, [r2, #0]
 801b83a:	2750      	movs	r7, #80	; 0x50
 801b83c:	e71b      	b.n	801b676 <__gethex+0x110>
 801b83e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b840:	2b00      	cmp	r3, #0
 801b842:	d0e1      	beq.n	801b808 <__gethex+0x2a2>
 801b844:	e7f2      	b.n	801b82c <__gethex+0x2c6>
 801b846:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d1dd      	bne.n	801b808 <__gethex+0x2a2>
 801b84c:	e7ee      	b.n	801b82c <__gethex+0x2c6>
 801b84e:	1e67      	subs	r7, r4, #1
 801b850:	f1ba 0f00 	cmp.w	sl, #0
 801b854:	d131      	bne.n	801b8ba <__gethex+0x354>
 801b856:	b127      	cbz	r7, 801b862 <__gethex+0x2fc>
 801b858:	4639      	mov	r1, r7
 801b85a:	4628      	mov	r0, r5
 801b85c:	f000 fd60 	bl	801c320 <__any_on>
 801b860:	4682      	mov	sl, r0
 801b862:	117a      	asrs	r2, r7, #5
 801b864:	2301      	movs	r3, #1
 801b866:	f007 071f 	and.w	r7, r7, #31
 801b86a:	fa03 f707 	lsl.w	r7, r3, r7
 801b86e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801b872:	4621      	mov	r1, r4
 801b874:	421f      	tst	r7, r3
 801b876:	4628      	mov	r0, r5
 801b878:	bf18      	it	ne
 801b87a:	f04a 0a02 	orrne.w	sl, sl, #2
 801b87e:	1b36      	subs	r6, r6, r4
 801b880:	f7ff fe22 	bl	801b4c8 <rshift>
 801b884:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801b888:	2702      	movs	r7, #2
 801b88a:	f1ba 0f00 	cmp.w	sl, #0
 801b88e:	d048      	beq.n	801b922 <__gethex+0x3bc>
 801b890:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b894:	2b02      	cmp	r3, #2
 801b896:	d015      	beq.n	801b8c4 <__gethex+0x35e>
 801b898:	2b03      	cmp	r3, #3
 801b89a:	d017      	beq.n	801b8cc <__gethex+0x366>
 801b89c:	2b01      	cmp	r3, #1
 801b89e:	d109      	bne.n	801b8b4 <__gethex+0x34e>
 801b8a0:	f01a 0f02 	tst.w	sl, #2
 801b8a4:	d006      	beq.n	801b8b4 <__gethex+0x34e>
 801b8a6:	f8d9 3000 	ldr.w	r3, [r9]
 801b8aa:	ea4a 0a03 	orr.w	sl, sl, r3
 801b8ae:	f01a 0f01 	tst.w	sl, #1
 801b8b2:	d10e      	bne.n	801b8d2 <__gethex+0x36c>
 801b8b4:	f047 0710 	orr.w	r7, r7, #16
 801b8b8:	e033      	b.n	801b922 <__gethex+0x3bc>
 801b8ba:	f04f 0a01 	mov.w	sl, #1
 801b8be:	e7d0      	b.n	801b862 <__gethex+0x2fc>
 801b8c0:	2701      	movs	r7, #1
 801b8c2:	e7e2      	b.n	801b88a <__gethex+0x324>
 801b8c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b8c6:	f1c3 0301 	rsb	r3, r3, #1
 801b8ca:	9315      	str	r3, [sp, #84]	; 0x54
 801b8cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d0f0      	beq.n	801b8b4 <__gethex+0x34e>
 801b8d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801b8d6:	f105 0314 	add.w	r3, r5, #20
 801b8da:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801b8de:	eb03 010a 	add.w	r1, r3, sl
 801b8e2:	f04f 0c00 	mov.w	ip, #0
 801b8e6:	4618      	mov	r0, r3
 801b8e8:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b8f0:	d01c      	beq.n	801b92c <__gethex+0x3c6>
 801b8f2:	3201      	adds	r2, #1
 801b8f4:	6002      	str	r2, [r0, #0]
 801b8f6:	2f02      	cmp	r7, #2
 801b8f8:	f105 0314 	add.w	r3, r5, #20
 801b8fc:	d138      	bne.n	801b970 <__gethex+0x40a>
 801b8fe:	f8d8 2000 	ldr.w	r2, [r8]
 801b902:	3a01      	subs	r2, #1
 801b904:	42b2      	cmp	r2, r6
 801b906:	d10a      	bne.n	801b91e <__gethex+0x3b8>
 801b908:	1171      	asrs	r1, r6, #5
 801b90a:	2201      	movs	r2, #1
 801b90c:	f006 061f 	and.w	r6, r6, #31
 801b910:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b914:	fa02 f606 	lsl.w	r6, r2, r6
 801b918:	421e      	tst	r6, r3
 801b91a:	bf18      	it	ne
 801b91c:	4617      	movne	r7, r2
 801b91e:	f047 0720 	orr.w	r7, r7, #32
 801b922:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b924:	601d      	str	r5, [r3, #0]
 801b926:	9b06      	ldr	r3, [sp, #24]
 801b928:	601c      	str	r4, [r3, #0]
 801b92a:	e6a4      	b.n	801b676 <__gethex+0x110>
 801b92c:	4299      	cmp	r1, r3
 801b92e:	f843 cc04 	str.w	ip, [r3, #-4]
 801b932:	d8d8      	bhi.n	801b8e6 <__gethex+0x380>
 801b934:	68ab      	ldr	r3, [r5, #8]
 801b936:	4599      	cmp	r9, r3
 801b938:	db12      	blt.n	801b960 <__gethex+0x3fa>
 801b93a:	6869      	ldr	r1, [r5, #4]
 801b93c:	9802      	ldr	r0, [sp, #8]
 801b93e:	3101      	adds	r1, #1
 801b940:	f000 f910 	bl	801bb64 <_Balloc>
 801b944:	692a      	ldr	r2, [r5, #16]
 801b946:	3202      	adds	r2, #2
 801b948:	f105 010c 	add.w	r1, r5, #12
 801b94c:	4683      	mov	fp, r0
 801b94e:	0092      	lsls	r2, r2, #2
 801b950:	300c      	adds	r0, #12
 801b952:	f7fd f901 	bl	8018b58 <memcpy>
 801b956:	4629      	mov	r1, r5
 801b958:	9802      	ldr	r0, [sp, #8]
 801b95a:	f000 f937 	bl	801bbcc <_Bfree>
 801b95e:	465d      	mov	r5, fp
 801b960:	692b      	ldr	r3, [r5, #16]
 801b962:	1c5a      	adds	r2, r3, #1
 801b964:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801b968:	612a      	str	r2, [r5, #16]
 801b96a:	2201      	movs	r2, #1
 801b96c:	615a      	str	r2, [r3, #20]
 801b96e:	e7c2      	b.n	801b8f6 <__gethex+0x390>
 801b970:	692a      	ldr	r2, [r5, #16]
 801b972:	454a      	cmp	r2, r9
 801b974:	dd0b      	ble.n	801b98e <__gethex+0x428>
 801b976:	2101      	movs	r1, #1
 801b978:	4628      	mov	r0, r5
 801b97a:	f7ff fda5 	bl	801b4c8 <rshift>
 801b97e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b982:	3401      	adds	r4, #1
 801b984:	42a3      	cmp	r3, r4
 801b986:	f6ff aed9 	blt.w	801b73c <__gethex+0x1d6>
 801b98a:	2701      	movs	r7, #1
 801b98c:	e7c7      	b.n	801b91e <__gethex+0x3b8>
 801b98e:	f016 061f 	ands.w	r6, r6, #31
 801b992:	d0fa      	beq.n	801b98a <__gethex+0x424>
 801b994:	449a      	add	sl, r3
 801b996:	f1c6 0620 	rsb	r6, r6, #32
 801b99a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801b99e:	f000 f9a5 	bl	801bcec <__hi0bits>
 801b9a2:	42b0      	cmp	r0, r6
 801b9a4:	dbe7      	blt.n	801b976 <__gethex+0x410>
 801b9a6:	e7f0      	b.n	801b98a <__gethex+0x424>

0801b9a8 <L_shift>:
 801b9a8:	f1c2 0208 	rsb	r2, r2, #8
 801b9ac:	0092      	lsls	r2, r2, #2
 801b9ae:	b570      	push	{r4, r5, r6, lr}
 801b9b0:	f1c2 0620 	rsb	r6, r2, #32
 801b9b4:	6843      	ldr	r3, [r0, #4]
 801b9b6:	6804      	ldr	r4, [r0, #0]
 801b9b8:	fa03 f506 	lsl.w	r5, r3, r6
 801b9bc:	432c      	orrs	r4, r5
 801b9be:	40d3      	lsrs	r3, r2
 801b9c0:	6004      	str	r4, [r0, #0]
 801b9c2:	f840 3f04 	str.w	r3, [r0, #4]!
 801b9c6:	4288      	cmp	r0, r1
 801b9c8:	d3f4      	bcc.n	801b9b4 <L_shift+0xc>
 801b9ca:	bd70      	pop	{r4, r5, r6, pc}

0801b9cc <__match>:
 801b9cc:	b530      	push	{r4, r5, lr}
 801b9ce:	6803      	ldr	r3, [r0, #0]
 801b9d0:	3301      	adds	r3, #1
 801b9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b9d6:	b914      	cbnz	r4, 801b9de <__match+0x12>
 801b9d8:	6003      	str	r3, [r0, #0]
 801b9da:	2001      	movs	r0, #1
 801b9dc:	bd30      	pop	{r4, r5, pc}
 801b9de:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b9e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b9e6:	2d19      	cmp	r5, #25
 801b9e8:	bf98      	it	ls
 801b9ea:	3220      	addls	r2, #32
 801b9ec:	42a2      	cmp	r2, r4
 801b9ee:	d0f0      	beq.n	801b9d2 <__match+0x6>
 801b9f0:	2000      	movs	r0, #0
 801b9f2:	e7f3      	b.n	801b9dc <__match+0x10>

0801b9f4 <__hexnan>:
 801b9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9f8:	680b      	ldr	r3, [r1, #0]
 801b9fa:	6801      	ldr	r1, [r0, #0]
 801b9fc:	115f      	asrs	r7, r3, #5
 801b9fe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801ba02:	f013 031f 	ands.w	r3, r3, #31
 801ba06:	b087      	sub	sp, #28
 801ba08:	bf18      	it	ne
 801ba0a:	3704      	addne	r7, #4
 801ba0c:	2500      	movs	r5, #0
 801ba0e:	1f3e      	subs	r6, r7, #4
 801ba10:	4682      	mov	sl, r0
 801ba12:	4690      	mov	r8, r2
 801ba14:	9301      	str	r3, [sp, #4]
 801ba16:	f847 5c04 	str.w	r5, [r7, #-4]
 801ba1a:	46b1      	mov	r9, r6
 801ba1c:	4634      	mov	r4, r6
 801ba1e:	9502      	str	r5, [sp, #8]
 801ba20:	46ab      	mov	fp, r5
 801ba22:	784a      	ldrb	r2, [r1, #1]
 801ba24:	1c4b      	adds	r3, r1, #1
 801ba26:	9303      	str	r3, [sp, #12]
 801ba28:	b342      	cbz	r2, 801ba7c <__hexnan+0x88>
 801ba2a:	4610      	mov	r0, r2
 801ba2c:	9105      	str	r1, [sp, #20]
 801ba2e:	9204      	str	r2, [sp, #16]
 801ba30:	f7ff fd84 	bl	801b53c <__hexdig_fun>
 801ba34:	2800      	cmp	r0, #0
 801ba36:	d143      	bne.n	801bac0 <__hexnan+0xcc>
 801ba38:	9a04      	ldr	r2, [sp, #16]
 801ba3a:	9905      	ldr	r1, [sp, #20]
 801ba3c:	2a20      	cmp	r2, #32
 801ba3e:	d818      	bhi.n	801ba72 <__hexnan+0x7e>
 801ba40:	9b02      	ldr	r3, [sp, #8]
 801ba42:	459b      	cmp	fp, r3
 801ba44:	dd13      	ble.n	801ba6e <__hexnan+0x7a>
 801ba46:	454c      	cmp	r4, r9
 801ba48:	d206      	bcs.n	801ba58 <__hexnan+0x64>
 801ba4a:	2d07      	cmp	r5, #7
 801ba4c:	dc04      	bgt.n	801ba58 <__hexnan+0x64>
 801ba4e:	462a      	mov	r2, r5
 801ba50:	4649      	mov	r1, r9
 801ba52:	4620      	mov	r0, r4
 801ba54:	f7ff ffa8 	bl	801b9a8 <L_shift>
 801ba58:	4544      	cmp	r4, r8
 801ba5a:	d944      	bls.n	801bae6 <__hexnan+0xf2>
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	f1a4 0904 	sub.w	r9, r4, #4
 801ba62:	f844 3c04 	str.w	r3, [r4, #-4]
 801ba66:	f8cd b008 	str.w	fp, [sp, #8]
 801ba6a:	464c      	mov	r4, r9
 801ba6c:	461d      	mov	r5, r3
 801ba6e:	9903      	ldr	r1, [sp, #12]
 801ba70:	e7d7      	b.n	801ba22 <__hexnan+0x2e>
 801ba72:	2a29      	cmp	r2, #41	; 0x29
 801ba74:	d14a      	bne.n	801bb0c <__hexnan+0x118>
 801ba76:	3102      	adds	r1, #2
 801ba78:	f8ca 1000 	str.w	r1, [sl]
 801ba7c:	f1bb 0f00 	cmp.w	fp, #0
 801ba80:	d044      	beq.n	801bb0c <__hexnan+0x118>
 801ba82:	454c      	cmp	r4, r9
 801ba84:	d206      	bcs.n	801ba94 <__hexnan+0xa0>
 801ba86:	2d07      	cmp	r5, #7
 801ba88:	dc04      	bgt.n	801ba94 <__hexnan+0xa0>
 801ba8a:	462a      	mov	r2, r5
 801ba8c:	4649      	mov	r1, r9
 801ba8e:	4620      	mov	r0, r4
 801ba90:	f7ff ff8a 	bl	801b9a8 <L_shift>
 801ba94:	4544      	cmp	r4, r8
 801ba96:	d928      	bls.n	801baea <__hexnan+0xf6>
 801ba98:	4643      	mov	r3, r8
 801ba9a:	f854 2b04 	ldr.w	r2, [r4], #4
 801ba9e:	f843 2b04 	str.w	r2, [r3], #4
 801baa2:	42a6      	cmp	r6, r4
 801baa4:	d2f9      	bcs.n	801ba9a <__hexnan+0xa6>
 801baa6:	2200      	movs	r2, #0
 801baa8:	f843 2b04 	str.w	r2, [r3], #4
 801baac:	429e      	cmp	r6, r3
 801baae:	d2fb      	bcs.n	801baa8 <__hexnan+0xb4>
 801bab0:	6833      	ldr	r3, [r6, #0]
 801bab2:	b91b      	cbnz	r3, 801babc <__hexnan+0xc8>
 801bab4:	4546      	cmp	r6, r8
 801bab6:	d127      	bne.n	801bb08 <__hexnan+0x114>
 801bab8:	2301      	movs	r3, #1
 801baba:	6033      	str	r3, [r6, #0]
 801babc:	2005      	movs	r0, #5
 801babe:	e026      	b.n	801bb0e <__hexnan+0x11a>
 801bac0:	3501      	adds	r5, #1
 801bac2:	2d08      	cmp	r5, #8
 801bac4:	f10b 0b01 	add.w	fp, fp, #1
 801bac8:	dd06      	ble.n	801bad8 <__hexnan+0xe4>
 801baca:	4544      	cmp	r4, r8
 801bacc:	d9cf      	bls.n	801ba6e <__hexnan+0x7a>
 801bace:	2300      	movs	r3, #0
 801bad0:	f844 3c04 	str.w	r3, [r4, #-4]
 801bad4:	2501      	movs	r5, #1
 801bad6:	3c04      	subs	r4, #4
 801bad8:	6822      	ldr	r2, [r4, #0]
 801bada:	f000 000f 	and.w	r0, r0, #15
 801bade:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801bae2:	6020      	str	r0, [r4, #0]
 801bae4:	e7c3      	b.n	801ba6e <__hexnan+0x7a>
 801bae6:	2508      	movs	r5, #8
 801bae8:	e7c1      	b.n	801ba6e <__hexnan+0x7a>
 801baea:	9b01      	ldr	r3, [sp, #4]
 801baec:	2b00      	cmp	r3, #0
 801baee:	d0df      	beq.n	801bab0 <__hexnan+0xbc>
 801baf0:	f04f 32ff 	mov.w	r2, #4294967295
 801baf4:	f1c3 0320 	rsb	r3, r3, #32
 801baf8:	fa22 f303 	lsr.w	r3, r2, r3
 801bafc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801bb00:	401a      	ands	r2, r3
 801bb02:	f847 2c04 	str.w	r2, [r7, #-4]
 801bb06:	e7d3      	b.n	801bab0 <__hexnan+0xbc>
 801bb08:	3e04      	subs	r6, #4
 801bb0a:	e7d1      	b.n	801bab0 <__hexnan+0xbc>
 801bb0c:	2004      	movs	r0, #4
 801bb0e:	b007      	add	sp, #28
 801bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb14 <__locale_ctype_ptr_l>:
 801bb14:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801bb18:	4770      	bx	lr

0801bb1a <__localeconv_l>:
 801bb1a:	30f0      	adds	r0, #240	; 0xf0
 801bb1c:	4770      	bx	lr
	...

0801bb20 <_localeconv_r>:
 801bb20:	4b04      	ldr	r3, [pc, #16]	; (801bb34 <_localeconv_r+0x14>)
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	6a18      	ldr	r0, [r3, #32]
 801bb26:	4b04      	ldr	r3, [pc, #16]	; (801bb38 <_localeconv_r+0x18>)
 801bb28:	2800      	cmp	r0, #0
 801bb2a:	bf08      	it	eq
 801bb2c:	4618      	moveq	r0, r3
 801bb2e:	30f0      	adds	r0, #240	; 0xf0
 801bb30:	4770      	bx	lr
 801bb32:	bf00      	nop
 801bb34:	200001d4 	.word	0x200001d4
 801bb38:	20000238 	.word	0x20000238

0801bb3c <__ascii_mbtowc>:
 801bb3c:	b082      	sub	sp, #8
 801bb3e:	b901      	cbnz	r1, 801bb42 <__ascii_mbtowc+0x6>
 801bb40:	a901      	add	r1, sp, #4
 801bb42:	b142      	cbz	r2, 801bb56 <__ascii_mbtowc+0x1a>
 801bb44:	b14b      	cbz	r3, 801bb5a <__ascii_mbtowc+0x1e>
 801bb46:	7813      	ldrb	r3, [r2, #0]
 801bb48:	600b      	str	r3, [r1, #0]
 801bb4a:	7812      	ldrb	r2, [r2, #0]
 801bb4c:	1c10      	adds	r0, r2, #0
 801bb4e:	bf18      	it	ne
 801bb50:	2001      	movne	r0, #1
 801bb52:	b002      	add	sp, #8
 801bb54:	4770      	bx	lr
 801bb56:	4610      	mov	r0, r2
 801bb58:	e7fb      	b.n	801bb52 <__ascii_mbtowc+0x16>
 801bb5a:	f06f 0001 	mvn.w	r0, #1
 801bb5e:	e7f8      	b.n	801bb52 <__ascii_mbtowc+0x16>

0801bb60 <__malloc_lock>:
 801bb60:	4770      	bx	lr

0801bb62 <__malloc_unlock>:
 801bb62:	4770      	bx	lr

0801bb64 <_Balloc>:
 801bb64:	b570      	push	{r4, r5, r6, lr}
 801bb66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bb68:	4604      	mov	r4, r0
 801bb6a:	460e      	mov	r6, r1
 801bb6c:	b93d      	cbnz	r5, 801bb7e <_Balloc+0x1a>
 801bb6e:	2010      	movs	r0, #16
 801bb70:	f7fc ffe2 	bl	8018b38 <malloc>
 801bb74:	6260      	str	r0, [r4, #36]	; 0x24
 801bb76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801bb7a:	6005      	str	r5, [r0, #0]
 801bb7c:	60c5      	str	r5, [r0, #12]
 801bb7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801bb80:	68eb      	ldr	r3, [r5, #12]
 801bb82:	b183      	cbz	r3, 801bba6 <_Balloc+0x42>
 801bb84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bb86:	68db      	ldr	r3, [r3, #12]
 801bb88:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801bb8c:	b9b8      	cbnz	r0, 801bbbe <_Balloc+0x5a>
 801bb8e:	2101      	movs	r1, #1
 801bb90:	fa01 f506 	lsl.w	r5, r1, r6
 801bb94:	1d6a      	adds	r2, r5, #5
 801bb96:	0092      	lsls	r2, r2, #2
 801bb98:	4620      	mov	r0, r4
 801bb9a:	f000 fbe2 	bl	801c362 <_calloc_r>
 801bb9e:	b160      	cbz	r0, 801bbba <_Balloc+0x56>
 801bba0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801bba4:	e00e      	b.n	801bbc4 <_Balloc+0x60>
 801bba6:	2221      	movs	r2, #33	; 0x21
 801bba8:	2104      	movs	r1, #4
 801bbaa:	4620      	mov	r0, r4
 801bbac:	f000 fbd9 	bl	801c362 <_calloc_r>
 801bbb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbb2:	60e8      	str	r0, [r5, #12]
 801bbb4:	68db      	ldr	r3, [r3, #12]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d1e4      	bne.n	801bb84 <_Balloc+0x20>
 801bbba:	2000      	movs	r0, #0
 801bbbc:	bd70      	pop	{r4, r5, r6, pc}
 801bbbe:	6802      	ldr	r2, [r0, #0]
 801bbc0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801bbc4:	2300      	movs	r3, #0
 801bbc6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bbca:	e7f7      	b.n	801bbbc <_Balloc+0x58>

0801bbcc <_Bfree>:
 801bbcc:	b570      	push	{r4, r5, r6, lr}
 801bbce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801bbd0:	4606      	mov	r6, r0
 801bbd2:	460d      	mov	r5, r1
 801bbd4:	b93c      	cbnz	r4, 801bbe6 <_Bfree+0x1a>
 801bbd6:	2010      	movs	r0, #16
 801bbd8:	f7fc ffae 	bl	8018b38 <malloc>
 801bbdc:	6270      	str	r0, [r6, #36]	; 0x24
 801bbde:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bbe2:	6004      	str	r4, [r0, #0]
 801bbe4:	60c4      	str	r4, [r0, #12]
 801bbe6:	b13d      	cbz	r5, 801bbf8 <_Bfree+0x2c>
 801bbe8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801bbea:	686a      	ldr	r2, [r5, #4]
 801bbec:	68db      	ldr	r3, [r3, #12]
 801bbee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bbf2:	6029      	str	r1, [r5, #0]
 801bbf4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801bbf8:	bd70      	pop	{r4, r5, r6, pc}

0801bbfa <__multadd>:
 801bbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbfe:	690d      	ldr	r5, [r1, #16]
 801bc00:	461f      	mov	r7, r3
 801bc02:	4606      	mov	r6, r0
 801bc04:	460c      	mov	r4, r1
 801bc06:	f101 0c14 	add.w	ip, r1, #20
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	f8dc 0000 	ldr.w	r0, [ip]
 801bc10:	b281      	uxth	r1, r0
 801bc12:	fb02 7101 	mla	r1, r2, r1, r7
 801bc16:	0c0f      	lsrs	r7, r1, #16
 801bc18:	0c00      	lsrs	r0, r0, #16
 801bc1a:	fb02 7000 	mla	r0, r2, r0, r7
 801bc1e:	b289      	uxth	r1, r1
 801bc20:	3301      	adds	r3, #1
 801bc22:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801bc26:	429d      	cmp	r5, r3
 801bc28:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801bc2c:	f84c 1b04 	str.w	r1, [ip], #4
 801bc30:	dcec      	bgt.n	801bc0c <__multadd+0x12>
 801bc32:	b1d7      	cbz	r7, 801bc6a <__multadd+0x70>
 801bc34:	68a3      	ldr	r3, [r4, #8]
 801bc36:	42ab      	cmp	r3, r5
 801bc38:	dc12      	bgt.n	801bc60 <__multadd+0x66>
 801bc3a:	6861      	ldr	r1, [r4, #4]
 801bc3c:	4630      	mov	r0, r6
 801bc3e:	3101      	adds	r1, #1
 801bc40:	f7ff ff90 	bl	801bb64 <_Balloc>
 801bc44:	6922      	ldr	r2, [r4, #16]
 801bc46:	3202      	adds	r2, #2
 801bc48:	f104 010c 	add.w	r1, r4, #12
 801bc4c:	4680      	mov	r8, r0
 801bc4e:	0092      	lsls	r2, r2, #2
 801bc50:	300c      	adds	r0, #12
 801bc52:	f7fc ff81 	bl	8018b58 <memcpy>
 801bc56:	4621      	mov	r1, r4
 801bc58:	4630      	mov	r0, r6
 801bc5a:	f7ff ffb7 	bl	801bbcc <_Bfree>
 801bc5e:	4644      	mov	r4, r8
 801bc60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bc64:	3501      	adds	r5, #1
 801bc66:	615f      	str	r7, [r3, #20]
 801bc68:	6125      	str	r5, [r4, #16]
 801bc6a:	4620      	mov	r0, r4
 801bc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bc70 <__s2b>:
 801bc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc74:	460c      	mov	r4, r1
 801bc76:	4615      	mov	r5, r2
 801bc78:	461f      	mov	r7, r3
 801bc7a:	2209      	movs	r2, #9
 801bc7c:	3308      	adds	r3, #8
 801bc7e:	4606      	mov	r6, r0
 801bc80:	fb93 f3f2 	sdiv	r3, r3, r2
 801bc84:	2100      	movs	r1, #0
 801bc86:	2201      	movs	r2, #1
 801bc88:	429a      	cmp	r2, r3
 801bc8a:	db20      	blt.n	801bcce <__s2b+0x5e>
 801bc8c:	4630      	mov	r0, r6
 801bc8e:	f7ff ff69 	bl	801bb64 <_Balloc>
 801bc92:	9b08      	ldr	r3, [sp, #32]
 801bc94:	6143      	str	r3, [r0, #20]
 801bc96:	2d09      	cmp	r5, #9
 801bc98:	f04f 0301 	mov.w	r3, #1
 801bc9c:	6103      	str	r3, [r0, #16]
 801bc9e:	dd19      	ble.n	801bcd4 <__s2b+0x64>
 801bca0:	f104 0809 	add.w	r8, r4, #9
 801bca4:	46c1      	mov	r9, r8
 801bca6:	442c      	add	r4, r5
 801bca8:	f819 3b01 	ldrb.w	r3, [r9], #1
 801bcac:	4601      	mov	r1, r0
 801bcae:	3b30      	subs	r3, #48	; 0x30
 801bcb0:	220a      	movs	r2, #10
 801bcb2:	4630      	mov	r0, r6
 801bcb4:	f7ff ffa1 	bl	801bbfa <__multadd>
 801bcb8:	45a1      	cmp	r9, r4
 801bcba:	d1f5      	bne.n	801bca8 <__s2b+0x38>
 801bcbc:	eb08 0405 	add.w	r4, r8, r5
 801bcc0:	3c08      	subs	r4, #8
 801bcc2:	1b2d      	subs	r5, r5, r4
 801bcc4:	1963      	adds	r3, r4, r5
 801bcc6:	42bb      	cmp	r3, r7
 801bcc8:	db07      	blt.n	801bcda <__s2b+0x6a>
 801bcca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bcce:	0052      	lsls	r2, r2, #1
 801bcd0:	3101      	adds	r1, #1
 801bcd2:	e7d9      	b.n	801bc88 <__s2b+0x18>
 801bcd4:	340a      	adds	r4, #10
 801bcd6:	2509      	movs	r5, #9
 801bcd8:	e7f3      	b.n	801bcc2 <__s2b+0x52>
 801bcda:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bcde:	4601      	mov	r1, r0
 801bce0:	3b30      	subs	r3, #48	; 0x30
 801bce2:	220a      	movs	r2, #10
 801bce4:	4630      	mov	r0, r6
 801bce6:	f7ff ff88 	bl	801bbfa <__multadd>
 801bcea:	e7eb      	b.n	801bcc4 <__s2b+0x54>

0801bcec <__hi0bits>:
 801bcec:	0c02      	lsrs	r2, r0, #16
 801bcee:	0412      	lsls	r2, r2, #16
 801bcf0:	4603      	mov	r3, r0
 801bcf2:	b9b2      	cbnz	r2, 801bd22 <__hi0bits+0x36>
 801bcf4:	0403      	lsls	r3, r0, #16
 801bcf6:	2010      	movs	r0, #16
 801bcf8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801bcfc:	bf04      	itt	eq
 801bcfe:	021b      	lsleq	r3, r3, #8
 801bd00:	3008      	addeq	r0, #8
 801bd02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801bd06:	bf04      	itt	eq
 801bd08:	011b      	lsleq	r3, r3, #4
 801bd0a:	3004      	addeq	r0, #4
 801bd0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bd10:	bf04      	itt	eq
 801bd12:	009b      	lsleq	r3, r3, #2
 801bd14:	3002      	addeq	r0, #2
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	db06      	blt.n	801bd28 <__hi0bits+0x3c>
 801bd1a:	005b      	lsls	r3, r3, #1
 801bd1c:	d503      	bpl.n	801bd26 <__hi0bits+0x3a>
 801bd1e:	3001      	adds	r0, #1
 801bd20:	4770      	bx	lr
 801bd22:	2000      	movs	r0, #0
 801bd24:	e7e8      	b.n	801bcf8 <__hi0bits+0xc>
 801bd26:	2020      	movs	r0, #32
 801bd28:	4770      	bx	lr

0801bd2a <__lo0bits>:
 801bd2a:	6803      	ldr	r3, [r0, #0]
 801bd2c:	f013 0207 	ands.w	r2, r3, #7
 801bd30:	4601      	mov	r1, r0
 801bd32:	d00b      	beq.n	801bd4c <__lo0bits+0x22>
 801bd34:	07da      	lsls	r2, r3, #31
 801bd36:	d423      	bmi.n	801bd80 <__lo0bits+0x56>
 801bd38:	0798      	lsls	r0, r3, #30
 801bd3a:	bf49      	itett	mi
 801bd3c:	085b      	lsrmi	r3, r3, #1
 801bd3e:	089b      	lsrpl	r3, r3, #2
 801bd40:	2001      	movmi	r0, #1
 801bd42:	600b      	strmi	r3, [r1, #0]
 801bd44:	bf5c      	itt	pl
 801bd46:	600b      	strpl	r3, [r1, #0]
 801bd48:	2002      	movpl	r0, #2
 801bd4a:	4770      	bx	lr
 801bd4c:	b298      	uxth	r0, r3
 801bd4e:	b9a8      	cbnz	r0, 801bd7c <__lo0bits+0x52>
 801bd50:	0c1b      	lsrs	r3, r3, #16
 801bd52:	2010      	movs	r0, #16
 801bd54:	f013 0fff 	tst.w	r3, #255	; 0xff
 801bd58:	bf04      	itt	eq
 801bd5a:	0a1b      	lsreq	r3, r3, #8
 801bd5c:	3008      	addeq	r0, #8
 801bd5e:	071a      	lsls	r2, r3, #28
 801bd60:	bf04      	itt	eq
 801bd62:	091b      	lsreq	r3, r3, #4
 801bd64:	3004      	addeq	r0, #4
 801bd66:	079a      	lsls	r2, r3, #30
 801bd68:	bf04      	itt	eq
 801bd6a:	089b      	lsreq	r3, r3, #2
 801bd6c:	3002      	addeq	r0, #2
 801bd6e:	07da      	lsls	r2, r3, #31
 801bd70:	d402      	bmi.n	801bd78 <__lo0bits+0x4e>
 801bd72:	085b      	lsrs	r3, r3, #1
 801bd74:	d006      	beq.n	801bd84 <__lo0bits+0x5a>
 801bd76:	3001      	adds	r0, #1
 801bd78:	600b      	str	r3, [r1, #0]
 801bd7a:	4770      	bx	lr
 801bd7c:	4610      	mov	r0, r2
 801bd7e:	e7e9      	b.n	801bd54 <__lo0bits+0x2a>
 801bd80:	2000      	movs	r0, #0
 801bd82:	4770      	bx	lr
 801bd84:	2020      	movs	r0, #32
 801bd86:	4770      	bx	lr

0801bd88 <__i2b>:
 801bd88:	b510      	push	{r4, lr}
 801bd8a:	460c      	mov	r4, r1
 801bd8c:	2101      	movs	r1, #1
 801bd8e:	f7ff fee9 	bl	801bb64 <_Balloc>
 801bd92:	2201      	movs	r2, #1
 801bd94:	6144      	str	r4, [r0, #20]
 801bd96:	6102      	str	r2, [r0, #16]
 801bd98:	bd10      	pop	{r4, pc}

0801bd9a <__multiply>:
 801bd9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd9e:	4614      	mov	r4, r2
 801bda0:	690a      	ldr	r2, [r1, #16]
 801bda2:	6923      	ldr	r3, [r4, #16]
 801bda4:	429a      	cmp	r2, r3
 801bda6:	bfb8      	it	lt
 801bda8:	460b      	movlt	r3, r1
 801bdaa:	4688      	mov	r8, r1
 801bdac:	bfbc      	itt	lt
 801bdae:	46a0      	movlt	r8, r4
 801bdb0:	461c      	movlt	r4, r3
 801bdb2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801bdb6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801bdba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bdbe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bdc2:	eb07 0609 	add.w	r6, r7, r9
 801bdc6:	42b3      	cmp	r3, r6
 801bdc8:	bfb8      	it	lt
 801bdca:	3101      	addlt	r1, #1
 801bdcc:	f7ff feca 	bl	801bb64 <_Balloc>
 801bdd0:	f100 0514 	add.w	r5, r0, #20
 801bdd4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801bdd8:	462b      	mov	r3, r5
 801bdda:	2200      	movs	r2, #0
 801bddc:	4573      	cmp	r3, lr
 801bdde:	d316      	bcc.n	801be0e <__multiply+0x74>
 801bde0:	f104 0214 	add.w	r2, r4, #20
 801bde4:	f108 0114 	add.w	r1, r8, #20
 801bde8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801bdec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801bdf0:	9300      	str	r3, [sp, #0]
 801bdf2:	9b00      	ldr	r3, [sp, #0]
 801bdf4:	9201      	str	r2, [sp, #4]
 801bdf6:	4293      	cmp	r3, r2
 801bdf8:	d80c      	bhi.n	801be14 <__multiply+0x7a>
 801bdfa:	2e00      	cmp	r6, #0
 801bdfc:	dd03      	ble.n	801be06 <__multiply+0x6c>
 801bdfe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801be02:	2b00      	cmp	r3, #0
 801be04:	d05d      	beq.n	801bec2 <__multiply+0x128>
 801be06:	6106      	str	r6, [r0, #16]
 801be08:	b003      	add	sp, #12
 801be0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be0e:	f843 2b04 	str.w	r2, [r3], #4
 801be12:	e7e3      	b.n	801bddc <__multiply+0x42>
 801be14:	f8b2 b000 	ldrh.w	fp, [r2]
 801be18:	f1bb 0f00 	cmp.w	fp, #0
 801be1c:	d023      	beq.n	801be66 <__multiply+0xcc>
 801be1e:	4689      	mov	r9, r1
 801be20:	46ac      	mov	ip, r5
 801be22:	f04f 0800 	mov.w	r8, #0
 801be26:	f859 4b04 	ldr.w	r4, [r9], #4
 801be2a:	f8dc a000 	ldr.w	sl, [ip]
 801be2e:	b2a3      	uxth	r3, r4
 801be30:	fa1f fa8a 	uxth.w	sl, sl
 801be34:	fb0b a303 	mla	r3, fp, r3, sl
 801be38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801be3c:	f8dc 4000 	ldr.w	r4, [ip]
 801be40:	4443      	add	r3, r8
 801be42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801be46:	fb0b 840a 	mla	r4, fp, sl, r8
 801be4a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801be4e:	46e2      	mov	sl, ip
 801be50:	b29b      	uxth	r3, r3
 801be52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801be56:	454f      	cmp	r7, r9
 801be58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801be5c:	f84a 3b04 	str.w	r3, [sl], #4
 801be60:	d82b      	bhi.n	801beba <__multiply+0x120>
 801be62:	f8cc 8004 	str.w	r8, [ip, #4]
 801be66:	9b01      	ldr	r3, [sp, #4]
 801be68:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801be6c:	3204      	adds	r2, #4
 801be6e:	f1ba 0f00 	cmp.w	sl, #0
 801be72:	d020      	beq.n	801beb6 <__multiply+0x11c>
 801be74:	682b      	ldr	r3, [r5, #0]
 801be76:	4689      	mov	r9, r1
 801be78:	46a8      	mov	r8, r5
 801be7a:	f04f 0b00 	mov.w	fp, #0
 801be7e:	f8b9 c000 	ldrh.w	ip, [r9]
 801be82:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801be86:	fb0a 440c 	mla	r4, sl, ip, r4
 801be8a:	445c      	add	r4, fp
 801be8c:	46c4      	mov	ip, r8
 801be8e:	b29b      	uxth	r3, r3
 801be90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801be94:	f84c 3b04 	str.w	r3, [ip], #4
 801be98:	f859 3b04 	ldr.w	r3, [r9], #4
 801be9c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801bea0:	0c1b      	lsrs	r3, r3, #16
 801bea2:	fb0a b303 	mla	r3, sl, r3, fp
 801bea6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801beaa:	454f      	cmp	r7, r9
 801beac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801beb0:	d805      	bhi.n	801bebe <__multiply+0x124>
 801beb2:	f8c8 3004 	str.w	r3, [r8, #4]
 801beb6:	3504      	adds	r5, #4
 801beb8:	e79b      	b.n	801bdf2 <__multiply+0x58>
 801beba:	46d4      	mov	ip, sl
 801bebc:	e7b3      	b.n	801be26 <__multiply+0x8c>
 801bebe:	46e0      	mov	r8, ip
 801bec0:	e7dd      	b.n	801be7e <__multiply+0xe4>
 801bec2:	3e01      	subs	r6, #1
 801bec4:	e799      	b.n	801bdfa <__multiply+0x60>
	...

0801bec8 <__pow5mult>:
 801bec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801becc:	4615      	mov	r5, r2
 801bece:	f012 0203 	ands.w	r2, r2, #3
 801bed2:	4606      	mov	r6, r0
 801bed4:	460f      	mov	r7, r1
 801bed6:	d007      	beq.n	801bee8 <__pow5mult+0x20>
 801bed8:	3a01      	subs	r2, #1
 801beda:	4c21      	ldr	r4, [pc, #132]	; (801bf60 <__pow5mult+0x98>)
 801bedc:	2300      	movs	r3, #0
 801bede:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bee2:	f7ff fe8a 	bl	801bbfa <__multadd>
 801bee6:	4607      	mov	r7, r0
 801bee8:	10ad      	asrs	r5, r5, #2
 801beea:	d035      	beq.n	801bf58 <__pow5mult+0x90>
 801beec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801beee:	b93c      	cbnz	r4, 801bf00 <__pow5mult+0x38>
 801bef0:	2010      	movs	r0, #16
 801bef2:	f7fc fe21 	bl	8018b38 <malloc>
 801bef6:	6270      	str	r0, [r6, #36]	; 0x24
 801bef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801befc:	6004      	str	r4, [r0, #0]
 801befe:	60c4      	str	r4, [r0, #12]
 801bf00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801bf04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bf08:	b94c      	cbnz	r4, 801bf1e <__pow5mult+0x56>
 801bf0a:	f240 2171 	movw	r1, #625	; 0x271
 801bf0e:	4630      	mov	r0, r6
 801bf10:	f7ff ff3a 	bl	801bd88 <__i2b>
 801bf14:	2300      	movs	r3, #0
 801bf16:	f8c8 0008 	str.w	r0, [r8, #8]
 801bf1a:	4604      	mov	r4, r0
 801bf1c:	6003      	str	r3, [r0, #0]
 801bf1e:	f04f 0800 	mov.w	r8, #0
 801bf22:	07eb      	lsls	r3, r5, #31
 801bf24:	d50a      	bpl.n	801bf3c <__pow5mult+0x74>
 801bf26:	4639      	mov	r1, r7
 801bf28:	4622      	mov	r2, r4
 801bf2a:	4630      	mov	r0, r6
 801bf2c:	f7ff ff35 	bl	801bd9a <__multiply>
 801bf30:	4639      	mov	r1, r7
 801bf32:	4681      	mov	r9, r0
 801bf34:	4630      	mov	r0, r6
 801bf36:	f7ff fe49 	bl	801bbcc <_Bfree>
 801bf3a:	464f      	mov	r7, r9
 801bf3c:	106d      	asrs	r5, r5, #1
 801bf3e:	d00b      	beq.n	801bf58 <__pow5mult+0x90>
 801bf40:	6820      	ldr	r0, [r4, #0]
 801bf42:	b938      	cbnz	r0, 801bf54 <__pow5mult+0x8c>
 801bf44:	4622      	mov	r2, r4
 801bf46:	4621      	mov	r1, r4
 801bf48:	4630      	mov	r0, r6
 801bf4a:	f7ff ff26 	bl	801bd9a <__multiply>
 801bf4e:	6020      	str	r0, [r4, #0]
 801bf50:	f8c0 8000 	str.w	r8, [r0]
 801bf54:	4604      	mov	r4, r0
 801bf56:	e7e4      	b.n	801bf22 <__pow5mult+0x5a>
 801bf58:	4638      	mov	r0, r7
 801bf5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf5e:	bf00      	nop
 801bf60:	080205a8 	.word	0x080205a8

0801bf64 <__lshift>:
 801bf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf68:	460c      	mov	r4, r1
 801bf6a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bf6e:	6923      	ldr	r3, [r4, #16]
 801bf70:	6849      	ldr	r1, [r1, #4]
 801bf72:	eb0a 0903 	add.w	r9, sl, r3
 801bf76:	68a3      	ldr	r3, [r4, #8]
 801bf78:	4607      	mov	r7, r0
 801bf7a:	4616      	mov	r6, r2
 801bf7c:	f109 0501 	add.w	r5, r9, #1
 801bf80:	42ab      	cmp	r3, r5
 801bf82:	db32      	blt.n	801bfea <__lshift+0x86>
 801bf84:	4638      	mov	r0, r7
 801bf86:	f7ff fded 	bl	801bb64 <_Balloc>
 801bf8a:	2300      	movs	r3, #0
 801bf8c:	4680      	mov	r8, r0
 801bf8e:	f100 0114 	add.w	r1, r0, #20
 801bf92:	461a      	mov	r2, r3
 801bf94:	4553      	cmp	r3, sl
 801bf96:	db2b      	blt.n	801bff0 <__lshift+0x8c>
 801bf98:	6920      	ldr	r0, [r4, #16]
 801bf9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bf9e:	f104 0314 	add.w	r3, r4, #20
 801bfa2:	f016 021f 	ands.w	r2, r6, #31
 801bfa6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bfaa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bfae:	d025      	beq.n	801bffc <__lshift+0x98>
 801bfb0:	f1c2 0e20 	rsb	lr, r2, #32
 801bfb4:	2000      	movs	r0, #0
 801bfb6:	681e      	ldr	r6, [r3, #0]
 801bfb8:	468a      	mov	sl, r1
 801bfba:	4096      	lsls	r6, r2
 801bfbc:	4330      	orrs	r0, r6
 801bfbe:	f84a 0b04 	str.w	r0, [sl], #4
 801bfc2:	f853 0b04 	ldr.w	r0, [r3], #4
 801bfc6:	459c      	cmp	ip, r3
 801bfc8:	fa20 f00e 	lsr.w	r0, r0, lr
 801bfcc:	d814      	bhi.n	801bff8 <__lshift+0x94>
 801bfce:	6048      	str	r0, [r1, #4]
 801bfd0:	b108      	cbz	r0, 801bfd6 <__lshift+0x72>
 801bfd2:	f109 0502 	add.w	r5, r9, #2
 801bfd6:	3d01      	subs	r5, #1
 801bfd8:	4638      	mov	r0, r7
 801bfda:	f8c8 5010 	str.w	r5, [r8, #16]
 801bfde:	4621      	mov	r1, r4
 801bfe0:	f7ff fdf4 	bl	801bbcc <_Bfree>
 801bfe4:	4640      	mov	r0, r8
 801bfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfea:	3101      	adds	r1, #1
 801bfec:	005b      	lsls	r3, r3, #1
 801bfee:	e7c7      	b.n	801bf80 <__lshift+0x1c>
 801bff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801bff4:	3301      	adds	r3, #1
 801bff6:	e7cd      	b.n	801bf94 <__lshift+0x30>
 801bff8:	4651      	mov	r1, sl
 801bffa:	e7dc      	b.n	801bfb6 <__lshift+0x52>
 801bffc:	3904      	subs	r1, #4
 801bffe:	f853 2b04 	ldr.w	r2, [r3], #4
 801c002:	f841 2f04 	str.w	r2, [r1, #4]!
 801c006:	459c      	cmp	ip, r3
 801c008:	d8f9      	bhi.n	801bffe <__lshift+0x9a>
 801c00a:	e7e4      	b.n	801bfd6 <__lshift+0x72>

0801c00c <__mcmp>:
 801c00c:	6903      	ldr	r3, [r0, #16]
 801c00e:	690a      	ldr	r2, [r1, #16]
 801c010:	1a9b      	subs	r3, r3, r2
 801c012:	b530      	push	{r4, r5, lr}
 801c014:	d10c      	bne.n	801c030 <__mcmp+0x24>
 801c016:	0092      	lsls	r2, r2, #2
 801c018:	3014      	adds	r0, #20
 801c01a:	3114      	adds	r1, #20
 801c01c:	1884      	adds	r4, r0, r2
 801c01e:	4411      	add	r1, r2
 801c020:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c024:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c028:	4295      	cmp	r5, r2
 801c02a:	d003      	beq.n	801c034 <__mcmp+0x28>
 801c02c:	d305      	bcc.n	801c03a <__mcmp+0x2e>
 801c02e:	2301      	movs	r3, #1
 801c030:	4618      	mov	r0, r3
 801c032:	bd30      	pop	{r4, r5, pc}
 801c034:	42a0      	cmp	r0, r4
 801c036:	d3f3      	bcc.n	801c020 <__mcmp+0x14>
 801c038:	e7fa      	b.n	801c030 <__mcmp+0x24>
 801c03a:	f04f 33ff 	mov.w	r3, #4294967295
 801c03e:	e7f7      	b.n	801c030 <__mcmp+0x24>

0801c040 <__mdiff>:
 801c040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c044:	460d      	mov	r5, r1
 801c046:	4607      	mov	r7, r0
 801c048:	4611      	mov	r1, r2
 801c04a:	4628      	mov	r0, r5
 801c04c:	4614      	mov	r4, r2
 801c04e:	f7ff ffdd 	bl	801c00c <__mcmp>
 801c052:	1e06      	subs	r6, r0, #0
 801c054:	d108      	bne.n	801c068 <__mdiff+0x28>
 801c056:	4631      	mov	r1, r6
 801c058:	4638      	mov	r0, r7
 801c05a:	f7ff fd83 	bl	801bb64 <_Balloc>
 801c05e:	2301      	movs	r3, #1
 801c060:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801c064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c068:	bfa4      	itt	ge
 801c06a:	4623      	movge	r3, r4
 801c06c:	462c      	movge	r4, r5
 801c06e:	4638      	mov	r0, r7
 801c070:	6861      	ldr	r1, [r4, #4]
 801c072:	bfa6      	itte	ge
 801c074:	461d      	movge	r5, r3
 801c076:	2600      	movge	r6, #0
 801c078:	2601      	movlt	r6, #1
 801c07a:	f7ff fd73 	bl	801bb64 <_Balloc>
 801c07e:	692b      	ldr	r3, [r5, #16]
 801c080:	60c6      	str	r6, [r0, #12]
 801c082:	6926      	ldr	r6, [r4, #16]
 801c084:	f105 0914 	add.w	r9, r5, #20
 801c088:	f104 0214 	add.w	r2, r4, #20
 801c08c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801c090:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801c094:	f100 0514 	add.w	r5, r0, #20
 801c098:	f04f 0e00 	mov.w	lr, #0
 801c09c:	f852 ab04 	ldr.w	sl, [r2], #4
 801c0a0:	f859 4b04 	ldr.w	r4, [r9], #4
 801c0a4:	fa1e f18a 	uxtah	r1, lr, sl
 801c0a8:	b2a3      	uxth	r3, r4
 801c0aa:	1ac9      	subs	r1, r1, r3
 801c0ac:	0c23      	lsrs	r3, r4, #16
 801c0ae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801c0b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801c0b6:	b289      	uxth	r1, r1
 801c0b8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801c0bc:	45c8      	cmp	r8, r9
 801c0be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801c0c2:	4694      	mov	ip, r2
 801c0c4:	f845 3b04 	str.w	r3, [r5], #4
 801c0c8:	d8e8      	bhi.n	801c09c <__mdiff+0x5c>
 801c0ca:	45bc      	cmp	ip, r7
 801c0cc:	d304      	bcc.n	801c0d8 <__mdiff+0x98>
 801c0ce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801c0d2:	b183      	cbz	r3, 801c0f6 <__mdiff+0xb6>
 801c0d4:	6106      	str	r6, [r0, #16]
 801c0d6:	e7c5      	b.n	801c064 <__mdiff+0x24>
 801c0d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c0dc:	fa1e f381 	uxtah	r3, lr, r1
 801c0e0:	141a      	asrs	r2, r3, #16
 801c0e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c0e6:	b29b      	uxth	r3, r3
 801c0e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c0ec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801c0f0:	f845 3b04 	str.w	r3, [r5], #4
 801c0f4:	e7e9      	b.n	801c0ca <__mdiff+0x8a>
 801c0f6:	3e01      	subs	r6, #1
 801c0f8:	e7e9      	b.n	801c0ce <__mdiff+0x8e>
	...

0801c0fc <__ulp>:
 801c0fc:	4b12      	ldr	r3, [pc, #72]	; (801c148 <__ulp+0x4c>)
 801c0fe:	ee10 2a90 	vmov	r2, s1
 801c102:	401a      	ands	r2, r3
 801c104:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801c108:	2b00      	cmp	r3, #0
 801c10a:	dd04      	ble.n	801c116 <__ulp+0x1a>
 801c10c:	2000      	movs	r0, #0
 801c10e:	4619      	mov	r1, r3
 801c110:	ec41 0b10 	vmov	d0, r0, r1
 801c114:	4770      	bx	lr
 801c116:	425b      	negs	r3, r3
 801c118:	151b      	asrs	r3, r3, #20
 801c11a:	2b13      	cmp	r3, #19
 801c11c:	f04f 0000 	mov.w	r0, #0
 801c120:	f04f 0100 	mov.w	r1, #0
 801c124:	dc04      	bgt.n	801c130 <__ulp+0x34>
 801c126:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801c12a:	fa42 f103 	asr.w	r1, r2, r3
 801c12e:	e7ef      	b.n	801c110 <__ulp+0x14>
 801c130:	3b14      	subs	r3, #20
 801c132:	2b1e      	cmp	r3, #30
 801c134:	f04f 0201 	mov.w	r2, #1
 801c138:	bfda      	itte	le
 801c13a:	f1c3 031f 	rsble	r3, r3, #31
 801c13e:	fa02 f303 	lslle.w	r3, r2, r3
 801c142:	4613      	movgt	r3, r2
 801c144:	4618      	mov	r0, r3
 801c146:	e7e3      	b.n	801c110 <__ulp+0x14>
 801c148:	7ff00000 	.word	0x7ff00000

0801c14c <__b2d>:
 801c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c14e:	6905      	ldr	r5, [r0, #16]
 801c150:	f100 0714 	add.w	r7, r0, #20
 801c154:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801c158:	1f2e      	subs	r6, r5, #4
 801c15a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801c15e:	4620      	mov	r0, r4
 801c160:	f7ff fdc4 	bl	801bcec <__hi0bits>
 801c164:	f1c0 0320 	rsb	r3, r0, #32
 801c168:	280a      	cmp	r0, #10
 801c16a:	600b      	str	r3, [r1, #0]
 801c16c:	f8df c074 	ldr.w	ip, [pc, #116]	; 801c1e4 <__b2d+0x98>
 801c170:	dc14      	bgt.n	801c19c <__b2d+0x50>
 801c172:	f1c0 0e0b 	rsb	lr, r0, #11
 801c176:	fa24 f10e 	lsr.w	r1, r4, lr
 801c17a:	42b7      	cmp	r7, r6
 801c17c:	ea41 030c 	orr.w	r3, r1, ip
 801c180:	bf34      	ite	cc
 801c182:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c186:	2100      	movcs	r1, #0
 801c188:	3015      	adds	r0, #21
 801c18a:	fa04 f000 	lsl.w	r0, r4, r0
 801c18e:	fa21 f10e 	lsr.w	r1, r1, lr
 801c192:	ea40 0201 	orr.w	r2, r0, r1
 801c196:	ec43 2b10 	vmov	d0, r2, r3
 801c19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c19c:	42b7      	cmp	r7, r6
 801c19e:	bf3a      	itte	cc
 801c1a0:	f1a5 0608 	subcc.w	r6, r5, #8
 801c1a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c1a8:	2100      	movcs	r1, #0
 801c1aa:	380b      	subs	r0, #11
 801c1ac:	d015      	beq.n	801c1da <__b2d+0x8e>
 801c1ae:	4084      	lsls	r4, r0
 801c1b0:	f1c0 0520 	rsb	r5, r0, #32
 801c1b4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801c1b8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801c1bc:	42be      	cmp	r6, r7
 801c1be:	fa21 fc05 	lsr.w	ip, r1, r5
 801c1c2:	ea44 030c 	orr.w	r3, r4, ip
 801c1c6:	bf8c      	ite	hi
 801c1c8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801c1cc:	2400      	movls	r4, #0
 801c1ce:	fa01 f000 	lsl.w	r0, r1, r0
 801c1d2:	40ec      	lsrs	r4, r5
 801c1d4:	ea40 0204 	orr.w	r2, r0, r4
 801c1d8:	e7dd      	b.n	801c196 <__b2d+0x4a>
 801c1da:	ea44 030c 	orr.w	r3, r4, ip
 801c1de:	460a      	mov	r2, r1
 801c1e0:	e7d9      	b.n	801c196 <__b2d+0x4a>
 801c1e2:	bf00      	nop
 801c1e4:	3ff00000 	.word	0x3ff00000

0801c1e8 <__d2b>:
 801c1e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c1ec:	460e      	mov	r6, r1
 801c1ee:	2101      	movs	r1, #1
 801c1f0:	ec59 8b10 	vmov	r8, r9, d0
 801c1f4:	4615      	mov	r5, r2
 801c1f6:	f7ff fcb5 	bl	801bb64 <_Balloc>
 801c1fa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801c1fe:	4607      	mov	r7, r0
 801c200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c204:	bb34      	cbnz	r4, 801c254 <__d2b+0x6c>
 801c206:	9301      	str	r3, [sp, #4]
 801c208:	f1b8 0300 	subs.w	r3, r8, #0
 801c20c:	d027      	beq.n	801c25e <__d2b+0x76>
 801c20e:	a802      	add	r0, sp, #8
 801c210:	f840 3d08 	str.w	r3, [r0, #-8]!
 801c214:	f7ff fd89 	bl	801bd2a <__lo0bits>
 801c218:	9900      	ldr	r1, [sp, #0]
 801c21a:	b1f0      	cbz	r0, 801c25a <__d2b+0x72>
 801c21c:	9a01      	ldr	r2, [sp, #4]
 801c21e:	f1c0 0320 	rsb	r3, r0, #32
 801c222:	fa02 f303 	lsl.w	r3, r2, r3
 801c226:	430b      	orrs	r3, r1
 801c228:	40c2      	lsrs	r2, r0
 801c22a:	617b      	str	r3, [r7, #20]
 801c22c:	9201      	str	r2, [sp, #4]
 801c22e:	9b01      	ldr	r3, [sp, #4]
 801c230:	61bb      	str	r3, [r7, #24]
 801c232:	2b00      	cmp	r3, #0
 801c234:	bf14      	ite	ne
 801c236:	2102      	movne	r1, #2
 801c238:	2101      	moveq	r1, #1
 801c23a:	6139      	str	r1, [r7, #16]
 801c23c:	b1c4      	cbz	r4, 801c270 <__d2b+0x88>
 801c23e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801c242:	4404      	add	r4, r0
 801c244:	6034      	str	r4, [r6, #0]
 801c246:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c24a:	6028      	str	r0, [r5, #0]
 801c24c:	4638      	mov	r0, r7
 801c24e:	b003      	add	sp, #12
 801c250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c258:	e7d5      	b.n	801c206 <__d2b+0x1e>
 801c25a:	6179      	str	r1, [r7, #20]
 801c25c:	e7e7      	b.n	801c22e <__d2b+0x46>
 801c25e:	a801      	add	r0, sp, #4
 801c260:	f7ff fd63 	bl	801bd2a <__lo0bits>
 801c264:	9b01      	ldr	r3, [sp, #4]
 801c266:	617b      	str	r3, [r7, #20]
 801c268:	2101      	movs	r1, #1
 801c26a:	6139      	str	r1, [r7, #16]
 801c26c:	3020      	adds	r0, #32
 801c26e:	e7e5      	b.n	801c23c <__d2b+0x54>
 801c270:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801c274:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c278:	6030      	str	r0, [r6, #0]
 801c27a:	6918      	ldr	r0, [r3, #16]
 801c27c:	f7ff fd36 	bl	801bcec <__hi0bits>
 801c280:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801c284:	e7e1      	b.n	801c24a <__d2b+0x62>

0801c286 <__ratio>:
 801c286:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c28a:	4688      	mov	r8, r1
 801c28c:	4669      	mov	r1, sp
 801c28e:	4681      	mov	r9, r0
 801c290:	f7ff ff5c 	bl	801c14c <__b2d>
 801c294:	a901      	add	r1, sp, #4
 801c296:	4640      	mov	r0, r8
 801c298:	ec57 6b10 	vmov	r6, r7, d0
 801c29c:	f7ff ff56 	bl	801c14c <__b2d>
 801c2a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c2a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c2a8:	eba3 0c02 	sub.w	ip, r3, r2
 801c2ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c2b0:	1a9b      	subs	r3, r3, r2
 801c2b2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c2b6:	ec5b ab10 	vmov	sl, fp, d0
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	bfce      	itee	gt
 801c2be:	463a      	movgt	r2, r7
 801c2c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c2c4:	465a      	movle	r2, fp
 801c2c6:	4659      	mov	r1, fp
 801c2c8:	463d      	mov	r5, r7
 801c2ca:	bfd4      	ite	le
 801c2cc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801c2d0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801c2d4:	4630      	mov	r0, r6
 801c2d6:	ee10 2a10 	vmov	r2, s0
 801c2da:	460b      	mov	r3, r1
 801c2dc:	4629      	mov	r1, r5
 801c2de:	f7e4 fac5 	bl	800086c <__aeabi_ddiv>
 801c2e2:	ec41 0b10 	vmov	d0, r0, r1
 801c2e6:	b003      	add	sp, #12
 801c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2ec <__copybits>:
 801c2ec:	3901      	subs	r1, #1
 801c2ee:	b510      	push	{r4, lr}
 801c2f0:	1149      	asrs	r1, r1, #5
 801c2f2:	6914      	ldr	r4, [r2, #16]
 801c2f4:	3101      	adds	r1, #1
 801c2f6:	f102 0314 	add.w	r3, r2, #20
 801c2fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c2fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c302:	42a3      	cmp	r3, r4
 801c304:	4602      	mov	r2, r0
 801c306:	d303      	bcc.n	801c310 <__copybits+0x24>
 801c308:	2300      	movs	r3, #0
 801c30a:	428a      	cmp	r2, r1
 801c30c:	d305      	bcc.n	801c31a <__copybits+0x2e>
 801c30e:	bd10      	pop	{r4, pc}
 801c310:	f853 2b04 	ldr.w	r2, [r3], #4
 801c314:	f840 2b04 	str.w	r2, [r0], #4
 801c318:	e7f3      	b.n	801c302 <__copybits+0x16>
 801c31a:	f842 3b04 	str.w	r3, [r2], #4
 801c31e:	e7f4      	b.n	801c30a <__copybits+0x1e>

0801c320 <__any_on>:
 801c320:	f100 0214 	add.w	r2, r0, #20
 801c324:	6900      	ldr	r0, [r0, #16]
 801c326:	114b      	asrs	r3, r1, #5
 801c328:	4298      	cmp	r0, r3
 801c32a:	b510      	push	{r4, lr}
 801c32c:	db11      	blt.n	801c352 <__any_on+0x32>
 801c32e:	dd0a      	ble.n	801c346 <__any_on+0x26>
 801c330:	f011 011f 	ands.w	r1, r1, #31
 801c334:	d007      	beq.n	801c346 <__any_on+0x26>
 801c336:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c33a:	fa24 f001 	lsr.w	r0, r4, r1
 801c33e:	fa00 f101 	lsl.w	r1, r0, r1
 801c342:	428c      	cmp	r4, r1
 801c344:	d10b      	bne.n	801c35e <__any_on+0x3e>
 801c346:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c34a:	4293      	cmp	r3, r2
 801c34c:	d803      	bhi.n	801c356 <__any_on+0x36>
 801c34e:	2000      	movs	r0, #0
 801c350:	bd10      	pop	{r4, pc}
 801c352:	4603      	mov	r3, r0
 801c354:	e7f7      	b.n	801c346 <__any_on+0x26>
 801c356:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c35a:	2900      	cmp	r1, #0
 801c35c:	d0f5      	beq.n	801c34a <__any_on+0x2a>
 801c35e:	2001      	movs	r0, #1
 801c360:	e7f6      	b.n	801c350 <__any_on+0x30>

0801c362 <_calloc_r>:
 801c362:	b538      	push	{r3, r4, r5, lr}
 801c364:	fb02 f401 	mul.w	r4, r2, r1
 801c368:	4621      	mov	r1, r4
 801c36a:	f7fc fc57 	bl	8018c1c <_malloc_r>
 801c36e:	4605      	mov	r5, r0
 801c370:	b118      	cbz	r0, 801c37a <_calloc_r+0x18>
 801c372:	4622      	mov	r2, r4
 801c374:	2100      	movs	r1, #0
 801c376:	f7fc fbfa 	bl	8018b6e <memset>
 801c37a:	4628      	mov	r0, r5
 801c37c:	bd38      	pop	{r3, r4, r5, pc}

0801c37e <__ssputs_r>:
 801c37e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c382:	688e      	ldr	r6, [r1, #8]
 801c384:	429e      	cmp	r6, r3
 801c386:	4682      	mov	sl, r0
 801c388:	460c      	mov	r4, r1
 801c38a:	4690      	mov	r8, r2
 801c38c:	4699      	mov	r9, r3
 801c38e:	d837      	bhi.n	801c400 <__ssputs_r+0x82>
 801c390:	898a      	ldrh	r2, [r1, #12]
 801c392:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c396:	d031      	beq.n	801c3fc <__ssputs_r+0x7e>
 801c398:	6825      	ldr	r5, [r4, #0]
 801c39a:	6909      	ldr	r1, [r1, #16]
 801c39c:	1a6f      	subs	r7, r5, r1
 801c39e:	6965      	ldr	r5, [r4, #20]
 801c3a0:	2302      	movs	r3, #2
 801c3a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c3a6:	fb95 f5f3 	sdiv	r5, r5, r3
 801c3aa:	f109 0301 	add.w	r3, r9, #1
 801c3ae:	443b      	add	r3, r7
 801c3b0:	429d      	cmp	r5, r3
 801c3b2:	bf38      	it	cc
 801c3b4:	461d      	movcc	r5, r3
 801c3b6:	0553      	lsls	r3, r2, #21
 801c3b8:	d530      	bpl.n	801c41c <__ssputs_r+0x9e>
 801c3ba:	4629      	mov	r1, r5
 801c3bc:	f7fc fc2e 	bl	8018c1c <_malloc_r>
 801c3c0:	4606      	mov	r6, r0
 801c3c2:	b950      	cbnz	r0, 801c3da <__ssputs_r+0x5c>
 801c3c4:	230c      	movs	r3, #12
 801c3c6:	f8ca 3000 	str.w	r3, [sl]
 801c3ca:	89a3      	ldrh	r3, [r4, #12]
 801c3cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c3d0:	81a3      	strh	r3, [r4, #12]
 801c3d2:	f04f 30ff 	mov.w	r0, #4294967295
 801c3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3da:	463a      	mov	r2, r7
 801c3dc:	6921      	ldr	r1, [r4, #16]
 801c3de:	f7fc fbbb 	bl	8018b58 <memcpy>
 801c3e2:	89a3      	ldrh	r3, [r4, #12]
 801c3e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c3ec:	81a3      	strh	r3, [r4, #12]
 801c3ee:	6126      	str	r6, [r4, #16]
 801c3f0:	6165      	str	r5, [r4, #20]
 801c3f2:	443e      	add	r6, r7
 801c3f4:	1bed      	subs	r5, r5, r7
 801c3f6:	6026      	str	r6, [r4, #0]
 801c3f8:	60a5      	str	r5, [r4, #8]
 801c3fa:	464e      	mov	r6, r9
 801c3fc:	454e      	cmp	r6, r9
 801c3fe:	d900      	bls.n	801c402 <__ssputs_r+0x84>
 801c400:	464e      	mov	r6, r9
 801c402:	4632      	mov	r2, r6
 801c404:	4641      	mov	r1, r8
 801c406:	6820      	ldr	r0, [r4, #0]
 801c408:	f000 f919 	bl	801c63e <memmove>
 801c40c:	68a3      	ldr	r3, [r4, #8]
 801c40e:	1b9b      	subs	r3, r3, r6
 801c410:	60a3      	str	r3, [r4, #8]
 801c412:	6823      	ldr	r3, [r4, #0]
 801c414:	441e      	add	r6, r3
 801c416:	6026      	str	r6, [r4, #0]
 801c418:	2000      	movs	r0, #0
 801c41a:	e7dc      	b.n	801c3d6 <__ssputs_r+0x58>
 801c41c:	462a      	mov	r2, r5
 801c41e:	f000 f927 	bl	801c670 <_realloc_r>
 801c422:	4606      	mov	r6, r0
 801c424:	2800      	cmp	r0, #0
 801c426:	d1e2      	bne.n	801c3ee <__ssputs_r+0x70>
 801c428:	6921      	ldr	r1, [r4, #16]
 801c42a:	4650      	mov	r0, sl
 801c42c:	f7fc fba8 	bl	8018b80 <_free_r>
 801c430:	e7c8      	b.n	801c3c4 <__ssputs_r+0x46>
	...

0801c434 <_svfiprintf_r>:
 801c434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c438:	461d      	mov	r5, r3
 801c43a:	898b      	ldrh	r3, [r1, #12]
 801c43c:	061f      	lsls	r7, r3, #24
 801c43e:	b09d      	sub	sp, #116	; 0x74
 801c440:	4680      	mov	r8, r0
 801c442:	460c      	mov	r4, r1
 801c444:	4616      	mov	r6, r2
 801c446:	d50f      	bpl.n	801c468 <_svfiprintf_r+0x34>
 801c448:	690b      	ldr	r3, [r1, #16]
 801c44a:	b96b      	cbnz	r3, 801c468 <_svfiprintf_r+0x34>
 801c44c:	2140      	movs	r1, #64	; 0x40
 801c44e:	f7fc fbe5 	bl	8018c1c <_malloc_r>
 801c452:	6020      	str	r0, [r4, #0]
 801c454:	6120      	str	r0, [r4, #16]
 801c456:	b928      	cbnz	r0, 801c464 <_svfiprintf_r+0x30>
 801c458:	230c      	movs	r3, #12
 801c45a:	f8c8 3000 	str.w	r3, [r8]
 801c45e:	f04f 30ff 	mov.w	r0, #4294967295
 801c462:	e0c8      	b.n	801c5f6 <_svfiprintf_r+0x1c2>
 801c464:	2340      	movs	r3, #64	; 0x40
 801c466:	6163      	str	r3, [r4, #20]
 801c468:	2300      	movs	r3, #0
 801c46a:	9309      	str	r3, [sp, #36]	; 0x24
 801c46c:	2320      	movs	r3, #32
 801c46e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c472:	2330      	movs	r3, #48	; 0x30
 801c474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c478:	9503      	str	r5, [sp, #12]
 801c47a:	f04f 0b01 	mov.w	fp, #1
 801c47e:	4637      	mov	r7, r6
 801c480:	463d      	mov	r5, r7
 801c482:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c486:	b10b      	cbz	r3, 801c48c <_svfiprintf_r+0x58>
 801c488:	2b25      	cmp	r3, #37	; 0x25
 801c48a:	d13e      	bne.n	801c50a <_svfiprintf_r+0xd6>
 801c48c:	ebb7 0a06 	subs.w	sl, r7, r6
 801c490:	d00b      	beq.n	801c4aa <_svfiprintf_r+0x76>
 801c492:	4653      	mov	r3, sl
 801c494:	4632      	mov	r2, r6
 801c496:	4621      	mov	r1, r4
 801c498:	4640      	mov	r0, r8
 801c49a:	f7ff ff70 	bl	801c37e <__ssputs_r>
 801c49e:	3001      	adds	r0, #1
 801c4a0:	f000 80a4 	beq.w	801c5ec <_svfiprintf_r+0x1b8>
 801c4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4a6:	4453      	add	r3, sl
 801c4a8:	9309      	str	r3, [sp, #36]	; 0x24
 801c4aa:	783b      	ldrb	r3, [r7, #0]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	f000 809d 	beq.w	801c5ec <_svfiprintf_r+0x1b8>
 801c4b2:	2300      	movs	r3, #0
 801c4b4:	f04f 32ff 	mov.w	r2, #4294967295
 801c4b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c4bc:	9304      	str	r3, [sp, #16]
 801c4be:	9307      	str	r3, [sp, #28]
 801c4c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c4c4:	931a      	str	r3, [sp, #104]	; 0x68
 801c4c6:	462f      	mov	r7, r5
 801c4c8:	2205      	movs	r2, #5
 801c4ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 801c4ce:	4850      	ldr	r0, [pc, #320]	; (801c610 <_svfiprintf_r+0x1dc>)
 801c4d0:	f7e3 fe96 	bl	8000200 <memchr>
 801c4d4:	9b04      	ldr	r3, [sp, #16]
 801c4d6:	b9d0      	cbnz	r0, 801c50e <_svfiprintf_r+0xda>
 801c4d8:	06d9      	lsls	r1, r3, #27
 801c4da:	bf44      	itt	mi
 801c4dc:	2220      	movmi	r2, #32
 801c4de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c4e2:	071a      	lsls	r2, r3, #28
 801c4e4:	bf44      	itt	mi
 801c4e6:	222b      	movmi	r2, #43	; 0x2b
 801c4e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c4ec:	782a      	ldrb	r2, [r5, #0]
 801c4ee:	2a2a      	cmp	r2, #42	; 0x2a
 801c4f0:	d015      	beq.n	801c51e <_svfiprintf_r+0xea>
 801c4f2:	9a07      	ldr	r2, [sp, #28]
 801c4f4:	462f      	mov	r7, r5
 801c4f6:	2000      	movs	r0, #0
 801c4f8:	250a      	movs	r5, #10
 801c4fa:	4639      	mov	r1, r7
 801c4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c500:	3b30      	subs	r3, #48	; 0x30
 801c502:	2b09      	cmp	r3, #9
 801c504:	d94d      	bls.n	801c5a2 <_svfiprintf_r+0x16e>
 801c506:	b1b8      	cbz	r0, 801c538 <_svfiprintf_r+0x104>
 801c508:	e00f      	b.n	801c52a <_svfiprintf_r+0xf6>
 801c50a:	462f      	mov	r7, r5
 801c50c:	e7b8      	b.n	801c480 <_svfiprintf_r+0x4c>
 801c50e:	4a40      	ldr	r2, [pc, #256]	; (801c610 <_svfiprintf_r+0x1dc>)
 801c510:	1a80      	subs	r0, r0, r2
 801c512:	fa0b f000 	lsl.w	r0, fp, r0
 801c516:	4318      	orrs	r0, r3
 801c518:	9004      	str	r0, [sp, #16]
 801c51a:	463d      	mov	r5, r7
 801c51c:	e7d3      	b.n	801c4c6 <_svfiprintf_r+0x92>
 801c51e:	9a03      	ldr	r2, [sp, #12]
 801c520:	1d11      	adds	r1, r2, #4
 801c522:	6812      	ldr	r2, [r2, #0]
 801c524:	9103      	str	r1, [sp, #12]
 801c526:	2a00      	cmp	r2, #0
 801c528:	db01      	blt.n	801c52e <_svfiprintf_r+0xfa>
 801c52a:	9207      	str	r2, [sp, #28]
 801c52c:	e004      	b.n	801c538 <_svfiprintf_r+0x104>
 801c52e:	4252      	negs	r2, r2
 801c530:	f043 0302 	orr.w	r3, r3, #2
 801c534:	9207      	str	r2, [sp, #28]
 801c536:	9304      	str	r3, [sp, #16]
 801c538:	783b      	ldrb	r3, [r7, #0]
 801c53a:	2b2e      	cmp	r3, #46	; 0x2e
 801c53c:	d10c      	bne.n	801c558 <_svfiprintf_r+0x124>
 801c53e:	787b      	ldrb	r3, [r7, #1]
 801c540:	2b2a      	cmp	r3, #42	; 0x2a
 801c542:	d133      	bne.n	801c5ac <_svfiprintf_r+0x178>
 801c544:	9b03      	ldr	r3, [sp, #12]
 801c546:	1d1a      	adds	r2, r3, #4
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	9203      	str	r2, [sp, #12]
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	bfb8      	it	lt
 801c550:	f04f 33ff 	movlt.w	r3, #4294967295
 801c554:	3702      	adds	r7, #2
 801c556:	9305      	str	r3, [sp, #20]
 801c558:	4d2e      	ldr	r5, [pc, #184]	; (801c614 <_svfiprintf_r+0x1e0>)
 801c55a:	7839      	ldrb	r1, [r7, #0]
 801c55c:	2203      	movs	r2, #3
 801c55e:	4628      	mov	r0, r5
 801c560:	f7e3 fe4e 	bl	8000200 <memchr>
 801c564:	b138      	cbz	r0, 801c576 <_svfiprintf_r+0x142>
 801c566:	2340      	movs	r3, #64	; 0x40
 801c568:	1b40      	subs	r0, r0, r5
 801c56a:	fa03 f000 	lsl.w	r0, r3, r0
 801c56e:	9b04      	ldr	r3, [sp, #16]
 801c570:	4303      	orrs	r3, r0
 801c572:	3701      	adds	r7, #1
 801c574:	9304      	str	r3, [sp, #16]
 801c576:	7839      	ldrb	r1, [r7, #0]
 801c578:	4827      	ldr	r0, [pc, #156]	; (801c618 <_svfiprintf_r+0x1e4>)
 801c57a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c57e:	2206      	movs	r2, #6
 801c580:	1c7e      	adds	r6, r7, #1
 801c582:	f7e3 fe3d 	bl	8000200 <memchr>
 801c586:	2800      	cmp	r0, #0
 801c588:	d038      	beq.n	801c5fc <_svfiprintf_r+0x1c8>
 801c58a:	4b24      	ldr	r3, [pc, #144]	; (801c61c <_svfiprintf_r+0x1e8>)
 801c58c:	bb13      	cbnz	r3, 801c5d4 <_svfiprintf_r+0x1a0>
 801c58e:	9b03      	ldr	r3, [sp, #12]
 801c590:	3307      	adds	r3, #7
 801c592:	f023 0307 	bic.w	r3, r3, #7
 801c596:	3308      	adds	r3, #8
 801c598:	9303      	str	r3, [sp, #12]
 801c59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c59c:	444b      	add	r3, r9
 801c59e:	9309      	str	r3, [sp, #36]	; 0x24
 801c5a0:	e76d      	b.n	801c47e <_svfiprintf_r+0x4a>
 801c5a2:	fb05 3202 	mla	r2, r5, r2, r3
 801c5a6:	2001      	movs	r0, #1
 801c5a8:	460f      	mov	r7, r1
 801c5aa:	e7a6      	b.n	801c4fa <_svfiprintf_r+0xc6>
 801c5ac:	2300      	movs	r3, #0
 801c5ae:	3701      	adds	r7, #1
 801c5b0:	9305      	str	r3, [sp, #20]
 801c5b2:	4619      	mov	r1, r3
 801c5b4:	250a      	movs	r5, #10
 801c5b6:	4638      	mov	r0, r7
 801c5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c5bc:	3a30      	subs	r2, #48	; 0x30
 801c5be:	2a09      	cmp	r2, #9
 801c5c0:	d903      	bls.n	801c5ca <_svfiprintf_r+0x196>
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d0c8      	beq.n	801c558 <_svfiprintf_r+0x124>
 801c5c6:	9105      	str	r1, [sp, #20]
 801c5c8:	e7c6      	b.n	801c558 <_svfiprintf_r+0x124>
 801c5ca:	fb05 2101 	mla	r1, r5, r1, r2
 801c5ce:	2301      	movs	r3, #1
 801c5d0:	4607      	mov	r7, r0
 801c5d2:	e7f0      	b.n	801c5b6 <_svfiprintf_r+0x182>
 801c5d4:	ab03      	add	r3, sp, #12
 801c5d6:	9300      	str	r3, [sp, #0]
 801c5d8:	4622      	mov	r2, r4
 801c5da:	4b11      	ldr	r3, [pc, #68]	; (801c620 <_svfiprintf_r+0x1ec>)
 801c5dc:	a904      	add	r1, sp, #16
 801c5de:	4640      	mov	r0, r8
 801c5e0:	f7fc fc0a 	bl	8018df8 <_printf_float>
 801c5e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801c5e8:	4681      	mov	r9, r0
 801c5ea:	d1d6      	bne.n	801c59a <_svfiprintf_r+0x166>
 801c5ec:	89a3      	ldrh	r3, [r4, #12]
 801c5ee:	065b      	lsls	r3, r3, #25
 801c5f0:	f53f af35 	bmi.w	801c45e <_svfiprintf_r+0x2a>
 801c5f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c5f6:	b01d      	add	sp, #116	; 0x74
 801c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5fc:	ab03      	add	r3, sp, #12
 801c5fe:	9300      	str	r3, [sp, #0]
 801c600:	4622      	mov	r2, r4
 801c602:	4b07      	ldr	r3, [pc, #28]	; (801c620 <_svfiprintf_r+0x1ec>)
 801c604:	a904      	add	r1, sp, #16
 801c606:	4640      	mov	r0, r8
 801c608:	f7fc feac 	bl	8019364 <_printf_i>
 801c60c:	e7ea      	b.n	801c5e4 <_svfiprintf_r+0x1b0>
 801c60e:	bf00      	nop
 801c610:	080205b4 	.word	0x080205b4
 801c614:	080205ba 	.word	0x080205ba
 801c618:	080205be 	.word	0x080205be
 801c61c:	08018df9 	.word	0x08018df9
 801c620:	0801c37f 	.word	0x0801c37f

0801c624 <__ascii_wctomb>:
 801c624:	b149      	cbz	r1, 801c63a <__ascii_wctomb+0x16>
 801c626:	2aff      	cmp	r2, #255	; 0xff
 801c628:	bf85      	ittet	hi
 801c62a:	238a      	movhi	r3, #138	; 0x8a
 801c62c:	6003      	strhi	r3, [r0, #0]
 801c62e:	700a      	strbls	r2, [r1, #0]
 801c630:	f04f 30ff 	movhi.w	r0, #4294967295
 801c634:	bf98      	it	ls
 801c636:	2001      	movls	r0, #1
 801c638:	4770      	bx	lr
 801c63a:	4608      	mov	r0, r1
 801c63c:	4770      	bx	lr

0801c63e <memmove>:
 801c63e:	4288      	cmp	r0, r1
 801c640:	b510      	push	{r4, lr}
 801c642:	eb01 0302 	add.w	r3, r1, r2
 801c646:	d807      	bhi.n	801c658 <memmove+0x1a>
 801c648:	1e42      	subs	r2, r0, #1
 801c64a:	4299      	cmp	r1, r3
 801c64c:	d00a      	beq.n	801c664 <memmove+0x26>
 801c64e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c652:	f802 4f01 	strb.w	r4, [r2, #1]!
 801c656:	e7f8      	b.n	801c64a <memmove+0xc>
 801c658:	4283      	cmp	r3, r0
 801c65a:	d9f5      	bls.n	801c648 <memmove+0xa>
 801c65c:	1881      	adds	r1, r0, r2
 801c65e:	1ad2      	subs	r2, r2, r3
 801c660:	42d3      	cmn	r3, r2
 801c662:	d100      	bne.n	801c666 <memmove+0x28>
 801c664:	bd10      	pop	{r4, pc}
 801c666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c66a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801c66e:	e7f7      	b.n	801c660 <memmove+0x22>

0801c670 <_realloc_r>:
 801c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c672:	4607      	mov	r7, r0
 801c674:	4614      	mov	r4, r2
 801c676:	460e      	mov	r6, r1
 801c678:	b921      	cbnz	r1, 801c684 <_realloc_r+0x14>
 801c67a:	4611      	mov	r1, r2
 801c67c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c680:	f7fc bacc 	b.w	8018c1c <_malloc_r>
 801c684:	b922      	cbnz	r2, 801c690 <_realloc_r+0x20>
 801c686:	f7fc fa7b 	bl	8018b80 <_free_r>
 801c68a:	4625      	mov	r5, r4
 801c68c:	4628      	mov	r0, r5
 801c68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c690:	f000 f814 	bl	801c6bc <_malloc_usable_size_r>
 801c694:	42a0      	cmp	r0, r4
 801c696:	d20f      	bcs.n	801c6b8 <_realloc_r+0x48>
 801c698:	4621      	mov	r1, r4
 801c69a:	4638      	mov	r0, r7
 801c69c:	f7fc fabe 	bl	8018c1c <_malloc_r>
 801c6a0:	4605      	mov	r5, r0
 801c6a2:	2800      	cmp	r0, #0
 801c6a4:	d0f2      	beq.n	801c68c <_realloc_r+0x1c>
 801c6a6:	4631      	mov	r1, r6
 801c6a8:	4622      	mov	r2, r4
 801c6aa:	f7fc fa55 	bl	8018b58 <memcpy>
 801c6ae:	4631      	mov	r1, r6
 801c6b0:	4638      	mov	r0, r7
 801c6b2:	f7fc fa65 	bl	8018b80 <_free_r>
 801c6b6:	e7e9      	b.n	801c68c <_realloc_r+0x1c>
 801c6b8:	4635      	mov	r5, r6
 801c6ba:	e7e7      	b.n	801c68c <_realloc_r+0x1c>

0801c6bc <_malloc_usable_size_r>:
 801c6bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c6c0:	1f18      	subs	r0, r3, #4
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	bfbc      	itt	lt
 801c6c6:	580b      	ldrlt	r3, [r1, r0]
 801c6c8:	18c0      	addlt	r0, r0, r3
 801c6ca:	4770      	bx	lr
 801c6cc:	0000      	movs	r0, r0
	...

0801c6d0 <cos>:
 801c6d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c6d2:	ec51 0b10 	vmov	r0, r1, d0
 801c6d6:	4a1e      	ldr	r2, [pc, #120]	; (801c750 <cos+0x80>)
 801c6d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c6dc:	4293      	cmp	r3, r2
 801c6de:	dc06      	bgt.n	801c6ee <cos+0x1e>
 801c6e0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 801c748 <cos+0x78>
 801c6e4:	f001 feb8 	bl	801e458 <__kernel_cos>
 801c6e8:	ec51 0b10 	vmov	r0, r1, d0
 801c6ec:	e007      	b.n	801c6fe <cos+0x2e>
 801c6ee:	4a19      	ldr	r2, [pc, #100]	; (801c754 <cos+0x84>)
 801c6f0:	4293      	cmp	r3, r2
 801c6f2:	dd09      	ble.n	801c708 <cos+0x38>
 801c6f4:	ee10 2a10 	vmov	r2, s0
 801c6f8:	460b      	mov	r3, r1
 801c6fa:	f7e3 fdd5 	bl	80002a8 <__aeabi_dsub>
 801c6fe:	ec41 0b10 	vmov	d0, r0, r1
 801c702:	b005      	add	sp, #20
 801c704:	f85d fb04 	ldr.w	pc, [sp], #4
 801c708:	4668      	mov	r0, sp
 801c70a:	f001 fbfd 	bl	801df08 <__ieee754_rem_pio2>
 801c70e:	f000 0003 	and.w	r0, r0, #3
 801c712:	2801      	cmp	r0, #1
 801c714:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c718:	ed9d 0b00 	vldr	d0, [sp]
 801c71c:	d007      	beq.n	801c72e <cos+0x5e>
 801c71e:	2802      	cmp	r0, #2
 801c720:	d00e      	beq.n	801c740 <cos+0x70>
 801c722:	2800      	cmp	r0, #0
 801c724:	d0de      	beq.n	801c6e4 <cos+0x14>
 801c726:	2001      	movs	r0, #1
 801c728:	f002 fa9e 	bl	801ec68 <__kernel_sin>
 801c72c:	e7dc      	b.n	801c6e8 <cos+0x18>
 801c72e:	f002 fa9b 	bl	801ec68 <__kernel_sin>
 801c732:	ec53 2b10 	vmov	r2, r3, d0
 801c736:	ee10 0a10 	vmov	r0, s0
 801c73a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c73e:	e7de      	b.n	801c6fe <cos+0x2e>
 801c740:	f001 fe8a 	bl	801e458 <__kernel_cos>
 801c744:	e7f5      	b.n	801c732 <cos+0x62>
 801c746:	bf00      	nop
	...
 801c750:	3fe921fb 	.word	0x3fe921fb
 801c754:	7fefffff 	.word	0x7fefffff

0801c758 <sin>:
 801c758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c75a:	ec51 0b10 	vmov	r0, r1, d0
 801c75e:	4a20      	ldr	r2, [pc, #128]	; (801c7e0 <sin+0x88>)
 801c760:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c764:	4293      	cmp	r3, r2
 801c766:	dc07      	bgt.n	801c778 <sin+0x20>
 801c768:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 801c7d8 <sin+0x80>
 801c76c:	2000      	movs	r0, #0
 801c76e:	f002 fa7b 	bl	801ec68 <__kernel_sin>
 801c772:	ec51 0b10 	vmov	r0, r1, d0
 801c776:	e007      	b.n	801c788 <sin+0x30>
 801c778:	4a1a      	ldr	r2, [pc, #104]	; (801c7e4 <sin+0x8c>)
 801c77a:	4293      	cmp	r3, r2
 801c77c:	dd09      	ble.n	801c792 <sin+0x3a>
 801c77e:	ee10 2a10 	vmov	r2, s0
 801c782:	460b      	mov	r3, r1
 801c784:	f7e3 fd90 	bl	80002a8 <__aeabi_dsub>
 801c788:	ec41 0b10 	vmov	d0, r0, r1
 801c78c:	b005      	add	sp, #20
 801c78e:	f85d fb04 	ldr.w	pc, [sp], #4
 801c792:	4668      	mov	r0, sp
 801c794:	f001 fbb8 	bl	801df08 <__ieee754_rem_pio2>
 801c798:	f000 0003 	and.w	r0, r0, #3
 801c79c:	2801      	cmp	r0, #1
 801c79e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c7a2:	ed9d 0b00 	vldr	d0, [sp]
 801c7a6:	d004      	beq.n	801c7b2 <sin+0x5a>
 801c7a8:	2802      	cmp	r0, #2
 801c7aa:	d005      	beq.n	801c7b8 <sin+0x60>
 801c7ac:	b970      	cbnz	r0, 801c7cc <sin+0x74>
 801c7ae:	2001      	movs	r0, #1
 801c7b0:	e7dd      	b.n	801c76e <sin+0x16>
 801c7b2:	f001 fe51 	bl	801e458 <__kernel_cos>
 801c7b6:	e7dc      	b.n	801c772 <sin+0x1a>
 801c7b8:	2001      	movs	r0, #1
 801c7ba:	f002 fa55 	bl	801ec68 <__kernel_sin>
 801c7be:	ec53 2b10 	vmov	r2, r3, d0
 801c7c2:	ee10 0a10 	vmov	r0, s0
 801c7c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c7ca:	e7dd      	b.n	801c788 <sin+0x30>
 801c7cc:	f001 fe44 	bl	801e458 <__kernel_cos>
 801c7d0:	e7f5      	b.n	801c7be <sin+0x66>
 801c7d2:	bf00      	nop
 801c7d4:	f3af 8000 	nop.w
	...
 801c7e0:	3fe921fb 	.word	0x3fe921fb
 801c7e4:	7fefffff 	.word	0x7fefffff

0801c7e8 <asin>:
 801c7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7ea:	ed2d 8b02 	vpush	{d8}
 801c7ee:	4e26      	ldr	r6, [pc, #152]	; (801c888 <asin+0xa0>)
 801c7f0:	b08b      	sub	sp, #44	; 0x2c
 801c7f2:	ec55 4b10 	vmov	r4, r5, d0
 801c7f6:	f000 fa77 	bl	801cce8 <__ieee754_asin>
 801c7fa:	f996 3000 	ldrsb.w	r3, [r6]
 801c7fe:	eeb0 8a40 	vmov.f32	s16, s0
 801c802:	eef0 8a60 	vmov.f32	s17, s1
 801c806:	3301      	adds	r3, #1
 801c808:	d036      	beq.n	801c878 <asin+0x90>
 801c80a:	4622      	mov	r2, r4
 801c80c:	462b      	mov	r3, r5
 801c80e:	4620      	mov	r0, r4
 801c810:	4629      	mov	r1, r5
 801c812:	f7e4 f99b 	bl	8000b4c <__aeabi_dcmpun>
 801c816:	4607      	mov	r7, r0
 801c818:	bb70      	cbnz	r0, 801c878 <asin+0x90>
 801c81a:	ec45 4b10 	vmov	d0, r4, r5
 801c81e:	f002 fc7f 	bl	801f120 <fabs>
 801c822:	2200      	movs	r2, #0
 801c824:	4b19      	ldr	r3, [pc, #100]	; (801c88c <asin+0xa4>)
 801c826:	ec51 0b10 	vmov	r0, r1, d0
 801c82a:	f7e4 f985 	bl	8000b38 <__aeabi_dcmpgt>
 801c82e:	b318      	cbz	r0, 801c878 <asin+0x90>
 801c830:	2301      	movs	r3, #1
 801c832:	9300      	str	r3, [sp, #0]
 801c834:	4816      	ldr	r0, [pc, #88]	; (801c890 <asin+0xa8>)
 801c836:	4b17      	ldr	r3, [pc, #92]	; (801c894 <asin+0xac>)
 801c838:	9301      	str	r3, [sp, #4]
 801c83a:	9708      	str	r7, [sp, #32]
 801c83c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801c840:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c844:	f002 fd08 	bl	801f258 <nan>
 801c848:	f996 3000 	ldrsb.w	r3, [r6]
 801c84c:	2b02      	cmp	r3, #2
 801c84e:	ed8d 0b06 	vstr	d0, [sp, #24]
 801c852:	d104      	bne.n	801c85e <asin+0x76>
 801c854:	f7fc f946 	bl	8018ae4 <__errno>
 801c858:	2321      	movs	r3, #33	; 0x21
 801c85a:	6003      	str	r3, [r0, #0]
 801c85c:	e004      	b.n	801c868 <asin+0x80>
 801c85e:	4668      	mov	r0, sp
 801c860:	f002 fcf6 	bl	801f250 <matherr>
 801c864:	2800      	cmp	r0, #0
 801c866:	d0f5      	beq.n	801c854 <asin+0x6c>
 801c868:	9b08      	ldr	r3, [sp, #32]
 801c86a:	b11b      	cbz	r3, 801c874 <asin+0x8c>
 801c86c:	f7fc f93a 	bl	8018ae4 <__errno>
 801c870:	9b08      	ldr	r3, [sp, #32]
 801c872:	6003      	str	r3, [r0, #0]
 801c874:	ed9d 8b06 	vldr	d8, [sp, #24]
 801c878:	eeb0 0a48 	vmov.f32	s0, s16
 801c87c:	eef0 0a68 	vmov.f32	s1, s17
 801c880:	b00b      	add	sp, #44	; 0x2c
 801c882:	ecbd 8b02 	vpop	{d8}
 801c886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c888:	200003a4 	.word	0x200003a4
 801c88c:	3ff00000 	.word	0x3ff00000
 801c890:	080205b9 	.word	0x080205b9
 801c894:	080206c6 	.word	0x080206c6

0801c898 <atan2>:
 801c898:	f000 bc36 	b.w	801d108 <__ieee754_atan2>

0801c89c <fmod>:
 801c89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c8a0:	ed2d 8b02 	vpush	{d8}
 801c8a4:	b08b      	sub	sp, #44	; 0x2c
 801c8a6:	ec55 4b10 	vmov	r4, r5, d0
 801c8aa:	ec57 6b11 	vmov	r6, r7, d1
 801c8ae:	f000 fd09 	bl	801d2c4 <__ieee754_fmod>
 801c8b2:	4b2a      	ldr	r3, [pc, #168]	; (801c95c <fmod+0xc0>)
 801c8b4:	eeb0 8a40 	vmov.f32	s16, s0
 801c8b8:	eef0 8a60 	vmov.f32	s17, s1
 801c8bc:	f993 8000 	ldrsb.w	r8, [r3]
 801c8c0:	f1b8 3fff 	cmp.w	r8, #4294967295
 801c8c4:	d030      	beq.n	801c928 <fmod+0x8c>
 801c8c6:	4632      	mov	r2, r6
 801c8c8:	463b      	mov	r3, r7
 801c8ca:	4630      	mov	r0, r6
 801c8cc:	4639      	mov	r1, r7
 801c8ce:	f7e4 f93d 	bl	8000b4c <__aeabi_dcmpun>
 801c8d2:	bb48      	cbnz	r0, 801c928 <fmod+0x8c>
 801c8d4:	4622      	mov	r2, r4
 801c8d6:	462b      	mov	r3, r5
 801c8d8:	4620      	mov	r0, r4
 801c8da:	4629      	mov	r1, r5
 801c8dc:	f7e4 f936 	bl	8000b4c <__aeabi_dcmpun>
 801c8e0:	4681      	mov	r9, r0
 801c8e2:	bb08      	cbnz	r0, 801c928 <fmod+0x8c>
 801c8e4:	2200      	movs	r2, #0
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	4630      	mov	r0, r6
 801c8ea:	4639      	mov	r1, r7
 801c8ec:	f7e4 f8fc 	bl	8000ae8 <__aeabi_dcmpeq>
 801c8f0:	b1d0      	cbz	r0, 801c928 <fmod+0x8c>
 801c8f2:	2301      	movs	r3, #1
 801c8f4:	9300      	str	r3, [sp, #0]
 801c8f6:	4b1a      	ldr	r3, [pc, #104]	; (801c960 <fmod+0xc4>)
 801c8f8:	9301      	str	r3, [sp, #4]
 801c8fa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c8fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c902:	f8cd 9020 	str.w	r9, [sp, #32]
 801c906:	f1b8 0f00 	cmp.w	r8, #0
 801c90a:	d116      	bne.n	801c93a <fmod+0x9e>
 801c90c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c910:	4668      	mov	r0, sp
 801c912:	f002 fc9d 	bl	801f250 <matherr>
 801c916:	b1d8      	cbz	r0, 801c950 <fmod+0xb4>
 801c918:	9b08      	ldr	r3, [sp, #32]
 801c91a:	b11b      	cbz	r3, 801c924 <fmod+0x88>
 801c91c:	f7fc f8e2 	bl	8018ae4 <__errno>
 801c920:	9b08      	ldr	r3, [sp, #32]
 801c922:	6003      	str	r3, [r0, #0]
 801c924:	ed9d 8b06 	vldr	d8, [sp, #24]
 801c928:	eeb0 0a48 	vmov.f32	s0, s16
 801c92c:	eef0 0a68 	vmov.f32	s1, s17
 801c930:	b00b      	add	sp, #44	; 0x2c
 801c932:	ecbd 8b02 	vpop	{d8}
 801c936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c93a:	2200      	movs	r2, #0
 801c93c:	2300      	movs	r3, #0
 801c93e:	4610      	mov	r0, r2
 801c940:	4619      	mov	r1, r3
 801c942:	f7e3 ff93 	bl	800086c <__aeabi_ddiv>
 801c946:	f1b8 0f02 	cmp.w	r8, #2
 801c94a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c94e:	d1df      	bne.n	801c910 <fmod+0x74>
 801c950:	f7fc f8c8 	bl	8018ae4 <__errno>
 801c954:	2321      	movs	r3, #33	; 0x21
 801c956:	6003      	str	r3, [r0, #0]
 801c958:	e7de      	b.n	801c918 <fmod+0x7c>
 801c95a:	bf00      	nop
 801c95c:	200003a4 	.word	0x200003a4
 801c960:	080206cb 	.word	0x080206cb

0801c964 <pow>:
 801c964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c968:	ed2d 8b04 	vpush	{d8-d9}
 801c96c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801cc40 <pow+0x2dc>
 801c970:	b08d      	sub	sp, #52	; 0x34
 801c972:	ec57 6b10 	vmov	r6, r7, d0
 801c976:	ec55 4b11 	vmov	r4, r5, d1
 801c97a:	f000 fdb5 	bl	801d4e8 <__ieee754_pow>
 801c97e:	f999 3000 	ldrsb.w	r3, [r9]
 801c982:	9300      	str	r3, [sp, #0]
 801c984:	3301      	adds	r3, #1
 801c986:	eeb0 8a40 	vmov.f32	s16, s0
 801c98a:	eef0 8a60 	vmov.f32	s17, s1
 801c98e:	46c8      	mov	r8, r9
 801c990:	d05f      	beq.n	801ca52 <pow+0xee>
 801c992:	4622      	mov	r2, r4
 801c994:	462b      	mov	r3, r5
 801c996:	4620      	mov	r0, r4
 801c998:	4629      	mov	r1, r5
 801c99a:	f7e4 f8d7 	bl	8000b4c <__aeabi_dcmpun>
 801c99e:	4683      	mov	fp, r0
 801c9a0:	2800      	cmp	r0, #0
 801c9a2:	d156      	bne.n	801ca52 <pow+0xee>
 801c9a4:	4632      	mov	r2, r6
 801c9a6:	463b      	mov	r3, r7
 801c9a8:	4630      	mov	r0, r6
 801c9aa:	4639      	mov	r1, r7
 801c9ac:	f7e4 f8ce 	bl	8000b4c <__aeabi_dcmpun>
 801c9b0:	9001      	str	r0, [sp, #4]
 801c9b2:	b1e8      	cbz	r0, 801c9f0 <pow+0x8c>
 801c9b4:	2200      	movs	r2, #0
 801c9b6:	2300      	movs	r3, #0
 801c9b8:	4620      	mov	r0, r4
 801c9ba:	4629      	mov	r1, r5
 801c9bc:	f7e4 f894 	bl	8000ae8 <__aeabi_dcmpeq>
 801c9c0:	2800      	cmp	r0, #0
 801c9c2:	d046      	beq.n	801ca52 <pow+0xee>
 801c9c4:	2301      	movs	r3, #1
 801c9c6:	9302      	str	r3, [sp, #8]
 801c9c8:	4b96      	ldr	r3, [pc, #600]	; (801cc24 <pow+0x2c0>)
 801c9ca:	9303      	str	r3, [sp, #12]
 801c9cc:	4b96      	ldr	r3, [pc, #600]	; (801cc28 <pow+0x2c4>)
 801c9ce:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c9d2:	2200      	movs	r2, #0
 801c9d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c9d8:	9b00      	ldr	r3, [sp, #0]
 801c9da:	2b02      	cmp	r3, #2
 801c9dc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c9e0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801c9e4:	d033      	beq.n	801ca4e <pow+0xea>
 801c9e6:	a802      	add	r0, sp, #8
 801c9e8:	f002 fc32 	bl	801f250 <matherr>
 801c9ec:	bb48      	cbnz	r0, 801ca42 <pow+0xde>
 801c9ee:	e05d      	b.n	801caac <pow+0x148>
 801c9f0:	f04f 0a00 	mov.w	sl, #0
 801c9f4:	f04f 0b00 	mov.w	fp, #0
 801c9f8:	4652      	mov	r2, sl
 801c9fa:	465b      	mov	r3, fp
 801c9fc:	4630      	mov	r0, r6
 801c9fe:	4639      	mov	r1, r7
 801ca00:	f7e4 f872 	bl	8000ae8 <__aeabi_dcmpeq>
 801ca04:	ec4b ab19 	vmov	d9, sl, fp
 801ca08:	2800      	cmp	r0, #0
 801ca0a:	d054      	beq.n	801cab6 <pow+0x152>
 801ca0c:	4652      	mov	r2, sl
 801ca0e:	465b      	mov	r3, fp
 801ca10:	4620      	mov	r0, r4
 801ca12:	4629      	mov	r1, r5
 801ca14:	f7e4 f868 	bl	8000ae8 <__aeabi_dcmpeq>
 801ca18:	4680      	mov	r8, r0
 801ca1a:	b318      	cbz	r0, 801ca64 <pow+0x100>
 801ca1c:	2301      	movs	r3, #1
 801ca1e:	9302      	str	r3, [sp, #8]
 801ca20:	4b80      	ldr	r3, [pc, #512]	; (801cc24 <pow+0x2c0>)
 801ca22:	9303      	str	r3, [sp, #12]
 801ca24:	9b01      	ldr	r3, [sp, #4]
 801ca26:	930a      	str	r3, [sp, #40]	; 0x28
 801ca28:	9b00      	ldr	r3, [sp, #0]
 801ca2a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ca2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ca32:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d0d5      	beq.n	801c9e6 <pow+0x82>
 801ca3a:	4b7b      	ldr	r3, [pc, #492]	; (801cc28 <pow+0x2c4>)
 801ca3c:	2200      	movs	r2, #0
 801ca3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ca42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca44:	b11b      	cbz	r3, 801ca4e <pow+0xea>
 801ca46:	f7fc f84d 	bl	8018ae4 <__errno>
 801ca4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca4c:	6003      	str	r3, [r0, #0]
 801ca4e:	ed9d 8b08 	vldr	d8, [sp, #32]
 801ca52:	eeb0 0a48 	vmov.f32	s0, s16
 801ca56:	eef0 0a68 	vmov.f32	s1, s17
 801ca5a:	b00d      	add	sp, #52	; 0x34
 801ca5c:	ecbd 8b04 	vpop	{d8-d9}
 801ca60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca64:	ec45 4b10 	vmov	d0, r4, r5
 801ca68:	f002 fb63 	bl	801f132 <finite>
 801ca6c:	2800      	cmp	r0, #0
 801ca6e:	d0f0      	beq.n	801ca52 <pow+0xee>
 801ca70:	4652      	mov	r2, sl
 801ca72:	465b      	mov	r3, fp
 801ca74:	4620      	mov	r0, r4
 801ca76:	4629      	mov	r1, r5
 801ca78:	f7e4 f840 	bl	8000afc <__aeabi_dcmplt>
 801ca7c:	2800      	cmp	r0, #0
 801ca7e:	d0e8      	beq.n	801ca52 <pow+0xee>
 801ca80:	2301      	movs	r3, #1
 801ca82:	9302      	str	r3, [sp, #8]
 801ca84:	4b67      	ldr	r3, [pc, #412]	; (801cc24 <pow+0x2c0>)
 801ca86:	9303      	str	r3, [sp, #12]
 801ca88:	f999 3000 	ldrsb.w	r3, [r9]
 801ca8c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801ca90:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ca94:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ca98:	b913      	cbnz	r3, 801caa0 <pow+0x13c>
 801ca9a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801ca9e:	e7a2      	b.n	801c9e6 <pow+0x82>
 801caa0:	4962      	ldr	r1, [pc, #392]	; (801cc2c <pow+0x2c8>)
 801caa2:	2000      	movs	r0, #0
 801caa4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801caa8:	2b02      	cmp	r3, #2
 801caaa:	d19c      	bne.n	801c9e6 <pow+0x82>
 801caac:	f7fc f81a 	bl	8018ae4 <__errno>
 801cab0:	2321      	movs	r3, #33	; 0x21
 801cab2:	6003      	str	r3, [r0, #0]
 801cab4:	e7c5      	b.n	801ca42 <pow+0xde>
 801cab6:	eeb0 0a48 	vmov.f32	s0, s16
 801caba:	eef0 0a68 	vmov.f32	s1, s17
 801cabe:	f002 fb38 	bl	801f132 <finite>
 801cac2:	9000      	str	r0, [sp, #0]
 801cac4:	2800      	cmp	r0, #0
 801cac6:	f040 8081 	bne.w	801cbcc <pow+0x268>
 801caca:	ec47 6b10 	vmov	d0, r6, r7
 801cace:	f002 fb30 	bl	801f132 <finite>
 801cad2:	2800      	cmp	r0, #0
 801cad4:	d07a      	beq.n	801cbcc <pow+0x268>
 801cad6:	ec45 4b10 	vmov	d0, r4, r5
 801cada:	f002 fb2a 	bl	801f132 <finite>
 801cade:	2800      	cmp	r0, #0
 801cae0:	d074      	beq.n	801cbcc <pow+0x268>
 801cae2:	ec53 2b18 	vmov	r2, r3, d8
 801cae6:	ee18 0a10 	vmov	r0, s16
 801caea:	4619      	mov	r1, r3
 801caec:	f7e4 f82e 	bl	8000b4c <__aeabi_dcmpun>
 801caf0:	f999 9000 	ldrsb.w	r9, [r9]
 801caf4:	4b4b      	ldr	r3, [pc, #300]	; (801cc24 <pow+0x2c0>)
 801caf6:	b1b0      	cbz	r0, 801cb26 <pow+0x1c2>
 801caf8:	2201      	movs	r2, #1
 801cafa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801cafe:	9b00      	ldr	r3, [sp, #0]
 801cb00:	930a      	str	r3, [sp, #40]	; 0x28
 801cb02:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801cb06:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801cb0a:	f1b9 0f00 	cmp.w	r9, #0
 801cb0e:	d0c4      	beq.n	801ca9a <pow+0x136>
 801cb10:	4652      	mov	r2, sl
 801cb12:	465b      	mov	r3, fp
 801cb14:	4650      	mov	r0, sl
 801cb16:	4659      	mov	r1, fp
 801cb18:	f7e3 fea8 	bl	800086c <__aeabi_ddiv>
 801cb1c:	f1b9 0f02 	cmp.w	r9, #2
 801cb20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cb24:	e7c1      	b.n	801caaa <pow+0x146>
 801cb26:	2203      	movs	r2, #3
 801cb28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801cb2c:	900a      	str	r0, [sp, #40]	; 0x28
 801cb2e:	4629      	mov	r1, r5
 801cb30:	4620      	mov	r0, r4
 801cb32:	2200      	movs	r2, #0
 801cb34:	4b3e      	ldr	r3, [pc, #248]	; (801cc30 <pow+0x2cc>)
 801cb36:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801cb3a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801cb3e:	f7e3 fd6b 	bl	8000618 <__aeabi_dmul>
 801cb42:	4604      	mov	r4, r0
 801cb44:	460d      	mov	r5, r1
 801cb46:	f1b9 0f00 	cmp.w	r9, #0
 801cb4a:	d124      	bne.n	801cb96 <pow+0x232>
 801cb4c:	4b39      	ldr	r3, [pc, #228]	; (801cc34 <pow+0x2d0>)
 801cb4e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801cb52:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cb56:	4630      	mov	r0, r6
 801cb58:	4652      	mov	r2, sl
 801cb5a:	465b      	mov	r3, fp
 801cb5c:	4639      	mov	r1, r7
 801cb5e:	f7e3 ffcd 	bl	8000afc <__aeabi_dcmplt>
 801cb62:	2800      	cmp	r0, #0
 801cb64:	d056      	beq.n	801cc14 <pow+0x2b0>
 801cb66:	ec45 4b10 	vmov	d0, r4, r5
 801cb6a:	f002 fb7d 	bl	801f268 <rint>
 801cb6e:	4622      	mov	r2, r4
 801cb70:	462b      	mov	r3, r5
 801cb72:	ec51 0b10 	vmov	r0, r1, d0
 801cb76:	f7e3 ffb7 	bl	8000ae8 <__aeabi_dcmpeq>
 801cb7a:	b920      	cbnz	r0, 801cb86 <pow+0x222>
 801cb7c:	4b2e      	ldr	r3, [pc, #184]	; (801cc38 <pow+0x2d4>)
 801cb7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801cb82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cb86:	f998 3000 	ldrsb.w	r3, [r8]
 801cb8a:	2b02      	cmp	r3, #2
 801cb8c:	d142      	bne.n	801cc14 <pow+0x2b0>
 801cb8e:	f7fb ffa9 	bl	8018ae4 <__errno>
 801cb92:	2322      	movs	r3, #34	; 0x22
 801cb94:	e78d      	b.n	801cab2 <pow+0x14e>
 801cb96:	4b29      	ldr	r3, [pc, #164]	; (801cc3c <pow+0x2d8>)
 801cb98:	2200      	movs	r2, #0
 801cb9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cb9e:	4630      	mov	r0, r6
 801cba0:	4652      	mov	r2, sl
 801cba2:	465b      	mov	r3, fp
 801cba4:	4639      	mov	r1, r7
 801cba6:	f7e3 ffa9 	bl	8000afc <__aeabi_dcmplt>
 801cbaa:	2800      	cmp	r0, #0
 801cbac:	d0eb      	beq.n	801cb86 <pow+0x222>
 801cbae:	ec45 4b10 	vmov	d0, r4, r5
 801cbb2:	f002 fb59 	bl	801f268 <rint>
 801cbb6:	4622      	mov	r2, r4
 801cbb8:	462b      	mov	r3, r5
 801cbba:	ec51 0b10 	vmov	r0, r1, d0
 801cbbe:	f7e3 ff93 	bl	8000ae8 <__aeabi_dcmpeq>
 801cbc2:	2800      	cmp	r0, #0
 801cbc4:	d1df      	bne.n	801cb86 <pow+0x222>
 801cbc6:	2200      	movs	r2, #0
 801cbc8:	4b18      	ldr	r3, [pc, #96]	; (801cc2c <pow+0x2c8>)
 801cbca:	e7da      	b.n	801cb82 <pow+0x21e>
 801cbcc:	2200      	movs	r2, #0
 801cbce:	2300      	movs	r3, #0
 801cbd0:	ec51 0b18 	vmov	r0, r1, d8
 801cbd4:	f7e3 ff88 	bl	8000ae8 <__aeabi_dcmpeq>
 801cbd8:	2800      	cmp	r0, #0
 801cbda:	f43f af3a 	beq.w	801ca52 <pow+0xee>
 801cbde:	ec47 6b10 	vmov	d0, r6, r7
 801cbe2:	f002 faa6 	bl	801f132 <finite>
 801cbe6:	2800      	cmp	r0, #0
 801cbe8:	f43f af33 	beq.w	801ca52 <pow+0xee>
 801cbec:	ec45 4b10 	vmov	d0, r4, r5
 801cbf0:	f002 fa9f 	bl	801f132 <finite>
 801cbf4:	2800      	cmp	r0, #0
 801cbf6:	f43f af2c 	beq.w	801ca52 <pow+0xee>
 801cbfa:	2304      	movs	r3, #4
 801cbfc:	9302      	str	r3, [sp, #8]
 801cbfe:	4b09      	ldr	r3, [pc, #36]	; (801cc24 <pow+0x2c0>)
 801cc00:	9303      	str	r3, [sp, #12]
 801cc02:	2300      	movs	r3, #0
 801cc04:	930a      	str	r3, [sp, #40]	; 0x28
 801cc06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801cc0a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801cc0e:	ed8d 9b08 	vstr	d9, [sp, #32]
 801cc12:	e7b8      	b.n	801cb86 <pow+0x222>
 801cc14:	a802      	add	r0, sp, #8
 801cc16:	f002 fb1b 	bl	801f250 <matherr>
 801cc1a:	2800      	cmp	r0, #0
 801cc1c:	f47f af11 	bne.w	801ca42 <pow+0xde>
 801cc20:	e7b5      	b.n	801cb8e <pow+0x22a>
 801cc22:	bf00      	nop
 801cc24:	080206d0 	.word	0x080206d0
 801cc28:	3ff00000 	.word	0x3ff00000
 801cc2c:	fff00000 	.word	0xfff00000
 801cc30:	3fe00000 	.word	0x3fe00000
 801cc34:	47efffff 	.word	0x47efffff
 801cc38:	c7efffff 	.word	0xc7efffff
 801cc3c:	7ff00000 	.word	0x7ff00000
 801cc40:	200003a4 	.word	0x200003a4

0801cc44 <sqrtf>:
 801cc44:	b510      	push	{r4, lr}
 801cc46:	ed2d 8b02 	vpush	{d8}
 801cc4a:	b08a      	sub	sp, #40	; 0x28
 801cc4c:	eeb0 8a40 	vmov.f32	s16, s0
 801cc50:	f001 fbfc 	bl	801e44c <__ieee754_sqrtf>
 801cc54:	4b21      	ldr	r3, [pc, #132]	; (801ccdc <sqrtf+0x98>)
 801cc56:	f993 4000 	ldrsb.w	r4, [r3]
 801cc5a:	1c63      	adds	r3, r4, #1
 801cc5c:	d02c      	beq.n	801ccb8 <sqrtf+0x74>
 801cc5e:	eeb4 8a48 	vcmp.f32	s16, s16
 801cc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc66:	d627      	bvs.n	801ccb8 <sqrtf+0x74>
 801cc68:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801cc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc70:	d522      	bpl.n	801ccb8 <sqrtf+0x74>
 801cc72:	2301      	movs	r3, #1
 801cc74:	9300      	str	r3, [sp, #0]
 801cc76:	4b1a      	ldr	r3, [pc, #104]	; (801cce0 <sqrtf+0x9c>)
 801cc78:	9301      	str	r3, [sp, #4]
 801cc7a:	ee18 0a10 	vmov	r0, s16
 801cc7e:	2300      	movs	r3, #0
 801cc80:	9308      	str	r3, [sp, #32]
 801cc82:	f7e3 fc71 	bl	8000568 <__aeabi_f2d>
 801cc86:	2200      	movs	r2, #0
 801cc88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cc8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cc90:	2300      	movs	r3, #0
 801cc92:	b9ac      	cbnz	r4, 801ccc0 <sqrtf+0x7c>
 801cc94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801cc98:	4668      	mov	r0, sp
 801cc9a:	f002 fad9 	bl	801f250 <matherr>
 801cc9e:	b1b8      	cbz	r0, 801ccd0 <sqrtf+0x8c>
 801cca0:	9b08      	ldr	r3, [sp, #32]
 801cca2:	b11b      	cbz	r3, 801ccac <sqrtf+0x68>
 801cca4:	f7fb ff1e 	bl	8018ae4 <__errno>
 801cca8:	9b08      	ldr	r3, [sp, #32]
 801ccaa:	6003      	str	r3, [r0, #0]
 801ccac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ccb0:	f7e3 ffaa 	bl	8000c08 <__aeabi_d2f>
 801ccb4:	ee00 0a10 	vmov	s0, r0
 801ccb8:	b00a      	add	sp, #40	; 0x28
 801ccba:	ecbd 8b02 	vpop	{d8}
 801ccbe:	bd10      	pop	{r4, pc}
 801ccc0:	4610      	mov	r0, r2
 801ccc2:	4619      	mov	r1, r3
 801ccc4:	f7e3 fdd2 	bl	800086c <__aeabi_ddiv>
 801ccc8:	2c02      	cmp	r4, #2
 801ccca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ccce:	d1e3      	bne.n	801cc98 <sqrtf+0x54>
 801ccd0:	f7fb ff08 	bl	8018ae4 <__errno>
 801ccd4:	2321      	movs	r3, #33	; 0x21
 801ccd6:	6003      	str	r3, [r0, #0]
 801ccd8:	e7e2      	b.n	801cca0 <sqrtf+0x5c>
 801ccda:	bf00      	nop
 801ccdc:	200003a4 	.word	0x200003a4
 801cce0:	080206d4 	.word	0x080206d4
 801cce4:	00000000 	.word	0x00000000

0801cce8 <__ieee754_asin>:
 801cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccec:	ec55 4b10 	vmov	r4, r5, d0
 801ccf0:	4bcb      	ldr	r3, [pc, #812]	; (801d020 <__ieee754_asin+0x338>)
 801ccf2:	b087      	sub	sp, #28
 801ccf4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801ccf8:	429f      	cmp	r7, r3
 801ccfa:	9501      	str	r5, [sp, #4]
 801ccfc:	dd31      	ble.n	801cd62 <__ieee754_asin+0x7a>
 801ccfe:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801cd02:	ee10 3a10 	vmov	r3, s0
 801cd06:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801cd0a:	433b      	orrs	r3, r7
 801cd0c:	d117      	bne.n	801cd3e <__ieee754_asin+0x56>
 801cd0e:	a3aa      	add	r3, pc, #680	; (adr r3, 801cfb8 <__ieee754_asin+0x2d0>)
 801cd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd14:	ee10 0a10 	vmov	r0, s0
 801cd18:	4629      	mov	r1, r5
 801cd1a:	f7e3 fc7d 	bl	8000618 <__aeabi_dmul>
 801cd1e:	a3a8      	add	r3, pc, #672	; (adr r3, 801cfc0 <__ieee754_asin+0x2d8>)
 801cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd24:	4606      	mov	r6, r0
 801cd26:	460f      	mov	r7, r1
 801cd28:	4620      	mov	r0, r4
 801cd2a:	4629      	mov	r1, r5
 801cd2c:	f7e3 fc74 	bl	8000618 <__aeabi_dmul>
 801cd30:	4602      	mov	r2, r0
 801cd32:	460b      	mov	r3, r1
 801cd34:	4630      	mov	r0, r6
 801cd36:	4639      	mov	r1, r7
 801cd38:	f7e3 fab8 	bl	80002ac <__adddf3>
 801cd3c:	e00a      	b.n	801cd54 <__ieee754_asin+0x6c>
 801cd3e:	ee10 2a10 	vmov	r2, s0
 801cd42:	462b      	mov	r3, r5
 801cd44:	4620      	mov	r0, r4
 801cd46:	4629      	mov	r1, r5
 801cd48:	f7e3 faae 	bl	80002a8 <__aeabi_dsub>
 801cd4c:	4602      	mov	r2, r0
 801cd4e:	460b      	mov	r3, r1
 801cd50:	f7e3 fd8c 	bl	800086c <__aeabi_ddiv>
 801cd54:	4604      	mov	r4, r0
 801cd56:	460d      	mov	r5, r1
 801cd58:	ec45 4b10 	vmov	d0, r4, r5
 801cd5c:	b007      	add	sp, #28
 801cd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd62:	4bb0      	ldr	r3, [pc, #704]	; (801d024 <__ieee754_asin+0x33c>)
 801cd64:	429f      	cmp	r7, r3
 801cd66:	dc11      	bgt.n	801cd8c <__ieee754_asin+0xa4>
 801cd68:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801cd6c:	f280 80ae 	bge.w	801cecc <__ieee754_asin+0x1e4>
 801cd70:	a395      	add	r3, pc, #596	; (adr r3, 801cfc8 <__ieee754_asin+0x2e0>)
 801cd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd76:	ee10 0a10 	vmov	r0, s0
 801cd7a:	4629      	mov	r1, r5
 801cd7c:	f7e3 fa96 	bl	80002ac <__adddf3>
 801cd80:	2200      	movs	r2, #0
 801cd82:	4ba9      	ldr	r3, [pc, #676]	; (801d028 <__ieee754_asin+0x340>)
 801cd84:	f7e3 fed8 	bl	8000b38 <__aeabi_dcmpgt>
 801cd88:	2800      	cmp	r0, #0
 801cd8a:	d1e5      	bne.n	801cd58 <__ieee754_asin+0x70>
 801cd8c:	ec45 4b10 	vmov	d0, r4, r5
 801cd90:	f002 f9c6 	bl	801f120 <fabs>
 801cd94:	2000      	movs	r0, #0
 801cd96:	ec53 2b10 	vmov	r2, r3, d0
 801cd9a:	49a3      	ldr	r1, [pc, #652]	; (801d028 <__ieee754_asin+0x340>)
 801cd9c:	f7e3 fa84 	bl	80002a8 <__aeabi_dsub>
 801cda0:	2200      	movs	r2, #0
 801cda2:	4ba2      	ldr	r3, [pc, #648]	; (801d02c <__ieee754_asin+0x344>)
 801cda4:	f7e3 fc38 	bl	8000618 <__aeabi_dmul>
 801cda8:	a389      	add	r3, pc, #548	; (adr r3, 801cfd0 <__ieee754_asin+0x2e8>)
 801cdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdae:	4604      	mov	r4, r0
 801cdb0:	460d      	mov	r5, r1
 801cdb2:	f7e3 fc31 	bl	8000618 <__aeabi_dmul>
 801cdb6:	a388      	add	r3, pc, #544	; (adr r3, 801cfd8 <__ieee754_asin+0x2f0>)
 801cdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdbc:	f7e3 fa76 	bl	80002ac <__adddf3>
 801cdc0:	4622      	mov	r2, r4
 801cdc2:	462b      	mov	r3, r5
 801cdc4:	f7e3 fc28 	bl	8000618 <__aeabi_dmul>
 801cdc8:	a385      	add	r3, pc, #532	; (adr r3, 801cfe0 <__ieee754_asin+0x2f8>)
 801cdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdce:	f7e3 fa6b 	bl	80002a8 <__aeabi_dsub>
 801cdd2:	4622      	mov	r2, r4
 801cdd4:	462b      	mov	r3, r5
 801cdd6:	f7e3 fc1f 	bl	8000618 <__aeabi_dmul>
 801cdda:	a383      	add	r3, pc, #524	; (adr r3, 801cfe8 <__ieee754_asin+0x300>)
 801cddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cde0:	f7e3 fa64 	bl	80002ac <__adddf3>
 801cde4:	4622      	mov	r2, r4
 801cde6:	462b      	mov	r3, r5
 801cde8:	f7e3 fc16 	bl	8000618 <__aeabi_dmul>
 801cdec:	a380      	add	r3, pc, #512	; (adr r3, 801cff0 <__ieee754_asin+0x308>)
 801cdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdf2:	f7e3 fa59 	bl	80002a8 <__aeabi_dsub>
 801cdf6:	4622      	mov	r2, r4
 801cdf8:	462b      	mov	r3, r5
 801cdfa:	f7e3 fc0d 	bl	8000618 <__aeabi_dmul>
 801cdfe:	a37e      	add	r3, pc, #504	; (adr r3, 801cff8 <__ieee754_asin+0x310>)
 801ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce04:	f7e3 fa52 	bl	80002ac <__adddf3>
 801ce08:	4622      	mov	r2, r4
 801ce0a:	462b      	mov	r3, r5
 801ce0c:	f7e3 fc04 	bl	8000618 <__aeabi_dmul>
 801ce10:	a37b      	add	r3, pc, #492	; (adr r3, 801d000 <__ieee754_asin+0x318>)
 801ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce16:	4680      	mov	r8, r0
 801ce18:	4689      	mov	r9, r1
 801ce1a:	4620      	mov	r0, r4
 801ce1c:	4629      	mov	r1, r5
 801ce1e:	f7e3 fbfb 	bl	8000618 <__aeabi_dmul>
 801ce22:	a379      	add	r3, pc, #484	; (adr r3, 801d008 <__ieee754_asin+0x320>)
 801ce24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce28:	f7e3 fa3e 	bl	80002a8 <__aeabi_dsub>
 801ce2c:	4622      	mov	r2, r4
 801ce2e:	462b      	mov	r3, r5
 801ce30:	f7e3 fbf2 	bl	8000618 <__aeabi_dmul>
 801ce34:	a376      	add	r3, pc, #472	; (adr r3, 801d010 <__ieee754_asin+0x328>)
 801ce36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce3a:	f7e3 fa37 	bl	80002ac <__adddf3>
 801ce3e:	4622      	mov	r2, r4
 801ce40:	462b      	mov	r3, r5
 801ce42:	f7e3 fbe9 	bl	8000618 <__aeabi_dmul>
 801ce46:	a374      	add	r3, pc, #464	; (adr r3, 801d018 <__ieee754_asin+0x330>)
 801ce48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce4c:	f7e3 fa2c 	bl	80002a8 <__aeabi_dsub>
 801ce50:	4622      	mov	r2, r4
 801ce52:	462b      	mov	r3, r5
 801ce54:	f7e3 fbe0 	bl	8000618 <__aeabi_dmul>
 801ce58:	4b73      	ldr	r3, [pc, #460]	; (801d028 <__ieee754_asin+0x340>)
 801ce5a:	2200      	movs	r2, #0
 801ce5c:	f7e3 fa26 	bl	80002ac <__adddf3>
 801ce60:	ec45 4b10 	vmov	d0, r4, r5
 801ce64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ce68:	f001 fa40 	bl	801e2ec <__ieee754_sqrt>
 801ce6c:	4b70      	ldr	r3, [pc, #448]	; (801d030 <__ieee754_asin+0x348>)
 801ce6e:	429f      	cmp	r7, r3
 801ce70:	ec5b ab10 	vmov	sl, fp, d0
 801ce74:	f340 80de 	ble.w	801d034 <__ieee754_asin+0x34c>
 801ce78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ce7c:	4640      	mov	r0, r8
 801ce7e:	4649      	mov	r1, r9
 801ce80:	f7e3 fcf4 	bl	800086c <__aeabi_ddiv>
 801ce84:	4652      	mov	r2, sl
 801ce86:	465b      	mov	r3, fp
 801ce88:	f7e3 fbc6 	bl	8000618 <__aeabi_dmul>
 801ce8c:	4652      	mov	r2, sl
 801ce8e:	465b      	mov	r3, fp
 801ce90:	f7e3 fa0c 	bl	80002ac <__adddf3>
 801ce94:	4602      	mov	r2, r0
 801ce96:	460b      	mov	r3, r1
 801ce98:	f7e3 fa08 	bl	80002ac <__adddf3>
 801ce9c:	a348      	add	r3, pc, #288	; (adr r3, 801cfc0 <__ieee754_asin+0x2d8>)
 801ce9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cea2:	f7e3 fa01 	bl	80002a8 <__aeabi_dsub>
 801cea6:	4602      	mov	r2, r0
 801cea8:	460b      	mov	r3, r1
 801ceaa:	a143      	add	r1, pc, #268	; (adr r1, 801cfb8 <__ieee754_asin+0x2d0>)
 801ceac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ceb0:	f7e3 f9fa 	bl	80002a8 <__aeabi_dsub>
 801ceb4:	9b01      	ldr	r3, [sp, #4]
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	bfdc      	itt	le
 801ceba:	4602      	movle	r2, r0
 801cebc:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801cec0:	4604      	mov	r4, r0
 801cec2:	460d      	mov	r5, r1
 801cec4:	bfdc      	itt	le
 801cec6:	4614      	movle	r4, r2
 801cec8:	461d      	movle	r5, r3
 801ceca:	e745      	b.n	801cd58 <__ieee754_asin+0x70>
 801cecc:	ee10 2a10 	vmov	r2, s0
 801ced0:	ee10 0a10 	vmov	r0, s0
 801ced4:	462b      	mov	r3, r5
 801ced6:	4629      	mov	r1, r5
 801ced8:	f7e3 fb9e 	bl	8000618 <__aeabi_dmul>
 801cedc:	a33c      	add	r3, pc, #240	; (adr r3, 801cfd0 <__ieee754_asin+0x2e8>)
 801cede:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cee2:	4606      	mov	r6, r0
 801cee4:	460f      	mov	r7, r1
 801cee6:	f7e3 fb97 	bl	8000618 <__aeabi_dmul>
 801ceea:	a33b      	add	r3, pc, #236	; (adr r3, 801cfd8 <__ieee754_asin+0x2f0>)
 801ceec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef0:	f7e3 f9dc 	bl	80002ac <__adddf3>
 801cef4:	4632      	mov	r2, r6
 801cef6:	463b      	mov	r3, r7
 801cef8:	f7e3 fb8e 	bl	8000618 <__aeabi_dmul>
 801cefc:	a338      	add	r3, pc, #224	; (adr r3, 801cfe0 <__ieee754_asin+0x2f8>)
 801cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf02:	f7e3 f9d1 	bl	80002a8 <__aeabi_dsub>
 801cf06:	4632      	mov	r2, r6
 801cf08:	463b      	mov	r3, r7
 801cf0a:	f7e3 fb85 	bl	8000618 <__aeabi_dmul>
 801cf0e:	a336      	add	r3, pc, #216	; (adr r3, 801cfe8 <__ieee754_asin+0x300>)
 801cf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf14:	f7e3 f9ca 	bl	80002ac <__adddf3>
 801cf18:	4632      	mov	r2, r6
 801cf1a:	463b      	mov	r3, r7
 801cf1c:	f7e3 fb7c 	bl	8000618 <__aeabi_dmul>
 801cf20:	a333      	add	r3, pc, #204	; (adr r3, 801cff0 <__ieee754_asin+0x308>)
 801cf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf26:	f7e3 f9bf 	bl	80002a8 <__aeabi_dsub>
 801cf2a:	4632      	mov	r2, r6
 801cf2c:	463b      	mov	r3, r7
 801cf2e:	f7e3 fb73 	bl	8000618 <__aeabi_dmul>
 801cf32:	a331      	add	r3, pc, #196	; (adr r3, 801cff8 <__ieee754_asin+0x310>)
 801cf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf38:	f7e3 f9b8 	bl	80002ac <__adddf3>
 801cf3c:	4632      	mov	r2, r6
 801cf3e:	463b      	mov	r3, r7
 801cf40:	f7e3 fb6a 	bl	8000618 <__aeabi_dmul>
 801cf44:	a32e      	add	r3, pc, #184	; (adr r3, 801d000 <__ieee754_asin+0x318>)
 801cf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf4a:	4680      	mov	r8, r0
 801cf4c:	4689      	mov	r9, r1
 801cf4e:	4630      	mov	r0, r6
 801cf50:	4639      	mov	r1, r7
 801cf52:	f7e3 fb61 	bl	8000618 <__aeabi_dmul>
 801cf56:	a32c      	add	r3, pc, #176	; (adr r3, 801d008 <__ieee754_asin+0x320>)
 801cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf5c:	f7e3 f9a4 	bl	80002a8 <__aeabi_dsub>
 801cf60:	4632      	mov	r2, r6
 801cf62:	463b      	mov	r3, r7
 801cf64:	f7e3 fb58 	bl	8000618 <__aeabi_dmul>
 801cf68:	a329      	add	r3, pc, #164	; (adr r3, 801d010 <__ieee754_asin+0x328>)
 801cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf6e:	f7e3 f99d 	bl	80002ac <__adddf3>
 801cf72:	4632      	mov	r2, r6
 801cf74:	463b      	mov	r3, r7
 801cf76:	f7e3 fb4f 	bl	8000618 <__aeabi_dmul>
 801cf7a:	a327      	add	r3, pc, #156	; (adr r3, 801d018 <__ieee754_asin+0x330>)
 801cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf80:	f7e3 f992 	bl	80002a8 <__aeabi_dsub>
 801cf84:	4632      	mov	r2, r6
 801cf86:	463b      	mov	r3, r7
 801cf88:	f7e3 fb46 	bl	8000618 <__aeabi_dmul>
 801cf8c:	2200      	movs	r2, #0
 801cf8e:	4b26      	ldr	r3, [pc, #152]	; (801d028 <__ieee754_asin+0x340>)
 801cf90:	f7e3 f98c 	bl	80002ac <__adddf3>
 801cf94:	4602      	mov	r2, r0
 801cf96:	460b      	mov	r3, r1
 801cf98:	4640      	mov	r0, r8
 801cf9a:	4649      	mov	r1, r9
 801cf9c:	f7e3 fc66 	bl	800086c <__aeabi_ddiv>
 801cfa0:	4622      	mov	r2, r4
 801cfa2:	462b      	mov	r3, r5
 801cfa4:	f7e3 fb38 	bl	8000618 <__aeabi_dmul>
 801cfa8:	4602      	mov	r2, r0
 801cfaa:	460b      	mov	r3, r1
 801cfac:	4620      	mov	r0, r4
 801cfae:	4629      	mov	r1, r5
 801cfb0:	e6c2      	b.n	801cd38 <__ieee754_asin+0x50>
 801cfb2:	bf00      	nop
 801cfb4:	f3af 8000 	nop.w
 801cfb8:	54442d18 	.word	0x54442d18
 801cfbc:	3ff921fb 	.word	0x3ff921fb
 801cfc0:	33145c07 	.word	0x33145c07
 801cfc4:	3c91a626 	.word	0x3c91a626
 801cfc8:	8800759c 	.word	0x8800759c
 801cfcc:	7e37e43c 	.word	0x7e37e43c
 801cfd0:	0dfdf709 	.word	0x0dfdf709
 801cfd4:	3f023de1 	.word	0x3f023de1
 801cfd8:	7501b288 	.word	0x7501b288
 801cfdc:	3f49efe0 	.word	0x3f49efe0
 801cfe0:	b5688f3b 	.word	0xb5688f3b
 801cfe4:	3fa48228 	.word	0x3fa48228
 801cfe8:	0e884455 	.word	0x0e884455
 801cfec:	3fc9c155 	.word	0x3fc9c155
 801cff0:	03eb6f7d 	.word	0x03eb6f7d
 801cff4:	3fd4d612 	.word	0x3fd4d612
 801cff8:	55555555 	.word	0x55555555
 801cffc:	3fc55555 	.word	0x3fc55555
 801d000:	b12e9282 	.word	0xb12e9282
 801d004:	3fb3b8c5 	.word	0x3fb3b8c5
 801d008:	1b8d0159 	.word	0x1b8d0159
 801d00c:	3fe6066c 	.word	0x3fe6066c
 801d010:	9c598ac8 	.word	0x9c598ac8
 801d014:	40002ae5 	.word	0x40002ae5
 801d018:	1c8a2d4b 	.word	0x1c8a2d4b
 801d01c:	40033a27 	.word	0x40033a27
 801d020:	3fefffff 	.word	0x3fefffff
 801d024:	3fdfffff 	.word	0x3fdfffff
 801d028:	3ff00000 	.word	0x3ff00000
 801d02c:	3fe00000 	.word	0x3fe00000
 801d030:	3fef3332 	.word	0x3fef3332
 801d034:	ee10 2a10 	vmov	r2, s0
 801d038:	ee10 0a10 	vmov	r0, s0
 801d03c:	465b      	mov	r3, fp
 801d03e:	4659      	mov	r1, fp
 801d040:	f7e3 f934 	bl	80002ac <__adddf3>
 801d044:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d048:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d04c:	4640      	mov	r0, r8
 801d04e:	4649      	mov	r1, r9
 801d050:	f7e3 fc0c 	bl	800086c <__aeabi_ddiv>
 801d054:	4602      	mov	r2, r0
 801d056:	460b      	mov	r3, r1
 801d058:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d05c:	f7e3 fadc 	bl	8000618 <__aeabi_dmul>
 801d060:	2600      	movs	r6, #0
 801d062:	4680      	mov	r8, r0
 801d064:	4689      	mov	r9, r1
 801d066:	4632      	mov	r2, r6
 801d068:	465b      	mov	r3, fp
 801d06a:	4630      	mov	r0, r6
 801d06c:	4659      	mov	r1, fp
 801d06e:	f7e3 fad3 	bl	8000618 <__aeabi_dmul>
 801d072:	4602      	mov	r2, r0
 801d074:	460b      	mov	r3, r1
 801d076:	4620      	mov	r0, r4
 801d078:	4629      	mov	r1, r5
 801d07a:	f7e3 f915 	bl	80002a8 <__aeabi_dsub>
 801d07e:	4632      	mov	r2, r6
 801d080:	4604      	mov	r4, r0
 801d082:	460d      	mov	r5, r1
 801d084:	465b      	mov	r3, fp
 801d086:	4650      	mov	r0, sl
 801d088:	4659      	mov	r1, fp
 801d08a:	f7e3 f90f 	bl	80002ac <__adddf3>
 801d08e:	4602      	mov	r2, r0
 801d090:	460b      	mov	r3, r1
 801d092:	4620      	mov	r0, r4
 801d094:	4629      	mov	r1, r5
 801d096:	f7e3 fbe9 	bl	800086c <__aeabi_ddiv>
 801d09a:	4602      	mov	r2, r0
 801d09c:	460b      	mov	r3, r1
 801d09e:	f7e3 f905 	bl	80002ac <__adddf3>
 801d0a2:	4602      	mov	r2, r0
 801d0a4:	460b      	mov	r3, r1
 801d0a6:	a114      	add	r1, pc, #80	; (adr r1, 801d0f8 <__ieee754_asin+0x410>)
 801d0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d0ac:	f7e3 f8fc 	bl	80002a8 <__aeabi_dsub>
 801d0b0:	4602      	mov	r2, r0
 801d0b2:	460b      	mov	r3, r1
 801d0b4:	4640      	mov	r0, r8
 801d0b6:	4649      	mov	r1, r9
 801d0b8:	f7e3 f8f6 	bl	80002a8 <__aeabi_dsub>
 801d0bc:	465f      	mov	r7, fp
 801d0be:	4604      	mov	r4, r0
 801d0c0:	460d      	mov	r5, r1
 801d0c2:	4632      	mov	r2, r6
 801d0c4:	465b      	mov	r3, fp
 801d0c6:	4630      	mov	r0, r6
 801d0c8:	4639      	mov	r1, r7
 801d0ca:	f7e3 f8ef 	bl	80002ac <__adddf3>
 801d0ce:	4602      	mov	r2, r0
 801d0d0:	460b      	mov	r3, r1
 801d0d2:	a10b      	add	r1, pc, #44	; (adr r1, 801d100 <__ieee754_asin+0x418>)
 801d0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d0d8:	f7e3 f8e6 	bl	80002a8 <__aeabi_dsub>
 801d0dc:	4602      	mov	r2, r0
 801d0de:	460b      	mov	r3, r1
 801d0e0:	4620      	mov	r0, r4
 801d0e2:	4629      	mov	r1, r5
 801d0e4:	f7e3 f8e0 	bl	80002a8 <__aeabi_dsub>
 801d0e8:	4602      	mov	r2, r0
 801d0ea:	460b      	mov	r3, r1
 801d0ec:	a104      	add	r1, pc, #16	; (adr r1, 801d100 <__ieee754_asin+0x418>)
 801d0ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d0f2:	e6dd      	b.n	801ceb0 <__ieee754_asin+0x1c8>
 801d0f4:	f3af 8000 	nop.w
 801d0f8:	33145c07 	.word	0x33145c07
 801d0fc:	3c91a626 	.word	0x3c91a626
 801d100:	54442d18 	.word	0x54442d18
 801d104:	3fe921fb 	.word	0x3fe921fb

0801d108 <__ieee754_atan2>:
 801d108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d10c:	ec57 6b11 	vmov	r6, r7, d1
 801d110:	4273      	negs	r3, r6
 801d112:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801d116:	4333      	orrs	r3, r6
 801d118:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801d2c0 <__ieee754_atan2+0x1b8>
 801d11c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801d120:	4573      	cmp	r3, lr
 801d122:	ec51 0b10 	vmov	r0, r1, d0
 801d126:	ee11 8a10 	vmov	r8, s2
 801d12a:	d80a      	bhi.n	801d142 <__ieee754_atan2+0x3a>
 801d12c:	4244      	negs	r4, r0
 801d12e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d132:	4304      	orrs	r4, r0
 801d134:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801d138:	4574      	cmp	r4, lr
 801d13a:	468c      	mov	ip, r1
 801d13c:	ee10 9a10 	vmov	r9, s0
 801d140:	d907      	bls.n	801d152 <__ieee754_atan2+0x4a>
 801d142:	4632      	mov	r2, r6
 801d144:	463b      	mov	r3, r7
 801d146:	f7e3 f8b1 	bl	80002ac <__adddf3>
 801d14a:	ec41 0b10 	vmov	d0, r0, r1
 801d14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d152:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801d156:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d15a:	4334      	orrs	r4, r6
 801d15c:	d103      	bne.n	801d166 <__ieee754_atan2+0x5e>
 801d15e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d162:	f001 be3d 	b.w	801ede0 <atan>
 801d166:	17bc      	asrs	r4, r7, #30
 801d168:	f004 0402 	and.w	r4, r4, #2
 801d16c:	ea53 0909 	orrs.w	r9, r3, r9
 801d170:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801d174:	d107      	bne.n	801d186 <__ieee754_atan2+0x7e>
 801d176:	2c02      	cmp	r4, #2
 801d178:	d073      	beq.n	801d262 <__ieee754_atan2+0x15a>
 801d17a:	2c03      	cmp	r4, #3
 801d17c:	d1e5      	bne.n	801d14a <__ieee754_atan2+0x42>
 801d17e:	a13e      	add	r1, pc, #248	; (adr r1, 801d278 <__ieee754_atan2+0x170>)
 801d180:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d184:	e7e1      	b.n	801d14a <__ieee754_atan2+0x42>
 801d186:	ea52 0808 	orrs.w	r8, r2, r8
 801d18a:	d106      	bne.n	801d19a <__ieee754_atan2+0x92>
 801d18c:	f1bc 0f00 	cmp.w	ip, #0
 801d190:	da6b      	bge.n	801d26a <__ieee754_atan2+0x162>
 801d192:	a13b      	add	r1, pc, #236	; (adr r1, 801d280 <__ieee754_atan2+0x178>)
 801d194:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d198:	e7d7      	b.n	801d14a <__ieee754_atan2+0x42>
 801d19a:	4572      	cmp	r2, lr
 801d19c:	d120      	bne.n	801d1e0 <__ieee754_atan2+0xd8>
 801d19e:	4293      	cmp	r3, r2
 801d1a0:	d111      	bne.n	801d1c6 <__ieee754_atan2+0xbe>
 801d1a2:	2c02      	cmp	r4, #2
 801d1a4:	d007      	beq.n	801d1b6 <__ieee754_atan2+0xae>
 801d1a6:	2c03      	cmp	r4, #3
 801d1a8:	d009      	beq.n	801d1be <__ieee754_atan2+0xb6>
 801d1aa:	2c01      	cmp	r4, #1
 801d1ac:	d155      	bne.n	801d25a <__ieee754_atan2+0x152>
 801d1ae:	a136      	add	r1, pc, #216	; (adr r1, 801d288 <__ieee754_atan2+0x180>)
 801d1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d1b4:	e7c9      	b.n	801d14a <__ieee754_atan2+0x42>
 801d1b6:	a136      	add	r1, pc, #216	; (adr r1, 801d290 <__ieee754_atan2+0x188>)
 801d1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d1bc:	e7c5      	b.n	801d14a <__ieee754_atan2+0x42>
 801d1be:	a136      	add	r1, pc, #216	; (adr r1, 801d298 <__ieee754_atan2+0x190>)
 801d1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d1c4:	e7c1      	b.n	801d14a <__ieee754_atan2+0x42>
 801d1c6:	2c02      	cmp	r4, #2
 801d1c8:	d04b      	beq.n	801d262 <__ieee754_atan2+0x15a>
 801d1ca:	2c03      	cmp	r4, #3
 801d1cc:	d0d7      	beq.n	801d17e <__ieee754_atan2+0x76>
 801d1ce:	2c01      	cmp	r4, #1
 801d1d0:	f04f 0000 	mov.w	r0, #0
 801d1d4:	d102      	bne.n	801d1dc <__ieee754_atan2+0xd4>
 801d1d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801d1da:	e7b6      	b.n	801d14a <__ieee754_atan2+0x42>
 801d1dc:	2100      	movs	r1, #0
 801d1de:	e7b4      	b.n	801d14a <__ieee754_atan2+0x42>
 801d1e0:	4573      	cmp	r3, lr
 801d1e2:	d0d3      	beq.n	801d18c <__ieee754_atan2+0x84>
 801d1e4:	1a9b      	subs	r3, r3, r2
 801d1e6:	151b      	asrs	r3, r3, #20
 801d1e8:	2b3c      	cmp	r3, #60	; 0x3c
 801d1ea:	dc1e      	bgt.n	801d22a <__ieee754_atan2+0x122>
 801d1ec:	2f00      	cmp	r7, #0
 801d1ee:	da01      	bge.n	801d1f4 <__ieee754_atan2+0xec>
 801d1f0:	333c      	adds	r3, #60	; 0x3c
 801d1f2:	db1e      	blt.n	801d232 <__ieee754_atan2+0x12a>
 801d1f4:	4632      	mov	r2, r6
 801d1f6:	463b      	mov	r3, r7
 801d1f8:	f7e3 fb38 	bl	800086c <__aeabi_ddiv>
 801d1fc:	ec41 0b10 	vmov	d0, r0, r1
 801d200:	f001 ff8e 	bl	801f120 <fabs>
 801d204:	f001 fdec 	bl	801ede0 <atan>
 801d208:	ec51 0b10 	vmov	r0, r1, d0
 801d20c:	2c01      	cmp	r4, #1
 801d20e:	d013      	beq.n	801d238 <__ieee754_atan2+0x130>
 801d210:	2c02      	cmp	r4, #2
 801d212:	d015      	beq.n	801d240 <__ieee754_atan2+0x138>
 801d214:	2c00      	cmp	r4, #0
 801d216:	d098      	beq.n	801d14a <__ieee754_atan2+0x42>
 801d218:	a321      	add	r3, pc, #132	; (adr r3, 801d2a0 <__ieee754_atan2+0x198>)
 801d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d21e:	f7e3 f843 	bl	80002a8 <__aeabi_dsub>
 801d222:	a321      	add	r3, pc, #132	; (adr r3, 801d2a8 <__ieee754_atan2+0x1a0>)
 801d224:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d228:	e014      	b.n	801d254 <__ieee754_atan2+0x14c>
 801d22a:	a121      	add	r1, pc, #132	; (adr r1, 801d2b0 <__ieee754_atan2+0x1a8>)
 801d22c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d230:	e7ec      	b.n	801d20c <__ieee754_atan2+0x104>
 801d232:	2000      	movs	r0, #0
 801d234:	2100      	movs	r1, #0
 801d236:	e7e9      	b.n	801d20c <__ieee754_atan2+0x104>
 801d238:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d23c:	4619      	mov	r1, r3
 801d23e:	e784      	b.n	801d14a <__ieee754_atan2+0x42>
 801d240:	a317      	add	r3, pc, #92	; (adr r3, 801d2a0 <__ieee754_atan2+0x198>)
 801d242:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d246:	f7e3 f82f 	bl	80002a8 <__aeabi_dsub>
 801d24a:	4602      	mov	r2, r0
 801d24c:	460b      	mov	r3, r1
 801d24e:	a116      	add	r1, pc, #88	; (adr r1, 801d2a8 <__ieee754_atan2+0x1a0>)
 801d250:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d254:	f7e3 f828 	bl	80002a8 <__aeabi_dsub>
 801d258:	e777      	b.n	801d14a <__ieee754_atan2+0x42>
 801d25a:	a117      	add	r1, pc, #92	; (adr r1, 801d2b8 <__ieee754_atan2+0x1b0>)
 801d25c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d260:	e773      	b.n	801d14a <__ieee754_atan2+0x42>
 801d262:	a111      	add	r1, pc, #68	; (adr r1, 801d2a8 <__ieee754_atan2+0x1a0>)
 801d264:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d268:	e76f      	b.n	801d14a <__ieee754_atan2+0x42>
 801d26a:	a111      	add	r1, pc, #68	; (adr r1, 801d2b0 <__ieee754_atan2+0x1a8>)
 801d26c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d270:	e76b      	b.n	801d14a <__ieee754_atan2+0x42>
 801d272:	bf00      	nop
 801d274:	f3af 8000 	nop.w
 801d278:	54442d18 	.word	0x54442d18
 801d27c:	c00921fb 	.word	0xc00921fb
 801d280:	54442d18 	.word	0x54442d18
 801d284:	bff921fb 	.word	0xbff921fb
 801d288:	54442d18 	.word	0x54442d18
 801d28c:	bfe921fb 	.word	0xbfe921fb
 801d290:	7f3321d2 	.word	0x7f3321d2
 801d294:	4002d97c 	.word	0x4002d97c
 801d298:	7f3321d2 	.word	0x7f3321d2
 801d29c:	c002d97c 	.word	0xc002d97c
 801d2a0:	33145c07 	.word	0x33145c07
 801d2a4:	3ca1a626 	.word	0x3ca1a626
 801d2a8:	54442d18 	.word	0x54442d18
 801d2ac:	400921fb 	.word	0x400921fb
 801d2b0:	54442d18 	.word	0x54442d18
 801d2b4:	3ff921fb 	.word	0x3ff921fb
 801d2b8:	54442d18 	.word	0x54442d18
 801d2bc:	3fe921fb 	.word	0x3fe921fb
 801d2c0:	7ff00000 	.word	0x7ff00000

0801d2c4 <__ieee754_fmod>:
 801d2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d2c8:	ec53 2b11 	vmov	r2, r3, d1
 801d2cc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 801d2d0:	ea5e 0402 	orrs.w	r4, lr, r2
 801d2d4:	ec51 0b10 	vmov	r0, r1, d0
 801d2d8:	461e      	mov	r6, r3
 801d2da:	ee11 5a10 	vmov	r5, s2
 801d2de:	4694      	mov	ip, r2
 801d2e0:	d00c      	beq.n	801d2fc <__ieee754_fmod+0x38>
 801d2e2:	4c7a      	ldr	r4, [pc, #488]	; (801d4cc <__ieee754_fmod+0x208>)
 801d2e4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801d2e8:	45a0      	cmp	r8, r4
 801d2ea:	4689      	mov	r9, r1
 801d2ec:	dc06      	bgt.n	801d2fc <__ieee754_fmod+0x38>
 801d2ee:	4254      	negs	r4, r2
 801d2f0:	4314      	orrs	r4, r2
 801d2f2:	4f77      	ldr	r7, [pc, #476]	; (801d4d0 <__ieee754_fmod+0x20c>)
 801d2f4:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 801d2f8:	42bc      	cmp	r4, r7
 801d2fa:	d909      	bls.n	801d310 <__ieee754_fmod+0x4c>
 801d2fc:	f7e3 f98c 	bl	8000618 <__aeabi_dmul>
 801d300:	4602      	mov	r2, r0
 801d302:	460b      	mov	r3, r1
 801d304:	f7e3 fab2 	bl	800086c <__aeabi_ddiv>
 801d308:	ec41 0b10 	vmov	d0, r0, r1
 801d30c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d310:	45f0      	cmp	r8, lr
 801d312:	ee10 2a10 	vmov	r2, s0
 801d316:	4607      	mov	r7, r0
 801d318:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 801d31c:	dc0a      	bgt.n	801d334 <__ieee754_fmod+0x70>
 801d31e:	dbf3      	blt.n	801d308 <__ieee754_fmod+0x44>
 801d320:	42a8      	cmp	r0, r5
 801d322:	d3f1      	bcc.n	801d308 <__ieee754_fmod+0x44>
 801d324:	d106      	bne.n	801d334 <__ieee754_fmod+0x70>
 801d326:	496b      	ldr	r1, [pc, #428]	; (801d4d4 <__ieee754_fmod+0x210>)
 801d328:	0fe4      	lsrs	r4, r4, #31
 801d32a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801d32e:	e9d4 0100 	ldrd	r0, r1, [r4]
 801d332:	e7e9      	b.n	801d308 <__ieee754_fmod+0x44>
 801d334:	4b68      	ldr	r3, [pc, #416]	; (801d4d8 <__ieee754_fmod+0x214>)
 801d336:	4598      	cmp	r8, r3
 801d338:	dc49      	bgt.n	801d3ce <__ieee754_fmod+0x10a>
 801d33a:	f1b8 0f00 	cmp.w	r8, #0
 801d33e:	d13d      	bne.n	801d3bc <__ieee754_fmod+0xf8>
 801d340:	4866      	ldr	r0, [pc, #408]	; (801d4dc <__ieee754_fmod+0x218>)
 801d342:	4611      	mov	r1, r2
 801d344:	2900      	cmp	r1, #0
 801d346:	dc36      	bgt.n	801d3b6 <__ieee754_fmod+0xf2>
 801d348:	459e      	cmp	lr, r3
 801d34a:	dc51      	bgt.n	801d3f0 <__ieee754_fmod+0x12c>
 801d34c:	f1be 0f00 	cmp.w	lr, #0
 801d350:	d145      	bne.n	801d3de <__ieee754_fmod+0x11a>
 801d352:	4b62      	ldr	r3, [pc, #392]	; (801d4dc <__ieee754_fmod+0x218>)
 801d354:	4629      	mov	r1, r5
 801d356:	2900      	cmp	r1, #0
 801d358:	dc3e      	bgt.n	801d3d8 <__ieee754_fmod+0x114>
 801d35a:	4961      	ldr	r1, [pc, #388]	; (801d4e0 <__ieee754_fmod+0x21c>)
 801d35c:	4288      	cmp	r0, r1
 801d35e:	db4c      	blt.n	801d3fa <__ieee754_fmod+0x136>
 801d360:	f3c9 0113 	ubfx	r1, r9, #0, #20
 801d364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801d368:	4a5d      	ldr	r2, [pc, #372]	; (801d4e0 <__ieee754_fmod+0x21c>)
 801d36a:	4293      	cmp	r3, r2
 801d36c:	db59      	blt.n	801d422 <__ieee754_fmod+0x15e>
 801d36e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801d372:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801d376:	1ac0      	subs	r0, r0, r3
 801d378:	1b8a      	subs	r2, r1, r6
 801d37a:	eba7 050c 	sub.w	r5, r7, ip
 801d37e:	2800      	cmp	r0, #0
 801d380:	d166      	bne.n	801d450 <__ieee754_fmod+0x18c>
 801d382:	4567      	cmp	r7, ip
 801d384:	bf38      	it	cc
 801d386:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801d38a:	2a00      	cmp	r2, #0
 801d38c:	bfbc      	itt	lt
 801d38e:	463d      	movlt	r5, r7
 801d390:	460a      	movlt	r2, r1
 801d392:	ea52 0105 	orrs.w	r1, r2, r5
 801d396:	d0c6      	beq.n	801d326 <__ieee754_fmod+0x62>
 801d398:	494f      	ldr	r1, [pc, #316]	; (801d4d8 <__ieee754_fmod+0x214>)
 801d39a:	428a      	cmp	r2, r1
 801d39c:	dd6d      	ble.n	801d47a <__ieee754_fmod+0x1b6>
 801d39e:	4950      	ldr	r1, [pc, #320]	; (801d4e0 <__ieee754_fmod+0x21c>)
 801d3a0:	428b      	cmp	r3, r1
 801d3a2:	db70      	blt.n	801d486 <__ieee754_fmod+0x1c2>
 801d3a4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 801d3a8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 801d3ac:	4314      	orrs	r4, r2
 801d3ae:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 801d3b2:	4628      	mov	r0, r5
 801d3b4:	e7a8      	b.n	801d308 <__ieee754_fmod+0x44>
 801d3b6:	3801      	subs	r0, #1
 801d3b8:	0049      	lsls	r1, r1, #1
 801d3ba:	e7c3      	b.n	801d344 <__ieee754_fmod+0x80>
 801d3bc:	4848      	ldr	r0, [pc, #288]	; (801d4e0 <__ieee754_fmod+0x21c>)
 801d3be:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 801d3c2:	0049      	lsls	r1, r1, #1
 801d3c4:	2900      	cmp	r1, #0
 801d3c6:	f100 30ff 	add.w	r0, r0, #4294967295
 801d3ca:	dcfa      	bgt.n	801d3c2 <__ieee754_fmod+0xfe>
 801d3cc:	e7bc      	b.n	801d348 <__ieee754_fmod+0x84>
 801d3ce:	ea4f 5028 	mov.w	r0, r8, asr #20
 801d3d2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801d3d6:	e7b7      	b.n	801d348 <__ieee754_fmod+0x84>
 801d3d8:	3b01      	subs	r3, #1
 801d3da:	0049      	lsls	r1, r1, #1
 801d3dc:	e7bb      	b.n	801d356 <__ieee754_fmod+0x92>
 801d3de:	4b40      	ldr	r3, [pc, #256]	; (801d4e0 <__ieee754_fmod+0x21c>)
 801d3e0:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 801d3e4:	0049      	lsls	r1, r1, #1
 801d3e6:	2900      	cmp	r1, #0
 801d3e8:	f103 33ff 	add.w	r3, r3, #4294967295
 801d3ec:	dcfa      	bgt.n	801d3e4 <__ieee754_fmod+0x120>
 801d3ee:	e7b4      	b.n	801d35a <__ieee754_fmod+0x96>
 801d3f0:	ea4f 532e 	mov.w	r3, lr, asr #20
 801d3f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d3f8:	e7af      	b.n	801d35a <__ieee754_fmod+0x96>
 801d3fa:	1a0f      	subs	r7, r1, r0
 801d3fc:	2f1f      	cmp	r7, #31
 801d3fe:	dc0a      	bgt.n	801d416 <__ieee754_fmod+0x152>
 801d400:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 801d404:	fa08 f807 	lsl.w	r8, r8, r7
 801d408:	fa22 f101 	lsr.w	r1, r2, r1
 801d40c:	ea41 0108 	orr.w	r1, r1, r8
 801d410:	fa02 f707 	lsl.w	r7, r2, r7
 801d414:	e7a8      	b.n	801d368 <__ieee754_fmod+0xa4>
 801d416:	4933      	ldr	r1, [pc, #204]	; (801d4e4 <__ieee754_fmod+0x220>)
 801d418:	1a09      	subs	r1, r1, r0
 801d41a:	fa02 f101 	lsl.w	r1, r2, r1
 801d41e:	2700      	movs	r7, #0
 801d420:	e7a2      	b.n	801d368 <__ieee754_fmod+0xa4>
 801d422:	eba2 0c03 	sub.w	ip, r2, r3
 801d426:	f1bc 0f1f 	cmp.w	ip, #31
 801d42a:	dc0a      	bgt.n	801d442 <__ieee754_fmod+0x17e>
 801d42c:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 801d430:	fa0e fe0c 	lsl.w	lr, lr, ip
 801d434:	fa25 f606 	lsr.w	r6, r5, r6
 801d438:	ea46 060e 	orr.w	r6, r6, lr
 801d43c:	fa05 fc0c 	lsl.w	ip, r5, ip
 801d440:	e799      	b.n	801d376 <__ieee754_fmod+0xb2>
 801d442:	4e28      	ldr	r6, [pc, #160]	; (801d4e4 <__ieee754_fmod+0x220>)
 801d444:	1af6      	subs	r6, r6, r3
 801d446:	fa05 f606 	lsl.w	r6, r5, r6
 801d44a:	f04f 0c00 	mov.w	ip, #0
 801d44e:	e792      	b.n	801d376 <__ieee754_fmod+0xb2>
 801d450:	4567      	cmp	r7, ip
 801d452:	bf38      	it	cc
 801d454:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801d458:	2a00      	cmp	r2, #0
 801d45a:	da05      	bge.n	801d468 <__ieee754_fmod+0x1a4>
 801d45c:	0ffa      	lsrs	r2, r7, #31
 801d45e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d462:	007f      	lsls	r7, r7, #1
 801d464:	3801      	subs	r0, #1
 801d466:	e787      	b.n	801d378 <__ieee754_fmod+0xb4>
 801d468:	ea52 0105 	orrs.w	r1, r2, r5
 801d46c:	f43f af5b 	beq.w	801d326 <__ieee754_fmod+0x62>
 801d470:	0fe9      	lsrs	r1, r5, #31
 801d472:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801d476:	006f      	lsls	r7, r5, #1
 801d478:	e7f4      	b.n	801d464 <__ieee754_fmod+0x1a0>
 801d47a:	0fe8      	lsrs	r0, r5, #31
 801d47c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d480:	006d      	lsls	r5, r5, #1
 801d482:	3b01      	subs	r3, #1
 801d484:	e789      	b.n	801d39a <__ieee754_fmod+0xd6>
 801d486:	1ac9      	subs	r1, r1, r3
 801d488:	2914      	cmp	r1, #20
 801d48a:	dc0a      	bgt.n	801d4a2 <__ieee754_fmod+0x1de>
 801d48c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801d490:	fa02 f303 	lsl.w	r3, r2, r3
 801d494:	40cd      	lsrs	r5, r1
 801d496:	432b      	orrs	r3, r5
 801d498:	410a      	asrs	r2, r1
 801d49a:	ea42 0104 	orr.w	r1, r2, r4
 801d49e:	4618      	mov	r0, r3
 801d4a0:	e732      	b.n	801d308 <__ieee754_fmod+0x44>
 801d4a2:	291f      	cmp	r1, #31
 801d4a4:	dc07      	bgt.n	801d4b6 <__ieee754_fmod+0x1f2>
 801d4a6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801d4aa:	40cd      	lsrs	r5, r1
 801d4ac:	fa02 f303 	lsl.w	r3, r2, r3
 801d4b0:	432b      	orrs	r3, r5
 801d4b2:	4622      	mov	r2, r4
 801d4b4:	e7f1      	b.n	801d49a <__ieee754_fmod+0x1d6>
 801d4b6:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801d4ba:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801d4be:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801d4c2:	33e2      	adds	r3, #226	; 0xe2
 801d4c4:	fa42 f303 	asr.w	r3, r2, r3
 801d4c8:	e7f3      	b.n	801d4b2 <__ieee754_fmod+0x1ee>
 801d4ca:	bf00      	nop
 801d4cc:	7fefffff 	.word	0x7fefffff
 801d4d0:	7ff00000 	.word	0x7ff00000
 801d4d4:	080206e0 	.word	0x080206e0
 801d4d8:	000fffff 	.word	0x000fffff
 801d4dc:	fffffbed 	.word	0xfffffbed
 801d4e0:	fffffc02 	.word	0xfffffc02
 801d4e4:	fffffbe2 	.word	0xfffffbe2

0801d4e8 <__ieee754_pow>:
 801d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4ec:	b091      	sub	sp, #68	; 0x44
 801d4ee:	ed8d 1b00 	vstr	d1, [sp]
 801d4f2:	e9dd 2900 	ldrd	r2, r9, [sp]
 801d4f6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801d4fa:	ea58 0302 	orrs.w	r3, r8, r2
 801d4fe:	ec57 6b10 	vmov	r6, r7, d0
 801d502:	f000 84be 	beq.w	801de82 <__ieee754_pow+0x99a>
 801d506:	4b7a      	ldr	r3, [pc, #488]	; (801d6f0 <__ieee754_pow+0x208>)
 801d508:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801d50c:	429c      	cmp	r4, r3
 801d50e:	463d      	mov	r5, r7
 801d510:	ee10 aa10 	vmov	sl, s0
 801d514:	dc09      	bgt.n	801d52a <__ieee754_pow+0x42>
 801d516:	d103      	bne.n	801d520 <__ieee754_pow+0x38>
 801d518:	b93e      	cbnz	r6, 801d52a <__ieee754_pow+0x42>
 801d51a:	45a0      	cmp	r8, r4
 801d51c:	dc0d      	bgt.n	801d53a <__ieee754_pow+0x52>
 801d51e:	e001      	b.n	801d524 <__ieee754_pow+0x3c>
 801d520:	4598      	cmp	r8, r3
 801d522:	dc02      	bgt.n	801d52a <__ieee754_pow+0x42>
 801d524:	4598      	cmp	r8, r3
 801d526:	d10e      	bne.n	801d546 <__ieee754_pow+0x5e>
 801d528:	b16a      	cbz	r2, 801d546 <__ieee754_pow+0x5e>
 801d52a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801d52e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d532:	ea54 030a 	orrs.w	r3, r4, sl
 801d536:	f000 84a4 	beq.w	801de82 <__ieee754_pow+0x99a>
 801d53a:	486e      	ldr	r0, [pc, #440]	; (801d6f4 <__ieee754_pow+0x20c>)
 801d53c:	b011      	add	sp, #68	; 0x44
 801d53e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d542:	f001 be89 	b.w	801f258 <nan>
 801d546:	2d00      	cmp	r5, #0
 801d548:	da53      	bge.n	801d5f2 <__ieee754_pow+0x10a>
 801d54a:	4b6b      	ldr	r3, [pc, #428]	; (801d6f8 <__ieee754_pow+0x210>)
 801d54c:	4598      	cmp	r8, r3
 801d54e:	dc4d      	bgt.n	801d5ec <__ieee754_pow+0x104>
 801d550:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801d554:	4598      	cmp	r8, r3
 801d556:	dd4c      	ble.n	801d5f2 <__ieee754_pow+0x10a>
 801d558:	ea4f 5328 	mov.w	r3, r8, asr #20
 801d55c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d560:	2b14      	cmp	r3, #20
 801d562:	dd26      	ble.n	801d5b2 <__ieee754_pow+0xca>
 801d564:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801d568:	fa22 f103 	lsr.w	r1, r2, r3
 801d56c:	fa01 f303 	lsl.w	r3, r1, r3
 801d570:	4293      	cmp	r3, r2
 801d572:	d13e      	bne.n	801d5f2 <__ieee754_pow+0x10a>
 801d574:	f001 0101 	and.w	r1, r1, #1
 801d578:	f1c1 0b02 	rsb	fp, r1, #2
 801d57c:	2a00      	cmp	r2, #0
 801d57e:	d15b      	bne.n	801d638 <__ieee754_pow+0x150>
 801d580:	4b5b      	ldr	r3, [pc, #364]	; (801d6f0 <__ieee754_pow+0x208>)
 801d582:	4598      	cmp	r8, r3
 801d584:	d124      	bne.n	801d5d0 <__ieee754_pow+0xe8>
 801d586:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801d58a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801d58e:	ea53 030a 	orrs.w	r3, r3, sl
 801d592:	f000 8476 	beq.w	801de82 <__ieee754_pow+0x99a>
 801d596:	4b59      	ldr	r3, [pc, #356]	; (801d6fc <__ieee754_pow+0x214>)
 801d598:	429c      	cmp	r4, r3
 801d59a:	dd2d      	ble.n	801d5f8 <__ieee754_pow+0x110>
 801d59c:	f1b9 0f00 	cmp.w	r9, #0
 801d5a0:	f280 8473 	bge.w	801de8a <__ieee754_pow+0x9a2>
 801d5a4:	2000      	movs	r0, #0
 801d5a6:	2100      	movs	r1, #0
 801d5a8:	ec41 0b10 	vmov	d0, r0, r1
 801d5ac:	b011      	add	sp, #68	; 0x44
 801d5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5b2:	2a00      	cmp	r2, #0
 801d5b4:	d13e      	bne.n	801d634 <__ieee754_pow+0x14c>
 801d5b6:	f1c3 0314 	rsb	r3, r3, #20
 801d5ba:	fa48 f103 	asr.w	r1, r8, r3
 801d5be:	fa01 f303 	lsl.w	r3, r1, r3
 801d5c2:	4543      	cmp	r3, r8
 801d5c4:	f040 8469 	bne.w	801de9a <__ieee754_pow+0x9b2>
 801d5c8:	f001 0101 	and.w	r1, r1, #1
 801d5cc:	f1c1 0b02 	rsb	fp, r1, #2
 801d5d0:	4b4b      	ldr	r3, [pc, #300]	; (801d700 <__ieee754_pow+0x218>)
 801d5d2:	4598      	cmp	r8, r3
 801d5d4:	d118      	bne.n	801d608 <__ieee754_pow+0x120>
 801d5d6:	f1b9 0f00 	cmp.w	r9, #0
 801d5da:	f280 845a 	bge.w	801de92 <__ieee754_pow+0x9aa>
 801d5de:	4948      	ldr	r1, [pc, #288]	; (801d700 <__ieee754_pow+0x218>)
 801d5e0:	4632      	mov	r2, r6
 801d5e2:	463b      	mov	r3, r7
 801d5e4:	2000      	movs	r0, #0
 801d5e6:	f7e3 f941 	bl	800086c <__aeabi_ddiv>
 801d5ea:	e7dd      	b.n	801d5a8 <__ieee754_pow+0xc0>
 801d5ec:	f04f 0b02 	mov.w	fp, #2
 801d5f0:	e7c4      	b.n	801d57c <__ieee754_pow+0x94>
 801d5f2:	f04f 0b00 	mov.w	fp, #0
 801d5f6:	e7c1      	b.n	801d57c <__ieee754_pow+0x94>
 801d5f8:	f1b9 0f00 	cmp.w	r9, #0
 801d5fc:	dad2      	bge.n	801d5a4 <__ieee754_pow+0xbc>
 801d5fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 801d602:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801d606:	e7cf      	b.n	801d5a8 <__ieee754_pow+0xc0>
 801d608:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801d60c:	d106      	bne.n	801d61c <__ieee754_pow+0x134>
 801d60e:	4632      	mov	r2, r6
 801d610:	463b      	mov	r3, r7
 801d612:	4610      	mov	r0, r2
 801d614:	4619      	mov	r1, r3
 801d616:	f7e2 ffff 	bl	8000618 <__aeabi_dmul>
 801d61a:	e7c5      	b.n	801d5a8 <__ieee754_pow+0xc0>
 801d61c:	4b39      	ldr	r3, [pc, #228]	; (801d704 <__ieee754_pow+0x21c>)
 801d61e:	4599      	cmp	r9, r3
 801d620:	d10a      	bne.n	801d638 <__ieee754_pow+0x150>
 801d622:	2d00      	cmp	r5, #0
 801d624:	db08      	blt.n	801d638 <__ieee754_pow+0x150>
 801d626:	ec47 6b10 	vmov	d0, r6, r7
 801d62a:	b011      	add	sp, #68	; 0x44
 801d62c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d630:	f000 be5c 	b.w	801e2ec <__ieee754_sqrt>
 801d634:	f04f 0b00 	mov.w	fp, #0
 801d638:	ec47 6b10 	vmov	d0, r6, r7
 801d63c:	f001 fd70 	bl	801f120 <fabs>
 801d640:	ec51 0b10 	vmov	r0, r1, d0
 801d644:	f1ba 0f00 	cmp.w	sl, #0
 801d648:	d127      	bne.n	801d69a <__ieee754_pow+0x1b2>
 801d64a:	b124      	cbz	r4, 801d656 <__ieee754_pow+0x16e>
 801d64c:	4b2c      	ldr	r3, [pc, #176]	; (801d700 <__ieee754_pow+0x218>)
 801d64e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801d652:	429a      	cmp	r2, r3
 801d654:	d121      	bne.n	801d69a <__ieee754_pow+0x1b2>
 801d656:	f1b9 0f00 	cmp.w	r9, #0
 801d65a:	da05      	bge.n	801d668 <__ieee754_pow+0x180>
 801d65c:	4602      	mov	r2, r0
 801d65e:	460b      	mov	r3, r1
 801d660:	2000      	movs	r0, #0
 801d662:	4927      	ldr	r1, [pc, #156]	; (801d700 <__ieee754_pow+0x218>)
 801d664:	f7e3 f902 	bl	800086c <__aeabi_ddiv>
 801d668:	2d00      	cmp	r5, #0
 801d66a:	da9d      	bge.n	801d5a8 <__ieee754_pow+0xc0>
 801d66c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801d670:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d674:	ea54 030b 	orrs.w	r3, r4, fp
 801d678:	d108      	bne.n	801d68c <__ieee754_pow+0x1a4>
 801d67a:	4602      	mov	r2, r0
 801d67c:	460b      	mov	r3, r1
 801d67e:	4610      	mov	r0, r2
 801d680:	4619      	mov	r1, r3
 801d682:	f7e2 fe11 	bl	80002a8 <__aeabi_dsub>
 801d686:	4602      	mov	r2, r0
 801d688:	460b      	mov	r3, r1
 801d68a:	e7ac      	b.n	801d5e6 <__ieee754_pow+0xfe>
 801d68c:	f1bb 0f01 	cmp.w	fp, #1
 801d690:	d18a      	bne.n	801d5a8 <__ieee754_pow+0xc0>
 801d692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d696:	4619      	mov	r1, r3
 801d698:	e786      	b.n	801d5a8 <__ieee754_pow+0xc0>
 801d69a:	0fed      	lsrs	r5, r5, #31
 801d69c:	1e6b      	subs	r3, r5, #1
 801d69e:	930d      	str	r3, [sp, #52]	; 0x34
 801d6a0:	ea5b 0303 	orrs.w	r3, fp, r3
 801d6a4:	d102      	bne.n	801d6ac <__ieee754_pow+0x1c4>
 801d6a6:	4632      	mov	r2, r6
 801d6a8:	463b      	mov	r3, r7
 801d6aa:	e7e8      	b.n	801d67e <__ieee754_pow+0x196>
 801d6ac:	4b16      	ldr	r3, [pc, #88]	; (801d708 <__ieee754_pow+0x220>)
 801d6ae:	4598      	cmp	r8, r3
 801d6b0:	f340 80fe 	ble.w	801d8b0 <__ieee754_pow+0x3c8>
 801d6b4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801d6b8:	4598      	cmp	r8, r3
 801d6ba:	dd0a      	ble.n	801d6d2 <__ieee754_pow+0x1ea>
 801d6bc:	4b0f      	ldr	r3, [pc, #60]	; (801d6fc <__ieee754_pow+0x214>)
 801d6be:	429c      	cmp	r4, r3
 801d6c0:	dc0d      	bgt.n	801d6de <__ieee754_pow+0x1f6>
 801d6c2:	f1b9 0f00 	cmp.w	r9, #0
 801d6c6:	f6bf af6d 	bge.w	801d5a4 <__ieee754_pow+0xbc>
 801d6ca:	a307      	add	r3, pc, #28	; (adr r3, 801d6e8 <__ieee754_pow+0x200>)
 801d6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6d0:	e79f      	b.n	801d612 <__ieee754_pow+0x12a>
 801d6d2:	4b0e      	ldr	r3, [pc, #56]	; (801d70c <__ieee754_pow+0x224>)
 801d6d4:	429c      	cmp	r4, r3
 801d6d6:	ddf4      	ble.n	801d6c2 <__ieee754_pow+0x1da>
 801d6d8:	4b09      	ldr	r3, [pc, #36]	; (801d700 <__ieee754_pow+0x218>)
 801d6da:	429c      	cmp	r4, r3
 801d6dc:	dd18      	ble.n	801d710 <__ieee754_pow+0x228>
 801d6de:	f1b9 0f00 	cmp.w	r9, #0
 801d6e2:	dcf2      	bgt.n	801d6ca <__ieee754_pow+0x1e2>
 801d6e4:	e75e      	b.n	801d5a4 <__ieee754_pow+0xbc>
 801d6e6:	bf00      	nop
 801d6e8:	8800759c 	.word	0x8800759c
 801d6ec:	7e37e43c 	.word	0x7e37e43c
 801d6f0:	7ff00000 	.word	0x7ff00000
 801d6f4:	080205b9 	.word	0x080205b9
 801d6f8:	433fffff 	.word	0x433fffff
 801d6fc:	3fefffff 	.word	0x3fefffff
 801d700:	3ff00000 	.word	0x3ff00000
 801d704:	3fe00000 	.word	0x3fe00000
 801d708:	41e00000 	.word	0x41e00000
 801d70c:	3feffffe 	.word	0x3feffffe
 801d710:	2200      	movs	r2, #0
 801d712:	4b63      	ldr	r3, [pc, #396]	; (801d8a0 <__ieee754_pow+0x3b8>)
 801d714:	f7e2 fdc8 	bl	80002a8 <__aeabi_dsub>
 801d718:	a355      	add	r3, pc, #340	; (adr r3, 801d870 <__ieee754_pow+0x388>)
 801d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d71e:	4604      	mov	r4, r0
 801d720:	460d      	mov	r5, r1
 801d722:	f7e2 ff79 	bl	8000618 <__aeabi_dmul>
 801d726:	a354      	add	r3, pc, #336	; (adr r3, 801d878 <__ieee754_pow+0x390>)
 801d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d72c:	4606      	mov	r6, r0
 801d72e:	460f      	mov	r7, r1
 801d730:	4620      	mov	r0, r4
 801d732:	4629      	mov	r1, r5
 801d734:	f7e2 ff70 	bl	8000618 <__aeabi_dmul>
 801d738:	2200      	movs	r2, #0
 801d73a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d73e:	4b59      	ldr	r3, [pc, #356]	; (801d8a4 <__ieee754_pow+0x3bc>)
 801d740:	4620      	mov	r0, r4
 801d742:	4629      	mov	r1, r5
 801d744:	f7e2 ff68 	bl	8000618 <__aeabi_dmul>
 801d748:	4602      	mov	r2, r0
 801d74a:	460b      	mov	r3, r1
 801d74c:	a14c      	add	r1, pc, #304	; (adr r1, 801d880 <__ieee754_pow+0x398>)
 801d74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d752:	f7e2 fda9 	bl	80002a8 <__aeabi_dsub>
 801d756:	4622      	mov	r2, r4
 801d758:	462b      	mov	r3, r5
 801d75a:	f7e2 ff5d 	bl	8000618 <__aeabi_dmul>
 801d75e:	4602      	mov	r2, r0
 801d760:	460b      	mov	r3, r1
 801d762:	2000      	movs	r0, #0
 801d764:	4950      	ldr	r1, [pc, #320]	; (801d8a8 <__ieee754_pow+0x3c0>)
 801d766:	f7e2 fd9f 	bl	80002a8 <__aeabi_dsub>
 801d76a:	4622      	mov	r2, r4
 801d76c:	462b      	mov	r3, r5
 801d76e:	4680      	mov	r8, r0
 801d770:	4689      	mov	r9, r1
 801d772:	4620      	mov	r0, r4
 801d774:	4629      	mov	r1, r5
 801d776:	f7e2 ff4f 	bl	8000618 <__aeabi_dmul>
 801d77a:	4602      	mov	r2, r0
 801d77c:	460b      	mov	r3, r1
 801d77e:	4640      	mov	r0, r8
 801d780:	4649      	mov	r1, r9
 801d782:	f7e2 ff49 	bl	8000618 <__aeabi_dmul>
 801d786:	a340      	add	r3, pc, #256	; (adr r3, 801d888 <__ieee754_pow+0x3a0>)
 801d788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d78c:	f7e2 ff44 	bl	8000618 <__aeabi_dmul>
 801d790:	4602      	mov	r2, r0
 801d792:	460b      	mov	r3, r1
 801d794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d798:	f7e2 fd86 	bl	80002a8 <__aeabi_dsub>
 801d79c:	4602      	mov	r2, r0
 801d79e:	460b      	mov	r3, r1
 801d7a0:	4604      	mov	r4, r0
 801d7a2:	460d      	mov	r5, r1
 801d7a4:	4630      	mov	r0, r6
 801d7a6:	4639      	mov	r1, r7
 801d7a8:	f7e2 fd80 	bl	80002ac <__adddf3>
 801d7ac:	2000      	movs	r0, #0
 801d7ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d7b2:	4632      	mov	r2, r6
 801d7b4:	463b      	mov	r3, r7
 801d7b6:	f7e2 fd77 	bl	80002a8 <__aeabi_dsub>
 801d7ba:	4602      	mov	r2, r0
 801d7bc:	460b      	mov	r3, r1
 801d7be:	4620      	mov	r0, r4
 801d7c0:	4629      	mov	r1, r5
 801d7c2:	f7e2 fd71 	bl	80002a8 <__aeabi_dsub>
 801d7c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d7c8:	f10b 33ff 	add.w	r3, fp, #4294967295
 801d7cc:	4313      	orrs	r3, r2
 801d7ce:	4606      	mov	r6, r0
 801d7d0:	460f      	mov	r7, r1
 801d7d2:	f040 81eb 	bne.w	801dbac <__ieee754_pow+0x6c4>
 801d7d6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801d890 <__ieee754_pow+0x3a8>
 801d7da:	e9dd 4500 	ldrd	r4, r5, [sp]
 801d7de:	2400      	movs	r4, #0
 801d7e0:	4622      	mov	r2, r4
 801d7e2:	462b      	mov	r3, r5
 801d7e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d7e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d7ec:	f7e2 fd5c 	bl	80002a8 <__aeabi_dsub>
 801d7f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d7f4:	f7e2 ff10 	bl	8000618 <__aeabi_dmul>
 801d7f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d7fc:	4680      	mov	r8, r0
 801d7fe:	4689      	mov	r9, r1
 801d800:	4630      	mov	r0, r6
 801d802:	4639      	mov	r1, r7
 801d804:	f7e2 ff08 	bl	8000618 <__aeabi_dmul>
 801d808:	4602      	mov	r2, r0
 801d80a:	460b      	mov	r3, r1
 801d80c:	4640      	mov	r0, r8
 801d80e:	4649      	mov	r1, r9
 801d810:	f7e2 fd4c 	bl	80002ac <__adddf3>
 801d814:	4622      	mov	r2, r4
 801d816:	462b      	mov	r3, r5
 801d818:	4680      	mov	r8, r0
 801d81a:	4689      	mov	r9, r1
 801d81c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d820:	f7e2 fefa 	bl	8000618 <__aeabi_dmul>
 801d824:	460b      	mov	r3, r1
 801d826:	4604      	mov	r4, r0
 801d828:	460d      	mov	r5, r1
 801d82a:	4602      	mov	r2, r0
 801d82c:	4649      	mov	r1, r9
 801d82e:	4640      	mov	r0, r8
 801d830:	e9cd 4500 	strd	r4, r5, [sp]
 801d834:	f7e2 fd3a 	bl	80002ac <__adddf3>
 801d838:	4b1c      	ldr	r3, [pc, #112]	; (801d8ac <__ieee754_pow+0x3c4>)
 801d83a:	4299      	cmp	r1, r3
 801d83c:	4606      	mov	r6, r0
 801d83e:	460f      	mov	r7, r1
 801d840:	468b      	mov	fp, r1
 801d842:	f340 82f7 	ble.w	801de34 <__ieee754_pow+0x94c>
 801d846:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d84a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d84e:	4303      	orrs	r3, r0
 801d850:	f000 81ea 	beq.w	801dc28 <__ieee754_pow+0x740>
 801d854:	a310      	add	r3, pc, #64	; (adr r3, 801d898 <__ieee754_pow+0x3b0>)
 801d856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d85a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d85e:	f7e2 fedb 	bl	8000618 <__aeabi_dmul>
 801d862:	a30d      	add	r3, pc, #52	; (adr r3, 801d898 <__ieee754_pow+0x3b0>)
 801d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d868:	e6d5      	b.n	801d616 <__ieee754_pow+0x12e>
 801d86a:	bf00      	nop
 801d86c:	f3af 8000 	nop.w
 801d870:	60000000 	.word	0x60000000
 801d874:	3ff71547 	.word	0x3ff71547
 801d878:	f85ddf44 	.word	0xf85ddf44
 801d87c:	3e54ae0b 	.word	0x3e54ae0b
 801d880:	55555555 	.word	0x55555555
 801d884:	3fd55555 	.word	0x3fd55555
 801d888:	652b82fe 	.word	0x652b82fe
 801d88c:	3ff71547 	.word	0x3ff71547
 801d890:	00000000 	.word	0x00000000
 801d894:	bff00000 	.word	0xbff00000
 801d898:	8800759c 	.word	0x8800759c
 801d89c:	7e37e43c 	.word	0x7e37e43c
 801d8a0:	3ff00000 	.word	0x3ff00000
 801d8a4:	3fd00000 	.word	0x3fd00000
 801d8a8:	3fe00000 	.word	0x3fe00000
 801d8ac:	408fffff 	.word	0x408fffff
 801d8b0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801d8b4:	f04f 0200 	mov.w	r2, #0
 801d8b8:	da05      	bge.n	801d8c6 <__ieee754_pow+0x3de>
 801d8ba:	4bd3      	ldr	r3, [pc, #844]	; (801dc08 <__ieee754_pow+0x720>)
 801d8bc:	f7e2 feac 	bl	8000618 <__aeabi_dmul>
 801d8c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d8c4:	460c      	mov	r4, r1
 801d8c6:	1523      	asrs	r3, r4, #20
 801d8c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d8cc:	4413      	add	r3, r2
 801d8ce:	9309      	str	r3, [sp, #36]	; 0x24
 801d8d0:	4bce      	ldr	r3, [pc, #824]	; (801dc0c <__ieee754_pow+0x724>)
 801d8d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d8d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d8da:	429c      	cmp	r4, r3
 801d8dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d8e0:	dd08      	ble.n	801d8f4 <__ieee754_pow+0x40c>
 801d8e2:	4bcb      	ldr	r3, [pc, #812]	; (801dc10 <__ieee754_pow+0x728>)
 801d8e4:	429c      	cmp	r4, r3
 801d8e6:	f340 815e 	ble.w	801dba6 <__ieee754_pow+0x6be>
 801d8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8ec:	3301      	adds	r3, #1
 801d8ee:	9309      	str	r3, [sp, #36]	; 0x24
 801d8f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d8f4:	f04f 0a00 	mov.w	sl, #0
 801d8f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801d8fc:	930c      	str	r3, [sp, #48]	; 0x30
 801d8fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d900:	4bc4      	ldr	r3, [pc, #784]	; (801dc14 <__ieee754_pow+0x72c>)
 801d902:	4413      	add	r3, r2
 801d904:	ed93 7b00 	vldr	d7, [r3]
 801d908:	4629      	mov	r1, r5
 801d90a:	ec53 2b17 	vmov	r2, r3, d7
 801d90e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d912:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801d916:	f7e2 fcc7 	bl	80002a8 <__aeabi_dsub>
 801d91a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d91e:	4606      	mov	r6, r0
 801d920:	460f      	mov	r7, r1
 801d922:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d926:	f7e2 fcc1 	bl	80002ac <__adddf3>
 801d92a:	4602      	mov	r2, r0
 801d92c:	460b      	mov	r3, r1
 801d92e:	2000      	movs	r0, #0
 801d930:	49b9      	ldr	r1, [pc, #740]	; (801dc18 <__ieee754_pow+0x730>)
 801d932:	f7e2 ff9b 	bl	800086c <__aeabi_ddiv>
 801d936:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d93a:	4602      	mov	r2, r0
 801d93c:	460b      	mov	r3, r1
 801d93e:	4630      	mov	r0, r6
 801d940:	4639      	mov	r1, r7
 801d942:	f7e2 fe69 	bl	8000618 <__aeabi_dmul>
 801d946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d94a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801d94e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801d952:	2300      	movs	r3, #0
 801d954:	9302      	str	r3, [sp, #8]
 801d956:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d95a:	106d      	asrs	r5, r5, #1
 801d95c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d960:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d964:	2200      	movs	r2, #0
 801d966:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801d96a:	4640      	mov	r0, r8
 801d96c:	4649      	mov	r1, r9
 801d96e:	4614      	mov	r4, r2
 801d970:	461d      	mov	r5, r3
 801d972:	f7e2 fe51 	bl	8000618 <__aeabi_dmul>
 801d976:	4602      	mov	r2, r0
 801d978:	460b      	mov	r3, r1
 801d97a:	4630      	mov	r0, r6
 801d97c:	4639      	mov	r1, r7
 801d97e:	f7e2 fc93 	bl	80002a8 <__aeabi_dsub>
 801d982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d986:	4606      	mov	r6, r0
 801d988:	460f      	mov	r7, r1
 801d98a:	4620      	mov	r0, r4
 801d98c:	4629      	mov	r1, r5
 801d98e:	f7e2 fc8b 	bl	80002a8 <__aeabi_dsub>
 801d992:	4602      	mov	r2, r0
 801d994:	460b      	mov	r3, r1
 801d996:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d99a:	f7e2 fc85 	bl	80002a8 <__aeabi_dsub>
 801d99e:	4642      	mov	r2, r8
 801d9a0:	464b      	mov	r3, r9
 801d9a2:	f7e2 fe39 	bl	8000618 <__aeabi_dmul>
 801d9a6:	4602      	mov	r2, r0
 801d9a8:	460b      	mov	r3, r1
 801d9aa:	4630      	mov	r0, r6
 801d9ac:	4639      	mov	r1, r7
 801d9ae:	f7e2 fc7b 	bl	80002a8 <__aeabi_dsub>
 801d9b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d9b6:	f7e2 fe2f 	bl	8000618 <__aeabi_dmul>
 801d9ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d9be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d9c2:	4610      	mov	r0, r2
 801d9c4:	4619      	mov	r1, r3
 801d9c6:	f7e2 fe27 	bl	8000618 <__aeabi_dmul>
 801d9ca:	a37b      	add	r3, pc, #492	; (adr r3, 801dbb8 <__ieee754_pow+0x6d0>)
 801d9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9d0:	4604      	mov	r4, r0
 801d9d2:	460d      	mov	r5, r1
 801d9d4:	f7e2 fe20 	bl	8000618 <__aeabi_dmul>
 801d9d8:	a379      	add	r3, pc, #484	; (adr r3, 801dbc0 <__ieee754_pow+0x6d8>)
 801d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9de:	f7e2 fc65 	bl	80002ac <__adddf3>
 801d9e2:	4622      	mov	r2, r4
 801d9e4:	462b      	mov	r3, r5
 801d9e6:	f7e2 fe17 	bl	8000618 <__aeabi_dmul>
 801d9ea:	a377      	add	r3, pc, #476	; (adr r3, 801dbc8 <__ieee754_pow+0x6e0>)
 801d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9f0:	f7e2 fc5c 	bl	80002ac <__adddf3>
 801d9f4:	4622      	mov	r2, r4
 801d9f6:	462b      	mov	r3, r5
 801d9f8:	f7e2 fe0e 	bl	8000618 <__aeabi_dmul>
 801d9fc:	a374      	add	r3, pc, #464	; (adr r3, 801dbd0 <__ieee754_pow+0x6e8>)
 801d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da02:	f7e2 fc53 	bl	80002ac <__adddf3>
 801da06:	4622      	mov	r2, r4
 801da08:	462b      	mov	r3, r5
 801da0a:	f7e2 fe05 	bl	8000618 <__aeabi_dmul>
 801da0e:	a372      	add	r3, pc, #456	; (adr r3, 801dbd8 <__ieee754_pow+0x6f0>)
 801da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da14:	f7e2 fc4a 	bl	80002ac <__adddf3>
 801da18:	4622      	mov	r2, r4
 801da1a:	462b      	mov	r3, r5
 801da1c:	f7e2 fdfc 	bl	8000618 <__aeabi_dmul>
 801da20:	a36f      	add	r3, pc, #444	; (adr r3, 801dbe0 <__ieee754_pow+0x6f8>)
 801da22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da26:	f7e2 fc41 	bl	80002ac <__adddf3>
 801da2a:	4622      	mov	r2, r4
 801da2c:	4606      	mov	r6, r0
 801da2e:	460f      	mov	r7, r1
 801da30:	462b      	mov	r3, r5
 801da32:	4620      	mov	r0, r4
 801da34:	4629      	mov	r1, r5
 801da36:	f7e2 fdef 	bl	8000618 <__aeabi_dmul>
 801da3a:	4602      	mov	r2, r0
 801da3c:	460b      	mov	r3, r1
 801da3e:	4630      	mov	r0, r6
 801da40:	4639      	mov	r1, r7
 801da42:	f7e2 fde9 	bl	8000618 <__aeabi_dmul>
 801da46:	4642      	mov	r2, r8
 801da48:	4604      	mov	r4, r0
 801da4a:	460d      	mov	r5, r1
 801da4c:	464b      	mov	r3, r9
 801da4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801da52:	f7e2 fc2b 	bl	80002ac <__adddf3>
 801da56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801da5a:	f7e2 fddd 	bl	8000618 <__aeabi_dmul>
 801da5e:	4622      	mov	r2, r4
 801da60:	462b      	mov	r3, r5
 801da62:	f7e2 fc23 	bl	80002ac <__adddf3>
 801da66:	4642      	mov	r2, r8
 801da68:	4606      	mov	r6, r0
 801da6a:	460f      	mov	r7, r1
 801da6c:	464b      	mov	r3, r9
 801da6e:	4640      	mov	r0, r8
 801da70:	4649      	mov	r1, r9
 801da72:	f7e2 fdd1 	bl	8000618 <__aeabi_dmul>
 801da76:	2200      	movs	r2, #0
 801da78:	4b68      	ldr	r3, [pc, #416]	; (801dc1c <__ieee754_pow+0x734>)
 801da7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801da7e:	f7e2 fc15 	bl	80002ac <__adddf3>
 801da82:	4632      	mov	r2, r6
 801da84:	463b      	mov	r3, r7
 801da86:	f7e2 fc11 	bl	80002ac <__adddf3>
 801da8a:	9802      	ldr	r0, [sp, #8]
 801da8c:	460d      	mov	r5, r1
 801da8e:	4604      	mov	r4, r0
 801da90:	4602      	mov	r2, r0
 801da92:	460b      	mov	r3, r1
 801da94:	4640      	mov	r0, r8
 801da96:	4649      	mov	r1, r9
 801da98:	f7e2 fdbe 	bl	8000618 <__aeabi_dmul>
 801da9c:	2200      	movs	r2, #0
 801da9e:	4680      	mov	r8, r0
 801daa0:	4689      	mov	r9, r1
 801daa2:	4b5e      	ldr	r3, [pc, #376]	; (801dc1c <__ieee754_pow+0x734>)
 801daa4:	4620      	mov	r0, r4
 801daa6:	4629      	mov	r1, r5
 801daa8:	f7e2 fbfe 	bl	80002a8 <__aeabi_dsub>
 801daac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801dab0:	f7e2 fbfa 	bl	80002a8 <__aeabi_dsub>
 801dab4:	4602      	mov	r2, r0
 801dab6:	460b      	mov	r3, r1
 801dab8:	4630      	mov	r0, r6
 801daba:	4639      	mov	r1, r7
 801dabc:	f7e2 fbf4 	bl	80002a8 <__aeabi_dsub>
 801dac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dac4:	f7e2 fda8 	bl	8000618 <__aeabi_dmul>
 801dac8:	4622      	mov	r2, r4
 801daca:	4606      	mov	r6, r0
 801dacc:	460f      	mov	r7, r1
 801dace:	462b      	mov	r3, r5
 801dad0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dad4:	f7e2 fda0 	bl	8000618 <__aeabi_dmul>
 801dad8:	4602      	mov	r2, r0
 801dada:	460b      	mov	r3, r1
 801dadc:	4630      	mov	r0, r6
 801dade:	4639      	mov	r1, r7
 801dae0:	f7e2 fbe4 	bl	80002ac <__adddf3>
 801dae4:	4606      	mov	r6, r0
 801dae6:	460f      	mov	r7, r1
 801dae8:	4602      	mov	r2, r0
 801daea:	460b      	mov	r3, r1
 801daec:	4640      	mov	r0, r8
 801daee:	4649      	mov	r1, r9
 801daf0:	f7e2 fbdc 	bl	80002ac <__adddf3>
 801daf4:	9802      	ldr	r0, [sp, #8]
 801daf6:	a33c      	add	r3, pc, #240	; (adr r3, 801dbe8 <__ieee754_pow+0x700>)
 801daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dafc:	4604      	mov	r4, r0
 801dafe:	460d      	mov	r5, r1
 801db00:	f7e2 fd8a 	bl	8000618 <__aeabi_dmul>
 801db04:	4642      	mov	r2, r8
 801db06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801db0a:	464b      	mov	r3, r9
 801db0c:	4620      	mov	r0, r4
 801db0e:	4629      	mov	r1, r5
 801db10:	f7e2 fbca 	bl	80002a8 <__aeabi_dsub>
 801db14:	4602      	mov	r2, r0
 801db16:	460b      	mov	r3, r1
 801db18:	4630      	mov	r0, r6
 801db1a:	4639      	mov	r1, r7
 801db1c:	f7e2 fbc4 	bl	80002a8 <__aeabi_dsub>
 801db20:	a333      	add	r3, pc, #204	; (adr r3, 801dbf0 <__ieee754_pow+0x708>)
 801db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db26:	f7e2 fd77 	bl	8000618 <__aeabi_dmul>
 801db2a:	a333      	add	r3, pc, #204	; (adr r3, 801dbf8 <__ieee754_pow+0x710>)
 801db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db30:	4606      	mov	r6, r0
 801db32:	460f      	mov	r7, r1
 801db34:	4620      	mov	r0, r4
 801db36:	4629      	mov	r1, r5
 801db38:	f7e2 fd6e 	bl	8000618 <__aeabi_dmul>
 801db3c:	4602      	mov	r2, r0
 801db3e:	460b      	mov	r3, r1
 801db40:	4630      	mov	r0, r6
 801db42:	4639      	mov	r1, r7
 801db44:	f7e2 fbb2 	bl	80002ac <__adddf3>
 801db48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801db4a:	4b35      	ldr	r3, [pc, #212]	; (801dc20 <__ieee754_pow+0x738>)
 801db4c:	4413      	add	r3, r2
 801db4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db52:	f7e2 fbab 	bl	80002ac <__adddf3>
 801db56:	4604      	mov	r4, r0
 801db58:	9809      	ldr	r0, [sp, #36]	; 0x24
 801db5a:	460d      	mov	r5, r1
 801db5c:	f7e2 fcf2 	bl	8000544 <__aeabi_i2d>
 801db60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801db62:	4b30      	ldr	r3, [pc, #192]	; (801dc24 <__ieee754_pow+0x73c>)
 801db64:	4413      	add	r3, r2
 801db66:	e9d3 8900 	ldrd	r8, r9, [r3]
 801db6a:	4606      	mov	r6, r0
 801db6c:	460f      	mov	r7, r1
 801db6e:	4622      	mov	r2, r4
 801db70:	462b      	mov	r3, r5
 801db72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801db76:	f7e2 fb99 	bl	80002ac <__adddf3>
 801db7a:	4642      	mov	r2, r8
 801db7c:	464b      	mov	r3, r9
 801db7e:	f7e2 fb95 	bl	80002ac <__adddf3>
 801db82:	4632      	mov	r2, r6
 801db84:	463b      	mov	r3, r7
 801db86:	f7e2 fb91 	bl	80002ac <__adddf3>
 801db8a:	9802      	ldr	r0, [sp, #8]
 801db8c:	4632      	mov	r2, r6
 801db8e:	463b      	mov	r3, r7
 801db90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801db94:	f7e2 fb88 	bl	80002a8 <__aeabi_dsub>
 801db98:	4642      	mov	r2, r8
 801db9a:	464b      	mov	r3, r9
 801db9c:	f7e2 fb84 	bl	80002a8 <__aeabi_dsub>
 801dba0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801dba4:	e607      	b.n	801d7b6 <__ieee754_pow+0x2ce>
 801dba6:	f04f 0a01 	mov.w	sl, #1
 801dbaa:	e6a5      	b.n	801d8f8 <__ieee754_pow+0x410>
 801dbac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801dc00 <__ieee754_pow+0x718>
 801dbb0:	e613      	b.n	801d7da <__ieee754_pow+0x2f2>
 801dbb2:	bf00      	nop
 801dbb4:	f3af 8000 	nop.w
 801dbb8:	4a454eef 	.word	0x4a454eef
 801dbbc:	3fca7e28 	.word	0x3fca7e28
 801dbc0:	93c9db65 	.word	0x93c9db65
 801dbc4:	3fcd864a 	.word	0x3fcd864a
 801dbc8:	a91d4101 	.word	0xa91d4101
 801dbcc:	3fd17460 	.word	0x3fd17460
 801dbd0:	518f264d 	.word	0x518f264d
 801dbd4:	3fd55555 	.word	0x3fd55555
 801dbd8:	db6fabff 	.word	0xdb6fabff
 801dbdc:	3fdb6db6 	.word	0x3fdb6db6
 801dbe0:	33333303 	.word	0x33333303
 801dbe4:	3fe33333 	.word	0x3fe33333
 801dbe8:	e0000000 	.word	0xe0000000
 801dbec:	3feec709 	.word	0x3feec709
 801dbf0:	dc3a03fd 	.word	0xdc3a03fd
 801dbf4:	3feec709 	.word	0x3feec709
 801dbf8:	145b01f5 	.word	0x145b01f5
 801dbfc:	be3e2fe0 	.word	0xbe3e2fe0
 801dc00:	00000000 	.word	0x00000000
 801dc04:	3ff00000 	.word	0x3ff00000
 801dc08:	43400000 	.word	0x43400000
 801dc0c:	0003988e 	.word	0x0003988e
 801dc10:	000bb679 	.word	0x000bb679
 801dc14:	080206f0 	.word	0x080206f0
 801dc18:	3ff00000 	.word	0x3ff00000
 801dc1c:	40080000 	.word	0x40080000
 801dc20:	08020710 	.word	0x08020710
 801dc24:	08020700 	.word	0x08020700
 801dc28:	a3b4      	add	r3, pc, #720	; (adr r3, 801defc <__ieee754_pow+0xa14>)
 801dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc2e:	4640      	mov	r0, r8
 801dc30:	4649      	mov	r1, r9
 801dc32:	f7e2 fb3b 	bl	80002ac <__adddf3>
 801dc36:	4622      	mov	r2, r4
 801dc38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dc3c:	462b      	mov	r3, r5
 801dc3e:	4630      	mov	r0, r6
 801dc40:	4639      	mov	r1, r7
 801dc42:	f7e2 fb31 	bl	80002a8 <__aeabi_dsub>
 801dc46:	4602      	mov	r2, r0
 801dc48:	460b      	mov	r3, r1
 801dc4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dc4e:	f7e2 ff73 	bl	8000b38 <__aeabi_dcmpgt>
 801dc52:	2800      	cmp	r0, #0
 801dc54:	f47f adfe 	bne.w	801d854 <__ieee754_pow+0x36c>
 801dc58:	4aa3      	ldr	r2, [pc, #652]	; (801dee8 <__ieee754_pow+0xa00>)
 801dc5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801dc5e:	4293      	cmp	r3, r2
 801dc60:	f340 810a 	ble.w	801de78 <__ieee754_pow+0x990>
 801dc64:	151b      	asrs	r3, r3, #20
 801dc66:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801dc6a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801dc6e:	fa4a f303 	asr.w	r3, sl, r3
 801dc72:	445b      	add	r3, fp
 801dc74:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801dc78:	4e9c      	ldr	r6, [pc, #624]	; (801deec <__ieee754_pow+0xa04>)
 801dc7a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801dc7e:	4116      	asrs	r6, r2
 801dc80:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801dc84:	2000      	movs	r0, #0
 801dc86:	ea23 0106 	bic.w	r1, r3, r6
 801dc8a:	f1c2 0214 	rsb	r2, r2, #20
 801dc8e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801dc92:	fa4a fa02 	asr.w	sl, sl, r2
 801dc96:	f1bb 0f00 	cmp.w	fp, #0
 801dc9a:	4602      	mov	r2, r0
 801dc9c:	460b      	mov	r3, r1
 801dc9e:	4620      	mov	r0, r4
 801dca0:	4629      	mov	r1, r5
 801dca2:	bfb8      	it	lt
 801dca4:	f1ca 0a00 	rsblt	sl, sl, #0
 801dca8:	f7e2 fafe 	bl	80002a8 <__aeabi_dsub>
 801dcac:	e9cd 0100 	strd	r0, r1, [sp]
 801dcb0:	4642      	mov	r2, r8
 801dcb2:	464b      	mov	r3, r9
 801dcb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801dcb8:	f7e2 faf8 	bl	80002ac <__adddf3>
 801dcbc:	2000      	movs	r0, #0
 801dcbe:	a378      	add	r3, pc, #480	; (adr r3, 801dea0 <__ieee754_pow+0x9b8>)
 801dcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcc4:	4604      	mov	r4, r0
 801dcc6:	460d      	mov	r5, r1
 801dcc8:	f7e2 fca6 	bl	8000618 <__aeabi_dmul>
 801dccc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dcd0:	4606      	mov	r6, r0
 801dcd2:	460f      	mov	r7, r1
 801dcd4:	4620      	mov	r0, r4
 801dcd6:	4629      	mov	r1, r5
 801dcd8:	f7e2 fae6 	bl	80002a8 <__aeabi_dsub>
 801dcdc:	4602      	mov	r2, r0
 801dcde:	460b      	mov	r3, r1
 801dce0:	4640      	mov	r0, r8
 801dce2:	4649      	mov	r1, r9
 801dce4:	f7e2 fae0 	bl	80002a8 <__aeabi_dsub>
 801dce8:	a36f      	add	r3, pc, #444	; (adr r3, 801dea8 <__ieee754_pow+0x9c0>)
 801dcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcee:	f7e2 fc93 	bl	8000618 <__aeabi_dmul>
 801dcf2:	a36f      	add	r3, pc, #444	; (adr r3, 801deb0 <__ieee754_pow+0x9c8>)
 801dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcf8:	4680      	mov	r8, r0
 801dcfa:	4689      	mov	r9, r1
 801dcfc:	4620      	mov	r0, r4
 801dcfe:	4629      	mov	r1, r5
 801dd00:	f7e2 fc8a 	bl	8000618 <__aeabi_dmul>
 801dd04:	4602      	mov	r2, r0
 801dd06:	460b      	mov	r3, r1
 801dd08:	4640      	mov	r0, r8
 801dd0a:	4649      	mov	r1, r9
 801dd0c:	f7e2 face 	bl	80002ac <__adddf3>
 801dd10:	4604      	mov	r4, r0
 801dd12:	460d      	mov	r5, r1
 801dd14:	4602      	mov	r2, r0
 801dd16:	460b      	mov	r3, r1
 801dd18:	4630      	mov	r0, r6
 801dd1a:	4639      	mov	r1, r7
 801dd1c:	f7e2 fac6 	bl	80002ac <__adddf3>
 801dd20:	4632      	mov	r2, r6
 801dd22:	463b      	mov	r3, r7
 801dd24:	4680      	mov	r8, r0
 801dd26:	4689      	mov	r9, r1
 801dd28:	f7e2 fabe 	bl	80002a8 <__aeabi_dsub>
 801dd2c:	4602      	mov	r2, r0
 801dd2e:	460b      	mov	r3, r1
 801dd30:	4620      	mov	r0, r4
 801dd32:	4629      	mov	r1, r5
 801dd34:	f7e2 fab8 	bl	80002a8 <__aeabi_dsub>
 801dd38:	4642      	mov	r2, r8
 801dd3a:	4606      	mov	r6, r0
 801dd3c:	460f      	mov	r7, r1
 801dd3e:	464b      	mov	r3, r9
 801dd40:	4640      	mov	r0, r8
 801dd42:	4649      	mov	r1, r9
 801dd44:	f7e2 fc68 	bl	8000618 <__aeabi_dmul>
 801dd48:	a35b      	add	r3, pc, #364	; (adr r3, 801deb8 <__ieee754_pow+0x9d0>)
 801dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd4e:	4604      	mov	r4, r0
 801dd50:	460d      	mov	r5, r1
 801dd52:	f7e2 fc61 	bl	8000618 <__aeabi_dmul>
 801dd56:	a35a      	add	r3, pc, #360	; (adr r3, 801dec0 <__ieee754_pow+0x9d8>)
 801dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd5c:	f7e2 faa4 	bl	80002a8 <__aeabi_dsub>
 801dd60:	4622      	mov	r2, r4
 801dd62:	462b      	mov	r3, r5
 801dd64:	f7e2 fc58 	bl	8000618 <__aeabi_dmul>
 801dd68:	a357      	add	r3, pc, #348	; (adr r3, 801dec8 <__ieee754_pow+0x9e0>)
 801dd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd6e:	f7e2 fa9d 	bl	80002ac <__adddf3>
 801dd72:	4622      	mov	r2, r4
 801dd74:	462b      	mov	r3, r5
 801dd76:	f7e2 fc4f 	bl	8000618 <__aeabi_dmul>
 801dd7a:	a355      	add	r3, pc, #340	; (adr r3, 801ded0 <__ieee754_pow+0x9e8>)
 801dd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd80:	f7e2 fa92 	bl	80002a8 <__aeabi_dsub>
 801dd84:	4622      	mov	r2, r4
 801dd86:	462b      	mov	r3, r5
 801dd88:	f7e2 fc46 	bl	8000618 <__aeabi_dmul>
 801dd8c:	a352      	add	r3, pc, #328	; (adr r3, 801ded8 <__ieee754_pow+0x9f0>)
 801dd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd92:	f7e2 fa8b 	bl	80002ac <__adddf3>
 801dd96:	4622      	mov	r2, r4
 801dd98:	462b      	mov	r3, r5
 801dd9a:	f7e2 fc3d 	bl	8000618 <__aeabi_dmul>
 801dd9e:	4602      	mov	r2, r0
 801dda0:	460b      	mov	r3, r1
 801dda2:	4640      	mov	r0, r8
 801dda4:	4649      	mov	r1, r9
 801dda6:	f7e2 fa7f 	bl	80002a8 <__aeabi_dsub>
 801ddaa:	4604      	mov	r4, r0
 801ddac:	460d      	mov	r5, r1
 801ddae:	4602      	mov	r2, r0
 801ddb0:	460b      	mov	r3, r1
 801ddb2:	4640      	mov	r0, r8
 801ddb4:	4649      	mov	r1, r9
 801ddb6:	f7e2 fc2f 	bl	8000618 <__aeabi_dmul>
 801ddba:	2200      	movs	r2, #0
 801ddbc:	e9cd 0100 	strd	r0, r1, [sp]
 801ddc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ddc4:	4620      	mov	r0, r4
 801ddc6:	4629      	mov	r1, r5
 801ddc8:	f7e2 fa6e 	bl	80002a8 <__aeabi_dsub>
 801ddcc:	4602      	mov	r2, r0
 801ddce:	460b      	mov	r3, r1
 801ddd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ddd4:	f7e2 fd4a 	bl	800086c <__aeabi_ddiv>
 801ddd8:	4632      	mov	r2, r6
 801ddda:	4604      	mov	r4, r0
 801dddc:	460d      	mov	r5, r1
 801ddde:	463b      	mov	r3, r7
 801dde0:	4640      	mov	r0, r8
 801dde2:	4649      	mov	r1, r9
 801dde4:	f7e2 fc18 	bl	8000618 <__aeabi_dmul>
 801dde8:	4632      	mov	r2, r6
 801ddea:	463b      	mov	r3, r7
 801ddec:	f7e2 fa5e 	bl	80002ac <__adddf3>
 801ddf0:	4602      	mov	r2, r0
 801ddf2:	460b      	mov	r3, r1
 801ddf4:	4620      	mov	r0, r4
 801ddf6:	4629      	mov	r1, r5
 801ddf8:	f7e2 fa56 	bl	80002a8 <__aeabi_dsub>
 801ddfc:	4642      	mov	r2, r8
 801ddfe:	464b      	mov	r3, r9
 801de00:	f7e2 fa52 	bl	80002a8 <__aeabi_dsub>
 801de04:	4602      	mov	r2, r0
 801de06:	460b      	mov	r3, r1
 801de08:	2000      	movs	r0, #0
 801de0a:	4939      	ldr	r1, [pc, #228]	; (801def0 <__ieee754_pow+0xa08>)
 801de0c:	f7e2 fa4c 	bl	80002a8 <__aeabi_dsub>
 801de10:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801de14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801de18:	4602      	mov	r2, r0
 801de1a:	460b      	mov	r3, r1
 801de1c:	da2f      	bge.n	801de7e <__ieee754_pow+0x996>
 801de1e:	4650      	mov	r0, sl
 801de20:	ec43 2b10 	vmov	d0, r2, r3
 801de24:	f001 faa4 	bl	801f370 <scalbn>
 801de28:	ec51 0b10 	vmov	r0, r1, d0
 801de2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801de30:	f7ff bbf1 	b.w	801d616 <__ieee754_pow+0x12e>
 801de34:	4b2f      	ldr	r3, [pc, #188]	; (801def4 <__ieee754_pow+0xa0c>)
 801de36:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801de3a:	429e      	cmp	r6, r3
 801de3c:	f77f af0c 	ble.w	801dc58 <__ieee754_pow+0x770>
 801de40:	4b2d      	ldr	r3, [pc, #180]	; (801def8 <__ieee754_pow+0xa10>)
 801de42:	440b      	add	r3, r1
 801de44:	4303      	orrs	r3, r0
 801de46:	d00b      	beq.n	801de60 <__ieee754_pow+0x978>
 801de48:	a325      	add	r3, pc, #148	; (adr r3, 801dee0 <__ieee754_pow+0x9f8>)
 801de4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801de52:	f7e2 fbe1 	bl	8000618 <__aeabi_dmul>
 801de56:	a322      	add	r3, pc, #136	; (adr r3, 801dee0 <__ieee754_pow+0x9f8>)
 801de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de5c:	f7ff bbdb 	b.w	801d616 <__ieee754_pow+0x12e>
 801de60:	4622      	mov	r2, r4
 801de62:	462b      	mov	r3, r5
 801de64:	f7e2 fa20 	bl	80002a8 <__aeabi_dsub>
 801de68:	4642      	mov	r2, r8
 801de6a:	464b      	mov	r3, r9
 801de6c:	f7e2 fe5a 	bl	8000b24 <__aeabi_dcmpge>
 801de70:	2800      	cmp	r0, #0
 801de72:	f43f aef1 	beq.w	801dc58 <__ieee754_pow+0x770>
 801de76:	e7e7      	b.n	801de48 <__ieee754_pow+0x960>
 801de78:	f04f 0a00 	mov.w	sl, #0
 801de7c:	e718      	b.n	801dcb0 <__ieee754_pow+0x7c8>
 801de7e:	4621      	mov	r1, r4
 801de80:	e7d4      	b.n	801de2c <__ieee754_pow+0x944>
 801de82:	2000      	movs	r0, #0
 801de84:	491a      	ldr	r1, [pc, #104]	; (801def0 <__ieee754_pow+0xa08>)
 801de86:	f7ff bb8f 	b.w	801d5a8 <__ieee754_pow+0xc0>
 801de8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801de8e:	f7ff bb8b 	b.w	801d5a8 <__ieee754_pow+0xc0>
 801de92:	4630      	mov	r0, r6
 801de94:	4639      	mov	r1, r7
 801de96:	f7ff bb87 	b.w	801d5a8 <__ieee754_pow+0xc0>
 801de9a:	4693      	mov	fp, r2
 801de9c:	f7ff bb98 	b.w	801d5d0 <__ieee754_pow+0xe8>
 801dea0:	00000000 	.word	0x00000000
 801dea4:	3fe62e43 	.word	0x3fe62e43
 801dea8:	fefa39ef 	.word	0xfefa39ef
 801deac:	3fe62e42 	.word	0x3fe62e42
 801deb0:	0ca86c39 	.word	0x0ca86c39
 801deb4:	be205c61 	.word	0xbe205c61
 801deb8:	72bea4d0 	.word	0x72bea4d0
 801debc:	3e663769 	.word	0x3e663769
 801dec0:	c5d26bf1 	.word	0xc5d26bf1
 801dec4:	3ebbbd41 	.word	0x3ebbbd41
 801dec8:	af25de2c 	.word	0xaf25de2c
 801decc:	3f11566a 	.word	0x3f11566a
 801ded0:	16bebd93 	.word	0x16bebd93
 801ded4:	3f66c16c 	.word	0x3f66c16c
 801ded8:	5555553e 	.word	0x5555553e
 801dedc:	3fc55555 	.word	0x3fc55555
 801dee0:	c2f8f359 	.word	0xc2f8f359
 801dee4:	01a56e1f 	.word	0x01a56e1f
 801dee8:	3fe00000 	.word	0x3fe00000
 801deec:	000fffff 	.word	0x000fffff
 801def0:	3ff00000 	.word	0x3ff00000
 801def4:	4090cbff 	.word	0x4090cbff
 801def8:	3f6f3400 	.word	0x3f6f3400
 801defc:	652b82fe 	.word	0x652b82fe
 801df00:	3c971547 	.word	0x3c971547
 801df04:	00000000 	.word	0x00000000

0801df08 <__ieee754_rem_pio2>:
 801df08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df0c:	ec57 6b10 	vmov	r6, r7, d0
 801df10:	4bc3      	ldr	r3, [pc, #780]	; (801e220 <__ieee754_rem_pio2+0x318>)
 801df12:	b08d      	sub	sp, #52	; 0x34
 801df14:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801df18:	4598      	cmp	r8, r3
 801df1a:	4604      	mov	r4, r0
 801df1c:	9704      	str	r7, [sp, #16]
 801df1e:	dc07      	bgt.n	801df30 <__ieee754_rem_pio2+0x28>
 801df20:	2200      	movs	r2, #0
 801df22:	2300      	movs	r3, #0
 801df24:	ed84 0b00 	vstr	d0, [r4]
 801df28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801df2c:	2500      	movs	r5, #0
 801df2e:	e027      	b.n	801df80 <__ieee754_rem_pio2+0x78>
 801df30:	4bbc      	ldr	r3, [pc, #752]	; (801e224 <__ieee754_rem_pio2+0x31c>)
 801df32:	4598      	cmp	r8, r3
 801df34:	dc75      	bgt.n	801e022 <__ieee754_rem_pio2+0x11a>
 801df36:	9b04      	ldr	r3, [sp, #16]
 801df38:	4dbb      	ldr	r5, [pc, #748]	; (801e228 <__ieee754_rem_pio2+0x320>)
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	ee10 0a10 	vmov	r0, s0
 801df40:	a3a9      	add	r3, pc, #676	; (adr r3, 801e1e8 <__ieee754_rem_pio2+0x2e0>)
 801df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df46:	4639      	mov	r1, r7
 801df48:	dd36      	ble.n	801dfb8 <__ieee754_rem_pio2+0xb0>
 801df4a:	f7e2 f9ad 	bl	80002a8 <__aeabi_dsub>
 801df4e:	45a8      	cmp	r8, r5
 801df50:	4606      	mov	r6, r0
 801df52:	460f      	mov	r7, r1
 801df54:	d018      	beq.n	801df88 <__ieee754_rem_pio2+0x80>
 801df56:	a3a6      	add	r3, pc, #664	; (adr r3, 801e1f0 <__ieee754_rem_pio2+0x2e8>)
 801df58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df5c:	f7e2 f9a4 	bl	80002a8 <__aeabi_dsub>
 801df60:	4602      	mov	r2, r0
 801df62:	460b      	mov	r3, r1
 801df64:	e9c4 2300 	strd	r2, r3, [r4]
 801df68:	4630      	mov	r0, r6
 801df6a:	4639      	mov	r1, r7
 801df6c:	f7e2 f99c 	bl	80002a8 <__aeabi_dsub>
 801df70:	a39f      	add	r3, pc, #636	; (adr r3, 801e1f0 <__ieee754_rem_pio2+0x2e8>)
 801df72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df76:	f7e2 f997 	bl	80002a8 <__aeabi_dsub>
 801df7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801df7e:	2501      	movs	r5, #1
 801df80:	4628      	mov	r0, r5
 801df82:	b00d      	add	sp, #52	; 0x34
 801df84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df88:	a39b      	add	r3, pc, #620	; (adr r3, 801e1f8 <__ieee754_rem_pio2+0x2f0>)
 801df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df8e:	f7e2 f98b 	bl	80002a8 <__aeabi_dsub>
 801df92:	a39b      	add	r3, pc, #620	; (adr r3, 801e200 <__ieee754_rem_pio2+0x2f8>)
 801df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df98:	4606      	mov	r6, r0
 801df9a:	460f      	mov	r7, r1
 801df9c:	f7e2 f984 	bl	80002a8 <__aeabi_dsub>
 801dfa0:	4602      	mov	r2, r0
 801dfa2:	460b      	mov	r3, r1
 801dfa4:	e9c4 2300 	strd	r2, r3, [r4]
 801dfa8:	4630      	mov	r0, r6
 801dfaa:	4639      	mov	r1, r7
 801dfac:	f7e2 f97c 	bl	80002a8 <__aeabi_dsub>
 801dfb0:	a393      	add	r3, pc, #588	; (adr r3, 801e200 <__ieee754_rem_pio2+0x2f8>)
 801dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfb6:	e7de      	b.n	801df76 <__ieee754_rem_pio2+0x6e>
 801dfb8:	f7e2 f978 	bl	80002ac <__adddf3>
 801dfbc:	45a8      	cmp	r8, r5
 801dfbe:	4606      	mov	r6, r0
 801dfc0:	460f      	mov	r7, r1
 801dfc2:	d016      	beq.n	801dff2 <__ieee754_rem_pio2+0xea>
 801dfc4:	a38a      	add	r3, pc, #552	; (adr r3, 801e1f0 <__ieee754_rem_pio2+0x2e8>)
 801dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfca:	f7e2 f96f 	bl	80002ac <__adddf3>
 801dfce:	4602      	mov	r2, r0
 801dfd0:	460b      	mov	r3, r1
 801dfd2:	e9c4 2300 	strd	r2, r3, [r4]
 801dfd6:	4630      	mov	r0, r6
 801dfd8:	4639      	mov	r1, r7
 801dfda:	f7e2 f965 	bl	80002a8 <__aeabi_dsub>
 801dfde:	a384      	add	r3, pc, #528	; (adr r3, 801e1f0 <__ieee754_rem_pio2+0x2e8>)
 801dfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfe4:	f7e2 f962 	bl	80002ac <__adddf3>
 801dfe8:	f04f 35ff 	mov.w	r5, #4294967295
 801dfec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801dff0:	e7c6      	b.n	801df80 <__ieee754_rem_pio2+0x78>
 801dff2:	a381      	add	r3, pc, #516	; (adr r3, 801e1f8 <__ieee754_rem_pio2+0x2f0>)
 801dff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dff8:	f7e2 f958 	bl	80002ac <__adddf3>
 801dffc:	a380      	add	r3, pc, #512	; (adr r3, 801e200 <__ieee754_rem_pio2+0x2f8>)
 801dffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e002:	4606      	mov	r6, r0
 801e004:	460f      	mov	r7, r1
 801e006:	f7e2 f951 	bl	80002ac <__adddf3>
 801e00a:	4602      	mov	r2, r0
 801e00c:	460b      	mov	r3, r1
 801e00e:	e9c4 2300 	strd	r2, r3, [r4]
 801e012:	4630      	mov	r0, r6
 801e014:	4639      	mov	r1, r7
 801e016:	f7e2 f947 	bl	80002a8 <__aeabi_dsub>
 801e01a:	a379      	add	r3, pc, #484	; (adr r3, 801e200 <__ieee754_rem_pio2+0x2f8>)
 801e01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e020:	e7e0      	b.n	801dfe4 <__ieee754_rem_pio2+0xdc>
 801e022:	4b82      	ldr	r3, [pc, #520]	; (801e22c <__ieee754_rem_pio2+0x324>)
 801e024:	4598      	cmp	r8, r3
 801e026:	f300 80d0 	bgt.w	801e1ca <__ieee754_rem_pio2+0x2c2>
 801e02a:	f001 f879 	bl	801f120 <fabs>
 801e02e:	ec57 6b10 	vmov	r6, r7, d0
 801e032:	ee10 0a10 	vmov	r0, s0
 801e036:	a374      	add	r3, pc, #464	; (adr r3, 801e208 <__ieee754_rem_pio2+0x300>)
 801e038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e03c:	4639      	mov	r1, r7
 801e03e:	f7e2 faeb 	bl	8000618 <__aeabi_dmul>
 801e042:	2200      	movs	r2, #0
 801e044:	4b7a      	ldr	r3, [pc, #488]	; (801e230 <__ieee754_rem_pio2+0x328>)
 801e046:	f7e2 f931 	bl	80002ac <__adddf3>
 801e04a:	f7e2 fd95 	bl	8000b78 <__aeabi_d2iz>
 801e04e:	4605      	mov	r5, r0
 801e050:	f7e2 fa78 	bl	8000544 <__aeabi_i2d>
 801e054:	a364      	add	r3, pc, #400	; (adr r3, 801e1e8 <__ieee754_rem_pio2+0x2e0>)
 801e056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e05a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e05e:	f7e2 fadb 	bl	8000618 <__aeabi_dmul>
 801e062:	4602      	mov	r2, r0
 801e064:	460b      	mov	r3, r1
 801e066:	4630      	mov	r0, r6
 801e068:	4639      	mov	r1, r7
 801e06a:	f7e2 f91d 	bl	80002a8 <__aeabi_dsub>
 801e06e:	a360      	add	r3, pc, #384	; (adr r3, 801e1f0 <__ieee754_rem_pio2+0x2e8>)
 801e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e074:	4682      	mov	sl, r0
 801e076:	468b      	mov	fp, r1
 801e078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e07c:	f7e2 facc 	bl	8000618 <__aeabi_dmul>
 801e080:	2d1f      	cmp	r5, #31
 801e082:	4606      	mov	r6, r0
 801e084:	460f      	mov	r7, r1
 801e086:	dc0c      	bgt.n	801e0a2 <__ieee754_rem_pio2+0x19a>
 801e088:	1e6a      	subs	r2, r5, #1
 801e08a:	4b6a      	ldr	r3, [pc, #424]	; (801e234 <__ieee754_rem_pio2+0x32c>)
 801e08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e090:	4543      	cmp	r3, r8
 801e092:	d006      	beq.n	801e0a2 <__ieee754_rem_pio2+0x19a>
 801e094:	4632      	mov	r2, r6
 801e096:	463b      	mov	r3, r7
 801e098:	4650      	mov	r0, sl
 801e09a:	4659      	mov	r1, fp
 801e09c:	f7e2 f904 	bl	80002a8 <__aeabi_dsub>
 801e0a0:	e00e      	b.n	801e0c0 <__ieee754_rem_pio2+0x1b8>
 801e0a2:	4632      	mov	r2, r6
 801e0a4:	463b      	mov	r3, r7
 801e0a6:	4650      	mov	r0, sl
 801e0a8:	4659      	mov	r1, fp
 801e0aa:	f7e2 f8fd 	bl	80002a8 <__aeabi_dsub>
 801e0ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e0b2:	9305      	str	r3, [sp, #20]
 801e0b4:	9a05      	ldr	r2, [sp, #20]
 801e0b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e0ba:	1ad3      	subs	r3, r2, r3
 801e0bc:	2b10      	cmp	r3, #16
 801e0be:	dc02      	bgt.n	801e0c6 <__ieee754_rem_pio2+0x1be>
 801e0c0:	e9c4 0100 	strd	r0, r1, [r4]
 801e0c4:	e039      	b.n	801e13a <__ieee754_rem_pio2+0x232>
 801e0c6:	a34c      	add	r3, pc, #304	; (adr r3, 801e1f8 <__ieee754_rem_pio2+0x2f0>)
 801e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e0d0:	f7e2 faa2 	bl	8000618 <__aeabi_dmul>
 801e0d4:	4606      	mov	r6, r0
 801e0d6:	460f      	mov	r7, r1
 801e0d8:	4602      	mov	r2, r0
 801e0da:	460b      	mov	r3, r1
 801e0dc:	4650      	mov	r0, sl
 801e0de:	4659      	mov	r1, fp
 801e0e0:	f7e2 f8e2 	bl	80002a8 <__aeabi_dsub>
 801e0e4:	4602      	mov	r2, r0
 801e0e6:	460b      	mov	r3, r1
 801e0e8:	4680      	mov	r8, r0
 801e0ea:	4689      	mov	r9, r1
 801e0ec:	4650      	mov	r0, sl
 801e0ee:	4659      	mov	r1, fp
 801e0f0:	f7e2 f8da 	bl	80002a8 <__aeabi_dsub>
 801e0f4:	4632      	mov	r2, r6
 801e0f6:	463b      	mov	r3, r7
 801e0f8:	f7e2 f8d6 	bl	80002a8 <__aeabi_dsub>
 801e0fc:	a340      	add	r3, pc, #256	; (adr r3, 801e200 <__ieee754_rem_pio2+0x2f8>)
 801e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e102:	4606      	mov	r6, r0
 801e104:	460f      	mov	r7, r1
 801e106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e10a:	f7e2 fa85 	bl	8000618 <__aeabi_dmul>
 801e10e:	4632      	mov	r2, r6
 801e110:	463b      	mov	r3, r7
 801e112:	f7e2 f8c9 	bl	80002a8 <__aeabi_dsub>
 801e116:	4602      	mov	r2, r0
 801e118:	460b      	mov	r3, r1
 801e11a:	4606      	mov	r6, r0
 801e11c:	460f      	mov	r7, r1
 801e11e:	4640      	mov	r0, r8
 801e120:	4649      	mov	r1, r9
 801e122:	f7e2 f8c1 	bl	80002a8 <__aeabi_dsub>
 801e126:	9a05      	ldr	r2, [sp, #20]
 801e128:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e12c:	1ad3      	subs	r3, r2, r3
 801e12e:	2b31      	cmp	r3, #49	; 0x31
 801e130:	dc20      	bgt.n	801e174 <__ieee754_rem_pio2+0x26c>
 801e132:	e9c4 0100 	strd	r0, r1, [r4]
 801e136:	46c2      	mov	sl, r8
 801e138:	46cb      	mov	fp, r9
 801e13a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801e13e:	4650      	mov	r0, sl
 801e140:	4642      	mov	r2, r8
 801e142:	464b      	mov	r3, r9
 801e144:	4659      	mov	r1, fp
 801e146:	f7e2 f8af 	bl	80002a8 <__aeabi_dsub>
 801e14a:	463b      	mov	r3, r7
 801e14c:	4632      	mov	r2, r6
 801e14e:	f7e2 f8ab 	bl	80002a8 <__aeabi_dsub>
 801e152:	9b04      	ldr	r3, [sp, #16]
 801e154:	2b00      	cmp	r3, #0
 801e156:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e15a:	f6bf af11 	bge.w	801df80 <__ieee754_rem_pio2+0x78>
 801e15e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e162:	6063      	str	r3, [r4, #4]
 801e164:	f8c4 8000 	str.w	r8, [r4]
 801e168:	60a0      	str	r0, [r4, #8]
 801e16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e16e:	60e3      	str	r3, [r4, #12]
 801e170:	426d      	negs	r5, r5
 801e172:	e705      	b.n	801df80 <__ieee754_rem_pio2+0x78>
 801e174:	a326      	add	r3, pc, #152	; (adr r3, 801e210 <__ieee754_rem_pio2+0x308>)
 801e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e17e:	f7e2 fa4b 	bl	8000618 <__aeabi_dmul>
 801e182:	4606      	mov	r6, r0
 801e184:	460f      	mov	r7, r1
 801e186:	4602      	mov	r2, r0
 801e188:	460b      	mov	r3, r1
 801e18a:	4640      	mov	r0, r8
 801e18c:	4649      	mov	r1, r9
 801e18e:	f7e2 f88b 	bl	80002a8 <__aeabi_dsub>
 801e192:	4602      	mov	r2, r0
 801e194:	460b      	mov	r3, r1
 801e196:	4682      	mov	sl, r0
 801e198:	468b      	mov	fp, r1
 801e19a:	4640      	mov	r0, r8
 801e19c:	4649      	mov	r1, r9
 801e19e:	f7e2 f883 	bl	80002a8 <__aeabi_dsub>
 801e1a2:	4632      	mov	r2, r6
 801e1a4:	463b      	mov	r3, r7
 801e1a6:	f7e2 f87f 	bl	80002a8 <__aeabi_dsub>
 801e1aa:	a31b      	add	r3, pc, #108	; (adr r3, 801e218 <__ieee754_rem_pio2+0x310>)
 801e1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1b0:	4606      	mov	r6, r0
 801e1b2:	460f      	mov	r7, r1
 801e1b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e1b8:	f7e2 fa2e 	bl	8000618 <__aeabi_dmul>
 801e1bc:	4632      	mov	r2, r6
 801e1be:	463b      	mov	r3, r7
 801e1c0:	f7e2 f872 	bl	80002a8 <__aeabi_dsub>
 801e1c4:	4606      	mov	r6, r0
 801e1c6:	460f      	mov	r7, r1
 801e1c8:	e764      	b.n	801e094 <__ieee754_rem_pio2+0x18c>
 801e1ca:	4b1b      	ldr	r3, [pc, #108]	; (801e238 <__ieee754_rem_pio2+0x330>)
 801e1cc:	4598      	cmp	r8, r3
 801e1ce:	dd35      	ble.n	801e23c <__ieee754_rem_pio2+0x334>
 801e1d0:	ee10 2a10 	vmov	r2, s0
 801e1d4:	463b      	mov	r3, r7
 801e1d6:	4630      	mov	r0, r6
 801e1d8:	4639      	mov	r1, r7
 801e1da:	f7e2 f865 	bl	80002a8 <__aeabi_dsub>
 801e1de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e1e2:	e9c4 0100 	strd	r0, r1, [r4]
 801e1e6:	e6a1      	b.n	801df2c <__ieee754_rem_pio2+0x24>
 801e1e8:	54400000 	.word	0x54400000
 801e1ec:	3ff921fb 	.word	0x3ff921fb
 801e1f0:	1a626331 	.word	0x1a626331
 801e1f4:	3dd0b461 	.word	0x3dd0b461
 801e1f8:	1a600000 	.word	0x1a600000
 801e1fc:	3dd0b461 	.word	0x3dd0b461
 801e200:	2e037073 	.word	0x2e037073
 801e204:	3ba3198a 	.word	0x3ba3198a
 801e208:	6dc9c883 	.word	0x6dc9c883
 801e20c:	3fe45f30 	.word	0x3fe45f30
 801e210:	2e000000 	.word	0x2e000000
 801e214:	3ba3198a 	.word	0x3ba3198a
 801e218:	252049c1 	.word	0x252049c1
 801e21c:	397b839a 	.word	0x397b839a
 801e220:	3fe921fb 	.word	0x3fe921fb
 801e224:	4002d97b 	.word	0x4002d97b
 801e228:	3ff921fb 	.word	0x3ff921fb
 801e22c:	413921fb 	.word	0x413921fb
 801e230:	3fe00000 	.word	0x3fe00000
 801e234:	08020720 	.word	0x08020720
 801e238:	7fefffff 	.word	0x7fefffff
 801e23c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801e240:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801e244:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801e248:	4630      	mov	r0, r6
 801e24a:	460f      	mov	r7, r1
 801e24c:	f7e2 fc94 	bl	8000b78 <__aeabi_d2iz>
 801e250:	f7e2 f978 	bl	8000544 <__aeabi_i2d>
 801e254:	4602      	mov	r2, r0
 801e256:	460b      	mov	r3, r1
 801e258:	4630      	mov	r0, r6
 801e25a:	4639      	mov	r1, r7
 801e25c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e260:	f7e2 f822 	bl	80002a8 <__aeabi_dsub>
 801e264:	2200      	movs	r2, #0
 801e266:	4b1f      	ldr	r3, [pc, #124]	; (801e2e4 <__ieee754_rem_pio2+0x3dc>)
 801e268:	f7e2 f9d6 	bl	8000618 <__aeabi_dmul>
 801e26c:	460f      	mov	r7, r1
 801e26e:	4606      	mov	r6, r0
 801e270:	f7e2 fc82 	bl	8000b78 <__aeabi_d2iz>
 801e274:	f7e2 f966 	bl	8000544 <__aeabi_i2d>
 801e278:	4602      	mov	r2, r0
 801e27a:	460b      	mov	r3, r1
 801e27c:	4630      	mov	r0, r6
 801e27e:	4639      	mov	r1, r7
 801e280:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801e284:	f7e2 f810 	bl	80002a8 <__aeabi_dsub>
 801e288:	2200      	movs	r2, #0
 801e28a:	4b16      	ldr	r3, [pc, #88]	; (801e2e4 <__ieee754_rem_pio2+0x3dc>)
 801e28c:	f7e2 f9c4 	bl	8000618 <__aeabi_dmul>
 801e290:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801e294:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801e298:	f04f 0803 	mov.w	r8, #3
 801e29c:	2600      	movs	r6, #0
 801e29e:	2700      	movs	r7, #0
 801e2a0:	4632      	mov	r2, r6
 801e2a2:	463b      	mov	r3, r7
 801e2a4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801e2a8:	f108 3aff 	add.w	sl, r8, #4294967295
 801e2ac:	f7e2 fc1c 	bl	8000ae8 <__aeabi_dcmpeq>
 801e2b0:	b9b0      	cbnz	r0, 801e2e0 <__ieee754_rem_pio2+0x3d8>
 801e2b2:	4b0d      	ldr	r3, [pc, #52]	; (801e2e8 <__ieee754_rem_pio2+0x3e0>)
 801e2b4:	9301      	str	r3, [sp, #4]
 801e2b6:	2302      	movs	r3, #2
 801e2b8:	9300      	str	r3, [sp, #0]
 801e2ba:	462a      	mov	r2, r5
 801e2bc:	4643      	mov	r3, r8
 801e2be:	4621      	mov	r1, r4
 801e2c0:	a806      	add	r0, sp, #24
 801e2c2:	f000 f991 	bl	801e5e8 <__kernel_rem_pio2>
 801e2c6:	9b04      	ldr	r3, [sp, #16]
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	4605      	mov	r5, r0
 801e2cc:	f6bf ae58 	bge.w	801df80 <__ieee754_rem_pio2+0x78>
 801e2d0:	6863      	ldr	r3, [r4, #4]
 801e2d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e2d6:	6063      	str	r3, [r4, #4]
 801e2d8:	68e3      	ldr	r3, [r4, #12]
 801e2da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e2de:	e746      	b.n	801e16e <__ieee754_rem_pio2+0x266>
 801e2e0:	46d0      	mov	r8, sl
 801e2e2:	e7dd      	b.n	801e2a0 <__ieee754_rem_pio2+0x398>
 801e2e4:	41700000 	.word	0x41700000
 801e2e8:	080207a0 	.word	0x080207a0

0801e2ec <__ieee754_sqrt>:
 801e2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2f0:	4955      	ldr	r1, [pc, #340]	; (801e448 <__ieee754_sqrt+0x15c>)
 801e2f2:	ec55 4b10 	vmov	r4, r5, d0
 801e2f6:	43a9      	bics	r1, r5
 801e2f8:	462b      	mov	r3, r5
 801e2fa:	462a      	mov	r2, r5
 801e2fc:	d112      	bne.n	801e324 <__ieee754_sqrt+0x38>
 801e2fe:	ee10 2a10 	vmov	r2, s0
 801e302:	ee10 0a10 	vmov	r0, s0
 801e306:	4629      	mov	r1, r5
 801e308:	f7e2 f986 	bl	8000618 <__aeabi_dmul>
 801e30c:	4602      	mov	r2, r0
 801e30e:	460b      	mov	r3, r1
 801e310:	4620      	mov	r0, r4
 801e312:	4629      	mov	r1, r5
 801e314:	f7e1 ffca 	bl	80002ac <__adddf3>
 801e318:	4604      	mov	r4, r0
 801e31a:	460d      	mov	r5, r1
 801e31c:	ec45 4b10 	vmov	d0, r4, r5
 801e320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e324:	2d00      	cmp	r5, #0
 801e326:	ee10 0a10 	vmov	r0, s0
 801e32a:	4621      	mov	r1, r4
 801e32c:	dc0f      	bgt.n	801e34e <__ieee754_sqrt+0x62>
 801e32e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e332:	4330      	orrs	r0, r6
 801e334:	d0f2      	beq.n	801e31c <__ieee754_sqrt+0x30>
 801e336:	b155      	cbz	r5, 801e34e <__ieee754_sqrt+0x62>
 801e338:	ee10 2a10 	vmov	r2, s0
 801e33c:	4620      	mov	r0, r4
 801e33e:	4629      	mov	r1, r5
 801e340:	f7e1 ffb2 	bl	80002a8 <__aeabi_dsub>
 801e344:	4602      	mov	r2, r0
 801e346:	460b      	mov	r3, r1
 801e348:	f7e2 fa90 	bl	800086c <__aeabi_ddiv>
 801e34c:	e7e4      	b.n	801e318 <__ieee754_sqrt+0x2c>
 801e34e:	151b      	asrs	r3, r3, #20
 801e350:	d073      	beq.n	801e43a <__ieee754_sqrt+0x14e>
 801e352:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e356:	07dd      	lsls	r5, r3, #31
 801e358:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801e35c:	bf48      	it	mi
 801e35e:	0fc8      	lsrmi	r0, r1, #31
 801e360:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801e364:	bf44      	itt	mi
 801e366:	0049      	lslmi	r1, r1, #1
 801e368:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801e36c:	2500      	movs	r5, #0
 801e36e:	1058      	asrs	r0, r3, #1
 801e370:	0fcb      	lsrs	r3, r1, #31
 801e372:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801e376:	0049      	lsls	r1, r1, #1
 801e378:	2316      	movs	r3, #22
 801e37a:	462c      	mov	r4, r5
 801e37c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801e380:	19a7      	adds	r7, r4, r6
 801e382:	4297      	cmp	r7, r2
 801e384:	bfde      	ittt	le
 801e386:	19bc      	addle	r4, r7, r6
 801e388:	1bd2      	suble	r2, r2, r7
 801e38a:	19ad      	addle	r5, r5, r6
 801e38c:	0fcf      	lsrs	r7, r1, #31
 801e38e:	3b01      	subs	r3, #1
 801e390:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801e394:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801e398:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801e39c:	d1f0      	bne.n	801e380 <__ieee754_sqrt+0x94>
 801e39e:	f04f 0c20 	mov.w	ip, #32
 801e3a2:	469e      	mov	lr, r3
 801e3a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e3a8:	42a2      	cmp	r2, r4
 801e3aa:	eb06 070e 	add.w	r7, r6, lr
 801e3ae:	dc02      	bgt.n	801e3b6 <__ieee754_sqrt+0xca>
 801e3b0:	d112      	bne.n	801e3d8 <__ieee754_sqrt+0xec>
 801e3b2:	428f      	cmp	r7, r1
 801e3b4:	d810      	bhi.n	801e3d8 <__ieee754_sqrt+0xec>
 801e3b6:	2f00      	cmp	r7, #0
 801e3b8:	eb07 0e06 	add.w	lr, r7, r6
 801e3bc:	da42      	bge.n	801e444 <__ieee754_sqrt+0x158>
 801e3be:	f1be 0f00 	cmp.w	lr, #0
 801e3c2:	db3f      	blt.n	801e444 <__ieee754_sqrt+0x158>
 801e3c4:	f104 0801 	add.w	r8, r4, #1
 801e3c8:	1b12      	subs	r2, r2, r4
 801e3ca:	428f      	cmp	r7, r1
 801e3cc:	bf88      	it	hi
 801e3ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801e3d2:	1bc9      	subs	r1, r1, r7
 801e3d4:	4433      	add	r3, r6
 801e3d6:	4644      	mov	r4, r8
 801e3d8:	0052      	lsls	r2, r2, #1
 801e3da:	f1bc 0c01 	subs.w	ip, ip, #1
 801e3de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801e3e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801e3e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801e3ea:	d1dd      	bne.n	801e3a8 <__ieee754_sqrt+0xbc>
 801e3ec:	430a      	orrs	r2, r1
 801e3ee:	d006      	beq.n	801e3fe <__ieee754_sqrt+0x112>
 801e3f0:	1c5c      	adds	r4, r3, #1
 801e3f2:	bf13      	iteet	ne
 801e3f4:	3301      	addne	r3, #1
 801e3f6:	3501      	addeq	r5, #1
 801e3f8:	4663      	moveq	r3, ip
 801e3fa:	f023 0301 	bicne.w	r3, r3, #1
 801e3fe:	106a      	asrs	r2, r5, #1
 801e400:	085b      	lsrs	r3, r3, #1
 801e402:	07e9      	lsls	r1, r5, #31
 801e404:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801e408:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801e40c:	bf48      	it	mi
 801e40e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801e412:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801e416:	461c      	mov	r4, r3
 801e418:	e780      	b.n	801e31c <__ieee754_sqrt+0x30>
 801e41a:	0aca      	lsrs	r2, r1, #11
 801e41c:	3815      	subs	r0, #21
 801e41e:	0549      	lsls	r1, r1, #21
 801e420:	2a00      	cmp	r2, #0
 801e422:	d0fa      	beq.n	801e41a <__ieee754_sqrt+0x12e>
 801e424:	02d6      	lsls	r6, r2, #11
 801e426:	d50a      	bpl.n	801e43e <__ieee754_sqrt+0x152>
 801e428:	f1c3 0420 	rsb	r4, r3, #32
 801e42c:	fa21 f404 	lsr.w	r4, r1, r4
 801e430:	1e5d      	subs	r5, r3, #1
 801e432:	4099      	lsls	r1, r3
 801e434:	4322      	orrs	r2, r4
 801e436:	1b43      	subs	r3, r0, r5
 801e438:	e78b      	b.n	801e352 <__ieee754_sqrt+0x66>
 801e43a:	4618      	mov	r0, r3
 801e43c:	e7f0      	b.n	801e420 <__ieee754_sqrt+0x134>
 801e43e:	0052      	lsls	r2, r2, #1
 801e440:	3301      	adds	r3, #1
 801e442:	e7ef      	b.n	801e424 <__ieee754_sqrt+0x138>
 801e444:	46a0      	mov	r8, r4
 801e446:	e7bf      	b.n	801e3c8 <__ieee754_sqrt+0xdc>
 801e448:	7ff00000 	.word	0x7ff00000

0801e44c <__ieee754_sqrtf>:
 801e44c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801e450:	4770      	bx	lr
 801e452:	0000      	movs	r0, r0
 801e454:	0000      	movs	r0, r0
	...

0801e458 <__kernel_cos>:
 801e458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e45c:	ec59 8b10 	vmov	r8, r9, d0
 801e460:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801e464:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801e468:	ed2d 8b02 	vpush	{d8}
 801e46c:	eeb0 8a41 	vmov.f32	s16, s2
 801e470:	eef0 8a61 	vmov.f32	s17, s3
 801e474:	da07      	bge.n	801e486 <__kernel_cos+0x2e>
 801e476:	ee10 0a10 	vmov	r0, s0
 801e47a:	4649      	mov	r1, r9
 801e47c:	f7e2 fb7c 	bl	8000b78 <__aeabi_d2iz>
 801e480:	2800      	cmp	r0, #0
 801e482:	f000 8089 	beq.w	801e598 <__kernel_cos+0x140>
 801e486:	4642      	mov	r2, r8
 801e488:	464b      	mov	r3, r9
 801e48a:	4640      	mov	r0, r8
 801e48c:	4649      	mov	r1, r9
 801e48e:	f7e2 f8c3 	bl	8000618 <__aeabi_dmul>
 801e492:	2200      	movs	r2, #0
 801e494:	4b4e      	ldr	r3, [pc, #312]	; (801e5d0 <__kernel_cos+0x178>)
 801e496:	4604      	mov	r4, r0
 801e498:	460d      	mov	r5, r1
 801e49a:	f7e2 f8bd 	bl	8000618 <__aeabi_dmul>
 801e49e:	a340      	add	r3, pc, #256	; (adr r3, 801e5a0 <__kernel_cos+0x148>)
 801e4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4a4:	4682      	mov	sl, r0
 801e4a6:	468b      	mov	fp, r1
 801e4a8:	4620      	mov	r0, r4
 801e4aa:	4629      	mov	r1, r5
 801e4ac:	f7e2 f8b4 	bl	8000618 <__aeabi_dmul>
 801e4b0:	a33d      	add	r3, pc, #244	; (adr r3, 801e5a8 <__kernel_cos+0x150>)
 801e4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4b6:	f7e1 fef9 	bl	80002ac <__adddf3>
 801e4ba:	4622      	mov	r2, r4
 801e4bc:	462b      	mov	r3, r5
 801e4be:	f7e2 f8ab 	bl	8000618 <__aeabi_dmul>
 801e4c2:	a33b      	add	r3, pc, #236	; (adr r3, 801e5b0 <__kernel_cos+0x158>)
 801e4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4c8:	f7e1 feee 	bl	80002a8 <__aeabi_dsub>
 801e4cc:	4622      	mov	r2, r4
 801e4ce:	462b      	mov	r3, r5
 801e4d0:	f7e2 f8a2 	bl	8000618 <__aeabi_dmul>
 801e4d4:	a338      	add	r3, pc, #224	; (adr r3, 801e5b8 <__kernel_cos+0x160>)
 801e4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4da:	f7e1 fee7 	bl	80002ac <__adddf3>
 801e4de:	4622      	mov	r2, r4
 801e4e0:	462b      	mov	r3, r5
 801e4e2:	f7e2 f899 	bl	8000618 <__aeabi_dmul>
 801e4e6:	a336      	add	r3, pc, #216	; (adr r3, 801e5c0 <__kernel_cos+0x168>)
 801e4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4ec:	f7e1 fedc 	bl	80002a8 <__aeabi_dsub>
 801e4f0:	4622      	mov	r2, r4
 801e4f2:	462b      	mov	r3, r5
 801e4f4:	f7e2 f890 	bl	8000618 <__aeabi_dmul>
 801e4f8:	a333      	add	r3, pc, #204	; (adr r3, 801e5c8 <__kernel_cos+0x170>)
 801e4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4fe:	f7e1 fed5 	bl	80002ac <__adddf3>
 801e502:	4622      	mov	r2, r4
 801e504:	462b      	mov	r3, r5
 801e506:	f7e2 f887 	bl	8000618 <__aeabi_dmul>
 801e50a:	4622      	mov	r2, r4
 801e50c:	462b      	mov	r3, r5
 801e50e:	f7e2 f883 	bl	8000618 <__aeabi_dmul>
 801e512:	ec53 2b18 	vmov	r2, r3, d8
 801e516:	4604      	mov	r4, r0
 801e518:	460d      	mov	r5, r1
 801e51a:	4640      	mov	r0, r8
 801e51c:	4649      	mov	r1, r9
 801e51e:	f7e2 f87b 	bl	8000618 <__aeabi_dmul>
 801e522:	460b      	mov	r3, r1
 801e524:	4602      	mov	r2, r0
 801e526:	4629      	mov	r1, r5
 801e528:	4620      	mov	r0, r4
 801e52a:	f7e1 febd 	bl	80002a8 <__aeabi_dsub>
 801e52e:	4b29      	ldr	r3, [pc, #164]	; (801e5d4 <__kernel_cos+0x17c>)
 801e530:	429e      	cmp	r6, r3
 801e532:	4680      	mov	r8, r0
 801e534:	4689      	mov	r9, r1
 801e536:	dc11      	bgt.n	801e55c <__kernel_cos+0x104>
 801e538:	4602      	mov	r2, r0
 801e53a:	460b      	mov	r3, r1
 801e53c:	4650      	mov	r0, sl
 801e53e:	4659      	mov	r1, fp
 801e540:	f7e1 feb2 	bl	80002a8 <__aeabi_dsub>
 801e544:	460b      	mov	r3, r1
 801e546:	4924      	ldr	r1, [pc, #144]	; (801e5d8 <__kernel_cos+0x180>)
 801e548:	4602      	mov	r2, r0
 801e54a:	2000      	movs	r0, #0
 801e54c:	f7e1 feac 	bl	80002a8 <__aeabi_dsub>
 801e550:	ecbd 8b02 	vpop	{d8}
 801e554:	ec41 0b10 	vmov	d0, r0, r1
 801e558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e55c:	4b1f      	ldr	r3, [pc, #124]	; (801e5dc <__kernel_cos+0x184>)
 801e55e:	491e      	ldr	r1, [pc, #120]	; (801e5d8 <__kernel_cos+0x180>)
 801e560:	429e      	cmp	r6, r3
 801e562:	bfcc      	ite	gt
 801e564:	4d1e      	ldrgt	r5, [pc, #120]	; (801e5e0 <__kernel_cos+0x188>)
 801e566:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801e56a:	2400      	movs	r4, #0
 801e56c:	4622      	mov	r2, r4
 801e56e:	462b      	mov	r3, r5
 801e570:	2000      	movs	r0, #0
 801e572:	f7e1 fe99 	bl	80002a8 <__aeabi_dsub>
 801e576:	4622      	mov	r2, r4
 801e578:	4606      	mov	r6, r0
 801e57a:	460f      	mov	r7, r1
 801e57c:	462b      	mov	r3, r5
 801e57e:	4650      	mov	r0, sl
 801e580:	4659      	mov	r1, fp
 801e582:	f7e1 fe91 	bl	80002a8 <__aeabi_dsub>
 801e586:	4642      	mov	r2, r8
 801e588:	464b      	mov	r3, r9
 801e58a:	f7e1 fe8d 	bl	80002a8 <__aeabi_dsub>
 801e58e:	4602      	mov	r2, r0
 801e590:	460b      	mov	r3, r1
 801e592:	4630      	mov	r0, r6
 801e594:	4639      	mov	r1, r7
 801e596:	e7d9      	b.n	801e54c <__kernel_cos+0xf4>
 801e598:	2000      	movs	r0, #0
 801e59a:	490f      	ldr	r1, [pc, #60]	; (801e5d8 <__kernel_cos+0x180>)
 801e59c:	e7d8      	b.n	801e550 <__kernel_cos+0xf8>
 801e59e:	bf00      	nop
 801e5a0:	be8838d4 	.word	0xbe8838d4
 801e5a4:	bda8fae9 	.word	0xbda8fae9
 801e5a8:	bdb4b1c4 	.word	0xbdb4b1c4
 801e5ac:	3e21ee9e 	.word	0x3e21ee9e
 801e5b0:	809c52ad 	.word	0x809c52ad
 801e5b4:	3e927e4f 	.word	0x3e927e4f
 801e5b8:	19cb1590 	.word	0x19cb1590
 801e5bc:	3efa01a0 	.word	0x3efa01a0
 801e5c0:	16c15177 	.word	0x16c15177
 801e5c4:	3f56c16c 	.word	0x3f56c16c
 801e5c8:	5555554c 	.word	0x5555554c
 801e5cc:	3fa55555 	.word	0x3fa55555
 801e5d0:	3fe00000 	.word	0x3fe00000
 801e5d4:	3fd33332 	.word	0x3fd33332
 801e5d8:	3ff00000 	.word	0x3ff00000
 801e5dc:	3fe90000 	.word	0x3fe90000
 801e5e0:	3fd20000 	.word	0x3fd20000
 801e5e4:	00000000 	.word	0x00000000

0801e5e8 <__kernel_rem_pio2>:
 801e5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ec:	ed2d 8b02 	vpush	{d8}
 801e5f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801e5f4:	1ed4      	subs	r4, r2, #3
 801e5f6:	9308      	str	r3, [sp, #32]
 801e5f8:	9101      	str	r1, [sp, #4]
 801e5fa:	4bc5      	ldr	r3, [pc, #788]	; (801e910 <__kernel_rem_pio2+0x328>)
 801e5fc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801e5fe:	9009      	str	r0, [sp, #36]	; 0x24
 801e600:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e604:	9304      	str	r3, [sp, #16]
 801e606:	9b08      	ldr	r3, [sp, #32]
 801e608:	3b01      	subs	r3, #1
 801e60a:	9307      	str	r3, [sp, #28]
 801e60c:	2318      	movs	r3, #24
 801e60e:	fb94 f4f3 	sdiv	r4, r4, r3
 801e612:	f06f 0317 	mvn.w	r3, #23
 801e616:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801e61a:	fb04 3303 	mla	r3, r4, r3, r3
 801e61e:	eb03 0a02 	add.w	sl, r3, r2
 801e622:	9b04      	ldr	r3, [sp, #16]
 801e624:	9a07      	ldr	r2, [sp, #28]
 801e626:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801e900 <__kernel_rem_pio2+0x318>
 801e62a:	eb03 0802 	add.w	r8, r3, r2
 801e62e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801e630:	1aa7      	subs	r7, r4, r2
 801e632:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801e636:	ae22      	add	r6, sp, #136	; 0x88
 801e638:	2500      	movs	r5, #0
 801e63a:	4545      	cmp	r5, r8
 801e63c:	dd13      	ble.n	801e666 <__kernel_rem_pio2+0x7e>
 801e63e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801e900 <__kernel_rem_pio2+0x318>
 801e642:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801e646:	2600      	movs	r6, #0
 801e648:	9b04      	ldr	r3, [sp, #16]
 801e64a:	429e      	cmp	r6, r3
 801e64c:	dc32      	bgt.n	801e6b4 <__kernel_rem_pio2+0xcc>
 801e64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e650:	9302      	str	r3, [sp, #8]
 801e652:	9b08      	ldr	r3, [sp, #32]
 801e654:	199d      	adds	r5, r3, r6
 801e656:	ab22      	add	r3, sp, #136	; 0x88
 801e658:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e65c:	9306      	str	r3, [sp, #24]
 801e65e:	ec59 8b18 	vmov	r8, r9, d8
 801e662:	2700      	movs	r7, #0
 801e664:	e01f      	b.n	801e6a6 <__kernel_rem_pio2+0xbe>
 801e666:	42ef      	cmn	r7, r5
 801e668:	d407      	bmi.n	801e67a <__kernel_rem_pio2+0x92>
 801e66a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801e66e:	f7e1 ff69 	bl	8000544 <__aeabi_i2d>
 801e672:	e8e6 0102 	strd	r0, r1, [r6], #8
 801e676:	3501      	adds	r5, #1
 801e678:	e7df      	b.n	801e63a <__kernel_rem_pio2+0x52>
 801e67a:	ec51 0b18 	vmov	r0, r1, d8
 801e67e:	e7f8      	b.n	801e672 <__kernel_rem_pio2+0x8a>
 801e680:	9906      	ldr	r1, [sp, #24]
 801e682:	9d02      	ldr	r5, [sp, #8]
 801e684:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801e688:	9106      	str	r1, [sp, #24]
 801e68a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801e68e:	9502      	str	r5, [sp, #8]
 801e690:	f7e1 ffc2 	bl	8000618 <__aeabi_dmul>
 801e694:	4602      	mov	r2, r0
 801e696:	460b      	mov	r3, r1
 801e698:	4640      	mov	r0, r8
 801e69a:	4649      	mov	r1, r9
 801e69c:	f7e1 fe06 	bl	80002ac <__adddf3>
 801e6a0:	3701      	adds	r7, #1
 801e6a2:	4680      	mov	r8, r0
 801e6a4:	4689      	mov	r9, r1
 801e6a6:	9b07      	ldr	r3, [sp, #28]
 801e6a8:	429f      	cmp	r7, r3
 801e6aa:	dde9      	ble.n	801e680 <__kernel_rem_pio2+0x98>
 801e6ac:	e8eb 8902 	strd	r8, r9, [fp], #8
 801e6b0:	3601      	adds	r6, #1
 801e6b2:	e7c9      	b.n	801e648 <__kernel_rem_pio2+0x60>
 801e6b4:	9b04      	ldr	r3, [sp, #16]
 801e6b6:	aa0e      	add	r2, sp, #56	; 0x38
 801e6b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e6bc:	930c      	str	r3, [sp, #48]	; 0x30
 801e6be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801e6c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801e6c4:	9c04      	ldr	r4, [sp, #16]
 801e6c6:	930b      	str	r3, [sp, #44]	; 0x2c
 801e6c8:	ab9a      	add	r3, sp, #616	; 0x268
 801e6ca:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801e6ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e6d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e6d6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801e6da:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801e6de:	ab9a      	add	r3, sp, #616	; 0x268
 801e6e0:	445b      	add	r3, fp
 801e6e2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801e6e6:	2500      	movs	r5, #0
 801e6e8:	1b63      	subs	r3, r4, r5
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	dc78      	bgt.n	801e7e0 <__kernel_rem_pio2+0x1f8>
 801e6ee:	4650      	mov	r0, sl
 801e6f0:	ec49 8b10 	vmov	d0, r8, r9
 801e6f4:	f000 fe3c 	bl	801f370 <scalbn>
 801e6f8:	ec57 6b10 	vmov	r6, r7, d0
 801e6fc:	2200      	movs	r2, #0
 801e6fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801e702:	ee10 0a10 	vmov	r0, s0
 801e706:	4639      	mov	r1, r7
 801e708:	f7e1 ff86 	bl	8000618 <__aeabi_dmul>
 801e70c:	ec41 0b10 	vmov	d0, r0, r1
 801e710:	f000 fd1a 	bl	801f148 <floor>
 801e714:	2200      	movs	r2, #0
 801e716:	ec51 0b10 	vmov	r0, r1, d0
 801e71a:	4b7e      	ldr	r3, [pc, #504]	; (801e914 <__kernel_rem_pio2+0x32c>)
 801e71c:	f7e1 ff7c 	bl	8000618 <__aeabi_dmul>
 801e720:	4602      	mov	r2, r0
 801e722:	460b      	mov	r3, r1
 801e724:	4630      	mov	r0, r6
 801e726:	4639      	mov	r1, r7
 801e728:	f7e1 fdbe 	bl	80002a8 <__aeabi_dsub>
 801e72c:	460f      	mov	r7, r1
 801e72e:	4606      	mov	r6, r0
 801e730:	f7e2 fa22 	bl	8000b78 <__aeabi_d2iz>
 801e734:	9006      	str	r0, [sp, #24]
 801e736:	f7e1 ff05 	bl	8000544 <__aeabi_i2d>
 801e73a:	4602      	mov	r2, r0
 801e73c:	460b      	mov	r3, r1
 801e73e:	4630      	mov	r0, r6
 801e740:	4639      	mov	r1, r7
 801e742:	f7e1 fdb1 	bl	80002a8 <__aeabi_dsub>
 801e746:	f1ba 0f00 	cmp.w	sl, #0
 801e74a:	4606      	mov	r6, r0
 801e74c:	460f      	mov	r7, r1
 801e74e:	dd6c      	ble.n	801e82a <__kernel_rem_pio2+0x242>
 801e750:	1e62      	subs	r2, r4, #1
 801e752:	ab0e      	add	r3, sp, #56	; 0x38
 801e754:	f1ca 0118 	rsb	r1, sl, #24
 801e758:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e75c:	9d06      	ldr	r5, [sp, #24]
 801e75e:	fa40 f301 	asr.w	r3, r0, r1
 801e762:	441d      	add	r5, r3
 801e764:	408b      	lsls	r3, r1
 801e766:	1ac0      	subs	r0, r0, r3
 801e768:	ab0e      	add	r3, sp, #56	; 0x38
 801e76a:	9506      	str	r5, [sp, #24]
 801e76c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801e770:	f1ca 0317 	rsb	r3, sl, #23
 801e774:	fa40 f303 	asr.w	r3, r0, r3
 801e778:	9302      	str	r3, [sp, #8]
 801e77a:	9b02      	ldr	r3, [sp, #8]
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	dd62      	ble.n	801e846 <__kernel_rem_pio2+0x25e>
 801e780:	9b06      	ldr	r3, [sp, #24]
 801e782:	2200      	movs	r2, #0
 801e784:	3301      	adds	r3, #1
 801e786:	9306      	str	r3, [sp, #24]
 801e788:	4615      	mov	r5, r2
 801e78a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801e78e:	4294      	cmp	r4, r2
 801e790:	f300 8095 	bgt.w	801e8be <__kernel_rem_pio2+0x2d6>
 801e794:	f1ba 0f00 	cmp.w	sl, #0
 801e798:	dd07      	ble.n	801e7aa <__kernel_rem_pio2+0x1c2>
 801e79a:	f1ba 0f01 	cmp.w	sl, #1
 801e79e:	f000 80a2 	beq.w	801e8e6 <__kernel_rem_pio2+0x2fe>
 801e7a2:	f1ba 0f02 	cmp.w	sl, #2
 801e7a6:	f000 80c1 	beq.w	801e92c <__kernel_rem_pio2+0x344>
 801e7aa:	9b02      	ldr	r3, [sp, #8]
 801e7ac:	2b02      	cmp	r3, #2
 801e7ae:	d14a      	bne.n	801e846 <__kernel_rem_pio2+0x25e>
 801e7b0:	4632      	mov	r2, r6
 801e7b2:	463b      	mov	r3, r7
 801e7b4:	2000      	movs	r0, #0
 801e7b6:	4958      	ldr	r1, [pc, #352]	; (801e918 <__kernel_rem_pio2+0x330>)
 801e7b8:	f7e1 fd76 	bl	80002a8 <__aeabi_dsub>
 801e7bc:	4606      	mov	r6, r0
 801e7be:	460f      	mov	r7, r1
 801e7c0:	2d00      	cmp	r5, #0
 801e7c2:	d040      	beq.n	801e846 <__kernel_rem_pio2+0x25e>
 801e7c4:	4650      	mov	r0, sl
 801e7c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801e908 <__kernel_rem_pio2+0x320>
 801e7ca:	f000 fdd1 	bl	801f370 <scalbn>
 801e7ce:	4630      	mov	r0, r6
 801e7d0:	4639      	mov	r1, r7
 801e7d2:	ec53 2b10 	vmov	r2, r3, d0
 801e7d6:	f7e1 fd67 	bl	80002a8 <__aeabi_dsub>
 801e7da:	4606      	mov	r6, r0
 801e7dc:	460f      	mov	r7, r1
 801e7de:	e032      	b.n	801e846 <__kernel_rem_pio2+0x25e>
 801e7e0:	2200      	movs	r2, #0
 801e7e2:	4b4e      	ldr	r3, [pc, #312]	; (801e91c <__kernel_rem_pio2+0x334>)
 801e7e4:	4640      	mov	r0, r8
 801e7e6:	4649      	mov	r1, r9
 801e7e8:	f7e1 ff16 	bl	8000618 <__aeabi_dmul>
 801e7ec:	f7e2 f9c4 	bl	8000b78 <__aeabi_d2iz>
 801e7f0:	f7e1 fea8 	bl	8000544 <__aeabi_i2d>
 801e7f4:	2200      	movs	r2, #0
 801e7f6:	4b4a      	ldr	r3, [pc, #296]	; (801e920 <__kernel_rem_pio2+0x338>)
 801e7f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e7fc:	f7e1 ff0c 	bl	8000618 <__aeabi_dmul>
 801e800:	4602      	mov	r2, r0
 801e802:	460b      	mov	r3, r1
 801e804:	4640      	mov	r0, r8
 801e806:	4649      	mov	r1, r9
 801e808:	f7e1 fd4e 	bl	80002a8 <__aeabi_dsub>
 801e80c:	f7e2 f9b4 	bl	8000b78 <__aeabi_d2iz>
 801e810:	ab0e      	add	r3, sp, #56	; 0x38
 801e812:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801e816:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801e81a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e81e:	f7e1 fd45 	bl	80002ac <__adddf3>
 801e822:	3501      	adds	r5, #1
 801e824:	4680      	mov	r8, r0
 801e826:	4689      	mov	r9, r1
 801e828:	e75e      	b.n	801e6e8 <__kernel_rem_pio2+0x100>
 801e82a:	d105      	bne.n	801e838 <__kernel_rem_pio2+0x250>
 801e82c:	1e63      	subs	r3, r4, #1
 801e82e:	aa0e      	add	r2, sp, #56	; 0x38
 801e830:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e834:	15c3      	asrs	r3, r0, #23
 801e836:	e79f      	b.n	801e778 <__kernel_rem_pio2+0x190>
 801e838:	2200      	movs	r2, #0
 801e83a:	4b3a      	ldr	r3, [pc, #232]	; (801e924 <__kernel_rem_pio2+0x33c>)
 801e83c:	f7e2 f972 	bl	8000b24 <__aeabi_dcmpge>
 801e840:	2800      	cmp	r0, #0
 801e842:	d139      	bne.n	801e8b8 <__kernel_rem_pio2+0x2d0>
 801e844:	9002      	str	r0, [sp, #8]
 801e846:	2200      	movs	r2, #0
 801e848:	2300      	movs	r3, #0
 801e84a:	4630      	mov	r0, r6
 801e84c:	4639      	mov	r1, r7
 801e84e:	f7e2 f94b 	bl	8000ae8 <__aeabi_dcmpeq>
 801e852:	2800      	cmp	r0, #0
 801e854:	f000 80c7 	beq.w	801e9e6 <__kernel_rem_pio2+0x3fe>
 801e858:	1e65      	subs	r5, r4, #1
 801e85a:	462b      	mov	r3, r5
 801e85c:	2200      	movs	r2, #0
 801e85e:	9904      	ldr	r1, [sp, #16]
 801e860:	428b      	cmp	r3, r1
 801e862:	da6a      	bge.n	801e93a <__kernel_rem_pio2+0x352>
 801e864:	2a00      	cmp	r2, #0
 801e866:	f000 8088 	beq.w	801e97a <__kernel_rem_pio2+0x392>
 801e86a:	ab0e      	add	r3, sp, #56	; 0x38
 801e86c:	f1aa 0a18 	sub.w	sl, sl, #24
 801e870:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801e874:	2b00      	cmp	r3, #0
 801e876:	f000 80b4 	beq.w	801e9e2 <__kernel_rem_pio2+0x3fa>
 801e87a:	4650      	mov	r0, sl
 801e87c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801e908 <__kernel_rem_pio2+0x320>
 801e880:	f000 fd76 	bl	801f370 <scalbn>
 801e884:	00ec      	lsls	r4, r5, #3
 801e886:	ab72      	add	r3, sp, #456	; 0x1c8
 801e888:	191e      	adds	r6, r3, r4
 801e88a:	ec59 8b10 	vmov	r8, r9, d0
 801e88e:	f106 0a08 	add.w	sl, r6, #8
 801e892:	462f      	mov	r7, r5
 801e894:	2f00      	cmp	r7, #0
 801e896:	f280 80df 	bge.w	801ea58 <__kernel_rem_pio2+0x470>
 801e89a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801e900 <__kernel_rem_pio2+0x318>
 801e89e:	f04f 0a00 	mov.w	sl, #0
 801e8a2:	eba5 030a 	sub.w	r3, r5, sl
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	f2c0 810a 	blt.w	801eac0 <__kernel_rem_pio2+0x4d8>
 801e8ac:	f8df b078 	ldr.w	fp, [pc, #120]	; 801e928 <__kernel_rem_pio2+0x340>
 801e8b0:	ec59 8b18 	vmov	r8, r9, d8
 801e8b4:	2700      	movs	r7, #0
 801e8b6:	e0f5      	b.n	801eaa4 <__kernel_rem_pio2+0x4bc>
 801e8b8:	2302      	movs	r3, #2
 801e8ba:	9302      	str	r3, [sp, #8]
 801e8bc:	e760      	b.n	801e780 <__kernel_rem_pio2+0x198>
 801e8be:	ab0e      	add	r3, sp, #56	; 0x38
 801e8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e8c4:	b94d      	cbnz	r5, 801e8da <__kernel_rem_pio2+0x2f2>
 801e8c6:	b12b      	cbz	r3, 801e8d4 <__kernel_rem_pio2+0x2ec>
 801e8c8:	a80e      	add	r0, sp, #56	; 0x38
 801e8ca:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801e8ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801e8d2:	2301      	movs	r3, #1
 801e8d4:	3201      	adds	r2, #1
 801e8d6:	461d      	mov	r5, r3
 801e8d8:	e759      	b.n	801e78e <__kernel_rem_pio2+0x1a6>
 801e8da:	a80e      	add	r0, sp, #56	; 0x38
 801e8dc:	1acb      	subs	r3, r1, r3
 801e8de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801e8e2:	462b      	mov	r3, r5
 801e8e4:	e7f6      	b.n	801e8d4 <__kernel_rem_pio2+0x2ec>
 801e8e6:	1e62      	subs	r2, r4, #1
 801e8e8:	ab0e      	add	r3, sp, #56	; 0x38
 801e8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e8ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801e8f2:	a90e      	add	r1, sp, #56	; 0x38
 801e8f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801e8f8:	e757      	b.n	801e7aa <__kernel_rem_pio2+0x1c2>
 801e8fa:	bf00      	nop
 801e8fc:	f3af 8000 	nop.w
	...
 801e90c:	3ff00000 	.word	0x3ff00000
 801e910:	080208e8 	.word	0x080208e8
 801e914:	40200000 	.word	0x40200000
 801e918:	3ff00000 	.word	0x3ff00000
 801e91c:	3e700000 	.word	0x3e700000
 801e920:	41700000 	.word	0x41700000
 801e924:	3fe00000 	.word	0x3fe00000
 801e928:	080208a8 	.word	0x080208a8
 801e92c:	1e62      	subs	r2, r4, #1
 801e92e:	ab0e      	add	r3, sp, #56	; 0x38
 801e930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e934:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801e938:	e7db      	b.n	801e8f2 <__kernel_rem_pio2+0x30a>
 801e93a:	a90e      	add	r1, sp, #56	; 0x38
 801e93c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801e940:	3b01      	subs	r3, #1
 801e942:	430a      	orrs	r2, r1
 801e944:	e78b      	b.n	801e85e <__kernel_rem_pio2+0x276>
 801e946:	3301      	adds	r3, #1
 801e948:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801e94c:	2900      	cmp	r1, #0
 801e94e:	d0fa      	beq.n	801e946 <__kernel_rem_pio2+0x35e>
 801e950:	9a08      	ldr	r2, [sp, #32]
 801e952:	4422      	add	r2, r4
 801e954:	00d2      	lsls	r2, r2, #3
 801e956:	a922      	add	r1, sp, #136	; 0x88
 801e958:	18e3      	adds	r3, r4, r3
 801e95a:	9206      	str	r2, [sp, #24]
 801e95c:	440a      	add	r2, r1
 801e95e:	9302      	str	r3, [sp, #8]
 801e960:	f10b 0108 	add.w	r1, fp, #8
 801e964:	f102 0308 	add.w	r3, r2, #8
 801e968:	1c66      	adds	r6, r4, #1
 801e96a:	910a      	str	r1, [sp, #40]	; 0x28
 801e96c:	2500      	movs	r5, #0
 801e96e:	930d      	str	r3, [sp, #52]	; 0x34
 801e970:	9b02      	ldr	r3, [sp, #8]
 801e972:	42b3      	cmp	r3, r6
 801e974:	da04      	bge.n	801e980 <__kernel_rem_pio2+0x398>
 801e976:	461c      	mov	r4, r3
 801e978:	e6a6      	b.n	801e6c8 <__kernel_rem_pio2+0xe0>
 801e97a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e97c:	2301      	movs	r3, #1
 801e97e:	e7e3      	b.n	801e948 <__kernel_rem_pio2+0x360>
 801e980:	9b06      	ldr	r3, [sp, #24]
 801e982:	18ef      	adds	r7, r5, r3
 801e984:	ab22      	add	r3, sp, #136	; 0x88
 801e986:	441f      	add	r7, r3
 801e988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e98a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801e98e:	f7e1 fdd9 	bl	8000544 <__aeabi_i2d>
 801e992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e994:	461c      	mov	r4, r3
 801e996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e998:	e9c7 0100 	strd	r0, r1, [r7]
 801e99c:	eb03 0b05 	add.w	fp, r3, r5
 801e9a0:	2700      	movs	r7, #0
 801e9a2:	f04f 0800 	mov.w	r8, #0
 801e9a6:	f04f 0900 	mov.w	r9, #0
 801e9aa:	9b07      	ldr	r3, [sp, #28]
 801e9ac:	429f      	cmp	r7, r3
 801e9ae:	dd08      	ble.n	801e9c2 <__kernel_rem_pio2+0x3da>
 801e9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9b2:	aa72      	add	r2, sp, #456	; 0x1c8
 801e9b4:	18eb      	adds	r3, r5, r3
 801e9b6:	4413      	add	r3, r2
 801e9b8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801e9bc:	3601      	adds	r6, #1
 801e9be:	3508      	adds	r5, #8
 801e9c0:	e7d6      	b.n	801e970 <__kernel_rem_pio2+0x388>
 801e9c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801e9c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801e9ca:	f7e1 fe25 	bl	8000618 <__aeabi_dmul>
 801e9ce:	4602      	mov	r2, r0
 801e9d0:	460b      	mov	r3, r1
 801e9d2:	4640      	mov	r0, r8
 801e9d4:	4649      	mov	r1, r9
 801e9d6:	f7e1 fc69 	bl	80002ac <__adddf3>
 801e9da:	3701      	adds	r7, #1
 801e9dc:	4680      	mov	r8, r0
 801e9de:	4689      	mov	r9, r1
 801e9e0:	e7e3      	b.n	801e9aa <__kernel_rem_pio2+0x3c2>
 801e9e2:	3d01      	subs	r5, #1
 801e9e4:	e741      	b.n	801e86a <__kernel_rem_pio2+0x282>
 801e9e6:	f1ca 0000 	rsb	r0, sl, #0
 801e9ea:	ec47 6b10 	vmov	d0, r6, r7
 801e9ee:	f000 fcbf 	bl	801f370 <scalbn>
 801e9f2:	ec57 6b10 	vmov	r6, r7, d0
 801e9f6:	2200      	movs	r2, #0
 801e9f8:	4b99      	ldr	r3, [pc, #612]	; (801ec60 <__kernel_rem_pio2+0x678>)
 801e9fa:	ee10 0a10 	vmov	r0, s0
 801e9fe:	4639      	mov	r1, r7
 801ea00:	f7e2 f890 	bl	8000b24 <__aeabi_dcmpge>
 801ea04:	b1f8      	cbz	r0, 801ea46 <__kernel_rem_pio2+0x45e>
 801ea06:	2200      	movs	r2, #0
 801ea08:	4b96      	ldr	r3, [pc, #600]	; (801ec64 <__kernel_rem_pio2+0x67c>)
 801ea0a:	4630      	mov	r0, r6
 801ea0c:	4639      	mov	r1, r7
 801ea0e:	f7e1 fe03 	bl	8000618 <__aeabi_dmul>
 801ea12:	f7e2 f8b1 	bl	8000b78 <__aeabi_d2iz>
 801ea16:	4680      	mov	r8, r0
 801ea18:	f7e1 fd94 	bl	8000544 <__aeabi_i2d>
 801ea1c:	2200      	movs	r2, #0
 801ea1e:	4b90      	ldr	r3, [pc, #576]	; (801ec60 <__kernel_rem_pio2+0x678>)
 801ea20:	f7e1 fdfa 	bl	8000618 <__aeabi_dmul>
 801ea24:	460b      	mov	r3, r1
 801ea26:	4602      	mov	r2, r0
 801ea28:	4639      	mov	r1, r7
 801ea2a:	4630      	mov	r0, r6
 801ea2c:	f7e1 fc3c 	bl	80002a8 <__aeabi_dsub>
 801ea30:	f7e2 f8a2 	bl	8000b78 <__aeabi_d2iz>
 801ea34:	1c65      	adds	r5, r4, #1
 801ea36:	ab0e      	add	r3, sp, #56	; 0x38
 801ea38:	f10a 0a18 	add.w	sl, sl, #24
 801ea3c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ea40:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801ea44:	e719      	b.n	801e87a <__kernel_rem_pio2+0x292>
 801ea46:	4630      	mov	r0, r6
 801ea48:	4639      	mov	r1, r7
 801ea4a:	f7e2 f895 	bl	8000b78 <__aeabi_d2iz>
 801ea4e:	ab0e      	add	r3, sp, #56	; 0x38
 801ea50:	4625      	mov	r5, r4
 801ea52:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ea56:	e710      	b.n	801e87a <__kernel_rem_pio2+0x292>
 801ea58:	ab0e      	add	r3, sp, #56	; 0x38
 801ea5a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801ea5e:	f7e1 fd71 	bl	8000544 <__aeabi_i2d>
 801ea62:	4642      	mov	r2, r8
 801ea64:	464b      	mov	r3, r9
 801ea66:	f7e1 fdd7 	bl	8000618 <__aeabi_dmul>
 801ea6a:	2200      	movs	r2, #0
 801ea6c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801ea70:	4b7c      	ldr	r3, [pc, #496]	; (801ec64 <__kernel_rem_pio2+0x67c>)
 801ea72:	4640      	mov	r0, r8
 801ea74:	4649      	mov	r1, r9
 801ea76:	f7e1 fdcf 	bl	8000618 <__aeabi_dmul>
 801ea7a:	3f01      	subs	r7, #1
 801ea7c:	4680      	mov	r8, r0
 801ea7e:	4689      	mov	r9, r1
 801ea80:	e708      	b.n	801e894 <__kernel_rem_pio2+0x2ac>
 801ea82:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea8a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801ea8e:	f7e1 fdc3 	bl	8000618 <__aeabi_dmul>
 801ea92:	4602      	mov	r2, r0
 801ea94:	460b      	mov	r3, r1
 801ea96:	4640      	mov	r0, r8
 801ea98:	4649      	mov	r1, r9
 801ea9a:	f7e1 fc07 	bl	80002ac <__adddf3>
 801ea9e:	3701      	adds	r7, #1
 801eaa0:	4680      	mov	r8, r0
 801eaa2:	4689      	mov	r9, r1
 801eaa4:	9b04      	ldr	r3, [sp, #16]
 801eaa6:	429f      	cmp	r7, r3
 801eaa8:	dc01      	bgt.n	801eaae <__kernel_rem_pio2+0x4c6>
 801eaaa:	45ba      	cmp	sl, r7
 801eaac:	dae9      	bge.n	801ea82 <__kernel_rem_pio2+0x49a>
 801eaae:	ab4a      	add	r3, sp, #296	; 0x128
 801eab0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801eab4:	e9c3 8900 	strd	r8, r9, [r3]
 801eab8:	f10a 0a01 	add.w	sl, sl, #1
 801eabc:	3e08      	subs	r6, #8
 801eabe:	e6f0      	b.n	801e8a2 <__kernel_rem_pio2+0x2ba>
 801eac0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801eac2:	2b03      	cmp	r3, #3
 801eac4:	d85b      	bhi.n	801eb7e <__kernel_rem_pio2+0x596>
 801eac6:	e8df f003 	tbb	[pc, r3]
 801eaca:	264a      	.short	0x264a
 801eacc:	0226      	.short	0x0226
 801eace:	ab9a      	add	r3, sp, #616	; 0x268
 801ead0:	441c      	add	r4, r3
 801ead2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801ead6:	46a2      	mov	sl, r4
 801ead8:	46ab      	mov	fp, r5
 801eada:	f1bb 0f00 	cmp.w	fp, #0
 801eade:	dc6c      	bgt.n	801ebba <__kernel_rem_pio2+0x5d2>
 801eae0:	46a2      	mov	sl, r4
 801eae2:	46ab      	mov	fp, r5
 801eae4:	f1bb 0f01 	cmp.w	fp, #1
 801eae8:	f300 8086 	bgt.w	801ebf8 <__kernel_rem_pio2+0x610>
 801eaec:	2000      	movs	r0, #0
 801eaee:	2100      	movs	r1, #0
 801eaf0:	2d01      	cmp	r5, #1
 801eaf2:	f300 80a0 	bgt.w	801ec36 <__kernel_rem_pio2+0x64e>
 801eaf6:	9b02      	ldr	r3, [sp, #8]
 801eaf8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801eafc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	f040 809e 	bne.w	801ec42 <__kernel_rem_pio2+0x65a>
 801eb06:	9b01      	ldr	r3, [sp, #4]
 801eb08:	e9c3 7800 	strd	r7, r8, [r3]
 801eb0c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801eb10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801eb14:	e033      	b.n	801eb7e <__kernel_rem_pio2+0x596>
 801eb16:	3408      	adds	r4, #8
 801eb18:	ab4a      	add	r3, sp, #296	; 0x128
 801eb1a:	441c      	add	r4, r3
 801eb1c:	462e      	mov	r6, r5
 801eb1e:	2000      	movs	r0, #0
 801eb20:	2100      	movs	r1, #0
 801eb22:	2e00      	cmp	r6, #0
 801eb24:	da3a      	bge.n	801eb9c <__kernel_rem_pio2+0x5b4>
 801eb26:	9b02      	ldr	r3, [sp, #8]
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	d03d      	beq.n	801eba8 <__kernel_rem_pio2+0x5c0>
 801eb2c:	4602      	mov	r2, r0
 801eb2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801eb32:	9c01      	ldr	r4, [sp, #4]
 801eb34:	e9c4 2300 	strd	r2, r3, [r4]
 801eb38:	4602      	mov	r2, r0
 801eb3a:	460b      	mov	r3, r1
 801eb3c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801eb40:	f7e1 fbb2 	bl	80002a8 <__aeabi_dsub>
 801eb44:	ae4c      	add	r6, sp, #304	; 0x130
 801eb46:	2401      	movs	r4, #1
 801eb48:	42a5      	cmp	r5, r4
 801eb4a:	da30      	bge.n	801ebae <__kernel_rem_pio2+0x5c6>
 801eb4c:	9b02      	ldr	r3, [sp, #8]
 801eb4e:	b113      	cbz	r3, 801eb56 <__kernel_rem_pio2+0x56e>
 801eb50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801eb54:	4619      	mov	r1, r3
 801eb56:	9b01      	ldr	r3, [sp, #4]
 801eb58:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801eb5c:	e00f      	b.n	801eb7e <__kernel_rem_pio2+0x596>
 801eb5e:	ab9a      	add	r3, sp, #616	; 0x268
 801eb60:	441c      	add	r4, r3
 801eb62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801eb66:	2000      	movs	r0, #0
 801eb68:	2100      	movs	r1, #0
 801eb6a:	2d00      	cmp	r5, #0
 801eb6c:	da10      	bge.n	801eb90 <__kernel_rem_pio2+0x5a8>
 801eb6e:	9b02      	ldr	r3, [sp, #8]
 801eb70:	b113      	cbz	r3, 801eb78 <__kernel_rem_pio2+0x590>
 801eb72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801eb76:	4619      	mov	r1, r3
 801eb78:	9b01      	ldr	r3, [sp, #4]
 801eb7a:	e9c3 0100 	strd	r0, r1, [r3]
 801eb7e:	9b06      	ldr	r3, [sp, #24]
 801eb80:	f003 0007 	and.w	r0, r3, #7
 801eb84:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801eb88:	ecbd 8b02 	vpop	{d8}
 801eb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb90:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801eb94:	f7e1 fb8a 	bl	80002ac <__adddf3>
 801eb98:	3d01      	subs	r5, #1
 801eb9a:	e7e6      	b.n	801eb6a <__kernel_rem_pio2+0x582>
 801eb9c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801eba0:	f7e1 fb84 	bl	80002ac <__adddf3>
 801eba4:	3e01      	subs	r6, #1
 801eba6:	e7bc      	b.n	801eb22 <__kernel_rem_pio2+0x53a>
 801eba8:	4602      	mov	r2, r0
 801ebaa:	460b      	mov	r3, r1
 801ebac:	e7c1      	b.n	801eb32 <__kernel_rem_pio2+0x54a>
 801ebae:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801ebb2:	f7e1 fb7b 	bl	80002ac <__adddf3>
 801ebb6:	3401      	adds	r4, #1
 801ebb8:	e7c6      	b.n	801eb48 <__kernel_rem_pio2+0x560>
 801ebba:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801ebbe:	ed3a 7b02 	vldmdb	sl!, {d7}
 801ebc2:	4640      	mov	r0, r8
 801ebc4:	ec53 2b17 	vmov	r2, r3, d7
 801ebc8:	4649      	mov	r1, r9
 801ebca:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ebce:	f7e1 fb6d 	bl	80002ac <__adddf3>
 801ebd2:	4602      	mov	r2, r0
 801ebd4:	460b      	mov	r3, r1
 801ebd6:	4606      	mov	r6, r0
 801ebd8:	460f      	mov	r7, r1
 801ebda:	4640      	mov	r0, r8
 801ebdc:	4649      	mov	r1, r9
 801ebde:	f7e1 fb63 	bl	80002a8 <__aeabi_dsub>
 801ebe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ebe6:	f7e1 fb61 	bl	80002ac <__adddf3>
 801ebea:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ebee:	e9ca 0100 	strd	r0, r1, [sl]
 801ebf2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801ebf6:	e770      	b.n	801eada <__kernel_rem_pio2+0x4f2>
 801ebf8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801ebfc:	ed3a 7b02 	vldmdb	sl!, {d7}
 801ec00:	4630      	mov	r0, r6
 801ec02:	ec53 2b17 	vmov	r2, r3, d7
 801ec06:	4639      	mov	r1, r7
 801ec08:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ec0c:	f7e1 fb4e 	bl	80002ac <__adddf3>
 801ec10:	4602      	mov	r2, r0
 801ec12:	460b      	mov	r3, r1
 801ec14:	4680      	mov	r8, r0
 801ec16:	4689      	mov	r9, r1
 801ec18:	4630      	mov	r0, r6
 801ec1a:	4639      	mov	r1, r7
 801ec1c:	f7e1 fb44 	bl	80002a8 <__aeabi_dsub>
 801ec20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ec24:	f7e1 fb42 	bl	80002ac <__adddf3>
 801ec28:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ec2c:	e9ca 0100 	strd	r0, r1, [sl]
 801ec30:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801ec34:	e756      	b.n	801eae4 <__kernel_rem_pio2+0x4fc>
 801ec36:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ec3a:	f7e1 fb37 	bl	80002ac <__adddf3>
 801ec3e:	3d01      	subs	r5, #1
 801ec40:	e756      	b.n	801eaf0 <__kernel_rem_pio2+0x508>
 801ec42:	9b01      	ldr	r3, [sp, #4]
 801ec44:	9a01      	ldr	r2, [sp, #4]
 801ec46:	601f      	str	r7, [r3, #0]
 801ec48:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801ec4c:	605c      	str	r4, [r3, #4]
 801ec4e:	609d      	str	r5, [r3, #8]
 801ec50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801ec54:	60d3      	str	r3, [r2, #12]
 801ec56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ec5a:	6110      	str	r0, [r2, #16]
 801ec5c:	6153      	str	r3, [r2, #20]
 801ec5e:	e78e      	b.n	801eb7e <__kernel_rem_pio2+0x596>
 801ec60:	41700000 	.word	0x41700000
 801ec64:	3e700000 	.word	0x3e700000

0801ec68 <__kernel_sin>:
 801ec68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec6c:	ec55 4b10 	vmov	r4, r5, d0
 801ec70:	b085      	sub	sp, #20
 801ec72:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ec76:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ec7a:	ed8d 1b00 	vstr	d1, [sp]
 801ec7e:	9002      	str	r0, [sp, #8]
 801ec80:	da06      	bge.n	801ec90 <__kernel_sin+0x28>
 801ec82:	ee10 0a10 	vmov	r0, s0
 801ec86:	4629      	mov	r1, r5
 801ec88:	f7e1 ff76 	bl	8000b78 <__aeabi_d2iz>
 801ec8c:	2800      	cmp	r0, #0
 801ec8e:	d051      	beq.n	801ed34 <__kernel_sin+0xcc>
 801ec90:	4622      	mov	r2, r4
 801ec92:	462b      	mov	r3, r5
 801ec94:	4620      	mov	r0, r4
 801ec96:	4629      	mov	r1, r5
 801ec98:	f7e1 fcbe 	bl	8000618 <__aeabi_dmul>
 801ec9c:	4682      	mov	sl, r0
 801ec9e:	468b      	mov	fp, r1
 801eca0:	4602      	mov	r2, r0
 801eca2:	460b      	mov	r3, r1
 801eca4:	4620      	mov	r0, r4
 801eca6:	4629      	mov	r1, r5
 801eca8:	f7e1 fcb6 	bl	8000618 <__aeabi_dmul>
 801ecac:	a341      	add	r3, pc, #260	; (adr r3, 801edb4 <__kernel_sin+0x14c>)
 801ecae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecb2:	4680      	mov	r8, r0
 801ecb4:	4689      	mov	r9, r1
 801ecb6:	4650      	mov	r0, sl
 801ecb8:	4659      	mov	r1, fp
 801ecba:	f7e1 fcad 	bl	8000618 <__aeabi_dmul>
 801ecbe:	a33f      	add	r3, pc, #252	; (adr r3, 801edbc <__kernel_sin+0x154>)
 801ecc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecc4:	f7e1 faf0 	bl	80002a8 <__aeabi_dsub>
 801ecc8:	4652      	mov	r2, sl
 801ecca:	465b      	mov	r3, fp
 801eccc:	f7e1 fca4 	bl	8000618 <__aeabi_dmul>
 801ecd0:	a33c      	add	r3, pc, #240	; (adr r3, 801edc4 <__kernel_sin+0x15c>)
 801ecd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecd6:	f7e1 fae9 	bl	80002ac <__adddf3>
 801ecda:	4652      	mov	r2, sl
 801ecdc:	465b      	mov	r3, fp
 801ecde:	f7e1 fc9b 	bl	8000618 <__aeabi_dmul>
 801ece2:	a33a      	add	r3, pc, #232	; (adr r3, 801edcc <__kernel_sin+0x164>)
 801ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ece8:	f7e1 fade 	bl	80002a8 <__aeabi_dsub>
 801ecec:	4652      	mov	r2, sl
 801ecee:	465b      	mov	r3, fp
 801ecf0:	f7e1 fc92 	bl	8000618 <__aeabi_dmul>
 801ecf4:	a337      	add	r3, pc, #220	; (adr r3, 801edd4 <__kernel_sin+0x16c>)
 801ecf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecfa:	f7e1 fad7 	bl	80002ac <__adddf3>
 801ecfe:	9b02      	ldr	r3, [sp, #8]
 801ed00:	4606      	mov	r6, r0
 801ed02:	460f      	mov	r7, r1
 801ed04:	b9db      	cbnz	r3, 801ed3e <__kernel_sin+0xd6>
 801ed06:	4602      	mov	r2, r0
 801ed08:	460b      	mov	r3, r1
 801ed0a:	4650      	mov	r0, sl
 801ed0c:	4659      	mov	r1, fp
 801ed0e:	f7e1 fc83 	bl	8000618 <__aeabi_dmul>
 801ed12:	a325      	add	r3, pc, #148	; (adr r3, 801eda8 <__kernel_sin+0x140>)
 801ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed18:	f7e1 fac6 	bl	80002a8 <__aeabi_dsub>
 801ed1c:	4642      	mov	r2, r8
 801ed1e:	464b      	mov	r3, r9
 801ed20:	f7e1 fc7a 	bl	8000618 <__aeabi_dmul>
 801ed24:	4602      	mov	r2, r0
 801ed26:	460b      	mov	r3, r1
 801ed28:	4620      	mov	r0, r4
 801ed2a:	4629      	mov	r1, r5
 801ed2c:	f7e1 fabe 	bl	80002ac <__adddf3>
 801ed30:	4604      	mov	r4, r0
 801ed32:	460d      	mov	r5, r1
 801ed34:	ec45 4b10 	vmov	d0, r4, r5
 801ed38:	b005      	add	sp, #20
 801ed3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed3e:	2200      	movs	r2, #0
 801ed40:	4b1b      	ldr	r3, [pc, #108]	; (801edb0 <__kernel_sin+0x148>)
 801ed42:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ed46:	f7e1 fc67 	bl	8000618 <__aeabi_dmul>
 801ed4a:	4632      	mov	r2, r6
 801ed4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed50:	463b      	mov	r3, r7
 801ed52:	4640      	mov	r0, r8
 801ed54:	4649      	mov	r1, r9
 801ed56:	f7e1 fc5f 	bl	8000618 <__aeabi_dmul>
 801ed5a:	4602      	mov	r2, r0
 801ed5c:	460b      	mov	r3, r1
 801ed5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ed62:	f7e1 faa1 	bl	80002a8 <__aeabi_dsub>
 801ed66:	4652      	mov	r2, sl
 801ed68:	465b      	mov	r3, fp
 801ed6a:	f7e1 fc55 	bl	8000618 <__aeabi_dmul>
 801ed6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ed72:	f7e1 fa99 	bl	80002a8 <__aeabi_dsub>
 801ed76:	a30c      	add	r3, pc, #48	; (adr r3, 801eda8 <__kernel_sin+0x140>)
 801ed78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed7c:	4606      	mov	r6, r0
 801ed7e:	460f      	mov	r7, r1
 801ed80:	4640      	mov	r0, r8
 801ed82:	4649      	mov	r1, r9
 801ed84:	f7e1 fc48 	bl	8000618 <__aeabi_dmul>
 801ed88:	4602      	mov	r2, r0
 801ed8a:	460b      	mov	r3, r1
 801ed8c:	4630      	mov	r0, r6
 801ed8e:	4639      	mov	r1, r7
 801ed90:	f7e1 fa8c 	bl	80002ac <__adddf3>
 801ed94:	4602      	mov	r2, r0
 801ed96:	460b      	mov	r3, r1
 801ed98:	4620      	mov	r0, r4
 801ed9a:	4629      	mov	r1, r5
 801ed9c:	f7e1 fa84 	bl	80002a8 <__aeabi_dsub>
 801eda0:	e7c6      	b.n	801ed30 <__kernel_sin+0xc8>
 801eda2:	bf00      	nop
 801eda4:	f3af 8000 	nop.w
 801eda8:	55555549 	.word	0x55555549
 801edac:	3fc55555 	.word	0x3fc55555
 801edb0:	3fe00000 	.word	0x3fe00000
 801edb4:	5acfd57c 	.word	0x5acfd57c
 801edb8:	3de5d93a 	.word	0x3de5d93a
 801edbc:	8a2b9ceb 	.word	0x8a2b9ceb
 801edc0:	3e5ae5e6 	.word	0x3e5ae5e6
 801edc4:	57b1fe7d 	.word	0x57b1fe7d
 801edc8:	3ec71de3 	.word	0x3ec71de3
 801edcc:	19c161d5 	.word	0x19c161d5
 801edd0:	3f2a01a0 	.word	0x3f2a01a0
 801edd4:	1110f8a6 	.word	0x1110f8a6
 801edd8:	3f811111 	.word	0x3f811111
 801eddc:	00000000 	.word	0x00000000

0801ede0 <atan>:
 801ede0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ede4:	ec55 4b10 	vmov	r4, r5, d0
 801ede8:	4bc3      	ldr	r3, [pc, #780]	; (801f0f8 <atan+0x318>)
 801edea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801edee:	429e      	cmp	r6, r3
 801edf0:	46ab      	mov	fp, r5
 801edf2:	dd18      	ble.n	801ee26 <atan+0x46>
 801edf4:	4bc1      	ldr	r3, [pc, #772]	; (801f0fc <atan+0x31c>)
 801edf6:	429e      	cmp	r6, r3
 801edf8:	dc01      	bgt.n	801edfe <atan+0x1e>
 801edfa:	d109      	bne.n	801ee10 <atan+0x30>
 801edfc:	b144      	cbz	r4, 801ee10 <atan+0x30>
 801edfe:	4622      	mov	r2, r4
 801ee00:	462b      	mov	r3, r5
 801ee02:	4620      	mov	r0, r4
 801ee04:	4629      	mov	r1, r5
 801ee06:	f7e1 fa51 	bl	80002ac <__adddf3>
 801ee0a:	4604      	mov	r4, r0
 801ee0c:	460d      	mov	r5, r1
 801ee0e:	e006      	b.n	801ee1e <atan+0x3e>
 801ee10:	f1bb 0f00 	cmp.w	fp, #0
 801ee14:	f340 8131 	ble.w	801f07a <atan+0x29a>
 801ee18:	a59b      	add	r5, pc, #620	; (adr r5, 801f088 <atan+0x2a8>)
 801ee1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ee1e:	ec45 4b10 	vmov	d0, r4, r5
 801ee22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee26:	4bb6      	ldr	r3, [pc, #728]	; (801f100 <atan+0x320>)
 801ee28:	429e      	cmp	r6, r3
 801ee2a:	dc14      	bgt.n	801ee56 <atan+0x76>
 801ee2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ee30:	429e      	cmp	r6, r3
 801ee32:	dc0d      	bgt.n	801ee50 <atan+0x70>
 801ee34:	a396      	add	r3, pc, #600	; (adr r3, 801f090 <atan+0x2b0>)
 801ee36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee3a:	ee10 0a10 	vmov	r0, s0
 801ee3e:	4629      	mov	r1, r5
 801ee40:	f7e1 fa34 	bl	80002ac <__adddf3>
 801ee44:	2200      	movs	r2, #0
 801ee46:	4baf      	ldr	r3, [pc, #700]	; (801f104 <atan+0x324>)
 801ee48:	f7e1 fe76 	bl	8000b38 <__aeabi_dcmpgt>
 801ee4c:	2800      	cmp	r0, #0
 801ee4e:	d1e6      	bne.n	801ee1e <atan+0x3e>
 801ee50:	f04f 3aff 	mov.w	sl, #4294967295
 801ee54:	e02b      	b.n	801eeae <atan+0xce>
 801ee56:	f000 f963 	bl	801f120 <fabs>
 801ee5a:	4bab      	ldr	r3, [pc, #684]	; (801f108 <atan+0x328>)
 801ee5c:	429e      	cmp	r6, r3
 801ee5e:	ec55 4b10 	vmov	r4, r5, d0
 801ee62:	f300 80bf 	bgt.w	801efe4 <atan+0x204>
 801ee66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ee6a:	429e      	cmp	r6, r3
 801ee6c:	f300 80a0 	bgt.w	801efb0 <atan+0x1d0>
 801ee70:	ee10 2a10 	vmov	r2, s0
 801ee74:	ee10 0a10 	vmov	r0, s0
 801ee78:	462b      	mov	r3, r5
 801ee7a:	4629      	mov	r1, r5
 801ee7c:	f7e1 fa16 	bl	80002ac <__adddf3>
 801ee80:	2200      	movs	r2, #0
 801ee82:	4ba0      	ldr	r3, [pc, #640]	; (801f104 <atan+0x324>)
 801ee84:	f7e1 fa10 	bl	80002a8 <__aeabi_dsub>
 801ee88:	2200      	movs	r2, #0
 801ee8a:	4606      	mov	r6, r0
 801ee8c:	460f      	mov	r7, r1
 801ee8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ee92:	4620      	mov	r0, r4
 801ee94:	4629      	mov	r1, r5
 801ee96:	f7e1 fa09 	bl	80002ac <__adddf3>
 801ee9a:	4602      	mov	r2, r0
 801ee9c:	460b      	mov	r3, r1
 801ee9e:	4630      	mov	r0, r6
 801eea0:	4639      	mov	r1, r7
 801eea2:	f7e1 fce3 	bl	800086c <__aeabi_ddiv>
 801eea6:	f04f 0a00 	mov.w	sl, #0
 801eeaa:	4604      	mov	r4, r0
 801eeac:	460d      	mov	r5, r1
 801eeae:	4622      	mov	r2, r4
 801eeb0:	462b      	mov	r3, r5
 801eeb2:	4620      	mov	r0, r4
 801eeb4:	4629      	mov	r1, r5
 801eeb6:	f7e1 fbaf 	bl	8000618 <__aeabi_dmul>
 801eeba:	4602      	mov	r2, r0
 801eebc:	460b      	mov	r3, r1
 801eebe:	4680      	mov	r8, r0
 801eec0:	4689      	mov	r9, r1
 801eec2:	f7e1 fba9 	bl	8000618 <__aeabi_dmul>
 801eec6:	a374      	add	r3, pc, #464	; (adr r3, 801f098 <atan+0x2b8>)
 801eec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eecc:	4606      	mov	r6, r0
 801eece:	460f      	mov	r7, r1
 801eed0:	f7e1 fba2 	bl	8000618 <__aeabi_dmul>
 801eed4:	a372      	add	r3, pc, #456	; (adr r3, 801f0a0 <atan+0x2c0>)
 801eed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeda:	f7e1 f9e7 	bl	80002ac <__adddf3>
 801eede:	4632      	mov	r2, r6
 801eee0:	463b      	mov	r3, r7
 801eee2:	f7e1 fb99 	bl	8000618 <__aeabi_dmul>
 801eee6:	a370      	add	r3, pc, #448	; (adr r3, 801f0a8 <atan+0x2c8>)
 801eee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeec:	f7e1 f9de 	bl	80002ac <__adddf3>
 801eef0:	4632      	mov	r2, r6
 801eef2:	463b      	mov	r3, r7
 801eef4:	f7e1 fb90 	bl	8000618 <__aeabi_dmul>
 801eef8:	a36d      	add	r3, pc, #436	; (adr r3, 801f0b0 <atan+0x2d0>)
 801eefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eefe:	f7e1 f9d5 	bl	80002ac <__adddf3>
 801ef02:	4632      	mov	r2, r6
 801ef04:	463b      	mov	r3, r7
 801ef06:	f7e1 fb87 	bl	8000618 <__aeabi_dmul>
 801ef0a:	a36b      	add	r3, pc, #428	; (adr r3, 801f0b8 <atan+0x2d8>)
 801ef0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef10:	f7e1 f9cc 	bl	80002ac <__adddf3>
 801ef14:	4632      	mov	r2, r6
 801ef16:	463b      	mov	r3, r7
 801ef18:	f7e1 fb7e 	bl	8000618 <__aeabi_dmul>
 801ef1c:	a368      	add	r3, pc, #416	; (adr r3, 801f0c0 <atan+0x2e0>)
 801ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef22:	f7e1 f9c3 	bl	80002ac <__adddf3>
 801ef26:	4642      	mov	r2, r8
 801ef28:	464b      	mov	r3, r9
 801ef2a:	f7e1 fb75 	bl	8000618 <__aeabi_dmul>
 801ef2e:	a366      	add	r3, pc, #408	; (adr r3, 801f0c8 <atan+0x2e8>)
 801ef30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef34:	4680      	mov	r8, r0
 801ef36:	4689      	mov	r9, r1
 801ef38:	4630      	mov	r0, r6
 801ef3a:	4639      	mov	r1, r7
 801ef3c:	f7e1 fb6c 	bl	8000618 <__aeabi_dmul>
 801ef40:	a363      	add	r3, pc, #396	; (adr r3, 801f0d0 <atan+0x2f0>)
 801ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef46:	f7e1 f9af 	bl	80002a8 <__aeabi_dsub>
 801ef4a:	4632      	mov	r2, r6
 801ef4c:	463b      	mov	r3, r7
 801ef4e:	f7e1 fb63 	bl	8000618 <__aeabi_dmul>
 801ef52:	a361      	add	r3, pc, #388	; (adr r3, 801f0d8 <atan+0x2f8>)
 801ef54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef58:	f7e1 f9a6 	bl	80002a8 <__aeabi_dsub>
 801ef5c:	4632      	mov	r2, r6
 801ef5e:	463b      	mov	r3, r7
 801ef60:	f7e1 fb5a 	bl	8000618 <__aeabi_dmul>
 801ef64:	a35e      	add	r3, pc, #376	; (adr r3, 801f0e0 <atan+0x300>)
 801ef66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef6a:	f7e1 f99d 	bl	80002a8 <__aeabi_dsub>
 801ef6e:	4632      	mov	r2, r6
 801ef70:	463b      	mov	r3, r7
 801ef72:	f7e1 fb51 	bl	8000618 <__aeabi_dmul>
 801ef76:	a35c      	add	r3, pc, #368	; (adr r3, 801f0e8 <atan+0x308>)
 801ef78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef7c:	f7e1 f994 	bl	80002a8 <__aeabi_dsub>
 801ef80:	4632      	mov	r2, r6
 801ef82:	463b      	mov	r3, r7
 801ef84:	f7e1 fb48 	bl	8000618 <__aeabi_dmul>
 801ef88:	4602      	mov	r2, r0
 801ef8a:	460b      	mov	r3, r1
 801ef8c:	4640      	mov	r0, r8
 801ef8e:	4649      	mov	r1, r9
 801ef90:	f7e1 f98c 	bl	80002ac <__adddf3>
 801ef94:	4622      	mov	r2, r4
 801ef96:	462b      	mov	r3, r5
 801ef98:	f7e1 fb3e 	bl	8000618 <__aeabi_dmul>
 801ef9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801efa0:	4602      	mov	r2, r0
 801efa2:	460b      	mov	r3, r1
 801efa4:	d14b      	bne.n	801f03e <atan+0x25e>
 801efa6:	4620      	mov	r0, r4
 801efa8:	4629      	mov	r1, r5
 801efaa:	f7e1 f97d 	bl	80002a8 <__aeabi_dsub>
 801efae:	e72c      	b.n	801ee0a <atan+0x2a>
 801efb0:	ee10 0a10 	vmov	r0, s0
 801efb4:	2200      	movs	r2, #0
 801efb6:	4b53      	ldr	r3, [pc, #332]	; (801f104 <atan+0x324>)
 801efb8:	4629      	mov	r1, r5
 801efba:	f7e1 f975 	bl	80002a8 <__aeabi_dsub>
 801efbe:	2200      	movs	r2, #0
 801efc0:	4606      	mov	r6, r0
 801efc2:	460f      	mov	r7, r1
 801efc4:	4b4f      	ldr	r3, [pc, #316]	; (801f104 <atan+0x324>)
 801efc6:	4620      	mov	r0, r4
 801efc8:	4629      	mov	r1, r5
 801efca:	f7e1 f96f 	bl	80002ac <__adddf3>
 801efce:	4602      	mov	r2, r0
 801efd0:	460b      	mov	r3, r1
 801efd2:	4630      	mov	r0, r6
 801efd4:	4639      	mov	r1, r7
 801efd6:	f7e1 fc49 	bl	800086c <__aeabi_ddiv>
 801efda:	f04f 0a01 	mov.w	sl, #1
 801efde:	4604      	mov	r4, r0
 801efe0:	460d      	mov	r5, r1
 801efe2:	e764      	b.n	801eeae <atan+0xce>
 801efe4:	4b49      	ldr	r3, [pc, #292]	; (801f10c <atan+0x32c>)
 801efe6:	429e      	cmp	r6, r3
 801efe8:	dc1d      	bgt.n	801f026 <atan+0x246>
 801efea:	ee10 0a10 	vmov	r0, s0
 801efee:	2200      	movs	r2, #0
 801eff0:	4b47      	ldr	r3, [pc, #284]	; (801f110 <atan+0x330>)
 801eff2:	4629      	mov	r1, r5
 801eff4:	f7e1 f958 	bl	80002a8 <__aeabi_dsub>
 801eff8:	2200      	movs	r2, #0
 801effa:	4606      	mov	r6, r0
 801effc:	460f      	mov	r7, r1
 801effe:	4b44      	ldr	r3, [pc, #272]	; (801f110 <atan+0x330>)
 801f000:	4620      	mov	r0, r4
 801f002:	4629      	mov	r1, r5
 801f004:	f7e1 fb08 	bl	8000618 <__aeabi_dmul>
 801f008:	2200      	movs	r2, #0
 801f00a:	4b3e      	ldr	r3, [pc, #248]	; (801f104 <atan+0x324>)
 801f00c:	f7e1 f94e 	bl	80002ac <__adddf3>
 801f010:	4602      	mov	r2, r0
 801f012:	460b      	mov	r3, r1
 801f014:	4630      	mov	r0, r6
 801f016:	4639      	mov	r1, r7
 801f018:	f7e1 fc28 	bl	800086c <__aeabi_ddiv>
 801f01c:	f04f 0a02 	mov.w	sl, #2
 801f020:	4604      	mov	r4, r0
 801f022:	460d      	mov	r5, r1
 801f024:	e743      	b.n	801eeae <atan+0xce>
 801f026:	462b      	mov	r3, r5
 801f028:	ee10 2a10 	vmov	r2, s0
 801f02c:	2000      	movs	r0, #0
 801f02e:	4939      	ldr	r1, [pc, #228]	; (801f114 <atan+0x334>)
 801f030:	f7e1 fc1c 	bl	800086c <__aeabi_ddiv>
 801f034:	f04f 0a03 	mov.w	sl, #3
 801f038:	4604      	mov	r4, r0
 801f03a:	460d      	mov	r5, r1
 801f03c:	e737      	b.n	801eeae <atan+0xce>
 801f03e:	4b36      	ldr	r3, [pc, #216]	; (801f118 <atan+0x338>)
 801f040:	4e36      	ldr	r6, [pc, #216]	; (801f11c <atan+0x33c>)
 801f042:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801f046:	4456      	add	r6, sl
 801f048:	449a      	add	sl, r3
 801f04a:	e9da 2300 	ldrd	r2, r3, [sl]
 801f04e:	f7e1 f92b 	bl	80002a8 <__aeabi_dsub>
 801f052:	4622      	mov	r2, r4
 801f054:	462b      	mov	r3, r5
 801f056:	f7e1 f927 	bl	80002a8 <__aeabi_dsub>
 801f05a:	4602      	mov	r2, r0
 801f05c:	460b      	mov	r3, r1
 801f05e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801f062:	f7e1 f921 	bl	80002a8 <__aeabi_dsub>
 801f066:	f1bb 0f00 	cmp.w	fp, #0
 801f06a:	4604      	mov	r4, r0
 801f06c:	460d      	mov	r5, r1
 801f06e:	f6bf aed6 	bge.w	801ee1e <atan+0x3e>
 801f072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f076:	461d      	mov	r5, r3
 801f078:	e6d1      	b.n	801ee1e <atan+0x3e>
 801f07a:	a51d      	add	r5, pc, #116	; (adr r5, 801f0f0 <atan+0x310>)
 801f07c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f080:	e6cd      	b.n	801ee1e <atan+0x3e>
 801f082:	bf00      	nop
 801f084:	f3af 8000 	nop.w
 801f088:	54442d18 	.word	0x54442d18
 801f08c:	3ff921fb 	.word	0x3ff921fb
 801f090:	8800759c 	.word	0x8800759c
 801f094:	7e37e43c 	.word	0x7e37e43c
 801f098:	e322da11 	.word	0xe322da11
 801f09c:	3f90ad3a 	.word	0x3f90ad3a
 801f0a0:	24760deb 	.word	0x24760deb
 801f0a4:	3fa97b4b 	.word	0x3fa97b4b
 801f0a8:	a0d03d51 	.word	0xa0d03d51
 801f0ac:	3fb10d66 	.word	0x3fb10d66
 801f0b0:	c54c206e 	.word	0xc54c206e
 801f0b4:	3fb745cd 	.word	0x3fb745cd
 801f0b8:	920083ff 	.word	0x920083ff
 801f0bc:	3fc24924 	.word	0x3fc24924
 801f0c0:	5555550d 	.word	0x5555550d
 801f0c4:	3fd55555 	.word	0x3fd55555
 801f0c8:	2c6a6c2f 	.word	0x2c6a6c2f
 801f0cc:	bfa2b444 	.word	0xbfa2b444
 801f0d0:	52defd9a 	.word	0x52defd9a
 801f0d4:	3fadde2d 	.word	0x3fadde2d
 801f0d8:	af749a6d 	.word	0xaf749a6d
 801f0dc:	3fb3b0f2 	.word	0x3fb3b0f2
 801f0e0:	fe231671 	.word	0xfe231671
 801f0e4:	3fbc71c6 	.word	0x3fbc71c6
 801f0e8:	9998ebc4 	.word	0x9998ebc4
 801f0ec:	3fc99999 	.word	0x3fc99999
 801f0f0:	54442d18 	.word	0x54442d18
 801f0f4:	bff921fb 	.word	0xbff921fb
 801f0f8:	440fffff 	.word	0x440fffff
 801f0fc:	7ff00000 	.word	0x7ff00000
 801f100:	3fdbffff 	.word	0x3fdbffff
 801f104:	3ff00000 	.word	0x3ff00000
 801f108:	3ff2ffff 	.word	0x3ff2ffff
 801f10c:	40037fff 	.word	0x40037fff
 801f110:	3ff80000 	.word	0x3ff80000
 801f114:	bff00000 	.word	0xbff00000
 801f118:	08020918 	.word	0x08020918
 801f11c:	080208f8 	.word	0x080208f8

0801f120 <fabs>:
 801f120:	ec51 0b10 	vmov	r0, r1, d0
 801f124:	ee10 2a10 	vmov	r2, s0
 801f128:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f12c:	ec43 2b10 	vmov	d0, r2, r3
 801f130:	4770      	bx	lr

0801f132 <finite>:
 801f132:	ee10 3a90 	vmov	r3, s1
 801f136:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801f13a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f13e:	0fc0      	lsrs	r0, r0, #31
 801f140:	4770      	bx	lr
 801f142:	0000      	movs	r0, r0
 801f144:	0000      	movs	r0, r0
	...

0801f148 <floor>:
 801f148:	ec51 0b10 	vmov	r0, r1, d0
 801f14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f150:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801f154:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801f158:	2e13      	cmp	r6, #19
 801f15a:	460c      	mov	r4, r1
 801f15c:	ee10 5a10 	vmov	r5, s0
 801f160:	4680      	mov	r8, r0
 801f162:	dc34      	bgt.n	801f1ce <floor+0x86>
 801f164:	2e00      	cmp	r6, #0
 801f166:	da16      	bge.n	801f196 <floor+0x4e>
 801f168:	a335      	add	r3, pc, #212	; (adr r3, 801f240 <floor+0xf8>)
 801f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f16e:	f7e1 f89d 	bl	80002ac <__adddf3>
 801f172:	2200      	movs	r2, #0
 801f174:	2300      	movs	r3, #0
 801f176:	f7e1 fcdf 	bl	8000b38 <__aeabi_dcmpgt>
 801f17a:	b148      	cbz	r0, 801f190 <floor+0x48>
 801f17c:	2c00      	cmp	r4, #0
 801f17e:	da59      	bge.n	801f234 <floor+0xec>
 801f180:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801f184:	4a30      	ldr	r2, [pc, #192]	; (801f248 <floor+0x100>)
 801f186:	432b      	orrs	r3, r5
 801f188:	2500      	movs	r5, #0
 801f18a:	42ab      	cmp	r3, r5
 801f18c:	bf18      	it	ne
 801f18e:	4614      	movne	r4, r2
 801f190:	4621      	mov	r1, r4
 801f192:	4628      	mov	r0, r5
 801f194:	e025      	b.n	801f1e2 <floor+0x9a>
 801f196:	4f2d      	ldr	r7, [pc, #180]	; (801f24c <floor+0x104>)
 801f198:	4137      	asrs	r7, r6
 801f19a:	ea01 0307 	and.w	r3, r1, r7
 801f19e:	4303      	orrs	r3, r0
 801f1a0:	d01f      	beq.n	801f1e2 <floor+0x9a>
 801f1a2:	a327      	add	r3, pc, #156	; (adr r3, 801f240 <floor+0xf8>)
 801f1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1a8:	f7e1 f880 	bl	80002ac <__adddf3>
 801f1ac:	2200      	movs	r2, #0
 801f1ae:	2300      	movs	r3, #0
 801f1b0:	f7e1 fcc2 	bl	8000b38 <__aeabi_dcmpgt>
 801f1b4:	2800      	cmp	r0, #0
 801f1b6:	d0eb      	beq.n	801f190 <floor+0x48>
 801f1b8:	2c00      	cmp	r4, #0
 801f1ba:	bfbe      	ittt	lt
 801f1bc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801f1c0:	fa43 f606 	asrlt.w	r6, r3, r6
 801f1c4:	19a4      	addlt	r4, r4, r6
 801f1c6:	ea24 0407 	bic.w	r4, r4, r7
 801f1ca:	2500      	movs	r5, #0
 801f1cc:	e7e0      	b.n	801f190 <floor+0x48>
 801f1ce:	2e33      	cmp	r6, #51	; 0x33
 801f1d0:	dd0b      	ble.n	801f1ea <floor+0xa2>
 801f1d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f1d6:	d104      	bne.n	801f1e2 <floor+0x9a>
 801f1d8:	ee10 2a10 	vmov	r2, s0
 801f1dc:	460b      	mov	r3, r1
 801f1de:	f7e1 f865 	bl	80002ac <__adddf3>
 801f1e2:	ec41 0b10 	vmov	d0, r0, r1
 801f1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1ea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801f1ee:	f04f 33ff 	mov.w	r3, #4294967295
 801f1f2:	fa23 f707 	lsr.w	r7, r3, r7
 801f1f6:	4207      	tst	r7, r0
 801f1f8:	d0f3      	beq.n	801f1e2 <floor+0x9a>
 801f1fa:	a311      	add	r3, pc, #68	; (adr r3, 801f240 <floor+0xf8>)
 801f1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f200:	f7e1 f854 	bl	80002ac <__adddf3>
 801f204:	2200      	movs	r2, #0
 801f206:	2300      	movs	r3, #0
 801f208:	f7e1 fc96 	bl	8000b38 <__aeabi_dcmpgt>
 801f20c:	2800      	cmp	r0, #0
 801f20e:	d0bf      	beq.n	801f190 <floor+0x48>
 801f210:	2c00      	cmp	r4, #0
 801f212:	da02      	bge.n	801f21a <floor+0xd2>
 801f214:	2e14      	cmp	r6, #20
 801f216:	d103      	bne.n	801f220 <floor+0xd8>
 801f218:	3401      	adds	r4, #1
 801f21a:	ea25 0507 	bic.w	r5, r5, r7
 801f21e:	e7b7      	b.n	801f190 <floor+0x48>
 801f220:	2301      	movs	r3, #1
 801f222:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801f226:	fa03 f606 	lsl.w	r6, r3, r6
 801f22a:	4435      	add	r5, r6
 801f22c:	4545      	cmp	r5, r8
 801f22e:	bf38      	it	cc
 801f230:	18e4      	addcc	r4, r4, r3
 801f232:	e7f2      	b.n	801f21a <floor+0xd2>
 801f234:	2500      	movs	r5, #0
 801f236:	462c      	mov	r4, r5
 801f238:	e7aa      	b.n	801f190 <floor+0x48>
 801f23a:	bf00      	nop
 801f23c:	f3af 8000 	nop.w
 801f240:	8800759c 	.word	0x8800759c
 801f244:	7e37e43c 	.word	0x7e37e43c
 801f248:	bff00000 	.word	0xbff00000
 801f24c:	000fffff 	.word	0x000fffff

0801f250 <matherr>:
 801f250:	2000      	movs	r0, #0
 801f252:	4770      	bx	lr
 801f254:	0000      	movs	r0, r0
	...

0801f258 <nan>:
 801f258:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f260 <nan+0x8>
 801f25c:	4770      	bx	lr
 801f25e:	bf00      	nop
 801f260:	00000000 	.word	0x00000000
 801f264:	7ff80000 	.word	0x7ff80000

0801f268 <rint>:
 801f268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f26a:	ec51 0b10 	vmov	r0, r1, d0
 801f26e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f272:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801f276:	2e13      	cmp	r6, #19
 801f278:	460b      	mov	r3, r1
 801f27a:	ee10 4a10 	vmov	r4, s0
 801f27e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801f282:	dc56      	bgt.n	801f332 <rint+0xca>
 801f284:	2e00      	cmp	r6, #0
 801f286:	da2b      	bge.n	801f2e0 <rint+0x78>
 801f288:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801f28c:	4302      	orrs	r2, r0
 801f28e:	d023      	beq.n	801f2d8 <rint+0x70>
 801f290:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801f294:	4302      	orrs	r2, r0
 801f296:	4254      	negs	r4, r2
 801f298:	4314      	orrs	r4, r2
 801f29a:	0c4b      	lsrs	r3, r1, #17
 801f29c:	0b24      	lsrs	r4, r4, #12
 801f29e:	045b      	lsls	r3, r3, #17
 801f2a0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801f2a4:	ea44 0103 	orr.w	r1, r4, r3
 801f2a8:	460b      	mov	r3, r1
 801f2aa:	492f      	ldr	r1, [pc, #188]	; (801f368 <rint+0x100>)
 801f2ac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801f2b0:	e9d1 6700 	ldrd	r6, r7, [r1]
 801f2b4:	4602      	mov	r2, r0
 801f2b6:	4639      	mov	r1, r7
 801f2b8:	4630      	mov	r0, r6
 801f2ba:	f7e0 fff7 	bl	80002ac <__adddf3>
 801f2be:	e9cd 0100 	strd	r0, r1, [sp]
 801f2c2:	463b      	mov	r3, r7
 801f2c4:	4632      	mov	r2, r6
 801f2c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f2ca:	f7e0 ffed 	bl	80002a8 <__aeabi_dsub>
 801f2ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f2d2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801f2d6:	4639      	mov	r1, r7
 801f2d8:	ec41 0b10 	vmov	d0, r0, r1
 801f2dc:	b003      	add	sp, #12
 801f2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2e0:	4a22      	ldr	r2, [pc, #136]	; (801f36c <rint+0x104>)
 801f2e2:	4132      	asrs	r2, r6
 801f2e4:	ea01 0702 	and.w	r7, r1, r2
 801f2e8:	4307      	orrs	r7, r0
 801f2ea:	d0f5      	beq.n	801f2d8 <rint+0x70>
 801f2ec:	0852      	lsrs	r2, r2, #1
 801f2ee:	4011      	ands	r1, r2
 801f2f0:	430c      	orrs	r4, r1
 801f2f2:	d00b      	beq.n	801f30c <rint+0xa4>
 801f2f4:	ea23 0202 	bic.w	r2, r3, r2
 801f2f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801f2fc:	2e13      	cmp	r6, #19
 801f2fe:	fa43 f306 	asr.w	r3, r3, r6
 801f302:	bf0c      	ite	eq
 801f304:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801f308:	2400      	movne	r4, #0
 801f30a:	4313      	orrs	r3, r2
 801f30c:	4916      	ldr	r1, [pc, #88]	; (801f368 <rint+0x100>)
 801f30e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801f312:	4622      	mov	r2, r4
 801f314:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f318:	4620      	mov	r0, r4
 801f31a:	4629      	mov	r1, r5
 801f31c:	f7e0 ffc6 	bl	80002ac <__adddf3>
 801f320:	e9cd 0100 	strd	r0, r1, [sp]
 801f324:	4622      	mov	r2, r4
 801f326:	462b      	mov	r3, r5
 801f328:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f32c:	f7e0 ffbc 	bl	80002a8 <__aeabi_dsub>
 801f330:	e7d2      	b.n	801f2d8 <rint+0x70>
 801f332:	2e33      	cmp	r6, #51	; 0x33
 801f334:	dd07      	ble.n	801f346 <rint+0xde>
 801f336:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f33a:	d1cd      	bne.n	801f2d8 <rint+0x70>
 801f33c:	ee10 2a10 	vmov	r2, s0
 801f340:	f7e0 ffb4 	bl	80002ac <__adddf3>
 801f344:	e7c8      	b.n	801f2d8 <rint+0x70>
 801f346:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801f34a:	f04f 32ff 	mov.w	r2, #4294967295
 801f34e:	40f2      	lsrs	r2, r6
 801f350:	4210      	tst	r0, r2
 801f352:	d0c1      	beq.n	801f2d8 <rint+0x70>
 801f354:	0852      	lsrs	r2, r2, #1
 801f356:	4210      	tst	r0, r2
 801f358:	bf1f      	itttt	ne
 801f35a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801f35e:	ea20 0202 	bicne.w	r2, r0, r2
 801f362:	4134      	asrne	r4, r6
 801f364:	4314      	orrne	r4, r2
 801f366:	e7d1      	b.n	801f30c <rint+0xa4>
 801f368:	08020938 	.word	0x08020938
 801f36c:	000fffff 	.word	0x000fffff

0801f370 <scalbn>:
 801f370:	b570      	push	{r4, r5, r6, lr}
 801f372:	ec55 4b10 	vmov	r4, r5, d0
 801f376:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801f37a:	4606      	mov	r6, r0
 801f37c:	462b      	mov	r3, r5
 801f37e:	b9aa      	cbnz	r2, 801f3ac <scalbn+0x3c>
 801f380:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f384:	4323      	orrs	r3, r4
 801f386:	d03b      	beq.n	801f400 <scalbn+0x90>
 801f388:	4b31      	ldr	r3, [pc, #196]	; (801f450 <scalbn+0xe0>)
 801f38a:	4629      	mov	r1, r5
 801f38c:	2200      	movs	r2, #0
 801f38e:	ee10 0a10 	vmov	r0, s0
 801f392:	f7e1 f941 	bl	8000618 <__aeabi_dmul>
 801f396:	4b2f      	ldr	r3, [pc, #188]	; (801f454 <scalbn+0xe4>)
 801f398:	429e      	cmp	r6, r3
 801f39a:	4604      	mov	r4, r0
 801f39c:	460d      	mov	r5, r1
 801f39e:	da12      	bge.n	801f3c6 <scalbn+0x56>
 801f3a0:	a327      	add	r3, pc, #156	; (adr r3, 801f440 <scalbn+0xd0>)
 801f3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3a6:	f7e1 f937 	bl	8000618 <__aeabi_dmul>
 801f3aa:	e009      	b.n	801f3c0 <scalbn+0x50>
 801f3ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f3b0:	428a      	cmp	r2, r1
 801f3b2:	d10c      	bne.n	801f3ce <scalbn+0x5e>
 801f3b4:	ee10 2a10 	vmov	r2, s0
 801f3b8:	4620      	mov	r0, r4
 801f3ba:	4629      	mov	r1, r5
 801f3bc:	f7e0 ff76 	bl	80002ac <__adddf3>
 801f3c0:	4604      	mov	r4, r0
 801f3c2:	460d      	mov	r5, r1
 801f3c4:	e01c      	b.n	801f400 <scalbn+0x90>
 801f3c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f3ca:	460b      	mov	r3, r1
 801f3cc:	3a36      	subs	r2, #54	; 0x36
 801f3ce:	4432      	add	r2, r6
 801f3d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f3d4:	428a      	cmp	r2, r1
 801f3d6:	dd0b      	ble.n	801f3f0 <scalbn+0x80>
 801f3d8:	ec45 4b11 	vmov	d1, r4, r5
 801f3dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801f448 <scalbn+0xd8>
 801f3e0:	f000 f83c 	bl	801f45c <copysign>
 801f3e4:	a318      	add	r3, pc, #96	; (adr r3, 801f448 <scalbn+0xd8>)
 801f3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ea:	ec51 0b10 	vmov	r0, r1, d0
 801f3ee:	e7da      	b.n	801f3a6 <scalbn+0x36>
 801f3f0:	2a00      	cmp	r2, #0
 801f3f2:	dd08      	ble.n	801f406 <scalbn+0x96>
 801f3f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f3f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f3fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f400:	ec45 4b10 	vmov	d0, r4, r5
 801f404:	bd70      	pop	{r4, r5, r6, pc}
 801f406:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f40a:	da0d      	bge.n	801f428 <scalbn+0xb8>
 801f40c:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f410:	429e      	cmp	r6, r3
 801f412:	ec45 4b11 	vmov	d1, r4, r5
 801f416:	dce1      	bgt.n	801f3dc <scalbn+0x6c>
 801f418:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801f440 <scalbn+0xd0>
 801f41c:	f000 f81e 	bl	801f45c <copysign>
 801f420:	a307      	add	r3, pc, #28	; (adr r3, 801f440 <scalbn+0xd0>)
 801f422:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f426:	e7e0      	b.n	801f3ea <scalbn+0x7a>
 801f428:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f42c:	3236      	adds	r2, #54	; 0x36
 801f42e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f432:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f436:	4620      	mov	r0, r4
 801f438:	4629      	mov	r1, r5
 801f43a:	2200      	movs	r2, #0
 801f43c:	4b06      	ldr	r3, [pc, #24]	; (801f458 <scalbn+0xe8>)
 801f43e:	e7b2      	b.n	801f3a6 <scalbn+0x36>
 801f440:	c2f8f359 	.word	0xc2f8f359
 801f444:	01a56e1f 	.word	0x01a56e1f
 801f448:	8800759c 	.word	0x8800759c
 801f44c:	7e37e43c 	.word	0x7e37e43c
 801f450:	43500000 	.word	0x43500000
 801f454:	ffff3cb0 	.word	0xffff3cb0
 801f458:	3c900000 	.word	0x3c900000

0801f45c <copysign>:
 801f45c:	ec51 0b10 	vmov	r0, r1, d0
 801f460:	ee11 0a90 	vmov	r0, s3
 801f464:	ee10 2a10 	vmov	r2, s0
 801f468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f46c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801f470:	ea41 0300 	orr.w	r3, r1, r0
 801f474:	ec43 2b10 	vmov	d0, r2, r3
 801f478:	4770      	bx	lr
	...

0801f47c <_init>:
 801f47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f47e:	bf00      	nop
 801f480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f482:	bc08      	pop	{r3}
 801f484:	469e      	mov	lr, r3
 801f486:	4770      	bx	lr

0801f488 <_fini>:
 801f488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f48a:	bf00      	nop
 801f48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f48e:	bc08      	pop	{r3}
 801f490:	469e      	mov	lr, r3
 801f492:	4770      	bx	lr
