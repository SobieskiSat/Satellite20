
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d494  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc8  0801d628  0801d628  0002d628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e5f0  0801e5f0  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  0801e5f0  0801e5f0  0002e5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e5f8  0801e5f8  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e5f8  0801e5f8  0002e5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e5fc  0801e5fc  0002e5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  0801e600  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009dec  20000370  0801e96c  00030370  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a15c  0801e96c  0003a15c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045963  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007bf5  00000000  00000000  00075cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002860  00000000  00000000  0007d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002528  00000000  00000000  00080158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d7bd  00000000  00000000  00082680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b998  00000000  00000000  000afe3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d749a  00000000  00000000  000db7d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b2c6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbcc  00000000  00000000  001b2cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  001be8b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d60c 	.word	0x0801d60c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	0801d60c 	.word	0x0801d60c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <println>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
};
static inline void println(char* str)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2140      	movs	r1, #64	; 0x40
 8001054:	4820      	ldr	r0, [pc, #128]	; (80010d8 <println+0x90>)
 8001056:	f005 ffc3 	bl	8006fe0 <HAL_GPIO_WritePin>

	printLen = strlen(str);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff f8c2 	bl	80001e4 <strlen>
 8001060:	4602      	mov	r2, r0
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <println+0x94>)
 8001064:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e009      	b.n	8001080 <println+0x38>
	{
		printBuffer[i] = str[i];
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	441a      	add	r2, r3
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	7811      	ldrb	r1, [r2, #0]
 8001076:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <println+0x98>)
 8001078:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3301      	adds	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <println+0x94>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d3f0      	bcc.n	800106c <println+0x24>
	}
	printBuffer[printLen] = '\n';
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <println+0x94>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <println+0x98>)
 8001090:	210a      	movs	r1, #10
 8001092:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <println+0x94>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <println+0x98>)
 800109c:	210d      	movs	r1, #13
 800109e:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <println+0x94>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3302      	adds	r3, #2
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <println+0x98>)
 80010a8:	2100      	movs	r1, #0
 80010aa:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 80010ac:	bf00      	nop
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <println+0x94>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	3303      	adds	r3, #3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <println+0x98>)
 80010bc:	f015 f990 	bl	80163e0 <CDC_Transmit_FS>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d0f3      	beq.n	80010ae <println+0x66>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <println+0x90>)
 80010cc:	f005 ff88 	bl	8006fe0 <HAL_GPIO_WritePin>
	#endif
};
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020800 	.word	0x40020800
 80010dc:	20000390 	.word	0x20000390
 80010e0:	20000394 	.word	0x20000394

080010e4 <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

void setMotors(float dutyL, float dutyR)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ee:	edc7 0a00 	vstr	s1, [r7]
	if (motorsEnabled)
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <setMotors+0x90>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d037      	beq.n	800116a <setMotors+0x86>
	{
		TIM5->CCR2 = (uint32_t)((float)TIM5->ARR * (1 - dutyL));
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <setMotors+0x94>)
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800110a:	edd7 7a01 	vldr	s15, [r7, #4]
 800110e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <setMotors+0x94>)
 8001118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111c:	ee17 2a90 	vmov	r2, s15
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
		TIM5->CCR4 = (uint32_t)((float)TIM5->ARR * (1 - dutyR));
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <setMotors+0x94>)
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800112e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001132:	edd7 7a00 	vldr	s15, [r7]
 8001136:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800113a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <setMotors+0x94>)
 8001140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001144:	ee17 2a90 	vmov	r2, s15
 8001148:	641a      	str	r2, [r3, #64]	; 0x40
		TIM5->CNT = 0;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <setMotors+0x94>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24

		TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <setMotors+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2104      	movs	r1, #4
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <setMotors+0x9c>)
 800115c:	f005 ff40 	bl	8006fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2101      	movs	r1, #1
 8001164:	4806      	ldr	r0, [pc, #24]	; (8001180 <setMotors+0x9c>)
 8001166:	f005 ff3b 	bl	8006fe0 <HAL_GPIO_WritePin>
	}
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000038c 	.word	0x2000038c
 8001178:	40000c00 	.word	0x40000c00
 800117c:	40000800 	.word	0x40000800
 8001180:	40020000 	.word	0x40020000

08001184 <haltMotors>:

void haltMotors(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM5->CCR2 = TIM5->ARR;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <haltMotors+0x24>)
 800118a:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <haltMotors+0x24>)
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	6393      	str	r3, [r2, #56]	; 0x38
	TIM5->CCR4 = TIM5->ARR;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <haltMotors+0x24>)
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <haltMotors+0x24>)
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	6413      	str	r3, [r2, #64]	; 0x40

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <haltMotors+0x28>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40000c00 	.word	0x40000c00
 80011ac:	40000800 	.word	0x40000800

080011b0 <enableMotors>:

void enableMotors(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	if (!motorsEnabled)
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <enableMotors+0x70>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	f083 0301 	eor.w	r3, r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d02b      	beq.n	800121a <enableMotors+0x6a>
	{
		haltMotors();
 80011c2:	f7ff ffdf 	bl	8001184 <haltMotors>
		motorsEnabled = true;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <enableMotors+0x70>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]

		//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
		//setPwmFrequency(MAX_PWM_FREQ);

		motL_forward = true;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <enableMotors+0x74>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
		motR_forward = true;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <enableMotors+0x78>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]

		// flip direction based on config
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <enableMotors+0x74>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	2101      	movs	r1, #1
 80011e0:	4812      	ldr	r0, [pc, #72]	; (800122c <enableMotors+0x7c>)
 80011e2:	f005 fefd 	bl	8006fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <enableMotors+0x78>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	2104      	movs	r1, #4
 80011ee:	480f      	ldr	r0, [pc, #60]	; (800122c <enableMotors+0x7c>)
 80011f0:	f005 fef6 	bl	8006fe0 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_2);
 80011f4:	f014 fa4c 	bl	8015690 <Get_TIM5_Instance>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2104      	movs	r1, #4
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00a fe21 	bl	800be44 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_4);
 8001202:	f014 fa45 	bl	8015690 <Get_TIM5_Instance>
 8001206:	4603      	mov	r3, r0
 8001208:	210c      	movs	r1, #12
 800120a:	4618      	mov	r0, r3
 800120c:	f00a fe1a 	bl	800be44 <HAL_TIM_PWM_Start>

		haltMotors();
 8001210:	f7ff ffb8 	bl	8001184 <haltMotors>
		println("[MOT] MOTORS ENABLED!!");
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <enableMotors+0x80>)
 8001216:	f7ff ff17 	bl	8001048 <println>
	}
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000038c 	.word	0x2000038c
 8001224:	20000000 	.word	0x20000000
 8001228:	20000001 	.word	0x20000001
 800122c:	40020000 	.word	0x40020000
 8001230:	0801d628 	.word	0x0801d628

08001234 <disableMotors>:

void disableMotors(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	if (motorsEnabled)
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <disableMotors+0x3c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d015      	beq.n	800126c <disableMotors+0x38>
	{
		haltMotors();
 8001240:	f7ff ffa0 	bl	8001184 <haltMotors>
		motorsEnabled = false;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <disableMotors+0x3c>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(Get_TIM5_Instance(), TIM_CHANNEL_2);
 800124a:	f014 fa21 	bl	8015690 <Get_TIM5_Instance>
 800124e:	4603      	mov	r3, r0
 8001250:	2104      	movs	r1, #4
 8001252:	4618      	mov	r0, r3
 8001254:	f00a fe34 	bl	800bec0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(Get_TIM5_Instance(), TIM_CHANNEL_4);
 8001258:	f014 fa1a 	bl	8015690 <Get_TIM5_Instance>
 800125c:	4603      	mov	r3, r0
 800125e:	210c      	movs	r1, #12
 8001260:	4618      	mov	r0, r3
 8001262:	f00a fe2d 	bl	800bec0 <HAL_TIM_PWM_Stop>
		println("[MOT] Motors DISABLED!!!!!!!1");
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <disableMotors+0x40>)
 8001268:	f7ff feee 	bl	8001048 <println>
	}
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000038c 	.word	0x2000038c
 8001274:	0801d640 	.word	0x0801d640

08001278 <SD_init>:
    return FR_OK;
}


FRESULT SD_init()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 800127e:	f011 fea3 	bl	8012fc8 <BSP_SD_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SD_init+0x14>
 8001288:	2303      	movs	r3, #3
 800128a:	e027      	b.n	80012dc <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 800128c:	4815      	ldr	r0, [pc, #84]	; (80012e4 <SD_init+0x6c>)
 800128e:	f011 fe8d 	bl	8012fac <FATFS_UnLinkDriver>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SD_init+0x24>
 8001298:	2303      	movs	r3, #3
 800129a:	e01f      	b.n	80012dc <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 800129c:	4911      	ldr	r1, [pc, #68]	; (80012e4 <SD_init+0x6c>)
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <SD_init+0x70>)
 80012a0:	f011 fe3c 	bl	8012f1c <FATFS_LinkDriver>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SD_init+0x36>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e016      	b.n	80012dc <SD_init+0x64>

	f_mount(0, SDPath, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <SD_init+0x6c>)
 80012b2:	2000      	movs	r0, #0
 80012b4:	f011 f88a 	bl	80123cc <f_mount>
	FRESULT mountStatus = f_mount(&fso, SDPath, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	490a      	ldr	r1, [pc, #40]	; (80012e4 <SD_init+0x6c>)
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <SD_init+0x74>)
 80012be:	f011 f885 	bl	80123cc <f_mount>
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	if (mountStatus != FR_OK)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	4905      	ldr	r1, [pc, #20]	; (80012e4 <SD_init+0x6c>)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f011 f87b 	bl	80123cc <f_mount>
		return mountStatus;
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	e000      	b.n	80012dc <SD_init+0x64>
	}

	return FR_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000653c 	.word	0x2000653c
 80012e8:	0801e090 	.word	0x0801e090
 80012ec:	20001a30 	.word	0x20001a30

080012f0 <SD_newFile>:

	return FR_OK;
}

FRESULT SD_newFile(char* path)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	stato = f_open(&fileo, path, FA_CREATE_ALWAYS);
 80012f8:	2208      	movs	r2, #8
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <SD_newFile+0x44>)
 80012fe:	f011 f8ab 	bl	8012458 <f_open>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <SD_newFile+0x48>)
 8001308:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK)
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <SD_newFile+0x48>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <SD_newFile+0x32>
	{
		f_mount(0, SDPath, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	4909      	ldr	r1, [pc, #36]	; (800133c <SD_newFile+0x4c>)
 8001316:	2000      	movs	r0, #0
 8001318:	f011 f858 	bl	80123cc <f_mount>
		return stato;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SD_newFile+0x48>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	e004      	b.n	800132c <SD_newFile+0x3c>


	//DateTime now = getTime();
	//SD_setFileTime(path, &now);

	f_close(&fileo);
 8001322:	4804      	ldr	r0, [pc, #16]	; (8001334 <SD_newFile+0x44>)
 8001324:	f011 fc76 	bl	8012c14 <f_close>
	return stato;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <SD_newFile+0x48>)
 800132a:	781b      	ldrb	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000a00 	.word	0x20000a00
 8001338:	200009fc 	.word	0x200009fc
 800133c:	2000653c 	.word	0x2000653c

08001340 <SD_writeToFile>:
{
	return f_unlink(path);
}

FRESULT SD_writeToFile(char* path, char* content)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	stato = f_open(&fileo, path,  FA_WRITE | FA_OPEN_APPEND);
 800134a:	2232      	movs	r2, #50	; 0x32
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4815      	ldr	r0, [pc, #84]	; (80013a4 <SD_writeToFile+0x64>)
 8001350:	f011 f882 	bl	8012458 <f_open>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <SD_writeToFile+0x68>)
 800135a:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <SD_writeToFile+0x68>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <SD_writeToFile+0x2a>
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <SD_writeToFile+0x68>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	e017      	b.n	800139a <SD_writeToFile+0x5a>

	stato = f_write(&fileo, content, strlen(content), &testByteo);
 800136a:	6838      	ldr	r0, [r7, #0]
 800136c:	f7fe ff3a 	bl	80001e4 <strlen>
 8001370:	4602      	mov	r2, r0
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <SD_writeToFile+0x6c>)
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	480b      	ldr	r0, [pc, #44]	; (80013a4 <SD_writeToFile+0x64>)
 8001378:	f011 fa3a 	bl	80127f0 <f_write>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <SD_writeToFile+0x68>)
 8001382:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <SD_writeToFile+0x68>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <SD_writeToFile+0x52>
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <SD_writeToFile+0x68>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	e003      	b.n	800139a <SD_writeToFile+0x5a>

	return f_close(&fileo);
 8001392:	4804      	ldr	r0, [pc, #16]	; (80013a4 <SD_writeToFile+0x64>)
 8001394:	f011 fc3e 	bl	8012c14 <f_close>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000a00 	.word	0x20000a00
 80013a8:	200009fc 	.word	0x200009fc
 80013ac:	20002a64 	.word	0x20002a64

080013b0 <SD_newDirectory>:
	//########################
	return FR_OK;
}

FRESULT SD_newDirectory(char* path)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ implement: tree -> multiple '/'
	return f_mkdir(path);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f011 fc55 	bl	8012c68 <f_mkdir>
 80013be:	4603      	mov	r3, r0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <millis>:
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <millis+0x1c>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	099b      	lsrs	r3, r3, #6
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	10624dd3 	.word	0x10624dd3

080013e8 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 80013f4:	1cf9      	adds	r1, r7, #3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	2201      	movs	r2, #1
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f00a f90c 	bl	800b61a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001402:	bf00      	nop
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f00a fbde 	bl	800bbc6 <HAL_SPI_GetState>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d1f9      	bne.n	8001404 <SX1278_write+0x1c>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
 8001424:	4613      	mov	r3, r2
 8001426:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a18      	ldr	r0, [r3, #32]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	8a5b      	ldrh	r3, [r3, #18]
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f005 fdd4 	bl	8006fe0 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	4610      	mov	r0, r2
 8001448:	f7ff ffce 	bl	80013e8 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	78ba      	ldrb	r2, [r7, #2]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ffc7 	bl	80013e8 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a18      	ldr	r0, [r3, #32]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	8a5b      	ldrh	r3, [r3, #18]
 8001462:	2201      	movs	r2, #1
 8001464:	4619      	mov	r1, r3
 8001466:	f005 fdbb 	bl	8006fe0 <HAL_GPIO_WritePin>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	461a      	mov	r2, r3
 800147e:	460b      	mov	r3, r1
 8001480:	72fb      	strb	r3, [r7, #11]
 8001482:	4613      	mov	r3, r2
 8001484:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001486:	7abb      	ldrb	r3, [r7, #10]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d92d      	bls.n	80014e8 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a18      	ldr	r0, [r3, #32]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8a5b      	ldrh	r3, [r3, #18]
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	f005 fda2 	bl	8006fe0 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a0:	7afb      	ldrb	r3, [r7, #11]
 80014a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f7ff ff9c 	bl	80013e8 <SX1278_write>
	for (i = 0; i < len; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	75fb      	strb	r3, [r7, #23]
 80014b4:	e00b      	b.n	80014ce <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff ff90 	bl	80013e8 <SX1278_write>
	for (i = 0; i < len; i++)
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	3301      	adds	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
 80014ce:	7dfa      	ldrb	r2, [r7, #23]
 80014d0:	7abb      	ldrb	r3, [r7, #10]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d3ef      	bcc.n	80014b6 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a18      	ldr	r0, [r3, #32]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8a5b      	ldrh	r3, [r3, #18]
 80014de:	2201      	movs	r2, #1
 80014e0:	4619      	mov	r1, r3
 80014e2:	f005 fd7d 	bl	8006fe0 <HAL_GPIO_WritePin>
 80014e6:	e000      	b.n	80014ea <SX1278_command_burst+0x78>
	if (len <= 1) return;
 80014e8:	bf00      	nop
}
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80014fc:	2300      	movs	r3, #0
 80014fe:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 8001500:	f107 020e 	add.w	r2, r7, #14
 8001504:	f107 010f 	add.w	r1, r7, #15
 8001508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2301      	movs	r3, #1
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f00a f9b6 	bl	800b882 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001516:	bf00      	nop
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f00a fb54 	bl	800bbc6 <HAL_SPI_GetState>
 800151e:	4603      	mov	r3, r0
 8001520:	2b01      	cmp	r3, #1
 8001522:	d1f9      	bne.n	8001518 <SX1278_read+0x28>

	return rxByte;
 8001524:	7bbb      	ldrb	r3, [r7, #14]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a18      	ldr	r0, [r3, #32]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	8a5b      	ldrh	r3, [r3, #18]
 8001542:	2200      	movs	r2, #0
 8001544:	4619      	mov	r1, r3
 8001546:	f005 fd4b 	bl	8006fe0 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff48 	bl	80013e8 <SX1278_write>
	recv = SX1278_read(inst->spi);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ffc7 	bl	80014f0 <SX1278_read>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a18      	ldr	r0, [r3, #32]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	8a5b      	ldrh	r3, [r3, #18]
 800156e:	2201      	movs	r2, #1
 8001570:	4619      	mov	r1, r3
 8001572:	f005 fd35 	bl	8006fe0 <HAL_GPIO_WritePin>

	return recv;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	461a      	mov	r2, r3
 800158c:	460b      	mov	r3, r1
 800158e:	72fb      	strb	r3, [r7, #11]
 8001590:	4613      	mov	r3, r2
 8001592:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001594:	7abb      	ldrb	r3, [r7, #10]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d92b      	bls.n	80015f2 <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a18      	ldr	r0, [r3, #32]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8a5b      	ldrh	r3, [r3, #18]
 80015a2:	2200      	movs	r2, #0
 80015a4:	4619      	mov	r1, r3
 80015a6:	f005 fd1b 	bl	8006fe0 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	7afa      	ldrb	r2, [r7, #11]
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff18 	bl	80013e8 <SX1278_write>
	for (i = 0; i < len; i++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	75fb      	strb	r3, [r7, #23]
 80015bc:	e00c      	b.n	80015d8 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	18d4      	adds	r4, r2, r3
 80015c8:	4608      	mov	r0, r1
 80015ca:	f7ff ff91 	bl	80014f0 <SX1278_read>
 80015ce:	4603      	mov	r3, r0
 80015d0:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	3301      	adds	r3, #1
 80015d6:	75fb      	strb	r3, [r7, #23]
 80015d8:	7dfa      	ldrb	r2, [r7, #23]
 80015da:	7abb      	ldrb	r3, [r7, #10]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3ee      	bcc.n	80015be <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a18      	ldr	r0, [r3, #32]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8a5b      	ldrh	r3, [r3, #18]
 80015e8:	2201      	movs	r2, #1
 80015ea:	4619      	mov	r1, r3
 80015ec:	f005 fcf8 	bl	8006fe0 <HAL_GPIO_WritePin>
 80015f0:	e000      	b.n	80015f4 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 80015f2:	bf00      	nop
}
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd90      	pop	{r4, r7, pc}
	...

080015fc <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	inst->active = false;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	SX1278_reset(inst);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fab9 	bl	8001b84 <SX1278_reset>

	//unable to establish the connection with module
	uint8_t recvVersion = SX1278_read_address(inst, REG_LR_VERSION);
 8001612:	2142      	movs	r1, #66	; 0x42
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff8a 	bl	800152e <SX1278_read_address>
 800161a:	4603      	mov	r3, r0
 800161c:	73fb      	strb	r3, [r7, #15]
	//printLen = s//printf(//printBuffer, "Recv: %x\r\n", recvVersion);
	//printv(//printBuffer, //printLen);
	if (recvVersion != 0x12)
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	2b12      	cmp	r3, #18
 8001622:	d001      	beq.n	8001628 <SX1278_init+0x2c>
	{
		//println("[LoRa] Abort: Unable to access version register, SPI not working!");
		return false;
 8001624:	2300      	movs	r3, #0
 8001626:	e0d7      	b.n	80017d8 <SX1278_init+0x1dc>
	}

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fa8b 	bl	8001b44 <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 800162e:	2288      	movs	r2, #136	; 0x88
 8001630:	2101      	movs	r1, #1
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fef0 	bl	8001418 <SX1278_command>

	//SX1278_command(inst, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	frf = inst->config.frequency;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f04f 0400 	mov.w	r4, #0
 8001640:	4a67      	ldr	r2, [pc, #412]	; (80017e0 <SX1278_init+0x1e4>)
 8001642:	e9c2 3400 	strd	r3, r4, [r2]
	frf <<= 14;
 8001646:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <SX1278_init+0x1e4>)
 8001648:	e9d3 1200 	ldrd	r1, r2, [r3]
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	f04f 0400 	mov.w	r4, #0
 8001654:	0394      	lsls	r4, r2, #14
 8001656:	ea44 4491 	orr.w	r4, r4, r1, lsr #18
 800165a:	038b      	lsls	r3, r1, #14
 800165c:	4a60      	ldr	r2, [pc, #384]	; (80017e0 <SX1278_init+0x1e4>)
 800165e:	e9c2 3400 	strd	r3, r4, [r2]
	frf /= 1000000;
 8001662:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <SX1278_init+0x1e4>)
 8001664:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001668:	4a5e      	ldr	r2, [pc, #376]	; (80017e4 <SX1278_init+0x1e8>)
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	f7ff fb6b 	bl	8000d48 <__aeabi_uldivmod>
 8001672:	4603      	mov	r3, r0
 8001674:	460c      	mov	r4, r1
 8001676:	4a5a      	ldr	r2, [pc, #360]	; (80017e0 <SX1278_init+0x1e4>)
 8001678:	e9c2 3400 	strd	r3, r4, [r2]
	memcpy(frf_bytes, &frf, 8);
 800167c:	4b5a      	ldr	r3, [pc, #360]	; (80017e8 <SX1278_init+0x1ec>)
 800167e:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <SX1278_init+0x1e4>)
 8001680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001684:	e883 0003 	stmia.w	r3, {r0, r1}
	SX1278_command(inst, LR_RegFrMsb, frf_bytes[2]);
 8001688:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <SX1278_init+0x1ec>)
 800168a:	789b      	ldrb	r3, [r3, #2]
 800168c:	461a      	mov	r2, r3
 800168e:	2106      	movs	r1, #6
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fec1 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, frf_bytes[1]);
 8001696:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <SX1278_init+0x1ec>)
 8001698:	785b      	ldrb	r3, [r3, #1]
 800169a:	461a      	mov	r2, r3
 800169c:	2107      	movs	r1, #7
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff feba 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, frf_bytes[0]);
 80016a4:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <SX1278_init+0x1ec>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	2108      	movs	r1, #8
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff feb3 	bl	8001418 <SX1278_command>
	//printLen = s//printf(//printBuffer, "[LoRa] Frequency setting: %x_%x_%x\r\n", frf_bytes[2], frf_bytes[1], frf_bytes[0]);
	//printv(//printBuffer, //printLen);

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);	//Setting transmit power
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	791b      	ldrb	r3, [r3, #4]
 80016b6:	461a      	mov	r2, r3
 80016b8:	2109      	movs	r1, #9
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff feac 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 80016c0:	222b      	movs	r2, #43	; 0x2b
 80016c2:	210b      	movs	r1, #11
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fea7 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 80016ca:	2223      	movs	r2, #35	; 0x23
 80016cc:	210c      	movs	r1, #12
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fea2 	bl	8001418 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 80016d4:	2287      	movs	r2, #135	; 0x87
 80016d6:	214d      	movs	r1, #77	; 0x4d
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fe9d 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 80016de:	2200      	movs	r2, #0
 80016e0:	2124      	movs	r1, #36	; 0x24
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fe98 	bl	8001418 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	795b      	ldrb	r3, [r3, #5]
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	d139      	bne.n	8001764 <SX1278_init+0x168>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	79db      	ldrb	r3, [r3, #7]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	799b      	ldrb	r3, [r3, #6]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	211d      	movs	r1, #29
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fe83 	bl	8001418 <SX1278_command>
		//SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	795b      	ldrb	r3, [r3, #5]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	b2da      	uxtb	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7a1b      	ldrb	r3, [r3, #8]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	211e      	movs	r1, #30
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fe74 	bl	8001418 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 8001730:	2131      	movs	r1, #49	; 0x31
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fefb 	bl	800152e <SX1278_read_address>
 8001738:	4603      	mov	r3, r0
 800173a:	73bb      	strb	r3, [r7, #14]
		tmp &= 0xF8;
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	f023 0307 	bic.w	r3, r3, #7
 8001742:	73bb      	strb	r3, [r7, #14]
		tmp |= 0x05;
 8001744:	7bbb      	ldrb	r3, [r7, #14]
 8001746:	f043 0305 	orr.w	r3, r3, #5
 800174a:	73bb      	strb	r3, [r7, #14]
		SX1278_command(inst, 0x31, tmp);
 800174c:	7bbb      	ldrb	r3, [r7, #14]
 800174e:	461a      	mov	r2, r3
 8001750:	2131      	movs	r1, #49	; 0x31
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fe60 	bl	8001418 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 8001758:	220c      	movs	r2, #12
 800175a:	2137      	movs	r1, #55	; 0x37
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fe5b 	bl	8001418 <SX1278_command>
 8001762:	e01d      	b.n	80017a0 <SX1278_init+0x1a4>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	79db      	ldrb	r3, [r3, #7]
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	b2da      	uxtb	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	799b      	ldrb	r3, [r3, #6]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	211d      	movs	r1, #29
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fe4b 	bl	8001418 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	795b      	ldrb	r3, [r3, #5]
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	b2da      	uxtb	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7a1b      	ldrb	r3, [r3, #8]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4413      	add	r3, r2
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	211e      	movs	r1, #30
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fe3c 	bl	8001418 <SX1278_command>
	}

	//SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
	SX1278_command(inst, LR_RegSymbTimeoutLsb, 0x64);	//recievier timeout value [timeout = symbtimeout*ts]
 80017a0:	2264      	movs	r2, #100	; 0x64
 80017a2:	211f      	movs	r1, #31
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fe37 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 80017aa:	2200      	movs	r2, #0
 80017ac:	2120      	movs	r1, #32
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fe32 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 80017b4:	220c      	movs	r2, #12
 80017b6:	2121      	movs	r1, #33	; 0x21
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe2d 	bl	8001418 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 80017be:	2201      	movs	r2, #1
 80017c0:	2141      	movs	r1, #65	; 0x41
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fe28 	bl	8001418 <SX1278_command>

	SX1278_standby(inst);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f9cb 	bl	8001b64 <SX1278_standby>

	inst->active = true;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	return true;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	20000598 	.word	0x20000598
 80017e4:	000f4240 	.word	0x000f4240
 80017e8:	200005a0 	.word	0x200005a0

080017ec <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	4613      	mov	r3, r2
 80017f8:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	7b1b      	ldrb	r3, [r3, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d12b      	bne.n	800185a <SX1278_transmit+0x6e>
	{
		//println("[LoRa] Starting transmission...");
		inst->txDone = false;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		SX1278_tx_mode(inst);
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f932 	bl	8001a74 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	461a      	mov	r2, r3
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 f86c 	bl	80018f4 <SX1278_tx_input>
		SX1278_tx_push(inst);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f898 	bl	8001952 <SX1278_tx_push>

		if (inst->useDio0IRQ)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <SX1278_transmit+0x4c>
		{
			//waiting for interrupt
			//println("[LoRa] Transmission pushed! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001834:	2301      	movs	r3, #1
 8001836:	e011      	b.n	800185c <SX1278_transmit+0x70>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001838:	bf00      	nop
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8a1b      	ldrh	r3, [r3, #16]
 8001842:	4619      	mov	r1, r3
 8001844:	4610      	mov	r0, r2
 8001846:	f005 fbb3 	bl	8006fb0 <HAL_GPIO_ReadPin>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f4      	beq.n	800183a <SX1278_transmit+0x4e>
			return SX1278_tx_finish(inst);
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 f88b 	bl	800196c <SX1278_tx_finish>
 8001856:	4603      	mov	r3, r0
 8001858:	e000      	b.n	800185c <SX1278_transmit+0x70>
	}
	else
	{
		//println("[LoRa] Cannot transmit...standby");
		return false;
 800185a:	2300      	movs	r3, #0
	}
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7b1b      	ldrb	r3, [r3, #12]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d13a      	bne.n	80018ea <SX1278_receive+0x86>
	{
		//println("[LoRa] Starting receiving...");
		SX1278_rx_mode(inst);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f929 	bl	8001acc <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00a      	beq.n	800189a <SX1278_receive+0x36>
		{
			//waiting for interrupt
			//println("[LoRa] Receiver set! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			inst->rxStart = millis();
 800188c:	f7ff fd9c 	bl	80013c8 <millis>
 8001890:	4602      	mov	r2, r0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	63da      	str	r2, [r3, #60]	; 0x3c

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 8001896:	2301      	movs	r3, #1
 8001898:	e028      	b.n	80018ec <SX1278_receive+0x88>
			uint32_t recvStart = millis();
 800189a:	f7ff fd95 	bl	80013c8 <millis>
 800189e:	60f8      	str	r0, [r7, #12]
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 80018a0:	e011      	b.n	80018c6 <SX1278_receive+0x62>
				if (millis() - recvStart >= inst->config.rxTimeoutSymb)
 80018a2:	f7ff fd91 	bl	80013c8 <millis>
 80018a6:	4602      	mov	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	8952      	ldrh	r2, [r2, #10]
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d308      	bcc.n	80018c6 <SX1278_receive+0x62>
					SX1278_rx_get_packet(inst);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f87e 	bl	80019b6 <SX1278_rx_get_packet>
					inst->rxTimeout = true;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					return false;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e012      	b.n	80018ec <SX1278_receive+0x88>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69da      	ldr	r2, [r3, #28]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	8a1b      	ldrh	r3, [r3, #16]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4610      	mov	r0, r2
 80018d2:	f005 fb6d 	bl	8006fb0 <HAL_GPIO_ReadPin>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0e2      	beq.n	80018a2 <SX1278_receive+0x3e>
			SX1278_rx_get_packet(inst);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f86a 	bl	80019b6 <SX1278_rx_get_packet>
			return inst->newPacket;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018e8:	e000      	b.n	80018ec <SX1278_receive+0x88>
	}
	else
	{
		//println("[LoRa] Cannot receive...standby");
		return false;
 80018ea:	2300      	movs	r3, #0
	}
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	4613      	mov	r3, r2
 8001900:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	461a      	mov	r2, r3
 8001906:	2122      	movs	r1, #34	; 0x22
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f7ff fd85 	bl	8001418 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	2100      	movs	r1, #0
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7ff fdac 	bl	8001472 <SX1278_command_burst>

	//sprintf(inst->lastPacket, (char*)txBuffer);
	uint8_t l;
	for (l = 0; l < length; l++)
 800191a:	2300      	movs	r3, #0
 800191c:	75fb      	strb	r3, [r7, #23]
 800191e:	e00c      	b.n	800193a <SX1278_tx_input+0x46>
	{
		inst->txBuffer[l] = txBuffer[l];
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	441a      	add	r2, r3
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	7811      	ldrb	r1, [r2, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	460a      	mov	r2, r1
 8001930:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	for (l = 0; l < length; l++)
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	3301      	adds	r3, #1
 8001938:	75fb      	strb	r3, [r7, #23]
 800193a:	7dfa      	ldrb	r2, [r7, #23]
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3ee      	bcc.n	8001920 <SX1278_tx_input+0x2c>
	}
	inst->txLen = length;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	79fa      	ldrb	r2, [r7, #7]
 8001946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 800195a:	228b      	movs	r2, #139	; 0x8b
 800195c:	2101      	movs	r1, #1
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fd5a 	bl	8001418 <SX1278_command>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001974:	2112      	movs	r1, #18
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fdd9 	bl	800152e <SX1278_read_address>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	bfcc      	ite	gt
 8001994:	2301      	movgt	r3, #1
 8001996:	2300      	movle	r3, #0
 8001998:	b2da      	uxtb	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	SX1278_clearLoRaIrq(inst);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f9d2 	bl	8001d4a <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8dc 	bl	8001b64 <SX1278_standby>

	//printLen = s//printf(//printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
	//printv(//printBuffer, //printLen);
	return true;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f980 	bl	8001cc4 <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3344      	adds	r3, #68	; 0x44
 80019c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f015 f9b3 	bl	8016d3a <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 80019d4:	2110      	movs	r1, #16
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fda9 	bl	800152e <SX1278_read_address>
 80019dc:	4603      	mov	r3, r0
 80019de:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 80019e0:	7bbb      	ldrb	r3, [r7, #14]
 80019e2:	461a      	mov	r2, r3
 80019e4:	210d      	movs	r1, #13
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fd16 	bl	8001418 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	795b      	ldrb	r3, [r3, #5]
 80019f0:	2b06      	cmp	r3, #6
 80019f2:	d104      	bne.n	80019fe <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e005      	b.n	8001a0a <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 80019fe:	2113      	movs	r1, #19
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff fd94 	bl	800152e <SX1278_read_address>
 8001a06:	4603      	mov	r3, r0
 8001a08:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2100      	movs	r1, #0
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fdb3 	bl	8001580 <SX1278_read_burst>

	inst->newPacket = inst->rxDone && !inst->rxTimeout && !(inst->crcError && !LR_VALIDATE_CRCERROR);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d009      	beq.n	8001a38 <SX1278_rx_get_packet+0x82>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SX1278_rx_get_packet+0x82>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <SX1278_rx_get_packet+0x84>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rssi = SX1278_getRSSI(inst);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f98c 	bl	8001d64 <SX1278_getRSSI>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34
	inst->rxLen = packet_size;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	SX1278_clearLoRaIrq(inst);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f975 	bl	8001d4a <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f87f 	bl	8001b64 <SX1278_standby>
	{
		//printLen = s//printf(//printBuffer, "[LoRa] Valid packet received!\r\n");
	}
	//printv(//printBuffer, //printLen);

	return inst->newPacket;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Transmit mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f964 	bl	8001d4a <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8001a82:	2241      	movs	r2, #65	; 0x41
 8001a84:	2140      	movs	r1, #64	; 0x40
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fcc6 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001a8c:	22f7      	movs	r2, #247	; 0xf7
 8001a8e:	2111      	movs	r1, #17
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fcc1 	bl	8001418 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001a96:	210e      	movs	r1, #14
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff fd48 	bl	800152e <SX1278_read_address>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	210d      	movs	r1, #13
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fcb5 	bl	8001418 <SX1278_command>

	inst->txLen = 0;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	inst->txDone = false;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->mode = TX;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	731a      	strb	r2, [r3, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	SX1278_standby(inst);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f845 	bl	8001b64 <SX1278_standby>
	//println("[LoRa] Goes into Receive mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f935 	bl	8001d4a <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	2140      	movs	r1, #64	; 0x40
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fc97 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 8001aea:	221f      	movs	r2, #31
 8001aec:	2111      	movs	r1, #17
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fc92 	bl	8001418 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 8001af4:	210f      	movs	r1, #15
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fd19 	bl	800152e <SX1278_read_address>
 8001afc:	4603      	mov	r3, r0
 8001afe:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	461a      	mov	r2, r3
 8001b04:	210d      	movs	r1, #13
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fc86 	bl	8001418 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 8001b0c:	228d      	movs	r2, #141	; 0x8d
 8001b0e:	2101      	movs	r1, #1
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fc81 	bl	8001418 <SX1278_command>

	inst->crcError = false;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxLen = 0;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	inst->newPacket = false;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxDone = false;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->mode = RX;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	731a      	strb	r2, [r3, #12]
	//println("[LoRa] Finished setting RX mode.");
}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Sleep mode.");
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	2101      	movs	r1, #1
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fc61 	bl	8001418 <SX1278_command>
	inst->mode = SLEEP;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	731a      	strb	r2, [r3, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Standby mode.");
	SX1278_command(inst, LR_RegOpMode, 0x09);
 8001b6c:	2209      	movs	r2, #9
 8001b6e:	2101      	movs	r1, #1
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fc51 	bl	8001418 <SX1278_command>
	inst->mode = STANDBY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	731a      	strb	r2, [r3, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <SX1278_reset>:

void SX1278_reset(SX1278* inst) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Resetting...");
	inst->newPacket = true;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxTimeout = false;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxDone = false;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->crcError = false;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = 1;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
	inst->newPacket = false;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->pendingIRQ = false;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	inst->txLen = 0;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	inst->rxLen = 0;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	inst->mode = SLEEP;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a18      	ldr	r0, [r3, #32]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	8a5b      	ldrh	r3, [r3, #18]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4619      	mov	r1, r3
 8001be4:	f005 f9fc 	bl	8006fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_RESET);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6998      	ldr	r0, [r3, #24]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	89db      	ldrh	r3, [r3, #14]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f005 f9f4 	bl	8006fe0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f004 fb73 	bl	80062e4 <HAL_Delay>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_SET);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6998      	ldr	r0, [r3, #24]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	89db      	ldrh	r3, [r3, #14]
 8001c06:	2201      	movs	r2, #1
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f005 f9e9 	bl	8006fe0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c0e:	2064      	movs	r0, #100	; 0x64
 8001c10:	f004 fb68 	bl	80062e4 <HAL_Delay>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <SX1278_dio0_IRQ>:

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01e      	beq.n	8001c6c <SX1278_dio0_IRQ+0x50>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d019      	beq.n	8001c6c <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7b1b      	ldrb	r3, [r3, #12]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d104      	bne.n	8001c4a <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fe93 	bl	800196c <SX1278_tx_finish>
 8001c46:	4603      	mov	r3, r0
 8001c48:	e011      	b.n	8001c6e <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7b1b      	ldrb	r3, [r3, #12]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d104      	bne.n	8001c5c <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff feaf 	bl	80019b6 <SX1278_rx_get_packet>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	e008      	b.n	8001c6e <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f874 	bl	8001d4a <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ff7e 	bl	8001b64 <SX1278_standby>
			return false;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e000      	b.n	8001c6e <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 8001c6c:	2300      	movs	r3, #0
	}
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <SX1278_intTimeout>:

bool SX1278_intTimeout(SX1278* inst)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	if ((millis() - inst->rxStart >= inst->config.rxTimeoutSymb) && inst->mode == RX && inst->pendingIRQ)
 8001c7e:	f7ff fba3 	bl	80013c8 <millis>
 8001c82:	4602      	mov	r2, r0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	8952      	ldrh	r2, [r2, #10]
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d313      	bcc.n	8001cba <SX1278_intTimeout+0x44>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7b1b      	ldrb	r3, [r3, #12]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d10f      	bne.n	8001cba <SX1278_intTimeout+0x44>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00a      	beq.n	8001cba <SX1278_intTimeout+0x44>
	{
		inst->rxTimeout = true;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		inst->rxStart = millis();
 8001cac:	f7ff fb8c 	bl	80013c8 <millis>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	63da      	str	r2, [r3, #60]	; 0x3c

		return true;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <SX1278_intTimeout+0x46>
	}
	return false;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001ccc:	2112      	movs	r1, #18
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fc2d 	bl	800152e <SX1278_read_address>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bfcc      	ite	gt
 8001cec:	2301      	movgt	r3, #1
 8001cee:	2300      	movle	r3, #0
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	// || inst->rxDone ##################################################### might cause error when reading this value!!!!!!!!!!!!!!!!!!!!!!!
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00) || !(inst->rxDone);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	dc07      	bgt.n	8001d16 <SX1278_update_IRQ_status+0x52>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <SX1278_update_IRQ_status+0x56>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <SX1278_update_IRQ_status+0x58>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	bfcc      	ite	gt
 8001d36:	2301      	movgt	r3, #1
 8001d38:	2300      	movle	r3, #0
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001d52:	22ff      	movs	r2, #255	; 0xff
 8001d54:	2112      	movs	r1, #18
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fb5e 	bl	8001418 <SX1278_command>
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001d6c:	211a      	movs	r1, #26
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fbdd 	bl	800152e <SX1278_read_address>
 8001d74:	4603      	mov	r3, r0
 8001d76:	3ba4      	subs	r3, #164	; 0xa4
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <read_data>:
#include "bmp280.h"
#include "run.h"

static inline int read_data(BMP280 *inst, uint8_t addr, uint8_t *value, uint8_t len) {
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b08b      	sub	sp, #44	; 0x2c
 8001d84:	af04      	add	r7, sp, #16
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	72fb      	strb	r3, [r7, #11]
 8001d90:	4613      	mov	r3, r2
 8001d92:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (inst->addr << 1);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	889b      	ldrh	r3, [r3, #4]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK) return 0;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	b29c      	uxth	r4, r3
 8001da4:	7abb      	ldrb	r3, [r7, #10]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	8af9      	ldrh	r1, [r7, #22]
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	9202      	str	r2, [sp, #8]
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2301      	movs	r3, #1
 8001db8:	4622      	mov	r2, r4
 8001dba:	f005 fb67 	bl	800748c <HAL_I2C_Mem_Read>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <read_data+0x48>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <read_data+0x4a>
	else return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}

08001dd2 <write_register8>:

static int write_register8(BMP280 *inst, uint8_t addr, uint8_t value) {
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b088      	sub	sp, #32
 8001dd6:	af04      	add	r7, sp, #16
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
 8001dde:	4613      	mov	r3, r2
 8001de0:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (inst->addr << 1);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	889b      	ldrh	r3, [r3, #4]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(inst->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK) return 0;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	89f9      	ldrh	r1, [r7, #14]
 8001df4:	f242 7310 	movw	r3, #10000	; 0x2710
 8001df8:	9302      	str	r3, [sp, #8]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	1cbb      	adds	r3, r7, #2
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2301      	movs	r3, #1
 8001e04:	f005 fa48 	bl	8007298 <HAL_I2C_Mem_Write>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <write_register8+0x40>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <write_register8+0x42>
	else return 1;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <read_register16>:

static bool read_register16(BMP280 *inst, uint8_t addr, uint16_t *value) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af04      	add	r7, sp, #16
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	460b      	mov	r3, r1
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (inst->addr << 1);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	889b      	ldrh	r3, [r3, #4]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, rx_buff, 2, 5000) == HAL_OK)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	7afb      	ldrb	r3, [r7, #11]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	8af9      	ldrh	r1, [r7, #22]
 8001e3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	2302      	movs	r3, #2
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f005 fb1d 	bl	800748c <HAL_I2C_Mem_Read>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10b      	bne.n	8001e70 <read_register16+0x54>
	{
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001e58:	7d7b      	ldrb	r3, [r7, #21]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	7d3b      	ldrb	r3, [r7, #20]
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	801a      	strh	r2, [r3, #0]
		return true;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <read_register16+0x56>
	}
	else return false;
 8001e70:	2300      	movs	r3, #0

}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <read_calibration_data>:

static bool read_calibration_data(BMP280 *inst)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
	return (read_register16(inst, 0x88, &inst->dig_T1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	330c      	adds	r3, #12
 8001e86:	461a      	mov	r2, r3
 8001e88:	2188      	movs	r1, #136	; 0x88
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffc6 	bl	8001e1c <read_register16>
 8001e90:	4603      	mov	r3, r0
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d06f      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8a, (uint16_t *) &inst->dig_T2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	330e      	adds	r3, #14
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	218a      	movs	r1, #138	; 0x8a
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffbc 	bl	8001e1c <read_register16>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d065      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8c, (uint16_t *) &inst->dig_T3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3310      	adds	r3, #16
 8001eae:	461a      	mov	r2, r3
 8001eb0:	218c      	movs	r1, #140	; 0x8c
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffb2 	bl	8001e1c <read_register16>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d05b      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8e, &inst->dig_P1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3312      	adds	r3, #18
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	218e      	movs	r1, #142	; 0x8e
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa8 	bl	8001e1c <read_register16>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d051      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x90, (uint16_t *) &inst->dig_P2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3314      	adds	r3, #20
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2190      	movs	r1, #144	; 0x90
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff9e 	bl	8001e1c <read_register16>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d047      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x92, (uint16_t *) &inst->dig_P3)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3316      	adds	r3, #22
 8001eea:	461a      	mov	r2, r3
 8001eec:	2192      	movs	r1, #146	; 0x92
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ff94 	bl	8001e1c <read_register16>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d03d      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3318      	adds	r3, #24
 8001efe:	461a      	mov	r2, r3
 8001f00:	2194      	movs	r1, #148	; 0x94
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff8a 	bl	8001e1c <read_register16>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d033      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	331a      	adds	r3, #26
 8001f12:	461a      	mov	r2, r3
 8001f14:	2196      	movs	r1, #150	; 0x96
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ff80 	bl	8001e1c <read_register16>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d029      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	331c      	adds	r3, #28
 8001f26:	461a      	mov	r2, r3
 8001f28:	2198      	movs	r1, #152	; 0x98
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ff76 	bl	8001e1c <read_register16>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d01f      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	331e      	adds	r3, #30
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	219a      	movs	r1, #154	; 0x9a
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ff6c 	bl	8001e1c <read_register16>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d015      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3320      	adds	r3, #32
 8001f4e:	461a      	mov	r2, r3
 8001f50:	219c      	movs	r1, #156	; 0x9c
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ff62 	bl	8001e1c <read_register16>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3322      	adds	r3, #34	; 0x22
 8001f62:	461a      	mov	r2, r3
 8001f64:	219e      	movs	r1, #158	; 0x9e
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ff58 	bl	8001e1c <read_register16>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <read_calibration_data+0xfc>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <read_calibration_data+0xfe>
 8001f76:	2300      	movs	r3, #0
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <bmp280_init>:

bool bmp280_init(BMP280 *inst, BMP280_config *params)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
	inst->active = false;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	if (inst->addr != BMP280_I2C_ADDRESS_0 && inst->addr != BMP280_I2C_ADDRESS_1) return false;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	889b      	ldrh	r3, [r3, #4]
 8001f9c:	2b76      	cmp	r3, #118	; 0x76
 8001f9e:	d005      	beq.n	8001fac <bmp280_init+0x26>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	889b      	ldrh	r3, [r3, #4]
 8001fa4:	2b77      	cmp	r3, #119	; 0x77
 8001fa6:	d001      	beq.n	8001fac <bmp280_init+0x26>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e073      	b.n	8002094 <bmp280_init+0x10e>
	if (read_data(inst, BMP280_REG_ID, &inst->id, 1)) return false;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1d9a      	adds	r2, r3, #6
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	21d0      	movs	r1, #208	; 0xd0
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fee3 	bl	8001d80 <read_data>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <bmp280_init+0x3e>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e067      	b.n	8002094 <bmp280_init+0x10e>
	if (inst->id != BMP280_CHIP_ID) return false;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	799b      	ldrb	r3, [r3, #6]
 8001fc8:	2b58      	cmp	r3, #88	; 0x58
 8001fca:	d001      	beq.n	8001fd0 <bmp280_init+0x4a>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e061      	b.n	8002094 <bmp280_init+0x10e>

	// Soft reset.
	if (write_register8(inst, BMP280_REG_RESET, BMP280_RESET_VALUE)) return false;
 8001fd0:	22b6      	movs	r2, #182	; 0xb6
 8001fd2:	21e0      	movs	r1, #224	; 0xe0
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fefc 	bl	8001dd2 <write_register8>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <bmp280_init+0x5e>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e057      	b.n	8002094 <bmp280_init+0x10e>

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(inst, BMP280_REG_STATUS, &status, 1) && (status & 1) == 0) break;
 8001fe4:	f107 020d 	add.w	r2, r7, #13
 8001fe8:	2301      	movs	r3, #1
 8001fea:	21f3      	movs	r1, #243	; 0xf3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fec7 	bl	8001d80 <read_data>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f5      	bne.n	8001fe4 <bmp280_init+0x5e>
 8001ff8:	7b7b      	ldrb	r3, [r7, #13]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <bmp280_init+0x5e>
	}

	if (!read_calibration_data(inst)) return false;
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ff39 	bl	8001e7a <read_calibration_data>
 8002008:	4603      	mov	r3, r0
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d100      	bne.n	8002016 <bmp280_init+0x90>
 8002014:	e001      	b.n	800201a <bmp280_init+0x94>
 8002016:	2300      	movs	r3, #0
 8002018:	e03c      	b.n	8002094 <bmp280_init+0x10e>

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	791b      	ldrb	r3, [r3, #4]
 800201e:	015b      	lsls	r3, r3, #5
 8002020:	b25a      	sxtb	r2, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	b25b      	sxtb	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b25b      	sxtb	r3, r3
 800202e:	73fb      	strb	r3, [r7, #15]
	if (write_register8(inst, BMP280_REG_CONFIG, config)) return false;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	461a      	mov	r2, r3
 8002034:	21f5      	movs	r1, #245	; 0xf5
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fecb 	bl	8001dd2 <write_register8>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <bmp280_init+0xc0>
 8002042:	2300      	movs	r3, #0
 8002044:	e026      	b.n	8002094 <bmp280_init+0x10e>

	if (params->mode == BMP280_MODE_FORCED) {
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d102      	bne.n	8002054 <bmp280_init+0xce>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	78db      	ldrb	r3, [r3, #3]
 8002058:	015b      	lsls	r3, r3, #5
 800205a:	b25a      	sxtb	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	789b      	ldrb	r3, [r3, #2]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	b25b      	sxtb	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b25a      	sxtb	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b25b      	sxtb	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b25b      	sxtb	r3, r3
 8002072:	73bb      	strb	r3, [r7, #14]

	if (write_register8(inst, BMP280_REG_CTRL, ctrl)) return false;
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	461a      	mov	r2, r3
 8002078:	21f4      	movs	r1, #244	; 0xf4
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fea9 	bl	8001dd2 <write_register8>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <bmp280_init+0x104>
 8002086:	2300      	movs	r3, #0
 8002088:	e004      	b.n	8002094 <bmp280_init+0x10e>

	inst->active = true;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	return true;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp,
		int32_t *fine_temp) {
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	10da      	asrs	r2, r3, #3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	899b      	ldrh	r3, [r3, #12]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 80020be:	12db      	asrs	r3, r3, #11
 80020c0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	111b      	asrs	r3, r3, #4
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	8992      	ldrh	r2, [r2, #12]
 80020ca:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	1112      	asrs	r2, r2, #4
 80020d0:	68f9      	ldr	r1, [r7, #12]
 80020d2:	8989      	ldrh	r1, [r1, #12]
 80020d4:	1a52      	subs	r2, r2, r1
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 80020e6:	139b      	asrs	r3, r3, #14
 80020e8:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	441a      	add	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	3380      	adds	r3, #128	; 0x80
 8002100:	121b      	asrs	r3, r3, #8
}
 8002102:	4618      	mov	r0, r3
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press,
		int32_t fine_temp) {
 800210e:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4619      	mov	r1, r3
 8002120:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002124:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8002128:	f142 34ff 	adc.w	r4, r2, #4294967295
 800212c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	6a3a      	ldr	r2, [r7, #32]
 8002134:	fb02 f203 	mul.w	r2, r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	6a39      	ldr	r1, [r7, #32]
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	441a      	add	r2, r3
 8002142:	6a39      	ldr	r1, [r7, #32]
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	fba1 3403 	umull	r3, r4, r1, r3
 800214a:	4422      	add	r2, r4
 800214c:	4614      	mov	r4, r2
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8002154:	b211      	sxth	r1, r2
 8002156:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800215a:	fb01 f504 	mul.w	r5, r1, r4
 800215e:	fb03 f002 	mul.w	r0, r3, r2
 8002162:	4428      	add	r0, r5
 8002164:	fba3 3401 	umull	r3, r4, r3, r1
 8002168:	1902      	adds	r2, r0, r4
 800216a:	4614      	mov	r4, r2
 800216c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8002170:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800217a:	b21b      	sxth	r3, r3
 800217c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002180:	6a3a      	ldr	r2, [r7, #32]
 8002182:	fb04 f102 	mul.w	r1, r4, r2
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	fb03 f202 	mul.w	r2, r3, r2
 800218c:	1888      	adds	r0, r1, r2
 800218e:	6a3a      	ldr	r2, [r7, #32]
 8002190:	fba2 1203 	umull	r1, r2, r2, r3
 8002194:	1883      	adds	r3, r0, r2
 8002196:	461a      	mov	r2, r3
 8002198:	f04f 0500 	mov.w	r5, #0
 800219c:	f04f 0600 	mov.w	r6, #0
 80021a0:	0456      	lsls	r6, r2, #17
 80021a2:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80021a6:	044d      	lsls	r5, r1, #17
 80021a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80021ac:	186b      	adds	r3, r5, r1
 80021ae:	eb46 0402 	adc.w	r4, r6, r2
 80021b2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80021bc:	b219      	sxth	r1, r3
 80021be:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80021c2:	f04f 0500 	mov.w	r5, #0
 80021c6:	f04f 0600 	mov.w	r6, #0
 80021ca:	00ce      	lsls	r6, r1, #3
 80021cc:	2500      	movs	r5, #0
 80021ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80021d2:	186b      	adds	r3, r5, r1
 80021d4:	eb46 0402 	adc.w	r4, r6, r2
 80021d8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	6a3a      	ldr	r2, [r7, #32]
 80021e0:	fb02 f203 	mul.w	r2, r2, r3
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	6a39      	ldr	r1, [r7, #32]
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	441a      	add	r2, r3
 80021ee:	6a39      	ldr	r1, [r7, #32]
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	fba1 3403 	umull	r3, r4, r1, r3
 80021f6:	4422      	add	r2, r4
 80021f8:	4614      	mov	r4, r2
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8002200:	b211      	sxth	r1, r2
 8002202:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002206:	fb01 f504 	mul.w	r5, r1, r4
 800220a:	fb03 f002 	mul.w	r0, r3, r2
 800220e:	4428      	add	r0, r5
 8002210:	fba3 3401 	umull	r3, r4, r3, r1
 8002214:	1902      	adds	r2, r0, r4
 8002216:	4614      	mov	r4, r2
 8002218:	f04f 0100 	mov.w	r1, #0
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	0a19      	lsrs	r1, r3, #8
 8002222:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8002226:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) inst->dig_P2) << 12);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800222e:	b21b      	sxth	r3, r3
 8002230:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002234:	6a38      	ldr	r0, [r7, #32]
 8002236:	fb04 f500 	mul.w	r5, r4, r0
 800223a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800223c:	fb03 f000 	mul.w	r0, r3, r0
 8002240:	4428      	add	r0, r5
 8002242:	6a3d      	ldr	r5, [r7, #32]
 8002244:	fba5 5603 	umull	r5, r6, r5, r3
 8002248:	1983      	adds	r3, r0, r6
 800224a:	461e      	mov	r6, r3
 800224c:	f04f 0b00 	mov.w	fp, #0
 8002250:	f04f 0c00 	mov.w	ip, #0
 8002254:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8002258:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 800225c:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8002260:	eb1b 0301 	adds.w	r3, fp, r1
 8002264:	eb4c 0402 	adc.w	r4, ip, r2
 8002268:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 800226c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002270:	1c19      	adds	r1, r3, #0
 8002272:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8a5b      	ldrh	r3, [r3, #18]
 800227a:	b29b      	uxth	r3, r3
 800227c:	f04f 0400 	mov.w	r4, #0
 8002280:	fb03 f502 	mul.w	r5, r3, r2
 8002284:	fb01 f004 	mul.w	r0, r1, r4
 8002288:	4428      	add	r0, r5
 800228a:	fba1 3403 	umull	r3, r4, r1, r3
 800228e:	1902      	adds	r2, r0, r4
 8002290:	4614      	mov	r4, r2
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	1061      	asrs	r1, r4, #1
 800229c:	17e2      	asrs	r2, r4, #31
 800229e:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 80022a2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80022a6:	4323      	orrs	r3, r4
 80022a8:	d101      	bne.n	80022ae <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80022aa:	2300      	movs	r3, #0
 80022ac:	e0d4      	b.n	8002458 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80022b4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80022b8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	ea4f 0963 	mov.w	r9, r3, asr #1
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80022c8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80022cc:	4645      	mov	r5, r8
 80022ce:	464e      	mov	r6, r9
 80022d0:	1aed      	subs	r5, r5, r3
 80022d2:	eb66 0604 	sbc.w	r6, r6, r4
 80022d6:	46a8      	mov	r8, r5
 80022d8:	46b1      	mov	r9, r6
 80022da:	eb18 0308 	adds.w	r3, r8, r8
 80022de:	eb49 0409 	adc.w	r4, r9, r9
 80022e2:	4698      	mov	r8, r3
 80022e4:	46a1      	mov	r9, r4
 80022e6:	eb18 0805 	adds.w	r8, r8, r5
 80022ea:	eb49 0906 	adc.w	r9, r9, r6
 80022ee:	f04f 0100 	mov.w	r1, #0
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80022fa:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80022fe:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8002302:	eb18 0801 	adds.w	r8, r8, r1
 8002306:	eb49 0902 	adc.w	r9, r9, r2
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002316:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800231a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800231e:	4688      	mov	r8, r1
 8002320:	4691      	mov	r9, r2
 8002322:	eb18 0805 	adds.w	r8, r8, r5
 8002326:	eb49 0906 	adc.w	r9, r9, r6
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002336:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800233a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800233e:	4688      	mov	r8, r1
 8002340:	4691      	mov	r9, r2
 8002342:	eb18 0005 	adds.w	r0, r8, r5
 8002346:	eb49 0106 	adc.w	r1, r9, r6
 800234a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800234e:	f7fe fcab 	bl	8000ca8 <__aeabi_ldivmod>
 8002352:	4603      	mov	r3, r0
 8002354:	460c      	mov	r4, r1
 8002356:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002360:	b219      	sxth	r1, r3
 8002362:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002366:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	f04f 0400 	mov.w	r4, #0
 8002372:	0b6b      	lsrs	r3, r5, #13
 8002374:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002378:	1374      	asrs	r4, r6, #13
 800237a:	fb03 f502 	mul.w	r5, r3, r2
 800237e:	fb01 f004 	mul.w	r0, r1, r4
 8002382:	4428      	add	r0, r5
 8002384:	fba1 1203 	umull	r1, r2, r1, r3
 8002388:	1883      	adds	r3, r0, r2
 800238a:	461a      	mov	r2, r3
 800238c:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	f04f 0400 	mov.w	r4, #0
 8002398:	0b6b      	lsrs	r3, r5, #13
 800239a:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800239e:	1374      	asrs	r4, r6, #13
 80023a0:	fb03 f502 	mul.w	r5, r3, r2
 80023a4:	fb01 f004 	mul.w	r0, r1, r4
 80023a8:	4428      	add	r0, r5
 80023aa:	fba1 1203 	umull	r1, r2, r1, r3
 80023ae:	1883      	adds	r3, r0, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	f04f 0400 	mov.w	r4, #0
 80023ba:	0e4b      	lsrs	r3, r1, #25
 80023bc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80023c0:	1654      	asrs	r4, r2, #25
 80023c2:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	fb04 f102 	mul.w	r1, r4, r2
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	fb03 f202 	mul.w	r2, r3, r2
 80023de:	1888      	adds	r0, r1, r2
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	fba2 1203 	umull	r1, r2, r2, r3
 80023e6:	1883      	adds	r3, r0, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	f04f 0400 	mov.w	r4, #0
 80023f2:	0ccb      	lsrs	r3, r1, #19
 80023f4:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80023f8:	14d4      	asrs	r4, r2, #19
 80023fa:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 80023fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002402:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002406:	eb11 0803 	adds.w	r8, r1, r3
 800240a:	eb42 0904 	adc.w	r9, r2, r4
 800240e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002412:	eb13 0508 	adds.w	r5, r3, r8
 8002416:	eb44 0609 	adc.w	r6, r4, r9
 800241a:	f04f 0100 	mov.w	r1, #0
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	0a29      	lsrs	r1, r5, #8
 8002424:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8002428:	1232      	asrs	r2, r6, #8
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002430:	b21d      	sxth	r5, r3
 8002432:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002436:	f04f 0800 	mov.w	r8, #0
 800243a:	f04f 0900 	mov.w	r9, #0
 800243e:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002442:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8002446:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800244a:	eb18 0301 	adds.w	r3, r8, r1
 800244e:	eb49 0402 	adc.w	r4, r9, r2
 8002452:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8002456:	693b      	ldr	r3, [r7, #16]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08002462 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280 *inst, int32_t *temperature, uint32_t *pressure) {
 8002462:	b580      	push	{r7, lr}
 8002464:	b08a      	sub	sp, #40	; 0x28
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	// Need to read in one sequence to ensure they match.
	size_t size = 6;
 800246e:	2306      	movs	r3, #6
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
	if (read_data(inst, 0xf7, data, size)) return false;
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f107 0214 	add.w	r2, r7, #20
 800247a:	21f7      	movs	r1, #247	; 0xf7
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7ff fc7f 	bl	8001d80 <read_data>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <bmp280_read_fixed+0x2a>
 8002488:	2300      	movs	r3, #0
 800248a:	e027      	b.n	80024dc <bmp280_read_fixed+0x7a>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800248c:	7d3b      	ldrb	r3, [r7, #20]
 800248e:	031a      	lsls	r2, r3, #12
 8002490:	7d7b      	ldrb	r3, [r7, #21]
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	4313      	orrs	r3, r2
 8002496:	7dba      	ldrb	r2, [r7, #22]
 8002498:	0912      	lsrs	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	4313      	orrs	r3, r2
 800249e:	623b      	str	r3, [r7, #32]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	031a      	lsls	r2, r3, #12
 80024a4:	7e3b      	ldrb	r3, [r7, #24]
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	4313      	orrs	r3, r2
 80024aa:	7e7a      	ldrb	r2, [r7, #25]
 80024ac:	0912      	lsrs	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61fb      	str	r3, [r7, #28]

	int32_t fine_temp;
	*temperature = compensate_temperature(inst, adc_temp, &fine_temp);
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	461a      	mov	r2, r3
 80024ba:	69f9      	ldr	r1, [r7, #28]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff fded 	bl	800209c <compensate_temperature>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(inst, adc_pressure, fine_temp);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	461a      	mov	r2, r3
 80024cc:	6a39      	ldr	r1, [r7, #32]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff fe1d 	bl	800210e <compensate_pressure>
 80024d4:	4602      	mov	r2, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]

	return true;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3728      	adds	r7, #40	; 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <bmp280_read_float>:

bool bmp280_read_float(BMP280 *inst, float *temperature, float *pressure)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(inst, &fixed_temperature, &fixed_pressure))
 80024f0:	f107 0210 	add.w	r2, r7, #16
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4619      	mov	r1, r3
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7ff ffb1 	bl	8002462 <bmp280_read_fixed>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d021      	beq.n	800254a <bmp280_read_float+0x66>
	{
		*temperature = (float) fixed_temperature / 100;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002510:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002554 <bmp280_read_float+0x70>
 8002514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002528:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002558 <bmp280_read_float+0x74>
 800252c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	edc3 7a00 	vstr	s15, [r3]

		inst->temperature = *temperature;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	62da      	str	r2, [r3, #44]	; 0x2c
		inst->pressure = *pressure;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	629a      	str	r2, [r3, #40]	; 0x28
		return true;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <bmp280_read_float+0x68>
	}

	return false;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	42c80000 	.word	0x42c80000
 8002558:	43800000 	.word	0x43800000

0800255c <bmp280_update>:

bool bmp280_update(BMP280 *inst)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	// uneccessary, to change
	float te;
	float pre;
	return bmp280_read_float(inst, &te, &pre);
 8002564:	f107 0208 	add.w	r2, r7, #8
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ffb8 	bl	80024e4 <bmp280_read_float>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <millis>:
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
 8002584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <millis+0x1c>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	10624dd3 	.word	0x10624dd3

080025a0 <GPS_read>:
		@brief Read one character from the GPS device
		@return The character that we received, or 0 if nothing was available
*/
/**************************************************************************/
char GPS_read(GPS* inst)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	////println("[GPS] read()");
	static uint32_t firstChar = 0; // first character received in current sentence
	uint32_t tStart = millis();		// as close as we can get to time char was sent
 80025a8:	f7ff ffea 	bl	8002580 <millis>
 80025ac:	60f8      	str	r0, [r7, #12]
	char c = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	72fb      	strb	r3, [r7, #11]
	uint8_t ca[1] = {0};
 80025b2:	2300      	movs	r3, #0
 80025b4:	723b      	strb	r3, [r7, #8]

	if (inst->paused) return c;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <GPS_read+0x24>
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	e07e      	b.n	80026c2 <GPS_read+0x122>

	HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	72bb      	strb	r3, [r7, #10]
	status = HAL_UART_Receive(inst->uart, ca, 1, 50);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 80025ce:	f107 0108 	add.w	r1, r7, #8
 80025d2:	2332      	movs	r3, #50	; 0x32
 80025d4:	2201      	movs	r2, #1
 80025d6:	f00a fa83 	bl	800cae0 <HAL_UART_Receive>
 80025da:	4603      	mov	r3, r0
 80025dc:	72bb      	strb	r3, [r7, #10]
	//print("Status: ");
	//print_int(status);
	//println("");
	c = (char)ca[0];
 80025de:	7a3b      	ldrb	r3, [r7, #8]
 80025e0:	72fb      	strb	r3, [r7, #11]

	inst->currentline[inst->lineidx++] = c;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	1c59      	adds	r1, r3, #1
 80025f2:	b2c8      	uxtb	r0, r1
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
 80025fa:	4413      	add	r3, r2
 80025fc:	7afa      	ldrb	r2, [r7, #11]
 80025fe:	701a      	strb	r2, [r3, #0]
	if (inst->lineidx >= MAXLINELENGTH) inst->lineidx = MAXLINELENGTH - 1; // ensure there is someplace to put the next received character
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b77      	cmp	r3, #119	; 0x77
 800260a:	d903      	bls.n	8002614 <GPS_read+0x74>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2277      	movs	r2, #119	; 0x77
 8002610:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	if (c == '\n')
 8002614:	7afb      	ldrb	r3, [r7, #11]
 8002616:	2b0a      	cmp	r3, #10
 8002618:	d141      	bne.n	800269e <GPS_read+0xfe>
	{
		inst->currentline[inst->lineidx] = 0;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	4413      	add	r3, r2
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]

		if (inst->currentline == inst->line1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	33d8      	adds	r3, #216	; 0xd8
 8002638:	429a      	cmp	r2, r3
 800263a:	d10c      	bne.n	8002656 <GPS_read+0xb6>
		{
			inst->currentline = inst->line2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 8002654:	e00b      	b.n	800266e <GPS_read+0xce>
		}
		else
		{
			inst->currentline = inst->line1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		}

		// Serial.//println("----");
		// Serial.//println((char* )lastline);
		// Serial.//println("----");
		inst->lineidx = 0;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		inst->recvdflag = true;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		inst->recvdTime = millis(); // time we got the end of the string
 800267e:	f7ff ff7f 	bl	8002580 <millis>
 8002682:	4602      	mov	r2, r0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		inst->sentTime = firstChar;
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <GPS_read+0x12c>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		firstChar = 0; // there are no characters yet
 8002694:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <GPS_read+0x12c>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
		return c;			// wait until next character to set time
 800269a:	7afb      	ldrb	r3, [r7, #11]
 800269c:	e011      	b.n	80026c2 <GPS_read+0x122>
	}

	if (firstChar == 0) firstChar = tStart;
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <GPS_read+0x12c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <GPS_read+0x10c>
 80026a6:	4a09      	ldr	r2, [pc, #36]	; (80026cc <GPS_read+0x12c>)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6013      	str	r3, [r2, #0]

	//wait for finished transmission
	////println("[GPS] read() ... waiting");
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 80026ac:	bf00      	nop
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80026b4:	4618      	mov	r0, r3
 80026b6:	f00a fab9 	bl	800cc2c <HAL_UART_GetState>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d1f6      	bne.n	80026ae <GPS_read+0x10e>
	////println("[GPS] finished");
	return c;
 80026c0:	7afb      	ldrb	r3, [r7, #11]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200005a8 	.word	0x200005a8

080026d0 <GPS_init>:
/*!
		@brief Initialization code used by all constructor types
*/
/**************************************************************************/
bool GPS_init(GPS* inst)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	// UART instance, code ##########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@
	//println("[GPS] init()");
	inst->active = false;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	inst->recvdflag = false;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	inst->inStandbyMode = false;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	inst->paused = false;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	inst->lineidx = 0;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	inst->currentline = inst->line1;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	inst->lastline = inst->line2;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	// uint8_t
	inst->gpsTime.hour = 0;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = 0;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = 0;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->gpsTime.year = 0;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->gpsTime.month = 0;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->gpsTime.dayM = 0;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->fixquality = 0;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	inst->fixquality_3d = 0;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	inst->satellites = 0;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	// bool
	inst->fix = false;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	// char
	inst->lat = 0;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 0;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 0;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	// uint16_t
	inst->gpsTime.msecond = 0;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	875a      	strh	r2, [r3, #58]	; 0x3a
	// float
	inst->latitude = 0.0;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	63da      	str	r2, [r3, #60]	; 0x3c
	inst->longitude = 0.0;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
	inst->geoidheight = 0.0;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
	inst->altitude = 0.0;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	659a      	str	r2, [r3, #88]	; 0x58
	inst->speed = 0.0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	65da      	str	r2, [r3, #92]	; 0x5c
	inst->angle = 0.0;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	661a      	str	r2, [r3, #96]	; 0x60
	inst->magvariation = 0.0;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	665a      	str	r2, [r3, #100]	; 0x64
	inst->HDOP = 0.0;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	669a      	str	r2, [r3, #104]	; 0x68
	inst->VDOP = 0.0;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	66da      	str	r2, [r3, #108]	; 0x6c
	inst->PDOP = 0.0;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	671a      	str	r2, [r3, #112]	; 0x70

	inst->lastUpdate = 0; // millis() when last full sentence successfully parsed
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	inst->lastFix = 0;  // millis() when last fix received
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	inst->lastTime = 0; // millis() when last time received
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	inst->lastDate = 0; // millis() when last date received
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	inst->recvdTime = 0; // millis() when last full sentence received
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	inst->sentTime = 0; // millis() when first character of last full sentence received
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	inst->lat = 'X';
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2258      	movs	r2, #88	; 0x58
 800280a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 'X';
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2258      	movs	r2, #88	; 0x58
 8002812:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 'X';
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2258      	movs	r2, #88	; 0x58
 800281a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	inst->thisCheck = 0;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
	memset(inst->thisSource, 0x00, NMEA_MAX_SOURCE_ID);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	2203      	movs	r2, #3
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f014 fa84 	bl	8016d3a <memset>
	memset(inst->thisSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3307      	adds	r3, #7
 8002836:	2214      	movs	r2, #20
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f014 fa7d 	bl	8016d3a <memset>
	memset(inst->lastSource, 0x00, NMEA_MAX_SOURCE_ID);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	331b      	adds	r3, #27
 8002844:	2203      	movs	r2, #3
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f014 fa76 	bl	8016d3a <memset>
	memset(inst->lastSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	331e      	adds	r3, #30
 8002852:	2214      	movs	r2, #20
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f014 fa6f 	bl	8016d3a <memset>

	memset(inst->txtTXT, 0x00, 63);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3388      	adds	r3, #136	; 0x88
 8002860:	223f      	movs	r2, #63	; 0x3f
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f014 fa68 	bl	8016d3a <memset>
	inst->txtTot = 0;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	inst->txtID = 0;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	inst->txtN = 0;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	inst->sources[0] = "II";
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a3c      	ldr	r2, [pc, #240]	; (8002978 <GPS_init+0x2a8>)
 8002886:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	inst->sources[1] = "WI";
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a3b      	ldr	r2, [pc, #236]	; (800297c <GPS_init+0x2ac>)
 800288e:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	inst->sources[2] = "GP";
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a3a      	ldr	r2, [pc, #232]	; (8002980 <GPS_init+0x2b0>)
 8002896:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	inst->sources[3] = "GN";
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a39      	ldr	r2, [pc, #228]	; (8002984 <GPS_init+0x2b4>)
 800289e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	inst->sources[4] = "ZZZ";
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a38      	ldr	r2, [pc, #224]	; (8002988 <GPS_init+0x2b8>)
 80028a6:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	inst->sentences_parsed[0] = "GGA";
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a37      	ldr	r2, [pc, #220]	; (800298c <GPS_init+0x2bc>)
 80028ae:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	inst->sentences_parsed[1] = "GLL";
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a36      	ldr	r2, [pc, #216]	; (8002990 <GPS_init+0x2c0>)
 80028b6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	inst->sentences_parsed[2] = "GSA";
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a35      	ldr	r2, [pc, #212]	; (8002994 <GPS_init+0x2c4>)
 80028be:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	inst->sentences_parsed[3] = "RMC";
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a34      	ldr	r2, [pc, #208]	; (8002998 <GPS_init+0x2c8>)
 80028c6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	inst->sentences_parsed[4] = "ZZZ";
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a2e      	ldr	r2, [pc, #184]	; (8002988 <GPS_init+0x2b8>)
 80028ce:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	inst->sentences_known[0] = "ZZZ";
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a2c      	ldr	r2, [pc, #176]	; (8002988 <GPS_init+0x2b8>)
 80028d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	//GPS_standby(inst);
	//GPS_wakeup(inst);

	HAL_Delay(1000);
 80028da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028de:	f003 fd01 	bl	80062e4 <HAL_Delay>

	GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_RMCGGAGSA);
 80028e2:	492e      	ldr	r1, [pc, #184]	; (800299c <GPS_init+0x2cc>)
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f85f 	bl	80029a8 <GPS_sendCommand>
	GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_1HZ);
 80028ea:	492d      	ldr	r1, [pc, #180]	; (80029a0 <GPS_init+0x2d0>)
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f85b 	bl	80029a8 <GPS_sendCommand>

	HAL_Delay(1000);
 80028f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028f6:	f003 fcf5 	bl	80062e4 <HAL_Delay>

	GPS_sendCommand(inst, PMTK_Q_RELEASE);
 80028fa:	492a      	ldr	r1, [pc, #168]	; (80029a4 <GPS_init+0x2d4>)
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f853 	bl	80029a8 <GPS_sendCommand>
	HAL_Delay(10);
 8002902:	200a      	movs	r0, #10
 8002904:	f003 fcee 	bl	80062e4 <HAL_Delay>

	uint32_t timeout = millis();
 8002908:	f7ff fe3a 	bl	8002580 <millis>
 800290c:	60f8      	str	r0, [r7, #12]

	while (millis() - timeout <= 1000)
 800290e:	e025      	b.n	800295c <GPS_init+0x28c>
	{
		GPS_read(inst);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fe45 	bl	80025a0 <GPS_read>
		if (GPS_newNMEAreceived(inst))
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 ffb3 	bl	8003882 <GPS_newNMEAreceived>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01c      	beq.n	800295c <GPS_init+0x28c>
		{
			// not exact, but works now
			GPS_parse(inst, GPS_lastNMEA(inst));
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 ffbb 	bl	800389e <GPS_lastNMEA>
 8002928:	4603      	mov	r3, r0
 800292a:	4619      	mov	r1, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f85d 	bl	80029ec <GPS_parse>
			if (GPS_lastNMEA(inst)[0] == '$' && GPS_lastNMEA(inst)[1] == 'G')
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 ffb3 	bl	800389e <GPS_lastNMEA>
 8002938:	4603      	mov	r3, r0
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b24      	cmp	r3, #36	; 0x24
 800293e:	d10d      	bne.n	800295c <GPS_init+0x28c>
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 ffac 	bl	800389e <GPS_lastNMEA>
 8002946:	4603      	mov	r3, r0
 8002948:	3301      	adds	r3, #1
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b47      	cmp	r3, #71	; 0x47
 800294e:	d105      	bne.n	800295c <GPS_init+0x28c>
			{
				inst->active = true;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

				//GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_RMCGGAGSA);
				//GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_1HZ);
				return true;
 8002958:	2301      	movs	r3, #1
 800295a:	e008      	b.n	800296e <GPS_init+0x29e>
	while (millis() - timeout <= 1000)
 800295c:	f7ff fe10 	bl	8002580 <millis>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800296a:	d9d1      	bls.n	8002910 <GPS_init+0x240>
			}
		}
	}
	return false;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	0801d6f4 	.word	0x0801d6f4
 800297c:	0801d6f8 	.word	0x0801d6f8
 8002980:	0801d6fc 	.word	0x0801d6fc
 8002984:	0801d700 	.word	0x0801d700
 8002988:	0801d704 	.word	0x0801d704
 800298c:	0801d708 	.word	0x0801d708
 8002990:	0801d70c 	.word	0x0801d70c
 8002994:	0801d710 	.word	0x0801d710
 8002998:	0801d714 	.word	0x0801d714
 800299c:	0801d718 	.word	0x0801d718
 80029a0:	0801d74c 	.word	0x0801d74c
 80029a4:	0801d760 	.word	0x0801d760

080029a8 <GPS_sendCommand>:
		@brief Send a command to the GPS device
		@param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void GPS_sendCommand(GPS* inst, char* str)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
	//println("[GPS] sendCommand()");
	// NOT THIS //printLN, code !!!!!!!!!!!!!!@@@@@@@@@@@@@@@@@@@#################$$$$$$$$$$$$$$$$$$$$$$$$$$
	HAL_UART_Transmit(inst->uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 80029b8:	6838      	ldr	r0, [r7, #0]
 80029ba:	f7fd fc13 	bl	80001e4 <strlen>
 80029be:	4603      	mov	r3, r0
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	6839      	ldr	r1, [r7, #0]
 80029c8:	4620      	mov	r0, r4
 80029ca:	f009 fff0 	bl	800c9ae <HAL_UART_Transmit>
	//println("[GPS] sendCommand()... waiting");
	// wait for finished transmission
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 80029ce:	bf00      	nop
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80029d6:	4618      	mov	r0, r3
 80029d8:	f00a f928 	bl	800cc2c <HAL_UART_GetState>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d1f6      	bne.n	80029d0 <GPS_sendCommand+0x28>
	//println("[GPS] finished");
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd90      	pop	{r4, r7, pc}
	...

080029ec <GPS_parse>:
		@return True if we parsed it, false if it has an invalid checksum or invalid
	 data
*/
/**************************************************************************/
bool GPS_parse(GPS* inst, char* nmea)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
	// do checksum check
	if (!GPS_check(inst, nmea)) return false;
 80029f6:	6839      	ldr	r1, [r7, #0]
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fb65 	bl	80030c8 <GPS_check>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f083 0301 	eor.w	r3, r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <GPS_parse+0x22>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e355      	b.n	80030ba <GPS_parse+0x6ce>
	// passed the check, so there's a valid source in thisSource and a valid
	// sentence in thisSentence

	// look for a few common sentences
	char* p = nmea; // Pointer to move through the sentence -- good parsers are
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	617b      	str	r3, [r7, #20]
									// non-destructive
	p = strchr(p, ',') + 1; // Skip to the character after the next comma, then check sentence.
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	6978      	ldr	r0, [r7, #20]
 8002a16:	f015 f8c4 	bl	8017ba2 <strchr>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]

	if (!strcmp(inst->thisSentence, "GGA"))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3307      	adds	r3, #7
 8002a24:	49a5      	ldr	r1, [pc, #660]	; (8002cbc <GPS_parse+0x2d0>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fbd2 	bl	80001d0 <strcmp>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 80e6 	bne.w	8002c00 <GPS_parse+0x214>
	{
		// found GGA
		// get time
		GPS_parseTime(inst, p);
 8002a34:	6979      	ldr	r1, [r7, #20]
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fcc6 	bl	80033c8 <GPS_parseTime>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f015 f8af 	bl	8017ba2 <strchr>
 8002a44:	4603      	mov	r3, r0
 8002a46:	3301      	adds	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002a4a:	6979      	ldr	r1, [r7, #20]
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fd0b 	bl	8003468 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	6978      	ldr	r0, [r7, #20]
 8002a56:	f015 f8a4 	bl	8017ba2 <strchr>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002a60:	6979      	ldr	r1, [r7, #20]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fdb6 	bl	80035d4 <GPS_parseLatDir>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f083 0301 	eor.w	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <GPS_parse+0x8c>
 8002a74:	2300      	movs	r3, #0
 8002a76:	e320      	b.n	80030ba <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f015 f891 	bl	8017ba2 <strchr>
 8002a80:	4603      	mov	r3, r0
 8002a82:	3301      	adds	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002a86:	6979      	ldr	r1, [r7, #20]
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fde3 	bl	8003654 <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	6978      	ldr	r0, [r7, #20]
 8002a92:	f015 f886 	bl	8017ba2 <strchr>
 8002a96:	4603      	mov	r3, r0
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002a9c:	6979      	ldr	r1, [r7, #20]
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fe80 	bl	80037a4 <GPS_parseLonDir>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f083 0301 	eor.w	r3, r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <GPS_parse+0xc8>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e302      	b.n	80030ba <GPS_parse+0x6ce>

		p = strchr(p, ',') + 1;
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f015 f873 	bl	8017ba2 <strchr>
 8002abc:	4603      	mov	r3, r0
 8002abe:	3301      	adds	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002ac2:	6979      	ldr	r1, [r7, #20]
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fc66 	bl	8003396 <GPS_isEmpty>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f083 0301 	eor.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01b      	beq.n	8002b0e <GPS_parse+0x122>
		{
			inst->fixquality = atoi(p);
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f014 f8e2 	bl	8016ca0 <atoi>
 8002adc:	4603      	mov	r3, r0
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			if (inst->fixquality > 0)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <GPS_parse+0x11a>
			{
				inst->fix = true;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				inst->lastFix = inst->sentTime;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002b04:	e003      	b.n	8002b0e <GPS_parse+0x122>
			}
			else inst->fix = false;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		}

		p = strchr(p, ',') + 1;
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	6978      	ldr	r0, [r7, #20]
 8002b12:	f015 f846 	bl	8017ba2 <strchr>
 8002b16:	4603      	mov	r3, r0
 8002b18:	3301      	adds	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->satellites = atoi(p);
 8002b1c:	6979      	ldr	r1, [r7, #20]
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fc39 	bl	8003396 <GPS_isEmpty>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f083 0301 	eor.w	r3, r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <GPS_parse+0x154>
 8002b30:	6978      	ldr	r0, [r7, #20]
 8002b32:	f014 f8b5 	bl	8016ca0 <atoi>
 8002b36:	4603      	mov	r3, r0
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

		p = strchr(p, ',') + 1;
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f015 f82d 	bl	8017ba2 <strchr>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002b4e:	6979      	ldr	r1, [r7, #20]
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fc20 	bl	8003396 <GPS_isEmpty>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f083 0301 	eor.w	r3, r3, #1
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <GPS_parse+0x18e>
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f014 f899 	bl	8016c9a <atof>
 8002b68:	ec54 3b10 	vmov	r3, r4, d0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	4621      	mov	r1, r4
 8002b70:	f7fe f84a 	bl	8000c08 <__aeabi_d2f>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	669a      	str	r2, [r3, #104]	; 0x68

		p = strchr(p, ',') + 1;
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	6978      	ldr	r0, [r7, #20]
 8002b7e:	f015 f810 	bl	8017ba2 <strchr>
 8002b82:	4603      	mov	r3, r0
 8002b84:	3301      	adds	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->altitude = (float)atof(p);
 8002b88:	6979      	ldr	r1, [r7, #20]
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fc03 	bl	8003396 <GPS_isEmpty>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f083 0301 	eor.w	r3, r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00b      	beq.n	8002bb4 <GPS_parse+0x1c8>
 8002b9c:	6978      	ldr	r0, [r7, #20]
 8002b9e:	f014 f87c 	bl	8016c9a <atof>
 8002ba2:	ec54 3b10 	vmov	r3, r4, d0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	4621      	mov	r1, r4
 8002baa:	f7fe f82d 	bl	8000c08 <__aeabi_d2f>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	659a      	str	r2, [r3, #88]	; 0x58

		p = strchr(p, ',') + 1;
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	f014 fff3 	bl	8017ba2 <strchr>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
		p = strchr(p, ',') + 1;
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	6978      	ldr	r0, [r7, #20]
 8002bc6:	f014 ffec 	bl	8017ba2 <strchr>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	3301      	adds	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->geoidheight = (float)atof(p);
 8002bd0:	6979      	ldr	r1, [r7, #20]
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fbdf 	bl	8003396 <GPS_isEmpty>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f083 0301 	eor.w	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8251 	beq.w	8003088 <GPS_parse+0x69c>
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f014 f857 	bl	8016c9a <atof>
 8002bec:	ec54 3b10 	vmov	r3, r4, d0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	f7fe f808 	bl	8000c08 <__aeabi_d2f>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
 8002bfe:	e243      	b.n	8003088 <GPS_parse+0x69c>
	}

	else if (!strcmp(inst->thisSentence, "RMC"))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3307      	adds	r3, #7
 8002c04:	492e      	ldr	r1, [pc, #184]	; (8002cc0 <GPS_parse+0x2d4>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fae2 	bl	80001d0 <strcmp>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 80e3 	bne.w	8002dda <GPS_parse+0x3ee>
	{
		// found RMC
		// get time
		GPS_parseTime(inst, p);
 8002c14:	6979      	ldr	r1, [r7, #20]
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fbd6 	bl	80033c8 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f014 ffbf 	bl	8017ba2 <strchr>
 8002c24:	4603      	mov	r3, r0
 8002c26:	3301      	adds	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002c2a:	6979      	ldr	r1, [r7, #20]
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fe02 	bl	8003836 <GPS_parseFix>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <GPS_parse+0x256>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e23b      	b.n	80030ba <GPS_parse+0x6ce>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	6978      	ldr	r0, [r7, #20]
 8002c46:	f014 ffac 	bl	8017ba2 <strchr>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fc08 	bl	8003468 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f014 ffa1 	bl	8017ba2 <strchr>
 8002c60:	4603      	mov	r3, r0
 8002c62:	3301      	adds	r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002c66:	6979      	ldr	r1, [r7, #20]
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fcb3 	bl	80035d4 <GPS_parseLatDir>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <GPS_parse+0x292>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e21d      	b.n	80030ba <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	6978      	ldr	r0, [r7, #20]
 8002c82:	f014 ff8e 	bl	8017ba2 <strchr>
 8002c86:	4603      	mov	r3, r0
 8002c88:	3301      	adds	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002c8c:	6979      	ldr	r1, [r7, #20]
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fce0 	bl	8003654 <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002c94:	212c      	movs	r1, #44	; 0x2c
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f014 ff83 	bl	8017ba2 <strchr>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002ca2:	6979      	ldr	r1, [r7, #20]
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fd7d 	bl	80037a4 <GPS_parseLonDir>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f083 0301 	eor.w	r3, r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <GPS_parse+0x2d8>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e1ff      	b.n	80030ba <GPS_parse+0x6ce>
 8002cba:	bf00      	nop
 8002cbc:	0801d708 	.word	0x0801d708
 8002cc0:	0801d714 	.word	0x0801d714

		// speed
		p = strchr(p, ',') + 1;
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f014 ff6b 	bl	8017ba2 <strchr>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	3301      	adds	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->speed = (float)atof(p);
 8002cd2:	6979      	ldr	r1, [r7, #20]
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fb5e 	bl	8003396 <GPS_isEmpty>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f083 0301 	eor.w	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <GPS_parse+0x312>
 8002ce6:	6978      	ldr	r0, [r7, #20]
 8002ce8:	f013 ffd7 	bl	8016c9a <atof>
 8002cec:	ec54 3b10 	vmov	r3, r4, d0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	f7fd ff88 	bl	8000c08 <__aeabi_d2f>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	65da      	str	r2, [r3, #92]	; 0x5c

		// angle
		p = strchr(p, ',') + 1;
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	6978      	ldr	r0, [r7, #20]
 8002d02:	f014 ff4e 	bl	8017ba2 <strchr>
 8002d06:	4603      	mov	r3, r0
 8002d08:	3301      	adds	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->angle = (float)atof(p);
 8002d0c:	6979      	ldr	r1, [r7, #20]
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fb41 	bl	8003396 <GPS_isEmpty>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f083 0301 	eor.w	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <GPS_parse+0x34c>
 8002d20:	6978      	ldr	r0, [r7, #20]
 8002d22:	f013 ffba 	bl	8016c9a <atof>
 8002d26:	ec54 3b10 	vmov	r3, r4, d0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	f7fd ff6b 	bl	8000c08 <__aeabi_d2f>
 8002d32:	4602      	mov	r2, r0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	661a      	str	r2, [r3, #96]	; 0x60

		p = strchr(p, ',') + 1;
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	6978      	ldr	r0, [r7, #20]
 8002d3c:	f014 ff31 	bl	8017ba2 <strchr>
 8002d40:	4603      	mov	r3, r0
 8002d42:	3301      	adds	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002d46:	6979      	ldr	r1, [r7, #20]
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fb24 	bl	8003396 <GPS_isEmpty>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f083 0301 	eor.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8196 	beq.w	8003088 <GPS_parse+0x69c>
		{
			uint32_t fulldate = (float)atof(p);
 8002d5c:	6978      	ldr	r0, [r7, #20]
 8002d5e:	f013 ff9c 	bl	8016c9a <atof>
 8002d62:	ec54 3b10 	vmov	r3, r4, d0
 8002d66:	4618      	mov	r0, r3
 8002d68:	4621      	mov	r1, r4
 8002d6a:	f7fd ff4d 	bl	8000c08 <__aeabi_d2f>
 8002d6e:	ee07 0a90 	vmov	s15, r0
 8002d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d76:	ee17 3a90 	vmov	r3, s15
 8002d7a:	60fb      	str	r3, [r7, #12]
			inst->gpsTime.dayM = fulldate / 10000;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a8b      	ldr	r2, [pc, #556]	; (8002fac <GPS_parse+0x5c0>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	0b5b      	lsrs	r3, r3, #13
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inst->gpsTime.month = (fulldate % 10000) / 100;
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4b86      	ldr	r3, [pc, #536]	; (8002fac <GPS_parse+0x5c0>)
 8002d92:	fba3 1302 	umull	r1, r3, r3, r2
 8002d96:	0b5b      	lsrs	r3, r3, #13
 8002d98:	f242 7110 	movw	r1, #10000	; 0x2710
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	4a83      	ldr	r2, [pc, #524]	; (8002fb0 <GPS_parse+0x5c4>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inst->gpsTime.year = (fulldate % 100);
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4b7e      	ldr	r3, [pc, #504]	; (8002fb0 <GPS_parse+0x5c4>)
 8002db6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2164      	movs	r1, #100	; 0x64
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			inst->lastDate = inst->sentTime;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002dd8:	e156      	b.n	8003088 <GPS_parse+0x69c>
		}
	}

	else if (!strcmp(inst->thisSentence, "GLL"))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3307      	adds	r3, #7
 8002dde:	4975      	ldr	r1, [pc, #468]	; (8002fb4 <GPS_parse+0x5c8>)
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd f9f5 	bl	80001d0 <strcmp>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d153      	bne.n	8002e94 <GPS_parse+0x4a8>
	{
		// found GLL
		// parse out latitude
		GPS_parseLat(inst, p);
 8002dec:	6979      	ldr	r1, [r7, #20]
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fb3a 	bl	8003468 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	6978      	ldr	r0, [r7, #20]
 8002df8:	f014 fed3 	bl	8017ba2 <strchr>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	3301      	adds	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002e02:	6979      	ldr	r1, [r7, #20]
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fbe5 	bl	80035d4 <GPS_parseLatDir>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f083 0301 	eor.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <GPS_parse+0x42e>
 8002e16:	2300      	movs	r3, #0
 8002e18:	e14f      	b.n	80030ba <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	6978      	ldr	r0, [r7, #20]
 8002e1e:	f014 fec0 	bl	8017ba2 <strchr>
 8002e22:	4603      	mov	r3, r0
 8002e24:	3301      	adds	r3, #1
 8002e26:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002e28:	6979      	ldr	r1, [r7, #20]
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fc12 	bl	8003654 <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f014 feb5 	bl	8017ba2 <strchr>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002e3e:	6979      	ldr	r1, [r7, #20]
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fcaf 	bl	80037a4 <GPS_parseLonDir>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f083 0301 	eor.w	r3, r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <GPS_parse+0x46a>
 8002e52:	2300      	movs	r3, #0
 8002e54:	e131      	b.n	80030ba <GPS_parse+0x6ce>

		// get time
		p = strchr(p, ',') + 1;
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	6978      	ldr	r0, [r7, #20]
 8002e5a:	f014 fea2 	bl	8017ba2 <strchr>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	3301      	adds	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
		GPS_parseTime(inst, p);
 8002e64:	6979      	ldr	r1, [r7, #20]
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 faae 	bl	80033c8 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f014 fe97 	bl	8017ba2 <strchr>
 8002e74:	4603      	mov	r3, r0
 8002e76:	3301      	adds	r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fcda 	bl	8003836 <GPS_parseFix>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f083 0301 	eor.w	r3, r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80fc 	beq.w	8003088 <GPS_parse+0x69c>
 8002e90:	2300      	movs	r3, #0
 8002e92:	e112      	b.n	80030ba <GPS_parse+0x6ce>
	}

	else if (!strcmp(inst->thisSentence, "GSA"))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3307      	adds	r3, #7
 8002e98:	4947      	ldr	r1, [pc, #284]	; (8002fb8 <GPS_parse+0x5cc>)
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd f998 	bl	80001d0 <strcmp>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 808a 	bne.w	8002fbc <GPS_parse+0x5d0>
	{
		// found GSA
		// parse out Auto selection, but ignore them
		// parse out 3d fixquality
		p = strchr(p, ',') + 1;
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f014 fe79 	bl	8017ba2 <strchr>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->fixquality_3d = atoi(p);
 8002eb6:	6979      	ldr	r1, [r7, #20]
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fa6c 	bl	8003396 <GPS_isEmpty>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f083 0301 	eor.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <GPS_parse+0x4ee>
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f013 fee8 	bl	8016ca0 <atoi>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		// skip 12 Satellite PDNs without interpreting them
		for (int i = 0; i < 12; i++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e009      	b.n	8002ef4 <GPS_parse+0x508>
		{
			p = strchr(p, ',') + 1;
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	6978      	ldr	r0, [r7, #20]
 8002ee4:	f014 fe5d 	bl	8017ba2 <strchr>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	3301      	adds	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 12; i++)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b0b      	cmp	r3, #11
 8002ef8:	ddf2      	ble.n	8002ee0 <GPS_parse+0x4f4>
		}
		
		// parse out PDOP
		p = strchr(p, ',') + 1;
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	6978      	ldr	r0, [r7, #20]
 8002efe:	f014 fe50 	bl	8017ba2 <strchr>
 8002f02:	4603      	mov	r3, r0
 8002f04:	3301      	adds	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->PDOP = (float)atof(p);
 8002f08:	6979      	ldr	r1, [r7, #20]
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fa43 	bl	8003396 <GPS_isEmpty>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f083 0301 	eor.w	r3, r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00b      	beq.n	8002f34 <GPS_parse+0x548>
 8002f1c:	6978      	ldr	r0, [r7, #20]
 8002f1e:	f013 febc 	bl	8016c9a <atof>
 8002f22:	ec54 3b10 	vmov	r3, r4, d0
 8002f26:	4618      	mov	r0, r3
 8002f28:	4621      	mov	r1, r4
 8002f2a:	f7fd fe6d 	bl	8000c08 <__aeabi_d2f>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	671a      	str	r2, [r3, #112]	; 0x70
		
		// parse out HDOP, we also parse this from the GGA sentence. Chipset should
		// report the same for both
		p = strchr(p, ',') + 1;
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f014 fe33 	bl	8017ba2 <strchr>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	3301      	adds	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002f42:	6979      	ldr	r1, [r7, #20]
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fa26 	bl	8003396 <GPS_isEmpty>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f083 0301 	eor.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <GPS_parse+0x582>
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f013 fe9f 	bl	8016c9a <atof>
 8002f5c:	ec54 3b10 	vmov	r3, r4, d0
 8002f60:	4618      	mov	r0, r3
 8002f62:	4621      	mov	r1, r4
 8002f64:	f7fd fe50 	bl	8000c08 <__aeabi_d2f>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	669a      	str	r2, [r3, #104]	; 0x68
		
		// parse out VDOP
		p = strchr(p, ',') + 1;
 8002f6e:	212c      	movs	r1, #44	; 0x2c
 8002f70:	6978      	ldr	r0, [r7, #20]
 8002f72:	f014 fe16 	bl	8017ba2 <strchr>
 8002f76:	4603      	mov	r3, r0
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->VDOP = (float)atof(p);
 8002f7c:	6979      	ldr	r1, [r7, #20]
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa09 	bl	8003396 <GPS_isEmpty>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f083 0301 	eor.w	r3, r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d07b      	beq.n	8003088 <GPS_parse+0x69c>
 8002f90:	6978      	ldr	r0, [r7, #20]
 8002f92:	f013 fe82 	bl	8016c9a <atof>
 8002f96:	ec54 3b10 	vmov	r3, r4, d0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	f7fd fe33 	bl	8000c08 <__aeabi_d2f>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	66da      	str	r2, [r3, #108]	; 0x6c
 8002fa8:	e06e      	b.n	8003088 <GPS_parse+0x69c>
 8002faa:	bf00      	nop
 8002fac:	d1b71759 	.word	0xd1b71759
 8002fb0:	51eb851f 	.word	0x51eb851f
 8002fb4:	0801d70c 	.word	0x0801d70c
 8002fb8:	0801d710 	.word	0x0801d710
	}

#ifdef NMEA_EXTENSIONS // Sentences not required for basic GPS functionality
	else if (!strcmp(inst->thisSentence, "TXT"))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3307      	adds	r3, #7
 8002fc0:	4940      	ldr	r1, [pc, #256]	; (80030c4 <GPS_parse+0x6d8>)
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd f904 	bl	80001d0 <strcmp>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d15a      	bne.n	8003084 <GPS_parse+0x698>
	{ //*******************************TXT
		if (!GPS_isEmpty(inst, p)) inst->txtTot = atoi(p);
 8002fce:	6979      	ldr	r1, [r7, #20]
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f9e0 	bl	8003396 <GPS_isEmpty>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f083 0301 	eor.w	r3, r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <GPS_parse+0x604>
 8002fe2:	6978      	ldr	r0, [r7, #20]
 8002fe4:	f013 fe5c 	bl	8016ca0 <atoi>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		p = strchr(p, ',') + 1;
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	6978      	ldr	r0, [r7, #20]
 8002ff4:	f014 fdd5 	bl	8017ba2 <strchr>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtN = atoi(p);
 8002ffe:	6979      	ldr	r1, [r7, #20]
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f9c8 	bl	8003396 <GPS_isEmpty>
 8003006:	4603      	mov	r3, r0
 8003008:	f083 0301 	eor.w	r3, r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <GPS_parse+0x634>
 8003012:	6978      	ldr	r0, [r7, #20]
 8003014:	f013 fe44 	bl	8016ca0 <atoi>
 8003018:	4602      	mov	r2, r0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p = strchr(p, ',') + 1;
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f014 fdbd 	bl	8017ba2 <strchr>
 8003028:	4603      	mov	r3, r0
 800302a:	3301      	adds	r3, #1
 800302c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtID = atoi(p);
 800302e:	6979      	ldr	r1, [r7, #20]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f9b0 	bl	8003396 <GPS_isEmpty>
 8003036:	4603      	mov	r3, r0
 8003038:	f083 0301 	eor.w	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <GPS_parse+0x664>
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f013 fe2c 	bl	8016ca0 <atoi>
 8003048:	4602      	mov	r2, r0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		p = strchr(p, ',') + 1;
 8003050:	212c      	movs	r1, #44	; 0x2c
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	f014 fda5 	bl	8017ba2 <strchr>
 8003058:	4603      	mov	r3, r0
 800305a:	3301      	adds	r3, #1
 800305c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) GPS_parseStr(inst, inst->txtTXT, p, 61); // copy the text to NMEA TXT max of 61 characters
 800305e:	6979      	ldr	r1, [r7, #20]
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f998 	bl	8003396 <GPS_isEmpty>
 8003066:	4603      	mov	r3, r0
 8003068:	f083 0301 	eor.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <GPS_parse+0x69c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8003078:	233d      	movs	r3, #61	; 0x3d
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f923 	bl	80032c8 <GPS_parseStr>
 8003082:	e001      	b.n	8003088 <GPS_parse+0x69c>
	}
#endif // NMEA_EXTENSIONS

	// we dont parse the remaining, yet!
	else return false;
 8003084:	2300      	movs	r3, #0
 8003086:	e018      	b.n	80030ba <GPS_parse+0x6ce>

	// Record the successful parsing of where the last data came from and when
	strcpy(inst->lastSource, inst->thisSource);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f103 021b 	add.w	r2, r3, #27
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f014 fd91 	bl	8017bbc <strcpy>
	strcpy(inst->lastSentence, inst->thisSentence);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f103 021e 	add.w	r2, r3, #30
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3307      	adds	r3, #7
 80030a4:	4619      	mov	r1, r3
 80030a6:	4610      	mov	r0, r2
 80030a8:	f014 fd88 	bl	8017bbc <strcpy>
	inst->lastUpdate = millis();
 80030ac:	f7ff fa68 	bl	8002580 <millis>
 80030b0:	4602      	mov	r2, r0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	return true;
 80030b8:	2301      	movs	r3, #1
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	0801d76c 	.word	0x0801d76c

080030c8 <GPS_check>:
		@param nmea Pointer to the NMEA string
		@return True if well formed, false if it has problems
*/
/**************************************************************************/
bool GPS_check(GPS* inst, char* nmea)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	; 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
	inst->thisCheck = 0; // new check
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
	if (*nmea != '$') return false; // doesn't start with $
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b24      	cmp	r3, #36	; 0x24
 80030de:	d001      	beq.n	80030e4 <GPS_check+0x1c>
 80030e0:	2300      	movs	r3, #0
 80030e2:	e0ad      	b.n	8003240 <GPS_check+0x178>
	else inst->thisCheck += NMEA_HAS_DOLLAR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	601a      	str	r2, [r3, #0]
	// do checksum check -- first look if we even have one -- ignore all but last
	//* 
	char* ast = nmea; // not strchr(nmea,'*'); for first* 
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
	while (*ast) ast++; // go to the end
 80030f2:	e002      	b.n	80030fa <GPS_check+0x32>
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	3301      	adds	r3, #1
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f8      	bne.n	80030f4 <GPS_check+0x2c>
	while (*ast != '*' && ast > nmea) ast--; // then back to*	if it's there
 8003102:	e002      	b.n	800310a <GPS_check+0x42>
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	3b01      	subs	r3, #1
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b2a      	cmp	r3, #42	; 0x2a
 8003110:	d003      	beq.n	800311a <GPS_check+0x52>
 8003112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d8f4      	bhi.n	8003104 <GPS_check+0x3c>
	if (*ast != '*') return false; // there is no asterisk
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b2a      	cmp	r3, #42	; 0x2a
 8003120:	d001      	beq.n	8003126 <GPS_check+0x5e>
 8003122:	2300      	movs	r3, #0
 8003124:	e08c      	b.n	8003240 <GPS_check+0x178>
	else
	{
		uint16_t sum = GPS_parseHex(inst, *(ast + 1)) * 16; // extract checksum
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	3301      	adds	r3, #1
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fbc6 	bl	80038c0 <GPS_parseHex>
 8003134:	4603      	mov	r3, r0
 8003136:	b29b      	uxth	r3, r3
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	847b      	strh	r3, [r7, #34]	; 0x22
		sum += GPS_parseHex(inst, *(ast + 2));
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	3302      	adds	r3, #2
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fbbb 	bl	80038c0 <GPS_parseHex>
 800314a:	4603      	mov	r3, r0
 800314c:	b29a      	uxth	r2, r3
 800314e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003150:	4413      	add	r3, r2
 8003152:	847b      	strh	r3, [r7, #34]	; 0x22
		char* p = nmea; // check checksum
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	61bb      	str	r3, [r7, #24]
		for (char* p1 = p + 1; p1 < ast; p1++)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	3301      	adds	r3, #1
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	e008      	b.n	8003172 <GPS_check+0xaa>
		{
			sum ^=* p1;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b29a      	uxth	r2, r3
 8003166:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003168:	4053      	eors	r3, r2
 800316a:	847b      	strh	r3, [r7, #34]	; 0x22
		for (char* p1 = p + 1; p1 < ast; p1++)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3301      	adds	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	429a      	cmp	r2, r3
 8003178:	d3f2      	bcc.n	8003160 <GPS_check+0x98>
		}
		if (sum != 0) return false; // bad checksum :(
 800317a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <GPS_check+0xbc>
 8003180:	2300      	movs	r3, #0
 8003182:	e05d      	b.n	8003240 <GPS_check+0x178>
		else inst->thisCheck += NMEA_HAS_CHECKSUM;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	1c9a      	adds	r2, r3, #2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
	}
	// extract source of variable length
	char* p = nmea + 1;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	3301      	adds	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
	const char* src = GPS_tokenOnList(inst, p, inst->sources);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800319a:	461a      	mov	r2, r3
 800319c:	6979      	ldr	r1, [r7, #20]
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f852 	bl	8003248 <GPS_tokenOnList>
 80031a4:	6138      	str	r0, [r7, #16]
	if (src)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01f      	beq.n	80031ec <GPS_check+0x124>
	{
		strcpy(inst->thisSource, src);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	6939      	ldr	r1, [r7, #16]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f014 fd02 	bl	8017bbc <strcpy>
		inst->thisCheck += NMEA_HAS_SOURCE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f103 020a 	add.w	r2, r3, #10
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	601a      	str	r2, [r3, #0]
	}
	else return false;
	p += strlen(src);
 80031c4:	6938      	ldr	r0, [r7, #16]
 80031c6:	f7fd f80d 	bl	80001e4 <strlen>
 80031ca:	4602      	mov	r2, r0
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4413      	add	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
	// extract sentence id and check if parsed
	const char* snc = GPS_tokenOnList(inst, p, inst->sentences_parsed);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80031d8:	461a      	mov	r2, r3
 80031da:	6979      	ldr	r1, [r7, #20]
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f833 	bl	8003248 <GPS_tokenOnList>
 80031e2:	60f8      	str	r0, [r7, #12]
	if (snc)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00f      	beq.n	800320a <GPS_check+0x142>
 80031ea:	e001      	b.n	80031f0 <GPS_check+0x128>
	else return false;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e027      	b.n	8003240 <GPS_check+0x178>
	{
		strcpy(inst->thisSentence, snc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3307      	adds	r3, #7
 80031f4:	68f9      	ldr	r1, [r7, #12]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f014 fce0 	bl	8017bbc <strcpy>
		inst->thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	e019      	b.n	800323e <GPS_check+0x176>
	}
	else
	{ // check if known
		snc = GPS_tokenOnList(inst, p, inst->sentences_known);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003210:	461a      	mov	r2, r3
 8003212:	6979      	ldr	r1, [r7, #20]
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f817 	bl	8003248 <GPS_tokenOnList>
 800321a:	60f8      	str	r0, [r7, #12]
		if (snc)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <GPS_check+0x176>
		{
			strcpy(inst->thisSentence, snc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3307      	adds	r3, #7
 8003226:	68f9      	ldr	r1, [r7, #12]
 8003228:	4618      	mov	r0, r3
 800322a:	f014 fcc7 	bl	8017bbc <strcpy>
			inst->thisCheck += NMEA_HAS_SENTENCE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f103 0214 	add.w	r2, r3, #20
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
			return false;
 800323a:	2300      	movs	r3, #0
 800323c:	e000      	b.n	8003240 <GPS_check+0x178>
		}
	}
	return true; // passed all the tests
 800323e:	2301      	movs	r3, #1
}
 8003240:	4618      	mov	r0, r3
 8003242:	3728      	adds	r7, #40	; 0x28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <GPS_tokenOnList>:
		@param list A list of strings, with the final entry starting "ZZ"
		@return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char* GPS_tokenOnList(GPS* inst, char* token, const char* *list)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
	int i = 0; // index in the list
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 8003258:	e01e      	b.n	8003298 <GPS_tokenOnList+0x50>
	{ // stop at terminator and don't crash without it
		// test for a match on the sentence name
		if (!strncmp((const char* )list[i], (const char* )token, strlen(list[i]))) return list[i];
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	681c      	ldr	r4, [r3, #0]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fc ffb8 	bl	80001e4 <strlen>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	4620      	mov	r0, r4
 800327c:	f014 fca6 	bl	8017bcc <strncmp>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <GPS_tokenOnList+0x4a>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	e014      	b.n	80032bc <GPS_tokenOnList+0x74>
		i++;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	3301      	adds	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4413      	add	r3, r2
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2202      	movs	r2, #2
 80032a4:	4907      	ldr	r1, [pc, #28]	; (80032c4 <GPS_tokenOnList+0x7c>)
 80032a6:	4618      	mov	r0, r3
 80032a8:	f014 fc90 	bl	8017bcc <strncmp>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <GPS_tokenOnList+0x72>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b8:	dbcf      	blt.n	800325a <GPS_tokenOnList+0x12>
	}
	return NULL; // couldn't find a match
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	0801d770 	.word	0x0801d770

080032c8 <GPS_parseStr>:
		@param n Max permitted size of string including terminating 0
		@return Pointer to the string buffer
*/
/**************************************************************************/
char* GPS_parseStr(GPS* inst, char* buff, char* p, int n)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	; 0x30
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
	char* e = strchr(p, ',');
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f014 fc62 	bl	8017ba2 <strchr>
 80032de:	62f8      	str	r0, [r7, #44]	; 0x2c
	int len = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (e) 
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d018      	beq.n	800331c <GPS_parseStr+0x54>
	{
		len = min(e - p, n - 1);
 80032ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	bfa8      	it	ge
 8003300:	4613      	movge	r3, r2
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(buff, p, len); // copy up to the comma
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	461a      	mov	r2, r3
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	68b8      	ldr	r0, [r7, #8]
 800330c:	f014 fc70 	bl	8017bf0 <strncpy>
		buff[len] = 0;
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	4413      	add	r3, r2
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	e037      	b.n	800338c <GPS_parseStr+0xc4>
	}
	else
	{
		e = strchr(p, '*');
 800331c:	212a      	movs	r1, #42	; 0x2a
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f014 fc3f 	bl	8017ba2 <strchr>
 8003324:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (e)
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01b      	beq.n	8003364 <GPS_parseStr+0x9c>
		{
			len = min(e - p, n - 1);
 800332c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	3b01      	subs	r3, #1
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4293      	cmp	r3, r2
 8003340:	bfa8      	it	ge
 8003342:	4613      	movge	r3, r2
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or up to the* 
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	461a      	mov	r2, r3
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	68b8      	ldr	r0, [r7, #8]
 800334e:	f014 fc4f 	bl	8017bf0 <strncpy>
			buff[e - p] = 0;
 8003352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4413      	add	r3, r2
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e013      	b.n	800338c <GPS_parseStr+0xc4>
		}
		else
		{
			len = min((int)strlen(p), n - 1);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7fc ff3d 	bl	80001e4 <strlen>
 800336a:	4603      	mov	r3, r0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	3b01      	subs	r3, #1
 8003372:	623b      	str	r3, [r7, #32]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	4293      	cmp	r3, r2
 800337a:	bfa8      	it	ge
 800337c:	4613      	movge	r3, r2
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or to the end or max capacity
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	461a      	mov	r2, r3
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	68b8      	ldr	r0, [r7, #8]
 8003388:	f014 fc32 	bl	8017bf0 <strncpy>
		}
	}
	return buff;
 800338c:	68bb      	ldr	r3, [r7, #8]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3730      	adds	r7, #48	; 0x30
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <GPS_isEmpty>:
		@param pStart Pointer to the location of the token in the NMEA string
		@return true if empty field, false if something there
*/
/**************************************************************************/
bool GPS_isEmpty(GPS* inst, char* pStart)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]
	if (',' !=* pStart && '*' !=* pStart && pStart != NULL) return false;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b2c      	cmp	r3, #44	; 0x2c
 80033a6:	d008      	beq.n	80033ba <GPS_isEmpty+0x24>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b2a      	cmp	r3, #42	; 0x2a
 80033ae:	d004      	beq.n	80033ba <GPS_isEmpty+0x24>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <GPS_isEmpty+0x24>
 80033b6:	2300      	movs	r3, #0
 80033b8:	e000      	b.n	80033bc <GPS_isEmpty+0x26>
	else return true;
 80033ba:	2301      	movs	r3, #1
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <GPS_parseTime>:
		@brief Parse a part of an NMEA string for time
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseTime(GPS* inst, char* p)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
	// get time
	uint32_t time = atol(p);
 80033d2:	6838      	ldr	r0, [r7, #0]
 80033d4:	f013 fc68 	bl	8016ca8 <atol>
 80033d8:	4603      	mov	r3, r0
 80033da:	60fb      	str	r3, [r7, #12]
	inst->gpsTime.hour = time / 10000;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4a1f      	ldr	r2, [pc, #124]	; (800345c <GPS_parseTime+0x94>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	0b5b      	lsrs	r3, r3, #13
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = (time % 10000) / 100;
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4b1a      	ldr	r3, [pc, #104]	; (800345c <GPS_parseTime+0x94>)
 80033f2:	fba3 1302 	umull	r1, r3, r3, r2
 80033f6:	0b5b      	lsrs	r3, r3, #13
 80033f8:	f242 7110 	movw	r1, #10000	; 0x2710
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	4a17      	ldr	r2, [pc, #92]	; (8003460 <GPS_parseTime+0x98>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	b2da      	uxtb	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = (time % 100);
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <GPS_parseTime+0x98>)
 8003416:	fba3 1302 	umull	r1, r3, r3, r2
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	2164      	movs	r1, #100	; 0x64
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	b2da      	uxtb	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	p = strchr(p, '.') + 1;
 800342c:	212e      	movs	r1, #46	; 0x2e
 800342e:	6838      	ldr	r0, [r7, #0]
 8003430:	f014 fbb7 	bl	8017ba2 <strchr>
 8003434:	4603      	mov	r3, r0
 8003436:	3301      	adds	r3, #1
 8003438:	603b      	str	r3, [r7, #0]
	inst->gpsTime.msecond = (uint32_t)atoi(p);
 800343a:	6838      	ldr	r0, [r7, #0]
 800343c:	f013 fc30 	bl	8016ca0 <atoi>
 8003440:	4603      	mov	r3, r0
 8003442:	b29a      	uxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	875a      	strh	r2, [r3, #58]	; 0x3a
	inst->lastTime = inst->sentTime;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	d1b71759 	.word	0xd1b71759
 8003460:	51eb851f 	.word	0x51eb851f
 8003464:	00000000 	.word	0x00000000

08003468 <GPS_parseLat>:
		@brief Parse a part of an NMEA string for latitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLat(GPS* inst, char* p)
{
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
	//int32_t degree;
	//long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 8003472:	6839      	ldr	r1, [r7, #0]
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ff8e 	bl	8003396 <GPS_isEmpty>
 800347a:	4603      	mov	r3, r0
 800347c:	f083 0301 	eor.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8092 	beq.w	80035ac <GPS_parseLat+0x144>
	{
		strncpy(degreebuff, p, 2);
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	2202      	movs	r2, #2
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f014 fbad 	bl	8017bf0 <strncpy>
		p += 2;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	3302      	adds	r3, #2
 800349a:	603b      	str	r3, [r7, #0]
		degreebuff[2] = '\0';
 800349c:	2300      	movs	r3, #0
 800349e:	73bb      	strb	r3, [r7, #14]
		long degree = atol(degreebuff) * 10000000;
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	4618      	mov	r0, r3
 80034a6:	f013 fbff 	bl	8016ca8 <atol>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <GPS_parseLat+0x158>)
 80034ae:	fb03 f302 	mul.w	r3, r3, r2
 80034b2:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 80034b4:	f107 030c 	add.w	r3, r7, #12
 80034b8:	2202      	movs	r2, #2
 80034ba:	6839      	ldr	r1, [r7, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f014 fb97 	bl	8017bf0 <strncpy>
		p += 3;										// skip decimal point
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	3303      	adds	r3, #3
 80034c6:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	3302      	adds	r3, #2
 80034ce:	2204      	movs	r2, #4
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f014 fb8c 	bl	8017bf0 <strncpy>
		degreebuff[6] = '\0';
 80034d8:	2300      	movs	r3, #0
 80034da:	74bb      	strb	r3, [r7, #18]
		long minutes = 50*	atol(degreebuff) / 3;
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	4618      	mov	r0, r3
 80034e2:	f013 fbe1 	bl	8016ca8 <atol>
 80034e6:	4602      	mov	r2, r0
 80034e8:	2332      	movs	r3, #50	; 0x32
 80034ea:	fb03 f302 	mul.w	r3, r3, r2
 80034ee:	4a35      	ldr	r2, [pc, #212]	; (80035c4 <GPS_parseLat+0x15c>)
 80034f0:	fb82 1203 	smull	r1, r2, r2, r3
 80034f4:	17db      	asrs	r3, r3, #31
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	61bb      	str	r3, [r7, #24]
		inst->latitude_fixed = degree + minutes;
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	441a      	add	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	645a      	str	r2, [r3, #68]	; 0x44
		inst->latitude = degree / 100000 + minutes * 0.000006;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4a30      	ldr	r2, [pc, #192]	; (80035c8 <GPS_parseLat+0x160>)
 8003508:	fb82 1203 	smull	r1, r2, r2, r3
 800350c:	1352      	asrs	r2, r2, #13
 800350e:	17db      	asrs	r3, r3, #31
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd f816 	bl	8000544 <__aeabi_i2d>
 8003518:	4604      	mov	r4, r0
 800351a:	460d      	mov	r5, r1
 800351c:	69b8      	ldr	r0, [r7, #24]
 800351e:	f7fd f811 	bl	8000544 <__aeabi_i2d>
 8003522:	a325      	add	r3, pc, #148	; (adr r3, 80035b8 <GPS_parseLat+0x150>)
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	f7fd f876 	bl	8000618 <__aeabi_dmul>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4620      	mov	r0, r4
 8003532:	4629      	mov	r1, r5
 8003534:	f7fc feba 	bl	80002ac <__adddf3>
 8003538:	4603      	mov	r3, r0
 800353a:	460c      	mov	r4, r1
 800353c:	4618      	mov	r0, r3
 800353e:	4621      	mov	r1, r4
 8003540:	f7fd fb62 	bl	8000c08 <__aeabi_d2f>
 8003544:	4602      	mov	r2, r0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c
		inst->latitudeDegrees = (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8003556:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80035cc <GPS_parseLat+0x164>
 800355a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800355e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003562:	ee17 2a90 	vmov	r2, s15
 8003566:	2364      	movs	r3, #100	; 0x64
 8003568:	fb03 f302 	mul.w	r3, r3, r2
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003574:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003578:	eddf 6a15 	vldr	s13, [pc, #84]	; 80035d0 <GPS_parseLat+0x168>
 800357c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitudeDegrees += (int)(inst->latitude / 100);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8003592:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 80035cc <GPS_parseLat+0x164>
 8003596:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800359a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800359e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	}
}
 80035ac:	bf00      	nop
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bdb0      	pop	{r4, r5, r7, pc}
 80035b4:	f3af 8000 	nop.w
 80035b8:	7110e454 	.word	0x7110e454
 80035bc:	3ed92a73 	.word	0x3ed92a73
 80035c0:	00989680 	.word	0x00989680
 80035c4:	55555556 	.word	0x55555556
 80035c8:	14f8b589 	.word	0x14f8b589
 80035cc:	42c80000 	.word	0x42c80000
 80035d0:	42700000 	.word	0x42700000

080035d4 <GPS_parseLatDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLatDir(GPS* inst, char* p)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
	if (p[0] == 'S')
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b53      	cmp	r3, #83	; 0x53
 80035e4:	d11c      	bne.n	8003620 <GPS_parseLatDir+0x4c>
	{
		inst->lat = 'S';
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2253      	movs	r2, #83	; 0x53
 80035ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inst->latitudeDegrees *= -1.0;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fc ffb8 	bl	8000568 <__aeabi_f2d>
 80035f8:	4603      	mov	r3, r0
 80035fa:	460c      	mov	r4, r1
 80035fc:	4618      	mov	r0, r3
 80035fe:	4621      	mov	r1, r4
 8003600:	f7fd fb02 	bl	8000c08 <__aeabi_d2f>
 8003604:	4603      	mov	r3, r0
 8003606:	ee07 3a90 	vmov	s15, r3
 800360a:	eef1 7a67 	vneg.f32	s15, s15
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitude_fixed *= -1;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	425a      	negs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
 800361e:	e013      	b.n	8003648 <GPS_parseLatDir+0x74>
	}
	else if (p[0] == 'N') inst->lat = 'N';
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b4e      	cmp	r3, #78	; 0x4e
 8003626:	d104      	bne.n	8003632 <GPS_parseLatDir+0x5e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	224e      	movs	r2, #78	; 0x4e
 800362c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003630:	e00a      	b.n	8003648 <GPS_parseLatDir+0x74>
	else if (p[0] == ',') inst->lat = 0;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b2c      	cmp	r3, #44	; 0x2c
 8003638:	d104      	bne.n	8003644 <GPS_parseLatDir+0x70>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003642:	e001      	b.n	8003648 <GPS_parseLatDir+0x74>
	else return false;
 8003644:	2300      	movs	r3, #0
 8003646:	e000      	b.n	800364a <GPS_parseLatDir+0x76>
	
	return true;
 8003648:	2301      	movs	r3, #1
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bd90      	pop	{r4, r7, pc}
	...

08003654 <GPS_parseLon>:
		@brief Parse a part of an NMEA string for longitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLon(GPS* inst, char* p)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fe98 	bl	8003396 <GPS_isEmpty>
 8003666:	4603      	mov	r3, r0
 8003668:	f083 0301 	eor.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8088 	beq.w	8003784 <GPS_parseLon+0x130>
	{
		strncpy(degreebuff, p, 3);
 8003674:	f107 030c 	add.w	r3, r7, #12
 8003678:	2203      	movs	r2, #3
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f014 fab7 	bl	8017bf0 <strncpy>
		p += 3;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	3303      	adds	r3, #3
 8003686:	603b      	str	r3, [r7, #0]
		degreebuff[3] = '\0';
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]
		degree = atol(degreebuff)*	10000000;
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	4618      	mov	r0, r3
 8003692:	f013 fb09 	bl	8016ca8 <atol>
 8003696:	4602      	mov	r2, r0
 8003698:	4b3c      	ldr	r3, [pc, #240]	; (800378c <GPS_parseLon+0x138>)
 800369a:	fb03 f302 	mul.w	r3, r3, r2
 800369e:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 80036a0:	f107 030c 	add.w	r3, r7, #12
 80036a4:	2202      	movs	r2, #2
 80036a6:	6839      	ldr	r1, [r7, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f014 faa1 	bl	8017bf0 <strncpy>
		p += 3;										// skip decimal point
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	3303      	adds	r3, #3
 80036b2:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 80036b4:	f107 030c 	add.w	r3, r7, #12
 80036b8:	3302      	adds	r3, #2
 80036ba:	2204      	movs	r2, #4
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f014 fa96 	bl	8017bf0 <strncpy>
		degreebuff[6] = '\0';
 80036c4:	2300      	movs	r3, #0
 80036c6:	74bb      	strb	r3, [r7, #18]
		minutes = 50 * atol(degreebuff) / 3;
 80036c8:	f107 030c 	add.w	r3, r7, #12
 80036cc:	4618      	mov	r0, r3
 80036ce:	f013 faeb 	bl	8016ca8 <atol>
 80036d2:	4602      	mov	r2, r0
 80036d4:	2332      	movs	r3, #50	; 0x32
 80036d6:	fb03 f302 	mul.w	r3, r3, r2
 80036da:	4a2d      	ldr	r2, [pc, #180]	; (8003790 <GPS_parseLon+0x13c>)
 80036dc:	fb82 1203 	smull	r1, r2, r2, r3
 80036e0:	17db      	asrs	r3, r3, #31
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	61bb      	str	r3, [r7, #24]
		inst->longitude_fixed = degree + minutes;
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	441a      	add	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	649a      	str	r2, [r3, #72]	; 0x48
		inst->longitude = degree / 100000 + minutes * 0.000006f;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4a28      	ldr	r2, [pc, #160]	; (8003794 <GPS_parseLon+0x140>)
 80036f4:	fb82 1203 	smull	r1, r2, r2, r3
 80036f8:	1352      	asrs	r2, r2, #13
 80036fa:	17db      	asrs	r3, r3, #31
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003710:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003798 <GPS_parseLon+0x144>
 8003714:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		inst->longitudeDegrees = (inst->longitude - 100 * (int)(inst->longitude / 100)) / 60.0;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800372e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800379c <GPS_parseLon+0x148>
 8003732:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800373a:	ee17 2a90 	vmov	r2, s15
 800373e:	2364      	movs	r3, #100	; 0x64
 8003740:	fb03 f302 	mul.w	r3, r3, r2
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800374c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003750:	eddf 6a13 	vldr	s13, [pc, #76]	; 80037a0 <GPS_parseLon+0x14c>
 8003754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		inst->longitudeDegrees += (int)(inst->longitude / 100);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800376a:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800379c <GPS_parseLon+0x148>
 800376e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800377a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
}
 8003784:	bf00      	nop
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	00989680 	.word	0x00989680
 8003790:	55555556 	.word	0x55555556
 8003794:	14f8b589 	.word	0x14f8b589
 8003798:	36c9539c 	.word	0x36c9539c
 800379c:	42c80000 	.word	0x42c80000
 80037a0:	42700000 	.word	0x42700000

080037a4 <GPS_parseLonDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLonDir(GPS* inst, char* p)
{
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
	if (!GPS_isEmpty(inst, p))
 80037ae:	6839      	ldr	r1, [r7, #0]
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff fdf0 	bl	8003396 <GPS_isEmpty>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f083 0301 	eor.w	r3, r3, #1
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d034      	beq.n	800382c <GPS_parseLonDir+0x88>
	{
		if (p[0] == 'W')
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b57      	cmp	r3, #87	; 0x57
 80037c8:	d11c      	bne.n	8003804 <GPS_parseLonDir+0x60>
		{
			inst->lon = 'W';
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2257      	movs	r2, #87	; 0x57
 80037ce:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			inst->longitudeDegrees *= -1.0;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc fec6 	bl	8000568 <__aeabi_f2d>
 80037dc:	4603      	mov	r3, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	4618      	mov	r0, r3
 80037e2:	4621      	mov	r1, r4
 80037e4:	f7fd fa10 	bl	8000c08 <__aeabi_d2f>
 80037e8:	4603      	mov	r3, r0
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef1 7a67 	vneg.f32	s15, s15
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			inst->longitude_fixed *= -1;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fc:	425a      	negs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	649a      	str	r2, [r3, #72]	; 0x48
 8003802:	e013      	b.n	800382c <GPS_parseLonDir+0x88>
		}
		else if (p[0] == 'E') inst->lon = 'E';
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b45      	cmp	r3, #69	; 0x45
 800380a:	d104      	bne.n	8003816 <GPS_parseLonDir+0x72>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2245      	movs	r2, #69	; 0x45
 8003810:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8003814:	e00a      	b.n	800382c <GPS_parseLonDir+0x88>
		else if (p[0] == ',') inst->lon = 0;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b2c      	cmp	r3, #44	; 0x2c
 800381c:	d104      	bne.n	8003828 <GPS_parseLonDir+0x84>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8003826:	e001      	b.n	800382c <GPS_parseLonDir+0x88>
		else return false;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <GPS_parseLonDir+0x8a>
	}
	return true;
 800382c:	2301      	movs	r3, #1
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bd90      	pop	{r4, r7, pc}

08003836 <GPS_parseFix>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseFix(GPS* inst, char* p)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
	if (p[0] == 'A')
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b41      	cmp	r3, #65	; 0x41
 8003846:	d10a      	bne.n	800385e <GPS_parseFix+0x28>
	{
		inst->fix = true;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inst->lastFix = inst->sentTime;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800385c:	e00a      	b.n	8003874 <GPS_parseFix+0x3e>
	}
	else if (p[0] == 'V') inst->fix = false;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b56      	cmp	r3, #86	; 0x56
 8003864:	d104      	bne.n	8003870 <GPS_parseFix+0x3a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800386e:	e001      	b.n	8003874 <GPS_parseFix+0x3e>
	else return false;
 8003870:	2300      	movs	r3, #0
 8003872:	e000      	b.n	8003876 <GPS_parseFix+0x40>
	return true;
 8003874:	2301      	movs	r3, #1
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <GPS_newNMEAreceived>:
/*!
		@brief Check to see if a new NMEA line has been received
		@return True if received, false if not
*/
/**************************************************************************/
bool GPS_newNMEAreceived(GPS* inst) { return inst->recvdflag; }
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8003890:	b2db      	uxtb	r3, r3
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <GPS_lastNMEA>:
		@brief Returns the last NMEA line received and unsets the received flag
		@return Pointer to the last line string
*/
/**************************************************************************/
char* GPS_lastNMEA(GPS* inst)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
	inst->recvdflag = false;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	return (char*)inst->lastline;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <GPS_parseHex>:
	 character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t GPS_parseHex(GPS* inst, char c)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70fb      	strb	r3, [r7, #3]
	if (c < '0') return 0;
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	2b2f      	cmp	r3, #47	; 0x2f
 80038d0:	d801      	bhi.n	80038d6 <GPS_parseHex+0x16>
 80038d2:	2300      	movs	r3, #0
 80038d4:	e013      	b.n	80038fe <GPS_parseHex+0x3e>
	if (c <= '9') return c - '0';
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	2b39      	cmp	r3, #57	; 0x39
 80038da:	d803      	bhi.n	80038e4 <GPS_parseHex+0x24>
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	3b30      	subs	r3, #48	; 0x30
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e00c      	b.n	80038fe <GPS_parseHex+0x3e>
	if (c < 'A') return 0;
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d801      	bhi.n	80038ee <GPS_parseHex+0x2e>
 80038ea:	2300      	movs	r3, #0
 80038ec:	e007      	b.n	80038fe <GPS_parseHex+0x3e>
	if (c <= 'F') return (c - 'A') + 10;
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	2b46      	cmp	r3, #70	; 0x46
 80038f2:	d803      	bhi.n	80038fc <GPS_parseHex+0x3c>
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	3b37      	subs	r3, #55	; 0x37
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e000      	b.n	80038fe <GPS_parseHex+0x3e>
	// if (c > 'F')
	return 0;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <MPU_writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleratio, gyroscope, and temperature data
//===================================================================================================================
void MPU_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af04      	add	r7, sp, #16
 8003910:	4603      	mov	r3, r0
 8003912:	71fb      	strb	r3, [r7, #7]
 8003914:	460b      	mov	r3, r1
 8003916:	71bb      	strb	r3, [r7, #6]
 8003918:	4613      	mov	r3, r2
 800391a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(Get_I2C1_Instance(), address, subAddress, 1, &data, 1, 2);
 800391c:	f011 fe86 	bl	801562c <Get_I2C1_Instance>
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	b299      	uxth	r1, r3
 8003924:	79bb      	ldrb	r3, [r7, #6]
 8003926:	b29a      	uxth	r2, r3
 8003928:	2302      	movs	r3, #2
 800392a:	9302      	str	r3, [sp, #8]
 800392c:	2301      	movs	r3, #1
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	1d7b      	adds	r3, r7, #5
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	2301      	movs	r3, #1
 8003936:	f003 fcaf 	bl	8007298 <HAL_I2C_Mem_Write>
	//while(HAL_I2C_GetState(Get_I2C1_Instance()) != HAL_I2C_STATE_READY);
	/*print("Write:");
	print_int(data);
	println("");*/
	//i2c.write(address, data_write, 2, 0);
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <MPU_readByte>:
char MPU_readByte(uint8_t address, uint8_t subAddress)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b088      	sub	sp, #32
 8003946:	af04      	add	r7, sp, #16
 8003948:	4603      	mov	r3, r0
 800394a:	460a      	mov	r2, r1
 800394c:	71fb      	strb	r3, [r7, #7]
 800394e:	4613      	mov	r3, r2
 8003950:	71bb      	strb	r3, [r7, #6]
	uint8_t data[1]; // `data` will store the register data


	//i2c.write(address, data_write, 1, 1); // no stop
	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, 1, 2);
 8003952:	f011 fe6b 	bl	801562c <Get_I2C1_Instance>
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	b299      	uxth	r1, r3
 800395a:	79bb      	ldrb	r3, [r7, #6]
 800395c:	b29a      	uxth	r2, r3
 800395e:	2302      	movs	r3, #2
 8003960:	9302      	str	r3, [sp, #8]
 8003962:	2301      	movs	r3, #1
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	f107 030c 	add.w	r3, r7, #12
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2301      	movs	r3, #1
 800396e:	f003 fd8d 	bl	800748c <HAL_I2C_Mem_Read>
	/*print("Read:");
	print_int(data[0]);
	println("");*/
	//i2c.read(address, data, 1, 0);

	return (char)data[0];
 8003972:	7b3b      	ldrb	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <MPU_readBytes>:
void MPU_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t* dest)
{     
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b08d      	sub	sp, #52	; 0x34
 8003980:	af04      	add	r7, sp, #16
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	4603      	mov	r3, r0
 8003986:	71fb      	strb	r3, [r7, #7]
 8003988:	460b      	mov	r3, r1
 800398a:	71bb      	strb	r3, [r7, #6]
 800398c:	4613      	mov	r3, r2
 800398e:	717b      	strb	r3, [r7, #5]
	uint8_t data[14];

	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, count, 2);
 8003990:	f011 fe4c 	bl	801562c <Get_I2C1_Instance>
 8003994:	4604      	mov	r4, r0
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	b299      	uxth	r1, r3
 800399a:	79bb      	ldrb	r3, [r7, #6]
 800399c:	b298      	uxth	r0, r3
 800399e:	797b      	ldrb	r3, [r7, #5]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2202      	movs	r2, #2
 80039a4:	9202      	str	r2, [sp, #8]
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2301      	movs	r3, #1
 80039b0:	4602      	mov	r2, r0
 80039b2:	4620      	mov	r0, r4
 80039b4:	f003 fd6a 	bl	800748c <HAL_I2C_Mem_Read>

	/*
	i2c.write(address, data_write, 1, 1); // no stop
	i2c.read(address, data, count, 0);
	*/
	int ii = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
	for(ii = 0; ii < count; ii++)
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	e00b      	b.n	80039da <MPU_readBytes+0x5e>
	{
		dest[ii] = data[ii];
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	f107 010c 	add.w	r1, r7, #12
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	440a      	add	r2, r1
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	3301      	adds	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	797b      	ldrb	r3, [r7, #5]
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	429a      	cmp	r2, r3
 80039e0:	dbef      	blt.n	80039c2 <MPU_readBytes+0x46>
	}
} 
 80039e2:	bf00      	nop
 80039e4:	3724      	adds	r7, #36	; 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd90      	pop	{r4, r7, pc}
	...

080039ec <MPU_getMres>:
 
void MPU_getMres()
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
	switch (MMscale)
 80039f0:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <MPU_getMres+0x2c>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <MPU_getMres+0x12>
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d004      	beq.n	8003a06 <MPU_getMres+0x1a>
			break;
		case MFS_16BITS:
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
			break;
	}
}
 80039fc:	e007      	b.n	8003a0e <MPU_getMres+0x22>
			mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 80039fe:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <MPU_getMres+0x30>)
 8003a00:	4a07      	ldr	r2, [pc, #28]	; (8003a20 <MPU_getMres+0x34>)
 8003a02:	601a      	str	r2, [r3, #0]
			break;
 8003a04:	e003      	b.n	8003a0e <MPU_getMres+0x22>
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <MPU_getMres+0x30>)
 8003a08:	4a06      	ldr	r2, [pc, #24]	; (8003a24 <MPU_getMres+0x38>)
 8003a0a:	601a      	str	r2, [r3, #0]
			break;
 8003a0c:	bf00      	nop
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	20002f78 	.word	0x20002f78
 8003a1c:	20002fe0 	.word	0x20002fe0
 8003a20:	40bfebff 	.word	0x40bfebff
 8003a24:	3fbfebff 	.word	0x3fbfebff

08003a28 <MPU_getGres>:
void MPU_getGres()
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
	switch (GGscale)
 8003a2c:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <MPU_getGres+0x50>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d81b      	bhi.n	8003a6c <MPU_getGres+0x44>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <MPU_getGres+0x14>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a55 	.word	0x08003a55
 8003a44:	08003a5d 	.word	0x08003a5d
 8003a48:	08003a65 	.word	0x08003a65
	{
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case GFS_250DPS:
			gRes = 250.0/32768.0;
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <MPU_getGres+0x54>)
 8003a4e:	4a0c      	ldr	r2, [pc, #48]	; (8003a80 <MPU_getGres+0x58>)
 8003a50:	601a      	str	r2, [r3, #0]
			break;
 8003a52:	e00b      	b.n	8003a6c <MPU_getGres+0x44>
		case GFS_500DPS:
			gRes = 500.0/32768.0;
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <MPU_getGres+0x54>)
 8003a56:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <MPU_getGres+0x5c>)
 8003a58:	601a      	str	r2, [r3, #0]
			break;
 8003a5a:	e007      	b.n	8003a6c <MPU_getGres+0x44>
		case GFS_1000DPS:
			gRes = 1000.0/32768.0;
 8003a5c:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <MPU_getGres+0x54>)
 8003a5e:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <MPU_getGres+0x60>)
 8003a60:	601a      	str	r2, [r3, #0]
			break;
 8003a62:	e003      	b.n	8003a6c <MPU_getGres+0x44>
		case GFS_2000DPS:
			gRes = 2000.0/32768.0;
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <MPU_getGres+0x54>)
 8003a66:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <MPU_getGres+0x64>)
 8003a68:	601a      	str	r2, [r3, #0]
			break;
 8003a6a:	bf00      	nop
	}
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20002eef 	.word	0x20002eef
 8003a7c:	20002fac 	.word	0x20002fac
 8003a80:	3bfa0000 	.word	0x3bfa0000
 8003a84:	3c7a0000 	.word	0x3c7a0000
 8003a88:	3cfa0000 	.word	0x3cfa0000
 8003a8c:	3d7a0000 	.word	0x3d7a0000

08003a90 <MPU_getAres>:
void MPU_getAres()
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
	switch (AAscale)
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <MPU_getAres+0x58>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d81f      	bhi.n	8003adc <MPU_getAres+0x4c>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <MPU_getAres+0x14>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ab5 	.word	0x08003ab5
 8003aa8:	08003abf 	.word	0x08003abf
 8003aac:	08003ac9 	.word	0x08003ac9
 8003ab0:	08003ad3 	.word	0x08003ad3
	{
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
			aRes = 2.0/32768.0;
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <MPU_getAres+0x5c>)
 8003ab6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003aba:	601a      	str	r2, [r3, #0]
			break;
 8003abc:	e00e      	b.n	8003adc <MPU_getAres+0x4c>
		case AFS_4G:
			aRes = 4.0/32768.0;
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <MPU_getAres+0x5c>)
 8003ac0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003ac4:	601a      	str	r2, [r3, #0]
			break;
 8003ac6:	e009      	b.n	8003adc <MPU_getAres+0x4c>
		case AFS_8G:
			aRes = 8.0/32768.0;
 8003ac8:	4b08      	ldr	r3, [pc, #32]	; (8003aec <MPU_getAres+0x5c>)
 8003aca:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003ace:	601a      	str	r2, [r3, #0]
			break;
 8003ad0:	e004      	b.n	8003adc <MPU_getAres+0x4c>
		case AFS_16G:
			aRes = 16.0/32768.0;
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <MPU_getAres+0x5c>)
 8003ad4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003ad8:	601a      	str	r2, [r3, #0]
			break;
 8003ada:	bf00      	nop
	}
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20002f28 	.word	0x20002f28
 8003aec:	20002f6c 	.word	0x20002f6c

08003af0 <MPU_readAccelData>:

void MPU_readAccelData(int16_t* destination)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z accel register data stored here
	MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 8003af8:	f107 0308 	add.w	r3, r7, #8
 8003afc:	2206      	movs	r2, #6
 8003afe:	213b      	movs	r1, #59	; 0x3b
 8003b00:	20d2      	movs	r0, #210	; 0xd2
 8003b02:	f7ff ff3b 	bl	800397c <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 8003b06:	7a3b      	ldrb	r3, [r7, #8]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	b21a      	sxth	r2, r3
 8003b0c:	7a7b      	ldrb	r3, [r7, #9]
 8003b0e:	b21b      	sxth	r3, r3
 8003b10:	4313      	orrs	r3, r2
 8003b12:	b21a      	sxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 8003b18:	7abb      	ldrb	r3, [r7, #10]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	b219      	sxth	r1, r3
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
 8003b20:	b21a      	sxth	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3302      	adds	r3, #2
 8003b26:	430a      	orrs	r2, r1
 8003b28:	b212      	sxth	r2, r2
 8003b2a:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 8003b2c:	7b3b      	ldrb	r3, [r7, #12]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	b219      	sxth	r1, r3
 8003b32:	7b7b      	ldrb	r3, [r7, #13]
 8003b34:	b21a      	sxth	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	b212      	sxth	r2, r2
 8003b3e:	801a      	strh	r2, [r3, #0]
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <MPU_readGyroData>:
void MPU_readGyroData(int16_t* destination)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 8003b50:	f107 0308 	add.w	r3, r7, #8
 8003b54:	2206      	movs	r2, #6
 8003b56:	2143      	movs	r1, #67	; 0x43
 8003b58:	20d2      	movs	r0, #210	; 0xd2
 8003b5a:	f7ff ff0f 	bl	800397c <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 8003b5e:	7a3b      	ldrb	r3, [r7, #8]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	b21a      	sxth	r2, r3
 8003b64:	7a7b      	ldrb	r3, [r7, #9]
 8003b66:	b21b      	sxth	r3, r3
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	b21a      	sxth	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 8003b70:	7abb      	ldrb	r3, [r7, #10]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	b219      	sxth	r1, r3
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	b21a      	sxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	b212      	sxth	r2, r2
 8003b82:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 8003b84:	7b3b      	ldrb	r3, [r7, #12]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	b219      	sxth	r1, r3
 8003b8a:	7b7b      	ldrb	r3, [r7, #13]
 8003b8c:	b21a      	sxth	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	430a      	orrs	r2, r1
 8003b94:	b212      	sxth	r2, r2
 8003b96:	801a      	strh	r2, [r3, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <MPU_readMagData>:
void MPU_readMagData(int16_t* destination)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(MPU_readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
 8003ba8:	2102      	movs	r1, #2
 8003baa:	2018      	movs	r0, #24
 8003bac:	f7ff fec9 	bl	8003942 <MPU_readByte>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d02a      	beq.n	8003c10 <MPU_readMagData+0x70>
	{ // wait for magnetometer data ready bit to be set
		MPU_readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
 8003bba:	f107 0308 	add.w	r3, r7, #8
 8003bbe:	2207      	movs	r2, #7
 8003bc0:	2103      	movs	r1, #3
 8003bc2:	2018      	movs	r0, #24
 8003bc4:	f7ff feda 	bl	800397c <MPU_readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 8003bc8:	7bbb      	ldrb	r3, [r7, #14]
 8003bca:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d11c      	bne.n	8003c10 <MPU_readMagData+0x70>
		{ // Check if magnetic sensor overflow set, if not then report data
			destination[0] = (int16_t)(((int16_t)rawData[1] << 8) | rawData[0]);  // Turn the MSB and LSB into a signed 16-bit value
 8003bd6:	7a7b      	ldrb	r3, [r7, #9]
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	b21a      	sxth	r2, r3
 8003bdc:	7a3b      	ldrb	r3, [r7, #8]
 8003bde:	b21b      	sxth	r3, r3
 8003be0:	4313      	orrs	r3, r2
 8003be2:	b21a      	sxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	801a      	strh	r2, [r3, #0]
			destination[1] = (int16_t)(((int16_t)rawData[3] << 8) | rawData[2]);  // Data stored as little Endian
 8003be8:	7afb      	ldrb	r3, [r7, #11]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	b219      	sxth	r1, r3
 8003bee:	7abb      	ldrb	r3, [r7, #10]
 8003bf0:	b21a      	sxth	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	b212      	sxth	r2, r2
 8003bfa:	801a      	strh	r2, [r3, #0]
			destination[2] = (int16_t)(((int16_t)rawData[5] << 8) | rawData[4]); 
 8003bfc:	7b7b      	ldrb	r3, [r7, #13]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b219      	sxth	r1, r3
 8003c02:	7b3b      	ldrb	r3, [r7, #12]
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	b212      	sxth	r2, r2
 8003c0e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <MPU_present>:
	MPU_readBytes(MPU9250_ADDRESS, TEMP_OUT_H, 2, &rawData[0]);  // Read the two raw data registers sequentially into data array 
	return (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]);  // Turn the MSB and LSB into a 16-bit value
}

bool MPU_present()
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
	// 5 trials of getting WHO_AM_I response from MPU
	uint8_t attempts = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	71fb      	strb	r3, [r7, #7]
	do
	{
		MPU_reset();
 8003c22:	f000 f977 	bl	8003f14 <MPU_reset>
		char who = MPU_readByte(MPU9250_ADDRESS, MPU9250_WHO_AM_I);
 8003c26:	2175      	movs	r1, #117	; 0x75
 8003c28:	20d2      	movs	r0, #210	; 0xd2
 8003c2a:	f7ff fe8a 	bl	8003942 <MPU_readByte>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71bb      	strb	r3, [r7, #6]
		if (who == 0x71) return true;
 8003c32:	79bb      	ldrb	r3, [r7, #6]
 8003c34:	2b71      	cmp	r3, #113	; 0x71
 8003c36:	d101      	bne.n	8003c3c <MPU_present+0x24>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e00a      	b.n	8003c52 <MPU_present+0x3a>
		else
		{
			attempts++;
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 8003c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c46:	f002 fb4d 	bl	80062e4 <HAL_Delay>
		}
	} while (attempts <= 5);
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	2b05      	cmp	r3, #5
 8003c4e:	d9e8      	bls.n	8003c22 <MPU_present+0xa>
	return false;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <MPU_init>:
void MPU_init()
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
	AAscale = AFS_2G;
 8003c62:	4b64      	ldr	r3, [pc, #400]	; (8003df4 <MPU_init+0x198>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 8003c68:	4b63      	ldr	r3, [pc, #396]	; (8003df8 <MPU_init+0x19c>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 8003c6e:	4b63      	ldr	r3, [pc, #396]	; (8003dfc <MPU_init+0x1a0>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 8003c74:	4b62      	ldr	r3, [pc, #392]	; (8003e00 <MPU_init+0x1a4>)
 8003c76:	2206      	movs	r2, #6
 8003c78:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 8003c7a:	4b62      	ldr	r3, [pc, #392]	; (8003e04 <MPU_init+0x1a8>)
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 8003c82:	4b60      	ldr	r3, [pc, #384]	; (8003e04 <MPU_init+0x1a8>)
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 8003c8a:	4b5e      	ldr	r3, [pc, #376]	; (8003e04 <MPU_init+0x1a8>)
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 8003c92:	4b5d      	ldr	r3, [pc, #372]	; (8003e08 <MPU_init+0x1ac>)
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	; (8003e08 <MPU_init+0x1ac>)
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 8003ca2:	4b59      	ldr	r3, [pc, #356]	; (8003e08 <MPU_init+0x1ac>)
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 8003caa:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <MPU_init+0x1b0>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
	count = 0;
 8003cb0:	4b57      	ldr	r3, [pc, #348]	; (8003e10 <MPU_init+0x1b4>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 8003cb6:	4b57      	ldr	r3, [pc, #348]	; (8003e14 <MPU_init+0x1b8>)
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 8003cbe:	4b56      	ldr	r3, [pc, #344]	; (8003e18 <MPU_init+0x1bc>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 8003cc4:	4b55      	ldr	r3, [pc, #340]	; (8003e1c <MPU_init+0x1c0>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
	Now = 0;
 8003cca:	4b55      	ldr	r3, [pc, #340]	; (8003e20 <MPU_init+0x1c4>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 8003cd0:	4b54      	ldr	r3, [pc, #336]	; (8003e24 <MPU_init+0x1c8>)
 8003cd2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003cd6:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 8003cd8:	4b52      	ldr	r3, [pc, #328]	; (8003e24 <MPU_init+0x1c8>)
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 8003ce0:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <MPU_init+0x1c8>)
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 8003ce8:	4b4e      	ldr	r3, [pc, #312]	; (8003e24 <MPU_init+0x1c8>)
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 8003cf0:	4b4d      	ldr	r3, [pc, #308]	; (8003e28 <MPU_init+0x1cc>)
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <MPU_init+0x1cc>)
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 8003d00:	4b49      	ldr	r3, [pc, #292]	; (8003e28 <MPU_init+0x1cc>)
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]

	// Initialize MPU9250 device
	// wake up device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors 
 8003d08:	2200      	movs	r2, #0
 8003d0a:	216b      	movs	r1, #107	; 0x6b
 8003d0c:	20d2      	movs	r0, #210	; 0xd2
 8003d0e:	f7ff fdfc 	bl	800390a <MPU_writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt  
 8003d12:	2064      	movs	r0, #100	; 0x64
 8003d14:	f002 fae6 	bl	80062e4 <HAL_Delay>

	// get stable time source
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8003d18:	2201      	movs	r2, #1
 8003d1a:	216b      	movs	r1, #107	; 0x6b
 8003d1c:	20d2      	movs	r0, #210	; 0xd2
 8003d1e:	f7ff fdf4 	bl	800390a <MPU_writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
	// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	HAL_Delay(100);
 8003d22:	2064      	movs	r0, #100	; 0x64
 8003d24:	f002 fade 	bl	80062e4 <HAL_Delay>
	//MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8003d28:	2203      	movs	r2, #3
 8003d2a:	211a      	movs	r1, #26
 8003d2c:	20d2      	movs	r0, #210	; 0xd2
 8003d2e:	f7ff fdec 	bl	800390a <MPU_writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	HAL_Delay(100);
 8003d32:	2064      	movs	r0, #100	; 0x64
 8003d34:	f002 fad6 	bl	80062e4 <HAL_Delay>
	//MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 8003d38:	2204      	movs	r2, #4
 8003d3a:	2119      	movs	r1, #25
 8003d3c:	20d2      	movs	r0, #210	; 0xd2
 8003d3e:	f7ff fde4 	bl	800390a <MPU_writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8003d42:	211b      	movs	r1, #27
 8003d44:	20d2      	movs	r0, #210	; 0xd2
 8003d46:	f7ff fdfc 	bl	8003942 <MPU_readByte>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x03; // Clear Fchoice bits [1:0]
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	f023 0303 	bic.w	r3, r3, #3
 8003d54:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x18; // Clear AFS bits [4:3]
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	f023 0318 	bic.w	r3, r3, #24
 8003d5c:	71fb      	strb	r3, [r7, #7]
	c = c | GGscale << 3; // Set full scale range for the gyro
 8003d5e:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <MPU_init+0x19c>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	b25a      	sxtb	r2, r3
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	b25b      	sxtb	r3, r3
 8003d6e:	71fb      	strb	r3, [r7, #7]
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	461a      	mov	r2, r3
 8003d74:	211b      	movs	r1, #27
 8003d76:	20d2      	movs	r0, #210	; 0xd2
 8003d78:	f7ff fdc7 	bl	800390a <MPU_writeByte>

	// Set accelerometer full-scale range configuration
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 8003d7c:	211c      	movs	r1, #28
 8003d7e:	20d2      	movs	r0, #210	; 0xd2
 8003d80:	f7ff fddf 	bl	8003942 <MPU_readByte>
 8003d84:	4603      	mov	r3, r0
 8003d86:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x18;  // Clear AFS bits [4:3]
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	f023 0318 	bic.w	r3, r3, #24
 8003d8e:	71fb      	strb	r3, [r7, #7]
	c = c | AAscale << 3; // Set full scale range for the accelerometer
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <MPU_init+0x198>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	b25a      	sxtb	r2, r3
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	b25b      	sxtb	r3, r3
 8003da0:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	461a      	mov	r2, r3
 8003da6:	211c      	movs	r1, #28
 8003da8:	20d2      	movs	r0, #210	; 0xd2
 8003daa:	f7ff fdae 	bl	800390a <MPU_writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 8003dae:	211d      	movs	r1, #29
 8003db0:	20d2      	movs	r0, #210	; 0xd2
 8003db2:	f7ff fdc6 	bl	8003942 <MPU_readByte>
 8003db6:	4603      	mov	r3, r0
 8003db8:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	f023 030f 	bic.w	r3, r3, #15
 8003dc0:	71fb      	strb	r3, [r7, #7]
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	f043 0303 	orr.w	r3, r3, #3
 8003dc8:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	211d      	movs	r1, #29
 8003dd0:	20d2      	movs	r0, #210	; 0xd2
 8003dd2:	f7ff fd9a 	bl	800390a <MPU_writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
	// can join the I2C bus and all can be controlled by the Arduino as master
	MPU_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);    
 8003dd6:	2222      	movs	r2, #34	; 0x22
 8003dd8:	2137      	movs	r1, #55	; 0x37
 8003dda:	20d2      	movs	r0, #210	; 0xd2
 8003ddc:	f7ff fd95 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8003de0:	2201      	movs	r2, #1
 8003de2:	2138      	movs	r1, #56	; 0x38
 8003de4:	20d2      	movs	r0, #210	; 0xd2
 8003de6:	f7ff fd90 	bl	800390a <MPU_writeByte>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20002f28 	.word	0x20002f28
 8003df8:	20002eef 	.word	0x20002eef
 8003dfc:	20002f78 	.word	0x20002f78
 8003e00:	20002f50 	.word	0x20002f50
 8003e04:	20003008 	.word	0x20003008
 8003e08:	20002f54 	.word	0x20002f54
 8003e0c:	20002fa0 	.word	0x20002fa0
 8003e10:	20002f98 	.word	0x20002f98
 8003e14:	20002fdc 	.word	0x20002fdc
 8003e18:	20002f34 	.word	0x20002f34
 8003e1c:	20002fe4 	.word	0x20002fe4
 8003e20:	20002f64 	.word	0x20002f64
 8003e24:	20002ff4 	.word	0x20002ff4
 8003e28:	20002f44 	.word	0x20002f44

08003e2c <AK8963_init>:
void AK8963_init(float * destination)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003e34:	2200      	movs	r2, #0
 8003e36:	210a      	movs	r1, #10
 8003e38:	2018      	movs	r0, #24
 8003e3a:	f7ff fd66 	bl	800390a <MPU_writeByte>
	HAL_Delay(10);
 8003e3e:	200a      	movs	r0, #10
 8003e40:	f002 fa50 	bl	80062e4 <HAL_Delay>
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8003e44:	220f      	movs	r2, #15
 8003e46:	210a      	movs	r1, #10
 8003e48:	2018      	movs	r0, #24
 8003e4a:	f7ff fd5e 	bl	800390a <MPU_writeByte>
	HAL_Delay(10);
 8003e4e:	200a      	movs	r0, #10
 8003e50:	f002 fa48 	bl	80062e4 <HAL_Delay>
	MPU_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8003e54:	f107 030c 	add.w	r3, r7, #12
 8003e58:	2203      	movs	r2, #3
 8003e5a:	2110      	movs	r1, #16
 8003e5c:	2018      	movs	r0, #24
 8003e5e:	f7ff fd8d 	bl	800397c <MPU_readBytes>
	destination[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8003e62:	7b3b      	ldrb	r3, [r7, #12]
 8003e64:	3b80      	subs	r3, #128	; 0x80
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f08 <AK8963_init+0xdc>
 8003e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	edc3 7a00 	vstr	s15, [r3]
	destination[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8003e84:	7b7b      	ldrb	r3, [r7, #13]
 8003e86:	3b80      	subs	r3, #128	; 0x80
 8003e88:	ee07 3a90 	vmov	s15, r3
 8003e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e90:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8003f08 <AK8963_init+0xdc>
 8003e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ea0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ea4:	edc3 7a00 	vstr	s15, [r3]
	destination[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8003ea8:	7bbb      	ldrb	r3, [r7, #14]
 8003eaa:	3b80      	subs	r3, #128	; 0x80
 8003eac:	ee07 3a90 	vmov	s15, r3
 8003eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003f08 <AK8963_init+0xdc>
 8003eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ec4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ec8:	edc3 7a00 	vstr	s15, [r3]
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003ecc:	2200      	movs	r2, #0
 8003ece:	210a      	movs	r1, #10
 8003ed0:	2018      	movs	r0, #24
 8003ed2:	f7ff fd1a 	bl	800390a <MPU_writeByte>
	HAL_Delay(10);
 8003ed6:	200a      	movs	r0, #10
 8003ed8:	f002 fa04 	bl	80062e4 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, MMscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <AK8963_init+0xe0>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	b25a      	sxtb	r2, r3
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <AK8963_init+0xe4>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	4313      	orrs	r3, r2
 8003eec:	b25b      	sxtb	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	210a      	movs	r1, #10
 8003ef4:	2018      	movs	r0, #24
 8003ef6:	f7ff fd08 	bl	800390a <MPU_writeByte>
	HAL_Delay(10);
 8003efa:	200a      	movs	r0, #10
 8003efc:	f002 f9f2 	bl	80062e4 <HAL_Delay>
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	43800000 	.word	0x43800000
 8003f0c:	20002f78 	.word	0x20002f78
 8003f10:	20002f50 	.word	0x20002f50

08003f14 <MPU_reset>:

void MPU_reset()
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
	// reset device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8003f18:	2280      	movs	r2, #128	; 0x80
 8003f1a:	216b      	movs	r1, #107	; 0x6b
 8003f1c:	20d2      	movs	r0, #210	; 0xd2
 8003f1e:	f7ff fcf4 	bl	800390a <MPU_writeByte>
	HAL_Delay(100);
 8003f22:	2064      	movs	r0, #100	; 0x64
 8003f24:	f002 f9de 	bl	80062e4 <HAL_Delay>
}
 8003f28:	bf00      	nop
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <MPU_calibrate>:

void MPU_calibrate(float* dest1, float* dest2)
{  
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b098      	sub	sp, #96	; 0x60
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
	// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
	// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8003f36:	2300      	movs	r3, #0
 8003f38:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f3e:	2300      	movs	r3, #0
 8003f40:	643b      	str	r3, [r7, #64]	; 0x40
 8003f42:	2300      	movs	r3, #0
 8003f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f46:	2300      	movs	r3, #0
 8003f48:	633b      	str	r3, [r7, #48]	; 0x30
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	216b      	movs	r1, #107	; 0x6b
 8003f52:	20d2      	movs	r0, #210	; 0xd2
 8003f54:	f7ff fcd9 	bl	800390a <MPU_writeByte>
	HAL_Delay(100);  
 8003f58:	2064      	movs	r0, #100	; 0x64
 8003f5a:	f002 f9c3 	bl	80062e4 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  
 8003f5e:	2201      	movs	r2, #1
 8003f60:	216b      	movs	r1, #107	; 0x6b
 8003f62:	20d2      	movs	r0, #210	; 0xd2
 8003f64:	f7ff fcd1 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00); 
 8003f68:	2200      	movs	r2, #0
 8003f6a:	216c      	movs	r1, #108	; 0x6c
 8003f6c:	20d2      	movs	r0, #210	; 0xd2
 8003f6e:	f7ff fccc 	bl	800390a <MPU_writeByte>
	HAL_Delay(200);
 8003f72:	20c8      	movs	r0, #200	; 0xc8
 8003f74:	f002 f9b6 	bl	80062e4 <HAL_Delay>

	// Configure device for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2138      	movs	r1, #56	; 0x38
 8003f7c:	20d2      	movs	r0, #210	; 0xd2
 8003f7e:	f7ff fcc4 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8003f82:	2200      	movs	r2, #0
 8003f84:	2123      	movs	r1, #35	; 0x23
 8003f86:	20d2      	movs	r0, #210	; 0xd2
 8003f88:	f7ff fcbf 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	216b      	movs	r1, #107	; 0x6b
 8003f90:	20d2      	movs	r0, #210	; 0xd2
 8003f92:	f7ff fcba 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8003f96:	2200      	movs	r2, #0
 8003f98:	2124      	movs	r1, #36	; 0x24
 8003f9a:	20d2      	movs	r0, #210	; 0xd2
 8003f9c:	f7ff fcb5 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	216a      	movs	r1, #106	; 0x6a
 8003fa4:	20d2      	movs	r0, #210	; 0xd2
 8003fa6:	f7ff fcb0 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8003faa:	220c      	movs	r2, #12
 8003fac:	216a      	movs	r1, #106	; 0x6a
 8003fae:	20d2      	movs	r0, #210	; 0xd2
 8003fb0:	f7ff fcab 	bl	800390a <MPU_writeByte>
	HAL_Delay(15);
 8003fb4:	200f      	movs	r0, #15
 8003fb6:	f002 f995 	bl	80062e4 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8003fba:	2201      	movs	r2, #1
 8003fbc:	211a      	movs	r1, #26
 8003fbe:	20d2      	movs	r0, #210	; 0xd2
 8003fc0:	f7ff fca3 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2119      	movs	r1, #25
 8003fc8:	20d2      	movs	r0, #210	; 0xd2
 8003fca:	f7ff fc9e 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8003fce:	2200      	movs	r2, #0
 8003fd0:	211b      	movs	r1, #27
 8003fd2:	20d2      	movs	r0, #210	; 0xd2
 8003fd4:	f7ff fc99 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8003fd8:	2200      	movs	r2, #0
 8003fda:	211c      	movs	r1, #28
 8003fdc:	20d2      	movs	r0, #210	; 0xd2
 8003fde:	f7ff fc94 	bl	800390a <MPU_writeByte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8003fe2:	2383      	movs	r3, #131	; 0x83
 8003fe4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8003fe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO  
 8003ff0:	2240      	movs	r2, #64	; 0x40
 8003ff2:	216a      	movs	r1, #106	; 0x6a
 8003ff4:	20d2      	movs	r0, #210	; 0xd2
 8003ff6:	f7ff fc88 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8003ffa:	2278      	movs	r2, #120	; 0x78
 8003ffc:	2123      	movs	r1, #35	; 0x23
 8003ffe:	20d2      	movs	r0, #210	; 0xd2
 8004000:	f7ff fc83 	bl	800390a <MPU_writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8004004:	2028      	movs	r0, #40	; 0x28
 8004006:	f002 f96d 	bl	80062e4 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 800400a:	2200      	movs	r2, #0
 800400c:	2123      	movs	r1, #35	; 0x23
 800400e:	20d2      	movs	r0, #210	; 0xd2
 8004010:	f7ff fc7b 	bl	800390a <MPU_writeByte>
	MPU_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8004014:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004018:	2202      	movs	r2, #2
 800401a:	2172      	movs	r1, #114	; 0x72
 800401c:	20d2      	movs	r0, #210	; 0xd2
 800401e:	f7ff fcad 	bl	800397c <MPU_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8004022:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	b21a      	sxth	r2, r3
 800402a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800402e:	b21b      	sxth	r3, r3
 8004030:	4313      	orrs	r3, r2
 8004032:	b21b      	sxth	r3, r3
 8004034:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8004038:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800403c:	4ab0      	ldr	r2, [pc, #704]	; (8004300 <MPU_calibrate+0x3d4>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	08db      	lsrs	r3, r3, #3
 8004044:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (ii = 0; ii < packet_count; ii++)
 8004048:	2300      	movs	r3, #0
 800404a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800404e:	e071      	b.n	8004134 <MPU_calibrate+0x208>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8004050:	2300      	movs	r3, #0
 8004052:	82bb      	strh	r3, [r7, #20]
 8004054:	2300      	movs	r3, #0
 8004056:	82fb      	strh	r3, [r7, #22]
 8004058:	2300      	movs	r3, #0
 800405a:	833b      	strh	r3, [r7, #24]
 800405c:	2300      	movs	r3, #0
 800405e:	81bb      	strh	r3, [r7, #12]
 8004060:	2300      	movs	r3, #0
 8004062:	81fb      	strh	r3, [r7, #14]
 8004064:	2300      	movs	r3, #0
 8004066:	823b      	strh	r3, [r7, #16]
		MPU_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8004068:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800406c:	220c      	movs	r2, #12
 800406e:	2174      	movs	r1, #116	; 0x74
 8004070:	20d2      	movs	r0, #210	; 0xd2
 8004072:	f7ff fc83 	bl	800397c <MPU_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8004076:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	b21a      	sxth	r2, r3
 800407e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004082:	b21b      	sxth	r3, r3
 8004084:	4313      	orrs	r3, r2
 8004086:	b21b      	sxth	r3, r3
 8004088:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 800408a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800408e:	021b      	lsls	r3, r3, #8
 8004090:	b21a      	sxth	r2, r3
 8004092:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004096:	b21b      	sxth	r3, r3
 8004098:	4313      	orrs	r3, r2
 800409a:	b21b      	sxth	r3, r3
 800409c:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
 800409e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	b21a      	sxth	r2, r3
 80040a6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80040aa:	b21b      	sxth	r3, r3
 80040ac:	4313      	orrs	r3, r2
 80040ae:	b21b      	sxth	r3, r3
 80040b0:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80040b2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	b21a      	sxth	r2, r3
 80040ba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80040be:	b21b      	sxth	r3, r3
 80040c0:	4313      	orrs	r3, r2
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 80040c6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	b21a      	sxth	r2, r3
 80040ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040d2:	b21b      	sxth	r3, r3
 80040d4:	4313      	orrs	r3, r2
 80040d6:	b21b      	sxth	r3, r3
 80040d8:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 80040da:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	b21a      	sxth	r2, r3
 80040e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040e6:	b21b      	sxth	r3, r3
 80040e8:	4313      	orrs	r3, r2
 80040ea:	b21b      	sxth	r3, r3
 80040ec:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80040ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80040f4:	4413      	add	r3, r2
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		accel_bias[1] += (int32_t) accel_temp[1];
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80040fe:	4413      	add	r3, r2
 8004100:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[2] += (int32_t) accel_temp[2];
 8004102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004104:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004108:	4413      	add	r3, r2
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8004116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004118:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800411c:	4413      	add	r3, r2
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8004120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004122:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	643b      	str	r3, [r7, #64]	; 0x40
	for (ii = 0; ii < packet_count; ii++)
 800412a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800412e:	3301      	adds	r3, #1
 8004130:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004134:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8004138:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800413c:	429a      	cmp	r2, r3
 800413e:	d387      	bcc.n	8004050 <MPU_calibrate+0x124>
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8004140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004142:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004146:	fb92 f3f3 	sdiv	r3, r2, r3
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
	accel_bias[1] /= (int32_t) packet_count;
 800414c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004152:	fb92 f3f3 	sdiv	r3, r2, r3
 8004156:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[2] /= (int32_t) packet_count;
 8004158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800415a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800415e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
	gyro_bias[0]  /= (int32_t) packet_count;
 8004164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800416a:	fb92 f3f3 	sdiv	r3, r2, r3
 800416e:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[1]  /= (int32_t) packet_count;
 8004170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004172:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004176:	fb92 f3f3 	sdiv	r3, r2, r3
 800417a:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[2]  /= (int32_t) packet_count;
 800417c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800417e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004182:	fb92 f3f3 	sdiv	r3, r2, r3
 8004186:	643b      	str	r3, [r7, #64]	; 0x40

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8004188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418a:	2b00      	cmp	r3, #0
 800418c:	dd05      	ble.n	800419a <MPU_calibrate+0x26e>
 800418e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004190:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	637b      	str	r3, [r7, #52]	; 0x34
 8004198:	e004      	b.n	80041a4 <MPU_calibrate+0x278>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 800419a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800419c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80041a0:	4413      	add	r3, r2
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	425b      	negs	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	da00      	bge.n	80041ae <MPU_calibrate+0x282>
 80041ac:	3303      	adds	r3, #3
 80041ae:	109b      	asrs	r3, r3, #2
 80041b0:	121b      	asrs	r3, r3, #8
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	425b      	negs	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da00      	bge.n	80041c2 <MPU_calibrate+0x296>
 80041c0:	3303      	adds	r3, #3
 80041c2:	109b      	asrs	r3, r3, #2
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80041ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041cc:	425b      	negs	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da00      	bge.n	80041d4 <MPU_calibrate+0x2a8>
 80041d2:	3303      	adds	r3, #3
 80041d4:	109b      	asrs	r3, r3, #2
 80041d6:	121b      	asrs	r3, r3, #8
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
 80041de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e0:	425b      	negs	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	da00      	bge.n	80041e8 <MPU_calibrate+0x2bc>
 80041e6:	3303      	adds	r3, #3
 80041e8:	109b      	asrs	r3, r3, #2
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80041f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f2:	425b      	negs	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	da00      	bge.n	80041fa <MPU_calibrate+0x2ce>
 80041f8:	3303      	adds	r3, #3
 80041fa:	109b      	asrs	r3, r3, #2
 80041fc:	121b      	asrs	r3, r3, #8
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8004204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004206:	425b      	negs	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	da00      	bge.n	800420e <MPU_calibrate+0x2e2>
 800420c:	3303      	adds	r3, #3
 800420e:	109b      	asrs	r3, r3, #2
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
	*/
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	ee07 3a90 	vmov	s15, r3
 800421c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004220:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800422c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8004236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004240:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004244:	ee07 3a90 	vmov	s15, r3
 8004248:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004254:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8004258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004262:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3308      	adds	r3, #8
 8004272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004276:	edc3 7a00 	vstr	s15, [r3]
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 800427a:	2300      	movs	r3, #0
 800427c:	623b      	str	r3, [r7, #32]
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
 8004282:	2300      	movs	r3, #0
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8004286:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800428a:	2202      	movs	r2, #2
 800428c:	2177      	movs	r1, #119	; 0x77
 800428e:	20d2      	movs	r0, #210	; 0xd2
 8004290:	f7ff fb74 	bl	800397c <MPU_readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8004294:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	b21b      	sxth	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80042a2:	4313      	orrs	r3, r2
 80042a4:	623b      	str	r3, [r7, #32]
	MPU_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 80042a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042aa:	2202      	movs	r2, #2
 80042ac:	217a      	movs	r1, #122	; 0x7a
 80042ae:	20d2      	movs	r0, #210	; 0xd2
 80042b0:	f7ff fb64 	bl	800397c <MPU_readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80042b4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	b21b      	sxth	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80042c2:	4313      	orrs	r3, r2
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
	MPU_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 80042c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042ca:	2202      	movs	r2, #2
 80042cc:	217d      	movs	r1, #125	; 0x7d
 80042ce:	20d2      	movs	r0, #210	; 0xd2
 80042d0:	f7ff fb54 	bl	800397c <MPU_readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80042d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	b21b      	sxth	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80042e2:	4313      	orrs	r3, r2
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 80042e6:	2301      	movs	r3, #1
 80042e8:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80042ea:	2300      	movs	r3, #0
 80042ec:	773b      	strb	r3, [r7, #28]
 80042ee:	2300      	movs	r3, #0
 80042f0:	777b      	strb	r3, [r7, #29]
 80042f2:	2300      	movs	r3, #0
 80042f4:	77bb      	strb	r3, [r7, #30]

	for(ii = 0; ii < 3; ii++)
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80042fc:	e01c      	b.n	8004338 <MPU_calibrate+0x40c>
 80042fe:	bf00      	nop
 8004300:	aaaaaaab 	.word	0xaaaaaaab
	{
		if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8004304:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800430e:	4413      	add	r3, r2
 8004310:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004314:	461a      	mov	r2, r3
 8004316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <MPU_calibrate+0x402>
 800431e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004322:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004326:	4413      	add	r3, r2
 8004328:	2201      	movs	r2, #1
 800432a:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(ii = 0; ii < 3; ii++)
 800432e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004332:	3301      	adds	r3, #1
 8004334:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004338:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800433c:	2b02      	cmp	r3, #2
 800433e:	d9e1      	bls.n	8004304 <MPU_calibrate+0x3d8>
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8004340:	6a3a      	ldr	r2, [r7, #32]
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	2b00      	cmp	r3, #0
 8004346:	da00      	bge.n	800434a <MPU_calibrate+0x41e>
 8004348:	3307      	adds	r3, #7
 800434a:	10db      	asrs	r3, r3, #3
 800434c:	425b      	negs	r3, r3
 800434e:	4413      	add	r3, r2
 8004350:	623b      	str	r3, [r7, #32]
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8004352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	2b00      	cmp	r3, #0
 8004358:	da00      	bge.n	800435c <MPU_calibrate+0x430>
 800435a:	3307      	adds	r3, #7
 800435c:	10db      	asrs	r3, r3, #3
 800435e:	425b      	negs	r3, r3
 8004360:	4413      	add	r3, r2
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8004364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004368:	2b00      	cmp	r3, #0
 800436a:	da00      	bge.n	800436e <MPU_calibrate+0x442>
 800436c:	3307      	adds	r3, #7
 800436e:	10db      	asrs	r3, r3, #3
 8004370:	425b      	negs	r3, r3
 8004372:	4413      	add	r3, r2
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	121b      	asrs	r3, r3, #8
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (accel_bias_reg[0])      & 0xFF;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004388:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800438c:	7f3b      	ldrb	r3, [r7, #28]
 800438e:	4313      	orrs	r3, r2
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	121b      	asrs	r3, r3, #8
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (accel_bias_reg[1])      & 0xFF;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80043a8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80043ac:	7f7b      	ldrb	r3, [r7, #29]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	121b      	asrs	r3, r3, #8
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (accel_bias_reg[2])      & 0xFF;
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80043c8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80043cc:	7fbb      	ldrb	r3, [r7, #30]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
	*/
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity; 
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	ee07 3a90 	vmov	s15, r3
 80043dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043e0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80043e4:	ee07 3a90 	vmov	s15, r3
 80043e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004400:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004404:	ee07 3a90 	vmov	s15, r3
 8004408:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	3304      	adds	r3, #4
 8004410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004414:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004422:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	3308      	adds	r3, #8
 8004432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004436:	edc3 7a00 	vstr	s15, [r3]
}
 800443a:	bf00      	nop
 800443c:	3760      	adds	r7, #96	; 0x60
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	0000      	movs	r0, r0
	...

08004448 <MPU_SelfTest>:
void MPU_SelfTest(float* destination)
{
 8004448:	b5b0      	push	{r4, r5, r7, lr}
 800444a:	b09e      	sub	sp, #120	; 0x78
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	// Accelerometer and gyroscope self test; check calibration wrt factory settings
	 // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
	uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 8004450:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 800445a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	609a      	str	r2, [r3, #8]
 8004466:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	609a      	str	r2, [r3, #8]
 8004472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	605a      	str	r2, [r3, #4]
 800447c:	609a      	str	r2, [r3, #8]
 800447e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 8004490:	2200      	movs	r2, #0
 8004492:	2119      	movs	r1, #25
 8004494:	20d2      	movs	r0, #210	; 0xd2
 8004496:	f7ff fa38 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800449a:	2202      	movs	r2, #2
 800449c:	211a      	movs	r1, #26
 800449e:	20d2      	movs	r0, #210	; 0xd2
 80044a0:	f7ff fa33 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, FS<<3); // Set full scale range for the gyro to 250 dps
 80044a4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	211b      	movs	r1, #27
 80044b0:	20d2      	movs	r0, #210	; 0xd2
 80044b2:	f7ff fa2a 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80044b6:	2202      	movs	r2, #2
 80044b8:	211d      	movs	r1, #29
 80044ba:	20d2      	movs	r0, #210	; 0xd2
 80044bc:	f7ff fa25 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g
 80044c0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	211c      	movs	r1, #28
 80044cc:	20d2      	movs	r0, #210	; 0xd2
 80044ce:	f7ff fa1c 	bl	800390a <MPU_writeByte>

	for( int ii = 0; ii < 200; ii++)
 80044d2:	2300      	movs	r3, #0
 80044d4:	677b      	str	r3, [r7, #116]	; 0x74
 80044d6:	e058      	b.n	800458a <MPU_SelfTest+0x142>
	{ // get average current values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 80044d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80044dc:	2206      	movs	r2, #6
 80044de:	213b      	movs	r1, #59	; 0x3b
 80044e0:	20d2      	movs	r0, #210	; 0xd2
 80044e2:	f7ff fa4b 	bl	800397c <MPU_readBytes>
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80044e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80044ec:	0212      	lsls	r2, r2, #8
 80044ee:	b211      	sxth	r1, r2
 80044f0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80044f4:	b212      	sxth	r2, r2
 80044f6:	430a      	orrs	r2, r1
 80044f8:	b212      	sxth	r2, r2
 80044fa:	4413      	add	r3, r2
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80044fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004500:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004504:	0212      	lsls	r2, r2, #8
 8004506:	b211      	sxth	r1, r2
 8004508:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800450c:	b212      	sxth	r2, r2
 800450e:	430a      	orrs	r2, r1
 8004510:	b212      	sxth	r2, r2
 8004512:	4413      	add	r3, r2
 8004514:	643b      	str	r3, [r7, #64]	; 0x40
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8004516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004518:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800451c:	0212      	lsls	r2, r2, #8
 800451e:	b211      	sxth	r1, r2
 8004520:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8004524:	b212      	sxth	r2, r2
 8004526:	430a      	orrs	r2, r1
 8004528:	b212      	sxth	r2, r2
 800452a:	4413      	add	r3, r2
 800452c:	647b      	str	r3, [r7, #68]	; 0x44

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 800452e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004532:	2206      	movs	r2, #6
 8004534:	2143      	movs	r1, #67	; 0x43
 8004536:	20d2      	movs	r0, #210	; 0xd2
 8004538:	f7ff fa20 	bl	800397c <MPU_readBytes>
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800453c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8004542:	0212      	lsls	r2, r2, #8
 8004544:	b211      	sxth	r1, r2
 8004546:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800454a:	b212      	sxth	r2, r2
 800454c:	430a      	orrs	r2, r1
 800454e:	b212      	sxth	r2, r2
 8004550:	4413      	add	r3, r2
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8004554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004556:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800455a:	0212      	lsls	r2, r2, #8
 800455c:	b211      	sxth	r1, r2
 800455e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8004562:	b212      	sxth	r2, r2
 8004564:	430a      	orrs	r2, r1
 8004566:	b212      	sxth	r2, r2
 8004568:	4413      	add	r3, r2
 800456a:	64fb      	str	r3, [r7, #76]	; 0x4c
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 800456c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800456e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004572:	0212      	lsls	r2, r2, #8
 8004574:	b211      	sxth	r1, r2
 8004576:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800457a:	b212      	sxth	r2, r2
 800457c:	430a      	orrs	r2, r1
 800457e:	b212      	sxth	r2, r2
 8004580:	4413      	add	r3, r2
 8004582:	653b      	str	r3, [r7, #80]	; 0x50
	for( int ii = 0; ii < 200; ii++)
 8004584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004586:	3301      	adds	r3, #1
 8004588:	677b      	str	r3, [r7, #116]	; 0x74
 800458a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800458c:	2bc7      	cmp	r3, #199	; 0xc7
 800458e:	dda3      	ble.n	80044d8 <MPU_SelfTest+0x90>
	}

	for (int ii =0; ii < 3; ii++)
 8004590:	2300      	movs	r3, #0
 8004592:	673b      	str	r3, [r7, #112]	; 0x70
 8004594:	e02a      	b.n	80045ec <MPU_SelfTest+0x1a4>
	{ // Get average of 200 values and store as average current readings
		aAvg[ii] /= 200;
 8004596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800459e:	4413      	add	r3, r2
 80045a0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80045a4:	4a4a      	ldr	r2, [pc, #296]	; (80046d0 <MPU_SelfTest+0x288>)
 80045a6:	fb82 1203 	smull	r1, r2, r2, r3
 80045aa:	1192      	asrs	r2, r2, #6
 80045ac:	17db      	asrs	r3, r3, #31
 80045ae:	1ad2      	subs	r2, r2, r3
 80045b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80045b8:	440b      	add	r3, r1
 80045ba:	f843 2c3c 	str.w	r2, [r3, #-60]
		gAvg[ii] /= 200;
 80045be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80045c6:	4413      	add	r3, r2
 80045c8:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80045cc:	4a40      	ldr	r2, [pc, #256]	; (80046d0 <MPU_SelfTest+0x288>)
 80045ce:	fb82 1203 	smull	r1, r2, r2, r3
 80045d2:	1192      	asrs	r2, r2, #6
 80045d4:	17db      	asrs	r3, r3, #31
 80045d6:	1ad2      	subs	r2, r2, r3
 80045d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80045e0:	440b      	add	r3, r1
 80045e2:	f843 2c30 	str.w	r2, [r3, #-48]
	for (int ii =0; ii < 3; ii++)
 80045e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045e8:	3301      	adds	r3, #1
 80045ea:	673b      	str	r3, [r7, #112]	; 0x70
 80045ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	ddd1      	ble.n	8004596 <MPU_SelfTest+0x14e>
	}

	// Configure the accelerometer for self-test
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80045f2:	22e0      	movs	r2, #224	; 0xe0
 80045f4:	211c      	movs	r1, #28
 80045f6:	20d2      	movs	r0, #210	; 0xd2
 80045f8:	f7ff f987 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80045fc:	22e0      	movs	r2, #224	; 0xe0
 80045fe:	211b      	movs	r1, #27
 8004600:	20d2      	movs	r0, #210	; 0xd2
 8004602:	f7ff f982 	bl	800390a <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8004606:	2019      	movs	r0, #25
 8004608:	f001 fe6c 	bl	80062e4 <HAL_Delay>

	for( int ii = 0; ii < 200; ii++)
 800460c:	2300      	movs	r3, #0
 800460e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004610:	e058      	b.n	80046c4 <MPU_SelfTest+0x27c>
	{ // get average self-test values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8004612:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004616:	2206      	movs	r2, #6
 8004618:	213b      	movs	r1, #59	; 0x3b
 800461a:	20d2      	movs	r0, #210	; 0xd2
 800461c:	f7ff f9ae 	bl	800397c <MPU_readBytes>
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8004626:	0212      	lsls	r2, r2, #8
 8004628:	b211      	sxth	r1, r2
 800462a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800462e:	b212      	sxth	r2, r2
 8004630:	430a      	orrs	r2, r1
 8004632:	b212      	sxth	r2, r2
 8004634:	4413      	add	r3, r2
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8004638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800463e:	0212      	lsls	r2, r2, #8
 8004640:	b211      	sxth	r1, r2
 8004642:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8004646:	b212      	sxth	r2, r2
 8004648:	430a      	orrs	r2, r1
 800464a:	b212      	sxth	r2, r2
 800464c:	4413      	add	r3, r2
 800464e:	637b      	str	r3, [r7, #52]	; 0x34
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004656:	0212      	lsls	r2, r2, #8
 8004658:	b211      	sxth	r1, r2
 800465a:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800465e:	b212      	sxth	r2, r2
 8004660:	430a      	orrs	r2, r1
 8004662:	b212      	sxth	r2, r2
 8004664:	4413      	add	r3, r2
 8004666:	63bb      	str	r3, [r7, #56]	; 0x38

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8004668:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800466c:	2206      	movs	r2, #6
 800466e:	2143      	movs	r1, #67	; 0x43
 8004670:	20d2      	movs	r0, #210	; 0xd2
 8004672:	f7ff f983 	bl	800397c <MPU_readBytes>
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800467c:	0212      	lsls	r2, r2, #8
 800467e:	b211      	sxth	r1, r2
 8004680:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8004684:	b212      	sxth	r2, r2
 8004686:	430a      	orrs	r2, r1
 8004688:	b212      	sxth	r2, r2
 800468a:	4413      	add	r3, r2
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004694:	0212      	lsls	r2, r2, #8
 8004696:	b211      	sxth	r1, r2
 8004698:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800469c:	b212      	sxth	r2, r2
 800469e:	430a      	orrs	r2, r1
 80046a0:	b212      	sxth	r2, r2
 80046a2:	4413      	add	r3, r2
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80046ac:	0212      	lsls	r2, r2, #8
 80046ae:	b211      	sxth	r1, r2
 80046b0:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80046b4:	b212      	sxth	r2, r2
 80046b6:	430a      	orrs	r2, r1
 80046b8:	b212      	sxth	r2, r2
 80046ba:	4413      	add	r3, r2
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for( int ii = 0; ii < 200; ii++)
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	3301      	adds	r3, #1
 80046c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	2bc7      	cmp	r3, #199	; 0xc7
 80046c8:	dda3      	ble.n	8004612 <MPU_SelfTest+0x1ca>
	}

	for (int ii =0; ii < 3; ii++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80046ce:	e02c      	b.n	800472a <MPU_SelfTest+0x2e2>
 80046d0:	51eb851f 	.word	0x51eb851f
	{ // Get average of 200 values and store as average self-test readings
		aSTAvg[ii] /= 200;
 80046d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80046dc:	4413      	add	r3, r2
 80046de:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80046e2:	4add      	ldr	r2, [pc, #884]	; (8004a58 <MPU_SelfTest+0x610>)
 80046e4:	fb82 1203 	smull	r1, r2, r2, r3
 80046e8:	1192      	asrs	r2, r2, #6
 80046ea:	17db      	asrs	r3, r3, #31
 80046ec:	1ad2      	subs	r2, r2, r3
 80046ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80046f6:	440b      	add	r3, r1
 80046f8:	f843 2c48 	str.w	r2, [r3, #-72]
		gSTAvg[ii] /= 200;
 80046fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004704:	4413      	add	r3, r2
 8004706:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800470a:	4ad3      	ldr	r2, [pc, #844]	; (8004a58 <MPU_SelfTest+0x610>)
 800470c:	fb82 1203 	smull	r1, r2, r2, r3
 8004710:	1192      	asrs	r2, r2, #6
 8004712:	17db      	asrs	r3, r3, #31
 8004714:	1ad2      	subs	r2, r2, r3
 8004716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800471e:	440b      	add	r3, r1
 8004720:	f843 2c54 	str.w	r2, [r3, #-84]
	for (int ii =0; ii < 3; ii++)
 8004724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004726:	3301      	adds	r3, #1
 8004728:	66bb      	str	r3, [r7, #104]	; 0x68
 800472a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800472c:	2b02      	cmp	r3, #2
 800472e:	ddd1      	ble.n	80046d4 <MPU_SelfTest+0x28c>
	}

	// Configure the gyro and accelerometer for normal operation
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
 8004730:	2200      	movs	r2, #0
 8004732:	211c      	movs	r1, #28
 8004734:	20d2      	movs	r0, #210	; 0xd2
 8004736:	f7ff f8e8 	bl	800390a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
 800473a:	2200      	movs	r2, #0
 800473c:	211b      	movs	r1, #27
 800473e:	20d2      	movs	r0, #210	; 0xd2
 8004740:	f7ff f8e3 	bl	800390a <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8004744:	2019      	movs	r0, #25
 8004746:	f001 fdcd 	bl	80062e4 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 800474a:	210d      	movs	r1, #13
 800474c:	20d2      	movs	r0, #210	; 0xd2
 800474e:	f7ff f8f8 	bl	8003942 <MPU_readByte>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	selfTest[1] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 8004758:	210e      	movs	r1, #14
 800475a:	20d2      	movs	r0, #210	; 0xd2
 800475c:	f7ff f8f1 	bl	8003942 <MPU_readByte>
 8004760:	4603      	mov	r3, r0
 8004762:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	selfTest[2] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 8004766:	210f      	movs	r1, #15
 8004768:	20d2      	movs	r0, #210	; 0xd2
 800476a:	f7ff f8ea 	bl	8003942 <MPU_readByte>
 800476e:	4603      	mov	r3, r0
 8004770:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	selfTest[3] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO); // X-axis gyro self-test results
 8004774:	2100      	movs	r1, #0
 8004776:	20d2      	movs	r0, #210	; 0xd2
 8004778:	f7ff f8e3 	bl	8003942 <MPU_readByte>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	selfTest[4] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
 8004782:	2101      	movs	r1, #1
 8004784:	20d2      	movs	r0, #210	; 0xd2
 8004786:	f7ff f8dc 	bl	8003942 <MPU_readByte>
 800478a:	4603      	mov	r3, r0
 800478c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	selfTest[5] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO); // Z-axis gyro self-test results
 8004790:	2102      	movs	r1, #2
 8004792:	20d2      	movs	r0, #210	; 0xd2
 8004794:	f7ff f8d5 	bl	8003942 <MPU_readByte>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 800479e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80047a2:	f640 223c 	movw	r2, #2620	; 0xa3c
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047b2:	ee17 0a90 	vmov	r0, s15
 80047b6:	f7fb fed7 	bl	8000568 <__aeabi_f2d>
 80047ba:	4604      	mov	r4, r0
 80047bc:	460d      	mov	r5, r1
 80047be:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	ee17 0a90 	vmov	r0, s15
 80047ce:	f7fb fecb 	bl	8000568 <__aeabi_f2d>
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	4ba1      	ldr	r3, [pc, #644]	; (8004a5c <MPU_SelfTest+0x614>)
 80047d8:	f7fb fd66 	bl	80002a8 <__aeabi_dsub>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	ec43 2b17 	vmov	d7, r2, r3
 80047e4:	eeb0 1a47 	vmov.f32	s2, s14
 80047e8:	eef0 1a67 	vmov.f32	s3, s15
 80047ec:	ed9f 0b98 	vldr	d0, [pc, #608]	; 8004a50 <MPU_SelfTest+0x608>
 80047f0:	f016 f980 	bl	801aaf4 <pow>
 80047f4:	ec53 2b10 	vmov	r2, r3, d0
 80047f8:	4620      	mov	r0, r4
 80047fa:	4629      	mov	r1, r5
 80047fc:	f7fb ff0c 	bl	8000618 <__aeabi_dmul>
 8004800:	4603      	mov	r3, r0
 8004802:	460c      	mov	r4, r1
 8004804:	4618      	mov	r0, r3
 8004806:	4621      	mov	r1, r4
 8004808:	f7fc f9fe 	bl	8000c08 <__aeabi_d2f>
 800480c:	4603      	mov	r3, r0
 800480e:	60fb      	str	r3, [r7, #12]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8004810:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004814:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	ee07 3a90 	vmov	s15, r3
 8004820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004824:	ee17 0a90 	vmov	r0, s15
 8004828:	f7fb fe9e 	bl	8000568 <__aeabi_f2d>
 800482c:	4604      	mov	r4, r0
 800482e:	460d      	mov	r5, r1
 8004830:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483c:	ee17 0a90 	vmov	r0, s15
 8004840:	f7fb fe92 	bl	8000568 <__aeabi_f2d>
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	4b84      	ldr	r3, [pc, #528]	; (8004a5c <MPU_SelfTest+0x614>)
 800484a:	f7fb fd2d 	bl	80002a8 <__aeabi_dsub>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	ec43 2b17 	vmov	d7, r2, r3
 8004856:	eeb0 1a47 	vmov.f32	s2, s14
 800485a:	eef0 1a67 	vmov.f32	s3, s15
 800485e:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 8004a50 <MPU_SelfTest+0x608>
 8004862:	f016 f947 	bl	801aaf4 <pow>
 8004866:	ec53 2b10 	vmov	r2, r3, d0
 800486a:	4620      	mov	r0, r4
 800486c:	4629      	mov	r1, r5
 800486e:	f7fb fed3 	bl	8000618 <__aeabi_dmul>
 8004872:	4603      	mov	r3, r0
 8004874:	460c      	mov	r4, r1
 8004876:	4618      	mov	r0, r3
 8004878:	4621      	mov	r1, r4
 800487a:	f7fc f9c5 	bl	8000c08 <__aeabi_d2f>
 800487e:	4603      	mov	r3, r0
 8004880:	613b      	str	r3, [r7, #16]
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8004882:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004886:	f640 223c 	movw	r2, #2620	; 0xa3c
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004896:	ee17 0a90 	vmov	r0, s15
 800489a:	f7fb fe65 	bl	8000568 <__aeabi_f2d>
 800489e:	4604      	mov	r4, r0
 80048a0:	460d      	mov	r5, r1
 80048a2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	ee17 0a90 	vmov	r0, s15
 80048b2:	f7fb fe59 	bl	8000568 <__aeabi_f2d>
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	4b68      	ldr	r3, [pc, #416]	; (8004a5c <MPU_SelfTest+0x614>)
 80048bc:	f7fb fcf4 	bl	80002a8 <__aeabi_dsub>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	ec43 2b17 	vmov	d7, r2, r3
 80048c8:	eeb0 1a47 	vmov.f32	s2, s14
 80048cc:	eef0 1a67 	vmov.f32	s3, s15
 80048d0:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8004a50 <MPU_SelfTest+0x608>
 80048d4:	f016 f90e 	bl	801aaf4 <pow>
 80048d8:	ec53 2b10 	vmov	r2, r3, d0
 80048dc:	4620      	mov	r0, r4
 80048de:	4629      	mov	r1, r5
 80048e0:	f7fb fe9a 	bl	8000618 <__aeabi_dmul>
 80048e4:	4603      	mov	r3, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	4618      	mov	r0, r3
 80048ea:	4621      	mov	r1, r4
 80048ec:	f7fc f98c 	bl	8000c08 <__aeabi_d2f>
 80048f0:	4603      	mov	r3, r0
 80048f2:	617b      	str	r3, [r7, #20]
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 80048f4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80048f8:	f640 223c 	movw	r2, #2620	; 0xa3c
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	ee07 3a90 	vmov	s15, r3
 8004904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004908:	ee17 0a90 	vmov	r0, s15
 800490c:	f7fb fe2c 	bl	8000568 <__aeabi_f2d>
 8004910:	4604      	mov	r4, r0
 8004912:	460d      	mov	r5, r1
 8004914:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004920:	ee17 0a90 	vmov	r0, s15
 8004924:	f7fb fe20 	bl	8000568 <__aeabi_f2d>
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	4b4b      	ldr	r3, [pc, #300]	; (8004a5c <MPU_SelfTest+0x614>)
 800492e:	f7fb fcbb 	bl	80002a8 <__aeabi_dsub>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	ec43 2b17 	vmov	d7, r2, r3
 800493a:	eeb0 1a47 	vmov.f32	s2, s14
 800493e:	eef0 1a67 	vmov.f32	s3, s15
 8004942:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8004a50 <MPU_SelfTest+0x608>
 8004946:	f016 f8d5 	bl	801aaf4 <pow>
 800494a:	ec53 2b10 	vmov	r2, r3, d0
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f7fb fe61 	bl	8000618 <__aeabi_dmul>
 8004956:	4603      	mov	r3, r0
 8004958:	460c      	mov	r4, r1
 800495a:	4618      	mov	r0, r3
 800495c:	4621      	mov	r1, r4
 800495e:	f7fc f953 	bl	8000c08 <__aeabi_d2f>
 8004962:	4603      	mov	r3, r0
 8004964:	61bb      	str	r3, [r7, #24]
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8004966:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800496a:	f640 223c 	movw	r2, #2620	; 0xa3c
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800497a:	ee17 0a90 	vmov	r0, s15
 800497e:	f7fb fdf3 	bl	8000568 <__aeabi_f2d>
 8004982:	4604      	mov	r4, r0
 8004984:	460d      	mov	r5, r1
 8004986:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	ee17 0a90 	vmov	r0, s15
 8004996:	f7fb fde7 	bl	8000568 <__aeabi_f2d>
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	4b2f      	ldr	r3, [pc, #188]	; (8004a5c <MPU_SelfTest+0x614>)
 80049a0:	f7fb fc82 	bl	80002a8 <__aeabi_dsub>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	ec43 2b17 	vmov	d7, r2, r3
 80049ac:	eeb0 1a47 	vmov.f32	s2, s14
 80049b0:	eef0 1a67 	vmov.f32	s3, s15
 80049b4:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8004a50 <MPU_SelfTest+0x608>
 80049b8:	f016 f89c 	bl	801aaf4 <pow>
 80049bc:	ec53 2b10 	vmov	r2, r3, d0
 80049c0:	4620      	mov	r0, r4
 80049c2:	4629      	mov	r1, r5
 80049c4:	f7fb fe28 	bl	8000618 <__aeabi_dmul>
 80049c8:	4603      	mov	r3, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	4618      	mov	r0, r3
 80049ce:	4621      	mov	r1, r4
 80049d0:	f7fc f91a 	bl	8000c08 <__aeabi_d2f>
 80049d4:	4603      	mov	r3, r0
 80049d6:	61fb      	str	r3, [r7, #28]
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 80049d8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80049dc:	f640 223c 	movw	r2, #2620	; 0xa3c
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ec:	ee17 0a90 	vmov	r0, s15
 80049f0:	f7fb fdba 	bl	8000568 <__aeabi_f2d>
 80049f4:	4604      	mov	r4, r0
 80049f6:	460d      	mov	r5, r1
 80049f8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a04:	ee17 0a90 	vmov	r0, s15
 8004a08:	f7fb fdae 	bl	8000568 <__aeabi_f2d>
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <MPU_SelfTest+0x614>)
 8004a12:	f7fb fc49 	bl	80002a8 <__aeabi_dsub>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	ec43 2b17 	vmov	d7, r2, r3
 8004a1e:	eeb0 1a47 	vmov.f32	s2, s14
 8004a22:	eef0 1a67 	vmov.f32	s3, s15
 8004a26:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8004a50 <MPU_SelfTest+0x608>
 8004a2a:	f016 f863 	bl	801aaf4 <pow>
 8004a2e:	ec53 2b10 	vmov	r2, r3, d0
 8004a32:	4620      	mov	r0, r4
 8004a34:	4629      	mov	r1, r5
 8004a36:	f7fb fdef 	bl	8000618 <__aeabi_dmul>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	4618      	mov	r0, r3
 8004a40:	4621      	mov	r1, r4
 8004a42:	f7fc f8e1 	bl	8000c08 <__aeabi_d2f>
 8004a46:	4603      	mov	r3, r0
 8004a48:	623b      	str	r3, [r7, #32]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a4e:	e096      	b.n	8004b7e <MPU_SelfTest+0x736>
 8004a50:	c28f5c29 	.word	0xc28f5c29
 8004a54:	3ff028f5 	.word	0x3ff028f5
 8004a58:	51eb851f 	.word	0x51eb851f
 8004a5c:	3ff00000 	.word	0x3ff00000
	{
		destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.; // Report percent differences
 8004a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004a68:	4413      	add	r3, r2
 8004a6a:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8004a6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004a76:	440b      	add	r3, r1
 8004a78:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a86:	ee17 0a90 	vmov	r0, s15
 8004a8a:	f7fb fd6d 	bl	8000568 <__aeabi_f2d>
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	4b3f      	ldr	r3, [pc, #252]	; (8004b90 <MPU_SelfTest+0x748>)
 8004a94:	f7fb fdc0 	bl	8000618 <__aeabi_dmul>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	4625      	mov	r5, r4
 8004a9e:	461c      	mov	r4, r3
 8004aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3b6c      	subs	r3, #108	; 0x6c
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fb fd5a 	bl	8000568 <__aeabi_f2d>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4620      	mov	r0, r4
 8004aba:	4629      	mov	r1, r5
 8004abc:	f7fb fed6 	bl	800086c <__aeabi_ddiv>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	4b30      	ldr	r3, [pc, #192]	; (8004b90 <MPU_SelfTest+0x748>)
 8004ace:	f7fb fbeb 	bl	80002a8 <__aeabi_dsub>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	4621      	mov	r1, r4
 8004ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	18d4      	adds	r4, r2, r3
 8004ae2:	f7fc f891 	bl	8000c08 <__aeabi_d2f>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	6023      	str	r3, [r4, #0]
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8004aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004af2:	4413      	add	r3, r2
 8004af4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004b00:	440b      	add	r3, r1
 8004b02:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	ee07 3a90 	vmov	s15, r3
 8004b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b10:	ee17 0a90 	vmov	r0, s15
 8004b14:	f7fb fd28 	bl	8000568 <__aeabi_f2d>
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <MPU_SelfTest+0x748>)
 8004b1e:	f7fb fd7b 	bl	8000618 <__aeabi_dmul>
 8004b22:	4603      	mov	r3, r0
 8004b24:	460c      	mov	r4, r1
 8004b26:	4625      	mov	r5, r4
 8004b28:	461c      	mov	r4, r3
 8004b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b2c:	3303      	adds	r3, #3
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004b34:	4413      	add	r3, r2
 8004b36:	3b6c      	subs	r3, #108	; 0x6c
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fb fd14 	bl	8000568 <__aeabi_f2d>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4620      	mov	r0, r4
 8004b46:	4629      	mov	r1, r5
 8004b48:	f7fb fe90 	bl	800086c <__aeabi_ddiv>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	4618      	mov	r0, r3
 8004b52:	4621      	mov	r1, r4
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <MPU_SelfTest+0x748>)
 8004b5a:	f7fb fba5 	bl	80002a8 <__aeabi_dsub>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	460c      	mov	r4, r1
 8004b62:	4618      	mov	r0, r3
 8004b64:	4621      	mov	r1, r4
 8004b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b68:	3303      	adds	r3, #3
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	18d4      	adds	r4, r2, r3
 8004b70:	f7fc f84a 	bl	8000c08 <__aeabi_d2f>
 8004b74:	4603      	mov	r3, r0
 8004b76:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++)
 8004b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	f77f af6d 	ble.w	8004a60 <MPU_SelfTest+0x618>
	}
}
 8004b86:	bf00      	nop
 8004b88:	3778      	adds	r7, #120	; 0x78
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40590000 	.word	0x40590000

08004b94 <MPU_calibrateMag>:
void MPU_calibrateMag(float* dest1)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08e      	sub	sp, #56	; 0x38
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	uint16_t ii = 0, jj=0, sample_count = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	867b      	strh	r3, [r7, #50]	; 0x32
	int32_t mag_bias[3] = {0, 0, 0};
 8004ba8:	2300      	movs	r3, #0
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
 8004bac:	2300      	movs	r3, #0
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8004bb4:	4a67      	ldr	r2, [pc, #412]	; (8004d54 <MPU_calibrateMag+0x1c0>)
 8004bb6:	f107 031c 	add.w	r3, r7, #28
 8004bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bbe:	6018      	str	r0, [r3, #0]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	8019      	strh	r1, [r3, #0]
 8004bc4:	4a64      	ldr	r2, [pc, #400]	; (8004d58 <MPU_calibrateMag+0x1c4>)
 8004bc6:	f107 0314 	add.w	r3, r7, #20
 8004bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bce:	6018      	str	r0, [r3, #0]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	8019      	strh	r1, [r3, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	81bb      	strh	r3, [r7, #12]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	81fb      	strh	r3, [r7, #14]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	823b      	strh	r3, [r7, #16]

	HAL_Delay(4000);
 8004be0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004be4:	f001 fb7e 	bl	80062e4 <HAL_Delay>

	sample_count = 64;
 8004be8:	2340      	movs	r3, #64	; 0x40
 8004bea:	867b      	strh	r3, [r7, #50]	; 0x32
	for(ii = 0; ii < sample_count; ii++)
 8004bec:	2300      	movs	r3, #0
 8004bee:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004bf0:	e051      	b.n	8004c96 <MPU_calibrateMag+0x102>
	{
		MPU_readMagData(mag_temp);  // Read the mag data
 8004bf2:	f107 030c 	add.w	r3, r7, #12
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe ffd2 	bl	8003ba0 <MPU_readMagData>
		for (jj = 0; jj < 3; jj++)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c00:	e040      	b.n	8004c84 <MPU_calibrateMag+0xf0>
		{
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8004c02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 8004c10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004c18:	440b      	add	r3, r1
 8004c1a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	dd0e      	ble.n	8004c40 <MPU_calibrateMag+0xac>
 8004c22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c24:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004c2c:	440b      	add	r3, r1
 8004c2e:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 8004c32:	0053      	lsls	r3, r2, #1
 8004c34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c38:	4413      	add	r3, r2
 8004c3a:	460a      	mov	r2, r1
 8004c3c:	f823 2c1c 	strh.w	r2, [r3, #-28]
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8004c40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c48:	4413      	add	r3, r2
 8004c4a:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 8004c4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004c56:	440b      	add	r3, r1
 8004c58:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	da0e      	bge.n	8004c7e <MPU_calibrateMag+0xea>
 8004c60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 8004c70:	0053      	lsls	r3, r2, #1
 8004c72:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c76:	4413      	add	r3, r2
 8004c78:	460a      	mov	r2, r1
 8004c7a:	f823 2c24 	strh.w	r2, [r3, #-36]
		for (jj = 0; jj < 3; jj++)
 8004c7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c80:	3301      	adds	r3, #1
 8004c82:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d9bb      	bls.n	8004c02 <MPU_calibrateMag+0x6e>
		}
		HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 8004c8a:	2087      	movs	r0, #135	; 0x87
 8004c8c:	f001 fb2a 	bl	80062e4 <HAL_Delay>
	for(ii = 0; ii < sample_count; ii++)
 8004c90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c92:	3301      	adds	r3, #1
 8004c94:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004c98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d3a9      	bcc.n	8004bf2 <MPU_calibrateMag+0x5e>
	}

	mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8004c9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ca8:	4413      	add	r3, r2
 8004caa:	0fda      	lsrs	r2, r3, #31
 8004cac:	4413      	add	r3, r2
 8004cae:	105b      	asrs	r3, r3, #1
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
	mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8004cb2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	0fda      	lsrs	r2, r3, #31
 8004cc0:	4413      	add	r3, r2
 8004cc2:	105b      	asrs	r3, r3, #1
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
	mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8004cc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	0fda      	lsrs	r2, r3, #31
 8004cd4:	4413      	add	r3, r2
 8004cd6:	105b      	asrs	r3, r3, #1
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c

	dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ce4:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <MPU_calibrateMag+0x1c8>)
 8004ce6:	edd3 7a00 	vldr	s15, [r3]
 8004cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cee:	4b1c      	ldr	r3, [pc, #112]	; (8004d60 <MPU_calibrateMag+0x1cc>)
 8004cf0:	edd3 7a00 	vldr	s15, [r3]
 8004cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d08:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <MPU_calibrateMag+0x1c8>)
 8004d0a:	edd3 7a00 	vldr	s15, [r3]
 8004d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d12:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <MPU_calibrateMag+0x1cc>)
 8004d14:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d20:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8004d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <MPU_calibrateMag+0x1c8>)
 8004d30:	edd3 7a00 	vldr	s15, [r3]
 8004d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <MPU_calibrateMag+0x1cc>)
 8004d3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3308      	adds	r3, #8
 8004d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d46:	edc3 7a00 	vstr	s15, [r3]
}
 8004d4a:	bf00      	nop
 8004d4c:	3738      	adds	r7, #56	; 0x38
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	0801d8b8 	.word	0x0801d8b8
 8004d58:	0801d8c0 	.word	0x0801d8c0
 8004d5c:	20002fe0 	.word	0x20002fe0
 8004d60:	20003008 	.word	0x20003008

08004d64 <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b0b2      	sub	sp, #200	; 0xc8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8004d6e:	edc7 0a08 	vstr	s1, [r7, #32]
 8004d72:	ed87 1a07 	vstr	s2, [r7, #28]
 8004d76:	edc7 1a06 	vstr	s3, [r7, #24]
 8004d7a:	ed87 2a05 	vstr	s4, [r7, #20]
 8004d7e:	edc7 2a04 	vstr	s5, [r7, #16]
 8004d82:	ed87 3a03 	vstr	s6, [r7, #12]
 8004d86:	edc7 3a02 	vstr	s7, [r7, #8]
 8004d8a:	ed87 4a01 	vstr	s8, [r7, #4]
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8004d8e:	4b7a      	ldr	r3, [pc, #488]	; (8004f78 <MadgwickQuaternionUpdate+0x214>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d96:	4b78      	ldr	r3, [pc, #480]	; (8004f78 <MadgwickQuaternionUpdate+0x214>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d9e:	4b76      	ldr	r3, [pc, #472]	; (8004f78 <MadgwickQuaternionUpdate+0x214>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004da6:	4b74      	ldr	r3, [pc, #464]	; (8004f78 <MadgwickQuaternionUpdate+0x214>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 8004dae:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004db2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004db6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	float _2q2 = 2.0f * q2;
 8004dba:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004dbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004dc2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float _2q3 = 2.0f * q3;
 8004dc6:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004dca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004dce:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float _2q4 = 2.0f * q4;
 8004dd2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004dd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004dda:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	float _2q1q3 = 2.0f * q1 * q3;
 8004dde:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004de2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004de6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dee:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	float _2q3q4 = 2.0f * q3 * q4;
 8004df2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004df6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004dfa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	float q1q1 = q1 * q1;
 8004e06:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004e0a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float q1q2 = q1 * q2;
 8004e16:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004e1a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e22:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float q1q3 = q1 * q3;
 8004e26:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004e2a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e32:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float q1q4 = q1 * q4;
 8004e36:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004e3a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e42:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float q2q2 = q2 * q2;
 8004e46:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004e4a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e52:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float q2q3 = q2 * q3;
 8004e56:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004e5a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float q2q4 = q2 * q4;
 8004e66:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004e6a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e72:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float q3q3 = q3 * q3;
 8004e76:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004e7a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float q3q4 = q3 * q4;
 8004e86:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004e8a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q4q4 = q4 * q4;
 8004e96:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004e9a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8004ea6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004eaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004eb2:	edd7 6a08 	vldr	s13, [r7, #32]
 8004eb6:	edd7 7a08 	vldr	s15, [r7, #32]
 8004eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec6:	edd7 7a07 	vldr	s15, [r7, #28]
 8004eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed6:	f015 ff7d 	bl	801add4 <sqrtf>
 8004eda:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 8004ede:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004ee2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eea:	f000 85cc 	beq.w	8005a86 <MadgwickQuaternionUpdate+0xd22>
	norm = 1.0f/norm;
 8004eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef2:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efa:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	ax *= norm;
 8004efe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004f02:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ay *= norm;
 8004f0e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004f12:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1a:	edc7 7a08 	vstr	s15, [r7, #32]
	az *= norm;
 8004f1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f22:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2a:	edc7 7a07 	vstr	s15, [r7, #28]

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 8004f2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f32:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f3a:	edd7 6a02 	vldr	s13, [r7, #8]
 8004f3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f4a:	edd7 6a01 	vldr	s13, [r7, #4]
 8004f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f5e:	f015 ff39 	bl	801add4 <sqrtf>
 8004f62:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 8004f66:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004f6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f72:	f000 858a 	beq.w	8005a8a <MadgwickQuaternionUpdate+0xd26>
 8004f76:	e001      	b.n	8004f7c <MadgwickQuaternionUpdate+0x218>
 8004f78:	20002ff4 	.word	0x20002ff4
	norm = 1.0f/norm;
 8004f7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f80:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f88:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	mx *= norm;
 8004f8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f90:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f98:	edc7 7a03 	vstr	s15, [r7, #12]
	my *= norm;
 8004f9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004fa0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa8:	edc7 7a02 	vstr	s15, [r7, #8]
	mz *= norm;
 8004fac:	ed97 7a01 	vldr	s14, [r7, #4]
 8004fb0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb8:	edc7 7a01 	vstr	s15, [r7, #4]

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8004fbc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004fc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004fc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8004fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fcc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	_2q1my = 2.0f * q1 * my;
 8004fd0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004fd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004fd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8004fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	_2q1mz = 2.0f * q1 * mz;
 8004fe4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004fe8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004fec:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q2mx = 2.0f * q2 * mx;
 8004ff8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004ffc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005000:	ed97 7a03 	vldr	s14, [r7, #12]
 8005004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005008:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 800500c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005010:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005018:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800501c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005024:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005028:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800502c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005034:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005038:	edd7 6a03 	vldr	s13, [r7, #12]
 800503c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005048:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 800504c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005050:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005054:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800505c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005060:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8005064:	edd7 7a01 	vldr	s15, [r7, #4]
 8005068:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800506c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005078:	edd7 6a03 	vldr	s13, [r7, #12]
 800507c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005084:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005088:	edd7 6a03 	vldr	s13, [r7, #12]
 800508c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005098:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 800509c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80050a0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80050a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050a8:	edd7 6a02 	vldr	s13, [r7, #8]
 80050ac:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80050b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050b8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80050bc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80050c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050c8:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80050cc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80050d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050d8:	edd7 6a02 	vldr	s13, [r7, #8]
 80050dc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80050e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050e8:	edd7 6a02 	vldr	s13, [r7, #8]
 80050ec:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80050f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050f8:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80050fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005100:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005104:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800510c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005110:	edd7 6a02 	vldr	s13, [r7, #8]
 8005114:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800511c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005120:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_2bx = sqrtf(hx * hx + hy * hy);
 8005124:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005128:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800512c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005130:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8005134:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800513c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005140:	eeb0 0a67 	vmov.f32	s0, s15
 8005144:	f015 fe46 	bl	801add4 <sqrtf>
 8005148:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 800514c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005150:	eeb1 7a67 	vneg.f32	s14, s15
 8005154:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800515c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8005160:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800516c:	edd7 6a01 	vldr	s13, [r7, #4]
 8005170:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800517c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8005180:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800518c:	edd7 6a01 	vldr	s13, [r7, #4]
 8005190:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005198:	ee37 7a67 	vsub.f32	s14, s14, s15
 800519c:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80051a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80051a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80051a8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80051ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051b4:	edd7 6a01 	vldr	s13, [r7, #4]
 80051b8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80051bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051c4:	edd7 6a01 	vldr	s13, [r7, #4]
 80051c8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80051cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051d4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4bx = 2.0f * _2bx;
 80051d8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80051dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051e0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_4bz = 2.0f * _2bz;
 80051e4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80051e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051ec:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80051f0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80051f4:	eeb1 7a67 	vneg.f32	s14, s15
 80051f8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80051fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005200:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005204:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005208:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800520c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005214:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005218:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800521c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005220:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005224:	edd7 7a08 	vldr	s15, [r7, #32]
 8005228:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800522c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005238:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800523c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005240:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005244:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005248:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800524c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005250:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005254:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005258:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800525c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005260:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8005264:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005268:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800526c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005270:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005274:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005278:	edd7 7a03 	vldr	s15, [r7, #12]
 800527c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005284:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005288:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800528c:	eef1 6a67 	vneg.f32	s13, s15
 8005290:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005294:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005298:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800529c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80052a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80052a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80052a8:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80052ac:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80052b0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80052b4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80052b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80052bc:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80052c0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80052c4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80052c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80052cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80052d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80052d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80052d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80052dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052e4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80052e8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80052ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052f0:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80052f4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80052f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80052fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005300:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005304:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005308:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800530c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005310:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005314:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005318:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800531c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005320:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005324:	edd7 7a01 	vldr	s15, [r7, #4]
 8005328:	ee76 7a67 	vsub.f32	s15, s12, s15
 800532c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005334:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005338:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800533c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005340:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005344:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005348:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800534c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005350:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005358:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800535c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005360:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005364:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005368:	edd7 7a08 	vldr	s15, [r7, #32]
 800536c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005370:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800537c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005380:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005384:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005388:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800538c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005390:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005394:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005398:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800539c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80053a0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80053a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80053a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80053ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053b4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80053b8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80053bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053c0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80053c4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80053c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80053cc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80053d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80053d4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80053d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80053dc:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80053e0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80053e4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80053e8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80053ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80053f0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80053f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80053f8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80053fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005404:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005408:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800540c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005410:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8005414:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005418:	ee66 7a27 	vmul.f32	s15, s12, s15
 800541c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005420:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8005424:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005428:	ee36 6a67 	vsub.f32	s12, s12, s15
 800542c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005430:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005434:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005438:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800543c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005440:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005444:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005448:	ee36 6a27 	vadd.f32	s12, s12, s15
 800544c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005450:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800545c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005460:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005464:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005468:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 800546c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005470:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005474:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005478:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800547c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005480:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005484:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005488:	ee26 6a27 	vmul.f32	s12, s12, s15
 800548c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005490:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005494:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005498:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800549c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80054a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80054a4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80054a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80054ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80054b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80054b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054bc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80054c0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80054c4:	eeb1 7a67 	vneg.f32	s14, s15
 80054c8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80054cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80054d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80054d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80054d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80054dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80054e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054e4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80054e8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80054ec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80054f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80054f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80054f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80054fc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005504:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005508:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800550c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005510:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005514:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005518:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800551c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005520:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005524:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005528:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800552c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005530:	edd7 7a07 	vldr	s15, [r7, #28]
 8005534:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800553c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005540:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005544:	eef1 6a67 	vneg.f32	s13, s15
 8005548:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800554c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005550:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8005554:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005558:	ee66 7a27 	vmul.f32	s15, s12, s15
 800555c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005560:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005564:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005568:	ee36 6a67 	vsub.f32	s12, s12, s15
 800556c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005570:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005574:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005578:	ee26 6a27 	vmul.f32	s12, s12, s15
 800557c:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8005580:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005584:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005588:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800558c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005590:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005594:	edd7 7a03 	vldr	s15, [r7, #12]
 8005598:	ee76 7a67 	vsub.f32	s15, s12, s15
 800559c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055a4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80055a8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80055ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80055b0:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80055b4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80055b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80055bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80055c0:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80055c4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80055c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80055cc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80055d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80055d4:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80055d8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80055dc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80055e0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80055e4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80055e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80055ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80055f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80055f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055fc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005600:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005604:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005608:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 800560c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005610:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005614:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005618:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800561c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005620:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005624:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005628:	ee26 6a27 	vmul.f32	s12, s12, s15
 800562c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005630:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005634:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005638:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800563c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005640:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005644:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005648:	ee36 6a27 	vadd.f32	s12, s12, s15
 800564c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005650:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800565c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005660:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005664:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005668:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800566c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005670:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005674:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005678:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800567c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005680:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005684:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005688:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800568c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005690:	edd7 7a08 	vldr	s15, [r7, #32]
 8005694:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005698:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800569c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056a4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80056a8:	eef1 6a67 	vneg.f32	s13, s15
 80056ac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80056b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80056b4:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80056b8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80056bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80056c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80056c4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80056c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80056cc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80056d0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80056d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80056d8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80056dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80056e0:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80056e4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056e8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80056ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80056f0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80056f4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80056f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80056fc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005708:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800570c:	eef1 6a67 	vneg.f32	s13, s15
 8005710:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005714:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005718:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800571c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005720:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005724:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005728:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800572c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005730:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005734:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005738:	ee26 6a27 	vmul.f32	s12, s12, s15
 800573c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005740:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005744:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005748:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800574c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005750:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005754:	edd7 7a02 	vldr	s15, [r7, #8]
 8005758:	ee76 7a67 	vsub.f32	s15, s12, s15
 800575c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005764:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005768:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800576c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005770:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8005774:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005778:	ee36 6a27 	vadd.f32	s12, s12, s15
 800577c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005780:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005784:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005788:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800578c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005790:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005794:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005798:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800579c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80057a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80057a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80057a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80057ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 80057b8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80057bc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80057c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057c4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80057c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80057cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057d4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80057d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80057dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057e4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80057e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80057ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057f4:	eeb0 0a67 	vmov.f32	s0, s15
 80057f8:	f015 faec 	bl	801add4 <sqrtf>
 80057fc:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 8005800:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005804:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800580c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	s1 *= norm;
 8005810:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005814:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 *= norm;
 8005820:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005824:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 *= norm;
 8005830:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005834:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 *= norm;
 8005840:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005844:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8005850:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005854:	eeb1 7a67 	vneg.f32	s14, s15
 8005858:	edd7 7a06 	vldr	s15, [r7, #24]
 800585c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005860:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8005864:	edd7 7a05 	vldr	s15, [r7, #20]
 8005868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800586c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005870:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8005874:	edd7 7a04 	vldr	s15, [r7, #16]
 8005878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800587c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005880:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005884:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005888:	4b82      	ldr	r3, [pc, #520]	; (8005a94 <MadgwickQuaternionUpdate+0xd30>)
 800588a:	edd3 6a00 	vldr	s13, [r3]
 800588e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800589a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 800589e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80058a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80058a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058aa:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80058ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80058b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058ba:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80058be:	edd7 7a05 	vldr	s15, [r7, #20]
 80058c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80058ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058d2:	4b70      	ldr	r3, [pc, #448]	; (8005a94 <MadgwickQuaternionUpdate+0xd30>)
 80058d4:	edd3 6a00 	vldr	s13, [r3]
 80058d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80058dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 80058e8:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80058ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80058f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058f4:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 80058f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80058fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005900:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005904:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8005908:	edd7 7a06 	vldr	s15, [r7, #24]
 800590c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005914:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005918:	ee27 7a87 	vmul.f32	s14, s15, s14
 800591c:	4b5d      	ldr	r3, [pc, #372]	; (8005a94 <MadgwickQuaternionUpdate+0xd30>)
 800591e:	edd3 6a00 	vldr	s13, [r3]
 8005922:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800592a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800592e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8005932:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005936:	edd7 7a04 	vldr	s15, [r7, #16]
 800593a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800593e:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8005942:	edd7 7a05 	vldr	s15, [r7, #20]
 8005946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800594a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800594e:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8005952:	edd7 7a06 	vldr	s15, [r7, #24]
 8005956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800595a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800595e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005962:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005966:	4b4b      	ldr	r3, [pc, #300]	; (8005a94 <MadgwickQuaternionUpdate+0xd30>)
 8005968:	edd3 6a00 	vldr	s13, [r3]
 800596c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005978:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
 800597c:	4b46      	ldr	r3, [pc, #280]	; (8005a98 <MadgwickQuaternionUpdate+0xd34>)
 800597e:	ed93 7a00 	vldr	s14, [r3]
 8005982:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800598e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005992:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	q2 += qDot2 * deltat;
 8005996:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <MadgwickQuaternionUpdate+0xd34>)
 8005998:	ed93 7a00 	vldr	s14, [r3]
 800599c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80059a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a4:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80059a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ac:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	q3 += qDot3 * deltat;
 80059b0:	4b39      	ldr	r3, [pc, #228]	; (8005a98 <MadgwickQuaternionUpdate+0xd34>)
 80059b2:	ed93 7a00 	vldr	s14, [r3]
 80059b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80059ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059be:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80059c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059c6:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	q4 += qDot4 * deltat;
 80059ca:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <MadgwickQuaternionUpdate+0xd34>)
 80059cc:	ed93 7a00 	vldr	s14, [r3]
 80059d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80059d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80059dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80059e4:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80059e8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80059ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059f0:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 80059f4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80059f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a00:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8005a04:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a10:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8005a14:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a20:	eeb0 0a67 	vmov.f32	s0, s15
 8005a24:	f015 f9d6 	bl	801add4 <sqrtf>
 8005a28:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 8005a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a30:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a38:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q[0] = q1 * norm;
 8005a3c:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005a40:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <MadgwickQuaternionUpdate+0xd38>)
 8005a4a:	edc3 7a00 	vstr	s15, [r3]
	q[1] = q2 * norm;
 8005a4e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8005a52:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5a:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <MadgwickQuaternionUpdate+0xd38>)
 8005a5c:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] = q3 * norm;
 8005a60:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8005a64:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <MadgwickQuaternionUpdate+0xd38>)
 8005a6e:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] = q4 * norm;
 8005a72:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005a76:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7e:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <MadgwickQuaternionUpdate+0xd38>)
 8005a80:	edc3 7a03 	vstr	s15, [r3, #12]
 8005a84:	e002      	b.n	8005a8c <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 8005a86:	bf00      	nop
 8005a88:	e000      	b.n	8005a8c <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 8005a8a:	bf00      	nop

}
 8005a8c:	37c8      	adds	r7, #200	; 0xc8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20002fa8 	.word	0x20002fa8
 8005a98:	20002fdc 	.word	0x20002fdc
 8005a9c:	20002ff4 	.word	0x20002ff4

08005aa0 <millis>:
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	4a04      	ldr	r2, [pc, #16]	; (8005abc <millis+0x1c>)
 8005aac:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab0:	099b      	lsrs	r3, r3, #6
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	10624dd3 	.word	0x10624dd3

08005ac0 <getTime>:
	rtc_date.Date = dateTime->dayM;
	if (HAL_RTC_SetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN) != HAL_OK) return false;
}

static inline DateTime getTime(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08c      	sub	sp, #48	; 0x30
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8005ac8:	f107 031c 	add.w	r3, r7, #28
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	605a      	str	r2, [r3, #4]
 8005ad2:	609a      	str	r2, [r3, #8]
 8005ad4:	60da      	str	r2, [r3, #12]
 8005ad6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8005adc:	f107 030c 	add.w	r3, r7, #12
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8005ae8:	f00f fdbe 	bl	8015668 <Get_RTC_Instance>
 8005aec:	f107 031c 	add.w	r3, r7, #28
 8005af0:	2200      	movs	r2, #0
 8005af2:	4619      	mov	r1, r3
 8005af4:	f004 f92f 	bl	8009d56 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8005af8:	f00f fdb6 	bl	8015668 <Get_RTC_Instance>
 8005afc:	f107 0318 	add.w	r3, r7, #24
 8005b00:	2200      	movs	r2, #0
 8005b02:	4619      	mov	r1, r3
 8005b04:	f004 f985 	bl	8009e12 <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8005b08:	7efb      	ldrb	r3, [r7, #27]
 8005b0a:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8005b0c:	7e7b      	ldrb	r3, [r7, #25]
 8005b0e:	737b      	strb	r3, [r7, #13]
	//toReturn.dayY = rtc_date.
	toReturn.dayM = rtc_date.Date;
 8005b10:	7ebb      	ldrb	r3, [r7, #26]
 8005b12:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8005b14:	7e3b      	ldrb	r3, [r7, #24]
 8005b16:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8005b18:	7f3b      	ldrb	r3, [r7, #28]
 8005b1a:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8005b1c:	7f7b      	ldrb	r3, [r7, #29]
 8005b1e:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8005b20:	7fbb      	ldrb	r3, [r7, #30]
 8005b22:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8005b24:	f7ff ffbc 	bl	8005aa0 <millis>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <getTime+0x9c>)
 8005b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b30:	099b      	lsrs	r3, r3, #6
 8005b32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	461a      	mov	r2, r3
 8005b44:	f107 030c 	add.w	r3, r7, #12
 8005b48:	cb03      	ldmia	r3!, {r0, r1}
 8005b4a:	6010      	str	r0, [r2, #0]
 8005b4c:	6051      	str	r1, [r2, #4]
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	8113      	strh	r3, [r2, #8]
}
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	3730      	adds	r7, #48	; 0x30
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	10624dd3 	.word	0x10624dd3

08005b60 <log_new>:
#include "motors.h"
#include "sx1278.h"
#include "run.h"

void log_new()
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af02      	add	r7, sp, #8
	DateTime now = getTime();
 8005b66:	1d3b      	adds	r3, r7, #4
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff ffa9 	bl	8005ac0 <getTime>
	sprintf(directoryName, "/%02d%02d%02d%02d", now.hour, now.minute, now.dayM, now.month);
 8005b6e:	7a3b      	ldrb	r3, [r7, #8]
 8005b70:	4619      	mov	r1, r3
 8005b72:	7a7b      	ldrb	r3, [r7, #9]
 8005b74:	4618      	mov	r0, r3
 8005b76:	79bb      	ldrb	r3, [r7, #6]
 8005b78:	797a      	ldrb	r2, [r7, #5]
 8005b7a:	9201      	str	r2, [sp, #4]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	4603      	mov	r3, r0
 8005b80:	460a      	mov	r2, r1
 8005b82:	4955      	ldr	r1, [pc, #340]	; (8005cd8 <log_new+0x178>)
 8005b84:	4855      	ldr	r0, [pc, #340]	; (8005cdc <log_new+0x17c>)
 8005b86:	f011 ffdd 	bl	8017b44 <siprintf>
	sprintf(directoryNameCopy, directoryName);
 8005b8a:	4954      	ldr	r1, [pc, #336]	; (8005cdc <log_new+0x17c>)
 8005b8c:	4854      	ldr	r0, [pc, #336]	; (8005ce0 <log_new+0x180>)
 8005b8e:	f011 ffd9 	bl	8017b44 <siprintf>

	SD_init();
 8005b92:	f7fb fb71 	bl	8001278 <SD_init>
	SD_newDirectory((char*)directoryName);
 8005b96:	4851      	ldr	r0, [pc, #324]	; (8005cdc <log_new+0x17c>)
 8005b98:	f7fb fc0a 	bl	80013b0 <SD_newDirectory>
	SD_newFile(strcat(directoryName, "/LOG.TXT"));
 8005b9c:	484f      	ldr	r0, [pc, #316]	; (8005cdc <log_new+0x17c>)
 8005b9e:	f7fa fb21 	bl	80001e4 <strlen>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4b4d      	ldr	r3, [pc, #308]	; (8005cdc <log_new+0x17c>)
 8005ba8:	4413      	add	r3, r2
 8005baa:	494e      	ldr	r1, [pc, #312]	; (8005ce4 <log_new+0x184>)
 8005bac:	461a      	mov	r2, r3
 8005bae:	460b      	mov	r3, r1
 8005bb0:	cb03      	ldmia	r3!, {r0, r1}
 8005bb2:	6010      	str	r0, [r2, #0]
 8005bb4:	6051      	str	r1, [r2, #4]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	7213      	strb	r3, [r2, #8]
 8005bba:	4b48      	ldr	r3, [pc, #288]	; (8005cdc <log_new+0x17c>)
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fb fb97 	bl	80012f0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005bc2:	4947      	ldr	r1, [pc, #284]	; (8005ce0 <log_new+0x180>)
 8005bc4:	4845      	ldr	r0, [pc, #276]	; (8005cdc <log_new+0x17c>)
 8005bc6:	f011 ffbd 	bl	8017b44 <siprintf>
	SD_newFile(strcat(directoryName, "/BMP.TXT"));
 8005bca:	4844      	ldr	r0, [pc, #272]	; (8005cdc <log_new+0x17c>)
 8005bcc:	f7fa fb0a 	bl	80001e4 <strlen>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	4b41      	ldr	r3, [pc, #260]	; (8005cdc <log_new+0x17c>)
 8005bd6:	4413      	add	r3, r2
 8005bd8:	4943      	ldr	r1, [pc, #268]	; (8005ce8 <log_new+0x188>)
 8005bda:	461a      	mov	r2, r3
 8005bdc:	460b      	mov	r3, r1
 8005bde:	cb03      	ldmia	r3!, {r0, r1}
 8005be0:	6010      	str	r0, [r2, #0]
 8005be2:	6051      	str	r1, [r2, #4]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	7213      	strb	r3, [r2, #8]
 8005be8:	4b3c      	ldr	r3, [pc, #240]	; (8005cdc <log_new+0x17c>)
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fb fb80 	bl	80012f0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005bf0:	493b      	ldr	r1, [pc, #236]	; (8005ce0 <log_new+0x180>)
 8005bf2:	483a      	ldr	r0, [pc, #232]	; (8005cdc <log_new+0x17c>)
 8005bf4:	f011 ffa6 	bl	8017b44 <siprintf>
	SD_newFile(strcat(directoryName, "/GPS.TXT"));
 8005bf8:	4838      	ldr	r0, [pc, #224]	; (8005cdc <log_new+0x17c>)
 8005bfa:	f7fa faf3 	bl	80001e4 <strlen>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	461a      	mov	r2, r3
 8005c02:	4b36      	ldr	r3, [pc, #216]	; (8005cdc <log_new+0x17c>)
 8005c04:	4413      	add	r3, r2
 8005c06:	4939      	ldr	r1, [pc, #228]	; (8005cec <log_new+0x18c>)
 8005c08:	461a      	mov	r2, r3
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	cb03      	ldmia	r3!, {r0, r1}
 8005c0e:	6010      	str	r0, [r2, #0]
 8005c10:	6051      	str	r1, [r2, #4]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	7213      	strb	r3, [r2, #8]
 8005c16:	4b31      	ldr	r3, [pc, #196]	; (8005cdc <log_new+0x17c>)
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fb fb69 	bl	80012f0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005c1e:	4930      	ldr	r1, [pc, #192]	; (8005ce0 <log_new+0x180>)
 8005c20:	482e      	ldr	r0, [pc, #184]	; (8005cdc <log_new+0x17c>)
 8005c22:	f011 ff8f 	bl	8017b44 <siprintf>
	SD_newFile(strcat(directoryName, "/IMU.TXT"));
 8005c26:	482d      	ldr	r0, [pc, #180]	; (8005cdc <log_new+0x17c>)
 8005c28:	f7fa fadc 	bl	80001e4 <strlen>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	461a      	mov	r2, r3
 8005c30:	4b2a      	ldr	r3, [pc, #168]	; (8005cdc <log_new+0x17c>)
 8005c32:	4413      	add	r3, r2
 8005c34:	492e      	ldr	r1, [pc, #184]	; (8005cf0 <log_new+0x190>)
 8005c36:	461a      	mov	r2, r3
 8005c38:	460b      	mov	r3, r1
 8005c3a:	cb03      	ldmia	r3!, {r0, r1}
 8005c3c:	6010      	str	r0, [r2, #0]
 8005c3e:	6051      	str	r1, [r2, #4]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	7213      	strb	r3, [r2, #8]
 8005c44:	4b25      	ldr	r3, [pc, #148]	; (8005cdc <log_new+0x17c>)
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fb fb52 	bl	80012f0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005c4c:	4924      	ldr	r1, [pc, #144]	; (8005ce0 <log_new+0x180>)
 8005c4e:	4823      	ldr	r0, [pc, #140]	; (8005cdc <log_new+0x17c>)
 8005c50:	f011 ff78 	bl	8017b44 <siprintf>
	SD_newFile(strcat(directoryName, "/MOT.TXT"));
 8005c54:	4821      	ldr	r0, [pc, #132]	; (8005cdc <log_new+0x17c>)
 8005c56:	f7fa fac5 	bl	80001e4 <strlen>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4b1f      	ldr	r3, [pc, #124]	; (8005cdc <log_new+0x17c>)
 8005c60:	4413      	add	r3, r2
 8005c62:	4924      	ldr	r1, [pc, #144]	; (8005cf4 <log_new+0x194>)
 8005c64:	461a      	mov	r2, r3
 8005c66:	460b      	mov	r3, r1
 8005c68:	cb03      	ldmia	r3!, {r0, r1}
 8005c6a:	6010      	str	r0, [r2, #0]
 8005c6c:	6051      	str	r1, [r2, #4]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	7213      	strb	r3, [r2, #8]
 8005c72:	4b1a      	ldr	r3, [pc, #104]	; (8005cdc <log_new+0x17c>)
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fb fb3b 	bl	80012f0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005c7a:	4919      	ldr	r1, [pc, #100]	; (8005ce0 <log_new+0x180>)
 8005c7c:	4817      	ldr	r0, [pc, #92]	; (8005cdc <log_new+0x17c>)
 8005c7e:	f011 ff61 	bl	8017b44 <siprintf>
	SD_newFile(strcat(directoryName, "/RADIO.TXT"));
 8005c82:	4816      	ldr	r0, [pc, #88]	; (8005cdc <log_new+0x17c>)
 8005c84:	f7fa faae 	bl	80001e4 <strlen>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <log_new+0x17c>)
 8005c8e:	4413      	add	r3, r2
 8005c90:	4919      	ldr	r1, [pc, #100]	; (8005cf8 <log_new+0x198>)
 8005c92:	461a      	mov	r2, r3
 8005c94:	460b      	mov	r3, r1
 8005c96:	cb03      	ldmia	r3!, {r0, r1}
 8005c98:	6010      	str	r0, [r2, #0]
 8005c9a:	6051      	str	r1, [r2, #4]
 8005c9c:	8819      	ldrh	r1, [r3, #0]
 8005c9e:	789b      	ldrb	r3, [r3, #2]
 8005ca0:	8111      	strh	r1, [r2, #8]
 8005ca2:	7293      	strb	r3, [r2, #10]
 8005ca4:	4b0d      	ldr	r3, [pc, #52]	; (8005cdc <log_new+0x17c>)
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fb fb22 	bl	80012f0 <SD_newFile>

	logBufferIndex = 0;
 8005cac:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <log_new+0x19c>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 8005cb2:	4b13      	ldr	r3, [pc, #76]	; (8005d00 <log_new+0x1a0>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 8005cb8:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <log_new+0x1a4>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 8005cbe:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <log_new+0x1a8>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 8005cc4:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <log_new+0x1ac>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 8005cca:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <log_new+0x1b0>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	801a      	strh	r2, [r3, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	0801d8c8 	.word	0x0801d8c8
 8005cdc:	2000609c 	.word	0x2000609c
 8005ce0:	2000402c 	.word	0x2000402c
 8005ce4:	0801d8dc 	.word	0x0801d8dc
 8005ce8:	0801d8e8 	.word	0x0801d8e8
 8005cec:	0801d8f4 	.word	0x0801d8f4
 8005cf0:	0801d900 	.word	0x0801d900
 8005cf4:	0801d90c 	.word	0x0801d90c
 8005cf8:	0801d918 	.word	0x0801d918
 8005cfc:	200060c0 	.word	0x200060c0
 8005d00:	200060be 	.word	0x200060be
 8005d04:	20004c98 	.word	0x20004c98
 8005d08:	200060c2 	.word	0x200060c2
 8005d0c:	20004894 	.word	0x20004894
 8005d10:	20004870 	.word	0x20004870

08005d14 <log_save>:

void log_save()
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
	//SD_init();

	if (logBufferIndex > 0)
 8005d18:	4b7c      	ldr	r3, [pc, #496]	; (8005f0c <log_save+0x1f8>)
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01b      	beq.n	8005d58 <log_save+0x44>
	{
		sprintf(openedPath, strcat(directoryName, "/LOG.TXT"));
 8005d20:	487b      	ldr	r0, [pc, #492]	; (8005f10 <log_save+0x1fc>)
 8005d22:	f7fa fa5f 	bl	80001e4 <strlen>
 8005d26:	4603      	mov	r3, r0
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4b79      	ldr	r3, [pc, #484]	; (8005f10 <log_save+0x1fc>)
 8005d2c:	4413      	add	r3, r2
 8005d2e:	4979      	ldr	r1, [pc, #484]	; (8005f14 <log_save+0x200>)
 8005d30:	461a      	mov	r2, r3
 8005d32:	460b      	mov	r3, r1
 8005d34:	cb03      	ldmia	r3!, {r0, r1}
 8005d36:	6010      	str	r0, [r2, #0]
 8005d38:	6051      	str	r1, [r2, #4]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	7213      	strb	r3, [r2, #8]
 8005d3e:	4b74      	ldr	r3, [pc, #464]	; (8005f10 <log_save+0x1fc>)
 8005d40:	4619      	mov	r1, r3
 8005d42:	4875      	ldr	r0, [pc, #468]	; (8005f18 <log_save+0x204>)
 8005d44:	f011 fefe 	bl	8017b44 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005d48:	4974      	ldr	r1, [pc, #464]	; (8005f1c <log_save+0x208>)
 8005d4a:	4871      	ldr	r0, [pc, #452]	; (8005f10 <log_save+0x1fc>)
 8005d4c:	f011 fefa 	bl	8017b44 <siprintf>
		SD_writeToFile(openedPath, logBuffer);
 8005d50:	4973      	ldr	r1, [pc, #460]	; (8005f20 <log_save+0x20c>)
 8005d52:	4871      	ldr	r0, [pc, #452]	; (8005f18 <log_save+0x204>)
 8005d54:	f7fb faf4 	bl	8001340 <SD_writeToFile>
	}
	if (bmpBufferIndex > 0)
 8005d58:	4b72      	ldr	r3, [pc, #456]	; (8005f24 <log_save+0x210>)
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01b      	beq.n	8005d98 <log_save+0x84>
	{
		sprintf(openedPath, strcat(directoryName, "/BMP.TXT"));
 8005d60:	486b      	ldr	r0, [pc, #428]	; (8005f10 <log_save+0x1fc>)
 8005d62:	f7fa fa3f 	bl	80001e4 <strlen>
 8005d66:	4603      	mov	r3, r0
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4b69      	ldr	r3, [pc, #420]	; (8005f10 <log_save+0x1fc>)
 8005d6c:	4413      	add	r3, r2
 8005d6e:	496e      	ldr	r1, [pc, #440]	; (8005f28 <log_save+0x214>)
 8005d70:	461a      	mov	r2, r3
 8005d72:	460b      	mov	r3, r1
 8005d74:	cb03      	ldmia	r3!, {r0, r1}
 8005d76:	6010      	str	r0, [r2, #0]
 8005d78:	6051      	str	r1, [r2, #4]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	7213      	strb	r3, [r2, #8]
 8005d7e:	4b64      	ldr	r3, [pc, #400]	; (8005f10 <log_save+0x1fc>)
 8005d80:	4619      	mov	r1, r3
 8005d82:	4865      	ldr	r0, [pc, #404]	; (8005f18 <log_save+0x204>)
 8005d84:	f011 fede 	bl	8017b44 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005d88:	4964      	ldr	r1, [pc, #400]	; (8005f1c <log_save+0x208>)
 8005d8a:	4861      	ldr	r0, [pc, #388]	; (8005f10 <log_save+0x1fc>)
 8005d8c:	f011 feda 	bl	8017b44 <siprintf>
		SD_writeToFile(openedPath, bmpBuffer);
 8005d90:	4966      	ldr	r1, [pc, #408]	; (8005f2c <log_save+0x218>)
 8005d92:	4861      	ldr	r0, [pc, #388]	; (8005f18 <log_save+0x204>)
 8005d94:	f7fb fad4 	bl	8001340 <SD_writeToFile>
	}
	if (gpsBufferIndex > 0)
 8005d98:	4b65      	ldr	r3, [pc, #404]	; (8005f30 <log_save+0x21c>)
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01b      	beq.n	8005dd8 <log_save+0xc4>
	{
		sprintf(openedPath, strcat(directoryName, "/GPS.TXT"));
 8005da0:	485b      	ldr	r0, [pc, #364]	; (8005f10 <log_save+0x1fc>)
 8005da2:	f7fa fa1f 	bl	80001e4 <strlen>
 8005da6:	4603      	mov	r3, r0
 8005da8:	461a      	mov	r2, r3
 8005daa:	4b59      	ldr	r3, [pc, #356]	; (8005f10 <log_save+0x1fc>)
 8005dac:	4413      	add	r3, r2
 8005dae:	4961      	ldr	r1, [pc, #388]	; (8005f34 <log_save+0x220>)
 8005db0:	461a      	mov	r2, r3
 8005db2:	460b      	mov	r3, r1
 8005db4:	cb03      	ldmia	r3!, {r0, r1}
 8005db6:	6010      	str	r0, [r2, #0]
 8005db8:	6051      	str	r1, [r2, #4]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	7213      	strb	r3, [r2, #8]
 8005dbe:	4b54      	ldr	r3, [pc, #336]	; (8005f10 <log_save+0x1fc>)
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4855      	ldr	r0, [pc, #340]	; (8005f18 <log_save+0x204>)
 8005dc4:	f011 febe 	bl	8017b44 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005dc8:	4954      	ldr	r1, [pc, #336]	; (8005f1c <log_save+0x208>)
 8005dca:	4851      	ldr	r0, [pc, #324]	; (8005f10 <log_save+0x1fc>)
 8005dcc:	f011 feba 	bl	8017b44 <siprintf>
		SD_writeToFile(openedPath, gpsBuffer);
 8005dd0:	4959      	ldr	r1, [pc, #356]	; (8005f38 <log_save+0x224>)
 8005dd2:	4851      	ldr	r0, [pc, #324]	; (8005f18 <log_save+0x204>)
 8005dd4:	f7fb fab4 	bl	8001340 <SD_writeToFile>
	}
	if (imuBufferIndex > 0)
 8005dd8:	4b58      	ldr	r3, [pc, #352]	; (8005f3c <log_save+0x228>)
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01b      	beq.n	8005e18 <log_save+0x104>
	{
		sprintf(openedPath, strcat(directoryName, "/IMU.TXT"));
 8005de0:	484b      	ldr	r0, [pc, #300]	; (8005f10 <log_save+0x1fc>)
 8005de2:	f7fa f9ff 	bl	80001e4 <strlen>
 8005de6:	4603      	mov	r3, r0
 8005de8:	461a      	mov	r2, r3
 8005dea:	4b49      	ldr	r3, [pc, #292]	; (8005f10 <log_save+0x1fc>)
 8005dec:	4413      	add	r3, r2
 8005dee:	4954      	ldr	r1, [pc, #336]	; (8005f40 <log_save+0x22c>)
 8005df0:	461a      	mov	r2, r3
 8005df2:	460b      	mov	r3, r1
 8005df4:	cb03      	ldmia	r3!, {r0, r1}
 8005df6:	6010      	str	r0, [r2, #0]
 8005df8:	6051      	str	r1, [r2, #4]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	7213      	strb	r3, [r2, #8]
 8005dfe:	4b44      	ldr	r3, [pc, #272]	; (8005f10 <log_save+0x1fc>)
 8005e00:	4619      	mov	r1, r3
 8005e02:	4845      	ldr	r0, [pc, #276]	; (8005f18 <log_save+0x204>)
 8005e04:	f011 fe9e 	bl	8017b44 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005e08:	4944      	ldr	r1, [pc, #272]	; (8005f1c <log_save+0x208>)
 8005e0a:	4841      	ldr	r0, [pc, #260]	; (8005f10 <log_save+0x1fc>)
 8005e0c:	f011 fe9a 	bl	8017b44 <siprintf>
		SD_writeToFile(openedPath, imuBuffer);
 8005e10:	494c      	ldr	r1, [pc, #304]	; (8005f44 <log_save+0x230>)
 8005e12:	4841      	ldr	r0, [pc, #260]	; (8005f18 <log_save+0x204>)
 8005e14:	f7fb fa94 	bl	8001340 <SD_writeToFile>
	}
	if (motBufferIndex > 0)
 8005e18:	4b4b      	ldr	r3, [pc, #300]	; (8005f48 <log_save+0x234>)
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01b      	beq.n	8005e58 <log_save+0x144>
	{
		sprintf(openedPath, strcat(directoryName, "/MOT.TXT"));
 8005e20:	483b      	ldr	r0, [pc, #236]	; (8005f10 <log_save+0x1fc>)
 8005e22:	f7fa f9df 	bl	80001e4 <strlen>
 8005e26:	4603      	mov	r3, r0
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4b39      	ldr	r3, [pc, #228]	; (8005f10 <log_save+0x1fc>)
 8005e2c:	4413      	add	r3, r2
 8005e2e:	4947      	ldr	r1, [pc, #284]	; (8005f4c <log_save+0x238>)
 8005e30:	461a      	mov	r2, r3
 8005e32:	460b      	mov	r3, r1
 8005e34:	cb03      	ldmia	r3!, {r0, r1}
 8005e36:	6010      	str	r0, [r2, #0]
 8005e38:	6051      	str	r1, [r2, #4]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	7213      	strb	r3, [r2, #8]
 8005e3e:	4b34      	ldr	r3, [pc, #208]	; (8005f10 <log_save+0x1fc>)
 8005e40:	4619      	mov	r1, r3
 8005e42:	4835      	ldr	r0, [pc, #212]	; (8005f18 <log_save+0x204>)
 8005e44:	f011 fe7e 	bl	8017b44 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005e48:	4934      	ldr	r1, [pc, #208]	; (8005f1c <log_save+0x208>)
 8005e4a:	4831      	ldr	r0, [pc, #196]	; (8005f10 <log_save+0x1fc>)
 8005e4c:	f011 fe7a 	bl	8017b44 <siprintf>
		SD_writeToFile(openedPath, motBuffer);
 8005e50:	493f      	ldr	r1, [pc, #252]	; (8005f50 <log_save+0x23c>)
 8005e52:	4831      	ldr	r0, [pc, #196]	; (8005f18 <log_save+0x204>)
 8005e54:	f7fb fa74 	bl	8001340 <SD_writeToFile>
	}
	if (radioBufferIndex > 0)
 8005e58:	4b3e      	ldr	r3, [pc, #248]	; (8005f54 <log_save+0x240>)
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01d      	beq.n	8005e9c <log_save+0x188>
	{
		sprintf(openedPath, strcat(directoryName, "/RADIO.TXT"));
 8005e60:	482b      	ldr	r0, [pc, #172]	; (8005f10 <log_save+0x1fc>)
 8005e62:	f7fa f9bf 	bl	80001e4 <strlen>
 8005e66:	4603      	mov	r3, r0
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4b29      	ldr	r3, [pc, #164]	; (8005f10 <log_save+0x1fc>)
 8005e6c:	4413      	add	r3, r2
 8005e6e:	493a      	ldr	r1, [pc, #232]	; (8005f58 <log_save+0x244>)
 8005e70:	461a      	mov	r2, r3
 8005e72:	460b      	mov	r3, r1
 8005e74:	cb03      	ldmia	r3!, {r0, r1}
 8005e76:	6010      	str	r0, [r2, #0]
 8005e78:	6051      	str	r1, [r2, #4]
 8005e7a:	8819      	ldrh	r1, [r3, #0]
 8005e7c:	789b      	ldrb	r3, [r3, #2]
 8005e7e:	8111      	strh	r1, [r2, #8]
 8005e80:	7293      	strb	r3, [r2, #10]
 8005e82:	4b23      	ldr	r3, [pc, #140]	; (8005f10 <log_save+0x1fc>)
 8005e84:	4619      	mov	r1, r3
 8005e86:	4824      	ldr	r0, [pc, #144]	; (8005f18 <log_save+0x204>)
 8005e88:	f011 fe5c 	bl	8017b44 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005e8c:	4923      	ldr	r1, [pc, #140]	; (8005f1c <log_save+0x208>)
 8005e8e:	4820      	ldr	r0, [pc, #128]	; (8005f10 <log_save+0x1fc>)
 8005e90:	f011 fe58 	bl	8017b44 <siprintf>
		SD_writeToFile(openedPath, radioBuffer);
 8005e94:	4931      	ldr	r1, [pc, #196]	; (8005f5c <log_save+0x248>)
 8005e96:	4820      	ldr	r0, [pc, #128]	; (8005f18 <log_save+0x204>)
 8005e98:	f7fb fa52 	bl	8001340 <SD_writeToFile>
	}


	logBufferIndex = 0;
 8005e9c:	4b1b      	ldr	r3, [pc, #108]	; (8005f0c <log_save+0x1f8>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 8005ea2:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <log_save+0x210>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 8005ea8:	4b21      	ldr	r3, [pc, #132]	; (8005f30 <log_save+0x21c>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 8005eae:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <log_save+0x228>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 8005eb4:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <log_save+0x234>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 8005eba:	4b26      	ldr	r3, [pc, #152]	; (8005f54 <log_save+0x240>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	801a      	strh	r2, [r3, #0]
	memset(logBuffer, 0x00, 1024);
 8005ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4816      	ldr	r0, [pc, #88]	; (8005f20 <log_save+0x20c>)
 8005ec8:	f010 ff37 	bl	8016d3a <memset>
	memset(bmpBuffer, 0x00, 1024);
 8005ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4816      	ldr	r0, [pc, #88]	; (8005f2c <log_save+0x218>)
 8005ed4:	f010 ff31 	bl	8016d3a <memset>
	memset(gpsBuffer, 0x00, 1024);
 8005ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005edc:	2100      	movs	r1, #0
 8005ede:	4816      	ldr	r0, [pc, #88]	; (8005f38 <log_save+0x224>)
 8005ee0:	f010 ff2b 	bl	8016d3a <memset>
	memset(imuBuffer, 0x00, 1024);
 8005ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ee8:	2100      	movs	r1, #0
 8005eea:	4816      	ldr	r0, [pc, #88]	; (8005f44 <log_save+0x230>)
 8005eec:	f010 ff25 	bl	8016d3a <memset>
	memset(motBuffer, 0x00, 1024);
 8005ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4816      	ldr	r0, [pc, #88]	; (8005f50 <log_save+0x23c>)
 8005ef8:	f010 ff1f 	bl	8016d3a <memset>
	memset(radioBuffer, 0x00, 4096);
 8005efc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f00:	2100      	movs	r1, #0
 8005f02:	4816      	ldr	r0, [pc, #88]	; (8005f5c <log_save+0x248>)
 8005f04:	f010 ff19 	bl	8016d3a <memset>
}
 8005f08:	bf00      	nop
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	200060c0 	.word	0x200060c0
 8005f10:	2000609c 	.word	0x2000609c
 8005f14:	0801d8dc 	.word	0x0801d8dc
 8005f18:	20004450 	.word	0x20004450
 8005f1c:	2000402c 	.word	0x2000402c
 8005f20:	20005c9c 	.word	0x20005c9c
 8005f24:	200060be 	.word	0x200060be
 8005f28:	0801d8e8 	.word	0x0801d8e8
 8005f2c:	200060c4 	.word	0x200060c4
 8005f30:	20004c98 	.word	0x20004c98
 8005f34:	0801d8f4 	.word	0x0801d8f4
 8005f38:	2000404c 	.word	0x2000404c
 8005f3c:	200060c2 	.word	0x200060c2
 8005f40:	0801d900 	.word	0x0801d900
 8005f44:	20004898 	.word	0x20004898
 8005f48:	20004894 	.word	0x20004894
 8005f4c:	0801d90c 	.word	0x0801d90c
 8005f50:	20004470 	.word	0x20004470
 8005f54:	20004870 	.word	0x20004870
 8005f58:	0801d918 	.word	0x0801d918
 8005f5c:	2000302c 	.word	0x2000302c

08005f60 <log_bmp>:
		logBufferIndex = strlen(logBuffer);
	}
}

void log_bmp(BMP280* bmp)
{
 8005f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	6078      	str	r0, [r7, #4]
	if (bmpBufferIndex < 950)
 8005f68:	4b1e      	ldr	r3, [pc, #120]	; (8005fe4 <log_bmp+0x84>)
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d832      	bhi.n	8005fda <log_bmp+0x7a>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8005f74:	f7ff fd94 	bl	8005aa0 <millis>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	491a      	ldr	r1, [pc, #104]	; (8005fe8 <log_bmp+0x88>)
 8005f7e:	481b      	ldr	r0, [pc, #108]	; (8005fec <log_bmp+0x8c>)
 8005f80:	f011 fde0 	bl	8017b44 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f", bmp->pressure, bmp->temperature);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fa faed 	bl	8000568 <__aeabi_f2d>
 8005f8e:	4605      	mov	r5, r0
 8005f90:	460e      	mov	r6, r1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fa fae6 	bl	8000568 <__aeabi_f2d>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	e9cd 3400 	strd	r3, r4, [sp]
 8005fa4:	462a      	mov	r2, r5
 8005fa6:	4633      	mov	r3, r6
 8005fa8:	4911      	ldr	r1, [pc, #68]	; (8005ff0 <log_bmp+0x90>)
 8005faa:	4812      	ldr	r0, [pc, #72]	; (8005ff4 <log_bmp+0x94>)
 8005fac:	f011 fdca 	bl	8017b44 <siprintf>
		strcat(tempBuffer, timestamp);
 8005fb0:	490e      	ldr	r1, [pc, #56]	; (8005fec <log_bmp+0x8c>)
 8005fb2:	4810      	ldr	r0, [pc, #64]	; (8005ff4 <log_bmp+0x94>)
 8005fb4:	f011 fde6 	bl	8017b84 <strcat>
		strcat(bmpBuffer, tempBuffer);
 8005fb8:	490e      	ldr	r1, [pc, #56]	; (8005ff4 <log_bmp+0x94>)
 8005fba:	480f      	ldr	r0, [pc, #60]	; (8005ff8 <log_bmp+0x98>)
 8005fbc:	f011 fde2 	bl	8017b84 <strcat>
		bmpBufferIndex = strlen(bmpBuffer);
 8005fc0:	480d      	ldr	r0, [pc, #52]	; (8005ff8 <log_bmp+0x98>)
 8005fc2:	f7fa f90f 	bl	80001e4 <strlen>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <log_bmp+0x84>)
 8005fcc:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8005fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4807      	ldr	r0, [pc, #28]	; (8005ff4 <log_bmp+0x94>)
 8005fd6:	f010 feb0 	bl	8016d3a <memset>
	}
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200060be 	.word	0x200060be
 8005fe8:	0801d924 	.word	0x0801d924
 8005fec:	20004874 	.word	0x20004874
 8005ff0:	0801d92c 	.word	0x0801d92c
 8005ff4:	20004c9c 	.word	0x20004c9c
 8005ff8:	200060c4 	.word	0x200060c4

08005ffc <log_gps>:
void log_gps(GPS* gps)
{
 8005ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af02      	add	r7, sp, #8
 8006002:	6078      	str	r0, [r7, #4]
	if (gpsBufferIndex < 950)
 8006004:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <log_gps+0x84>)
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	f240 32b5 	movw	r2, #949	; 0x3b5
 800600c:	4293      	cmp	r3, r2
 800600e:	d832      	bhi.n	8006076 <log_gps+0x7a>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8006010:	f7ff fd46 	bl	8005aa0 <millis>
 8006014:	4603      	mov	r3, r0
 8006016:	461a      	mov	r2, r3
 8006018:	491a      	ldr	r1, [pc, #104]	; (8006084 <log_gps+0x88>)
 800601a:	481b      	ldr	r0, [pc, #108]	; (8006088 <log_gps+0x8c>)
 800601c:	f011 fd92 	bl	8017b44 <siprintf>
		sprintf(tempBuffer, "%.07f %.07f", gps->latitudeDegrees, gps->longitudeDegrees);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006024:	4618      	mov	r0, r3
 8006026:	f7fa fa9f 	bl	8000568 <__aeabi_f2d>
 800602a:	4605      	mov	r5, r0
 800602c:	460e      	mov	r6, r1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006032:	4618      	mov	r0, r3
 8006034:	f7fa fa98 	bl	8000568 <__aeabi_f2d>
 8006038:	4603      	mov	r3, r0
 800603a:	460c      	mov	r4, r1
 800603c:	e9cd 3400 	strd	r3, r4, [sp]
 8006040:	462a      	mov	r2, r5
 8006042:	4633      	mov	r3, r6
 8006044:	4911      	ldr	r1, [pc, #68]	; (800608c <log_gps+0x90>)
 8006046:	4812      	ldr	r0, [pc, #72]	; (8006090 <log_gps+0x94>)
 8006048:	f011 fd7c 	bl	8017b44 <siprintf>
		strcat(tempBuffer, timestamp);
 800604c:	490e      	ldr	r1, [pc, #56]	; (8006088 <log_gps+0x8c>)
 800604e:	4810      	ldr	r0, [pc, #64]	; (8006090 <log_gps+0x94>)
 8006050:	f011 fd98 	bl	8017b84 <strcat>
		strcat(gpsBuffer, tempBuffer);
 8006054:	490e      	ldr	r1, [pc, #56]	; (8006090 <log_gps+0x94>)
 8006056:	480f      	ldr	r0, [pc, #60]	; (8006094 <log_gps+0x98>)
 8006058:	f011 fd94 	bl	8017b84 <strcat>
		gpsBufferIndex = strlen(gpsBuffer);
 800605c:	480d      	ldr	r0, [pc, #52]	; (8006094 <log_gps+0x98>)
 800605e:	f7fa f8c1 	bl	80001e4 <strlen>
 8006062:	4603      	mov	r3, r0
 8006064:	b29a      	uxth	r2, r3
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <log_gps+0x84>)
 8006068:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 800606a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800606e:	2100      	movs	r1, #0
 8006070:	4807      	ldr	r0, [pc, #28]	; (8006090 <log_gps+0x94>)
 8006072:	f010 fe62 	bl	8016d3a <memset>
	}
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800607e:	bf00      	nop
 8006080:	20004c98 	.word	0x20004c98
 8006084:	0801d924 	.word	0x0801d924
 8006088:	20004874 	.word	0x20004874
 800608c:	0801d938 	.word	0x0801d938
 8006090:	20004c9c 	.word	0x20004c9c
 8006094:	2000404c 	.word	0x2000404c

08006098 <log_imu>:
void log_imu(float* eulers)
{
 8006098:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800609c:	b086      	sub	sp, #24
 800609e:	af04      	add	r7, sp, #16
 80060a0:	6078      	str	r0, [r7, #4]
	if (imuBufferIndex < 950)
 80060a2:	4b24      	ldr	r3, [pc, #144]	; (8006134 <log_imu+0x9c>)
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d83d      	bhi.n	800612a <log_imu+0x92>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 80060ae:	f7ff fcf7 	bl	8005aa0 <millis>
 80060b2:	4603      	mov	r3, r0
 80060b4:	461a      	mov	r2, r3
 80060b6:	4920      	ldr	r1, [pc, #128]	; (8006138 <log_imu+0xa0>)
 80060b8:	4820      	ldr	r0, [pc, #128]	; (800613c <log_imu+0xa4>)
 80060ba:	f011 fd43 	bl	8017b44 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f %.02f", eulers[0], eulers[1], eulers[2]);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fa fa50 	bl	8000568 <__aeabi_f2d>
 80060c8:	4680      	mov	r8, r0
 80060ca:	4689      	mov	r9, r1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3304      	adds	r3, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fa fa48 	bl	8000568 <__aeabi_f2d>
 80060d8:	4604      	mov	r4, r0
 80060da:	460d      	mov	r5, r1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3308      	adds	r3, #8
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fa fa40 	bl	8000568 <__aeabi_f2d>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060f0:	e9cd 4500 	strd	r4, r5, [sp]
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	4911      	ldr	r1, [pc, #68]	; (8006140 <log_imu+0xa8>)
 80060fa:	4812      	ldr	r0, [pc, #72]	; (8006144 <log_imu+0xac>)
 80060fc:	f011 fd22 	bl	8017b44 <siprintf>
		strcat(tempBuffer, timestamp);
 8006100:	490e      	ldr	r1, [pc, #56]	; (800613c <log_imu+0xa4>)
 8006102:	4810      	ldr	r0, [pc, #64]	; (8006144 <log_imu+0xac>)
 8006104:	f011 fd3e 	bl	8017b84 <strcat>
		strcat(imuBuffer, tempBuffer);
 8006108:	490e      	ldr	r1, [pc, #56]	; (8006144 <log_imu+0xac>)
 800610a:	480f      	ldr	r0, [pc, #60]	; (8006148 <log_imu+0xb0>)
 800610c:	f011 fd3a 	bl	8017b84 <strcat>
		imuBufferIndex = strlen(imuBuffer);
 8006110:	480d      	ldr	r0, [pc, #52]	; (8006148 <log_imu+0xb0>)
 8006112:	f7fa f867 	bl	80001e4 <strlen>
 8006116:	4603      	mov	r3, r0
 8006118:	b29a      	uxth	r2, r3
 800611a:	4b06      	ldr	r3, [pc, #24]	; (8006134 <log_imu+0x9c>)
 800611c:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 800611e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006122:	2100      	movs	r1, #0
 8006124:	4807      	ldr	r0, [pc, #28]	; (8006144 <log_imu+0xac>)
 8006126:	f010 fe08 	bl	8016d3a <memset>
	}
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006134:	200060c2 	.word	0x200060c2
 8006138:	0801d924 	.word	0x0801d924
 800613c:	20004874 	.word	0x20004874
 8006140:	0801d944 	.word	0x0801d944
 8006144:	20004c9c 	.word	0x20004c9c
 8006148:	20004898 	.word	0x20004898

0800614c <log_radio>:

		memset(tempBuffer, 0x00, 1024);
	}
}
void log_radio(SX1278* radio, bool transmit)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
	if (radioBufferIndex < 3700)
 8006158:	4b22      	ldr	r3, [pc, #136]	; (80061e4 <log_radio+0x98>)
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	f640 6273 	movw	r2, #3699	; 0xe73
 8006160:	4293      	cmp	r3, r2
 8006162:	d83a      	bhi.n	80061da <log_radio+0x8e>
	{
		sprintf(timestamp, "]\t@%lu\r\n", millis());
 8006164:	f7ff fc9c 	bl	8005aa0 <millis>
 8006168:	4603      	mov	r3, r0
 800616a:	461a      	mov	r2, r3
 800616c:	491e      	ldr	r1, [pc, #120]	; (80061e8 <log_radio+0x9c>)
 800616e:	481f      	ldr	r0, [pc, #124]	; (80061ec <log_radio+0xa0>)
 8006170:	f011 fce8 	bl	8017b44 <siprintf>

		if (transmit)
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <log_radio+0x4a>
		{
			sprintf(tempBuffer, "TX\t[");
 800617a:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <log_radio+0xa4>)
 800617c:	4a1d      	ldr	r2, [pc, #116]	; (80061f4 <log_radio+0xa8>)
 800617e:	6810      	ldr	r0, [r2, #0]
 8006180:	6018      	str	r0, [r3, #0]
 8006182:	7912      	ldrb	r2, [r2, #4]
 8006184:	711a      	strb	r2, [r3, #4]
			strcat(tempBuffer, radio->txBuffer);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800618c:	4619      	mov	r1, r3
 800618e:	4818      	ldr	r0, [pc, #96]	; (80061f0 <log_radio+0xa4>)
 8006190:	f011 fcf8 	bl	8017b84 <strcat>
 8006194:	e00c      	b.n	80061b0 <log_radio+0x64>
		}
		else
		{
			sprintf(tempBuffer, "RX\t%d\t[", radio->rssi);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619a:	461a      	mov	r2, r3
 800619c:	4916      	ldr	r1, [pc, #88]	; (80061f8 <log_radio+0xac>)
 800619e:	4814      	ldr	r0, [pc, #80]	; (80061f0 <log_radio+0xa4>)
 80061a0:	f011 fcd0 	bl	8017b44 <siprintf>
			strcat(tempBuffer, radio->rxBuffer);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3344      	adds	r3, #68	; 0x44
 80061a8:	4619      	mov	r1, r3
 80061aa:	4811      	ldr	r0, [pc, #68]	; (80061f0 <log_radio+0xa4>)
 80061ac:	f011 fcea 	bl	8017b84 <strcat>
		}

		strcat(tempBuffer, timestamp);
 80061b0:	490e      	ldr	r1, [pc, #56]	; (80061ec <log_radio+0xa0>)
 80061b2:	480f      	ldr	r0, [pc, #60]	; (80061f0 <log_radio+0xa4>)
 80061b4:	f011 fce6 	bl	8017b84 <strcat>
		strcat(radioBuffer, tempBuffer);
 80061b8:	490d      	ldr	r1, [pc, #52]	; (80061f0 <log_radio+0xa4>)
 80061ba:	4810      	ldr	r0, [pc, #64]	; (80061fc <log_radio+0xb0>)
 80061bc:	f011 fce2 	bl	8017b84 <strcat>
		radioBufferIndex = strlen(radioBuffer);
 80061c0:	480e      	ldr	r0, [pc, #56]	; (80061fc <log_radio+0xb0>)
 80061c2:	f7fa f80f 	bl	80001e4 <strlen>
 80061c6:	4603      	mov	r3, r0
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <log_radio+0x98>)
 80061cc:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 80061ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061d2:	2100      	movs	r1, #0
 80061d4:	4806      	ldr	r0, [pc, #24]	; (80061f0 <log_radio+0xa4>)
 80061d6:	f010 fdb0 	bl	8016d3a <memset>
	}
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20004870 	.word	0x20004870
 80061e8:	0801d964 	.word	0x0801d964
 80061ec:	20004874 	.word	0x20004874
 80061f0:	20004c9c 	.word	0x20004c9c
 80061f4:	0801d970 	.word	0x0801d970
 80061f8:	0801d978 	.word	0x0801d978
 80061fc:	2000302c 	.word	0x2000302c

08006200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006204:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <HAL_Init+0x40>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a0d      	ldr	r2, [pc, #52]	; (8006240 <HAL_Init+0x40>)
 800620a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800620e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <HAL_Init+0x40>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a0a      	ldr	r2, [pc, #40]	; (8006240 <HAL_Init+0x40>)
 8006216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800621a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800621c:	4b08      	ldr	r3, [pc, #32]	; (8006240 <HAL_Init+0x40>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a07      	ldr	r2, [pc, #28]	; (8006240 <HAL_Init+0x40>)
 8006222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006228:	2003      	movs	r0, #3
 800622a:	f000 f94d 	bl	80064c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800622e:	2000      	movs	r0, #0
 8006230:	f000 f808 	bl	8006244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006234:	f00f fc62 	bl	8015afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40023c00 	.word	0x40023c00

08006244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800624c:	4b12      	ldr	r3, [pc, #72]	; (8006298 <HAL_InitTick+0x54>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b12      	ldr	r3, [pc, #72]	; (800629c <HAL_InitTick+0x58>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	4619      	mov	r1, r3
 8006256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800625a:	fbb3 f3f1 	udiv	r3, r3, r1
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f965 	bl	8006532 <HAL_SYSTICK_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e00e      	b.n	8006290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b0f      	cmp	r3, #15
 8006276:	d80a      	bhi.n	800628e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006278:	2200      	movs	r2, #0
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	f000 f92d 	bl	80064de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006284:	4a06      	ldr	r2, [pc, #24]	; (80062a0 <HAL_InitTick+0x5c>)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e000      	b.n	8006290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20000134 	.word	0x20000134
 800629c:	20000008 	.word	0x20000008
 80062a0:	20000004 	.word	0x20000004

080062a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062a8:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <HAL_IncTick+0x20>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <HAL_IncTick+0x24>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4413      	add	r3, r2
 80062b4:	4a04      	ldr	r2, [pc, #16]	; (80062c8 <HAL_IncTick+0x24>)
 80062b6:	6013      	str	r3, [r2, #0]
}
 80062b8:	bf00      	nop
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20000008 	.word	0x20000008
 80062c8:	20006534 	.word	0x20006534

080062cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  return uwTick;
 80062d0:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <HAL_GetTick+0x14>)
 80062d2:	681b      	ldr	r3, [r3, #0]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20006534 	.word	0x20006534

080062e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062ec:	f7ff ffee 	bl	80062cc <HAL_GetTick>
 80062f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fc:	d005      	beq.n	800630a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062fe:	4b09      	ldr	r3, [pc, #36]	; (8006324 <HAL_Delay+0x40>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800630a:	bf00      	nop
 800630c:	f7ff ffde 	bl	80062cc <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	429a      	cmp	r2, r3
 800631a:	d8f7      	bhi.n	800630c <HAL_Delay+0x28>
  {
  }
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20000008 	.word	0x20000008

08006328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006338:	4b0c      	ldr	r3, [pc, #48]	; (800636c <__NVIC_SetPriorityGrouping+0x44>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006344:	4013      	ands	r3, r2
 8006346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800635a:	4a04      	ldr	r2, [pc, #16]	; (800636c <__NVIC_SetPriorityGrouping+0x44>)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	60d3      	str	r3, [r2, #12]
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	e000ed00 	.word	0xe000ed00

08006370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006374:	4b04      	ldr	r3, [pc, #16]	; (8006388 <__NVIC_GetPriorityGrouping+0x18>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	0a1b      	lsrs	r3, r3, #8
 800637a:	f003 0307 	and.w	r3, r3, #7
}
 800637e:	4618      	mov	r0, r3
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	e000ed00 	.word	0xe000ed00

0800638c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639a:	2b00      	cmp	r3, #0
 800639c:	db0b      	blt.n	80063b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	f003 021f 	and.w	r2, r3, #31
 80063a4:	4907      	ldr	r1, [pc, #28]	; (80063c4 <__NVIC_EnableIRQ+0x38>)
 80063a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	2001      	movs	r0, #1
 80063ae:	fa00 f202 	lsl.w	r2, r0, r2
 80063b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	e000e100 	.word	0xe000e100

080063c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	4603      	mov	r3, r0
 80063d0:	6039      	str	r1, [r7, #0]
 80063d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	db0a      	blt.n	80063f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	490c      	ldr	r1, [pc, #48]	; (8006414 <__NVIC_SetPriority+0x4c>)
 80063e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e6:	0112      	lsls	r2, r2, #4
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	440b      	add	r3, r1
 80063ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063f0:	e00a      	b.n	8006408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	4908      	ldr	r1, [pc, #32]	; (8006418 <__NVIC_SetPriority+0x50>)
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	3b04      	subs	r3, #4
 8006400:	0112      	lsls	r2, r2, #4
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	440b      	add	r3, r1
 8006406:	761a      	strb	r2, [r3, #24]
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	e000e100 	.word	0xe000e100
 8006418:	e000ed00 	.word	0xe000ed00

0800641c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800641c:	b480      	push	{r7}
 800641e:	b089      	sub	sp, #36	; 0x24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f1c3 0307 	rsb	r3, r3, #7
 8006436:	2b04      	cmp	r3, #4
 8006438:	bf28      	it	cs
 800643a:	2304      	movcs	r3, #4
 800643c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3304      	adds	r3, #4
 8006442:	2b06      	cmp	r3, #6
 8006444:	d902      	bls.n	800644c <NVIC_EncodePriority+0x30>
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	3b03      	subs	r3, #3
 800644a:	e000      	b.n	800644e <NVIC_EncodePriority+0x32>
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006450:	f04f 32ff 	mov.w	r2, #4294967295
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	43da      	mvns	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	401a      	ands	r2, r3
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006464:	f04f 31ff 	mov.w	r1, #4294967295
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	fa01 f303 	lsl.w	r3, r1, r3
 800646e:	43d9      	mvns	r1, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006474:	4313      	orrs	r3, r2
         );
}
 8006476:	4618      	mov	r0, r3
 8006478:	3724      	adds	r7, #36	; 0x24
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3b01      	subs	r3, #1
 8006490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006494:	d301      	bcc.n	800649a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006496:	2301      	movs	r3, #1
 8006498:	e00f      	b.n	80064ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800649a:	4a0a      	ldr	r2, [pc, #40]	; (80064c4 <SysTick_Config+0x40>)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3b01      	subs	r3, #1
 80064a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064a2:	210f      	movs	r1, #15
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295
 80064a8:	f7ff ff8e 	bl	80063c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <SysTick_Config+0x40>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064b2:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <SysTick_Config+0x40>)
 80064b4:	2207      	movs	r2, #7
 80064b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	e000e010 	.word	0xe000e010

080064c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff ff29 	bl	8006328 <__NVIC_SetPriorityGrouping>
}
 80064d6:	bf00      	nop
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064de:	b580      	push	{r7, lr}
 80064e0:	b086      	sub	sp, #24
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	4603      	mov	r3, r0
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064f0:	f7ff ff3e 	bl	8006370 <__NVIC_GetPriorityGrouping>
 80064f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	6978      	ldr	r0, [r7, #20]
 80064fc:	f7ff ff8e 	bl	800641c <NVIC_EncodePriority>
 8006500:	4602      	mov	r2, r0
 8006502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006506:	4611      	mov	r1, r2
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff ff5d 	bl	80063c8 <__NVIC_SetPriority>
}
 800650e:	bf00      	nop
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	4603      	mov	r3, r0
 800651e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff ff31 	bl	800638c <__NVIC_EnableIRQ>
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff ffa2 	bl	8006484 <SysTick_Config>
 8006540:	4603      	mov	r3, r0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006558:	f7ff feb8 	bl	80062cc <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e099      	b.n	800669c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006588:	e00f      	b.n	80065aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800658a:	f7ff fe9f 	bl	80062cc <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b05      	cmp	r3, #5
 8006596:	d908      	bls.n	80065aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2203      	movs	r2, #3
 80065a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e078      	b.n	800669c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e8      	bne.n	800658a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	4b38      	ldr	r3, [pc, #224]	; (80066a4 <HAL_DMA_Init+0x158>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	2b04      	cmp	r3, #4
 8006602:	d107      	bne.n	8006614 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	4313      	orrs	r3, r2
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f023 0307 	bic.w	r3, r3, #7
 800662a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	2b04      	cmp	r3, #4
 800663c:	d117      	bne.n	800666e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	4313      	orrs	r3, r2
 8006646:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00e      	beq.n	800666e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fa99 	bl	8006b88 <DMA_CheckFifoParam>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d008      	beq.n	800666e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2240      	movs	r2, #64	; 0x40
 8006660:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800666a:	2301      	movs	r3, #1
 800666c:	e016      	b.n	800669c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa50 	bl	8006b1c <DMA_CalcBaseAndBitshift>
 800667c:	4603      	mov	r3, r0
 800667e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006684:	223f      	movs	r2, #63	; 0x3f
 8006686:	409a      	lsls	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	f010803f 	.word	0xf010803f

080066a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_DMA_Start_IT+0x26>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e048      	b.n	8006760 <HAL_DMA_Start_IT+0xb8>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d137      	bne.n	8006752 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2202      	movs	r2, #2
 80066e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f9e2 	bl	8006ac0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006700:	223f      	movs	r2, #63	; 0x3f
 8006702:	409a      	lsls	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0216 	orr.w	r2, r2, #22
 8006716:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695a      	ldr	r2, [r3, #20]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006726:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0208 	orr.w	r2, r2, #8
 800673e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	e005      	b.n	800675e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800675a:	2302      	movs	r3, #2
 800675c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800675e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d004      	beq.n	8006786 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2280      	movs	r2, #128	; 0x80
 8006780:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e00c      	b.n	80067a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2205      	movs	r2, #5
 800678a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067b8:	4b92      	ldr	r3, [pc, #584]	; (8006a04 <HAL_DMA_IRQHandler+0x258>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a92      	ldr	r2, [pc, #584]	; (8006a08 <HAL_DMA_IRQHandler+0x25c>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	0a9b      	lsrs	r3, r3, #10
 80067c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d6:	2208      	movs	r2, #8
 80067d8:	409a      	lsls	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4013      	ands	r3, r2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d01a      	beq.n	8006818 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d013      	beq.n	8006818 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0204 	bic.w	r2, r2, #4
 80067fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006804:	2208      	movs	r2, #8
 8006806:	409a      	lsls	r2, r3
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006810:	f043 0201 	orr.w	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681c:	2201      	movs	r2, #1
 800681e:	409a      	lsls	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4013      	ands	r3, r2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d012      	beq.n	800684e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683a:	2201      	movs	r2, #1
 800683c:	409a      	lsls	r2, r3
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006846:	f043 0202 	orr.w	r2, r3, #2
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006852:	2204      	movs	r2, #4
 8006854:	409a      	lsls	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4013      	ands	r3, r2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d012      	beq.n	8006884 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00b      	beq.n	8006884 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006870:	2204      	movs	r2, #4
 8006872:	409a      	lsls	r2, r3
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687c:	f043 0204 	orr.w	r2, r3, #4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006888:	2210      	movs	r2, #16
 800688a:	409a      	lsls	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4013      	ands	r3, r2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d043      	beq.n	800691c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d03c      	beq.n	800691c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a6:	2210      	movs	r2, #16
 80068a8:	409a      	lsls	r2, r3
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d018      	beq.n	80068ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d108      	bne.n	80068dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d024      	beq.n	800691c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
 80068da:	e01f      	b.n	800691c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01b      	beq.n	800691c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
 80068ec:	e016      	b.n	800691c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d107      	bne.n	800690c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0208 	bic.w	r2, r2, #8
 800690a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006920:	2220      	movs	r2, #32
 8006922:	409a      	lsls	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4013      	ands	r3, r2
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 808e 	beq.w	8006a4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8086 	beq.w	8006a4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006942:	2220      	movs	r2, #32
 8006944:	409a      	lsls	r2, r3
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b05      	cmp	r3, #5
 8006954:	d136      	bne.n	80069c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0216 	bic.w	r2, r2, #22
 8006964:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695a      	ldr	r2, [r3, #20]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006974:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	d103      	bne.n	8006986 <HAL_DMA_IRQHandler+0x1da>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0208 	bic.w	r2, r2, #8
 8006994:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699a:	223f      	movs	r2, #63	; 0x3f
 800699c:	409a      	lsls	r2, r3
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d07d      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
        }
        return;
 80069c2:	e078      	b.n	8006ab6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d01c      	beq.n	8006a0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d108      	bne.n	80069f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d030      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
 80069f0:	e02b      	b.n	8006a4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d027      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	4798      	blx	r3
 8006a02:	e022      	b.n	8006a4a <HAL_DMA_IRQHandler+0x29e>
 8006a04:	20000134 	.word	0x20000134
 8006a08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10f      	bne.n	8006a3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0210 	bic.w	r2, r2, #16
 8006a28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d032      	beq.n	8006ab8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d022      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2205      	movs	r2, #5
 8006a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0201 	bic.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	60bb      	str	r3, [r7, #8]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d307      	bcc.n	8006a92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1f2      	bne.n	8006a76 <HAL_DMA_IRQHandler+0x2ca>
 8006a90:	e000      	b.n	8006a94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006a92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
 8006ab4:	e000      	b.n	8006ab8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006ab6:	bf00      	nop
    }
  }
}
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop

08006ac0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006adc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d108      	bne.n	8006b00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006afe:	e007      	b.n	8006b10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	60da      	str	r2, [r3, #12]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	3b10      	subs	r3, #16
 8006b2c:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <DMA_CalcBaseAndBitshift+0x64>)
 8006b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b32:	091b      	lsrs	r3, r3, #4
 8006b34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b36:	4a13      	ldr	r2, [pc, #76]	; (8006b84 <DMA_CalcBaseAndBitshift+0x68>)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d909      	bls.n	8006b5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	1d1a      	adds	r2, r3, #4
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	659a      	str	r2, [r3, #88]	; 0x58
 8006b5c:	e007      	b.n	8006b6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b66:	f023 0303 	bic.w	r3, r3, #3
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	aaaaaaab 	.word	0xaaaaaaab
 8006b84:	0801e008 	.word	0x0801e008

08006b88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d11f      	bne.n	8006be2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d855      	bhi.n	8006c54 <DMA_CheckFifoParam+0xcc>
 8006ba8:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <DMA_CheckFifoParam+0x28>)
 8006baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bae:	bf00      	nop
 8006bb0:	08006bc1 	.word	0x08006bc1
 8006bb4:	08006bd3 	.word	0x08006bd3
 8006bb8:	08006bc1 	.word	0x08006bc1
 8006bbc:	08006c55 	.word	0x08006c55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d045      	beq.n	8006c58 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bd0:	e042      	b.n	8006c58 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006bda:	d13f      	bne.n	8006c5c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006be0:	e03c      	b.n	8006c5c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bea:	d121      	bne.n	8006c30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d836      	bhi.n	8006c60 <DMA_CheckFifoParam+0xd8>
 8006bf2:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <DMA_CheckFifoParam+0x70>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c09 	.word	0x08006c09
 8006bfc:	08006c0f 	.word	0x08006c0f
 8006c00:	08006c09 	.word	0x08006c09
 8006c04:	08006c21 	.word	0x08006c21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c0c:	e02f      	b.n	8006c6e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d024      	beq.n	8006c64 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c1e:	e021      	b.n	8006c64 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c28:	d11e      	bne.n	8006c68 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006c2e:	e01b      	b.n	8006c68 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d902      	bls.n	8006c3c <DMA_CheckFifoParam+0xb4>
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d003      	beq.n	8006c42 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c3a:	e018      	b.n	8006c6e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c40:	e015      	b.n	8006c6e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00e      	beq.n	8006c6c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	73fb      	strb	r3, [r7, #15]
      break;
 8006c52:	e00b      	b.n	8006c6c <DMA_CheckFifoParam+0xe4>
      break;
 8006c54:	bf00      	nop
 8006c56:	e00a      	b.n	8006c6e <DMA_CheckFifoParam+0xe6>
      break;
 8006c58:	bf00      	nop
 8006c5a:	e008      	b.n	8006c6e <DMA_CheckFifoParam+0xe6>
      break;
 8006c5c:	bf00      	nop
 8006c5e:	e006      	b.n	8006c6e <DMA_CheckFifoParam+0xe6>
      break;
 8006c60:	bf00      	nop
 8006c62:	e004      	b.n	8006c6e <DMA_CheckFifoParam+0xe6>
      break;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <DMA_CheckFifoParam+0xe6>
      break;   
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <DMA_CheckFifoParam+0xe6>
      break;
 8006c6c:	bf00      	nop
    }
  } 
  
  return status; 
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b089      	sub	sp, #36	; 0x24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c92:	2300      	movs	r3, #0
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	e16b      	b.n	8006f70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c98:	2201      	movs	r2, #1
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	f040 815a 	bne.w	8006f6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d003      	beq.n	8006cc6 <HAL_GPIO_Init+0x4a>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b12      	cmp	r3, #18
 8006cc4:	d123      	bne.n	8006d0e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	08da      	lsrs	r2, r3, #3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3208      	adds	r2, #8
 8006cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	220f      	movs	r2, #15
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	08da      	lsrs	r2, r3, #3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3208      	adds	r2, #8
 8006d08:	69b9      	ldr	r1, [r7, #24]
 8006d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	2203      	movs	r2, #3
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	4013      	ands	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f003 0203 	and.w	r2, r3, #3
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d00b      	beq.n	8006d62 <HAL_GPIO_Init+0xe6>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d007      	beq.n	8006d62 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006d56:	2b11      	cmp	r3, #17
 8006d58:	d003      	beq.n	8006d62 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b12      	cmp	r3, #18
 8006d60:	d130      	bne.n	8006dc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	43db      	mvns	r3, r3
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	4013      	ands	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d98:	2201      	movs	r2, #1
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006da0:	43db      	mvns	r3, r3
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	4013      	ands	r3, r2
 8006da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	f003 0201 	and.w	r2, r3, #1
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	fa02 f303 	lsl.w	r3, r2, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	2203      	movs	r2, #3
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	fa02 f303 	lsl.w	r3, r2, r3
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80b4 	beq.w	8006f6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	4b5f      	ldr	r3, [pc, #380]	; (8006f84 <HAL_GPIO_Init+0x308>)
 8006e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0a:	4a5e      	ldr	r2, [pc, #376]	; (8006f84 <HAL_GPIO_Init+0x308>)
 8006e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e10:	6453      	str	r3, [r2, #68]	; 0x44
 8006e12:	4b5c      	ldr	r3, [pc, #368]	; (8006f84 <HAL_GPIO_Init+0x308>)
 8006e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e1e:	4a5a      	ldr	r2, [pc, #360]	; (8006f88 <HAL_GPIO_Init+0x30c>)
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	089b      	lsrs	r3, r3, #2
 8006e24:	3302      	adds	r3, #2
 8006e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	220f      	movs	r2, #15
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a51      	ldr	r2, [pc, #324]	; (8006f8c <HAL_GPIO_Init+0x310>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d02b      	beq.n	8006ea2 <HAL_GPIO_Init+0x226>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a50      	ldr	r2, [pc, #320]	; (8006f90 <HAL_GPIO_Init+0x314>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d025      	beq.n	8006e9e <HAL_GPIO_Init+0x222>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a4f      	ldr	r2, [pc, #316]	; (8006f94 <HAL_GPIO_Init+0x318>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d01f      	beq.n	8006e9a <HAL_GPIO_Init+0x21e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a4e      	ldr	r2, [pc, #312]	; (8006f98 <HAL_GPIO_Init+0x31c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d019      	beq.n	8006e96 <HAL_GPIO_Init+0x21a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a4d      	ldr	r2, [pc, #308]	; (8006f9c <HAL_GPIO_Init+0x320>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <HAL_GPIO_Init+0x216>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a4c      	ldr	r2, [pc, #304]	; (8006fa0 <HAL_GPIO_Init+0x324>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00d      	beq.n	8006e8e <HAL_GPIO_Init+0x212>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a4b      	ldr	r2, [pc, #300]	; (8006fa4 <HAL_GPIO_Init+0x328>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <HAL_GPIO_Init+0x20e>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a4a      	ldr	r2, [pc, #296]	; (8006fa8 <HAL_GPIO_Init+0x32c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d101      	bne.n	8006e86 <HAL_GPIO_Init+0x20a>
 8006e82:	2307      	movs	r3, #7
 8006e84:	e00e      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e86:	2308      	movs	r3, #8
 8006e88:	e00c      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e8a:	2306      	movs	r3, #6
 8006e8c:	e00a      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e8e:	2305      	movs	r3, #5
 8006e90:	e008      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e92:	2304      	movs	r3, #4
 8006e94:	e006      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e96:	2303      	movs	r3, #3
 8006e98:	e004      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e002      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	f002 0203 	and.w	r2, r2, #3
 8006eaa:	0092      	lsls	r2, r2, #2
 8006eac:	4093      	lsls	r3, r2
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006eb4:	4934      	ldr	r1, [pc, #208]	; (8006f88 <HAL_GPIO_Init+0x30c>)
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	089b      	lsrs	r3, r3, #2
 8006eba:	3302      	adds	r3, #2
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ec2:	4b3a      	ldr	r3, [pc, #232]	; (8006fac <HAL_GPIO_Init+0x330>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ee6:	4a31      	ldr	r2, [pc, #196]	; (8006fac <HAL_GPIO_Init+0x330>)
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006eec:	4b2f      	ldr	r3, [pc, #188]	; (8006fac <HAL_GPIO_Init+0x330>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f10:	4a26      	ldr	r2, [pc, #152]	; (8006fac <HAL_GPIO_Init+0x330>)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f16:	4b25      	ldr	r3, [pc, #148]	; (8006fac <HAL_GPIO_Init+0x330>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	43db      	mvns	r3, r3
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	4013      	ands	r3, r2
 8006f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f3a:	4a1c      	ldr	r2, [pc, #112]	; (8006fac <HAL_GPIO_Init+0x330>)
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f40:	4b1a      	ldr	r3, [pc, #104]	; (8006fac <HAL_GPIO_Init+0x330>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f64:	4a11      	ldr	r2, [pc, #68]	; (8006fac <HAL_GPIO_Init+0x330>)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	2b0f      	cmp	r3, #15
 8006f74:	f67f ae90 	bls.w	8006c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3724      	adds	r7, #36	; 0x24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	40023800 	.word	0x40023800
 8006f88:	40013800 	.word	0x40013800
 8006f8c:	40020000 	.word	0x40020000
 8006f90:	40020400 	.word	0x40020400
 8006f94:	40020800 	.word	0x40020800
 8006f98:	40020c00 	.word	0x40020c00
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	40021400 	.word	0x40021400
 8006fa4:	40021800 	.word	0x40021800
 8006fa8:	40021c00 	.word	0x40021c00
 8006fac:	40013c00 	.word	0x40013c00

08006fb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	887b      	ldrh	r3, [r7, #2]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	73fb      	strb	r3, [r7, #15]
 8006fcc:	e001      	b.n	8006fd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	807b      	strh	r3, [r7, #2]
 8006fec:	4613      	mov	r3, r2
 8006fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ff0:	787b      	ldrb	r3, [r7, #1]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ff6:	887a      	ldrh	r2, [r7, #2]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ffc:	e003      	b.n	8007006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ffe:	887b      	ldrh	r3, [r7, #2]
 8007000:	041a      	lsls	r2, r3, #16
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	619a      	str	r2, [r3, #24]
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	460b      	mov	r3, r1
 800701c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695a      	ldr	r2, [r3, #20]
 8007022:	887b      	ldrh	r3, [r7, #2]
 8007024:	401a      	ands	r2, r3
 8007026:	887b      	ldrh	r3, [r7, #2]
 8007028:	429a      	cmp	r2, r3
 800702a:	d104      	bne.n	8007036 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800702c:	887b      	ldrh	r3, [r7, #2]
 800702e:	041a      	lsls	r2, r3, #16
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007034:	e002      	b.n	800703c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8007036:	887a      	ldrh	r2, [r7, #2]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	619a      	str	r2, [r3, #24]
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e10f      	b.n	800727a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f00e fd6c 	bl	8015b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2224      	movs	r2, #36	; 0x24
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0201 	bic.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800708c:	f002 fcc8 	bl	8009a20 <HAL_RCC_GetPCLK1Freq>
 8007090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	4a7b      	ldr	r2, [pc, #492]	; (8007284 <HAL_I2C_Init+0x23c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d807      	bhi.n	80070ac <HAL_I2C_Init+0x64>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a7a      	ldr	r2, [pc, #488]	; (8007288 <HAL_I2C_Init+0x240>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	bf94      	ite	ls
 80070a4:	2301      	movls	r3, #1
 80070a6:	2300      	movhi	r3, #0
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	e006      	b.n	80070ba <HAL_I2C_Init+0x72>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4a77      	ldr	r2, [pc, #476]	; (800728c <HAL_I2C_Init+0x244>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	bf94      	ite	ls
 80070b4:	2301      	movls	r3, #1
 80070b6:	2300      	movhi	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e0db      	b.n	800727a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4a72      	ldr	r2, [pc, #456]	; (8007290 <HAL_I2C_Init+0x248>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	0c9b      	lsrs	r3, r3, #18
 80070cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	4a64      	ldr	r2, [pc, #400]	; (8007284 <HAL_I2C_Init+0x23c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d802      	bhi.n	80070fc <HAL_I2C_Init+0xb4>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	3301      	adds	r3, #1
 80070fa:	e009      	b.n	8007110 <HAL_I2C_Init+0xc8>
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	4a63      	ldr	r2, [pc, #396]	; (8007294 <HAL_I2C_Init+0x24c>)
 8007108:	fba2 2303 	umull	r2, r3, r2, r3
 800710c:	099b      	lsrs	r3, r3, #6
 800710e:	3301      	adds	r3, #1
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6812      	ldr	r2, [r2, #0]
 8007114:	430b      	orrs	r3, r1
 8007116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4956      	ldr	r1, [pc, #344]	; (8007284 <HAL_I2C_Init+0x23c>)
 800712c:	428b      	cmp	r3, r1
 800712e:	d80d      	bhi.n	800714c <HAL_I2C_Init+0x104>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	1e59      	subs	r1, r3, #1
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	fbb1 f3f3 	udiv	r3, r1, r3
 800713e:	3301      	adds	r3, #1
 8007140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007144:	2b04      	cmp	r3, #4
 8007146:	bf38      	it	cc
 8007148:	2304      	movcc	r3, #4
 800714a:	e04f      	b.n	80071ec <HAL_I2C_Init+0x1a4>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d111      	bne.n	8007178 <HAL_I2C_Init+0x130>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	1e58      	subs	r0, r3, #1
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6859      	ldr	r1, [r3, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	440b      	add	r3, r1
 8007162:	fbb0 f3f3 	udiv	r3, r0, r3
 8007166:	3301      	adds	r3, #1
 8007168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800716c:	2b00      	cmp	r3, #0
 800716e:	bf0c      	ite	eq
 8007170:	2301      	moveq	r3, #1
 8007172:	2300      	movne	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	e012      	b.n	800719e <HAL_I2C_Init+0x156>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	1e58      	subs	r0, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6859      	ldr	r1, [r3, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	440b      	add	r3, r1
 8007186:	0099      	lsls	r1, r3, #2
 8007188:	440b      	add	r3, r1
 800718a:	fbb0 f3f3 	udiv	r3, r0, r3
 800718e:	3301      	adds	r3, #1
 8007190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007194:	2b00      	cmp	r3, #0
 8007196:	bf0c      	ite	eq
 8007198:	2301      	moveq	r3, #1
 800719a:	2300      	movne	r3, #0
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <HAL_I2C_Init+0x15e>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e022      	b.n	80071ec <HAL_I2C_Init+0x1a4>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10e      	bne.n	80071cc <HAL_I2C_Init+0x184>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1e58      	subs	r0, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6859      	ldr	r1, [r3, #4]
 80071b6:	460b      	mov	r3, r1
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	440b      	add	r3, r1
 80071bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80071c0:	3301      	adds	r3, #1
 80071c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ca:	e00f      	b.n	80071ec <HAL_I2C_Init+0x1a4>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	1e58      	subs	r0, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6859      	ldr	r1, [r3, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	0099      	lsls	r1, r3, #2
 80071dc:	440b      	add	r3, r1
 80071de:	fbb0 f3f3 	udiv	r3, r0, r3
 80071e2:	3301      	adds	r3, #1
 80071e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	6809      	ldr	r1, [r1, #0]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69da      	ldr	r2, [r3, #28]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800721a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	6911      	ldr	r1, [r2, #16]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	68d2      	ldr	r2, [r2, #12]
 8007226:	4311      	orrs	r1, r2
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6812      	ldr	r2, [r2, #0]
 800722c:	430b      	orrs	r3, r1
 800722e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695a      	ldr	r2, [r3, #20]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0201 	orr.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	000186a0 	.word	0x000186a0
 8007288:	001e847f 	.word	0x001e847f
 800728c:	003d08ff 	.word	0x003d08ff
 8007290:	431bde83 	.word	0x431bde83
 8007294:	10624dd3 	.word	0x10624dd3

08007298 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	4608      	mov	r0, r1
 80072a2:	4611      	mov	r1, r2
 80072a4:	461a      	mov	r2, r3
 80072a6:	4603      	mov	r3, r0
 80072a8:	817b      	strh	r3, [r7, #10]
 80072aa:	460b      	mov	r3, r1
 80072ac:	813b      	strh	r3, [r7, #8]
 80072ae:	4613      	mov	r3, r2
 80072b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072b2:	f7ff f80b 	bl	80062cc <HAL_GetTick>
 80072b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	f040 80d9 	bne.w	8007478 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	2319      	movs	r3, #25
 80072cc:	2201      	movs	r2, #1
 80072ce:	496d      	ldr	r1, [pc, #436]	; (8007484 <HAL_I2C_Mem_Write+0x1ec>)
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 fc5b 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80072dc:	2302      	movs	r3, #2
 80072de:	e0cc      	b.n	800747a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d101      	bne.n	80072ee <HAL_I2C_Mem_Write+0x56>
 80072ea:	2302      	movs	r3, #2
 80072ec:	e0c5      	b.n	800747a <HAL_I2C_Mem_Write+0x1e2>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b01      	cmp	r3, #1
 8007302:	d007      	beq.n	8007314 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f042 0201 	orr.w	r2, r2, #1
 8007312:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007322:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2221      	movs	r2, #33	; 0x21
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2240      	movs	r2, #64	; 0x40
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a3a      	ldr	r2, [r7, #32]
 800733e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4a4d      	ldr	r2, [pc, #308]	; (8007488 <HAL_I2C_Mem_Write+0x1f0>)
 8007354:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007356:	88f8      	ldrh	r0, [r7, #6]
 8007358:	893a      	ldrh	r2, [r7, #8]
 800735a:	8979      	ldrh	r1, [r7, #10]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	4603      	mov	r3, r0
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 fab6 	bl	80078d8 <I2C_RequestMemoryWrite>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d052      	beq.n	8007418 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e081      	b.n	800747a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 fcdc 	bl	8007d38 <I2C_WaitOnTXEFlagUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00d      	beq.n	80073a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	2b04      	cmp	r3, #4
 800738c:	d107      	bne.n	800739e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e06b      	b.n	800747a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	781a      	ldrb	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b01      	subs	r3, #1
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d11b      	bne.n	8007418 <HAL_I2C_Mem_Write+0x180>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d017      	beq.n	8007418 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007402:	3b01      	subs	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800740e:	b29b      	uxth	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	b29a      	uxth	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1aa      	bne.n	8007376 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 fcc8 	bl	8007dba <I2C_WaitOnBTFFlagUntilTimeout>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00d      	beq.n	800744c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007434:	2b04      	cmp	r3, #4
 8007436:	d107      	bne.n	8007448 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007446:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e016      	b.n	800747a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800745a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	e000      	b.n	800747a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007478:	2302      	movs	r3, #2
  }
}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	00100002 	.word	0x00100002
 8007488:	ffff0000 	.word	0xffff0000

0800748c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08c      	sub	sp, #48	; 0x30
 8007490:	af02      	add	r7, sp, #8
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	4608      	mov	r0, r1
 8007496:	4611      	mov	r1, r2
 8007498:	461a      	mov	r2, r3
 800749a:	4603      	mov	r3, r0
 800749c:	817b      	strh	r3, [r7, #10]
 800749e:	460b      	mov	r3, r1
 80074a0:	813b      	strh	r3, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074a6:	f7fe ff11 	bl	80062cc <HAL_GetTick>
 80074aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	f040 8208 	bne.w	80078ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	2319      	movs	r3, #25
 80074c0:	2201      	movs	r2, #1
 80074c2:	497b      	ldr	r1, [pc, #492]	; (80076b0 <HAL_I2C_Mem_Read+0x224>)
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fb61 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80074d0:	2302      	movs	r3, #2
 80074d2:	e1fb      	b.n	80078cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_I2C_Mem_Read+0x56>
 80074de:	2302      	movs	r3, #2
 80074e0:	e1f4      	b.n	80078cc <HAL_I2C_Mem_Read+0x440>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d007      	beq.n	8007508 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0201 	orr.w	r2, r2, #1
 8007506:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007516:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2222      	movs	r2, #34	; 0x22
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2240      	movs	r2, #64	; 0x40
 8007524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4a5b      	ldr	r2, [pc, #364]	; (80076b4 <HAL_I2C_Mem_Read+0x228>)
 8007548:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800754a:	88f8      	ldrh	r0, [r7, #6]
 800754c:	893a      	ldrh	r2, [r7, #8]
 800754e:	8979      	ldrh	r1, [r7, #10]
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	4603      	mov	r3, r0
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 fa46 	bl	80079ec <I2C_RequestMemoryRead>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e1b0      	b.n	80078cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756e:	2b00      	cmp	r3, #0
 8007570:	d113      	bne.n	800759a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007572:	2300      	movs	r3, #0
 8007574:	623b      	str	r3, [r7, #32]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	623b      	str	r3, [r7, #32]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	623b      	str	r3, [r7, #32]
 8007586:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e184      	b.n	80078a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d11b      	bne.n	80075da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075b2:	2300      	movs	r3, #0
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	61fb      	str	r3, [r7, #28]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	61fb      	str	r3, [r7, #28]
 80075c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	e164      	b.n	80078a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d11b      	bne.n	800761a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007600:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007602:	2300      	movs	r3, #0
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	61bb      	str	r3, [r7, #24]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	61bb      	str	r3, [r7, #24]
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	e144      	b.n	80078a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	617b      	str	r3, [r7, #20]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007630:	e138      	b.n	80078a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007636:	2b03      	cmp	r3, #3
 8007638:	f200 80f1 	bhi.w	800781e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007640:	2b01      	cmp	r3, #1
 8007642:	d123      	bne.n	800768c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007646:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fbf7 	bl	8007e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e139      	b.n	80078cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	855a      	strh	r2, [r3, #42]	; 0x2a
 800768a:	e10b      	b.n	80078a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007690:	2b02      	cmp	r3, #2
 8007692:	d14e      	bne.n	8007732 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769a:	2200      	movs	r2, #0
 800769c:	4906      	ldr	r1, [pc, #24]	; (80076b8 <HAL_I2C_Mem_Read+0x22c>)
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fa74 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e10e      	b.n	80078cc <HAL_I2C_Mem_Read+0x440>
 80076ae:	bf00      	nop
 80076b0:	00100002 	.word	0x00100002
 80076b4:	ffff0000 	.word	0xffff0000
 80076b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771a:	3b01      	subs	r3, #1
 800771c:	b29a      	uxth	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007726:	b29b      	uxth	r3, r3
 8007728:	3b01      	subs	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007730:	e0b8      	b.n	80078a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007738:	2200      	movs	r2, #0
 800773a:	4966      	ldr	r1, [pc, #408]	; (80078d4 <HAL_I2C_Mem_Read+0x448>)
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fa25 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e0bf      	b.n	80078cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800775a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691a      	ldr	r2, [r3, #16]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007794:	2200      	movs	r2, #0
 8007796:	494f      	ldr	r1, [pc, #316]	; (80078d4 <HAL_I2C_Mem_Read+0x448>)
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 f9f7 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e091      	b.n	80078cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691a      	ldr	r2, [r3, #16]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800781c:	e042      	b.n	80078a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800781e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007820:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fb0a 	bl	8007e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e04c      	b.n	80078cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b04      	cmp	r3, #4
 8007870:	d118      	bne.n	80078a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788e:	3b01      	subs	r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789a:	b29b      	uxth	r3, r3
 800789c:	3b01      	subs	r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f47f aec2 	bne.w	8007632 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e000      	b.n	80078cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80078ca:	2302      	movs	r3, #2
  }
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3728      	adds	r7, #40	; 0x28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	00010004 	.word	0x00010004

080078d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af02      	add	r7, sp, #8
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	4608      	mov	r0, r1
 80078e2:	4611      	mov	r1, r2
 80078e4:	461a      	mov	r2, r3
 80078e6:	4603      	mov	r3, r0
 80078e8:	817b      	strh	r3, [r7, #10]
 80078ea:	460b      	mov	r3, r1
 80078ec:	813b      	strh	r3, [r7, #8]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007900:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	2200      	movs	r2, #0
 800790a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 f93c 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e05f      	b.n	80079de <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800791e:	897b      	ldrh	r3, [r7, #10]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800792c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	6a3a      	ldr	r2, [r7, #32]
 8007932:	492d      	ldr	r1, [pc, #180]	; (80079e8 <I2C_RequestMemoryWrite+0x110>)
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 f980 	bl	8007c3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e04c      	b.n	80079de <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800795a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795c:	6a39      	ldr	r1, [r7, #32]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f9ea 	bl	8007d38 <I2C_WaitOnTXEFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00d      	beq.n	8007986 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	2b04      	cmp	r3, #4
 8007970:	d107      	bne.n	8007982 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007980:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e02b      	b.n	80079de <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007986:	88fb      	ldrh	r3, [r7, #6]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d105      	bne.n	8007998 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800798c:	893b      	ldrh	r3, [r7, #8]
 800798e:	b2da      	uxtb	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	611a      	str	r2, [r3, #16]
 8007996:	e021      	b.n	80079dc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007998:	893b      	ldrh	r3, [r7, #8]
 800799a:	0a1b      	lsrs	r3, r3, #8
 800799c:	b29b      	uxth	r3, r3
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a8:	6a39      	ldr	r1, [r7, #32]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f9c4 	bl	8007d38 <I2C_WaitOnTXEFlagUntilTimeout>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00d      	beq.n	80079d2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d107      	bne.n	80079ce <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e005      	b.n	80079de <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079d2:	893b      	ldrh	r3, [r7, #8]
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	00010002 	.word	0x00010002

080079ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	4608      	mov	r0, r1
 80079f6:	4611      	mov	r1, r2
 80079f8:	461a      	mov	r2, r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	817b      	strh	r3, [r7, #10]
 80079fe:	460b      	mov	r3, r1
 8007a00:	813b      	strh	r3, [r7, #8]
 8007a02:	4613      	mov	r3, r2
 8007a04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 f8aa 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e09e      	b.n	8007b80 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a42:	897b      	ldrh	r3, [r7, #10]
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	6a3a      	ldr	r2, [r7, #32]
 8007a56:	494c      	ldr	r1, [pc, #304]	; (8007b88 <I2C_RequestMemoryRead+0x19c>)
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f8ee 	bl	8007c3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e08b      	b.n	8007b80 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a80:	6a39      	ldr	r1, [r7, #32]
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 f958 	bl	8007d38 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00d      	beq.n	8007aaa <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d107      	bne.n	8007aa6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e06a      	b.n	8007b80 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007aaa:	88fb      	ldrh	r3, [r7, #6]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d105      	bne.n	8007abc <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ab0:	893b      	ldrh	r3, [r7, #8]
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	611a      	str	r2, [r3, #16]
 8007aba:	e021      	b.n	8007b00 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007abc:	893b      	ldrh	r3, [r7, #8]
 8007abe:	0a1b      	lsrs	r3, r3, #8
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007acc:	6a39      	ldr	r1, [r7, #32]
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 f932 	bl	8007d38 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00d      	beq.n	8007af6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d107      	bne.n	8007af2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e044      	b.n	8007b80 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007af6:	893b      	ldrh	r3, [r7, #8]
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b02:	6a39      	ldr	r1, [r7, #32]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f917 	bl	8007d38 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00d      	beq.n	8007b2c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d107      	bne.n	8007b28 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e029      	b.n	8007b80 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 f81f 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e013      	b.n	8007b80 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007b58:	897b      	ldrh	r3, [r7, #10]
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f043 0301 	orr.w	r3, r3, #1
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	6a3a      	ldr	r2, [r7, #32]
 8007b6c:	4906      	ldr	r1, [pc, #24]	; (8007b88 <I2C_RequestMemoryRead+0x19c>)
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 f863 	bl	8007c3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	00010002 	.word	0x00010002

08007b8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	603b      	str	r3, [r7, #0]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b9c:	e025      	b.n	8007bea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba4:	d021      	beq.n	8007bea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba6:	f7fe fb91 	bl	80062cc <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d302      	bcc.n	8007bbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d116      	bne.n	8007bea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	f043 0220 	orr.w	r2, r3, #32
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e023      	b.n	8007c32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	0c1b      	lsrs	r3, r3, #16
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d10d      	bne.n	8007c10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	43da      	mvns	r2, r3
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bf0c      	ite	eq
 8007c06:	2301      	moveq	r3, #1
 8007c08:	2300      	movne	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	e00c      	b.n	8007c2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	43da      	mvns	r2, r3
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bf0c      	ite	eq
 8007c22:	2301      	moveq	r3, #1
 8007c24:	2300      	movne	r3, #0
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d0b6      	beq.n	8007b9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c48:	e051      	b.n	8007cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c58:	d123      	bne.n	8007ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	f043 0204 	orr.w	r2, r3, #4
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e046      	b.n	8007d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d021      	beq.n	8007cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007caa:	f7fe fb0f 	bl	80062cc <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d302      	bcc.n	8007cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d116      	bne.n	8007cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	f043 0220 	orr.w	r2, r3, #32
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e020      	b.n	8007d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	0c1b      	lsrs	r3, r3, #16
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d10c      	bne.n	8007d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	43da      	mvns	r2, r3
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	4013      	ands	r3, r2
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bf14      	ite	ne
 8007d0a:	2301      	movne	r3, #1
 8007d0c:	2300      	moveq	r3, #0
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	e00b      	b.n	8007d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	43da      	mvns	r2, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bf14      	ite	ne
 8007d24:	2301      	movne	r3, #1
 8007d26:	2300      	moveq	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d18d      	bne.n	8007c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d44:	e02d      	b.n	8007da2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 f8ce 	bl	8007ee8 <I2C_IsAcknowledgeFailed>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e02d      	b.n	8007db2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5c:	d021      	beq.n	8007da2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d5e:	f7fe fab5 	bl	80062cc <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d302      	bcc.n	8007d74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d116      	bne.n	8007da2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	f043 0220 	orr.w	r2, r3, #32
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e007      	b.n	8007db2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dac:	2b80      	cmp	r3, #128	; 0x80
 8007dae:	d1ca      	bne.n	8007d46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dc6:	e02d      	b.n	8007e24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f88d 	bl	8007ee8 <I2C_IsAcknowledgeFailed>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e02d      	b.n	8007e34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dde:	d021      	beq.n	8007e24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de0:	f7fe fa74 	bl	80062cc <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d302      	bcc.n	8007df6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d116      	bne.n	8007e24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e10:	f043 0220 	orr.w	r2, r3, #32
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e007      	b.n	8007e34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	f003 0304 	and.w	r3, r3, #4
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d1ca      	bne.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e48:	e042      	b.n	8007ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	f003 0310 	and.w	r3, r3, #16
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d119      	bne.n	8007e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0210 	mvn.w	r2, #16
 8007e60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e029      	b.n	8007ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e8c:	f7fe fa1e 	bl	80062cc <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d302      	bcc.n	8007ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d116      	bne.n	8007ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebc:	f043 0220 	orr.w	r2, r3, #32
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e007      	b.n	8007ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b40      	cmp	r3, #64	; 0x40
 8007edc:	d1b5      	bne.n	8007e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007efe:	d11b      	bne.n	8007f38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	f043 0204 	orr.w	r2, r3, #4
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f48:	b08f      	sub	sp, #60	; 0x3c
 8007f4a:	af0a      	add	r7, sp, #40	; 0x28
 8007f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e10f      	b.n	8008178 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d106      	bne.n	8007f78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f00e fa5a 	bl	801642c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f005 ff2f 	bl	800ddfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	687e      	ldr	r6, [r7, #4]
 8007fa4:	466d      	mov	r5, sp
 8007fa6:	f106 0410 	add.w	r4, r6, #16
 8007faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8007fba:	1d33      	adds	r3, r6, #4
 8007fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fbe:	6838      	ldr	r0, [r7, #0]
 8007fc0:	f005 fe06 	bl	800dbd0 <USB_CoreInit>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d005      	beq.n	8007fd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2202      	movs	r2, #2
 8007fce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e0d0      	b.n	8008178 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2100      	movs	r1, #0
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f005 ff1d 	bl	800de1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
 8007fe6:	e04a      	b.n	800807e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007fe8:	7bfa      	ldrb	r2, [r7, #15]
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	4613      	mov	r3, r2
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	1a9b      	subs	r3, r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	440b      	add	r3, r1
 8007ff6:	333d      	adds	r3, #61	; 0x3d
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007ffc:	7bfa      	ldrb	r2, [r7, #15]
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	4613      	mov	r3, r2
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	1a9b      	subs	r3, r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	440b      	add	r3, r1
 800800a:	333c      	adds	r3, #60	; 0x3c
 800800c:	7bfa      	ldrb	r2, [r7, #15]
 800800e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008010:	7bfa      	ldrb	r2, [r7, #15]
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	b298      	uxth	r0, r3
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	4613      	mov	r3, r2
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	1a9b      	subs	r3, r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	3342      	adds	r3, #66	; 0x42
 8008024:	4602      	mov	r2, r0
 8008026:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008028:	7bfa      	ldrb	r2, [r7, #15]
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	4613      	mov	r3, r2
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	1a9b      	subs	r3, r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	333f      	adds	r3, #63	; 0x3f
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800803c:	7bfa      	ldrb	r2, [r7, #15]
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4613      	mov	r3, r2
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	3344      	adds	r3, #68	; 0x44
 800804c:	2200      	movs	r2, #0
 800804e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008050:	7bfa      	ldrb	r2, [r7, #15]
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	4613      	mov	r3, r2
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	1a9b      	subs	r3, r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	440b      	add	r3, r1
 800805e:	3348      	adds	r3, #72	; 0x48
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008064:	7bfa      	ldrb	r2, [r7, #15]
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	4613      	mov	r3, r2
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	3350      	adds	r3, #80	; 0x50
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	3301      	adds	r3, #1
 800807c:	73fb      	strb	r3, [r7, #15]
 800807e:	7bfa      	ldrb	r2, [r7, #15]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	429a      	cmp	r2, r3
 8008086:	d3af      	bcc.n	8007fe8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
 800808c:	e044      	b.n	8008118 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800808e:	7bfa      	ldrb	r2, [r7, #15]
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	4613      	mov	r3, r2
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	1a9b      	subs	r3, r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	440b      	add	r3, r1
 800809c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80080a4:	7bfa      	ldrb	r2, [r7, #15]
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4613      	mov	r3, r2
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	1a9b      	subs	r3, r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80080b6:	7bfa      	ldrb	r2, [r7, #15]
 80080b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80080ba:	7bfa      	ldrb	r2, [r7, #15]
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	4613      	mov	r3, r2
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	1a9b      	subs	r3, r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	440b      	add	r3, r1
 80080c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80080cc:	2200      	movs	r2, #0
 80080ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80080d0:	7bfa      	ldrb	r2, [r7, #15]
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	4613      	mov	r3, r2
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	1a9b      	subs	r3, r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	440b      	add	r3, r1
 80080de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80080e6:	7bfa      	ldrb	r2, [r7, #15]
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	4613      	mov	r3, r2
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	440b      	add	r3, r1
 80080f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80080fc:	7bfa      	ldrb	r2, [r7, #15]
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4613      	mov	r3, r2
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	440b      	add	r3, r1
 800810a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	3301      	adds	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]
 8008118:	7bfa      	ldrb	r2, [r7, #15]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	429a      	cmp	r2, r3
 8008120:	d3b5      	bcc.n	800808e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	687e      	ldr	r6, [r7, #4]
 800812a:	466d      	mov	r5, sp
 800812c:	f106 0410 	add.w	r4, r6, #16
 8008130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008138:	e894 0003 	ldmia.w	r4, {r0, r1}
 800813c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008140:	1d33      	adds	r3, r6, #4
 8008142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008144:	6838      	ldr	r0, [r7, #0]
 8008146:	f005 fe93 	bl	800de70 <USB_DevInit>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e00d      	b.n	8008178 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4618      	mov	r0, r3
 8008172:	f006 fe88 	bl	800ee86 <USB_DevDisconnect>

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008180 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_PCD_Start+0x1c>
 8008198:	2302      	movs	r3, #2
 800819a:	e020      	b.n	80081de <HAL_PCD_Start+0x5e>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d109      	bne.n	80081c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d005      	beq.n	80081c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f006 fe46 	bl	800ee56 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f005 fe02 	bl	800ddd8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80081e6:	b590      	push	{r4, r7, lr}
 80081e8:	b08d      	sub	sp, #52	; 0x34
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f006 feed 	bl	800efdc <USB_GetMode>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 838e 	bne.w	8008926 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f006 fe51 	bl	800eeb6 <USB_ReadInterrupts>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 8384 	beq.w	8008924 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f006 fe48 	bl	800eeb6 <USB_ReadInterrupts>
 8008226:	4603      	mov	r3, r0
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b02      	cmp	r3, #2
 800822e:	d107      	bne.n	8008240 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	695a      	ldr	r2, [r3, #20]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f002 0202 	and.w	r2, r2, #2
 800823e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4618      	mov	r0, r3
 8008246:	f006 fe36 	bl	800eeb6 <USB_ReadInterrupts>
 800824a:	4603      	mov	r3, r0
 800824c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008250:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008254:	d17b      	bne.n	800834e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4618      	mov	r0, r3
 8008260:	f006 fe3c 	bl	800eedc <USB_ReadDevAllOutEpInterrupt>
 8008264:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008266:	e06f      	b.n	8008348 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d064      	beq.n	800833c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008278:	b2d2      	uxtb	r2, r2
 800827a:	4611      	mov	r1, r2
 800827c:	4618      	mov	r0, r3
 800827e:	f006 fe61 	bl	800ef44 <USB_ReadDevOutEPInterrupt>
 8008282:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00c      	beq.n	80082a8 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829a:	461a      	mov	r2, r3
 800829c:	2301      	movs	r3, #1
 800829e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80082a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fe0e 	bl	8008ec4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	f003 0308 	and.w	r3, r3, #8
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00c      	beq.n	80082cc <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80082b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 ff0d 	bl	80090d4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	461a      	mov	r2, r3
 80082c8:	2308      	movs	r3, #8
 80082ca:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d008      	beq.n	80082e8 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e2:	461a      	mov	r2, r3
 80082e4:	2310      	movs	r3, #16
 80082e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d015      	beq.n	800831e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d108      	bne.n	800830c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008304:	461a      	mov	r2, r3
 8008306:	2101      	movs	r1, #1
 8008308:	f006 feac 	bl	800f064 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008318:	461a      	mov	r2, r3
 800831a:	2320      	movs	r3, #32
 800831c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d009      	beq.n	800833c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008334:	461a      	mov	r2, r3
 8008336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800833a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	3301      	adds	r3, #1
 8008340:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008344:	085b      	lsrs	r3, r3, #1
 8008346:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	2b00      	cmp	r3, #0
 800834c:	d18c      	bne.n	8008268 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f006 fdaf 	bl	800eeb6 <USB_ReadInterrupts>
 8008358:	4603      	mov	r3, r0
 800835a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800835e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008362:	f040 80c4 	bne.w	80084ee <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4618      	mov	r0, r3
 800836c:	f006 fdd0 	bl	800ef10 <USB_ReadDevAllInEpInterrupt>
 8008370:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008376:	e0b6      	b.n	80084e6 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 80ab 	beq.w	80084da <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800838a:	b2d2      	uxtb	r2, r2
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f006 fdf6 	bl	800ef80 <USB_ReadDevInEPInterrupt>
 8008394:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d05b      	beq.n	8008458 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	f003 030f 	and.w	r3, r3, #15
 80083a6:	2201      	movs	r2, #1
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	43db      	mvns	r3, r3
 80083ba:	69f9      	ldr	r1, [r7, #28]
 80083bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083c0:	4013      	ands	r3, r2
 80083c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d0:	461a      	mov	r2, r3
 80083d2:	2301      	movs	r3, #1
 80083d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d11b      	bne.n	8008416 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e2:	4613      	mov	r3, r2
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	3348      	adds	r3, #72	; 0x48
 80083ee:	6819      	ldr	r1, [r3, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f4:	4613      	mov	r3, r2
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	1a9b      	subs	r3, r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4403      	add	r3, r0
 80083fe:	3344      	adds	r3, #68	; 0x44
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4419      	add	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008408:	4613      	mov	r3, r2
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4403      	add	r3, r0
 8008412:	3348      	adds	r3, #72	; 0x48
 8008414:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	b2db      	uxtb	r3, r3
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f00e f886 	bl	801652e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d116      	bne.n	8008458 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	d113      	bne.n	8008458 <HAL_PCD_IRQHandler+0x272>
 8008430:	6879      	ldr	r1, [r7, #4]
 8008432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008434:	4613      	mov	r3, r2
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	1a9b      	subs	r3, r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	3350      	adds	r3, #80	; 0x50
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d108      	bne.n	8008458 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008450:	461a      	mov	r2, r3
 8008452:	2101      	movs	r1, #1
 8008454:	f006 fe06 	bl	800f064 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	f003 0308 	and.w	r3, r3, #8
 800845e:	2b00      	cmp	r3, #0
 8008460:	d008      	beq.n	8008474 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846e:	461a      	mov	r2, r3
 8008470:	2308      	movs	r3, #8
 8008472:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	f003 0310 	and.w	r3, r3, #16
 800847a:	2b00      	cmp	r3, #0
 800847c:	d008      	beq.n	8008490 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848a:	461a      	mov	r2, r3
 800848c:	2310      	movs	r3, #16
 800848e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008496:	2b00      	cmp	r3, #0
 8008498:	d008      	beq.n	80084ac <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a6:	461a      	mov	r2, r3
 80084a8:	2340      	movs	r3, #64	; 0x40
 80084aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d008      	beq.n	80084c8 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c2:	461a      	mov	r2, r3
 80084c4:	2302      	movs	r3, #2
 80084c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80084d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fc67 	bl	8008da8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	3301      	adds	r3, #1
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	085b      	lsrs	r3, r3, #1
 80084e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f47f af45 	bne.w	8008378 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f006 fcdf 	bl	800eeb6 <USB_ReadInterrupts>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008502:	d122      	bne.n	800854a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	69fa      	ldr	r2, [r7, #28]
 800850e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008512:	f023 0301 	bic.w	r3, r3, #1
 8008516:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800851e:	2b01      	cmp	r3, #1
 8008520:	d108      	bne.n	8008534 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800852a:	2100      	movs	r1, #0
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fe89 	bl	8009244 <HAL_PCDEx_LPM_Callback>
 8008532:	e002      	b.n	800853a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f00e f871 	bl	801661c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	695a      	ldr	r2, [r3, #20]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008548:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	f006 fcb1 	bl	800eeb6 <USB_ReadInterrupts>
 8008554:	4603      	mov	r3, r0
 8008556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800855a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800855e:	d112      	bne.n	8008586 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b01      	cmp	r3, #1
 800856e:	d102      	bne.n	8008576 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f00e f82d 	bl	80165d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	695a      	ldr	r2, [r3, #20]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008584:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f006 fc93 	bl	800eeb6 <USB_ReadInterrupts>
 8008590:	4603      	mov	r3, r0
 8008592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800859a:	f040 80a7 	bne.w	80086ec <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ac:	f023 0301 	bic.w	r3, r3, #1
 80085b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2110      	movs	r1, #16
 80085b8:	4618      	mov	r0, r3
 80085ba:	f005 fdcb 	bl	800e154 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085be:	2300      	movs	r3, #0
 80085c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085c2:	e036      	b.n	8008632 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80085c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d0:	461a      	mov	r2, r3
 80085d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085e8:	0151      	lsls	r1, r2, #5
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	440a      	add	r2, r1
 80085ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008604:	461a      	mov	r2, r3
 8008606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800860a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800861c:	0151      	lsls	r1, r2, #5
 800861e:	69fa      	ldr	r2, [r7, #28]
 8008620:	440a      	add	r2, r1
 8008622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008626:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800862a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	3301      	adds	r3, #1
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008638:	429a      	cmp	r2, r3
 800863a:	d3c3      	bcc.n	80085c4 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800864a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800864e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008654:	2b00      	cmp	r3, #0
 8008656:	d016      	beq.n	8008686 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008662:	69fa      	ldr	r2, [r7, #28]
 8008664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008668:	f043 030b 	orr.w	r3, r3, #11
 800866c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008678:	69fa      	ldr	r2, [r7, #28]
 800867a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800867e:	f043 030b 	orr.w	r3, r3, #11
 8008682:	6453      	str	r3, [r2, #68]	; 0x44
 8008684:	e015      	b.n	80086b2 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008694:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008698:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800869c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	69fa      	ldr	r2, [r7, #28]
 80086a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086ac:	f043 030b 	orr.w	r3, r3, #11
 80086b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69fa      	ldr	r2, [r7, #28]
 80086bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80086c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80086d6:	461a      	mov	r2, r3
 80086d8:	f006 fcc4 	bl	800f064 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	695a      	ldr	r2, [r3, #20]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80086ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f006 fbe0 	bl	800eeb6 <USB_ReadInterrupts>
 80086f6:	4603      	mov	r3, r0
 80086f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008700:	d124      	bne.n	800874c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f006 fc76 	bl	800eff8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4618      	mov	r0, r3
 8008712:	f005 fd80 	bl	800e216 <USB_GetDevSpeed>
 8008716:	4603      	mov	r3, r0
 8008718:	461a      	mov	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681c      	ldr	r4, [r3, #0]
 8008722:	f001 f971 	bl	8009a08 <HAL_RCC_GetHCLKFreq>
 8008726:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800872c:	b2db      	uxtb	r3, r3
 800872e:	461a      	mov	r2, r3
 8008730:	4620      	mov	r0, r4
 8008732:	f005 faaf 	bl	800dc94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f00d ff21 	bl	801657e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	695a      	ldr	r2, [r3, #20]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800874a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4618      	mov	r0, r3
 8008752:	f006 fbb0 	bl	800eeb6 <USB_ReadInterrupts>
 8008756:	4603      	mov	r3, r0
 8008758:	f003 0310 	and.w	r3, r3, #16
 800875c:	2b10      	cmp	r3, #16
 800875e:	d161      	bne.n	8008824 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	699a      	ldr	r2, [r3, #24]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0210 	bic.w	r2, r2, #16
 800876e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f003 020f 	and.w	r2, r3, #15
 800877c:	4613      	mov	r3, r2
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	1a9b      	subs	r3, r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	4413      	add	r3, r2
 800878c:	3304      	adds	r3, #4
 800878e:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	0c5b      	lsrs	r3, r3, #17
 8008794:	f003 030f 	and.w	r3, r3, #15
 8008798:	2b02      	cmp	r3, #2
 800879a:	d124      	bne.n	80087e6 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80087a2:	4013      	ands	r3, r2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d035      	beq.n	8008814 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	091b      	lsrs	r3, r3, #4
 80087b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80087b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	6a38      	ldr	r0, [r7, #32]
 80087bc:	f006 fa28 	bl	800ec10 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	091b      	lsrs	r3, r3, #4
 80087c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087cc:	441a      	add	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	091b      	lsrs	r3, r3, #4
 80087da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087de:	441a      	add	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	619a      	str	r2, [r3, #24]
 80087e4:	e016      	b.n	8008814 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	0c5b      	lsrs	r3, r3, #17
 80087ea:	f003 030f 	and.w	r3, r3, #15
 80087ee:	2b06      	cmp	r3, #6
 80087f0:	d110      	bne.n	8008814 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80087f8:	2208      	movs	r2, #8
 80087fa:	4619      	mov	r1, r3
 80087fc:	6a38      	ldr	r0, [r7, #32]
 80087fe:	f006 fa07 	bl	800ec10 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	699a      	ldr	r2, [r3, #24]
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	091b      	lsrs	r3, r3, #4
 800880a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800880e:	441a      	add	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	699a      	ldr	r2, [r3, #24]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f042 0210 	orr.w	r2, r2, #16
 8008822:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4618      	mov	r0, r3
 800882a:	f006 fb44 	bl	800eeb6 <USB_ReadInterrupts>
 800882e:	4603      	mov	r3, r0
 8008830:	f003 0308 	and.w	r3, r3, #8
 8008834:	2b08      	cmp	r3, #8
 8008836:	d10a      	bne.n	800884e <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f00d fe92 	bl	8016562 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695a      	ldr	r2, [r3, #20]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f002 0208 	and.w	r2, r2, #8
 800884c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f006 fb2f 	bl	800eeb6 <USB_ReadInterrupts>
 8008858:	4603      	mov	r3, r0
 800885a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800885e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008862:	d10f      	bne.n	8008884 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	b2db      	uxtb	r3, r3
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f00d fef4 	bl	801665c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	695a      	ldr	r2, [r3, #20]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008882:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4618      	mov	r0, r3
 800888a:	f006 fb14 	bl	800eeb6 <USB_ReadInterrupts>
 800888e:	4603      	mov	r3, r0
 8008890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008898:	d10f      	bne.n	80088ba <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f00d fec7 	bl	8016638 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	695a      	ldr	r2, [r3, #20]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80088b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4618      	mov	r0, r3
 80088c0:	f006 faf9 	bl	800eeb6 <USB_ReadInterrupts>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ce:	d10a      	bne.n	80088e6 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f00d fed5 	bl	8016680 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	695a      	ldr	r2, [r3, #20]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80088e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f006 fae3 	bl	800eeb6 <USB_ReadInterrupts>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	d115      	bne.n	8008926 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f00d fec5 	bl	801669c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6859      	ldr	r1, [r3, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	430a      	orrs	r2, r1
 8008920:	605a      	str	r2, [r3, #4]
 8008922:	e000      	b.n	8008926 <HAL_PCD_IRQHandler+0x740>
      return;
 8008924:	bf00      	nop
    }
  }
}
 8008926:	3734      	adds	r7, #52	; 0x34
 8008928:	46bd      	mov	sp, r7
 800892a:	bd90      	pop	{r4, r7, pc}

0800892c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_PCD_SetAddress+0x1a>
 8008942:	2302      	movs	r3, #2
 8008944:	e013      	b.n	800896e <HAL_PCD_SetAddress+0x42>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	78fa      	ldrb	r2, [r7, #3]
 8008952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	4611      	mov	r1, r2
 800895e:	4618      	mov	r0, r3
 8008960:	f006 fa53 	bl	800ee0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	4608      	mov	r0, r1
 8008980:	4611      	mov	r1, r2
 8008982:	461a      	mov	r2, r3
 8008984:	4603      	mov	r3, r0
 8008986:	70fb      	strb	r3, [r7, #3]
 8008988:	460b      	mov	r3, r1
 800898a:	803b      	strh	r3, [r7, #0]
 800898c:	4613      	mov	r3, r2
 800898e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008998:	2b00      	cmp	r3, #0
 800899a:	da0f      	bge.n	80089bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	f003 020f 	and.w	r2, r3, #15
 80089a2:	4613      	mov	r3, r2
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	1a9b      	subs	r3, r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	3338      	adds	r3, #56	; 0x38
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	4413      	add	r3, r2
 80089b0:	3304      	adds	r3, #4
 80089b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2201      	movs	r2, #1
 80089b8:	705a      	strb	r2, [r3, #1]
 80089ba:	e00f      	b.n	80089dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089bc:	78fb      	ldrb	r3, [r7, #3]
 80089be:	f003 020f 	and.w	r2, r3, #15
 80089c2:	4613      	mov	r3, r2
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	4413      	add	r3, r2
 80089d2:	3304      	adds	r3, #4
 80089d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80089e8:	883a      	ldrh	r2, [r7, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	78ba      	ldrb	r2, [r7, #2]
 80089f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008a06:	78bb      	ldrb	r3, [r7, #2]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d102      	bne.n	8008a12 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_PCD_EP_Open+0xaa>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e00e      	b.n	8008a3e <HAL_PCD_EP_Open+0xc8>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68f9      	ldr	r1, [r7, #12]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f005 fc16 	bl	800e260 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008a3c:	7afb      	ldrb	r3, [r7, #11]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	da0f      	bge.n	8008a7a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	f003 020f 	and.w	r2, r3, #15
 8008a60:	4613      	mov	r3, r2
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	1a9b      	subs	r3, r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	3338      	adds	r3, #56	; 0x38
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	3304      	adds	r3, #4
 8008a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	705a      	strb	r2, [r3, #1]
 8008a78:	e00f      	b.n	8008a9a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	f003 020f 	and.w	r2, r3, #15
 8008a80:	4613      	mov	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	4413      	add	r3, r2
 8008a90:	3304      	adds	r3, #4
 8008a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008a9a:	78fb      	ldrb	r3, [r7, #3]
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d101      	bne.n	8008ab4 <HAL_PCD_EP_Close+0x6e>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e00e      	b.n	8008ad2 <HAL_PCD_EP_Close+0x8c>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68f9      	ldr	r1, [r7, #12]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f005 fc54 	bl	800e370 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b086      	sub	sp, #24
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	603b      	str	r3, [r7, #0]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008aea:	7afb      	ldrb	r3, [r7, #11]
 8008aec:	f003 020f 	and.w	r2, r3, #15
 8008af0:	4613      	mov	r3, r2
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	1a9b      	subs	r3, r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4413      	add	r3, r2
 8008b00:	3304      	adds	r3, #4
 8008b02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2200      	movs	r2, #0
 8008b14:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b1c:	7afb      	ldrb	r3, [r7, #11]
 8008b1e:	f003 030f 	and.w	r3, r3, #15
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d102      	bne.n	8008b36 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b36:	7afb      	ldrb	r3, [r7, #11]
 8008b38:	f003 030f 	and.w	r3, r3, #15
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6818      	ldr	r0, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6979      	ldr	r1, [r7, #20]
 8008b4e:	f005 fed7 	bl	800e900 <USB_EP0StartXfer>
 8008b52:	e008      	b.n	8008b66 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	6979      	ldr	r1, [r7, #20]
 8008b62:	f005 fc89 	bl	800e478 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008b7c:	78fb      	ldrb	r3, [r7, #3]
 8008b7e:	f003 020f 	and.w	r2, r3, #15
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	1a9b      	subs	r3, r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008b92:	681b      	ldr	r3, [r3, #0]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	607a      	str	r2, [r7, #4]
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	460b      	mov	r3, r1
 8008bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bb0:	7afb      	ldrb	r3, [r7, #11]
 8008bb2:	f003 020f 	and.w	r2, r3, #15
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	1a9b      	subs	r3, r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	3338      	adds	r3, #56	; 0x38
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008be0:	7afb      	ldrb	r3, [r7, #11]
 8008be2:	f003 030f 	and.w	r3, r3, #15
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d102      	bne.n	8008bfa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008bfa:	7afb      	ldrb	r3, [r7, #11]
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d109      	bne.n	8008c18 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	461a      	mov	r2, r3
 8008c10:	6979      	ldr	r1, [r7, #20]
 8008c12:	f005 fe75 	bl	800e900 <USB_EP0StartXfer>
 8008c16:	e008      	b.n	8008c2a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	461a      	mov	r2, r3
 8008c24:	6979      	ldr	r1, [r7, #20]
 8008c26:	f005 fc27 	bl	800e478 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	f003 020f 	and.w	r2, r3, #15
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d901      	bls.n	8008c52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e050      	b.n	8008cf4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	da0f      	bge.n	8008c7a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	f003 020f 	and.w	r2, r3, #15
 8008c60:	4613      	mov	r3, r2
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	3338      	adds	r3, #56	; 0x38
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	3304      	adds	r3, #4
 8008c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2201      	movs	r2, #1
 8008c76:	705a      	strb	r2, [r3, #1]
 8008c78:	e00d      	b.n	8008c96 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008c7a:	78fa      	ldrb	r2, [r7, #3]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c9c:	78fb      	ldrb	r3, [r7, #3]
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d101      	bne.n	8008cb6 <HAL_PCD_EP_SetStall+0x82>
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e01e      	b.n	8008cf4 <HAL_PCD_EP_SetStall+0xc0>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f005 ffcc 	bl	800ec62 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6818      	ldr	r0, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	b2d9      	uxtb	r1, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f006 f9bd 	bl	800f064 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008d08:	78fb      	ldrb	r3, [r7, #3]
 8008d0a:	f003 020f 	and.w	r2, r3, #15
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d901      	bls.n	8008d1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e042      	b.n	8008da0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	da0f      	bge.n	8008d42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	f003 020f 	and.w	r2, r3, #15
 8008d28:	4613      	mov	r3, r2
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	1a9b      	subs	r3, r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	3338      	adds	r3, #56	; 0x38
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	4413      	add	r3, r2
 8008d36:	3304      	adds	r3, #4
 8008d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	705a      	strb	r2, [r3, #1]
 8008d40:	e00f      	b.n	8008d62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d42:	78fb      	ldrb	r3, [r7, #3]
 8008d44:	f003 020f 	and.w	r2, r3, #15
 8008d48:	4613      	mov	r3, r2
 8008d4a:	00db      	lsls	r3, r3, #3
 8008d4c:	1a9b      	subs	r3, r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	4413      	add	r3, r2
 8008d58:	3304      	adds	r3, #4
 8008d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d68:	78fb      	ldrb	r3, [r7, #3]
 8008d6a:	f003 030f 	and.w	r3, r3, #15
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d101      	bne.n	8008d82 <HAL_PCD_EP_ClrStall+0x86>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	e00e      	b.n	8008da0 <HAL_PCD_EP_ClrStall+0xa4>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68f9      	ldr	r1, [r7, #12]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f005 ffd4 	bl	800ed3e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	; 0x28
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	00db      	lsls	r3, r3, #3
 8008dc2:	1a9b      	subs	r3, r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	3338      	adds	r3, #56	; 0x38
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	4413      	add	r3, r2
 8008dcc:	3304      	adds	r3, #4
 8008dce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	699a      	ldr	r2, [r3, #24]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d901      	bls.n	8008de0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e06c      	b.n	8008eba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	695a      	ldr	r2, [r3, #20]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d902      	bls.n	8008dfc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	3303      	adds	r3, #3
 8008e00:	089b      	lsrs	r3, r3, #2
 8008e02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e04:	e02b      	b.n	8008e5e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	695a      	ldr	r2, [r3, #20]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d902      	bls.n	8008e22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	3303      	adds	r3, #3
 8008e26:	089b      	lsrs	r3, r3, #2
 8008e28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	68d9      	ldr	r1, [r3, #12]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6978      	ldr	r0, [r7, #20]
 8008e42:	f005 feb0 	bl	800eba6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	441a      	add	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	699a      	ldr	r2, [r3, #24]
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	441a      	add	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d809      	bhi.n	8008e88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	699a      	ldr	r2, [r3, #24]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d203      	bcs.n	8008e88 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1be      	bne.n	8008e06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	695a      	ldr	r2, [r3, #20]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d811      	bhi.n	8008eb8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	43db      	mvns	r3, r3
 8008eae:	6939      	ldr	r1, [r7, #16]
 8008eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3720      	adds	r7, #32
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	333c      	adds	r3, #60	; 0x3c
 8008edc:	3304      	adds	r3, #4
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	f040 80b3 	bne.w	8009062 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f003 0308 	and.w	r3, r3, #8
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d028      	beq.n	8008f58 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4a70      	ldr	r2, [pc, #448]	; (80090cc <PCD_EP_OutXfrComplete_int+0x208>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d90e      	bls.n	8008f2c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d009      	beq.n	8008f2c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f24:	461a      	mov	r2, r3
 8008f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f2a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f00d fad1 	bl	80164d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6818      	ldr	r0, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	2101      	movs	r1, #1
 8008f40:	f006 f890 	bl	800f064 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f50:	461a      	mov	r2, r3
 8008f52:	2308      	movs	r3, #8
 8008f54:	6093      	str	r3, [r2, #8]
 8008f56:	e0b3      	b.n	80090c0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d009      	beq.n	8008f76 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6e:	461a      	mov	r2, r3
 8008f70:	2320      	movs	r3, #32
 8008f72:	6093      	str	r3, [r2, #8]
 8008f74:	e0a4      	b.n	80090c0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f040 809f 	bne.w	80090c0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	4a51      	ldr	r2, [pc, #324]	; (80090cc <PCD_EP_OutXfrComplete_int+0x208>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d90f      	bls.n	8008faa <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00a      	beq.n	8008faa <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fa6:	6093      	str	r3, [r2, #8]
 8008fa8:	e08a      	b.n	80090c0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	1a9b      	subs	r3, r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008fbc:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	0159      	lsls	r1, r3, #5
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	440b      	add	r3, r1
 8008fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008fd0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	00db      	lsls	r3, r3, #3
 8008fda:	1a9b      	subs	r3, r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4403      	add	r3, r0
 8008fe0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008fe4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	4613      	mov	r3, r2
 8008fec:	00db      	lsls	r3, r3, #3
 8008fee:	1a9b      	subs	r3, r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	440b      	add	r3, r1
 8008ff4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ff8:	6819      	ldr	r1, [r3, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	4613      	mov	r3, r2
 8009000:	00db      	lsls	r3, r3, #3
 8009002:	1a9b      	subs	r3, r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4403      	add	r3, r0
 8009008:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4419      	add	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4613      	mov	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	1a9b      	subs	r3, r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4403      	add	r3, r0
 800901e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009022:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f00d fa64 	bl	80164f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d144      	bne.n	80090c0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8009036:	6879      	ldr	r1, [r7, #4]
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	4613      	mov	r3, r2
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	1a9b      	subs	r3, r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	440b      	add	r3, r1
 8009044:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d138      	bne.n	80090c0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6818      	ldr	r0, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009058:	461a      	mov	r2, r3
 800905a:	2101      	movs	r1, #1
 800905c:	f006 f802 	bl	800f064 <USB_EP0_OutStart>
 8009060:	e02e      	b.n	80090c0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4a1a      	ldr	r2, [pc, #104]	; (80090d0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d124      	bne.n	80090b4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009080:	461a      	mov	r2, r3
 8009082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009086:	6093      	str	r3, [r2, #8]
 8009088:	e01a      	b.n	80090c0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	f003 0320 	and.w	r3, r3, #32
 8009090:	2b00      	cmp	r3, #0
 8009092:	d008      	beq.n	80090a6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a0:	461a      	mov	r2, r3
 80090a2:	2320      	movs	r3, #32
 80090a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f00d fa23 	bl	80164f8 <HAL_PCD_DataOutStageCallback>
 80090b2:	e005      	b.n	80090c0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f00d fa1c 	bl	80164f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3718      	adds	r7, #24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	4f54300a 	.word	0x4f54300a
 80090d0:	4f54310a 	.word	0x4f54310a

080090d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	333c      	adds	r3, #60	; 0x3c
 80090ec:	3304      	adds	r3, #4
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d113      	bne.n	8009132 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4a1f      	ldr	r2, [pc, #124]	; (800918c <PCD_EP_OutSetupPacket_int+0xb8>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d922      	bls.n	8009158 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01d      	beq.n	8009158 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009128:	461a      	mov	r2, r3
 800912a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800912e:	6093      	str	r3, [r2, #8]
 8009130:	e012      	b.n	8009158 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4a16      	ldr	r2, [pc, #88]	; (8009190 <PCD_EP_OutSetupPacket_int+0xbc>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d10e      	bne.n	8009158 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009140:	2b00      	cmp	r3, #0
 8009142:	d009      	beq.n	8009158 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009150:	461a      	mov	r2, r3
 8009152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009156:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f00d f9bb 	bl	80164d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4a0a      	ldr	r2, [pc, #40]	; (800918c <PCD_EP_OutSetupPacket_int+0xb8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d90c      	bls.n	8009180 <PCD_EP_OutSetupPacket_int+0xac>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d108      	bne.n	8009180 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009178:	461a      	mov	r2, r3
 800917a:	2101      	movs	r1, #1
 800917c:	f005 ff72 	bl	800f064 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	4f54300a 	.word	0x4f54300a
 8009190:	4f54310a 	.word	0x4f54310a

08009194 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
 80091a0:	4613      	mov	r3, r2
 80091a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d107      	bne.n	80091c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80091b2:	883b      	ldrh	r3, [r7, #0]
 80091b4:	0419      	lsls	r1, r3, #16
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	430a      	orrs	r2, r1
 80091be:	629a      	str	r2, [r3, #40]	; 0x28
 80091c0:	e028      	b.n	8009214 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c8:	0c1b      	lsrs	r3, r3, #16
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	4413      	add	r3, r2
 80091ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
 80091d4:	e00d      	b.n	80091f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	3340      	adds	r3, #64	; 0x40
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	0c1b      	lsrs	r3, r3, #16
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	4413      	add	r3, r2
 80091ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	3301      	adds	r3, #1
 80091f0:	73fb      	strb	r3, [r7, #15]
 80091f2:	7bfa      	ldrb	r2, [r7, #15]
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d3ec      	bcc.n	80091d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80091fc:	883b      	ldrh	r3, [r7, #0]
 80091fe:	0418      	lsls	r0, r3, #16
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6819      	ldr	r1, [r3, #0]
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	3b01      	subs	r3, #1
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	4302      	orrs	r2, r0
 800920c:	3340      	adds	r3, #64	; 0x40
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009222:	b480      	push	{r7}
 8009224:	b083      	sub	sp, #12
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	887a      	ldrh	r2, [r7, #2]
 8009234:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e22d      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d075      	beq.n	8009366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800927a:	4ba3      	ldr	r3, [pc, #652]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f003 030c 	and.w	r3, r3, #12
 8009282:	2b04      	cmp	r3, #4
 8009284:	d00c      	beq.n	80092a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009286:	4ba0      	ldr	r3, [pc, #640]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800928e:	2b08      	cmp	r3, #8
 8009290:	d112      	bne.n	80092b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009292:	4b9d      	ldr	r3, [pc, #628]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800929a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800929e:	d10b      	bne.n	80092b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092a0:	4b99      	ldr	r3, [pc, #612]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d05b      	beq.n	8009364 <HAL_RCC_OscConfig+0x108>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d157      	bne.n	8009364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e208      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092c0:	d106      	bne.n	80092d0 <HAL_RCC_OscConfig+0x74>
 80092c2:	4b91      	ldr	r3, [pc, #580]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a90      	ldr	r2, [pc, #576]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80092c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	e01d      	b.n	800930c <HAL_RCC_OscConfig+0xb0>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092d8:	d10c      	bne.n	80092f4 <HAL_RCC_OscConfig+0x98>
 80092da:	4b8b      	ldr	r3, [pc, #556]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a8a      	ldr	r2, [pc, #552]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80092e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	4b88      	ldr	r3, [pc, #544]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a87      	ldr	r2, [pc, #540]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80092ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	e00b      	b.n	800930c <HAL_RCC_OscConfig+0xb0>
 80092f4:	4b84      	ldr	r3, [pc, #528]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a83      	ldr	r2, [pc, #524]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80092fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	4b81      	ldr	r3, [pc, #516]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a80      	ldr	r2, [pc, #512]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800930a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d013      	beq.n	800933c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009314:	f7fc ffda 	bl	80062cc <HAL_GetTick>
 8009318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800931a:	e008      	b.n	800932e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800931c:	f7fc ffd6 	bl	80062cc <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	2b64      	cmp	r3, #100	; 0x64
 8009328:	d901      	bls.n	800932e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e1cd      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800932e:	4b76      	ldr	r3, [pc, #472]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0f0      	beq.n	800931c <HAL_RCC_OscConfig+0xc0>
 800933a:	e014      	b.n	8009366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800933c:	f7fc ffc6 	bl	80062cc <HAL_GetTick>
 8009340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009342:	e008      	b.n	8009356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009344:	f7fc ffc2 	bl	80062cc <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	2b64      	cmp	r3, #100	; 0x64
 8009350:	d901      	bls.n	8009356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e1b9      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009356:	4b6c      	ldr	r3, [pc, #432]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1f0      	bne.n	8009344 <HAL_RCC_OscConfig+0xe8>
 8009362:	e000      	b.n	8009366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0302 	and.w	r3, r3, #2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d063      	beq.n	800943a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009372:	4b65      	ldr	r3, [pc, #404]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 030c 	and.w	r3, r3, #12
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00b      	beq.n	8009396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800937e:	4b62      	ldr	r3, [pc, #392]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009386:	2b08      	cmp	r3, #8
 8009388:	d11c      	bne.n	80093c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800938a:	4b5f      	ldr	r3, [pc, #380]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d116      	bne.n	80093c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009396:	4b5c      	ldr	r3, [pc, #368]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d005      	beq.n	80093ae <HAL_RCC_OscConfig+0x152>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d001      	beq.n	80093ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e18d      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093ae:	4b56      	ldr	r3, [pc, #344]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	4952      	ldr	r1, [pc, #328]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093c2:	e03a      	b.n	800943a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d020      	beq.n	800940e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093cc:	4b4f      	ldr	r3, [pc, #316]	; (800950c <HAL_RCC_OscConfig+0x2b0>)
 80093ce:	2201      	movs	r2, #1
 80093d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093d2:	f7fc ff7b 	bl	80062cc <HAL_GetTick>
 80093d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093d8:	e008      	b.n	80093ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093da:	f7fc ff77 	bl	80062cc <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d901      	bls.n	80093ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e16e      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093ec:	4b46      	ldr	r3, [pc, #280]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0302 	and.w	r3, r3, #2
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d0f0      	beq.n	80093da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093f8:	4b43      	ldr	r3, [pc, #268]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	00db      	lsls	r3, r3, #3
 8009406:	4940      	ldr	r1, [pc, #256]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009408:	4313      	orrs	r3, r2
 800940a:	600b      	str	r3, [r1, #0]
 800940c:	e015      	b.n	800943a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800940e:	4b3f      	ldr	r3, [pc, #252]	; (800950c <HAL_RCC_OscConfig+0x2b0>)
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009414:	f7fc ff5a 	bl	80062cc <HAL_GetTick>
 8009418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800941a:	e008      	b.n	800942e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800941c:	f7fc ff56 	bl	80062cc <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	2b02      	cmp	r3, #2
 8009428:	d901      	bls.n	800942e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e14d      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800942e:	4b36      	ldr	r3, [pc, #216]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1f0      	bne.n	800941c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0308 	and.w	r3, r3, #8
 8009442:	2b00      	cmp	r3, #0
 8009444:	d030      	beq.n	80094a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d016      	beq.n	800947c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800944e:	4b30      	ldr	r3, [pc, #192]	; (8009510 <HAL_RCC_OscConfig+0x2b4>)
 8009450:	2201      	movs	r2, #1
 8009452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009454:	f7fc ff3a 	bl	80062cc <HAL_GetTick>
 8009458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800945a:	e008      	b.n	800946e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800945c:	f7fc ff36 	bl	80062cc <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	2b02      	cmp	r3, #2
 8009468:	d901      	bls.n	800946e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e12d      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800946e:	4b26      	ldr	r3, [pc, #152]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 8009470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b00      	cmp	r3, #0
 8009478:	d0f0      	beq.n	800945c <HAL_RCC_OscConfig+0x200>
 800947a:	e015      	b.n	80094a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800947c:	4b24      	ldr	r3, [pc, #144]	; (8009510 <HAL_RCC_OscConfig+0x2b4>)
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009482:	f7fc ff23 	bl	80062cc <HAL_GetTick>
 8009486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009488:	e008      	b.n	800949c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800948a:	f7fc ff1f 	bl	80062cc <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	2b02      	cmp	r3, #2
 8009496:	d901      	bls.n	800949c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e116      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800949c:	4b1a      	ldr	r3, [pc, #104]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 800949e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1f0      	bne.n	800948a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 80a0 	beq.w	80095f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094b6:	2300      	movs	r3, #0
 80094b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094ba:	4b13      	ldr	r3, [pc, #76]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10f      	bne.n	80094e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	4b0f      	ldr	r3, [pc, #60]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80094cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ce:	4a0e      	ldr	r2, [pc, #56]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80094d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094d4:	6413      	str	r3, [r2, #64]	; 0x40
 80094d6:	4b0c      	ldr	r3, [pc, #48]	; (8009508 <HAL_RCC_OscConfig+0x2ac>)
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80094e2:	2301      	movs	r3, #1
 80094e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094e6:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <HAL_RCC_OscConfig+0x2b8>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d121      	bne.n	8009536 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094f2:	4b08      	ldr	r3, [pc, #32]	; (8009514 <HAL_RCC_OscConfig+0x2b8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a07      	ldr	r2, [pc, #28]	; (8009514 <HAL_RCC_OscConfig+0x2b8>)
 80094f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094fe:	f7fc fee5 	bl	80062cc <HAL_GetTick>
 8009502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009504:	e011      	b.n	800952a <HAL_RCC_OscConfig+0x2ce>
 8009506:	bf00      	nop
 8009508:	40023800 	.word	0x40023800
 800950c:	42470000 	.word	0x42470000
 8009510:	42470e80 	.word	0x42470e80
 8009514:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009518:	f7fc fed8 	bl	80062cc <HAL_GetTick>
 800951c:	4602      	mov	r2, r0
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	2b02      	cmp	r3, #2
 8009524:	d901      	bls.n	800952a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e0cf      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800952a:	4b6a      	ldr	r3, [pc, #424]	; (80096d4 <HAL_RCC_OscConfig+0x478>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0f0      	beq.n	8009518 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d106      	bne.n	800954c <HAL_RCC_OscConfig+0x2f0>
 800953e:	4b66      	ldr	r3, [pc, #408]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 8009540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009542:	4a65      	ldr	r2, [pc, #404]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 8009544:	f043 0301 	orr.w	r3, r3, #1
 8009548:	6713      	str	r3, [r2, #112]	; 0x70
 800954a:	e01c      	b.n	8009586 <HAL_RCC_OscConfig+0x32a>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	2b05      	cmp	r3, #5
 8009552:	d10c      	bne.n	800956e <HAL_RCC_OscConfig+0x312>
 8009554:	4b60      	ldr	r3, [pc, #384]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 8009556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009558:	4a5f      	ldr	r2, [pc, #380]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 800955a:	f043 0304 	orr.w	r3, r3, #4
 800955e:	6713      	str	r3, [r2, #112]	; 0x70
 8009560:	4b5d      	ldr	r3, [pc, #372]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 8009562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009564:	4a5c      	ldr	r2, [pc, #368]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 8009566:	f043 0301 	orr.w	r3, r3, #1
 800956a:	6713      	str	r3, [r2, #112]	; 0x70
 800956c:	e00b      	b.n	8009586 <HAL_RCC_OscConfig+0x32a>
 800956e:	4b5a      	ldr	r3, [pc, #360]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 8009570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009572:	4a59      	ldr	r2, [pc, #356]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 8009574:	f023 0301 	bic.w	r3, r3, #1
 8009578:	6713      	str	r3, [r2, #112]	; 0x70
 800957a:	4b57      	ldr	r3, [pc, #348]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 800957c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957e:	4a56      	ldr	r2, [pc, #344]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 8009580:	f023 0304 	bic.w	r3, r3, #4
 8009584:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d015      	beq.n	80095ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800958e:	f7fc fe9d 	bl	80062cc <HAL_GetTick>
 8009592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009594:	e00a      	b.n	80095ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009596:	f7fc fe99 	bl	80062cc <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d901      	bls.n	80095ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e08e      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095ac:	4b4a      	ldr	r3, [pc, #296]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 80095ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b0:	f003 0302 	and.w	r3, r3, #2
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0ee      	beq.n	8009596 <HAL_RCC_OscConfig+0x33a>
 80095b8:	e014      	b.n	80095e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095ba:	f7fc fe87 	bl	80062cc <HAL_GetTick>
 80095be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095c0:	e00a      	b.n	80095d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095c2:	f7fc fe83 	bl	80062cc <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d901      	bls.n	80095d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e078      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095d8:	4b3f      	ldr	r3, [pc, #252]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 80095da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1ee      	bne.n	80095c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d105      	bne.n	80095f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095ea:	4b3b      	ldr	r3, [pc, #236]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	4a3a      	ldr	r2, [pc, #232]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 80095f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d064      	beq.n	80096c8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80095fe:	4b36      	ldr	r3, [pc, #216]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 030c 	and.w	r3, r3, #12
 8009606:	2b08      	cmp	r3, #8
 8009608:	d05c      	beq.n	80096c4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	2b02      	cmp	r3, #2
 8009610:	d141      	bne.n	8009696 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009612:	4b32      	ldr	r3, [pc, #200]	; (80096dc <HAL_RCC_OscConfig+0x480>)
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009618:	f7fc fe58 	bl	80062cc <HAL_GetTick>
 800961c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800961e:	e008      	b.n	8009632 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009620:	f7fc fe54 	bl	80062cc <HAL_GetTick>
 8009624:	4602      	mov	r2, r0
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	2b02      	cmp	r3, #2
 800962c:	d901      	bls.n	8009632 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800962e:	2303      	movs	r3, #3
 8009630:	e04b      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009632:	4b29      	ldr	r3, [pc, #164]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1f0      	bne.n	8009620 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69da      	ldr	r2, [r3, #28]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	431a      	orrs	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	019b      	lsls	r3, r3, #6
 800964e:	431a      	orrs	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009654:	085b      	lsrs	r3, r3, #1
 8009656:	3b01      	subs	r3, #1
 8009658:	041b      	lsls	r3, r3, #16
 800965a:	431a      	orrs	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009660:	061b      	lsls	r3, r3, #24
 8009662:	491d      	ldr	r1, [pc, #116]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 8009664:	4313      	orrs	r3, r2
 8009666:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009668:	4b1c      	ldr	r3, [pc, #112]	; (80096dc <HAL_RCC_OscConfig+0x480>)
 800966a:	2201      	movs	r2, #1
 800966c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800966e:	f7fc fe2d 	bl	80062cc <HAL_GetTick>
 8009672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009674:	e008      	b.n	8009688 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009676:	f7fc fe29 	bl	80062cc <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	2b02      	cmp	r3, #2
 8009682:	d901      	bls.n	8009688 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e020      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009688:	4b13      	ldr	r3, [pc, #76]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0f0      	beq.n	8009676 <HAL_RCC_OscConfig+0x41a>
 8009694:	e018      	b.n	80096c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009696:	4b11      	ldr	r3, [pc, #68]	; (80096dc <HAL_RCC_OscConfig+0x480>)
 8009698:	2200      	movs	r2, #0
 800969a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800969c:	f7fc fe16 	bl	80062cc <HAL_GetTick>
 80096a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096a2:	e008      	b.n	80096b6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096a4:	f7fc fe12 	bl	80062cc <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d901      	bls.n	80096b6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e009      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096b6:	4b08      	ldr	r3, [pc, #32]	; (80096d8 <HAL_RCC_OscConfig+0x47c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1f0      	bne.n	80096a4 <HAL_RCC_OscConfig+0x448>
 80096c2:	e001      	b.n	80096c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e000      	b.n	80096ca <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	40007000 	.word	0x40007000
 80096d8:	40023800 	.word	0x40023800
 80096dc:	42470060 	.word	0x42470060

080096e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e0ca      	b.n	800988a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096f4:	4b67      	ldr	r3, [pc, #412]	; (8009894 <HAL_RCC_ClockConfig+0x1b4>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 030f 	and.w	r3, r3, #15
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d90c      	bls.n	800971c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009702:	4b64      	ldr	r3, [pc, #400]	; (8009894 <HAL_RCC_ClockConfig+0x1b4>)
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	b2d2      	uxtb	r2, r2
 8009708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800970a:	4b62      	ldr	r3, [pc, #392]	; (8009894 <HAL_RCC_ClockConfig+0x1b4>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 030f 	and.w	r3, r3, #15
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d001      	beq.n	800971c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e0b6      	b.n	800988a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d020      	beq.n	800976a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d005      	beq.n	8009740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009734:	4b58      	ldr	r3, [pc, #352]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	4a57      	ldr	r2, [pc, #348]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 800973a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800973e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 0308 	and.w	r3, r3, #8
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800974c:	4b52      	ldr	r3, [pc, #328]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	4a51      	ldr	r2, [pc, #324]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009758:	4b4f      	ldr	r3, [pc, #316]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	494c      	ldr	r1, [pc, #304]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009766:	4313      	orrs	r3, r2
 8009768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b00      	cmp	r3, #0
 8009774:	d044      	beq.n	8009800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d107      	bne.n	800978e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800977e:	4b46      	ldr	r3, [pc, #280]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d119      	bne.n	80097be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e07d      	b.n	800988a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d003      	beq.n	800979e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800979a:	2b03      	cmp	r3, #3
 800979c:	d107      	bne.n	80097ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800979e:	4b3e      	ldr	r3, [pc, #248]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d109      	bne.n	80097be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e06d      	b.n	800988a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097ae:	4b3a      	ldr	r3, [pc, #232]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e065      	b.n	800988a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097be:	4b36      	ldr	r3, [pc, #216]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f023 0203 	bic.w	r2, r3, #3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	4933      	ldr	r1, [pc, #204]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80097d0:	f7fc fd7c 	bl	80062cc <HAL_GetTick>
 80097d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097d6:	e00a      	b.n	80097ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097d8:	f7fc fd78 	bl	80062cc <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d901      	bls.n	80097ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80097ea:	2303      	movs	r3, #3
 80097ec:	e04d      	b.n	800988a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097ee:	4b2a      	ldr	r3, [pc, #168]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f003 020c 	and.w	r2, r3, #12
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d1eb      	bne.n	80097d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009800:	4b24      	ldr	r3, [pc, #144]	; (8009894 <HAL_RCC_ClockConfig+0x1b4>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 030f 	and.w	r3, r3, #15
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d20c      	bcs.n	8009828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800980e:	4b21      	ldr	r3, [pc, #132]	; (8009894 <HAL_RCC_ClockConfig+0x1b4>)
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	b2d2      	uxtb	r2, r2
 8009814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009816:	4b1f      	ldr	r3, [pc, #124]	; (8009894 <HAL_RCC_ClockConfig+0x1b4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 030f 	and.w	r3, r3, #15
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	429a      	cmp	r2, r3
 8009822:	d001      	beq.n	8009828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e030      	b.n	800988a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b00      	cmp	r3, #0
 8009832:	d008      	beq.n	8009846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009834:	4b18      	ldr	r3, [pc, #96]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	4915      	ldr	r1, [pc, #84]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009842:	4313      	orrs	r3, r2
 8009844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 0308 	and.w	r3, r3, #8
 800984e:	2b00      	cmp	r3, #0
 8009850:	d009      	beq.n	8009866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009852:	4b11      	ldr	r3, [pc, #68]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	490d      	ldr	r1, [pc, #52]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 8009862:	4313      	orrs	r3, r2
 8009864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009866:	f000 f81d 	bl	80098a4 <HAL_RCC_GetSysClockFreq>
 800986a:	4601      	mov	r1, r0
 800986c:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <HAL_RCC_ClockConfig+0x1b8>)
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	091b      	lsrs	r3, r3, #4
 8009872:	f003 030f 	and.w	r3, r3, #15
 8009876:	4a09      	ldr	r2, [pc, #36]	; (800989c <HAL_RCC_ClockConfig+0x1bc>)
 8009878:	5cd3      	ldrb	r3, [r2, r3]
 800987a:	fa21 f303 	lsr.w	r3, r1, r3
 800987e:	4a08      	ldr	r2, [pc, #32]	; (80098a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8009882:	2000      	movs	r0, #0
 8009884:	f7fc fcde 	bl	8006244 <HAL_InitTick>

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	40023c00 	.word	0x40023c00
 8009898:	40023800 	.word	0x40023800
 800989c:	0801e0a4 	.word	0x0801e0a4
 80098a0:	20000134 	.word	0x20000134

080098a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80098aa:	2300      	movs	r3, #0
 80098ac:	607b      	str	r3, [r7, #4]
 80098ae:	2300      	movs	r3, #0
 80098b0:	60fb      	str	r3, [r7, #12]
 80098b2:	2300      	movs	r3, #0
 80098b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098ba:	4b50      	ldr	r3, [pc, #320]	; (80099fc <HAL_RCC_GetSysClockFreq+0x158>)
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f003 030c 	and.w	r3, r3, #12
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	d007      	beq.n	80098d6 <HAL_RCC_GetSysClockFreq+0x32>
 80098c6:	2b08      	cmp	r3, #8
 80098c8:	d008      	beq.n	80098dc <HAL_RCC_GetSysClockFreq+0x38>
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f040 808d 	bne.w	80099ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80098d0:	4b4b      	ldr	r3, [pc, #300]	; (8009a00 <HAL_RCC_GetSysClockFreq+0x15c>)
 80098d2:	60bb      	str	r3, [r7, #8]
       break;
 80098d4:	e08c      	b.n	80099f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80098d6:	4b4b      	ldr	r3, [pc, #300]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x160>)
 80098d8:	60bb      	str	r3, [r7, #8]
      break;
 80098da:	e089      	b.n	80099f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80098dc:	4b47      	ldr	r3, [pc, #284]	; (80099fc <HAL_RCC_GetSysClockFreq+0x158>)
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80098e6:	4b45      	ldr	r3, [pc, #276]	; (80099fc <HAL_RCC_GetSysClockFreq+0x158>)
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d023      	beq.n	800993a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098f2:	4b42      	ldr	r3, [pc, #264]	; (80099fc <HAL_RCC_GetSysClockFreq+0x158>)
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	099b      	lsrs	r3, r3, #6
 80098f8:	f04f 0400 	mov.w	r4, #0
 80098fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009900:	f04f 0200 	mov.w	r2, #0
 8009904:	ea03 0501 	and.w	r5, r3, r1
 8009908:	ea04 0602 	and.w	r6, r4, r2
 800990c:	4a3d      	ldr	r2, [pc, #244]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x160>)
 800990e:	fb02 f106 	mul.w	r1, r2, r6
 8009912:	2200      	movs	r2, #0
 8009914:	fb02 f205 	mul.w	r2, r2, r5
 8009918:	440a      	add	r2, r1
 800991a:	493a      	ldr	r1, [pc, #232]	; (8009a04 <HAL_RCC_GetSysClockFreq+0x160>)
 800991c:	fba5 0101 	umull	r0, r1, r5, r1
 8009920:	1853      	adds	r3, r2, r1
 8009922:	4619      	mov	r1, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f04f 0400 	mov.w	r4, #0
 800992a:	461a      	mov	r2, r3
 800992c:	4623      	mov	r3, r4
 800992e:	f7f7 fa0b 	bl	8000d48 <__aeabi_uldivmod>
 8009932:	4603      	mov	r3, r0
 8009934:	460c      	mov	r4, r1
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e049      	b.n	80099ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800993a:	4b30      	ldr	r3, [pc, #192]	; (80099fc <HAL_RCC_GetSysClockFreq+0x158>)
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	099b      	lsrs	r3, r3, #6
 8009940:	f04f 0400 	mov.w	r4, #0
 8009944:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009948:	f04f 0200 	mov.w	r2, #0
 800994c:	ea03 0501 	and.w	r5, r3, r1
 8009950:	ea04 0602 	and.w	r6, r4, r2
 8009954:	4629      	mov	r1, r5
 8009956:	4632      	mov	r2, r6
 8009958:	f04f 0300 	mov.w	r3, #0
 800995c:	f04f 0400 	mov.w	r4, #0
 8009960:	0154      	lsls	r4, r2, #5
 8009962:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009966:	014b      	lsls	r3, r1, #5
 8009968:	4619      	mov	r1, r3
 800996a:	4622      	mov	r2, r4
 800996c:	1b49      	subs	r1, r1, r5
 800996e:	eb62 0206 	sbc.w	r2, r2, r6
 8009972:	f04f 0300 	mov.w	r3, #0
 8009976:	f04f 0400 	mov.w	r4, #0
 800997a:	0194      	lsls	r4, r2, #6
 800997c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009980:	018b      	lsls	r3, r1, #6
 8009982:	1a5b      	subs	r3, r3, r1
 8009984:	eb64 0402 	sbc.w	r4, r4, r2
 8009988:	f04f 0100 	mov.w	r1, #0
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	00e2      	lsls	r2, r4, #3
 8009992:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009996:	00d9      	lsls	r1, r3, #3
 8009998:	460b      	mov	r3, r1
 800999a:	4614      	mov	r4, r2
 800999c:	195b      	adds	r3, r3, r5
 800999e:	eb44 0406 	adc.w	r4, r4, r6
 80099a2:	f04f 0100 	mov.w	r1, #0
 80099a6:	f04f 0200 	mov.w	r2, #0
 80099aa:	02a2      	lsls	r2, r4, #10
 80099ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80099b0:	0299      	lsls	r1, r3, #10
 80099b2:	460b      	mov	r3, r1
 80099b4:	4614      	mov	r4, r2
 80099b6:	4618      	mov	r0, r3
 80099b8:	4621      	mov	r1, r4
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f04f 0400 	mov.w	r4, #0
 80099c0:	461a      	mov	r2, r3
 80099c2:	4623      	mov	r3, r4
 80099c4:	f7f7 f9c0 	bl	8000d48 <__aeabi_uldivmod>
 80099c8:	4603      	mov	r3, r0
 80099ca:	460c      	mov	r4, r1
 80099cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80099ce:	4b0b      	ldr	r3, [pc, #44]	; (80099fc <HAL_RCC_GetSysClockFreq+0x158>)
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	0c1b      	lsrs	r3, r3, #16
 80099d4:	f003 0303 	and.w	r3, r3, #3
 80099d8:	3301      	adds	r3, #1
 80099da:	005b      	lsls	r3, r3, #1
 80099dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e6:	60bb      	str	r3, [r7, #8]
      break;
 80099e8:	e002      	b.n	80099f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80099ea:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <HAL_RCC_GetSysClockFreq+0x15c>)
 80099ec:	60bb      	str	r3, [r7, #8]
      break;
 80099ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099f0:	68bb      	ldr	r3, [r7, #8]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099fa:	bf00      	nop
 80099fc:	40023800 	.word	0x40023800
 8009a00:	00f42400 	.word	0x00f42400
 8009a04:	00b71b00 	.word	0x00b71b00

08009a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a0c:	4b03      	ldr	r3, [pc, #12]	; (8009a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	20000134 	.word	0x20000134

08009a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a24:	f7ff fff0 	bl	8009a08 <HAL_RCC_GetHCLKFreq>
 8009a28:	4601      	mov	r1, r0
 8009a2a:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	0a9b      	lsrs	r3, r3, #10
 8009a30:	f003 0307 	and.w	r3, r3, #7
 8009a34:	4a03      	ldr	r2, [pc, #12]	; (8009a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a36:	5cd3      	ldrb	r3, [r2, r3]
 8009a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40023800 	.word	0x40023800
 8009a44:	0801e0b4 	.word	0x0801e0b4

08009a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a4c:	f7ff ffdc 	bl	8009a08 <HAL_RCC_GetHCLKFreq>
 8009a50:	4601      	mov	r1, r0
 8009a52:	4b05      	ldr	r3, [pc, #20]	; (8009a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	0b5b      	lsrs	r3, r3, #13
 8009a58:	f003 0307 	and.w	r3, r3, #7
 8009a5c:	4a03      	ldr	r2, [pc, #12]	; (8009a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a5e:	5cd3      	ldrb	r3, [r2, r3]
 8009a60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	40023800 	.word	0x40023800
 8009a6c:	0801e0b4 	.word	0x0801e0b4

08009a70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d105      	bne.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d035      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009a98:	4b62      	ldr	r3, [pc, #392]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a9e:	f7fc fc15 	bl	80062cc <HAL_GetTick>
 8009aa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009aa4:	e008      	b.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009aa6:	f7fc fc11 	bl	80062cc <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d901      	bls.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e0b0      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ab8:	4b5b      	ldr	r3, [pc, #364]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1f0      	bne.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	019a      	lsls	r2, r3, #6
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	071b      	lsls	r3, r3, #28
 8009ad0:	4955      	ldr	r1, [pc, #340]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009ad8:	4b52      	ldr	r3, [pc, #328]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009ada:	2201      	movs	r2, #1
 8009adc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009ade:	f7fc fbf5 	bl	80062cc <HAL_GetTick>
 8009ae2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009ae4:	e008      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009ae6:	f7fc fbf1 	bl	80062cc <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d901      	bls.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e090      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009af8:	4b4b      	ldr	r3, [pc, #300]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0f0      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0302 	and.w	r3, r3, #2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 8083 	beq.w	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b12:	2300      	movs	r3, #0
 8009b14:	60fb      	str	r3, [r7, #12]
 8009b16:	4b44      	ldr	r3, [pc, #272]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1a:	4a43      	ldr	r2, [pc, #268]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b20:	6413      	str	r3, [r2, #64]	; 0x40
 8009b22:	4b41      	ldr	r3, [pc, #260]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009b2e:	4b3f      	ldr	r3, [pc, #252]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a3e      	ldr	r2, [pc, #248]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b3a:	f7fc fbc7 	bl	80062cc <HAL_GetTick>
 8009b3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009b40:	e008      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009b42:	f7fc fbc3 	bl	80062cc <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d901      	bls.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e062      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009b54:	4b35      	ldr	r3, [pc, #212]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0f0      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009b60:	4b31      	ldr	r3, [pc, #196]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d02f      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d028      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b7e:	4b2a      	ldr	r3, [pc, #168]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009b88:	4b29      	ldr	r3, [pc, #164]	; (8009c30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009b8e:	4b28      	ldr	r3, [pc, #160]	; (8009c30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009b94:	4a24      	ldr	r2, [pc, #144]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009b9a:	4b23      	ldr	r3, [pc, #140]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d114      	bne.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009ba6:	f7fc fb91 	bl	80062cc <HAL_GetTick>
 8009baa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bac:	e00a      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bae:	f7fc fb8d 	bl	80062cc <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d901      	bls.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e02a      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bc4:	4b18      	ldr	r3, [pc, #96]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc8:	f003 0302 	and.w	r3, r3, #2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0ee      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bdc:	d10d      	bne.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009bde:	4b12      	ldr	r3, [pc, #72]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bf2:	490d      	ldr	r1, [pc, #52]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	608b      	str	r3, [r1, #8]
 8009bf8:	e005      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009bfa:	4b0b      	ldr	r3, [pc, #44]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	4a0a      	ldr	r2, [pc, #40]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009c04:	6093      	str	r3, [r2, #8]
 8009c06:	4b08      	ldr	r3, [pc, #32]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c12:	4905      	ldr	r1, [pc, #20]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	42470068 	.word	0x42470068
 8009c28:	40023800 	.word	0x40023800
 8009c2c:	40007000 	.word	0x40007000
 8009c30:	42470e40 	.word	0x42470e40

08009c34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e083      	b.n	8009d4e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	7f5b      	ldrb	r3, [r3, #29]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d105      	bne.n	8009c5c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f00b ffc0 	bl	8015bdc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	22ca      	movs	r2, #202	; 0xca
 8009c68:	625a      	str	r2, [r3, #36]	; 0x24
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2253      	movs	r2, #83	; 0x53
 8009c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f944 	bl	8009f00 <RTC_EnterInitMode>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d008      	beq.n	8009c90 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	22ff      	movs	r2, #255	; 0xff
 8009c84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2204      	movs	r2, #4
 8009c8a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e05e      	b.n	8009d4e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	6812      	ldr	r2, [r2, #0]
 8009c9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ca2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6899      	ldr	r1, [r3, #8]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	68d2      	ldr	r2, [r2, #12]
 8009cca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6919      	ldr	r1, [r3, #16]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	041a      	lsls	r2, r3, #16
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	430a      	orrs	r2, r1
 8009cde:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009cee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	f003 0320 	and.w	r3, r3, #32
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10e      	bne.n	8009d1c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f8d6 	bl	8009eb0 <HAL_RTC_WaitForSynchro>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d008      	beq.n	8009d1c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	22ff      	movs	r2, #255	; 0xff
 8009d10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2204      	movs	r2, #4
 8009d16:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e018      	b.n	8009d4e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009d2a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	699a      	ldr	r2, [r3, #24]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	22ff      	movs	r2, #255	; 0xff
 8009d44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
  }
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b086      	sub	sp, #24
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	60f8      	str	r0, [r7, #12]
 8009d5e:	60b9      	str	r1, [r7, #8]
 8009d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009d62:	2300      	movs	r3, #0
 8009d64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009d88:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009d8c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	0c1b      	lsrs	r3, r3, #16
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d98:	b2da      	uxtb	r2, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	0a1b      	lsrs	r3, r3, #8
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	0c1b      	lsrs	r3, r3, #16
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d11a      	bne.n	8009e08 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 f8be 	bl	8009f58 <RTC_Bcd2ToByte>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	461a      	mov	r2, r3
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	785b      	ldrb	r3, [r3, #1]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 f8b5 	bl	8009f58 <RTC_Bcd2ToByte>
 8009dee:	4603      	mov	r3, r0
 8009df0:	461a      	mov	r2, r3
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	789b      	ldrb	r3, [r3, #2]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 f8ac 	bl	8009f58 <RTC_Bcd2ToByte>
 8009e00:	4603      	mov	r3, r0
 8009e02:	461a      	mov	r2, r3
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b086      	sub	sp, #24
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	60f8      	str	r0, [r7, #12]
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e30:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	0c1b      	lsrs	r3, r3, #16
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	0a1b      	lsrs	r3, r3, #8
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	f003 031f 	and.w	r3, r3, #31
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	0b5b      	lsrs	r3, r3, #13
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	f003 0307 	and.w	r3, r3, #7
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d11a      	bne.n	8009ea6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	78db      	ldrb	r3, [r3, #3]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 f86f 	bl	8009f58 <RTC_Bcd2ToByte>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	785b      	ldrb	r3, [r3, #1]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 f866 	bl	8009f58 <RTC_Bcd2ToByte>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	461a      	mov	r2, r3
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	789b      	ldrb	r3, [r3, #2]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 f85d 	bl	8009f58 <RTC_Bcd2ToByte>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009eca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ecc:	f7fc f9fe 	bl	80062cc <HAL_GetTick>
 8009ed0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009ed2:	e009      	b.n	8009ee8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009ed4:	f7fc f9fa 	bl	80062cc <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ee2:	d901      	bls.n	8009ee8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e007      	b.n	8009ef8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	f003 0320 	and.w	r3, r3, #32
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0ee      	beq.n	8009ed4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d119      	bne.n	8009f4e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f22:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f24:	f7fc f9d2 	bl	80062cc <HAL_GetTick>
 8009f28:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009f2a:	e009      	b.n	8009f40 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009f2c:	f7fc f9ce 	bl	80062cc <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f3a:	d901      	bls.n	8009f40 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e007      	b.n	8009f50 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0ee      	beq.n	8009f2c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009f66:	79fb      	ldrb	r3, [r7, #7]
 8009f68:	091b      	lsrs	r3, r3, #4
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	f003 030f 	and.w	r3, r3, #15
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	4413      	add	r3, r2
 8009f86:	b2db      	uxtb	r3, r3
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e01d      	b.n	8009fe2 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d105      	bne.n	8009fbe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f00b fe25 	bl	8015c08 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2203      	movs	r2, #3
 8009fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f810 	bl	8009fec <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
	...

08009fec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fec:	b5b0      	push	{r4, r5, r7, lr}
 8009fee:	b08e      	sub	sp, #56	; 0x38
 8009ff0:	af04      	add	r7, sp, #16
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a000:	2300      	movs	r3, #0
 800a002:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a004:	2300      	movs	r3, #0
 800a006:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a008:	2300      	movs	r3, #0
 800a00a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a00c:	2376      	movs	r3, #118	; 0x76
 800a00e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681d      	ldr	r5, [r3, #0]
 800a014:	466c      	mov	r4, sp
 800a016:	f107 0318 	add.w	r3, r7, #24
 800a01a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a01e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a022:	f107 030c 	add.w	r3, r7, #12
 800a026:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a028:	4628      	mov	r0, r5
 800a02a:	f003 f871 	bl	800d110 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800a02e:	4b1c      	ldr	r3, [pc, #112]	; (800a0a0 <HAL_SD_InitCard+0xb4>)
 800a030:	2200      	movs	r2, #0
 800a032:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4618      	mov	r0, r3
 800a03a:	f003 f8b2 	bl	800d1a2 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a03e:	4b18      	ldr	r3, [pc, #96]	; (800a0a0 <HAL_SD_InitCard+0xb4>)
 800a040:	2201      	movs	r2, #1
 800a042:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 800a044:	2002      	movs	r0, #2
 800a046:	f7fc f94d 	bl	80062e4 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fffe 	bl	800b04c <SD_PowerON>
 800a050:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00b      	beq.n	800a070 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	431a      	orrs	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e013      	b.n	800a098 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 ff22 	bl	800aeba <SD_InitCard>
 800a076:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00b      	beq.n	800a096 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	431a      	orrs	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e000      	b.n	800a098 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3728      	adds	r7, #40	; 0x28
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bdb0      	pop	{r4, r5, r7, pc}
 800a0a0:	422580a0 	.word	0x422580a0

0800a0a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08c      	sub	sp, #48	; 0x30
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d107      	bne.n	800a0cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e0ad      	b.n	800a228 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	f040 80a6 	bne.w	800a226 <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	441a      	add	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d907      	bls.n	800a0fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e094      	b.n	800a228 <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2203      	movs	r2, #3
 800a102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2200      	movs	r2, #0
 800a10c:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	6812      	ldr	r2, [r2, #0]
 800a118:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a11c:	f043 0302 	orr.w	r3, r3, #2
 800a120:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a126:	4a42      	ldr	r2, [pc, #264]	; (800a230 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800a128:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a12e:	4a41      	ldr	r2, [pc, #260]	; (800a234 <HAL_SD_ReadBlocks_DMA+0x190>)
 800a130:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a136:	2200      	movs	r2, #0
 800a138:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3380      	adds	r3, #128	; 0x80
 800a144:	4619      	mov	r1, r3
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	025b      	lsls	r3, r3, #9
 800a14c:	089b      	lsrs	r3, r3, #2
 800a14e:	f7fc faab 	bl	80066a8 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a152:	4b39      	ldr	r3, [pc, #228]	; (800a238 <HAL_SD_ReadBlocks_DMA+0x194>)
 800a154:	2201      	movs	r2, #1
 800a156:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d002      	beq.n	800a166 <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	025b      	lsls	r3, r3, #9
 800a164:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a166:	f04f 33ff 	mov.w	r3, #4294967295
 800a16a:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	025b      	lsls	r3, r3, #9
 800a170:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a172:	2390      	movs	r3, #144	; 0x90
 800a174:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a176:	2302      	movs	r3, #2
 800a178:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a17e:	2301      	movs	r3, #1
 800a180:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f107 0214 	add.w	r2, r7, #20
 800a18a:	4611      	mov	r1, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f003 f870 	bl	800d272 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a19a:	4618      	mov	r0, r3
 800a19c:	f003 f895 	bl	800d2ca <SDMMC_CmdBlockLength>
 800a1a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d010      	beq.n	800a1ca <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a1b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e02e      	b.n	800a228 <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d90a      	bls.n	800a1e6 <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2282      	movs	r2, #130	; 0x82
 800a1d4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6879      	ldr	r1, [r7, #4]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f003 f8bc 	bl	800d35a <SDMMC_CmdReadMultiBlock>
 800a1e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a1e4:	e009      	b.n	800a1fa <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2281      	movs	r2, #129	; 0x81
 800a1ea:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6879      	ldr	r1, [r7, #4]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f003 f88d 	bl	800d312 <SDMMC_CmdReadSingleBlock>
 800a1f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d010      	beq.n	800a222 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a208:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	431a      	orrs	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e002      	b.n	800a228 <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	e000      	b.n	800a228 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800a226:	2302      	movs	r3, #2
  }
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3730      	adds	r7, #48	; 0x30
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	0800accb 	.word	0x0800accb
 800a234:	0800ad39 	.word	0x0800ad39
 800a238:	4225858c 	.word	0x4225858c

0800a23c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08c      	sub	sp, #48	; 0x30
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d107      	bne.n	800a264 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a258:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e0ad      	b.n	800a3c0 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	f040 80a6 	bne.w	800a3be <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	441a      	add	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a282:	429a      	cmp	r2, r3
 800a284:	d907      	bls.n	800a296 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e094      	b.n	800a3c0 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2203      	movs	r2, #3
 800a29a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	6812      	ldr	r2, [r2, #0]
 800a2b0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a2b4:	f043 0302 	orr.w	r3, r3, #2
 800a2b8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2be:	4a42      	ldr	r2, [pc, #264]	; (800a3c8 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800a2c0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c6:	4a41      	ldr	r2, [pc, #260]	; (800a3cc <HAL_SD_WriteBlocks_DMA+0x190>)
 800a2c8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d002      	beq.n	800a2e0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	025b      	lsls	r3, r3, #9
 800a2de:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f002 ffee 	bl	800d2ca <SDMMC_CmdBlockLength>
 800a2ee:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d010      	beq.n	800a318 <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a2fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a306:	431a      	orrs	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e053      	b.n	800a3c0 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d90a      	bls.n	800a334 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	22a0      	movs	r2, #160	; 0xa0
 800a322:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6879      	ldr	r1, [r7, #4]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f003 f85d 	bl	800d3ea <SDMMC_CmdWriteMultiBlock>
 800a330:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a332:	e009      	b.n	800a348 <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2290      	movs	r2, #144	; 0x90
 800a338:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	4618      	mov	r0, r3
 800a342:	f003 f82e 	bl	800d3a2 <SDMMC_CmdWriteSingleBlock>
 800a346:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d010      	beq.n	800a370 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a356:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	431a      	orrs	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e027      	b.n	800a3c0 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a370:	4b17      	ldr	r3, [pc, #92]	; (800a3d0 <HAL_SD_WriteBlocks_DMA+0x194>)
 800a372:	2201      	movs	r2, #1
 800a374:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3380      	adds	r3, #128	; 0x80
 800a382:	461a      	mov	r2, r3
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	025b      	lsls	r3, r3, #9
 800a388:	089b      	lsrs	r3, r3, #2
 800a38a:	f7fc f98d 	bl	80066a8 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a38e:	f04f 33ff 	mov.w	r3, #4294967295
 800a392:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	025b      	lsls	r3, r3, #9
 800a398:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a39a:	2390      	movs	r3, #144	; 0x90
 800a39c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f107 0214 	add.w	r2, r7, #20
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f002 ff5c 	bl	800d272 <SDIO_ConfigData>
    
    return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e000      	b.n	800a3c0 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800a3be:	2302      	movs	r3, #2
  }
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3730      	adds	r7, #48	; 0x30
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	0800aca1 	.word	0x0800aca1
 800a3cc:	0800ad39 	.word	0x0800ad39
 800a3d0:	4225858c 	.word	0x4225858c

0800a3d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 808d 	beq.w	800a50a <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3f8:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	6812      	ldr	r2, [r2, #0]
 800a404:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a408:	f023 0302 	bic.w	r3, r3, #2
 800a40c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a412:	f003 0308 	and.w	r3, r3, #8
 800a416:	2b00      	cmp	r3, #0
 800a418:	d03a      	beq.n	800a490 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41e:	f003 0302 	and.w	r3, r3, #2
 800a422:	2b00      	cmp	r3, #0
 800a424:	d105      	bne.n	800a432 <HAL_SD_IRQHandler+0x5e>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42a:	f003 0320 	and.w	r3, r3, #32
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d011      	beq.n	800a456 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4618      	mov	r0, r3
 800a438:	f002 fffc 	bl	800d434 <SDMMC_CmdStopTransfer>
 800a43c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d008      	beq.n	800a456 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f925 	bl	800a6a0 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a45e:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d105      	bne.n	800a480 <HAL_SD_IRQHandler+0xac>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d003      	beq.n	800a488 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f008 fe2d 	bl	80130e0 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800a486:	e103      	b.n	800a690 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f008 fe1f 	bl	80130cc <HAL_SD_TxCpltCallback>
}
 800a48e:	e0ff      	b.n	800a690 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 80f9 	beq.w	800a690 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a2:	f003 0320 	and.w	r3, r3, #32
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d011      	beq.n	800a4ce <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f002 ffc0 	bl	800d434 <SDMMC_CmdStopTransfer>
 800a4b4:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d008      	beq.n	800a4ce <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f8e9 	bl	800a6a0 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f040 80da 	bne.w	800a690 <HAL_SD_IRQHandler+0x2bc>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f040 80d3 	bne.w	800a690 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f022 0208 	bic.w	r2, r2, #8
 800a4f8:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f008 fde2 	bl	80130cc <HAL_SD_TxCpltCallback>
}
 800a508:	e0c2      	b.n	800a690 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d008      	beq.n	800a52a <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a520:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 ffef 	bl	800b506 <SD_Write_IT>
}
 800a528:	e0b2      	b.n	800a690 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a534:	2b00      	cmp	r3, #0
 800a536:	d008      	beq.n	800a54a <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a540:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 ffb7 	bl	800b4b6 <SD_Read_IT>
}
 800a548:	e0a2      	b.n	800a690 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a550:	f240 233a 	movw	r3, #570	; 0x23a
 800a554:	4013      	ands	r3, r2
 800a556:	2b00      	cmp	r3, #0
 800a558:	f000 809a 	beq.w	800a690 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a562:	f003 0302 	and.w	r3, r3, #2
 800a566:	2b00      	cmp	r3, #0
 800a568:	d005      	beq.n	800a576 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56e:	f043 0202 	orr.w	r2, r3, #2
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57c:	f003 0308 	and.w	r3, r3, #8
 800a580:	2b00      	cmp	r3, #0
 800a582:	d005      	beq.n	800a590 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a588:	f043 0208 	orr.w	r2, r3, #8
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a596:	f003 0320 	and.w	r3, r3, #32
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d005      	beq.n	800a5aa <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	f043 0220 	orr.w	r2, r3, #32
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b0:	f003 0310 	and.w	r3, r3, #16
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d005      	beq.n	800a5c4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5bc:	f043 0210 	orr.w	r2, r3, #16
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d005      	beq.n	800a5de <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d6:	f043 0208 	orr.w	r2, r3, #8
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a5e6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	6812      	ldr	r2, [r2, #0]
 800a5f2:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a5f6:	f023 0302 	bic.w	r3, r3, #2
 800a5fa:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a604:	2b00      	cmp	r3, #0
 800a606:	d036      	beq.n	800a676 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d011      	beq.n	800a634 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	4a20      	ldr	r2, [pc, #128]	; (800a698 <HAL_SD_IRQHandler+0x2c4>)
 800a616:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fc f8a3 	bl	8006768 <HAL_DMA_Abort_IT>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d033      	beq.n	800a690 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fbc8 	bl	800adc2 <SD_DMATxAbort>
}
 800a632:	e02d      	b.n	800a690 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d011      	beq.n	800a660 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a640:	4a16      	ldr	r2, [pc, #88]	; (800a69c <HAL_SD_IRQHandler+0x2c8>)
 800a642:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fc f88d 	bl	8006768 <HAL_DMA_Abort_IT>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01d      	beq.n	800a690 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 fbf0 	bl	800ae3e <SD_DMARxAbort>
}
 800a65e:	e017      	b.n	800a690 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f008 fd22 	bl	80130b8 <HAL_SD_AbortCallback>
}
 800a674:	e00c      	b.n	800a690 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67a:	f003 0308 	and.w	r3, r3, #8
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d006      	beq.n	800a690 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f808 	bl	800a6a0 <HAL_SD_ErrorCallback>
}
 800a690:	bf00      	nop
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	0800adc3 	.word	0x0800adc3
 800a69c:	0800ae3f 	.word	0x0800ae3f

0800a6a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6c6:	0e1b      	lsrs	r3, r3, #24
 800a6c8:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	099b      	lsrs	r3, r3, #6
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	f003 0303 	and.w	r3, r3, #3
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	089b      	lsrs	r3, r3, #2
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	f003 030f 	and.w	r3, r3, #15
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	f003 0303 	and.w	r3, r3, #3
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6fc:	0c1b      	lsrs	r3, r3, #16
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	b2da      	uxtb	r2, r3
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a70e:	0a1b      	lsrs	r3, r3, #8
 800a710:	b2db      	uxtb	r3, r3
 800a712:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	b2da      	uxtb	r2, r3
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a720:	b2db      	uxtb	r3, r3
 800a722:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	b2da      	uxtb	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a730:	0e1b      	lsrs	r3, r3, #24
 800a732:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	b29b      	uxth	r3, r3
 800a738:	011b      	lsls	r3, r3, #4
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a744:	0c1b      	lsrs	r3, r3, #16
 800a746:	b2db      	uxtb	r3, r3
 800a748:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	88db      	ldrh	r3, [r3, #6]
 800a74e:	b29a      	uxth	r2, r3
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	091b      	lsrs	r3, r3, #4
 800a754:	b29b      	uxth	r3, r3
 800a756:	f003 030f 	and.w	r3, r3, #15
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	4313      	orrs	r3, r2
 800a75e:	b29a      	uxth	r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	b2db      	uxtb	r3, r3
 800a768:	f003 030f 	and.w	r3, r3, #15
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a776:	0a1b      	lsrs	r3, r3, #8
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	09db      	lsrs	r3, r3, #7
 800a780:	b2db      	uxtb	r3, r3
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	099b      	lsrs	r3, r3, #6
 800a790:	b2db      	uxtb	r3, r3
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	b2da      	uxtb	r2, r3
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	095b      	lsrs	r3, r3, #5
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	091b      	lsrs	r3, r3, #4
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f040 8087 	bne.w	800a8da <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	029b      	lsls	r3, r3, #10
 800a7d0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	691a      	ldr	r2, [r3, #16]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	431a      	orrs	r2, r3
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7f2:	0e1b      	lsrs	r3, r3, #24
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	691a      	ldr	r2, [r3, #16]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	099b      	lsrs	r3, r3, #6
 800a800:	f003 0303 	and.w	r3, r3, #3
 800a804:	431a      	orrs	r2, r3
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	08db      	lsrs	r3, r3, #3
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	f003 0307 	and.w	r3, r3, #7
 800a814:	b2da      	uxtb	r2, r3
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	f003 0307 	and.w	r3, r3, #7
 800a822:	b2da      	uxtb	r2, r3
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a82c:	0c1b      	lsrs	r3, r3, #16
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	095b      	lsrs	r3, r3, #5
 800a836:	b2db      	uxtb	r3, r3
 800a838:	f003 0307 	and.w	r3, r3, #7
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	089b      	lsrs	r3, r3, #2
 800a846:	b2db      	uxtb	r3, r3
 800a848:	f003 0307 	and.w	r3, r3, #7
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	b2db      	uxtb	r3, r3
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	f003 0306 	and.w	r3, r3, #6
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a868:	0a1b      	lsrs	r3, r3, #8
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	7e1b      	ldrb	r3, [r3, #24]
 800a872:	b2da      	uxtb	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	09db      	lsrs	r3, r3, #7
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	4313      	orrs	r3, r2
 800a882:	b2da      	uxtb	r2, r3
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	1c5a      	adds	r2, r3, #1
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	7e1b      	ldrb	r3, [r3, #24]
 800a896:	b2db      	uxtb	r3, r3
 800a898:	3302      	adds	r3, #2
 800a89a:	2201      	movs	r2, #1
 800a89c:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a8a4:	fb02 f203 	mul.w	r2, r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	7a1b      	ldrb	r3, [r3, #8]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	fa03 f202 	lsl.w	r2, r3, r2
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a8c6:	0a52      	lsrs	r2, r2, #9
 800a8c8:	fb02 f203 	mul.w	r2, r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8d6:	661a      	str	r2, [r3, #96]	; 0x60
 800a8d8:	e04d      	b.n	800a976 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d138      	bne.n	800a954 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	041b      	lsls	r3, r3, #16
 800a8ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8fa:	0e1b      	lsrs	r3, r3, #24
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	691a      	ldr	r2, [r3, #16]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	021b      	lsls	r3, r3, #8
 800a908:	431a      	orrs	r2, r3
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a912:	0c1b      	lsrs	r3, r3, #16
 800a914:	b2db      	uxtb	r3, r3
 800a916:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	691a      	ldr	r2, [r3, #16]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	431a      	orrs	r2, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a928:	0a1b      	lsrs	r3, r3, #8
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	3301      	adds	r3, #1
 800a934:	029a      	lsls	r2, r3, #10
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	655a      	str	r2, [r3, #84]	; 0x54
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a948:	659a      	str	r2, [r3, #88]	; 0x58
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	661a      	str	r2, [r3, #96]	; 0x60
 800a952:	e010      	b.n	800a976 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a95c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a962:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e0c1      	b.n	800aafa <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	099b      	lsrs	r3, r3, #6
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	b2da      	uxtb	r2, r3
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	005b      	lsls	r3, r3, #1
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a992:	b2da      	uxtb	r2, r3
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	7e9b      	ldrb	r3, [r3, #26]
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	09db      	lsrs	r3, r3, #7
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9cc:	0e1b      	lsrs	r3, r3, #24
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	09db      	lsrs	r3, r3, #7
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	095b      	lsrs	r3, r3, #5
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	f003 0303 	and.w	r3, r3, #3
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	089b      	lsrs	r3, r3, #2
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f003 0307 	and.w	r3, r3, #7
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	f003 030c 	and.w	r3, r3, #12
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa18:	0c1b      	lsrs	r3, r3, #16
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	7fdb      	ldrb	r3, [r3, #31]
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	099b      	lsrs	r3, r3, #6
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	4313      	orrs	r3, r2
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	095b      	lsrs	r3, r3, #5
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa66:	0a1b      	lsrs	r3, r3, #8
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	09db      	lsrs	r3, r3, #7
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	099b      	lsrs	r3, r3, #6
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 0301 	and.w	r3, r3, #1
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	095b      	lsrs	r3, r3, #5
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	b2da      	uxtb	r2, r3
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	091b      	lsrs	r3, r3, #4
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	089b      	lsrs	r3, r3, #2
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	f003 0303 	and.w	r3, r3, #3
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	f003 0303 	and.w	r3, r3, #3
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	085b      	lsrs	r3, r3, #1
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b083      	sub	sp, #12
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ab5e:	b5b0      	push	{r4, r5, r7, lr}
 800ab60:	b08e      	sub	sp, #56	; 0x38
 800ab62:	af04      	add	r7, sp, #16
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2203      	movs	r2, #3
 800ab70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab78:	2b03      	cmp	r3, #3
 800ab7a:	d02e      	beq.n	800abda <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab82:	d106      	bne.n	800ab92 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	639a      	str	r2, [r3, #56]	; 0x38
 800ab90:	e029      	b.n	800abe6 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab98:	d10a      	bne.n	800abb0 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fb28 	bl	800b1f0 <SD_WideBus_Enable>
 800aba0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba8:	431a      	orrs	r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	639a      	str	r2, [r3, #56]	; 0x38
 800abae:	e01a      	b.n	800abe6 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10a      	bne.n	800abcc <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fb67 	bl	800b28a <SD_WideBus_Disable>
 800abbc:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	431a      	orrs	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	639a      	str	r2, [r3, #56]	; 0x38
 800abca:	e00c      	b.n	800abe6 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	639a      	str	r2, [r3, #56]	; 0x38
 800abd8:	e005      	b.n	800abe6 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abde:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00a      	beq.n	800ac04 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800abf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	e024      	b.n	800ac4e <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	695b      	ldr	r3, [r3, #20]
 800ac1e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681d      	ldr	r5, [r3, #0]
 800ac2a:	466c      	mov	r4, sp
 800ac2c:	f107 0318 	add.w	r3, r7, #24
 800ac30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac38:	f107 030c 	add.w	r3, r7, #12
 800ac3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac3e:	4628      	mov	r0, r5
 800ac40:	f002 fa66 	bl	800d110 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3728      	adds	r7, #40	; 0x28
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bdb0      	pop	{r4, r5, r7, pc}

0800ac56 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b086      	sub	sp, #24
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800ac5e:	2304      	movs	r3, #4
 800ac60:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ac62:	2300      	movs	r3, #0
 800ac64:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800ac6a:	f107 030c 	add.w	r3, r7, #12
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fa93 	bl	800b19c <SD_SendStatus>
 800ac76:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d005      	beq.n	800ac8a <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	431a      	orrs	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	0a5b      	lsrs	r3, r3, #9
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	f003 030f 	and.w	r3, r3, #15
 800ac94:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800ac96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acac:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acbc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800acbe:	bf00      	nop
 800acc0:	3714      	adds	r7, #20
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b084      	sub	sp, #16
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800acd8:	2300      	movs	r3, #0
 800acda:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace0:	2b82      	cmp	r3, #130	; 0x82
 800ace2:	d111      	bne.n	800ad08 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4618      	mov	r0, r3
 800acea:	f002 fba3 	bl	800d434 <SDMMC_CmdStopTransfer>
 800acee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d008      	beq.n	800ad08 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	431a      	orrs	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f7ff fccc 	bl	800a6a0 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f022 0208 	bic.w	r2, r2, #8
 800ad16:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ad20:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f008 f9d8 	bl	80130e0 <HAL_SD_RxCpltCallback>
#endif
}
 800ad30:	bf00      	nop
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad44:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d004      	beq.n	800ad5a <SD_DMAError+0x22>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d12c      	bne.n	800adb4 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ad62:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ad72:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f7ff ff68 	bl	800ac56 <HAL_SD_GetCardState>
 800ad86:	4603      	mov	r3, r0
 800ad88:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad8a:	7afb      	ldrb	r3, [r7, #11]
 800ad8c:	2b06      	cmp	r3, #6
 800ad8e:	d002      	beq.n	800ad96 <SD_DMAError+0x5e>
 800ad90:	7afb      	ldrb	r3, [r7, #11]
 800ad92:	2b05      	cmp	r3, #5
 800ad94:	d10a      	bne.n	800adac <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f002 fb4a 	bl	800d434 <SDMMC_CmdStopTransfer>
 800ada0:	4602      	mov	r2, r0
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada6:	431a      	orrs	r2, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f7ff fc73 	bl	800a6a0 <HAL_SD_ErrorCallback>
#endif
}
 800adba:	bf00      	nop
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b084      	sub	sp, #16
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adce:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d127      	bne.n	800ae36 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f7ff ff35 	bl	800ac56 <HAL_SD_GetCardState>
 800adec:	4603      	mov	r3, r0
 800adee:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800adfe:	7afb      	ldrb	r3, [r7, #11]
 800ae00:	2b06      	cmp	r3, #6
 800ae02:	d002      	beq.n	800ae0a <SD_DMATxAbort+0x48>
 800ae04:	7afb      	ldrb	r3, [r7, #11]
 800ae06:	2b05      	cmp	r3, #5
 800ae08:	d115      	bne.n	800ae36 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f002 fb10 	bl	800d434 <SDMMC_CmdStopTransfer>
 800ae14:	4602      	mov	r2, r0
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d003      	beq.n	800ae30 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f008 f945 	bl	80130b8 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800ae2e:	e002      	b.n	800ae36 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7ff fc35 	bl	800a6a0 <HAL_SD_ErrorCallback>
}
 800ae36:	bf00      	nop
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b084      	sub	sp, #16
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d127      	bne.n	800aeb2 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f7ff fef7 	bl	800ac56 <HAL_SD_GetCardState>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ae7a:	7afb      	ldrb	r3, [r7, #11]
 800ae7c:	2b06      	cmp	r3, #6
 800ae7e:	d002      	beq.n	800ae86 <SD_DMARxAbort+0x48>
 800ae80:	7afb      	ldrb	r3, [r7, #11]
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d115      	bne.n	800aeb2 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f002 fad2 	bl	800d434 <SDMMC_CmdStopTransfer>
 800ae90:	4602      	mov	r2, r0
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae96:	431a      	orrs	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f008 f907 	bl	80130b8 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800aeaa:	e002      	b.n	800aeb2 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f7ff fbf7 	bl	800a6a0 <HAL_SD_ErrorCallback>
}
 800aeb2:	bf00      	nop
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aeba:	b5b0      	push	{r4, r5, r7, lr}
 800aebc:	b094      	sub	sp, #80	; 0x50
 800aebe:	af04      	add	r7, sp, #16
 800aec0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800aec2:	2300      	movs	r3, #0
 800aec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800aec6:	2301      	movs	r3, #1
 800aec8:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4618      	mov	r0, r3
 800aed0:	f002 f975 	bl	800d1be <SDIO_GetPowerState>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aeda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aede:	e0b1      	b.n	800b044 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d02f      	beq.n	800af48 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f002 fbbb 	bl	800d668 <SDMMC_CmdSendCID>
 800aef2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d001      	beq.n	800aefe <SD_InitCard+0x44>
    {
      return errorstate;
 800aefa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aefc:	e0a2      	b.n	800b044 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2100      	movs	r1, #0
 800af04:	4618      	mov	r0, r3
 800af06:	f002 f99f 	bl	800d248 <SDIO_GetResponse>
 800af0a:	4602      	mov	r2, r0
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2104      	movs	r1, #4
 800af16:	4618      	mov	r0, r3
 800af18:	f002 f996 	bl	800d248 <SDIO_GetResponse>
 800af1c:	4602      	mov	r2, r0
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2108      	movs	r1, #8
 800af28:	4618      	mov	r0, r3
 800af2a:	f002 f98d 	bl	800d248 <SDIO_GetResponse>
 800af2e:	4602      	mov	r2, r0
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	210c      	movs	r1, #12
 800af3a:	4618      	mov	r0, r3
 800af3c:	f002 f984 	bl	800d248 <SDIO_GetResponse>
 800af40:	4602      	mov	r2, r0
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d00d      	beq.n	800af6c <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f107 020e 	add.w	r2, r7, #14
 800af58:	4611      	mov	r1, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f002 fbc5 	bl	800d6ea <SDMMC_CmdSetRelAdd>
 800af60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af64:	2b00      	cmp	r3, #0
 800af66:	d001      	beq.n	800af6c <SD_InitCard+0xb2>
    {
      return errorstate;
 800af68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6a:	e06b      	b.n	800b044 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af70:	2b03      	cmp	r3, #3
 800af72:	d036      	beq.n	800afe2 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800af74:	89fb      	ldrh	r3, [r7, #14]
 800af76:	461a      	mov	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af84:	041b      	lsls	r3, r3, #16
 800af86:	4619      	mov	r1, r3
 800af88:	4610      	mov	r0, r2
 800af8a:	f002 fb8d 	bl	800d6a8 <SDMMC_CmdSendCSD>
 800af8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af92:	2b00      	cmp	r3, #0
 800af94:	d001      	beq.n	800af9a <SD_InitCard+0xe0>
    {
      return errorstate;
 800af96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af98:	e054      	b.n	800b044 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2100      	movs	r1, #0
 800afa0:	4618      	mov	r0, r3
 800afa2:	f002 f951 	bl	800d248 <SDIO_GetResponse>
 800afa6:	4602      	mov	r2, r0
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2104      	movs	r1, #4
 800afb2:	4618      	mov	r0, r3
 800afb4:	f002 f948 	bl	800d248 <SDIO_GetResponse>
 800afb8:	4602      	mov	r2, r0
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2108      	movs	r1, #8
 800afc4:	4618      	mov	r0, r3
 800afc6:	f002 f93f 	bl	800d248 <SDIO_GetResponse>
 800afca:	4602      	mov	r2, r0
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	210c      	movs	r1, #12
 800afd6:	4618      	mov	r0, r3
 800afd8:	f002 f936 	bl	800d248 <SDIO_GetResponse>
 800afdc:	4602      	mov	r2, r0
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2104      	movs	r1, #4
 800afe8:	4618      	mov	r0, r3
 800afea:	f002 f92d 	bl	800d248 <SDIO_GetResponse>
 800afee:	4603      	mov	r3, r0
 800aff0:	0d1a      	lsrs	r2, r3, #20
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800aff6:	f107 0310 	add.w	r3, r7, #16
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff fb59 	bl	800a6b4 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6819      	ldr	r1, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b00a:	041b      	lsls	r3, r3, #16
 800b00c:	f04f 0400 	mov.w	r4, #0
 800b010:	461a      	mov	r2, r3
 800b012:	4623      	mov	r3, r4
 800b014:	4608      	mov	r0, r1
 800b016:	f002 fa31 	bl	800d47c <SDMMC_CmdSelDesel>
 800b01a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <SD_InitCard+0x16c>
  {
    return errorstate;
 800b022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b024:	e00e      	b.n	800b044 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681d      	ldr	r5, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	466c      	mov	r4, sp
 800b02e:	f103 0210 	add.w	r2, r3, #16
 800b032:	ca07      	ldmia	r2, {r0, r1, r2}
 800b034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b038:	3304      	adds	r3, #4
 800b03a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b03c:	4628      	mov	r0, r5
 800b03e:	f002 f867 	bl	800d110 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3740      	adds	r7, #64	; 0x40
 800b048:	46bd      	mov	sp, r7
 800b04a:	bdb0      	pop	{r4, r5, r7, pc}

0800b04c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b054:	2300      	movs	r3, #0
 800b056:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b058:	2300      	movs	r3, #0
 800b05a:	617b      	str	r3, [r7, #20]
 800b05c:	2300      	movs	r3, #0
 800b05e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b060:	2300      	movs	r3, #0
 800b062:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	f002 fa2c 	bl	800d4c6 <SDMMC_CmdGoIdleState>
 800b06e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <SD_PowerON+0x2e>
  {
    return errorstate;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	e08c      	b.n	800b194 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4618      	mov	r0, r3
 800b080:	f002 fa41 	bl	800d506 <SDMMC_CmdOperCond>
 800b084:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d03d      	beq.n	800b108 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800b092:	e032      	b.n	800b0fa <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	1c5a      	adds	r2, r3, #1
 800b098:	60ba      	str	r2, [r7, #8]
 800b09a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d102      	bne.n	800b0a8 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b0a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0a6:	e075      	b.n	800b194 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f002 fa4a 	bl	800d548 <SDMMC_CmdAppCommand>
 800b0b4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0c0:	e068      	b.n	800b194 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f002 fa61 	bl	800d590 <SDMMC_CmdAppOperCommand>
 800b0ce:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0da:	e05b      	b.n	800b194 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f002 f8b0 	bl	800d248 <SDIO_GetResponse>
 800b0e8:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	0fdb      	lsrs	r3, r3, #31
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d101      	bne.n	800b0f6 <SD_PowerON+0xaa>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e000      	b.n	800b0f8 <SD_PowerON+0xac>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0c9      	beq.n	800b094 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	645a      	str	r2, [r3, #68]	; 0x44
 800b106:	e044      	b.n	800b192 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800b10e:	e031      	b.n	800b174 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	1c5a      	adds	r2, r3, #1
 800b114:	60ba      	str	r2, [r7, #8]
 800b116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d102      	bne.n	800b124 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b11e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b122:	e037      	b.n	800b194 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2100      	movs	r1, #0
 800b12a:	4618      	mov	r0, r3
 800b12c:	f002 fa0c 	bl	800d548 <SDMMC_CmdAppCommand>
 800b130:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <SD_PowerON+0xf0>
      {
        return errorstate;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	e02b      	b.n	800b194 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b144:	4618      	mov	r0, r3
 800b146:	f002 fa23 	bl	800d590 <SDMMC_CmdAppOperCommand>
 800b14a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <SD_PowerON+0x10a>
      {
        return errorstate;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	e01e      	b.n	800b194 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2100      	movs	r1, #0
 800b15c:	4618      	mov	r0, r3
 800b15e:	f002 f873 	bl	800d248 <SDIO_GetResponse>
 800b162:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	0fdb      	lsrs	r3, r3, #31
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d101      	bne.n	800b170 <SD_PowerON+0x124>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e000      	b.n	800b172 <SD_PowerON+0x126>
 800b170:	2300      	movs	r3, #0
 800b172:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0ca      	beq.n	800b110 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d003      	beq.n	800b18c <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	645a      	str	r2, [r3, #68]	; 0x44
 800b18a:	e002      	b.n	800b192 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3718      	adds	r7, #24
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d102      	bne.n	800b1b6 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800b1b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b1b4:	e018      	b.n	800b1e8 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1be:	041b      	lsls	r3, r3, #16
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	f002 fab4 	bl	800d730 <SDMMC_CmdSendStatus>
 800b1c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d001      	beq.n	800b1d4 <SD_SendStatus+0x38>
  {
    return errorstate;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	e009      	b.n	800b1e8 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2100      	movs	r1, #0
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f002 f834 	bl	800d248 <SDIO_GetResponse>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b200:	2300      	movs	r3, #0
 800b202:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2100      	movs	r1, #0
 800b20a:	4618      	mov	r0, r3
 800b20c:	f002 f81c 	bl	800d248 <SDIO_GetResponse>
 800b210:	4603      	mov	r3, r0
 800b212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b21a:	d102      	bne.n	800b222 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b21c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b220:	e02f      	b.n	800b282 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b222:	f107 030c 	add.w	r3, r7, #12
 800b226:	4619      	mov	r1, r3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f87b 	bl	800b324 <SD_FindSCR>
 800b22e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	e023      	b.n	800b282 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d01c      	beq.n	800b27e <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b24c:	041b      	lsls	r3, r3, #16
 800b24e:	4619      	mov	r1, r3
 800b250:	4610      	mov	r0, r2
 800b252:	f002 f979 	bl	800d548 <SDMMC_CmdAppCommand>
 800b256:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	e00f      	b.n	800b282 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2102      	movs	r1, #2
 800b268:	4618      	mov	r0, r3
 800b26a:	f002 f9b6 	bl	800d5da <SDMMC_CmdBusWidth>
 800b26e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	e003      	b.n	800b282 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800b27a:	2300      	movs	r3, #0
 800b27c:	e001      	b.n	800b282 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b27e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b282:	4618      	mov	r0, r3
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b086      	sub	sp, #24
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b292:	2300      	movs	r3, #0
 800b294:	60fb      	str	r3, [r7, #12]
 800b296:	2300      	movs	r3, #0
 800b298:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b29a:	2300      	movs	r3, #0
 800b29c:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f001 ffcf 	bl	800d248 <SDIO_GetResponse>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2b4:	d102      	bne.n	800b2bc <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b2b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2ba:	e02f      	b.n	800b31c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b2bc:	f107 030c 	add.w	r3, r7, #12
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f82e 	bl	800b324 <SD_FindSCR>
 800b2c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	e023      	b.n	800b31c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d01c      	beq.n	800b318 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2e6:	041b      	lsls	r3, r3, #16
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	f002 f92c 	bl	800d548 <SDMMC_CmdAppCommand>
 800b2f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d001      	beq.n	800b2fc <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	e00f      	b.n	800b31c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2100      	movs	r1, #0
 800b302:	4618      	mov	r0, r3
 800b304:	f002 f969 	bl	800d5da <SDMMC_CmdBusWidth>
 800b308:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	e003      	b.n	800b31c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800b314:	2300      	movs	r3, #0
 800b316:	e001      	b.n	800b31c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b318:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b324:	b590      	push	{r4, r7, lr}
 800b326:	b08f      	sub	sp, #60	; 0x3c
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b32e:	2300      	movs	r3, #0
 800b330:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800b332:	f7fa ffcb 	bl	80062cc <HAL_GetTick>
 800b336:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800b338:	2300      	movs	r3, #0
 800b33a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b33c:	2300      	movs	r3, #0
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	2300      	movs	r3, #0
 800b342:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2108      	movs	r1, #8
 800b34a:	4618      	mov	r0, r3
 800b34c:	f001 ffbd 	bl	800d2ca <SDMMC_CmdBlockLength>
 800b350:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	2b00      	cmp	r3, #0
 800b356:	d001      	beq.n	800b35c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35a:	e0a8      	b.n	800b4ae <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b364:	041b      	lsls	r3, r3, #16
 800b366:	4619      	mov	r1, r3
 800b368:	4610      	mov	r0, r2
 800b36a:	f002 f8ed 	bl	800d548 <SDMMC_CmdAppCommand>
 800b36e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <SD_FindSCR+0x56>
  {
    return errorstate;
 800b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b378:	e099      	b.n	800b4ae <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b37a:	f04f 33ff 	mov.w	r3, #4294967295
 800b37e:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800b380:	2308      	movs	r3, #8
 800b382:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b384:	2330      	movs	r3, #48	; 0x30
 800b386:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b388:	2302      	movs	r3, #2
 800b38a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b390:	2301      	movs	r3, #1
 800b392:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f107 0214 	add.w	r2, r7, #20
 800b39c:	4611      	mov	r1, r2
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f001 ff67 	bl	800d272 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f002 f93a 	bl	800d622 <SDMMC_CmdSendSCR>
 800b3ae:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d022      	beq.n	800b3fc <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	e079      	b.n	800b4ae <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00e      	beq.n	800b3e6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6819      	ldr	r1, [r3, #0]
 800b3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	f107 020c 	add.w	r2, r7, #12
 800b3d4:	18d4      	adds	r4, r2, r3
 800b3d6:	4608      	mov	r0, r1
 800b3d8:	f001 fec5 	bl	800d166 <SDIO_ReadFIFO>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	6023      	str	r3, [r4, #0]
      index++;
 800b3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b3e6:	f7fa ff71 	bl	80062cc <HAL_GetTick>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f4:	d102      	bne.n	800b3fc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b3f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3fa:	e058      	b.n	800b4ae <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b402:	f240 432a 	movw	r3, #1066	; 0x42a
 800b406:	4013      	ands	r3, r2
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0d6      	beq.n	800b3ba <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b412:	f003 0308 	and.w	r3, r3, #8
 800b416:	2b00      	cmp	r3, #0
 800b418:	d005      	beq.n	800b426 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2208      	movs	r2, #8
 800b420:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b422:	2308      	movs	r3, #8
 800b424:	e043      	b.n	800b4ae <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42c:	f003 0302 	and.w	r3, r3, #2
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2202      	movs	r2, #2
 800b43a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b43c:	2302      	movs	r3, #2
 800b43e:	e036      	b.n	800b4ae <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b446:	f003 0320 	and.w	r3, r3, #32
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d005      	beq.n	800b45a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2220      	movs	r2, #32
 800b454:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800b456:	2320      	movs	r3, #32
 800b458:	e029      	b.n	800b4ae <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b462:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	061a      	lsls	r2, r3, #24
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	021b      	lsls	r3, r3, #8
 800b46c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b470:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	0a1b      	lsrs	r3, r3, #8
 800b476:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b47a:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b486:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b488:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	061a      	lsls	r2, r3, #24
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	021b      	lsls	r3, r3, #8
 800b492:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b496:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	0a1b      	lsrs	r3, r3, #8
 800b49c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b4a0:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	0e1b      	lsrs	r3, r3, #24
 800b4a6:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	373c      	adds	r7, #60	; 0x3c
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd90      	pop	{r4, r7, pc}

0800b4b6 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b4b6:	b590      	push	{r4, r7, lr}
 800b4b8:	b085      	sub	sp, #20
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c6:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	e00d      	b.n	800b4ea <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6819      	ldr	r1, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	18d4      	adds	r4, r2, r3
 800b4da:	4608      	mov	r0, r1
 800b4dc:	f001 fe43 	bl	800d166 <SDIO_ReadFIFO>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	60fb      	str	r3, [r7, #12]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b07      	cmp	r3, #7
 800b4ee:	d9ee      	bls.n	800b4ce <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f4:	f103 0220 	add.w	r2, r3, #32
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3714      	adds	r7, #20
 800b502:	46bd      	mov	sp, r7
 800b504:	bd90      	pop	{r4, r7, pc}

0800b506 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b084      	sub	sp, #16
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b50e:	2300      	movs	r3, #0
 800b510:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800b518:	2300      	movs	r3, #0
 800b51a:	60fb      	str	r3, [r7, #12]
 800b51c:	e00b      	b.n	800b536 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	4413      	add	r3, r2
 800b52a:	4619      	mov	r1, r3
 800b52c:	f001 fe28 	bl	800d180 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	3301      	adds	r3, #1
 800b534:	60fb      	str	r3, [r7, #12]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b07      	cmp	r3, #7
 800b53a:	d9f0      	bls.n	800b51e <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a1b      	ldr	r3, [r3, #32]
 800b540:	f103 0220 	add.w	r2, r3, #32
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b082      	sub	sp, #8
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d101      	bne.n	800b564 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	e056      	b.n	800b612 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b570:	b2db      	uxtb	r3, r3
 800b572:	2b00      	cmp	r3, #0
 800b574:	d106      	bne.n	800b584 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f00a fc42 	bl	8015e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2202      	movs	r2, #2
 800b588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b59a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	431a      	orrs	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	431a      	orrs	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	431a      	orrs	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5c0:	431a      	orrs	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	431a      	orrs	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6a1b      	ldr	r3, [r3, #32]
 800b5cc:	ea42 0103 	orr.w	r1, r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	0c1b      	lsrs	r3, r3, #16
 800b5e2:	f003 0104 	and.w	r1, r3, #4
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	69da      	ldr	r2, [r3, #28]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b600:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b088      	sub	sp, #32
 800b61e:	af00      	add	r7, sp, #0
 800b620:	60f8      	str	r0, [r7, #12]
 800b622:	60b9      	str	r1, [r7, #8]
 800b624:	603b      	str	r3, [r7, #0]
 800b626:	4613      	mov	r3, r2
 800b628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b62a:	2300      	movs	r3, #0
 800b62c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b634:	2b01      	cmp	r3, #1
 800b636:	d101      	bne.n	800b63c <HAL_SPI_Transmit+0x22>
 800b638:	2302      	movs	r3, #2
 800b63a:	e11e      	b.n	800b87a <HAL_SPI_Transmit+0x260>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b644:	f7fa fe42 	bl	80062cc <HAL_GetTick>
 800b648:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b64a:	88fb      	ldrh	r3, [r7, #6]
 800b64c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b01      	cmp	r3, #1
 800b658:	d002      	beq.n	800b660 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b65a:	2302      	movs	r3, #2
 800b65c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b65e:	e103      	b.n	800b868 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d002      	beq.n	800b66c <HAL_SPI_Transmit+0x52>
 800b666:	88fb      	ldrh	r3, [r7, #6]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d102      	bne.n	800b672 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b670:	e0fa      	b.n	800b868 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2203      	movs	r2, #3
 800b676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	88fa      	ldrh	r2, [r7, #6]
 800b68a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	88fa      	ldrh	r2, [r7, #6]
 800b690:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6b8:	d107      	bne.n	800b6ca <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d4:	2b40      	cmp	r3, #64	; 0x40
 800b6d6:	d007      	beq.n	800b6e8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6f0:	d14b      	bne.n	800b78a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <HAL_SPI_Transmit+0xe6>
 800b6fa:	8afb      	ldrh	r3, [r7, #22]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d13e      	bne.n	800b77e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b704:	881a      	ldrh	r2, [r3, #0]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b710:	1c9a      	adds	r2, r3, #2
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	3b01      	subs	r3, #1
 800b71e:	b29a      	uxth	r2, r3
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b724:	e02b      	b.n	800b77e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	f003 0302 	and.w	r3, r3, #2
 800b730:	2b02      	cmp	r3, #2
 800b732:	d112      	bne.n	800b75a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b738:	881a      	ldrh	r2, [r3, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b744:	1c9a      	adds	r2, r3, #2
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b74e:	b29b      	uxth	r3, r3
 800b750:	3b01      	subs	r3, #1
 800b752:	b29a      	uxth	r2, r3
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	86da      	strh	r2, [r3, #54]	; 0x36
 800b758:	e011      	b.n	800b77e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b75a:	f7fa fdb7 	bl	80062cc <HAL_GetTick>
 800b75e:	4602      	mov	r2, r0
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	1ad3      	subs	r3, r2, r3
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	d803      	bhi.n	800b772 <HAL_SPI_Transmit+0x158>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b770:	d102      	bne.n	800b778 <HAL_SPI_Transmit+0x15e>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b778:	2303      	movs	r3, #3
 800b77a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b77c:	e074      	b.n	800b868 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b782:	b29b      	uxth	r3, r3
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1ce      	bne.n	800b726 <HAL_SPI_Transmit+0x10c>
 800b788:	e04c      	b.n	800b824 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <HAL_SPI_Transmit+0x17e>
 800b792:	8afb      	ldrh	r3, [r7, #22]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d140      	bne.n	800b81a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	330c      	adds	r3, #12
 800b7a2:	7812      	ldrb	r2, [r2, #0]
 800b7a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7aa:	1c5a      	adds	r2, r3, #1
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b7be:	e02c      	b.n	800b81a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	f003 0302 	and.w	r3, r3, #2
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d113      	bne.n	800b7f6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	330c      	adds	r3, #12
 800b7d8:	7812      	ldrb	r2, [r2, #0]
 800b7da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e0:	1c5a      	adds	r2, r3, #1
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	86da      	strh	r2, [r3, #54]	; 0x36
 800b7f4:	e011      	b.n	800b81a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7f6:	f7fa fd69 	bl	80062cc <HAL_GetTick>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	429a      	cmp	r2, r3
 800b804:	d803      	bhi.n	800b80e <HAL_SPI_Transmit+0x1f4>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b80c:	d102      	bne.n	800b814 <HAL_SPI_Transmit+0x1fa>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d102      	bne.n	800b81a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b814:	2303      	movs	r3, #3
 800b816:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b818:	e026      	b.n	800b868 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b81e:	b29b      	uxth	r3, r3
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1cd      	bne.n	800b7c0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b824:	69ba      	ldr	r2, [r7, #24]
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 fa45 	bl	800bcb8 <SPI_EndRxTxTransaction>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d002      	beq.n	800b83a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2220      	movs	r2, #32
 800b838:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10a      	bne.n	800b858 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b842:	2300      	movs	r3, #0
 800b844:	613b      	str	r3, [r7, #16]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	613b      	str	r3, [r7, #16]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	613b      	str	r3, [r7, #16]
 800b856:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	77fb      	strb	r3, [r7, #31]
 800b864:	e000      	b.n	800b868 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b866:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b878:	7ffb      	ldrb	r3, [r7, #31]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3720      	adds	r7, #32
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b08c      	sub	sp, #48	; 0x30
 800b886:	af00      	add	r7, sp, #0
 800b888:	60f8      	str	r0, [r7, #12]
 800b88a:	60b9      	str	r1, [r7, #8]
 800b88c:	607a      	str	r2, [r7, #4]
 800b88e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b890:	2301      	movs	r3, #1
 800b892:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b894:	2300      	movs	r3, #0
 800b896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d101      	bne.n	800b8a8 <HAL_SPI_TransmitReceive+0x26>
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	e18a      	b.n	800bbbe <HAL_SPI_TransmitReceive+0x33c>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8b0:	f7fa fd0c 	bl	80062cc <HAL_GetTick>
 800b8b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b8c6:	887b      	ldrh	r3, [r7, #2]
 800b8c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b8ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d00f      	beq.n	800b8f2 <HAL_SPI_TransmitReceive+0x70>
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8d8:	d107      	bne.n	800b8ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d103      	bne.n	800b8ea <HAL_SPI_TransmitReceive+0x68>
 800b8e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8e6:	2b04      	cmp	r3, #4
 800b8e8:	d003      	beq.n	800b8f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b8f0:	e15b      	b.n	800bbaa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d005      	beq.n	800b904 <HAL_SPI_TransmitReceive+0x82>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <HAL_SPI_TransmitReceive+0x82>
 800b8fe:	887b      	ldrh	r3, [r7, #2]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d103      	bne.n	800b90c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b90a:	e14e      	b.n	800bbaa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b912:	b2db      	uxtb	r3, r3
 800b914:	2b04      	cmp	r3, #4
 800b916:	d003      	beq.n	800b920 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2205      	movs	r2, #5
 800b91c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	887a      	ldrh	r2, [r7, #2]
 800b930:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	887a      	ldrh	r2, [r7, #2]
 800b936:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	887a      	ldrh	r2, [r7, #2]
 800b942:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	887a      	ldrh	r2, [r7, #2]
 800b948:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2200      	movs	r2, #0
 800b94e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b960:	2b40      	cmp	r3, #64	; 0x40
 800b962:	d007      	beq.n	800b974 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b972:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b97c:	d178      	bne.n	800ba70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <HAL_SPI_TransmitReceive+0x10a>
 800b986:	8b7b      	ldrh	r3, [r7, #26]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d166      	bne.n	800ba5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b990:	881a      	ldrh	r2, [r3, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b99c:	1c9a      	adds	r2, r3, #2
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9b0:	e053      	b.n	800ba5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	f003 0302 	and.w	r3, r3, #2
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d11b      	bne.n	800b9f8 <HAL_SPI_TransmitReceive+0x176>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d016      	beq.n	800b9f8 <HAL_SPI_TransmitReceive+0x176>
 800b9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d113      	bne.n	800b9f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d4:	881a      	ldrh	r2, [r3, #0]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e0:	1c9a      	adds	r2, r3, #2
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d119      	bne.n	800ba3a <HAL_SPI_TransmitReceive+0x1b8>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d014      	beq.n	800ba3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68da      	ldr	r2, [r3, #12]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1a:	b292      	uxth	r2, r2
 800ba1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba22:	1c9a      	adds	r2, r3, #2
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba36:	2301      	movs	r3, #1
 800ba38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ba3a:	f7fa fc47 	bl	80062cc <HAL_GetTick>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d807      	bhi.n	800ba5a <HAL_SPI_TransmitReceive+0x1d8>
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba50:	d003      	beq.n	800ba5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ba58:	e0a7      	b.n	800bbaa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1a6      	bne.n	800b9b2 <HAL_SPI_TransmitReceive+0x130>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1a1      	bne.n	800b9b2 <HAL_SPI_TransmitReceive+0x130>
 800ba6e:	e07c      	b.n	800bb6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <HAL_SPI_TransmitReceive+0x1fc>
 800ba78:	8b7b      	ldrh	r3, [r7, #26]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d16b      	bne.n	800bb56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	330c      	adds	r3, #12
 800ba88:	7812      	ldrb	r2, [r2, #0]
 800ba8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba90:	1c5a      	adds	r2, r3, #1
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800baa4:	e057      	b.n	800bb56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	f003 0302 	and.w	r3, r3, #2
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	d11c      	bne.n	800baee <HAL_SPI_TransmitReceive+0x26c>
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bab8:	b29b      	uxth	r3, r3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d017      	beq.n	800baee <HAL_SPI_TransmitReceive+0x26c>
 800babe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d114      	bne.n	800baee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	330c      	adds	r3, #12
 800bace:	7812      	ldrb	r2, [r2, #0]
 800bad0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad6:	1c5a      	adds	r2, r3, #1
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	3b01      	subs	r3, #1
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800baea:	2300      	movs	r3, #0
 800baec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	f003 0301 	and.w	r3, r3, #1
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d119      	bne.n	800bb30 <HAL_SPI_TransmitReceive+0x2ae>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d014      	beq.n	800bb30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68da      	ldr	r2, [r3, #12]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb10:	b2d2      	uxtb	r2, r2
 800bb12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb18:	1c5a      	adds	r2, r3, #1
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	3b01      	subs	r3, #1
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bb30:	f7fa fbcc 	bl	80062cc <HAL_GetTick>
 800bb34:	4602      	mov	r2, r0
 800bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d803      	bhi.n	800bb48 <HAL_SPI_TransmitReceive+0x2c6>
 800bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb46:	d102      	bne.n	800bb4e <HAL_SPI_TransmitReceive+0x2cc>
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d103      	bne.n	800bb56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bb54:	e029      	b.n	800bbaa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1a2      	bne.n	800baa6 <HAL_SPI_TransmitReceive+0x224>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d19d      	bne.n	800baa6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f000 f8a2 	bl	800bcb8 <SPI_EndRxTxTransaction>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d006      	beq.n	800bb88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2220      	movs	r2, #32
 800bb84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bb86:	e010      	b.n	800bbaa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10b      	bne.n	800bba8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb90:	2300      	movs	r3, #0
 800bb92:	617b      	str	r3, [r7, #20]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	617b      	str	r3, [r7, #20]
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	e000      	b.n	800bbaa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bba8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bbba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3730      	adds	r7, #48	; 0x30
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbd4:	b2db      	uxtb	r3, r3
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	603b      	str	r3, [r7, #0]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bbf2:	e04c      	b.n	800bc8e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfa:	d048      	beq.n	800bc8e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bbfc:	f7fa fb66 	bl	80062cc <HAL_GetTick>
 800bc00:	4602      	mov	r2, r0
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d902      	bls.n	800bc12 <SPI_WaitFlagStateUntilTimeout+0x30>
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d13d      	bne.n	800bc8e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	685a      	ldr	r2, [r3, #4]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc2a:	d111      	bne.n	800bc50 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc34:	d004      	beq.n	800bc40 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc3e:	d107      	bne.n	800bc50 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc58:	d10f      	bne.n	800bc7a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc68:	601a      	str	r2, [r3, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	e00f      	b.n	800bcae <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	689a      	ldr	r2, [r3, #8]
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	4013      	ands	r3, r2
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	bf0c      	ite	eq
 800bc9e:	2301      	moveq	r3, #1
 800bca0:	2300      	movne	r3, #0
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	461a      	mov	r2, r3
 800bca6:	79fb      	ldrb	r3, [r7, #7]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d1a3      	bne.n	800bbf4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
	...

0800bcb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b088      	sub	sp, #32
 800bcbc:	af02      	add	r7, sp, #8
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bcc4:	4b1b      	ldr	r3, [pc, #108]	; (800bd34 <SPI_EndRxTxTransaction+0x7c>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a1b      	ldr	r2, [pc, #108]	; (800bd38 <SPI_EndRxTxTransaction+0x80>)
 800bcca:	fba2 2303 	umull	r2, r3, r2, r3
 800bcce:	0d5b      	lsrs	r3, r3, #21
 800bcd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bcd4:	fb02 f303 	mul.w	r3, r2, r3
 800bcd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bce2:	d112      	bne.n	800bd0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2200      	movs	r2, #0
 800bcec:	2180      	movs	r1, #128	; 0x80
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7ff ff77 	bl	800bbe2 <SPI_WaitFlagStateUntilTimeout>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d016      	beq.n	800bd28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfe:	f043 0220 	orr.w	r2, r3, #32
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bd06:	2303      	movs	r3, #3
 800bd08:	e00f      	b.n	800bd2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00a      	beq.n	800bd26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	3b01      	subs	r3, #1
 800bd14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd20:	2b80      	cmp	r3, #128	; 0x80
 800bd22:	d0f2      	beq.n	800bd0a <SPI_EndRxTxTransaction+0x52>
 800bd24:	e000      	b.n	800bd28 <SPI_EndRxTxTransaction+0x70>
        break;
 800bd26:	bf00      	nop
  }

  return HAL_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3718      	adds	r7, #24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	20000134 	.word	0x20000134
 800bd38:	165e9f81 	.word	0x165e9f81

0800bd3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d101      	bne.n	800bd4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e01d      	b.n	800bd8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d106      	bne.n	800bd68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f00a f898 	bl	8015e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2202      	movs	r2, #2
 800bd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3304      	adds	r3, #4
 800bd78:	4619      	mov	r1, r3
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	f000 fa76 	bl	800c26c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b085      	sub	sp, #20
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2202      	movs	r2, #2
 800bd9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	f003 0307 	and.w	r3, r3, #7
 800bdac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b06      	cmp	r3, #6
 800bdb2:	d007      	beq.n	800bdc4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f042 0201 	orr.w	r2, r2, #1
 800bdc2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3714      	adds	r7, #20
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b082      	sub	sp, #8
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e01d      	b.n	800be28 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d106      	bne.n	800be06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f815 	bl	800be30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2202      	movs	r2, #2
 800be0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	3304      	adds	r3, #4
 800be16:	4619      	mov	r1, r3
 800be18:	4610      	mov	r0, r2
 800be1a:	f000 fa27 	bl	800c26c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2201      	movs	r2, #1
 800be22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be26:	2300      	movs	r3, #0
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be38:	bf00      	nop
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2201      	movs	r2, #1
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	4618      	mov	r0, r3
 800be58:	f000 fcf2 	bl	800c840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a15      	ldr	r2, [pc, #84]	; (800beb8 <HAL_TIM_PWM_Start+0x74>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d004      	beq.n	800be70 <HAL_TIM_PWM_Start+0x2c>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a14      	ldr	r2, [pc, #80]	; (800bebc <HAL_TIM_PWM_Start+0x78>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d101      	bne.n	800be74 <HAL_TIM_PWM_Start+0x30>
 800be70:	2301      	movs	r3, #1
 800be72:	e000      	b.n	800be76 <HAL_TIM_PWM_Start+0x32>
 800be74:	2300      	movs	r3, #0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d007      	beq.n	800be8a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	f003 0307 	and.w	r3, r3, #7
 800be94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b06      	cmp	r3, #6
 800be9a:	d007      	beq.n	800beac <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f042 0201 	orr.w	r2, r2, #1
 800beaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	40010000 	.word	0x40010000
 800bebc:	40010400 	.word	0x40010400

0800bec0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2200      	movs	r2, #0
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	4618      	mov	r0, r3
 800bed4:	f000 fcb4 	bl	800c840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a22      	ldr	r2, [pc, #136]	; (800bf68 <HAL_TIM_PWM_Stop+0xa8>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d004      	beq.n	800beec <HAL_TIM_PWM_Stop+0x2c>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a21      	ldr	r2, [pc, #132]	; (800bf6c <HAL_TIM_PWM_Stop+0xac>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d101      	bne.n	800bef0 <HAL_TIM_PWM_Stop+0x30>
 800beec:	2301      	movs	r3, #1
 800beee:	e000      	b.n	800bef2 <HAL_TIM_PWM_Stop+0x32>
 800bef0:	2300      	movs	r3, #0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d017      	beq.n	800bf26 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	6a1a      	ldr	r2, [r3, #32]
 800befc:	f241 1311 	movw	r3, #4369	; 0x1111
 800bf00:	4013      	ands	r3, r2
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10f      	bne.n	800bf26 <HAL_TIM_PWM_Stop+0x66>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6a1a      	ldr	r2, [r3, #32]
 800bf0c:	f240 4344 	movw	r3, #1092	; 0x444
 800bf10:	4013      	ands	r3, r2
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d107      	bne.n	800bf26 <HAL_TIM_PWM_Stop+0x66>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bf24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6a1a      	ldr	r2, [r3, #32]
 800bf2c:	f241 1311 	movw	r3, #4369	; 0x1111
 800bf30:	4013      	ands	r3, r2
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10f      	bne.n	800bf56 <HAL_TIM_PWM_Stop+0x96>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	6a1a      	ldr	r2, [r3, #32]
 800bf3c:	f240 4344 	movw	r3, #1092	; 0x444
 800bf40:	4013      	ands	r3, r2
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d107      	bne.n	800bf56 <HAL_TIM_PWM_Stop+0x96>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f022 0201 	bic.w	r2, r2, #1
 800bf54:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	40010000 	.word	0x40010000
 800bf6c:	40010400 	.word	0x40010400

0800bf70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d101      	bne.n	800bf8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bf86:	2302      	movs	r3, #2
 800bf88:	e0b4      	b.n	800c0f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2202      	movs	r2, #2
 800bf96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b0c      	cmp	r3, #12
 800bf9e:	f200 809f 	bhi.w	800c0e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 800bfa2:	a201      	add	r2, pc, #4	; (adr r2, 800bfa8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa8:	0800bfdd 	.word	0x0800bfdd
 800bfac:	0800c0e1 	.word	0x0800c0e1
 800bfb0:	0800c0e1 	.word	0x0800c0e1
 800bfb4:	0800c0e1 	.word	0x0800c0e1
 800bfb8:	0800c01d 	.word	0x0800c01d
 800bfbc:	0800c0e1 	.word	0x0800c0e1
 800bfc0:	0800c0e1 	.word	0x0800c0e1
 800bfc4:	0800c0e1 	.word	0x0800c0e1
 800bfc8:	0800c05f 	.word	0x0800c05f
 800bfcc:	0800c0e1 	.word	0x0800c0e1
 800bfd0:	0800c0e1 	.word	0x0800c0e1
 800bfd4:	0800c0e1 	.word	0x0800c0e1
 800bfd8:	0800c09f 	.word	0x0800c09f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68b9      	ldr	r1, [r7, #8]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 f9e2 	bl	800c3ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	699a      	ldr	r2, [r3, #24]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f042 0208 	orr.w	r2, r2, #8
 800bff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	699a      	ldr	r2, [r3, #24]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f022 0204 	bic.w	r2, r2, #4
 800c006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	6999      	ldr	r1, [r3, #24]
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	691a      	ldr	r2, [r3, #16]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	430a      	orrs	r2, r1
 800c018:	619a      	str	r2, [r3, #24]
      break;
 800c01a:	e062      	b.n	800c0e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68b9      	ldr	r1, [r7, #8]
 800c022:	4618      	mov	r0, r3
 800c024:	f000 fa32 	bl	800c48c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	699a      	ldr	r2, [r3, #24]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	699a      	ldr	r2, [r3, #24]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6999      	ldr	r1, [r3, #24]
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	021a      	lsls	r2, r3, #8
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	430a      	orrs	r2, r1
 800c05a:	619a      	str	r2, [r3, #24]
      break;
 800c05c:	e041      	b.n	800c0e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	68b9      	ldr	r1, [r7, #8]
 800c064:	4618      	mov	r0, r3
 800c066:	f000 fa87 	bl	800c578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	69da      	ldr	r2, [r3, #28]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f042 0208 	orr.w	r2, r2, #8
 800c078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	69da      	ldr	r2, [r3, #28]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f022 0204 	bic.w	r2, r2, #4
 800c088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	69d9      	ldr	r1, [r3, #28]
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	691a      	ldr	r2, [r3, #16]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	430a      	orrs	r2, r1
 800c09a:	61da      	str	r2, [r3, #28]
      break;
 800c09c:	e021      	b.n	800c0e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68b9      	ldr	r1, [r7, #8]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f000 fadb 	bl	800c660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	69da      	ldr	r2, [r3, #28]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	69da      	ldr	r2, [r3, #28]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	69d9      	ldr	r1, [r3, #28]
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	021a      	lsls	r2, r3, #8
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	430a      	orrs	r2, r1
 800c0dc:	61da      	str	r2, [r3, #28]
      break;
 800c0de:	e000      	b.n	800c0e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c0e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d101      	bne.n	800c114 <HAL_TIM_ConfigClockSource+0x18>
 800c110:	2302      	movs	r3, #2
 800c112:	e0a6      	b.n	800c262 <HAL_TIM_ConfigClockSource+0x166>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2202      	movs	r2, #2
 800c120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c132:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c13a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b40      	cmp	r3, #64	; 0x40
 800c14a:	d067      	beq.n	800c21c <HAL_TIM_ConfigClockSource+0x120>
 800c14c:	2b40      	cmp	r3, #64	; 0x40
 800c14e:	d80b      	bhi.n	800c168 <HAL_TIM_ConfigClockSource+0x6c>
 800c150:	2b10      	cmp	r3, #16
 800c152:	d073      	beq.n	800c23c <HAL_TIM_ConfigClockSource+0x140>
 800c154:	2b10      	cmp	r3, #16
 800c156:	d802      	bhi.n	800c15e <HAL_TIM_ConfigClockSource+0x62>
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d06f      	beq.n	800c23c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c15c:	e078      	b.n	800c250 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c15e:	2b20      	cmp	r3, #32
 800c160:	d06c      	beq.n	800c23c <HAL_TIM_ConfigClockSource+0x140>
 800c162:	2b30      	cmp	r3, #48	; 0x30
 800c164:	d06a      	beq.n	800c23c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c166:	e073      	b.n	800c250 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c168:	2b70      	cmp	r3, #112	; 0x70
 800c16a:	d00d      	beq.n	800c188 <HAL_TIM_ConfigClockSource+0x8c>
 800c16c:	2b70      	cmp	r3, #112	; 0x70
 800c16e:	d804      	bhi.n	800c17a <HAL_TIM_ConfigClockSource+0x7e>
 800c170:	2b50      	cmp	r3, #80	; 0x50
 800c172:	d033      	beq.n	800c1dc <HAL_TIM_ConfigClockSource+0xe0>
 800c174:	2b60      	cmp	r3, #96	; 0x60
 800c176:	d041      	beq.n	800c1fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c178:	e06a      	b.n	800c250 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c17a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c17e:	d066      	beq.n	800c24e <HAL_TIM_ConfigClockSource+0x152>
 800c180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c184:	d017      	beq.n	800c1b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c186:	e063      	b.n	800c250 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6818      	ldr	r0, [r3, #0]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	6899      	ldr	r1, [r3, #8]
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	f000 fb32 	bl	800c800 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c1aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	609a      	str	r2, [r3, #8]
      break;
 800c1b4:	e04c      	b.n	800c250 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6818      	ldr	r0, [r3, #0]
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	6899      	ldr	r1, [r3, #8]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	f000 fb1b 	bl	800c800 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	689a      	ldr	r2, [r3, #8]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1d8:	609a      	str	r2, [r3, #8]
      break;
 800c1da:	e039      	b.n	800c250 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6818      	ldr	r0, [r3, #0]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	6859      	ldr	r1, [r3, #4]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	f000 fa8f 	bl	800c70c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2150      	movs	r1, #80	; 0x50
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 fae8 	bl	800c7ca <TIM_ITRx_SetConfig>
      break;
 800c1fa:	e029      	b.n	800c250 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6818      	ldr	r0, [r3, #0]
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	6859      	ldr	r1, [r3, #4]
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	461a      	mov	r2, r3
 800c20a:	f000 faae 	bl	800c76a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2160      	movs	r1, #96	; 0x60
 800c214:	4618      	mov	r0, r3
 800c216:	f000 fad8 	bl	800c7ca <TIM_ITRx_SetConfig>
      break;
 800c21a:	e019      	b.n	800c250 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6818      	ldr	r0, [r3, #0]
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	6859      	ldr	r1, [r3, #4]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	461a      	mov	r2, r3
 800c22a:	f000 fa6f 	bl	800c70c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2140      	movs	r1, #64	; 0x40
 800c234:	4618      	mov	r0, r3
 800c236:	f000 fac8 	bl	800c7ca <TIM_ITRx_SetConfig>
      break;
 800c23a:	e009      	b.n	800c250 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4619      	mov	r1, r3
 800c246:	4610      	mov	r0, r2
 800c248:	f000 fabf 	bl	800c7ca <TIM_ITRx_SetConfig>
      break;
 800c24c:	e000      	b.n	800c250 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c24e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
	...

0800c26c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b085      	sub	sp, #20
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a40      	ldr	r2, [pc, #256]	; (800c380 <TIM_Base_SetConfig+0x114>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d013      	beq.n	800c2ac <TIM_Base_SetConfig+0x40>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c28a:	d00f      	beq.n	800c2ac <TIM_Base_SetConfig+0x40>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a3d      	ldr	r2, [pc, #244]	; (800c384 <TIM_Base_SetConfig+0x118>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d00b      	beq.n	800c2ac <TIM_Base_SetConfig+0x40>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a3c      	ldr	r2, [pc, #240]	; (800c388 <TIM_Base_SetConfig+0x11c>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d007      	beq.n	800c2ac <TIM_Base_SetConfig+0x40>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	4a3b      	ldr	r2, [pc, #236]	; (800c38c <TIM_Base_SetConfig+0x120>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d003      	beq.n	800c2ac <TIM_Base_SetConfig+0x40>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4a3a      	ldr	r2, [pc, #232]	; (800c390 <TIM_Base_SetConfig+0x124>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d108      	bne.n	800c2be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a2f      	ldr	r2, [pc, #188]	; (800c380 <TIM_Base_SetConfig+0x114>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d02b      	beq.n	800c31e <TIM_Base_SetConfig+0xb2>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2cc:	d027      	beq.n	800c31e <TIM_Base_SetConfig+0xb2>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a2c      	ldr	r2, [pc, #176]	; (800c384 <TIM_Base_SetConfig+0x118>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d023      	beq.n	800c31e <TIM_Base_SetConfig+0xb2>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a2b      	ldr	r2, [pc, #172]	; (800c388 <TIM_Base_SetConfig+0x11c>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d01f      	beq.n	800c31e <TIM_Base_SetConfig+0xb2>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a2a      	ldr	r2, [pc, #168]	; (800c38c <TIM_Base_SetConfig+0x120>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d01b      	beq.n	800c31e <TIM_Base_SetConfig+0xb2>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4a29      	ldr	r2, [pc, #164]	; (800c390 <TIM_Base_SetConfig+0x124>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d017      	beq.n	800c31e <TIM_Base_SetConfig+0xb2>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a28      	ldr	r2, [pc, #160]	; (800c394 <TIM_Base_SetConfig+0x128>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d013      	beq.n	800c31e <TIM_Base_SetConfig+0xb2>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4a27      	ldr	r2, [pc, #156]	; (800c398 <TIM_Base_SetConfig+0x12c>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d00f      	beq.n	800c31e <TIM_Base_SetConfig+0xb2>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a26      	ldr	r2, [pc, #152]	; (800c39c <TIM_Base_SetConfig+0x130>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d00b      	beq.n	800c31e <TIM_Base_SetConfig+0xb2>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a25      	ldr	r2, [pc, #148]	; (800c3a0 <TIM_Base_SetConfig+0x134>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d007      	beq.n	800c31e <TIM_Base_SetConfig+0xb2>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a24      	ldr	r2, [pc, #144]	; (800c3a4 <TIM_Base_SetConfig+0x138>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d003      	beq.n	800c31e <TIM_Base_SetConfig+0xb2>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a23      	ldr	r2, [pc, #140]	; (800c3a8 <TIM_Base_SetConfig+0x13c>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d108      	bne.n	800c330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	4313      	orrs	r3, r2
 800c32e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	689a      	ldr	r2, [r3, #8]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a0a      	ldr	r2, [pc, #40]	; (800c380 <TIM_Base_SetConfig+0x114>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d003      	beq.n	800c364 <TIM_Base_SetConfig+0xf8>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a0c      	ldr	r2, [pc, #48]	; (800c390 <TIM_Base_SetConfig+0x124>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d103      	bne.n	800c36c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	691a      	ldr	r2, [r3, #16]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2201      	movs	r2, #1
 800c370:	615a      	str	r2, [r3, #20]
}
 800c372:	bf00      	nop
 800c374:	3714      	adds	r7, #20
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	40010000 	.word	0x40010000
 800c384:	40000400 	.word	0x40000400
 800c388:	40000800 	.word	0x40000800
 800c38c:	40000c00 	.word	0x40000c00
 800c390:	40010400 	.word	0x40010400
 800c394:	40014000 	.word	0x40014000
 800c398:	40014400 	.word	0x40014400
 800c39c:	40014800 	.word	0x40014800
 800c3a0:	40001800 	.word	0x40001800
 800c3a4:	40001c00 	.word	0x40001c00
 800c3a8:	40002000 	.word	0x40002000

0800c3ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b087      	sub	sp, #28
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	f023 0201 	bic.w	r2, r3, #1
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a1b      	ldr	r3, [r3, #32]
 800c3c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	699b      	ldr	r3, [r3, #24]
 800c3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f023 0303 	bic.w	r3, r3, #3
 800c3e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f023 0302 	bic.w	r3, r3, #2
 800c3f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a20      	ldr	r2, [pc, #128]	; (800c484 <TIM_OC1_SetConfig+0xd8>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d003      	beq.n	800c410 <TIM_OC1_SetConfig+0x64>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a1f      	ldr	r2, [pc, #124]	; (800c488 <TIM_OC1_SetConfig+0xdc>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d10c      	bne.n	800c42a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	f023 0308 	bic.w	r3, r3, #8
 800c416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	697a      	ldr	r2, [r7, #20]
 800c41e:	4313      	orrs	r3, r2
 800c420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	f023 0304 	bic.w	r3, r3, #4
 800c428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4a15      	ldr	r2, [pc, #84]	; (800c484 <TIM_OC1_SetConfig+0xd8>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d003      	beq.n	800c43a <TIM_OC1_SetConfig+0x8e>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a14      	ldr	r2, [pc, #80]	; (800c488 <TIM_OC1_SetConfig+0xdc>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d111      	bne.n	800c45e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	695b      	ldr	r3, [r3, #20]
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	4313      	orrs	r3, r2
 800c452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	699b      	ldr	r3, [r3, #24]
 800c458:	693a      	ldr	r2, [r7, #16]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	693a      	ldr	r2, [r7, #16]
 800c462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	685a      	ldr	r2, [r3, #4]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	697a      	ldr	r2, [r7, #20]
 800c476:	621a      	str	r2, [r3, #32]
}
 800c478:	bf00      	nop
 800c47a:	371c      	adds	r7, #28
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr
 800c484:	40010000 	.word	0x40010000
 800c488:	40010400 	.word	0x40010400

0800c48c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b087      	sub	sp, #28
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a1b      	ldr	r3, [r3, #32]
 800c49a:	f023 0210 	bic.w	r2, r3, #16
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	699b      	ldr	r3, [r3, #24]
 800c4b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	021b      	lsls	r3, r3, #8
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	f023 0320 	bic.w	r3, r3, #32
 800c4d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	011b      	lsls	r3, r3, #4
 800c4de:	697a      	ldr	r2, [r7, #20]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4a22      	ldr	r2, [pc, #136]	; (800c570 <TIM_OC2_SetConfig+0xe4>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d003      	beq.n	800c4f4 <TIM_OC2_SetConfig+0x68>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4a21      	ldr	r2, [pc, #132]	; (800c574 <TIM_OC2_SetConfig+0xe8>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d10d      	bne.n	800c510 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	011b      	lsls	r3, r3, #4
 800c502:	697a      	ldr	r2, [r7, #20]
 800c504:	4313      	orrs	r3, r2
 800c506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c50e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a17      	ldr	r2, [pc, #92]	; (800c570 <TIM_OC2_SetConfig+0xe4>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d003      	beq.n	800c520 <TIM_OC2_SetConfig+0x94>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a16      	ldr	r2, [pc, #88]	; (800c574 <TIM_OC2_SetConfig+0xe8>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d113      	bne.n	800c548 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c526:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c52e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	695b      	ldr	r3, [r3, #20]
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	693a      	ldr	r2, [r7, #16]
 800c538:	4313      	orrs	r3, r2
 800c53a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	699b      	ldr	r3, [r3, #24]
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	693a      	ldr	r2, [r7, #16]
 800c544:	4313      	orrs	r3, r2
 800c546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	685a      	ldr	r2, [r3, #4]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	697a      	ldr	r2, [r7, #20]
 800c560:	621a      	str	r2, [r3, #32]
}
 800c562:	bf00      	nop
 800c564:	371c      	adds	r7, #28
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	40010000 	.word	0x40010000
 800c574:	40010400 	.word	0x40010400

0800c578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c578:	b480      	push	{r7}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	69db      	ldr	r3, [r3, #28]
 800c59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f023 0303 	bic.w	r3, r3, #3
 800c5ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	021b      	lsls	r3, r3, #8
 800c5c8:	697a      	ldr	r2, [r7, #20]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4a21      	ldr	r2, [pc, #132]	; (800c658 <TIM_OC3_SetConfig+0xe0>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d003      	beq.n	800c5de <TIM_OC3_SetConfig+0x66>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4a20      	ldr	r2, [pc, #128]	; (800c65c <TIM_OC3_SetConfig+0xe4>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d10d      	bne.n	800c5fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	021b      	lsls	r3, r3, #8
 800c5ec:	697a      	ldr	r2, [r7, #20]
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4a16      	ldr	r2, [pc, #88]	; (800c658 <TIM_OC3_SetConfig+0xe0>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d003      	beq.n	800c60a <TIM_OC3_SetConfig+0x92>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4a15      	ldr	r2, [pc, #84]	; (800c65c <TIM_OC3_SetConfig+0xe4>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d113      	bne.n	800c632 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	695b      	ldr	r3, [r3, #20]
 800c61e:	011b      	lsls	r3, r3, #4
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	4313      	orrs	r3, r2
 800c624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	011b      	lsls	r3, r3, #4
 800c62c:	693a      	ldr	r2, [r7, #16]
 800c62e:	4313      	orrs	r3, r2
 800c630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	685a      	ldr	r2, [r3, #4]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	697a      	ldr	r2, [r7, #20]
 800c64a:	621a      	str	r2, [r3, #32]
}
 800c64c:	bf00      	nop
 800c64e:	371c      	adds	r7, #28
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr
 800c658:	40010000 	.word	0x40010000
 800c65c:	40010400 	.word	0x40010400

0800c660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c660:	b480      	push	{r7}
 800c662:	b087      	sub	sp, #28
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a1b      	ldr	r3, [r3, #32]
 800c66e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a1b      	ldr	r3, [r3, #32]
 800c67a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	69db      	ldr	r3, [r3, #28]
 800c686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c68e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	021b      	lsls	r3, r3, #8
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	031b      	lsls	r3, r3, #12
 800c6b2:	693a      	ldr	r2, [r7, #16]
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a12      	ldr	r2, [pc, #72]	; (800c704 <TIM_OC4_SetConfig+0xa4>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d003      	beq.n	800c6c8 <TIM_OC4_SetConfig+0x68>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4a11      	ldr	r2, [pc, #68]	; (800c708 <TIM_OC4_SetConfig+0xa8>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d109      	bne.n	800c6dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c6ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	695b      	ldr	r3, [r3, #20]
 800c6d4:	019b      	lsls	r3, r3, #6
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	685a      	ldr	r2, [r3, #4]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	693a      	ldr	r2, [r7, #16]
 800c6f4:	621a      	str	r2, [r3, #32]
}
 800c6f6:	bf00      	nop
 800c6f8:	371c      	adds	r7, #28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	40010000 	.word	0x40010000
 800c708:	40010400 	.word	0x40010400

0800c70c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6a1b      	ldr	r3, [r3, #32]
 800c71c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	f023 0201 	bic.w	r2, r3, #1
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	699b      	ldr	r3, [r3, #24]
 800c72e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	011b      	lsls	r3, r3, #4
 800c73c:	693a      	ldr	r2, [r7, #16]
 800c73e:	4313      	orrs	r3, r2
 800c740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f023 030a 	bic.w	r3, r3, #10
 800c748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	4313      	orrs	r3, r2
 800c750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	693a      	ldr	r2, [r7, #16]
 800c756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	697a      	ldr	r2, [r7, #20]
 800c75c:	621a      	str	r2, [r3, #32]
}
 800c75e:	bf00      	nop
 800c760:	371c      	adds	r7, #28
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c76a:	b480      	push	{r7}
 800c76c:	b087      	sub	sp, #28
 800c76e:	af00      	add	r7, sp, #0
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	f023 0210 	bic.w	r2, r3, #16
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6a1b      	ldr	r3, [r3, #32]
 800c78c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	031b      	lsls	r3, r3, #12
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c7a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	011b      	lsls	r3, r3, #4
 800c7ac:	693a      	ldr	r2, [r7, #16]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	697a      	ldr	r2, [r7, #20]
 800c7b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	693a      	ldr	r2, [r7, #16]
 800c7bc:	621a      	str	r2, [r3, #32]
}
 800c7be:	bf00      	nop
 800c7c0:	371c      	adds	r7, #28
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b085      	sub	sp, #20
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	f043 0307 	orr.w	r3, r3, #7
 800c7ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	609a      	str	r2, [r3, #8]
}
 800c7f4:	bf00      	nop
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c800:	b480      	push	{r7}
 800c802:	b087      	sub	sp, #28
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	607a      	str	r2, [r7, #4]
 800c80c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c81a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	021a      	lsls	r2, r3, #8
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	431a      	orrs	r2, r3
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	4313      	orrs	r3, r2
 800c828:	697a      	ldr	r2, [r7, #20]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	609a      	str	r2, [r3, #8]
}
 800c834:	bf00      	nop
 800c836:	371c      	adds	r7, #28
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c840:	b480      	push	{r7}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f003 031f 	and.w	r3, r3, #31
 800c852:	2201      	movs	r2, #1
 800c854:	fa02 f303 	lsl.w	r3, r2, r3
 800c858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6a1a      	ldr	r2, [r3, #32]
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	43db      	mvns	r3, r3
 800c862:	401a      	ands	r2, r3
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6a1a      	ldr	r2, [r3, #32]
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	f003 031f 	and.w	r3, r3, #31
 800c872:	6879      	ldr	r1, [r7, #4]
 800c874:	fa01 f303 	lsl.w	r3, r1, r3
 800c878:	431a      	orrs	r2, r3
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	621a      	str	r2, [r3, #32]
}
 800c87e:	bf00      	nop
 800c880:	371c      	adds	r7, #28
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d101      	bne.n	800c8a2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c89e:	2302      	movs	r3, #2
 800c8a0:	e032      	b.n	800c908 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2202      	movs	r2, #2
 800c8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8da:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3714      	adds	r7, #20
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d101      	bne.n	800c926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	e03f      	b.n	800c9a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d106      	bne.n	800c940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f009 fb5a 	bl	8015ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2224      	movs	r2, #36	; 0x24
 800c944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68da      	ldr	r2, [r3, #12]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f9cf 	bl	800ccfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	691a      	ldr	r2, [r3, #16]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c96c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	695a      	ldr	r2, [r3, #20]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c97c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68da      	ldr	r2, [r3, #12]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c98c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2220      	movs	r2, #32
 800c998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2220      	movs	r2, #32
 800c9a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b088      	sub	sp, #32
 800c9b2:	af02      	add	r7, sp, #8
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	60b9      	str	r1, [r7, #8]
 800c9b8:	603b      	str	r3, [r7, #0]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	2b20      	cmp	r3, #32
 800c9cc:	f040 8083 	bne.w	800cad6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d002      	beq.n	800c9dc <HAL_UART_Transmit+0x2e>
 800c9d6:	88fb      	ldrh	r3, [r7, #6]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e07b      	b.n	800cad8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d101      	bne.n	800c9ee <HAL_UART_Transmit+0x40>
 800c9ea:	2302      	movs	r3, #2
 800c9ec:	e074      	b.n	800cad8 <HAL_UART_Transmit+0x12a>
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2221      	movs	r2, #33	; 0x21
 800ca00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800ca04:	f7f9 fc62 	bl	80062cc <HAL_GetTick>
 800ca08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	88fa      	ldrh	r2, [r7, #6]
 800ca0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	88fa      	ldrh	r2, [r7, #6]
 800ca14:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ca16:	e042      	b.n	800ca9e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca2e:	d122      	bne.n	800ca76 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	9300      	str	r3, [sp, #0]
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	2200      	movs	r2, #0
 800ca38:	2180      	movs	r1, #128	; 0x80
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	f000 f914 	bl	800cc68 <UART_WaitOnFlagUntilTimeout>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800ca46:	2303      	movs	r3, #3
 800ca48:	e046      	b.n	800cad8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	461a      	mov	r2, r3
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca5c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d103      	bne.n	800ca6e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	3302      	adds	r3, #2
 800ca6a:	60bb      	str	r3, [r7, #8]
 800ca6c:	e017      	b.n	800ca9e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	3301      	adds	r3, #1
 800ca72:	60bb      	str	r3, [r7, #8]
 800ca74:	e013      	b.n	800ca9e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	2180      	movs	r1, #128	; 0x80
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f000 f8f1 	bl	800cc68 <UART_WaitOnFlagUntilTimeout>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	e023      	b.n	800cad8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	60ba      	str	r2, [r7, #8]
 800ca96:	781a      	ldrb	r2, [r3, #0]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1b7      	bne.n	800ca18 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	9300      	str	r3, [sp, #0]
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2200      	movs	r2, #0
 800cab0:	2140      	movs	r1, #64	; 0x40
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f000 f8d8 	bl	800cc68 <UART_WaitOnFlagUntilTimeout>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800cabe:	2303      	movs	r3, #3
 800cac0:	e00a      	b.n	800cad8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2220      	movs	r2, #32
 800cac6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800cad2:	2300      	movs	r3, #0
 800cad4:	e000      	b.n	800cad8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800cad6:	2302      	movs	r3, #2
  }
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3718      	adds	r7, #24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b088      	sub	sp, #32
 800cae4:	af02      	add	r7, sp, #8
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	603b      	str	r3, [r7, #0]
 800caec:	4613      	mov	r3, r2
 800caee:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800caf0:	2300      	movs	r3, #0
 800caf2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b20      	cmp	r3, #32
 800cafe:	f040 8090 	bne.w	800cc22 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d002      	beq.n	800cb0e <HAL_UART_Receive+0x2e>
 800cb08:	88fb      	ldrh	r3, [r7, #6]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d101      	bne.n	800cb12 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e088      	b.n	800cc24 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d101      	bne.n	800cb20 <HAL_UART_Receive+0x40>
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	e081      	b.n	800cc24 <HAL_UART_Receive+0x144>
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2201      	movs	r2, #1
 800cb24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2222      	movs	r2, #34	; 0x22
 800cb32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800cb36:	f7f9 fbc9 	bl	80062cc <HAL_GetTick>
 800cb3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	88fa      	ldrh	r2, [r7, #6]
 800cb40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	88fa      	ldrh	r2, [r7, #6]
 800cb46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800cb48:	e05c      	b.n	800cc04 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	3b01      	subs	r3, #1
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb60:	d12b      	bne.n	800cbba <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	2120      	movs	r1, #32
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f000 f87b 	bl	800cc68 <UART_WaitOnFlagUntilTimeout>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800cb78:	2303      	movs	r3, #3
 800cb7a:	e053      	b.n	800cc24 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	691b      	ldr	r3, [r3, #16]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d10c      	bne.n	800cba2 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	3302      	adds	r3, #2
 800cb9e:	60bb      	str	r3, [r7, #8]
 800cba0:	e030      	b.n	800cc04 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	60bb      	str	r3, [r7, #8]
 800cbb8:	e024      	b.n	800cc04 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	2120      	movs	r1, #32
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f000 f84f 	bl	800cc68 <UART_WaitOnFlagUntilTimeout>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d001      	beq.n	800cbd4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800cbd0:	2303      	movs	r3, #3
 800cbd2:	e027      	b.n	800cc24 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d108      	bne.n	800cbee <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	6859      	ldr	r1, [r3, #4]
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	1c5a      	adds	r2, r3, #1
 800cbe6:	60ba      	str	r2, [r7, #8]
 800cbe8:	b2ca      	uxtb	r2, r1
 800cbea:	701a      	strb	r2, [r3, #0]
 800cbec:	e00a      	b.n	800cc04 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	1c59      	adds	r1, r3, #1
 800cbfa:	60b9      	str	r1, [r7, #8]
 800cbfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc00:	b2d2      	uxtb	r2, r2
 800cc02:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d19d      	bne.n	800cb4a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2220      	movs	r2, #32
 800cc12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	e000      	b.n	800cc24 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cc22:	2302      	movs	r3, #2
  }
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3718      	adds	r7, #24
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800cc34:	2300      	movs	r3, #0
 800cc36:	60fb      	str	r3, [r7, #12]
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	b2db      	uxtb	r3, r3
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3714      	adds	r7, #20
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	603b      	str	r3, [r7, #0]
 800cc74:	4613      	mov	r3, r2
 800cc76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc78:	e02c      	b.n	800ccd4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc80:	d028      	beq.n	800ccd4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d007      	beq.n	800cc98 <UART_WaitOnFlagUntilTimeout+0x30>
 800cc88:	f7f9 fb20 	bl	80062cc <HAL_GetTick>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	1ad3      	subs	r3, r2, r3
 800cc92:	69ba      	ldr	r2, [r7, #24]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d21d      	bcs.n	800ccd4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68da      	ldr	r2, [r3, #12]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cca6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	695a      	ldr	r2, [r3, #20]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f022 0201 	bic.w	r2, r2, #1
 800ccb6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2220      	movs	r2, #32
 800ccbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2220      	movs	r2, #32
 800ccc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	e00f      	b.n	800ccf4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	4013      	ands	r3, r2
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	bf0c      	ite	eq
 800cce4:	2301      	moveq	r3, #1
 800cce6:	2300      	movne	r3, #0
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	461a      	mov	r2, r3
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d0c3      	beq.n	800cc7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ccfc:	b5b0      	push	{r4, r5, r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	68da      	ldr	r2, [r3, #12]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	430a      	orrs	r2, r1
 800cd18:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	691b      	ldr	r3, [r3, #16]
 800cd22:	431a      	orrs	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	695b      	ldr	r3, [r3, #20]
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	69db      	ldr	r3, [r3, #28]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800cd3c:	f023 030c 	bic.w	r3, r3, #12
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	6812      	ldr	r2, [r2, #0]
 800cd44:	68f9      	ldr	r1, [r7, #12]
 800cd46:	430b      	orrs	r3, r1
 800cd48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	695b      	ldr	r3, [r3, #20]
 800cd50:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	699a      	ldr	r2, [r3, #24]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	430a      	orrs	r2, r1
 800cd5e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd68:	f040 80e4 	bne.w	800cf34 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4aab      	ldr	r2, [pc, #684]	; (800d020 <UART_SetConfig+0x324>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d004      	beq.n	800cd80 <UART_SetConfig+0x84>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4aaa      	ldr	r2, [pc, #680]	; (800d024 <UART_SetConfig+0x328>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d16c      	bne.n	800ce5a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800cd80:	f7fc fe62 	bl	8009a48 <HAL_RCC_GetPCLK2Freq>
 800cd84:	4602      	mov	r2, r0
 800cd86:	4613      	mov	r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	4413      	add	r3, r2
 800cd8c:	009a      	lsls	r2, r3, #2
 800cd8e:	441a      	add	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	005b      	lsls	r3, r3, #1
 800cd96:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd9a:	4aa3      	ldr	r2, [pc, #652]	; (800d028 <UART_SetConfig+0x32c>)
 800cd9c:	fba2 2303 	umull	r2, r3, r2, r3
 800cda0:	095b      	lsrs	r3, r3, #5
 800cda2:	011c      	lsls	r4, r3, #4
 800cda4:	f7fc fe50 	bl	8009a48 <HAL_RCC_GetPCLK2Freq>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	4613      	mov	r3, r2
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	4413      	add	r3, r2
 800cdb0:	009a      	lsls	r2, r3, #2
 800cdb2:	441a      	add	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	005b      	lsls	r3, r3, #1
 800cdba:	fbb2 f5f3 	udiv	r5, r2, r3
 800cdbe:	f7fc fe43 	bl	8009a48 <HAL_RCC_GetPCLK2Freq>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	009a      	lsls	r2, r3, #2
 800cdcc:	441a      	add	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdd8:	4a93      	ldr	r2, [pc, #588]	; (800d028 <UART_SetConfig+0x32c>)
 800cdda:	fba2 2303 	umull	r2, r3, r2, r3
 800cdde:	095b      	lsrs	r3, r3, #5
 800cde0:	2264      	movs	r2, #100	; 0x64
 800cde2:	fb02 f303 	mul.w	r3, r2, r3
 800cde6:	1aeb      	subs	r3, r5, r3
 800cde8:	00db      	lsls	r3, r3, #3
 800cdea:	3332      	adds	r3, #50	; 0x32
 800cdec:	4a8e      	ldr	r2, [pc, #568]	; (800d028 <UART_SetConfig+0x32c>)
 800cdee:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf2:	095b      	lsrs	r3, r3, #5
 800cdf4:	005b      	lsls	r3, r3, #1
 800cdf6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cdfa:	441c      	add	r4, r3
 800cdfc:	f7fc fe24 	bl	8009a48 <HAL_RCC_GetPCLK2Freq>
 800ce00:	4602      	mov	r2, r0
 800ce02:	4613      	mov	r3, r2
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	4413      	add	r3, r2
 800ce08:	009a      	lsls	r2, r3, #2
 800ce0a:	441a      	add	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	fbb2 f5f3 	udiv	r5, r2, r3
 800ce16:	f7fc fe17 	bl	8009a48 <HAL_RCC_GetPCLK2Freq>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	4413      	add	r3, r2
 800ce22:	009a      	lsls	r2, r3, #2
 800ce24:	441a      	add	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce30:	4a7d      	ldr	r2, [pc, #500]	; (800d028 <UART_SetConfig+0x32c>)
 800ce32:	fba2 2303 	umull	r2, r3, r2, r3
 800ce36:	095b      	lsrs	r3, r3, #5
 800ce38:	2264      	movs	r2, #100	; 0x64
 800ce3a:	fb02 f303 	mul.w	r3, r2, r3
 800ce3e:	1aeb      	subs	r3, r5, r3
 800ce40:	00db      	lsls	r3, r3, #3
 800ce42:	3332      	adds	r3, #50	; 0x32
 800ce44:	4a78      	ldr	r2, [pc, #480]	; (800d028 <UART_SetConfig+0x32c>)
 800ce46:	fba2 2303 	umull	r2, r3, r2, r3
 800ce4a:	095b      	lsrs	r3, r3, #5
 800ce4c:	f003 0207 	and.w	r2, r3, #7
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4422      	add	r2, r4
 800ce56:	609a      	str	r2, [r3, #8]
 800ce58:	e154      	b.n	800d104 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800ce5a:	f7fc fde1 	bl	8009a20 <HAL_RCC_GetPCLK1Freq>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	4613      	mov	r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	4413      	add	r3, r2
 800ce66:	009a      	lsls	r2, r3, #2
 800ce68:	441a      	add	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	005b      	lsls	r3, r3, #1
 800ce70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce74:	4a6c      	ldr	r2, [pc, #432]	; (800d028 <UART_SetConfig+0x32c>)
 800ce76:	fba2 2303 	umull	r2, r3, r2, r3
 800ce7a:	095b      	lsrs	r3, r3, #5
 800ce7c:	011c      	lsls	r4, r3, #4
 800ce7e:	f7fc fdcf 	bl	8009a20 <HAL_RCC_GetPCLK1Freq>
 800ce82:	4602      	mov	r2, r0
 800ce84:	4613      	mov	r3, r2
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	4413      	add	r3, r2
 800ce8a:	009a      	lsls	r2, r3, #2
 800ce8c:	441a      	add	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	fbb2 f5f3 	udiv	r5, r2, r3
 800ce98:	f7fc fdc2 	bl	8009a20 <HAL_RCC_GetPCLK1Freq>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	4613      	mov	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	009a      	lsls	r2, r3, #2
 800cea6:	441a      	add	r2, r3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	005b      	lsls	r3, r3, #1
 800ceae:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceb2:	4a5d      	ldr	r2, [pc, #372]	; (800d028 <UART_SetConfig+0x32c>)
 800ceb4:	fba2 2303 	umull	r2, r3, r2, r3
 800ceb8:	095b      	lsrs	r3, r3, #5
 800ceba:	2264      	movs	r2, #100	; 0x64
 800cebc:	fb02 f303 	mul.w	r3, r2, r3
 800cec0:	1aeb      	subs	r3, r5, r3
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	3332      	adds	r3, #50	; 0x32
 800cec6:	4a58      	ldr	r2, [pc, #352]	; (800d028 <UART_SetConfig+0x32c>)
 800cec8:	fba2 2303 	umull	r2, r3, r2, r3
 800cecc:	095b      	lsrs	r3, r3, #5
 800cece:	005b      	lsls	r3, r3, #1
 800ced0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ced4:	441c      	add	r4, r3
 800ced6:	f7fc fda3 	bl	8009a20 <HAL_RCC_GetPCLK1Freq>
 800ceda:	4602      	mov	r2, r0
 800cedc:	4613      	mov	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	009a      	lsls	r2, r3, #2
 800cee4:	441a      	add	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	005b      	lsls	r3, r3, #1
 800ceec:	fbb2 f5f3 	udiv	r5, r2, r3
 800cef0:	f7fc fd96 	bl	8009a20 <HAL_RCC_GetPCLK1Freq>
 800cef4:	4602      	mov	r2, r0
 800cef6:	4613      	mov	r3, r2
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	4413      	add	r3, r2
 800cefc:	009a      	lsls	r2, r3, #2
 800cefe:	441a      	add	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	005b      	lsls	r3, r3, #1
 800cf06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf0a:	4a47      	ldr	r2, [pc, #284]	; (800d028 <UART_SetConfig+0x32c>)
 800cf0c:	fba2 2303 	umull	r2, r3, r2, r3
 800cf10:	095b      	lsrs	r3, r3, #5
 800cf12:	2264      	movs	r2, #100	; 0x64
 800cf14:	fb02 f303 	mul.w	r3, r2, r3
 800cf18:	1aeb      	subs	r3, r5, r3
 800cf1a:	00db      	lsls	r3, r3, #3
 800cf1c:	3332      	adds	r3, #50	; 0x32
 800cf1e:	4a42      	ldr	r2, [pc, #264]	; (800d028 <UART_SetConfig+0x32c>)
 800cf20:	fba2 2303 	umull	r2, r3, r2, r3
 800cf24:	095b      	lsrs	r3, r3, #5
 800cf26:	f003 0207 	and.w	r2, r3, #7
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4422      	add	r2, r4
 800cf30:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800cf32:	e0e7      	b.n	800d104 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a39      	ldr	r2, [pc, #228]	; (800d020 <UART_SetConfig+0x324>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d004      	beq.n	800cf48 <UART_SetConfig+0x24c>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a38      	ldr	r2, [pc, #224]	; (800d024 <UART_SetConfig+0x328>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d171      	bne.n	800d02c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800cf48:	f7fc fd7e 	bl	8009a48 <HAL_RCC_GetPCLK2Freq>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	4613      	mov	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	009a      	lsls	r2, r3, #2
 800cf56:	441a      	add	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf62:	4a31      	ldr	r2, [pc, #196]	; (800d028 <UART_SetConfig+0x32c>)
 800cf64:	fba2 2303 	umull	r2, r3, r2, r3
 800cf68:	095b      	lsrs	r3, r3, #5
 800cf6a:	011c      	lsls	r4, r3, #4
 800cf6c:	f7fc fd6c 	bl	8009a48 <HAL_RCC_GetPCLK2Freq>
 800cf70:	4602      	mov	r2, r0
 800cf72:	4613      	mov	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	4413      	add	r3, r2
 800cf78:	009a      	lsls	r2, r3, #2
 800cf7a:	441a      	add	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	fbb2 f5f3 	udiv	r5, r2, r3
 800cf86:	f7fc fd5f 	bl	8009a48 <HAL_RCC_GetPCLK2Freq>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	4413      	add	r3, r2
 800cf92:	009a      	lsls	r2, r3, #2
 800cf94:	441a      	add	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfa0:	4a21      	ldr	r2, [pc, #132]	; (800d028 <UART_SetConfig+0x32c>)
 800cfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfa6:	095b      	lsrs	r3, r3, #5
 800cfa8:	2264      	movs	r2, #100	; 0x64
 800cfaa:	fb02 f303 	mul.w	r3, r2, r3
 800cfae:	1aeb      	subs	r3, r5, r3
 800cfb0:	011b      	lsls	r3, r3, #4
 800cfb2:	3332      	adds	r3, #50	; 0x32
 800cfb4:	4a1c      	ldr	r2, [pc, #112]	; (800d028 <UART_SetConfig+0x32c>)
 800cfb6:	fba2 2303 	umull	r2, r3, r2, r3
 800cfba:	095b      	lsrs	r3, r3, #5
 800cfbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfc0:	441c      	add	r4, r3
 800cfc2:	f7fc fd41 	bl	8009a48 <HAL_RCC_GetPCLK2Freq>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	4613      	mov	r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	009a      	lsls	r2, r3, #2
 800cfd0:	441a      	add	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	fbb2 f5f3 	udiv	r5, r2, r3
 800cfdc:	f7fc fd34 	bl	8009a48 <HAL_RCC_GetPCLK2Freq>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4413      	add	r3, r2
 800cfe8:	009a      	lsls	r2, r3, #2
 800cfea:	441a      	add	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cff6:	4a0c      	ldr	r2, [pc, #48]	; (800d028 <UART_SetConfig+0x32c>)
 800cff8:	fba2 2303 	umull	r2, r3, r2, r3
 800cffc:	095b      	lsrs	r3, r3, #5
 800cffe:	2264      	movs	r2, #100	; 0x64
 800d000:	fb02 f303 	mul.w	r3, r2, r3
 800d004:	1aeb      	subs	r3, r5, r3
 800d006:	011b      	lsls	r3, r3, #4
 800d008:	3332      	adds	r3, #50	; 0x32
 800d00a:	4a07      	ldr	r2, [pc, #28]	; (800d028 <UART_SetConfig+0x32c>)
 800d00c:	fba2 2303 	umull	r2, r3, r2, r3
 800d010:	095b      	lsrs	r3, r3, #5
 800d012:	f003 020f 	and.w	r2, r3, #15
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4422      	add	r2, r4
 800d01c:	609a      	str	r2, [r3, #8]
 800d01e:	e071      	b.n	800d104 <UART_SetConfig+0x408>
 800d020:	40011000 	.word	0x40011000
 800d024:	40011400 	.word	0x40011400
 800d028:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800d02c:	f7fc fcf8 	bl	8009a20 <HAL_RCC_GetPCLK1Freq>
 800d030:	4602      	mov	r2, r0
 800d032:	4613      	mov	r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	4413      	add	r3, r2
 800d038:	009a      	lsls	r2, r3, #2
 800d03a:	441a      	add	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	fbb2 f3f3 	udiv	r3, r2, r3
 800d046:	4a31      	ldr	r2, [pc, #196]	; (800d10c <UART_SetConfig+0x410>)
 800d048:	fba2 2303 	umull	r2, r3, r2, r3
 800d04c:	095b      	lsrs	r3, r3, #5
 800d04e:	011c      	lsls	r4, r3, #4
 800d050:	f7fc fce6 	bl	8009a20 <HAL_RCC_GetPCLK1Freq>
 800d054:	4602      	mov	r2, r0
 800d056:	4613      	mov	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	4413      	add	r3, r2
 800d05c:	009a      	lsls	r2, r3, #2
 800d05e:	441a      	add	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	fbb2 f5f3 	udiv	r5, r2, r3
 800d06a:	f7fc fcd9 	bl	8009a20 <HAL_RCC_GetPCLK1Freq>
 800d06e:	4602      	mov	r2, r0
 800d070:	4613      	mov	r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4413      	add	r3, r2
 800d076:	009a      	lsls	r2, r3, #2
 800d078:	441a      	add	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	fbb2 f3f3 	udiv	r3, r2, r3
 800d084:	4a21      	ldr	r2, [pc, #132]	; (800d10c <UART_SetConfig+0x410>)
 800d086:	fba2 2303 	umull	r2, r3, r2, r3
 800d08a:	095b      	lsrs	r3, r3, #5
 800d08c:	2264      	movs	r2, #100	; 0x64
 800d08e:	fb02 f303 	mul.w	r3, r2, r3
 800d092:	1aeb      	subs	r3, r5, r3
 800d094:	011b      	lsls	r3, r3, #4
 800d096:	3332      	adds	r3, #50	; 0x32
 800d098:	4a1c      	ldr	r2, [pc, #112]	; (800d10c <UART_SetConfig+0x410>)
 800d09a:	fba2 2303 	umull	r2, r3, r2, r3
 800d09e:	095b      	lsrs	r3, r3, #5
 800d0a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d0a4:	441c      	add	r4, r3
 800d0a6:	f7fc fcbb 	bl	8009a20 <HAL_RCC_GetPCLK1Freq>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	4413      	add	r3, r2
 800d0b2:	009a      	lsls	r2, r3, #2
 800d0b4:	441a      	add	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	fbb2 f5f3 	udiv	r5, r2, r3
 800d0c0:	f7fc fcae 	bl	8009a20 <HAL_RCC_GetPCLK1Freq>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	009b      	lsls	r3, r3, #2
 800d0ca:	4413      	add	r3, r2
 800d0cc:	009a      	lsls	r2, r3, #2
 800d0ce:	441a      	add	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0da:	4a0c      	ldr	r2, [pc, #48]	; (800d10c <UART_SetConfig+0x410>)
 800d0dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d0e0:	095b      	lsrs	r3, r3, #5
 800d0e2:	2264      	movs	r2, #100	; 0x64
 800d0e4:	fb02 f303 	mul.w	r3, r2, r3
 800d0e8:	1aeb      	subs	r3, r5, r3
 800d0ea:	011b      	lsls	r3, r3, #4
 800d0ec:	3332      	adds	r3, #50	; 0x32
 800d0ee:	4a07      	ldr	r2, [pc, #28]	; (800d10c <UART_SetConfig+0x410>)
 800d0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f4:	095b      	lsrs	r3, r3, #5
 800d0f6:	f003 020f 	and.w	r2, r3, #15
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4422      	add	r2, r4
 800d100:	609a      	str	r2, [r3, #8]
}
 800d102:	e7ff      	b.n	800d104 <UART_SetConfig+0x408>
 800d104:	bf00      	nop
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bdb0      	pop	{r4, r5, r7, pc}
 800d10c:	51eb851f 	.word	0x51eb851f

0800d110 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d110:	b084      	sub	sp, #16
 800d112:	b480      	push	{r7}
 800d114:	b085      	sub	sp, #20
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	f107 001c 	add.w	r0, r7, #28
 800d11e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800d122:	2300      	movs	r3, #0
 800d124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d126:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d128:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d12a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d12e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d132:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d136:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d13a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	4313      	orrs	r3, r2
 800d140:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d14a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d14e:	68fa      	ldr	r2, [r7, #12]
 800d150:	431a      	orrs	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	b004      	add	sp, #16
 800d164:	4770      	bx	lr

0800d166 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d166:	b480      	push	{r7}
 800d168:	b083      	sub	sp, #12
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d174:	4618      	mov	r0, r3
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr

0800d180 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	370c      	adds	r7, #12
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d1a2:	b480      	push	{r7}
 800d1a4:	b083      	sub	sp, #12
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2203      	movs	r2, #3
 800d1ae:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	370c      	adds	r7, #12
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr

0800d1be <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d1be:	b480      	push	{r7}
 800d1c0:	b083      	sub	sp, #12
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f003 0303 	and.w	r3, r3, #3
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr

0800d1da <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d1da:	b480      	push	{r7}
 800d1dc:	b085      	sub	sp, #20
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d1f8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d1fe:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d204:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d206:	68fa      	ldr	r2, [r7, #12]
 800d208:	4313      	orrs	r3, r2
 800d20a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d214:	f023 030f 	bic.w	r3, r3, #15
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	431a      	orrs	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3714      	adds	r7, #20
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d22e:	b480      	push	{r7}
 800d230:	b083      	sub	sp, #12
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	691b      	ldr	r3, [r3, #16]
 800d23a:	b2db      	uxtb	r3, r3
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800d252:	2300      	movs	r3, #0
 800d254:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	3314      	adds	r3, #20
 800d25a:	461a      	mov	r2, r3
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	4413      	add	r3, r2
 800d260:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
}  
 800d266:	4618      	mov	r0, r3
 800d268:	3714      	adds	r7, #20
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d272:	b480      	push	{r7}
 800d274:	b085      	sub	sp, #20
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
 800d27a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d27c:	2300      	movs	r3, #0
 800d27e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d298:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d29e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d2a4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d2bc:	2300      	movs	r3, #0

}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3714      	adds	r7, #20
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b088      	sub	sp, #32
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d2dc:	2310      	movs	r3, #16
 800d2de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d2e0:	2340      	movs	r3, #64	; 0x40
 800d2e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2ec:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2ee:	f107 0308 	add.w	r3, r7, #8
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f7ff ff70 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d2fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2fe:	2110      	movs	r1, #16
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 fa63 	bl	800d7cc <SDMMC_GetCmdResp1>
 800d306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d308:	69fb      	ldr	r3, [r7, #28]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3720      	adds	r7, #32
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}

0800d312 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b088      	sub	sp, #32
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
 800d31a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d31c:	2300      	movs	r3, #0
 800d31e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d324:	2311      	movs	r3, #17
 800d326:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d328:	2340      	movs	r3, #64	; 0x40
 800d32a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d32c:	2300      	movs	r3, #0
 800d32e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d334:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d336:	f107 0308 	add.w	r3, r7, #8
 800d33a:	4619      	mov	r1, r3
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7ff ff4c 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d342:	f241 3288 	movw	r2, #5000	; 0x1388
 800d346:	2111      	movs	r1, #17
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 fa3f 	bl	800d7cc <SDMMC_GetCmdResp1>
 800d34e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d350:	69fb      	ldr	r3, [r7, #28]
}
 800d352:	4618      	mov	r0, r3
 800d354:	3720      	adds	r7, #32
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b088      	sub	sp, #32
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
 800d362:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d364:	2300      	movs	r3, #0
 800d366:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d36c:	2312      	movs	r3, #18
 800d36e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d370:	2340      	movs	r3, #64	; 0x40
 800d372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d374:	2300      	movs	r3, #0
 800d376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d37c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d37e:	f107 0308 	add.w	r3, r7, #8
 800d382:	4619      	mov	r1, r3
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7ff ff28 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d38a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d38e:	2112      	movs	r1, #18
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 fa1b 	bl	800d7cc <SDMMC_GetCmdResp1>
 800d396:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d398:	69fb      	ldr	r3, [r7, #28]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3720      	adds	r7, #32
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b088      	sub	sp, #32
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d3b4:	2318      	movs	r3, #24
 800d3b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3b8:	2340      	movs	r3, #64	; 0x40
 800d3ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3c4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3c6:	f107 0308 	add.w	r3, r7, #8
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff ff04 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d3d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3d6:	2118      	movs	r1, #24
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 f9f7 	bl	800d7cc <SDMMC_GetCmdResp1>
 800d3de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3e0:	69fb      	ldr	r3, [r7, #28]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3720      	adds	r7, #32
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b088      	sub	sp, #32
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
 800d3f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d3fc:	2319      	movs	r3, #25
 800d3fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d400:	2340      	movs	r3, #64	; 0x40
 800d402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d404:	2300      	movs	r3, #0
 800d406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d40c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d40e:	f107 0308 	add.w	r3, r7, #8
 800d412:	4619      	mov	r1, r3
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f7ff fee0 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d41a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d41e:	2119      	movs	r1, #25
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 f9d3 	bl	800d7cc <SDMMC_GetCmdResp1>
 800d426:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d428:	69fb      	ldr	r3, [r7, #28]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3720      	adds	r7, #32
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
	...

0800d434 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b088      	sub	sp, #32
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d43c:	2300      	movs	r3, #0
 800d43e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d440:	2300      	movs	r3, #0
 800d442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d444:	230c      	movs	r3, #12
 800d446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d448:	2340      	movs	r3, #64	; 0x40
 800d44a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d44c:	2300      	movs	r3, #0
 800d44e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d454:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d456:	f107 0308 	add.w	r3, r7, #8
 800d45a:	4619      	mov	r1, r3
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7ff febc 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800d462:	4a05      	ldr	r2, [pc, #20]	; (800d478 <SDMMC_CmdStopTransfer+0x44>)
 800d464:	210c      	movs	r1, #12
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 f9b0 	bl	800d7cc <SDMMC_GetCmdResp1>
 800d46c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d46e:	69fb      	ldr	r3, [r7, #28]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3720      	adds	r7, #32
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	05f5e100 	.word	0x05f5e100

0800d47c <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b08a      	sub	sp, #40	; 0x28
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d488:	2300      	movs	r3, #0
 800d48a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d490:	2307      	movs	r3, #7
 800d492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d494:	2340      	movs	r3, #64	; 0x40
 800d496:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d498:	2300      	movs	r3, #0
 800d49a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d49c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4a0:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4a2:	f107 0310 	add.w	r3, r7, #16
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f7ff fe96 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d4ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4b2:	2107      	movs	r1, #7
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f000 f989 	bl	800d7cc <SDMMC_GetCmdResp1>
 800d4ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3728      	adds	r7, #40	; 0x28
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b088      	sub	sp, #32
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4e6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4e8:	f107 0308 	add.w	r3, r7, #8
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7ff fe73 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f93f 	bl	800d778 <SDMMC_GetCmdError>
 800d4fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4fc:	69fb      	ldr	r3, [r7, #28]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3720      	adds	r7, #32
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b088      	sub	sp, #32
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d50e:	2300      	movs	r3, #0
 800d510:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d512:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d518:	2308      	movs	r3, #8
 800d51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d51c:	2340      	movs	r3, #64	; 0x40
 800d51e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d520:	2300      	movs	r3, #0
 800d522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d528:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d52a:	f107 0308 	add.w	r3, r7, #8
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff fe52 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fb10 	bl	800db5c <SDMMC_GetCmdResp7>
 800d53c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d53e:	69fb      	ldr	r3, [r7, #28]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3720      	adds	r7, #32
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b088      	sub	sp, #32
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d552:	2300      	movs	r3, #0
 800d554:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d55a:	2337      	movs	r3, #55	; 0x37
 800d55c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d55e:	2340      	movs	r3, #64	; 0x40
 800d560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d562:	2300      	movs	r3, #0
 800d564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d56a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d56c:	f107 0308 	add.w	r3, r7, #8
 800d570:	4619      	mov	r1, r3
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7ff fe31 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d578:	f241 3288 	movw	r2, #5000	; 0x1388
 800d57c:	2137      	movs	r1, #55	; 0x37
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f924 	bl	800d7cc <SDMMC_GetCmdResp1>
 800d584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d586:	69fb      	ldr	r3, [r7, #28]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3720      	adds	r7, #32
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b088      	sub	sp, #32
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d59a:	2300      	movs	r3, #0
 800d59c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d5aa:	2329      	movs	r3, #41	; 0x29
 800d5ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5ae:	2340      	movs	r3, #64	; 0x40
 800d5b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5ba:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5bc:	f107 0308 	add.w	r3, r7, #8
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7ff fe09 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fa25 	bl	800da18 <SDMMC_GetCmdResp3>
 800d5ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5d0:	69fb      	ldr	r3, [r7, #28]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3720      	adds	r7, #32
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b088      	sub	sp, #32
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d5ec:	2306      	movs	r3, #6
 800d5ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5f0:	2340      	movs	r3, #64	; 0x40
 800d5f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5fc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5fe:	f107 0308 	add.w	r3, r7, #8
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff fde8 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d60a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d60e:	2106      	movs	r1, #6
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 f8db 	bl	800d7cc <SDMMC_GetCmdResp1>
 800d616:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d618:	69fb      	ldr	r3, [r7, #28]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3720      	adds	r7, #32
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b088      	sub	sp, #32
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d62a:	2300      	movs	r3, #0
 800d62c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d62e:	2300      	movs	r3, #0
 800d630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d632:	2333      	movs	r3, #51	; 0x33
 800d634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d636:	2340      	movs	r3, #64	; 0x40
 800d638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d63a:	2300      	movs	r3, #0
 800d63c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d63e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d642:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d644:	f107 0308 	add.w	r3, r7, #8
 800d648:	4619      	mov	r1, r3
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7ff fdc5 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d650:	f241 3288 	movw	r2, #5000	; 0x1388
 800d654:	2133      	movs	r1, #51	; 0x33
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 f8b8 	bl	800d7cc <SDMMC_GetCmdResp1>
 800d65c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d65e:	69fb      	ldr	r3, [r7, #28]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3720      	adds	r7, #32
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b088      	sub	sp, #32
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d670:	2300      	movs	r3, #0
 800d672:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d674:	2300      	movs	r3, #0
 800d676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d678:	2302      	movs	r3, #2
 800d67a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d67c:	23c0      	movs	r3, #192	; 0xc0
 800d67e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d680:	2300      	movs	r3, #0
 800d682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d688:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d68a:	f107 0308 	add.w	r3, r7, #8
 800d68e:	4619      	mov	r1, r3
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7ff fda2 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 f97e 	bl	800d998 <SDMMC_GetCmdResp2>
 800d69c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d69e:	69fb      	ldr	r3, [r7, #28]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3720      	adds	r7, #32
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b088      	sub	sp, #32
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d6ba:	2309      	movs	r3, #9
 800d6bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d6be:	23c0      	movs	r3, #192	; 0xc0
 800d6c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6ca:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6cc:	f107 0308 	add.w	r3, r7, #8
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7ff fd81 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 f95d 	bl	800d998 <SDMMC_GetCmdResp2>
 800d6de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6e0:	69fb      	ldr	r3, [r7, #28]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3720      	adds	r7, #32
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b088      	sub	sp, #32
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d6fc:	2303      	movs	r3, #3
 800d6fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d700:	2340      	movs	r3, #64	; 0x40
 800d702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d704:	2300      	movs	r3, #0
 800d706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d70c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d70e:	f107 0308 	add.w	r3, r7, #8
 800d712:	4619      	mov	r1, r3
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f7ff fd60 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d71a:	683a      	ldr	r2, [r7, #0]
 800d71c:	2103      	movs	r1, #3
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f9ae 	bl	800da80 <SDMMC_GetCmdResp6>
 800d724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d726:	69fb      	ldr	r3, [r7, #28]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3720      	adds	r7, #32
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b088      	sub	sp, #32
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d73a:	2300      	movs	r3, #0
 800d73c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d742:	230d      	movs	r3, #13
 800d744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d746:	2340      	movs	r3, #64	; 0x40
 800d748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d74a:	2300      	movs	r3, #0
 800d74c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d74e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d752:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d754:	f107 0308 	add.w	r3, r7, #8
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7ff fd3d 	bl	800d1da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d760:	f241 3288 	movw	r2, #5000	; 0x1388
 800d764:	210d      	movs	r1, #13
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 f830 	bl	800d7cc <SDMMC_GetCmdResp1>
 800d76c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d76e:	69fb      	ldr	r3, [r7, #28]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3720      	adds	r7, #32
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d778:	b490      	push	{r4, r7}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d780:	4b10      	ldr	r3, [pc, #64]	; (800d7c4 <SDMMC_GetCmdError+0x4c>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a10      	ldr	r2, [pc, #64]	; (800d7c8 <SDMMC_GetCmdError+0x50>)
 800d786:	fba2 2303 	umull	r2, r3, r2, r3
 800d78a:	0a5b      	lsrs	r3, r3, #9
 800d78c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d790:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d794:	4623      	mov	r3, r4
 800d796:	1e5c      	subs	r4, r3, #1
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d102      	bne.n	800d7a2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d79c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7a0:	e00a      	b.n	800d7b8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d0f2      	beq.n	800d794 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d7b4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bc90      	pop	{r4, r7}
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	20000134 	.word	0x20000134
 800d7c8:	10624dd3 	.word	0x10624dd3

0800d7cc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d7cc:	b590      	push	{r4, r7, lr}
 800d7ce:	b087      	sub	sp, #28
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	607a      	str	r2, [r7, #4]
 800d7d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d7da:	4b6c      	ldr	r3, [pc, #432]	; (800d98c <SDMMC_GetCmdResp1+0x1c0>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a6c      	ldr	r2, [pc, #432]	; (800d990 <SDMMC_GetCmdResp1+0x1c4>)
 800d7e0:	fba2 2303 	umull	r2, r3, r2, r3
 800d7e4:	0a5b      	lsrs	r3, r3, #9
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d7ec:	4623      	mov	r3, r4
 800d7ee:	1e5c      	subs	r4, r3, #1
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d102      	bne.n	800d7fa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7f8:	e0c3      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d802:	2b00      	cmp	r3, #0
 800d804:	d0f2      	beq.n	800d7ec <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d80a:	f003 0304 	and.w	r3, r3, #4
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d004      	beq.n	800d81c <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2204      	movs	r2, #4
 800d816:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d818:	2304      	movs	r3, #4
 800d81a:	e0b2      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d820:	f003 0301 	and.w	r3, r3, #1
 800d824:	2b00      	cmp	r3, #0
 800d826:	d004      	beq.n	800d832 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2201      	movs	r2, #1
 800d82c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d82e:	2301      	movs	r3, #1
 800d830:	e0a7      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f7ff fcfb 	bl	800d22e <SDIO_GetCommandResponse>
 800d838:	4603      	mov	r3, r0
 800d83a:	461a      	mov	r2, r3
 800d83c:	7afb      	ldrb	r3, [r7, #11]
 800d83e:	4293      	cmp	r3, r2
 800d840:	d001      	beq.n	800d846 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d842:	2301      	movs	r3, #1
 800d844:	e09d      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d84c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d84e:	2100      	movs	r1, #0
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f7ff fcf9 	bl	800d248 <SDIO_GetResponse>
 800d856:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d858:	697a      	ldr	r2, [r7, #20]
 800d85a:	4b4e      	ldr	r3, [pc, #312]	; (800d994 <SDMMC_GetCmdResp1+0x1c8>)
 800d85c:	4013      	ands	r3, r2
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800d862:	2300      	movs	r3, #0
 800d864:	e08d      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	da02      	bge.n	800d872 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d86c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d870:	e087      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d001      	beq.n	800d880 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d87c:	2340      	movs	r3, #64	; 0x40
 800d87e:	e080      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d886:	2b00      	cmp	r3, #0
 800d888:	d001      	beq.n	800d88e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d88a:	2380      	movs	r3, #128	; 0x80
 800d88c:	e079      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d89c:	e071      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d8a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8ac:	e069      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d8b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8bc:	e061      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d002      	beq.n	800d8ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d8c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8cc:	e059      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d8d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8dc:	e051      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d002      	beq.n	800d8ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d8e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d8ec:	e049      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d8f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d8fc:	e041      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d904:	2b00      	cmp	r3, #0
 800d906:	d002      	beq.n	800d90e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800d908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d90c:	e039      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d914:	2b00      	cmp	r3, #0
 800d916:	d002      	beq.n	800d91e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d91c:	e031      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d928:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d92c:	e029      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d934:	2b00      	cmp	r3, #0
 800d936:	d002      	beq.n	800d93e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d938:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d93c:	e021      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d948:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d94c:	e019      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d954:	2b00      	cmp	r3, #0
 800d956:	d002      	beq.n	800d95e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d958:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d95c:	e011      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d968:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d96c:	e009      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	f003 0308 	and.w	r3, r3, #8
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d978:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d97c:	e001      	b.n	800d982 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d97e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d982:	4618      	mov	r0, r3
 800d984:	371c      	adds	r7, #28
 800d986:	46bd      	mov	sp, r7
 800d988:	bd90      	pop	{r4, r7, pc}
 800d98a:	bf00      	nop
 800d98c:	20000134 	.word	0x20000134
 800d990:	10624dd3 	.word	0x10624dd3
 800d994:	fdffe008 	.word	0xfdffe008

0800d998 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d998:	b490      	push	{r4, r7}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d9a0:	4b1b      	ldr	r3, [pc, #108]	; (800da10 <SDMMC_GetCmdResp2+0x78>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a1b      	ldr	r2, [pc, #108]	; (800da14 <SDMMC_GetCmdResp2+0x7c>)
 800d9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9aa:	0a5b      	lsrs	r3, r3, #9
 800d9ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d9b4:	4623      	mov	r3, r4
 800d9b6:	1e5c      	subs	r4, r3, #1
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d102      	bne.n	800d9c2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9c0:	e020      	b.n	800da04 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d0f2      	beq.n	800d9b4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d2:	f003 0304 	and.w	r3, r3, #4
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d004      	beq.n	800d9e4 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2204      	movs	r2, #4
 800d9de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9e0:	2304      	movs	r3, #4
 800d9e2:	e00f      	b.n	800da04 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e8:	f003 0301 	and.w	r3, r3, #1
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d004      	beq.n	800d9fa <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e004      	b.n	800da04 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800da00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800da02:	2300      	movs	r3, #0
}
 800da04:	4618      	mov	r0, r3
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bc90      	pop	{r4, r7}
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	20000134 	.word	0x20000134
 800da14:	10624dd3 	.word	0x10624dd3

0800da18 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800da18:	b490      	push	{r4, r7}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da20:	4b15      	ldr	r3, [pc, #84]	; (800da78 <SDMMC_GetCmdResp3+0x60>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a15      	ldr	r2, [pc, #84]	; (800da7c <SDMMC_GetCmdResp3+0x64>)
 800da26:	fba2 2303 	umull	r2, r3, r2, r3
 800da2a:	0a5b      	lsrs	r3, r3, #9
 800da2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800da30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800da34:	4623      	mov	r3, r4
 800da36:	1e5c      	subs	r4, r3, #1
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d102      	bne.n	800da42 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da40:	e015      	b.n	800da6e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da46:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d0f2      	beq.n	800da34 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da52:	f003 0304 	and.w	r3, r3, #4
 800da56:	2b00      	cmp	r3, #0
 800da58:	d004      	beq.n	800da64 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2204      	movs	r2, #4
 800da5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da60:	2304      	movs	r3, #4
 800da62:	e004      	b.n	800da6e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800da6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bc90      	pop	{r4, r7}
 800da76:	4770      	bx	lr
 800da78:	20000134 	.word	0x20000134
 800da7c:	10624dd3 	.word	0x10624dd3

0800da80 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800da80:	b590      	push	{r4, r7, lr}
 800da82:	b087      	sub	sp, #28
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	460b      	mov	r3, r1
 800da8a:	607a      	str	r2, [r7, #4]
 800da8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da8e:	4b31      	ldr	r3, [pc, #196]	; (800db54 <SDMMC_GetCmdResp6+0xd4>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a31      	ldr	r2, [pc, #196]	; (800db58 <SDMMC_GetCmdResp6+0xd8>)
 800da94:	fba2 2303 	umull	r2, r3, r2, r3
 800da98:	0a5b      	lsrs	r3, r3, #9
 800da9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800da9e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800daa2:	4623      	mov	r3, r4
 800daa4:	1e5c      	subs	r4, r3, #1
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d102      	bne.n	800dab0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800daaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800daae:	e04c      	b.n	800db4a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dab4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d0f2      	beq.n	800daa2 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac0:	f003 0304 	and.w	r3, r3, #4
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d004      	beq.n	800dad2 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2204      	movs	r2, #4
 800dacc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dace:	2304      	movs	r3, #4
 800dad0:	e03b      	b.n	800db4a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad6:	f003 0301 	and.w	r3, r3, #1
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d004      	beq.n	800dae8 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2201      	movs	r2, #1
 800dae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dae4:	2301      	movs	r3, #1
 800dae6:	e030      	b.n	800db4a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	f7ff fba0 	bl	800d22e <SDIO_GetCommandResponse>
 800daee:	4603      	mov	r3, r0
 800daf0:	461a      	mov	r2, r3
 800daf2:	7afb      	ldrb	r3, [r7, #11]
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d001      	beq.n	800dafc <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800daf8:	2301      	movs	r3, #1
 800dafa:	e026      	b.n	800db4a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800db02:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800db04:	2100      	movs	r1, #0
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f7ff fb9e 	bl	800d248 <SDIO_GetResponse>
 800db0c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800db14:	2b00      	cmp	r3, #0
 800db16:	d106      	bne.n	800db26 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	0c1b      	lsrs	r3, r3, #16
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800db22:	2300      	movs	r3, #0
 800db24:	e011      	b.n	800db4a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db34:	e009      	b.n	800db4a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d002      	beq.n	800db46 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db44:	e001      	b.n	800db4a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	371c      	adds	r7, #28
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd90      	pop	{r4, r7, pc}
 800db52:	bf00      	nop
 800db54:	20000134 	.word	0x20000134
 800db58:	10624dd3 	.word	0x10624dd3

0800db5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800db5c:	b490      	push	{r4, r7}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db64:	4b18      	ldr	r3, [pc, #96]	; (800dbc8 <SDMMC_GetCmdResp7+0x6c>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a18      	ldr	r2, [pc, #96]	; (800dbcc <SDMMC_GetCmdResp7+0x70>)
 800db6a:	fba2 2303 	umull	r2, r3, r2, r3
 800db6e:	0a5b      	lsrs	r3, r3, #9
 800db70:	f241 3288 	movw	r2, #5000	; 0x1388
 800db74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800db78:	4623      	mov	r3, r4
 800db7a:	1e5c      	subs	r4, r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d102      	bne.n	800db86 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db84:	e01a      	b.n	800dbbc <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d0f2      	beq.n	800db78 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db96:	f003 0304 	and.w	r3, r3, #4
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d004      	beq.n	800dba8 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2240      	movs	r2, #64	; 0x40
 800dba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dba4:	2304      	movs	r3, #4
 800dba6:	e009      	b.n	800dbbc <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2240      	movs	r2, #64	; 0x40
 800dbb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dbba:	2300      	movs	r3, #0
  
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bc90      	pop	{r4, r7}
 800dbc4:	4770      	bx	lr
 800dbc6:	bf00      	nop
 800dbc8:	20000134 	.word	0x20000134
 800dbcc:	10624dd3 	.word	0x10624dd3

0800dbd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dbd0:	b084      	sub	sp, #16
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
 800dbda:	f107 001c 	add.w	r0, r7, #28
 800dbde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d122      	bne.n	800dc2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800dbfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d105      	bne.n	800dc22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f001 fa7c 	bl	800f120 <USB_CoreReset>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	73fb      	strb	r3, [r7, #15]
 800dc2c:	e01a      	b.n	800dc64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f001 fa70 	bl	800f120 <USB_CoreReset>
 800dc40:	4603      	mov	r3, r0
 800dc42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dc44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d106      	bne.n	800dc58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	639a      	str	r2, [r3, #56]	; 0x38
 800dc56:	e005      	b.n	800dc64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d10b      	bne.n	800dc82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	f043 0206 	orr.w	r2, r3, #6
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	f043 0220 	orr.w	r2, r3, #32
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc8e:	b004      	add	sp, #16
 800dc90:	4770      	bx	lr
	...

0800dc94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b087      	sub	sp, #28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dca2:	79fb      	ldrb	r3, [r7, #7]
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d165      	bne.n	800dd74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	4a41      	ldr	r2, [pc, #260]	; (800ddb0 <USB_SetTurnaroundTime+0x11c>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d906      	bls.n	800dcbe <USB_SetTurnaroundTime+0x2a>
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	4a40      	ldr	r2, [pc, #256]	; (800ddb4 <USB_SetTurnaroundTime+0x120>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d802      	bhi.n	800dcbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dcb8:	230f      	movs	r3, #15
 800dcba:	617b      	str	r3, [r7, #20]
 800dcbc:	e062      	b.n	800dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	4a3c      	ldr	r2, [pc, #240]	; (800ddb4 <USB_SetTurnaroundTime+0x120>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d906      	bls.n	800dcd4 <USB_SetTurnaroundTime+0x40>
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	4a3b      	ldr	r2, [pc, #236]	; (800ddb8 <USB_SetTurnaroundTime+0x124>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d802      	bhi.n	800dcd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dcce:	230e      	movs	r3, #14
 800dcd0:	617b      	str	r3, [r7, #20]
 800dcd2:	e057      	b.n	800dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	4a38      	ldr	r2, [pc, #224]	; (800ddb8 <USB_SetTurnaroundTime+0x124>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d906      	bls.n	800dcea <USB_SetTurnaroundTime+0x56>
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	4a37      	ldr	r2, [pc, #220]	; (800ddbc <USB_SetTurnaroundTime+0x128>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d802      	bhi.n	800dcea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dce4:	230d      	movs	r3, #13
 800dce6:	617b      	str	r3, [r7, #20]
 800dce8:	e04c      	b.n	800dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	4a33      	ldr	r2, [pc, #204]	; (800ddbc <USB_SetTurnaroundTime+0x128>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d906      	bls.n	800dd00 <USB_SetTurnaroundTime+0x6c>
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	4a32      	ldr	r2, [pc, #200]	; (800ddc0 <USB_SetTurnaroundTime+0x12c>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d802      	bhi.n	800dd00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dcfa:	230c      	movs	r3, #12
 800dcfc:	617b      	str	r3, [r7, #20]
 800dcfe:	e041      	b.n	800dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	4a2f      	ldr	r2, [pc, #188]	; (800ddc0 <USB_SetTurnaroundTime+0x12c>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d906      	bls.n	800dd16 <USB_SetTurnaroundTime+0x82>
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	4a2e      	ldr	r2, [pc, #184]	; (800ddc4 <USB_SetTurnaroundTime+0x130>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d802      	bhi.n	800dd16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dd10:	230b      	movs	r3, #11
 800dd12:	617b      	str	r3, [r7, #20]
 800dd14:	e036      	b.n	800dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	4a2a      	ldr	r2, [pc, #168]	; (800ddc4 <USB_SetTurnaroundTime+0x130>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d906      	bls.n	800dd2c <USB_SetTurnaroundTime+0x98>
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	4a29      	ldr	r2, [pc, #164]	; (800ddc8 <USB_SetTurnaroundTime+0x134>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d802      	bhi.n	800dd2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dd26:	230a      	movs	r3, #10
 800dd28:	617b      	str	r3, [r7, #20]
 800dd2a:	e02b      	b.n	800dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	4a26      	ldr	r2, [pc, #152]	; (800ddc8 <USB_SetTurnaroundTime+0x134>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d906      	bls.n	800dd42 <USB_SetTurnaroundTime+0xae>
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	4a25      	ldr	r2, [pc, #148]	; (800ddcc <USB_SetTurnaroundTime+0x138>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d802      	bhi.n	800dd42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dd3c:	2309      	movs	r3, #9
 800dd3e:	617b      	str	r3, [r7, #20]
 800dd40:	e020      	b.n	800dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	4a21      	ldr	r2, [pc, #132]	; (800ddcc <USB_SetTurnaroundTime+0x138>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d906      	bls.n	800dd58 <USB_SetTurnaroundTime+0xc4>
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	4a20      	ldr	r2, [pc, #128]	; (800ddd0 <USB_SetTurnaroundTime+0x13c>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d802      	bhi.n	800dd58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dd52:	2308      	movs	r3, #8
 800dd54:	617b      	str	r3, [r7, #20]
 800dd56:	e015      	b.n	800dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	4a1d      	ldr	r2, [pc, #116]	; (800ddd0 <USB_SetTurnaroundTime+0x13c>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d906      	bls.n	800dd6e <USB_SetTurnaroundTime+0xda>
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	4a1c      	ldr	r2, [pc, #112]	; (800ddd4 <USB_SetTurnaroundTime+0x140>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d802      	bhi.n	800dd6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dd68:	2307      	movs	r3, #7
 800dd6a:	617b      	str	r3, [r7, #20]
 800dd6c:	e00a      	b.n	800dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dd6e:	2306      	movs	r3, #6
 800dd70:	617b      	str	r3, [r7, #20]
 800dd72:	e007      	b.n	800dd84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dd74:	79fb      	ldrb	r3, [r7, #7]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d102      	bne.n	800dd80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dd7a:	2309      	movs	r3, #9
 800dd7c:	617b      	str	r3, [r7, #20]
 800dd7e:	e001      	b.n	800dd84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dd80:	2309      	movs	r3, #9
 800dd82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	68da      	ldr	r2, [r3, #12]
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	029b      	lsls	r3, r3, #10
 800dd98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800dd9c:	431a      	orrs	r2, r3
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	371c      	adds	r7, #28
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr
 800ddb0:	00d8acbf 	.word	0x00d8acbf
 800ddb4:	00e4e1bf 	.word	0x00e4e1bf
 800ddb8:	00f423ff 	.word	0x00f423ff
 800ddbc:	0106737f 	.word	0x0106737f
 800ddc0:	011a499f 	.word	0x011a499f
 800ddc4:	01312cff 	.word	0x01312cff
 800ddc8:	014ca43f 	.word	0x014ca43f
 800ddcc:	016e35ff 	.word	0x016e35ff
 800ddd0:	01a6ab1f 	.word	0x01a6ab1f
 800ddd4:	01e847ff 	.word	0x01e847ff

0800ddd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	f043 0201 	orr.w	r2, r3, #1
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ddec:	2300      	movs	r3, #0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	370c      	adds	r7, #12
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr

0800ddfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ddfa:	b480      	push	{r7}
 800ddfc:	b083      	sub	sp, #12
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	f023 0201 	bic.w	r2, r3, #1
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800de0e:	2300      	movs	r3, #0
}
 800de10:	4618      	mov	r0, r3
 800de12:	370c      	adds	r7, #12
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800de34:	78fb      	ldrb	r3, [r7, #3]
 800de36:	2b01      	cmp	r3, #1
 800de38:	d106      	bne.n	800de48 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	60da      	str	r2, [r3, #12]
 800de46:	e00b      	b.n	800de60 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800de48:	78fb      	ldrb	r3, [r7, #3]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d106      	bne.n	800de5c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	60da      	str	r2, [r3, #12]
 800de5a:	e001      	b.n	800de60 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800de5c:	2301      	movs	r3, #1
 800de5e:	e003      	b.n	800de68 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800de60:	2032      	movs	r0, #50	; 0x32
 800de62:	f7f8 fa3f 	bl	80062e4 <HAL_Delay>

  return HAL_OK;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800de70:	b084      	sub	sp, #16
 800de72:	b580      	push	{r7, lr}
 800de74:	b086      	sub	sp, #24
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800de7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800de82:	2300      	movs	r3, #0
 800de84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800de8a:	2300      	movs	r3, #0
 800de8c:	613b      	str	r3, [r7, #16]
 800de8e:	e009      	b.n	800dea4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	3340      	adds	r3, #64	; 0x40
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4413      	add	r3, r2
 800de9a:	2200      	movs	r2, #0
 800de9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	3301      	adds	r3, #1
 800dea2:	613b      	str	r3, [r7, #16]
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	2b0e      	cmp	r3, #14
 800dea8:	d9f2      	bls.n	800de90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800deaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deac:	2b00      	cmp	r3, #0
 800deae:	d112      	bne.n	800ded6 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800decc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	639a      	str	r2, [r3, #56]	; 0x38
 800ded4:	e00b      	b.n	800deee <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800def4:	461a      	mov	r2, r3
 800def6:	2300      	movs	r3, #0
 800def8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df00:	4619      	mov	r1, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df08:	461a      	mov	r2, r3
 800df0a:	680b      	ldr	r3, [r1, #0]
 800df0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df10:	2b01      	cmp	r3, #1
 800df12:	d10c      	bne.n	800df2e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800df14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df16:	2b00      	cmp	r3, #0
 800df18:	d104      	bne.n	800df24 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800df1a:	2100      	movs	r1, #0
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 f961 	bl	800e1e4 <USB_SetDevSpeed>
 800df22:	e008      	b.n	800df36 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800df24:	2101      	movs	r1, #1
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f000 f95c 	bl	800e1e4 <USB_SetDevSpeed>
 800df2c:	e003      	b.n	800df36 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800df2e:	2103      	movs	r1, #3
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 f957 	bl	800e1e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800df36:	2110      	movs	r1, #16
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 f90b 	bl	800e154 <USB_FlushTxFifo>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800df44:	2301      	movs	r3, #1
 800df46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f929 	bl	800e1a0 <USB_FlushRxFifo>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d001      	beq.n	800df58 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800df54:	2301      	movs	r3, #1
 800df56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df5e:	461a      	mov	r2, r3
 800df60:	2300      	movs	r3, #0
 800df62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df6a:	461a      	mov	r2, r3
 800df6c:	2300      	movs	r3, #0
 800df6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df76:	461a      	mov	r2, r3
 800df78:	2300      	movs	r3, #0
 800df7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df7c:	2300      	movs	r3, #0
 800df7e:	613b      	str	r3, [r7, #16]
 800df80:	e043      	b.n	800e00a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	015a      	lsls	r2, r3, #5
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	4413      	add	r3, r2
 800df8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df98:	d118      	bne.n	800dfcc <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d10a      	bne.n	800dfb6 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	015a      	lsls	r2, r3, #5
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfac:	461a      	mov	r2, r3
 800dfae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dfb2:	6013      	str	r3, [r2, #0]
 800dfb4:	e013      	b.n	800dfde <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	015a      	lsls	r2, r3, #5
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dfc8:	6013      	str	r3, [r2, #0]
 800dfca:	e008      	b.n	800dfde <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	015a      	lsls	r2, r3, #5
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	4413      	add	r3, r2
 800dfd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfd8:	461a      	mov	r2, r3
 800dfda:	2300      	movs	r3, #0
 800dfdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	015a      	lsls	r2, r3, #5
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfea:	461a      	mov	r2, r3
 800dfec:	2300      	movs	r3, #0
 800dfee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	015a      	lsls	r2, r3, #5
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	4413      	add	r3, r2
 800dff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dffc:	461a      	mov	r2, r3
 800dffe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e002:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	3301      	adds	r3, #1
 800e008:	613b      	str	r3, [r7, #16]
 800e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00c:	693a      	ldr	r2, [r7, #16]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d3b7      	bcc.n	800df82 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e012:	2300      	movs	r3, #0
 800e014:	613b      	str	r3, [r7, #16]
 800e016:	e043      	b.n	800e0a0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	015a      	lsls	r2, r3, #5
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	4413      	add	r3, r2
 800e020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e02a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e02e:	d118      	bne.n	800e062 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10a      	bne.n	800e04c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	015a      	lsls	r2, r3, #5
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	4413      	add	r3, r2
 800e03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e042:	461a      	mov	r2, r3
 800e044:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e048:	6013      	str	r3, [r2, #0]
 800e04a:	e013      	b.n	800e074 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	015a      	lsls	r2, r3, #5
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	4413      	add	r3, r2
 800e054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e058:	461a      	mov	r2, r3
 800e05a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e05e:	6013      	str	r3, [r2, #0]
 800e060:	e008      	b.n	800e074 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	015a      	lsls	r2, r3, #5
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	4413      	add	r3, r2
 800e06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e06e:	461a      	mov	r2, r3
 800e070:	2300      	movs	r3, #0
 800e072:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	015a      	lsls	r2, r3, #5
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	4413      	add	r3, r2
 800e07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e080:	461a      	mov	r2, r3
 800e082:	2300      	movs	r3, #0
 800e084:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	015a      	lsls	r2, r3, #5
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	4413      	add	r3, r2
 800e08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e092:	461a      	mov	r2, r3
 800e094:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e098:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	3301      	adds	r3, #1
 800e09e:	613b      	str	r3, [r7, #16]
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a2:	693a      	ldr	r2, [r7, #16]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d3b7      	bcc.n	800e018 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0ae:	691b      	ldr	r3, [r3, #16]
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e0b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0ba:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800e0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d111      	bne.n	800e0e6 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	4b20      	ldr	r3, [pc, #128]	; (800e14c <USB_DevInit+0x2dc>)
 800e0cc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e0dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e0e0:	f043 0303 	orr.w	r3, r3, #3
 800e0e4:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e0f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d105      	bne.n	800e106 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	699b      	ldr	r3, [r3, #24]
 800e0fe:	f043 0210 	orr.w	r2, r3, #16
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	699a      	ldr	r2, [r3, #24]
 800e10a:	4b11      	ldr	r3, [pc, #68]	; (800e150 <USB_DevInit+0x2e0>)
 800e10c:	4313      	orrs	r3, r2
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e114:	2b00      	cmp	r3, #0
 800e116:	d005      	beq.n	800e124 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	f043 0208 	orr.w	r2, r3, #8
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e126:	2b01      	cmp	r3, #1
 800e128:	d107      	bne.n	800e13a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	699b      	ldr	r3, [r3, #24]
 800e12e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e132:	f043 0304 	orr.w	r3, r3, #4
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e13a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3718      	adds	r7, #24
 800e140:	46bd      	mov	sp, r7
 800e142:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e146:	b004      	add	sp, #16
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	00800100 	.word	0x00800100
 800e150:	803c3800 	.word	0x803c3800

0800e154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e154:	b480      	push	{r7}
 800e156:	b085      	sub	sp, #20
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e15e:	2300      	movs	r3, #0
 800e160:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	019b      	lsls	r3, r3, #6
 800e166:	f043 0220 	orr.w	r2, r3, #32
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	3301      	adds	r3, #1
 800e172:	60fb      	str	r3, [r7, #12]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	4a09      	ldr	r2, [pc, #36]	; (800e19c <USB_FlushTxFifo+0x48>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d901      	bls.n	800e180 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e17c:	2303      	movs	r3, #3
 800e17e:	e006      	b.n	800e18e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	f003 0320 	and.w	r3, r3, #32
 800e188:	2b20      	cmp	r3, #32
 800e18a:	d0f0      	beq.n	800e16e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3714      	adds	r7, #20
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr
 800e19a:	bf00      	nop
 800e19c:	00030d40 	.word	0x00030d40

0800e1a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2210      	movs	r2, #16
 800e1b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	60fb      	str	r3, [r7, #12]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	4a09      	ldr	r2, [pc, #36]	; (800e1e0 <USB_FlushRxFifo+0x40>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d901      	bls.n	800e1c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e1c0:	2303      	movs	r3, #3
 800e1c2:	e006      	b.n	800e1d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	691b      	ldr	r3, [r3, #16]
 800e1c8:	f003 0310 	and.w	r3, r3, #16
 800e1cc:	2b10      	cmp	r3, #16
 800e1ce:	d0f0      	beq.n	800e1b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3714      	adds	r7, #20
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
 800e1de:	bf00      	nop
 800e1e0:	00030d40 	.word	0x00030d40

0800e1e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	78fb      	ldrb	r3, [r7, #3]
 800e1fe:	68f9      	ldr	r1, [r7, #12]
 800e200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e204:	4313      	orrs	r3, r2
 800e206:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3714      	adds	r7, #20
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr

0800e216 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e216:	b480      	push	{r7}
 800e218:	b087      	sub	sp, #28
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	f003 0306 	and.w	r3, r3, #6
 800e22e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d102      	bne.n	800e23c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e236:	2300      	movs	r3, #0
 800e238:	75fb      	strb	r3, [r7, #23]
 800e23a:	e00a      	b.n	800e252 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2b02      	cmp	r3, #2
 800e240:	d002      	beq.n	800e248 <USB_GetDevSpeed+0x32>
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b06      	cmp	r3, #6
 800e246:	d102      	bne.n	800e24e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e248:	2302      	movs	r3, #2
 800e24a:	75fb      	strb	r3, [r7, #23]
 800e24c:	e001      	b.n	800e252 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e24e:	230f      	movs	r3, #15
 800e250:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e252:	7dfb      	ldrb	r3, [r7, #23]
}
 800e254:	4618      	mov	r0, r3
 800e256:	371c      	adds	r7, #28
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e260:	b480      	push	{r7}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	785b      	ldrb	r3, [r3, #1]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d13a      	bne.n	800e2f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e282:	69da      	ldr	r2, [r3, #28]
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	f003 030f 	and.w	r3, r3, #15
 800e28c:	2101      	movs	r1, #1
 800e28e:	fa01 f303 	lsl.w	r3, r1, r3
 800e292:	b29b      	uxth	r3, r3
 800e294:	68f9      	ldr	r1, [r7, #12]
 800e296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e29a:	4313      	orrs	r3, r2
 800e29c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	015a      	lsls	r2, r3, #5
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d155      	bne.n	800e360 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	015a      	lsls	r2, r3, #5
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	78db      	ldrb	r3, [r3, #3]
 800e2ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e2d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	059b      	lsls	r3, r3, #22
 800e2d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	68ba      	ldr	r2, [r7, #8]
 800e2dc:	0151      	lsls	r1, r2, #5
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	440a      	add	r2, r1
 800e2e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e2ee:	6013      	str	r3, [r2, #0]
 800e2f0:	e036      	b.n	800e360 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2f8:	69da      	ldr	r2, [r3, #28]
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	f003 030f 	and.w	r3, r3, #15
 800e302:	2101      	movs	r1, #1
 800e304:	fa01 f303 	lsl.w	r3, r1, r3
 800e308:	041b      	lsls	r3, r3, #16
 800e30a:	68f9      	ldr	r1, [r7, #12]
 800e30c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e310:	4313      	orrs	r3, r2
 800e312:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	015a      	lsls	r2, r3, #5
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	4413      	add	r3, r2
 800e31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e326:	2b00      	cmp	r3, #0
 800e328:	d11a      	bne.n	800e360 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	015a      	lsls	r2, r3, #5
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	4413      	add	r3, r2
 800e332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	78db      	ldrb	r3, [r3, #3]
 800e344:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e346:	430b      	orrs	r3, r1
 800e348:	4313      	orrs	r3, r2
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	0151      	lsls	r1, r2, #5
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	440a      	add	r2, r1
 800e352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e35a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e35e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3714      	adds	r7, #20
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr
	...

0800e370 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	785b      	ldrb	r3, [r3, #1]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d135      	bne.n	800e3f8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	f003 030f 	and.w	r3, r3, #15
 800e39c:	2101      	movs	r1, #1
 800e39e:	fa01 f303 	lsl.w	r3, r1, r3
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	43db      	mvns	r3, r3
 800e3a6:	68f9      	ldr	r1, [r7, #12]
 800e3a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3ac:	4013      	ands	r3, r2
 800e3ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3b6:	69da      	ldr	r2, [r3, #28]
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	f003 030f 	and.w	r3, r3, #15
 800e3c0:	2101      	movs	r1, #1
 800e3c2:	fa01 f303 	lsl.w	r3, r1, r3
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	43db      	mvns	r3, r3
 800e3ca:	68f9      	ldr	r1, [r7, #12]
 800e3cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3d0:	4013      	ands	r3, r2
 800e3d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	015a      	lsls	r2, r3, #5
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	4413      	add	r3, r2
 800e3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	0159      	lsls	r1, r3, #5
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	440b      	add	r3, r1
 800e3ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	4b1f      	ldr	r3, [pc, #124]	; (800e470 <USB_DeactivateEndpoint+0x100>)
 800e3f2:	4013      	ands	r3, r2
 800e3f4:	600b      	str	r3, [r1, #0]
 800e3f6:	e034      	b.n	800e462 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	f003 030f 	and.w	r3, r3, #15
 800e408:	2101      	movs	r1, #1
 800e40a:	fa01 f303 	lsl.w	r3, r1, r3
 800e40e:	041b      	lsls	r3, r3, #16
 800e410:	43db      	mvns	r3, r3
 800e412:	68f9      	ldr	r1, [r7, #12]
 800e414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e418:	4013      	ands	r3, r2
 800e41a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e422:	69da      	ldr	r2, [r3, #28]
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	f003 030f 	and.w	r3, r3, #15
 800e42c:	2101      	movs	r1, #1
 800e42e:	fa01 f303 	lsl.w	r3, r1, r3
 800e432:	041b      	lsls	r3, r3, #16
 800e434:	43db      	mvns	r3, r3
 800e436:	68f9      	ldr	r1, [r7, #12]
 800e438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e43c:	4013      	ands	r3, r2
 800e43e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	015a      	lsls	r2, r3, #5
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	4413      	add	r3, r2
 800e448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	0159      	lsls	r1, r3, #5
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	440b      	add	r3, r1
 800e456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e45a:	4619      	mov	r1, r3
 800e45c:	4b05      	ldr	r3, [pc, #20]	; (800e474 <USB_DeactivateEndpoint+0x104>)
 800e45e:	4013      	ands	r3, r2
 800e460:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e462:	2300      	movs	r3, #0
}
 800e464:	4618      	mov	r0, r3
 800e466:	3714      	adds	r7, #20
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr
 800e470:	ec337800 	.word	0xec337800
 800e474:	eff37800 	.word	0xeff37800

0800e478 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b08a      	sub	sp, #40	; 0x28
 800e47c:	af02      	add	r7, sp, #8
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	4613      	mov	r3, r2
 800e484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	785b      	ldrb	r3, [r3, #1]
 800e494:	2b01      	cmp	r3, #1
 800e496:	f040 815c 	bne.w	800e752 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	695b      	ldr	r3, [r3, #20]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d132      	bne.n	800e508 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	015a      	lsls	r2, r3, #5
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ae:	691b      	ldr	r3, [r3, #16]
 800e4b0:	69ba      	ldr	r2, [r7, #24]
 800e4b2:	0151      	lsls	r1, r2, #5
 800e4b4:	69fa      	ldr	r2, [r7, #28]
 800e4b6:	440a      	add	r2, r1
 800e4b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e4c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e4c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	015a      	lsls	r2, r3, #5
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4d2:	691b      	ldr	r3, [r3, #16]
 800e4d4:	69ba      	ldr	r2, [r7, #24]
 800e4d6:	0151      	lsls	r1, r2, #5
 800e4d8:	69fa      	ldr	r2, [r7, #28]
 800e4da:	440a      	add	r2, r1
 800e4dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	015a      	lsls	r2, r3, #5
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	69ba      	ldr	r2, [r7, #24]
 800e4f6:	0151      	lsls	r1, r2, #5
 800e4f8:	69fa      	ldr	r2, [r7, #28]
 800e4fa:	440a      	add	r2, r1
 800e4fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e500:	0cdb      	lsrs	r3, r3, #19
 800e502:	04db      	lsls	r3, r3, #19
 800e504:	6113      	str	r3, [r2, #16]
 800e506:	e074      	b.n	800e5f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	015a      	lsls	r2, r3, #5
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	4413      	add	r3, r2
 800e510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e514:	691b      	ldr	r3, [r3, #16]
 800e516:	69ba      	ldr	r2, [r7, #24]
 800e518:	0151      	lsls	r1, r2, #5
 800e51a:	69fa      	ldr	r2, [r7, #28]
 800e51c:	440a      	add	r2, r1
 800e51e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e522:	0cdb      	lsrs	r3, r3, #19
 800e524:	04db      	lsls	r3, r3, #19
 800e526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	015a      	lsls	r2, r3, #5
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	4413      	add	r3, r2
 800e530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e534:	691b      	ldr	r3, [r3, #16]
 800e536:	69ba      	ldr	r2, [r7, #24]
 800e538:	0151      	lsls	r1, r2, #5
 800e53a:	69fa      	ldr	r2, [r7, #28]
 800e53c:	440a      	add	r2, r1
 800e53e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e542:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e546:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e54a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	015a      	lsls	r2, r3, #5
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	4413      	add	r3, r2
 800e554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e558:	691a      	ldr	r2, [r3, #16]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	6959      	ldr	r1, [r3, #20]
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	440b      	add	r3, r1
 800e564:	1e59      	subs	r1, r3, #1
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e56e:	04d9      	lsls	r1, r3, #19
 800e570:	4b9d      	ldr	r3, [pc, #628]	; (800e7e8 <USB_EPStartXfer+0x370>)
 800e572:	400b      	ands	r3, r1
 800e574:	69b9      	ldr	r1, [r7, #24]
 800e576:	0148      	lsls	r0, r1, #5
 800e578:	69f9      	ldr	r1, [r7, #28]
 800e57a:	4401      	add	r1, r0
 800e57c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e580:	4313      	orrs	r3, r2
 800e582:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	015a      	lsls	r2, r3, #5
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	4413      	add	r3, r2
 800e58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e590:	691a      	ldr	r2, [r3, #16]
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	695b      	ldr	r3, [r3, #20]
 800e596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e59a:	69b9      	ldr	r1, [r7, #24]
 800e59c:	0148      	lsls	r0, r1, #5
 800e59e:	69f9      	ldr	r1, [r7, #28]
 800e5a0:	4401      	add	r1, r0
 800e5a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	78db      	ldrb	r3, [r3, #3]
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	d11f      	bne.n	800e5f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	015a      	lsls	r2, r3, #5
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5be:	691b      	ldr	r3, [r3, #16]
 800e5c0:	69ba      	ldr	r2, [r7, #24]
 800e5c2:	0151      	lsls	r1, r2, #5
 800e5c4:	69fa      	ldr	r2, [r7, #28]
 800e5c6:	440a      	add	r2, r1
 800e5c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e5d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	015a      	lsls	r2, r3, #5
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	4413      	add	r3, r2
 800e5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5de:	691b      	ldr	r3, [r3, #16]
 800e5e0:	69ba      	ldr	r2, [r7, #24]
 800e5e2:	0151      	lsls	r1, r2, #5
 800e5e4:	69fa      	ldr	r2, [r7, #28]
 800e5e6:	440a      	add	r2, r1
 800e5e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e5f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e5f2:	79fb      	ldrb	r3, [r7, #7]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d14b      	bne.n	800e690 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	691b      	ldr	r3, [r3, #16]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d009      	beq.n	800e614 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	015a      	lsls	r2, r3, #5
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	4413      	add	r3, r2
 800e608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e60c:	461a      	mov	r2, r3
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	691b      	ldr	r3, [r3, #16]
 800e612:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	78db      	ldrb	r3, [r3, #3]
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d128      	bne.n	800e66e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d110      	bne.n	800e64e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	015a      	lsls	r2, r3, #5
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	4413      	add	r3, r2
 800e634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	69ba      	ldr	r2, [r7, #24]
 800e63c:	0151      	lsls	r1, r2, #5
 800e63e:	69fa      	ldr	r2, [r7, #28]
 800e640:	440a      	add	r2, r1
 800e642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e646:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e64a:	6013      	str	r3, [r2, #0]
 800e64c:	e00f      	b.n	800e66e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	015a      	lsls	r2, r3, #5
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	4413      	add	r3, r2
 800e656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	69ba      	ldr	r2, [r7, #24]
 800e65e:	0151      	lsls	r1, r2, #5
 800e660:	69fa      	ldr	r2, [r7, #28]
 800e662:	440a      	add	r2, r1
 800e664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e66c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	015a      	lsls	r2, r3, #5
 800e672:	69fb      	ldr	r3, [r7, #28]
 800e674:	4413      	add	r3, r2
 800e676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	69ba      	ldr	r2, [r7, #24]
 800e67e:	0151      	lsls	r1, r2, #5
 800e680:	69fa      	ldr	r2, [r7, #28]
 800e682:	440a      	add	r2, r1
 800e684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e688:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e68c:	6013      	str	r3, [r2, #0]
 800e68e:	e12f      	b.n	800e8f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	015a      	lsls	r2, r3, #5
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	4413      	add	r3, r2
 800e698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	69ba      	ldr	r2, [r7, #24]
 800e6a0:	0151      	lsls	r1, r2, #5
 800e6a2:	69fa      	ldr	r2, [r7, #28]
 800e6a4:	440a      	add	r2, r1
 800e6a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e6ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	78db      	ldrb	r3, [r3, #3]
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d015      	beq.n	800e6e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	695b      	ldr	r3, [r3, #20]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 8117 	beq.w	800e8f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	f003 030f 	and.w	r3, r3, #15
 800e6d2:	2101      	movs	r1, #1
 800e6d4:	fa01 f303 	lsl.w	r3, r1, r3
 800e6d8:	69f9      	ldr	r1, [r7, #28]
 800e6da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	634b      	str	r3, [r1, #52]	; 0x34
 800e6e2:	e105      	b.n	800e8f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d110      	bne.n	800e716 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	015a      	lsls	r2, r3, #5
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	69ba      	ldr	r2, [r7, #24]
 800e704:	0151      	lsls	r1, r2, #5
 800e706:	69fa      	ldr	r2, [r7, #28]
 800e708:	440a      	add	r2, r1
 800e70a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e70e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e712:	6013      	str	r3, [r2, #0]
 800e714:	e00f      	b.n	800e736 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	015a      	lsls	r2, r3, #5
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	4413      	add	r3, r2
 800e71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	69ba      	ldr	r2, [r7, #24]
 800e726:	0151      	lsls	r1, r2, #5
 800e728:	69fa      	ldr	r2, [r7, #28]
 800e72a:	440a      	add	r2, r1
 800e72c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e734:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	68d9      	ldr	r1, [r3, #12]
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	781a      	ldrb	r2, [r3, #0]
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	695b      	ldr	r3, [r3, #20]
 800e742:	b298      	uxth	r0, r3
 800e744:	79fb      	ldrb	r3, [r7, #7]
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	4603      	mov	r3, r0
 800e74a:	68f8      	ldr	r0, [r7, #12]
 800e74c:	f000 fa2b 	bl	800eba6 <USB_WritePacket>
 800e750:	e0ce      	b.n	800e8f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	015a      	lsls	r2, r3, #5
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	4413      	add	r3, r2
 800e75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e75e:	691b      	ldr	r3, [r3, #16]
 800e760:	69ba      	ldr	r2, [r7, #24]
 800e762:	0151      	lsls	r1, r2, #5
 800e764:	69fa      	ldr	r2, [r7, #28]
 800e766:	440a      	add	r2, r1
 800e768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e76c:	0cdb      	lsrs	r3, r3, #19
 800e76e:	04db      	lsls	r3, r3, #19
 800e770:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	015a      	lsls	r2, r3, #5
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	4413      	add	r3, r2
 800e77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e77e:	691b      	ldr	r3, [r3, #16]
 800e780:	69ba      	ldr	r2, [r7, #24]
 800e782:	0151      	lsls	r1, r2, #5
 800e784:	69fa      	ldr	r2, [r7, #28]
 800e786:	440a      	add	r2, r1
 800e788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e78c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e790:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e794:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	695b      	ldr	r3, [r3, #20]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d126      	bne.n	800e7ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	015a      	lsls	r2, r3, #5
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7aa:	691a      	ldr	r2, [r3, #16]
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e7b4:	69b9      	ldr	r1, [r7, #24]
 800e7b6:	0148      	lsls	r0, r1, #5
 800e7b8:	69f9      	ldr	r1, [r7, #28]
 800e7ba:	4401      	add	r1, r0
 800e7bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	015a      	lsls	r2, r3, #5
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	4413      	add	r3, r2
 800e7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7d0:	691b      	ldr	r3, [r3, #16]
 800e7d2:	69ba      	ldr	r2, [r7, #24]
 800e7d4:	0151      	lsls	r1, r2, #5
 800e7d6:	69fa      	ldr	r2, [r7, #28]
 800e7d8:	440a      	add	r2, r1
 800e7da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e7e2:	6113      	str	r3, [r2, #16]
 800e7e4:	e036      	b.n	800e854 <USB_EPStartXfer+0x3dc>
 800e7e6:	bf00      	nop
 800e7e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	695a      	ldr	r2, [r3, #20]
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	1e5a      	subs	r2, r3, #1
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e800:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e802:	69bb      	ldr	r3, [r7, #24]
 800e804:	015a      	lsls	r2, r3, #5
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	4413      	add	r3, r2
 800e80a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e80e:	691a      	ldr	r2, [r3, #16]
 800e810:	8afb      	ldrh	r3, [r7, #22]
 800e812:	04d9      	lsls	r1, r3, #19
 800e814:	4b39      	ldr	r3, [pc, #228]	; (800e8fc <USB_EPStartXfer+0x484>)
 800e816:	400b      	ands	r3, r1
 800e818:	69b9      	ldr	r1, [r7, #24]
 800e81a:	0148      	lsls	r0, r1, #5
 800e81c:	69f9      	ldr	r1, [r7, #28]
 800e81e:	4401      	add	r1, r0
 800e820:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e824:	4313      	orrs	r3, r2
 800e826:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	015a      	lsls	r2, r3, #5
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	4413      	add	r3, r2
 800e830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e834:	691a      	ldr	r2, [r3, #16]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	8af9      	ldrh	r1, [r7, #22]
 800e83c:	fb01 f303 	mul.w	r3, r1, r3
 800e840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e844:	69b9      	ldr	r1, [r7, #24]
 800e846:	0148      	lsls	r0, r1, #5
 800e848:	69f9      	ldr	r1, [r7, #28]
 800e84a:	4401      	add	r1, r0
 800e84c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e850:	4313      	orrs	r3, r2
 800e852:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e854:	79fb      	ldrb	r3, [r7, #7]
 800e856:	2b01      	cmp	r3, #1
 800e858:	d10d      	bne.n	800e876 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d009      	beq.n	800e876 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	68d9      	ldr	r1, [r3, #12]
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	015a      	lsls	r2, r3, #5
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	4413      	add	r3, r2
 800e86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e872:	460a      	mov	r2, r1
 800e874:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	78db      	ldrb	r3, [r3, #3]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d128      	bne.n	800e8d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d110      	bne.n	800e8b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	015a      	lsls	r2, r3, #5
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	4413      	add	r3, r2
 800e896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	69ba      	ldr	r2, [r7, #24]
 800e89e:	0151      	lsls	r1, r2, #5
 800e8a0:	69fa      	ldr	r2, [r7, #28]
 800e8a2:	440a      	add	r2, r1
 800e8a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e8ac:	6013      	str	r3, [r2, #0]
 800e8ae:	e00f      	b.n	800e8d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	015a      	lsls	r2, r3, #5
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	69ba      	ldr	r2, [r7, #24]
 800e8c0:	0151      	lsls	r1, r2, #5
 800e8c2:	69fa      	ldr	r2, [r7, #28]
 800e8c4:	440a      	add	r2, r1
 800e8c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	015a      	lsls	r2, r3, #5
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	69ba      	ldr	r2, [r7, #24]
 800e8e0:	0151      	lsls	r1, r2, #5
 800e8e2:	69fa      	ldr	r2, [r7, #28]
 800e8e4:	440a      	add	r2, r1
 800e8e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e8ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3720      	adds	r7, #32
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	1ff80000 	.word	0x1ff80000

0800e900 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e900:	b480      	push	{r7}
 800e902:	b087      	sub	sp, #28
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	4613      	mov	r3, r2
 800e90c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	785b      	ldrb	r3, [r3, #1]
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	f040 80cd 	bne.w	800eabc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	695b      	ldr	r3, [r3, #20]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d132      	bne.n	800e990 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	015a      	lsls	r2, r3, #5
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	4413      	add	r3, r2
 800e932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e936:	691b      	ldr	r3, [r3, #16]
 800e938:	693a      	ldr	r2, [r7, #16]
 800e93a:	0151      	lsls	r1, r2, #5
 800e93c:	697a      	ldr	r2, [r7, #20]
 800e93e:	440a      	add	r2, r1
 800e940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e944:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e948:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e94c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	015a      	lsls	r2, r3, #5
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	4413      	add	r3, r2
 800e956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e95a:	691b      	ldr	r3, [r3, #16]
 800e95c:	693a      	ldr	r2, [r7, #16]
 800e95e:	0151      	lsls	r1, r2, #5
 800e960:	697a      	ldr	r2, [r7, #20]
 800e962:	440a      	add	r2, r1
 800e964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e96c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	015a      	lsls	r2, r3, #5
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	4413      	add	r3, r2
 800e976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e97a:	691b      	ldr	r3, [r3, #16]
 800e97c:	693a      	ldr	r2, [r7, #16]
 800e97e:	0151      	lsls	r1, r2, #5
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	440a      	add	r2, r1
 800e984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e988:	0cdb      	lsrs	r3, r3, #19
 800e98a:	04db      	lsls	r3, r3, #19
 800e98c:	6113      	str	r3, [r2, #16]
 800e98e:	e04e      	b.n	800ea2e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	015a      	lsls	r2, r3, #5
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	4413      	add	r3, r2
 800e998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e99c:	691b      	ldr	r3, [r3, #16]
 800e99e:	693a      	ldr	r2, [r7, #16]
 800e9a0:	0151      	lsls	r1, r2, #5
 800e9a2:	697a      	ldr	r2, [r7, #20]
 800e9a4:	440a      	add	r2, r1
 800e9a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9aa:	0cdb      	lsrs	r3, r3, #19
 800e9ac:	04db      	lsls	r3, r3, #19
 800e9ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	015a      	lsls	r2, r3, #5
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9bc:	691b      	ldr	r3, [r3, #16]
 800e9be:	693a      	ldr	r2, [r7, #16]
 800e9c0:	0151      	lsls	r1, r2, #5
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	440a      	add	r2, r1
 800e9c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e9ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e9d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	695a      	ldr	r2, [r3, #20]
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	689b      	ldr	r3, [r3, #8]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d903      	bls.n	800e9e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	689a      	ldr	r2, [r3, #8]
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	015a      	lsls	r2, r3, #5
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	4413      	add	r3, r2
 800e9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9f4:	691b      	ldr	r3, [r3, #16]
 800e9f6:	693a      	ldr	r2, [r7, #16]
 800e9f8:	0151      	lsls	r1, r2, #5
 800e9fa:	697a      	ldr	r2, [r7, #20]
 800e9fc:	440a      	add	r2, r1
 800e9fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	015a      	lsls	r2, r3, #5
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	4413      	add	r3, r2
 800ea10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea14:	691a      	ldr	r2, [r3, #16]
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	695b      	ldr	r3, [r3, #20]
 800ea1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea1e:	6939      	ldr	r1, [r7, #16]
 800ea20:	0148      	lsls	r0, r1, #5
 800ea22:	6979      	ldr	r1, [r7, #20]
 800ea24:	4401      	add	r1, r0
 800ea26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ea2e:	79fb      	ldrb	r3, [r7, #7]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d11e      	bne.n	800ea72 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	691b      	ldr	r3, [r3, #16]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d009      	beq.n	800ea50 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	015a      	lsls	r2, r3, #5
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	4413      	add	r3, r2
 800ea44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea48:	461a      	mov	r2, r3
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	691b      	ldr	r3, [r3, #16]
 800ea4e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	015a      	lsls	r2, r3, #5
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	4413      	add	r3, r2
 800ea58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	693a      	ldr	r2, [r7, #16]
 800ea60:	0151      	lsls	r1, r2, #5
 800ea62:	697a      	ldr	r2, [r7, #20]
 800ea64:	440a      	add	r2, r1
 800ea66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea6e:	6013      	str	r3, [r2, #0]
 800ea70:	e092      	b.n	800eb98 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	015a      	lsls	r2, r3, #5
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	4413      	add	r3, r2
 800ea7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	693a      	ldr	r2, [r7, #16]
 800ea82:	0151      	lsls	r1, r2, #5
 800ea84:	697a      	ldr	r2, [r7, #20]
 800ea86:	440a      	add	r2, r1
 800ea88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea90:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	695b      	ldr	r3, [r3, #20]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d07e      	beq.n	800eb98 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	f003 030f 	and.w	r3, r3, #15
 800eaaa:	2101      	movs	r1, #1
 800eaac:	fa01 f303 	lsl.w	r3, r1, r3
 800eab0:	6979      	ldr	r1, [r7, #20]
 800eab2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eab6:	4313      	orrs	r3, r2
 800eab8:	634b      	str	r3, [r1, #52]	; 0x34
 800eaba:	e06d      	b.n	800eb98 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	015a      	lsls	r2, r3, #5
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	4413      	add	r3, r2
 800eac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	693a      	ldr	r2, [r7, #16]
 800eacc:	0151      	lsls	r1, r2, #5
 800eace:	697a      	ldr	r2, [r7, #20]
 800ead0:	440a      	add	r2, r1
 800ead2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ead6:	0cdb      	lsrs	r3, r3, #19
 800ead8:	04db      	lsls	r3, r3, #19
 800eada:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	015a      	lsls	r2, r3, #5
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	4413      	add	r3, r2
 800eae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	693a      	ldr	r2, [r7, #16]
 800eaec:	0151      	lsls	r1, r2, #5
 800eaee:	697a      	ldr	r2, [r7, #20]
 800eaf0:	440a      	add	r2, r1
 800eaf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eaf6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eafa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eafe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	695b      	ldr	r3, [r3, #20]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d003      	beq.n	800eb10 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	689a      	ldr	r2, [r3, #8]
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	015a      	lsls	r2, r3, #5
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	4413      	add	r3, r2
 800eb18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb1c:	691b      	ldr	r3, [r3, #16]
 800eb1e:	693a      	ldr	r2, [r7, #16]
 800eb20:	0151      	lsls	r1, r2, #5
 800eb22:	697a      	ldr	r2, [r7, #20]
 800eb24:	440a      	add	r2, r1
 800eb26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	015a      	lsls	r2, r3, #5
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	4413      	add	r3, r2
 800eb38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb3c:	691a      	ldr	r2, [r3, #16]
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb46:	6939      	ldr	r1, [r7, #16]
 800eb48:	0148      	lsls	r0, r1, #5
 800eb4a:	6979      	ldr	r1, [r7, #20]
 800eb4c:	4401      	add	r1, r0
 800eb4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb52:	4313      	orrs	r3, r2
 800eb54:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d10d      	bne.n	800eb78 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	68db      	ldr	r3, [r3, #12]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d009      	beq.n	800eb78 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	68d9      	ldr	r1, [r3, #12]
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	015a      	lsls	r2, r3, #5
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	4413      	add	r3, r2
 800eb70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb74:	460a      	mov	r2, r1
 800eb76:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	015a      	lsls	r2, r3, #5
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	4413      	add	r3, r2
 800eb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	693a      	ldr	r2, [r7, #16]
 800eb88:	0151      	lsls	r1, r2, #5
 800eb8a:	697a      	ldr	r2, [r7, #20]
 800eb8c:	440a      	add	r2, r1
 800eb8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	371c      	adds	r7, #28
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr

0800eba6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800eba6:	b480      	push	{r7}
 800eba8:	b089      	sub	sp, #36	; 0x24
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	60f8      	str	r0, [r7, #12]
 800ebae:	60b9      	str	r1, [r7, #8]
 800ebb0:	4611      	mov	r1, r2
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	71fb      	strb	r3, [r7, #7]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ebc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d11a      	bne.n	800ec02 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ebcc:	88bb      	ldrh	r3, [r7, #4]
 800ebce:	3303      	adds	r3, #3
 800ebd0:	089b      	lsrs	r3, r3, #2
 800ebd2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	61bb      	str	r3, [r7, #24]
 800ebd8:	e00f      	b.n	800ebfa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ebda:	79fb      	ldrb	r3, [r7, #7]
 800ebdc:	031a      	lsls	r2, r3, #12
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	3304      	adds	r3, #4
 800ebf2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	61bb      	str	r3, [r7, #24]
 800ebfa:	69ba      	ldr	r2, [r7, #24]
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d3eb      	bcc.n	800ebda <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ec02:	2300      	movs	r3, #0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3724      	adds	r7, #36	; 0x24
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b089      	sub	sp, #36	; 0x24
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ec26:	88fb      	ldrh	r3, [r7, #6]
 800ec28:	3303      	adds	r3, #3
 800ec2a:	089b      	lsrs	r3, r3, #2
 800ec2c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ec2e:	2300      	movs	r3, #0
 800ec30:	61bb      	str	r3, [r7, #24]
 800ec32:	e00b      	b.n	800ec4c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	3304      	adds	r3, #4
 800ec44:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	61bb      	str	r3, [r7, #24]
 800ec4c:	69ba      	ldr	r2, [r7, #24]
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d3ef      	bcc.n	800ec34 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ec54:	69fb      	ldr	r3, [r7, #28]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3724      	adds	r7, #36	; 0x24
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr

0800ec62 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec62:	b480      	push	{r7}
 800ec64:	b085      	sub	sp, #20
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
 800ec6a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	785b      	ldrb	r3, [r3, #1]
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d12c      	bne.n	800ecd8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	015a      	lsls	r2, r3, #5
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	4413      	add	r3, r2
 800ec86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	db12      	blt.n	800ecb6 <USB_EPSetStall+0x54>
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d00f      	beq.n	800ecb6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	015a      	lsls	r2, r3, #5
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	68ba      	ldr	r2, [r7, #8]
 800eca6:	0151      	lsls	r1, r2, #5
 800eca8:	68fa      	ldr	r2, [r7, #12]
 800ecaa:	440a      	add	r2, r1
 800ecac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ecb4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	015a      	lsls	r2, r3, #5
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	68ba      	ldr	r2, [r7, #8]
 800ecc6:	0151      	lsls	r1, r2, #5
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	440a      	add	r2, r1
 800eccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ecd4:	6013      	str	r3, [r2, #0]
 800ecd6:	e02b      	b.n	800ed30 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	015a      	lsls	r2, r3, #5
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	4413      	add	r3, r2
 800ece0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	db12      	blt.n	800ed10 <USB_EPSetStall+0xae>
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d00f      	beq.n	800ed10 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	015a      	lsls	r2, r3, #5
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	68ba      	ldr	r2, [r7, #8]
 800ed00:	0151      	lsls	r1, r2, #5
 800ed02:	68fa      	ldr	r2, [r7, #12]
 800ed04:	440a      	add	r2, r1
 800ed06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ed0e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	015a      	lsls	r2, r3, #5
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	4413      	add	r3, r2
 800ed18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	68ba      	ldr	r2, [r7, #8]
 800ed20:	0151      	lsls	r1, r2, #5
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	440a      	add	r2, r1
 800ed26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ed2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3714      	adds	r7, #20
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr

0800ed3e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ed3e:	b480      	push	{r7}
 800ed40:	b085      	sub	sp, #20
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
 800ed46:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	785b      	ldrb	r3, [r3, #1]
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d128      	bne.n	800edac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	015a      	lsls	r2, r3, #5
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	4413      	add	r3, r2
 800ed62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	0151      	lsls	r1, r2, #5
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	440a      	add	r2, r1
 800ed70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ed78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	78db      	ldrb	r3, [r3, #3]
 800ed7e:	2b03      	cmp	r3, #3
 800ed80:	d003      	beq.n	800ed8a <USB_EPClearStall+0x4c>
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	78db      	ldrb	r3, [r3, #3]
 800ed86:	2b02      	cmp	r3, #2
 800ed88:	d138      	bne.n	800edfc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	015a      	lsls	r2, r3, #5
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	4413      	add	r3, r2
 800ed92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	0151      	lsls	r1, r2, #5
 800ed9c:	68fa      	ldr	r2, [r7, #12]
 800ed9e:	440a      	add	r2, r1
 800eda0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eda4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eda8:	6013      	str	r3, [r2, #0]
 800edaa:	e027      	b.n	800edfc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	015a      	lsls	r2, r3, #5
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	4413      	add	r3, r2
 800edb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	68ba      	ldr	r2, [r7, #8]
 800edbc:	0151      	lsls	r1, r2, #5
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	440a      	add	r2, r1
 800edc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800edca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	78db      	ldrb	r3, [r3, #3]
 800edd0:	2b03      	cmp	r3, #3
 800edd2:	d003      	beq.n	800eddc <USB_EPClearStall+0x9e>
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	78db      	ldrb	r3, [r3, #3]
 800edd8:	2b02      	cmp	r3, #2
 800edda:	d10f      	bne.n	800edfc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	015a      	lsls	r2, r3, #5
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	4413      	add	r3, r2
 800ede4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	68ba      	ldr	r2, [r7, #8]
 800edec:	0151      	lsls	r1, r2, #5
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	440a      	add	r2, r1
 800edf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800edfa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800edfc:	2300      	movs	r3, #0
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3714      	adds	r7, #20
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ee0a:	b480      	push	{r7}
 800ee0c:	b085      	sub	sp, #20
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
 800ee12:	460b      	mov	r3, r1
 800ee14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	68fa      	ldr	r2, [r7, #12]
 800ee24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ee2c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	78fb      	ldrb	r3, [r7, #3]
 800ee38:	011b      	lsls	r3, r3, #4
 800ee3a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ee3e:	68f9      	ldr	r1, [r7, #12]
 800ee40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee44:	4313      	orrs	r3, r2
 800ee46:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ee48:	2300      	movs	r3, #0
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3714      	adds	r7, #20
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr

0800ee56 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b084      	sub	sp, #16
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	68fa      	ldr	r2, [r7, #12]
 800ee6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee70:	f023 0302 	bic.w	r3, r3, #2
 800ee74:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ee76:	2003      	movs	r0, #3
 800ee78:	f7f7 fa34 	bl	80062e4 <HAL_Delay>

  return HAL_OK;
 800ee7c:	2300      	movs	r3, #0
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3710      	adds	r7, #16
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}

0800ee86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b084      	sub	sp, #16
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eea0:	f043 0302 	orr.w	r3, r3, #2
 800eea4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800eea6:	2003      	movs	r0, #3
 800eea8:	f7f7 fa1c 	bl	80062e4 <HAL_Delay>

  return HAL_OK;
 800eeac:	2300      	movs	r3, #0
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eeb6:	b480      	push	{r7}
 800eeb8:	b085      	sub	sp, #20
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	695b      	ldr	r3, [r3, #20]
 800eec2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	699b      	ldr	r3, [r3, #24]
 800eec8:	68fa      	ldr	r2, [r7, #12]
 800eeca:	4013      	ands	r3, r2
 800eecc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eece:	68fb      	ldr	r3, [r7, #12]
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3714      	adds	r7, #20
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeee:	699b      	ldr	r3, [r3, #24]
 800eef0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eef8:	69db      	ldr	r3, [r3, #28]
 800eefa:	68ba      	ldr	r2, [r7, #8]
 800eefc:	4013      	ands	r3, r2
 800eefe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	0c1b      	lsrs	r3, r3, #16
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3714      	adds	r7, #20
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b085      	sub	sp, #20
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef22:	699b      	ldr	r3, [r3, #24]
 800ef24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef2c:	69db      	ldr	r3, [r3, #28]
 800ef2e:	68ba      	ldr	r2, [r7, #8]
 800ef30:	4013      	ands	r3, r2
 800ef32:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	b29b      	uxth	r3, r3
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3714      	adds	r7, #20
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ef54:	78fb      	ldrb	r3, [r7, #3]
 800ef56:	015a      	lsls	r2, r3, #5
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	68ba      	ldr	r2, [r7, #8]
 800ef6e:	4013      	ands	r3, r2
 800ef70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ef72:	68bb      	ldr	r3, [r7, #8]
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3714      	adds	r7, #20
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b087      	sub	sp, #28
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	460b      	mov	r3, r1
 800ef8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef96:	691b      	ldr	r3, [r3, #16]
 800ef98:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efa2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800efa4:	78fb      	ldrb	r3, [r7, #3]
 800efa6:	f003 030f 	and.w	r3, r3, #15
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	fa22 f303 	lsr.w	r3, r2, r3
 800efb0:	01db      	lsls	r3, r3, #7
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	693a      	ldr	r2, [r7, #16]
 800efb6:	4313      	orrs	r3, r2
 800efb8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800efba:	78fb      	ldrb	r3, [r7, #3]
 800efbc:	015a      	lsls	r2, r3, #5
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	4413      	add	r3, r2
 800efc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc6:	689b      	ldr	r3, [r3, #8]
 800efc8:	693a      	ldr	r2, [r7, #16]
 800efca:	4013      	ands	r3, r2
 800efcc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800efce:	68bb      	ldr	r3, [r7, #8]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	371c      	adds	r7, #28
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800efdc:	b480      	push	{r7}
 800efde:	b083      	sub	sp, #12
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	695b      	ldr	r3, [r3, #20]
 800efe8:	f003 0301 	and.w	r3, r3, #1
}
 800efec:	4618      	mov	r0, r3
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f012:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f016:	f023 0307 	bic.w	r3, r3, #7
 800f01a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f022:	689b      	ldr	r3, [r3, #8]
 800f024:	f003 0306 	and.w	r3, r3, #6
 800f028:	2b04      	cmp	r3, #4
 800f02a:	d109      	bne.n	800f040 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	68fa      	ldr	r2, [r7, #12]
 800f036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f03a:	f043 0303 	orr.w	r3, r3, #3
 800f03e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f04e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f052:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3714      	adds	r7, #20
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr
	...

0800f064 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f064:	b480      	push	{r7}
 800f066:	b087      	sub	sp, #28
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	460b      	mov	r3, r1
 800f06e:	607a      	str	r2, [r7, #4]
 800f070:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	333c      	adds	r3, #60	; 0x3c
 800f07a:	3304      	adds	r3, #4
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	4a26      	ldr	r2, [pc, #152]	; (800f11c <USB_EP0_OutStart+0xb8>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d90a      	bls.n	800f09e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f098:	d101      	bne.n	800f09e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f09a:	2300      	movs	r3, #0
 800f09c:	e037      	b.n	800f10e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	697a      	ldr	r2, [r7, #20]
 800f0b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f0bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	697a      	ldr	r2, [r7, #20]
 800f0c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0cc:	f043 0318 	orr.w	r3, r3, #24
 800f0d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0d8:	691b      	ldr	r3, [r3, #16]
 800f0da:	697a      	ldr	r2, [r7, #20]
 800f0dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f0e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f0e6:	7afb      	ldrb	r3, [r7, #11]
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d10f      	bne.n	800f10c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	697a      	ldr	r2, [r7, #20]
 800f102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f106:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f10a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	371c      	adds	r7, #28
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr
 800f11a:	bf00      	nop
 800f11c:	4f54300a 	.word	0x4f54300a

0800f120 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f120:	b480      	push	{r7}
 800f122:	b085      	sub	sp, #20
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f128:	2300      	movs	r3, #0
 800f12a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	3301      	adds	r3, #1
 800f130:	60fb      	str	r3, [r7, #12]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	4a13      	ldr	r2, [pc, #76]	; (800f184 <USB_CoreReset+0x64>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d901      	bls.n	800f13e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f13a:	2303      	movs	r3, #3
 800f13c:	e01b      	b.n	800f176 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	2b00      	cmp	r3, #0
 800f144:	daf2      	bge.n	800f12c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f146:	2300      	movs	r3, #0
 800f148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	f043 0201 	orr.w	r2, r3, #1
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	3301      	adds	r3, #1
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	4a09      	ldr	r2, [pc, #36]	; (800f184 <USB_CoreReset+0x64>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d901      	bls.n	800f168 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f164:	2303      	movs	r3, #3
 800f166:	e006      	b.n	800f176 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	691b      	ldr	r3, [r3, #16]
 800f16c:	f003 0301 	and.w	r3, r3, #1
 800f170:	2b01      	cmp	r3, #1
 800f172:	d0f0      	beq.n	800f156 <USB_CoreReset+0x36>

  return HAL_OK;
 800f174:	2300      	movs	r3, #0
}
 800f176:	4618      	mov	r0, r3
 800f178:	3714      	adds	r7, #20
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop
 800f184:	00030d40 	.word	0x00030d40

0800f188 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	460b      	mov	r3, r1
 800f192:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f194:	2300      	movs	r3, #0
 800f196:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	7c1b      	ldrb	r3, [r3, #16]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d115      	bne.n	800f1cc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f1a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1a4:	2202      	movs	r2, #2
 800f1a6:	2181      	movs	r1, #129	; 0x81
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f007 faec 	bl	8016786 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f1b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1b8:	2202      	movs	r2, #2
 800f1ba:	2101      	movs	r1, #1
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f007 fae2 	bl	8016786 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800f1ca:	e012      	b.n	800f1f2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f1cc:	2340      	movs	r3, #64	; 0x40
 800f1ce:	2202      	movs	r2, #2
 800f1d0:	2181      	movs	r1, #129	; 0x81
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f007 fad7 	bl	8016786 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f1de:	2340      	movs	r3, #64	; 0x40
 800f1e0:	2202      	movs	r2, #2
 800f1e2:	2101      	movs	r1, #1
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f007 face 	bl	8016786 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f1f2:	2308      	movs	r3, #8
 800f1f4:	2203      	movs	r2, #3
 800f1f6:	2182      	movs	r1, #130	; 0x82
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f007 fac4 	bl	8016786 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2201      	movs	r2, #1
 800f202:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800f204:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f208:	f007 fd7c 	bl	8016d04 <malloc>
 800f20c:	4603      	mov	r3, r0
 800f20e:	461a      	mov	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d102      	bne.n	800f226 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800f220:	2301      	movs	r3, #1
 800f222:	73fb      	strb	r3, [r7, #15]
 800f224:	e026      	b.n	800f274 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f22c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	2200      	movs	r2, #0
 800f23c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	2200      	movs	r2, #0
 800f244:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	7c1b      	ldrb	r3, [r3, #16]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d109      	bne.n	800f264 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f25a:	2101      	movs	r1, #1
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f007 fb83 	bl	8016968 <USBD_LL_PrepareReceive>
 800f262:	e007      	b.n	800f274 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f26a:	2340      	movs	r3, #64	; 0x40
 800f26c:	2101      	movs	r1, #1
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f007 fb7a 	bl	8016968 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800f274:	7bfb      	ldrb	r3, [r7, #15]
}
 800f276:	4618      	mov	r0, r3
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b084      	sub	sp, #16
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
 800f286:	460b      	mov	r3, r1
 800f288:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f28a:	2300      	movs	r3, #0
 800f28c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f28e:	2181      	movs	r1, #129	; 0x81
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f007 fa9e 	bl	80167d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2200      	movs	r2, #0
 800f29a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f29c:	2101      	movs	r1, #1
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f007 fa97 	bl	80167d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f2ac:	2182      	movs	r1, #130	; 0x82
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f007 fa8f 	bl	80167d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d00e      	beq.n	800f2e2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f007 fd1d 	bl	8016d14 <free>
    pdev->pClassData = NULL;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800f2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3710      	adds	r7, #16
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b086      	sub	sp, #24
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f2fc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800f2fe:	2300      	movs	r3, #0
 800f300:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800f302:	2300      	movs	r3, #0
 800f304:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800f306:	2300      	movs	r3, #0
 800f308:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f312:	2b00      	cmp	r3, #0
 800f314:	d039      	beq.n	800f38a <USBD_CDC_Setup+0x9e>
 800f316:	2b20      	cmp	r3, #32
 800f318:	d17c      	bne.n	800f414 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	88db      	ldrh	r3, [r3, #6]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d029      	beq.n	800f376 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	b25b      	sxtb	r3, r3
 800f328:	2b00      	cmp	r3, #0
 800f32a:	da11      	bge.n	800f350 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	683a      	ldr	r2, [r7, #0]
 800f336:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800f338:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f33a:	683a      	ldr	r2, [r7, #0]
 800f33c:	88d2      	ldrh	r2, [r2, #6]
 800f33e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f340:	6939      	ldr	r1, [r7, #16]
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	88db      	ldrh	r3, [r3, #6]
 800f346:	461a      	mov	r2, r3
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f001 f9c9 	bl	80106e0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800f34e:	e068      	b.n	800f422 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	785a      	ldrb	r2, [r3, #1]
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	88db      	ldrh	r3, [r3, #6]
 800f35e:	b2da      	uxtb	r2, r3
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f366:	6939      	ldr	r1, [r7, #16]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	88db      	ldrh	r3, [r3, #6]
 800f36c:	461a      	mov	r2, r3
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f001 f9e4 	bl	801073c <USBD_CtlPrepareRx>
    break;
 800f374:	e055      	b.n	800f422 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f37c:	689b      	ldr	r3, [r3, #8]
 800f37e:	683a      	ldr	r2, [r7, #0]
 800f380:	7850      	ldrb	r0, [r2, #1]
 800f382:	2200      	movs	r2, #0
 800f384:	6839      	ldr	r1, [r7, #0]
 800f386:	4798      	blx	r3
    break;
 800f388:	e04b      	b.n	800f422 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	785b      	ldrb	r3, [r3, #1]
 800f38e:	2b0a      	cmp	r3, #10
 800f390:	d017      	beq.n	800f3c2 <USBD_CDC_Setup+0xd6>
 800f392:	2b0b      	cmp	r3, #11
 800f394:	d029      	beq.n	800f3ea <USBD_CDC_Setup+0xfe>
 800f396:	2b00      	cmp	r3, #0
 800f398:	d133      	bne.n	800f402 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f3a0:	2b03      	cmp	r3, #3
 800f3a2:	d107      	bne.n	800f3b4 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800f3a4:	f107 030c 	add.w	r3, r7, #12
 800f3a8:	2202      	movs	r2, #2
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f001 f997 	bl	80106e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800f3b2:	e02e      	b.n	800f412 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800f3b4:	6839      	ldr	r1, [r7, #0]
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f001 f927 	bl	801060a <USBD_CtlError>
			  ret = USBD_FAIL;
 800f3bc:	2302      	movs	r3, #2
 800f3be:	75fb      	strb	r3, [r7, #23]
      break;
 800f3c0:	e027      	b.n	800f412 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f3c8:	2b03      	cmp	r3, #3
 800f3ca:	d107      	bne.n	800f3dc <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800f3cc:	f107 030f 	add.w	r3, r7, #15
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f001 f983 	bl	80106e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800f3da:	e01a      	b.n	800f412 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800f3dc:	6839      	ldr	r1, [r7, #0]
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f001 f913 	bl	801060a <USBD_CtlError>
			  ret = USBD_FAIL;
 800f3e4:	2302      	movs	r3, #2
 800f3e6:	75fb      	strb	r3, [r7, #23]
      break;
 800f3e8:	e013      	b.n	800f412 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f3f0:	2b03      	cmp	r3, #3
 800f3f2:	d00d      	beq.n	800f410 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800f3f4:	6839      	ldr	r1, [r7, #0]
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f001 f907 	bl	801060a <USBD_CtlError>
			  ret = USBD_FAIL;
 800f3fc:	2302      	movs	r3, #2
 800f3fe:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800f400:	e006      	b.n	800f410 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800f402:	6839      	ldr	r1, [r7, #0]
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f001 f900 	bl	801060a <USBD_CtlError>
      ret = USBD_FAIL;
 800f40a:	2302      	movs	r3, #2
 800f40c:	75fb      	strb	r3, [r7, #23]
      break;
 800f40e:	e000      	b.n	800f412 <USBD_CDC_Setup+0x126>
      break;
 800f410:	bf00      	nop
    }
    break;
 800f412:	e006      	b.n	800f422 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800f414:	6839      	ldr	r1, [r7, #0]
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f001 f8f7 	bl	801060a <USBD_CtlError>
    ret = USBD_FAIL;
 800f41c:	2302      	movs	r3, #2
 800f41e:	75fb      	strb	r3, [r7, #23]
    break;
 800f420:	bf00      	nop
  }

  return ret;
 800f422:	7dfb      	ldrb	r3, [r7, #23]
}
 800f424:	4618      	mov	r0, r3
 800f426:	3718      	adds	r7, #24
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	460b      	mov	r3, r1
 800f436:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f43e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f446:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d03a      	beq.n	800f4c8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f452:	78fa      	ldrb	r2, [r7, #3]
 800f454:	6879      	ldr	r1, [r7, #4]
 800f456:	4613      	mov	r3, r2
 800f458:	009b      	lsls	r3, r3, #2
 800f45a:	4413      	add	r3, r2
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	440b      	add	r3, r1
 800f460:	331c      	adds	r3, #28
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d029      	beq.n	800f4bc <USBD_CDC_DataIn+0x90>
 800f468:	78fa      	ldrb	r2, [r7, #3]
 800f46a:	6879      	ldr	r1, [r7, #4]
 800f46c:	4613      	mov	r3, r2
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	4413      	add	r3, r2
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	440b      	add	r3, r1
 800f476:	331c      	adds	r3, #28
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	78f9      	ldrb	r1, [r7, #3]
 800f47c:	68b8      	ldr	r0, [r7, #8]
 800f47e:	460b      	mov	r3, r1
 800f480:	00db      	lsls	r3, r3, #3
 800f482:	1a5b      	subs	r3, r3, r1
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	4403      	add	r3, r0
 800f488:	3344      	adds	r3, #68	; 0x44
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f490:	fb03 f301 	mul.w	r3, r3, r1
 800f494:	1ad3      	subs	r3, r2, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	d110      	bne.n	800f4bc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800f49a:	78fa      	ldrb	r2, [r7, #3]
 800f49c:	6879      	ldr	r1, [r7, #4]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	4413      	add	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	440b      	add	r3, r1
 800f4a8:	331c      	adds	r3, #28
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800f4ae:	78f9      	ldrb	r1, [r7, #3]
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f007 fa34 	bl	8016922 <USBD_LL_Transmit>
 800f4ba:	e003      	b.n	800f4c4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	e000      	b.n	800f4ca <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800f4c8:	2302      	movs	r3, #2
  }
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b084      	sub	sp, #16
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	460b      	mov	r3, r1
 800f4dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f4e4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800f4e6:	78fb      	ldrb	r3, [r7, #3]
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f007 fa5f 	bl	80169ae <USBD_LL_GetRxDataSize>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d00d      	beq.n	800f51e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f508:	68db      	ldr	r3, [r3, #12]
 800f50a:	68fa      	ldr	r2, [r7, #12]
 800f50c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f516:	4611      	mov	r1, r2
 800f518:	4798      	blx	r3

    return USBD_OK;
 800f51a:	2300      	movs	r3, #0
 800f51c:	e000      	b.n	800f520 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800f51e:	2302      	movs	r3, #2
  }
}
 800f520:	4618      	mov	r0, r3
 800f522:	3710      	adds	r7, #16
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f536:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d015      	beq.n	800f56e <USBD_CDC_EP0_RxReady+0x46>
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f548:	2bff      	cmp	r3, #255	; 0xff
 800f54a:	d010      	beq.n	800f56e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	68fa      	ldr	r2, [r7, #12]
 800f556:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800f55a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f55c:	68fa      	ldr	r2, [r7, #12]
 800f55e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f562:	b292      	uxth	r2, r2
 800f564:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	22ff      	movs	r2, #255	; 0xff
 800f56a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3710      	adds	r7, #16
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2243      	movs	r2, #67	; 0x43
 800f584:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800f586:	4b03      	ldr	r3, [pc, #12]	; (800f594 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f588:	4618      	mov	r0, r3
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr
 800f594:	20000094 	.word	0x20000094

0800f598 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2243      	movs	r2, #67	; 0x43
 800f5a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800f5a6:	4b03      	ldr	r3, [pc, #12]	; (800f5b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr
 800f5b4:	20000050 	.word	0x20000050

0800f5b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2243      	movs	r2, #67	; 0x43
 800f5c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800f5c6:	4b03      	ldr	r3, [pc, #12]	; (800f5d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	370c      	adds	r7, #12
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr
 800f5d4:	200000d8 	.word	0x200000d8

0800f5d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	220a      	movs	r2, #10
 800f5e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800f5e6:	4b03      	ldr	r3, [pc, #12]	; (800f5f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr
 800f5f4:	2000000c 	.word	0x2000000c

0800f5f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800f602:	2302      	movs	r3, #2
 800f604:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d005      	beq.n	800f618 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	683a      	ldr	r2, [r7, #0]
 800f610:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800f614:	2300      	movs	r3, #0
 800f616:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f618:	7bfb      	ldrb	r3, [r7, #15]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3714      	adds	r7, #20
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr

0800f626 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800f626:	b480      	push	{r7}
 800f628:	b087      	sub	sp, #28
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	60f8      	str	r0, [r7, #12]
 800f62e:	60b9      	str	r1, [r7, #8]
 800f630:	4613      	mov	r3, r2
 800f632:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f63a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	68ba      	ldr	r2, [r7, #8]
 800f640:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f644:	88fa      	ldrh	r2, [r7, #6]
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800f64c:	2300      	movs	r3, #0
}
 800f64e:	4618      	mov	r0, r3
 800f650:	371c      	adds	r7, #28
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr

0800f65a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800f65a:	b480      	push	{r7}
 800f65c:	b085      	sub	sp, #20
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
 800f662:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f66a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	683a      	ldr	r2, [r7, #0]
 800f670:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800f674:	2300      	movs	r3, #0
}
 800f676:	4618      	mov	r0, r3
 800f678:	3714      	adds	r7, #20
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr

0800f682 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f682:	b580      	push	{r7, lr}
 800f684:	b084      	sub	sp, #16
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f690:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d01c      	beq.n	800f6d6 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d115      	bne.n	800f6d2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2201      	movs	r2, #1
 800f6aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	2181      	movs	r1, #129	; 0x81
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f007 f92a 	bl	8016922 <USBD_LL_Transmit>

      return USBD_OK;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	e002      	b.n	800f6d8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	e000      	b.n	800f6d8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800f6d6:	2302      	movs	r3, #2
  }
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b084      	sub	sp, #16
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f6ee:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d017      	beq.n	800f72a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	7c1b      	ldrb	r3, [r3, #16]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d109      	bne.n	800f716 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f70c:	2101      	movs	r1, #1
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f007 f92a 	bl	8016968 <USBD_LL_PrepareReceive>
 800f714:	e007      	b.n	800f726 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f71c:	2340      	movs	r3, #64	; 0x40
 800f71e:	2101      	movs	r1, #1
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f007 f921 	bl	8016968 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800f726:	2300      	movs	r3, #0
 800f728:	e000      	b.n	800f72c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800f72a:	2302      	movs	r3, #2
  }
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	4613      	mov	r3, r2
 800f740:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d101      	bne.n	800f74c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f748:	2302      	movs	r3, #2
 800f74a:	e01a      	b.n	800f782 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f752:	2b00      	cmp	r3, #0
 800f754:	d003      	beq.n	800f75e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2200      	movs	r2, #0
 800f75a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d003      	beq.n	800f76c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	68ba      	ldr	r2, [r7, #8]
 800f768:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2201      	movs	r2, #1
 800f770:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	79fa      	ldrb	r2, [r7, #7]
 800f778:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f006 ff9c 	bl	80166b8 <USBD_LL_Init>

  return USBD_OK;
 800f780:	2300      	movs	r3, #0
}
 800f782:	4618      	mov	r0, r3
 800f784:	3710      	adds	r7, #16
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f78a:	b480      	push	{r7}
 800f78c:	b085      	sub	sp, #20
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
 800f792:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800f794:	2300      	movs	r3, #0
 800f796:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d006      	beq.n	800f7ac <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	683a      	ldr	r2, [r7, #0]
 800f7a2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	73fb      	strb	r3, [r7, #15]
 800f7aa:	e001      	b.n	800f7b0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800f7ac:	2302      	movs	r3, #2
 800f7ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3714      	adds	r7, #20
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr

0800f7be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800f7be:	b580      	push	{r7, lr}
 800f7c0:	b082      	sub	sp, #8
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f006 ffc2 	bl	8016750 <USBD_LL_Start>

  return USBD_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}

0800f7d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800f7d6:	b480      	push	{r7}
 800f7d8:	b083      	sub	sp, #12
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f7de:	2300      	movs	r3, #0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr

0800f7ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800f7f8:	2302      	movs	r3, #2
 800f7fa:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00c      	beq.n	800f820 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	78fa      	ldrb	r2, [r7, #3]
 800f810:	4611      	mov	r1, r2
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	4798      	blx	r3
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d101      	bne.n	800f820 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800f81c:	2300      	movs	r3, #0
 800f81e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f820:	7bfb      	ldrb	r3, [r7, #15]
}
 800f822:	4618      	mov	r0, r3
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}

0800f82a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b082      	sub	sp, #8
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
 800f832:	460b      	mov	r3, r1
 800f834:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	78fa      	ldrb	r2, [r7, #3]
 800f840:	4611      	mov	r1, r2
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	4798      	blx	r3
  return USBD_OK;
 800f846:	2300      	movs	r3, #0
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f860:	6839      	ldr	r1, [r7, #0]
 800f862:	4618      	mov	r0, r3
 800f864:	f000 fe94 	bl	8010590 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2201      	movs	r2, #1
 800f86c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800f876:	461a      	mov	r2, r3
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800f884:	f003 031f 	and.w	r3, r3, #31
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d00c      	beq.n	800f8a6 <USBD_LL_SetupStage+0x56>
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d302      	bcc.n	800f896 <USBD_LL_SetupStage+0x46>
 800f890:	2b02      	cmp	r3, #2
 800f892:	d010      	beq.n	800f8b6 <USBD_LL_SetupStage+0x66>
 800f894:	e017      	b.n	800f8c6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f89c:	4619      	mov	r1, r3
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 fa04 	bl	800fcac <USBD_StdDevReq>
    break;
 800f8a4:	e01a      	b.n	800f8dc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 fa66 	bl	800fd80 <USBD_StdItfReq>
    break;
 800f8b4:	e012      	b.n	800f8dc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f8bc:	4619      	mov	r1, r3
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 faa4 	bl	800fe0c <USBD_StdEPReq>
    break;
 800f8c4:	e00a      	b.n	800f8dc <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800f8cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f006 ff9b 	bl	8016810 <USBD_LL_StallEP>
    break;
 800f8da:	bf00      	nop
  }

  return USBD_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3708      	adds	r7, #8
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}

0800f8e6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b086      	sub	sp, #24
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	60f8      	str	r0, [r7, #12]
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	607a      	str	r2, [r7, #4]
 800f8f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800f8f4:	7afb      	ldrb	r3, [r7, #11]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d14b      	bne.n	800f992 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f900:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f908:	2b03      	cmp	r3, #3
 800f90a:	d134      	bne.n	800f976 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	68da      	ldr	r2, [r3, #12]
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	691b      	ldr	r3, [r3, #16]
 800f914:	429a      	cmp	r2, r3
 800f916:	d919      	bls.n	800f94c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	68da      	ldr	r2, [r3, #12]
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	691b      	ldr	r3, [r3, #16]
 800f920:	1ad2      	subs	r2, r2, r3
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	68da      	ldr	r2, [r3, #12]
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800f92e:	429a      	cmp	r2, r3
 800f930:	d203      	bcs.n	800f93a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800f936:	b29b      	uxth	r3, r3
 800f938:	e002      	b.n	800f940 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800f93e:	b29b      	uxth	r3, r3
 800f940:	461a      	mov	r2, r3
 800f942:	6879      	ldr	r1, [r7, #4]
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f000 ff17 	bl	8010778 <USBD_CtlContinueRx>
 800f94a:	e038      	b.n	800f9be <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f952:	691b      	ldr	r3, [r3, #16]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d00a      	beq.n	800f96e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800f95e:	2b03      	cmp	r3, #3
 800f960:	d105      	bne.n	800f96e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f968:	691b      	ldr	r3, [r3, #16]
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800f96e:	68f8      	ldr	r0, [r7, #12]
 800f970:	f000 ff14 	bl	801079c <USBD_CtlSendStatus>
 800f974:	e023      	b.n	800f9be <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f97c:	2b05      	cmp	r3, #5
 800f97e:	d11e      	bne.n	800f9be <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2200      	movs	r2, #0
 800f984:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800f988:	2100      	movs	r1, #0
 800f98a:	68f8      	ldr	r0, [r7, #12]
 800f98c:	f006 ff40 	bl	8016810 <USBD_LL_StallEP>
 800f990:	e015      	b.n	800f9be <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f998:	699b      	ldr	r3, [r3, #24]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d00d      	beq.n	800f9ba <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800f9a4:	2b03      	cmp	r3, #3
 800f9a6:	d108      	bne.n	800f9ba <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f9ae:	699b      	ldr	r3, [r3, #24]
 800f9b0:	7afa      	ldrb	r2, [r7, #11]
 800f9b2:	4611      	mov	r1, r2
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	4798      	blx	r3
 800f9b8:	e001      	b.n	800f9be <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f9ba:	2302      	movs	r3, #2
 800f9bc:	e000      	b.n	800f9c0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800f9be:	2300      	movs	r3, #0
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3718      	adds	r7, #24
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b086      	sub	sp, #24
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	607a      	str	r2, [r7, #4]
 800f9d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800f9d6:	7afb      	ldrb	r3, [r7, #11]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d17f      	bne.n	800fadc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	3314      	adds	r3, #20
 800f9e0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f9e8:	2b02      	cmp	r3, #2
 800f9ea:	d15c      	bne.n	800faa6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	68da      	ldr	r2, [r3, #12]
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	691b      	ldr	r3, [r3, #16]
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d915      	bls.n	800fa24 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	68da      	ldr	r2, [r3, #12]
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	691b      	ldr	r3, [r3, #16]
 800fa00:	1ad2      	subs	r2, r2, r3
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	6879      	ldr	r1, [r7, #4]
 800fa10:	68f8      	ldr	r0, [r7, #12]
 800fa12:	f000 fe81 	bl	8010718 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800fa16:	2300      	movs	r3, #0
 800fa18:	2200      	movs	r2, #0
 800fa1a:	2100      	movs	r1, #0
 800fa1c:	68f8      	ldr	r0, [r7, #12]
 800fa1e:	f006 ffa3 	bl	8016968 <USBD_LL_PrepareReceive>
 800fa22:	e04e      	b.n	800fac2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	697a      	ldr	r2, [r7, #20]
 800fa2a:	6912      	ldr	r2, [r2, #16]
 800fa2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa30:	fb02 f201 	mul.w	r2, r2, r1
 800fa34:	1a9b      	subs	r3, r3, r2
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d11c      	bne.n	800fa74 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	689a      	ldr	r2, [r3, #8]
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d316      	bcc.n	800fa74 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	689a      	ldr	r2, [r3, #8]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d20f      	bcs.n	800fa74 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fa54:	2200      	movs	r2, #0
 800fa56:	2100      	movs	r1, #0
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	f000 fe5d 	bl	8010718 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800fa66:	2300      	movs	r3, #0
 800fa68:	2200      	movs	r2, #0
 800fa6a:	2100      	movs	r1, #0
 800fa6c:	68f8      	ldr	r0, [r7, #12]
 800fa6e:	f006 ff7b 	bl	8016968 <USBD_LL_PrepareReceive>
 800fa72:	e026      	b.n	800fac2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fa7a:	68db      	ldr	r3, [r3, #12]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d00a      	beq.n	800fa96 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800fa86:	2b03      	cmp	r3, #3
 800fa88:	d105      	bne.n	800fa96 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fa90:	68db      	ldr	r3, [r3, #12]
 800fa92:	68f8      	ldr	r0, [r7, #12]
 800fa94:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800fa96:	2180      	movs	r1, #128	; 0x80
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	f006 feb9 	bl	8016810 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800fa9e:	68f8      	ldr	r0, [r7, #12]
 800faa0:	f000 fe8f 	bl	80107c2 <USBD_CtlReceiveStatus>
 800faa4:	e00d      	b.n	800fac2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800faac:	2b04      	cmp	r3, #4
 800faae:	d004      	beq.n	800faba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d103      	bne.n	800fac2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800faba:	2180      	movs	r1, #128	; 0x80
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	f006 fea7 	bl	8016810 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d11d      	bne.n	800fb08 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	f7ff fe82 	bl	800f7d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2200      	movs	r2, #0
 800fad6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800fada:	e015      	b.n	800fb08 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fae2:	695b      	ldr	r3, [r3, #20]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d00d      	beq.n	800fb04 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800faee:	2b03      	cmp	r3, #3
 800faf0:	d108      	bne.n	800fb04 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800faf8:	695b      	ldr	r3, [r3, #20]
 800fafa:	7afa      	ldrb	r2, [r7, #11]
 800fafc:	4611      	mov	r1, r2
 800fafe:	68f8      	ldr	r0, [r7, #12]
 800fb00:	4798      	blx	r3
 800fb02:	e001      	b.n	800fb08 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fb04:	2302      	movs	r3, #2
 800fb06:	e000      	b.n	800fb0a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3718      	adds	r7, #24
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b082      	sub	sp, #8
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb1a:	2340      	movs	r3, #64	; 0x40
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	2100      	movs	r1, #0
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f006 fe30 	bl	8016786 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2201      	movs	r2, #1
 800fb2a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2240      	movs	r2, #64	; 0x40
 800fb32:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb36:	2340      	movs	r3, #64	; 0x40
 800fb38:	2200      	movs	r2, #0
 800fb3a:	2180      	movs	r1, #128	; 0x80
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f006 fe22 	bl	8016786 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2201      	movs	r2, #1
 800fb46:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2240      	movs	r2, #64	; 0x40
 800fb4c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2201      	movs	r2, #1
 800fb52:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d009      	beq.n	800fb8a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	687a      	ldr	r2, [r7, #4]
 800fb80:	6852      	ldr	r2, [r2, #4]
 800fb82:	b2d2      	uxtb	r2, r2
 800fb84:	4611      	mov	r1, r2
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	4798      	blx	r3
  }

  return USBD_OK;
 800fb8a:	2300      	movs	r3, #0
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b083      	sub	sp, #12
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	78fa      	ldrb	r2, [r7, #3]
 800fba4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800fba6:	2300      	movs	r3, #0
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	370c      	adds	r7, #12
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr

0800fbb4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2204      	movs	r2, #4
 800fbcc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800fbd0:	2300      	movs	r3, #0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	370c      	adds	r7, #12
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbdc:	4770      	bx	lr

0800fbde <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800fbde:	b480      	push	{r7}
 800fbe0:	b083      	sub	sp, #12
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	370c      	adds	r7, #12
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr

0800fc00 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fc0e:	2b03      	cmp	r3, #3
 800fc10:	d10b      	bne.n	800fc2a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fc18:	69db      	ldr	r3, [r3, #28]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d005      	beq.n	800fc2a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fc24:	69db      	ldr	r3, [r3, #28]
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800fc2a:	2300      	movs	r3, #0
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3708      	adds	r7, #8
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800fc40:	2300      	movs	r3, #0
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	370c      	adds	r7, #12
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr

0800fc4e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800fc4e:	b480      	push	{r7}
 800fc50:	b083      	sub	sp, #12
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
 800fc56:	460b      	mov	r3, r1
 800fc58:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800fc5a:	2300      	movs	r3, #0
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc70:	2300      	movs	r3, #0
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	370c      	adds	r7, #12
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr

0800fc7e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b082      	sub	sp, #8
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2201      	movs	r2, #1
 800fc8a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	6852      	ldr	r2, [r2, #4]
 800fc9a:	b2d2      	uxtb	r2, r2
 800fc9c:	4611      	mov	r1, r2
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	4798      	blx	r3

  return USBD_OK;
 800fca2:	2300      	movs	r3, #0
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3708      	adds	r7, #8
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fcc2:	2b20      	cmp	r3, #32
 800fcc4:	d004      	beq.n	800fcd0 <USBD_StdDevReq+0x24>
 800fcc6:	2b40      	cmp	r3, #64	; 0x40
 800fcc8:	d002      	beq.n	800fcd0 <USBD_StdDevReq+0x24>
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d008      	beq.n	800fce0 <USBD_StdDevReq+0x34>
 800fcce:	e04c      	b.n	800fd6a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fcd6:	689b      	ldr	r3, [r3, #8]
 800fcd8:	6839      	ldr	r1, [r7, #0]
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	4798      	blx	r3
    break;
 800fcde:	e049      	b.n	800fd74 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	785b      	ldrb	r3, [r3, #1]
 800fce4:	2b09      	cmp	r3, #9
 800fce6:	d83a      	bhi.n	800fd5e <USBD_StdDevReq+0xb2>
 800fce8:	a201      	add	r2, pc, #4	; (adr r2, 800fcf0 <USBD_StdDevReq+0x44>)
 800fcea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcee:	bf00      	nop
 800fcf0:	0800fd41 	.word	0x0800fd41
 800fcf4:	0800fd55 	.word	0x0800fd55
 800fcf8:	0800fd5f 	.word	0x0800fd5f
 800fcfc:	0800fd4b 	.word	0x0800fd4b
 800fd00:	0800fd5f 	.word	0x0800fd5f
 800fd04:	0800fd23 	.word	0x0800fd23
 800fd08:	0800fd19 	.word	0x0800fd19
 800fd0c:	0800fd5f 	.word	0x0800fd5f
 800fd10:	0800fd37 	.word	0x0800fd37
 800fd14:	0800fd2d 	.word	0x0800fd2d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800fd18:	6839      	ldr	r1, [r7, #0]
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f000 f9d2 	bl	80100c4 <USBD_GetDescriptor>
      break;
 800fd20:	e022      	b.n	800fd68 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800fd22:	6839      	ldr	r1, [r7, #0]
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f000 fac7 	bl	80102b8 <USBD_SetAddress>
      break;
 800fd2a:	e01d      	b.n	800fd68 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800fd2c:	6839      	ldr	r1, [r7, #0]
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 fb04 	bl	801033c <USBD_SetConfig>
      break;
 800fd34:	e018      	b.n	800fd68 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800fd36:	6839      	ldr	r1, [r7, #0]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 fb8d 	bl	8010458 <USBD_GetConfig>
      break;
 800fd3e:	e013      	b.n	800fd68 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800fd40:	6839      	ldr	r1, [r7, #0]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 fbbc 	bl	80104c0 <USBD_GetStatus>
      break;
 800fd48:	e00e      	b.n	800fd68 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800fd4a:	6839      	ldr	r1, [r7, #0]
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 fbea 	bl	8010526 <USBD_SetFeature>
      break;
 800fd52:	e009      	b.n	800fd68 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800fd54:	6839      	ldr	r1, [r7, #0]
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 fbf9 	bl	801054e <USBD_ClrFeature>
      break;
 800fd5c:	e004      	b.n	800fd68 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800fd5e:	6839      	ldr	r1, [r7, #0]
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 fc52 	bl	801060a <USBD_CtlError>
      break;
 800fd66:	bf00      	nop
    }
    break;
 800fd68:	e004      	b.n	800fd74 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800fd6a:	6839      	ldr	r1, [r7, #0]
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 fc4c 	bl	801060a <USBD_CtlError>
    break;
 800fd72:	bf00      	nop
  }

  return ret;
 800fd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3710      	adds	r7, #16
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop

0800fd80 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd96:	2b20      	cmp	r3, #32
 800fd98:	d003      	beq.n	800fda2 <USBD_StdItfReq+0x22>
 800fd9a:	2b40      	cmp	r3, #64	; 0x40
 800fd9c:	d001      	beq.n	800fda2 <USBD_StdItfReq+0x22>
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d12a      	bne.n	800fdf8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fda8:	3b01      	subs	r3, #1
 800fdaa:	2b02      	cmp	r3, #2
 800fdac:	d81d      	bhi.n	800fdea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	889b      	ldrh	r3, [r3, #4]
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d813      	bhi.n	800fde0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	6839      	ldr	r1, [r7, #0]
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	4798      	blx	r3
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	88db      	ldrh	r3, [r3, #6]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d110      	bne.n	800fdf4 <USBD_StdItfReq+0x74>
 800fdd2:	7bfb      	ldrb	r3, [r7, #15]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d10d      	bne.n	800fdf4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f000 fcdf 	bl	801079c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800fdde:	e009      	b.n	800fdf4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800fde0:	6839      	ldr	r1, [r7, #0]
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 fc11 	bl	801060a <USBD_CtlError>
      break;
 800fde8:	e004      	b.n	800fdf4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800fdea:	6839      	ldr	r1, [r7, #0]
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 fc0c 	bl	801060a <USBD_CtlError>
      break;
 800fdf2:	e000      	b.n	800fdf6 <USBD_StdItfReq+0x76>
      break;
 800fdf4:	bf00      	nop
    }
    break;
 800fdf6:	e004      	b.n	800fe02 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800fdf8:	6839      	ldr	r1, [r7, #0]
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 fc05 	bl	801060a <USBD_CtlError>
    break;
 800fe00:	bf00      	nop
  }

  return USBD_OK;
 800fe02:	2300      	movs	r3, #0
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3710      	adds	r7, #16
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fe16:	2300      	movs	r3, #0
 800fe18:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	889b      	ldrh	r3, [r3, #4]
 800fe1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe28:	2b20      	cmp	r3, #32
 800fe2a:	d004      	beq.n	800fe36 <USBD_StdEPReq+0x2a>
 800fe2c:	2b40      	cmp	r3, #64	; 0x40
 800fe2e:	d002      	beq.n	800fe36 <USBD_StdEPReq+0x2a>
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d008      	beq.n	800fe46 <USBD_StdEPReq+0x3a>
 800fe34:	e13b      	b.n	80100ae <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe3c:	689b      	ldr	r3, [r3, #8]
 800fe3e:	6839      	ldr	r1, [r7, #0]
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	4798      	blx	r3
    break;
 800fe44:	e138      	b.n	80100b8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe4e:	2b20      	cmp	r3, #32
 800fe50:	d10a      	bne.n	800fe68 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	6839      	ldr	r1, [r7, #0]
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	4798      	blx	r3
 800fe60:	4603      	mov	r3, r0
 800fe62:	73fb      	strb	r3, [r7, #15]

      return ret;
 800fe64:	7bfb      	ldrb	r3, [r7, #15]
 800fe66:	e128      	b.n	80100ba <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	785b      	ldrb	r3, [r3, #1]
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d03e      	beq.n	800feee <USBD_StdEPReq+0xe2>
 800fe70:	2b03      	cmp	r3, #3
 800fe72:	d002      	beq.n	800fe7a <USBD_StdEPReq+0x6e>
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d070      	beq.n	800ff5a <USBD_StdEPReq+0x14e>
 800fe78:	e113      	b.n	80100a2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fe80:	2b02      	cmp	r3, #2
 800fe82:	d002      	beq.n	800fe8a <USBD_StdEPReq+0x7e>
 800fe84:	2b03      	cmp	r3, #3
 800fe86:	d015      	beq.n	800feb4 <USBD_StdEPReq+0xa8>
 800fe88:	e02b      	b.n	800fee2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe8a:	7bbb      	ldrb	r3, [r7, #14]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d00c      	beq.n	800feaa <USBD_StdEPReq+0x9e>
 800fe90:	7bbb      	ldrb	r3, [r7, #14]
 800fe92:	2b80      	cmp	r3, #128	; 0x80
 800fe94:	d009      	beq.n	800feaa <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800fe96:	7bbb      	ldrb	r3, [r7, #14]
 800fe98:	4619      	mov	r1, r3
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f006 fcb8 	bl	8016810 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800fea0:	2180      	movs	r1, #128	; 0x80
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f006 fcb4 	bl	8016810 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fea8:	e020      	b.n	800feec <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800feaa:	6839      	ldr	r1, [r7, #0]
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 fbac 	bl	801060a <USBD_CtlError>
        break;
 800feb2:	e01b      	b.n	800feec <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	885b      	ldrh	r3, [r3, #2]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d10e      	bne.n	800feda <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800febc:	7bbb      	ldrb	r3, [r7, #14]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d00b      	beq.n	800feda <USBD_StdEPReq+0xce>
 800fec2:	7bbb      	ldrb	r3, [r7, #14]
 800fec4:	2b80      	cmp	r3, #128	; 0x80
 800fec6:	d008      	beq.n	800feda <USBD_StdEPReq+0xce>
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	88db      	ldrh	r3, [r3, #6]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d104      	bne.n	800feda <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800fed0:	7bbb      	ldrb	r3, [r7, #14]
 800fed2:	4619      	mov	r1, r3
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f006 fc9b 	bl	8016810 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f000 fc5e 	bl	801079c <USBD_CtlSendStatus>

        break;
 800fee0:	e004      	b.n	800feec <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800fee2:	6839      	ldr	r1, [r7, #0]
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 fb90 	bl	801060a <USBD_CtlError>
        break;
 800feea:	bf00      	nop
      }
      break;
 800feec:	e0de      	b.n	80100ac <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fef4:	2b02      	cmp	r3, #2
 800fef6:	d002      	beq.n	800fefe <USBD_StdEPReq+0xf2>
 800fef8:	2b03      	cmp	r3, #3
 800fefa:	d015      	beq.n	800ff28 <USBD_StdEPReq+0x11c>
 800fefc:	e026      	b.n	800ff4c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fefe:	7bbb      	ldrb	r3, [r7, #14]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d00c      	beq.n	800ff1e <USBD_StdEPReq+0x112>
 800ff04:	7bbb      	ldrb	r3, [r7, #14]
 800ff06:	2b80      	cmp	r3, #128	; 0x80
 800ff08:	d009      	beq.n	800ff1e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ff0a:	7bbb      	ldrb	r3, [r7, #14]
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f006 fc7e 	bl	8016810 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ff14:	2180      	movs	r1, #128	; 0x80
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f006 fc7a 	bl	8016810 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ff1c:	e01c      	b.n	800ff58 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800ff1e:	6839      	ldr	r1, [r7, #0]
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 fb72 	bl	801060a <USBD_CtlError>
        break;
 800ff26:	e017      	b.n	800ff58 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	885b      	ldrh	r3, [r3, #2]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d112      	bne.n	800ff56 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ff30:	7bbb      	ldrb	r3, [r7, #14]
 800ff32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d004      	beq.n	800ff44 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800ff3a:	7bbb      	ldrb	r3, [r7, #14]
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f006 fc85 	bl	801684e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f000 fc29 	bl	801079c <USBD_CtlSendStatus>
        }
        break;
 800ff4a:	e004      	b.n	800ff56 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800ff4c:	6839      	ldr	r1, [r7, #0]
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 fb5b 	bl	801060a <USBD_CtlError>
        break;
 800ff54:	e000      	b.n	800ff58 <USBD_StdEPReq+0x14c>
        break;
 800ff56:	bf00      	nop
      }
      break;
 800ff58:	e0a8      	b.n	80100ac <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ff60:	2b02      	cmp	r3, #2
 800ff62:	d002      	beq.n	800ff6a <USBD_StdEPReq+0x15e>
 800ff64:	2b03      	cmp	r3, #3
 800ff66:	d031      	beq.n	800ffcc <USBD_StdEPReq+0x1c0>
 800ff68:	e095      	b.n	8010096 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff6a:	7bbb      	ldrb	r3, [r7, #14]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d007      	beq.n	800ff80 <USBD_StdEPReq+0x174>
 800ff70:	7bbb      	ldrb	r3, [r7, #14]
 800ff72:	2b80      	cmp	r3, #128	; 0x80
 800ff74:	d004      	beq.n	800ff80 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800ff76:	6839      	ldr	r1, [r7, #0]
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 fb46 	bl	801060a <USBD_CtlError>
          break;
 800ff7e:	e08f      	b.n	80100a0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ff80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	da0b      	bge.n	800ffa0 <USBD_StdEPReq+0x194>
 800ff88:	7bbb      	ldrb	r3, [r7, #14]
 800ff8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff8e:	4613      	mov	r3, r2
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	4413      	add	r3, r2
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	3310      	adds	r3, #16
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	4413      	add	r3, r2
 800ff9c:	3304      	adds	r3, #4
 800ff9e:	e00a      	b.n	800ffb6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ffa0:	7bbb      	ldrb	r3, [r7, #14]
 800ffa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	009b      	lsls	r3, r3, #2
 800ffaa:	4413      	add	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	2202      	movs	r2, #2
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 fb8b 	bl	80106e0 <USBD_CtlSendData>
          break;
 800ffca:	e069      	b.n	80100a0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800ffcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	da11      	bge.n	800fff8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ffd4:	7bbb      	ldrb	r3, [r7, #14]
 800ffd6:	f003 020f 	and.w	r2, r3, #15
 800ffda:	6879      	ldr	r1, [r7, #4]
 800ffdc:	4613      	mov	r3, r2
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	4413      	add	r3, r2
 800ffe2:	009b      	lsls	r3, r3, #2
 800ffe4:	440b      	add	r3, r1
 800ffe6:	3318      	adds	r3, #24
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d117      	bne.n	801001e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ffee:	6839      	ldr	r1, [r7, #0]
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 fb0a 	bl	801060a <USBD_CtlError>
            break;
 800fff6:	e053      	b.n	80100a0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fff8:	7bbb      	ldrb	r3, [r7, #14]
 800fffa:	f003 020f 	and.w	r2, r3, #15
 800fffe:	6879      	ldr	r1, [r7, #4]
 8010000:	4613      	mov	r3, r2
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	4413      	add	r3, r2
 8010006:	009b      	lsls	r3, r3, #2
 8010008:	440b      	add	r3, r1
 801000a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d104      	bne.n	801001e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8010014:	6839      	ldr	r1, [r7, #0]
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f000 faf7 	bl	801060a <USBD_CtlError>
            break;
 801001c:	e040      	b.n	80100a0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801001e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010022:	2b00      	cmp	r3, #0
 8010024:	da0b      	bge.n	801003e <USBD_StdEPReq+0x232>
 8010026:	7bbb      	ldrb	r3, [r7, #14]
 8010028:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801002c:	4613      	mov	r3, r2
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	4413      	add	r3, r2
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	3310      	adds	r3, #16
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	4413      	add	r3, r2
 801003a:	3304      	adds	r3, #4
 801003c:	e00a      	b.n	8010054 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 801003e:	7bbb      	ldrb	r3, [r7, #14]
 8010040:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010044:	4613      	mov	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4413      	add	r3, r2
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	4413      	add	r3, r2
 8010054:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010056:	7bbb      	ldrb	r3, [r7, #14]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d002      	beq.n	8010062 <USBD_StdEPReq+0x256>
 801005c:	7bbb      	ldrb	r3, [r7, #14]
 801005e:	2b80      	cmp	r3, #128	; 0x80
 8010060:	d103      	bne.n	801006a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	2200      	movs	r2, #0
 8010066:	601a      	str	r2, [r3, #0]
 8010068:	e00e      	b.n	8010088 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 801006a:	7bbb      	ldrb	r3, [r7, #14]
 801006c:	4619      	mov	r1, r3
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f006 fc0c 	bl	801688c <USBD_LL_IsStallEP>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d003      	beq.n	8010082 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	2201      	movs	r2, #1
 801007e:	601a      	str	r2, [r3, #0]
 8010080:	e002      	b.n	8010088 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	2200      	movs	r2, #0
 8010086:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	2202      	movs	r2, #2
 801008c:	4619      	mov	r1, r3
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f000 fb26 	bl	80106e0 <USBD_CtlSendData>
          break;
 8010094:	e004      	b.n	80100a0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8010096:	6839      	ldr	r1, [r7, #0]
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f000 fab6 	bl	801060a <USBD_CtlError>
        break;
 801009e:	bf00      	nop
      }
      break;
 80100a0:	e004      	b.n	80100ac <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 fab0 	bl	801060a <USBD_CtlError>
      break;
 80100aa:	bf00      	nop
    }
    break;
 80100ac:	e004      	b.n	80100b8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80100ae:	6839      	ldr	r1, [r7, #0]
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 faaa 	bl	801060a <USBD_CtlError>
    break;
 80100b6:	bf00      	nop
  }

  return ret;
 80100b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3710      	adds	r7, #16
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
	...

080100c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	885b      	ldrh	r3, [r3, #2]
 80100d2:	0a1b      	lsrs	r3, r3, #8
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	3b01      	subs	r3, #1
 80100d8:	2b06      	cmp	r3, #6
 80100da:	f200 80c9 	bhi.w	8010270 <USBD_GetDescriptor+0x1ac>
 80100de:	a201      	add	r2, pc, #4	; (adr r2, 80100e4 <USBD_GetDescriptor+0x20>)
 80100e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e4:	08010101 	.word	0x08010101
 80100e8:	08010119 	.word	0x08010119
 80100ec:	08010159 	.word	0x08010159
 80100f0:	08010271 	.word	0x08010271
 80100f4:	08010271 	.word	0x08010271
 80100f8:	0801021d 	.word	0x0801021d
 80100fc:	08010243 	.word	0x08010243
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	7c12      	ldrb	r2, [r2, #16]
 801010c:	f107 010a 	add.w	r1, r7, #10
 8010110:	4610      	mov	r0, r2
 8010112:	4798      	blx	r3
 8010114:	60f8      	str	r0, [r7, #12]
    break;
 8010116:	e0b0      	b.n	801027a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	7c1b      	ldrb	r3, [r3, #16]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d10d      	bne.n	801013c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010128:	f107 020a 	add.w	r2, r7, #10
 801012c:	4610      	mov	r0, r2
 801012e:	4798      	blx	r3
 8010130:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	3301      	adds	r3, #1
 8010136:	2202      	movs	r2, #2
 8010138:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 801013a:	e09e      	b.n	801027a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010144:	f107 020a 	add.w	r2, r7, #10
 8010148:	4610      	mov	r0, r2
 801014a:	4798      	blx	r3
 801014c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	3301      	adds	r3, #1
 8010152:	2202      	movs	r2, #2
 8010154:	701a      	strb	r2, [r3, #0]
    break;
 8010156:	e090      	b.n	801027a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	885b      	ldrh	r3, [r3, #2]
 801015c:	b2db      	uxtb	r3, r3
 801015e:	2b05      	cmp	r3, #5
 8010160:	d856      	bhi.n	8010210 <USBD_GetDescriptor+0x14c>
 8010162:	a201      	add	r2, pc, #4	; (adr r2, 8010168 <USBD_GetDescriptor+0xa4>)
 8010164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010168:	08010181 	.word	0x08010181
 801016c:	08010199 	.word	0x08010199
 8010170:	080101b1 	.word	0x080101b1
 8010174:	080101c9 	.word	0x080101c9
 8010178:	080101e1 	.word	0x080101e1
 801017c:	080101f9 	.word	0x080101f9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	7c12      	ldrb	r2, [r2, #16]
 801018c:	f107 010a 	add.w	r1, r7, #10
 8010190:	4610      	mov	r0, r2
 8010192:	4798      	blx	r3
 8010194:	60f8      	str	r0, [r7, #12]
      break;
 8010196:	e040      	b.n	801021a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801019e:	689b      	ldr	r3, [r3, #8]
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	7c12      	ldrb	r2, [r2, #16]
 80101a4:	f107 010a 	add.w	r1, r7, #10
 80101a8:	4610      	mov	r0, r2
 80101aa:	4798      	blx	r3
 80101ac:	60f8      	str	r0, [r7, #12]
      break;
 80101ae:	e034      	b.n	801021a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80101b6:	68db      	ldr	r3, [r3, #12]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	7c12      	ldrb	r2, [r2, #16]
 80101bc:	f107 010a 	add.w	r1, r7, #10
 80101c0:	4610      	mov	r0, r2
 80101c2:	4798      	blx	r3
 80101c4:	60f8      	str	r0, [r7, #12]
      break;
 80101c6:	e028      	b.n	801021a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80101ce:	691b      	ldr	r3, [r3, #16]
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	7c12      	ldrb	r2, [r2, #16]
 80101d4:	f107 010a 	add.w	r1, r7, #10
 80101d8:	4610      	mov	r0, r2
 80101da:	4798      	blx	r3
 80101dc:	60f8      	str	r0, [r7, #12]
      break;
 80101de:	e01c      	b.n	801021a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80101e6:	695b      	ldr	r3, [r3, #20]
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	7c12      	ldrb	r2, [r2, #16]
 80101ec:	f107 010a 	add.w	r1, r7, #10
 80101f0:	4610      	mov	r0, r2
 80101f2:	4798      	blx	r3
 80101f4:	60f8      	str	r0, [r7, #12]
      break;
 80101f6:	e010      	b.n	801021a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80101fe:	699b      	ldr	r3, [r3, #24]
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	7c12      	ldrb	r2, [r2, #16]
 8010204:	f107 010a 	add.w	r1, r7, #10
 8010208:	4610      	mov	r0, r2
 801020a:	4798      	blx	r3
 801020c:	60f8      	str	r0, [r7, #12]
      break;
 801020e:	e004      	b.n	801021a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8010210:	6839      	ldr	r1, [r7, #0]
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f000 f9f9 	bl	801060a <USBD_CtlError>
      return;
 8010218:	e04b      	b.n	80102b2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 801021a:	e02e      	b.n	801027a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	7c1b      	ldrb	r3, [r3, #16]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d109      	bne.n	8010238 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801022a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801022c:	f107 020a 	add.w	r2, r7, #10
 8010230:	4610      	mov	r0, r2
 8010232:	4798      	blx	r3
 8010234:	60f8      	str	r0, [r7, #12]
      break;
 8010236:	e020      	b.n	801027a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010238:	6839      	ldr	r1, [r7, #0]
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f000 f9e5 	bl	801060a <USBD_CtlError>
      return;
 8010240:	e037      	b.n	80102b2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	7c1b      	ldrb	r3, [r3, #16]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d10d      	bne.n	8010266 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010252:	f107 020a 	add.w	r2, r7, #10
 8010256:	4610      	mov	r0, r2
 8010258:	4798      	blx	r3
 801025a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	3301      	adds	r3, #1
 8010260:	2207      	movs	r2, #7
 8010262:	701a      	strb	r2, [r3, #0]
      break;
 8010264:	e009      	b.n	801027a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010266:	6839      	ldr	r1, [r7, #0]
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 f9ce 	bl	801060a <USBD_CtlError>
      return;
 801026e:	e020      	b.n	80102b2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8010270:	6839      	ldr	r1, [r7, #0]
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 f9c9 	bl	801060a <USBD_CtlError>
    return;
 8010278:	e01b      	b.n	80102b2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 801027a:	897b      	ldrh	r3, [r7, #10]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d011      	beq.n	80102a4 <USBD_GetDescriptor+0x1e0>
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	88db      	ldrh	r3, [r3, #6]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d00d      	beq.n	80102a4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	88da      	ldrh	r2, [r3, #6]
 801028c:	897b      	ldrh	r3, [r7, #10]
 801028e:	4293      	cmp	r3, r2
 8010290:	bf28      	it	cs
 8010292:	4613      	movcs	r3, r2
 8010294:	b29b      	uxth	r3, r3
 8010296:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8010298:	897b      	ldrh	r3, [r7, #10]
 801029a:	461a      	mov	r2, r3
 801029c:	68f9      	ldr	r1, [r7, #12]
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f000 fa1e 	bl	80106e0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	88db      	ldrh	r3, [r3, #6]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d102      	bne.n	80102b2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f000 fa75 	bl	801079c <USBD_CtlSendStatus>
  }
}
 80102b2:	3710      	adds	r7, #16
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	889b      	ldrh	r3, [r3, #4]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d130      	bne.n	801032c <USBD_SetAddress+0x74>
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	88db      	ldrh	r3, [r3, #6]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d12c      	bne.n	801032c <USBD_SetAddress+0x74>
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	885b      	ldrh	r3, [r3, #2]
 80102d6:	2b7f      	cmp	r3, #127	; 0x7f
 80102d8:	d828      	bhi.n	801032c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	885b      	ldrh	r3, [r3, #2]
 80102de:	b2db      	uxtb	r3, r3
 80102e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80102ec:	2b03      	cmp	r3, #3
 80102ee:	d104      	bne.n	80102fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80102f0:	6839      	ldr	r1, [r7, #0]
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f000 f989 	bl	801060a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102f8:	e01c      	b.n	8010334 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	7bfa      	ldrb	r2, [r7, #15]
 80102fe:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010302:	7bfb      	ldrb	r3, [r7, #15]
 8010304:	4619      	mov	r1, r3
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f006 faec 	bl	80168e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 fa45 	bl	801079c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010312:	7bfb      	ldrb	r3, [r7, #15]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d004      	beq.n	8010322 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2202      	movs	r2, #2
 801031c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010320:	e008      	b.n	8010334 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2201      	movs	r2, #1
 8010326:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801032a:	e003      	b.n	8010334 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801032c:	6839      	ldr	r1, [r7, #0]
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 f96b 	bl	801060a <USBD_CtlError>
  }
}
 8010334:	bf00      	nop
 8010336:	3710      	adds	r7, #16
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	885b      	ldrh	r3, [r3, #2]
 801034a:	b2da      	uxtb	r2, r3
 801034c:	4b41      	ldr	r3, [pc, #260]	; (8010454 <USBD_SetConfig+0x118>)
 801034e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010350:	4b40      	ldr	r3, [pc, #256]	; (8010454 <USBD_SetConfig+0x118>)
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	2b01      	cmp	r3, #1
 8010356:	d904      	bls.n	8010362 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010358:	6839      	ldr	r1, [r7, #0]
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f000 f955 	bl	801060a <USBD_CtlError>
 8010360:	e075      	b.n	801044e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010368:	2b02      	cmp	r3, #2
 801036a:	d002      	beq.n	8010372 <USBD_SetConfig+0x36>
 801036c:	2b03      	cmp	r3, #3
 801036e:	d023      	beq.n	80103b8 <USBD_SetConfig+0x7c>
 8010370:	e062      	b.n	8010438 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8010372:	4b38      	ldr	r3, [pc, #224]	; (8010454 <USBD_SetConfig+0x118>)
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d01a      	beq.n	80103b0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 801037a:	4b36      	ldr	r3, [pc, #216]	; (8010454 <USBD_SetConfig+0x118>)
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	461a      	mov	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2203      	movs	r2, #3
 8010388:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801038c:	4b31      	ldr	r3, [pc, #196]	; (8010454 <USBD_SetConfig+0x118>)
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	4619      	mov	r1, r3
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f7ff fa2a 	bl	800f7ec <USBD_SetClassConfig>
 8010398:	4603      	mov	r3, r0
 801039a:	2b02      	cmp	r3, #2
 801039c:	d104      	bne.n	80103a8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 801039e:	6839      	ldr	r1, [r7, #0]
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 f932 	bl	801060a <USBD_CtlError>
          return;
 80103a6:	e052      	b.n	801044e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 f9f7 	bl	801079c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80103ae:	e04e      	b.n	801044e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f000 f9f3 	bl	801079c <USBD_CtlSendStatus>
      break;
 80103b6:	e04a      	b.n	801044e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80103b8:	4b26      	ldr	r3, [pc, #152]	; (8010454 <USBD_SetConfig+0x118>)
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d112      	bne.n	80103e6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2202      	movs	r2, #2
 80103c4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80103c8:	4b22      	ldr	r3, [pc, #136]	; (8010454 <USBD_SetConfig+0x118>)
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	461a      	mov	r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80103d2:	4b20      	ldr	r3, [pc, #128]	; (8010454 <USBD_SetConfig+0x118>)
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	4619      	mov	r1, r3
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7ff fa26 	bl	800f82a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 f9dc 	bl	801079c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80103e4:	e033      	b.n	801044e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80103e6:	4b1b      	ldr	r3, [pc, #108]	; (8010454 <USBD_SetConfig+0x118>)
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	461a      	mov	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d01d      	beq.n	8010430 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	4619      	mov	r1, r3
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7ff fa14 	bl	800f82a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010402:	4b14      	ldr	r3, [pc, #80]	; (8010454 <USBD_SetConfig+0x118>)
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	461a      	mov	r2, r3
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801040c:	4b11      	ldr	r3, [pc, #68]	; (8010454 <USBD_SetConfig+0x118>)
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	4619      	mov	r1, r3
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f7ff f9ea 	bl	800f7ec <USBD_SetClassConfig>
 8010418:	4603      	mov	r3, r0
 801041a:	2b02      	cmp	r3, #2
 801041c:	d104      	bne.n	8010428 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 801041e:	6839      	ldr	r1, [r7, #0]
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 f8f2 	bl	801060a <USBD_CtlError>
          return;
 8010426:	e012      	b.n	801044e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 f9b7 	bl	801079c <USBD_CtlSendStatus>
      break;
 801042e:	e00e      	b.n	801044e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f000 f9b3 	bl	801079c <USBD_CtlSendStatus>
      break;
 8010436:	e00a      	b.n	801044e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8010438:	6839      	ldr	r1, [r7, #0]
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f000 f8e5 	bl	801060a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8010440:	4b04      	ldr	r3, [pc, #16]	; (8010454 <USBD_SetConfig+0x118>)
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	4619      	mov	r1, r3
 8010446:	6878      	ldr	r0, [r7, #4]
 8010448:	f7ff f9ef 	bl	800f82a <USBD_ClrClassConfig>
      break;
 801044c:	bf00      	nop
    }
  }
}
 801044e:	3708      	adds	r7, #8
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}
 8010454:	200005ac 	.word	0x200005ac

08010458 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	88db      	ldrh	r3, [r3, #6]
 8010466:	2b01      	cmp	r3, #1
 8010468:	d004      	beq.n	8010474 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 801046a:	6839      	ldr	r1, [r7, #0]
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f000 f8cc 	bl	801060a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8010472:	e021      	b.n	80104b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801047a:	2b01      	cmp	r3, #1
 801047c:	db17      	blt.n	80104ae <USBD_GetConfig+0x56>
 801047e:	2b02      	cmp	r3, #2
 8010480:	dd02      	ble.n	8010488 <USBD_GetConfig+0x30>
 8010482:	2b03      	cmp	r3, #3
 8010484:	d00b      	beq.n	801049e <USBD_GetConfig+0x46>
 8010486:	e012      	b.n	80104ae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2200      	movs	r2, #0
 801048c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	3308      	adds	r3, #8
 8010492:	2201      	movs	r2, #1
 8010494:	4619      	mov	r1, r3
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 f922 	bl	80106e0 <USBD_CtlSendData>
      break;
 801049c:	e00c      	b.n	80104b8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	3304      	adds	r3, #4
 80104a2:	2201      	movs	r2, #1
 80104a4:	4619      	mov	r1, r3
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f000 f91a 	bl	80106e0 <USBD_CtlSendData>
      break;
 80104ac:	e004      	b.n	80104b8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80104ae:	6839      	ldr	r1, [r7, #0]
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f000 f8aa 	bl	801060a <USBD_CtlError>
      break;
 80104b6:	bf00      	nop
}
 80104b8:	bf00      	nop
 80104ba:	3708      	adds	r7, #8
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80104d0:	3b01      	subs	r3, #1
 80104d2:	2b02      	cmp	r3, #2
 80104d4:	d81e      	bhi.n	8010514 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	88db      	ldrh	r3, [r3, #6]
 80104da:	2b02      	cmp	r3, #2
 80104dc:	d004      	beq.n	80104e8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80104de:	6839      	ldr	r1, [r7, #0]
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 f892 	bl	801060a <USBD_CtlError>
      break;
 80104e6:	e01a      	b.n	801051e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2201      	movs	r2, #1
 80104ec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d005      	beq.n	8010504 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	f043 0202 	orr.w	r2, r3, #2
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	330c      	adds	r3, #12
 8010508:	2202      	movs	r2, #2
 801050a:	4619      	mov	r1, r3
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 f8e7 	bl	80106e0 <USBD_CtlSendData>
    break;
 8010512:	e004      	b.n	801051e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8010514:	6839      	ldr	r1, [r7, #0]
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f000 f877 	bl	801060a <USBD_CtlError>
    break;
 801051c:	bf00      	nop
  }
}
 801051e:	bf00      	nop
 8010520:	3708      	adds	r7, #8
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b082      	sub	sp, #8
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
 801052e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	885b      	ldrh	r3, [r3, #2]
 8010534:	2b01      	cmp	r3, #1
 8010536:	d106      	bne.n	8010546 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2201      	movs	r2, #1
 801053c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 f92b 	bl	801079c <USBD_CtlSendStatus>
  }

}
 8010546:	bf00      	nop
 8010548:	3708      	adds	r7, #8
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}

0801054e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801054e:	b580      	push	{r7, lr}
 8010550:	b082      	sub	sp, #8
 8010552:	af00      	add	r7, sp, #0
 8010554:	6078      	str	r0, [r7, #4]
 8010556:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801055e:	3b01      	subs	r3, #1
 8010560:	2b02      	cmp	r3, #2
 8010562:	d80b      	bhi.n	801057c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	885b      	ldrh	r3, [r3, #2]
 8010568:	2b01      	cmp	r3, #1
 801056a:	d10c      	bne.n	8010586 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2200      	movs	r2, #0
 8010570:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f000 f911 	bl	801079c <USBD_CtlSendStatus>
    }
    break;
 801057a:	e004      	b.n	8010586 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 801057c:	6839      	ldr	r1, [r7, #0]
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 f843 	bl	801060a <USBD_CtlError>
    break;
 8010584:	e000      	b.n	8010588 <USBD_ClrFeature+0x3a>
    break;
 8010586:	bf00      	nop
  }
}
 8010588:	bf00      	nop
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	781a      	ldrb	r2, [r3, #0]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	785a      	ldrb	r2, [r3, #1]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	3302      	adds	r3, #2
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	3303      	adds	r3, #3
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	b29b      	uxth	r3, r3
 80105ba:	021b      	lsls	r3, r3, #8
 80105bc:	b29b      	uxth	r3, r3
 80105be:	4413      	add	r3, r2
 80105c0:	b29a      	uxth	r2, r3
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	3304      	adds	r3, #4
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	3305      	adds	r3, #5
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	021b      	lsls	r3, r3, #8
 80105d8:	b29b      	uxth	r3, r3
 80105da:	4413      	add	r3, r2
 80105dc:	b29a      	uxth	r2, r3
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	3306      	adds	r3, #6
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	b29a      	uxth	r2, r3
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	3307      	adds	r3, #7
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	021b      	lsls	r3, r3, #8
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	4413      	add	r3, r2
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	80da      	strh	r2, [r3, #6]

}
 80105fe:	bf00      	nop
 8010600:	370c      	adds	r7, #12
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr

0801060a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801060a:	b580      	push	{r7, lr}
 801060c:	b082      	sub	sp, #8
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
 8010612:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8010614:	2180      	movs	r1, #128	; 0x80
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f006 f8fa 	bl	8016810 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 801061c:	2100      	movs	r1, #0
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f006 f8f6 	bl	8016810 <USBD_LL_StallEP>
}
 8010624:	bf00      	nop
 8010626:	3708      	adds	r7, #8
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}

0801062c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b086      	sub	sp, #24
 8010630:	af00      	add	r7, sp, #0
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	60b9      	str	r1, [r7, #8]
 8010636:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010638:	2300      	movs	r3, #0
 801063a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d032      	beq.n	80106a8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010642:	68f8      	ldr	r0, [r7, #12]
 8010644:	f000 f834 	bl	80106b0 <USBD_GetLen>
 8010648:	4603      	mov	r3, r0
 801064a:	3301      	adds	r3, #1
 801064c:	b29b      	uxth	r3, r3
 801064e:	005b      	lsls	r3, r3, #1
 8010650:	b29a      	uxth	r2, r3
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010656:	7dfb      	ldrb	r3, [r7, #23]
 8010658:	1c5a      	adds	r2, r3, #1
 801065a:	75fa      	strb	r2, [r7, #23]
 801065c:	461a      	mov	r2, r3
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	4413      	add	r3, r2
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	7812      	ldrb	r2, [r2, #0]
 8010666:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010668:	7dfb      	ldrb	r3, [r7, #23]
 801066a:	1c5a      	adds	r2, r3, #1
 801066c:	75fa      	strb	r2, [r7, #23]
 801066e:	461a      	mov	r2, r3
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	4413      	add	r3, r2
 8010674:	2203      	movs	r2, #3
 8010676:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010678:	e012      	b.n	80106a0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	1c5a      	adds	r2, r3, #1
 801067e:	60fa      	str	r2, [r7, #12]
 8010680:	7dfa      	ldrb	r2, [r7, #23]
 8010682:	1c51      	adds	r1, r2, #1
 8010684:	75f9      	strb	r1, [r7, #23]
 8010686:	4611      	mov	r1, r2
 8010688:	68ba      	ldr	r2, [r7, #8]
 801068a:	440a      	add	r2, r1
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8010690:	7dfb      	ldrb	r3, [r7, #23]
 8010692:	1c5a      	adds	r2, r3, #1
 8010694:	75fa      	strb	r2, [r7, #23]
 8010696:	461a      	mov	r2, r3
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	4413      	add	r3, r2
 801069c:	2200      	movs	r2, #0
 801069e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d1e8      	bne.n	801067a <USBD_GetString+0x4e>
    }
  }
}
 80106a8:	bf00      	nop
 80106aa:	3718      	adds	r7, #24
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b085      	sub	sp, #20
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80106b8:	2300      	movs	r3, #0
 80106ba:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80106bc:	e005      	b.n	80106ca <USBD_GetLen+0x1a>
    {
        len++;
 80106be:	7bfb      	ldrb	r3, [r7, #15]
 80106c0:	3301      	adds	r3, #1
 80106c2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	3301      	adds	r3, #1
 80106c8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d1f5      	bne.n	80106be <USBD_GetLen+0xe>
    }

    return len;
 80106d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3714      	adds	r7, #20
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr

080106e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b084      	sub	sp, #16
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	60f8      	str	r0, [r7, #12]
 80106e8:	60b9      	str	r1, [r7, #8]
 80106ea:	4613      	mov	r3, r2
 80106ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	2202      	movs	r2, #2
 80106f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80106f6:	88fa      	ldrh	r2, [r7, #6]
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80106fc:	88fa      	ldrh	r2, [r7, #6]
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010702:	88fb      	ldrh	r3, [r7, #6]
 8010704:	68ba      	ldr	r2, [r7, #8]
 8010706:	2100      	movs	r1, #0
 8010708:	68f8      	ldr	r0, [r7, #12]
 801070a:	f006 f90a 	bl	8016922 <USBD_LL_Transmit>

  return USBD_OK;
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	3710      	adds	r7, #16
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	4613      	mov	r3, r2
 8010724:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010726:	88fb      	ldrh	r3, [r7, #6]
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	2100      	movs	r1, #0
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f006 f8f8 	bl	8016922 <USBD_LL_Transmit>

  return USBD_OK;
 8010732:	2300      	movs	r3, #0
}
 8010734:	4618      	mov	r0, r3
 8010736:	3710      	adds	r7, #16
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}

0801073c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	4613      	mov	r3, r2
 8010748:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2203      	movs	r2, #3
 801074e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8010752:	88fa      	ldrh	r2, [r7, #6]
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 801075a:	88fa      	ldrh	r2, [r7, #6]
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8010762:	88fb      	ldrh	r3, [r7, #6]
 8010764:	68ba      	ldr	r2, [r7, #8]
 8010766:	2100      	movs	r1, #0
 8010768:	68f8      	ldr	r0, [r7, #12]
 801076a:	f006 f8fd 	bl	8016968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	3710      	adds	r7, #16
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	4613      	mov	r3, r2
 8010784:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010786:	88fb      	ldrh	r3, [r7, #6]
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	2100      	movs	r1, #0
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	f006 f8eb 	bl	8016968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3710      	adds	r7, #16
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}

0801079c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2204      	movs	r2, #4
 80107a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80107ac:	2300      	movs	r3, #0
 80107ae:	2200      	movs	r2, #0
 80107b0:	2100      	movs	r1, #0
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f006 f8b5 	bl	8016922 <USBD_LL_Transmit>

  return USBD_OK;
 80107b8:	2300      	movs	r3, #0
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3708      	adds	r7, #8
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b082      	sub	sp, #8
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2205      	movs	r2, #5
 80107ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80107d2:	2300      	movs	r3, #0
 80107d4:	2200      	movs	r2, #0
 80107d6:	2100      	movs	r1, #0
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f006 f8c5 	bl	8016968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80107de:	2300      	movs	r3, #0
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3708      	adds	r7, #8
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	4603      	mov	r3, r0
 80107f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80107f2:	79fb      	ldrb	r3, [r7, #7]
 80107f4:	4a08      	ldr	r2, [pc, #32]	; (8010818 <disk_status+0x30>)
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	4413      	add	r3, r2
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	79fa      	ldrb	r2, [r7, #7]
 8010800:	4905      	ldr	r1, [pc, #20]	; (8010818 <disk_status+0x30>)
 8010802:	440a      	add	r2, r1
 8010804:	7a12      	ldrb	r2, [r2, #8]
 8010806:	4610      	mov	r0, r2
 8010808:	4798      	blx	r3
 801080a:	4603      	mov	r3, r0
 801080c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801080e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010810:	4618      	mov	r0, r3
 8010812:	3710      	adds	r7, #16
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	200005d8 	.word	0x200005d8

0801081c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b084      	sub	sp, #16
 8010820:	af00      	add	r7, sp, #0
 8010822:	4603      	mov	r3, r0
 8010824:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010826:	2300      	movs	r3, #0
 8010828:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801082a:	79fb      	ldrb	r3, [r7, #7]
 801082c:	4a0d      	ldr	r2, [pc, #52]	; (8010864 <disk_initialize+0x48>)
 801082e:	5cd3      	ldrb	r3, [r2, r3]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d111      	bne.n	8010858 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010834:	79fb      	ldrb	r3, [r7, #7]
 8010836:	4a0b      	ldr	r2, [pc, #44]	; (8010864 <disk_initialize+0x48>)
 8010838:	2101      	movs	r1, #1
 801083a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801083c:	79fb      	ldrb	r3, [r7, #7]
 801083e:	4a09      	ldr	r2, [pc, #36]	; (8010864 <disk_initialize+0x48>)
 8010840:	009b      	lsls	r3, r3, #2
 8010842:	4413      	add	r3, r2
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	79fa      	ldrb	r2, [r7, #7]
 801084a:	4906      	ldr	r1, [pc, #24]	; (8010864 <disk_initialize+0x48>)
 801084c:	440a      	add	r2, r1
 801084e:	7a12      	ldrb	r2, [r2, #8]
 8010850:	4610      	mov	r0, r2
 8010852:	4798      	blx	r3
 8010854:	4603      	mov	r3, r0
 8010856:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010858:	7bfb      	ldrb	r3, [r7, #15]
}
 801085a:	4618      	mov	r0, r3
 801085c:	3710      	adds	r7, #16
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	200005d8 	.word	0x200005d8

08010868 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010868:	b590      	push	{r4, r7, lr}
 801086a:	b087      	sub	sp, #28
 801086c:	af00      	add	r7, sp, #0
 801086e:	60b9      	str	r1, [r7, #8]
 8010870:	607a      	str	r2, [r7, #4]
 8010872:	603b      	str	r3, [r7, #0]
 8010874:	4603      	mov	r3, r0
 8010876:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010878:	7bfb      	ldrb	r3, [r7, #15]
 801087a:	4a0a      	ldr	r2, [pc, #40]	; (80108a4 <disk_read+0x3c>)
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	4413      	add	r3, r2
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	689c      	ldr	r4, [r3, #8]
 8010884:	7bfb      	ldrb	r3, [r7, #15]
 8010886:	4a07      	ldr	r2, [pc, #28]	; (80108a4 <disk_read+0x3c>)
 8010888:	4413      	add	r3, r2
 801088a:	7a18      	ldrb	r0, [r3, #8]
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	68b9      	ldr	r1, [r7, #8]
 8010892:	47a0      	blx	r4
 8010894:	4603      	mov	r3, r0
 8010896:	75fb      	strb	r3, [r7, #23]
  return res;
 8010898:	7dfb      	ldrb	r3, [r7, #23]
}
 801089a:	4618      	mov	r0, r3
 801089c:	371c      	adds	r7, #28
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd90      	pop	{r4, r7, pc}
 80108a2:	bf00      	nop
 80108a4:	200005d8 	.word	0x200005d8

080108a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80108a8:	b590      	push	{r4, r7, lr}
 80108aa:	b087      	sub	sp, #28
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	60b9      	str	r1, [r7, #8]
 80108b0:	607a      	str	r2, [r7, #4]
 80108b2:	603b      	str	r3, [r7, #0]
 80108b4:	4603      	mov	r3, r0
 80108b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80108b8:	7bfb      	ldrb	r3, [r7, #15]
 80108ba:	4a0a      	ldr	r2, [pc, #40]	; (80108e4 <disk_write+0x3c>)
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	4413      	add	r3, r2
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	68dc      	ldr	r4, [r3, #12]
 80108c4:	7bfb      	ldrb	r3, [r7, #15]
 80108c6:	4a07      	ldr	r2, [pc, #28]	; (80108e4 <disk_write+0x3c>)
 80108c8:	4413      	add	r3, r2
 80108ca:	7a18      	ldrb	r0, [r3, #8]
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	687a      	ldr	r2, [r7, #4]
 80108d0:	68b9      	ldr	r1, [r7, #8]
 80108d2:	47a0      	blx	r4
 80108d4:	4603      	mov	r3, r0
 80108d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80108d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80108da:	4618      	mov	r0, r3
 80108dc:	371c      	adds	r7, #28
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd90      	pop	{r4, r7, pc}
 80108e2:	bf00      	nop
 80108e4:	200005d8 	.word	0x200005d8

080108e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	4603      	mov	r3, r0
 80108f0:	603a      	str	r2, [r7, #0]
 80108f2:	71fb      	strb	r3, [r7, #7]
 80108f4:	460b      	mov	r3, r1
 80108f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80108f8:	79fb      	ldrb	r3, [r7, #7]
 80108fa:	4a09      	ldr	r2, [pc, #36]	; (8010920 <disk_ioctl+0x38>)
 80108fc:	009b      	lsls	r3, r3, #2
 80108fe:	4413      	add	r3, r2
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	691b      	ldr	r3, [r3, #16]
 8010904:	79fa      	ldrb	r2, [r7, #7]
 8010906:	4906      	ldr	r1, [pc, #24]	; (8010920 <disk_ioctl+0x38>)
 8010908:	440a      	add	r2, r1
 801090a:	7a10      	ldrb	r0, [r2, #8]
 801090c:	79b9      	ldrb	r1, [r7, #6]
 801090e:	683a      	ldr	r2, [r7, #0]
 8010910:	4798      	blx	r3
 8010912:	4603      	mov	r3, r0
 8010914:	73fb      	strb	r3, [r7, #15]
  return res;
 8010916:	7bfb      	ldrb	r3, [r7, #15]
}
 8010918:	4618      	mov	r0, r3
 801091a:	3710      	adds	r7, #16
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}
 8010920:	200005d8 	.word	0x200005d8

08010924 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010924:	b480      	push	{r7}
 8010926:	b085      	sub	sp, #20
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	3301      	adds	r3, #1
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010934:	89fb      	ldrh	r3, [r7, #14]
 8010936:	021b      	lsls	r3, r3, #8
 8010938:	b21a      	sxth	r2, r3
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	b21b      	sxth	r3, r3
 8010940:	4313      	orrs	r3, r2
 8010942:	b21b      	sxth	r3, r3
 8010944:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010946:	89fb      	ldrh	r3, [r7, #14]
}
 8010948:	4618      	mov	r0, r3
 801094a:	3714      	adds	r7, #20
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr

08010954 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010954:	b480      	push	{r7}
 8010956:	b085      	sub	sp, #20
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	3303      	adds	r3, #3
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	021b      	lsls	r3, r3, #8
 8010968:	687a      	ldr	r2, [r7, #4]
 801096a:	3202      	adds	r2, #2
 801096c:	7812      	ldrb	r2, [r2, #0]
 801096e:	4313      	orrs	r3, r2
 8010970:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	021b      	lsls	r3, r3, #8
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	3201      	adds	r2, #1
 801097a:	7812      	ldrb	r2, [r2, #0]
 801097c:	4313      	orrs	r3, r2
 801097e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	021b      	lsls	r3, r3, #8
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	7812      	ldrb	r2, [r2, #0]
 8010988:	4313      	orrs	r3, r2
 801098a:	60fb      	str	r3, [r7, #12]
	return rv;
 801098c:	68fb      	ldr	r3, [r7, #12]
}
 801098e:	4618      	mov	r0, r3
 8010990:	3714      	adds	r7, #20
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr

0801099a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801099a:	b480      	push	{r7}
 801099c:	b083      	sub	sp, #12
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
 80109a2:	460b      	mov	r3, r1
 80109a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	1c5a      	adds	r2, r3, #1
 80109aa:	607a      	str	r2, [r7, #4]
 80109ac:	887a      	ldrh	r2, [r7, #2]
 80109ae:	b2d2      	uxtb	r2, r2
 80109b0:	701a      	strb	r2, [r3, #0]
 80109b2:	887b      	ldrh	r3, [r7, #2]
 80109b4:	0a1b      	lsrs	r3, r3, #8
 80109b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	1c5a      	adds	r2, r3, #1
 80109bc:	607a      	str	r2, [r7, #4]
 80109be:	887a      	ldrh	r2, [r7, #2]
 80109c0:	b2d2      	uxtb	r2, r2
 80109c2:	701a      	strb	r2, [r3, #0]
}
 80109c4:	bf00      	nop
 80109c6:	370c      	adds	r7, #12
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr

080109d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	1c5a      	adds	r2, r3, #1
 80109de:	607a      	str	r2, [r7, #4]
 80109e0:	683a      	ldr	r2, [r7, #0]
 80109e2:	b2d2      	uxtb	r2, r2
 80109e4:	701a      	strb	r2, [r3, #0]
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	0a1b      	lsrs	r3, r3, #8
 80109ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	1c5a      	adds	r2, r3, #1
 80109f0:	607a      	str	r2, [r7, #4]
 80109f2:	683a      	ldr	r2, [r7, #0]
 80109f4:	b2d2      	uxtb	r2, r2
 80109f6:	701a      	strb	r2, [r3, #0]
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	0a1b      	lsrs	r3, r3, #8
 80109fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	1c5a      	adds	r2, r3, #1
 8010a02:	607a      	str	r2, [r7, #4]
 8010a04:	683a      	ldr	r2, [r7, #0]
 8010a06:	b2d2      	uxtb	r2, r2
 8010a08:	701a      	strb	r2, [r3, #0]
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	0a1b      	lsrs	r3, r3, #8
 8010a0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	1c5a      	adds	r2, r3, #1
 8010a14:	607a      	str	r2, [r7, #4]
 8010a16:	683a      	ldr	r2, [r7, #0]
 8010a18:	b2d2      	uxtb	r2, r2
 8010a1a:	701a      	strb	r2, [r3, #0]
}
 8010a1c:	bf00      	nop
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr

08010a28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010a28:	b480      	push	{r7}
 8010a2a:	b087      	sub	sp, #28
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d00d      	beq.n	8010a5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010a42:	693a      	ldr	r2, [r7, #16]
 8010a44:	1c53      	adds	r3, r2, #1
 8010a46:	613b      	str	r3, [r7, #16]
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	1c59      	adds	r1, r3, #1
 8010a4c:	6179      	str	r1, [r7, #20]
 8010a4e:	7812      	ldrb	r2, [r2, #0]
 8010a50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	3b01      	subs	r3, #1
 8010a56:	607b      	str	r3, [r7, #4]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d1f1      	bne.n	8010a42 <mem_cpy+0x1a>
	}
}
 8010a5e:	bf00      	nop
 8010a60:	371c      	adds	r7, #28
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr

08010a6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010a6a:	b480      	push	{r7}
 8010a6c:	b087      	sub	sp, #28
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	60f8      	str	r0, [r7, #12]
 8010a72:	60b9      	str	r1, [r7, #8]
 8010a74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	1c5a      	adds	r2, r3, #1
 8010a7e:	617a      	str	r2, [r7, #20]
 8010a80:	68ba      	ldr	r2, [r7, #8]
 8010a82:	b2d2      	uxtb	r2, r2
 8010a84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	3b01      	subs	r3, #1
 8010a8a:	607b      	str	r3, [r7, #4]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d1f3      	bne.n	8010a7a <mem_set+0x10>
}
 8010a92:	bf00      	nop
 8010a94:	371c      	adds	r7, #28
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr

08010a9e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010a9e:	b480      	push	{r7}
 8010aa0:	b089      	sub	sp, #36	; 0x24
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	60f8      	str	r0, [r7, #12]
 8010aa6:	60b9      	str	r1, [r7, #8]
 8010aa8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	61fb      	str	r3, [r7, #28]
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010ab6:	69fb      	ldr	r3, [r7, #28]
 8010ab8:	1c5a      	adds	r2, r3, #1
 8010aba:	61fa      	str	r2, [r7, #28]
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	4619      	mov	r1, r3
 8010ac0:	69bb      	ldr	r3, [r7, #24]
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	61ba      	str	r2, [r7, #24]
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	1acb      	subs	r3, r1, r3
 8010aca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	3b01      	subs	r3, #1
 8010ad0:	607b      	str	r3, [r7, #4]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d002      	beq.n	8010ade <mem_cmp+0x40>
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d0eb      	beq.n	8010ab6 <mem_cmp+0x18>

	return r;
 8010ade:	697b      	ldr	r3, [r7, #20]
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3724      	adds	r7, #36	; 0x24
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aea:	4770      	bx	lr

08010aec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010aec:	b480      	push	{r7}
 8010aee:	b083      	sub	sp, #12
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010af6:	e002      	b.n	8010afe <chk_chr+0x12>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	3301      	adds	r3, #1
 8010afc:	607b      	str	r3, [r7, #4]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d005      	beq.n	8010b12 <chk_chr+0x26>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d1f2      	bne.n	8010af8 <chk_chr+0xc>
	return *str;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	781b      	ldrb	r3, [r3, #0]
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	370c      	adds	r7, #12
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr
	...

08010b24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b085      	sub	sp, #20
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010b2e:	2300      	movs	r3, #0
 8010b30:	60bb      	str	r3, [r7, #8]
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	60fb      	str	r3, [r7, #12]
 8010b36:	e029      	b.n	8010b8c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010b38:	4a27      	ldr	r2, [pc, #156]	; (8010bd8 <chk_lock+0xb4>)
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	011b      	lsls	r3, r3, #4
 8010b3e:	4413      	add	r3, r2
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d01d      	beq.n	8010b82 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010b46:	4a24      	ldr	r2, [pc, #144]	; (8010bd8 <chk_lock+0xb4>)
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	011b      	lsls	r3, r3, #4
 8010b4c:	4413      	add	r3, r2
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d116      	bne.n	8010b86 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010b58:	4a1f      	ldr	r2, [pc, #124]	; (8010bd8 <chk_lock+0xb4>)
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	011b      	lsls	r3, r3, #4
 8010b5e:	4413      	add	r3, r2
 8010b60:	3304      	adds	r3, #4
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d10c      	bne.n	8010b86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010b6c:	4a1a      	ldr	r2, [pc, #104]	; (8010bd8 <chk_lock+0xb4>)
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	011b      	lsls	r3, r3, #4
 8010b72:	4413      	add	r3, r2
 8010b74:	3308      	adds	r3, #8
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d102      	bne.n	8010b86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010b80:	e007      	b.n	8010b92 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010b82:	2301      	movs	r3, #1
 8010b84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	60fb      	str	r3, [r7, #12]
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d9d2      	bls.n	8010b38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	2b02      	cmp	r3, #2
 8010b96:	d109      	bne.n	8010bac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d102      	bne.n	8010ba4 <chk_lock+0x80>
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	2b02      	cmp	r3, #2
 8010ba2:	d101      	bne.n	8010ba8 <chk_lock+0x84>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	e010      	b.n	8010bca <chk_lock+0xa6>
 8010ba8:	2312      	movs	r3, #18
 8010baa:	e00e      	b.n	8010bca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d108      	bne.n	8010bc4 <chk_lock+0xa0>
 8010bb2:	4a09      	ldr	r2, [pc, #36]	; (8010bd8 <chk_lock+0xb4>)
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	011b      	lsls	r3, r3, #4
 8010bb8:	4413      	add	r3, r2
 8010bba:	330c      	adds	r3, #12
 8010bbc:	881b      	ldrh	r3, [r3, #0]
 8010bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bc2:	d101      	bne.n	8010bc8 <chk_lock+0xa4>
 8010bc4:	2310      	movs	r3, #16
 8010bc6:	e000      	b.n	8010bca <chk_lock+0xa6>
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop
 8010bd8:	200005b8 	.word	0x200005b8

08010bdc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010bdc:	b480      	push	{r7}
 8010bde:	b083      	sub	sp, #12
 8010be0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010be2:	2300      	movs	r3, #0
 8010be4:	607b      	str	r3, [r7, #4]
 8010be6:	e002      	b.n	8010bee <enq_lock+0x12>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	3301      	adds	r3, #1
 8010bec:	607b      	str	r3, [r7, #4]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d806      	bhi.n	8010c02 <enq_lock+0x26>
 8010bf4:	4a09      	ldr	r2, [pc, #36]	; (8010c1c <enq_lock+0x40>)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	011b      	lsls	r3, r3, #4
 8010bfa:	4413      	add	r3, r2
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d1f2      	bne.n	8010be8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	bf14      	ite	ne
 8010c08:	2301      	movne	r3, #1
 8010c0a:	2300      	moveq	r3, #0
 8010c0c:	b2db      	uxtb	r3, r3
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	370c      	adds	r7, #12
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	200005b8 	.word	0x200005b8

08010c20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b085      	sub	sp, #20
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	60fb      	str	r3, [r7, #12]
 8010c2e:	e01f      	b.n	8010c70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010c30:	4a41      	ldr	r2, [pc, #260]	; (8010d38 <inc_lock+0x118>)
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	011b      	lsls	r3, r3, #4
 8010c36:	4413      	add	r3, r2
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d113      	bne.n	8010c6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010c42:	4a3d      	ldr	r2, [pc, #244]	; (8010d38 <inc_lock+0x118>)
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	011b      	lsls	r3, r3, #4
 8010c48:	4413      	add	r3, r2
 8010c4a:	3304      	adds	r3, #4
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d109      	bne.n	8010c6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010c56:	4a38      	ldr	r2, [pc, #224]	; (8010d38 <inc_lock+0x118>)
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	011b      	lsls	r3, r3, #4
 8010c5c:	4413      	add	r3, r2
 8010c5e:	3308      	adds	r3, #8
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d006      	beq.n	8010c78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	60fb      	str	r3, [r7, #12]
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2b01      	cmp	r3, #1
 8010c74:	d9dc      	bls.n	8010c30 <inc_lock+0x10>
 8010c76:	e000      	b.n	8010c7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010c78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	2b02      	cmp	r3, #2
 8010c7e:	d132      	bne.n	8010ce6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010c80:	2300      	movs	r3, #0
 8010c82:	60fb      	str	r3, [r7, #12]
 8010c84:	e002      	b.n	8010c8c <inc_lock+0x6c>
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	3301      	adds	r3, #1
 8010c8a:	60fb      	str	r3, [r7, #12]
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	d806      	bhi.n	8010ca0 <inc_lock+0x80>
 8010c92:	4a29      	ldr	r2, [pc, #164]	; (8010d38 <inc_lock+0x118>)
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	011b      	lsls	r3, r3, #4
 8010c98:	4413      	add	r3, r2
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d1f2      	bne.n	8010c86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2b02      	cmp	r3, #2
 8010ca4:	d101      	bne.n	8010caa <inc_lock+0x8a>
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	e040      	b.n	8010d2c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	4922      	ldr	r1, [pc, #136]	; (8010d38 <inc_lock+0x118>)
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	011b      	lsls	r3, r3, #4
 8010cb4:	440b      	add	r3, r1
 8010cb6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	689a      	ldr	r2, [r3, #8]
 8010cbc:	491e      	ldr	r1, [pc, #120]	; (8010d38 <inc_lock+0x118>)
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	011b      	lsls	r3, r3, #4
 8010cc2:	440b      	add	r3, r1
 8010cc4:	3304      	adds	r3, #4
 8010cc6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	695a      	ldr	r2, [r3, #20]
 8010ccc:	491a      	ldr	r1, [pc, #104]	; (8010d38 <inc_lock+0x118>)
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	011b      	lsls	r3, r3, #4
 8010cd2:	440b      	add	r3, r1
 8010cd4:	3308      	adds	r3, #8
 8010cd6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010cd8:	4a17      	ldr	r2, [pc, #92]	; (8010d38 <inc_lock+0x118>)
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	011b      	lsls	r3, r3, #4
 8010cde:	4413      	add	r3, r2
 8010ce0:	330c      	adds	r3, #12
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d009      	beq.n	8010d00 <inc_lock+0xe0>
 8010cec:	4a12      	ldr	r2, [pc, #72]	; (8010d38 <inc_lock+0x118>)
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	011b      	lsls	r3, r3, #4
 8010cf2:	4413      	add	r3, r2
 8010cf4:	330c      	adds	r3, #12
 8010cf6:	881b      	ldrh	r3, [r3, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d001      	beq.n	8010d00 <inc_lock+0xe0>
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	e015      	b.n	8010d2c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d108      	bne.n	8010d18 <inc_lock+0xf8>
 8010d06:	4a0c      	ldr	r2, [pc, #48]	; (8010d38 <inc_lock+0x118>)
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	011b      	lsls	r3, r3, #4
 8010d0c:	4413      	add	r3, r2
 8010d0e:	330c      	adds	r3, #12
 8010d10:	881b      	ldrh	r3, [r3, #0]
 8010d12:	3301      	adds	r3, #1
 8010d14:	b29a      	uxth	r2, r3
 8010d16:	e001      	b.n	8010d1c <inc_lock+0xfc>
 8010d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010d1c:	4906      	ldr	r1, [pc, #24]	; (8010d38 <inc_lock+0x118>)
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	011b      	lsls	r3, r3, #4
 8010d22:	440b      	add	r3, r1
 8010d24:	330c      	adds	r3, #12
 8010d26:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	3301      	adds	r3, #1
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3714      	adds	r7, #20
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr
 8010d38:	200005b8 	.word	0x200005b8

08010d3c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	b085      	sub	sp, #20
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	3b01      	subs	r3, #1
 8010d48:	607b      	str	r3, [r7, #4]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d825      	bhi.n	8010d9c <dec_lock+0x60>
		n = Files[i].ctr;
 8010d50:	4a17      	ldr	r2, [pc, #92]	; (8010db0 <dec_lock+0x74>)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	011b      	lsls	r3, r3, #4
 8010d56:	4413      	add	r3, r2
 8010d58:	330c      	adds	r3, #12
 8010d5a:	881b      	ldrh	r3, [r3, #0]
 8010d5c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010d5e:	89fb      	ldrh	r3, [r7, #14]
 8010d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d64:	d101      	bne.n	8010d6a <dec_lock+0x2e>
 8010d66:	2300      	movs	r3, #0
 8010d68:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010d6a:	89fb      	ldrh	r3, [r7, #14]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d002      	beq.n	8010d76 <dec_lock+0x3a>
 8010d70:	89fb      	ldrh	r3, [r7, #14]
 8010d72:	3b01      	subs	r3, #1
 8010d74:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010d76:	4a0e      	ldr	r2, [pc, #56]	; (8010db0 <dec_lock+0x74>)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	011b      	lsls	r3, r3, #4
 8010d7c:	4413      	add	r3, r2
 8010d7e:	330c      	adds	r3, #12
 8010d80:	89fa      	ldrh	r2, [r7, #14]
 8010d82:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010d84:	89fb      	ldrh	r3, [r7, #14]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d105      	bne.n	8010d96 <dec_lock+0x5a>
 8010d8a:	4a09      	ldr	r2, [pc, #36]	; (8010db0 <dec_lock+0x74>)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	011b      	lsls	r3, r3, #4
 8010d90:	4413      	add	r3, r2
 8010d92:	2200      	movs	r2, #0
 8010d94:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010d96:	2300      	movs	r3, #0
 8010d98:	737b      	strb	r3, [r7, #13]
 8010d9a:	e001      	b.n	8010da0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010d9c:	2302      	movs	r3, #2
 8010d9e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010da0:	7b7b      	ldrb	r3, [r7, #13]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3714      	adds	r7, #20
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	200005b8 	.word	0x200005b8

08010db4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	60fb      	str	r3, [r7, #12]
 8010dc0:	e010      	b.n	8010de4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010dc2:	4a0d      	ldr	r2, [pc, #52]	; (8010df8 <clear_lock+0x44>)
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	011b      	lsls	r3, r3, #4
 8010dc8:	4413      	add	r3, r2
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d105      	bne.n	8010dde <clear_lock+0x2a>
 8010dd2:	4a09      	ldr	r2, [pc, #36]	; (8010df8 <clear_lock+0x44>)
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	011b      	lsls	r3, r3, #4
 8010dd8:	4413      	add	r3, r2
 8010dda:	2200      	movs	r2, #0
 8010ddc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	3301      	adds	r3, #1
 8010de2:	60fb      	str	r3, [r7, #12]
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2b01      	cmp	r3, #1
 8010de8:	d9eb      	bls.n	8010dc2 <clear_lock+0xe>
	}
}
 8010dea:	bf00      	nop
 8010dec:	3714      	adds	r7, #20
 8010dee:	46bd      	mov	sp, r7
 8010df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop
 8010df8:	200005b8 	.word	0x200005b8

08010dfc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b086      	sub	sp, #24
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010e04:	2300      	movs	r3, #0
 8010e06:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	78db      	ldrb	r3, [r3, #3]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d034      	beq.n	8010e7a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e14:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	7858      	ldrb	r0, [r3, #1]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e20:	2301      	movs	r3, #1
 8010e22:	697a      	ldr	r2, [r7, #20]
 8010e24:	f7ff fd40 	bl	80108a8 <disk_write>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d002      	beq.n	8010e34 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	73fb      	strb	r3, [r7, #15]
 8010e32:	e022      	b.n	8010e7a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2200      	movs	r2, #0
 8010e38:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e3e:	697a      	ldr	r2, [r7, #20]
 8010e40:	1ad2      	subs	r2, r2, r3
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	69db      	ldr	r3, [r3, #28]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d217      	bcs.n	8010e7a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	789b      	ldrb	r3, [r3, #2]
 8010e4e:	613b      	str	r3, [r7, #16]
 8010e50:	e010      	b.n	8010e74 <sync_window+0x78>
					wsect += fs->fsize;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	69db      	ldr	r3, [r3, #28]
 8010e56:	697a      	ldr	r2, [r7, #20]
 8010e58:	4413      	add	r3, r2
 8010e5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	7858      	ldrb	r0, [r3, #1]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e66:	2301      	movs	r3, #1
 8010e68:	697a      	ldr	r2, [r7, #20]
 8010e6a:	f7ff fd1d 	bl	80108a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	3b01      	subs	r3, #1
 8010e72:	613b      	str	r3, [r7, #16]
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d8eb      	bhi.n	8010e52 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3718      	adds	r7, #24
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e96:	683a      	ldr	r2, [r7, #0]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d01b      	beq.n	8010ed4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f7ff ffad 	bl	8010dfc <sync_window>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010ea6:	7bfb      	ldrb	r3, [r7, #15]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d113      	bne.n	8010ed4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	7858      	ldrb	r0, [r3, #1]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	683a      	ldr	r2, [r7, #0]
 8010eba:	f7ff fcd5 	bl	8010868 <disk_read>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d004      	beq.n	8010ece <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ec8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010eca:	2301      	movs	r3, #1
 8010ecc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	683a      	ldr	r2, [r7, #0]
 8010ed2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3710      	adds	r7, #16
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
	...

08010ee0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f7ff ff87 	bl	8010dfc <sync_window>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010ef2:	7bfb      	ldrb	r3, [r7, #15]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d159      	bne.n	8010fac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	2b03      	cmp	r3, #3
 8010efe:	d149      	bne.n	8010f94 <sync_fs+0xb4>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	791b      	ldrb	r3, [r3, #4]
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	d145      	bne.n	8010f94 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	899b      	ldrh	r3, [r3, #12]
 8010f12:	461a      	mov	r2, r3
 8010f14:	2100      	movs	r1, #0
 8010f16:	f7ff fda8 	bl	8010a6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	3334      	adds	r3, #52	; 0x34
 8010f1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010f22:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7ff fd37 	bl	801099a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	3334      	adds	r3, #52	; 0x34
 8010f30:	4921      	ldr	r1, [pc, #132]	; (8010fb8 <sync_fs+0xd8>)
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7ff fd4c 	bl	80109d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	3334      	adds	r3, #52	; 0x34
 8010f3c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010f40:	491e      	ldr	r1, [pc, #120]	; (8010fbc <sync_fs+0xdc>)
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7ff fd44 	bl	80109d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	3334      	adds	r3, #52	; 0x34
 8010f4c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	695b      	ldr	r3, [r3, #20]
 8010f54:	4619      	mov	r1, r3
 8010f56:	4610      	mov	r0, r2
 8010f58:	f7ff fd3a 	bl	80109d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	3334      	adds	r3, #52	; 0x34
 8010f60:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	691b      	ldr	r3, [r3, #16]
 8010f68:	4619      	mov	r1, r3
 8010f6a:	4610      	mov	r0, r2
 8010f6c:	f7ff fd30 	bl	80109d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6a1b      	ldr	r3, [r3, #32]
 8010f74:	1c5a      	adds	r2, r3, #1
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	7858      	ldrb	r0, [r3, #1]
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f88:	2301      	movs	r3, #1
 8010f8a:	f7ff fc8d 	bl	80108a8 <disk_write>
			fs->fsi_flag = 0;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2200      	movs	r2, #0
 8010f92:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	785b      	ldrb	r3, [r3, #1]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	2100      	movs	r1, #0
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7ff fca3 	bl	80108e8 <disk_ioctl>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d001      	beq.n	8010fac <sync_fs+0xcc>
 8010fa8:	2301      	movs	r3, #1
 8010faa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3710      	adds	r7, #16
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	41615252 	.word	0x41615252
 8010fbc:	61417272 	.word	0x61417272

08010fc0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	3b02      	subs	r3, #2
 8010fce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	699b      	ldr	r3, [r3, #24]
 8010fd4:	3b02      	subs	r3, #2
 8010fd6:	683a      	ldr	r2, [r7, #0]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d301      	bcc.n	8010fe0 <clust2sect+0x20>
 8010fdc:	2300      	movs	r3, #0
 8010fde:	e008      	b.n	8010ff2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	895b      	ldrh	r3, [r3, #10]
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	fb03 f202 	mul.w	r2, r3, r2
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff0:	4413      	add	r3, r2
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	370c      	adds	r7, #12
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr

08010ffe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b086      	sub	sp, #24
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
 8011006:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	2b01      	cmp	r3, #1
 8011012:	d904      	bls.n	801101e <get_fat+0x20>
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	699b      	ldr	r3, [r3, #24]
 8011018:	683a      	ldr	r2, [r7, #0]
 801101a:	429a      	cmp	r2, r3
 801101c:	d302      	bcc.n	8011024 <get_fat+0x26>
		val = 1;	/* Internal error */
 801101e:	2301      	movs	r3, #1
 8011020:	617b      	str	r3, [r7, #20]
 8011022:	e0b7      	b.n	8011194 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011024:	f04f 33ff 	mov.w	r3, #4294967295
 8011028:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	2b02      	cmp	r3, #2
 8011030:	d05a      	beq.n	80110e8 <get_fat+0xea>
 8011032:	2b03      	cmp	r3, #3
 8011034:	d07d      	beq.n	8011132 <get_fat+0x134>
 8011036:	2b01      	cmp	r3, #1
 8011038:	f040 80a2 	bne.w	8011180 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	60fb      	str	r3, [r7, #12]
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	085b      	lsrs	r3, r3, #1
 8011044:	68fa      	ldr	r2, [r7, #12]
 8011046:	4413      	add	r3, r2
 8011048:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	899b      	ldrh	r3, [r3, #12]
 8011052:	4619      	mov	r1, r3
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	fbb3 f3f1 	udiv	r3, r3, r1
 801105a:	4413      	add	r3, r2
 801105c:	4619      	mov	r1, r3
 801105e:	6938      	ldr	r0, [r7, #16]
 8011060:	f7ff ff10 	bl	8010e84 <move_window>
 8011064:	4603      	mov	r3, r0
 8011066:	2b00      	cmp	r3, #0
 8011068:	f040 808d 	bne.w	8011186 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	1c5a      	adds	r2, r3, #1
 8011070:	60fa      	str	r2, [r7, #12]
 8011072:	693a      	ldr	r2, [r7, #16]
 8011074:	8992      	ldrh	r2, [r2, #12]
 8011076:	fbb3 f1f2 	udiv	r1, r3, r2
 801107a:	fb02 f201 	mul.w	r2, r2, r1
 801107e:	1a9b      	subs	r3, r3, r2
 8011080:	693a      	ldr	r2, [r7, #16]
 8011082:	4413      	add	r3, r2
 8011084:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011088:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	899b      	ldrh	r3, [r3, #12]
 8011092:	4619      	mov	r1, r3
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	fbb3 f3f1 	udiv	r3, r3, r1
 801109a:	4413      	add	r3, r2
 801109c:	4619      	mov	r1, r3
 801109e:	6938      	ldr	r0, [r7, #16]
 80110a0:	f7ff fef0 	bl	8010e84 <move_window>
 80110a4:	4603      	mov	r3, r0
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d16f      	bne.n	801118a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	899b      	ldrh	r3, [r3, #12]
 80110ae:	461a      	mov	r2, r3
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80110b6:	fb02 f201 	mul.w	r2, r2, r1
 80110ba:	1a9b      	subs	r3, r3, r2
 80110bc:	693a      	ldr	r2, [r7, #16]
 80110be:	4413      	add	r3, r2
 80110c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80110c4:	021b      	lsls	r3, r3, #8
 80110c6:	461a      	mov	r2, r3
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	4313      	orrs	r3, r2
 80110cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	f003 0301 	and.w	r3, r3, #1
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d002      	beq.n	80110de <get_fat+0xe0>
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	091b      	lsrs	r3, r3, #4
 80110dc:	e002      	b.n	80110e4 <get_fat+0xe6>
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80110e4:	617b      	str	r3, [r7, #20]
			break;
 80110e6:	e055      	b.n	8011194 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	899b      	ldrh	r3, [r3, #12]
 80110f0:	085b      	lsrs	r3, r3, #1
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	4619      	mov	r1, r3
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80110fc:	4413      	add	r3, r2
 80110fe:	4619      	mov	r1, r3
 8011100:	6938      	ldr	r0, [r7, #16]
 8011102:	f7ff febf 	bl	8010e84 <move_window>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d140      	bne.n	801118e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	005b      	lsls	r3, r3, #1
 8011116:	693a      	ldr	r2, [r7, #16]
 8011118:	8992      	ldrh	r2, [r2, #12]
 801111a:	fbb3 f0f2 	udiv	r0, r3, r2
 801111e:	fb02 f200 	mul.w	r2, r2, r0
 8011122:	1a9b      	subs	r3, r3, r2
 8011124:	440b      	add	r3, r1
 8011126:	4618      	mov	r0, r3
 8011128:	f7ff fbfc 	bl	8010924 <ld_word>
 801112c:	4603      	mov	r3, r0
 801112e:	617b      	str	r3, [r7, #20]
			break;
 8011130:	e030      	b.n	8011194 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011132:	693b      	ldr	r3, [r7, #16]
 8011134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	899b      	ldrh	r3, [r3, #12]
 801113a:	089b      	lsrs	r3, r3, #2
 801113c:	b29b      	uxth	r3, r3
 801113e:	4619      	mov	r1, r3
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	fbb3 f3f1 	udiv	r3, r3, r1
 8011146:	4413      	add	r3, r2
 8011148:	4619      	mov	r1, r3
 801114a:	6938      	ldr	r0, [r7, #16]
 801114c:	f7ff fe9a 	bl	8010e84 <move_window>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d11d      	bne.n	8011192 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	693a      	ldr	r2, [r7, #16]
 8011162:	8992      	ldrh	r2, [r2, #12]
 8011164:	fbb3 f0f2 	udiv	r0, r3, r2
 8011168:	fb02 f200 	mul.w	r2, r2, r0
 801116c:	1a9b      	subs	r3, r3, r2
 801116e:	440b      	add	r3, r1
 8011170:	4618      	mov	r0, r3
 8011172:	f7ff fbef 	bl	8010954 <ld_dword>
 8011176:	4603      	mov	r3, r0
 8011178:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801117c:	617b      	str	r3, [r7, #20]
			break;
 801117e:	e009      	b.n	8011194 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011180:	2301      	movs	r3, #1
 8011182:	617b      	str	r3, [r7, #20]
 8011184:	e006      	b.n	8011194 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011186:	bf00      	nop
 8011188:	e004      	b.n	8011194 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801118a:	bf00      	nop
 801118c:	e002      	b.n	8011194 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801118e:	bf00      	nop
 8011190:	e000      	b.n	8011194 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011192:	bf00      	nop
		}
	}

	return val;
 8011194:	697b      	ldr	r3, [r7, #20]
}
 8011196:	4618      	mov	r0, r3
 8011198:	3718      	adds	r7, #24
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}

0801119e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801119e:	b590      	push	{r4, r7, lr}
 80111a0:	b089      	sub	sp, #36	; 0x24
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	60f8      	str	r0, [r7, #12]
 80111a6:	60b9      	str	r1, [r7, #8]
 80111a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80111aa:	2302      	movs	r3, #2
 80111ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	f240 8106 	bls.w	80113c2 <put_fat+0x224>
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	699b      	ldr	r3, [r3, #24]
 80111ba:	68ba      	ldr	r2, [r7, #8]
 80111bc:	429a      	cmp	r2, r3
 80111be:	f080 8100 	bcs.w	80113c2 <put_fat+0x224>
		switch (fs->fs_type) {
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	2b02      	cmp	r3, #2
 80111c8:	f000 8088 	beq.w	80112dc <put_fat+0x13e>
 80111cc:	2b03      	cmp	r3, #3
 80111ce:	f000 80b0 	beq.w	8011332 <put_fat+0x194>
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	f040 80f5 	bne.w	80113c2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	61bb      	str	r3, [r7, #24]
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	085b      	lsrs	r3, r3, #1
 80111e0:	69ba      	ldr	r2, [r7, #24]
 80111e2:	4413      	add	r3, r2
 80111e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	899b      	ldrh	r3, [r3, #12]
 80111ee:	4619      	mov	r1, r3
 80111f0:	69bb      	ldr	r3, [r7, #24]
 80111f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80111f6:	4413      	add	r3, r2
 80111f8:	4619      	mov	r1, r3
 80111fa:	68f8      	ldr	r0, [r7, #12]
 80111fc:	f7ff fe42 	bl	8010e84 <move_window>
 8011200:	4603      	mov	r3, r0
 8011202:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011204:	7ffb      	ldrb	r3, [r7, #31]
 8011206:	2b00      	cmp	r3, #0
 8011208:	f040 80d4 	bne.w	80113b4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011212:	69bb      	ldr	r3, [r7, #24]
 8011214:	1c5a      	adds	r2, r3, #1
 8011216:	61ba      	str	r2, [r7, #24]
 8011218:	68fa      	ldr	r2, [r7, #12]
 801121a:	8992      	ldrh	r2, [r2, #12]
 801121c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011220:	fb02 f200 	mul.w	r2, r2, r0
 8011224:	1a9b      	subs	r3, r3, r2
 8011226:	440b      	add	r3, r1
 8011228:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	f003 0301 	and.w	r3, r3, #1
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00d      	beq.n	8011250 <put_fat+0xb2>
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	b25b      	sxtb	r3, r3
 801123a:	f003 030f 	and.w	r3, r3, #15
 801123e:	b25a      	sxtb	r2, r3
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	b2db      	uxtb	r3, r3
 8011244:	011b      	lsls	r3, r3, #4
 8011246:	b25b      	sxtb	r3, r3
 8011248:	4313      	orrs	r3, r2
 801124a:	b25b      	sxtb	r3, r3
 801124c:	b2db      	uxtb	r3, r3
 801124e:	e001      	b.n	8011254 <put_fat+0xb6>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	b2db      	uxtb	r3, r3
 8011254:	697a      	ldr	r2, [r7, #20]
 8011256:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2201      	movs	r2, #1
 801125c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	899b      	ldrh	r3, [r3, #12]
 8011266:	4619      	mov	r1, r3
 8011268:	69bb      	ldr	r3, [r7, #24]
 801126a:	fbb3 f3f1 	udiv	r3, r3, r1
 801126e:	4413      	add	r3, r2
 8011270:	4619      	mov	r1, r3
 8011272:	68f8      	ldr	r0, [r7, #12]
 8011274:	f7ff fe06 	bl	8010e84 <move_window>
 8011278:	4603      	mov	r3, r0
 801127a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801127c:	7ffb      	ldrb	r3, [r7, #31]
 801127e:	2b00      	cmp	r3, #0
 8011280:	f040 809a 	bne.w	80113b8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	899b      	ldrh	r3, [r3, #12]
 801128e:	461a      	mov	r2, r3
 8011290:	69bb      	ldr	r3, [r7, #24]
 8011292:	fbb3 f0f2 	udiv	r0, r3, r2
 8011296:	fb02 f200 	mul.w	r2, r2, r0
 801129a:	1a9b      	subs	r3, r3, r2
 801129c:	440b      	add	r3, r1
 801129e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	f003 0301 	and.w	r3, r3, #1
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d003      	beq.n	80112b2 <put_fat+0x114>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	091b      	lsrs	r3, r3, #4
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	e00e      	b.n	80112d0 <put_fat+0x132>
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	b25b      	sxtb	r3, r3
 80112b8:	f023 030f 	bic.w	r3, r3, #15
 80112bc:	b25a      	sxtb	r2, r3
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	0a1b      	lsrs	r3, r3, #8
 80112c2:	b25b      	sxtb	r3, r3
 80112c4:	f003 030f 	and.w	r3, r3, #15
 80112c8:	b25b      	sxtb	r3, r3
 80112ca:	4313      	orrs	r3, r2
 80112cc:	b25b      	sxtb	r3, r3
 80112ce:	b2db      	uxtb	r3, r3
 80112d0:	697a      	ldr	r2, [r7, #20]
 80112d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2201      	movs	r2, #1
 80112d8:	70da      	strb	r2, [r3, #3]
			break;
 80112da:	e072      	b.n	80113c2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	899b      	ldrh	r3, [r3, #12]
 80112e4:	085b      	lsrs	r3, r3, #1
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	4619      	mov	r1, r3
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80112f0:	4413      	add	r3, r2
 80112f2:	4619      	mov	r1, r3
 80112f4:	68f8      	ldr	r0, [r7, #12]
 80112f6:	f7ff fdc5 	bl	8010e84 <move_window>
 80112fa:	4603      	mov	r3, r0
 80112fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80112fe:	7ffb      	ldrb	r3, [r7, #31]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d15b      	bne.n	80113bc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	005b      	lsls	r3, r3, #1
 801130e:	68fa      	ldr	r2, [r7, #12]
 8011310:	8992      	ldrh	r2, [r2, #12]
 8011312:	fbb3 f0f2 	udiv	r0, r3, r2
 8011316:	fb02 f200 	mul.w	r2, r2, r0
 801131a:	1a9b      	subs	r3, r3, r2
 801131c:	440b      	add	r3, r1
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	b292      	uxth	r2, r2
 8011322:	4611      	mov	r1, r2
 8011324:	4618      	mov	r0, r3
 8011326:	f7ff fb38 	bl	801099a <st_word>
			fs->wflag = 1;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2201      	movs	r2, #1
 801132e:	70da      	strb	r2, [r3, #3]
			break;
 8011330:	e047      	b.n	80113c2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	899b      	ldrh	r3, [r3, #12]
 801133a:	089b      	lsrs	r3, r3, #2
 801133c:	b29b      	uxth	r3, r3
 801133e:	4619      	mov	r1, r3
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	fbb3 f3f1 	udiv	r3, r3, r1
 8011346:	4413      	add	r3, r2
 8011348:	4619      	mov	r1, r3
 801134a:	68f8      	ldr	r0, [r7, #12]
 801134c:	f7ff fd9a 	bl	8010e84 <move_window>
 8011350:	4603      	mov	r3, r0
 8011352:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011354:	7ffb      	ldrb	r3, [r7, #31]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d132      	bne.n	80113c0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	68fa      	ldr	r2, [r7, #12]
 801136c:	8992      	ldrh	r2, [r2, #12]
 801136e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011372:	fb02 f200 	mul.w	r2, r2, r0
 8011376:	1a9b      	subs	r3, r3, r2
 8011378:	440b      	add	r3, r1
 801137a:	4618      	mov	r0, r3
 801137c:	f7ff faea 	bl	8010954 <ld_dword>
 8011380:	4603      	mov	r3, r0
 8011382:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011386:	4323      	orrs	r3, r4
 8011388:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	68fa      	ldr	r2, [r7, #12]
 8011396:	8992      	ldrh	r2, [r2, #12]
 8011398:	fbb3 f0f2 	udiv	r0, r3, r2
 801139c:	fb02 f200 	mul.w	r2, r2, r0
 80113a0:	1a9b      	subs	r3, r3, r2
 80113a2:	440b      	add	r3, r1
 80113a4:	6879      	ldr	r1, [r7, #4]
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7ff fb12 	bl	80109d0 <st_dword>
			fs->wflag = 1;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2201      	movs	r2, #1
 80113b0:	70da      	strb	r2, [r3, #3]
			break;
 80113b2:	e006      	b.n	80113c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80113b4:	bf00      	nop
 80113b6:	e004      	b.n	80113c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80113b8:	bf00      	nop
 80113ba:	e002      	b.n	80113c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80113bc:	bf00      	nop
 80113be:	e000      	b.n	80113c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80113c0:	bf00      	nop
		}
	}
	return res;
 80113c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3724      	adds	r7, #36	; 0x24
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd90      	pop	{r4, r7, pc}

080113cc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b088      	sub	sp, #32
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	60b9      	str	r1, [r7, #8]
 80113d6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80113d8:	2300      	movs	r3, #0
 80113da:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d904      	bls.n	80113f2 <remove_chain+0x26>
 80113e8:	69bb      	ldr	r3, [r7, #24]
 80113ea:	699b      	ldr	r3, [r3, #24]
 80113ec:	68ba      	ldr	r2, [r7, #8]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d301      	bcc.n	80113f6 <remove_chain+0x2a>
 80113f2:	2302      	movs	r3, #2
 80113f4:	e04b      	b.n	801148e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d00c      	beq.n	8011416 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80113fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011400:	6879      	ldr	r1, [r7, #4]
 8011402:	69b8      	ldr	r0, [r7, #24]
 8011404:	f7ff fecb 	bl	801119e <put_fat>
 8011408:	4603      	mov	r3, r0
 801140a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801140c:	7ffb      	ldrb	r3, [r7, #31]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d001      	beq.n	8011416 <remove_chain+0x4a>
 8011412:	7ffb      	ldrb	r3, [r7, #31]
 8011414:	e03b      	b.n	801148e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011416:	68b9      	ldr	r1, [r7, #8]
 8011418:	68f8      	ldr	r0, [r7, #12]
 801141a:	f7ff fdf0 	bl	8010ffe <get_fat>
 801141e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d031      	beq.n	801148a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	2b01      	cmp	r3, #1
 801142a:	d101      	bne.n	8011430 <remove_chain+0x64>
 801142c:	2302      	movs	r3, #2
 801142e:	e02e      	b.n	801148e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011436:	d101      	bne.n	801143c <remove_chain+0x70>
 8011438:	2301      	movs	r3, #1
 801143a:	e028      	b.n	801148e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801143c:	2200      	movs	r2, #0
 801143e:	68b9      	ldr	r1, [r7, #8]
 8011440:	69b8      	ldr	r0, [r7, #24]
 8011442:	f7ff feac 	bl	801119e <put_fat>
 8011446:	4603      	mov	r3, r0
 8011448:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801144a:	7ffb      	ldrb	r3, [r7, #31]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d001      	beq.n	8011454 <remove_chain+0x88>
 8011450:	7ffb      	ldrb	r3, [r7, #31]
 8011452:	e01c      	b.n	801148e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011454:	69bb      	ldr	r3, [r7, #24]
 8011456:	695a      	ldr	r2, [r3, #20]
 8011458:	69bb      	ldr	r3, [r7, #24]
 801145a:	699b      	ldr	r3, [r3, #24]
 801145c:	3b02      	subs	r3, #2
 801145e:	429a      	cmp	r2, r3
 8011460:	d20b      	bcs.n	801147a <remove_chain+0xae>
			fs->free_clst++;
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	695b      	ldr	r3, [r3, #20]
 8011466:	1c5a      	adds	r2, r3, #1
 8011468:	69bb      	ldr	r3, [r7, #24]
 801146a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801146c:	69bb      	ldr	r3, [r7, #24]
 801146e:	791b      	ldrb	r3, [r3, #4]
 8011470:	f043 0301 	orr.w	r3, r3, #1
 8011474:	b2da      	uxtb	r2, r3
 8011476:	69bb      	ldr	r3, [r7, #24]
 8011478:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801147e:	69bb      	ldr	r3, [r7, #24]
 8011480:	699b      	ldr	r3, [r3, #24]
 8011482:	68ba      	ldr	r2, [r7, #8]
 8011484:	429a      	cmp	r2, r3
 8011486:	d3c6      	bcc.n	8011416 <remove_chain+0x4a>
 8011488:	e000      	b.n	801148c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801148a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801148c:	2300      	movs	r3, #0
}
 801148e:	4618      	mov	r0, r3
 8011490:	3720      	adds	r7, #32
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}

08011496 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011496:	b580      	push	{r7, lr}
 8011498:	b088      	sub	sp, #32
 801149a:	af00      	add	r7, sp, #0
 801149c:	6078      	str	r0, [r7, #4]
 801149e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d10d      	bne.n	80114c8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	691b      	ldr	r3, [r3, #16]
 80114b0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d004      	beq.n	80114c2 <create_chain+0x2c>
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	699b      	ldr	r3, [r3, #24]
 80114bc:	69ba      	ldr	r2, [r7, #24]
 80114be:	429a      	cmp	r2, r3
 80114c0:	d31b      	bcc.n	80114fa <create_chain+0x64>
 80114c2:	2301      	movs	r3, #1
 80114c4:	61bb      	str	r3, [r7, #24]
 80114c6:	e018      	b.n	80114fa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80114c8:	6839      	ldr	r1, [r7, #0]
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f7ff fd97 	bl	8010ffe <get_fat>
 80114d0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	d801      	bhi.n	80114dc <create_chain+0x46>
 80114d8:	2301      	movs	r3, #1
 80114da:	e070      	b.n	80115be <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114e2:	d101      	bne.n	80114e8 <create_chain+0x52>
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	e06a      	b.n	80115be <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	699b      	ldr	r3, [r3, #24]
 80114ec:	68fa      	ldr	r2, [r7, #12]
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d201      	bcs.n	80114f6 <create_chain+0x60>
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	e063      	b.n	80115be <create_chain+0x128>
		scl = clst;
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80114fa:	69bb      	ldr	r3, [r7, #24]
 80114fc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80114fe:	69fb      	ldr	r3, [r7, #28]
 8011500:	3301      	adds	r3, #1
 8011502:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	699b      	ldr	r3, [r3, #24]
 8011508:	69fa      	ldr	r2, [r7, #28]
 801150a:	429a      	cmp	r2, r3
 801150c:	d307      	bcc.n	801151e <create_chain+0x88>
				ncl = 2;
 801150e:	2302      	movs	r3, #2
 8011510:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011512:	69fa      	ldr	r2, [r7, #28]
 8011514:	69bb      	ldr	r3, [r7, #24]
 8011516:	429a      	cmp	r2, r3
 8011518:	d901      	bls.n	801151e <create_chain+0x88>
 801151a:	2300      	movs	r3, #0
 801151c:	e04f      	b.n	80115be <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801151e:	69f9      	ldr	r1, [r7, #28]
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f7ff fd6c 	bl	8010ffe <get_fat>
 8011526:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d00e      	beq.n	801154c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2b01      	cmp	r3, #1
 8011532:	d003      	beq.n	801153c <create_chain+0xa6>
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801153a:	d101      	bne.n	8011540 <create_chain+0xaa>
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	e03e      	b.n	80115be <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011540:	69fa      	ldr	r2, [r7, #28]
 8011542:	69bb      	ldr	r3, [r7, #24]
 8011544:	429a      	cmp	r2, r3
 8011546:	d1da      	bne.n	80114fe <create_chain+0x68>
 8011548:	2300      	movs	r3, #0
 801154a:	e038      	b.n	80115be <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801154c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801154e:	f04f 32ff 	mov.w	r2, #4294967295
 8011552:	69f9      	ldr	r1, [r7, #28]
 8011554:	6938      	ldr	r0, [r7, #16]
 8011556:	f7ff fe22 	bl	801119e <put_fat>
 801155a:	4603      	mov	r3, r0
 801155c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801155e:	7dfb      	ldrb	r3, [r7, #23]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d109      	bne.n	8011578 <create_chain+0xe2>
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d006      	beq.n	8011578 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801156a:	69fa      	ldr	r2, [r7, #28]
 801156c:	6839      	ldr	r1, [r7, #0]
 801156e:	6938      	ldr	r0, [r7, #16]
 8011570:	f7ff fe15 	bl	801119e <put_fat>
 8011574:	4603      	mov	r3, r0
 8011576:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011578:	7dfb      	ldrb	r3, [r7, #23]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d116      	bne.n	80115ac <create_chain+0x116>
		fs->last_clst = ncl;
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	69fa      	ldr	r2, [r7, #28]
 8011582:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	695a      	ldr	r2, [r3, #20]
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	699b      	ldr	r3, [r3, #24]
 801158c:	3b02      	subs	r3, #2
 801158e:	429a      	cmp	r2, r3
 8011590:	d804      	bhi.n	801159c <create_chain+0x106>
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	695b      	ldr	r3, [r3, #20]
 8011596:	1e5a      	subs	r2, r3, #1
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	791b      	ldrb	r3, [r3, #4]
 80115a0:	f043 0301 	orr.w	r3, r3, #1
 80115a4:	b2da      	uxtb	r2, r3
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	711a      	strb	r2, [r3, #4]
 80115aa:	e007      	b.n	80115bc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80115ac:	7dfb      	ldrb	r3, [r7, #23]
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d102      	bne.n	80115b8 <create_chain+0x122>
 80115b2:	f04f 33ff 	mov.w	r3, #4294967295
 80115b6:	e000      	b.n	80115ba <create_chain+0x124>
 80115b8:	2301      	movs	r3, #1
 80115ba:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80115bc:	69fb      	ldr	r3, [r7, #28]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3720      	adds	r7, #32
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80115c6:	b480      	push	{r7}
 80115c8:	b087      	sub	sp, #28
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115da:	3304      	adds	r3, #4
 80115dc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	899b      	ldrh	r3, [r3, #12]
 80115e2:	461a      	mov	r2, r3
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	8952      	ldrh	r2, [r2, #10]
 80115ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80115f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	1d1a      	adds	r2, r3, #4
 80115f8:	613a      	str	r2, [r7, #16]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d101      	bne.n	8011608 <clmt_clust+0x42>
 8011604:	2300      	movs	r3, #0
 8011606:	e010      	b.n	801162a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011608:	697a      	ldr	r2, [r7, #20]
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	429a      	cmp	r2, r3
 801160e:	d307      	bcc.n	8011620 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011610:	697a      	ldr	r2, [r7, #20]
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	1ad3      	subs	r3, r2, r3
 8011616:	617b      	str	r3, [r7, #20]
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	3304      	adds	r3, #4
 801161c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801161e:	e7e9      	b.n	80115f4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011620:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	681a      	ldr	r2, [r3, #0]
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	4413      	add	r3, r2
}
 801162a:	4618      	mov	r0, r3
 801162c:	371c      	adds	r7, #28
 801162e:	46bd      	mov	sp, r7
 8011630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011634:	4770      	bx	lr

08011636 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011636:	b580      	push	{r7, lr}
 8011638:	b086      	sub	sp, #24
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
 801163e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801164c:	d204      	bcs.n	8011658 <dir_sdi+0x22>
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	f003 031f 	and.w	r3, r3, #31
 8011654:	2b00      	cmp	r3, #0
 8011656:	d001      	beq.n	801165c <dir_sdi+0x26>
		return FR_INT_ERR;
 8011658:	2302      	movs	r3, #2
 801165a:	e071      	b.n	8011740 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	683a      	ldr	r2, [r7, #0]
 8011660:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	689b      	ldr	r3, [r3, #8]
 8011666:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d106      	bne.n	801167c <dir_sdi+0x46>
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	2b02      	cmp	r3, #2
 8011674:	d902      	bls.n	801167c <dir_sdi+0x46>
		clst = fs->dirbase;
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801167a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d10c      	bne.n	801169c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	095b      	lsrs	r3, r3, #5
 8011686:	693a      	ldr	r2, [r7, #16]
 8011688:	8912      	ldrh	r2, [r2, #8]
 801168a:	4293      	cmp	r3, r2
 801168c:	d301      	bcc.n	8011692 <dir_sdi+0x5c>
 801168e:	2302      	movs	r3, #2
 8011690:	e056      	b.n	8011740 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	61da      	str	r2, [r3, #28]
 801169a:	e02d      	b.n	80116f8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	895b      	ldrh	r3, [r3, #10]
 80116a0:	461a      	mov	r2, r3
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	899b      	ldrh	r3, [r3, #12]
 80116a6:	fb03 f302 	mul.w	r3, r3, r2
 80116aa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80116ac:	e019      	b.n	80116e2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	6979      	ldr	r1, [r7, #20]
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7ff fca3 	bl	8010ffe <get_fat>
 80116b8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c0:	d101      	bne.n	80116c6 <dir_sdi+0x90>
 80116c2:	2301      	movs	r3, #1
 80116c4:	e03c      	b.n	8011740 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d904      	bls.n	80116d6 <dir_sdi+0xa0>
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	699b      	ldr	r3, [r3, #24]
 80116d0:	697a      	ldr	r2, [r7, #20]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d301      	bcc.n	80116da <dir_sdi+0xa4>
 80116d6:	2302      	movs	r3, #2
 80116d8:	e032      	b.n	8011740 <dir_sdi+0x10a>
			ofs -= csz;
 80116da:	683a      	ldr	r2, [r7, #0]
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	1ad3      	subs	r3, r2, r3
 80116e0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80116e2:	683a      	ldr	r2, [r7, #0]
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d2e1      	bcs.n	80116ae <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80116ea:	6979      	ldr	r1, [r7, #20]
 80116ec:	6938      	ldr	r0, [r7, #16]
 80116ee:	f7ff fc67 	bl	8010fc0 <clust2sect>
 80116f2:	4602      	mov	r2, r0
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	697a      	ldr	r2, [r7, #20]
 80116fc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	69db      	ldr	r3, [r3, #28]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d101      	bne.n	801170a <dir_sdi+0xd4>
 8011706:	2302      	movs	r3, #2
 8011708:	e01a      	b.n	8011740 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	69da      	ldr	r2, [r3, #28]
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	899b      	ldrh	r3, [r3, #12]
 8011712:	4619      	mov	r1, r3
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	fbb3 f3f1 	udiv	r3, r3, r1
 801171a:	441a      	add	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	899b      	ldrh	r3, [r3, #12]
 801172a:	461a      	mov	r2, r3
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011732:	fb02 f200 	mul.w	r2, r2, r0
 8011736:	1a9b      	subs	r3, r3, r2
 8011738:	18ca      	adds	r2, r1, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801173e:	2300      	movs	r3, #0
}
 8011740:	4618      	mov	r0, r3
 8011742:	3718      	adds	r7, #24
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b086      	sub	sp, #24
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	695b      	ldr	r3, [r3, #20]
 801175c:	3320      	adds	r3, #32
 801175e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	69db      	ldr	r3, [r3, #28]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d003      	beq.n	8011770 <dir_next+0x28>
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801176e:	d301      	bcc.n	8011774 <dir_next+0x2c>
 8011770:	2304      	movs	r3, #4
 8011772:	e0bb      	b.n	80118ec <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	899b      	ldrh	r3, [r3, #12]
 8011778:	461a      	mov	r2, r3
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011780:	fb02 f201 	mul.w	r2, r2, r1
 8011784:	1a9b      	subs	r3, r3, r2
 8011786:	2b00      	cmp	r3, #0
 8011788:	f040 809d 	bne.w	80118c6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	69db      	ldr	r3, [r3, #28]
 8011790:	1c5a      	adds	r2, r3, #1
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	699b      	ldr	r3, [r3, #24]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d10b      	bne.n	80117b6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	095b      	lsrs	r3, r3, #5
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	8912      	ldrh	r2, [r2, #8]
 80117a6:	4293      	cmp	r3, r2
 80117a8:	f0c0 808d 	bcc.w	80118c6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2200      	movs	r2, #0
 80117b0:	61da      	str	r2, [r3, #28]
 80117b2:	2304      	movs	r3, #4
 80117b4:	e09a      	b.n	80118ec <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	899b      	ldrh	r3, [r3, #12]
 80117ba:	461a      	mov	r2, r3
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	fbb3 f3f2 	udiv	r3, r3, r2
 80117c2:	68fa      	ldr	r2, [r7, #12]
 80117c4:	8952      	ldrh	r2, [r2, #10]
 80117c6:	3a01      	subs	r2, #1
 80117c8:	4013      	ands	r3, r2
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d17b      	bne.n	80118c6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	699b      	ldr	r3, [r3, #24]
 80117d4:	4619      	mov	r1, r3
 80117d6:	4610      	mov	r0, r2
 80117d8:	f7ff fc11 	bl	8010ffe <get_fat>
 80117dc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	d801      	bhi.n	80117e8 <dir_next+0xa0>
 80117e4:	2302      	movs	r3, #2
 80117e6:	e081      	b.n	80118ec <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ee:	d101      	bne.n	80117f4 <dir_next+0xac>
 80117f0:	2301      	movs	r3, #1
 80117f2:	e07b      	b.n	80118ec <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	699b      	ldr	r3, [r3, #24]
 80117f8:	697a      	ldr	r2, [r7, #20]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d359      	bcc.n	80118b2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d104      	bne.n	801180e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	61da      	str	r2, [r3, #28]
 801180a:	2304      	movs	r3, #4
 801180c:	e06e      	b.n	80118ec <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	699b      	ldr	r3, [r3, #24]
 8011814:	4619      	mov	r1, r3
 8011816:	4610      	mov	r0, r2
 8011818:	f7ff fe3d 	bl	8011496 <create_chain>
 801181c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d101      	bne.n	8011828 <dir_next+0xe0>
 8011824:	2307      	movs	r3, #7
 8011826:	e061      	b.n	80118ec <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	2b01      	cmp	r3, #1
 801182c:	d101      	bne.n	8011832 <dir_next+0xea>
 801182e:	2302      	movs	r3, #2
 8011830:	e05c      	b.n	80118ec <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011838:	d101      	bne.n	801183e <dir_next+0xf6>
 801183a:	2301      	movs	r3, #1
 801183c:	e056      	b.n	80118ec <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801183e:	68f8      	ldr	r0, [r7, #12]
 8011840:	f7ff fadc 	bl	8010dfc <sync_window>
 8011844:	4603      	mov	r3, r0
 8011846:	2b00      	cmp	r3, #0
 8011848:	d001      	beq.n	801184e <dir_next+0x106>
 801184a:	2301      	movs	r3, #1
 801184c:	e04e      	b.n	80118ec <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	899b      	ldrh	r3, [r3, #12]
 8011858:	461a      	mov	r2, r3
 801185a:	2100      	movs	r1, #0
 801185c:	f7ff f905 	bl	8010a6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011860:	2300      	movs	r3, #0
 8011862:	613b      	str	r3, [r7, #16]
 8011864:	6979      	ldr	r1, [r7, #20]
 8011866:	68f8      	ldr	r0, [r7, #12]
 8011868:	f7ff fbaa 	bl	8010fc0 <clust2sect>
 801186c:	4602      	mov	r2, r0
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	631a      	str	r2, [r3, #48]	; 0x30
 8011872:	e012      	b.n	801189a <dir_next+0x152>
						fs->wflag = 1;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2201      	movs	r2, #1
 8011878:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801187a:	68f8      	ldr	r0, [r7, #12]
 801187c:	f7ff fabe 	bl	8010dfc <sync_window>
 8011880:	4603      	mov	r3, r0
 8011882:	2b00      	cmp	r3, #0
 8011884:	d001      	beq.n	801188a <dir_next+0x142>
 8011886:	2301      	movs	r3, #1
 8011888:	e030      	b.n	80118ec <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	3301      	adds	r3, #1
 801188e:	613b      	str	r3, [r7, #16]
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011894:	1c5a      	adds	r2, r3, #1
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	631a      	str	r2, [r3, #48]	; 0x30
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	895b      	ldrh	r3, [r3, #10]
 801189e:	461a      	mov	r2, r3
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	4293      	cmp	r3, r2
 80118a4:	d3e6      	bcc.n	8011874 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	1ad2      	subs	r2, r2, r3
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	697a      	ldr	r2, [r7, #20]
 80118b6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80118b8:	6979      	ldr	r1, [r7, #20]
 80118ba:	68f8      	ldr	r0, [r7, #12]
 80118bc:	f7ff fb80 	bl	8010fc0 <clust2sect>
 80118c0:	4602      	mov	r2, r0
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	68ba      	ldr	r2, [r7, #8]
 80118ca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	899b      	ldrh	r3, [r3, #12]
 80118d6:	461a      	mov	r2, r3
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	fbb3 f0f2 	udiv	r0, r3, r2
 80118de:	fb02 f200 	mul.w	r2, r2, r0
 80118e2:	1a9b      	subs	r3, r3, r2
 80118e4:	18ca      	adds	r2, r1, r3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80118ea:	2300      	movs	r3, #0
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3718      	adds	r7, #24
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b086      	sub	sp, #24
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011904:	2100      	movs	r1, #0
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7ff fe95 	bl	8011636 <dir_sdi>
 801190c:	4603      	mov	r3, r0
 801190e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011910:	7dfb      	ldrb	r3, [r7, #23]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d12b      	bne.n	801196e <dir_alloc+0x7a>
		n = 0;
 8011916:	2300      	movs	r3, #0
 8011918:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	69db      	ldr	r3, [r3, #28]
 801191e:	4619      	mov	r1, r3
 8011920:	68f8      	ldr	r0, [r7, #12]
 8011922:	f7ff faaf 	bl	8010e84 <move_window>
 8011926:	4603      	mov	r3, r0
 8011928:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801192a:	7dfb      	ldrb	r3, [r7, #23]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d11d      	bne.n	801196c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6a1b      	ldr	r3, [r3, #32]
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	2be5      	cmp	r3, #229	; 0xe5
 8011938:	d004      	beq.n	8011944 <dir_alloc+0x50>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6a1b      	ldr	r3, [r3, #32]
 801193e:	781b      	ldrb	r3, [r3, #0]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d107      	bne.n	8011954 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	3301      	adds	r3, #1
 8011948:	613b      	str	r3, [r7, #16]
 801194a:	693a      	ldr	r2, [r7, #16]
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	429a      	cmp	r2, r3
 8011950:	d102      	bne.n	8011958 <dir_alloc+0x64>
 8011952:	e00c      	b.n	801196e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011954:	2300      	movs	r3, #0
 8011956:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011958:	2101      	movs	r1, #1
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f7ff fef4 	bl	8011748 <dir_next>
 8011960:	4603      	mov	r3, r0
 8011962:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011964:	7dfb      	ldrb	r3, [r7, #23]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d0d7      	beq.n	801191a <dir_alloc+0x26>
 801196a:	e000      	b.n	801196e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801196c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801196e:	7dfb      	ldrb	r3, [r7, #23]
 8011970:	2b04      	cmp	r3, #4
 8011972:	d101      	bne.n	8011978 <dir_alloc+0x84>
 8011974:	2307      	movs	r3, #7
 8011976:	75fb      	strb	r3, [r7, #23]
	return res;
 8011978:	7dfb      	ldrb	r3, [r7, #23]
}
 801197a:	4618      	mov	r0, r3
 801197c:	3718      	adds	r7, #24
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}

08011982 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011982:	b580      	push	{r7, lr}
 8011984:	b084      	sub	sp, #16
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
 801198a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	331a      	adds	r3, #26
 8011990:	4618      	mov	r0, r3
 8011992:	f7fe ffc7 	bl	8010924 <ld_word>
 8011996:	4603      	mov	r3, r0
 8011998:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	2b03      	cmp	r3, #3
 80119a0:	d109      	bne.n	80119b6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	3314      	adds	r3, #20
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fe ffbc 	bl	8010924 <ld_word>
 80119ac:	4603      	mov	r3, r0
 80119ae:	041b      	lsls	r3, r3, #16
 80119b0:	68fa      	ldr	r2, [r7, #12]
 80119b2:	4313      	orrs	r3, r2
 80119b4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80119b6:	68fb      	ldr	r3, [r7, #12]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3710      	adds	r7, #16
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	60f8      	str	r0, [r7, #12]
 80119c8:	60b9      	str	r1, [r7, #8]
 80119ca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	331a      	adds	r3, #26
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	b292      	uxth	r2, r2
 80119d4:	4611      	mov	r1, r2
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fe ffdf 	bl	801099a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	2b03      	cmp	r3, #3
 80119e2:	d109      	bne.n	80119f8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	f103 0214 	add.w	r2, r3, #20
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	0c1b      	lsrs	r3, r3, #16
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	4619      	mov	r1, r3
 80119f2:	4610      	mov	r0, r2
 80119f4:	f7fe ffd1 	bl	801099a <st_word>
	}
}
 80119f8:	bf00      	nop
 80119fa:	3710      	adds	r7, #16
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b086      	sub	sp, #24
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011a0e:	2100      	movs	r1, #0
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f7ff fe10 	bl	8011636 <dir_sdi>
 8011a16:	4603      	mov	r3, r0
 8011a18:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011a1a:	7dfb      	ldrb	r3, [r7, #23]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d001      	beq.n	8011a24 <dir_find+0x24>
 8011a20:	7dfb      	ldrb	r3, [r7, #23]
 8011a22:	e03e      	b.n	8011aa2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	69db      	ldr	r3, [r3, #28]
 8011a28:	4619      	mov	r1, r3
 8011a2a:	6938      	ldr	r0, [r7, #16]
 8011a2c:	f7ff fa2a 	bl	8010e84 <move_window>
 8011a30:	4603      	mov	r3, r0
 8011a32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011a34:	7dfb      	ldrb	r3, [r7, #23]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d12f      	bne.n	8011a9a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6a1b      	ldr	r3, [r3, #32]
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011a42:	7bfb      	ldrb	r3, [r7, #15]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d102      	bne.n	8011a4e <dir_find+0x4e>
 8011a48:	2304      	movs	r3, #4
 8011a4a:	75fb      	strb	r3, [r7, #23]
 8011a4c:	e028      	b.n	8011aa0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6a1b      	ldr	r3, [r3, #32]
 8011a52:	330b      	adds	r3, #11
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011a5a:	b2da      	uxtb	r2, r3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6a1b      	ldr	r3, [r3, #32]
 8011a64:	330b      	adds	r3, #11
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	f003 0308 	and.w	r3, r3, #8
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d10a      	bne.n	8011a86 <dir_find+0x86>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	6a18      	ldr	r0, [r3, #32]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	3324      	adds	r3, #36	; 0x24
 8011a78:	220b      	movs	r2, #11
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	f7ff f80f 	bl	8010a9e <mem_cmp>
 8011a80:	4603      	mov	r3, r0
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d00b      	beq.n	8011a9e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011a86:	2100      	movs	r1, #0
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7ff fe5d 	bl	8011748 <dir_next>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011a92:	7dfb      	ldrb	r3, [r7, #23]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d0c5      	beq.n	8011a24 <dir_find+0x24>
 8011a98:	e002      	b.n	8011aa0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011a9a:	bf00      	nop
 8011a9c:	e000      	b.n	8011aa0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011a9e:	bf00      	nop

	return res;
 8011aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3718      	adds	r7, #24
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b084      	sub	sp, #16
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011ab8:	2101      	movs	r1, #1
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f7ff ff1a 	bl	80118f4 <dir_alloc>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011ac4:	7bfb      	ldrb	r3, [r7, #15]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d11c      	bne.n	8011b04 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	69db      	ldr	r3, [r3, #28]
 8011ace:	4619      	mov	r1, r3
 8011ad0:	68b8      	ldr	r0, [r7, #8]
 8011ad2:	f7ff f9d7 	bl	8010e84 <move_window>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011ada:	7bfb      	ldrb	r3, [r7, #15]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d111      	bne.n	8011b04 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6a1b      	ldr	r3, [r3, #32]
 8011ae4:	2220      	movs	r2, #32
 8011ae6:	2100      	movs	r1, #0
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7fe ffbe 	bl	8010a6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a18      	ldr	r0, [r3, #32]
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	3324      	adds	r3, #36	; 0x24
 8011af6:	220b      	movs	r2, #11
 8011af8:	4619      	mov	r1, r3
 8011afa:	f7fe ff95 	bl	8010a28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	2201      	movs	r2, #1
 8011b02:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3710      	adds	r7, #16
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
	...

08011b10 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b088      	sub	sp, #32
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
 8011b18:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	60fb      	str	r3, [r7, #12]
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	3324      	adds	r3, #36	; 0x24
 8011b24:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011b26:	220b      	movs	r2, #11
 8011b28:	2120      	movs	r1, #32
 8011b2a:	68b8      	ldr	r0, [r7, #8]
 8011b2c:	f7fe ff9d 	bl	8010a6a <mem_set>
	si = i = 0; ni = 8;
 8011b30:	2300      	movs	r3, #0
 8011b32:	613b      	str	r3, [r7, #16]
 8011b34:	693b      	ldr	r3, [r7, #16]
 8011b36:	617b      	str	r3, [r7, #20]
 8011b38:	2308      	movs	r3, #8
 8011b3a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	1c5a      	adds	r2, r3, #1
 8011b40:	617a      	str	r2, [r7, #20]
 8011b42:	68fa      	ldr	r2, [r7, #12]
 8011b44:	4413      	add	r3, r2
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011b4a:	7ffb      	ldrb	r3, [r7, #31]
 8011b4c:	2b20      	cmp	r3, #32
 8011b4e:	d94e      	bls.n	8011bee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011b50:	7ffb      	ldrb	r3, [r7, #31]
 8011b52:	2b2f      	cmp	r3, #47	; 0x2f
 8011b54:	d006      	beq.n	8011b64 <create_name+0x54>
 8011b56:	7ffb      	ldrb	r3, [r7, #31]
 8011b58:	2b5c      	cmp	r3, #92	; 0x5c
 8011b5a:	d110      	bne.n	8011b7e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011b5c:	e002      	b.n	8011b64 <create_name+0x54>
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	3301      	adds	r3, #1
 8011b62:	617b      	str	r3, [r7, #20]
 8011b64:	68fa      	ldr	r2, [r7, #12]
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	4413      	add	r3, r2
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	2b2f      	cmp	r3, #47	; 0x2f
 8011b6e:	d0f6      	beq.n	8011b5e <create_name+0x4e>
 8011b70:	68fa      	ldr	r2, [r7, #12]
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	4413      	add	r3, r2
 8011b76:	781b      	ldrb	r3, [r3, #0]
 8011b78:	2b5c      	cmp	r3, #92	; 0x5c
 8011b7a:	d0f0      	beq.n	8011b5e <create_name+0x4e>
			break;
 8011b7c:	e038      	b.n	8011bf0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011b7e:	7ffb      	ldrb	r3, [r7, #31]
 8011b80:	2b2e      	cmp	r3, #46	; 0x2e
 8011b82:	d003      	beq.n	8011b8c <create_name+0x7c>
 8011b84:	693a      	ldr	r2, [r7, #16]
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d30c      	bcc.n	8011ba6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011b8c:	69bb      	ldr	r3, [r7, #24]
 8011b8e:	2b0b      	cmp	r3, #11
 8011b90:	d002      	beq.n	8011b98 <create_name+0x88>
 8011b92:	7ffb      	ldrb	r3, [r7, #31]
 8011b94:	2b2e      	cmp	r3, #46	; 0x2e
 8011b96:	d001      	beq.n	8011b9c <create_name+0x8c>
 8011b98:	2306      	movs	r3, #6
 8011b9a:	e044      	b.n	8011c26 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011b9c:	2308      	movs	r3, #8
 8011b9e:	613b      	str	r3, [r7, #16]
 8011ba0:	230b      	movs	r3, #11
 8011ba2:	61bb      	str	r3, [r7, #24]
			continue;
 8011ba4:	e022      	b.n	8011bec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011ba6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	da04      	bge.n	8011bb8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011bae:	7ffb      	ldrb	r3, [r7, #31]
 8011bb0:	3b80      	subs	r3, #128	; 0x80
 8011bb2:	4a1f      	ldr	r2, [pc, #124]	; (8011c30 <create_name+0x120>)
 8011bb4:	5cd3      	ldrb	r3, [r2, r3]
 8011bb6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011bb8:	7ffb      	ldrb	r3, [r7, #31]
 8011bba:	4619      	mov	r1, r3
 8011bbc:	481d      	ldr	r0, [pc, #116]	; (8011c34 <create_name+0x124>)
 8011bbe:	f7fe ff95 	bl	8010aec <chk_chr>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d001      	beq.n	8011bcc <create_name+0xbc>
 8011bc8:	2306      	movs	r3, #6
 8011bca:	e02c      	b.n	8011c26 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011bcc:	7ffb      	ldrb	r3, [r7, #31]
 8011bce:	2b60      	cmp	r3, #96	; 0x60
 8011bd0:	d905      	bls.n	8011bde <create_name+0xce>
 8011bd2:	7ffb      	ldrb	r3, [r7, #31]
 8011bd4:	2b7a      	cmp	r3, #122	; 0x7a
 8011bd6:	d802      	bhi.n	8011bde <create_name+0xce>
 8011bd8:	7ffb      	ldrb	r3, [r7, #31]
 8011bda:	3b20      	subs	r3, #32
 8011bdc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8011bde:	693b      	ldr	r3, [r7, #16]
 8011be0:	1c5a      	adds	r2, r3, #1
 8011be2:	613a      	str	r2, [r7, #16]
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	4413      	add	r3, r2
 8011be8:	7ffa      	ldrb	r2, [r7, #31]
 8011bea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011bec:	e7a6      	b.n	8011b3c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011bee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011bf0:	68fa      	ldr	r2, [r7, #12]
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	441a      	add	r2, r3
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d101      	bne.n	8011c04 <create_name+0xf4>
 8011c00:	2306      	movs	r3, #6
 8011c02:	e010      	b.n	8011c26 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	2be5      	cmp	r3, #229	; 0xe5
 8011c0a:	d102      	bne.n	8011c12 <create_name+0x102>
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	2205      	movs	r2, #5
 8011c10:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011c12:	7ffb      	ldrb	r3, [r7, #31]
 8011c14:	2b20      	cmp	r3, #32
 8011c16:	d801      	bhi.n	8011c1c <create_name+0x10c>
 8011c18:	2204      	movs	r2, #4
 8011c1a:	e000      	b.n	8011c1e <create_name+0x10e>
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	330b      	adds	r3, #11
 8011c22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011c24:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3720      	adds	r7, #32
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	0801e010 	.word	0x0801e010
 8011c34:	0801d980 	.word	0x0801d980

08011c38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b086      	sub	sp, #24
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011c4c:	e002      	b.n	8011c54 <follow_path+0x1c>
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	3301      	adds	r3, #1
 8011c52:	603b      	str	r3, [r7, #0]
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	2b2f      	cmp	r3, #47	; 0x2f
 8011c5a:	d0f8      	beq.n	8011c4e <follow_path+0x16>
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	2b5c      	cmp	r3, #92	; 0x5c
 8011c62:	d0f4      	beq.n	8011c4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	2200      	movs	r2, #0
 8011c68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	2b1f      	cmp	r3, #31
 8011c70:	d80a      	bhi.n	8011c88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2280      	movs	r2, #128	; 0x80
 8011c76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011c7a:	2100      	movs	r1, #0
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f7ff fcda 	bl	8011636 <dir_sdi>
 8011c82:	4603      	mov	r3, r0
 8011c84:	75fb      	strb	r3, [r7, #23]
 8011c86:	e048      	b.n	8011d1a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011c88:	463b      	mov	r3, r7
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7ff ff3f 	bl	8011b10 <create_name>
 8011c92:	4603      	mov	r3, r0
 8011c94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011c96:	7dfb      	ldrb	r3, [r7, #23]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d139      	bne.n	8011d10 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f7ff feaf 	bl	8011a00 <dir_find>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011cac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011cae:	7dfb      	ldrb	r3, [r7, #23]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d00a      	beq.n	8011cca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011cb4:	7dfb      	ldrb	r3, [r7, #23]
 8011cb6:	2b04      	cmp	r3, #4
 8011cb8:	d12c      	bne.n	8011d14 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011cba:	7afb      	ldrb	r3, [r7, #11]
 8011cbc:	f003 0304 	and.w	r3, r3, #4
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d127      	bne.n	8011d14 <follow_path+0xdc>
 8011cc4:	2305      	movs	r3, #5
 8011cc6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011cc8:	e024      	b.n	8011d14 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011cca:	7afb      	ldrb	r3, [r7, #11]
 8011ccc:	f003 0304 	and.w	r3, r3, #4
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d121      	bne.n	8011d18 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	799b      	ldrb	r3, [r3, #6]
 8011cd8:	f003 0310 	and.w	r3, r3, #16
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d102      	bne.n	8011ce6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011ce0:	2305      	movs	r3, #5
 8011ce2:	75fb      	strb	r3, [r7, #23]
 8011ce4:	e019      	b.n	8011d1a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	695b      	ldr	r3, [r3, #20]
 8011cf0:	68fa      	ldr	r2, [r7, #12]
 8011cf2:	8992      	ldrh	r2, [r2, #12]
 8011cf4:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cf8:	fb02 f200 	mul.w	r2, r2, r0
 8011cfc:	1a9b      	subs	r3, r3, r2
 8011cfe:	440b      	add	r3, r1
 8011d00:	4619      	mov	r1, r3
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	f7ff fe3d 	bl	8011982 <ld_clust>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011d0e:	e7bb      	b.n	8011c88 <follow_path+0x50>
			if (res != FR_OK) break;
 8011d10:	bf00      	nop
 8011d12:	e002      	b.n	8011d1a <follow_path+0xe2>
				break;
 8011d14:	bf00      	nop
 8011d16:	e000      	b.n	8011d1a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011d18:	bf00      	nop
			}
		}
	}

	return res;
 8011d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3718      	adds	r7, #24
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}

08011d24 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011d24:	b480      	push	{r7}
 8011d26:	b087      	sub	sp, #28
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d30:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d031      	beq.n	8011d9e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	617b      	str	r3, [r7, #20]
 8011d40:	e002      	b.n	8011d48 <get_ldnumber+0x24>
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	3301      	adds	r3, #1
 8011d46:	617b      	str	r3, [r7, #20]
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	2b20      	cmp	r3, #32
 8011d4e:	d903      	bls.n	8011d58 <get_ldnumber+0x34>
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	2b3a      	cmp	r3, #58	; 0x3a
 8011d56:	d1f4      	bne.n	8011d42 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	781b      	ldrb	r3, [r3, #0]
 8011d5c:	2b3a      	cmp	r3, #58	; 0x3a
 8011d5e:	d11c      	bne.n	8011d9a <get_ldnumber+0x76>
			tp = *path;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	1c5a      	adds	r2, r3, #1
 8011d6a:	60fa      	str	r2, [r7, #12]
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	3b30      	subs	r3, #48	; 0x30
 8011d70:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	2b09      	cmp	r3, #9
 8011d76:	d80e      	bhi.n	8011d96 <get_ldnumber+0x72>
 8011d78:	68fa      	ldr	r2, [r7, #12]
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d10a      	bne.n	8011d96 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d107      	bne.n	8011d96 <get_ldnumber+0x72>
					vol = (int)i;
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	617b      	str	r3, [r7, #20]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	697a      	ldr	r2, [r7, #20]
 8011d94:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	e002      	b.n	8011da0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011d9e:	693b      	ldr	r3, [r7, #16]
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	371c      	adds	r7, #28
 8011da4:	46bd      	mov	sp, r7
 8011da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011daa:	4770      	bx	lr

08011dac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2200      	movs	r2, #0
 8011dba:	70da      	strb	r2, [r3, #3]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011dc4:	6839      	ldr	r1, [r7, #0]
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f7ff f85c 	bl	8010e84 <move_window>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d001      	beq.n	8011dd6 <check_fs+0x2a>
 8011dd2:	2304      	movs	r3, #4
 8011dd4:	e038      	b.n	8011e48 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	3334      	adds	r3, #52	; 0x34
 8011dda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7fe fda0 	bl	8010924 <ld_word>
 8011de4:	4603      	mov	r3, r0
 8011de6:	461a      	mov	r2, r3
 8011de8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d001      	beq.n	8011df4 <check_fs+0x48>
 8011df0:	2303      	movs	r3, #3
 8011df2:	e029      	b.n	8011e48 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011dfa:	2be9      	cmp	r3, #233	; 0xe9
 8011dfc:	d009      	beq.n	8011e12 <check_fs+0x66>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011e04:	2beb      	cmp	r3, #235	; 0xeb
 8011e06:	d11e      	bne.n	8011e46 <check_fs+0x9a>
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011e0e:	2b90      	cmp	r3, #144	; 0x90
 8011e10:	d119      	bne.n	8011e46 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	3334      	adds	r3, #52	; 0x34
 8011e16:	3336      	adds	r3, #54	; 0x36
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7fe fd9b 	bl	8010954 <ld_dword>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011e24:	4a0a      	ldr	r2, [pc, #40]	; (8011e50 <check_fs+0xa4>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d101      	bne.n	8011e2e <check_fs+0x82>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	e00c      	b.n	8011e48 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	3334      	adds	r3, #52	; 0x34
 8011e32:	3352      	adds	r3, #82	; 0x52
 8011e34:	4618      	mov	r0, r3
 8011e36:	f7fe fd8d 	bl	8010954 <ld_dword>
 8011e3a:	4602      	mov	r2, r0
 8011e3c:	4b05      	ldr	r3, [pc, #20]	; (8011e54 <check_fs+0xa8>)
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d101      	bne.n	8011e46 <check_fs+0x9a>
 8011e42:	2300      	movs	r3, #0
 8011e44:	e000      	b.n	8011e48 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011e46:	2302      	movs	r3, #2
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3708      	adds	r7, #8
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}
 8011e50:	00544146 	.word	0x00544146
 8011e54:	33544146 	.word	0x33544146

08011e58 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b096      	sub	sp, #88	; 0x58
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	4613      	mov	r3, r2
 8011e64:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	2200      	movs	r2, #0
 8011e6a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011e6c:	68f8      	ldr	r0, [r7, #12]
 8011e6e:	f7ff ff59 	bl	8011d24 <get_ldnumber>
 8011e72:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	da01      	bge.n	8011e7e <find_volume+0x26>
 8011e7a:	230b      	movs	r3, #11
 8011e7c:	e265      	b.n	801234a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011e7e:	4ab0      	ldr	r2, [pc, #704]	; (8012140 <find_volume+0x2e8>)
 8011e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e86:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d101      	bne.n	8011e92 <find_volume+0x3a>
 8011e8e:	230c      	movs	r3, #12
 8011e90:	e25b      	b.n	801234a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e96:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011e98:	79fb      	ldrb	r3, [r7, #7]
 8011e9a:	f023 0301 	bic.w	r3, r3, #1
 8011e9e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d01a      	beq.n	8011ede <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eaa:	785b      	ldrb	r3, [r3, #1]
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7fe fc9b 	bl	80107e8 <disk_status>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011eb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ebc:	f003 0301 	and.w	r3, r3, #1
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d10c      	bne.n	8011ede <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011ec4:	79fb      	ldrb	r3, [r7, #7]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d007      	beq.n	8011eda <find_volume+0x82>
 8011eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ece:	f003 0304 	and.w	r3, r3, #4
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d001      	beq.n	8011eda <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011ed6:	230a      	movs	r3, #10
 8011ed8:	e237      	b.n	801234a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8011eda:	2300      	movs	r3, #0
 8011edc:	e235      	b.n	801234a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ee6:	b2da      	uxtb	r2, r3
 8011ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eee:	785b      	ldrb	r3, [r3, #1]
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fe fc93 	bl	801081c <disk_initialize>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f00:	f003 0301 	and.w	r3, r3, #1
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d001      	beq.n	8011f0c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011f08:	2303      	movs	r3, #3
 8011f0a:	e21e      	b.n	801234a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011f0c:	79fb      	ldrb	r3, [r7, #7]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d007      	beq.n	8011f22 <find_volume+0xca>
 8011f12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f16:	f003 0304 	and.w	r3, r3, #4
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d001      	beq.n	8011f22 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011f1e:	230a      	movs	r3, #10
 8011f20:	e213      	b.n	801234a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f24:	7858      	ldrb	r0, [r3, #1]
 8011f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f28:	330c      	adds	r3, #12
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	2102      	movs	r1, #2
 8011f2e:	f7fe fcdb 	bl	80108e8 <disk_ioctl>
 8011f32:	4603      	mov	r3, r0
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d001      	beq.n	8011f3c <find_volume+0xe4>
 8011f38:	2301      	movs	r3, #1
 8011f3a:	e206      	b.n	801234a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f3e:	899b      	ldrh	r3, [r3, #12]
 8011f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f44:	d80d      	bhi.n	8011f62 <find_volume+0x10a>
 8011f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f48:	899b      	ldrh	r3, [r3, #12]
 8011f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f4e:	d308      	bcc.n	8011f62 <find_volume+0x10a>
 8011f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f52:	899b      	ldrh	r3, [r3, #12]
 8011f54:	461a      	mov	r2, r3
 8011f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f58:	899b      	ldrh	r3, [r3, #12]
 8011f5a:	3b01      	subs	r3, #1
 8011f5c:	4013      	ands	r3, r2
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d001      	beq.n	8011f66 <find_volume+0x10e>
 8011f62:	2301      	movs	r3, #1
 8011f64:	e1f1      	b.n	801234a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011f66:	2300      	movs	r3, #0
 8011f68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011f6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011f6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011f6e:	f7ff ff1d 	bl	8011dac <check_fs>
 8011f72:	4603      	mov	r3, r0
 8011f74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f7c:	2b02      	cmp	r3, #2
 8011f7e:	d14b      	bne.n	8012018 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011f80:	2300      	movs	r3, #0
 8011f82:	643b      	str	r3, [r7, #64]	; 0x40
 8011f84:	e01f      	b.n	8011fc6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f8e:	011b      	lsls	r3, r3, #4
 8011f90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011f94:	4413      	add	r3, r2
 8011f96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f9a:	3304      	adds	r3, #4
 8011f9c:	781b      	ldrb	r3, [r3, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d006      	beq.n	8011fb0 <find_volume+0x158>
 8011fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa4:	3308      	adds	r3, #8
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7fe fcd4 	bl	8010954 <ld_dword>
 8011fac:	4602      	mov	r2, r0
 8011fae:	e000      	b.n	8011fb2 <find_volume+0x15a>
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fb4:	009b      	lsls	r3, r3, #2
 8011fb6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011fba:	440b      	add	r3, r1
 8011fbc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8011fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fc8:	2b03      	cmp	r3, #3
 8011fca:	d9dc      	bls.n	8011f86 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011fcc:	2300      	movs	r3, #0
 8011fce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d002      	beq.n	8011fdc <find_volume+0x184>
 8011fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fd8:	3b01      	subs	r3, #1
 8011fda:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fde:	009b      	lsls	r3, r3, #2
 8011fe0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011fe4:	4413      	add	r3, r2
 8011fe6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011fea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d005      	beq.n	8011ffe <find_volume+0x1a6>
 8011ff2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ff4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ff6:	f7ff fed9 	bl	8011dac <check_fs>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	e000      	b.n	8012000 <find_volume+0x1a8>
 8011ffe:	2303      	movs	r3, #3
 8012000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012004:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012008:	2b01      	cmp	r3, #1
 801200a:	d905      	bls.n	8012018 <find_volume+0x1c0>
 801200c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801200e:	3301      	adds	r3, #1
 8012010:	643b      	str	r3, [r7, #64]	; 0x40
 8012012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012014:	2b03      	cmp	r3, #3
 8012016:	d9e1      	bls.n	8011fdc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801201c:	2b04      	cmp	r3, #4
 801201e:	d101      	bne.n	8012024 <find_volume+0x1cc>
 8012020:	2301      	movs	r3, #1
 8012022:	e192      	b.n	801234a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012024:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012028:	2b01      	cmp	r3, #1
 801202a:	d901      	bls.n	8012030 <find_volume+0x1d8>
 801202c:	230d      	movs	r3, #13
 801202e:	e18c      	b.n	801234a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012032:	3334      	adds	r3, #52	; 0x34
 8012034:	330b      	adds	r3, #11
 8012036:	4618      	mov	r0, r3
 8012038:	f7fe fc74 	bl	8010924 <ld_word>
 801203c:	4603      	mov	r3, r0
 801203e:	461a      	mov	r2, r3
 8012040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012042:	899b      	ldrh	r3, [r3, #12]
 8012044:	429a      	cmp	r2, r3
 8012046:	d001      	beq.n	801204c <find_volume+0x1f4>
 8012048:	230d      	movs	r3, #13
 801204a:	e17e      	b.n	801234a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204e:	3334      	adds	r3, #52	; 0x34
 8012050:	3316      	adds	r3, #22
 8012052:	4618      	mov	r0, r3
 8012054:	f7fe fc66 	bl	8010924 <ld_word>
 8012058:	4603      	mov	r3, r0
 801205a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801205c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801205e:	2b00      	cmp	r3, #0
 8012060:	d106      	bne.n	8012070 <find_volume+0x218>
 8012062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012064:	3334      	adds	r3, #52	; 0x34
 8012066:	3324      	adds	r3, #36	; 0x24
 8012068:	4618      	mov	r0, r3
 801206a:	f7fe fc73 	bl	8010954 <ld_dword>
 801206e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012074:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012078:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801207c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012082:	789b      	ldrb	r3, [r3, #2]
 8012084:	2b01      	cmp	r3, #1
 8012086:	d005      	beq.n	8012094 <find_volume+0x23c>
 8012088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801208a:	789b      	ldrb	r3, [r3, #2]
 801208c:	2b02      	cmp	r3, #2
 801208e:	d001      	beq.n	8012094 <find_volume+0x23c>
 8012090:	230d      	movs	r3, #13
 8012092:	e15a      	b.n	801234a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012096:	789b      	ldrb	r3, [r3, #2]
 8012098:	461a      	mov	r2, r3
 801209a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801209c:	fb02 f303 	mul.w	r3, r2, r3
 80120a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80120a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80120a8:	b29a      	uxth	r2, r3
 80120aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80120ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b0:	895b      	ldrh	r3, [r3, #10]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d008      	beq.n	80120c8 <find_volume+0x270>
 80120b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b8:	895b      	ldrh	r3, [r3, #10]
 80120ba:	461a      	mov	r2, r3
 80120bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120be:	895b      	ldrh	r3, [r3, #10]
 80120c0:	3b01      	subs	r3, #1
 80120c2:	4013      	ands	r3, r2
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d001      	beq.n	80120cc <find_volume+0x274>
 80120c8:	230d      	movs	r3, #13
 80120ca:	e13e      	b.n	801234a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80120cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ce:	3334      	adds	r3, #52	; 0x34
 80120d0:	3311      	adds	r3, #17
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe fc26 	bl	8010924 <ld_word>
 80120d8:	4603      	mov	r3, r0
 80120da:	461a      	mov	r2, r3
 80120dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80120e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e2:	891b      	ldrh	r3, [r3, #8]
 80120e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120e6:	8992      	ldrh	r2, [r2, #12]
 80120e8:	0952      	lsrs	r2, r2, #5
 80120ea:	b292      	uxth	r2, r2
 80120ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80120f0:	fb02 f201 	mul.w	r2, r2, r1
 80120f4:	1a9b      	subs	r3, r3, r2
 80120f6:	b29b      	uxth	r3, r3
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d001      	beq.n	8012100 <find_volume+0x2a8>
 80120fc:	230d      	movs	r3, #13
 80120fe:	e124      	b.n	801234a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012102:	3334      	adds	r3, #52	; 0x34
 8012104:	3313      	adds	r3, #19
 8012106:	4618      	mov	r0, r3
 8012108:	f7fe fc0c 	bl	8010924 <ld_word>
 801210c:	4603      	mov	r3, r0
 801210e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012112:	2b00      	cmp	r3, #0
 8012114:	d106      	bne.n	8012124 <find_volume+0x2cc>
 8012116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012118:	3334      	adds	r3, #52	; 0x34
 801211a:	3320      	adds	r3, #32
 801211c:	4618      	mov	r0, r3
 801211e:	f7fe fc19 	bl	8010954 <ld_dword>
 8012122:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012126:	3334      	adds	r3, #52	; 0x34
 8012128:	330e      	adds	r3, #14
 801212a:	4618      	mov	r0, r3
 801212c:	f7fe fbfa 	bl	8010924 <ld_word>
 8012130:	4603      	mov	r3, r0
 8012132:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012134:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012136:	2b00      	cmp	r3, #0
 8012138:	d104      	bne.n	8012144 <find_volume+0x2ec>
 801213a:	230d      	movs	r3, #13
 801213c:	e105      	b.n	801234a <find_volume+0x4f2>
 801213e:	bf00      	nop
 8012140:	200005b0 	.word	0x200005b0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012144:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012148:	4413      	add	r3, r2
 801214a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801214c:	8911      	ldrh	r1, [r2, #8]
 801214e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012150:	8992      	ldrh	r2, [r2, #12]
 8012152:	0952      	lsrs	r2, r2, #5
 8012154:	b292      	uxth	r2, r2
 8012156:	fbb1 f2f2 	udiv	r2, r1, r2
 801215a:	b292      	uxth	r2, r2
 801215c:	4413      	add	r3, r2
 801215e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012164:	429a      	cmp	r2, r3
 8012166:	d201      	bcs.n	801216c <find_volume+0x314>
 8012168:	230d      	movs	r3, #13
 801216a:	e0ee      	b.n	801234a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801216c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012170:	1ad3      	subs	r3, r2, r3
 8012172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012174:	8952      	ldrh	r2, [r2, #10]
 8012176:	fbb3 f3f2 	udiv	r3, r3, r2
 801217a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217e:	2b00      	cmp	r3, #0
 8012180:	d101      	bne.n	8012186 <find_volume+0x32e>
 8012182:	230d      	movs	r3, #13
 8012184:	e0e1      	b.n	801234a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8012186:	2303      	movs	r3, #3
 8012188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012192:	4293      	cmp	r3, r2
 8012194:	d802      	bhi.n	801219c <find_volume+0x344>
 8012196:	2302      	movs	r3, #2
 8012198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219e:	f640 72f5 	movw	r2, #4085	; 0xff5
 80121a2:	4293      	cmp	r3, r2
 80121a4:	d802      	bhi.n	80121ac <find_volume+0x354>
 80121a6:	2301      	movs	r3, #1
 80121a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80121ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ae:	1c9a      	adds	r2, r3, #2
 80121b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80121b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80121b8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80121ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80121bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121be:	441a      	add	r2, r3
 80121c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80121c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80121c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c8:	441a      	add	r2, r3
 80121ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121cc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80121ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121d2:	2b03      	cmp	r3, #3
 80121d4:	d11e      	bne.n	8012214 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80121d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121d8:	3334      	adds	r3, #52	; 0x34
 80121da:	332a      	adds	r3, #42	; 0x2a
 80121dc:	4618      	mov	r0, r3
 80121de:	f7fe fba1 	bl	8010924 <ld_word>
 80121e2:	4603      	mov	r3, r0
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d001      	beq.n	80121ec <find_volume+0x394>
 80121e8:	230d      	movs	r3, #13
 80121ea:	e0ae      	b.n	801234a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80121ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ee:	891b      	ldrh	r3, [r3, #8]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d001      	beq.n	80121f8 <find_volume+0x3a0>
 80121f4:	230d      	movs	r3, #13
 80121f6:	e0a8      	b.n	801234a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80121f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121fa:	3334      	adds	r3, #52	; 0x34
 80121fc:	332c      	adds	r3, #44	; 0x2c
 80121fe:	4618      	mov	r0, r3
 8012200:	f7fe fba8 	bl	8010954 <ld_dword>
 8012204:	4602      	mov	r2, r0
 8012206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012208:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220c:	699b      	ldr	r3, [r3, #24]
 801220e:	009b      	lsls	r3, r3, #2
 8012210:	647b      	str	r3, [r7, #68]	; 0x44
 8012212:	e01f      	b.n	8012254 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012216:	891b      	ldrh	r3, [r3, #8]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d101      	bne.n	8012220 <find_volume+0x3c8>
 801221c:	230d      	movs	r3, #13
 801221e:	e094      	b.n	801234a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012226:	441a      	add	r2, r3
 8012228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801222c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012230:	2b02      	cmp	r3, #2
 8012232:	d103      	bne.n	801223c <find_volume+0x3e4>
 8012234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012236:	699b      	ldr	r3, [r3, #24]
 8012238:	005b      	lsls	r3, r3, #1
 801223a:	e00a      	b.n	8012252 <find_volume+0x3fa>
 801223c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801223e:	699a      	ldr	r2, [r3, #24]
 8012240:	4613      	mov	r3, r2
 8012242:	005b      	lsls	r3, r3, #1
 8012244:	4413      	add	r3, r2
 8012246:	085a      	lsrs	r2, r3, #1
 8012248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801224a:	699b      	ldr	r3, [r3, #24]
 801224c:	f003 0301 	and.w	r3, r3, #1
 8012250:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012252:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012256:	69da      	ldr	r2, [r3, #28]
 8012258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225a:	899b      	ldrh	r3, [r3, #12]
 801225c:	4619      	mov	r1, r3
 801225e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012260:	440b      	add	r3, r1
 8012262:	3b01      	subs	r3, #1
 8012264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012266:	8989      	ldrh	r1, [r1, #12]
 8012268:	fbb3 f3f1 	udiv	r3, r3, r1
 801226c:	429a      	cmp	r2, r3
 801226e:	d201      	bcs.n	8012274 <find_volume+0x41c>
 8012270:	230d      	movs	r3, #13
 8012272:	e06a      	b.n	801234a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012276:	f04f 32ff 	mov.w	r2, #4294967295
 801227a:	615a      	str	r2, [r3, #20]
 801227c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801227e:	695a      	ldr	r2, [r3, #20]
 8012280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012282:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012286:	2280      	movs	r2, #128	; 0x80
 8012288:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801228a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801228e:	2b03      	cmp	r3, #3
 8012290:	d149      	bne.n	8012326 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012294:	3334      	adds	r3, #52	; 0x34
 8012296:	3330      	adds	r3, #48	; 0x30
 8012298:	4618      	mov	r0, r3
 801229a:	f7fe fb43 	bl	8010924 <ld_word>
 801229e:	4603      	mov	r3, r0
 80122a0:	2b01      	cmp	r3, #1
 80122a2:	d140      	bne.n	8012326 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80122a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122a6:	3301      	adds	r3, #1
 80122a8:	4619      	mov	r1, r3
 80122aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80122ac:	f7fe fdea 	bl	8010e84 <move_window>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d137      	bne.n	8012326 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80122b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b8:	2200      	movs	r2, #0
 80122ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80122bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122be:	3334      	adds	r3, #52	; 0x34
 80122c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7fe fb2d 	bl	8010924 <ld_word>
 80122ca:	4603      	mov	r3, r0
 80122cc:	461a      	mov	r2, r3
 80122ce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d127      	bne.n	8012326 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80122d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122d8:	3334      	adds	r3, #52	; 0x34
 80122da:	4618      	mov	r0, r3
 80122dc:	f7fe fb3a 	bl	8010954 <ld_dword>
 80122e0:	4602      	mov	r2, r0
 80122e2:	4b1c      	ldr	r3, [pc, #112]	; (8012354 <find_volume+0x4fc>)
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d11e      	bne.n	8012326 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80122e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ea:	3334      	adds	r3, #52	; 0x34
 80122ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80122f0:	4618      	mov	r0, r3
 80122f2:	f7fe fb2f 	bl	8010954 <ld_dword>
 80122f6:	4602      	mov	r2, r0
 80122f8:	4b17      	ldr	r3, [pc, #92]	; (8012358 <find_volume+0x500>)
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d113      	bne.n	8012326 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80122fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012300:	3334      	adds	r3, #52	; 0x34
 8012302:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012306:	4618      	mov	r0, r3
 8012308:	f7fe fb24 	bl	8010954 <ld_dword>
 801230c:	4602      	mov	r2, r0
 801230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012310:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012314:	3334      	adds	r3, #52	; 0x34
 8012316:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801231a:	4618      	mov	r0, r3
 801231c:	f7fe fb1a 	bl	8010954 <ld_dword>
 8012320:	4602      	mov	r2, r0
 8012322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012324:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012328:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801232c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801232e:	4b0b      	ldr	r3, [pc, #44]	; (801235c <find_volume+0x504>)
 8012330:	881b      	ldrh	r3, [r3, #0]
 8012332:	3301      	adds	r3, #1
 8012334:	b29a      	uxth	r2, r3
 8012336:	4b09      	ldr	r3, [pc, #36]	; (801235c <find_volume+0x504>)
 8012338:	801a      	strh	r2, [r3, #0]
 801233a:	4b08      	ldr	r3, [pc, #32]	; (801235c <find_volume+0x504>)
 801233c:	881a      	ldrh	r2, [r3, #0]
 801233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012340:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012342:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012344:	f7fe fd36 	bl	8010db4 <clear_lock>
#endif
	return FR_OK;
 8012348:	2300      	movs	r3, #0
}
 801234a:	4618      	mov	r0, r3
 801234c:	3758      	adds	r7, #88	; 0x58
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop
 8012354:	41615252 	.word	0x41615252
 8012358:	61417272 	.word	0x61417272
 801235c:	200005b4 	.word	0x200005b4

08012360 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b084      	sub	sp, #16
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801236a:	2309      	movs	r3, #9
 801236c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d01c      	beq.n	80123ae <validate+0x4e>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d018      	beq.n	80123ae <validate+0x4e>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d013      	beq.n	80123ae <validate+0x4e>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	889a      	ldrh	r2, [r3, #4]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	88db      	ldrh	r3, [r3, #6]
 8012390:	429a      	cmp	r2, r3
 8012392:	d10c      	bne.n	80123ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	785b      	ldrb	r3, [r3, #1]
 801239a:	4618      	mov	r0, r3
 801239c:	f7fe fa24 	bl	80107e8 <disk_status>
 80123a0:	4603      	mov	r3, r0
 80123a2:	f003 0301 	and.w	r3, r3, #1
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d101      	bne.n	80123ae <validate+0x4e>
			res = FR_OK;
 80123aa:	2300      	movs	r3, #0
 80123ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80123ae:	7bfb      	ldrb	r3, [r7, #15]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d102      	bne.n	80123ba <validate+0x5a>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	e000      	b.n	80123bc <validate+0x5c>
 80123ba:	2300      	movs	r3, #0
 80123bc:	683a      	ldr	r2, [r7, #0]
 80123be:	6013      	str	r3, [r2, #0]
	return res;
 80123c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3710      	adds	r7, #16
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}
	...

080123cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b088      	sub	sp, #32
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	60f8      	str	r0, [r7, #12]
 80123d4:	60b9      	str	r1, [r7, #8]
 80123d6:	4613      	mov	r3, r2
 80123d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80123de:	f107 0310 	add.w	r3, r7, #16
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7ff fc9e 	bl	8011d24 <get_ldnumber>
 80123e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	da01      	bge.n	80123f4 <f_mount+0x28>
 80123f0:	230b      	movs	r3, #11
 80123f2:	e02b      	b.n	801244c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80123f4:	4a17      	ldr	r2, [pc, #92]	; (8012454 <f_mount+0x88>)
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80123fe:	69bb      	ldr	r3, [r7, #24]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d005      	beq.n	8012410 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012404:	69b8      	ldr	r0, [r7, #24]
 8012406:	f7fe fcd5 	bl	8010db4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	2200      	movs	r2, #0
 801240e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d002      	beq.n	801241c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	2200      	movs	r2, #0
 801241a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801241c:	68fa      	ldr	r2, [r7, #12]
 801241e:	490d      	ldr	r1, [pc, #52]	; (8012454 <f_mount+0x88>)
 8012420:	69fb      	ldr	r3, [r7, #28]
 8012422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d002      	beq.n	8012432 <f_mount+0x66>
 801242c:	79fb      	ldrb	r3, [r7, #7]
 801242e:	2b01      	cmp	r3, #1
 8012430:	d001      	beq.n	8012436 <f_mount+0x6a>
 8012432:	2300      	movs	r3, #0
 8012434:	e00a      	b.n	801244c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012436:	f107 010c 	add.w	r1, r7, #12
 801243a:	f107 0308 	add.w	r3, r7, #8
 801243e:	2200      	movs	r2, #0
 8012440:	4618      	mov	r0, r3
 8012442:	f7ff fd09 	bl	8011e58 <find_volume>
 8012446:	4603      	mov	r3, r0
 8012448:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801244a:	7dfb      	ldrb	r3, [r7, #23]
}
 801244c:	4618      	mov	r0, r3
 801244e:	3720      	adds	r7, #32
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	200005b0 	.word	0x200005b0

08012458 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b098      	sub	sp, #96	; 0x60
 801245c:	af00      	add	r7, sp, #0
 801245e:	60f8      	str	r0, [r7, #12]
 8012460:	60b9      	str	r1, [r7, #8]
 8012462:	4613      	mov	r3, r2
 8012464:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d101      	bne.n	8012470 <f_open+0x18>
 801246c:	2309      	movs	r3, #9
 801246e:	e1bb      	b.n	80127e8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012470:	79fb      	ldrb	r3, [r7, #7]
 8012472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012476:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012478:	79fa      	ldrb	r2, [r7, #7]
 801247a:	f107 0110 	add.w	r1, r7, #16
 801247e:	f107 0308 	add.w	r3, r7, #8
 8012482:	4618      	mov	r0, r3
 8012484:	f7ff fce8 	bl	8011e58 <find_volume>
 8012488:	4603      	mov	r3, r0
 801248a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801248e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012492:	2b00      	cmp	r3, #0
 8012494:	f040 819f 	bne.w	80127d6 <f_open+0x37e>
		dj.obj.fs = fs;
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801249c:	68ba      	ldr	r2, [r7, #8]
 801249e:	f107 0314 	add.w	r3, r7, #20
 80124a2:	4611      	mov	r1, r2
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7ff fbc7 	bl	8011c38 <follow_path>
 80124aa:	4603      	mov	r3, r0
 80124ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80124b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d11a      	bne.n	80124ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80124b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80124bc:	b25b      	sxtb	r3, r3
 80124be:	2b00      	cmp	r3, #0
 80124c0:	da03      	bge.n	80124ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80124c2:	2306      	movs	r3, #6
 80124c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80124c8:	e011      	b.n	80124ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80124ca:	79fb      	ldrb	r3, [r7, #7]
 80124cc:	f023 0301 	bic.w	r3, r3, #1
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	bf14      	ite	ne
 80124d4:	2301      	movne	r3, #1
 80124d6:	2300      	moveq	r3, #0
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	461a      	mov	r2, r3
 80124dc:	f107 0314 	add.w	r3, r7, #20
 80124e0:	4611      	mov	r1, r2
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7fe fb1e 	bl	8010b24 <chk_lock>
 80124e8:	4603      	mov	r3, r0
 80124ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80124ee:	79fb      	ldrb	r3, [r7, #7]
 80124f0:	f003 031c 	and.w	r3, r3, #28
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d07f      	beq.n	80125f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80124f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d017      	beq.n	8012530 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012504:	2b04      	cmp	r3, #4
 8012506:	d10e      	bne.n	8012526 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012508:	f7fe fb68 	bl	8010bdc <enq_lock>
 801250c:	4603      	mov	r3, r0
 801250e:	2b00      	cmp	r3, #0
 8012510:	d006      	beq.n	8012520 <f_open+0xc8>
 8012512:	f107 0314 	add.w	r3, r7, #20
 8012516:	4618      	mov	r0, r3
 8012518:	f7ff fac7 	bl	8011aaa <dir_register>
 801251c:	4603      	mov	r3, r0
 801251e:	e000      	b.n	8012522 <f_open+0xca>
 8012520:	2312      	movs	r3, #18
 8012522:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012526:	79fb      	ldrb	r3, [r7, #7]
 8012528:	f043 0308 	orr.w	r3, r3, #8
 801252c:	71fb      	strb	r3, [r7, #7]
 801252e:	e010      	b.n	8012552 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012530:	7ebb      	ldrb	r3, [r7, #26]
 8012532:	f003 0311 	and.w	r3, r3, #17
 8012536:	2b00      	cmp	r3, #0
 8012538:	d003      	beq.n	8012542 <f_open+0xea>
					res = FR_DENIED;
 801253a:	2307      	movs	r3, #7
 801253c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012540:	e007      	b.n	8012552 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012542:	79fb      	ldrb	r3, [r7, #7]
 8012544:	f003 0304 	and.w	r3, r3, #4
 8012548:	2b00      	cmp	r3, #0
 801254a:	d002      	beq.n	8012552 <f_open+0xfa>
 801254c:	2308      	movs	r3, #8
 801254e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012556:	2b00      	cmp	r3, #0
 8012558:	d168      	bne.n	801262c <f_open+0x1d4>
 801255a:	79fb      	ldrb	r3, [r7, #7]
 801255c:	f003 0308 	and.w	r3, r3, #8
 8012560:	2b00      	cmp	r3, #0
 8012562:	d063      	beq.n	801262c <f_open+0x1d4>
				dw = GET_FATTIME();
 8012564:	f000 fdf2 	bl	801314c <get_fattime>
 8012568:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801256c:	330e      	adds	r3, #14
 801256e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012570:	4618      	mov	r0, r3
 8012572:	f7fe fa2d 	bl	80109d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012578:	3316      	adds	r3, #22
 801257a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801257c:	4618      	mov	r0, r3
 801257e:	f7fe fa27 	bl	80109d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012584:	330b      	adds	r3, #11
 8012586:	2220      	movs	r2, #32
 8012588:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801258e:	4611      	mov	r1, r2
 8012590:	4618      	mov	r0, r3
 8012592:	f7ff f9f6 	bl	8011982 <ld_clust>
 8012596:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801259c:	2200      	movs	r2, #0
 801259e:	4618      	mov	r0, r3
 80125a0:	f7ff fa0e 	bl	80119c0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80125a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125a6:	331c      	adds	r3, #28
 80125a8:	2100      	movs	r1, #0
 80125aa:	4618      	mov	r0, r3
 80125ac:	f7fe fa10 	bl	80109d0 <st_dword>
					fs->wflag = 1;
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	2201      	movs	r2, #1
 80125b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80125b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d037      	beq.n	801262c <f_open+0x1d4>
						dw = fs->winsect;
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80125c2:	f107 0314 	add.w	r3, r7, #20
 80125c6:	2200      	movs	r2, #0
 80125c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fe fefe 	bl	80113cc <remove_chain>
 80125d0:	4603      	mov	r3, r0
 80125d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80125d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d126      	bne.n	801262c <f_open+0x1d4>
							res = move_window(fs, dw);
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fe fc4e 	bl	8010e84 <move_window>
 80125e8:	4603      	mov	r3, r0
 80125ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80125f2:	3a01      	subs	r2, #1
 80125f4:	611a      	str	r2, [r3, #16]
 80125f6:	e019      	b.n	801262c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80125f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d115      	bne.n	801262c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012600:	7ebb      	ldrb	r3, [r7, #26]
 8012602:	f003 0310 	and.w	r3, r3, #16
 8012606:	2b00      	cmp	r3, #0
 8012608:	d003      	beq.n	8012612 <f_open+0x1ba>
					res = FR_NO_FILE;
 801260a:	2304      	movs	r3, #4
 801260c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012610:	e00c      	b.n	801262c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012612:	79fb      	ldrb	r3, [r7, #7]
 8012614:	f003 0302 	and.w	r3, r3, #2
 8012618:	2b00      	cmp	r3, #0
 801261a:	d007      	beq.n	801262c <f_open+0x1d4>
 801261c:	7ebb      	ldrb	r3, [r7, #26]
 801261e:	f003 0301 	and.w	r3, r3, #1
 8012622:	2b00      	cmp	r3, #0
 8012624:	d002      	beq.n	801262c <f_open+0x1d4>
						res = FR_DENIED;
 8012626:	2307      	movs	r3, #7
 8012628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801262c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012630:	2b00      	cmp	r3, #0
 8012632:	d128      	bne.n	8012686 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012634:	79fb      	ldrb	r3, [r7, #7]
 8012636:	f003 0308 	and.w	r3, r3, #8
 801263a:	2b00      	cmp	r3, #0
 801263c:	d003      	beq.n	8012646 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801263e:	79fb      	ldrb	r3, [r7, #7]
 8012640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012644:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012646:	693b      	ldr	r3, [r7, #16]
 8012648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801264e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012654:	79fb      	ldrb	r3, [r7, #7]
 8012656:	f023 0301 	bic.w	r3, r3, #1
 801265a:	2b00      	cmp	r3, #0
 801265c:	bf14      	ite	ne
 801265e:	2301      	movne	r3, #1
 8012660:	2300      	moveq	r3, #0
 8012662:	b2db      	uxtb	r3, r3
 8012664:	461a      	mov	r2, r3
 8012666:	f107 0314 	add.w	r3, r7, #20
 801266a:	4611      	mov	r1, r2
 801266c:	4618      	mov	r0, r3
 801266e:	f7fe fad7 	bl	8010c20 <inc_lock>
 8012672:	4602      	mov	r2, r0
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	691b      	ldr	r3, [r3, #16]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d102      	bne.n	8012686 <f_open+0x22e>
 8012680:	2302      	movs	r3, #2
 8012682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801268a:	2b00      	cmp	r3, #0
 801268c:	f040 80a3 	bne.w	80127d6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012694:	4611      	mov	r1, r2
 8012696:	4618      	mov	r0, r3
 8012698:	f7ff f973 	bl	8011982 <ld_clust>
 801269c:	4602      	mov	r2, r0
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80126a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126a4:	331c      	adds	r3, #28
 80126a6:	4618      	mov	r0, r3
 80126a8:	f7fe f954 	bl	8010954 <ld_dword>
 80126ac:	4602      	mov	r2, r0
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2200      	movs	r2, #0
 80126b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80126b8:	693a      	ldr	r2, [r7, #16]
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	88da      	ldrh	r2, [r3, #6]
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	79fa      	ldrb	r2, [r7, #7]
 80126ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	2200      	movs	r2, #0
 80126d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	2200      	movs	r2, #0
 80126d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	2200      	movs	r2, #0
 80126dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	3330      	adds	r3, #48	; 0x30
 80126e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80126e6:	2100      	movs	r1, #0
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7fe f9be 	bl	8010a6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80126ee:	79fb      	ldrb	r3, [r7, #7]
 80126f0:	f003 0320 	and.w	r3, r3, #32
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d06e      	beq.n	80127d6 <f_open+0x37e>
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	68db      	ldr	r3, [r3, #12]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d06a      	beq.n	80127d6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	68da      	ldr	r2, [r3, #12]
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	895b      	ldrh	r3, [r3, #10]
 801270c:	461a      	mov	r2, r3
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	899b      	ldrh	r3, [r3, #12]
 8012712:	fb03 f302 	mul.w	r3, r3, r2
 8012716:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	689b      	ldr	r3, [r3, #8]
 801271c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	68db      	ldr	r3, [r3, #12]
 8012722:	657b      	str	r3, [r7, #84]	; 0x54
 8012724:	e016      	b.n	8012754 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801272a:	4618      	mov	r0, r3
 801272c:	f7fe fc67 	bl	8010ffe <get_fat>
 8012730:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012734:	2b01      	cmp	r3, #1
 8012736:	d802      	bhi.n	801273e <f_open+0x2e6>
 8012738:	2302      	movs	r3, #2
 801273a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801273e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012744:	d102      	bne.n	801274c <f_open+0x2f4>
 8012746:	2301      	movs	r3, #1
 8012748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801274c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801274e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012750:	1ad3      	subs	r3, r2, r3
 8012752:	657b      	str	r3, [r7, #84]	; 0x54
 8012754:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012758:	2b00      	cmp	r3, #0
 801275a:	d103      	bne.n	8012764 <f_open+0x30c>
 801275c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801275e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012760:	429a      	cmp	r2, r3
 8012762:	d8e0      	bhi.n	8012726 <f_open+0x2ce>
				}
				fp->clust = clst;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012768:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801276a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801276e:	2b00      	cmp	r3, #0
 8012770:	d131      	bne.n	80127d6 <f_open+0x37e>
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	899b      	ldrh	r3, [r3, #12]
 8012776:	461a      	mov	r2, r3
 8012778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801277a:	fbb3 f1f2 	udiv	r1, r3, r2
 801277e:	fb02 f201 	mul.w	r2, r2, r1
 8012782:	1a9b      	subs	r3, r3, r2
 8012784:	2b00      	cmp	r3, #0
 8012786:	d026      	beq.n	80127d6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801278c:	4618      	mov	r0, r3
 801278e:	f7fe fc17 	bl	8010fc0 <clust2sect>
 8012792:	6478      	str	r0, [r7, #68]	; 0x44
 8012794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012796:	2b00      	cmp	r3, #0
 8012798:	d103      	bne.n	80127a2 <f_open+0x34a>
						res = FR_INT_ERR;
 801279a:	2302      	movs	r3, #2
 801279c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80127a0:	e019      	b.n	80127d6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	899b      	ldrh	r3, [r3, #12]
 80127a6:	461a      	mov	r2, r3
 80127a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80127ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127b0:	441a      	add	r2, r3
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	7858      	ldrb	r0, [r3, #1]
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	6a1a      	ldr	r2, [r3, #32]
 80127c4:	2301      	movs	r3, #1
 80127c6:	f7fe f84f 	bl	8010868 <disk_read>
 80127ca:	4603      	mov	r3, r0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d002      	beq.n	80127d6 <f_open+0x37e>
 80127d0:	2301      	movs	r3, #1
 80127d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80127d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d002      	beq.n	80127e4 <f_open+0x38c>
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	2200      	movs	r2, #0
 80127e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80127e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3760      	adds	r7, #96	; 0x60
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b08c      	sub	sp, #48	; 0x30
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	60b9      	str	r1, [r7, #8]
 80127fa:	607a      	str	r2, [r7, #4]
 80127fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	2200      	movs	r2, #0
 8012806:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	f107 0210 	add.w	r2, r7, #16
 801280e:	4611      	mov	r1, r2
 8012810:	4618      	mov	r0, r3
 8012812:	f7ff fda5 	bl	8012360 <validate>
 8012816:	4603      	mov	r3, r0
 8012818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801281c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012820:	2b00      	cmp	r3, #0
 8012822:	d107      	bne.n	8012834 <f_write+0x44>
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	7d5b      	ldrb	r3, [r3, #21]
 8012828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801282c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012830:	2b00      	cmp	r3, #0
 8012832:	d002      	beq.n	801283a <f_write+0x4a>
 8012834:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012838:	e16a      	b.n	8012b10 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	7d1b      	ldrb	r3, [r3, #20]
 801283e:	f003 0302 	and.w	r3, r3, #2
 8012842:	2b00      	cmp	r3, #0
 8012844:	d101      	bne.n	801284a <f_write+0x5a>
 8012846:	2307      	movs	r3, #7
 8012848:	e162      	b.n	8012b10 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	699a      	ldr	r2, [r3, #24]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	441a      	add	r2, r3
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	699b      	ldr	r3, [r3, #24]
 8012856:	429a      	cmp	r2, r3
 8012858:	f080 814c 	bcs.w	8012af4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	699b      	ldr	r3, [r3, #24]
 8012860:	43db      	mvns	r3, r3
 8012862:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012864:	e146      	b.n	8012af4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	699b      	ldr	r3, [r3, #24]
 801286a:	693a      	ldr	r2, [r7, #16]
 801286c:	8992      	ldrh	r2, [r2, #12]
 801286e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012872:	fb02 f201 	mul.w	r2, r2, r1
 8012876:	1a9b      	subs	r3, r3, r2
 8012878:	2b00      	cmp	r3, #0
 801287a:	f040 80f1 	bne.w	8012a60 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	699b      	ldr	r3, [r3, #24]
 8012882:	693a      	ldr	r2, [r7, #16]
 8012884:	8992      	ldrh	r2, [r2, #12]
 8012886:	fbb3 f3f2 	udiv	r3, r3, r2
 801288a:	693a      	ldr	r2, [r7, #16]
 801288c:	8952      	ldrh	r2, [r2, #10]
 801288e:	3a01      	subs	r2, #1
 8012890:	4013      	ands	r3, r2
 8012892:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012894:	69bb      	ldr	r3, [r7, #24]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d143      	bne.n	8012922 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	699b      	ldr	r3, [r3, #24]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d10c      	bne.n	80128bc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	689b      	ldr	r3, [r3, #8]
 80128a6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80128a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d11a      	bne.n	80128e4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2100      	movs	r1, #0
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7fe fdef 	bl	8011496 <create_chain>
 80128b8:	62b8      	str	r0, [r7, #40]	; 0x28
 80128ba:	e013      	b.n	80128e4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d007      	beq.n	80128d4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	699b      	ldr	r3, [r3, #24]
 80128c8:	4619      	mov	r1, r3
 80128ca:	68f8      	ldr	r0, [r7, #12]
 80128cc:	f7fe fe7b 	bl	80115c6 <clmt_clust>
 80128d0:	62b8      	str	r0, [r7, #40]	; 0x28
 80128d2:	e007      	b.n	80128e4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80128d4:	68fa      	ldr	r2, [r7, #12]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	69db      	ldr	r3, [r3, #28]
 80128da:	4619      	mov	r1, r3
 80128dc:	4610      	mov	r0, r2
 80128de:	f7fe fdda 	bl	8011496 <create_chain>
 80128e2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80128e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	f000 8109 	beq.w	8012afe <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80128ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ee:	2b01      	cmp	r3, #1
 80128f0:	d104      	bne.n	80128fc <f_write+0x10c>
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	2202      	movs	r2, #2
 80128f6:	755a      	strb	r2, [r3, #21]
 80128f8:	2302      	movs	r3, #2
 80128fa:	e109      	b.n	8012b10 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80128fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012902:	d104      	bne.n	801290e <f_write+0x11e>
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	2201      	movs	r2, #1
 8012908:	755a      	strb	r2, [r3, #21]
 801290a:	2301      	movs	r3, #1
 801290c:	e100      	b.n	8012b10 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012912:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	689b      	ldr	r3, [r3, #8]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d102      	bne.n	8012922 <f_write+0x132>
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012920:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	7d1b      	ldrb	r3, [r3, #20]
 8012926:	b25b      	sxtb	r3, r3
 8012928:	2b00      	cmp	r3, #0
 801292a:	da18      	bge.n	801295e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	7858      	ldrb	r0, [r3, #1]
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	6a1a      	ldr	r2, [r3, #32]
 801293a:	2301      	movs	r3, #1
 801293c:	f7fd ffb4 	bl	80108a8 <disk_write>
 8012940:	4603      	mov	r3, r0
 8012942:	2b00      	cmp	r3, #0
 8012944:	d004      	beq.n	8012950 <f_write+0x160>
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	2201      	movs	r2, #1
 801294a:	755a      	strb	r2, [r3, #21]
 801294c:	2301      	movs	r3, #1
 801294e:	e0df      	b.n	8012b10 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	7d1b      	ldrb	r3, [r3, #20]
 8012954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012958:	b2da      	uxtb	r2, r3
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801295e:	693a      	ldr	r2, [r7, #16]
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	69db      	ldr	r3, [r3, #28]
 8012964:	4619      	mov	r1, r3
 8012966:	4610      	mov	r0, r2
 8012968:	f7fe fb2a 	bl	8010fc0 <clust2sect>
 801296c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d104      	bne.n	801297e <f_write+0x18e>
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2202      	movs	r2, #2
 8012978:	755a      	strb	r2, [r3, #21]
 801297a:	2302      	movs	r3, #2
 801297c:	e0c8      	b.n	8012b10 <f_write+0x320>
			sect += csect;
 801297e:	697a      	ldr	r2, [r7, #20]
 8012980:	69bb      	ldr	r3, [r7, #24]
 8012982:	4413      	add	r3, r2
 8012984:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	899b      	ldrh	r3, [r3, #12]
 801298a:	461a      	mov	r2, r3
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012992:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012994:	6a3b      	ldr	r3, [r7, #32]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d043      	beq.n	8012a22 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801299a:	69ba      	ldr	r2, [r7, #24]
 801299c:	6a3b      	ldr	r3, [r7, #32]
 801299e:	4413      	add	r3, r2
 80129a0:	693a      	ldr	r2, [r7, #16]
 80129a2:	8952      	ldrh	r2, [r2, #10]
 80129a4:	4293      	cmp	r3, r2
 80129a6:	d905      	bls.n	80129b4 <f_write+0x1c4>
					cc = fs->csize - csect;
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	895b      	ldrh	r3, [r3, #10]
 80129ac:	461a      	mov	r2, r3
 80129ae:	69bb      	ldr	r3, [r7, #24]
 80129b0:	1ad3      	subs	r3, r2, r3
 80129b2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	7858      	ldrb	r0, [r3, #1]
 80129b8:	6a3b      	ldr	r3, [r7, #32]
 80129ba:	697a      	ldr	r2, [r7, #20]
 80129bc:	69f9      	ldr	r1, [r7, #28]
 80129be:	f7fd ff73 	bl	80108a8 <disk_write>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d004      	beq.n	80129d2 <f_write+0x1e2>
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	2201      	movs	r2, #1
 80129cc:	755a      	strb	r2, [r3, #21]
 80129ce:	2301      	movs	r3, #1
 80129d0:	e09e      	b.n	8012b10 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	6a1a      	ldr	r2, [r3, #32]
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	1ad3      	subs	r3, r2, r3
 80129da:	6a3a      	ldr	r2, [r7, #32]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d918      	bls.n	8012a12 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	6a1a      	ldr	r2, [r3, #32]
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	1ad3      	subs	r3, r2, r3
 80129ee:	693a      	ldr	r2, [r7, #16]
 80129f0:	8992      	ldrh	r2, [r2, #12]
 80129f2:	fb02 f303 	mul.w	r3, r2, r3
 80129f6:	69fa      	ldr	r2, [r7, #28]
 80129f8:	18d1      	adds	r1, r2, r3
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	899b      	ldrh	r3, [r3, #12]
 80129fe:	461a      	mov	r2, r3
 8012a00:	f7fe f812 	bl	8010a28 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	7d1b      	ldrb	r3, [r3, #20]
 8012a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a0c:	b2da      	uxtb	r2, r3
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	899b      	ldrh	r3, [r3, #12]
 8012a16:	461a      	mov	r2, r3
 8012a18:	6a3b      	ldr	r3, [r7, #32]
 8012a1a:	fb02 f303 	mul.w	r3, r2, r3
 8012a1e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012a20:	e04b      	b.n	8012aba <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	6a1b      	ldr	r3, [r3, #32]
 8012a26:	697a      	ldr	r2, [r7, #20]
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d016      	beq.n	8012a5a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	699a      	ldr	r2, [r3, #24]
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d210      	bcs.n	8012a5a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012a38:	693b      	ldr	r3, [r7, #16]
 8012a3a:	7858      	ldrb	r0, [r3, #1]
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a42:	2301      	movs	r3, #1
 8012a44:	697a      	ldr	r2, [r7, #20]
 8012a46:	f7fd ff0f 	bl	8010868 <disk_read>
 8012a4a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d004      	beq.n	8012a5a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2201      	movs	r2, #1
 8012a54:	755a      	strb	r2, [r3, #21]
 8012a56:	2301      	movs	r3, #1
 8012a58:	e05a      	b.n	8012b10 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	697a      	ldr	r2, [r7, #20]
 8012a5e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	899b      	ldrh	r3, [r3, #12]
 8012a64:	4618      	mov	r0, r3
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	699b      	ldr	r3, [r3, #24]
 8012a6a:	693a      	ldr	r2, [r7, #16]
 8012a6c:	8992      	ldrh	r2, [r2, #12]
 8012a6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a72:	fb02 f201 	mul.w	r2, r2, r1
 8012a76:	1a9b      	subs	r3, r3, r2
 8012a78:	1ac3      	subs	r3, r0, r3
 8012a7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d901      	bls.n	8012a88 <f_write+0x298>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	699b      	ldr	r3, [r3, #24]
 8012a92:	693a      	ldr	r2, [r7, #16]
 8012a94:	8992      	ldrh	r2, [r2, #12]
 8012a96:	fbb3 f0f2 	udiv	r0, r3, r2
 8012a9a:	fb02 f200 	mul.w	r2, r2, r0
 8012a9e:	1a9b      	subs	r3, r3, r2
 8012aa0:	440b      	add	r3, r1
 8012aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012aa4:	69f9      	ldr	r1, [r7, #28]
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7fd ffbe 	bl	8010a28 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	7d1b      	ldrb	r3, [r3, #20]
 8012ab0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012ab4:	b2da      	uxtb	r2, r3
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012aba:	69fa      	ldr	r2, [r7, #28]
 8012abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abe:	4413      	add	r3, r2
 8012ac0:	61fb      	str	r3, [r7, #28]
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	699a      	ldr	r2, [r3, #24]
 8012ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac8:	441a      	add	r2, r3
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	619a      	str	r2, [r3, #24]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	68da      	ldr	r2, [r3, #12]
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	699b      	ldr	r3, [r3, #24]
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	bf38      	it	cc
 8012ada:	461a      	movcc	r2, r3
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	60da      	str	r2, [r3, #12]
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	681a      	ldr	r2, [r3, #0]
 8012ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae6:	441a      	add	r2, r3
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	601a      	str	r2, [r3, #0]
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af0:	1ad3      	subs	r3, r2, r3
 8012af2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	f47f aeb5 	bne.w	8012866 <f_write+0x76>
 8012afc:	e000      	b.n	8012b00 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012afe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	7d1b      	ldrb	r3, [r3, #20]
 8012b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b08:	b2da      	uxtb	r2, r3
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012b0e:	2300      	movs	r3, #0
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3730      	adds	r7, #48	; 0x30
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}

08012b18 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b086      	sub	sp, #24
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f107 0208 	add.w	r2, r7, #8
 8012b26:	4611      	mov	r1, r2
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7ff fc19 	bl	8012360 <validate>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012b32:	7dfb      	ldrb	r3, [r7, #23]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d168      	bne.n	8012c0a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	7d1b      	ldrb	r3, [r3, #20]
 8012b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d062      	beq.n	8012c0a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	7d1b      	ldrb	r3, [r3, #20]
 8012b48:	b25b      	sxtb	r3, r3
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	da15      	bge.n	8012b7a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	7858      	ldrb	r0, [r3, #1]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6a1a      	ldr	r2, [r3, #32]
 8012b5c:	2301      	movs	r3, #1
 8012b5e:	f7fd fea3 	bl	80108a8 <disk_write>
 8012b62:	4603      	mov	r3, r0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d001      	beq.n	8012b6c <f_sync+0x54>
 8012b68:	2301      	movs	r3, #1
 8012b6a:	e04f      	b.n	8012c0c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	7d1b      	ldrb	r3, [r3, #20]
 8012b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b74:	b2da      	uxtb	r2, r3
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012b7a:	f000 fae7 	bl	801314c <get_fattime>
 8012b7e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012b80:	68ba      	ldr	r2, [r7, #8]
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b86:	4619      	mov	r1, r3
 8012b88:	4610      	mov	r0, r2
 8012b8a:	f7fe f97b 	bl	8010e84 <move_window>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012b92:	7dfb      	ldrb	r3, [r7, #23]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d138      	bne.n	8012c0a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b9c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	330b      	adds	r3, #11
 8012ba2:	781a      	ldrb	r2, [r3, #0]
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	330b      	adds	r3, #11
 8012ba8:	f042 0220 	orr.w	r2, r2, #32
 8012bac:	b2d2      	uxtb	r2, r2
 8012bae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6818      	ldr	r0, [r3, #0]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	689b      	ldr	r3, [r3, #8]
 8012bb8:	461a      	mov	r2, r3
 8012bba:	68f9      	ldr	r1, [r7, #12]
 8012bbc:	f7fe ff00 	bl	80119c0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	f103 021c 	add.w	r2, r3, #28
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	4619      	mov	r1, r3
 8012bcc:	4610      	mov	r0, r2
 8012bce:	f7fd feff 	bl	80109d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	3316      	adds	r3, #22
 8012bd6:	6939      	ldr	r1, [r7, #16]
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fd fef9 	bl	80109d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	3312      	adds	r3, #18
 8012be2:	2100      	movs	r1, #0
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7fd fed8 	bl	801099a <st_word>
					fs->wflag = 1;
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	2201      	movs	r2, #1
 8012bee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7fe f974 	bl	8010ee0 <sync_fs>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	7d1b      	ldrb	r3, [r3, #20]
 8012c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012c04:	b2da      	uxtb	r2, r3
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3718      	adds	r7, #24
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b084      	sub	sp, #16
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f7ff ff7b 	bl	8012b18 <f_sync>
 8012c22:	4603      	mov	r3, r0
 8012c24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012c26:	7bfb      	ldrb	r3, [r7, #15]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d118      	bne.n	8012c5e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f107 0208 	add.w	r2, r7, #8
 8012c32:	4611      	mov	r1, r2
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7ff fb93 	bl	8012360 <validate>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012c3e:	7bfb      	ldrb	r3, [r7, #15]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d10c      	bne.n	8012c5e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	691b      	ldr	r3, [r3, #16]
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7fe f877 	bl	8010d3c <dec_lock>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012c52:	7bfb      	ldrb	r3, [r7, #15]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d102      	bne.n	8012c5e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3710      	adds	r7, #16
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}

08012c68 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b096      	sub	sp, #88	; 0x58
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012c70:	f107 0108 	add.w	r1, r7, #8
 8012c74:	1d3b      	adds	r3, r7, #4
 8012c76:	2202      	movs	r2, #2
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7ff f8ed 	bl	8011e58 <find_volume>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8012c88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	f040 80f2 	bne.w	8012e76 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8012c92:	687a      	ldr	r2, [r7, #4]
 8012c94:	f107 030c 	add.w	r3, r7, #12
 8012c98:	4611      	mov	r1, r2
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7fe ffcc 	bl	8011c38 <follow_path>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012ca6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d102      	bne.n	8012cb4 <f_mkdir+0x4c>
 8012cae:	2308      	movs	r3, #8
 8012cb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012cb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cb8:	2b04      	cmp	r3, #4
 8012cba:	f040 80dc 	bne.w	8012e76 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012cbe:	f107 030c 	add.w	r3, r7, #12
 8012cc2:	2100      	movs	r1, #0
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7fe fbe6 	bl	8011496 <create_chain>
 8012cca:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	895b      	ldrh	r3, [r3, #10]
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	899b      	ldrh	r3, [r3, #12]
 8012cd6:	fb03 f302 	mul.w	r3, r3, r2
 8012cda:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d102      	bne.n	8012cee <f_mkdir+0x86>
 8012ce8:	2307      	movs	r3, #7
 8012cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8012cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cf0:	2b01      	cmp	r3, #1
 8012cf2:	d102      	bne.n	8012cfa <f_mkdir+0x92>
 8012cf4:	2302      	movs	r3, #2
 8012cf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d00:	d102      	bne.n	8012d08 <f_mkdir+0xa0>
 8012d02:	2301      	movs	r3, #1
 8012d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012d08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d106      	bne.n	8012d1e <f_mkdir+0xb6>
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7fe f872 	bl	8010dfc <sync_window>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8012d1e:	f000 fa15 	bl	801314c <get_fattime>
 8012d22:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012d24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d16c      	bne.n	8012e06 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7fe f945 	bl	8010fc0 <clust2sect>
 8012d36:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	3334      	adds	r3, #52	; 0x34
 8012d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	899b      	ldrh	r3, [r3, #12]
 8012d42:	461a      	mov	r2, r3
 8012d44:	2100      	movs	r1, #0
 8012d46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012d48:	f7fd fe8f 	bl	8010a6a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012d4c:	220b      	movs	r2, #11
 8012d4e:	2120      	movs	r1, #32
 8012d50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012d52:	f7fd fe8a 	bl	8010a6a <mem_set>
					dir[DIR_Name] = '.';
 8012d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d58:	222e      	movs	r2, #46	; 0x2e
 8012d5a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d5e:	330b      	adds	r3, #11
 8012d60:	2210      	movs	r2, #16
 8012d62:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d66:	3316      	adds	r3, #22
 8012d68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fd fe30 	bl	80109d0 <st_dword>
					st_clust(fs, dir, dcl);
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7fe fe22 	bl	80119c0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d7e:	3320      	adds	r3, #32
 8012d80:	2220      	movs	r2, #32
 8012d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7fd fe4f 	bl	8010a28 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d8c:	3321      	adds	r3, #33	; 0x21
 8012d8e:	222e      	movs	r2, #46	; 0x2e
 8012d90:	701a      	strb	r2, [r3, #0]
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	2b03      	cmp	r3, #3
 8012d9c:	d106      	bne.n	8012dac <f_mkdir+0x144>
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d101      	bne.n	8012dac <f_mkdir+0x144>
 8012da8:	2300      	movs	r3, #0
 8012daa:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8012dac:	68b8      	ldr	r0, [r7, #8]
 8012dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012db0:	3320      	adds	r3, #32
 8012db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012db4:	4619      	mov	r1, r3
 8012db6:	f7fe fe03 	bl	80119c0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	895b      	ldrh	r3, [r3, #10]
 8012dbe:	653b      	str	r3, [r7, #80]	; 0x50
 8012dc0:	e01c      	b.n	8012dfc <f_mkdir+0x194>
					fs->winsect = dsc++;
 8012dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dc4:	1c5a      	adds	r2, r3, #1
 8012dc6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8012dc8:	68ba      	ldr	r2, [r7, #8]
 8012dca:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	2201      	movs	r2, #1
 8012dd0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7fe f811 	bl	8010dfc <sync_window>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8012de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d10d      	bne.n	8012e04 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	899b      	ldrh	r3, [r3, #12]
 8012dec:	461a      	mov	r2, r3
 8012dee:	2100      	movs	r1, #0
 8012df0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012df2:	f7fd fe3a 	bl	8010a6a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8012dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d1df      	bne.n	8012dc2 <f_mkdir+0x15a>
 8012e02:	e000      	b.n	8012e06 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8012e04:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012e06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d107      	bne.n	8012e1e <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8012e0e:	f107 030c 	add.w	r3, r7, #12
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7fe fe49 	bl	8011aaa <dir_register>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8012e1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d120      	bne.n	8012e68 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e28:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8012e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e2c:	3316      	adds	r3, #22
 8012e2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7fd fdcd 	bl	80109d0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7fe fdbf 	bl	80119c0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8012e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e44:	330b      	adds	r3, #11
 8012e46:	2210      	movs	r2, #16
 8012e48:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	2201      	movs	r2, #1
 8012e4e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8012e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d10e      	bne.n	8012e76 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fe f840 	bl	8010ee0 <sync_fs>
 8012e60:	4603      	mov	r3, r0
 8012e62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8012e66:	e006      	b.n	8012e76 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012e68:	f107 030c 	add.w	r3, r7, #12
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7fe faab 	bl	80113cc <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012e76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3758      	adds	r7, #88	; 0x58
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
	...

08012e84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012e84:	b480      	push	{r7}
 8012e86:	b087      	sub	sp, #28
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	60f8      	str	r0, [r7, #12]
 8012e8c:	60b9      	str	r1, [r7, #8]
 8012e8e:	4613      	mov	r3, r2
 8012e90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012e92:	2301      	movs	r3, #1
 8012e94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012e96:	2300      	movs	r3, #0
 8012e98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012e9a:	4b1f      	ldr	r3, [pc, #124]	; (8012f18 <FATFS_LinkDriverEx+0x94>)
 8012e9c:	7a5b      	ldrb	r3, [r3, #9]
 8012e9e:	b2db      	uxtb	r3, r3
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d131      	bne.n	8012f08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012ea4:	4b1c      	ldr	r3, [pc, #112]	; (8012f18 <FATFS_LinkDriverEx+0x94>)
 8012ea6:	7a5b      	ldrb	r3, [r3, #9]
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	461a      	mov	r2, r3
 8012eac:	4b1a      	ldr	r3, [pc, #104]	; (8012f18 <FATFS_LinkDriverEx+0x94>)
 8012eae:	2100      	movs	r1, #0
 8012eb0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012eb2:	4b19      	ldr	r3, [pc, #100]	; (8012f18 <FATFS_LinkDriverEx+0x94>)
 8012eb4:	7a5b      	ldrb	r3, [r3, #9]
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	4a17      	ldr	r2, [pc, #92]	; (8012f18 <FATFS_LinkDriverEx+0x94>)
 8012eba:	009b      	lsls	r3, r3, #2
 8012ebc:	4413      	add	r3, r2
 8012ebe:	68fa      	ldr	r2, [r7, #12]
 8012ec0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012ec2:	4b15      	ldr	r3, [pc, #84]	; (8012f18 <FATFS_LinkDriverEx+0x94>)
 8012ec4:	7a5b      	ldrb	r3, [r3, #9]
 8012ec6:	b2db      	uxtb	r3, r3
 8012ec8:	461a      	mov	r2, r3
 8012eca:	4b13      	ldr	r3, [pc, #76]	; (8012f18 <FATFS_LinkDriverEx+0x94>)
 8012ecc:	4413      	add	r3, r2
 8012ece:	79fa      	ldrb	r2, [r7, #7]
 8012ed0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012ed2:	4b11      	ldr	r3, [pc, #68]	; (8012f18 <FATFS_LinkDriverEx+0x94>)
 8012ed4:	7a5b      	ldrb	r3, [r3, #9]
 8012ed6:	b2db      	uxtb	r3, r3
 8012ed8:	1c5a      	adds	r2, r3, #1
 8012eda:	b2d1      	uxtb	r1, r2
 8012edc:	4a0e      	ldr	r2, [pc, #56]	; (8012f18 <FATFS_LinkDriverEx+0x94>)
 8012ede:	7251      	strb	r1, [r2, #9]
 8012ee0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012ee2:	7dbb      	ldrb	r3, [r7, #22]
 8012ee4:	3330      	adds	r3, #48	; 0x30
 8012ee6:	b2da      	uxtb	r2, r3
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	3301      	adds	r3, #1
 8012ef0:	223a      	movs	r2, #58	; 0x3a
 8012ef2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	3302      	adds	r3, #2
 8012ef8:	222f      	movs	r2, #47	; 0x2f
 8012efa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	3303      	adds	r3, #3
 8012f00:	2200      	movs	r2, #0
 8012f02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012f04:	2300      	movs	r3, #0
 8012f06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	371c      	adds	r7, #28
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f14:	4770      	bx	lr
 8012f16:	bf00      	nop
 8012f18:	200005d8 	.word	0x200005d8

08012f1c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b082      	sub	sp, #8
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012f26:	2200      	movs	r2, #0
 8012f28:	6839      	ldr	r1, [r7, #0]
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7ff ffaa 	bl	8012e84 <FATFS_LinkDriverEx>
 8012f30:	4603      	mov	r3, r0
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3708      	adds	r7, #8
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
	...

08012f3c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8012f3c:	b480      	push	{r7}
 8012f3e:	b085      	sub	sp, #20
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	460b      	mov	r3, r1
 8012f46:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8012f50:	4b15      	ldr	r3, [pc, #84]	; (8012fa8 <FATFS_UnLinkDriverEx+0x6c>)
 8012f52:	7a5b      	ldrb	r3, [r3, #9]
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d01e      	beq.n	8012f98 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	3b30      	subs	r3, #48	; 0x30
 8012f60:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8012f62:	7bbb      	ldrb	r3, [r7, #14]
 8012f64:	4a10      	ldr	r2, [pc, #64]	; (8012fa8 <FATFS_UnLinkDriverEx+0x6c>)
 8012f66:	009b      	lsls	r3, r3, #2
 8012f68:	4413      	add	r3, r2
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d013      	beq.n	8012f98 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8012f70:	7bbb      	ldrb	r3, [r7, #14]
 8012f72:	4a0d      	ldr	r2, [pc, #52]	; (8012fa8 <FATFS_UnLinkDriverEx+0x6c>)
 8012f74:	009b      	lsls	r3, r3, #2
 8012f76:	4413      	add	r3, r2
 8012f78:	2200      	movs	r2, #0
 8012f7a:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8012f7c:	7bbb      	ldrb	r3, [r7, #14]
 8012f7e:	4a0a      	ldr	r2, [pc, #40]	; (8012fa8 <FATFS_UnLinkDriverEx+0x6c>)
 8012f80:	4413      	add	r3, r2
 8012f82:	2200      	movs	r2, #0
 8012f84:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8012f86:	4b08      	ldr	r3, [pc, #32]	; (8012fa8 <FATFS_UnLinkDriverEx+0x6c>)
 8012f88:	7a5b      	ldrb	r3, [r3, #9]
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	3b01      	subs	r3, #1
 8012f8e:	b2da      	uxtb	r2, r3
 8012f90:	4b05      	ldr	r3, [pc, #20]	; (8012fa8 <FATFS_UnLinkDriverEx+0x6c>)
 8012f92:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8012f94:	2300      	movs	r3, #0
 8012f96:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3714      	adds	r7, #20
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	4770      	bx	lr
 8012fa6:	bf00      	nop
 8012fa8:	200005d8 	.word	0x200005d8

08012fac <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8012fb4:	2100      	movs	r1, #0
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f7ff ffc0 	bl	8012f3c <FATFS_UnLinkDriverEx>
 8012fbc:	4603      	mov	r3, r0
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3708      	adds	r7, #8
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}
	...

08012fc8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b082      	sub	sp, #8
 8012fcc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012fd2:	f000 f896 	bl	8013102 <BSP_SD_IsDetected>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	2b01      	cmp	r3, #1
 8012fda:	d001      	beq.n	8012fe0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8012fdc:	2301      	movs	r3, #1
 8012fde:	e012      	b.n	8013006 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8012fe0:	480b      	ldr	r0, [pc, #44]	; (8013010 <BSP_SD_Init+0x48>)
 8012fe2:	f7f6 ffd7 	bl	8009f94 <HAL_SD_Init>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012fea:	79fb      	ldrb	r3, [r7, #7]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d109      	bne.n	8013004 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8012ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012ff4:	4806      	ldr	r0, [pc, #24]	; (8013010 <BSP_SD_Init+0x48>)
 8012ff6:	f7f7 fdb2 	bl	800ab5e <HAL_SD_ConfigWideBusOperation>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d001      	beq.n	8013004 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013000:	2301      	movs	r3, #1
 8013002:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013004:	79fb      	ldrb	r3, [r7, #7]
}
 8013006:	4618      	mov	r0, r3
 8013008:	3708      	adds	r7, #8
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
 801300e:	bf00      	nop
 8013010:	20008798 	.word	0x20008798

08013014 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b086      	sub	sp, #24
 8013018:	af00      	add	r7, sp, #0
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	60b9      	str	r1, [r7, #8]
 801301e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013020:	2300      	movs	r3, #0
 8013022:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	68ba      	ldr	r2, [r7, #8]
 8013028:	68f9      	ldr	r1, [r7, #12]
 801302a:	4806      	ldr	r0, [pc, #24]	; (8013044 <BSP_SD_ReadBlocks_DMA+0x30>)
 801302c:	f7f7 f83a 	bl	800a0a4 <HAL_SD_ReadBlocks_DMA>
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d001      	beq.n	801303a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013036:	2301      	movs	r3, #1
 8013038:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801303a:	7dfb      	ldrb	r3, [r7, #23]
}
 801303c:	4618      	mov	r0, r3
 801303e:	3718      	adds	r7, #24
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	20008798 	.word	0x20008798

08013048 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b086      	sub	sp, #24
 801304c:	af00      	add	r7, sp, #0
 801304e:	60f8      	str	r0, [r7, #12]
 8013050:	60b9      	str	r1, [r7, #8]
 8013052:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013054:	2300      	movs	r3, #0
 8013056:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	68ba      	ldr	r2, [r7, #8]
 801305c:	68f9      	ldr	r1, [r7, #12]
 801305e:	4806      	ldr	r0, [pc, #24]	; (8013078 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013060:	f7f7 f8ec 	bl	800a23c <HAL_SD_WriteBlocks_DMA>
 8013064:	4603      	mov	r3, r0
 8013066:	2b00      	cmp	r3, #0
 8013068:	d001      	beq.n	801306e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801306a:	2301      	movs	r3, #1
 801306c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801306e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013070:	4618      	mov	r0, r3
 8013072:	3718      	adds	r7, #24
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}
 8013078:	20008798 	.word	0x20008798

0801307c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013080:	4805      	ldr	r0, [pc, #20]	; (8013098 <BSP_SD_GetCardState+0x1c>)
 8013082:	f7f7 fde8 	bl	800ac56 <HAL_SD_GetCardState>
 8013086:	4603      	mov	r3, r0
 8013088:	2b04      	cmp	r3, #4
 801308a:	bf14      	ite	ne
 801308c:	2301      	movne	r3, #1
 801308e:	2300      	moveq	r3, #0
 8013090:	b2db      	uxtb	r3, r3
}
 8013092:	4618      	mov	r0, r3
 8013094:	bd80      	pop	{r7, pc}
 8013096:	bf00      	nop
 8013098:	20008798 	.word	0x20008798

0801309c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80130a4:	6879      	ldr	r1, [r7, #4]
 80130a6:	4803      	ldr	r0, [pc, #12]	; (80130b4 <BSP_SD_GetCardInfo+0x18>)
 80130a8:	f7f7 fd2d 	bl	800ab06 <HAL_SD_GetCardInfo>
}
 80130ac:	bf00      	nop
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	20008798 	.word	0x20008798

080130b8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b082      	sub	sp, #8
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80130c0:	f000 f818 	bl	80130f4 <BSP_SD_AbortCallback>
}
 80130c4:	bf00      	nop
 80130c6:	3708      	adds	r7, #8
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80130d4:	f002 fcfa 	bl	8015acc <BSP_SD_WriteCpltCallback>
}
 80130d8:	bf00      	nop
 80130da:	3708      	adds	r7, #8
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}

080130e0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b082      	sub	sp, #8
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80130e8:	f002 fcfc 	bl	8015ae4 <BSP_SD_ReadCpltCallback>
}
 80130ec:	bf00      	nop
 80130ee:	3708      	adds	r7, #8
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}

080130f4 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80130f4:	b480      	push	{r7}
 80130f6:	af00      	add	r7, sp, #0

}
 80130f8:	bf00      	nop
 80130fa:	46bd      	mov	sp, r7
 80130fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013100:	4770      	bx	lr

08013102 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8013102:	b580      	push	{r7, lr}
 8013104:	b082      	sub	sp, #8
 8013106:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013108:	2301      	movs	r3, #1
 801310a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 801310c:	f000 f826 	bl	801315c <BSP_PlatformIsDetected>
 8013110:	4603      	mov	r3, r0
 8013112:	2b00      	cmp	r3, #0
 8013114:	d101      	bne.n	801311a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013116:	2300      	movs	r3, #0
 8013118:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801311a:	79fb      	ldrb	r3, [r7, #7]
 801311c:	b2db      	uxtb	r3, r3
}
 801311e:	4618      	mov	r0, r3
 8013120:	3708      	adds	r7, #8
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
	...

08013128 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8013128:	b580      	push	{r7, lr}
 801312a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801312c:	4904      	ldr	r1, [pc, #16]	; (8013140 <MX_FATFS_Init+0x18>)
 801312e:	4805      	ldr	r0, [pc, #20]	; (8013144 <MX_FATFS_Init+0x1c>)
 8013130:	f7ff fef4 	bl	8012f1c <FATFS_LinkDriver>
 8013134:	4603      	mov	r3, r0
 8013136:	461a      	mov	r2, r3
 8013138:	4b03      	ldr	r3, [pc, #12]	; (8013148 <MX_FATFS_Init+0x20>)
 801313a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 801313c:	bf00      	nop
 801313e:	bd80      	pop	{r7, pc}
 8013140:	2000653c 	.word	0x2000653c
 8013144:	0801e090 	.word	0x0801e090
 8013148:	20006538 	.word	0x20006538

0801314c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801314c:	b480      	push	{r7}
 801314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013150:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8013152:	4618      	mov	r0, r3
 8013154:	46bd      	mov	sp, r7
 8013156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315a:	4770      	bx	lr

0801315c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013162:	2301      	movs	r3, #1
 8013164:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013166:	f44f 7180 	mov.w	r1, #256	; 0x100
 801316a:	4806      	ldr	r0, [pc, #24]	; (8013184 <BSP_PlatformIsDetected+0x28>)
 801316c:	f7f3 ff20 	bl	8006fb0 <HAL_GPIO_ReadPin>
 8013170:	4603      	mov	r3, r0
 8013172:	2b00      	cmp	r3, #0
 8013174:	d001      	beq.n	801317a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013176:	2300      	movs	r3, #0
 8013178:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 801317a:	79fb      	ldrb	r3, [r7, #7]
}  
 801317c:	4618      	mov	r0, r3
 801317e:	3708      	adds	r7, #8
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	40020000 	.word	0x40020000

08013188 <print>:
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b082      	sub	sp, #8
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8013190:	2201      	movs	r2, #1
 8013192:	2140      	movs	r1, #64	; 0x40
 8013194:	480c      	ldr	r0, [pc, #48]	; (80131c8 <print+0x40>)
 8013196:	f7f3 ff23 	bl	8006fe0 <HAL_GPIO_WritePin>
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 801319a:	bf00      	nop
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f7ed f821 	bl	80001e4 <strlen>
 80131a2:	4603      	mov	r3, r0
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	4619      	mov	r1, r3
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f003 f919 	bl	80163e0 <CDC_Transmit_FS>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b01      	cmp	r3, #1
 80131b2:	d0f3      	beq.n	801319c <print+0x14>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80131b4:	2200      	movs	r2, #0
 80131b6:	2140      	movs	r1, #64	; 0x40
 80131b8:	4803      	ldr	r0, [pc, #12]	; (80131c8 <print+0x40>)
 80131ba:	f7f3 ff11 	bl	8006fe0 <HAL_GPIO_WritePin>
};
 80131be:	bf00      	nop
 80131c0:	3708      	adds	r7, #8
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	40020800 	.word	0x40020800

080131cc <println>:
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b084      	sub	sp, #16
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 80131d4:	2201      	movs	r2, #1
 80131d6:	2140      	movs	r1, #64	; 0x40
 80131d8:	4820      	ldr	r0, [pc, #128]	; (801325c <println+0x90>)
 80131da:	f7f3 ff01 	bl	8006fe0 <HAL_GPIO_WritePin>
	printLen = strlen(str);
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f7ed f800 	bl	80001e4 <strlen>
 80131e4:	4602      	mov	r2, r0
 80131e6:	4b1e      	ldr	r3, [pc, #120]	; (8013260 <println+0x94>)
 80131e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < printLen; i++)
 80131ea:	2300      	movs	r3, #0
 80131ec:	73fb      	strb	r3, [r7, #15]
 80131ee:	e009      	b.n	8013204 <println+0x38>
		printBuffer[i] = str[i];
 80131f0:	7bfb      	ldrb	r3, [r7, #15]
 80131f2:	687a      	ldr	r2, [r7, #4]
 80131f4:	441a      	add	r2, r3
 80131f6:	7bfb      	ldrb	r3, [r7, #15]
 80131f8:	7811      	ldrb	r1, [r2, #0]
 80131fa:	4a1a      	ldr	r2, [pc, #104]	; (8013264 <println+0x98>)
 80131fc:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 80131fe:	7bfb      	ldrb	r3, [r7, #15]
 8013200:	3301      	adds	r3, #1
 8013202:	73fb      	strb	r3, [r7, #15]
 8013204:	7bfa      	ldrb	r2, [r7, #15]
 8013206:	4b16      	ldr	r3, [pc, #88]	; (8013260 <println+0x94>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	429a      	cmp	r2, r3
 801320c:	d3f0      	bcc.n	80131f0 <println+0x24>
	printBuffer[printLen] = '\n';
 801320e:	4b14      	ldr	r3, [pc, #80]	; (8013260 <println+0x94>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	4a14      	ldr	r2, [pc, #80]	; (8013264 <println+0x98>)
 8013214:	210a      	movs	r1, #10
 8013216:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8013218:	4b11      	ldr	r3, [pc, #68]	; (8013260 <println+0x94>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	3301      	adds	r3, #1
 801321e:	4a11      	ldr	r2, [pc, #68]	; (8013264 <println+0x98>)
 8013220:	210d      	movs	r1, #13
 8013222:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 8013224:	4b0e      	ldr	r3, [pc, #56]	; (8013260 <println+0x94>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	3302      	adds	r3, #2
 801322a:	4a0e      	ldr	r2, [pc, #56]	; (8013264 <println+0x98>)
 801322c:	2100      	movs	r1, #0
 801322e:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 8013230:	bf00      	nop
 8013232:	4b0b      	ldr	r3, [pc, #44]	; (8013260 <println+0x94>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	b29b      	uxth	r3, r3
 8013238:	3303      	adds	r3, #3
 801323a:	b29b      	uxth	r3, r3
 801323c:	4619      	mov	r1, r3
 801323e:	4809      	ldr	r0, [pc, #36]	; (8013264 <println+0x98>)
 8013240:	f003 f8ce 	bl	80163e0 <CDC_Transmit_FS>
 8013244:	4603      	mov	r3, r0
 8013246:	2b01      	cmp	r3, #1
 8013248:	d0f3      	beq.n	8013232 <println+0x66>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 801324a:	2200      	movs	r2, #0
 801324c:	2140      	movs	r1, #64	; 0x40
 801324e:	4803      	ldr	r0, [pc, #12]	; (801325c <println+0x90>)
 8013250:	f7f3 fec6 	bl	8006fe0 <HAL_GPIO_WritePin>
};
 8013254:	bf00      	nop
 8013256:	3710      	adds	r7, #16
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}
 801325c:	40020800 	.word	0x40020800
 8013260:	200005e4 	.word	0x200005e4
 8013264:	200005e8 	.word	0x200005e8

08013268 <printv>:
static inline void printv(char* str, uint32_t len)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b082      	sub	sp, #8
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
 8013270:	6039      	str	r1, [r7, #0]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8013272:	2201      	movs	r2, #1
 8013274:	2140      	movs	r1, #64	; 0x40
 8013276:	480b      	ldr	r0, [pc, #44]	; (80132a4 <printv+0x3c>)
 8013278:	f7f3 feb2 	bl	8006fe0 <HAL_GPIO_WritePin>

	while (CDC_Transmit_FS((uint8_t*) str, len) == USBD_BUSY);
 801327c:	bf00      	nop
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	b29b      	uxth	r3, r3
 8013282:	4619      	mov	r1, r3
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	f003 f8ab 	bl	80163e0 <CDC_Transmit_FS>
 801328a:	4603      	mov	r3, r0
 801328c:	2b01      	cmp	r3, #1
 801328e:	d0f6      	beq.n	801327e <printv+0x16>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8013290:	2200      	movs	r2, #0
 8013292:	2140      	movs	r1, #64	; 0x40
 8013294:	4803      	ldr	r0, [pc, #12]	; (80132a4 <printv+0x3c>)
 8013296:	f7f3 fea3 	bl	8006fe0 <HAL_GPIO_WritePin>
	#endif
}
 801329a:	bf00      	nop
 801329c:	3708      	adds	r7, #8
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}
 80132a2:	bf00      	nop
 80132a4:	40020800 	.word	0x40020800

080132a8 <print_int>:
static inline void print_int(int number)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 80132b0:	2201      	movs	r2, #1
 80132b2:	2140      	movs	r1, #64	; 0x40
 80132b4:	480f      	ldr	r0, [pc, #60]	; (80132f4 <print_int+0x4c>)
 80132b6:	f7f3 fe93 	bl	8006fe0 <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%d", number);
 80132ba:	687a      	ldr	r2, [r7, #4]
 80132bc:	490e      	ldr	r1, [pc, #56]	; (80132f8 <print_int+0x50>)
 80132be:	480f      	ldr	r0, [pc, #60]	; (80132fc <print_int+0x54>)
 80132c0:	f004 fc40 	bl	8017b44 <siprintf>
 80132c4:	4603      	mov	r3, r0
 80132c6:	461a      	mov	r2, r3
 80132c8:	4b0d      	ldr	r3, [pc, #52]	; (8013300 <print_int+0x58>)
 80132ca:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 80132cc:	bf00      	nop
 80132ce:	4b0c      	ldr	r3, [pc, #48]	; (8013300 <print_int+0x58>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	b29b      	uxth	r3, r3
 80132d4:	4619      	mov	r1, r3
 80132d6:	4809      	ldr	r0, [pc, #36]	; (80132fc <print_int+0x54>)
 80132d8:	f003 f882 	bl	80163e0 <CDC_Transmit_FS>
 80132dc:	4603      	mov	r3, r0
 80132de:	2b01      	cmp	r3, #1
 80132e0:	d0f5      	beq.n	80132ce <print_int+0x26>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80132e2:	2200      	movs	r2, #0
 80132e4:	2140      	movs	r1, #64	; 0x40
 80132e6:	4803      	ldr	r0, [pc, #12]	; (80132f4 <print_int+0x4c>)
 80132e8:	f7f3 fe7a 	bl	8006fe0 <HAL_GPIO_WritePin>
	#endif
}
 80132ec:	bf00      	nop
 80132ee:	3708      	adds	r7, #8
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	40020800 	.word	0x40020800
 80132f8:	0801d9c4 	.word	0x0801d9c4
 80132fc:	200005e8 	.word	0x200005e8
 8013300:	200005e4 	.word	0x200005e4

08013304 <print_float>:
static inline void print_float(float number)
{
 8013304:	b590      	push	{r4, r7, lr}
 8013306:	b083      	sub	sp, #12
 8013308:	af00      	add	r7, sp, #0
 801330a:	ed87 0a01 	vstr	s0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 801330e:	2201      	movs	r2, #1
 8013310:	2140      	movs	r1, #64	; 0x40
 8013312:	4813      	ldr	r0, [pc, #76]	; (8013360 <print_float+0x5c>)
 8013314:	f7f3 fe64 	bl	8006fe0 <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%f", number);
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f7ed f925 	bl	8000568 <__aeabi_f2d>
 801331e:	4603      	mov	r3, r0
 8013320:	460c      	mov	r4, r1
 8013322:	461a      	mov	r2, r3
 8013324:	4623      	mov	r3, r4
 8013326:	490f      	ldr	r1, [pc, #60]	; (8013364 <print_float+0x60>)
 8013328:	480f      	ldr	r0, [pc, #60]	; (8013368 <print_float+0x64>)
 801332a:	f004 fc0b 	bl	8017b44 <siprintf>
 801332e:	4603      	mov	r3, r0
 8013330:	461a      	mov	r2, r3
 8013332:	4b0e      	ldr	r3, [pc, #56]	; (801336c <print_float+0x68>)
 8013334:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 8013336:	bf00      	nop
 8013338:	4b0c      	ldr	r3, [pc, #48]	; (801336c <print_float+0x68>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	b29b      	uxth	r3, r3
 801333e:	4619      	mov	r1, r3
 8013340:	4809      	ldr	r0, [pc, #36]	; (8013368 <print_float+0x64>)
 8013342:	f003 f84d 	bl	80163e0 <CDC_Transmit_FS>
 8013346:	4603      	mov	r3, r0
 8013348:	2b01      	cmp	r3, #1
 801334a:	d0f5      	beq.n	8013338 <print_float+0x34>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 801334c:	2200      	movs	r2, #0
 801334e:	2140      	movs	r1, #64	; 0x40
 8013350:	4803      	ldr	r0, [pc, #12]	; (8013360 <print_float+0x5c>)
 8013352:	f7f3 fe45 	bl	8006fe0 <HAL_GPIO_WritePin>
	#endif
}
 8013356:	bf00      	nop
 8013358:	370c      	adds	r7, #12
 801335a:	46bd      	mov	sp, r7
 801335c:	bd90      	pop	{r4, r7, pc}
 801335e:	bf00      	nop
 8013360:	40020800 	.word	0x40020800
 8013364:	0801d9c8 	.word	0x0801d9c8
 8013368:	200005e8 	.word	0x200005e8
 801336c:	200005e4 	.word	0x200005e4

08013370 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8013370:	b480      	push	{r7}
 8013372:	af00      	add	r7, sp, #0
 8013374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801337a:	4618      	mov	r0, r3
 801337c:	46bd      	mov	sp, r7
 801337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013382:	4770      	bx	lr

08013384 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8013384:	b480      	push	{r7}
 8013386:	af00      	add	r7, sp, #0
 8013388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801338e:	4a04      	ldr	r2, [pc, #16]	; (80133a0 <millis+0x1c>)
 8013390:	fba2 2303 	umull	r2, r3, r2, r3
 8013394:	099b      	lsrs	r3, r3, #6
 8013396:	4618      	mov	r0, r3
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr
 80133a0:	10624dd3 	.word	0x10624dd3

080133a4 <getTime>:
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b08c      	sub	sp, #48	; 0x30
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 80133ac:	f107 031c 	add.w	r3, r7, #28
 80133b0:	2200      	movs	r2, #0
 80133b2:	601a      	str	r2, [r3, #0]
 80133b4:	605a      	str	r2, [r3, #4]
 80133b6:	609a      	str	r2, [r3, #8]
 80133b8:	60da      	str	r2, [r3, #12]
 80133ba:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 80133bc:	2300      	movs	r3, #0
 80133be:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 80133c0:	f107 030c 	add.w	r3, r7, #12
 80133c4:	2200      	movs	r2, #0
 80133c6:	601a      	str	r2, [r3, #0]
 80133c8:	605a      	str	r2, [r3, #4]
 80133ca:	811a      	strh	r2, [r3, #8]
	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 80133cc:	f002 f94c 	bl	8015668 <Get_RTC_Instance>
 80133d0:	f107 031c 	add.w	r3, r7, #28
 80133d4:	2200      	movs	r2, #0
 80133d6:	4619      	mov	r1, r3
 80133d8:	f7f6 fcbd 	bl	8009d56 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 80133dc:	f002 f944 	bl	8015668 <Get_RTC_Instance>
 80133e0:	f107 0318 	add.w	r3, r7, #24
 80133e4:	2200      	movs	r2, #0
 80133e6:	4619      	mov	r1, r3
 80133e8:	f7f6 fd13 	bl	8009e12 <HAL_RTC_GetDate>
	toReturn.year = rtc_date.Year;
 80133ec:	7efb      	ldrb	r3, [r7, #27]
 80133ee:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 80133f0:	7e7b      	ldrb	r3, [r7, #25]
 80133f2:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 80133f4:	7ebb      	ldrb	r3, [r7, #26]
 80133f6:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 80133f8:	7e3b      	ldrb	r3, [r7, #24]
 80133fa:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 80133fc:	7f3b      	ldrb	r3, [r7, #28]
 80133fe:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8013400:	7f7b      	ldrb	r3, [r7, #29]
 8013402:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8013404:	7fbb      	ldrb	r3, [r7, #30]
 8013406:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8013408:	f7ff ffbc 	bl	8013384 <millis>
 801340c:	4602      	mov	r2, r0
 801340e:	4b0c      	ldr	r3, [pc, #48]	; (8013440 <getTime+0x9c>)
 8013410:	fba3 1302 	umull	r1, r3, r3, r2
 8013414:	099b      	lsrs	r3, r3, #6
 8013416:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801341a:	fb01 f303 	mul.w	r3, r1, r3
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	b29b      	uxth	r3, r3
 8013422:	82bb      	strh	r3, [r7, #20]
	return toReturn;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	461a      	mov	r2, r3
 8013428:	f107 030c 	add.w	r3, r7, #12
 801342c:	cb03      	ldmia	r3!, {r0, r1}
 801342e:	6010      	str	r0, [r2, #0]
 8013430:	6051      	str	r1, [r2, #4]
 8013432:	881b      	ldrh	r3, [r3, #0]
 8013434:	8113      	strh	r3, [r2, #8]
}
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	3730      	adds	r7, #48	; 0x30
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	10624dd3 	.word	0x10624dd3

08013444 <sdTest_begin>:
#include "sd.h"

bool sdActive;

static bool sdTest_begin(void)
{
 8013444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013446:	b091      	sub	sp, #68	; 0x44
 8013448:	af06      	add	r7, sp, #24
	if (SD_init() == FR_OK)
 801344a:	f7ed ff15 	bl	8001278 <SD_init>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	d172      	bne.n	801353a <sdTest_begin+0xf6>
	{
		println("[SD] Detected");
 8013454:	4841      	ldr	r0, [pc, #260]	; (801355c <sdTest_begin+0x118>)
 8013456:	f7ff feb9 	bl	80131cc <println>
		print("[SD] Creating test file...");
 801345a:	4841      	ldr	r0, [pc, #260]	; (8013560 <sdTest_begin+0x11c>)
 801345c:	f7ff fe94 	bl	8013188 <print>
		if (SD_newFile("/TEST.TXT") == FR_OK)
 8013460:	4840      	ldr	r0, [pc, #256]	; (8013564 <sdTest_begin+0x120>)
 8013462:	f7ed ff45 	bl	80012f0 <SD_newFile>
 8013466:	4603      	mov	r3, r0
 8013468:	2b00      	cmp	r3, #0
 801346a:	d161      	bne.n	8013530 <sdTest_begin+0xec>
		{
			println("successful.");
 801346c:	483e      	ldr	r0, [pc, #248]	; (8013568 <sdTest_begin+0x124>)
 801346e:	f7ff fead 	bl	80131cc <println>
			bool status = true;
 8013472:	2301      	movs	r3, #1
 8013474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status |= (SD_writeToFile("/TEST.TXT", "Created on: ") == FR_OK);
 8013478:	493c      	ldr	r1, [pc, #240]	; (801356c <sdTest_begin+0x128>)
 801347a:	483a      	ldr	r0, [pc, #232]	; (8013564 <sdTest_begin+0x120>)
 801347c:	f7ed ff60 	bl	8001340 <SD_writeToFile>
 8013480:	4603      	mov	r3, r0
 8013482:	2b00      	cmp	r3, #0
 8013484:	bf0c      	ite	eq
 8013486:	2301      	moveq	r3, #1
 8013488:	2300      	movne	r3, #0
 801348a:	b2db      	uxtb	r3, r3
 801348c:	461a      	mov	r2, r3
 801348e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013492:	4313      	orrs	r3, r2
 8013494:	2b00      	cmp	r3, #0
 8013496:	bf14      	ite	ne
 8013498:	2301      	movne	r3, #1
 801349a:	2300      	moveq	r3, #0
 801349c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			DateTime fileCreated = getTime();
 80134a0:	f107 031c 	add.w	r3, r7, #28
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7ff ff7d 	bl	80133a4 <getTime>
			char dateStr[26] = {0};
 80134aa:	463b      	mov	r3, r7
 80134ac:	2200      	movs	r2, #0
 80134ae:	601a      	str	r2, [r3, #0]
 80134b0:	605a      	str	r2, [r3, #4]
 80134b2:	609a      	str	r2, [r3, #8]
 80134b4:	60da      	str	r2, [r3, #12]
 80134b6:	611a      	str	r2, [r3, #16]
 80134b8:	615a      	str	r2, [r3, #20]
 80134ba:	831a      	strh	r2, [r3, #24]
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 80134bc:	7fbb      	ldrb	r3, [r7, #30]
 80134be:	461e      	mov	r6, r3
 80134c0:	7f7b      	ldrb	r3, [r7, #29]
 80134c2:	469c      	mov	ip, r3
 80134c4:	7f3b      	ldrb	r3, [r7, #28]
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 80134c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80134ca:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80134ce:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 80134d2:	4604      	mov	r4, r0
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 80134d4:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 80134d6:	4605      	mov	r5, r0
 80134d8:	4638      	mov	r0, r7
 80134da:	9504      	str	r5, [sp, #16]
 80134dc:	9403      	str	r4, [sp, #12]
 80134de:	9102      	str	r1, [sp, #8]
 80134e0:	9201      	str	r2, [sp, #4]
 80134e2:	9300      	str	r3, [sp, #0]
 80134e4:	4663      	mov	r3, ip
 80134e6:	4632      	mov	r2, r6
 80134e8:	4921      	ldr	r1, [pc, #132]	; (8013570 <sdTest_begin+0x12c>)
 80134ea:	f004 fb2b 	bl	8017b44 <siprintf>

			status |= (SD_writeToFile("/TEST.TXT", dateStr) == FR_OK);
 80134ee:	463b      	mov	r3, r7
 80134f0:	4619      	mov	r1, r3
 80134f2:	481c      	ldr	r0, [pc, #112]	; (8013564 <sdTest_begin+0x120>)
 80134f4:	f7ed ff24 	bl	8001340 <SD_writeToFile>
 80134f8:	4603      	mov	r3, r0
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	bf0c      	ite	eq
 80134fe:	2301      	moveq	r3, #1
 8013500:	2300      	movne	r3, #0
 8013502:	b2db      	uxtb	r3, r3
 8013504:	461a      	mov	r2, r3
 8013506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801350a:	4313      	orrs	r3, r2
 801350c:	2b00      	cmp	r3, #0
 801350e:	bf14      	ite	ne
 8013510:	2301      	movne	r3, #1
 8013512:	2300      	moveq	r3, #0
 8013514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (status) println("[SD] Content writing successful!");
 8013518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801351c:	2b00      	cmp	r3, #0
 801351e:	d003      	beq.n	8013528 <sdTest_begin+0xe4>
 8013520:	4814      	ldr	r0, [pc, #80]	; (8013574 <sdTest_begin+0x130>)
 8013522:	f7ff fe53 	bl	80131cc <println>
 8013526:	e010      	b.n	801354a <sdTest_begin+0x106>
			else println("[SD] Content writing unsuccessful!");
 8013528:	4813      	ldr	r0, [pc, #76]	; (8013578 <sdTest_begin+0x134>)
 801352a:	f7ff fe4f 	bl	80131cc <println>
 801352e:	e00c      	b.n	801354a <sdTest_begin+0x106>
		}
		else
		{
			println("unsuccessful :(");
 8013530:	4812      	ldr	r0, [pc, #72]	; (801357c <sdTest_begin+0x138>)
 8013532:	f7ff fe4b 	bl	80131cc <println>
			return false;
 8013536:	2300      	movs	r3, #0
 8013538:	e00b      	b.n	8013552 <sdTest_begin+0x10e>
		}
	}
	else
	{
		println("[SD] Init fail!");
 801353a:	4811      	ldr	r0, [pc, #68]	; (8013580 <sdTest_begin+0x13c>)
 801353c:	f7ff fe46 	bl	80131cc <println>
		sdActive = false;
 8013540:	4b10      	ldr	r3, [pc, #64]	; (8013584 <sdTest_begin+0x140>)
 8013542:	2200      	movs	r2, #0
 8013544:	701a      	strb	r2, [r3, #0]
		return false;
 8013546:	2300      	movs	r3, #0
 8013548:	e003      	b.n	8013552 <sdTest_begin+0x10e>
	}

	sdActive = true;
 801354a:	4b0e      	ldr	r3, [pc, #56]	; (8013584 <sdTest_begin+0x140>)
 801354c:	2201      	movs	r2, #1
 801354e:	701a      	strb	r2, [r3, #0]
	return true;
 8013550:	2301      	movs	r3, #1
}
 8013552:	4618      	mov	r0, r3
 8013554:	372c      	adds	r7, #44	; 0x2c
 8013556:	46bd      	mov	sp, r7
 8013558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801355a:	bf00      	nop
 801355c:	0801d9cc 	.word	0x0801d9cc
 8013560:	0801d9dc 	.word	0x0801d9dc
 8013564:	0801d9f8 	.word	0x0801d9f8
 8013568:	0801da04 	.word	0x0801da04
 801356c:	0801da10 	.word	0x0801da10
 8013570:	0801da20 	.word	0x0801da20
 8013574:	0801da38 	.word	0x0801da38
 8013578:	0801da5c 	.word	0x0801da5c
 801357c:	0801da80 	.word	0x0801da80
 8013580:	0801da90 	.word	0x0801da90
 8013584:	20003028 	.word	0x20003028

08013588 <duplex_begin>:
bool isReceiving;
bool firstTransmission;
uint8_t packetNumber;

static bool duplex_begin(void)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b082      	sub	sp, #8
 801358c:	af00      	add	r7, sp, #0
	radio.reset = LR_RESET_Pin;
 801358e:	4b26      	ldr	r3, [pc, #152]	; (8013628 <duplex_begin+0xa0>)
 8013590:	2220      	movs	r2, #32
 8013592:	81da      	strh	r2, [r3, #14]
	radio.dio0 = LR_DIO0_Pin;
 8013594:	4b24      	ldr	r3, [pc, #144]	; (8013628 <duplex_begin+0xa0>)
 8013596:	2240      	movs	r2, #64	; 0x40
 8013598:	821a      	strh	r2, [r3, #16]
	radio.nss = LR_NSS_Pin;
 801359a:	4b23      	ldr	r3, [pc, #140]	; (8013628 <duplex_begin+0xa0>)
 801359c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135a0:	825a      	strh	r2, [r3, #18]
	radio.rxtim = LR_TIM_Pin;
 80135a2:	4b21      	ldr	r3, [pc, #132]	; (8013628 <duplex_begin+0xa0>)
 80135a4:	2280      	movs	r2, #128	; 0x80
 80135a6:	829a      	strh	r2, [r3, #20]
	radio.reset_port = LR_RESET_GPIO_Port;
 80135a8:	4b1f      	ldr	r3, [pc, #124]	; (8013628 <duplex_begin+0xa0>)
 80135aa:	4a20      	ldr	r2, [pc, #128]	; (801362c <duplex_begin+0xa4>)
 80135ac:	619a      	str	r2, [r3, #24]
	radio.dio0_port = LR_DIO0_GPIO_Port;
 80135ae:	4b1e      	ldr	r3, [pc, #120]	; (8013628 <duplex_begin+0xa0>)
 80135b0:	4a1f      	ldr	r2, [pc, #124]	; (8013630 <duplex_begin+0xa8>)
 80135b2:	61da      	str	r2, [r3, #28]
	radio.nss_port = LR_NSS_GPIO_Port;
 80135b4:	4b1c      	ldr	r3, [pc, #112]	; (8013628 <duplex_begin+0xa0>)
 80135b6:	4a1f      	ldr	r2, [pc, #124]	; (8013634 <duplex_begin+0xac>)
 80135b8:	621a      	str	r2, [r3, #32]
	radio.rxtim_port = LR_TIM_GPIO_Port;
 80135ba:	4b1b      	ldr	r3, [pc, #108]	; (8013628 <duplex_begin+0xa0>)
 80135bc:	4a1c      	ldr	r2, [pc, #112]	; (8013630 <duplex_begin+0xa8>)
 80135be:	625a      	str	r2, [r3, #36]	; 0x24
	radio.spi = Get_SPI1_Instance();
 80135c0:	f002 f83e 	bl	8015640 <Get_SPI1_Instance>
 80135c4:	4602      	mov	r2, r0
 80135c6:	4b18      	ldr	r3, [pc, #96]	; (8013628 <duplex_begin+0xa0>)
 80135c8:	629a      	str	r2, [r3, #40]	; 0x28
	radio.config = sx1278_default_config;
 80135ca:	4b17      	ldr	r3, [pc, #92]	; (8013628 <duplex_begin+0xa0>)
 80135cc:	4a1a      	ldr	r2, [pc, #104]	; (8013638 <duplex_begin+0xb0>)
 80135ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80135d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	radio.useDio0IRQ = true;
 80135d4:	4b14      	ldr	r3, [pc, #80]	; (8013628 <duplex_begin+0xa0>)
 80135d6:	2201      	movs	r2, #1
 80135d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	uint8_t attempts = 0;
 80135dc:	2300      	movs	r3, #0
 80135de:	71fb      	strb	r3, [r7, #7]

	while (!SX1278_init(&radio))
 80135e0:	e00b      	b.n	80135fa <duplex_begin+0x72>
	{
		HAL_Delay(500);
 80135e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80135e6:	f7f2 fe7d 	bl	80062e4 <HAL_Delay>
		if (DUPLEX_DEBUG) println("[LoRa] Init unsuccessful, retrying...");
		attempts++;
 80135ea:	79fb      	ldrb	r3, [r7, #7]
 80135ec:	3301      	adds	r3, #1
 80135ee:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 80135f0:	79fb      	ldrb	r3, [r7, #7]
 80135f2:	2b04      	cmp	r3, #4
 80135f4:	d901      	bls.n	80135fa <duplex_begin+0x72>
		{
			if (DUPLEX_DEBUG) println("[LoRa] Too many attempts, Radio is not active!");
			return false;
 80135f6:	2300      	movs	r3, #0
 80135f8:	e011      	b.n	801361e <duplex_begin+0x96>
	while (!SX1278_init(&radio))
 80135fa:	480b      	ldr	r0, [pc, #44]	; (8013628 <duplex_begin+0xa0>)
 80135fc:	f7ed fffe 	bl	80015fc <SX1278_init>
 8013600:	4603      	mov	r3, r0
 8013602:	f083 0301 	eor.w	r3, r3, #1
 8013606:	b2db      	uxtb	r3, r3
 8013608:	2b00      	cmp	r3, #0
 801360a:	d1ea      	bne.n	80135e2 <duplex_begin+0x5a>
		}
	}
	if (DUPLEX_DEBUG) println("[LoRa] Radio successful init!");
	packetNumber = 1;
 801360c:	4b0b      	ldr	r3, [pc, #44]	; (801363c <duplex_begin+0xb4>)
 801360e:	2201      	movs	r2, #1
 8013610:	701a      	strb	r2, [r3, #0]
	firstTransmission = true;
 8013612:	4b0b      	ldr	r3, [pc, #44]	; (8013640 <duplex_begin+0xb8>)
 8013614:	2201      	movs	r2, #1
 8013616:	701a      	strb	r2, [r3, #0]
	isReceiving = false;
 8013618:	4b0a      	ldr	r3, [pc, #40]	; (8013644 <duplex_begin+0xbc>)
 801361a:	2200      	movs	r2, #0
 801361c:	701a      	strb	r2, [r3, #0]
}
 801361e:	4618      	mov	r0, r3
 8013620:	3708      	adds	r7, #8
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	20002a70 	.word	0x20002a70
 801362c:	40020800 	.word	0x40020800
 8013630:	40020000 	.word	0x40020000
 8013634:	40020400 	.word	0x40020400
 8013638:	20000124 	.word	0x20000124
 801363c:	200060bc 	.word	0x200060bc
 8013640:	2000444c 	.word	0x2000444c
 8013644:	200064c4 	.word	0x200064c4

08013648 <duplex_checkINT>:

static bool duplex_checkINT()
{
 8013648:	b580      	push	{r7, lr}
 801364a:	af00      	add	r7, sp, #0
	return (firstTransmission || (radio.pendingIRQ && HAL_GPIO_ReadPin(radio.dio0_port, radio.dio0) == GPIO_PIN_SET) || SX1278_intTimeout(&radio));
 801364c:	4b10      	ldr	r3, [pc, #64]	; (8013690 <duplex_checkINT+0x48>)
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d115      	bne.n	8013680 <duplex_checkINT+0x38>
 8013654:	4b0f      	ldr	r3, [pc, #60]	; (8013694 <duplex_checkINT+0x4c>)
 8013656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801365a:	2b00      	cmp	r3, #0
 801365c:	d00a      	beq.n	8013674 <duplex_checkINT+0x2c>
 801365e:	4b0d      	ldr	r3, [pc, #52]	; (8013694 <duplex_checkINT+0x4c>)
 8013660:	69da      	ldr	r2, [r3, #28]
 8013662:	4b0c      	ldr	r3, [pc, #48]	; (8013694 <duplex_checkINT+0x4c>)
 8013664:	8a1b      	ldrh	r3, [r3, #16]
 8013666:	4619      	mov	r1, r3
 8013668:	4610      	mov	r0, r2
 801366a:	f7f3 fca1 	bl	8006fb0 <HAL_GPIO_ReadPin>
 801366e:	4603      	mov	r3, r0
 8013670:	2b01      	cmp	r3, #1
 8013672:	d005      	beq.n	8013680 <duplex_checkINT+0x38>
 8013674:	4807      	ldr	r0, [pc, #28]	; (8013694 <duplex_checkINT+0x4c>)
 8013676:	f7ee fafe 	bl	8001c76 <SX1278_intTimeout>
 801367a:	4603      	mov	r3, r0
 801367c:	2b00      	cmp	r3, #0
 801367e:	d001      	beq.n	8013684 <duplex_checkINT+0x3c>
 8013680:	2301      	movs	r3, #1
 8013682:	e000      	b.n	8013686 <duplex_checkINT+0x3e>
 8013684:	2300      	movs	r3, #0
 8013686:	f003 0301 	and.w	r3, r3, #1
 801368a:	b2db      	uxtb	r3, r3
}
 801368c:	4618      	mov	r0, r3
 801368e:	bd80      	pop	{r7, pc}
 8013690:	2000444c 	.word	0x2000444c
 8013694:	20002a70 	.word	0x20002a70

08013698 <duplex_loop>:

static bool duplex_loop(uint8_t* buf, uint8_t len, bool externallyInvoked)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	460b      	mov	r3, r1
 80136a2:	70fb      	strb	r3, [r7, #3]
 80136a4:	4613      	mov	r3, r2
 80136a6:	70bb      	strb	r3, [r7, #2]
	if (radio.active)
 80136a8:	4b66      	ldr	r3, [pc, #408]	; (8013844 <duplex_loop+0x1ac>)
 80136aa:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	f000 80c2 	beq.w	8013838 <duplex_loop+0x1a0>
	{
		if (radio.useDio0IRQ)
 80136b4:	4b63      	ldr	r3, [pc, #396]	; (8013844 <duplex_loop+0x1ac>)
 80136b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	f000 80b4 	beq.w	8013828 <duplex_loop+0x190>
		{
			// manually check for interrupt
			if (externallyInvoked || duplex_checkINT())
 80136c0:	78bb      	ldrb	r3, [r7, #2]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d105      	bne.n	80136d2 <duplex_loop+0x3a>
 80136c6:	f7ff ffbf 	bl	8013648 <duplex_checkINT>
 80136ca:	4603      	mov	r3, r0
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	f000 80a9 	beq.w	8013824 <duplex_loop+0x18c>
			{
				if (!firstTransmission) SX1278_dio0_IRQ(&radio);
 80136d2:	4b5d      	ldr	r3, [pc, #372]	; (8013848 <duplex_loop+0x1b0>)
 80136d4:	781b      	ldrb	r3, [r3, #0]
 80136d6:	f083 0301 	eor.w	r3, r3, #1
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d002      	beq.n	80136e6 <duplex_loop+0x4e>
 80136e0:	4858      	ldr	r0, [pc, #352]	; (8013844 <duplex_loop+0x1ac>)
 80136e2:	f7ee fa9b 	bl	8001c1c <SX1278_dio0_IRQ>
				if (packetNumber == 0)
 80136e6:	4b59      	ldr	r3, [pc, #356]	; (801384c <duplex_loop+0x1b4>)
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d139      	bne.n	8013762 <duplex_loop+0xca>
				{
					if (DUPLEX_DEBUG) println("[LoRa] Packet received!");
					if (radio.newPacket)
 80136ee:	4b55      	ldr	r3, [pc, #340]	; (8013844 <duplex_loop+0x1ac>)
 80136f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d022      	beq.n	801373e <duplex_loop+0xa6>
					{
						log_radio(&radio, false);
 80136f8:	2100      	movs	r1, #0
 80136fa:	4852      	ldr	r0, [pc, #328]	; (8013844 <duplex_loop+0x1ac>)
 80136fc:	f7f2 fd26 	bl	800614c <log_radio>
						if (DUPLEX_PRINT_PACKET)
						{
							printLen = sprintf(printBuffer, "[LoRa] Packet length: %d, rssi: %d, content: [", radio.rxLen, radio.rssi);
 8013700:	4b50      	ldr	r3, [pc, #320]	; (8013844 <duplex_loop+0x1ac>)
 8013702:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013706:	461a      	mov	r2, r3
 8013708:	4b4e      	ldr	r3, [pc, #312]	; (8013844 <duplex_loop+0x1ac>)
 801370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801370c:	4950      	ldr	r1, [pc, #320]	; (8013850 <duplex_loop+0x1b8>)
 801370e:	4851      	ldr	r0, [pc, #324]	; (8013854 <duplex_loop+0x1bc>)
 8013710:	f004 fa18 	bl	8017b44 <siprintf>
 8013714:	4603      	mov	r3, r0
 8013716:	461a      	mov	r2, r3
 8013718:	4b4f      	ldr	r3, [pc, #316]	; (8013858 <duplex_loop+0x1c0>)
 801371a:	601a      	str	r2, [r3, #0]
							printv(printBuffer, printLen);
 801371c:	4b4e      	ldr	r3, [pc, #312]	; (8013858 <duplex_loop+0x1c0>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	4619      	mov	r1, r3
 8013722:	484c      	ldr	r0, [pc, #304]	; (8013854 <duplex_loop+0x1bc>)
 8013724:	f7ff fda0 	bl	8013268 <printv>
							printv((char*)radio.rxBuffer, radio.rxLen);
 8013728:	4b46      	ldr	r3, [pc, #280]	; (8013844 <duplex_loop+0x1ac>)
 801372a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801372e:	4619      	mov	r1, r3
 8013730:	484a      	ldr	r0, [pc, #296]	; (801385c <duplex_loop+0x1c4>)
 8013732:	f7ff fd99 	bl	8013268 <printv>
							println("]");
 8013736:	484a      	ldr	r0, [pc, #296]	; (8013860 <duplex_loop+0x1c8>)
 8013738:	f7ff fd48 	bl	80131cc <println>
 801373c:	e007      	b.n	801374e <duplex_loop+0xb6>
						}
					}
					else if (radio.rxTimeout)
 801373e:	4b41      	ldr	r3, [pc, #260]	; (8013844 <duplex_loop+0x1ac>)
 8013740:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013744:	2b00      	cmp	r3, #0
 8013746:	d002      	beq.n	801374e <duplex_loop+0xb6>
					{
						println("[LoRa] Receive timeout.");
 8013748:	4846      	ldr	r0, [pc, #280]	; (8013864 <duplex_loop+0x1cc>)
 801374a:	f7ff fd3f 	bl	80131cc <println>
					}
					HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 801374e:	2200      	movs	r2, #0
 8013750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013754:	4844      	ldr	r0, [pc, #272]	; (8013868 <duplex_loop+0x1d0>)
 8013756:	f7f3 fc43 	bl	8006fe0 <HAL_GPIO_WritePin>
					isReceiving = false;
 801375a:	4b44      	ldr	r3, [pc, #272]	; (801386c <duplex_loop+0x1d4>)
 801375c:	2200      	movs	r2, #0
 801375e:	701a      	strb	r2, [r3, #0]
 8013760:	e01b      	b.n	801379a <duplex_loop+0x102>
				else
				{
					if (DUPLEX_DEBUG) println("[LoRa] Transmission finished.");
					if (DUPLEX_PRINT_PACKET)
					{
						printLen = sprintf(printBuffer, "[LoRa] Input packet length: %d, content: [", len);
 8013762:	78fb      	ldrb	r3, [r7, #3]
 8013764:	461a      	mov	r2, r3
 8013766:	4942      	ldr	r1, [pc, #264]	; (8013870 <duplex_loop+0x1d8>)
 8013768:	483a      	ldr	r0, [pc, #232]	; (8013854 <duplex_loop+0x1bc>)
 801376a:	f004 f9eb 	bl	8017b44 <siprintf>
 801376e:	4603      	mov	r3, r0
 8013770:	461a      	mov	r2, r3
 8013772:	4b39      	ldr	r3, [pc, #228]	; (8013858 <duplex_loop+0x1c0>)
 8013774:	601a      	str	r2, [r3, #0]
						printv(printBuffer, printLen);
 8013776:	4b38      	ldr	r3, [pc, #224]	; (8013858 <duplex_loop+0x1c0>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	4619      	mov	r1, r3
 801377c:	4835      	ldr	r0, [pc, #212]	; (8013854 <duplex_loop+0x1bc>)
 801377e:	f7ff fd73 	bl	8013268 <printv>
						printv(buf, len);
 8013782:	78fb      	ldrb	r3, [r7, #3]
 8013784:	4619      	mov	r1, r3
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f7ff fd6e 	bl	8013268 <printv>
						println("]");
 801378c:	4834      	ldr	r0, [pc, #208]	; (8013860 <duplex_loop+0x1c8>)
 801378e:	f7ff fd1d 	bl	80131cc <println>
					}
					log_radio(&radio, true);
 8013792:	2101      	movs	r1, #1
 8013794:	482b      	ldr	r0, [pc, #172]	; (8013844 <duplex_loop+0x1ac>)
 8013796:	f7f2 fcd9 	bl	800614c <log_radio>
				}

				if (packetNumber == DUPLEX_TX_COUNT - 1)
 801379a:	4b2c      	ldr	r3, [pc, #176]	; (801384c <duplex_loop+0x1b4>)
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	2b06      	cmp	r3, #6
 80137a0:	d10f      	bne.n	80137c2 <duplex_loop+0x12a>
				{
					SX1278_receive(&radio);
 80137a2:	4828      	ldr	r0, [pc, #160]	; (8013844 <duplex_loop+0x1ac>)
 80137a4:	f7ee f85e 	bl	8001864 <SX1278_receive>
					packetNumber = -1;
 80137a8:	4b28      	ldr	r3, [pc, #160]	; (801384c <duplex_loop+0x1b4>)
 80137aa:	22ff      	movs	r2, #255	; 0xff
 80137ac:	701a      	strb	r2, [r3, #0]
					isReceiving = true;
 80137ae:	4b2f      	ldr	r3, [pc, #188]	; (801386c <duplex_loop+0x1d4>)
 80137b0:	2201      	movs	r2, #1
 80137b2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_SET);
 80137b4:	2201      	movs	r2, #1
 80137b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80137ba:	482b      	ldr	r0, [pc, #172]	; (8013868 <duplex_loop+0x1d0>)
 80137bc:	f7f3 fc10 	bl	8006fe0 <HAL_GPIO_WritePin>
 80137c0:	e00c      	b.n	80137dc <duplex_loop+0x144>
				}
				else
				{
					buf[len - 1] = packetNumber;
 80137c2:	78fb      	ldrb	r3, [r7, #3]
 80137c4:	3b01      	subs	r3, #1
 80137c6:	687a      	ldr	r2, [r7, #4]
 80137c8:	4413      	add	r3, r2
 80137ca:	4a20      	ldr	r2, [pc, #128]	; (801384c <duplex_loop+0x1b4>)
 80137cc:	7812      	ldrb	r2, [r2, #0]
 80137ce:	701a      	strb	r2, [r3, #0]
					SX1278_transmit(&radio, buf, len);
 80137d0:	78fb      	ldrb	r3, [r7, #3]
 80137d2:	461a      	mov	r2, r3
 80137d4:	6879      	ldr	r1, [r7, #4]
 80137d6:	481b      	ldr	r0, [pc, #108]	; (8013844 <duplex_loop+0x1ac>)
 80137d8:	f7ee f808 	bl	80017ec <SX1278_transmit>
					if (DUPLEX_DEBUG) println("[LoRa] Packet pushed!");
				}
				firstTransmission = false;
 80137dc:	4b1a      	ldr	r3, [pc, #104]	; (8013848 <duplex_loop+0x1b0>)
 80137de:	2200      	movs	r2, #0
 80137e0:	701a      	strb	r2, [r3, #0]
				packetNumber++;
 80137e2:	4b1a      	ldr	r3, [pc, #104]	; (801384c <duplex_loop+0x1b4>)
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	3301      	adds	r3, #1
 80137e8:	b2da      	uxtb	r2, r3
 80137ea:	4b18      	ldr	r3, [pc, #96]	; (801384c <duplex_loop+0x1b4>)
 80137ec:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LEDD_GPIO_Port, LEDD_Pin);
 80137ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80137f2:	481d      	ldr	r0, [pc, #116]	; (8013868 <duplex_loop+0x1d0>)
 80137f4:	f7f3 fc0d 	bl	8007012 <HAL_GPIO_TogglePin>
				return true && !(radio.rxTimeout && isReceiving);
 80137f8:	4b12      	ldr	r3, [pc, #72]	; (8013844 <duplex_loop+0x1ac>)
 80137fa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80137fe:	f083 0301 	eor.w	r3, r3, #1
 8013802:	b2db      	uxtb	r3, r3
 8013804:	2b00      	cmp	r3, #0
 8013806:	d106      	bne.n	8013816 <duplex_loop+0x17e>
 8013808:	4b18      	ldr	r3, [pc, #96]	; (801386c <duplex_loop+0x1d4>)
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	f083 0301 	eor.w	r3, r3, #1
 8013810:	b2db      	uxtb	r3, r3
 8013812:	2b00      	cmp	r3, #0
 8013814:	d001      	beq.n	801381a <duplex_loop+0x182>
 8013816:	2301      	movs	r3, #1
 8013818:	e000      	b.n	801381c <duplex_loop+0x184>
 801381a:	2300      	movs	r3, #0
 801381c:	f003 0301 	and.w	r3, r3, #1
 8013820:	b2db      	uxtb	r3, r3
 8013822:	e00a      	b.n	801383a <duplex_loop+0x1a2>
			}
			else return false;
 8013824:	2300      	movs	r3, #0
 8013826:	e008      	b.n	801383a <duplex_loop+0x1a2>
		}
		else
		{
			SX1278_transmit(&radio, buf, len);
 8013828:	78fb      	ldrb	r3, [r7, #3]
 801382a:	461a      	mov	r2, r3
 801382c:	6879      	ldr	r1, [r7, #4]
 801382e:	4805      	ldr	r0, [pc, #20]	; (8013844 <duplex_loop+0x1ac>)
 8013830:	f7ed ffdc 	bl	80017ec <SX1278_transmit>
			if (DUPLEX_DEBUG) println("[LoRa] Transmission finished.");
			return true;
 8013834:	2301      	movs	r3, #1
 8013836:	e000      	b.n	801383a <duplex_loop+0x1a2>
		}
	}
	return false;
 8013838:	2300      	movs	r3, #0
}
 801383a:	4618      	mov	r0, r3
 801383c:	3708      	adds	r7, #8
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
 8013842:	bf00      	nop
 8013844:	20002a70 	.word	0x20002a70
 8013848:	2000444c 	.word	0x2000444c
 801384c:	200060bc 	.word	0x200060bc
 8013850:	0801dae0 	.word	0x0801dae0
 8013854:	200005e8 	.word	0x200005e8
 8013858:	200005e4 	.word	0x200005e4
 801385c:	20002ab4 	.word	0x20002ab4
 8013860:	0801db10 	.word	0x0801db10
 8013864:	0801db14 	.word	0x0801db14
 8013868:	40020400 	.word	0x40020400
 801386c:	200064c4 	.word	0x200064c4
 8013870:	0801db2c 	.word	0x0801db2c

08013874 <imuTest_getData>:
float lin_ax, lin_ay, lin_az;             // linear acceleration (acceleration with gravity component subtracted)

bool imuActive;

static bool imuTest_getData(void)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	af00      	add	r7, sp, #0
	if (MPU_readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)	// check if data ready interrupt
 8013878:	213a      	movs	r1, #58	; 0x3a
 801387a:	20d2      	movs	r0, #210	; 0xd2
 801387c:	f7f0 f861 	bl	8003942 <MPU_readByte>
 8013880:	4603      	mov	r3, r0
 8013882:	f003 0301 	and.w	r3, r3, #1
 8013886:	2b00      	cmp	r3, #0
 8013888:	f000 80bf 	beq.w	8013a0a <imuTest_getData+0x196>
	{
		MPU_readAccelData(accelCount);						// Read the x/y/z adc values
 801388c:	4860      	ldr	r0, [pc, #384]	; (8013a10 <imuTest_getData+0x19c>)
 801388e:	f7f0 f92f 	bl	8003af0 <MPU_readAccelData>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes - MPU9250accelBias[0];	// get actual g value, this depends on scale being set
 8013892:	4b5f      	ldr	r3, [pc, #380]	; (8013a10 <imuTest_getData+0x19c>)
 8013894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013898:	ee07 3a90 	vmov	s15, r3
 801389c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80138a0:	4b5c      	ldr	r3, [pc, #368]	; (8013a14 <imuTest_getData+0x1a0>)
 80138a2:	edd3 7a00 	vldr	s15, [r3]
 80138a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80138aa:	4b5b      	ldr	r3, [pc, #364]	; (8013a18 <imuTest_getData+0x1a4>)
 80138ac:	edd3 7a00 	vldr	s15, [r3]
 80138b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138b4:	4b59      	ldr	r3, [pc, #356]	; (8013a1c <imuTest_getData+0x1a8>)
 80138b6:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelCount[1]*aRes - MPU9250accelBias[1];
 80138ba:	4b55      	ldr	r3, [pc, #340]	; (8013a10 <imuTest_getData+0x19c>)
 80138bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80138c0:	ee07 3a90 	vmov	s15, r3
 80138c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80138c8:	4b52      	ldr	r3, [pc, #328]	; (8013a14 <imuTest_getData+0x1a0>)
 80138ca:	edd3 7a00 	vldr	s15, [r3]
 80138ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80138d2:	4b51      	ldr	r3, [pc, #324]	; (8013a18 <imuTest_getData+0x1a4>)
 80138d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80138d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138dc:	4b50      	ldr	r3, [pc, #320]	; (8013a20 <imuTest_getData+0x1ac>)
 80138de:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelCount[2]*aRes - MPU9250accelBias[2];
 80138e2:	4b4b      	ldr	r3, [pc, #300]	; (8013a10 <imuTest_getData+0x19c>)
 80138e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80138e8:	ee07 3a90 	vmov	s15, r3
 80138ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80138f0:	4b48      	ldr	r3, [pc, #288]	; (8013a14 <imuTest_getData+0x1a0>)
 80138f2:	edd3 7a00 	vldr	s15, [r3]
 80138f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80138fa:	4b47      	ldr	r3, [pc, #284]	; (8013a18 <imuTest_getData+0x1a4>)
 80138fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8013900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013904:	4b47      	ldr	r3, [pc, #284]	; (8013a24 <imuTest_getData+0x1b0>)
 8013906:	edc3 7a00 	vstr	s15, [r3]

		MPU_readGyroData(gyroCount);	// Read the x/y/z adc values
 801390a:	4847      	ldr	r0, [pc, #284]	; (8013a28 <imuTest_getData+0x1b4>)
 801390c:	f7f0 f91c 	bl	8003b48 <MPU_readGyroData>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;	// get actual gyro value, this depends on scale being set
 8013910:	4b45      	ldr	r3, [pc, #276]	; (8013a28 <imuTest_getData+0x1b4>)
 8013912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013916:	ee07 3a90 	vmov	s15, r3
 801391a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801391e:	4b43      	ldr	r3, [pc, #268]	; (8013a2c <imuTest_getData+0x1b8>)
 8013920:	edd3 7a00 	vldr	s15, [r3]
 8013924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013928:	4b41      	ldr	r3, [pc, #260]	; (8013a30 <imuTest_getData+0x1bc>)
 801392a:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroCount[1]*gRes;
 801392e:	4b3e      	ldr	r3, [pc, #248]	; (8013a28 <imuTest_getData+0x1b4>)
 8013930:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013934:	ee07 3a90 	vmov	s15, r3
 8013938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801393c:	4b3b      	ldr	r3, [pc, #236]	; (8013a2c <imuTest_getData+0x1b8>)
 801393e:	edd3 7a00 	vldr	s15, [r3]
 8013942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013946:	4b3b      	ldr	r3, [pc, #236]	; (8013a34 <imuTest_getData+0x1c0>)
 8013948:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroCount[2]*gRes;
 801394c:	4b36      	ldr	r3, [pc, #216]	; (8013a28 <imuTest_getData+0x1b4>)
 801394e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013952:	ee07 3a90 	vmov	s15, r3
 8013956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801395a:	4b34      	ldr	r3, [pc, #208]	; (8013a2c <imuTest_getData+0x1b8>)
 801395c:	edd3 7a00 	vldr	s15, [r3]
 8013960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013964:	4b34      	ldr	r3, [pc, #208]	; (8013a38 <imuTest_getData+0x1c4>)
 8013966:	edc3 7a00 	vstr	s15, [r3]

		MPU_readMagData(magCount);	// Read the x/y/z adc values
 801396a:	4834      	ldr	r0, [pc, #208]	; (8013a3c <imuTest_getData+0x1c8>)
 801396c:	f7f0 f918 	bl	8003ba0 <MPU_readMagData>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - MPU9250magBias[0];	// get actual magnetometer value, this depends on scale being set
 8013970:	4b32      	ldr	r3, [pc, #200]	; (8013a3c <imuTest_getData+0x1c8>)
 8013972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013976:	ee07 3a90 	vmov	s15, r3
 801397a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801397e:	4b30      	ldr	r3, [pc, #192]	; (8013a40 <imuTest_getData+0x1cc>)
 8013980:	edd3 7a00 	vldr	s15, [r3]
 8013984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013988:	4b2e      	ldr	r3, [pc, #184]	; (8013a44 <imuTest_getData+0x1d0>)
 801398a:	edd3 7a00 	vldr	s15, [r3]
 801398e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013992:	4b2d      	ldr	r3, [pc, #180]	; (8013a48 <imuTest_getData+0x1d4>)
 8013994:	edd3 7a00 	vldr	s15, [r3]
 8013998:	ee77 7a67 	vsub.f32	s15, s14, s15
 801399c:	4b2b      	ldr	r3, [pc, #172]	; (8013a4c <imuTest_getData+0x1d8>)
 801399e:	edc3 7a00 	vstr	s15, [r3]
		my = (float)magCount[1]*mRes*magCalibration[1] - MPU9250magBias[1];
 80139a2:	4b26      	ldr	r3, [pc, #152]	; (8013a3c <imuTest_getData+0x1c8>)
 80139a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80139a8:	ee07 3a90 	vmov	s15, r3
 80139ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80139b0:	4b23      	ldr	r3, [pc, #140]	; (8013a40 <imuTest_getData+0x1cc>)
 80139b2:	edd3 7a00 	vldr	s15, [r3]
 80139b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139ba:	4b22      	ldr	r3, [pc, #136]	; (8013a44 <imuTest_getData+0x1d0>)
 80139bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80139c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139c4:	4b20      	ldr	r3, [pc, #128]	; (8013a48 <imuTest_getData+0x1d4>)
 80139c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80139ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139ce:	4b20      	ldr	r3, [pc, #128]	; (8013a50 <imuTest_getData+0x1dc>)
 80139d0:	edc3 7a00 	vstr	s15, [r3]
		mz = (float)magCount[2]*mRes*magCalibration[2] - MPU9250magBias[2];
 80139d4:	4b19      	ldr	r3, [pc, #100]	; (8013a3c <imuTest_getData+0x1c8>)
 80139d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80139da:	ee07 3a90 	vmov	s15, r3
 80139de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80139e2:	4b17      	ldr	r3, [pc, #92]	; (8013a40 <imuTest_getData+0x1cc>)
 80139e4:	edd3 7a00 	vldr	s15, [r3]
 80139e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139ec:	4b15      	ldr	r3, [pc, #84]	; (8013a44 <imuTest_getData+0x1d0>)
 80139ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80139f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139f6:	4b14      	ldr	r3, [pc, #80]	; (8013a48 <imuTest_getData+0x1d4>)
 80139f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80139fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a00:	4b14      	ldr	r3, [pc, #80]	; (8013a54 <imuTest_getData+0x1e0>)
 8013a02:	edc3 7a00 	vstr	s15, [r3]

		return true;
 8013a06:	2301      	movs	r3, #1
 8013a08:	e000      	b.n	8013a0c <imuTest_getData+0x198>
	}
	return false;
 8013a0a:	2300      	movs	r3, #0
}
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	bd80      	pop	{r7, pc}
 8013a10:	20002ee8 	.word	0x20002ee8
 8013a14:	20002f6c 	.word	0x20002f6c
 8013a18:	20002ef0 	.word	0x20002ef0
 8013a1c:	20002f68 	.word	0x20002f68
 8013a20:	20003014 	.word	0x20003014
 8013a24:	20002f30 	.word	0x20002f30
 8013a28:	20002f38 	.word	0x20002f38
 8013a2c:	20002fac 	.word	0x20002fac
 8013a30:	20003004 	.word	0x20003004
 8013a34:	20002f2c 	.word	0x20002f2c
 8013a38:	20002f9c 	.word	0x20002f9c
 8013a3c:	20002fc8 	.word	0x20002fc8
 8013a40:	20002fe0 	.word	0x20002fe0
 8013a44:	20003008 	.word	0x20003008
 8013a48:	20002f80 	.word	0x20002f80
 8013a4c:	20003018 	.word	0x20003018
 8013a50:	20002f40 	.word	0x20002f40
 8013a54:	20002fb0 	.word	0x20002fb0

08013a58 <imuTest_quatUpdate>:
static bool imuTest_quatUpdate(void)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	af00      	add	r7, sp, #0
	if (micros() - lastCompute > 10)
 8013a5c:	f7ff fc88 	bl	8013370 <micros>
 8013a60:	4602      	mov	r2, r0
 8013a62:	4b43      	ldr	r3, [pc, #268]	; (8013b70 <imuTest_quatUpdate+0x118>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	1ad3      	subs	r3, r2, r3
 8013a68:	2b0a      	cmp	r3, #10
 8013a6a:	d97d      	bls.n	8013b68 <imuTest_quatUpdate+0x110>
	{
		Now = micros();
 8013a6c:	f7ff fc80 	bl	8013370 <micros>
 8013a70:	4603      	mov	r3, r0
 8013a72:	461a      	mov	r2, r3
 8013a74:	4b3f      	ldr	r3, [pc, #252]	; (8013b74 <imuTest_quatUpdate+0x11c>)
 8013a76:	601a      	str	r2, [r3, #0]
		deltat = ((Now - lastUpdate)/1000000.0f); // set integration time by time elapsed since last filter update
 8013a78:	4b3e      	ldr	r3, [pc, #248]	; (8013b74 <imuTest_quatUpdate+0x11c>)
 8013a7a:	681a      	ldr	r2, [r3, #0]
 8013a7c:	4b3e      	ldr	r3, [pc, #248]	; (8013b78 <imuTest_quatUpdate+0x120>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	1ad3      	subs	r3, r2, r3
 8013a82:	ee07 3a90 	vmov	s15, r3
 8013a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013a8a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8013b7c <imuTest_quatUpdate+0x124>
 8013a8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013a92:	4b3b      	ldr	r3, [pc, #236]	; (8013b80 <imuTest_quatUpdate+0x128>)
 8013a94:	edc3 7a00 	vstr	s15, [r3]
		lastUpdate = Now;
 8013a98:	4b36      	ldr	r3, [pc, #216]	; (8013b74 <imuTest_quatUpdate+0x11c>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	4a36      	ldr	r2, [pc, #216]	; (8013b78 <imuTest_quatUpdate+0x120>)
 8013a9e:	6013      	str	r3, [r2, #0]

		sum += deltat; // sum for averaging filter update rate
 8013aa0:	4b38      	ldr	r3, [pc, #224]	; (8013b84 <imuTest_quatUpdate+0x12c>)
 8013aa2:	ed93 7a00 	vldr	s14, [r3]
 8013aa6:	4b36      	ldr	r3, [pc, #216]	; (8013b80 <imuTest_quatUpdate+0x128>)
 8013aa8:	edd3 7a00 	vldr	s15, [r3]
 8013aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ab0:	4b34      	ldr	r3, [pc, #208]	; (8013b84 <imuTest_quatUpdate+0x12c>)
 8013ab2:	edc3 7a00 	vstr	s15, [r3]
		sumCount++;
 8013ab6:	4b34      	ldr	r3, [pc, #208]	; (8013b88 <imuTest_quatUpdate+0x130>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	3301      	adds	r3, #1
 8013abc:	4a32      	ldr	r2, [pc, #200]	; (8013b88 <imuTest_quatUpdate+0x130>)
 8013abe:	6013      	str	r3, [r2, #0]

		MadgwickQuaternionUpdate(ax, -ay, -az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
 8013ac0:	4b32      	ldr	r3, [pc, #200]	; (8013b8c <imuTest_quatUpdate+0x134>)
 8013ac2:	edd3 6a00 	vldr	s13, [r3]
 8013ac6:	4b32      	ldr	r3, [pc, #200]	; (8013b90 <imuTest_quatUpdate+0x138>)
 8013ac8:	edd3 7a00 	vldr	s15, [r3]
 8013acc:	eeb1 6a67 	vneg.f32	s12, s15
 8013ad0:	4b30      	ldr	r3, [pc, #192]	; (8013b94 <imuTest_quatUpdate+0x13c>)
 8013ad2:	edd3 7a00 	vldr	s15, [r3]
 8013ad6:	eef1 5a67 	vneg.f32	s11, s15
 8013ada:	4b2f      	ldr	r3, [pc, #188]	; (8013b98 <imuTest_quatUpdate+0x140>)
 8013adc:	edd3 7a00 	vldr	s15, [r3]
 8013ae0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8013b9c <imuTest_quatUpdate+0x144>
 8013ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ae8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8013ba0 <imuTest_quatUpdate+0x148>
 8013aec:	ee87 5a87 	vdiv.f32	s10, s15, s14
 8013af0:	4b2c      	ldr	r3, [pc, #176]	; (8013ba4 <imuTest_quatUpdate+0x14c>)
 8013af2:	edd3 7a00 	vldr	s15, [r3]
 8013af6:	eef1 7a67 	vneg.f32	s15, s15
 8013afa:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013b9c <imuTest_quatUpdate+0x144>
 8013afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b02:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8013ba0 <imuTest_quatUpdate+0x148>
 8013b06:	eec7 4a87 	vdiv.f32	s9, s15, s14
 8013b0a:	4b27      	ldr	r3, [pc, #156]	; (8013ba8 <imuTest_quatUpdate+0x150>)
 8013b0c:	edd3 7a00 	vldr	s15, [r3]
 8013b10:	eef1 7a67 	vneg.f32	s15, s15
 8013b14:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8013b9c <imuTest_quatUpdate+0x144>
 8013b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b1c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8013ba0 <imuTest_quatUpdate+0x148>
 8013b20:	eec7 2a87 	vdiv.f32	s5, s15, s14
 8013b24:	4b21      	ldr	r3, [pc, #132]	; (8013bac <imuTest_quatUpdate+0x154>)
 8013b26:	ed93 7a00 	vldr	s14, [r3]
 8013b2a:	4b21      	ldr	r3, [pc, #132]	; (8013bb0 <imuTest_quatUpdate+0x158>)
 8013b2c:	edd3 7a00 	vldr	s15, [r3]
 8013b30:	eef1 7a67 	vneg.f32	s15, s15
 8013b34:	4b1f      	ldr	r3, [pc, #124]	; (8013bb4 <imuTest_quatUpdate+0x15c>)
 8013b36:	ed93 4a00 	vldr	s8, [r3]
 8013b3a:	eef0 3a67 	vmov.f32	s7, s15
 8013b3e:	eeb0 3a47 	vmov.f32	s6, s14
 8013b42:	eeb0 2a64 	vmov.f32	s4, s9
 8013b46:	eef0 1a45 	vmov.f32	s3, s10
 8013b4a:	eeb0 1a65 	vmov.f32	s2, s11
 8013b4e:	eef0 0a46 	vmov.f32	s1, s12
 8013b52:	eeb0 0a66 	vmov.f32	s0, s13
 8013b56:	f7f1 f905 	bl	8004d64 <MadgwickQuaternionUpdate>

		lastCompute = micros();
 8013b5a:	f7ff fc09 	bl	8013370 <micros>
 8013b5e:	4602      	mov	r2, r0
 8013b60:	4b03      	ldr	r3, [pc, #12]	; (8013b70 <imuTest_quatUpdate+0x118>)
 8013b62:	601a      	str	r2, [r3, #0]
		return true;
 8013b64:	2301      	movs	r3, #1
 8013b66:	e000      	b.n	8013b6a <imuTest_quatUpdate+0x112>
	}
	return false;
 8013b68:	2300      	movs	r3, #0
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	bd80      	pop	{r7, pc}
 8013b6e:	bf00      	nop
 8013b70:	2000301c 	.word	0x2000301c
 8013b74:	20002f64 	.word	0x20002f64
 8013b78:	20002f34 	.word	0x20002f34
 8013b7c:	49742400 	.word	0x49742400
 8013b80:	20002fdc 	.word	0x20002fdc
 8013b84:	20002f24 	.word	0x20002f24
 8013b88:	20003024 	.word	0x20003024
 8013b8c:	20002f68 	.word	0x20002f68
 8013b90:	20003014 	.word	0x20003014
 8013b94:	20002f30 	.word	0x20002f30
 8013b98:	20003004 	.word	0x20003004
 8013b9c:	40490fdb 	.word	0x40490fdb
 8013ba0:	43340000 	.word	0x43340000
 8013ba4:	20002f2c 	.word	0x20002f2c
 8013ba8:	20002f9c 	.word	0x20002f9c
 8013bac:	20002f40 	.word	0x20002f40
 8013bb0:	20003018 	.word	0x20003018
 8013bb4:	20002fb0 	.word	0x20002fb0

08013bb8 <imuTest_getEuler>:
static void imuTest_getEuler()
{
 8013bb8:	b5b0      	push	{r4, r5, r7, lr}
 8013bba:	af00      	add	r7, sp, #0
	yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8013bbc:	4b84      	ldr	r3, [pc, #528]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013bbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8013bc2:	4b83      	ldr	r3, [pc, #524]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013bc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8013bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013bcc:	4b80      	ldr	r3, [pc, #512]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013bce:	edd3 6a00 	vldr	s13, [r3]
 8013bd2:	4b7f      	ldr	r3, [pc, #508]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013bd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8013bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013be0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013be4:	ee17 0a90 	vmov	r0, s15
 8013be8:	f7ec fcbe 	bl	8000568 <__aeabi_f2d>
 8013bec:	4604      	mov	r4, r0
 8013bee:	460d      	mov	r5, r1
 8013bf0:	4b77      	ldr	r3, [pc, #476]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013bf2:	ed93 7a00 	vldr	s14, [r3]
 8013bf6:	4b76      	ldr	r3, [pc, #472]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013bf8:	edd3 7a00 	vldr	s15, [r3]
 8013bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c00:	4b73      	ldr	r3, [pc, #460]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013c02:	edd3 6a01 	vldr	s13, [r3, #4]
 8013c06:	4b72      	ldr	r3, [pc, #456]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013c08:	edd3 7a01 	vldr	s15, [r3, #4]
 8013c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013c14:	4b6e      	ldr	r3, [pc, #440]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013c16:	edd3 6a02 	vldr	s13, [r3, #8]
 8013c1a:	4b6d      	ldr	r3, [pc, #436]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013c1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c28:	4b69      	ldr	r3, [pc, #420]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013c2a:	edd3 6a03 	vldr	s13, [r3, #12]
 8013c2e:	4b68      	ldr	r3, [pc, #416]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013c30:	edd3 7a03 	vldr	s15, [r3, #12]
 8013c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c3c:	ee17 0a90 	vmov	r0, s15
 8013c40:	f7ec fc92 	bl	8000568 <__aeabi_f2d>
 8013c44:	4602      	mov	r2, r0
 8013c46:	460b      	mov	r3, r1
 8013c48:	ec43 2b11 	vmov	d1, r2, r3
 8013c4c:	ec45 4b10 	vmov	d0, r4, r5
 8013c50:	f006 feea 	bl	801aa28 <atan2>
 8013c54:	ec54 3b10 	vmov	r3, r4, d0
 8013c58:	4618      	mov	r0, r3
 8013c5a:	4621      	mov	r1, r4
 8013c5c:	f7ec ffd4 	bl	8000c08 <__aeabi_d2f>
 8013c60:	4602      	mov	r2, r0
 8013c62:	4b5c      	ldr	r3, [pc, #368]	; (8013dd4 <imuTest_getEuler+0x21c>)
 8013c64:	601a      	str	r2, [r3, #0]
	pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
 8013c66:	4b5a      	ldr	r3, [pc, #360]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013c68:	ed93 7a01 	vldr	s14, [r3, #4]
 8013c6c:	4b58      	ldr	r3, [pc, #352]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013c6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8013c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c76:	4b56      	ldr	r3, [pc, #344]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013c78:	edd3 6a00 	vldr	s13, [r3]
 8013c7c:	4b54      	ldr	r3, [pc, #336]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013c7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8013c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013c8e:	ee17 0a90 	vmov	r0, s15
 8013c92:	f7ec fc69 	bl	8000568 <__aeabi_f2d>
 8013c96:	4603      	mov	r3, r0
 8013c98:	460c      	mov	r4, r1
 8013c9a:	ec44 3b10 	vmov	d0, r3, r4
 8013c9e:	f006 fe6b 	bl	801a978 <asin>
 8013ca2:	ec54 3b10 	vmov	r3, r4, d0
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	4621      	mov	r1, r4
 8013caa:	f7ec ffad 	bl	8000c08 <__aeabi_d2f>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	ee07 3a90 	vmov	s15, r3
 8013cb4:	eef1 7a67 	vneg.f32	s15, s15
 8013cb8:	4b47      	ldr	r3, [pc, #284]	; (8013dd8 <imuTest_getEuler+0x220>)
 8013cba:	edc3 7a00 	vstr	s15, [r3]
	roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8013cbe:	4b44      	ldr	r3, [pc, #272]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013cc0:	ed93 7a00 	vldr	s14, [r3]
 8013cc4:	4b42      	ldr	r3, [pc, #264]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013cc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8013cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013cce:	4b40      	ldr	r3, [pc, #256]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013cd0:	edd3 6a02 	vldr	s13, [r3, #8]
 8013cd4:	4b3e      	ldr	r3, [pc, #248]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013cd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8013cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ce2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013ce6:	ee17 0a90 	vmov	r0, s15
 8013cea:	f7ec fc3d 	bl	8000568 <__aeabi_f2d>
 8013cee:	4604      	mov	r4, r0
 8013cf0:	460d      	mov	r5, r1
 8013cf2:	4b37      	ldr	r3, [pc, #220]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013cf4:	ed93 7a00 	vldr	s14, [r3]
 8013cf8:	4b35      	ldr	r3, [pc, #212]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013cfa:	edd3 7a00 	vldr	s15, [r3]
 8013cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013d02:	4b33      	ldr	r3, [pc, #204]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013d04:	edd3 6a01 	vldr	s13, [r3, #4]
 8013d08:	4b31      	ldr	r3, [pc, #196]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013d0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8013d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013d16:	4b2e      	ldr	r3, [pc, #184]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013d18:	edd3 6a02 	vldr	s13, [r3, #8]
 8013d1c:	4b2c      	ldr	r3, [pc, #176]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013d1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8013d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013d2a:	4b29      	ldr	r3, [pc, #164]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013d2c:	edd3 6a03 	vldr	s13, [r3, #12]
 8013d30:	4b27      	ldr	r3, [pc, #156]	; (8013dd0 <imuTest_getEuler+0x218>)
 8013d32:	edd3 7a03 	vldr	s15, [r3, #12]
 8013d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d3e:	ee17 0a90 	vmov	r0, s15
 8013d42:	f7ec fc11 	bl	8000568 <__aeabi_f2d>
 8013d46:	4602      	mov	r2, r0
 8013d48:	460b      	mov	r3, r1
 8013d4a:	ec43 2b11 	vmov	d1, r2, r3
 8013d4e:	ec45 4b10 	vmov	d0, r4, r5
 8013d52:	f006 fe69 	bl	801aa28 <atan2>
 8013d56:	ec54 3b10 	vmov	r3, r4, d0
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	4621      	mov	r1, r4
 8013d5e:	f7ec ff53 	bl	8000c08 <__aeabi_d2f>
 8013d62:	4602      	mov	r2, r0
 8013d64:	4b1d      	ldr	r3, [pc, #116]	; (8013ddc <imuTest_getEuler+0x224>)
 8013d66:	601a      	str	r2, [r3, #0]
	pitch *= 180.0f / PI;
 8013d68:	4b1b      	ldr	r3, [pc, #108]	; (8013dd8 <imuTest_getEuler+0x220>)
 8013d6a:	edd3 7a00 	vldr	s15, [r3]
 8013d6e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8013de0 <imuTest_getEuler+0x228>
 8013d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d76:	4b18      	ldr	r3, [pc, #96]	; (8013dd8 <imuTest_getEuler+0x220>)
 8013d78:	edc3 7a00 	vstr	s15, [r3]
	yaw   *= 180.0f / PI;
 8013d7c:	4b15      	ldr	r3, [pc, #84]	; (8013dd4 <imuTest_getEuler+0x21c>)
 8013d7e:	edd3 7a00 	vldr	s15, [r3]
 8013d82:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8013de0 <imuTest_getEuler+0x228>
 8013d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d8a:	4b12      	ldr	r3, [pc, #72]	; (8013dd4 <imuTest_getEuler+0x21c>)
 8013d8c:	edc3 7a00 	vstr	s15, [r3]
	//yaw   -= 5.78f;
	roll  *= 180.0f / PI;
 8013d90:	4b12      	ldr	r3, [pc, #72]	; (8013ddc <imuTest_getEuler+0x224>)
 8013d92:	edd3 7a00 	vldr	s15, [r3]
 8013d96:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8013de0 <imuTest_getEuler+0x228>
 8013d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d9e:	4b0f      	ldr	r3, [pc, #60]	; (8013ddc <imuTest_getEuler+0x224>)
 8013da0:	edc3 7a00 	vstr	s15, [r3]
	if(yaw < 0) yaw   += 360.0f;
 8013da4:	4b0b      	ldr	r3, [pc, #44]	; (8013dd4 <imuTest_getEuler+0x21c>)
 8013da6:	edd3 7a00 	vldr	s15, [r3]
 8013daa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db2:	d400      	bmi.n	8013db6 <imuTest_getEuler+0x1fe>
}
 8013db4:	e009      	b.n	8013dca <imuTest_getEuler+0x212>
	if(yaw < 0) yaw   += 360.0f;
 8013db6:	4b07      	ldr	r3, [pc, #28]	; (8013dd4 <imuTest_getEuler+0x21c>)
 8013db8:	edd3 7a00 	vldr	s15, [r3]
 8013dbc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8013de4 <imuTest_getEuler+0x22c>
 8013dc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013dc4:	4b03      	ldr	r3, [pc, #12]	; (8013dd4 <imuTest_getEuler+0x21c>)
 8013dc6:	edc3 7a00 	vstr	s15, [r3]
}
 8013dca:	bf00      	nop
 8013dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	20002ff4 	.word	0x20002ff4
 8013dd4:	20002fc4 	.word	0x20002fc4
 8013dd8:	20002fd0 	.word	0x20002fd0
 8013ddc:	20002fd4 	.word	0x20002fd4
 8013de0:	42652ee0 	.word	0x42652ee0
 8013de4:	43b40000 	.word	0x43b40000

08013de8 <imuTest_begin>:
		lastPrint = millis();
	}
}

static bool imuTest_begin(void)
{
 8013de8:	b590      	push	{r4, r7, lr}
 8013dea:	b083      	sub	sp, #12
 8013dec:	af00      	add	r7, sp, #0
	imuActive = false;
 8013dee:	4bc4      	ldr	r3, [pc, #784]	; (8014100 <imuTest_begin+0x318>)
 8013df0:	2200      	movs	r2, #0
 8013df2:	701a      	strb	r2, [r3, #0]

	println("imuTest start!");
 8013df4:	48c3      	ldr	r0, [pc, #780]	; (8014104 <imuTest_begin+0x31c>)
 8013df6:	f7ff f9e9 	bl	80131cc <println>
	GyroMeasError = PI * (60.0f / 180.0f);
 8013dfa:	4bc3      	ldr	r3, [pc, #780]	; (8014108 <imuTest_begin+0x320>)
 8013dfc:	4ac3      	ldr	r2, [pc, #780]	; (801410c <imuTest_begin+0x324>)
 8013dfe:	601a      	str	r2, [r3, #0]
	beta = sqrt(3.0f / 4.0f) * GyroMeasError;
 8013e00:	4bc1      	ldr	r3, [pc, #772]	; (8014108 <imuTest_begin+0x320>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7ec fbaf 	bl	8000568 <__aeabi_f2d>
 8013e0a:	a3bb      	add	r3, pc, #748	; (adr r3, 80140f8 <imuTest_begin+0x310>)
 8013e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e10:	f7ec fc02 	bl	8000618 <__aeabi_dmul>
 8013e14:	4603      	mov	r3, r0
 8013e16:	460c      	mov	r4, r1
 8013e18:	4618      	mov	r0, r3
 8013e1a:	4621      	mov	r1, r4
 8013e1c:	f7ec fef4 	bl	8000c08 <__aeabi_d2f>
 8013e20:	4602      	mov	r2, r0
 8013e22:	4bbb      	ldr	r3, [pc, #748]	; (8014110 <imuTest_begin+0x328>)
 8013e24:	601a      	str	r2, [r3, #0]
	GyroMeasDrift = PI * (1.0f / 180.0f);
 8013e26:	4bbb      	ldr	r3, [pc, #748]	; (8014114 <imuTest_begin+0x32c>)
 8013e28:	4abb      	ldr	r2, [pc, #748]	; (8014118 <imuTest_begin+0x330>)
 8013e2a:	601a      	str	r2, [r3, #0]
	zeta = sqrt(3.0f / 4.0f) * GyroMeasDrift;
 8013e2c:	4bb9      	ldr	r3, [pc, #740]	; (8014114 <imuTest_begin+0x32c>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7ec fb99 	bl	8000568 <__aeabi_f2d>
 8013e36:	a3b0      	add	r3, pc, #704	; (adr r3, 80140f8 <imuTest_begin+0x310>)
 8013e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e3c:	f7ec fbec 	bl	8000618 <__aeabi_dmul>
 8013e40:	4603      	mov	r3, r0
 8013e42:	460c      	mov	r4, r1
 8013e44:	4618      	mov	r0, r3
 8013e46:	4621      	mov	r1, r4
 8013e48:	f7ec fede 	bl	8000c08 <__aeabi_d2f>
 8013e4c:	4602      	mov	r2, r0
 8013e4e:	4bb3      	ldr	r3, [pc, #716]	; (801411c <imuTest_begin+0x334>)
 8013e50:	601a      	str	r2, [r3, #0]

	AAscale = AFS_2G;
 8013e52:	4bb3      	ldr	r3, [pc, #716]	; (8014120 <imuTest_begin+0x338>)
 8013e54:	2200      	movs	r2, #0
 8013e56:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 8013e58:	4bb2      	ldr	r3, [pc, #712]	; (8014124 <imuTest_begin+0x33c>)
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 8013e5e:	4bb2      	ldr	r3, [pc, #712]	; (8014128 <imuTest_begin+0x340>)
 8013e60:	2201      	movs	r2, #1
 8013e62:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 8013e64:	4bb1      	ldr	r3, [pc, #708]	; (801412c <imuTest_begin+0x344>)
 8013e66:	2206      	movs	r2, #6
 8013e68:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 8013e6a:	4bb1      	ldr	r3, [pc, #708]	; (8014130 <imuTest_begin+0x348>)
 8013e6c:	f04f 0200 	mov.w	r2, #0
 8013e70:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 8013e72:	4baf      	ldr	r3, [pc, #700]	; (8014130 <imuTest_begin+0x348>)
 8013e74:	f04f 0200 	mov.w	r2, #0
 8013e78:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 8013e7a:	4bad      	ldr	r3, [pc, #692]	; (8014130 <imuTest_begin+0x348>)
 8013e7c:	f04f 0200 	mov.w	r2, #0
 8013e80:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 8013e82:	4bac      	ldr	r3, [pc, #688]	; (8014134 <imuTest_begin+0x34c>)
 8013e84:	f04f 0200 	mov.w	r2, #0
 8013e88:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 8013e8a:	4baa      	ldr	r3, [pc, #680]	; (8014134 <imuTest_begin+0x34c>)
 8013e8c:	f04f 0200 	mov.w	r2, #0
 8013e90:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 8013e92:	4ba8      	ldr	r3, [pc, #672]	; (8014134 <imuTest_begin+0x34c>)
 8013e94:	f04f 0200 	mov.w	r2, #0
 8013e98:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 8013e9a:	4ba7      	ldr	r3, [pc, #668]	; (8014138 <imuTest_begin+0x350>)
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	601a      	str	r2, [r3, #0]
	count = 0;
 8013ea0:	4ba6      	ldr	r3, [pc, #664]	; (801413c <imuTest_begin+0x354>)
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 8013ea6:	4ba6      	ldr	r3, [pc, #664]	; (8014140 <imuTest_begin+0x358>)
 8013ea8:	f04f 0200 	mov.w	r2, #0
 8013eac:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 8013eae:	4ba5      	ldr	r3, [pc, #660]	; (8014144 <imuTest_begin+0x35c>)
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 8013eb4:	4ba4      	ldr	r3, [pc, #656]	; (8014148 <imuTest_begin+0x360>)
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	601a      	str	r2, [r3, #0]
	Now = 0;
 8013eba:	4ba4      	ldr	r3, [pc, #656]	; (801414c <imuTest_begin+0x364>)
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 8013ec0:	4ba3      	ldr	r3, [pc, #652]	; (8014150 <imuTest_begin+0x368>)
 8013ec2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8013ec6:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 8013ec8:	4ba1      	ldr	r3, [pc, #644]	; (8014150 <imuTest_begin+0x368>)
 8013eca:	f04f 0200 	mov.w	r2, #0
 8013ece:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 8013ed0:	4b9f      	ldr	r3, [pc, #636]	; (8014150 <imuTest_begin+0x368>)
 8013ed2:	f04f 0200 	mov.w	r2, #0
 8013ed6:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 8013ed8:	4b9d      	ldr	r3, [pc, #628]	; (8014150 <imuTest_begin+0x368>)
 8013eda:	f04f 0200 	mov.w	r2, #0
 8013ede:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 8013ee0:	4b9c      	ldr	r3, [pc, #624]	; (8014154 <imuTest_begin+0x36c>)
 8013ee2:	f04f 0200 	mov.w	r2, #0
 8013ee6:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 8013ee8:	4b9a      	ldr	r3, [pc, #616]	; (8014154 <imuTest_begin+0x36c>)
 8013eea:	f04f 0200 	mov.w	r2, #0
 8013eee:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 8013ef0:	4b98      	ldr	r3, [pc, #608]	; (8014154 <imuTest_begin+0x36c>)
 8013ef2:	f04f 0200 	mov.w	r2, #0
 8013ef6:	609a      	str	r2, [r3, #8]


	if (MPU_present())
 8013ef8:	f7ef fe8e 	bl	8003c18 <MPU_present>
 8013efc:	4603      	mov	r3, r0
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	f000 8192 	beq.w	8014228 <imuTest_begin+0x440>
	{
		HAL_Delay(100);
 8013f04:	2064      	movs	r0, #100	; 0x64
 8013f06:	f7f2 f9ed 	bl	80062e4 <HAL_Delay>
		MPU_SelfTest(SelfTest); // Start by performing self test and reporting values
 8013f0a:	4893      	ldr	r0, [pc, #588]	; (8014158 <imuTest_begin+0x370>)
 8013f0c:	f7f0 fa9c 	bl	8004448 <MPU_SelfTest>
		println("MPU9250 Self Test:");
 8013f10:	4892      	ldr	r0, [pc, #584]	; (801415c <imuTest_begin+0x374>)
 8013f12:	f7ff f95b 	bl	80131cc <println>
		print("x-axis self test: acceleration trim within : "); print_float(SelfTest[0]); println("% of factory value");
 8013f16:	4892      	ldr	r0, [pc, #584]	; (8014160 <imuTest_begin+0x378>)
 8013f18:	f7ff f936 	bl	8013188 <print>
 8013f1c:	4b8e      	ldr	r3, [pc, #568]	; (8014158 <imuTest_begin+0x370>)
 8013f1e:	edd3 7a00 	vldr	s15, [r3]
 8013f22:	eeb0 0a67 	vmov.f32	s0, s15
 8013f26:	f7ff f9ed 	bl	8013304 <print_float>
 8013f2a:	488e      	ldr	r0, [pc, #568]	; (8014164 <imuTest_begin+0x37c>)
 8013f2c:	f7ff f94e 	bl	80131cc <println>
		print("y-axis self test: acceleration trim within : "); print_float(SelfTest[1]); println("% of factory value");
 8013f30:	488d      	ldr	r0, [pc, #564]	; (8014168 <imuTest_begin+0x380>)
 8013f32:	f7ff f929 	bl	8013188 <print>
 8013f36:	4b88      	ldr	r3, [pc, #544]	; (8014158 <imuTest_begin+0x370>)
 8013f38:	edd3 7a01 	vldr	s15, [r3, #4]
 8013f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8013f40:	f7ff f9e0 	bl	8013304 <print_float>
 8013f44:	4887      	ldr	r0, [pc, #540]	; (8014164 <imuTest_begin+0x37c>)
 8013f46:	f7ff f941 	bl	80131cc <println>
		print("z-axis self test: acceleration trim within : "); print_float(SelfTest[2]); println("% of factory value");
 8013f4a:	4888      	ldr	r0, [pc, #544]	; (801416c <imuTest_begin+0x384>)
 8013f4c:	f7ff f91c 	bl	8013188 <print>
 8013f50:	4b81      	ldr	r3, [pc, #516]	; (8014158 <imuTest_begin+0x370>)
 8013f52:	edd3 7a02 	vldr	s15, [r3, #8]
 8013f56:	eeb0 0a67 	vmov.f32	s0, s15
 8013f5a:	f7ff f9d3 	bl	8013304 <print_float>
 8013f5e:	4881      	ldr	r0, [pc, #516]	; (8014164 <imuTest_begin+0x37c>)
 8013f60:	f7ff f934 	bl	80131cc <println>
		print("x-axis self test: gyration trim within : "); print_float(SelfTest[3]); println("% of factory value");
 8013f64:	4882      	ldr	r0, [pc, #520]	; (8014170 <imuTest_begin+0x388>)
 8013f66:	f7ff f90f 	bl	8013188 <print>
 8013f6a:	4b7b      	ldr	r3, [pc, #492]	; (8014158 <imuTest_begin+0x370>)
 8013f6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8013f70:	eeb0 0a67 	vmov.f32	s0, s15
 8013f74:	f7ff f9c6 	bl	8013304 <print_float>
 8013f78:	487a      	ldr	r0, [pc, #488]	; (8014164 <imuTest_begin+0x37c>)
 8013f7a:	f7ff f927 	bl	80131cc <println>
		print("y-axis self test: gyration trim within : "); print_float(SelfTest[4]); println("% of factory value");
 8013f7e:	487d      	ldr	r0, [pc, #500]	; (8014174 <imuTest_begin+0x38c>)
 8013f80:	f7ff f902 	bl	8013188 <print>
 8013f84:	4b74      	ldr	r3, [pc, #464]	; (8014158 <imuTest_begin+0x370>)
 8013f86:	edd3 7a04 	vldr	s15, [r3, #16]
 8013f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8013f8e:	f7ff f9b9 	bl	8013304 <print_float>
 8013f92:	4874      	ldr	r0, [pc, #464]	; (8014164 <imuTest_begin+0x37c>)
 8013f94:	f7ff f91a 	bl	80131cc <println>
		print("z-axis self test: gyration trim within : "); print_float(SelfTest[5]); println("% of factory value");
 8013f98:	4877      	ldr	r0, [pc, #476]	; (8014178 <imuTest_begin+0x390>)
 8013f9a:	f7ff f8f5 	bl	8013188 <print>
 8013f9e:	4b6e      	ldr	r3, [pc, #440]	; (8014158 <imuTest_begin+0x370>)
 8013fa0:	edd3 7a05 	vldr	s15, [r3, #20]
 8013fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8013fa8:	f7ff f9ac 	bl	8013304 <print_float>
 8013fac:	486d      	ldr	r0, [pc, #436]	; (8014164 <imuTest_begin+0x37c>)
 8013fae:	f7ff f90d 	bl	80131cc <println>
		HAL_Delay(1000);
 8013fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013fb6:	f7f2 f995 	bl	80062e4 <HAL_Delay>

		// get sensor resolutions, only need to do this once
		MPU_getAres();
 8013fba:	f7ef fd69 	bl	8003a90 <MPU_getAres>
		MPU_getGres();
 8013fbe:	f7ef fd33 	bl	8003a28 <MPU_getGres>
		MPU_getMres();
 8013fc2:	f7ef fd13 	bl	80039ec <MPU_getMres>

		println(" Calibrate MPU9250 gyro and accel");
 8013fc6:	486d      	ldr	r0, [pc, #436]	; (801417c <imuTest_begin+0x394>)
 8013fc8:	f7ff f900 	bl	80131cc <println>
		MPU_calibrate(MPU9250gyroBias, MPU9250accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 8013fcc:	496c      	ldr	r1, [pc, #432]	; (8014180 <imuTest_begin+0x398>)
 8013fce:	486d      	ldr	r0, [pc, #436]	; (8014184 <imuTest_begin+0x39c>)
 8013fd0:	f7ef ffac 	bl	8003f2c <MPU_calibrate>
		println("accel biases (mg)");
 8013fd4:	486c      	ldr	r0, [pc, #432]	; (8014188 <imuTest_begin+0x3a0>)
 8013fd6:	f7ff f8f9 	bl	80131cc <println>
		print_float(1000.0 * MPU9250accelBias[0]); println("");
 8013fda:	4b69      	ldr	r3, [pc, #420]	; (8014180 <imuTest_begin+0x398>)
 8013fdc:	edd3 7a00 	vldr	s15, [r3]
 8013fe0:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 801418c <imuTest_begin+0x3a4>
 8013fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8013fec:	f7ff f98a 	bl	8013304 <print_float>
 8013ff0:	4867      	ldr	r0, [pc, #412]	; (8014190 <imuTest_begin+0x3a8>)
 8013ff2:	f7ff f8eb 	bl	80131cc <println>
		print_float(1000.0 * MPU9250accelBias[1]); println("");
 8013ff6:	4b62      	ldr	r3, [pc, #392]	; (8014180 <imuTest_begin+0x398>)
 8013ff8:	edd3 7a01 	vldr	s15, [r3, #4]
 8013ffc:	ed9f 7a63 	vldr	s14, [pc, #396]	; 801418c <imuTest_begin+0x3a4>
 8014000:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014004:	eeb0 0a67 	vmov.f32	s0, s15
 8014008:	f7ff f97c 	bl	8013304 <print_float>
 801400c:	4860      	ldr	r0, [pc, #384]	; (8014190 <imuTest_begin+0x3a8>)
 801400e:	f7ff f8dd 	bl	80131cc <println>
		print_float(1000.0 * MPU9250accelBias[2]); println("");
 8014012:	4b5b      	ldr	r3, [pc, #364]	; (8014180 <imuTest_begin+0x398>)
 8014014:	edd3 7a02 	vldr	s15, [r3, #8]
 8014018:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801418c <imuTest_begin+0x3a4>
 801401c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014020:	eeb0 0a67 	vmov.f32	s0, s15
 8014024:	f7ff f96e 	bl	8013304 <print_float>
 8014028:	4859      	ldr	r0, [pc, #356]	; (8014190 <imuTest_begin+0x3a8>)
 801402a:	f7ff f8cf 	bl	80131cc <println>
		println("gyro biases (dps)");
 801402e:	4859      	ldr	r0, [pc, #356]	; (8014194 <imuTest_begin+0x3ac>)
 8014030:	f7ff f8cc 	bl	80131cc <println>
		print_float(MPU9250gyroBias[0]); println("");
 8014034:	4b53      	ldr	r3, [pc, #332]	; (8014184 <imuTest_begin+0x39c>)
 8014036:	edd3 7a00 	vldr	s15, [r3]
 801403a:	eeb0 0a67 	vmov.f32	s0, s15
 801403e:	f7ff f961 	bl	8013304 <print_float>
 8014042:	4853      	ldr	r0, [pc, #332]	; (8014190 <imuTest_begin+0x3a8>)
 8014044:	f7ff f8c2 	bl	80131cc <println>
		print_float(MPU9250gyroBias[1]); println("");
 8014048:	4b4e      	ldr	r3, [pc, #312]	; (8014184 <imuTest_begin+0x39c>)
 801404a:	edd3 7a01 	vldr	s15, [r3, #4]
 801404e:	eeb0 0a67 	vmov.f32	s0, s15
 8014052:	f7ff f957 	bl	8013304 <print_float>
 8014056:	484e      	ldr	r0, [pc, #312]	; (8014190 <imuTest_begin+0x3a8>)
 8014058:	f7ff f8b8 	bl	80131cc <println>
		print_float(MPU9250gyroBias[2]); println("");
 801405c:	4b49      	ldr	r3, [pc, #292]	; (8014184 <imuTest_begin+0x39c>)
 801405e:	edd3 7a02 	vldr	s15, [r3, #8]
 8014062:	eeb0 0a67 	vmov.f32	s0, s15
 8014066:	f7ff f94d 	bl	8013304 <print_float>
 801406a:	4849      	ldr	r0, [pc, #292]	; (8014190 <imuTest_begin+0x3a8>)
 801406c:	f7ff f8ae 	bl	80131cc <println>

		HAL_Delay(1000);
 8014070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014074:	f7f2 f936 	bl	80062e4 <HAL_Delay>

		MPU_init();
 8014078:	f7ef fdf0 	bl	8003c5c <MPU_init>
		println("MPU9250 initialized for active data mode...."); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
 801407c:	4846      	ldr	r0, [pc, #280]	; (8014198 <imuTest_begin+0x3b0>)
 801407e:	f7ff f8a5 	bl	80131cc <println>

		// Read the WHO_AM_I register of the magnetometer, this is a good test of communication
		char d = MPU_readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);  // Read WHO_AM_I register for AK8963
 8014082:	2100      	movs	r1, #0
 8014084:	2018      	movs	r0, #24
 8014086:	f7ef fc5c 	bl	8003942 <MPU_readByte>
 801408a:	4603      	mov	r3, r0
 801408c:	71fb      	strb	r3, [r7, #7]
		if (d == 0x48) println("[MAG] SUCCESSS!!!!");
 801408e:	79fb      	ldrb	r3, [r7, #7]
 8014090:	2b48      	cmp	r3, #72	; 0x48
 8014092:	d102      	bne.n	801409a <imuTest_begin+0x2b2>
 8014094:	4841      	ldr	r0, [pc, #260]	; (801419c <imuTest_begin+0x3b4>)
 8014096:	f7ff f899 	bl	80131cc <println>

		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 801409a:	2201      	movs	r2, #1
 801409c:	2180      	movs	r1, #128	; 0x80
 801409e:	4840      	ldr	r0, [pc, #256]	; (80141a0 <imuTest_begin+0x3b8>)
 80140a0:	f7f2 ff9e 	bl	8006fe0 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 80140a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80140a8:	f7f2 f91c 	bl	80062e4 <HAL_Delay>

		// Get magnetometer calibration from AK8963 ROM
		AK8963_init(magCalibration); println("AK8963 initialized for active data mode...."); // Initialize device for active mode read of magnetometer
 80140ac:	4820      	ldr	r0, [pc, #128]	; (8014130 <imuTest_begin+0x348>)
 80140ae:	f7ef febd 	bl	8003e2c <AK8963_init>
 80140b2:	483c      	ldr	r0, [pc, #240]	; (80141a4 <imuTest_begin+0x3bc>)
 80140b4:	f7ff f88a 	bl	80131cc <println>

		MPU_calibrateMag(MPU9250magBias);
 80140b8:	483b      	ldr	r0, [pc, #236]	; (80141a8 <imuTest_begin+0x3c0>)
 80140ba:	f7f0 fd6b 	bl	8004b94 <MPU_calibrateMag>
		println("AK8963 mag biases (mG)");
 80140be:	483b      	ldr	r0, [pc, #236]	; (80141ac <imuTest_begin+0x3c4>)
 80140c0:	f7ff f884 	bl	80131cc <println>
		print_float(MPU9250magBias[0]); println("");
 80140c4:	4b38      	ldr	r3, [pc, #224]	; (80141a8 <imuTest_begin+0x3c0>)
 80140c6:	edd3 7a00 	vldr	s15, [r3]
 80140ca:	eeb0 0a67 	vmov.f32	s0, s15
 80140ce:	f7ff f919 	bl	8013304 <print_float>
 80140d2:	482f      	ldr	r0, [pc, #188]	; (8014190 <imuTest_begin+0x3a8>)
 80140d4:	f7ff f87a 	bl	80131cc <println>
		print_float(MPU9250magBias[1]); println("");
 80140d8:	4b33      	ldr	r3, [pc, #204]	; (80141a8 <imuTest_begin+0x3c0>)
 80140da:	edd3 7a01 	vldr	s15, [r3, #4]
 80140de:	eeb0 0a67 	vmov.f32	s0, s15
 80140e2:	f7ff f90f 	bl	8013304 <print_float>
 80140e6:	482a      	ldr	r0, [pc, #168]	; (8014190 <imuTest_begin+0x3a8>)
 80140e8:	f7ff f870 	bl	80131cc <println>
		print_float(MPU9250magBias[2]); println("");
 80140ec:	4b2e      	ldr	r3, [pc, #184]	; (80141a8 <imuTest_begin+0x3c0>)
 80140ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80140f2:	e05d      	b.n	80141b0 <imuTest_begin+0x3c8>
 80140f4:	f3af 8000 	nop.w
 80140f8:	e8584caa 	.word	0xe8584caa
 80140fc:	3febb67a 	.word	0x3febb67a
 8014100:	20002eee 	.word	0x20002eee
 8014104:	0801db64 	.word	0x0801db64
 8014108:	20002f74 	.word	0x20002f74
 801410c:	3f860a92 	.word	0x3f860a92
 8014110:	20002fa8 	.word	0x20002fa8
 8014114:	20002efc 	.word	0x20002efc
 8014118:	3c8efa36 	.word	0x3c8efa36
 801411c:	20003020 	.word	0x20003020
 8014120:	20002f28 	.word	0x20002f28
 8014124:	20002eef 	.word	0x20002eef
 8014128:	20002f78 	.word	0x20002f78
 801412c:	20002f50 	.word	0x20002f50
 8014130:	20003008 	.word	0x20003008
 8014134:	20002f54 	.word	0x20002f54
 8014138:	20002fa0 	.word	0x20002fa0
 801413c:	20002f98 	.word	0x20002f98
 8014140:	20002fdc 	.word	0x20002fdc
 8014144:	20002f34 	.word	0x20002f34
 8014148:	20002fe4 	.word	0x20002fe4
 801414c:	20002f64 	.word	0x20002f64
 8014150:	20002ff4 	.word	0x20002ff4
 8014154:	20002f44 	.word	0x20002f44
 8014158:	20002f00 	.word	0x20002f00
 801415c:	0801db74 	.word	0x0801db74
 8014160:	0801db88 	.word	0x0801db88
 8014164:	0801dbb8 	.word	0x0801dbb8
 8014168:	0801dbcc 	.word	0x0801dbcc
 801416c:	0801dbfc 	.word	0x0801dbfc
 8014170:	0801dc2c 	.word	0x0801dc2c
 8014174:	0801dc58 	.word	0x0801dc58
 8014178:	0801dc84 	.word	0x0801dc84
 801417c:	0801dcb0 	.word	0x0801dcb0
 8014180:	20002ef0 	.word	0x20002ef0
 8014184:	20002fb8 	.word	0x20002fb8
 8014188:	0801dcd4 	.word	0x0801dcd4
 801418c:	447a0000 	.word	0x447a0000
 8014190:	0801dabc 	.word	0x0801dabc
 8014194:	0801dce8 	.word	0x0801dce8
 8014198:	0801dcfc 	.word	0x0801dcfc
 801419c:	0801dd2c 	.word	0x0801dd2c
 80141a0:	40020800 	.word	0x40020800
 80141a4:	0801dd40 	.word	0x0801dd40
 80141a8:	20002f80 	.word	0x20002f80
 80141ac:	0801dd6c 	.word	0x0801dd6c
 80141b0:	eeb0 0a67 	vmov.f32	s0, s15
 80141b4:	f7ff f8a6 	bl	8013304 <print_float>
 80141b8:	481e      	ldr	r0, [pc, #120]	; (8014234 <imuTest_begin+0x44c>)
 80141ba:	f7ff f807 	bl	80131cc <println>
		HAL_Delay(2000); // add delay to see results before serial spew of data
 80141be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80141c2:	f7f2 f88f 	bl	80062e4 <HAL_Delay>

		print("[MAG] X-Axis sensitivity adjustment value "); print_float(magCalibration[0]); println("");
 80141c6:	481c      	ldr	r0, [pc, #112]	; (8014238 <imuTest_begin+0x450>)
 80141c8:	f7fe ffde 	bl	8013188 <print>
 80141cc:	4b1b      	ldr	r3, [pc, #108]	; (801423c <imuTest_begin+0x454>)
 80141ce:	edd3 7a00 	vldr	s15, [r3]
 80141d2:	eeb0 0a67 	vmov.f32	s0, s15
 80141d6:	f7ff f895 	bl	8013304 <print_float>
 80141da:	4816      	ldr	r0, [pc, #88]	; (8014234 <imuTest_begin+0x44c>)
 80141dc:	f7fe fff6 	bl	80131cc <println>
		print("[MAG] Y-Axis sensitivity adjustment value "); print_float(magCalibration[1]); println("");
 80141e0:	4817      	ldr	r0, [pc, #92]	; (8014240 <imuTest_begin+0x458>)
 80141e2:	f7fe ffd1 	bl	8013188 <print>
 80141e6:	4b15      	ldr	r3, [pc, #84]	; (801423c <imuTest_begin+0x454>)
 80141e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80141ec:	eeb0 0a67 	vmov.f32	s0, s15
 80141f0:	f7ff f888 	bl	8013304 <print_float>
 80141f4:	480f      	ldr	r0, [pc, #60]	; (8014234 <imuTest_begin+0x44c>)
 80141f6:	f7fe ffe9 	bl	80131cc <println>
		print("[MAG] Z-Axis sensitivity adjustment value "); print_float(magCalibration[2]); println("");
 80141fa:	4812      	ldr	r0, [pc, #72]	; (8014244 <imuTest_begin+0x45c>)
 80141fc:	f7fe ffc4 	bl	8013188 <print>
 8014200:	4b0e      	ldr	r3, [pc, #56]	; (801423c <imuTest_begin+0x454>)
 8014202:	edd3 7a02 	vldr	s15, [r3, #8]
 8014206:	eeb0 0a67 	vmov.f32	s0, s15
 801420a:	f7ff f87b 	bl	8013304 <print_float>
 801420e:	4809      	ldr	r0, [pc, #36]	; (8014234 <imuTest_begin+0x44c>)
 8014210:	f7fe ffdc 	bl	80131cc <println>


		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8014214:	2200      	movs	r2, #0
 8014216:	2180      	movs	r1, #128	; 0x80
 8014218:	480b      	ldr	r0, [pc, #44]	; (8014248 <imuTest_begin+0x460>)
 801421a:	f7f2 fee1 	bl	8006fe0 <HAL_GPIO_WritePin>
		imuActive = true;
 801421e:	4b0b      	ldr	r3, [pc, #44]	; (801424c <imuTest_begin+0x464>)
 8014220:	2201      	movs	r2, #1
 8014222:	701a      	strb	r2, [r3, #0]
		return true;
 8014224:	2301      	movs	r3, #1
 8014226:	e000      	b.n	801422a <imuTest_begin+0x442>
	}
	return false;
 8014228:	2300      	movs	r3, #0
}
 801422a:	4618      	mov	r0, r3
 801422c:	370c      	adds	r7, #12
 801422e:	46bd      	mov	sp, r7
 8014230:	bd90      	pop	{r4, r7, pc}
 8014232:	bf00      	nop
 8014234:	0801dabc 	.word	0x0801dabc
 8014238:	0801dd84 	.word	0x0801dd84
 801423c:	20003008 	.word	0x20003008
 8014240:	0801ddb0 	.word	0x0801ddb0
 8014244:	0801dddc 	.word	0x0801dddc
 8014248:	40020800 	.word	0x40020800
 801424c:	20002eee 	.word	0x20002eee

08014250 <sensing_begin>:
uint32_t lastBmpRead;
// IMU
// (SPS)

static bool sensing_begin(void)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 8014256:	2300      	movs	r3, #0
 8014258:	71fb      	strb	r3, [r7, #7]

	attempts = 0;
 801425a:	2300      	movs	r3, #0
 801425c:	71fb      	strb	r3, [r7, #7]
	bmp.params = bmp280_default_config;
 801425e:	4b42      	ldr	r3, [pc, #264]	; (8014368 <sensing_begin+0x118>)
 8014260:	4a42      	ldr	r2, [pc, #264]	; (801436c <sensing_begin+0x11c>)
 8014262:	3307      	adds	r3, #7
 8014264:	6810      	ldr	r0, [r2, #0]
 8014266:	6018      	str	r0, [r3, #0]
 8014268:	7912      	ldrb	r2, [r2, #4]
 801426a:	711a      	strb	r2, [r3, #4]
	bmp.addr = BMP280_I2C_ADDRESS_0;
 801426c:	4b3e      	ldr	r3, [pc, #248]	; (8014368 <sensing_begin+0x118>)
 801426e:	2276      	movs	r2, #118	; 0x76
 8014270:	809a      	strh	r2, [r3, #4]
	bmp.i2c = Get_I2C1_Instance();
 8014272:	f001 f9db 	bl	801562c <Get_I2C1_Instance>
 8014276:	4602      	mov	r2, r0
 8014278:	4b3b      	ldr	r3, [pc, #236]	; (8014368 <sensing_begin+0x118>)
 801427a:	601a      	str	r2, [r3, #0]
	//unneccessary, to change
	while (!bmp280_init(&bmp, &bmp.params))
 801427c:	e010      	b.n	80142a0 <sensing_begin+0x50>
	{
		HAL_Delay(500);
 801427e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014282:	f7f2 f82f 	bl	80062e4 <HAL_Delay>
		if (SENSING_DEBUG) println("[BMP] Init unsuccesfull, retrying...");
 8014286:	483a      	ldr	r0, [pc, #232]	; (8014370 <sensing_begin+0x120>)
 8014288:	f7fe ffa0 	bl	80131cc <println>
		attempts++;
 801428c:	79fb      	ldrb	r3, [r7, #7]
 801428e:	3301      	adds	r3, #1
 8014290:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 8014292:	79fb      	ldrb	r3, [r7, #7]
 8014294:	2b04      	cmp	r3, #4
 8014296:	d903      	bls.n	80142a0 <sensing_begin+0x50>
		{
			if (SENSING_DEBUG) println("[BMP] Too many attempts, BMP is not active!");
 8014298:	4836      	ldr	r0, [pc, #216]	; (8014374 <sensing_begin+0x124>)
 801429a:	f7fe ff97 	bl	80131cc <println>
			//log_print("Unable to init BMP");
			break;
 801429e:	e009      	b.n	80142b4 <sensing_begin+0x64>
	while (!bmp280_init(&bmp, &bmp.params))
 80142a0:	4935      	ldr	r1, [pc, #212]	; (8014378 <sensing_begin+0x128>)
 80142a2:	4831      	ldr	r0, [pc, #196]	; (8014368 <sensing_begin+0x118>)
 80142a4:	f7ed fe6f 	bl	8001f86 <bmp280_init>
 80142a8:	4603      	mov	r3, r0
 80142aa:	f083 0301 	eor.w	r3, r3, #1
 80142ae:	b2db      	uxtb	r3, r3
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d1e4      	bne.n	801427e <sensing_begin+0x2e>
		}
	}

	imuTest_begin();
 80142b4:	f7ff fd98 	bl	8013de8 <imuTest_begin>
	//if (imuTest_begin()) { println("[IMU] Init successful!"); log_print("IMU init success"); }
	//	else { log_print("Unable to init IMU"); }


	attempts = 0;
 80142b8:	2300      	movs	r3, #0
 80142ba:	71fb      	strb	r3, [r7, #7]
	gps.uart = Get_UART3_Instance();
 80142bc:	f001 f9ca 	bl	8015654 <Get_UART3_Instance>
 80142c0:	4602      	mov	r2, r0
 80142c2:	4b2e      	ldr	r3, [pc, #184]	; (801437c <sensing_begin+0x12c>)
 80142c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	while (!GPS_init(&gps))
 80142c8:	e010      	b.n	80142ec <sensing_begin+0x9c>
	{
		HAL_Delay(500);
 80142ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80142ce:	f7f2 f809 	bl	80062e4 <HAL_Delay>
		if (SENSING_DEBUG) println("[GPS] Init unsuccessful, retrying...");
 80142d2:	482b      	ldr	r0, [pc, #172]	; (8014380 <sensing_begin+0x130>)
 80142d4:	f7fe ff7a 	bl	80131cc <println>
		attempts++;
 80142d8:	79fb      	ldrb	r3, [r7, #7]
 80142da:	3301      	adds	r3, #1
 80142dc:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 80142de:	79fb      	ldrb	r3, [r7, #7]
 80142e0:	2b04      	cmp	r3, #4
 80142e2:	d903      	bls.n	80142ec <sensing_begin+0x9c>
		{
			if (SENSING_DEBUG) println("[GPS] Too many attempts, GPS is not active!");
 80142e4:	4827      	ldr	r0, [pc, #156]	; (8014384 <sensing_begin+0x134>)
 80142e6:	f7fe ff71 	bl	80131cc <println>
			//log_print("Unable to init GPS");
			break;
 80142ea:	e008      	b.n	80142fe <sensing_begin+0xae>
	while (!GPS_init(&gps))
 80142ec:	4823      	ldr	r0, [pc, #140]	; (801437c <sensing_begin+0x12c>)
 80142ee:	f7ee f9ef 	bl	80026d0 <GPS_init>
 80142f2:	4603      	mov	r3, r0
 80142f4:	f083 0301 	eor.w	r3, r3, #1
 80142f8:	b2db      	uxtb	r3, r3
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d1e5      	bne.n	80142ca <sensing_begin+0x7a>
		}
	}

	if (SENSING_DEBUG)
	{
		println("Sensor init summary:");
 80142fe:	4822      	ldr	r0, [pc, #136]	; (8014388 <sensing_begin+0x138>)
 8014300:	f7fe ff64 	bl	80131cc <println>
		print("GPS - "); gps.active ? println("active") : println("not active");
 8014304:	4821      	ldr	r0, [pc, #132]	; (801438c <sensing_begin+0x13c>)
 8014306:	f7fe ff3f 	bl	8013188 <print>
 801430a:	4b1c      	ldr	r3, [pc, #112]	; (801437c <sensing_begin+0x12c>)
 801430c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8014310:	2b00      	cmp	r3, #0
 8014312:	d003      	beq.n	801431c <sensing_begin+0xcc>
 8014314:	481e      	ldr	r0, [pc, #120]	; (8014390 <sensing_begin+0x140>)
 8014316:	f7fe ff59 	bl	80131cc <println>
 801431a:	e002      	b.n	8014322 <sensing_begin+0xd2>
 801431c:	481d      	ldr	r0, [pc, #116]	; (8014394 <sensing_begin+0x144>)
 801431e:	f7fe ff55 	bl	80131cc <println>
		print("BMP - "); bmp.active ? println("active") : println("not active");
 8014322:	481d      	ldr	r0, [pc, #116]	; (8014398 <sensing_begin+0x148>)
 8014324:	f7fe ff30 	bl	8013188 <print>
 8014328:	4b0f      	ldr	r3, [pc, #60]	; (8014368 <sensing_begin+0x118>)
 801432a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801432e:	2b00      	cmp	r3, #0
 8014330:	d003      	beq.n	801433a <sensing_begin+0xea>
 8014332:	4817      	ldr	r0, [pc, #92]	; (8014390 <sensing_begin+0x140>)
 8014334:	f7fe ff4a 	bl	80131cc <println>
 8014338:	e002      	b.n	8014340 <sensing_begin+0xf0>
 801433a:	4816      	ldr	r0, [pc, #88]	; (8014394 <sensing_begin+0x144>)
 801433c:	f7fe ff46 	bl	80131cc <println>
		print("IMU - "); imuActive ? println("active") : println("not active");
 8014340:	4816      	ldr	r0, [pc, #88]	; (801439c <sensing_begin+0x14c>)
 8014342:	f7fe ff21 	bl	8013188 <print>
 8014346:	4b16      	ldr	r3, [pc, #88]	; (80143a0 <sensing_begin+0x150>)
 8014348:	781b      	ldrb	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d003      	beq.n	8014356 <sensing_begin+0x106>
 801434e:	4810      	ldr	r0, [pc, #64]	; (8014390 <sensing_begin+0x140>)
 8014350:	f7fe ff3c 	bl	80131cc <println>
 8014354:	e002      	b.n	801435c <sensing_begin+0x10c>
 8014356:	480f      	ldr	r0, [pc, #60]	; (8014394 <sensing_begin+0x144>)
 8014358:	f7fe ff38 	bl	80131cc <println>
	}
}
 801435c:	bf00      	nop
 801435e:	4618      	mov	r0, r3
 8014360:	3708      	adds	r7, #8
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	200064c8 	.word	0x200064c8
 801436c:	2000011c 	.word	0x2000011c
 8014370:	0801de08 	.word	0x0801de08
 8014374:	0801de30 	.word	0x0801de30
 8014378:	200064cf 	.word	0x200064cf
 801437c:	20002cb8 	.word	0x20002cb8
 8014380:	0801de5c 	.word	0x0801de5c
 8014384:	0801de84 	.word	0x0801de84
 8014388:	0801deb0 	.word	0x0801deb0
 801438c:	0801dec8 	.word	0x0801dec8
 8014390:	0801ded0 	.word	0x0801ded0
 8014394:	0801ded8 	.word	0x0801ded8
 8014398:	0801dee4 	.word	0x0801dee4
 801439c:	0801deec 	.word	0x0801deec
 80143a0:	20002eee 	.word	0x20002eee

080143a4 <sensing_loop>:

static void sensing_loop(void)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b084      	sub	sp, #16
 80143a8:	af00      	add	r7, sp, #0

	if (gps.active)
 80143aa:	4b65      	ldr	r3, [pc, #404]	; (8014540 <sensing_loop+0x19c>)
 80143ac:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d018      	beq.n	80143e6 <sensing_loop+0x42>
	{
		GPS_read(&gps);
 80143b4:	4862      	ldr	r0, [pc, #392]	; (8014540 <sensing_loop+0x19c>)
 80143b6:	f7ee f8f3 	bl	80025a0 <GPS_read>
		if (GPS_newNMEAreceived(&gps))
 80143ba:	4861      	ldr	r0, [pc, #388]	; (8014540 <sensing_loop+0x19c>)
 80143bc:	f7ef fa61 	bl	8003882 <GPS_newNMEAreceived>
 80143c0:	4603      	mov	r3, r0
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d00f      	beq.n	80143e6 <sensing_loop+0x42>
		{
			//println(GPS_lastNMEA(&gps));
			if (gps.fix) log_gps(&gps);
 80143c6:	4b5e      	ldr	r3, [pc, #376]	; (8014540 <sensing_loop+0x19c>)
 80143c8:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d002      	beq.n	80143d6 <sensing_loop+0x32>
 80143d0:	485b      	ldr	r0, [pc, #364]	; (8014540 <sensing_loop+0x19c>)
 80143d2:	f7f1 fe13 	bl	8005ffc <log_gps>
			GPS_parse(&gps, GPS_lastNMEA(&gps));
 80143d6:	485a      	ldr	r0, [pc, #360]	; (8014540 <sensing_loop+0x19c>)
 80143d8:	f7ef fa61 	bl	800389e <GPS_lastNMEA>
 80143dc:	4603      	mov	r3, r0
 80143de:	4619      	mov	r1, r3
 80143e0:	4857      	ldr	r0, [pc, #348]	; (8014540 <sensing_loop+0x19c>)
 80143e2:	f7ee fb03 	bl	80029ec <GPS_parse>
		}
	}

	if (bmp.active && millis() - lastBmpRead >= 50)
 80143e6:	4b57      	ldr	r3, [pc, #348]	; (8014544 <sensing_loop+0x1a0>)
 80143e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d01f      	beq.n	8014430 <sensing_loop+0x8c>
 80143f0:	f7fe ffc8 	bl	8013384 <millis>
 80143f4:	4602      	mov	r2, r0
 80143f6:	4b54      	ldr	r3, [pc, #336]	; (8014548 <sensing_loop+0x1a4>)
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	1ad3      	subs	r3, r2, r3
 80143fc:	2b31      	cmp	r3, #49	; 0x31
 80143fe:	d917      	bls.n	8014430 <sensing_loop+0x8c>
	{

		//bmp280_read_float(&bmp, tee, pee);
		bmp280_update(&bmp);
 8014400:	4850      	ldr	r0, [pc, #320]	; (8014544 <sensing_loop+0x1a0>)
 8014402:	f7ee f8ab 	bl	800255c <bmp280_update>
		lastBmpRead = millis();
 8014406:	f7fe ffbd 	bl	8013384 <millis>
 801440a:	4602      	mov	r2, r0
 801440c:	4b4e      	ldr	r3, [pc, #312]	; (8014548 <sensing_loop+0x1a4>)
 801440e:	601a      	str	r2, [r3, #0]
		if (millis() - lastBmpLog >= 100)
 8014410:	f7fe ffb8 	bl	8013384 <millis>
 8014414:	4602      	mov	r2, r0
 8014416:	4b4d      	ldr	r3, [pc, #308]	; (801454c <sensing_loop+0x1a8>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	1ad3      	subs	r3, r2, r3
 801441c:	2b63      	cmp	r3, #99	; 0x63
 801441e:	d907      	bls.n	8014430 <sensing_loop+0x8c>
		{
			log_bmp(&bmp);
 8014420:	4848      	ldr	r0, [pc, #288]	; (8014544 <sensing_loop+0x1a0>)
 8014422:	f7f1 fd9d 	bl	8005f60 <log_bmp>
			lastBmpLog = millis();
 8014426:	f7fe ffad 	bl	8013384 <millis>
 801442a:	4602      	mov	r2, r0
 801442c:	4b47      	ldr	r3, [pc, #284]	; (801454c <sensing_loop+0x1a8>)
 801442e:	601a      	str	r2, [r3, #0]
		}
	}


	if (imuActive)
 8014430:	4b47      	ldr	r3, [pc, #284]	; (8014550 <sensing_loop+0x1ac>)
 8014432:	781b      	ldrb	r3, [r3, #0]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d01f      	beq.n	8014478 <sensing_loop+0xd4>
	{
		imuTest_getData();		// get data from IMU
 8014438:	f7ff fa1c 	bl	8013874 <imuTest_getData>
		imuTest_quatUpdate();	// compute data received
 801443c:	f7ff fb0c 	bl	8013a58 <imuTest_quatUpdate>

		if (millis() - lastImuLog >= 100)
 8014440:	f7fe ffa0 	bl	8013384 <millis>
 8014444:	4602      	mov	r2, r0
 8014446:	4b43      	ldr	r3, [pc, #268]	; (8014554 <sensing_loop+0x1b0>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	1ad3      	subs	r3, r2, r3
 801444c:	2b63      	cmp	r3, #99	; 0x63
 801444e:	d913      	bls.n	8014478 <sensing_loop+0xd4>
		{
			imuTest_getEuler();
 8014450:	f7ff fbb2 	bl	8013bb8 <imuTest_getEuler>
			float eulers[3] = {yaw, pitch, roll};
 8014454:	4b40      	ldr	r3, [pc, #256]	; (8014558 <sensing_loop+0x1b4>)
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	607b      	str	r3, [r7, #4]
 801445a:	4b40      	ldr	r3, [pc, #256]	; (801455c <sensing_loop+0x1b8>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	60bb      	str	r3, [r7, #8]
 8014460:	4b3f      	ldr	r3, [pc, #252]	; (8014560 <sensing_loop+0x1bc>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	60fb      	str	r3, [r7, #12]
			log_imu(eulers);
 8014466:	1d3b      	adds	r3, r7, #4
 8014468:	4618      	mov	r0, r3
 801446a:	f7f1 fe15 	bl	8006098 <log_imu>
			lastImuLog = millis();
 801446e:	f7fe ff89 	bl	8013384 <millis>
 8014472:	4602      	mov	r2, r0
 8014474:	4b37      	ldr	r3, [pc, #220]	; (8014554 <sensing_loop+0x1b0>)
 8014476:	601a      	str	r2, [r3, #0]
		}

	}


	if (millis() - lastDataPrint >= 1000 && SENSING_PRINT_DATA)
 8014478:	f7fe ff84 	bl	8013384 <millis>
 801447c:	4602      	mov	r2, r0
 801447e:	4b39      	ldr	r3, [pc, #228]	; (8014564 <sensing_loop+0x1c0>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	1ad3      	subs	r3, r2, r3
 8014484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014488:	d355      	bcc.n	8014536 <sensing_loop+0x192>
	{
		if (bmp.active)
 801448a:	4b2e      	ldr	r3, [pc, #184]	; (8014544 <sensing_loop+0x1a0>)
 801448c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014490:	2b00      	cmp	r3, #0
 8014492:	d019      	beq.n	80144c8 <sensing_loop+0x124>
		{
			print("Pressure: "); print_float(bmp.pressure); println("");
 8014494:	4834      	ldr	r0, [pc, #208]	; (8014568 <sensing_loop+0x1c4>)
 8014496:	f7fe fe77 	bl	8013188 <print>
 801449a:	4b2a      	ldr	r3, [pc, #168]	; (8014544 <sensing_loop+0x1a0>)
 801449c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80144a0:	eeb0 0a67 	vmov.f32	s0, s15
 80144a4:	f7fe ff2e 	bl	8013304 <print_float>
 80144a8:	4830      	ldr	r0, [pc, #192]	; (801456c <sensing_loop+0x1c8>)
 80144aa:	f7fe fe8f 	bl	80131cc <println>
			print("Temperature: "); print_float(bmp.temperature); println("");
 80144ae:	4830      	ldr	r0, [pc, #192]	; (8014570 <sensing_loop+0x1cc>)
 80144b0:	f7fe fe6a 	bl	8013188 <print>
 80144b4:	4b23      	ldr	r3, [pc, #140]	; (8014544 <sensing_loop+0x1a0>)
 80144b6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80144ba:	eeb0 0a67 	vmov.f32	s0, s15
 80144be:	f7fe ff21 	bl	8013304 <print_float>
 80144c2:	482a      	ldr	r0, [pc, #168]	; (801456c <sensing_loop+0x1c8>)
 80144c4:	f7fe fe82 	bl	80131cc <println>
		}
		if (gps.active)
 80144c8:	4b1d      	ldr	r3, [pc, #116]	; (8014540 <sensing_loop+0x19c>)
 80144ca:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d02c      	beq.n	801452c <sensing_loop+0x188>
		{
			if (gps.fix)
 80144d2:	4b1b      	ldr	r3, [pc, #108]	; (8014540 <sensing_loop+0x19c>)
 80144d4:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d01f      	beq.n	801451c <sensing_loop+0x178>
			{
				HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 80144dc:	2201      	movs	r2, #1
 80144de:	2140      	movs	r1, #64	; 0x40
 80144e0:	4824      	ldr	r0, [pc, #144]	; (8014574 <sensing_loop+0x1d0>)
 80144e2:	f7f2 fd7d 	bl	8006fe0 <HAL_GPIO_WritePin>
				print("Latitude: "); print_float(gps.latitudeDegrees); println("");
 80144e6:	4824      	ldr	r0, [pc, #144]	; (8014578 <sensing_loop+0x1d4>)
 80144e8:	f7fe fe4e 	bl	8013188 <print>
 80144ec:	4b14      	ldr	r3, [pc, #80]	; (8014540 <sensing_loop+0x19c>)
 80144ee:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80144f2:	eeb0 0a67 	vmov.f32	s0, s15
 80144f6:	f7fe ff05 	bl	8013304 <print_float>
 80144fa:	481c      	ldr	r0, [pc, #112]	; (801456c <sensing_loop+0x1c8>)
 80144fc:	f7fe fe66 	bl	80131cc <println>
				print("Longitude: "); print_float(gps.longitudeDegrees); println("");
 8014500:	481e      	ldr	r0, [pc, #120]	; (801457c <sensing_loop+0x1d8>)
 8014502:	f7fe fe41 	bl	8013188 <print>
 8014506:	4b0e      	ldr	r3, [pc, #56]	; (8014540 <sensing_loop+0x19c>)
 8014508:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 801450c:	eeb0 0a67 	vmov.f32	s0, s15
 8014510:	f7fe fef8 	bl	8013304 <print_float>
 8014514:	4815      	ldr	r0, [pc, #84]	; (801456c <sensing_loop+0x1c8>)
 8014516:	f7fe fe59 	bl	80131cc <println>
 801451a:	e007      	b.n	801452c <sensing_loop+0x188>
			}
			else
			{
				HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 801451c:	2200      	movs	r2, #0
 801451e:	2140      	movs	r1, #64	; 0x40
 8014520:	4814      	ldr	r0, [pc, #80]	; (8014574 <sensing_loop+0x1d0>)
 8014522:	f7f2 fd5d 	bl	8006fe0 <HAL_GPIO_WritePin>
				println("GPS has no fix!");
 8014526:	4816      	ldr	r0, [pc, #88]	; (8014580 <sensing_loop+0x1dc>)
 8014528:	f7fe fe50 	bl	80131cc <println>
			}
		}
		lastDataPrint = millis();
 801452c:	f7fe ff2a 	bl	8013384 <millis>
 8014530:	4602      	mov	r2, r0
 8014532:	4b0c      	ldr	r3, [pc, #48]	; (8014564 <sensing_loop+0x1c0>)
 8014534:	601a      	str	r2, [r3, #0]
	}
}
 8014536:	bf00      	nop
 8014538:	3710      	adds	r7, #16
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	20002cb8 	.word	0x20002cb8
 8014544:	200064c8 	.word	0x200064c8
 8014548:	20006500 	.word	0x20006500
 801454c:	20006508 	.word	0x20006508
 8014550:	20002eee 	.word	0x20002eee
 8014554:	200064fc 	.word	0x200064fc
 8014558:	20002fc4 	.word	0x20002fc4
 801455c:	20002fd0 	.word	0x20002fd0
 8014560:	20002fd4 	.word	0x20002fd4
 8014564:	20006504 	.word	0x20006504
 8014568:	0801def4 	.word	0x0801def4
 801456c:	0801dabc 	.word	0x0801dabc
 8014570:	0801df00 	.word	0x0801df00
 8014574:	40020800 	.word	0x40020800
 8014578:	0801df10 	.word	0x0801df10
 801457c:	0801df1c 	.word	0x0801df1c
 8014580:	0801df28 	.word	0x0801df28
 8014584:	00000000 	.word	0x00000000

08014588 <algoGalgo>:

uint32_t lastAlgo;
float yaw_last_error;

static void algoGalgo(float yaw, float target_yaw)
{
 8014588:	b5b0      	push	{r4, r5, r7, lr}
 801458a:	ed2d 8b02 	vpush	{d8}
 801458e:	b08c      	sub	sp, #48	; 0x30
 8014590:	af00      	add	r7, sp, #0
 8014592:	ed87 0a01 	vstr	s0, [r7, #4]
 8014596:	edc7 0a00 	vstr	s1, [r7]
	float maxPower = 0.8;	// scale of motor power
 801459a:	4b95      	ldr	r3, [pc, #596]	; (80147f0 <algoGalgo+0x268>)
 801459c:	627b      	str	r3, [r7, #36]	; 0x24
	float TurboMode= 50.0;
 801459e:	4b95      	ldr	r3, [pc, #596]	; (80147f4 <algoGalgo+0x26c>)
 80145a0:	623b      	str	r3, [r7, #32]
	// Aim center: yaw = 180*
//	float target_yaw = 180.0;
	float error=target_yaw-yaw;
 80145a2:	ed97 7a00 	vldr	s14, [r7]
 80145a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80145aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80145ae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float thrust = 180.0+TurboMode;
 80145b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80145b6:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80147f8 <algoGalgo+0x270>
 80145ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80145be:	edc7 7a07 	vstr	s15, [r7, #28]

	if (error<-180.0)
 80145c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80145c6:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80147fc <algoGalgo+0x274>
 80145ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80145ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145d2:	d50c      	bpl.n	80145ee <algoGalgo+0x66>
		error = target_yaw-yaw+360.0;
 80145d4:	ed97 7a00 	vldr	s14, [r7]
 80145d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80145dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80145e0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8014800 <algoGalgo+0x278>
 80145e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80145e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80145ec:	e014      	b.n	8014618 <algoGalgo+0x90>
	else if (error>180.0)
 80145ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80145f2:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80147f8 <algoGalgo+0x270>
 80145f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80145fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145fe:	dd0b      	ble.n	8014618 <algoGalgo+0x90>
		error = target_yaw-yaw-360.0;
 8014600:	ed97 7a00 	vldr	s14, [r7]
 8014604:	edd7 7a01 	vldr	s15, [r7, #4]
 8014608:	ee77 7a67 	vsub.f32	s15, s14, s15
 801460c:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8014800 <algoGalgo+0x278>
 8014610:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014614:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
//	print("yaw: "); print_float(yaw); println("");

//	print("error: "); print_float(error); println("");
	//print("yaw_last_error: "); print_float(yaw_last_error); println("");

	float kp=1.0; //dobrany
 8014618:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801461c:	61bb      	str	r3, [r7, #24]
//	float ki=0.5;
	float kd=500.0; //dobrany 500 ok - 100ms
 801461e:	4b79      	ldr	r3, [pc, #484]	; (8014804 <algoGalgo+0x27c>)
 8014620:	617b      	str	r3, [r7, #20]

	float pid_p, pid_i, pid_d;

	pid_p=kp*error;
 8014622:	ed97 7a06 	vldr	s14, [r7, #24]
 8014626:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801462a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801462e:	edc7 7a04 	vstr	s15, [r7, #16]
	pid_d=kd*((error-yaw_last_error)/(millis() - lastAlgo));
 8014632:	4b75      	ldr	r3, [pc, #468]	; (8014808 <algoGalgo+0x280>)
 8014634:	edd3 7a00 	vldr	s15, [r3]
 8014638:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801463c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8014640:	f7fe fea0 	bl	8013384 <millis>
 8014644:	4602      	mov	r2, r0
 8014646:	4b71      	ldr	r3, [pc, #452]	; (801480c <algoGalgo+0x284>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	1ad3      	subs	r3, r2, r3
 801464c:	ee07 3a90 	vmov	s15, r3
 8014650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014654:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8014658:	ed97 7a05 	vldr	s14, [r7, #20]
 801465c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014660:	edc7 7a03 	vstr	s15, [r7, #12]

	float PID;
//	if (error>-15 && error <15)
//		PID=pid_p+pid_d+pid_i;
//	else
		PID=pid_p+pid_d;
 8014664:	ed97 7a04 	vldr	s14, [r7, #16]
 8014668:	edd7 7a03 	vldr	s15, [r7, #12]
 801466c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014670:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	if (PID>180.0-TurboMode)
 8014674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014676:	f7eb ff77 	bl	8000568 <__aeabi_f2d>
 801467a:	4604      	mov	r4, r0
 801467c:	460d      	mov	r5, r1
 801467e:	6a38      	ldr	r0, [r7, #32]
 8014680:	f7eb ff72 	bl	8000568 <__aeabi_f2d>
 8014684:	4602      	mov	r2, r0
 8014686:	460b      	mov	r3, r1
 8014688:	f04f 0000 	mov.w	r0, #0
 801468c:	4960      	ldr	r1, [pc, #384]	; (8014810 <algoGalgo+0x288>)
 801468e:	f7eb fe0b 	bl	80002a8 <__aeabi_dsub>
 8014692:	4602      	mov	r2, r0
 8014694:	460b      	mov	r3, r1
 8014696:	4620      	mov	r0, r4
 8014698:	4629      	mov	r1, r5
 801469a:	f7ec fa4d 	bl	8000b38 <__aeabi_dcmpgt>
 801469e:	4603      	mov	r3, r0
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d008      	beq.n	80146b6 <algoGalgo+0x12e>
			PID=180.0-TurboMode;
 80146a4:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80147f8 <algoGalgo+0x270>
 80146a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80146ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146b0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80146b4:	e01d      	b.n	80146f2 <algoGalgo+0x16a>
		else if (PID<-180.0+TurboMode)
 80146b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146b8:	f7eb ff56 	bl	8000568 <__aeabi_f2d>
 80146bc:	4604      	mov	r4, r0
 80146be:	460d      	mov	r5, r1
 80146c0:	6a38      	ldr	r0, [r7, #32]
 80146c2:	f7eb ff51 	bl	8000568 <__aeabi_f2d>
 80146c6:	f04f 0200 	mov.w	r2, #0
 80146ca:	4b51      	ldr	r3, [pc, #324]	; (8014810 <algoGalgo+0x288>)
 80146cc:	f7eb fdec 	bl	80002a8 <__aeabi_dsub>
 80146d0:	4602      	mov	r2, r0
 80146d2:	460b      	mov	r3, r1
 80146d4:	4620      	mov	r0, r4
 80146d6:	4629      	mov	r1, r5
 80146d8:	f7ec fa10 	bl	8000afc <__aeabi_dcmplt>
 80146dc:	4603      	mov	r3, r0
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d007      	beq.n	80146f2 <algoGalgo+0x16a>
			PID=-180.0+TurboMode;
 80146e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80146e6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80147f8 <algoGalgo+0x270>
 80146ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80146ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

//	print("PID: "); print_float(PID); println("");


	setMotors((thrust - PID) * maxPower * (1.0 / 360.0), (thrust + PID) * maxPower * (1.0 / 360.0) * 0.92);
 80146f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80146f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80146fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80146fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014706:	ee17 0a90 	vmov	r0, s15
 801470a:	f7eb ff2d 	bl	8000568 <__aeabi_f2d>
 801470e:	a334      	add	r3, pc, #208	; (adr r3, 80147e0 <algoGalgo+0x258>)
 8014710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014714:	f7eb ff80 	bl	8000618 <__aeabi_dmul>
 8014718:	4603      	mov	r3, r0
 801471a:	460c      	mov	r4, r1
 801471c:	4618      	mov	r0, r3
 801471e:	4621      	mov	r1, r4
 8014720:	f7ec fa72 	bl	8000c08 <__aeabi_d2f>
 8014724:	4605      	mov	r5, r0
 8014726:	ed97 7a07 	vldr	s14, [r7, #28]
 801472a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801472e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014732:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014736:	ee67 7a27 	vmul.f32	s15, s14, s15
 801473a:	ee17 0a90 	vmov	r0, s15
 801473e:	f7eb ff13 	bl	8000568 <__aeabi_f2d>
 8014742:	a327      	add	r3, pc, #156	; (adr r3, 80147e0 <algoGalgo+0x258>)
 8014744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014748:	f7eb ff66 	bl	8000618 <__aeabi_dmul>
 801474c:	4603      	mov	r3, r0
 801474e:	460c      	mov	r4, r1
 8014750:	4618      	mov	r0, r3
 8014752:	4621      	mov	r1, r4
 8014754:	a324      	add	r3, pc, #144	; (adr r3, 80147e8 <algoGalgo+0x260>)
 8014756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801475a:	f7eb ff5d 	bl	8000618 <__aeabi_dmul>
 801475e:	4603      	mov	r3, r0
 8014760:	460c      	mov	r4, r1
 8014762:	4618      	mov	r0, r3
 8014764:	4621      	mov	r1, r4
 8014766:	f7ec fa4f 	bl	8000c08 <__aeabi_d2f>
 801476a:	4603      	mov	r3, r0
 801476c:	ee00 3a90 	vmov	s1, r3
 8014770:	ee00 5a10 	vmov	s0, r5
 8014774:	f7ec fcb6 	bl	80010e4 <setMotors>


//	setMotors((thrust - error) * maxPower * (1.0 / 360.0), (thrust + error) * maxPower * (1.0 / 360.0));

	// Shines purple LED if centered
	if (yaw >= target_yaw-2 && yaw <= target_yaw+2) HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8014778:	edd7 7a00 	vldr	s15, [r7]
 801477c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014784:	ed97 7a01 	vldr	s14, [r7, #4]
 8014788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801478c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014790:	db12      	blt.n	80147b8 <algoGalgo+0x230>
 8014792:	edd7 7a00 	vldr	s15, [r7]
 8014796:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801479a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801479e:	ed97 7a01 	vldr	s14, [r7, #4]
 80147a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147aa:	d805      	bhi.n	80147b8 <algoGalgo+0x230>
 80147ac:	2201      	movs	r2, #1
 80147ae:	2180      	movs	r1, #128	; 0x80
 80147b0:	4818      	ldr	r0, [pc, #96]	; (8014814 <algoGalgo+0x28c>)
 80147b2:	f7f2 fc15 	bl	8006fe0 <HAL_GPIO_WritePin>
 80147b6:	e004      	b.n	80147c2 <algoGalgo+0x23a>
	else HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 80147b8:	2200      	movs	r2, #0
 80147ba:	2180      	movs	r1, #128	; 0x80
 80147bc:	4815      	ldr	r0, [pc, #84]	; (8014814 <algoGalgo+0x28c>)
 80147be:	f7f2 fc0f 	bl	8006fe0 <HAL_GPIO_WritePin>

	yaw_last_error=error;
 80147c2:	4a11      	ldr	r2, [pc, #68]	; (8014808 <algoGalgo+0x280>)
 80147c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147c6:	6013      	str	r3, [r2, #0]
	lastAlgo = millis();
 80147c8:	f7fe fddc 	bl	8013384 <millis>
 80147cc:	4602      	mov	r2, r0
 80147ce:	4b0f      	ldr	r3, [pc, #60]	; (801480c <algoGalgo+0x284>)
 80147d0:	601a      	str	r2, [r3, #0]
}
 80147d2:	bf00      	nop
 80147d4:	3730      	adds	r7, #48	; 0x30
 80147d6:	46bd      	mov	sp, r7
 80147d8:	ecbd 8b02 	vpop	{d8}
 80147dc:	bdb0      	pop	{r4, r5, r7, pc}
 80147de:	bf00      	nop
 80147e0:	16c16c17 	.word	0x16c16c17
 80147e4:	3f66c16c 	.word	0x3f66c16c
 80147e8:	d70a3d71 	.word	0xd70a3d71
 80147ec:	3fed70a3 	.word	0x3fed70a3
 80147f0:	3f4ccccd 	.word	0x3f4ccccd
 80147f4:	42480000 	.word	0x42480000
 80147f8:	43340000 	.word	0x43340000
 80147fc:	c3340000 	.word	0xc3340000
 8014800:	43b40000 	.word	0x43b40000
 8014804:	43fa0000 	.word	0x43fa0000
 8014808:	20002a6c 	.word	0x20002a6c
 801480c:	20002a68 	.word	0x20002a68
 8014810:	40668000 	.word	0x40668000
 8014814:	40020800 	.word	0x40020800

08014818 <bearing>:

static float bearing(float lat,float lon,float lat2,float lon2){
 8014818:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801481c:	b08c      	sub	sp, #48	; 0x30
 801481e:	af00      	add	r7, sp, #0
 8014820:	ed87 0a03 	vstr	s0, [r7, #12]
 8014824:	edc7 0a02 	vstr	s1, [r7, #8]
 8014828:	ed87 1a01 	vstr	s2, [r7, #4]
 801482c:	edc7 1a00 	vstr	s3, [r7]
	//lat = your current gps latitude.
	//lon = your current gps longitude.
	//lat2 = your destiny gps latitude.
	//lon2 = your destiny gps longitude.

    float teta1 = lat*M_PI/180;
 8014830:	68f8      	ldr	r0, [r7, #12]
 8014832:	f7eb fe99 	bl	8000568 <__aeabi_f2d>
 8014836:	a39e      	add	r3, pc, #632	; (adr r3, 8014ab0 <bearing+0x298>)
 8014838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801483c:	f7eb feec 	bl	8000618 <__aeabi_dmul>
 8014840:	4603      	mov	r3, r0
 8014842:	460c      	mov	r4, r1
 8014844:	4618      	mov	r0, r3
 8014846:	4621      	mov	r1, r4
 8014848:	f04f 0200 	mov.w	r2, #0
 801484c:	4b9c      	ldr	r3, [pc, #624]	; (8014ac0 <bearing+0x2a8>)
 801484e:	f7ec f80d 	bl	800086c <__aeabi_ddiv>
 8014852:	4603      	mov	r3, r0
 8014854:	460c      	mov	r4, r1
 8014856:	4618      	mov	r0, r3
 8014858:	4621      	mov	r1, r4
 801485a:	f7ec f9d5 	bl	8000c08 <__aeabi_d2f>
 801485e:	4603      	mov	r3, r0
 8014860:	62fb      	str	r3, [r7, #44]	; 0x2c
    float teta2 = lat2*M_PI/180;
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f7eb fe80 	bl	8000568 <__aeabi_f2d>
 8014868:	a391      	add	r3, pc, #580	; (adr r3, 8014ab0 <bearing+0x298>)
 801486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801486e:	f7eb fed3 	bl	8000618 <__aeabi_dmul>
 8014872:	4603      	mov	r3, r0
 8014874:	460c      	mov	r4, r1
 8014876:	4618      	mov	r0, r3
 8014878:	4621      	mov	r1, r4
 801487a:	f04f 0200 	mov.w	r2, #0
 801487e:	4b90      	ldr	r3, [pc, #576]	; (8014ac0 <bearing+0x2a8>)
 8014880:	f7eb fff4 	bl	800086c <__aeabi_ddiv>
 8014884:	4603      	mov	r3, r0
 8014886:	460c      	mov	r4, r1
 8014888:	4618      	mov	r0, r3
 801488a:	4621      	mov	r1, r4
 801488c:	f7ec f9bc 	bl	8000c08 <__aeabi_d2f>
 8014890:	4603      	mov	r3, r0
 8014892:	62bb      	str	r3, [r7, #40]	; 0x28
    float delta1 = (lat2-lat)*M_PI/180;
 8014894:	ed97 7a01 	vldr	s14, [r7, #4]
 8014898:	edd7 7a03 	vldr	s15, [r7, #12]
 801489c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148a0:	ee17 0a90 	vmov	r0, s15
 80148a4:	f7eb fe60 	bl	8000568 <__aeabi_f2d>
 80148a8:	a381      	add	r3, pc, #516	; (adr r3, 8014ab0 <bearing+0x298>)
 80148aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ae:	f7eb feb3 	bl	8000618 <__aeabi_dmul>
 80148b2:	4603      	mov	r3, r0
 80148b4:	460c      	mov	r4, r1
 80148b6:	4618      	mov	r0, r3
 80148b8:	4621      	mov	r1, r4
 80148ba:	f04f 0200 	mov.w	r2, #0
 80148be:	4b80      	ldr	r3, [pc, #512]	; (8014ac0 <bearing+0x2a8>)
 80148c0:	f7eb ffd4 	bl	800086c <__aeabi_ddiv>
 80148c4:	4603      	mov	r3, r0
 80148c6:	460c      	mov	r4, r1
 80148c8:	4618      	mov	r0, r3
 80148ca:	4621      	mov	r1, r4
 80148cc:	f7ec f99c 	bl	8000c08 <__aeabi_d2f>
 80148d0:	4603      	mov	r3, r0
 80148d2:	627b      	str	r3, [r7, #36]	; 0x24
    float delta2 = (lon2-lon)*M_PI/180;
 80148d4:	ed97 7a00 	vldr	s14, [r7]
 80148d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80148dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148e0:	ee17 0a90 	vmov	r0, s15
 80148e4:	f7eb fe40 	bl	8000568 <__aeabi_f2d>
 80148e8:	a371      	add	r3, pc, #452	; (adr r3, 8014ab0 <bearing+0x298>)
 80148ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ee:	f7eb fe93 	bl	8000618 <__aeabi_dmul>
 80148f2:	4603      	mov	r3, r0
 80148f4:	460c      	mov	r4, r1
 80148f6:	4618      	mov	r0, r3
 80148f8:	4621      	mov	r1, r4
 80148fa:	f04f 0200 	mov.w	r2, #0
 80148fe:	4b70      	ldr	r3, [pc, #448]	; (8014ac0 <bearing+0x2a8>)
 8014900:	f7eb ffb4 	bl	800086c <__aeabi_ddiv>
 8014904:	4603      	mov	r3, r0
 8014906:	460c      	mov	r4, r1
 8014908:	4618      	mov	r0, r3
 801490a:	4621      	mov	r1, r4
 801490c:	f7ec f97c 	bl	8000c08 <__aeabi_d2f>
 8014910:	4603      	mov	r3, r0
 8014912:	623b      	str	r3, [r7, #32]

    //==================Heading Formula Calculation================//

    float y = sin(delta2) * cos(teta2);
 8014914:	6a38      	ldr	r0, [r7, #32]
 8014916:	f7eb fe27 	bl	8000568 <__aeabi_f2d>
 801491a:	4603      	mov	r3, r0
 801491c:	460c      	mov	r4, r1
 801491e:	ec44 3b10 	vmov	d0, r3, r4
 8014922:	f005 ffe1 	bl	801a8e8 <sin>
 8014926:	ec55 4b10 	vmov	r4, r5, d0
 801492a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801492c:	f7eb fe1c 	bl	8000568 <__aeabi_f2d>
 8014930:	4602      	mov	r2, r0
 8014932:	460b      	mov	r3, r1
 8014934:	ec43 2b10 	vmov	d0, r2, r3
 8014938:	f005 ff92 	bl	801a860 <cos>
 801493c:	ec53 2b10 	vmov	r2, r3, d0
 8014940:	4620      	mov	r0, r4
 8014942:	4629      	mov	r1, r5
 8014944:	f7eb fe68 	bl	8000618 <__aeabi_dmul>
 8014948:	4603      	mov	r3, r0
 801494a:	460c      	mov	r4, r1
 801494c:	4618      	mov	r0, r3
 801494e:	4621      	mov	r1, r4
 8014950:	f7ec f95a 	bl	8000c08 <__aeabi_d2f>
 8014954:	4603      	mov	r3, r0
 8014956:	61fb      	str	r3, [r7, #28]
    float x = cos(teta1)*sin(teta2) - sin(teta1)*cos(teta2)*cos(delta2);
 8014958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801495a:	f7eb fe05 	bl	8000568 <__aeabi_f2d>
 801495e:	4603      	mov	r3, r0
 8014960:	460c      	mov	r4, r1
 8014962:	ec44 3b10 	vmov	d0, r3, r4
 8014966:	f005 ff7b 	bl	801a860 <cos>
 801496a:	ec55 4b10 	vmov	r4, r5, d0
 801496e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014970:	f7eb fdfa 	bl	8000568 <__aeabi_f2d>
 8014974:	4602      	mov	r2, r0
 8014976:	460b      	mov	r3, r1
 8014978:	ec43 2b10 	vmov	d0, r2, r3
 801497c:	f005 ffb4 	bl	801a8e8 <sin>
 8014980:	ec53 2b10 	vmov	r2, r3, d0
 8014984:	4620      	mov	r0, r4
 8014986:	4629      	mov	r1, r5
 8014988:	f7eb fe46 	bl	8000618 <__aeabi_dmul>
 801498c:	4603      	mov	r3, r0
 801498e:	460c      	mov	r4, r1
 8014990:	4625      	mov	r5, r4
 8014992:	461c      	mov	r4, r3
 8014994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014996:	f7eb fde7 	bl	8000568 <__aeabi_f2d>
 801499a:	4602      	mov	r2, r0
 801499c:	460b      	mov	r3, r1
 801499e:	ec43 2b10 	vmov	d0, r2, r3
 80149a2:	f005 ffa1 	bl	801a8e8 <sin>
 80149a6:	ec59 8b10 	vmov	r8, r9, d0
 80149aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149ac:	f7eb fddc 	bl	8000568 <__aeabi_f2d>
 80149b0:	4602      	mov	r2, r0
 80149b2:	460b      	mov	r3, r1
 80149b4:	ec43 2b10 	vmov	d0, r2, r3
 80149b8:	f005 ff52 	bl	801a860 <cos>
 80149bc:	ec53 2b10 	vmov	r2, r3, d0
 80149c0:	4640      	mov	r0, r8
 80149c2:	4649      	mov	r1, r9
 80149c4:	f7eb fe28 	bl	8000618 <__aeabi_dmul>
 80149c8:	4602      	mov	r2, r0
 80149ca:	460b      	mov	r3, r1
 80149cc:	4690      	mov	r8, r2
 80149ce:	4699      	mov	r9, r3
 80149d0:	6a38      	ldr	r0, [r7, #32]
 80149d2:	f7eb fdc9 	bl	8000568 <__aeabi_f2d>
 80149d6:	4602      	mov	r2, r0
 80149d8:	460b      	mov	r3, r1
 80149da:	ec43 2b10 	vmov	d0, r2, r3
 80149de:	f005 ff3f 	bl	801a860 <cos>
 80149e2:	ec53 2b10 	vmov	r2, r3, d0
 80149e6:	4640      	mov	r0, r8
 80149e8:	4649      	mov	r1, r9
 80149ea:	f7eb fe15 	bl	8000618 <__aeabi_dmul>
 80149ee:	4602      	mov	r2, r0
 80149f0:	460b      	mov	r3, r1
 80149f2:	4620      	mov	r0, r4
 80149f4:	4629      	mov	r1, r5
 80149f6:	f7eb fc57 	bl	80002a8 <__aeabi_dsub>
 80149fa:	4603      	mov	r3, r0
 80149fc:	460c      	mov	r4, r1
 80149fe:	4618      	mov	r0, r3
 8014a00:	4621      	mov	r1, r4
 8014a02:	f7ec f901 	bl	8000c08 <__aeabi_d2f>
 8014a06:	4603      	mov	r3, r0
 8014a08:	61bb      	str	r3, [r7, #24]
    float brng = atan2(y,x);
 8014a0a:	69f8      	ldr	r0, [r7, #28]
 8014a0c:	f7eb fdac 	bl	8000568 <__aeabi_f2d>
 8014a10:	4604      	mov	r4, r0
 8014a12:	460d      	mov	r5, r1
 8014a14:	69b8      	ldr	r0, [r7, #24]
 8014a16:	f7eb fda7 	bl	8000568 <__aeabi_f2d>
 8014a1a:	4602      	mov	r2, r0
 8014a1c:	460b      	mov	r3, r1
 8014a1e:	ec43 2b11 	vmov	d1, r2, r3
 8014a22:	ec45 4b10 	vmov	d0, r4, r5
 8014a26:	f005 ffff 	bl	801aa28 <atan2>
 8014a2a:	ec54 3b10 	vmov	r3, r4, d0
 8014a2e:	4618      	mov	r0, r3
 8014a30:	4621      	mov	r1, r4
 8014a32:	f7ec f8e9 	bl	8000c08 <__aeabi_d2f>
 8014a36:	4603      	mov	r3, r0
 8014a38:	617b      	str	r3, [r7, #20]
    brng = brng*180/M_PI;// radians to degrees
 8014a3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8014a3e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014ac4 <bearing+0x2ac>
 8014a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a46:	ee17 0a90 	vmov	r0, s15
 8014a4a:	f7eb fd8d 	bl	8000568 <__aeabi_f2d>
 8014a4e:	a318      	add	r3, pc, #96	; (adr r3, 8014ab0 <bearing+0x298>)
 8014a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a54:	f7eb ff0a 	bl	800086c <__aeabi_ddiv>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	460c      	mov	r4, r1
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	4621      	mov	r1, r4
 8014a60:	f7ec f8d2 	bl	8000c08 <__aeabi_d2f>
 8014a64:	4603      	mov	r3, r0
 8014a66:	617b      	str	r3, [r7, #20]
    brng = fmod((brng + 360), 360);
 8014a68:	edd7 7a05 	vldr	s15, [r7, #20]
 8014a6c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8014ac8 <bearing+0x2b0>
 8014a70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a74:	ee17 0a90 	vmov	r0, s15
 8014a78:	f7eb fd76 	bl	8000568 <__aeabi_f2d>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	460c      	mov	r4, r1
 8014a80:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8014ab8 <bearing+0x2a0>
 8014a84:	ec44 3b10 	vmov	d0, r3, r4
 8014a88:	f005 ffd0 	bl	801aa2c <fmod>
 8014a8c:	ec54 3b10 	vmov	r3, r4, d0
 8014a90:	4618      	mov	r0, r3
 8014a92:	4621      	mov	r1, r4
 8014a94:	f7ec f8b8 	bl	8000c08 <__aeabi_d2f>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	617b      	str	r3, [r7, #20]
   // std::cout<< brng;
    return brng;
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	ee07 3a90 	vmov	s15, r3
    }
 8014aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8014aa6:	3730      	adds	r7, #48	; 0x30
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014aae:	bf00      	nop
 8014ab0:	54442d18 	.word	0x54442d18
 8014ab4:	400921fb 	.word	0x400921fb
 8014ab8:	00000000 	.word	0x00000000
 8014abc:	40768000 	.word	0x40768000
 8014ac0:	40668000 	.word	0x40668000
 8014ac4:	43340000 	.word	0x43340000
 8014ac8:	43b40000 	.word	0x43b40000

08014acc <setup>:
float target_lat;
float target_lon;
uint8_t servoState;

static void setup(void)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8014ad0:	f000 fdd4 	bl	801567c <Get_TIM3_Instance>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	2108      	movs	r1, #8
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7f7 f9b3 	bl	800be44 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = 990;
 8014ade:	4b28      	ldr	r3, [pc, #160]	; (8014b80 <setup+0xb4>)
 8014ae0:	f240 32de 	movw	r2, #990	; 0x3de
 8014ae4:	63da      	str	r2, [r3, #60]	; 0x3c

	// wait for USR button press
	//while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);
	// begin the program
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8014ae6:	2201      	movs	r2, #1
 8014ae8:	2140      	movs	r1, #64	; 0x40
 8014aea:	4826      	ldr	r0, [pc, #152]	; (8014b84 <setup+0xb8>)
 8014aec:	f7f2 fa78 	bl	8006fe0 <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 8014af0:	4825      	ldr	r0, [pc, #148]	; (8014b88 <setup+0xbc>)
 8014af2:	f7fe fb6b 	bl	80131cc <println>
 8014af6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014afa:	f7f1 fbf3 	bl	80062e4 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8014afe:	2200      	movs	r2, #0
 8014b00:	2140      	movs	r1, #64	; 0x40
 8014b02:	4820      	ldr	r0, [pc, #128]	; (8014b84 <setup+0xb8>)
 8014b04:	f7f2 fa6c 	bl	8006fe0 <HAL_GPIO_WritePin>

	TIM3->CCR3 = 510;
 8014b08:	4b1d      	ldr	r3, [pc, #116]	; (8014b80 <setup+0xb4>)
 8014b0a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8014b0e:	63da      	str	r2, [r3, #60]	; 0x3c

	if (sdTest_begin()) { println("SD card is working!");}
 8014b10:	f7fe fc98 	bl	8013444 <sdTest_begin>
 8014b14:	4603      	mov	r3, r0
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d002      	beq.n	8014b20 <setup+0x54>
 8014b1a:	481c      	ldr	r0, [pc, #112]	; (8014b8c <setup+0xc0>)
 8014b1c:	f7fe fb56 	bl	80131cc <println>
	log_new();
 8014b20:	f7f1 f81e 	bl	8005b60 <log_new>
	SD_init();
 8014b24:	f7ec fba8 	bl	8001278 <SD_init>
	if (duplex_begin()) { println("Radio is working");}
 8014b28:	f7fe fd2e 	bl	8013588 <duplex_begin>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d002      	beq.n	8014b38 <setup+0x6c>
 8014b32:	4817      	ldr	r0, [pc, #92]	; (8014b90 <setup+0xc4>)
 8014b34:	f7fe fb4a 	bl	80131cc <println>

	sensing_begin();
 8014b38:	f7ff fb8a 	bl	8014250 <sensing_begin>

	target_lat = 20.0;
 8014b3c:	4b15      	ldr	r3, [pc, #84]	; (8014b94 <setup+0xc8>)
 8014b3e:	4a16      	ldr	r2, [pc, #88]	; (8014b98 <setup+0xcc>)
 8014b40:	601a      	str	r2, [r3, #0]
	target_lon = 30.0;
 8014b42:	4b16      	ldr	r3, [pc, #88]	; (8014b9c <setup+0xd0>)
 8014b44:	4a16      	ldr	r2, [pc, #88]	; (8014ba0 <setup+0xd4>)
 8014b46:	601a      	str	r2, [r3, #0]
	target_yaw = 180.0; //statyczne 180.0
 8014b48:	4b16      	ldr	r3, [pc, #88]	; (8014ba4 <setup+0xd8>)
 8014b4a:	4a17      	ldr	r2, [pc, #92]	; (8014ba8 <setup+0xdc>)
 8014b4c:	601a      	str	r2, [r3, #0]

	//while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);

	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8014b4e:	2200      	movs	r2, #0
 8014b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014b54:	4815      	ldr	r0, [pc, #84]	; (8014bac <setup+0xe0>)
 8014b56:	f7f2 fa43 	bl	8006fe0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8014b5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014b5e:	f7f1 fbc1 	bl	80062e4 <HAL_Delay>

	duplex_loop("new transmit", 14, true);
 8014b62:	2201      	movs	r2, #1
 8014b64:	210e      	movs	r1, #14
 8014b66:	4812      	ldr	r0, [pc, #72]	; (8014bb0 <setup+0xe4>)
 8014b68:	f7fe fd96 	bl	8013698 <duplex_loop>
	lastSave = millis();
 8014b6c:	f7fe fc0a 	bl	8013384 <millis>
 8014b70:	4602      	mov	r2, r0
 8014b72:	4b10      	ldr	r3, [pc, #64]	; (8014bb4 <setup+0xe8>)
 8014b74:	601a      	str	r2, [r3, #0]
	servoState = 0;
 8014b76:	4b10      	ldr	r3, [pc, #64]	; (8014bb8 <setup+0xec>)
 8014b78:	2200      	movs	r2, #0
 8014b7a:	701a      	strb	r2, [r3, #0]
}
 8014b7c:	bf00      	nop
 8014b7e:	bd80      	pop	{r7, pc}
 8014b80:	40000400 	.word	0x40000400
 8014b84:	40020800 	.word	0x40020800
 8014b88:	0801df4c 	.word	0x0801df4c
 8014b8c:	0801df5c 	.word	0x0801df5c
 8014b90:	0801df70 	.word	0x0801df70
 8014b94:	20006528 	.word	0x20006528
 8014b98:	41a00000 	.word	0x41a00000
 8014b9c:	2000652c 	.word	0x2000652c
 8014ba0:	41f00000 	.word	0x41f00000
 8014ba4:	20006520 	.word	0x20006520
 8014ba8:	43340000 	.word	0x43340000
 8014bac:	40020400 	.word	0x40020400
 8014bb0:	0801df84 	.word	0x0801df84
 8014bb4:	20006530 	.word	0x20006530
 8014bb8:	20006524 	.word	0x20006524
 8014bbc:	00000000 	.word	0x00000000

08014bc0 <loop>:

static void loop(void)
{
 8014bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014bc4:	b088      	sub	sp, #32
 8014bc6:	af06      	add	r7, sp, #24
	sensing_loop();
 8014bc8:	f7ff fbec 	bl	80143a4 <sensing_loop>


	if (millis() - lastSave >= 500)	// save SD buffers while waiting for packet but no frequent than 1Hz
 8014bcc:	f7fe fbda 	bl	8013384 <millis>
 8014bd0:	4602      	mov	r2, r0
 8014bd2:	4b7d      	ldr	r3, [pc, #500]	; (8014dc8 <loop+0x208>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	1ad3      	subs	r3, r2, r3
 8014bd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8014bdc:	d306      	bcc.n	8014bec <loop+0x2c>
	{
		log_save();
 8014bde:	f7f1 f899 	bl	8005d14 <log_save>
		lastSave = millis();
 8014be2:	f7fe fbcf 	bl	8013384 <millis>
 8014be6:	4602      	mov	r2, r0
 8014be8:	4b77      	ldr	r3, [pc, #476]	; (8014dc8 <loop+0x208>)
 8014bea:	601a      	str	r2, [r3, #0]
	}



	if (duplex_checkINT())
 8014bec:	f7fe fd2c 	bl	8013648 <duplex_checkINT>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	f000 80aa 	beq.w	8014d4c <loop+0x18c>
	{
		radio.txLen = sprintf(radio.txBuffer, "%.01f_%.01f_%.07f_%.07f ", bmp.pressure, bmp.temperature, gps.latitudeDegrees, gps.longitudeDegrees); //imortant to leave last byte
 8014bf8:	4b74      	ldr	r3, [pc, #464]	; (8014dcc <loop+0x20c>)
 8014bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7eb fcb3 	bl	8000568 <__aeabi_f2d>
 8014c02:	4682      	mov	sl, r0
 8014c04:	468b      	mov	fp, r1
 8014c06:	4b71      	ldr	r3, [pc, #452]	; (8014dcc <loop+0x20c>)
 8014c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7eb fcac 	bl	8000568 <__aeabi_f2d>
 8014c10:	4604      	mov	r4, r0
 8014c12:	460d      	mov	r5, r1
 8014c14:	4b6e      	ldr	r3, [pc, #440]	; (8014dd0 <loop+0x210>)
 8014c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f7eb fca5 	bl	8000568 <__aeabi_f2d>
 8014c1e:	4680      	mov	r8, r0
 8014c20:	4689      	mov	r9, r1
 8014c22:	4b6b      	ldr	r3, [pc, #428]	; (8014dd0 <loop+0x210>)
 8014c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7eb fc9e 	bl	8000568 <__aeabi_f2d>
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	460b      	mov	r3, r1
 8014c30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014c34:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014c38:	e9cd 4500 	strd	r4, r5, [sp]
 8014c3c:	4652      	mov	r2, sl
 8014c3e:	465b      	mov	r3, fp
 8014c40:	4964      	ldr	r1, [pc, #400]	; (8014dd4 <loop+0x214>)
 8014c42:	4865      	ldr	r0, [pc, #404]	; (8014dd8 <loop+0x218>)
 8014c44:	f002 ff7e 	bl	8017b44 <siprintf>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	b2da      	uxtb	r2, r3
 8014c4c:	4b63      	ldr	r3, [pc, #396]	; (8014ddc <loop+0x21c>)
 8014c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		duplex_loop(radio.txBuffer, radio.txLen, true);
 8014c52:	4b62      	ldr	r3, [pc, #392]	; (8014ddc <loop+0x21c>)
 8014c54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014c58:	2201      	movs	r2, #1
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	485e      	ldr	r0, [pc, #376]	; (8014dd8 <loop+0x218>)
 8014c5e:	f7fe fd1b 	bl	8013698 <duplex_loop>
			lastSave = millis();
		}
		*/


		if ((float)radio.rxBuffer[radio.rxLen - 1] * (360.0 / 255.0))
 8014c62:	4b5e      	ldr	r3, [pc, #376]	; (8014ddc <loop+0x21c>)
 8014c64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014c68:	3b01      	subs	r3, #1
 8014c6a:	4a5c      	ldr	r2, [pc, #368]	; (8014ddc <loop+0x21c>)
 8014c6c:	4413      	add	r3, r2
 8014c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c72:	ee07 3a90 	vmov	s15, r3
 8014c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014c7a:	ee17 0a90 	vmov	r0, s15
 8014c7e:	f7eb fc73 	bl	8000568 <__aeabi_f2d>
 8014c82:	a34f      	add	r3, pc, #316	; (adr r3, 8014dc0 <loop+0x200>)
 8014c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c88:	f7eb fcc6 	bl	8000618 <__aeabi_dmul>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	460c      	mov	r4, r1
 8014c90:	4618      	mov	r0, r3
 8014c92:	4621      	mov	r1, r4
 8014c94:	f04f 0200 	mov.w	r2, #0
 8014c98:	f04f 0300 	mov.w	r3, #0
 8014c9c:	f7eb ff24 	bl	8000ae8 <__aeabi_dcmpeq>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d11d      	bne.n	8014ce2 <loop+0x122>
		{
			target_yaw = (float)radio.rxBuffer[radio.rxLen - 1] * (360.0 / 255.0);
 8014ca6:	4b4d      	ldr	r3, [pc, #308]	; (8014ddc <loop+0x21c>)
 8014ca8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014cac:	3b01      	subs	r3, #1
 8014cae:	4a4b      	ldr	r2, [pc, #300]	; (8014ddc <loop+0x21c>)
 8014cb0:	4413      	add	r3, r2
 8014cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014cb6:	ee07 3a90 	vmov	s15, r3
 8014cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014cbe:	ee17 0a90 	vmov	r0, s15
 8014cc2:	f7eb fc51 	bl	8000568 <__aeabi_f2d>
 8014cc6:	a33e      	add	r3, pc, #248	; (adr r3, 8014dc0 <loop+0x200>)
 8014cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ccc:	f7eb fca4 	bl	8000618 <__aeabi_dmul>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	460c      	mov	r4, r1
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	4621      	mov	r1, r4
 8014cd8:	f7eb ff96 	bl	8000c08 <__aeabi_d2f>
 8014cdc:	4602      	mov	r2, r0
 8014cde:	4b40      	ldr	r3, [pc, #256]	; (8014de0 <loop+0x220>)
 8014ce0:	601a      	str	r2, [r3, #0]
		}

		print_float(target_yaw); println("<< YAW << YAW");
 8014ce2:	4b3f      	ldr	r3, [pc, #252]	; (8014de0 <loop+0x220>)
 8014ce4:	edd3 7a00 	vldr	s15, [r3]
 8014ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8014cec:	f7fe fb0a 	bl	8013304 <print_float>
 8014cf0:	483c      	ldr	r0, [pc, #240]	; (8014de4 <loop+0x224>)
 8014cf2:	f7fe fa6b 	bl	80131cc <println>
		print_int(radio.rxBuffer[0]); println("<< SERVO");
 8014cf6:	4b39      	ldr	r3, [pc, #228]	; (8014ddc <loop+0x21c>)
 8014cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7fe fad3 	bl	80132a8 <print_int>
 8014d02:	4839      	ldr	r0, [pc, #228]	; (8014de8 <loop+0x228>)
 8014d04:	f7fe fa62 	bl	80131cc <println>
		if (radio.rxBuffer[0] == 1 || radio.rxBuffer[0] == 3) TIM3->CCR3 = 550;
 8014d08:	4b34      	ldr	r3, [pc, #208]	; (8014ddc <loop+0x21c>)
 8014d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d004      	beq.n	8014d1c <loop+0x15c>
 8014d12:	4b32      	ldr	r3, [pc, #200]	; (8014ddc <loop+0x21c>)
 8014d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014d18:	2b03      	cmp	r3, #3
 8014d1a:	d104      	bne.n	8014d26 <loop+0x166>
 8014d1c:	4b33      	ldr	r3, [pc, #204]	; (8014dec <loop+0x22c>)
 8014d1e:	f240 2226 	movw	r2, #550	; 0x226
 8014d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8014d24:	e003      	b.n	8014d2e <loop+0x16e>
		else TIM3->CCR3 = 990;
 8014d26:	4b31      	ldr	r3, [pc, #196]	; (8014dec <loop+0x22c>)
 8014d28:	f240 32de 	movw	r2, #990	; 0x3de
 8014d2c:	63da      	str	r2, [r3, #60]	; 0x3c
		if (radio.rxBuffer[0] == 2 || radio.rxBuffer[0] == 3) enableMotors();
 8014d2e:	4b2b      	ldr	r3, [pc, #172]	; (8014ddc <loop+0x21c>)
 8014d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014d34:	2b02      	cmp	r3, #2
 8014d36:	d004      	beq.n	8014d42 <loop+0x182>
 8014d38:	4b28      	ldr	r3, [pc, #160]	; (8014ddc <loop+0x21c>)
 8014d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014d3e:	2b03      	cmp	r3, #3
 8014d40:	d102      	bne.n	8014d48 <loop+0x188>
 8014d42:	f7ec fa35 	bl	80011b0 <enableMotors>
 8014d46:	e001      	b.n	8014d4c <loop+0x18c>
		else disableMotors();
 8014d48:	f7ec fa74 	bl	8001234 <disableMotors>
	}


	if (millis() - lastMotUpdate >= 10)	// every 10ms get Euler angles and run motor alogrithm
 8014d4c:	f7fe fb1a 	bl	8013384 <millis>
 8014d50:	4602      	mov	r2, r0
 8014d52:	4b27      	ldr	r3, [pc, #156]	; (8014df0 <loop+0x230>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	1ad3      	subs	r3, r2, r3
 8014d58:	2b09      	cmp	r3, #9
 8014d5a:	d92a      	bls.n	8014db2 <loop+0x1f2>
	{

		imuTest_getEuler();
 8014d5c:	f7fe ff2c 	bl	8013bb8 <imuTest_getEuler>
		float brng = bearing(gps.latitudeDegrees, gps.longitudeDegrees, target_lat, target_lon);
 8014d60:	4b1b      	ldr	r3, [pc, #108]	; (8014dd0 <loop+0x210>)
 8014d62:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8014d66:	4b1a      	ldr	r3, [pc, #104]	; (8014dd0 <loop+0x210>)
 8014d68:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8014d6c:	4b21      	ldr	r3, [pc, #132]	; (8014df4 <loop+0x234>)
 8014d6e:	edd3 6a00 	vldr	s13, [r3]
 8014d72:	4b21      	ldr	r3, [pc, #132]	; (8014df8 <loop+0x238>)
 8014d74:	ed93 6a00 	vldr	s12, [r3]
 8014d78:	eef0 1a46 	vmov.f32	s3, s12
 8014d7c:	eeb0 1a66 	vmov.f32	s2, s13
 8014d80:	eef0 0a47 	vmov.f32	s1, s14
 8014d84:	eeb0 0a67 	vmov.f32	s0, s15
 8014d88:	f7ff fd46 	bl	8014818 <bearing>
 8014d8c:	ed87 0a01 	vstr	s0, [r7, #4]
	//	algoGalgo(yaw, brng); // target_yaw wyliczane z pozycji anteny;
		algoGalgo(yaw, target_yaw); //statyczny target_yaw
 8014d90:	4b1a      	ldr	r3, [pc, #104]	; (8014dfc <loop+0x23c>)
 8014d92:	edd3 7a00 	vldr	s15, [r3]
 8014d96:	4b12      	ldr	r3, [pc, #72]	; (8014de0 <loop+0x220>)
 8014d98:	ed93 7a00 	vldr	s14, [r3]
 8014d9c:	eef0 0a47 	vmov.f32	s1, s14
 8014da0:	eeb0 0a67 	vmov.f32	s0, s15
 8014da4:	f7ff fbf0 	bl	8014588 <algoGalgo>
		//print_float(yaw); println("");
		lastMotUpdate = millis();
 8014da8:	f7fe faec 	bl	8013384 <millis>
 8014dac:	4602      	mov	r2, r0
 8014dae:	4b10      	ldr	r3, [pc, #64]	; (8014df0 <loop+0x230>)
 8014db0:	601a      	str	r2, [r3, #0]
	}


}
 8014db2:	bf00      	nop
 8014db4:	3708      	adds	r7, #8
 8014db6:	46bd      	mov	sp, r7
 8014db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014dbc:	f3af 8000 	nop.w
 8014dc0:	96969697 	.word	0x96969697
 8014dc4:	3ff69696 	.word	0x3ff69696
 8014dc8:	20006530 	.word	0x20006530
 8014dcc:	200064c8 	.word	0x200064c8
 8014dd0:	20002cb8 	.word	0x20002cb8
 8014dd4:	0801df94 	.word	0x0801df94
 8014dd8:	20002bb4 	.word	0x20002bb4
 8014ddc:	20002a70 	.word	0x20002a70
 8014de0:	20006520 	.word	0x20006520
 8014de4:	0801dfb0 	.word	0x0801dfb0
 8014de8:	0801dfc0 	.word	0x0801dfc0
 8014dec:	40000400 	.word	0x40000400
 8014df0:	20006518 	.word	0x20006518
 8014df4:	20006528 	.word	0x20006528
 8014df8:	2000652c 	.word	0x2000652c
 8014dfc:	20002fc4 	.word	0x20002fc4

08014e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8014e04:	f7f1 f9fc 	bl	8006200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8014e08:	f000 f862 	bl	8014ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8014e0c:	f000 fb30 	bl	8015470 <MX_GPIO_Init>
  MX_DMA_Init();
 8014e10:	f000 fb06 	bl	8015420 <MX_DMA_Init>
  MX_I2C1_Init();
 8014e14:	f000 f8de 	bl	8014fd4 <MX_I2C1_Init>
  MX_RTC_Init();
 8014e18:	f000 f90a 	bl	8015030 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8014e1c:	f000 f92e 	bl	801507c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8014e20:	f000 f94c 	bl	80150bc <MX_SPI1_Init>
  MX_TIM2_Init();
 8014e24:	f000 f980 	bl	8015128 <MX_TIM2_Init>
  MX_TIM3_Init();
 8014e28:	f000 f9cc 	bl	80151c4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8014e2c:	f000 fa4c 	bl	80152c8 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8014e30:	f000 facc 	bl	80153cc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8014e34:	f7fe f978 	bl	8013128 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8014e38:	f001 f9dc 	bl	80161f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 8014e3c:	4820      	ldr	r0, [pc, #128]	; (8014ec0 <main+0xc0>)
 8014e3e:	f7f6 ffa8 	bl	800bd92 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8014e42:	2200      	movs	r2, #0
 8014e44:	2180      	movs	r1, #128	; 0x80
 8014e46:	481f      	ldr	r0, [pc, #124]	; (8014ec4 <main+0xc4>)
 8014e48:	f7f2 f8ca 	bl	8006fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	2140      	movs	r1, #64	; 0x40
 8014e50:	481c      	ldr	r0, [pc, #112]	; (8014ec4 <main+0xc4>)
 8014e52:	f7f2 f8c5 	bl	8006fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8014e56:	2200      	movs	r2, #0
 8014e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8014e5c:	481a      	ldr	r0, [pc, #104]	; (8014ec8 <main+0xc8>)
 8014e5e:	f7f2 f8bf 	bl	8006fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8014e62:	2200      	movs	r2, #0
 8014e64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014e68:	4817      	ldr	r0, [pc, #92]	; (8014ec8 <main+0xc8>)
 8014e6a:	f7f2 f8b9 	bl	8006fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 8014e6e:	2200      	movs	r2, #0
 8014e70:	2101      	movs	r1, #1
 8014e72:	4816      	ldr	r0, [pc, #88]	; (8014ecc <main+0xcc>)
 8014e74:	f7f2 f8b4 	bl	8006fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 8014e78:	2200      	movs	r2, #0
 8014e7a:	2104      	movs	r1, #4
 8014e7c:	4813      	ldr	r0, [pc, #76]	; (8014ecc <main+0xcc>)
 8014e7e:	f7f2 f8af 	bl	8006fe0 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 8014e82:	2200      	movs	r2, #0
 8014e84:	2101      	movs	r1, #1
 8014e86:	480f      	ldr	r0, [pc, #60]	; (8014ec4 <main+0xc4>)
 8014e88:	f7f2 f8aa 	bl	8006fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	2104      	movs	r1, #4
 8014e90:	480c      	ldr	r0, [pc, #48]	; (8014ec4 <main+0xc4>)
 8014e92:	f7f2 f8a5 	bl	8006fe0 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 8014e96:	2200      	movs	r2, #0
 8014e98:	2102      	movs	r1, #2
 8014e9a:	480a      	ldr	r0, [pc, #40]	; (8014ec4 <main+0xc4>)
 8014e9c:	f7f2 f8a0 	bl	8006fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 8014ea0:	2201      	movs	r2, #1
 8014ea2:	2108      	movs	r1, #8
 8014ea4:	4807      	ldr	r0, [pc, #28]	; (8014ec4 <main+0xc4>)
 8014ea6:	f7f2 f89b 	bl	8006fe0 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 8014eaa:	2200      	movs	r2, #0
 8014eac:	2110      	movs	r1, #16
 8014eae:	4807      	ldr	r0, [pc, #28]	; (8014ecc <main+0xcc>)
 8014eb0:	f7f2 f896 	bl	8006fe0 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 8014eb4:	f7ff fe0a 	bl	8014acc <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 8014eb8:	f7ff fe82 	bl	8014bc0 <loop>
 8014ebc:	e7fc      	b.n	8014eb8 <main+0xb8>
 8014ebe:	bf00      	nop
 8014ec0:	20008874 	.word	0x20008874
 8014ec4:	40020800 	.word	0x40020800
 8014ec8:	40020400 	.word	0x40020400
 8014ecc:	40020000 	.word	0x40020000

08014ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b098      	sub	sp, #96	; 0x60
 8014ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8014ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014eda:	2230      	movs	r2, #48	; 0x30
 8014edc:	2100      	movs	r1, #0
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f001 ff2b 	bl	8016d3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8014ee4:	f107 031c 	add.w	r3, r7, #28
 8014ee8:	2200      	movs	r2, #0
 8014eea:	601a      	str	r2, [r3, #0]
 8014eec:	605a      	str	r2, [r3, #4]
 8014eee:	609a      	str	r2, [r3, #8]
 8014ef0:	60da      	str	r2, [r3, #12]
 8014ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014ef4:	f107 030c 	add.w	r3, r7, #12
 8014ef8:	2200      	movs	r2, #0
 8014efa:	601a      	str	r2, [r3, #0]
 8014efc:	605a      	str	r2, [r3, #4]
 8014efe:	609a      	str	r2, [r3, #8]
 8014f00:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8014f02:	2300      	movs	r3, #0
 8014f04:	60bb      	str	r3, [r7, #8]
 8014f06:	4b31      	ldr	r3, [pc, #196]	; (8014fcc <SystemClock_Config+0xfc>)
 8014f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f0a:	4a30      	ldr	r2, [pc, #192]	; (8014fcc <SystemClock_Config+0xfc>)
 8014f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014f10:	6413      	str	r3, [r2, #64]	; 0x40
 8014f12:	4b2e      	ldr	r3, [pc, #184]	; (8014fcc <SystemClock_Config+0xfc>)
 8014f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014f1a:	60bb      	str	r3, [r7, #8]
 8014f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8014f1e:	2300      	movs	r3, #0
 8014f20:	607b      	str	r3, [r7, #4]
 8014f22:	4b2b      	ldr	r3, [pc, #172]	; (8014fd0 <SystemClock_Config+0x100>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	4a2a      	ldr	r2, [pc, #168]	; (8014fd0 <SystemClock_Config+0x100>)
 8014f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014f2c:	6013      	str	r3, [r2, #0]
 8014f2e:	4b28      	ldr	r3, [pc, #160]	; (8014fd0 <SystemClock_Config+0x100>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014f36:	607b      	str	r3, [r7, #4]
 8014f38:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8014f3a:	2305      	movs	r3, #5
 8014f3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8014f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014f42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8014f44:	2301      	movs	r3, #1
 8014f46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8014f48:	2302      	movs	r3, #2
 8014f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8014f4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014f50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8014f52:	2306      	movs	r3, #6
 8014f54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8014f56:	23a8      	movs	r3, #168	; 0xa8
 8014f58:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8014f5a:	2302      	movs	r3, #2
 8014f5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8014f5e:	2307      	movs	r3, #7
 8014f60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8014f62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014f66:	4618      	mov	r0, r3
 8014f68:	f7f4 f978 	bl	800925c <HAL_RCC_OscConfig>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d001      	beq.n	8014f76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8014f72:	f000 fb97 	bl	80156a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014f76:	230f      	movs	r3, #15
 8014f78:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8014f7a:	2302      	movs	r3, #2
 8014f7c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8014f82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8014f86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8014f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014f8c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8014f8e:	f107 031c 	add.w	r3, r7, #28
 8014f92:	2105      	movs	r1, #5
 8014f94:	4618      	mov	r0, r3
 8014f96:	f7f4 fba3 	bl	80096e0 <HAL_RCC_ClockConfig>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d001      	beq.n	8014fa4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8014fa0:	f000 fb80 	bl	80156a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8014fa4:	2302      	movs	r3, #2
 8014fa6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8014fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014fac:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014fae:	f107 030c 	add.w	r3, r7, #12
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f7f4 fd5c 	bl	8009a70 <HAL_RCCEx_PeriphCLKConfig>
 8014fb8:	4603      	mov	r3, r0
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d001      	beq.n	8014fc2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8014fbe:	f000 fb71 	bl	80156a4 <Error_Handler>
  }
}
 8014fc2:	bf00      	nop
 8014fc4:	3760      	adds	r7, #96	; 0x60
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	40023800 	.word	0x40023800
 8014fd0:	40007000 	.word	0x40007000

08014fd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8014fd8:	4b12      	ldr	r3, [pc, #72]	; (8015024 <MX_I2C1_Init+0x50>)
 8014fda:	4a13      	ldr	r2, [pc, #76]	; (8015028 <MX_I2C1_Init+0x54>)
 8014fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8014fde:	4b11      	ldr	r3, [pc, #68]	; (8015024 <MX_I2C1_Init+0x50>)
 8014fe0:	4a12      	ldr	r2, [pc, #72]	; (801502c <MX_I2C1_Init+0x58>)
 8014fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014fe4:	4b0f      	ldr	r3, [pc, #60]	; (8015024 <MX_I2C1_Init+0x50>)
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8014fea:	4b0e      	ldr	r3, [pc, #56]	; (8015024 <MX_I2C1_Init+0x50>)
 8014fec:	2200      	movs	r2, #0
 8014fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014ff0:	4b0c      	ldr	r3, [pc, #48]	; (8015024 <MX_I2C1_Init+0x50>)
 8014ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014ff6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014ff8:	4b0a      	ldr	r3, [pc, #40]	; (8015024 <MX_I2C1_Init+0x50>)
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8014ffe:	4b09      	ldr	r3, [pc, #36]	; (8015024 <MX_I2C1_Init+0x50>)
 8015000:	2200      	movs	r2, #0
 8015002:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015004:	4b07      	ldr	r3, [pc, #28]	; (8015024 <MX_I2C1_Init+0x50>)
 8015006:	2200      	movs	r2, #0
 8015008:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801500a:	4b06      	ldr	r3, [pc, #24]	; (8015024 <MX_I2C1_Init+0x50>)
 801500c:	2200      	movs	r2, #0
 801500e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8015010:	4804      	ldr	r0, [pc, #16]	; (8015024 <MX_I2C1_Init+0x50>)
 8015012:	f7f2 f819 	bl	8007048 <HAL_I2C_Init>
 8015016:	4603      	mov	r3, r0
 8015018:	2b00      	cmp	r3, #0
 801501a:	d001      	beq.n	8015020 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801501c:	f000 fb42 	bl	80156a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8015020:	bf00      	nop
 8015022:	bd80      	pop	{r7, pc}
 8015024:	20008644 	.word	0x20008644
 8015028:	40005400 	.word	0x40005400
 801502c:	00061a80 	.word	0x00061a80

08015030 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8015034:	4b0f      	ldr	r3, [pc, #60]	; (8015074 <MX_RTC_Init+0x44>)
 8015036:	4a10      	ldr	r2, [pc, #64]	; (8015078 <MX_RTC_Init+0x48>)
 8015038:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801503a:	4b0e      	ldr	r3, [pc, #56]	; (8015074 <MX_RTC_Init+0x44>)
 801503c:	2200      	movs	r2, #0
 801503e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8015040:	4b0c      	ldr	r3, [pc, #48]	; (8015074 <MX_RTC_Init+0x44>)
 8015042:	227f      	movs	r2, #127	; 0x7f
 8015044:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8015046:	4b0b      	ldr	r3, [pc, #44]	; (8015074 <MX_RTC_Init+0x44>)
 8015048:	22ff      	movs	r2, #255	; 0xff
 801504a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801504c:	4b09      	ldr	r3, [pc, #36]	; (8015074 <MX_RTC_Init+0x44>)
 801504e:	2200      	movs	r2, #0
 8015050:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8015052:	4b08      	ldr	r3, [pc, #32]	; (8015074 <MX_RTC_Init+0x44>)
 8015054:	2200      	movs	r2, #0
 8015056:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8015058:	4b06      	ldr	r3, [pc, #24]	; (8015074 <MX_RTC_Init+0x44>)
 801505a:	2200      	movs	r2, #0
 801505c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801505e:	4805      	ldr	r0, [pc, #20]	; (8015074 <MX_RTC_Init+0x44>)
 8015060:	f7f4 fde8 	bl	8009c34 <HAL_RTC_Init>
 8015064:	4603      	mov	r3, r0
 8015066:	2b00      	cmp	r3, #0
 8015068:	d001      	beq.n	801506e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 801506a:	f000 fb1b 	bl	80156a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 801506e:	bf00      	nop
 8015070:	bd80      	pop	{r7, pc}
 8015072:	bf00      	nop
 8015074:	20008718 	.word	0x20008718
 8015078:	40002800 	.word	0x40002800

0801507c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 801507c:	b480      	push	{r7}
 801507e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8015080:	4b0c      	ldr	r3, [pc, #48]	; (80150b4 <MX_SDIO_SD_Init+0x38>)
 8015082:	4a0d      	ldr	r2, [pc, #52]	; (80150b8 <MX_SDIO_SD_Init+0x3c>)
 8015084:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8015086:	4b0b      	ldr	r3, [pc, #44]	; (80150b4 <MX_SDIO_SD_Init+0x38>)
 8015088:	2200      	movs	r2, #0
 801508a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 801508c:	4b09      	ldr	r3, [pc, #36]	; (80150b4 <MX_SDIO_SD_Init+0x38>)
 801508e:	2200      	movs	r2, #0
 8015090:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8015092:	4b08      	ldr	r3, [pc, #32]	; (80150b4 <MX_SDIO_SD_Init+0x38>)
 8015094:	2200      	movs	r2, #0
 8015096:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8015098:	4b06      	ldr	r3, [pc, #24]	; (80150b4 <MX_SDIO_SD_Init+0x38>)
 801509a:	2200      	movs	r2, #0
 801509c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 801509e:	4b05      	ldr	r3, [pc, #20]	; (80150b4 <MX_SDIO_SD_Init+0x38>)
 80150a0:	2200      	movs	r2, #0
 80150a2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80150a4:	4b03      	ldr	r3, [pc, #12]	; (80150b4 <MX_SDIO_SD_Init+0x38>)
 80150a6:	2200      	movs	r2, #0
 80150a8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80150aa:	bf00      	nop
 80150ac:	46bd      	mov	sp, r7
 80150ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b2:	4770      	bx	lr
 80150b4:	20008798 	.word	0x20008798
 80150b8:	40012c00 	.word	0x40012c00

080150bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80150c0:	4b17      	ldr	r3, [pc, #92]	; (8015120 <MX_SPI1_Init+0x64>)
 80150c2:	4a18      	ldr	r2, [pc, #96]	; (8015124 <MX_SPI1_Init+0x68>)
 80150c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80150c6:	4b16      	ldr	r3, [pc, #88]	; (8015120 <MX_SPI1_Init+0x64>)
 80150c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80150cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80150ce:	4b14      	ldr	r3, [pc, #80]	; (8015120 <MX_SPI1_Init+0x64>)
 80150d0:	2200      	movs	r2, #0
 80150d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80150d4:	4b12      	ldr	r3, [pc, #72]	; (8015120 <MX_SPI1_Init+0x64>)
 80150d6:	2200      	movs	r2, #0
 80150d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80150da:	4b11      	ldr	r3, [pc, #68]	; (8015120 <MX_SPI1_Init+0x64>)
 80150dc:	2200      	movs	r2, #0
 80150de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80150e0:	4b0f      	ldr	r3, [pc, #60]	; (8015120 <MX_SPI1_Init+0x64>)
 80150e2:	2200      	movs	r2, #0
 80150e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80150e6:	4b0e      	ldr	r3, [pc, #56]	; (8015120 <MX_SPI1_Init+0x64>)
 80150e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80150ee:	4b0c      	ldr	r3, [pc, #48]	; (8015120 <MX_SPI1_Init+0x64>)
 80150f0:	2218      	movs	r2, #24
 80150f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80150f4:	4b0a      	ldr	r3, [pc, #40]	; (8015120 <MX_SPI1_Init+0x64>)
 80150f6:	2200      	movs	r2, #0
 80150f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80150fa:	4b09      	ldr	r3, [pc, #36]	; (8015120 <MX_SPI1_Init+0x64>)
 80150fc:	2200      	movs	r2, #0
 80150fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015100:	4b07      	ldr	r3, [pc, #28]	; (8015120 <MX_SPI1_Init+0x64>)
 8015102:	2200      	movs	r2, #0
 8015104:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8015106:	4b06      	ldr	r3, [pc, #24]	; (8015120 <MX_SPI1_Init+0x64>)
 8015108:	220a      	movs	r2, #10
 801510a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801510c:	4804      	ldr	r0, [pc, #16]	; (8015120 <MX_SPI1_Init+0x64>)
 801510e:	f7f6 fa20 	bl	800b552 <HAL_SPI_Init>
 8015112:	4603      	mov	r3, r0
 8015114:	2b00      	cmp	r3, #0
 8015116:	d001      	beq.n	801511c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8015118:	f000 fac4 	bl	80156a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801511c:	bf00      	nop
 801511e:	bd80      	pop	{r7, pc}
 8015120:	2000881c 	.word	0x2000881c
 8015124:	40013000 	.word	0x40013000

08015128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b086      	sub	sp, #24
 801512c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801512e:	f107 0308 	add.w	r3, r7, #8
 8015132:	2200      	movs	r2, #0
 8015134:	601a      	str	r2, [r3, #0]
 8015136:	605a      	str	r2, [r3, #4]
 8015138:	609a      	str	r2, [r3, #8]
 801513a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801513c:	463b      	mov	r3, r7
 801513e:	2200      	movs	r2, #0
 8015140:	601a      	str	r2, [r3, #0]
 8015142:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8015144:	4b1d      	ldr	r3, [pc, #116]	; (80151bc <MX_TIM2_Init+0x94>)
 8015146:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801514a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 801514c:	4b1b      	ldr	r3, [pc, #108]	; (80151bc <MX_TIM2_Init+0x94>)
 801514e:	2253      	movs	r2, #83	; 0x53
 8015150:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015152:	4b1a      	ldr	r3, [pc, #104]	; (80151bc <MX_TIM2_Init+0x94>)
 8015154:	2200      	movs	r2, #0
 8015156:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 8015158:	4b18      	ldr	r3, [pc, #96]	; (80151bc <MX_TIM2_Init+0x94>)
 801515a:	4a19      	ldr	r2, [pc, #100]	; (80151c0 <MX_TIM2_Init+0x98>)
 801515c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801515e:	4b17      	ldr	r3, [pc, #92]	; (80151bc <MX_TIM2_Init+0x94>)
 8015160:	2200      	movs	r2, #0
 8015162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015164:	4b15      	ldr	r3, [pc, #84]	; (80151bc <MX_TIM2_Init+0x94>)
 8015166:	2200      	movs	r2, #0
 8015168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801516a:	4814      	ldr	r0, [pc, #80]	; (80151bc <MX_TIM2_Init+0x94>)
 801516c:	f7f6 fde6 	bl	800bd3c <HAL_TIM_Base_Init>
 8015170:	4603      	mov	r3, r0
 8015172:	2b00      	cmp	r3, #0
 8015174:	d001      	beq.n	801517a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8015176:	f000 fa95 	bl	80156a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801517a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801517e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8015180:	f107 0308 	add.w	r3, r7, #8
 8015184:	4619      	mov	r1, r3
 8015186:	480d      	ldr	r0, [pc, #52]	; (80151bc <MX_TIM2_Init+0x94>)
 8015188:	f7f6 ffb8 	bl	800c0fc <HAL_TIM_ConfigClockSource>
 801518c:	4603      	mov	r3, r0
 801518e:	2b00      	cmp	r3, #0
 8015190:	d001      	beq.n	8015196 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8015192:	f000 fa87 	bl	80156a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015196:	2300      	movs	r3, #0
 8015198:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801519a:	2300      	movs	r3, #0
 801519c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801519e:	463b      	mov	r3, r7
 80151a0:	4619      	mov	r1, r3
 80151a2:	4806      	ldr	r0, [pc, #24]	; (80151bc <MX_TIM2_Init+0x94>)
 80151a4:	f7f7 fb71 	bl	800c88a <HAL_TIMEx_MasterConfigSynchronization>
 80151a8:	4603      	mov	r3, r0
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d001      	beq.n	80151b2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80151ae:	f000 fa79 	bl	80156a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80151b2:	bf00      	nop
 80151b4:	3718      	adds	r7, #24
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
 80151ba:	bf00      	nop
 80151bc:	20008874 	.word	0x20008874
 80151c0:	fa56ea00 	.word	0xfa56ea00

080151c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b08e      	sub	sp, #56	; 0x38
 80151c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80151ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80151ce:	2200      	movs	r2, #0
 80151d0:	601a      	str	r2, [r3, #0]
 80151d2:	605a      	str	r2, [r3, #4]
 80151d4:	609a      	str	r2, [r3, #8]
 80151d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80151d8:	f107 0320 	add.w	r3, r7, #32
 80151dc:	2200      	movs	r2, #0
 80151de:	601a      	str	r2, [r3, #0]
 80151e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80151e2:	1d3b      	adds	r3, r7, #4
 80151e4:	2200      	movs	r2, #0
 80151e6:	601a      	str	r2, [r3, #0]
 80151e8:	605a      	str	r2, [r3, #4]
 80151ea:	609a      	str	r2, [r3, #8]
 80151ec:	60da      	str	r2, [r3, #12]
 80151ee:	611a      	str	r2, [r3, #16]
 80151f0:	615a      	str	r2, [r3, #20]
 80151f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80151f4:	4b32      	ldr	r3, [pc, #200]	; (80152c0 <MX_TIM3_Init+0xfc>)
 80151f6:	4a33      	ldr	r2, [pc, #204]	; (80152c4 <MX_TIM3_Init+0x100>)
 80151f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80151fa:	4b31      	ldr	r3, [pc, #196]	; (80152c0 <MX_TIM3_Init+0xfc>)
 80151fc:	22a7      	movs	r2, #167	; 0xa7
 80151fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015200:	4b2f      	ldr	r3, [pc, #188]	; (80152c0 <MX_TIM3_Init+0xfc>)
 8015202:	2200      	movs	r2, #0
 8015204:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8015206:	4b2e      	ldr	r3, [pc, #184]	; (80152c0 <MX_TIM3_Init+0xfc>)
 8015208:	f242 7210 	movw	r2, #10000	; 0x2710
 801520c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801520e:	4b2c      	ldr	r3, [pc, #176]	; (80152c0 <MX_TIM3_Init+0xfc>)
 8015210:	2200      	movs	r2, #0
 8015212:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015214:	4b2a      	ldr	r3, [pc, #168]	; (80152c0 <MX_TIM3_Init+0xfc>)
 8015216:	2200      	movs	r2, #0
 8015218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801521a:	4829      	ldr	r0, [pc, #164]	; (80152c0 <MX_TIM3_Init+0xfc>)
 801521c:	f7f6 fd8e 	bl	800bd3c <HAL_TIM_Base_Init>
 8015220:	4603      	mov	r3, r0
 8015222:	2b00      	cmp	r3, #0
 8015224:	d001      	beq.n	801522a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8015226:	f000 fa3d 	bl	80156a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801522a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801522e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8015230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015234:	4619      	mov	r1, r3
 8015236:	4822      	ldr	r0, [pc, #136]	; (80152c0 <MX_TIM3_Init+0xfc>)
 8015238:	f7f6 ff60 	bl	800c0fc <HAL_TIM_ConfigClockSource>
 801523c:	4603      	mov	r3, r0
 801523e:	2b00      	cmp	r3, #0
 8015240:	d001      	beq.n	8015246 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8015242:	f000 fa2f 	bl	80156a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8015246:	481e      	ldr	r0, [pc, #120]	; (80152c0 <MX_TIM3_Init+0xfc>)
 8015248:	f7f6 fdc7 	bl	800bdda <HAL_TIM_PWM_Init>
 801524c:	4603      	mov	r3, r0
 801524e:	2b00      	cmp	r3, #0
 8015250:	d001      	beq.n	8015256 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8015252:	f000 fa27 	bl	80156a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015256:	2300      	movs	r3, #0
 8015258:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801525a:	2300      	movs	r3, #0
 801525c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801525e:	f107 0320 	add.w	r3, r7, #32
 8015262:	4619      	mov	r1, r3
 8015264:	4816      	ldr	r0, [pc, #88]	; (80152c0 <MX_TIM3_Init+0xfc>)
 8015266:	f7f7 fb10 	bl	800c88a <HAL_TIMEx_MasterConfigSynchronization>
 801526a:	4603      	mov	r3, r0
 801526c:	2b00      	cmp	r3, #0
 801526e:	d001      	beq.n	8015274 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8015270:	f000 fa18 	bl	80156a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8015274:	2360      	movs	r3, #96	; 0x60
 8015276:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8015278:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801527c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801527e:	2300      	movs	r3, #0
 8015280:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8015282:	2300      	movs	r3, #0
 8015284:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8015286:	1d3b      	adds	r3, r7, #4
 8015288:	2208      	movs	r2, #8
 801528a:	4619      	mov	r1, r3
 801528c:	480c      	ldr	r0, [pc, #48]	; (80152c0 <MX_TIM3_Init+0xfc>)
 801528e:	f7f6 fe6f 	bl	800bf70 <HAL_TIM_PWM_ConfigChannel>
 8015292:	4603      	mov	r3, r0
 8015294:	2b00      	cmp	r3, #0
 8015296:	d001      	beq.n	801529c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8015298:	f000 fa04 	bl	80156a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801529c:	1d3b      	adds	r3, r7, #4
 801529e:	220c      	movs	r2, #12
 80152a0:	4619      	mov	r1, r3
 80152a2:	4807      	ldr	r0, [pc, #28]	; (80152c0 <MX_TIM3_Init+0xfc>)
 80152a4:	f7f6 fe64 	bl	800bf70 <HAL_TIM_PWM_ConfigChannel>
 80152a8:	4603      	mov	r3, r0
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d001      	beq.n	80152b2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80152ae:	f000 f9f9 	bl	80156a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80152b2:	4803      	ldr	r0, [pc, #12]	; (80152c0 <MX_TIM3_Init+0xfc>)
 80152b4:	f000 fe3c 	bl	8015f30 <HAL_TIM_MspPostInit>

}
 80152b8:	bf00      	nop
 80152ba:	3738      	adds	r7, #56	; 0x38
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}
 80152c0:	200086d8 	.word	0x200086d8
 80152c4:	40000400 	.word	0x40000400

080152c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b08e      	sub	sp, #56	; 0x38
 80152cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80152ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80152d2:	2200      	movs	r2, #0
 80152d4:	601a      	str	r2, [r3, #0]
 80152d6:	605a      	str	r2, [r3, #4]
 80152d8:	609a      	str	r2, [r3, #8]
 80152da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80152dc:	f107 0320 	add.w	r3, r7, #32
 80152e0:	2200      	movs	r2, #0
 80152e2:	601a      	str	r2, [r3, #0]
 80152e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80152e6:	1d3b      	adds	r3, r7, #4
 80152e8:	2200      	movs	r2, #0
 80152ea:	601a      	str	r2, [r3, #0]
 80152ec:	605a      	str	r2, [r3, #4]
 80152ee:	609a      	str	r2, [r3, #8]
 80152f0:	60da      	str	r2, [r3, #12]
 80152f2:	611a      	str	r2, [r3, #16]
 80152f4:	615a      	str	r2, [r3, #20]
 80152f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80152f8:	4b32      	ldr	r3, [pc, #200]	; (80153c4 <MX_TIM5_Init+0xfc>)
 80152fa:	4a33      	ldr	r2, [pc, #204]	; (80153c8 <MX_TIM5_Init+0x100>)
 80152fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80152fe:	4b31      	ldr	r3, [pc, #196]	; (80153c4 <MX_TIM5_Init+0xfc>)
 8015300:	2200      	movs	r2, #0
 8015302:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8015304:	4b2f      	ldr	r3, [pc, #188]	; (80153c4 <MX_TIM5_Init+0xfc>)
 8015306:	2240      	movs	r2, #64	; 0x40
 8015308:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 801530a:	4b2e      	ldr	r3, [pc, #184]	; (80153c4 <MX_TIM5_Init+0xfc>)
 801530c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015310:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015312:	4b2c      	ldr	r3, [pc, #176]	; (80153c4 <MX_TIM5_Init+0xfc>)
 8015314:	2200      	movs	r2, #0
 8015316:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015318:	4b2a      	ldr	r3, [pc, #168]	; (80153c4 <MX_TIM5_Init+0xfc>)
 801531a:	2200      	movs	r2, #0
 801531c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801531e:	4829      	ldr	r0, [pc, #164]	; (80153c4 <MX_TIM5_Init+0xfc>)
 8015320:	f7f6 fd0c 	bl	800bd3c <HAL_TIM_Base_Init>
 8015324:	4603      	mov	r3, r0
 8015326:	2b00      	cmp	r3, #0
 8015328:	d001      	beq.n	801532e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 801532a:	f000 f9bb 	bl	80156a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801532e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015332:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8015334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015338:	4619      	mov	r1, r3
 801533a:	4822      	ldr	r0, [pc, #136]	; (80153c4 <MX_TIM5_Init+0xfc>)
 801533c:	f7f6 fede 	bl	800c0fc <HAL_TIM_ConfigClockSource>
 8015340:	4603      	mov	r3, r0
 8015342:	2b00      	cmp	r3, #0
 8015344:	d001      	beq.n	801534a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8015346:	f000 f9ad 	bl	80156a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 801534a:	481e      	ldr	r0, [pc, #120]	; (80153c4 <MX_TIM5_Init+0xfc>)
 801534c:	f7f6 fd45 	bl	800bdda <HAL_TIM_PWM_Init>
 8015350:	4603      	mov	r3, r0
 8015352:	2b00      	cmp	r3, #0
 8015354:	d001      	beq.n	801535a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8015356:	f000 f9a5 	bl	80156a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801535a:	2300      	movs	r3, #0
 801535c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801535e:	2300      	movs	r3, #0
 8015360:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8015362:	f107 0320 	add.w	r3, r7, #32
 8015366:	4619      	mov	r1, r3
 8015368:	4816      	ldr	r0, [pc, #88]	; (80153c4 <MX_TIM5_Init+0xfc>)
 801536a:	f7f7 fa8e 	bl	800c88a <HAL_TIMEx_MasterConfigSynchronization>
 801536e:	4603      	mov	r3, r0
 8015370:	2b00      	cmp	r3, #0
 8015372:	d001      	beq.n	8015378 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8015374:	f000 f996 	bl	80156a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8015378:	2370      	movs	r3, #112	; 0x70
 801537a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 801537c:	2364      	movs	r3, #100	; 0x64
 801537e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8015380:	2300      	movs	r3, #0
 8015382:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8015384:	2300      	movs	r3, #0
 8015386:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8015388:	1d3b      	adds	r3, r7, #4
 801538a:	2204      	movs	r2, #4
 801538c:	4619      	mov	r1, r3
 801538e:	480d      	ldr	r0, [pc, #52]	; (80153c4 <MX_TIM5_Init+0xfc>)
 8015390:	f7f6 fdee 	bl	800bf70 <HAL_TIM_PWM_ConfigChannel>
 8015394:	4603      	mov	r3, r0
 8015396:	2b00      	cmp	r3, #0
 8015398:	d001      	beq.n	801539e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 801539a:	f000 f983 	bl	80156a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801539e:	1d3b      	adds	r3, r7, #4
 80153a0:	220c      	movs	r2, #12
 80153a2:	4619      	mov	r1, r3
 80153a4:	4807      	ldr	r0, [pc, #28]	; (80153c4 <MX_TIM5_Init+0xfc>)
 80153a6:	f7f6 fde3 	bl	800bf70 <HAL_TIM_PWM_ConfigChannel>
 80153aa:	4603      	mov	r3, r0
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d001      	beq.n	80153b4 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80153b0:	f000 f978 	bl	80156a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80153b4:	4803      	ldr	r0, [pc, #12]	; (80153c4 <MX_TIM5_Init+0xfc>)
 80153b6:	f000 fdbb 	bl	8015f30 <HAL_TIM_MspPostInit>

}
 80153ba:	bf00      	nop
 80153bc:	3738      	adds	r7, #56	; 0x38
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}
 80153c2:	bf00      	nop
 80153c4:	20008698 	.word	0x20008698
 80153c8:	40000c00 	.word	0x40000c00

080153cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80153d0:	4b11      	ldr	r3, [pc, #68]	; (8015418 <MX_USART3_UART_Init+0x4c>)
 80153d2:	4a12      	ldr	r2, [pc, #72]	; (801541c <MX_USART3_UART_Init+0x50>)
 80153d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80153d6:	4b10      	ldr	r3, [pc, #64]	; (8015418 <MX_USART3_UART_Init+0x4c>)
 80153d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80153dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80153de:	4b0e      	ldr	r3, [pc, #56]	; (8015418 <MX_USART3_UART_Init+0x4c>)
 80153e0:	2200      	movs	r2, #0
 80153e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80153e4:	4b0c      	ldr	r3, [pc, #48]	; (8015418 <MX_USART3_UART_Init+0x4c>)
 80153e6:	2200      	movs	r2, #0
 80153e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80153ea:	4b0b      	ldr	r3, [pc, #44]	; (8015418 <MX_USART3_UART_Init+0x4c>)
 80153ec:	2200      	movs	r2, #0
 80153ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80153f0:	4b09      	ldr	r3, [pc, #36]	; (8015418 <MX_USART3_UART_Init+0x4c>)
 80153f2:	220c      	movs	r2, #12
 80153f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80153f6:	4b08      	ldr	r3, [pc, #32]	; (8015418 <MX_USART3_UART_Init+0x4c>)
 80153f8:	2200      	movs	r2, #0
 80153fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80153fc:	4b06      	ldr	r3, [pc, #24]	; (8015418 <MX_USART3_UART_Init+0x4c>)
 80153fe:	2200      	movs	r2, #0
 8015400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8015402:	4805      	ldr	r0, [pc, #20]	; (8015418 <MX_USART3_UART_Init+0x4c>)
 8015404:	f7f7 fa86 	bl	800c914 <HAL_UART_Init>
 8015408:	4603      	mov	r3, r0
 801540a:	2b00      	cmp	r3, #0
 801540c:	d001      	beq.n	8015412 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 801540e:	f000 f949 	bl	80156a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8015412:	bf00      	nop
 8015414:	bd80      	pop	{r7, pc}
 8015416:	bf00      	nop
 8015418:	20008604 	.word	0x20008604
 801541c:	40004800 	.word	0x40004800

08015420 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8015426:	2300      	movs	r3, #0
 8015428:	607b      	str	r3, [r7, #4]
 801542a:	4b10      	ldr	r3, [pc, #64]	; (801546c <MX_DMA_Init+0x4c>)
 801542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801542e:	4a0f      	ldr	r2, [pc, #60]	; (801546c <MX_DMA_Init+0x4c>)
 8015430:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015434:	6313      	str	r3, [r2, #48]	; 0x30
 8015436:	4b0d      	ldr	r3, [pc, #52]	; (801546c <MX_DMA_Init+0x4c>)
 8015438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801543a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801543e:	607b      	str	r3, [r7, #4]
 8015440:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8015442:	2200      	movs	r2, #0
 8015444:	2100      	movs	r1, #0
 8015446:	203b      	movs	r0, #59	; 0x3b
 8015448:	f7f1 f849 	bl	80064de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 801544c:	203b      	movs	r0, #59	; 0x3b
 801544e:	f7f1 f862 	bl	8006516 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8015452:	2200      	movs	r2, #0
 8015454:	2100      	movs	r1, #0
 8015456:	2045      	movs	r0, #69	; 0x45
 8015458:	f7f1 f841 	bl	80064de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 801545c:	2045      	movs	r0, #69	; 0x45
 801545e:	f7f1 f85a 	bl	8006516 <HAL_NVIC_EnableIRQ>

}
 8015462:	bf00      	nop
 8015464:	3708      	adds	r7, #8
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}
 801546a:	bf00      	nop
 801546c:	40023800 	.word	0x40023800

08015470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b08a      	sub	sp, #40	; 0x28
 8015474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015476:	f107 0314 	add.w	r3, r7, #20
 801547a:	2200      	movs	r2, #0
 801547c:	601a      	str	r2, [r3, #0]
 801547e:	605a      	str	r2, [r3, #4]
 8015480:	609a      	str	r2, [r3, #8]
 8015482:	60da      	str	r2, [r3, #12]
 8015484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8015486:	2300      	movs	r3, #0
 8015488:	613b      	str	r3, [r7, #16]
 801548a:	4b63      	ldr	r3, [pc, #396]	; (8015618 <MX_GPIO_Init+0x1a8>)
 801548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801548e:	4a62      	ldr	r2, [pc, #392]	; (8015618 <MX_GPIO_Init+0x1a8>)
 8015490:	f043 0304 	orr.w	r3, r3, #4
 8015494:	6313      	str	r3, [r2, #48]	; 0x30
 8015496:	4b60      	ldr	r3, [pc, #384]	; (8015618 <MX_GPIO_Init+0x1a8>)
 8015498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801549a:	f003 0304 	and.w	r3, r3, #4
 801549e:	613b      	str	r3, [r7, #16]
 80154a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80154a2:	2300      	movs	r3, #0
 80154a4:	60fb      	str	r3, [r7, #12]
 80154a6:	4b5c      	ldr	r3, [pc, #368]	; (8015618 <MX_GPIO_Init+0x1a8>)
 80154a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154aa:	4a5b      	ldr	r2, [pc, #364]	; (8015618 <MX_GPIO_Init+0x1a8>)
 80154ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154b0:	6313      	str	r3, [r2, #48]	; 0x30
 80154b2:	4b59      	ldr	r3, [pc, #356]	; (8015618 <MX_GPIO_Init+0x1a8>)
 80154b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80154ba:	60fb      	str	r3, [r7, #12]
 80154bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80154be:	2300      	movs	r3, #0
 80154c0:	60bb      	str	r3, [r7, #8]
 80154c2:	4b55      	ldr	r3, [pc, #340]	; (8015618 <MX_GPIO_Init+0x1a8>)
 80154c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154c6:	4a54      	ldr	r2, [pc, #336]	; (8015618 <MX_GPIO_Init+0x1a8>)
 80154c8:	f043 0301 	orr.w	r3, r3, #1
 80154cc:	6313      	str	r3, [r2, #48]	; 0x30
 80154ce:	4b52      	ldr	r3, [pc, #328]	; (8015618 <MX_GPIO_Init+0x1a8>)
 80154d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154d2:	f003 0301 	and.w	r3, r3, #1
 80154d6:	60bb      	str	r3, [r7, #8]
 80154d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80154da:	2300      	movs	r3, #0
 80154dc:	607b      	str	r3, [r7, #4]
 80154de:	4b4e      	ldr	r3, [pc, #312]	; (8015618 <MX_GPIO_Init+0x1a8>)
 80154e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154e2:	4a4d      	ldr	r2, [pc, #308]	; (8015618 <MX_GPIO_Init+0x1a8>)
 80154e4:	f043 0302 	orr.w	r3, r3, #2
 80154e8:	6313      	str	r3, [r2, #48]	; 0x30
 80154ea:	4b4b      	ldr	r3, [pc, #300]	; (8015618 <MX_GPIO_Init+0x1a8>)
 80154ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154ee:	f003 0302 	and.w	r3, r3, #2
 80154f2:	607b      	str	r3, [r7, #4]
 80154f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80154f6:	2300      	movs	r3, #0
 80154f8:	603b      	str	r3, [r7, #0]
 80154fa:	4b47      	ldr	r3, [pc, #284]	; (8015618 <MX_GPIO_Init+0x1a8>)
 80154fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154fe:	4a46      	ldr	r2, [pc, #280]	; (8015618 <MX_GPIO_Init+0x1a8>)
 8015500:	f043 0308 	orr.w	r3, r3, #8
 8015504:	6313      	str	r3, [r2, #48]	; 0x30
 8015506:	4b44      	ldr	r3, [pc, #272]	; (8015618 <MX_GPIO_Init+0x1a8>)
 8015508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801550a:	f003 0308 	and.w	r3, r3, #8
 801550e:	603b      	str	r3, [r7, #0]
 8015510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8015512:	2200      	movs	r2, #0
 8015514:	21ef      	movs	r1, #239	; 0xef
 8015516:	4841      	ldr	r0, [pc, #260]	; (801561c <MX_GPIO_Init+0x1ac>)
 8015518:	f7f1 fd62 	bl	8006fe0 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 801551c:	2200      	movs	r2, #0
 801551e:	2115      	movs	r1, #21
 8015520:	483f      	ldr	r0, [pc, #252]	; (8015620 <MX_GPIO_Init+0x1b0>)
 8015522:	f7f1 fd5d 	bl	8006fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 8015526:	2200      	movs	r2, #0
 8015528:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 801552c:	483d      	ldr	r0, [pc, #244]	; (8015624 <MX_GPIO_Init+0x1b4>)
 801552e:	f7f1 fd57 	bl	8006fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8015532:	23cf      	movs	r3, #207	; 0xcf
 8015534:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015536:	2301      	movs	r3, #1
 8015538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801553a:	2300      	movs	r3, #0
 801553c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801553e:	2300      	movs	r3, #0
 8015540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015542:	f107 0314 	add.w	r3, r7, #20
 8015546:	4619      	mov	r1, r3
 8015548:	4834      	ldr	r0, [pc, #208]	; (801561c <MX_GPIO_Init+0x1ac>)
 801554a:	f7f1 fb97 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 801554e:	2305      	movs	r3, #5
 8015550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015552:	2301      	movs	r3, #1
 8015554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8015556:	2302      	movs	r3, #2
 8015558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801555a:	2300      	movs	r3, #0
 801555c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801555e:	f107 0314 	add.w	r3, r7, #20
 8015562:	4619      	mov	r1, r3
 8015564:	482e      	ldr	r0, [pc, #184]	; (8015620 <MX_GPIO_Init+0x1b0>)
 8015566:	f7f1 fb89 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 801556a:	2310      	movs	r3, #16
 801556c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801556e:	2301      	movs	r3, #1
 8015570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015572:	2300      	movs	r3, #0
 8015574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015576:	2300      	movs	r3, #0
 8015578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 801557a:	f107 0314 	add.w	r3, r7, #20
 801557e:	4619      	mov	r1, r3
 8015580:	4827      	ldr	r0, [pc, #156]	; (8015620 <MX_GPIO_Init+0x1b0>)
 8015582:	f7f1 fb7b 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 8015586:	23c0      	movs	r3, #192	; 0xc0
 8015588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801558a:	4b27      	ldr	r3, [pc, #156]	; (8015628 <MX_GPIO_Init+0x1b8>)
 801558c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801558e:	2300      	movs	r3, #0
 8015590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015592:	f107 0314 	add.w	r3, r7, #20
 8015596:	4619      	mov	r1, r3
 8015598:	4821      	ldr	r0, [pc, #132]	; (8015620 <MX_GPIO_Init+0x1b0>)
 801559a:	f7f1 fb6f 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 801559e:	2320      	movs	r3, #32
 80155a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80155a2:	2301      	movs	r3, #1
 80155a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80155a6:	2302      	movs	r3, #2
 80155a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80155aa:	2300      	movs	r3, #0
 80155ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 80155ae:	f107 0314 	add.w	r3, r7, #20
 80155b2:	4619      	mov	r1, r3
 80155b4:	4819      	ldr	r0, [pc, #100]	; (801561c <MX_GPIO_Init+0x1ac>)
 80155b6:	f7f1 fb61 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 80155ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80155be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80155c0:	2301      	movs	r3, #1
 80155c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80155c4:	2300      	movs	r3, #0
 80155c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80155c8:	2300      	movs	r3, #0
 80155ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80155cc:	f107 0314 	add.w	r3, r7, #20
 80155d0:	4619      	mov	r1, r3
 80155d2:	4814      	ldr	r0, [pc, #80]	; (8015624 <MX_GPIO_Init+0x1b4>)
 80155d4:	f7f1 fb52 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 80155d8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80155dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80155de:	2300      	movs	r3, #0
 80155e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80155e2:	2301      	movs	r3, #1
 80155e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80155e6:	f107 0314 	add.w	r3, r7, #20
 80155ea:	4619      	mov	r1, r3
 80155ec:	480c      	ldr	r0, [pc, #48]	; (8015620 <MX_GPIO_Init+0x1b0>)
 80155ee:	f7f1 fb45 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 80155f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80155f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80155f8:	2301      	movs	r3, #1
 80155fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80155fc:	2302      	movs	r3, #2
 80155fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015600:	2300      	movs	r3, #0
 8015602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 8015604:	f107 0314 	add.w	r3, r7, #20
 8015608:	4619      	mov	r1, r3
 801560a:	4806      	ldr	r0, [pc, #24]	; (8015624 <MX_GPIO_Init+0x1b4>)
 801560c:	f7f1 fb36 	bl	8006c7c <HAL_GPIO_Init>

}
 8015610:	bf00      	nop
 8015612:	3728      	adds	r7, #40	; 0x28
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}
 8015618:	40023800 	.word	0x40023800
 801561c:	40020800 	.word	0x40020800
 8015620:	40020000 	.word	0x40020000
 8015624:	40020400 	.word	0x40020400
 8015628:	10110000 	.word	0x10110000

0801562c <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 801562c:	b480      	push	{r7}
 801562e:	af00      	add	r7, sp, #0
 8015630:	4b02      	ldr	r3, [pc, #8]	; (801563c <Get_I2C1_Instance+0x10>)
 8015632:	4618      	mov	r0, r3
 8015634:	46bd      	mov	sp, r7
 8015636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563a:	4770      	bx	lr
 801563c:	20008644 	.word	0x20008644

08015640 <Get_SPI1_Instance>:
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
 8015640:	b480      	push	{r7}
 8015642:	af00      	add	r7, sp, #0
 8015644:	4b02      	ldr	r3, [pc, #8]	; (8015650 <Get_SPI1_Instance+0x10>)
 8015646:	4618      	mov	r0, r3
 8015648:	46bd      	mov	sp, r7
 801564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564e:	4770      	bx	lr
 8015650:	2000881c 	.word	0x2000881c

08015654 <Get_UART3_Instance>:
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
 8015654:	b480      	push	{r7}
 8015656:	af00      	add	r7, sp, #0
 8015658:	4b02      	ldr	r3, [pc, #8]	; (8015664 <Get_UART3_Instance+0x10>)
 801565a:	4618      	mov	r0, r3
 801565c:	46bd      	mov	sp, r7
 801565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015662:	4770      	bx	lr
 8015664:	20008604 	.word	0x20008604

08015668 <Get_RTC_Instance>:
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
 8015668:	b480      	push	{r7}
 801566a:	af00      	add	r7, sp, #0
 801566c:	4b02      	ldr	r3, [pc, #8]	; (8015678 <Get_RTC_Instance+0x10>)
 801566e:	4618      	mov	r0, r3
 8015670:	46bd      	mov	sp, r7
 8015672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015676:	4770      	bx	lr
 8015678:	20008718 	.word	0x20008718

0801567c <Get_TIM3_Instance>:
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
 801567c:	b480      	push	{r7}
 801567e:	af00      	add	r7, sp, #0
 8015680:	4b02      	ldr	r3, [pc, #8]	; (801568c <Get_TIM3_Instance+0x10>)
 8015682:	4618      	mov	r0, r3
 8015684:	46bd      	mov	sp, r7
 8015686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568a:	4770      	bx	lr
 801568c:	200086d8 	.word	0x200086d8

08015690 <Get_TIM5_Instance>:
TIM_HandleTypeDef* Get_TIM5_Instance(void) { return &htim5; }
 8015690:	b480      	push	{r7}
 8015692:	af00      	add	r7, sp, #0
 8015694:	4b02      	ldr	r3, [pc, #8]	; (80156a0 <Get_TIM5_Instance+0x10>)
 8015696:	4618      	mov	r0, r3
 8015698:	46bd      	mov	sp, r7
 801569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569e:	4770      	bx	lr
 80156a0:	20008698 	.word	0x20008698

080156a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80156a4:	b480      	push	{r7}
 80156a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80156a8:	bf00      	nop
 80156aa:	46bd      	mov	sp, r7
 80156ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b0:	4770      	bx	lr

080156b2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80156b2:	b580      	push	{r7, lr}
 80156b4:	b084      	sub	sp, #16
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80156ba:	f7f0 fe07 	bl	80062cc <HAL_GetTick>
 80156be:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80156c0:	e006      	b.n	80156d0 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80156c2:	f7fd fcdb 	bl	801307c <BSP_SD_GetCardState>
 80156c6:	4603      	mov	r3, r0
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d101      	bne.n	80156d0 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80156cc:	2300      	movs	r3, #0
 80156ce:	e009      	b.n	80156e4 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80156d0:	f7f0 fdfc 	bl	80062cc <HAL_GetTick>
 80156d4:	4602      	mov	r2, r0
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	1ad3      	subs	r3, r2, r3
 80156da:	687a      	ldr	r2, [r7, #4]
 80156dc:	429a      	cmp	r2, r3
 80156de:	d8f0      	bhi.n	80156c2 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80156e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	3710      	adds	r7, #16
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}

080156ec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	4603      	mov	r3, r0
 80156f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80156f6:	4b0b      	ldr	r3, [pc, #44]	; (8015724 <SD_CheckStatus+0x38>)
 80156f8:	2201      	movs	r2, #1
 80156fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80156fc:	f7fd fcbe 	bl	801307c <BSP_SD_GetCardState>
 8015700:	4603      	mov	r3, r0
 8015702:	2b00      	cmp	r3, #0
 8015704:	d107      	bne.n	8015716 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8015706:	4b07      	ldr	r3, [pc, #28]	; (8015724 <SD_CheckStatus+0x38>)
 8015708:	781b      	ldrb	r3, [r3, #0]
 801570a:	b2db      	uxtb	r3, r3
 801570c:	f023 0301 	bic.w	r3, r3, #1
 8015710:	b2da      	uxtb	r2, r3
 8015712:	4b04      	ldr	r3, [pc, #16]	; (8015724 <SD_CheckStatus+0x38>)
 8015714:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8015716:	4b03      	ldr	r3, [pc, #12]	; (8015724 <SD_CheckStatus+0x38>)
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	b2db      	uxtb	r3, r3
}
 801571c:	4618      	mov	r0, r3
 801571e:	3708      	adds	r7, #8
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	20000130 	.word	0x20000130

08015728 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
 801572e:	4603      	mov	r3, r0
 8015730:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015732:	f7fd fc49 	bl	8012fc8 <BSP_SD_Init>
 8015736:	4603      	mov	r3, r0
 8015738:	2b00      	cmp	r3, #0
 801573a:	d107      	bne.n	801574c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801573c:	79fb      	ldrb	r3, [r7, #7]
 801573e:	4618      	mov	r0, r3
 8015740:	f7ff ffd4 	bl	80156ec <SD_CheckStatus>
 8015744:	4603      	mov	r3, r0
 8015746:	461a      	mov	r2, r3
 8015748:	4b04      	ldr	r3, [pc, #16]	; (801575c <SD_initialize+0x34>)
 801574a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 801574c:	4b03      	ldr	r3, [pc, #12]	; (801575c <SD_initialize+0x34>)
 801574e:	781b      	ldrb	r3, [r3, #0]
 8015750:	b2db      	uxtb	r3, r3
}
 8015752:	4618      	mov	r0, r3
 8015754:	3708      	adds	r7, #8
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}
 801575a:	bf00      	nop
 801575c:	20000130 	.word	0x20000130

08015760 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b082      	sub	sp, #8
 8015764:	af00      	add	r7, sp, #0
 8015766:	4603      	mov	r3, r0
 8015768:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801576a:	79fb      	ldrb	r3, [r7, #7]
 801576c:	4618      	mov	r0, r3
 801576e:	f7ff ffbd 	bl	80156ec <SD_CheckStatus>
 8015772:	4603      	mov	r3, r0
}
 8015774:	4618      	mov	r0, r3
 8015776:	3708      	adds	r7, #8
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}

0801577c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b088      	sub	sp, #32
 8015780:	af00      	add	r7, sp, #0
 8015782:	60b9      	str	r1, [r7, #8]
 8015784:	607a      	str	r2, [r7, #4]
 8015786:	603b      	str	r3, [r7, #0]
 8015788:	4603      	mov	r3, r0
 801578a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801578c:	2301      	movs	r3, #1
 801578e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015790:	f247 5030 	movw	r0, #30000	; 0x7530
 8015794:	f7ff ff8d 	bl	80156b2 <SD_CheckStatusWithTimeout>
 8015798:	4603      	mov	r3, r0
 801579a:	2b00      	cmp	r3, #0
 801579c:	da01      	bge.n	80157a2 <SD_read+0x26>
  {
    return res;
 801579e:	7ffb      	ldrb	r3, [r7, #31]
 80157a0:	e08b      	b.n	80158ba <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	f003 0303 	and.w	r3, r3, #3
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	f040 8085 	bne.w	80158b8 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80157ae:	683a      	ldr	r2, [r7, #0]
 80157b0:	6879      	ldr	r1, [r7, #4]
 80157b2:	68b8      	ldr	r0, [r7, #8]
 80157b4:	f7fd fc2e 	bl	8013014 <BSP_SD_ReadBlocks_DMA>
 80157b8:	4603      	mov	r3, r0
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d133      	bne.n	8015826 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80157be:	4b41      	ldr	r3, [pc, #260]	; (80158c4 <SD_read+0x148>)
 80157c0:	2200      	movs	r2, #0
 80157c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80157c4:	f7f0 fd82 	bl	80062cc <HAL_GetTick>
 80157c8:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80157ca:	bf00      	nop
 80157cc:	4b3d      	ldr	r3, [pc, #244]	; (80158c4 <SD_read+0x148>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d108      	bne.n	80157e6 <SD_read+0x6a>
 80157d4:	f7f0 fd7a 	bl	80062cc <HAL_GetTick>
 80157d8:	4602      	mov	r2, r0
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	1ad3      	subs	r3, r2, r3
 80157de:	f247 522f 	movw	r2, #29999	; 0x752f
 80157e2:	4293      	cmp	r3, r2
 80157e4:	d9f2      	bls.n	80157cc <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80157e6:	4b37      	ldr	r3, [pc, #220]	; (80158c4 <SD_read+0x148>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d102      	bne.n	80157f4 <SD_read+0x78>
      {
        res = RES_ERROR;
 80157ee:	2301      	movs	r3, #1
 80157f0:	77fb      	strb	r3, [r7, #31]
 80157f2:	e061      	b.n	80158b8 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 80157f4:	4b33      	ldr	r3, [pc, #204]	; (80158c4 <SD_read+0x148>)
 80157f6:	2200      	movs	r2, #0
 80157f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80157fa:	f7f0 fd67 	bl	80062cc <HAL_GetTick>
 80157fe:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015800:	e007      	b.n	8015812 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015802:	f7fd fc3b 	bl	801307c <BSP_SD_GetCardState>
 8015806:	4603      	mov	r3, r0
 8015808:	2b00      	cmp	r3, #0
 801580a:	d102      	bne.n	8015812 <SD_read+0x96>
          {
            res = RES_OK;
 801580c:	2300      	movs	r3, #0
 801580e:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015810:	e052      	b.n	80158b8 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015812:	f7f0 fd5b 	bl	80062cc <HAL_GetTick>
 8015816:	4602      	mov	r2, r0
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	1ad3      	subs	r3, r2, r3
 801581c:	f247 522f 	movw	r2, #29999	; 0x752f
 8015820:	4293      	cmp	r3, r2
 8015822:	d9ee      	bls.n	8015802 <SD_read+0x86>
 8015824:	e048      	b.n	80158b8 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8015826:	2300      	movs	r3, #0
 8015828:	61bb      	str	r3, [r7, #24]
 801582a:	e034      	b.n	8015896 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	1c5a      	adds	r2, r3, #1
 8015830:	607a      	str	r2, [r7, #4]
 8015832:	2201      	movs	r2, #1
 8015834:	4619      	mov	r1, r3
 8015836:	4824      	ldr	r0, [pc, #144]	; (80158c8 <SD_read+0x14c>)
 8015838:	f7fd fbec 	bl	8013014 <BSP_SD_ReadBlocks_DMA>
 801583c:	4603      	mov	r3, r0
 801583e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015840:	7fbb      	ldrb	r3, [r7, #30]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d12c      	bne.n	80158a0 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8015846:	4b1f      	ldr	r3, [pc, #124]	; (80158c4 <SD_read+0x148>)
 8015848:	2200      	movs	r2, #0
 801584a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 801584c:	f7f0 fd3e 	bl	80062cc <HAL_GetTick>
 8015850:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015852:	bf00      	nop
 8015854:	4b1b      	ldr	r3, [pc, #108]	; (80158c4 <SD_read+0x148>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d108      	bne.n	801586e <SD_read+0xf2>
 801585c:	f7f0 fd36 	bl	80062cc <HAL_GetTick>
 8015860:	4602      	mov	r2, r0
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	1ad3      	subs	r3, r2, r3
 8015866:	f247 522f 	movw	r2, #29999	; 0x752f
 801586a:	4293      	cmp	r3, r2
 801586c:	d9f2      	bls.n	8015854 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 801586e:	4b15      	ldr	r3, [pc, #84]	; (80158c4 <SD_read+0x148>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d016      	beq.n	80158a4 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	4a13      	ldr	r2, [pc, #76]	; (80158c8 <SD_read+0x14c>)
 801587a:	4618      	mov	r0, r3
 801587c:	4611      	mov	r1, r2
 801587e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015882:	461a      	mov	r2, r3
 8015884:	f001 fa4e 	bl	8016d24 <memcpy>
          buff += BLOCKSIZE;
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801588e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8015890:	69bb      	ldr	r3, [r7, #24]
 8015892:	3301      	adds	r3, #1
 8015894:	61bb      	str	r3, [r7, #24]
 8015896:	69bb      	ldr	r3, [r7, #24]
 8015898:	683a      	ldr	r2, [r7, #0]
 801589a:	429a      	cmp	r2, r3
 801589c:	d8c6      	bhi.n	801582c <SD_read+0xb0>
 801589e:	e002      	b.n	80158a6 <SD_read+0x12a>
        }
        else
        {
          break;
 80158a0:	bf00      	nop
 80158a2:	e000      	b.n	80158a6 <SD_read+0x12a>
            break;
 80158a4:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 80158a6:	69bb      	ldr	r3, [r7, #24]
 80158a8:	683a      	ldr	r2, [r7, #0]
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d104      	bne.n	80158b8 <SD_read+0x13c>
 80158ae:	7fbb      	ldrb	r3, [r7, #30]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d101      	bne.n	80158b8 <SD_read+0x13c>
        res = RES_OK;
 80158b4:	2300      	movs	r3, #0
 80158b6:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 80158b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80158ba:	4618      	mov	r0, r3
 80158bc:	3720      	adds	r7, #32
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}
 80158c2:	bf00      	nop
 80158c4:	200009ec 	.word	0x200009ec
 80158c8:	200007e8 	.word	0x200007e8

080158cc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b088      	sub	sp, #32
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	60b9      	str	r1, [r7, #8]
 80158d4:	607a      	str	r2, [r7, #4]
 80158d6:	603b      	str	r3, [r7, #0]
 80158d8:	4603      	mov	r3, r0
 80158da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80158dc:	2301      	movs	r3, #1
 80158de:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 80158e0:	4b4c      	ldr	r3, [pc, #304]	; (8015a14 <SD_write+0x148>)
 80158e2:	2200      	movs	r2, #0
 80158e4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80158e6:	f247 5030 	movw	r0, #30000	; 0x7530
 80158ea:	f7ff fee2 	bl	80156b2 <SD_CheckStatusWithTimeout>
 80158ee:	4603      	mov	r3, r0
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	da01      	bge.n	80158f8 <SD_write+0x2c>
  {
    return res;
 80158f4:	7ffb      	ldrb	r3, [r7, #31]
 80158f6:	e088      	b.n	8015a0a <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	f003 0303 	and.w	r3, r3, #3
 80158fe:	2b00      	cmp	r3, #0
 8015900:	f040 8082 	bne.w	8015a08 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015904:	683a      	ldr	r2, [r7, #0]
 8015906:	6879      	ldr	r1, [r7, #4]
 8015908:	68b8      	ldr	r0, [r7, #8]
 801590a:	f7fd fb9d 	bl	8013048 <BSP_SD_WriteBlocks_DMA>
 801590e:	4603      	mov	r3, r0
 8015910:	2b00      	cmp	r3, #0
 8015912:	d130      	bne.n	8015976 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8015914:	f7f0 fcda 	bl	80062cc <HAL_GetTick>
 8015918:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801591a:	bf00      	nop
 801591c:	4b3d      	ldr	r3, [pc, #244]	; (8015a14 <SD_write+0x148>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d108      	bne.n	8015936 <SD_write+0x6a>
 8015924:	f7f0 fcd2 	bl	80062cc <HAL_GetTick>
 8015928:	4602      	mov	r2, r0
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	1ad3      	subs	r3, r2, r3
 801592e:	f247 522f 	movw	r2, #29999	; 0x752f
 8015932:	4293      	cmp	r3, r2
 8015934:	d9f2      	bls.n	801591c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8015936:	4b37      	ldr	r3, [pc, #220]	; (8015a14 <SD_write+0x148>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d102      	bne.n	8015944 <SD_write+0x78>
      {
        res = RES_ERROR;
 801593e:	2301      	movs	r3, #1
 8015940:	77fb      	strb	r3, [r7, #31]
 8015942:	e061      	b.n	8015a08 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8015944:	4b33      	ldr	r3, [pc, #204]	; (8015a14 <SD_write+0x148>)
 8015946:	2200      	movs	r2, #0
 8015948:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801594a:	f7f0 fcbf 	bl	80062cc <HAL_GetTick>
 801594e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015950:	e007      	b.n	8015962 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015952:	f7fd fb93 	bl	801307c <BSP_SD_GetCardState>
 8015956:	4603      	mov	r3, r0
 8015958:	2b00      	cmp	r3, #0
 801595a:	d102      	bne.n	8015962 <SD_write+0x96>
          {
            res = RES_OK;
 801595c:	2300      	movs	r3, #0
 801595e:	77fb      	strb	r3, [r7, #31]
            break;
 8015960:	e052      	b.n	8015a08 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015962:	f7f0 fcb3 	bl	80062cc <HAL_GetTick>
 8015966:	4602      	mov	r2, r0
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	1ad3      	subs	r3, r2, r3
 801596c:	f247 522f 	movw	r2, #29999	; 0x752f
 8015970:	4293      	cmp	r3, r2
 8015972:	d9ee      	bls.n	8015952 <SD_write+0x86>
 8015974:	e048      	b.n	8015a08 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8015976:	2300      	movs	r3, #0
 8015978:	61bb      	str	r3, [r7, #24]
 801597a:	e034      	b.n	80159e6 <SD_write+0x11a>
      {
        WriteStatus = 0;
 801597c:	4b25      	ldr	r3, [pc, #148]	; (8015a14 <SD_write+0x148>)
 801597e:	2200      	movs	r2, #0
 8015980:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	1c5a      	adds	r2, r3, #1
 8015986:	607a      	str	r2, [r7, #4]
 8015988:	2201      	movs	r2, #1
 801598a:	4619      	mov	r1, r3
 801598c:	4822      	ldr	r0, [pc, #136]	; (8015a18 <SD_write+0x14c>)
 801598e:	f7fd fb5b 	bl	8013048 <BSP_SD_WriteBlocks_DMA>
 8015992:	4603      	mov	r3, r0
 8015994:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015996:	7fbb      	ldrb	r3, [r7, #30]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d129      	bne.n	80159f0 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 801599c:	f7f0 fc96 	bl	80062cc <HAL_GetTick>
 80159a0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80159a2:	bf00      	nop
 80159a4:	4b1b      	ldr	r3, [pc, #108]	; (8015a14 <SD_write+0x148>)
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d108      	bne.n	80159be <SD_write+0xf2>
 80159ac:	f7f0 fc8e 	bl	80062cc <HAL_GetTick>
 80159b0:	4602      	mov	r2, r0
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	1ad3      	subs	r3, r2, r3
 80159b6:	f247 522f 	movw	r2, #29999	; 0x752f
 80159ba:	4293      	cmp	r3, r2
 80159bc:	d9f2      	bls.n	80159a4 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 80159be:	4b15      	ldr	r3, [pc, #84]	; (8015a14 <SD_write+0x148>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d016      	beq.n	80159f4 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 80159c6:	68bb      	ldr	r3, [r7, #8]
 80159c8:	4a13      	ldr	r2, [pc, #76]	; (8015a18 <SD_write+0x14c>)
 80159ca:	4618      	mov	r0, r3
 80159cc:	4611      	mov	r1, r2
 80159ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80159d2:	461a      	mov	r2, r3
 80159d4:	f001 f9a6 	bl	8016d24 <memcpy>
          buff += BLOCKSIZE;
 80159d8:	68bb      	ldr	r3, [r7, #8]
 80159da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80159de:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 80159e0:	69bb      	ldr	r3, [r7, #24]
 80159e2:	3301      	adds	r3, #1
 80159e4:	61bb      	str	r3, [r7, #24]
 80159e6:	69bb      	ldr	r3, [r7, #24]
 80159e8:	683a      	ldr	r2, [r7, #0]
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d8c6      	bhi.n	801597c <SD_write+0xb0>
 80159ee:	e002      	b.n	80159f6 <SD_write+0x12a>
        }
        else
        {
          break;
 80159f0:	bf00      	nop
 80159f2:	e000      	b.n	80159f6 <SD_write+0x12a>
            break;
 80159f4:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 80159f6:	69bb      	ldr	r3, [r7, #24]
 80159f8:	683a      	ldr	r2, [r7, #0]
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d104      	bne.n	8015a08 <SD_write+0x13c>
 80159fe:	7fbb      	ldrb	r3, [r7, #30]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d101      	bne.n	8015a08 <SD_write+0x13c>
        res = RES_OK;
 8015a04:	2300      	movs	r3, #0
 8015a06:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8015a08:	7ffb      	ldrb	r3, [r7, #31]
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3720      	adds	r7, #32
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
 8015a12:	bf00      	nop
 8015a14:	200009e8 	.word	0x200009e8
 8015a18:	200007e8 	.word	0x200007e8

08015a1c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b08c      	sub	sp, #48	; 0x30
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	4603      	mov	r3, r0
 8015a24:	603a      	str	r2, [r7, #0]
 8015a26:	71fb      	strb	r3, [r7, #7]
 8015a28:	460b      	mov	r3, r1
 8015a2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015a32:	4b25      	ldr	r3, [pc, #148]	; (8015ac8 <SD_ioctl+0xac>)
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	b2db      	uxtb	r3, r3
 8015a38:	f003 0301 	and.w	r3, r3, #1
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d001      	beq.n	8015a44 <SD_ioctl+0x28>
 8015a40:	2303      	movs	r3, #3
 8015a42:	e03c      	b.n	8015abe <SD_ioctl+0xa2>

  switch (cmd)
 8015a44:	79bb      	ldrb	r3, [r7, #6]
 8015a46:	2b03      	cmp	r3, #3
 8015a48:	d834      	bhi.n	8015ab4 <SD_ioctl+0x98>
 8015a4a:	a201      	add	r2, pc, #4	; (adr r2, 8015a50 <SD_ioctl+0x34>)
 8015a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a50:	08015a61 	.word	0x08015a61
 8015a54:	08015a69 	.word	0x08015a69
 8015a58:	08015a81 	.word	0x08015a81
 8015a5c:	08015a9b 	.word	0x08015a9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015a60:	2300      	movs	r3, #0
 8015a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015a66:	e028      	b.n	8015aba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015a68:	f107 030c 	add.w	r3, r7, #12
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7fd fb15 	bl	801309c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a74:	683b      	ldr	r3, [r7, #0]
 8015a76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015a7e:	e01c      	b.n	8015aba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015a80:	f107 030c 	add.w	r3, r7, #12
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7fd fb09 	bl	801309c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a8c:	b29a      	uxth	r2, r3
 8015a8e:	683b      	ldr	r3, [r7, #0]
 8015a90:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015a92:	2300      	movs	r3, #0
 8015a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015a98:	e00f      	b.n	8015aba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015a9a:	f107 030c 	add.w	r3, r7, #12
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f7fd fafc 	bl	801309c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aa6:	0a5a      	lsrs	r2, r3, #9
 8015aa8:	683b      	ldr	r3, [r7, #0]
 8015aaa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015aac:	2300      	movs	r3, #0
 8015aae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015ab2:	e002      	b.n	8015aba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015ab4:	2304      	movs	r3, #4
 8015ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8015aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3730      	adds	r7, #48	; 0x30
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	20000130 	.word	0x20000130

08015acc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015acc:	b480      	push	{r7}
 8015ace:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8015ad0:	4b03      	ldr	r3, [pc, #12]	; (8015ae0 <BSP_SD_WriteCpltCallback+0x14>)
 8015ad2:	2201      	movs	r2, #1
 8015ad4:	601a      	str	r2, [r3, #0]
}
 8015ad6:	bf00      	nop
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ade:	4770      	bx	lr
 8015ae0:	200009e8 	.word	0x200009e8

08015ae4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015ae4:	b480      	push	{r7}
 8015ae6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015ae8:	4b03      	ldr	r3, [pc, #12]	; (8015af8 <BSP_SD_ReadCpltCallback+0x14>)
 8015aea:	2201      	movs	r2, #1
 8015aec:	601a      	str	r2, [r3, #0]
}
 8015aee:	bf00      	nop
 8015af0:	46bd      	mov	sp, r7
 8015af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af6:	4770      	bx	lr
 8015af8:	200009ec 	.word	0x200009ec

08015afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015afc:	b480      	push	{r7}
 8015afe:	b083      	sub	sp, #12
 8015b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015b02:	2300      	movs	r3, #0
 8015b04:	607b      	str	r3, [r7, #4]
 8015b06:	4b10      	ldr	r3, [pc, #64]	; (8015b48 <HAL_MspInit+0x4c>)
 8015b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b0a:	4a0f      	ldr	r2, [pc, #60]	; (8015b48 <HAL_MspInit+0x4c>)
 8015b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015b10:	6453      	str	r3, [r2, #68]	; 0x44
 8015b12:	4b0d      	ldr	r3, [pc, #52]	; (8015b48 <HAL_MspInit+0x4c>)
 8015b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015b1a:	607b      	str	r3, [r7, #4]
 8015b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015b1e:	2300      	movs	r3, #0
 8015b20:	603b      	str	r3, [r7, #0]
 8015b22:	4b09      	ldr	r3, [pc, #36]	; (8015b48 <HAL_MspInit+0x4c>)
 8015b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b26:	4a08      	ldr	r2, [pc, #32]	; (8015b48 <HAL_MspInit+0x4c>)
 8015b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8015b2e:	4b06      	ldr	r3, [pc, #24]	; (8015b48 <HAL_MspInit+0x4c>)
 8015b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015b36:	603b      	str	r3, [r7, #0]
 8015b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015b3a:	bf00      	nop
 8015b3c:	370c      	adds	r7, #12
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b44:	4770      	bx	lr
 8015b46:	bf00      	nop
 8015b48:	40023800 	.word	0x40023800

08015b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b08a      	sub	sp, #40	; 0x28
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015b54:	f107 0314 	add.w	r3, r7, #20
 8015b58:	2200      	movs	r2, #0
 8015b5a:	601a      	str	r2, [r3, #0]
 8015b5c:	605a      	str	r2, [r3, #4]
 8015b5e:	609a      	str	r2, [r3, #8]
 8015b60:	60da      	str	r2, [r3, #12]
 8015b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	4a19      	ldr	r2, [pc, #100]	; (8015bd0 <HAL_I2C_MspInit+0x84>)
 8015b6a:	4293      	cmp	r3, r2
 8015b6c:	d12b      	bne.n	8015bc6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015b6e:	2300      	movs	r3, #0
 8015b70:	613b      	str	r3, [r7, #16]
 8015b72:	4b18      	ldr	r3, [pc, #96]	; (8015bd4 <HAL_I2C_MspInit+0x88>)
 8015b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b76:	4a17      	ldr	r2, [pc, #92]	; (8015bd4 <HAL_I2C_MspInit+0x88>)
 8015b78:	f043 0302 	orr.w	r3, r3, #2
 8015b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8015b7e:	4b15      	ldr	r3, [pc, #84]	; (8015bd4 <HAL_I2C_MspInit+0x88>)
 8015b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b82:	f003 0302 	and.w	r3, r3, #2
 8015b86:	613b      	str	r3, [r7, #16]
 8015b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8015b8a:	23c0      	movs	r3, #192	; 0xc0
 8015b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015b8e:	2312      	movs	r3, #18
 8015b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b92:	2300      	movs	r3, #0
 8015b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015b96:	2303      	movs	r3, #3
 8015b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015b9a:	2304      	movs	r3, #4
 8015b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015b9e:	f107 0314 	add.w	r3, r7, #20
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	480c      	ldr	r0, [pc, #48]	; (8015bd8 <HAL_I2C_MspInit+0x8c>)
 8015ba6:	f7f1 f869 	bl	8006c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015baa:	2300      	movs	r3, #0
 8015bac:	60fb      	str	r3, [r7, #12]
 8015bae:	4b09      	ldr	r3, [pc, #36]	; (8015bd4 <HAL_I2C_MspInit+0x88>)
 8015bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bb2:	4a08      	ldr	r2, [pc, #32]	; (8015bd4 <HAL_I2C_MspInit+0x88>)
 8015bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8015bba:	4b06      	ldr	r3, [pc, #24]	; (8015bd4 <HAL_I2C_MspInit+0x88>)
 8015bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015bc2:	60fb      	str	r3, [r7, #12]
 8015bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8015bc6:	bf00      	nop
 8015bc8:	3728      	adds	r7, #40	; 0x28
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bd80      	pop	{r7, pc}
 8015bce:	bf00      	nop
 8015bd0:	40005400 	.word	0x40005400
 8015bd4:	40023800 	.word	0x40023800
 8015bd8:	40020400 	.word	0x40020400

08015bdc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8015bdc:	b480      	push	{r7}
 8015bde:	b083      	sub	sp, #12
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	4a05      	ldr	r2, [pc, #20]	; (8015c00 <HAL_RTC_MspInit+0x24>)
 8015bea:	4293      	cmp	r3, r2
 8015bec:	d102      	bne.n	8015bf4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8015bee:	4b05      	ldr	r3, [pc, #20]	; (8015c04 <HAL_RTC_MspInit+0x28>)
 8015bf0:	2201      	movs	r2, #1
 8015bf2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8015bf4:	bf00      	nop
 8015bf6:	370c      	adds	r7, #12
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfe:	4770      	bx	lr
 8015c00:	40002800 	.word	0x40002800
 8015c04:	42470e3c 	.word	0x42470e3c

08015c08 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b08a      	sub	sp, #40	; 0x28
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015c10:	f107 0314 	add.w	r3, r7, #20
 8015c14:	2200      	movs	r2, #0
 8015c16:	601a      	str	r2, [r3, #0]
 8015c18:	605a      	str	r2, [r3, #4]
 8015c1a:	609a      	str	r2, [r3, #8]
 8015c1c:	60da      	str	r2, [r3, #12]
 8015c1e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	4a70      	ldr	r2, [pc, #448]	; (8015de8 <HAL_SD_MspInit+0x1e0>)
 8015c26:	4293      	cmp	r3, r2
 8015c28:	f040 80da 	bne.w	8015de0 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	613b      	str	r3, [r7, #16]
 8015c30:	4b6e      	ldr	r3, [pc, #440]	; (8015dec <HAL_SD_MspInit+0x1e4>)
 8015c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c34:	4a6d      	ldr	r2, [pc, #436]	; (8015dec <HAL_SD_MspInit+0x1e4>)
 8015c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015c3a:	6453      	str	r3, [r2, #68]	; 0x44
 8015c3c:	4b6b      	ldr	r3, [pc, #428]	; (8015dec <HAL_SD_MspInit+0x1e4>)
 8015c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015c44:	613b      	str	r3, [r7, #16]
 8015c46:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015c48:	2300      	movs	r3, #0
 8015c4a:	60fb      	str	r3, [r7, #12]
 8015c4c:	4b67      	ldr	r3, [pc, #412]	; (8015dec <HAL_SD_MspInit+0x1e4>)
 8015c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c50:	4a66      	ldr	r2, [pc, #408]	; (8015dec <HAL_SD_MspInit+0x1e4>)
 8015c52:	f043 0304 	orr.w	r3, r3, #4
 8015c56:	6313      	str	r3, [r2, #48]	; 0x30
 8015c58:	4b64      	ldr	r3, [pc, #400]	; (8015dec <HAL_SD_MspInit+0x1e4>)
 8015c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c5c:	f003 0304 	and.w	r3, r3, #4
 8015c60:	60fb      	str	r3, [r7, #12]
 8015c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8015c64:	2300      	movs	r3, #0
 8015c66:	60bb      	str	r3, [r7, #8]
 8015c68:	4b60      	ldr	r3, [pc, #384]	; (8015dec <HAL_SD_MspInit+0x1e4>)
 8015c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c6c:	4a5f      	ldr	r2, [pc, #380]	; (8015dec <HAL_SD_MspInit+0x1e4>)
 8015c6e:	f043 0308 	orr.w	r3, r3, #8
 8015c72:	6313      	str	r3, [r2, #48]	; 0x30
 8015c74:	4b5d      	ldr	r3, [pc, #372]	; (8015dec <HAL_SD_MspInit+0x1e4>)
 8015c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c78:	f003 0308 	and.w	r3, r3, #8
 8015c7c:	60bb      	str	r3, [r7, #8]
 8015c7e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8015c80:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8015c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c86:	2302      	movs	r3, #2
 8015c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015c8a:	2301      	movs	r3, #1
 8015c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c8e:	2303      	movs	r3, #3
 8015c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8015c92:	230c      	movs	r3, #12
 8015c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015c96:	f107 0314 	add.w	r3, r7, #20
 8015c9a:	4619      	mov	r1, r3
 8015c9c:	4854      	ldr	r0, [pc, #336]	; (8015df0 <HAL_SD_MspInit+0x1e8>)
 8015c9e:	f7f0 ffed 	bl	8006c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015ca2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ca8:	2302      	movs	r3, #2
 8015caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cac:	2300      	movs	r3, #0
 8015cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015cb0:	2303      	movs	r3, #3
 8015cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8015cb4:	230c      	movs	r3, #12
 8015cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015cb8:	f107 0314 	add.w	r3, r7, #20
 8015cbc:	4619      	mov	r1, r3
 8015cbe:	484c      	ldr	r0, [pc, #304]	; (8015df0 <HAL_SD_MspInit+0x1e8>)
 8015cc0:	f7f0 ffdc 	bl	8006c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8015cc4:	2304      	movs	r3, #4
 8015cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cc8:	2302      	movs	r3, #2
 8015cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015ccc:	2301      	movs	r3, #1
 8015cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015cd0:	2303      	movs	r3, #3
 8015cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8015cd4:	230c      	movs	r3, #12
 8015cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015cd8:	f107 0314 	add.w	r3, r7, #20
 8015cdc:	4619      	mov	r1, r3
 8015cde:	4845      	ldr	r0, [pc, #276]	; (8015df4 <HAL_SD_MspInit+0x1ec>)
 8015ce0:	f7f0 ffcc 	bl	8006c7c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8015ce4:	4b44      	ldr	r3, [pc, #272]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015ce6:	4a45      	ldr	r2, [pc, #276]	; (8015dfc <HAL_SD_MspInit+0x1f4>)
 8015ce8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8015cea:	4b43      	ldr	r3, [pc, #268]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015cec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015cf0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015cf2:	4b41      	ldr	r3, [pc, #260]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015cf8:	4b3f      	ldr	r3, [pc, #252]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015cfe:	4b3e      	ldr	r3, [pc, #248]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015d04:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8015d06:	4b3c      	ldr	r3, [pc, #240]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015d0c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8015d0e:	4b3a      	ldr	r3, [pc, #232]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015d14:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8015d16:	4b38      	ldr	r3, [pc, #224]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d18:	2220      	movs	r2, #32
 8015d1a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015d1c:	4b36      	ldr	r3, [pc, #216]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d1e:	2200      	movs	r2, #0
 8015d20:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8015d22:	4b35      	ldr	r3, [pc, #212]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d24:	2204      	movs	r2, #4
 8015d26:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8015d28:	4b33      	ldr	r3, [pc, #204]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d2a:	2203      	movs	r2, #3
 8015d2c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8015d2e:	4b32      	ldr	r3, [pc, #200]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8015d34:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8015d36:	4b30      	ldr	r3, [pc, #192]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015d3c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8015d3e:	482e      	ldr	r0, [pc, #184]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d40:	f7f0 fc04 	bl	800654c <HAL_DMA_Init>
 8015d44:	4603      	mov	r3, r0
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d001      	beq.n	8015d4e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8015d4a:	f7ff fcab 	bl	80156a4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	4a29      	ldr	r2, [pc, #164]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d52:	63da      	str	r2, [r3, #60]	; 0x3c
 8015d54:	4a28      	ldr	r2, [pc, #160]	; (8015df8 <HAL_SD_MspInit+0x1f0>)
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8015d5a:	4b29      	ldr	r3, [pc, #164]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015d5c:	4a29      	ldr	r2, [pc, #164]	; (8015e04 <HAL_SD_MspInit+0x1fc>)
 8015d5e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8015d60:	4b27      	ldr	r3, [pc, #156]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015d66:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8015d68:	4b25      	ldr	r3, [pc, #148]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015d6a:	2240      	movs	r2, #64	; 0x40
 8015d6c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015d6e:	4b24      	ldr	r3, [pc, #144]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015d70:	2200      	movs	r2, #0
 8015d72:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8015d74:	4b22      	ldr	r3, [pc, #136]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015d7a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8015d7c:	4b20      	ldr	r3, [pc, #128]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015d7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015d82:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8015d84:	4b1e      	ldr	r3, [pc, #120]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015d86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015d8a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8015d8c:	4b1c      	ldr	r3, [pc, #112]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015d8e:	2220      	movs	r2, #32
 8015d90:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8015d92:	4b1b      	ldr	r3, [pc, #108]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015d94:	2200      	movs	r2, #0
 8015d96:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8015d98:	4b19      	ldr	r3, [pc, #100]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015d9a:	2204      	movs	r2, #4
 8015d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8015d9e:	4b18      	ldr	r3, [pc, #96]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015da0:	2203      	movs	r2, #3
 8015da2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8015da4:	4b16      	ldr	r3, [pc, #88]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015da6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8015daa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8015dac:	4b14      	ldr	r3, [pc, #80]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015dae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015db2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8015db4:	4812      	ldr	r0, [pc, #72]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015db6:	f7f0 fbc9 	bl	800654c <HAL_DMA_Init>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d001      	beq.n	8015dc4 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8015dc0:	f7ff fc70 	bl	80156a4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	4a0e      	ldr	r2, [pc, #56]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8015dca:	4a0d      	ldr	r2, [pc, #52]	; (8015e00 <HAL_SD_MspInit+0x1f8>)
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8015dd0:	2200      	movs	r2, #0
 8015dd2:	2100      	movs	r1, #0
 8015dd4:	2031      	movs	r0, #49	; 0x31
 8015dd6:	f7f0 fb82 	bl	80064de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8015dda:	2031      	movs	r0, #49	; 0x31
 8015ddc:	f7f0 fb9b 	bl	8006516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8015de0:	bf00      	nop
 8015de2:	3728      	adds	r7, #40	; 0x28
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}
 8015de8:	40012c00 	.word	0x40012c00
 8015dec:	40023800 	.word	0x40023800
 8015df0:	40020800 	.word	0x40020800
 8015df4:	40020c00 	.word	0x40020c00
 8015df8:	200085a4 	.word	0x200085a4
 8015dfc:	40026458 	.word	0x40026458
 8015e00:	20008738 	.word	0x20008738
 8015e04:	400264a0 	.word	0x400264a0

08015e08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b08a      	sub	sp, #40	; 0x28
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015e10:	f107 0314 	add.w	r3, r7, #20
 8015e14:	2200      	movs	r2, #0
 8015e16:	601a      	str	r2, [r3, #0]
 8015e18:	605a      	str	r2, [r3, #4]
 8015e1a:	609a      	str	r2, [r3, #8]
 8015e1c:	60da      	str	r2, [r3, #12]
 8015e1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	4a19      	ldr	r2, [pc, #100]	; (8015e8c <HAL_SPI_MspInit+0x84>)
 8015e26:	4293      	cmp	r3, r2
 8015e28:	d12b      	bne.n	8015e82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	613b      	str	r3, [r7, #16]
 8015e2e:	4b18      	ldr	r3, [pc, #96]	; (8015e90 <HAL_SPI_MspInit+0x88>)
 8015e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e32:	4a17      	ldr	r2, [pc, #92]	; (8015e90 <HAL_SPI_MspInit+0x88>)
 8015e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015e38:	6453      	str	r3, [r2, #68]	; 0x44
 8015e3a:	4b15      	ldr	r3, [pc, #84]	; (8015e90 <HAL_SPI_MspInit+0x88>)
 8015e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015e42:	613b      	str	r3, [r7, #16]
 8015e44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015e46:	2300      	movs	r3, #0
 8015e48:	60fb      	str	r3, [r7, #12]
 8015e4a:	4b11      	ldr	r3, [pc, #68]	; (8015e90 <HAL_SPI_MspInit+0x88>)
 8015e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e4e:	4a10      	ldr	r2, [pc, #64]	; (8015e90 <HAL_SPI_MspInit+0x88>)
 8015e50:	f043 0302 	orr.w	r3, r3, #2
 8015e54:	6313      	str	r3, [r2, #48]	; 0x30
 8015e56:	4b0e      	ldr	r3, [pc, #56]	; (8015e90 <HAL_SPI_MspInit+0x88>)
 8015e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e5a:	f003 0302 	and.w	r3, r3, #2
 8015e5e:	60fb      	str	r3, [r7, #12]
 8015e60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8015e62:	2338      	movs	r3, #56	; 0x38
 8015e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e66:	2302      	movs	r3, #2
 8015e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e6e:	2303      	movs	r3, #3
 8015e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8015e72:	2305      	movs	r3, #5
 8015e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015e76:	f107 0314 	add.w	r3, r7, #20
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	4805      	ldr	r0, [pc, #20]	; (8015e94 <HAL_SPI_MspInit+0x8c>)
 8015e7e:	f7f0 fefd 	bl	8006c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8015e82:	bf00      	nop
 8015e84:	3728      	adds	r7, #40	; 0x28
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}
 8015e8a:	bf00      	nop
 8015e8c:	40013000 	.word	0x40013000
 8015e90:	40023800 	.word	0x40023800
 8015e94:	40020400 	.word	0x40020400

08015e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8015e98:	b480      	push	{r7}
 8015e9a:	b087      	sub	sp, #28
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015ea8:	d10e      	bne.n	8015ec8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8015eaa:	2300      	movs	r3, #0
 8015eac:	617b      	str	r3, [r7, #20]
 8015eae:	4b1d      	ldr	r3, [pc, #116]	; (8015f24 <HAL_TIM_Base_MspInit+0x8c>)
 8015eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eb2:	4a1c      	ldr	r2, [pc, #112]	; (8015f24 <HAL_TIM_Base_MspInit+0x8c>)
 8015eb4:	f043 0301 	orr.w	r3, r3, #1
 8015eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8015eba:	4b1a      	ldr	r3, [pc, #104]	; (8015f24 <HAL_TIM_Base_MspInit+0x8c>)
 8015ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ebe:	f003 0301 	and.w	r3, r3, #1
 8015ec2:	617b      	str	r3, [r7, #20]
 8015ec4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8015ec6:	e026      	b.n	8015f16 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	4a16      	ldr	r2, [pc, #88]	; (8015f28 <HAL_TIM_Base_MspInit+0x90>)
 8015ece:	4293      	cmp	r3, r2
 8015ed0:	d10e      	bne.n	8015ef0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	613b      	str	r3, [r7, #16]
 8015ed6:	4b13      	ldr	r3, [pc, #76]	; (8015f24 <HAL_TIM_Base_MspInit+0x8c>)
 8015ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eda:	4a12      	ldr	r2, [pc, #72]	; (8015f24 <HAL_TIM_Base_MspInit+0x8c>)
 8015edc:	f043 0302 	orr.w	r3, r3, #2
 8015ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8015ee2:	4b10      	ldr	r3, [pc, #64]	; (8015f24 <HAL_TIM_Base_MspInit+0x8c>)
 8015ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ee6:	f003 0302 	and.w	r3, r3, #2
 8015eea:	613b      	str	r3, [r7, #16]
 8015eec:	693b      	ldr	r3, [r7, #16]
}
 8015eee:	e012      	b.n	8015f16 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	4a0d      	ldr	r2, [pc, #52]	; (8015f2c <HAL_TIM_Base_MspInit+0x94>)
 8015ef6:	4293      	cmp	r3, r2
 8015ef8:	d10d      	bne.n	8015f16 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8015efa:	2300      	movs	r3, #0
 8015efc:	60fb      	str	r3, [r7, #12]
 8015efe:	4b09      	ldr	r3, [pc, #36]	; (8015f24 <HAL_TIM_Base_MspInit+0x8c>)
 8015f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f02:	4a08      	ldr	r2, [pc, #32]	; (8015f24 <HAL_TIM_Base_MspInit+0x8c>)
 8015f04:	f043 0308 	orr.w	r3, r3, #8
 8015f08:	6413      	str	r3, [r2, #64]	; 0x40
 8015f0a:	4b06      	ldr	r3, [pc, #24]	; (8015f24 <HAL_TIM_Base_MspInit+0x8c>)
 8015f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f0e:	f003 0308 	and.w	r3, r3, #8
 8015f12:	60fb      	str	r3, [r7, #12]
 8015f14:	68fb      	ldr	r3, [r7, #12]
}
 8015f16:	bf00      	nop
 8015f18:	371c      	adds	r7, #28
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f20:	4770      	bx	lr
 8015f22:	bf00      	nop
 8015f24:	40023800 	.word	0x40023800
 8015f28:	40000400 	.word	0x40000400
 8015f2c:	40000c00 	.word	0x40000c00

08015f30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b08a      	sub	sp, #40	; 0x28
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015f38:	f107 0314 	add.w	r3, r7, #20
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	601a      	str	r2, [r3, #0]
 8015f40:	605a      	str	r2, [r3, #4]
 8015f42:	609a      	str	r2, [r3, #8]
 8015f44:	60da      	str	r2, [r3, #12]
 8015f46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	4a24      	ldr	r2, [pc, #144]	; (8015fe0 <HAL_TIM_MspPostInit+0xb0>)
 8015f4e:	4293      	cmp	r3, r2
 8015f50:	d11e      	bne.n	8015f90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015f52:	2300      	movs	r3, #0
 8015f54:	613b      	str	r3, [r7, #16]
 8015f56:	4b23      	ldr	r3, [pc, #140]	; (8015fe4 <HAL_TIM_MspPostInit+0xb4>)
 8015f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f5a:	4a22      	ldr	r2, [pc, #136]	; (8015fe4 <HAL_TIM_MspPostInit+0xb4>)
 8015f5c:	f043 0302 	orr.w	r3, r3, #2
 8015f60:	6313      	str	r3, [r2, #48]	; 0x30
 8015f62:	4b20      	ldr	r3, [pc, #128]	; (8015fe4 <HAL_TIM_MspPostInit+0xb4>)
 8015f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f66:	f003 0302 	and.w	r3, r3, #2
 8015f6a:	613b      	str	r3, [r7, #16]
 8015f6c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P3_Pin;
 8015f6e:	2303      	movs	r3, #3
 8015f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015f72:	2302      	movs	r3, #2
 8015f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f76:	2300      	movs	r3, #0
 8015f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8015f7e:	2302      	movs	r3, #2
 8015f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015f82:	f107 0314 	add.w	r3, r7, #20
 8015f86:	4619      	mov	r1, r3
 8015f88:	4817      	ldr	r0, [pc, #92]	; (8015fe8 <HAL_TIM_MspPostInit+0xb8>)
 8015f8a:	f7f0 fe77 	bl	8006c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8015f8e:	e022      	b.n	8015fd6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	4a15      	ldr	r2, [pc, #84]	; (8015fec <HAL_TIM_MspPostInit+0xbc>)
 8015f96:	4293      	cmp	r3, r2
 8015f98:	d11d      	bne.n	8015fd6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	60fb      	str	r3, [r7, #12]
 8015f9e:	4b11      	ldr	r3, [pc, #68]	; (8015fe4 <HAL_TIM_MspPostInit+0xb4>)
 8015fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fa2:	4a10      	ldr	r2, [pc, #64]	; (8015fe4 <HAL_TIM_MspPostInit+0xb4>)
 8015fa4:	f043 0301 	orr.w	r3, r3, #1
 8015fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8015faa:	4b0e      	ldr	r3, [pc, #56]	; (8015fe4 <HAL_TIM_MspPostInit+0xb4>)
 8015fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fae:	f003 0301 	and.w	r3, r3, #1
 8015fb2:	60fb      	str	r3, [r7, #12]
 8015fb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 8015fb6:	230a      	movs	r3, #10
 8015fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015fba:	2302      	movs	r3, #2
 8015fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8015fc6:	2302      	movs	r3, #2
 8015fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015fca:	f107 0314 	add.w	r3, r7, #20
 8015fce:	4619      	mov	r1, r3
 8015fd0:	4807      	ldr	r0, [pc, #28]	; (8015ff0 <HAL_TIM_MspPostInit+0xc0>)
 8015fd2:	f7f0 fe53 	bl	8006c7c <HAL_GPIO_Init>
}
 8015fd6:	bf00      	nop
 8015fd8:	3728      	adds	r7, #40	; 0x28
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
 8015fde:	bf00      	nop
 8015fe0:	40000400 	.word	0x40000400
 8015fe4:	40023800 	.word	0x40023800
 8015fe8:	40020400 	.word	0x40020400
 8015fec:	40000c00 	.word	0x40000c00
 8015ff0:	40020000 	.word	0x40020000

08015ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b08a      	sub	sp, #40	; 0x28
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015ffc:	f107 0314 	add.w	r3, r7, #20
 8016000:	2200      	movs	r2, #0
 8016002:	601a      	str	r2, [r3, #0]
 8016004:	605a      	str	r2, [r3, #4]
 8016006:	609a      	str	r2, [r3, #8]
 8016008:	60da      	str	r2, [r3, #12]
 801600a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	4a19      	ldr	r2, [pc, #100]	; (8016078 <HAL_UART_MspInit+0x84>)
 8016012:	4293      	cmp	r3, r2
 8016014:	d12c      	bne.n	8016070 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8016016:	2300      	movs	r3, #0
 8016018:	613b      	str	r3, [r7, #16]
 801601a:	4b18      	ldr	r3, [pc, #96]	; (801607c <HAL_UART_MspInit+0x88>)
 801601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801601e:	4a17      	ldr	r2, [pc, #92]	; (801607c <HAL_UART_MspInit+0x88>)
 8016020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016024:	6413      	str	r3, [r2, #64]	; 0x40
 8016026:	4b15      	ldr	r3, [pc, #84]	; (801607c <HAL_UART_MspInit+0x88>)
 8016028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801602a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801602e:	613b      	str	r3, [r7, #16]
 8016030:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016032:	2300      	movs	r3, #0
 8016034:	60fb      	str	r3, [r7, #12]
 8016036:	4b11      	ldr	r3, [pc, #68]	; (801607c <HAL_UART_MspInit+0x88>)
 8016038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801603a:	4a10      	ldr	r2, [pc, #64]	; (801607c <HAL_UART_MspInit+0x88>)
 801603c:	f043 0302 	orr.w	r3, r3, #2
 8016040:	6313      	str	r3, [r2, #48]	; 0x30
 8016042:	4b0e      	ldr	r3, [pc, #56]	; (801607c <HAL_UART_MspInit+0x88>)
 8016044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016046:	f003 0302 	and.w	r3, r3, #2
 801604a:	60fb      	str	r3, [r7, #12]
 801604c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 801604e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8016052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016054:	2302      	movs	r3, #2
 8016056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8016058:	2301      	movs	r3, #1
 801605a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801605c:	2303      	movs	r3, #3
 801605e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8016060:	2307      	movs	r3, #7
 8016062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016064:	f107 0314 	add.w	r3, r7, #20
 8016068:	4619      	mov	r1, r3
 801606a:	4805      	ldr	r0, [pc, #20]	; (8016080 <HAL_UART_MspInit+0x8c>)
 801606c:	f7f0 fe06 	bl	8006c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8016070:	bf00      	nop
 8016072:	3728      	adds	r7, #40	; 0x28
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}
 8016078:	40004800 	.word	0x40004800
 801607c:	40023800 	.word	0x40023800
 8016080:	40020400 	.word	0x40020400

08016084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016084:	b480      	push	{r7}
 8016086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8016088:	bf00      	nop
 801608a:	46bd      	mov	sp, r7
 801608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016090:	4770      	bx	lr

08016092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8016092:	b480      	push	{r7}
 8016094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8016096:	e7fe      	b.n	8016096 <HardFault_Handler+0x4>

08016098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016098:	b480      	push	{r7}
 801609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801609c:	e7fe      	b.n	801609c <MemManage_Handler+0x4>

0801609e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801609e:	b480      	push	{r7}
 80160a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80160a2:	e7fe      	b.n	80160a2 <BusFault_Handler+0x4>

080160a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80160a4:	b480      	push	{r7}
 80160a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80160a8:	e7fe      	b.n	80160a8 <UsageFault_Handler+0x4>

080160aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80160aa:	b480      	push	{r7}
 80160ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80160ae:	bf00      	nop
 80160b0:	46bd      	mov	sp, r7
 80160b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b6:	4770      	bx	lr

080160b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80160b8:	b480      	push	{r7}
 80160ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80160bc:	bf00      	nop
 80160be:	46bd      	mov	sp, r7
 80160c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c4:	4770      	bx	lr

080160c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80160c6:	b480      	push	{r7}
 80160c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80160ca:	bf00      	nop
 80160cc:	46bd      	mov	sp, r7
 80160ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d2:	4770      	bx	lr

080160d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80160d8:	f7f0 f8e4 	bl	80062a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80160dc:	bf00      	nop
 80160de:	bd80      	pop	{r7, pc}

080160e0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80160e4:	4802      	ldr	r0, [pc, #8]	; (80160f0 <SDIO_IRQHandler+0x10>)
 80160e6:	f7f4 f975 	bl	800a3d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80160ea:	bf00      	nop
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	20008798 	.word	0x20008798

080160f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80160f8:	4802      	ldr	r0, [pc, #8]	; (8016104 <DMA2_Stream3_IRQHandler+0x10>)
 80160fa:	f7f0 fb57 	bl	80067ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80160fe:	bf00      	nop
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	200085a4 	.word	0x200085a4

08016108 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 801610c:	4802      	ldr	r0, [pc, #8]	; (8016118 <OTG_FS_IRQHandler+0x10>)
 801610e:	f7f2 f86a 	bl	80081e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8016112:	bf00      	nop
 8016114:	bd80      	pop	{r7, pc}
 8016116:	bf00      	nop
 8016118:	20009b50 	.word	0x20009b50

0801611c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8016120:	4802      	ldr	r0, [pc, #8]	; (801612c <DMA2_Stream6_IRQHandler+0x10>)
 8016122:	f7f0 fb43 	bl	80067ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8016126:	bf00      	nop
 8016128:	bd80      	pop	{r7, pc}
 801612a:	bf00      	nop
 801612c:	20008738 	.word	0x20008738

08016130 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b084      	sub	sp, #16
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8016138:	4b11      	ldr	r3, [pc, #68]	; (8016180 <_sbrk+0x50>)
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d102      	bne.n	8016146 <_sbrk+0x16>
		heap_end = &end;
 8016140:	4b0f      	ldr	r3, [pc, #60]	; (8016180 <_sbrk+0x50>)
 8016142:	4a10      	ldr	r2, [pc, #64]	; (8016184 <_sbrk+0x54>)
 8016144:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8016146:	4b0e      	ldr	r3, [pc, #56]	; (8016180 <_sbrk+0x50>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801614c:	4b0c      	ldr	r3, [pc, #48]	; (8016180 <_sbrk+0x50>)
 801614e:	681a      	ldr	r2, [r3, #0]
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	4413      	add	r3, r2
 8016154:	466a      	mov	r2, sp
 8016156:	4293      	cmp	r3, r2
 8016158:	d907      	bls.n	801616a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801615a:	f000 fda9 	bl	8016cb0 <__errno>
 801615e:	4602      	mov	r2, r0
 8016160:	230c      	movs	r3, #12
 8016162:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8016164:	f04f 33ff 	mov.w	r3, #4294967295
 8016168:	e006      	b.n	8016178 <_sbrk+0x48>
	}

	heap_end += incr;
 801616a:	4b05      	ldr	r3, [pc, #20]	; (8016180 <_sbrk+0x50>)
 801616c:	681a      	ldr	r2, [r3, #0]
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	4413      	add	r3, r2
 8016172:	4a03      	ldr	r2, [pc, #12]	; (8016180 <_sbrk+0x50>)
 8016174:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8016176:	68fb      	ldr	r3, [r7, #12]
}
 8016178:	4618      	mov	r0, r3
 801617a:	3710      	adds	r7, #16
 801617c:	46bd      	mov	sp, r7
 801617e:	bd80      	pop	{r7, pc}
 8016180:	200009f0 	.word	0x200009f0
 8016184:	2000a160 	.word	0x2000a160

08016188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016188:	b480      	push	{r7}
 801618a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801618c:	4b16      	ldr	r3, [pc, #88]	; (80161e8 <SystemInit+0x60>)
 801618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016192:	4a15      	ldr	r2, [pc, #84]	; (80161e8 <SystemInit+0x60>)
 8016194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801619c:	4b13      	ldr	r3, [pc, #76]	; (80161ec <SystemInit+0x64>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	4a12      	ldr	r2, [pc, #72]	; (80161ec <SystemInit+0x64>)
 80161a2:	f043 0301 	orr.w	r3, r3, #1
 80161a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80161a8:	4b10      	ldr	r3, [pc, #64]	; (80161ec <SystemInit+0x64>)
 80161aa:	2200      	movs	r2, #0
 80161ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80161ae:	4b0f      	ldr	r3, [pc, #60]	; (80161ec <SystemInit+0x64>)
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	4a0e      	ldr	r2, [pc, #56]	; (80161ec <SystemInit+0x64>)
 80161b4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80161b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80161bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80161be:	4b0b      	ldr	r3, [pc, #44]	; (80161ec <SystemInit+0x64>)
 80161c0:	4a0b      	ldr	r2, [pc, #44]	; (80161f0 <SystemInit+0x68>)
 80161c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80161c4:	4b09      	ldr	r3, [pc, #36]	; (80161ec <SystemInit+0x64>)
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	4a08      	ldr	r2, [pc, #32]	; (80161ec <SystemInit+0x64>)
 80161ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80161ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80161d0:	4b06      	ldr	r3, [pc, #24]	; (80161ec <SystemInit+0x64>)
 80161d2:	2200      	movs	r2, #0
 80161d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80161d6:	4b04      	ldr	r3, [pc, #16]	; (80161e8 <SystemInit+0x60>)
 80161d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80161dc:	609a      	str	r2, [r3, #8]
#endif
}
 80161de:	bf00      	nop
 80161e0:	46bd      	mov	sp, r7
 80161e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e6:	4770      	bx	lr
 80161e8:	e000ed00 	.word	0xe000ed00
 80161ec:	40023800 	.word	0x40023800
 80161f0:	24003010 	.word	0x24003010

080161f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80161f8:	2200      	movs	r2, #0
 80161fa:	4912      	ldr	r1, [pc, #72]	; (8016244 <MX_USB_DEVICE_Init+0x50>)
 80161fc:	4812      	ldr	r0, [pc, #72]	; (8016248 <MX_USB_DEVICE_Init+0x54>)
 80161fe:	f7f9 fa99 	bl	800f734 <USBD_Init>
 8016202:	4603      	mov	r3, r0
 8016204:	2b00      	cmp	r3, #0
 8016206:	d001      	beq.n	801620c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016208:	f7ff fa4c 	bl	80156a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801620c:	490f      	ldr	r1, [pc, #60]	; (801624c <MX_USB_DEVICE_Init+0x58>)
 801620e:	480e      	ldr	r0, [pc, #56]	; (8016248 <MX_USB_DEVICE_Init+0x54>)
 8016210:	f7f9 fabb 	bl	800f78a <USBD_RegisterClass>
 8016214:	4603      	mov	r3, r0
 8016216:	2b00      	cmp	r3, #0
 8016218:	d001      	beq.n	801621e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801621a:	f7ff fa43 	bl	80156a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801621e:	490c      	ldr	r1, [pc, #48]	; (8016250 <MX_USB_DEVICE_Init+0x5c>)
 8016220:	4809      	ldr	r0, [pc, #36]	; (8016248 <MX_USB_DEVICE_Init+0x54>)
 8016222:	f7f9 f9e9 	bl	800f5f8 <USBD_CDC_RegisterInterface>
 8016226:	4603      	mov	r3, r0
 8016228:	2b00      	cmp	r3, #0
 801622a:	d001      	beq.n	8016230 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801622c:	f7ff fa3a 	bl	80156a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016230:	4805      	ldr	r0, [pc, #20]	; (8016248 <MX_USB_DEVICE_Init+0x54>)
 8016232:	f7f9 fac4 	bl	800f7be <USBD_Start>
 8016236:	4603      	mov	r3, r0
 8016238:	2b00      	cmp	r3, #0
 801623a:	d001      	beq.n	8016240 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801623c:	f7ff fa32 	bl	80156a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016240:	bf00      	nop
 8016242:	bd80      	pop	{r7, pc}
 8016244:	20000148 	.word	0x20000148
 8016248:	200088b4 	.word	0x200088b4
 801624c:	20000018 	.word	0x20000018
 8016250:	20000138 	.word	0x20000138

08016254 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016258:	2200      	movs	r2, #0
 801625a:	4905      	ldr	r1, [pc, #20]	; (8016270 <CDC_Init_FS+0x1c>)
 801625c:	4805      	ldr	r0, [pc, #20]	; (8016274 <CDC_Init_FS+0x20>)
 801625e:	f7f9 f9e2 	bl	800f626 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016262:	4905      	ldr	r1, [pc, #20]	; (8016278 <CDC_Init_FS+0x24>)
 8016264:	4803      	ldr	r0, [pc, #12]	; (8016274 <CDC_Init_FS+0x20>)
 8016266:	f7f9 f9f8 	bl	800f65a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801626a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801626c:	4618      	mov	r0, r3
 801626e:	bd80      	pop	{r7, pc}
 8016270:	20009350 	.word	0x20009350
 8016274:	200088b4 	.word	0x200088b4
 8016278:	20008b50 	.word	0x20008b50

0801627c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801627c:	b480      	push	{r7}
 801627e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016280:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016282:	4618      	mov	r0, r3
 8016284:	46bd      	mov	sp, r7
 8016286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628a:	4770      	bx	lr

0801628c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801628c:	b480      	push	{r7}
 801628e:	b085      	sub	sp, #20
 8016290:	af00      	add	r7, sp, #0
 8016292:	4603      	mov	r3, r0
 8016294:	6039      	str	r1, [r7, #0]
 8016296:	71fb      	strb	r3, [r7, #7]
 8016298:	4613      	mov	r3, r2
 801629a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 801629c:	f107 0308 	add.w	r3, r7, #8
 80162a0:	2200      	movs	r2, #0
 80162a2:	601a      	str	r2, [r3, #0]
 80162a4:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 80162a8:	79fb      	ldrb	r3, [r7, #7]
 80162aa:	2b23      	cmp	r3, #35	; 0x23
 80162ac:	d87c      	bhi.n	80163a8 <CDC_Control_FS+0x11c>
 80162ae:	a201      	add	r2, pc, #4	; (adr r2, 80162b4 <CDC_Control_FS+0x28>)
 80162b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162b4:	080163a9 	.word	0x080163a9
 80162b8:	080163a9 	.word	0x080163a9
 80162bc:	080163a9 	.word	0x080163a9
 80162c0:	080163a9 	.word	0x080163a9
 80162c4:	080163a9 	.word	0x080163a9
 80162c8:	080163a9 	.word	0x080163a9
 80162cc:	080163a9 	.word	0x080163a9
 80162d0:	080163a9 	.word	0x080163a9
 80162d4:	080163a9 	.word	0x080163a9
 80162d8:	080163a9 	.word	0x080163a9
 80162dc:	080163a9 	.word	0x080163a9
 80162e0:	080163a9 	.word	0x080163a9
 80162e4:	080163a9 	.word	0x080163a9
 80162e8:	080163a9 	.word	0x080163a9
 80162ec:	080163a9 	.word	0x080163a9
 80162f0:	080163a9 	.word	0x080163a9
 80162f4:	080163a9 	.word	0x080163a9
 80162f8:	080163a9 	.word	0x080163a9
 80162fc:	080163a9 	.word	0x080163a9
 8016300:	080163a9 	.word	0x080163a9
 8016304:	080163a9 	.word	0x080163a9
 8016308:	080163a9 	.word	0x080163a9
 801630c:	080163a9 	.word	0x080163a9
 8016310:	080163a9 	.word	0x080163a9
 8016314:	080163a9 	.word	0x080163a9
 8016318:	080163a9 	.word	0x080163a9
 801631c:	080163a9 	.word	0x080163a9
 8016320:	080163a9 	.word	0x080163a9
 8016324:	080163a9 	.word	0x080163a9
 8016328:	080163a9 	.word	0x080163a9
 801632c:	080163a9 	.word	0x080163a9
 8016330:	080163a9 	.word	0x080163a9
 8016334:	08016345 	.word	0x08016345
 8016338:	08016371 	.word	0x08016371
 801633c:	080163a9 	.word	0x080163a9
 8016340:	080163a9 	.word	0x080163a9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	781b      	ldrb	r3, [r3, #0]
 8016348:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	785b      	ldrb	r3, [r3, #1]
 801634e:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 8016350:	683b      	ldr	r3, [r7, #0]
 8016352:	789b      	ldrb	r3, [r3, #2]
 8016354:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	78db      	ldrb	r3, [r3, #3]
 801635a:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 801635c:	683b      	ldr	r3, [r7, #0]
 801635e:	791b      	ldrb	r3, [r3, #4]
 8016360:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 8016362:	683b      	ldr	r3, [r7, #0]
 8016364:	795b      	ldrb	r3, [r3, #5]
 8016366:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 8016368:	683b      	ldr	r3, [r7, #0]
 801636a:	799b      	ldrb	r3, [r3, #6]
 801636c:	73bb      	strb	r3, [r7, #14]
        	break;
 801636e:	e01c      	b.n	80163aa <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 8016370:	7a3a      	ldrb	r2, [r7, #8]
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 8016376:	683b      	ldr	r3, [r7, #0]
 8016378:	3301      	adds	r3, #1
 801637a:	7a7a      	ldrb	r2, [r7, #9]
 801637c:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	3302      	adds	r3, #2
 8016382:	7aba      	ldrb	r2, [r7, #10]
 8016384:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 8016386:	683b      	ldr	r3, [r7, #0]
 8016388:	3303      	adds	r3, #3
 801638a:	7afa      	ldrb	r2, [r7, #11]
 801638c:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 801638e:	683b      	ldr	r3, [r7, #0]
 8016390:	3304      	adds	r3, #4
 8016392:	7b3a      	ldrb	r2, [r7, #12]
 8016394:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 8016396:	683b      	ldr	r3, [r7, #0]
 8016398:	3305      	adds	r3, #5
 801639a:	7b7a      	ldrb	r2, [r7, #13]
 801639c:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 801639e:	683b      	ldr	r3, [r7, #0]
 80163a0:	3306      	adds	r3, #6
 80163a2:	7bba      	ldrb	r2, [r7, #14]
 80163a4:	701a      	strb	r2, [r3, #0]
        	break;
 80163a6:	e000      	b.n	80163aa <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80163a8:	bf00      	nop
  }

  return (USBD_OK);
 80163aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	3714      	adds	r7, #20
 80163b0:	46bd      	mov	sp, r7
 80163b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b6:	4770      	bx	lr

080163b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b082      	sub	sp, #8
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
 80163c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80163c2:	6879      	ldr	r1, [r7, #4]
 80163c4:	4805      	ldr	r0, [pc, #20]	; (80163dc <CDC_Receive_FS+0x24>)
 80163c6:	f7f9 f948 	bl	800f65a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80163ca:	4804      	ldr	r0, [pc, #16]	; (80163dc <CDC_Receive_FS+0x24>)
 80163cc:	f7f9 f988 	bl	800f6e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80163d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	3708      	adds	r7, #8
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}
 80163da:	bf00      	nop
 80163dc:	200088b4 	.word	0x200088b4

080163e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b084      	sub	sp, #16
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	460b      	mov	r3, r1
 80163ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80163ec:	2300      	movs	r3, #0
 80163ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80163f0:	4b0d      	ldr	r3, [pc, #52]	; (8016428 <CDC_Transmit_FS+0x48>)
 80163f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80163f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d001      	beq.n	8016406 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016402:	2301      	movs	r3, #1
 8016404:	e00b      	b.n	801641e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016406:	887b      	ldrh	r3, [r7, #2]
 8016408:	461a      	mov	r2, r3
 801640a:	6879      	ldr	r1, [r7, #4]
 801640c:	4806      	ldr	r0, [pc, #24]	; (8016428 <CDC_Transmit_FS+0x48>)
 801640e:	f7f9 f90a 	bl	800f626 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016412:	4805      	ldr	r0, [pc, #20]	; (8016428 <CDC_Transmit_FS+0x48>)
 8016414:	f7f9 f935 	bl	800f682 <USBD_CDC_TransmitPacket>
 8016418:	4603      	mov	r3, r0
 801641a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801641c:	7bfb      	ldrb	r3, [r7, #15]
}
 801641e:	4618      	mov	r0, r3
 8016420:	3710      	adds	r7, #16
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}
 8016426:	bf00      	nop
 8016428:	200088b4 	.word	0x200088b4

0801642c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b08a      	sub	sp, #40	; 0x28
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016434:	f107 0314 	add.w	r3, r7, #20
 8016438:	2200      	movs	r2, #0
 801643a:	601a      	str	r2, [r3, #0]
 801643c:	605a      	str	r2, [r3, #4]
 801643e:	609a      	str	r2, [r3, #8]
 8016440:	60da      	str	r2, [r3, #12]
 8016442:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801644c:	d13a      	bne.n	80164c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801644e:	2300      	movs	r3, #0
 8016450:	613b      	str	r3, [r7, #16]
 8016452:	4b1e      	ldr	r3, [pc, #120]	; (80164cc <HAL_PCD_MspInit+0xa0>)
 8016454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016456:	4a1d      	ldr	r2, [pc, #116]	; (80164cc <HAL_PCD_MspInit+0xa0>)
 8016458:	f043 0301 	orr.w	r3, r3, #1
 801645c:	6313      	str	r3, [r2, #48]	; 0x30
 801645e:	4b1b      	ldr	r3, [pc, #108]	; (80164cc <HAL_PCD_MspInit+0xa0>)
 8016460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016462:	f003 0301 	and.w	r3, r3, #1
 8016466:	613b      	str	r3, [r7, #16]
 8016468:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 801646a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801646e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016470:	2302      	movs	r3, #2
 8016472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016474:	2300      	movs	r3, #0
 8016476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016478:	2303      	movs	r3, #3
 801647a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801647c:	230a      	movs	r3, #10
 801647e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016480:	f107 0314 	add.w	r3, r7, #20
 8016484:	4619      	mov	r1, r3
 8016486:	4812      	ldr	r0, [pc, #72]	; (80164d0 <HAL_PCD_MspInit+0xa4>)
 8016488:	f7f0 fbf8 	bl	8006c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801648c:	4b0f      	ldr	r3, [pc, #60]	; (80164cc <HAL_PCD_MspInit+0xa0>)
 801648e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016490:	4a0e      	ldr	r2, [pc, #56]	; (80164cc <HAL_PCD_MspInit+0xa0>)
 8016492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016496:	6353      	str	r3, [r2, #52]	; 0x34
 8016498:	2300      	movs	r3, #0
 801649a:	60fb      	str	r3, [r7, #12]
 801649c:	4b0b      	ldr	r3, [pc, #44]	; (80164cc <HAL_PCD_MspInit+0xa0>)
 801649e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80164a0:	4a0a      	ldr	r2, [pc, #40]	; (80164cc <HAL_PCD_MspInit+0xa0>)
 80164a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80164a6:	6453      	str	r3, [r2, #68]	; 0x44
 80164a8:	4b08      	ldr	r3, [pc, #32]	; (80164cc <HAL_PCD_MspInit+0xa0>)
 80164aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80164ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80164b0:	60fb      	str	r3, [r7, #12]
 80164b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80164b4:	2200      	movs	r2, #0
 80164b6:	2100      	movs	r1, #0
 80164b8:	2043      	movs	r0, #67	; 0x43
 80164ba:	f7f0 f810 	bl	80064de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80164be:	2043      	movs	r0, #67	; 0x43
 80164c0:	f7f0 f829 	bl	8006516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80164c4:	bf00      	nop
 80164c6:	3728      	adds	r7, #40	; 0x28
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd80      	pop	{r7, pc}
 80164cc:	40023800 	.word	0x40023800
 80164d0:	40020000 	.word	0x40020000

080164d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b082      	sub	sp, #8
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80164e8:	4619      	mov	r1, r3
 80164ea:	4610      	mov	r0, r2
 80164ec:	f7f9 f9b0 	bl	800f850 <USBD_LL_SetupStage>
}
 80164f0:	bf00      	nop
 80164f2:	3708      	adds	r7, #8
 80164f4:	46bd      	mov	sp, r7
 80164f6:	bd80      	pop	{r7, pc}

080164f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b082      	sub	sp, #8
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
 8016500:	460b      	mov	r3, r1
 8016502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801650a:	78fa      	ldrb	r2, [r7, #3]
 801650c:	6879      	ldr	r1, [r7, #4]
 801650e:	4613      	mov	r3, r2
 8016510:	00db      	lsls	r3, r3, #3
 8016512:	1a9b      	subs	r3, r3, r2
 8016514:	009b      	lsls	r3, r3, #2
 8016516:	440b      	add	r3, r1
 8016518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801651c:	681a      	ldr	r2, [r3, #0]
 801651e:	78fb      	ldrb	r3, [r7, #3]
 8016520:	4619      	mov	r1, r3
 8016522:	f7f9 f9e0 	bl	800f8e6 <USBD_LL_DataOutStage>
}
 8016526:	bf00      	nop
 8016528:	3708      	adds	r7, #8
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}

0801652e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801652e:	b580      	push	{r7, lr}
 8016530:	b082      	sub	sp, #8
 8016532:	af00      	add	r7, sp, #0
 8016534:	6078      	str	r0, [r7, #4]
 8016536:	460b      	mov	r3, r1
 8016538:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016540:	78fa      	ldrb	r2, [r7, #3]
 8016542:	6879      	ldr	r1, [r7, #4]
 8016544:	4613      	mov	r3, r2
 8016546:	00db      	lsls	r3, r3, #3
 8016548:	1a9b      	subs	r3, r3, r2
 801654a:	009b      	lsls	r3, r3, #2
 801654c:	440b      	add	r3, r1
 801654e:	3348      	adds	r3, #72	; 0x48
 8016550:	681a      	ldr	r2, [r3, #0]
 8016552:	78fb      	ldrb	r3, [r7, #3]
 8016554:	4619      	mov	r1, r3
 8016556:	f7f9 fa37 	bl	800f9c8 <USBD_LL_DataInStage>
}
 801655a:	bf00      	nop
 801655c:	3708      	adds	r7, #8
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}

08016562 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016562:	b580      	push	{r7, lr}
 8016564:	b082      	sub	sp, #8
 8016566:	af00      	add	r7, sp, #0
 8016568:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016570:	4618      	mov	r0, r3
 8016572:	f7f9 fb45 	bl	800fc00 <USBD_LL_SOF>
}
 8016576:	bf00      	nop
 8016578:	3708      	adds	r7, #8
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}

0801657e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801657e:	b580      	push	{r7, lr}
 8016580:	b084      	sub	sp, #16
 8016582:	af00      	add	r7, sp, #0
 8016584:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016586:	2301      	movs	r3, #1
 8016588:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	68db      	ldr	r3, [r3, #12]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d102      	bne.n	8016598 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016592:	2300      	movs	r3, #0
 8016594:	73fb      	strb	r3, [r7, #15]
 8016596:	e008      	b.n	80165aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	68db      	ldr	r3, [r3, #12]
 801659c:	2b02      	cmp	r3, #2
 801659e:	d102      	bne.n	80165a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80165a0:	2301      	movs	r3, #1
 80165a2:	73fb      	strb	r3, [r7, #15]
 80165a4:	e001      	b.n	80165aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80165a6:	f7ff f87d 	bl	80156a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80165b0:	7bfa      	ldrb	r2, [r7, #15]
 80165b2:	4611      	mov	r1, r2
 80165b4:	4618      	mov	r0, r3
 80165b6:	f7f9 faed 	bl	800fb94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80165c0:	4618      	mov	r0, r3
 80165c2:	f7f9 faa6 	bl	800fb12 <USBD_LL_Reset>
}
 80165c6:	bf00      	nop
 80165c8:	3710      	adds	r7, #16
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}
	...

080165d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b082      	sub	sp, #8
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80165de:	4618      	mov	r0, r3
 80165e0:	f7f9 fae8 	bl	800fbb4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	687a      	ldr	r2, [r7, #4]
 80165f0:	6812      	ldr	r2, [r2, #0]
 80165f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80165f6:	f043 0301 	orr.w	r3, r3, #1
 80165fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	6a1b      	ldr	r3, [r3, #32]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d005      	beq.n	8016610 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016604:	4b04      	ldr	r3, [pc, #16]	; (8016618 <HAL_PCD_SuspendCallback+0x48>)
 8016606:	691b      	ldr	r3, [r3, #16]
 8016608:	4a03      	ldr	r2, [pc, #12]	; (8016618 <HAL_PCD_SuspendCallback+0x48>)
 801660a:	f043 0306 	orr.w	r3, r3, #6
 801660e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016610:	bf00      	nop
 8016612:	3708      	adds	r7, #8
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}
 8016618:	e000ed00 	.word	0xe000ed00

0801661c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801661c:	b580      	push	{r7, lr}
 801661e:	b082      	sub	sp, #8
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801662a:	4618      	mov	r0, r3
 801662c:	f7f9 fad7 	bl	800fbde <USBD_LL_Resume>
}
 8016630:	bf00      	nop
 8016632:	3708      	adds	r7, #8
 8016634:	46bd      	mov	sp, r7
 8016636:	bd80      	pop	{r7, pc}

08016638 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
 8016640:	460b      	mov	r3, r1
 8016642:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801664a:	78fa      	ldrb	r2, [r7, #3]
 801664c:	4611      	mov	r1, r2
 801664e:	4618      	mov	r0, r3
 8016650:	f7f9 fafd 	bl	800fc4e <USBD_LL_IsoOUTIncomplete>
}
 8016654:	bf00      	nop
 8016656:	3708      	adds	r7, #8
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}

0801665c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
 8016664:	460b      	mov	r3, r1
 8016666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801666e:	78fa      	ldrb	r2, [r7, #3]
 8016670:	4611      	mov	r1, r2
 8016672:	4618      	mov	r0, r3
 8016674:	f7f9 fade 	bl	800fc34 <USBD_LL_IsoINIncomplete>
}
 8016678:	bf00      	nop
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801668e:	4618      	mov	r0, r3
 8016690:	f7f9 faea 	bl	800fc68 <USBD_LL_DevConnected>
}
 8016694:	bf00      	nop
 8016696:	3708      	adds	r7, #8
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80166aa:	4618      	mov	r0, r3
 80166ac:	f7f9 fae7 	bl	800fc7e <USBD_LL_DevDisconnected>
}
 80166b0:	bf00      	nop
 80166b2:	3708      	adds	r7, #8
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}

080166b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b082      	sub	sp, #8
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	781b      	ldrb	r3, [r3, #0]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d13c      	bne.n	8016742 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80166c8:	4a20      	ldr	r2, [pc, #128]	; (801674c <USBD_LL_Init+0x94>)
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	4a1e      	ldr	r2, [pc, #120]	; (801674c <USBD_LL_Init+0x94>)
 80166d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80166d8:	4b1c      	ldr	r3, [pc, #112]	; (801674c <USBD_LL_Init+0x94>)
 80166da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80166de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80166e0:	4b1a      	ldr	r3, [pc, #104]	; (801674c <USBD_LL_Init+0x94>)
 80166e2:	2204      	movs	r2, #4
 80166e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80166e6:	4b19      	ldr	r3, [pc, #100]	; (801674c <USBD_LL_Init+0x94>)
 80166e8:	2202      	movs	r2, #2
 80166ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80166ec:	4b17      	ldr	r3, [pc, #92]	; (801674c <USBD_LL_Init+0x94>)
 80166ee:	2200      	movs	r2, #0
 80166f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80166f2:	4b16      	ldr	r3, [pc, #88]	; (801674c <USBD_LL_Init+0x94>)
 80166f4:	2202      	movs	r2, #2
 80166f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80166f8:	4b14      	ldr	r3, [pc, #80]	; (801674c <USBD_LL_Init+0x94>)
 80166fa:	2200      	movs	r2, #0
 80166fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80166fe:	4b13      	ldr	r3, [pc, #76]	; (801674c <USBD_LL_Init+0x94>)
 8016700:	2200      	movs	r2, #0
 8016702:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016704:	4b11      	ldr	r3, [pc, #68]	; (801674c <USBD_LL_Init+0x94>)
 8016706:	2200      	movs	r2, #0
 8016708:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801670a:	4b10      	ldr	r3, [pc, #64]	; (801674c <USBD_LL_Init+0x94>)
 801670c:	2200      	movs	r2, #0
 801670e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016710:	4b0e      	ldr	r3, [pc, #56]	; (801674c <USBD_LL_Init+0x94>)
 8016712:	2200      	movs	r2, #0
 8016714:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016716:	480d      	ldr	r0, [pc, #52]	; (801674c <USBD_LL_Init+0x94>)
 8016718:	f7f1 fc15 	bl	8007f46 <HAL_PCD_Init>
 801671c:	4603      	mov	r3, r0
 801671e:	2b00      	cmp	r3, #0
 8016720:	d001      	beq.n	8016726 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016722:	f7fe ffbf 	bl	80156a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016726:	2180      	movs	r1, #128	; 0x80
 8016728:	4808      	ldr	r0, [pc, #32]	; (801674c <USBD_LL_Init+0x94>)
 801672a:	f7f2 fd7a 	bl	8009222 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801672e:	2240      	movs	r2, #64	; 0x40
 8016730:	2100      	movs	r1, #0
 8016732:	4806      	ldr	r0, [pc, #24]	; (801674c <USBD_LL_Init+0x94>)
 8016734:	f7f2 fd2e 	bl	8009194 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016738:	2280      	movs	r2, #128	; 0x80
 801673a:	2101      	movs	r1, #1
 801673c:	4803      	ldr	r0, [pc, #12]	; (801674c <USBD_LL_Init+0x94>)
 801673e:	f7f2 fd29 	bl	8009194 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016742:	2300      	movs	r3, #0
}
 8016744:	4618      	mov	r0, r3
 8016746:	3708      	adds	r7, #8
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	20009b50 	.word	0x20009b50

08016750 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b084      	sub	sp, #16
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016758:	2300      	movs	r3, #0
 801675a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801675c:	2300      	movs	r3, #0
 801675e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016766:	4618      	mov	r0, r3
 8016768:	f7f1 fd0a 	bl	8008180 <HAL_PCD_Start>
 801676c:	4603      	mov	r3, r0
 801676e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016770:	7bfb      	ldrb	r3, [r7, #15]
 8016772:	4618      	mov	r0, r3
 8016774:	f000 f92e 	bl	80169d4 <USBD_Get_USB_Status>
 8016778:	4603      	mov	r3, r0
 801677a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801677c:	7bbb      	ldrb	r3, [r7, #14]
}
 801677e:	4618      	mov	r0, r3
 8016780:	3710      	adds	r7, #16
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}

08016786 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016786:	b580      	push	{r7, lr}
 8016788:	b084      	sub	sp, #16
 801678a:	af00      	add	r7, sp, #0
 801678c:	6078      	str	r0, [r7, #4]
 801678e:	4608      	mov	r0, r1
 8016790:	4611      	mov	r1, r2
 8016792:	461a      	mov	r2, r3
 8016794:	4603      	mov	r3, r0
 8016796:	70fb      	strb	r3, [r7, #3]
 8016798:	460b      	mov	r3, r1
 801679a:	70bb      	strb	r3, [r7, #2]
 801679c:	4613      	mov	r3, r2
 801679e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167a0:	2300      	movs	r3, #0
 80167a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167a4:	2300      	movs	r3, #0
 80167a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80167ae:	78bb      	ldrb	r3, [r7, #2]
 80167b0:	883a      	ldrh	r2, [r7, #0]
 80167b2:	78f9      	ldrb	r1, [r7, #3]
 80167b4:	f7f2 f8df 	bl	8008976 <HAL_PCD_EP_Open>
 80167b8:	4603      	mov	r3, r0
 80167ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167bc:	7bfb      	ldrb	r3, [r7, #15]
 80167be:	4618      	mov	r0, r3
 80167c0:	f000 f908 	bl	80169d4 <USBD_Get_USB_Status>
 80167c4:	4603      	mov	r3, r0
 80167c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80167c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80167ca:	4618      	mov	r0, r3
 80167cc:	3710      	adds	r7, #16
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}

080167d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80167d2:	b580      	push	{r7, lr}
 80167d4:	b084      	sub	sp, #16
 80167d6:	af00      	add	r7, sp, #0
 80167d8:	6078      	str	r0, [r7, #4]
 80167da:	460b      	mov	r3, r1
 80167dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167de:	2300      	movs	r3, #0
 80167e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167e2:	2300      	movs	r3, #0
 80167e4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80167ec:	78fa      	ldrb	r2, [r7, #3]
 80167ee:	4611      	mov	r1, r2
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7f2 f928 	bl	8008a46 <HAL_PCD_EP_Close>
 80167f6:	4603      	mov	r3, r0
 80167f8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80167fa:	7bfb      	ldrb	r3, [r7, #15]
 80167fc:	4618      	mov	r0, r3
 80167fe:	f000 f8e9 	bl	80169d4 <USBD_Get_USB_Status>
 8016802:	4603      	mov	r3, r0
 8016804:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016806:	7bbb      	ldrb	r3, [r7, #14]
}
 8016808:	4618      	mov	r0, r3
 801680a:	3710      	adds	r7, #16
 801680c:	46bd      	mov	sp, r7
 801680e:	bd80      	pop	{r7, pc}

08016810 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b084      	sub	sp, #16
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	460b      	mov	r3, r1
 801681a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801681c:	2300      	movs	r3, #0
 801681e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016820:	2300      	movs	r3, #0
 8016822:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801682a:	78fa      	ldrb	r2, [r7, #3]
 801682c:	4611      	mov	r1, r2
 801682e:	4618      	mov	r0, r3
 8016830:	f7f2 fa00 	bl	8008c34 <HAL_PCD_EP_SetStall>
 8016834:	4603      	mov	r3, r0
 8016836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016838:	7bfb      	ldrb	r3, [r7, #15]
 801683a:	4618      	mov	r0, r3
 801683c:	f000 f8ca 	bl	80169d4 <USBD_Get_USB_Status>
 8016840:	4603      	mov	r3, r0
 8016842:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016844:	7bbb      	ldrb	r3, [r7, #14]
}
 8016846:	4618      	mov	r0, r3
 8016848:	3710      	adds	r7, #16
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}

0801684e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801684e:	b580      	push	{r7, lr}
 8016850:	b084      	sub	sp, #16
 8016852:	af00      	add	r7, sp, #0
 8016854:	6078      	str	r0, [r7, #4]
 8016856:	460b      	mov	r3, r1
 8016858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801685a:	2300      	movs	r3, #0
 801685c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801685e:	2300      	movs	r3, #0
 8016860:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016868:	78fa      	ldrb	r2, [r7, #3]
 801686a:	4611      	mov	r1, r2
 801686c:	4618      	mov	r0, r3
 801686e:	f7f2 fa45 	bl	8008cfc <HAL_PCD_EP_ClrStall>
 8016872:	4603      	mov	r3, r0
 8016874:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016876:	7bfb      	ldrb	r3, [r7, #15]
 8016878:	4618      	mov	r0, r3
 801687a:	f000 f8ab 	bl	80169d4 <USBD_Get_USB_Status>
 801687e:	4603      	mov	r3, r0
 8016880:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016882:	7bbb      	ldrb	r3, [r7, #14]
}
 8016884:	4618      	mov	r0, r3
 8016886:	3710      	adds	r7, #16
 8016888:	46bd      	mov	sp, r7
 801688a:	bd80      	pop	{r7, pc}

0801688c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801688c:	b480      	push	{r7}
 801688e:	b085      	sub	sp, #20
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
 8016894:	460b      	mov	r3, r1
 8016896:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801689e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80168a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	da0b      	bge.n	80168c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80168a8:	78fb      	ldrb	r3, [r7, #3]
 80168aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80168ae:	68f9      	ldr	r1, [r7, #12]
 80168b0:	4613      	mov	r3, r2
 80168b2:	00db      	lsls	r3, r3, #3
 80168b4:	1a9b      	subs	r3, r3, r2
 80168b6:	009b      	lsls	r3, r3, #2
 80168b8:	440b      	add	r3, r1
 80168ba:	333e      	adds	r3, #62	; 0x3e
 80168bc:	781b      	ldrb	r3, [r3, #0]
 80168be:	e00b      	b.n	80168d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80168c0:	78fb      	ldrb	r3, [r7, #3]
 80168c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80168c6:	68f9      	ldr	r1, [r7, #12]
 80168c8:	4613      	mov	r3, r2
 80168ca:	00db      	lsls	r3, r3, #3
 80168cc:	1a9b      	subs	r3, r3, r2
 80168ce:	009b      	lsls	r3, r3, #2
 80168d0:	440b      	add	r3, r1
 80168d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80168d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80168d8:	4618      	mov	r0, r3
 80168da:	3714      	adds	r7, #20
 80168dc:	46bd      	mov	sp, r7
 80168de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e2:	4770      	bx	lr

080168e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b084      	sub	sp, #16
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
 80168ec:	460b      	mov	r3, r1
 80168ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168f0:	2300      	movs	r3, #0
 80168f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168f4:	2300      	movs	r3, #0
 80168f6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80168fe:	78fa      	ldrb	r2, [r7, #3]
 8016900:	4611      	mov	r1, r2
 8016902:	4618      	mov	r0, r3
 8016904:	f7f2 f812 	bl	800892c <HAL_PCD_SetAddress>
 8016908:	4603      	mov	r3, r0
 801690a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801690c:	7bfb      	ldrb	r3, [r7, #15]
 801690e:	4618      	mov	r0, r3
 8016910:	f000 f860 	bl	80169d4 <USBD_Get_USB_Status>
 8016914:	4603      	mov	r3, r0
 8016916:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016918:	7bbb      	ldrb	r3, [r7, #14]
}
 801691a:	4618      	mov	r0, r3
 801691c:	3710      	adds	r7, #16
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}

08016922 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016922:	b580      	push	{r7, lr}
 8016924:	b086      	sub	sp, #24
 8016926:	af00      	add	r7, sp, #0
 8016928:	60f8      	str	r0, [r7, #12]
 801692a:	607a      	str	r2, [r7, #4]
 801692c:	461a      	mov	r2, r3
 801692e:	460b      	mov	r3, r1
 8016930:	72fb      	strb	r3, [r7, #11]
 8016932:	4613      	mov	r3, r2
 8016934:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016936:	2300      	movs	r3, #0
 8016938:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801693a:	2300      	movs	r3, #0
 801693c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016944:	893b      	ldrh	r3, [r7, #8]
 8016946:	7af9      	ldrb	r1, [r7, #11]
 8016948:	687a      	ldr	r2, [r7, #4]
 801694a:	f7f2 f929 	bl	8008ba0 <HAL_PCD_EP_Transmit>
 801694e:	4603      	mov	r3, r0
 8016950:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016952:	7dfb      	ldrb	r3, [r7, #23]
 8016954:	4618      	mov	r0, r3
 8016956:	f000 f83d 	bl	80169d4 <USBD_Get_USB_Status>
 801695a:	4603      	mov	r3, r0
 801695c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801695e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016960:	4618      	mov	r0, r3
 8016962:	3718      	adds	r7, #24
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b086      	sub	sp, #24
 801696c:	af00      	add	r7, sp, #0
 801696e:	60f8      	str	r0, [r7, #12]
 8016970:	607a      	str	r2, [r7, #4]
 8016972:	461a      	mov	r2, r3
 8016974:	460b      	mov	r3, r1
 8016976:	72fb      	strb	r3, [r7, #11]
 8016978:	4613      	mov	r3, r2
 801697a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801697c:	2300      	movs	r3, #0
 801697e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016980:	2300      	movs	r3, #0
 8016982:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801698a:	893b      	ldrh	r3, [r7, #8]
 801698c:	7af9      	ldrb	r1, [r7, #11]
 801698e:	687a      	ldr	r2, [r7, #4]
 8016990:	f7f2 f8a3 	bl	8008ada <HAL_PCD_EP_Receive>
 8016994:	4603      	mov	r3, r0
 8016996:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016998:	7dfb      	ldrb	r3, [r7, #23]
 801699a:	4618      	mov	r0, r3
 801699c:	f000 f81a 	bl	80169d4 <USBD_Get_USB_Status>
 80169a0:	4603      	mov	r3, r0
 80169a2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80169a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3718      	adds	r7, #24
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}

080169ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b082      	sub	sp, #8
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
 80169b6:	460b      	mov	r3, r1
 80169b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80169c0:	78fa      	ldrb	r2, [r7, #3]
 80169c2:	4611      	mov	r1, r2
 80169c4:	4618      	mov	r0, r3
 80169c6:	f7f2 f8d3 	bl	8008b70 <HAL_PCD_EP_GetRxCount>
 80169ca:	4603      	mov	r3, r0
}
 80169cc:	4618      	mov	r0, r3
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80169d4:	b480      	push	{r7}
 80169d6:	b085      	sub	sp, #20
 80169d8:	af00      	add	r7, sp, #0
 80169da:	4603      	mov	r3, r0
 80169dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169de:	2300      	movs	r3, #0
 80169e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80169e2:	79fb      	ldrb	r3, [r7, #7]
 80169e4:	2b03      	cmp	r3, #3
 80169e6:	d817      	bhi.n	8016a18 <USBD_Get_USB_Status+0x44>
 80169e8:	a201      	add	r2, pc, #4	; (adr r2, 80169f0 <USBD_Get_USB_Status+0x1c>)
 80169ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169ee:	bf00      	nop
 80169f0:	08016a01 	.word	0x08016a01
 80169f4:	08016a07 	.word	0x08016a07
 80169f8:	08016a0d 	.word	0x08016a0d
 80169fc:	08016a13 	.word	0x08016a13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016a00:	2300      	movs	r3, #0
 8016a02:	73fb      	strb	r3, [r7, #15]
    break;
 8016a04:	e00b      	b.n	8016a1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016a06:	2302      	movs	r3, #2
 8016a08:	73fb      	strb	r3, [r7, #15]
    break;
 8016a0a:	e008      	b.n	8016a1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8016a10:	e005      	b.n	8016a1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016a12:	2302      	movs	r3, #2
 8016a14:	73fb      	strb	r3, [r7, #15]
    break;
 8016a16:	e002      	b.n	8016a1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016a18:	2302      	movs	r3, #2
 8016a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8016a1c:	bf00      	nop
  }
  return usb_status;
 8016a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a20:	4618      	mov	r0, r3
 8016a22:	3714      	adds	r7, #20
 8016a24:	46bd      	mov	sp, r7
 8016a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2a:	4770      	bx	lr

08016a2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	b083      	sub	sp, #12
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	4603      	mov	r3, r0
 8016a34:	6039      	str	r1, [r7, #0]
 8016a36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016a38:	683b      	ldr	r3, [r7, #0]
 8016a3a:	2212      	movs	r2, #18
 8016a3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016a3e:	4b03      	ldr	r3, [pc, #12]	; (8016a4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8016a40:	4618      	mov	r0, r3
 8016a42:	370c      	adds	r7, #12
 8016a44:	46bd      	mov	sp, r7
 8016a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4a:	4770      	bx	lr
 8016a4c:	20000164 	.word	0x20000164

08016a50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a50:	b480      	push	{r7}
 8016a52:	b083      	sub	sp, #12
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	4603      	mov	r3, r0
 8016a58:	6039      	str	r1, [r7, #0]
 8016a5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016a5c:	683b      	ldr	r3, [r7, #0]
 8016a5e:	2204      	movs	r2, #4
 8016a60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016a62:	4b03      	ldr	r3, [pc, #12]	; (8016a70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016a64:	4618      	mov	r0, r3
 8016a66:	370c      	adds	r7, #12
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6e:	4770      	bx	lr
 8016a70:	20000178 	.word	0x20000178

08016a74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b082      	sub	sp, #8
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	6039      	str	r1, [r7, #0]
 8016a7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016a80:	79fb      	ldrb	r3, [r7, #7]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d105      	bne.n	8016a92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016a86:	683a      	ldr	r2, [r7, #0]
 8016a88:	4907      	ldr	r1, [pc, #28]	; (8016aa8 <USBD_FS_ProductStrDescriptor+0x34>)
 8016a8a:	4808      	ldr	r0, [pc, #32]	; (8016aac <USBD_FS_ProductStrDescriptor+0x38>)
 8016a8c:	f7f9 fdce 	bl	801062c <USBD_GetString>
 8016a90:	e004      	b.n	8016a9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016a92:	683a      	ldr	r2, [r7, #0]
 8016a94:	4904      	ldr	r1, [pc, #16]	; (8016aa8 <USBD_FS_ProductStrDescriptor+0x34>)
 8016a96:	4805      	ldr	r0, [pc, #20]	; (8016aac <USBD_FS_ProductStrDescriptor+0x38>)
 8016a98:	f7f9 fdc8 	bl	801062c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016a9c:	4b02      	ldr	r3, [pc, #8]	; (8016aa8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	3708      	adds	r7, #8
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}
 8016aa6:	bf00      	nop
 8016aa8:	20009f58 	.word	0x20009f58
 8016aac:	0801dfcc 	.word	0x0801dfcc

08016ab0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b082      	sub	sp, #8
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	6039      	str	r1, [r7, #0]
 8016aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016abc:	683a      	ldr	r2, [r7, #0]
 8016abe:	4904      	ldr	r1, [pc, #16]	; (8016ad0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016ac0:	4804      	ldr	r0, [pc, #16]	; (8016ad4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016ac2:	f7f9 fdb3 	bl	801062c <USBD_GetString>
  return USBD_StrDesc;
 8016ac6:	4b02      	ldr	r3, [pc, #8]	; (8016ad0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	3708      	adds	r7, #8
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd80      	pop	{r7, pc}
 8016ad0:	20009f58 	.word	0x20009f58
 8016ad4:	0801dfd8 	.word	0x0801dfd8

08016ad8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b082      	sub	sp, #8
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	4603      	mov	r3, r0
 8016ae0:	6039      	str	r1, [r7, #0]
 8016ae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016ae4:	683b      	ldr	r3, [r7, #0]
 8016ae6:	221a      	movs	r2, #26
 8016ae8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016aea:	f000 f843 	bl	8016b74 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8016aee:	4b02      	ldr	r3, [pc, #8]	; (8016af8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016af0:	4618      	mov	r0, r3
 8016af2:	3708      	adds	r7, #8
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd80      	pop	{r7, pc}
 8016af8:	2000017c 	.word	0x2000017c

08016afc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b082      	sub	sp, #8
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	4603      	mov	r3, r0
 8016b04:	6039      	str	r1, [r7, #0]
 8016b06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016b08:	79fb      	ldrb	r3, [r7, #7]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d105      	bne.n	8016b1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016b0e:	683a      	ldr	r2, [r7, #0]
 8016b10:	4907      	ldr	r1, [pc, #28]	; (8016b30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016b12:	4808      	ldr	r0, [pc, #32]	; (8016b34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016b14:	f7f9 fd8a 	bl	801062c <USBD_GetString>
 8016b18:	e004      	b.n	8016b24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016b1a:	683a      	ldr	r2, [r7, #0]
 8016b1c:	4904      	ldr	r1, [pc, #16]	; (8016b30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016b1e:	4805      	ldr	r0, [pc, #20]	; (8016b34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016b20:	f7f9 fd84 	bl	801062c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016b24:	4b02      	ldr	r3, [pc, #8]	; (8016b30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	3708      	adds	r7, #8
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bd80      	pop	{r7, pc}
 8016b2e:	bf00      	nop
 8016b30:	20009f58 	.word	0x20009f58
 8016b34:	0801dfec 	.word	0x0801dfec

08016b38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b082      	sub	sp, #8
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	4603      	mov	r3, r0
 8016b40:	6039      	str	r1, [r7, #0]
 8016b42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016b44:	79fb      	ldrb	r3, [r7, #7]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d105      	bne.n	8016b56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016b4a:	683a      	ldr	r2, [r7, #0]
 8016b4c:	4907      	ldr	r1, [pc, #28]	; (8016b6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016b4e:	4808      	ldr	r0, [pc, #32]	; (8016b70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016b50:	f7f9 fd6c 	bl	801062c <USBD_GetString>
 8016b54:	e004      	b.n	8016b60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016b56:	683a      	ldr	r2, [r7, #0]
 8016b58:	4904      	ldr	r1, [pc, #16]	; (8016b6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016b5a:	4805      	ldr	r0, [pc, #20]	; (8016b70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016b5c:	f7f9 fd66 	bl	801062c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016b60:	4b02      	ldr	r3, [pc, #8]	; (8016b6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016b62:	4618      	mov	r0, r3
 8016b64:	3708      	adds	r7, #8
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}
 8016b6a:	bf00      	nop
 8016b6c:	20009f58 	.word	0x20009f58
 8016b70:	0801dff8 	.word	0x0801dff8

08016b74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b084      	sub	sp, #16
 8016b78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016b7a:	4b0f      	ldr	r3, [pc, #60]	; (8016bb8 <Get_SerialNum+0x44>)
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016b80:	4b0e      	ldr	r3, [pc, #56]	; (8016bbc <Get_SerialNum+0x48>)
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016b86:	4b0e      	ldr	r3, [pc, #56]	; (8016bc0 <Get_SerialNum+0x4c>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016b8c:	68fa      	ldr	r2, [r7, #12]
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	4413      	add	r3, r2
 8016b92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d009      	beq.n	8016bae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016b9a:	2208      	movs	r2, #8
 8016b9c:	4909      	ldr	r1, [pc, #36]	; (8016bc4 <Get_SerialNum+0x50>)
 8016b9e:	68f8      	ldr	r0, [r7, #12]
 8016ba0:	f000 f814 	bl	8016bcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016ba4:	2204      	movs	r2, #4
 8016ba6:	4908      	ldr	r1, [pc, #32]	; (8016bc8 <Get_SerialNum+0x54>)
 8016ba8:	68b8      	ldr	r0, [r7, #8]
 8016baa:	f000 f80f 	bl	8016bcc <IntToUnicode>
  }
}
 8016bae:	bf00      	nop
 8016bb0:	3710      	adds	r7, #16
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd80      	pop	{r7, pc}
 8016bb6:	bf00      	nop
 8016bb8:	1fff7a10 	.word	0x1fff7a10
 8016bbc:	1fff7a14 	.word	0x1fff7a14
 8016bc0:	1fff7a18 	.word	0x1fff7a18
 8016bc4:	2000017e 	.word	0x2000017e
 8016bc8:	2000018e 	.word	0x2000018e

08016bcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016bcc:	b480      	push	{r7}
 8016bce:	b087      	sub	sp, #28
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	60f8      	str	r0, [r7, #12]
 8016bd4:	60b9      	str	r1, [r7, #8]
 8016bd6:	4613      	mov	r3, r2
 8016bd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016bde:	2300      	movs	r3, #0
 8016be0:	75fb      	strb	r3, [r7, #23]
 8016be2:	e027      	b.n	8016c34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	0f1b      	lsrs	r3, r3, #28
 8016be8:	2b09      	cmp	r3, #9
 8016bea:	d80b      	bhi.n	8016c04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	0f1b      	lsrs	r3, r3, #28
 8016bf0:	b2da      	uxtb	r2, r3
 8016bf2:	7dfb      	ldrb	r3, [r7, #23]
 8016bf4:	005b      	lsls	r3, r3, #1
 8016bf6:	4619      	mov	r1, r3
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	440b      	add	r3, r1
 8016bfc:	3230      	adds	r2, #48	; 0x30
 8016bfe:	b2d2      	uxtb	r2, r2
 8016c00:	701a      	strb	r2, [r3, #0]
 8016c02:	e00a      	b.n	8016c1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	0f1b      	lsrs	r3, r3, #28
 8016c08:	b2da      	uxtb	r2, r3
 8016c0a:	7dfb      	ldrb	r3, [r7, #23]
 8016c0c:	005b      	lsls	r3, r3, #1
 8016c0e:	4619      	mov	r1, r3
 8016c10:	68bb      	ldr	r3, [r7, #8]
 8016c12:	440b      	add	r3, r1
 8016c14:	3237      	adds	r2, #55	; 0x37
 8016c16:	b2d2      	uxtb	r2, r2
 8016c18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	011b      	lsls	r3, r3, #4
 8016c1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016c20:	7dfb      	ldrb	r3, [r7, #23]
 8016c22:	005b      	lsls	r3, r3, #1
 8016c24:	3301      	adds	r3, #1
 8016c26:	68ba      	ldr	r2, [r7, #8]
 8016c28:	4413      	add	r3, r2
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016c2e:	7dfb      	ldrb	r3, [r7, #23]
 8016c30:	3301      	adds	r3, #1
 8016c32:	75fb      	strb	r3, [r7, #23]
 8016c34:	7dfa      	ldrb	r2, [r7, #23]
 8016c36:	79fb      	ldrb	r3, [r7, #7]
 8016c38:	429a      	cmp	r2, r3
 8016c3a:	d3d3      	bcc.n	8016be4 <IntToUnicode+0x18>
  }
}
 8016c3c:	bf00      	nop
 8016c3e:	371c      	adds	r7, #28
 8016c40:	46bd      	mov	sp, r7
 8016c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c46:	4770      	bx	lr

08016c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8016c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016c80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8016c4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8016c4e:	e003      	b.n	8016c58 <LoopCopyDataInit>

08016c50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8016c50:	4b0c      	ldr	r3, [pc, #48]	; (8016c84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8016c52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8016c54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8016c56:	3104      	adds	r1, #4

08016c58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8016c58:	480b      	ldr	r0, [pc, #44]	; (8016c88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8016c5a:	4b0c      	ldr	r3, [pc, #48]	; (8016c8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8016c5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8016c5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8016c60:	d3f6      	bcc.n	8016c50 <CopyDataInit>
  ldr  r2, =_sbss
 8016c62:	4a0b      	ldr	r2, [pc, #44]	; (8016c90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8016c64:	e002      	b.n	8016c6c <LoopFillZerobss>

08016c66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8016c66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8016c68:	f842 3b04 	str.w	r3, [r2], #4

08016c6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8016c6c:	4b09      	ldr	r3, [pc, #36]	; (8016c94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8016c6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8016c70:	d3f9      	bcc.n	8016c66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8016c72:	f7ff fa89 	bl	8016188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016c76:	f000 f821 	bl	8016cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8016c7a:	f7fe f8c1 	bl	8014e00 <main>
  bx  lr    
 8016c7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8016c80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8016c84:	0801e600 	.word	0x0801e600
  ldr  r0, =_sdata
 8016c88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8016c8c:	2000036c 	.word	0x2000036c
  ldr  r2, =_sbss
 8016c90:	20000370 	.word	0x20000370
  ldr  r3, = _ebss
 8016c94:	2000a15c 	.word	0x2000a15c

08016c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016c98:	e7fe      	b.n	8016c98 <ADC_IRQHandler>

08016c9a <atof>:
 8016c9a:	2100      	movs	r1, #0
 8016c9c:	f001 bde0 	b.w	8018860 <strtod>

08016ca0 <atoi>:
 8016ca0:	220a      	movs	r2, #10
 8016ca2:	2100      	movs	r1, #0
 8016ca4:	f001 be7e 	b.w	80189a4 <strtol>

08016ca8 <atol>:
 8016ca8:	220a      	movs	r2, #10
 8016caa:	2100      	movs	r1, #0
 8016cac:	f001 be7a 	b.w	80189a4 <strtol>

08016cb0 <__errno>:
 8016cb0:	4b01      	ldr	r3, [pc, #4]	; (8016cb8 <__errno+0x8>)
 8016cb2:	6818      	ldr	r0, [r3, #0]
 8016cb4:	4770      	bx	lr
 8016cb6:	bf00      	nop
 8016cb8:	20000198 	.word	0x20000198

08016cbc <__libc_init_array>:
 8016cbc:	b570      	push	{r4, r5, r6, lr}
 8016cbe:	4e0d      	ldr	r6, [pc, #52]	; (8016cf4 <__libc_init_array+0x38>)
 8016cc0:	4c0d      	ldr	r4, [pc, #52]	; (8016cf8 <__libc_init_array+0x3c>)
 8016cc2:	1ba4      	subs	r4, r4, r6
 8016cc4:	10a4      	asrs	r4, r4, #2
 8016cc6:	2500      	movs	r5, #0
 8016cc8:	42a5      	cmp	r5, r4
 8016cca:	d109      	bne.n	8016ce0 <__libc_init_array+0x24>
 8016ccc:	4e0b      	ldr	r6, [pc, #44]	; (8016cfc <__libc_init_array+0x40>)
 8016cce:	4c0c      	ldr	r4, [pc, #48]	; (8016d00 <__libc_init_array+0x44>)
 8016cd0:	f006 fc9c 	bl	801d60c <_init>
 8016cd4:	1ba4      	subs	r4, r4, r6
 8016cd6:	10a4      	asrs	r4, r4, #2
 8016cd8:	2500      	movs	r5, #0
 8016cda:	42a5      	cmp	r5, r4
 8016cdc:	d105      	bne.n	8016cea <__libc_init_array+0x2e>
 8016cde:	bd70      	pop	{r4, r5, r6, pc}
 8016ce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016ce4:	4798      	blx	r3
 8016ce6:	3501      	adds	r5, #1
 8016ce8:	e7ee      	b.n	8016cc8 <__libc_init_array+0xc>
 8016cea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016cee:	4798      	blx	r3
 8016cf0:	3501      	adds	r5, #1
 8016cf2:	e7f2      	b.n	8016cda <__libc_init_array+0x1e>
 8016cf4:	0801e5f8 	.word	0x0801e5f8
 8016cf8:	0801e5f8 	.word	0x0801e5f8
 8016cfc:	0801e5f8 	.word	0x0801e5f8
 8016d00:	0801e5fc 	.word	0x0801e5fc

08016d04 <malloc>:
 8016d04:	4b02      	ldr	r3, [pc, #8]	; (8016d10 <malloc+0xc>)
 8016d06:	4601      	mov	r1, r0
 8016d08:	6818      	ldr	r0, [r3, #0]
 8016d0a:	f000 b86d 	b.w	8016de8 <_malloc_r>
 8016d0e:	bf00      	nop
 8016d10:	20000198 	.word	0x20000198

08016d14 <free>:
 8016d14:	4b02      	ldr	r3, [pc, #8]	; (8016d20 <free+0xc>)
 8016d16:	4601      	mov	r1, r0
 8016d18:	6818      	ldr	r0, [r3, #0]
 8016d1a:	f000 b817 	b.w	8016d4c <_free_r>
 8016d1e:	bf00      	nop
 8016d20:	20000198 	.word	0x20000198

08016d24 <memcpy>:
 8016d24:	b510      	push	{r4, lr}
 8016d26:	1e43      	subs	r3, r0, #1
 8016d28:	440a      	add	r2, r1
 8016d2a:	4291      	cmp	r1, r2
 8016d2c:	d100      	bne.n	8016d30 <memcpy+0xc>
 8016d2e:	bd10      	pop	{r4, pc}
 8016d30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d38:	e7f7      	b.n	8016d2a <memcpy+0x6>

08016d3a <memset>:
 8016d3a:	4402      	add	r2, r0
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	4293      	cmp	r3, r2
 8016d40:	d100      	bne.n	8016d44 <memset+0xa>
 8016d42:	4770      	bx	lr
 8016d44:	f803 1b01 	strb.w	r1, [r3], #1
 8016d48:	e7f9      	b.n	8016d3e <memset+0x4>
	...

08016d4c <_free_r>:
 8016d4c:	b538      	push	{r3, r4, r5, lr}
 8016d4e:	4605      	mov	r5, r0
 8016d50:	2900      	cmp	r1, #0
 8016d52:	d045      	beq.n	8016de0 <_free_r+0x94>
 8016d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d58:	1f0c      	subs	r4, r1, #4
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	bfb8      	it	lt
 8016d5e:	18e4      	addlt	r4, r4, r3
 8016d60:	f002 ffc6 	bl	8019cf0 <__malloc_lock>
 8016d64:	4a1f      	ldr	r2, [pc, #124]	; (8016de4 <_free_r+0x98>)
 8016d66:	6813      	ldr	r3, [r2, #0]
 8016d68:	4610      	mov	r0, r2
 8016d6a:	b933      	cbnz	r3, 8016d7a <_free_r+0x2e>
 8016d6c:	6063      	str	r3, [r4, #4]
 8016d6e:	6014      	str	r4, [r2, #0]
 8016d70:	4628      	mov	r0, r5
 8016d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d76:	f002 bfbc 	b.w	8019cf2 <__malloc_unlock>
 8016d7a:	42a3      	cmp	r3, r4
 8016d7c:	d90c      	bls.n	8016d98 <_free_r+0x4c>
 8016d7e:	6821      	ldr	r1, [r4, #0]
 8016d80:	1862      	adds	r2, r4, r1
 8016d82:	4293      	cmp	r3, r2
 8016d84:	bf04      	itt	eq
 8016d86:	681a      	ldreq	r2, [r3, #0]
 8016d88:	685b      	ldreq	r3, [r3, #4]
 8016d8a:	6063      	str	r3, [r4, #4]
 8016d8c:	bf04      	itt	eq
 8016d8e:	1852      	addeq	r2, r2, r1
 8016d90:	6022      	streq	r2, [r4, #0]
 8016d92:	6004      	str	r4, [r0, #0]
 8016d94:	e7ec      	b.n	8016d70 <_free_r+0x24>
 8016d96:	4613      	mov	r3, r2
 8016d98:	685a      	ldr	r2, [r3, #4]
 8016d9a:	b10a      	cbz	r2, 8016da0 <_free_r+0x54>
 8016d9c:	42a2      	cmp	r2, r4
 8016d9e:	d9fa      	bls.n	8016d96 <_free_r+0x4a>
 8016da0:	6819      	ldr	r1, [r3, #0]
 8016da2:	1858      	adds	r0, r3, r1
 8016da4:	42a0      	cmp	r0, r4
 8016da6:	d10b      	bne.n	8016dc0 <_free_r+0x74>
 8016da8:	6820      	ldr	r0, [r4, #0]
 8016daa:	4401      	add	r1, r0
 8016dac:	1858      	adds	r0, r3, r1
 8016dae:	4282      	cmp	r2, r0
 8016db0:	6019      	str	r1, [r3, #0]
 8016db2:	d1dd      	bne.n	8016d70 <_free_r+0x24>
 8016db4:	6810      	ldr	r0, [r2, #0]
 8016db6:	6852      	ldr	r2, [r2, #4]
 8016db8:	605a      	str	r2, [r3, #4]
 8016dba:	4401      	add	r1, r0
 8016dbc:	6019      	str	r1, [r3, #0]
 8016dbe:	e7d7      	b.n	8016d70 <_free_r+0x24>
 8016dc0:	d902      	bls.n	8016dc8 <_free_r+0x7c>
 8016dc2:	230c      	movs	r3, #12
 8016dc4:	602b      	str	r3, [r5, #0]
 8016dc6:	e7d3      	b.n	8016d70 <_free_r+0x24>
 8016dc8:	6820      	ldr	r0, [r4, #0]
 8016dca:	1821      	adds	r1, r4, r0
 8016dcc:	428a      	cmp	r2, r1
 8016dce:	bf04      	itt	eq
 8016dd0:	6811      	ldreq	r1, [r2, #0]
 8016dd2:	6852      	ldreq	r2, [r2, #4]
 8016dd4:	6062      	str	r2, [r4, #4]
 8016dd6:	bf04      	itt	eq
 8016dd8:	1809      	addeq	r1, r1, r0
 8016dda:	6021      	streq	r1, [r4, #0]
 8016ddc:	605c      	str	r4, [r3, #4]
 8016dde:	e7c7      	b.n	8016d70 <_free_r+0x24>
 8016de0:	bd38      	pop	{r3, r4, r5, pc}
 8016de2:	bf00      	nop
 8016de4:	200009f4 	.word	0x200009f4

08016de8 <_malloc_r>:
 8016de8:	b570      	push	{r4, r5, r6, lr}
 8016dea:	1ccd      	adds	r5, r1, #3
 8016dec:	f025 0503 	bic.w	r5, r5, #3
 8016df0:	3508      	adds	r5, #8
 8016df2:	2d0c      	cmp	r5, #12
 8016df4:	bf38      	it	cc
 8016df6:	250c      	movcc	r5, #12
 8016df8:	2d00      	cmp	r5, #0
 8016dfa:	4606      	mov	r6, r0
 8016dfc:	db01      	blt.n	8016e02 <_malloc_r+0x1a>
 8016dfe:	42a9      	cmp	r1, r5
 8016e00:	d903      	bls.n	8016e0a <_malloc_r+0x22>
 8016e02:	230c      	movs	r3, #12
 8016e04:	6033      	str	r3, [r6, #0]
 8016e06:	2000      	movs	r0, #0
 8016e08:	bd70      	pop	{r4, r5, r6, pc}
 8016e0a:	f002 ff71 	bl	8019cf0 <__malloc_lock>
 8016e0e:	4a21      	ldr	r2, [pc, #132]	; (8016e94 <_malloc_r+0xac>)
 8016e10:	6814      	ldr	r4, [r2, #0]
 8016e12:	4621      	mov	r1, r4
 8016e14:	b991      	cbnz	r1, 8016e3c <_malloc_r+0x54>
 8016e16:	4c20      	ldr	r4, [pc, #128]	; (8016e98 <_malloc_r+0xb0>)
 8016e18:	6823      	ldr	r3, [r4, #0]
 8016e1a:	b91b      	cbnz	r3, 8016e24 <_malloc_r+0x3c>
 8016e1c:	4630      	mov	r0, r6
 8016e1e:	f000 fe7b 	bl	8017b18 <_sbrk_r>
 8016e22:	6020      	str	r0, [r4, #0]
 8016e24:	4629      	mov	r1, r5
 8016e26:	4630      	mov	r0, r6
 8016e28:	f000 fe76 	bl	8017b18 <_sbrk_r>
 8016e2c:	1c43      	adds	r3, r0, #1
 8016e2e:	d124      	bne.n	8016e7a <_malloc_r+0x92>
 8016e30:	230c      	movs	r3, #12
 8016e32:	6033      	str	r3, [r6, #0]
 8016e34:	4630      	mov	r0, r6
 8016e36:	f002 ff5c 	bl	8019cf2 <__malloc_unlock>
 8016e3a:	e7e4      	b.n	8016e06 <_malloc_r+0x1e>
 8016e3c:	680b      	ldr	r3, [r1, #0]
 8016e3e:	1b5b      	subs	r3, r3, r5
 8016e40:	d418      	bmi.n	8016e74 <_malloc_r+0x8c>
 8016e42:	2b0b      	cmp	r3, #11
 8016e44:	d90f      	bls.n	8016e66 <_malloc_r+0x7e>
 8016e46:	600b      	str	r3, [r1, #0]
 8016e48:	50cd      	str	r5, [r1, r3]
 8016e4a:	18cc      	adds	r4, r1, r3
 8016e4c:	4630      	mov	r0, r6
 8016e4e:	f002 ff50 	bl	8019cf2 <__malloc_unlock>
 8016e52:	f104 000b 	add.w	r0, r4, #11
 8016e56:	1d23      	adds	r3, r4, #4
 8016e58:	f020 0007 	bic.w	r0, r0, #7
 8016e5c:	1ac3      	subs	r3, r0, r3
 8016e5e:	d0d3      	beq.n	8016e08 <_malloc_r+0x20>
 8016e60:	425a      	negs	r2, r3
 8016e62:	50e2      	str	r2, [r4, r3]
 8016e64:	e7d0      	b.n	8016e08 <_malloc_r+0x20>
 8016e66:	428c      	cmp	r4, r1
 8016e68:	684b      	ldr	r3, [r1, #4]
 8016e6a:	bf16      	itet	ne
 8016e6c:	6063      	strne	r3, [r4, #4]
 8016e6e:	6013      	streq	r3, [r2, #0]
 8016e70:	460c      	movne	r4, r1
 8016e72:	e7eb      	b.n	8016e4c <_malloc_r+0x64>
 8016e74:	460c      	mov	r4, r1
 8016e76:	6849      	ldr	r1, [r1, #4]
 8016e78:	e7cc      	b.n	8016e14 <_malloc_r+0x2c>
 8016e7a:	1cc4      	adds	r4, r0, #3
 8016e7c:	f024 0403 	bic.w	r4, r4, #3
 8016e80:	42a0      	cmp	r0, r4
 8016e82:	d005      	beq.n	8016e90 <_malloc_r+0xa8>
 8016e84:	1a21      	subs	r1, r4, r0
 8016e86:	4630      	mov	r0, r6
 8016e88:	f000 fe46 	bl	8017b18 <_sbrk_r>
 8016e8c:	3001      	adds	r0, #1
 8016e8e:	d0cf      	beq.n	8016e30 <_malloc_r+0x48>
 8016e90:	6025      	str	r5, [r4, #0]
 8016e92:	e7db      	b.n	8016e4c <_malloc_r+0x64>
 8016e94:	200009f4 	.word	0x200009f4
 8016e98:	200009f8 	.word	0x200009f8

08016e9c <__cvt>:
 8016e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ea0:	ec55 4b10 	vmov	r4, r5, d0
 8016ea4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016ea6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016eaa:	2d00      	cmp	r5, #0
 8016eac:	460e      	mov	r6, r1
 8016eae:	4691      	mov	r9, r2
 8016eb0:	4619      	mov	r1, r3
 8016eb2:	bfb8      	it	lt
 8016eb4:	4622      	movlt	r2, r4
 8016eb6:	462b      	mov	r3, r5
 8016eb8:	f027 0720 	bic.w	r7, r7, #32
 8016ebc:	bfbb      	ittet	lt
 8016ebe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016ec2:	461d      	movlt	r5, r3
 8016ec4:	2300      	movge	r3, #0
 8016ec6:	232d      	movlt	r3, #45	; 0x2d
 8016ec8:	bfb8      	it	lt
 8016eca:	4614      	movlt	r4, r2
 8016ecc:	2f46      	cmp	r7, #70	; 0x46
 8016ece:	700b      	strb	r3, [r1, #0]
 8016ed0:	d004      	beq.n	8016edc <__cvt+0x40>
 8016ed2:	2f45      	cmp	r7, #69	; 0x45
 8016ed4:	d100      	bne.n	8016ed8 <__cvt+0x3c>
 8016ed6:	3601      	adds	r6, #1
 8016ed8:	2102      	movs	r1, #2
 8016eda:	e000      	b.n	8016ede <__cvt+0x42>
 8016edc:	2103      	movs	r1, #3
 8016ede:	ab03      	add	r3, sp, #12
 8016ee0:	9301      	str	r3, [sp, #4]
 8016ee2:	ab02      	add	r3, sp, #8
 8016ee4:	9300      	str	r3, [sp, #0]
 8016ee6:	4632      	mov	r2, r6
 8016ee8:	4653      	mov	r3, sl
 8016eea:	ec45 4b10 	vmov	d0, r4, r5
 8016eee:	f001 fdfb 	bl	8018ae8 <_dtoa_r>
 8016ef2:	2f47      	cmp	r7, #71	; 0x47
 8016ef4:	4680      	mov	r8, r0
 8016ef6:	d102      	bne.n	8016efe <__cvt+0x62>
 8016ef8:	f019 0f01 	tst.w	r9, #1
 8016efc:	d026      	beq.n	8016f4c <__cvt+0xb0>
 8016efe:	2f46      	cmp	r7, #70	; 0x46
 8016f00:	eb08 0906 	add.w	r9, r8, r6
 8016f04:	d111      	bne.n	8016f2a <__cvt+0x8e>
 8016f06:	f898 3000 	ldrb.w	r3, [r8]
 8016f0a:	2b30      	cmp	r3, #48	; 0x30
 8016f0c:	d10a      	bne.n	8016f24 <__cvt+0x88>
 8016f0e:	2200      	movs	r2, #0
 8016f10:	2300      	movs	r3, #0
 8016f12:	4620      	mov	r0, r4
 8016f14:	4629      	mov	r1, r5
 8016f16:	f7e9 fde7 	bl	8000ae8 <__aeabi_dcmpeq>
 8016f1a:	b918      	cbnz	r0, 8016f24 <__cvt+0x88>
 8016f1c:	f1c6 0601 	rsb	r6, r6, #1
 8016f20:	f8ca 6000 	str.w	r6, [sl]
 8016f24:	f8da 3000 	ldr.w	r3, [sl]
 8016f28:	4499      	add	r9, r3
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	4620      	mov	r0, r4
 8016f30:	4629      	mov	r1, r5
 8016f32:	f7e9 fdd9 	bl	8000ae8 <__aeabi_dcmpeq>
 8016f36:	b938      	cbnz	r0, 8016f48 <__cvt+0xac>
 8016f38:	2230      	movs	r2, #48	; 0x30
 8016f3a:	9b03      	ldr	r3, [sp, #12]
 8016f3c:	454b      	cmp	r3, r9
 8016f3e:	d205      	bcs.n	8016f4c <__cvt+0xb0>
 8016f40:	1c59      	adds	r1, r3, #1
 8016f42:	9103      	str	r1, [sp, #12]
 8016f44:	701a      	strb	r2, [r3, #0]
 8016f46:	e7f8      	b.n	8016f3a <__cvt+0x9e>
 8016f48:	f8cd 900c 	str.w	r9, [sp, #12]
 8016f4c:	9b03      	ldr	r3, [sp, #12]
 8016f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016f50:	eba3 0308 	sub.w	r3, r3, r8
 8016f54:	4640      	mov	r0, r8
 8016f56:	6013      	str	r3, [r2, #0]
 8016f58:	b004      	add	sp, #16
 8016f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016f5e <__exponent>:
 8016f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f60:	2900      	cmp	r1, #0
 8016f62:	4604      	mov	r4, r0
 8016f64:	bfba      	itte	lt
 8016f66:	4249      	neglt	r1, r1
 8016f68:	232d      	movlt	r3, #45	; 0x2d
 8016f6a:	232b      	movge	r3, #43	; 0x2b
 8016f6c:	2909      	cmp	r1, #9
 8016f6e:	f804 2b02 	strb.w	r2, [r4], #2
 8016f72:	7043      	strb	r3, [r0, #1]
 8016f74:	dd20      	ble.n	8016fb8 <__exponent+0x5a>
 8016f76:	f10d 0307 	add.w	r3, sp, #7
 8016f7a:	461f      	mov	r7, r3
 8016f7c:	260a      	movs	r6, #10
 8016f7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8016f82:	fb06 1115 	mls	r1, r6, r5, r1
 8016f86:	3130      	adds	r1, #48	; 0x30
 8016f88:	2d09      	cmp	r5, #9
 8016f8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016f8e:	f103 32ff 	add.w	r2, r3, #4294967295
 8016f92:	4629      	mov	r1, r5
 8016f94:	dc09      	bgt.n	8016faa <__exponent+0x4c>
 8016f96:	3130      	adds	r1, #48	; 0x30
 8016f98:	3b02      	subs	r3, #2
 8016f9a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016f9e:	42bb      	cmp	r3, r7
 8016fa0:	4622      	mov	r2, r4
 8016fa2:	d304      	bcc.n	8016fae <__exponent+0x50>
 8016fa4:	1a10      	subs	r0, r2, r0
 8016fa6:	b003      	add	sp, #12
 8016fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016faa:	4613      	mov	r3, r2
 8016fac:	e7e7      	b.n	8016f7e <__exponent+0x20>
 8016fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fb2:	f804 2b01 	strb.w	r2, [r4], #1
 8016fb6:	e7f2      	b.n	8016f9e <__exponent+0x40>
 8016fb8:	2330      	movs	r3, #48	; 0x30
 8016fba:	4419      	add	r1, r3
 8016fbc:	7083      	strb	r3, [r0, #2]
 8016fbe:	1d02      	adds	r2, r0, #4
 8016fc0:	70c1      	strb	r1, [r0, #3]
 8016fc2:	e7ef      	b.n	8016fa4 <__exponent+0x46>

08016fc4 <_printf_float>:
 8016fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc8:	b08d      	sub	sp, #52	; 0x34
 8016fca:	460c      	mov	r4, r1
 8016fcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8016fd0:	4616      	mov	r6, r2
 8016fd2:	461f      	mov	r7, r3
 8016fd4:	4605      	mov	r5, r0
 8016fd6:	f002 fe6b 	bl	8019cb0 <_localeconv_r>
 8016fda:	6803      	ldr	r3, [r0, #0]
 8016fdc:	9304      	str	r3, [sp, #16]
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7e9 f900 	bl	80001e4 <strlen>
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8016fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8016fec:	9005      	str	r0, [sp, #20]
 8016fee:	3307      	adds	r3, #7
 8016ff0:	f023 0307 	bic.w	r3, r3, #7
 8016ff4:	f103 0208 	add.w	r2, r3, #8
 8016ff8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016ffc:	f8d4 b000 	ldr.w	fp, [r4]
 8017000:	f8c8 2000 	str.w	r2, [r8]
 8017004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017008:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801700c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017010:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017014:	9307      	str	r3, [sp, #28]
 8017016:	f8cd 8018 	str.w	r8, [sp, #24]
 801701a:	f04f 32ff 	mov.w	r2, #4294967295
 801701e:	4ba7      	ldr	r3, [pc, #668]	; (80172bc <_printf_float+0x2f8>)
 8017020:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017024:	f7e9 fd92 	bl	8000b4c <__aeabi_dcmpun>
 8017028:	bb70      	cbnz	r0, 8017088 <_printf_float+0xc4>
 801702a:	f04f 32ff 	mov.w	r2, #4294967295
 801702e:	4ba3      	ldr	r3, [pc, #652]	; (80172bc <_printf_float+0x2f8>)
 8017030:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017034:	f7e9 fd6c 	bl	8000b10 <__aeabi_dcmple>
 8017038:	bb30      	cbnz	r0, 8017088 <_printf_float+0xc4>
 801703a:	2200      	movs	r2, #0
 801703c:	2300      	movs	r3, #0
 801703e:	4640      	mov	r0, r8
 8017040:	4649      	mov	r1, r9
 8017042:	f7e9 fd5b 	bl	8000afc <__aeabi_dcmplt>
 8017046:	b110      	cbz	r0, 801704e <_printf_float+0x8a>
 8017048:	232d      	movs	r3, #45	; 0x2d
 801704a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801704e:	4a9c      	ldr	r2, [pc, #624]	; (80172c0 <_printf_float+0x2fc>)
 8017050:	4b9c      	ldr	r3, [pc, #624]	; (80172c4 <_printf_float+0x300>)
 8017052:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8017056:	bf8c      	ite	hi
 8017058:	4690      	movhi	r8, r2
 801705a:	4698      	movls	r8, r3
 801705c:	2303      	movs	r3, #3
 801705e:	f02b 0204 	bic.w	r2, fp, #4
 8017062:	6123      	str	r3, [r4, #16]
 8017064:	6022      	str	r2, [r4, #0]
 8017066:	f04f 0900 	mov.w	r9, #0
 801706a:	9700      	str	r7, [sp, #0]
 801706c:	4633      	mov	r3, r6
 801706e:	aa0b      	add	r2, sp, #44	; 0x2c
 8017070:	4621      	mov	r1, r4
 8017072:	4628      	mov	r0, r5
 8017074:	f000 f9e6 	bl	8017444 <_printf_common>
 8017078:	3001      	adds	r0, #1
 801707a:	f040 808d 	bne.w	8017198 <_printf_float+0x1d4>
 801707e:	f04f 30ff 	mov.w	r0, #4294967295
 8017082:	b00d      	add	sp, #52	; 0x34
 8017084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017088:	4642      	mov	r2, r8
 801708a:	464b      	mov	r3, r9
 801708c:	4640      	mov	r0, r8
 801708e:	4649      	mov	r1, r9
 8017090:	f7e9 fd5c 	bl	8000b4c <__aeabi_dcmpun>
 8017094:	b110      	cbz	r0, 801709c <_printf_float+0xd8>
 8017096:	4a8c      	ldr	r2, [pc, #560]	; (80172c8 <_printf_float+0x304>)
 8017098:	4b8c      	ldr	r3, [pc, #560]	; (80172cc <_printf_float+0x308>)
 801709a:	e7da      	b.n	8017052 <_printf_float+0x8e>
 801709c:	6861      	ldr	r1, [r4, #4]
 801709e:	1c4b      	adds	r3, r1, #1
 80170a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80170a4:	a80a      	add	r0, sp, #40	; 0x28
 80170a6:	d13e      	bne.n	8017126 <_printf_float+0x162>
 80170a8:	2306      	movs	r3, #6
 80170aa:	6063      	str	r3, [r4, #4]
 80170ac:	2300      	movs	r3, #0
 80170ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80170b2:	ab09      	add	r3, sp, #36	; 0x24
 80170b4:	9300      	str	r3, [sp, #0]
 80170b6:	ec49 8b10 	vmov	d0, r8, r9
 80170ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80170be:	6022      	str	r2, [r4, #0]
 80170c0:	f8cd a004 	str.w	sl, [sp, #4]
 80170c4:	6861      	ldr	r1, [r4, #4]
 80170c6:	4628      	mov	r0, r5
 80170c8:	f7ff fee8 	bl	8016e9c <__cvt>
 80170cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80170d0:	2b47      	cmp	r3, #71	; 0x47
 80170d2:	4680      	mov	r8, r0
 80170d4:	d109      	bne.n	80170ea <_printf_float+0x126>
 80170d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170d8:	1cd8      	adds	r0, r3, #3
 80170da:	db02      	blt.n	80170e2 <_printf_float+0x11e>
 80170dc:	6862      	ldr	r2, [r4, #4]
 80170de:	4293      	cmp	r3, r2
 80170e0:	dd47      	ble.n	8017172 <_printf_float+0x1ae>
 80170e2:	f1aa 0a02 	sub.w	sl, sl, #2
 80170e6:	fa5f fa8a 	uxtb.w	sl, sl
 80170ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80170ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80170f0:	d824      	bhi.n	801713c <_printf_float+0x178>
 80170f2:	3901      	subs	r1, #1
 80170f4:	4652      	mov	r2, sl
 80170f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80170fa:	9109      	str	r1, [sp, #36]	; 0x24
 80170fc:	f7ff ff2f 	bl	8016f5e <__exponent>
 8017100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017102:	1813      	adds	r3, r2, r0
 8017104:	2a01      	cmp	r2, #1
 8017106:	4681      	mov	r9, r0
 8017108:	6123      	str	r3, [r4, #16]
 801710a:	dc02      	bgt.n	8017112 <_printf_float+0x14e>
 801710c:	6822      	ldr	r2, [r4, #0]
 801710e:	07d1      	lsls	r1, r2, #31
 8017110:	d501      	bpl.n	8017116 <_printf_float+0x152>
 8017112:	3301      	adds	r3, #1
 8017114:	6123      	str	r3, [r4, #16]
 8017116:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801711a:	2b00      	cmp	r3, #0
 801711c:	d0a5      	beq.n	801706a <_printf_float+0xa6>
 801711e:	232d      	movs	r3, #45	; 0x2d
 8017120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017124:	e7a1      	b.n	801706a <_printf_float+0xa6>
 8017126:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801712a:	f000 8177 	beq.w	801741c <_printf_float+0x458>
 801712e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8017132:	d1bb      	bne.n	80170ac <_printf_float+0xe8>
 8017134:	2900      	cmp	r1, #0
 8017136:	d1b9      	bne.n	80170ac <_printf_float+0xe8>
 8017138:	2301      	movs	r3, #1
 801713a:	e7b6      	b.n	80170aa <_printf_float+0xe6>
 801713c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8017140:	d119      	bne.n	8017176 <_printf_float+0x1b2>
 8017142:	2900      	cmp	r1, #0
 8017144:	6863      	ldr	r3, [r4, #4]
 8017146:	dd0c      	ble.n	8017162 <_printf_float+0x19e>
 8017148:	6121      	str	r1, [r4, #16]
 801714a:	b913      	cbnz	r3, 8017152 <_printf_float+0x18e>
 801714c:	6822      	ldr	r2, [r4, #0]
 801714e:	07d2      	lsls	r2, r2, #31
 8017150:	d502      	bpl.n	8017158 <_printf_float+0x194>
 8017152:	3301      	adds	r3, #1
 8017154:	440b      	add	r3, r1
 8017156:	6123      	str	r3, [r4, #16]
 8017158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801715a:	65a3      	str	r3, [r4, #88]	; 0x58
 801715c:	f04f 0900 	mov.w	r9, #0
 8017160:	e7d9      	b.n	8017116 <_printf_float+0x152>
 8017162:	b913      	cbnz	r3, 801716a <_printf_float+0x1a6>
 8017164:	6822      	ldr	r2, [r4, #0]
 8017166:	07d0      	lsls	r0, r2, #31
 8017168:	d501      	bpl.n	801716e <_printf_float+0x1aa>
 801716a:	3302      	adds	r3, #2
 801716c:	e7f3      	b.n	8017156 <_printf_float+0x192>
 801716e:	2301      	movs	r3, #1
 8017170:	e7f1      	b.n	8017156 <_printf_float+0x192>
 8017172:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8017176:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801717a:	4293      	cmp	r3, r2
 801717c:	db05      	blt.n	801718a <_printf_float+0x1c6>
 801717e:	6822      	ldr	r2, [r4, #0]
 8017180:	6123      	str	r3, [r4, #16]
 8017182:	07d1      	lsls	r1, r2, #31
 8017184:	d5e8      	bpl.n	8017158 <_printf_float+0x194>
 8017186:	3301      	adds	r3, #1
 8017188:	e7e5      	b.n	8017156 <_printf_float+0x192>
 801718a:	2b00      	cmp	r3, #0
 801718c:	bfd4      	ite	le
 801718e:	f1c3 0302 	rsble	r3, r3, #2
 8017192:	2301      	movgt	r3, #1
 8017194:	4413      	add	r3, r2
 8017196:	e7de      	b.n	8017156 <_printf_float+0x192>
 8017198:	6823      	ldr	r3, [r4, #0]
 801719a:	055a      	lsls	r2, r3, #21
 801719c:	d407      	bmi.n	80171ae <_printf_float+0x1ea>
 801719e:	6923      	ldr	r3, [r4, #16]
 80171a0:	4642      	mov	r2, r8
 80171a2:	4631      	mov	r1, r6
 80171a4:	4628      	mov	r0, r5
 80171a6:	47b8      	blx	r7
 80171a8:	3001      	adds	r0, #1
 80171aa:	d12b      	bne.n	8017204 <_printf_float+0x240>
 80171ac:	e767      	b.n	801707e <_printf_float+0xba>
 80171ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80171b2:	f240 80dc 	bls.w	801736e <_printf_float+0x3aa>
 80171b6:	2200      	movs	r2, #0
 80171b8:	2300      	movs	r3, #0
 80171ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80171be:	f7e9 fc93 	bl	8000ae8 <__aeabi_dcmpeq>
 80171c2:	2800      	cmp	r0, #0
 80171c4:	d033      	beq.n	801722e <_printf_float+0x26a>
 80171c6:	2301      	movs	r3, #1
 80171c8:	4a41      	ldr	r2, [pc, #260]	; (80172d0 <_printf_float+0x30c>)
 80171ca:	4631      	mov	r1, r6
 80171cc:	4628      	mov	r0, r5
 80171ce:	47b8      	blx	r7
 80171d0:	3001      	adds	r0, #1
 80171d2:	f43f af54 	beq.w	801707e <_printf_float+0xba>
 80171d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80171da:	429a      	cmp	r2, r3
 80171dc:	db02      	blt.n	80171e4 <_printf_float+0x220>
 80171de:	6823      	ldr	r3, [r4, #0]
 80171e0:	07d8      	lsls	r0, r3, #31
 80171e2:	d50f      	bpl.n	8017204 <_printf_float+0x240>
 80171e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80171e8:	4631      	mov	r1, r6
 80171ea:	4628      	mov	r0, r5
 80171ec:	47b8      	blx	r7
 80171ee:	3001      	adds	r0, #1
 80171f0:	f43f af45 	beq.w	801707e <_printf_float+0xba>
 80171f4:	f04f 0800 	mov.w	r8, #0
 80171f8:	f104 091a 	add.w	r9, r4, #26
 80171fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171fe:	3b01      	subs	r3, #1
 8017200:	4543      	cmp	r3, r8
 8017202:	dc09      	bgt.n	8017218 <_printf_float+0x254>
 8017204:	6823      	ldr	r3, [r4, #0]
 8017206:	079b      	lsls	r3, r3, #30
 8017208:	f100 8103 	bmi.w	8017412 <_printf_float+0x44e>
 801720c:	68e0      	ldr	r0, [r4, #12]
 801720e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017210:	4298      	cmp	r0, r3
 8017212:	bfb8      	it	lt
 8017214:	4618      	movlt	r0, r3
 8017216:	e734      	b.n	8017082 <_printf_float+0xbe>
 8017218:	2301      	movs	r3, #1
 801721a:	464a      	mov	r2, r9
 801721c:	4631      	mov	r1, r6
 801721e:	4628      	mov	r0, r5
 8017220:	47b8      	blx	r7
 8017222:	3001      	adds	r0, #1
 8017224:	f43f af2b 	beq.w	801707e <_printf_float+0xba>
 8017228:	f108 0801 	add.w	r8, r8, #1
 801722c:	e7e6      	b.n	80171fc <_printf_float+0x238>
 801722e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017230:	2b00      	cmp	r3, #0
 8017232:	dc2b      	bgt.n	801728c <_printf_float+0x2c8>
 8017234:	2301      	movs	r3, #1
 8017236:	4a26      	ldr	r2, [pc, #152]	; (80172d0 <_printf_float+0x30c>)
 8017238:	4631      	mov	r1, r6
 801723a:	4628      	mov	r0, r5
 801723c:	47b8      	blx	r7
 801723e:	3001      	adds	r0, #1
 8017240:	f43f af1d 	beq.w	801707e <_printf_float+0xba>
 8017244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017246:	b923      	cbnz	r3, 8017252 <_printf_float+0x28e>
 8017248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801724a:	b913      	cbnz	r3, 8017252 <_printf_float+0x28e>
 801724c:	6823      	ldr	r3, [r4, #0]
 801724e:	07d9      	lsls	r1, r3, #31
 8017250:	d5d8      	bpl.n	8017204 <_printf_float+0x240>
 8017252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017256:	4631      	mov	r1, r6
 8017258:	4628      	mov	r0, r5
 801725a:	47b8      	blx	r7
 801725c:	3001      	adds	r0, #1
 801725e:	f43f af0e 	beq.w	801707e <_printf_float+0xba>
 8017262:	f04f 0900 	mov.w	r9, #0
 8017266:	f104 0a1a 	add.w	sl, r4, #26
 801726a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801726c:	425b      	negs	r3, r3
 801726e:	454b      	cmp	r3, r9
 8017270:	dc01      	bgt.n	8017276 <_printf_float+0x2b2>
 8017272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017274:	e794      	b.n	80171a0 <_printf_float+0x1dc>
 8017276:	2301      	movs	r3, #1
 8017278:	4652      	mov	r2, sl
 801727a:	4631      	mov	r1, r6
 801727c:	4628      	mov	r0, r5
 801727e:	47b8      	blx	r7
 8017280:	3001      	adds	r0, #1
 8017282:	f43f aefc 	beq.w	801707e <_printf_float+0xba>
 8017286:	f109 0901 	add.w	r9, r9, #1
 801728a:	e7ee      	b.n	801726a <_printf_float+0x2a6>
 801728c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801728e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017290:	429a      	cmp	r2, r3
 8017292:	bfa8      	it	ge
 8017294:	461a      	movge	r2, r3
 8017296:	2a00      	cmp	r2, #0
 8017298:	4691      	mov	r9, r2
 801729a:	dd07      	ble.n	80172ac <_printf_float+0x2e8>
 801729c:	4613      	mov	r3, r2
 801729e:	4631      	mov	r1, r6
 80172a0:	4642      	mov	r2, r8
 80172a2:	4628      	mov	r0, r5
 80172a4:	47b8      	blx	r7
 80172a6:	3001      	adds	r0, #1
 80172a8:	f43f aee9 	beq.w	801707e <_printf_float+0xba>
 80172ac:	f104 031a 	add.w	r3, r4, #26
 80172b0:	f04f 0b00 	mov.w	fp, #0
 80172b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80172b8:	9306      	str	r3, [sp, #24]
 80172ba:	e015      	b.n	80172e8 <_printf_float+0x324>
 80172bc:	7fefffff 	.word	0x7fefffff
 80172c0:	0801e0c0 	.word	0x0801e0c0
 80172c4:	0801e0bc 	.word	0x0801e0bc
 80172c8:	0801e0c8 	.word	0x0801e0c8
 80172cc:	0801e0c4 	.word	0x0801e0c4
 80172d0:	0801e0cc 	.word	0x0801e0cc
 80172d4:	2301      	movs	r3, #1
 80172d6:	9a06      	ldr	r2, [sp, #24]
 80172d8:	4631      	mov	r1, r6
 80172da:	4628      	mov	r0, r5
 80172dc:	47b8      	blx	r7
 80172de:	3001      	adds	r0, #1
 80172e0:	f43f aecd 	beq.w	801707e <_printf_float+0xba>
 80172e4:	f10b 0b01 	add.w	fp, fp, #1
 80172e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80172ec:	ebaa 0309 	sub.w	r3, sl, r9
 80172f0:	455b      	cmp	r3, fp
 80172f2:	dcef      	bgt.n	80172d4 <_printf_float+0x310>
 80172f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80172f8:	429a      	cmp	r2, r3
 80172fa:	44d0      	add	r8, sl
 80172fc:	db15      	blt.n	801732a <_printf_float+0x366>
 80172fe:	6823      	ldr	r3, [r4, #0]
 8017300:	07da      	lsls	r2, r3, #31
 8017302:	d412      	bmi.n	801732a <_printf_float+0x366>
 8017304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017306:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017308:	eba3 020a 	sub.w	r2, r3, sl
 801730c:	eba3 0a01 	sub.w	sl, r3, r1
 8017310:	4592      	cmp	sl, r2
 8017312:	bfa8      	it	ge
 8017314:	4692      	movge	sl, r2
 8017316:	f1ba 0f00 	cmp.w	sl, #0
 801731a:	dc0e      	bgt.n	801733a <_printf_float+0x376>
 801731c:	f04f 0800 	mov.w	r8, #0
 8017320:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017324:	f104 091a 	add.w	r9, r4, #26
 8017328:	e019      	b.n	801735e <_printf_float+0x39a>
 801732a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801732e:	4631      	mov	r1, r6
 8017330:	4628      	mov	r0, r5
 8017332:	47b8      	blx	r7
 8017334:	3001      	adds	r0, #1
 8017336:	d1e5      	bne.n	8017304 <_printf_float+0x340>
 8017338:	e6a1      	b.n	801707e <_printf_float+0xba>
 801733a:	4653      	mov	r3, sl
 801733c:	4642      	mov	r2, r8
 801733e:	4631      	mov	r1, r6
 8017340:	4628      	mov	r0, r5
 8017342:	47b8      	blx	r7
 8017344:	3001      	adds	r0, #1
 8017346:	d1e9      	bne.n	801731c <_printf_float+0x358>
 8017348:	e699      	b.n	801707e <_printf_float+0xba>
 801734a:	2301      	movs	r3, #1
 801734c:	464a      	mov	r2, r9
 801734e:	4631      	mov	r1, r6
 8017350:	4628      	mov	r0, r5
 8017352:	47b8      	blx	r7
 8017354:	3001      	adds	r0, #1
 8017356:	f43f ae92 	beq.w	801707e <_printf_float+0xba>
 801735a:	f108 0801 	add.w	r8, r8, #1
 801735e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017362:	1a9b      	subs	r3, r3, r2
 8017364:	eba3 030a 	sub.w	r3, r3, sl
 8017368:	4543      	cmp	r3, r8
 801736a:	dcee      	bgt.n	801734a <_printf_float+0x386>
 801736c:	e74a      	b.n	8017204 <_printf_float+0x240>
 801736e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017370:	2a01      	cmp	r2, #1
 8017372:	dc01      	bgt.n	8017378 <_printf_float+0x3b4>
 8017374:	07db      	lsls	r3, r3, #31
 8017376:	d53a      	bpl.n	80173ee <_printf_float+0x42a>
 8017378:	2301      	movs	r3, #1
 801737a:	4642      	mov	r2, r8
 801737c:	4631      	mov	r1, r6
 801737e:	4628      	mov	r0, r5
 8017380:	47b8      	blx	r7
 8017382:	3001      	adds	r0, #1
 8017384:	f43f ae7b 	beq.w	801707e <_printf_float+0xba>
 8017388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801738c:	4631      	mov	r1, r6
 801738e:	4628      	mov	r0, r5
 8017390:	47b8      	blx	r7
 8017392:	3001      	adds	r0, #1
 8017394:	f108 0801 	add.w	r8, r8, #1
 8017398:	f43f ae71 	beq.w	801707e <_printf_float+0xba>
 801739c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801739e:	2200      	movs	r2, #0
 80173a0:	f103 3aff 	add.w	sl, r3, #4294967295
 80173a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80173a8:	2300      	movs	r3, #0
 80173aa:	f7e9 fb9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80173ae:	b9c8      	cbnz	r0, 80173e4 <_printf_float+0x420>
 80173b0:	4653      	mov	r3, sl
 80173b2:	4642      	mov	r2, r8
 80173b4:	4631      	mov	r1, r6
 80173b6:	4628      	mov	r0, r5
 80173b8:	47b8      	blx	r7
 80173ba:	3001      	adds	r0, #1
 80173bc:	d10e      	bne.n	80173dc <_printf_float+0x418>
 80173be:	e65e      	b.n	801707e <_printf_float+0xba>
 80173c0:	2301      	movs	r3, #1
 80173c2:	4652      	mov	r2, sl
 80173c4:	4631      	mov	r1, r6
 80173c6:	4628      	mov	r0, r5
 80173c8:	47b8      	blx	r7
 80173ca:	3001      	adds	r0, #1
 80173cc:	f43f ae57 	beq.w	801707e <_printf_float+0xba>
 80173d0:	f108 0801 	add.w	r8, r8, #1
 80173d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173d6:	3b01      	subs	r3, #1
 80173d8:	4543      	cmp	r3, r8
 80173da:	dcf1      	bgt.n	80173c0 <_printf_float+0x3fc>
 80173dc:	464b      	mov	r3, r9
 80173de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80173e2:	e6de      	b.n	80171a2 <_printf_float+0x1de>
 80173e4:	f04f 0800 	mov.w	r8, #0
 80173e8:	f104 0a1a 	add.w	sl, r4, #26
 80173ec:	e7f2      	b.n	80173d4 <_printf_float+0x410>
 80173ee:	2301      	movs	r3, #1
 80173f0:	e7df      	b.n	80173b2 <_printf_float+0x3ee>
 80173f2:	2301      	movs	r3, #1
 80173f4:	464a      	mov	r2, r9
 80173f6:	4631      	mov	r1, r6
 80173f8:	4628      	mov	r0, r5
 80173fa:	47b8      	blx	r7
 80173fc:	3001      	adds	r0, #1
 80173fe:	f43f ae3e 	beq.w	801707e <_printf_float+0xba>
 8017402:	f108 0801 	add.w	r8, r8, #1
 8017406:	68e3      	ldr	r3, [r4, #12]
 8017408:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801740a:	1a9b      	subs	r3, r3, r2
 801740c:	4543      	cmp	r3, r8
 801740e:	dcf0      	bgt.n	80173f2 <_printf_float+0x42e>
 8017410:	e6fc      	b.n	801720c <_printf_float+0x248>
 8017412:	f04f 0800 	mov.w	r8, #0
 8017416:	f104 0919 	add.w	r9, r4, #25
 801741a:	e7f4      	b.n	8017406 <_printf_float+0x442>
 801741c:	2900      	cmp	r1, #0
 801741e:	f43f ae8b 	beq.w	8017138 <_printf_float+0x174>
 8017422:	2300      	movs	r3, #0
 8017424:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8017428:	ab09      	add	r3, sp, #36	; 0x24
 801742a:	9300      	str	r3, [sp, #0]
 801742c:	ec49 8b10 	vmov	d0, r8, r9
 8017430:	6022      	str	r2, [r4, #0]
 8017432:	f8cd a004 	str.w	sl, [sp, #4]
 8017436:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801743a:	4628      	mov	r0, r5
 801743c:	f7ff fd2e 	bl	8016e9c <__cvt>
 8017440:	4680      	mov	r8, r0
 8017442:	e648      	b.n	80170d6 <_printf_float+0x112>

08017444 <_printf_common>:
 8017444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017448:	4691      	mov	r9, r2
 801744a:	461f      	mov	r7, r3
 801744c:	688a      	ldr	r2, [r1, #8]
 801744e:	690b      	ldr	r3, [r1, #16]
 8017450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017454:	4293      	cmp	r3, r2
 8017456:	bfb8      	it	lt
 8017458:	4613      	movlt	r3, r2
 801745a:	f8c9 3000 	str.w	r3, [r9]
 801745e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017462:	4606      	mov	r6, r0
 8017464:	460c      	mov	r4, r1
 8017466:	b112      	cbz	r2, 801746e <_printf_common+0x2a>
 8017468:	3301      	adds	r3, #1
 801746a:	f8c9 3000 	str.w	r3, [r9]
 801746e:	6823      	ldr	r3, [r4, #0]
 8017470:	0699      	lsls	r1, r3, #26
 8017472:	bf42      	ittt	mi
 8017474:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017478:	3302      	addmi	r3, #2
 801747a:	f8c9 3000 	strmi.w	r3, [r9]
 801747e:	6825      	ldr	r5, [r4, #0]
 8017480:	f015 0506 	ands.w	r5, r5, #6
 8017484:	d107      	bne.n	8017496 <_printf_common+0x52>
 8017486:	f104 0a19 	add.w	sl, r4, #25
 801748a:	68e3      	ldr	r3, [r4, #12]
 801748c:	f8d9 2000 	ldr.w	r2, [r9]
 8017490:	1a9b      	subs	r3, r3, r2
 8017492:	42ab      	cmp	r3, r5
 8017494:	dc28      	bgt.n	80174e8 <_printf_common+0xa4>
 8017496:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801749a:	6822      	ldr	r2, [r4, #0]
 801749c:	3300      	adds	r3, #0
 801749e:	bf18      	it	ne
 80174a0:	2301      	movne	r3, #1
 80174a2:	0692      	lsls	r2, r2, #26
 80174a4:	d42d      	bmi.n	8017502 <_printf_common+0xbe>
 80174a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80174aa:	4639      	mov	r1, r7
 80174ac:	4630      	mov	r0, r6
 80174ae:	47c0      	blx	r8
 80174b0:	3001      	adds	r0, #1
 80174b2:	d020      	beq.n	80174f6 <_printf_common+0xb2>
 80174b4:	6823      	ldr	r3, [r4, #0]
 80174b6:	68e5      	ldr	r5, [r4, #12]
 80174b8:	f8d9 2000 	ldr.w	r2, [r9]
 80174bc:	f003 0306 	and.w	r3, r3, #6
 80174c0:	2b04      	cmp	r3, #4
 80174c2:	bf08      	it	eq
 80174c4:	1aad      	subeq	r5, r5, r2
 80174c6:	68a3      	ldr	r3, [r4, #8]
 80174c8:	6922      	ldr	r2, [r4, #16]
 80174ca:	bf0c      	ite	eq
 80174cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80174d0:	2500      	movne	r5, #0
 80174d2:	4293      	cmp	r3, r2
 80174d4:	bfc4      	itt	gt
 80174d6:	1a9b      	subgt	r3, r3, r2
 80174d8:	18ed      	addgt	r5, r5, r3
 80174da:	f04f 0900 	mov.w	r9, #0
 80174de:	341a      	adds	r4, #26
 80174e0:	454d      	cmp	r5, r9
 80174e2:	d11a      	bne.n	801751a <_printf_common+0xd6>
 80174e4:	2000      	movs	r0, #0
 80174e6:	e008      	b.n	80174fa <_printf_common+0xb6>
 80174e8:	2301      	movs	r3, #1
 80174ea:	4652      	mov	r2, sl
 80174ec:	4639      	mov	r1, r7
 80174ee:	4630      	mov	r0, r6
 80174f0:	47c0      	blx	r8
 80174f2:	3001      	adds	r0, #1
 80174f4:	d103      	bne.n	80174fe <_printf_common+0xba>
 80174f6:	f04f 30ff 	mov.w	r0, #4294967295
 80174fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174fe:	3501      	adds	r5, #1
 8017500:	e7c3      	b.n	801748a <_printf_common+0x46>
 8017502:	18e1      	adds	r1, r4, r3
 8017504:	1c5a      	adds	r2, r3, #1
 8017506:	2030      	movs	r0, #48	; 0x30
 8017508:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801750c:	4422      	add	r2, r4
 801750e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017512:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017516:	3302      	adds	r3, #2
 8017518:	e7c5      	b.n	80174a6 <_printf_common+0x62>
 801751a:	2301      	movs	r3, #1
 801751c:	4622      	mov	r2, r4
 801751e:	4639      	mov	r1, r7
 8017520:	4630      	mov	r0, r6
 8017522:	47c0      	blx	r8
 8017524:	3001      	adds	r0, #1
 8017526:	d0e6      	beq.n	80174f6 <_printf_common+0xb2>
 8017528:	f109 0901 	add.w	r9, r9, #1
 801752c:	e7d8      	b.n	80174e0 <_printf_common+0x9c>
	...

08017530 <_printf_i>:
 8017530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017534:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017538:	460c      	mov	r4, r1
 801753a:	7e09      	ldrb	r1, [r1, #24]
 801753c:	b085      	sub	sp, #20
 801753e:	296e      	cmp	r1, #110	; 0x6e
 8017540:	4617      	mov	r7, r2
 8017542:	4606      	mov	r6, r0
 8017544:	4698      	mov	r8, r3
 8017546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017548:	f000 80b3 	beq.w	80176b2 <_printf_i+0x182>
 801754c:	d822      	bhi.n	8017594 <_printf_i+0x64>
 801754e:	2963      	cmp	r1, #99	; 0x63
 8017550:	d036      	beq.n	80175c0 <_printf_i+0x90>
 8017552:	d80a      	bhi.n	801756a <_printf_i+0x3a>
 8017554:	2900      	cmp	r1, #0
 8017556:	f000 80b9 	beq.w	80176cc <_printf_i+0x19c>
 801755a:	2958      	cmp	r1, #88	; 0x58
 801755c:	f000 8083 	beq.w	8017666 <_printf_i+0x136>
 8017560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017564:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017568:	e032      	b.n	80175d0 <_printf_i+0xa0>
 801756a:	2964      	cmp	r1, #100	; 0x64
 801756c:	d001      	beq.n	8017572 <_printf_i+0x42>
 801756e:	2969      	cmp	r1, #105	; 0x69
 8017570:	d1f6      	bne.n	8017560 <_printf_i+0x30>
 8017572:	6820      	ldr	r0, [r4, #0]
 8017574:	6813      	ldr	r3, [r2, #0]
 8017576:	0605      	lsls	r5, r0, #24
 8017578:	f103 0104 	add.w	r1, r3, #4
 801757c:	d52a      	bpl.n	80175d4 <_printf_i+0xa4>
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	6011      	str	r1, [r2, #0]
 8017582:	2b00      	cmp	r3, #0
 8017584:	da03      	bge.n	801758e <_printf_i+0x5e>
 8017586:	222d      	movs	r2, #45	; 0x2d
 8017588:	425b      	negs	r3, r3
 801758a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801758e:	486f      	ldr	r0, [pc, #444]	; (801774c <_printf_i+0x21c>)
 8017590:	220a      	movs	r2, #10
 8017592:	e039      	b.n	8017608 <_printf_i+0xd8>
 8017594:	2973      	cmp	r1, #115	; 0x73
 8017596:	f000 809d 	beq.w	80176d4 <_printf_i+0x1a4>
 801759a:	d808      	bhi.n	80175ae <_printf_i+0x7e>
 801759c:	296f      	cmp	r1, #111	; 0x6f
 801759e:	d020      	beq.n	80175e2 <_printf_i+0xb2>
 80175a0:	2970      	cmp	r1, #112	; 0x70
 80175a2:	d1dd      	bne.n	8017560 <_printf_i+0x30>
 80175a4:	6823      	ldr	r3, [r4, #0]
 80175a6:	f043 0320 	orr.w	r3, r3, #32
 80175aa:	6023      	str	r3, [r4, #0]
 80175ac:	e003      	b.n	80175b6 <_printf_i+0x86>
 80175ae:	2975      	cmp	r1, #117	; 0x75
 80175b0:	d017      	beq.n	80175e2 <_printf_i+0xb2>
 80175b2:	2978      	cmp	r1, #120	; 0x78
 80175b4:	d1d4      	bne.n	8017560 <_printf_i+0x30>
 80175b6:	2378      	movs	r3, #120	; 0x78
 80175b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80175bc:	4864      	ldr	r0, [pc, #400]	; (8017750 <_printf_i+0x220>)
 80175be:	e055      	b.n	801766c <_printf_i+0x13c>
 80175c0:	6813      	ldr	r3, [r2, #0]
 80175c2:	1d19      	adds	r1, r3, #4
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	6011      	str	r1, [r2, #0]
 80175c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80175cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80175d0:	2301      	movs	r3, #1
 80175d2:	e08c      	b.n	80176ee <_printf_i+0x1be>
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	6011      	str	r1, [r2, #0]
 80175d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80175dc:	bf18      	it	ne
 80175de:	b21b      	sxthne	r3, r3
 80175e0:	e7cf      	b.n	8017582 <_printf_i+0x52>
 80175e2:	6813      	ldr	r3, [r2, #0]
 80175e4:	6825      	ldr	r5, [r4, #0]
 80175e6:	1d18      	adds	r0, r3, #4
 80175e8:	6010      	str	r0, [r2, #0]
 80175ea:	0628      	lsls	r0, r5, #24
 80175ec:	d501      	bpl.n	80175f2 <_printf_i+0xc2>
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	e002      	b.n	80175f8 <_printf_i+0xc8>
 80175f2:	0668      	lsls	r0, r5, #25
 80175f4:	d5fb      	bpl.n	80175ee <_printf_i+0xbe>
 80175f6:	881b      	ldrh	r3, [r3, #0]
 80175f8:	4854      	ldr	r0, [pc, #336]	; (801774c <_printf_i+0x21c>)
 80175fa:	296f      	cmp	r1, #111	; 0x6f
 80175fc:	bf14      	ite	ne
 80175fe:	220a      	movne	r2, #10
 8017600:	2208      	moveq	r2, #8
 8017602:	2100      	movs	r1, #0
 8017604:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017608:	6865      	ldr	r5, [r4, #4]
 801760a:	60a5      	str	r5, [r4, #8]
 801760c:	2d00      	cmp	r5, #0
 801760e:	f2c0 8095 	blt.w	801773c <_printf_i+0x20c>
 8017612:	6821      	ldr	r1, [r4, #0]
 8017614:	f021 0104 	bic.w	r1, r1, #4
 8017618:	6021      	str	r1, [r4, #0]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d13d      	bne.n	801769a <_printf_i+0x16a>
 801761e:	2d00      	cmp	r5, #0
 8017620:	f040 808e 	bne.w	8017740 <_printf_i+0x210>
 8017624:	4665      	mov	r5, ip
 8017626:	2a08      	cmp	r2, #8
 8017628:	d10b      	bne.n	8017642 <_printf_i+0x112>
 801762a:	6823      	ldr	r3, [r4, #0]
 801762c:	07db      	lsls	r3, r3, #31
 801762e:	d508      	bpl.n	8017642 <_printf_i+0x112>
 8017630:	6923      	ldr	r3, [r4, #16]
 8017632:	6862      	ldr	r2, [r4, #4]
 8017634:	429a      	cmp	r2, r3
 8017636:	bfde      	ittt	le
 8017638:	2330      	movle	r3, #48	; 0x30
 801763a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801763e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017642:	ebac 0305 	sub.w	r3, ip, r5
 8017646:	6123      	str	r3, [r4, #16]
 8017648:	f8cd 8000 	str.w	r8, [sp]
 801764c:	463b      	mov	r3, r7
 801764e:	aa03      	add	r2, sp, #12
 8017650:	4621      	mov	r1, r4
 8017652:	4630      	mov	r0, r6
 8017654:	f7ff fef6 	bl	8017444 <_printf_common>
 8017658:	3001      	adds	r0, #1
 801765a:	d14d      	bne.n	80176f8 <_printf_i+0x1c8>
 801765c:	f04f 30ff 	mov.w	r0, #4294967295
 8017660:	b005      	add	sp, #20
 8017662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017666:	4839      	ldr	r0, [pc, #228]	; (801774c <_printf_i+0x21c>)
 8017668:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801766c:	6813      	ldr	r3, [r2, #0]
 801766e:	6821      	ldr	r1, [r4, #0]
 8017670:	1d1d      	adds	r5, r3, #4
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	6015      	str	r5, [r2, #0]
 8017676:	060a      	lsls	r2, r1, #24
 8017678:	d50b      	bpl.n	8017692 <_printf_i+0x162>
 801767a:	07ca      	lsls	r2, r1, #31
 801767c:	bf44      	itt	mi
 801767e:	f041 0120 	orrmi.w	r1, r1, #32
 8017682:	6021      	strmi	r1, [r4, #0]
 8017684:	b91b      	cbnz	r3, 801768e <_printf_i+0x15e>
 8017686:	6822      	ldr	r2, [r4, #0]
 8017688:	f022 0220 	bic.w	r2, r2, #32
 801768c:	6022      	str	r2, [r4, #0]
 801768e:	2210      	movs	r2, #16
 8017690:	e7b7      	b.n	8017602 <_printf_i+0xd2>
 8017692:	064d      	lsls	r5, r1, #25
 8017694:	bf48      	it	mi
 8017696:	b29b      	uxthmi	r3, r3
 8017698:	e7ef      	b.n	801767a <_printf_i+0x14a>
 801769a:	4665      	mov	r5, ip
 801769c:	fbb3 f1f2 	udiv	r1, r3, r2
 80176a0:	fb02 3311 	mls	r3, r2, r1, r3
 80176a4:	5cc3      	ldrb	r3, [r0, r3]
 80176a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80176aa:	460b      	mov	r3, r1
 80176ac:	2900      	cmp	r1, #0
 80176ae:	d1f5      	bne.n	801769c <_printf_i+0x16c>
 80176b0:	e7b9      	b.n	8017626 <_printf_i+0xf6>
 80176b2:	6813      	ldr	r3, [r2, #0]
 80176b4:	6825      	ldr	r5, [r4, #0]
 80176b6:	6961      	ldr	r1, [r4, #20]
 80176b8:	1d18      	adds	r0, r3, #4
 80176ba:	6010      	str	r0, [r2, #0]
 80176bc:	0628      	lsls	r0, r5, #24
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	d501      	bpl.n	80176c6 <_printf_i+0x196>
 80176c2:	6019      	str	r1, [r3, #0]
 80176c4:	e002      	b.n	80176cc <_printf_i+0x19c>
 80176c6:	066a      	lsls	r2, r5, #25
 80176c8:	d5fb      	bpl.n	80176c2 <_printf_i+0x192>
 80176ca:	8019      	strh	r1, [r3, #0]
 80176cc:	2300      	movs	r3, #0
 80176ce:	6123      	str	r3, [r4, #16]
 80176d0:	4665      	mov	r5, ip
 80176d2:	e7b9      	b.n	8017648 <_printf_i+0x118>
 80176d4:	6813      	ldr	r3, [r2, #0]
 80176d6:	1d19      	adds	r1, r3, #4
 80176d8:	6011      	str	r1, [r2, #0]
 80176da:	681d      	ldr	r5, [r3, #0]
 80176dc:	6862      	ldr	r2, [r4, #4]
 80176de:	2100      	movs	r1, #0
 80176e0:	4628      	mov	r0, r5
 80176e2:	f7e8 fd8d 	bl	8000200 <memchr>
 80176e6:	b108      	cbz	r0, 80176ec <_printf_i+0x1bc>
 80176e8:	1b40      	subs	r0, r0, r5
 80176ea:	6060      	str	r0, [r4, #4]
 80176ec:	6863      	ldr	r3, [r4, #4]
 80176ee:	6123      	str	r3, [r4, #16]
 80176f0:	2300      	movs	r3, #0
 80176f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176f6:	e7a7      	b.n	8017648 <_printf_i+0x118>
 80176f8:	6923      	ldr	r3, [r4, #16]
 80176fa:	462a      	mov	r2, r5
 80176fc:	4639      	mov	r1, r7
 80176fe:	4630      	mov	r0, r6
 8017700:	47c0      	blx	r8
 8017702:	3001      	adds	r0, #1
 8017704:	d0aa      	beq.n	801765c <_printf_i+0x12c>
 8017706:	6823      	ldr	r3, [r4, #0]
 8017708:	079b      	lsls	r3, r3, #30
 801770a:	d413      	bmi.n	8017734 <_printf_i+0x204>
 801770c:	68e0      	ldr	r0, [r4, #12]
 801770e:	9b03      	ldr	r3, [sp, #12]
 8017710:	4298      	cmp	r0, r3
 8017712:	bfb8      	it	lt
 8017714:	4618      	movlt	r0, r3
 8017716:	e7a3      	b.n	8017660 <_printf_i+0x130>
 8017718:	2301      	movs	r3, #1
 801771a:	464a      	mov	r2, r9
 801771c:	4639      	mov	r1, r7
 801771e:	4630      	mov	r0, r6
 8017720:	47c0      	blx	r8
 8017722:	3001      	adds	r0, #1
 8017724:	d09a      	beq.n	801765c <_printf_i+0x12c>
 8017726:	3501      	adds	r5, #1
 8017728:	68e3      	ldr	r3, [r4, #12]
 801772a:	9a03      	ldr	r2, [sp, #12]
 801772c:	1a9b      	subs	r3, r3, r2
 801772e:	42ab      	cmp	r3, r5
 8017730:	dcf2      	bgt.n	8017718 <_printf_i+0x1e8>
 8017732:	e7eb      	b.n	801770c <_printf_i+0x1dc>
 8017734:	2500      	movs	r5, #0
 8017736:	f104 0919 	add.w	r9, r4, #25
 801773a:	e7f5      	b.n	8017728 <_printf_i+0x1f8>
 801773c:	2b00      	cmp	r3, #0
 801773e:	d1ac      	bne.n	801769a <_printf_i+0x16a>
 8017740:	7803      	ldrb	r3, [r0, #0]
 8017742:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017746:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801774a:	e76c      	b.n	8017626 <_printf_i+0xf6>
 801774c:	0801e0ce 	.word	0x0801e0ce
 8017750:	0801e0df 	.word	0x0801e0df

08017754 <_scanf_float>:
 8017754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017758:	469a      	mov	sl, r3
 801775a:	688b      	ldr	r3, [r1, #8]
 801775c:	4616      	mov	r6, r2
 801775e:	1e5a      	subs	r2, r3, #1
 8017760:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017764:	b087      	sub	sp, #28
 8017766:	bf83      	ittte	hi
 8017768:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801776c:	189b      	addhi	r3, r3, r2
 801776e:	9301      	strhi	r3, [sp, #4]
 8017770:	2300      	movls	r3, #0
 8017772:	bf86      	itte	hi
 8017774:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017778:	608b      	strhi	r3, [r1, #8]
 801777a:	9301      	strls	r3, [sp, #4]
 801777c:	680b      	ldr	r3, [r1, #0]
 801777e:	4688      	mov	r8, r1
 8017780:	f04f 0b00 	mov.w	fp, #0
 8017784:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017788:	f848 3b1c 	str.w	r3, [r8], #28
 801778c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8017790:	4607      	mov	r7, r0
 8017792:	460c      	mov	r4, r1
 8017794:	4645      	mov	r5, r8
 8017796:	465a      	mov	r2, fp
 8017798:	46d9      	mov	r9, fp
 801779a:	f8cd b008 	str.w	fp, [sp, #8]
 801779e:	68a1      	ldr	r1, [r4, #8]
 80177a0:	b181      	cbz	r1, 80177c4 <_scanf_float+0x70>
 80177a2:	6833      	ldr	r3, [r6, #0]
 80177a4:	781b      	ldrb	r3, [r3, #0]
 80177a6:	2b49      	cmp	r3, #73	; 0x49
 80177a8:	d071      	beq.n	801788e <_scanf_float+0x13a>
 80177aa:	d84d      	bhi.n	8017848 <_scanf_float+0xf4>
 80177ac:	2b39      	cmp	r3, #57	; 0x39
 80177ae:	d840      	bhi.n	8017832 <_scanf_float+0xde>
 80177b0:	2b31      	cmp	r3, #49	; 0x31
 80177b2:	f080 8088 	bcs.w	80178c6 <_scanf_float+0x172>
 80177b6:	2b2d      	cmp	r3, #45	; 0x2d
 80177b8:	f000 8090 	beq.w	80178dc <_scanf_float+0x188>
 80177bc:	d815      	bhi.n	80177ea <_scanf_float+0x96>
 80177be:	2b2b      	cmp	r3, #43	; 0x2b
 80177c0:	f000 808c 	beq.w	80178dc <_scanf_float+0x188>
 80177c4:	f1b9 0f00 	cmp.w	r9, #0
 80177c8:	d003      	beq.n	80177d2 <_scanf_float+0x7e>
 80177ca:	6823      	ldr	r3, [r4, #0]
 80177cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80177d0:	6023      	str	r3, [r4, #0]
 80177d2:	3a01      	subs	r2, #1
 80177d4:	2a01      	cmp	r2, #1
 80177d6:	f200 80ea 	bhi.w	80179ae <_scanf_float+0x25a>
 80177da:	4545      	cmp	r5, r8
 80177dc:	f200 80dc 	bhi.w	8017998 <_scanf_float+0x244>
 80177e0:	2601      	movs	r6, #1
 80177e2:	4630      	mov	r0, r6
 80177e4:	b007      	add	sp, #28
 80177e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177ea:	2b2e      	cmp	r3, #46	; 0x2e
 80177ec:	f000 809f 	beq.w	801792e <_scanf_float+0x1da>
 80177f0:	2b30      	cmp	r3, #48	; 0x30
 80177f2:	d1e7      	bne.n	80177c4 <_scanf_float+0x70>
 80177f4:	6820      	ldr	r0, [r4, #0]
 80177f6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80177fa:	d064      	beq.n	80178c6 <_scanf_float+0x172>
 80177fc:	9b01      	ldr	r3, [sp, #4]
 80177fe:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8017802:	6020      	str	r0, [r4, #0]
 8017804:	f109 0901 	add.w	r9, r9, #1
 8017808:	b11b      	cbz	r3, 8017812 <_scanf_float+0xbe>
 801780a:	3b01      	subs	r3, #1
 801780c:	3101      	adds	r1, #1
 801780e:	9301      	str	r3, [sp, #4]
 8017810:	60a1      	str	r1, [r4, #8]
 8017812:	68a3      	ldr	r3, [r4, #8]
 8017814:	3b01      	subs	r3, #1
 8017816:	60a3      	str	r3, [r4, #8]
 8017818:	6923      	ldr	r3, [r4, #16]
 801781a:	3301      	adds	r3, #1
 801781c:	6123      	str	r3, [r4, #16]
 801781e:	6873      	ldr	r3, [r6, #4]
 8017820:	3b01      	subs	r3, #1
 8017822:	2b00      	cmp	r3, #0
 8017824:	6073      	str	r3, [r6, #4]
 8017826:	f340 80ac 	ble.w	8017982 <_scanf_float+0x22e>
 801782a:	6833      	ldr	r3, [r6, #0]
 801782c:	3301      	adds	r3, #1
 801782e:	6033      	str	r3, [r6, #0]
 8017830:	e7b5      	b.n	801779e <_scanf_float+0x4a>
 8017832:	2b45      	cmp	r3, #69	; 0x45
 8017834:	f000 8085 	beq.w	8017942 <_scanf_float+0x1ee>
 8017838:	2b46      	cmp	r3, #70	; 0x46
 801783a:	d06a      	beq.n	8017912 <_scanf_float+0x1be>
 801783c:	2b41      	cmp	r3, #65	; 0x41
 801783e:	d1c1      	bne.n	80177c4 <_scanf_float+0x70>
 8017840:	2a01      	cmp	r2, #1
 8017842:	d1bf      	bne.n	80177c4 <_scanf_float+0x70>
 8017844:	2202      	movs	r2, #2
 8017846:	e046      	b.n	80178d6 <_scanf_float+0x182>
 8017848:	2b65      	cmp	r3, #101	; 0x65
 801784a:	d07a      	beq.n	8017942 <_scanf_float+0x1ee>
 801784c:	d818      	bhi.n	8017880 <_scanf_float+0x12c>
 801784e:	2b54      	cmp	r3, #84	; 0x54
 8017850:	d066      	beq.n	8017920 <_scanf_float+0x1cc>
 8017852:	d811      	bhi.n	8017878 <_scanf_float+0x124>
 8017854:	2b4e      	cmp	r3, #78	; 0x4e
 8017856:	d1b5      	bne.n	80177c4 <_scanf_float+0x70>
 8017858:	2a00      	cmp	r2, #0
 801785a:	d146      	bne.n	80178ea <_scanf_float+0x196>
 801785c:	f1b9 0f00 	cmp.w	r9, #0
 8017860:	d145      	bne.n	80178ee <_scanf_float+0x19a>
 8017862:	6821      	ldr	r1, [r4, #0]
 8017864:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8017868:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801786c:	d13f      	bne.n	80178ee <_scanf_float+0x19a>
 801786e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017872:	6021      	str	r1, [r4, #0]
 8017874:	2201      	movs	r2, #1
 8017876:	e02e      	b.n	80178d6 <_scanf_float+0x182>
 8017878:	2b59      	cmp	r3, #89	; 0x59
 801787a:	d01e      	beq.n	80178ba <_scanf_float+0x166>
 801787c:	2b61      	cmp	r3, #97	; 0x61
 801787e:	e7de      	b.n	801783e <_scanf_float+0xea>
 8017880:	2b6e      	cmp	r3, #110	; 0x6e
 8017882:	d0e9      	beq.n	8017858 <_scanf_float+0x104>
 8017884:	d815      	bhi.n	80178b2 <_scanf_float+0x15e>
 8017886:	2b66      	cmp	r3, #102	; 0x66
 8017888:	d043      	beq.n	8017912 <_scanf_float+0x1be>
 801788a:	2b69      	cmp	r3, #105	; 0x69
 801788c:	d19a      	bne.n	80177c4 <_scanf_float+0x70>
 801788e:	f1bb 0f00 	cmp.w	fp, #0
 8017892:	d138      	bne.n	8017906 <_scanf_float+0x1b2>
 8017894:	f1b9 0f00 	cmp.w	r9, #0
 8017898:	d197      	bne.n	80177ca <_scanf_float+0x76>
 801789a:	6821      	ldr	r1, [r4, #0]
 801789c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80178a0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80178a4:	d195      	bne.n	80177d2 <_scanf_float+0x7e>
 80178a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80178aa:	6021      	str	r1, [r4, #0]
 80178ac:	f04f 0b01 	mov.w	fp, #1
 80178b0:	e011      	b.n	80178d6 <_scanf_float+0x182>
 80178b2:	2b74      	cmp	r3, #116	; 0x74
 80178b4:	d034      	beq.n	8017920 <_scanf_float+0x1cc>
 80178b6:	2b79      	cmp	r3, #121	; 0x79
 80178b8:	d184      	bne.n	80177c4 <_scanf_float+0x70>
 80178ba:	f1bb 0f07 	cmp.w	fp, #7
 80178be:	d181      	bne.n	80177c4 <_scanf_float+0x70>
 80178c0:	f04f 0b08 	mov.w	fp, #8
 80178c4:	e007      	b.n	80178d6 <_scanf_float+0x182>
 80178c6:	eb12 0f0b 	cmn.w	r2, fp
 80178ca:	f47f af7b 	bne.w	80177c4 <_scanf_float+0x70>
 80178ce:	6821      	ldr	r1, [r4, #0]
 80178d0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80178d4:	6021      	str	r1, [r4, #0]
 80178d6:	702b      	strb	r3, [r5, #0]
 80178d8:	3501      	adds	r5, #1
 80178da:	e79a      	b.n	8017812 <_scanf_float+0xbe>
 80178dc:	6821      	ldr	r1, [r4, #0]
 80178de:	0608      	lsls	r0, r1, #24
 80178e0:	f57f af70 	bpl.w	80177c4 <_scanf_float+0x70>
 80178e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80178e8:	e7f4      	b.n	80178d4 <_scanf_float+0x180>
 80178ea:	2a02      	cmp	r2, #2
 80178ec:	d047      	beq.n	801797e <_scanf_float+0x22a>
 80178ee:	f1bb 0f01 	cmp.w	fp, #1
 80178f2:	d003      	beq.n	80178fc <_scanf_float+0x1a8>
 80178f4:	f1bb 0f04 	cmp.w	fp, #4
 80178f8:	f47f af64 	bne.w	80177c4 <_scanf_float+0x70>
 80178fc:	f10b 0b01 	add.w	fp, fp, #1
 8017900:	fa5f fb8b 	uxtb.w	fp, fp
 8017904:	e7e7      	b.n	80178d6 <_scanf_float+0x182>
 8017906:	f1bb 0f03 	cmp.w	fp, #3
 801790a:	d0f7      	beq.n	80178fc <_scanf_float+0x1a8>
 801790c:	f1bb 0f05 	cmp.w	fp, #5
 8017910:	e7f2      	b.n	80178f8 <_scanf_float+0x1a4>
 8017912:	f1bb 0f02 	cmp.w	fp, #2
 8017916:	f47f af55 	bne.w	80177c4 <_scanf_float+0x70>
 801791a:	f04f 0b03 	mov.w	fp, #3
 801791e:	e7da      	b.n	80178d6 <_scanf_float+0x182>
 8017920:	f1bb 0f06 	cmp.w	fp, #6
 8017924:	f47f af4e 	bne.w	80177c4 <_scanf_float+0x70>
 8017928:	f04f 0b07 	mov.w	fp, #7
 801792c:	e7d3      	b.n	80178d6 <_scanf_float+0x182>
 801792e:	6821      	ldr	r1, [r4, #0]
 8017930:	0588      	lsls	r0, r1, #22
 8017932:	f57f af47 	bpl.w	80177c4 <_scanf_float+0x70>
 8017936:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801793a:	6021      	str	r1, [r4, #0]
 801793c:	f8cd 9008 	str.w	r9, [sp, #8]
 8017940:	e7c9      	b.n	80178d6 <_scanf_float+0x182>
 8017942:	6821      	ldr	r1, [r4, #0]
 8017944:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8017948:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801794c:	d006      	beq.n	801795c <_scanf_float+0x208>
 801794e:	0548      	lsls	r0, r1, #21
 8017950:	f57f af38 	bpl.w	80177c4 <_scanf_float+0x70>
 8017954:	f1b9 0f00 	cmp.w	r9, #0
 8017958:	f43f af3b 	beq.w	80177d2 <_scanf_float+0x7e>
 801795c:	0588      	lsls	r0, r1, #22
 801795e:	bf58      	it	pl
 8017960:	9802      	ldrpl	r0, [sp, #8]
 8017962:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017966:	bf58      	it	pl
 8017968:	eba9 0000 	subpl.w	r0, r9, r0
 801796c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8017970:	bf58      	it	pl
 8017972:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8017976:	6021      	str	r1, [r4, #0]
 8017978:	f04f 0900 	mov.w	r9, #0
 801797c:	e7ab      	b.n	80178d6 <_scanf_float+0x182>
 801797e:	2203      	movs	r2, #3
 8017980:	e7a9      	b.n	80178d6 <_scanf_float+0x182>
 8017982:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017986:	9205      	str	r2, [sp, #20]
 8017988:	4631      	mov	r1, r6
 801798a:	4638      	mov	r0, r7
 801798c:	4798      	blx	r3
 801798e:	9a05      	ldr	r2, [sp, #20]
 8017990:	2800      	cmp	r0, #0
 8017992:	f43f af04 	beq.w	801779e <_scanf_float+0x4a>
 8017996:	e715      	b.n	80177c4 <_scanf_float+0x70>
 8017998:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801799c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80179a0:	4632      	mov	r2, r6
 80179a2:	4638      	mov	r0, r7
 80179a4:	4798      	blx	r3
 80179a6:	6923      	ldr	r3, [r4, #16]
 80179a8:	3b01      	subs	r3, #1
 80179aa:	6123      	str	r3, [r4, #16]
 80179ac:	e715      	b.n	80177da <_scanf_float+0x86>
 80179ae:	f10b 33ff 	add.w	r3, fp, #4294967295
 80179b2:	2b06      	cmp	r3, #6
 80179b4:	d80a      	bhi.n	80179cc <_scanf_float+0x278>
 80179b6:	f1bb 0f02 	cmp.w	fp, #2
 80179ba:	d968      	bls.n	8017a8e <_scanf_float+0x33a>
 80179bc:	f1ab 0b03 	sub.w	fp, fp, #3
 80179c0:	fa5f fb8b 	uxtb.w	fp, fp
 80179c4:	eba5 0b0b 	sub.w	fp, r5, fp
 80179c8:	455d      	cmp	r5, fp
 80179ca:	d14b      	bne.n	8017a64 <_scanf_float+0x310>
 80179cc:	6823      	ldr	r3, [r4, #0]
 80179ce:	05da      	lsls	r2, r3, #23
 80179d0:	d51f      	bpl.n	8017a12 <_scanf_float+0x2be>
 80179d2:	055b      	lsls	r3, r3, #21
 80179d4:	d468      	bmi.n	8017aa8 <_scanf_float+0x354>
 80179d6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80179da:	6923      	ldr	r3, [r4, #16]
 80179dc:	2965      	cmp	r1, #101	; 0x65
 80179de:	f103 33ff 	add.w	r3, r3, #4294967295
 80179e2:	f105 3bff 	add.w	fp, r5, #4294967295
 80179e6:	6123      	str	r3, [r4, #16]
 80179e8:	d00d      	beq.n	8017a06 <_scanf_float+0x2b2>
 80179ea:	2945      	cmp	r1, #69	; 0x45
 80179ec:	d00b      	beq.n	8017a06 <_scanf_float+0x2b2>
 80179ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80179f2:	4632      	mov	r2, r6
 80179f4:	4638      	mov	r0, r7
 80179f6:	4798      	blx	r3
 80179f8:	6923      	ldr	r3, [r4, #16]
 80179fa:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80179fe:	3b01      	subs	r3, #1
 8017a00:	f1a5 0b02 	sub.w	fp, r5, #2
 8017a04:	6123      	str	r3, [r4, #16]
 8017a06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017a0a:	4632      	mov	r2, r6
 8017a0c:	4638      	mov	r0, r7
 8017a0e:	4798      	blx	r3
 8017a10:	465d      	mov	r5, fp
 8017a12:	6826      	ldr	r6, [r4, #0]
 8017a14:	f016 0610 	ands.w	r6, r6, #16
 8017a18:	d17a      	bne.n	8017b10 <_scanf_float+0x3bc>
 8017a1a:	702e      	strb	r6, [r5, #0]
 8017a1c:	6823      	ldr	r3, [r4, #0]
 8017a1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017a26:	d142      	bne.n	8017aae <_scanf_float+0x35a>
 8017a28:	9b02      	ldr	r3, [sp, #8]
 8017a2a:	eba9 0303 	sub.w	r3, r9, r3
 8017a2e:	425a      	negs	r2, r3
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d149      	bne.n	8017ac8 <_scanf_float+0x374>
 8017a34:	2200      	movs	r2, #0
 8017a36:	4641      	mov	r1, r8
 8017a38:	4638      	mov	r0, r7
 8017a3a:	f000 ff01 	bl	8018840 <_strtod_r>
 8017a3e:	6825      	ldr	r5, [r4, #0]
 8017a40:	f8da 3000 	ldr.w	r3, [sl]
 8017a44:	f015 0f02 	tst.w	r5, #2
 8017a48:	f103 0204 	add.w	r2, r3, #4
 8017a4c:	ec59 8b10 	vmov	r8, r9, d0
 8017a50:	f8ca 2000 	str.w	r2, [sl]
 8017a54:	d043      	beq.n	8017ade <_scanf_float+0x38a>
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	e9c3 8900 	strd	r8, r9, [r3]
 8017a5c:	68e3      	ldr	r3, [r4, #12]
 8017a5e:	3301      	adds	r3, #1
 8017a60:	60e3      	str	r3, [r4, #12]
 8017a62:	e6be      	b.n	80177e2 <_scanf_float+0x8e>
 8017a64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017a68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017a6c:	4632      	mov	r2, r6
 8017a6e:	4638      	mov	r0, r7
 8017a70:	4798      	blx	r3
 8017a72:	6923      	ldr	r3, [r4, #16]
 8017a74:	3b01      	subs	r3, #1
 8017a76:	6123      	str	r3, [r4, #16]
 8017a78:	e7a6      	b.n	80179c8 <_scanf_float+0x274>
 8017a7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017a7e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017a82:	4632      	mov	r2, r6
 8017a84:	4638      	mov	r0, r7
 8017a86:	4798      	blx	r3
 8017a88:	6923      	ldr	r3, [r4, #16]
 8017a8a:	3b01      	subs	r3, #1
 8017a8c:	6123      	str	r3, [r4, #16]
 8017a8e:	4545      	cmp	r5, r8
 8017a90:	d8f3      	bhi.n	8017a7a <_scanf_float+0x326>
 8017a92:	e6a5      	b.n	80177e0 <_scanf_float+0x8c>
 8017a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017a98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017a9c:	4632      	mov	r2, r6
 8017a9e:	4638      	mov	r0, r7
 8017aa0:	4798      	blx	r3
 8017aa2:	6923      	ldr	r3, [r4, #16]
 8017aa4:	3b01      	subs	r3, #1
 8017aa6:	6123      	str	r3, [r4, #16]
 8017aa8:	4545      	cmp	r5, r8
 8017aaa:	d8f3      	bhi.n	8017a94 <_scanf_float+0x340>
 8017aac:	e698      	b.n	80177e0 <_scanf_float+0x8c>
 8017aae:	9b03      	ldr	r3, [sp, #12]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d0bf      	beq.n	8017a34 <_scanf_float+0x2e0>
 8017ab4:	9904      	ldr	r1, [sp, #16]
 8017ab6:	230a      	movs	r3, #10
 8017ab8:	4632      	mov	r2, r6
 8017aba:	3101      	adds	r1, #1
 8017abc:	4638      	mov	r0, r7
 8017abe:	f000 ff5f 	bl	8018980 <_strtol_r>
 8017ac2:	9b03      	ldr	r3, [sp, #12]
 8017ac4:	9d04      	ldr	r5, [sp, #16]
 8017ac6:	1ac2      	subs	r2, r0, r3
 8017ac8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017acc:	429d      	cmp	r5, r3
 8017ace:	bf28      	it	cs
 8017ad0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8017ad4:	490f      	ldr	r1, [pc, #60]	; (8017b14 <_scanf_float+0x3c0>)
 8017ad6:	4628      	mov	r0, r5
 8017ad8:	f000 f834 	bl	8017b44 <siprintf>
 8017adc:	e7aa      	b.n	8017a34 <_scanf_float+0x2e0>
 8017ade:	f015 0504 	ands.w	r5, r5, #4
 8017ae2:	d1b8      	bne.n	8017a56 <_scanf_float+0x302>
 8017ae4:	681f      	ldr	r7, [r3, #0]
 8017ae6:	ee10 2a10 	vmov	r2, s0
 8017aea:	464b      	mov	r3, r9
 8017aec:	ee10 0a10 	vmov	r0, s0
 8017af0:	4649      	mov	r1, r9
 8017af2:	f7e9 f82b 	bl	8000b4c <__aeabi_dcmpun>
 8017af6:	b128      	cbz	r0, 8017b04 <_scanf_float+0x3b0>
 8017af8:	4628      	mov	r0, r5
 8017afa:	f000 f81d 	bl	8017b38 <nanf>
 8017afe:	ed87 0a00 	vstr	s0, [r7]
 8017b02:	e7ab      	b.n	8017a5c <_scanf_float+0x308>
 8017b04:	4640      	mov	r0, r8
 8017b06:	4649      	mov	r1, r9
 8017b08:	f7e9 f87e 	bl	8000c08 <__aeabi_d2f>
 8017b0c:	6038      	str	r0, [r7, #0]
 8017b0e:	e7a5      	b.n	8017a5c <_scanf_float+0x308>
 8017b10:	2600      	movs	r6, #0
 8017b12:	e666      	b.n	80177e2 <_scanf_float+0x8e>
 8017b14:	0801e0f0 	.word	0x0801e0f0

08017b18 <_sbrk_r>:
 8017b18:	b538      	push	{r3, r4, r5, lr}
 8017b1a:	4c06      	ldr	r4, [pc, #24]	; (8017b34 <_sbrk_r+0x1c>)
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	4605      	mov	r5, r0
 8017b20:	4608      	mov	r0, r1
 8017b22:	6023      	str	r3, [r4, #0]
 8017b24:	f7fe fb04 	bl	8016130 <_sbrk>
 8017b28:	1c43      	adds	r3, r0, #1
 8017b2a:	d102      	bne.n	8017b32 <_sbrk_r+0x1a>
 8017b2c:	6823      	ldr	r3, [r4, #0]
 8017b2e:	b103      	cbz	r3, 8017b32 <_sbrk_r+0x1a>
 8017b30:	602b      	str	r3, [r5, #0]
 8017b32:	bd38      	pop	{r3, r4, r5, pc}
 8017b34:	2000a158 	.word	0x2000a158

08017b38 <nanf>:
 8017b38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017b40 <nanf+0x8>
 8017b3c:	4770      	bx	lr
 8017b3e:	bf00      	nop
 8017b40:	7fc00000 	.word	0x7fc00000

08017b44 <siprintf>:
 8017b44:	b40e      	push	{r1, r2, r3}
 8017b46:	b500      	push	{lr}
 8017b48:	b09c      	sub	sp, #112	; 0x70
 8017b4a:	ab1d      	add	r3, sp, #116	; 0x74
 8017b4c:	9002      	str	r0, [sp, #8]
 8017b4e:	9006      	str	r0, [sp, #24]
 8017b50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017b54:	4809      	ldr	r0, [pc, #36]	; (8017b7c <siprintf+0x38>)
 8017b56:	9107      	str	r1, [sp, #28]
 8017b58:	9104      	str	r1, [sp, #16]
 8017b5a:	4909      	ldr	r1, [pc, #36]	; (8017b80 <siprintf+0x3c>)
 8017b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b60:	9105      	str	r1, [sp, #20]
 8017b62:	6800      	ldr	r0, [r0, #0]
 8017b64:	9301      	str	r3, [sp, #4]
 8017b66:	a902      	add	r1, sp, #8
 8017b68:	f002 fd2c 	bl	801a5c4 <_svfiprintf_r>
 8017b6c:	9b02      	ldr	r3, [sp, #8]
 8017b6e:	2200      	movs	r2, #0
 8017b70:	701a      	strb	r2, [r3, #0]
 8017b72:	b01c      	add	sp, #112	; 0x70
 8017b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b78:	b003      	add	sp, #12
 8017b7a:	4770      	bx	lr
 8017b7c:	20000198 	.word	0x20000198
 8017b80:	ffff0208 	.word	0xffff0208

08017b84 <strcat>:
 8017b84:	b510      	push	{r4, lr}
 8017b86:	4603      	mov	r3, r0
 8017b88:	781a      	ldrb	r2, [r3, #0]
 8017b8a:	1c5c      	adds	r4, r3, #1
 8017b8c:	b93a      	cbnz	r2, 8017b9e <strcat+0x1a>
 8017b8e:	3b01      	subs	r3, #1
 8017b90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b94:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017b98:	2a00      	cmp	r2, #0
 8017b9a:	d1f9      	bne.n	8017b90 <strcat+0xc>
 8017b9c:	bd10      	pop	{r4, pc}
 8017b9e:	4623      	mov	r3, r4
 8017ba0:	e7f2      	b.n	8017b88 <strcat+0x4>

08017ba2 <strchr>:
 8017ba2:	b2c9      	uxtb	r1, r1
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017baa:	b11a      	cbz	r2, 8017bb4 <strchr+0x12>
 8017bac:	428a      	cmp	r2, r1
 8017bae:	d1f9      	bne.n	8017ba4 <strchr+0x2>
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	4770      	bx	lr
 8017bb4:	2900      	cmp	r1, #0
 8017bb6:	bf18      	it	ne
 8017bb8:	2300      	movne	r3, #0
 8017bba:	e7f9      	b.n	8017bb0 <strchr+0xe>

08017bbc <strcpy>:
 8017bbc:	4603      	mov	r3, r0
 8017bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bc2:	f803 2b01 	strb.w	r2, [r3], #1
 8017bc6:	2a00      	cmp	r2, #0
 8017bc8:	d1f9      	bne.n	8017bbe <strcpy+0x2>
 8017bca:	4770      	bx	lr

08017bcc <strncmp>:
 8017bcc:	b510      	push	{r4, lr}
 8017bce:	b16a      	cbz	r2, 8017bec <strncmp+0x20>
 8017bd0:	3901      	subs	r1, #1
 8017bd2:	1884      	adds	r4, r0, r2
 8017bd4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017bd8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017bdc:	4293      	cmp	r3, r2
 8017bde:	d103      	bne.n	8017be8 <strncmp+0x1c>
 8017be0:	42a0      	cmp	r0, r4
 8017be2:	d001      	beq.n	8017be8 <strncmp+0x1c>
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d1f5      	bne.n	8017bd4 <strncmp+0x8>
 8017be8:	1a98      	subs	r0, r3, r2
 8017bea:	bd10      	pop	{r4, pc}
 8017bec:	4610      	mov	r0, r2
 8017bee:	e7fc      	b.n	8017bea <strncmp+0x1e>

08017bf0 <strncpy>:
 8017bf0:	b570      	push	{r4, r5, r6, lr}
 8017bf2:	3901      	subs	r1, #1
 8017bf4:	4604      	mov	r4, r0
 8017bf6:	b902      	cbnz	r2, 8017bfa <strncpy+0xa>
 8017bf8:	bd70      	pop	{r4, r5, r6, pc}
 8017bfa:	4623      	mov	r3, r4
 8017bfc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8017c00:	f803 5b01 	strb.w	r5, [r3], #1
 8017c04:	1e56      	subs	r6, r2, #1
 8017c06:	b92d      	cbnz	r5, 8017c14 <strncpy+0x24>
 8017c08:	4414      	add	r4, r2
 8017c0a:	42a3      	cmp	r3, r4
 8017c0c:	d0f4      	beq.n	8017bf8 <strncpy+0x8>
 8017c0e:	f803 5b01 	strb.w	r5, [r3], #1
 8017c12:	e7fa      	b.n	8017c0a <strncpy+0x1a>
 8017c14:	461c      	mov	r4, r3
 8017c16:	4632      	mov	r2, r6
 8017c18:	e7ed      	b.n	8017bf6 <strncpy+0x6>

08017c1a <sulp>:
 8017c1a:	b570      	push	{r4, r5, r6, lr}
 8017c1c:	4604      	mov	r4, r0
 8017c1e:	460d      	mov	r5, r1
 8017c20:	ec45 4b10 	vmov	d0, r4, r5
 8017c24:	4616      	mov	r6, r2
 8017c26:	f002 fb31 	bl	801a28c <__ulp>
 8017c2a:	ec51 0b10 	vmov	r0, r1, d0
 8017c2e:	b17e      	cbz	r6, 8017c50 <sulp+0x36>
 8017c30:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017c34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	dd09      	ble.n	8017c50 <sulp+0x36>
 8017c3c:	051b      	lsls	r3, r3, #20
 8017c3e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017c42:	2400      	movs	r4, #0
 8017c44:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017c48:	4622      	mov	r2, r4
 8017c4a:	462b      	mov	r3, r5
 8017c4c:	f7e8 fce4 	bl	8000618 <__aeabi_dmul>
 8017c50:	bd70      	pop	{r4, r5, r6, pc}
 8017c52:	0000      	movs	r0, r0
 8017c54:	0000      	movs	r0, r0
	...

08017c58 <_strtod_l>:
 8017c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c5c:	461f      	mov	r7, r3
 8017c5e:	b0a1      	sub	sp, #132	; 0x84
 8017c60:	2300      	movs	r3, #0
 8017c62:	4681      	mov	r9, r0
 8017c64:	4638      	mov	r0, r7
 8017c66:	460e      	mov	r6, r1
 8017c68:	9217      	str	r2, [sp, #92]	; 0x5c
 8017c6a:	931c      	str	r3, [sp, #112]	; 0x70
 8017c6c:	f002 f81d 	bl	8019caa <__localeconv_l>
 8017c70:	4680      	mov	r8, r0
 8017c72:	6800      	ldr	r0, [r0, #0]
 8017c74:	f7e8 fab6 	bl	80001e4 <strlen>
 8017c78:	f04f 0a00 	mov.w	sl, #0
 8017c7c:	4604      	mov	r4, r0
 8017c7e:	f04f 0b00 	mov.w	fp, #0
 8017c82:	961b      	str	r6, [sp, #108]	; 0x6c
 8017c84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017c86:	781a      	ldrb	r2, [r3, #0]
 8017c88:	2a0d      	cmp	r2, #13
 8017c8a:	d832      	bhi.n	8017cf2 <_strtod_l+0x9a>
 8017c8c:	2a09      	cmp	r2, #9
 8017c8e:	d236      	bcs.n	8017cfe <_strtod_l+0xa6>
 8017c90:	2a00      	cmp	r2, #0
 8017c92:	d03e      	beq.n	8017d12 <_strtod_l+0xba>
 8017c94:	2300      	movs	r3, #0
 8017c96:	930d      	str	r3, [sp, #52]	; 0x34
 8017c98:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017c9a:	782b      	ldrb	r3, [r5, #0]
 8017c9c:	2b30      	cmp	r3, #48	; 0x30
 8017c9e:	f040 80ac 	bne.w	8017dfa <_strtod_l+0x1a2>
 8017ca2:	786b      	ldrb	r3, [r5, #1]
 8017ca4:	2b58      	cmp	r3, #88	; 0x58
 8017ca6:	d001      	beq.n	8017cac <_strtod_l+0x54>
 8017ca8:	2b78      	cmp	r3, #120	; 0x78
 8017caa:	d167      	bne.n	8017d7c <_strtod_l+0x124>
 8017cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017cae:	9301      	str	r3, [sp, #4]
 8017cb0:	ab1c      	add	r3, sp, #112	; 0x70
 8017cb2:	9300      	str	r3, [sp, #0]
 8017cb4:	9702      	str	r7, [sp, #8]
 8017cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8017cb8:	4a88      	ldr	r2, [pc, #544]	; (8017edc <_strtod_l+0x284>)
 8017cba:	a91b      	add	r1, sp, #108	; 0x6c
 8017cbc:	4648      	mov	r0, r9
 8017cbe:	f001 fd1a 	bl	80196f6 <__gethex>
 8017cc2:	f010 0407 	ands.w	r4, r0, #7
 8017cc6:	4606      	mov	r6, r0
 8017cc8:	d005      	beq.n	8017cd6 <_strtod_l+0x7e>
 8017cca:	2c06      	cmp	r4, #6
 8017ccc:	d12b      	bne.n	8017d26 <_strtod_l+0xce>
 8017cce:	3501      	adds	r5, #1
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	951b      	str	r5, [sp, #108]	; 0x6c
 8017cd4:	930d      	str	r3, [sp, #52]	; 0x34
 8017cd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	f040 859a 	bne.w	8018812 <_strtod_l+0xbba>
 8017cde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ce0:	b1e3      	cbz	r3, 8017d1c <_strtod_l+0xc4>
 8017ce2:	4652      	mov	r2, sl
 8017ce4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017ce8:	ec43 2b10 	vmov	d0, r2, r3
 8017cec:	b021      	add	sp, #132	; 0x84
 8017cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cf2:	2a2b      	cmp	r2, #43	; 0x2b
 8017cf4:	d015      	beq.n	8017d22 <_strtod_l+0xca>
 8017cf6:	2a2d      	cmp	r2, #45	; 0x2d
 8017cf8:	d004      	beq.n	8017d04 <_strtod_l+0xac>
 8017cfa:	2a20      	cmp	r2, #32
 8017cfc:	d1ca      	bne.n	8017c94 <_strtod_l+0x3c>
 8017cfe:	3301      	adds	r3, #1
 8017d00:	931b      	str	r3, [sp, #108]	; 0x6c
 8017d02:	e7bf      	b.n	8017c84 <_strtod_l+0x2c>
 8017d04:	2201      	movs	r2, #1
 8017d06:	920d      	str	r2, [sp, #52]	; 0x34
 8017d08:	1c5a      	adds	r2, r3, #1
 8017d0a:	921b      	str	r2, [sp, #108]	; 0x6c
 8017d0c:	785b      	ldrb	r3, [r3, #1]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d1c2      	bne.n	8017c98 <_strtod_l+0x40>
 8017d12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017d14:	961b      	str	r6, [sp, #108]	; 0x6c
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	f040 8579 	bne.w	801880e <_strtod_l+0xbb6>
 8017d1c:	4652      	mov	r2, sl
 8017d1e:	465b      	mov	r3, fp
 8017d20:	e7e2      	b.n	8017ce8 <_strtod_l+0x90>
 8017d22:	2200      	movs	r2, #0
 8017d24:	e7ef      	b.n	8017d06 <_strtod_l+0xae>
 8017d26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017d28:	b13a      	cbz	r2, 8017d3a <_strtod_l+0xe2>
 8017d2a:	2135      	movs	r1, #53	; 0x35
 8017d2c:	a81e      	add	r0, sp, #120	; 0x78
 8017d2e:	f002 fba5 	bl	801a47c <__copybits>
 8017d32:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017d34:	4648      	mov	r0, r9
 8017d36:	f002 f811 	bl	8019d5c <_Bfree>
 8017d3a:	3c01      	subs	r4, #1
 8017d3c:	2c04      	cmp	r4, #4
 8017d3e:	d806      	bhi.n	8017d4e <_strtod_l+0xf6>
 8017d40:	e8df f004 	tbb	[pc, r4]
 8017d44:	1714030a 	.word	0x1714030a
 8017d48:	0a          	.byte	0x0a
 8017d49:	00          	.byte	0x00
 8017d4a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8017d4e:	0730      	lsls	r0, r6, #28
 8017d50:	d5c1      	bpl.n	8017cd6 <_strtod_l+0x7e>
 8017d52:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017d56:	e7be      	b.n	8017cd6 <_strtod_l+0x7e>
 8017d58:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8017d5c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017d5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017d62:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017d66:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017d6a:	e7f0      	b.n	8017d4e <_strtod_l+0xf6>
 8017d6c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8017ee0 <_strtod_l+0x288>
 8017d70:	e7ed      	b.n	8017d4e <_strtod_l+0xf6>
 8017d72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017d76:	f04f 3aff 	mov.w	sl, #4294967295
 8017d7a:	e7e8      	b.n	8017d4e <_strtod_l+0xf6>
 8017d7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017d7e:	1c5a      	adds	r2, r3, #1
 8017d80:	921b      	str	r2, [sp, #108]	; 0x6c
 8017d82:	785b      	ldrb	r3, [r3, #1]
 8017d84:	2b30      	cmp	r3, #48	; 0x30
 8017d86:	d0f9      	beq.n	8017d7c <_strtod_l+0x124>
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d0a4      	beq.n	8017cd6 <_strtod_l+0x7e>
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	2500      	movs	r5, #0
 8017d90:	9306      	str	r3, [sp, #24]
 8017d92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017d94:	9308      	str	r3, [sp, #32]
 8017d96:	9507      	str	r5, [sp, #28]
 8017d98:	9505      	str	r5, [sp, #20]
 8017d9a:	220a      	movs	r2, #10
 8017d9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8017d9e:	7807      	ldrb	r7, [r0, #0]
 8017da0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8017da4:	b2d9      	uxtb	r1, r3
 8017da6:	2909      	cmp	r1, #9
 8017da8:	d929      	bls.n	8017dfe <_strtod_l+0x1a6>
 8017daa:	4622      	mov	r2, r4
 8017dac:	f8d8 1000 	ldr.w	r1, [r8]
 8017db0:	f7ff ff0c 	bl	8017bcc <strncmp>
 8017db4:	2800      	cmp	r0, #0
 8017db6:	d031      	beq.n	8017e1c <_strtod_l+0x1c4>
 8017db8:	2000      	movs	r0, #0
 8017dba:	9c05      	ldr	r4, [sp, #20]
 8017dbc:	9004      	str	r0, [sp, #16]
 8017dbe:	463b      	mov	r3, r7
 8017dc0:	4602      	mov	r2, r0
 8017dc2:	2b65      	cmp	r3, #101	; 0x65
 8017dc4:	d001      	beq.n	8017dca <_strtod_l+0x172>
 8017dc6:	2b45      	cmp	r3, #69	; 0x45
 8017dc8:	d114      	bne.n	8017df4 <_strtod_l+0x19c>
 8017dca:	b924      	cbnz	r4, 8017dd6 <_strtod_l+0x17e>
 8017dcc:	b910      	cbnz	r0, 8017dd4 <_strtod_l+0x17c>
 8017dce:	9b06      	ldr	r3, [sp, #24]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d09e      	beq.n	8017d12 <_strtod_l+0xba>
 8017dd4:	2400      	movs	r4, #0
 8017dd6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8017dd8:	1c73      	adds	r3, r6, #1
 8017dda:	931b      	str	r3, [sp, #108]	; 0x6c
 8017ddc:	7873      	ldrb	r3, [r6, #1]
 8017dde:	2b2b      	cmp	r3, #43	; 0x2b
 8017de0:	d078      	beq.n	8017ed4 <_strtod_l+0x27c>
 8017de2:	2b2d      	cmp	r3, #45	; 0x2d
 8017de4:	d070      	beq.n	8017ec8 <_strtod_l+0x270>
 8017de6:	f04f 0c00 	mov.w	ip, #0
 8017dea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8017dee:	2f09      	cmp	r7, #9
 8017df0:	d97c      	bls.n	8017eec <_strtod_l+0x294>
 8017df2:	961b      	str	r6, [sp, #108]	; 0x6c
 8017df4:	f04f 0e00 	mov.w	lr, #0
 8017df8:	e09a      	b.n	8017f30 <_strtod_l+0x2d8>
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	e7c7      	b.n	8017d8e <_strtod_l+0x136>
 8017dfe:	9905      	ldr	r1, [sp, #20]
 8017e00:	2908      	cmp	r1, #8
 8017e02:	bfdd      	ittte	le
 8017e04:	9907      	ldrle	r1, [sp, #28]
 8017e06:	fb02 3301 	mlale	r3, r2, r1, r3
 8017e0a:	9307      	strle	r3, [sp, #28]
 8017e0c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8017e10:	9b05      	ldr	r3, [sp, #20]
 8017e12:	3001      	adds	r0, #1
 8017e14:	3301      	adds	r3, #1
 8017e16:	9305      	str	r3, [sp, #20]
 8017e18:	901b      	str	r0, [sp, #108]	; 0x6c
 8017e1a:	e7bf      	b.n	8017d9c <_strtod_l+0x144>
 8017e1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017e1e:	191a      	adds	r2, r3, r4
 8017e20:	921b      	str	r2, [sp, #108]	; 0x6c
 8017e22:	9a05      	ldr	r2, [sp, #20]
 8017e24:	5d1b      	ldrb	r3, [r3, r4]
 8017e26:	2a00      	cmp	r2, #0
 8017e28:	d037      	beq.n	8017e9a <_strtod_l+0x242>
 8017e2a:	9c05      	ldr	r4, [sp, #20]
 8017e2c:	4602      	mov	r2, r0
 8017e2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017e32:	2909      	cmp	r1, #9
 8017e34:	d913      	bls.n	8017e5e <_strtod_l+0x206>
 8017e36:	2101      	movs	r1, #1
 8017e38:	9104      	str	r1, [sp, #16]
 8017e3a:	e7c2      	b.n	8017dc2 <_strtod_l+0x16a>
 8017e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017e3e:	1c5a      	adds	r2, r3, #1
 8017e40:	921b      	str	r2, [sp, #108]	; 0x6c
 8017e42:	785b      	ldrb	r3, [r3, #1]
 8017e44:	3001      	adds	r0, #1
 8017e46:	2b30      	cmp	r3, #48	; 0x30
 8017e48:	d0f8      	beq.n	8017e3c <_strtod_l+0x1e4>
 8017e4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017e4e:	2a08      	cmp	r2, #8
 8017e50:	f200 84e4 	bhi.w	801881c <_strtod_l+0xbc4>
 8017e54:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017e56:	9208      	str	r2, [sp, #32]
 8017e58:	4602      	mov	r2, r0
 8017e5a:	2000      	movs	r0, #0
 8017e5c:	4604      	mov	r4, r0
 8017e5e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8017e62:	f100 0101 	add.w	r1, r0, #1
 8017e66:	d012      	beq.n	8017e8e <_strtod_l+0x236>
 8017e68:	440a      	add	r2, r1
 8017e6a:	eb00 0c04 	add.w	ip, r0, r4
 8017e6e:	4621      	mov	r1, r4
 8017e70:	270a      	movs	r7, #10
 8017e72:	458c      	cmp	ip, r1
 8017e74:	d113      	bne.n	8017e9e <_strtod_l+0x246>
 8017e76:	1821      	adds	r1, r4, r0
 8017e78:	2908      	cmp	r1, #8
 8017e7a:	f104 0401 	add.w	r4, r4, #1
 8017e7e:	4404      	add	r4, r0
 8017e80:	dc19      	bgt.n	8017eb6 <_strtod_l+0x25e>
 8017e82:	9b07      	ldr	r3, [sp, #28]
 8017e84:	210a      	movs	r1, #10
 8017e86:	fb01 e303 	mla	r3, r1, r3, lr
 8017e8a:	9307      	str	r3, [sp, #28]
 8017e8c:	2100      	movs	r1, #0
 8017e8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017e90:	1c58      	adds	r0, r3, #1
 8017e92:	901b      	str	r0, [sp, #108]	; 0x6c
 8017e94:	785b      	ldrb	r3, [r3, #1]
 8017e96:	4608      	mov	r0, r1
 8017e98:	e7c9      	b.n	8017e2e <_strtod_l+0x1d6>
 8017e9a:	9805      	ldr	r0, [sp, #20]
 8017e9c:	e7d3      	b.n	8017e46 <_strtod_l+0x1ee>
 8017e9e:	2908      	cmp	r1, #8
 8017ea0:	f101 0101 	add.w	r1, r1, #1
 8017ea4:	dc03      	bgt.n	8017eae <_strtod_l+0x256>
 8017ea6:	9b07      	ldr	r3, [sp, #28]
 8017ea8:	437b      	muls	r3, r7
 8017eaa:	9307      	str	r3, [sp, #28]
 8017eac:	e7e1      	b.n	8017e72 <_strtod_l+0x21a>
 8017eae:	2910      	cmp	r1, #16
 8017eb0:	bfd8      	it	le
 8017eb2:	437d      	mulle	r5, r7
 8017eb4:	e7dd      	b.n	8017e72 <_strtod_l+0x21a>
 8017eb6:	2c10      	cmp	r4, #16
 8017eb8:	bfdc      	itt	le
 8017eba:	210a      	movle	r1, #10
 8017ebc:	fb01 e505 	mlale	r5, r1, r5, lr
 8017ec0:	e7e4      	b.n	8017e8c <_strtod_l+0x234>
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	9304      	str	r3, [sp, #16]
 8017ec6:	e781      	b.n	8017dcc <_strtod_l+0x174>
 8017ec8:	f04f 0c01 	mov.w	ip, #1
 8017ecc:	1cb3      	adds	r3, r6, #2
 8017ece:	931b      	str	r3, [sp, #108]	; 0x6c
 8017ed0:	78b3      	ldrb	r3, [r6, #2]
 8017ed2:	e78a      	b.n	8017dea <_strtod_l+0x192>
 8017ed4:	f04f 0c00 	mov.w	ip, #0
 8017ed8:	e7f8      	b.n	8017ecc <_strtod_l+0x274>
 8017eda:	bf00      	nop
 8017edc:	0801e0f8 	.word	0x0801e0f8
 8017ee0:	7ff00000 	.word	0x7ff00000
 8017ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017ee6:	1c5f      	adds	r7, r3, #1
 8017ee8:	971b      	str	r7, [sp, #108]	; 0x6c
 8017eea:	785b      	ldrb	r3, [r3, #1]
 8017eec:	2b30      	cmp	r3, #48	; 0x30
 8017eee:	d0f9      	beq.n	8017ee4 <_strtod_l+0x28c>
 8017ef0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8017ef4:	2f08      	cmp	r7, #8
 8017ef6:	f63f af7d 	bhi.w	8017df4 <_strtod_l+0x19c>
 8017efa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8017efe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017f00:	930a      	str	r3, [sp, #40]	; 0x28
 8017f02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017f04:	1c5f      	adds	r7, r3, #1
 8017f06:	971b      	str	r7, [sp, #108]	; 0x6c
 8017f08:	785b      	ldrb	r3, [r3, #1]
 8017f0a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8017f0e:	f1b8 0f09 	cmp.w	r8, #9
 8017f12:	d937      	bls.n	8017f84 <_strtod_l+0x32c>
 8017f14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017f16:	1a7f      	subs	r7, r7, r1
 8017f18:	2f08      	cmp	r7, #8
 8017f1a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8017f1e:	dc37      	bgt.n	8017f90 <_strtod_l+0x338>
 8017f20:	45be      	cmp	lr, r7
 8017f22:	bfa8      	it	ge
 8017f24:	46be      	movge	lr, r7
 8017f26:	f1bc 0f00 	cmp.w	ip, #0
 8017f2a:	d001      	beq.n	8017f30 <_strtod_l+0x2d8>
 8017f2c:	f1ce 0e00 	rsb	lr, lr, #0
 8017f30:	2c00      	cmp	r4, #0
 8017f32:	d151      	bne.n	8017fd8 <_strtod_l+0x380>
 8017f34:	2800      	cmp	r0, #0
 8017f36:	f47f aece 	bne.w	8017cd6 <_strtod_l+0x7e>
 8017f3a:	9a06      	ldr	r2, [sp, #24]
 8017f3c:	2a00      	cmp	r2, #0
 8017f3e:	f47f aeca 	bne.w	8017cd6 <_strtod_l+0x7e>
 8017f42:	9a04      	ldr	r2, [sp, #16]
 8017f44:	2a00      	cmp	r2, #0
 8017f46:	f47f aee4 	bne.w	8017d12 <_strtod_l+0xba>
 8017f4a:	2b4e      	cmp	r3, #78	; 0x4e
 8017f4c:	d027      	beq.n	8017f9e <_strtod_l+0x346>
 8017f4e:	dc21      	bgt.n	8017f94 <_strtod_l+0x33c>
 8017f50:	2b49      	cmp	r3, #73	; 0x49
 8017f52:	f47f aede 	bne.w	8017d12 <_strtod_l+0xba>
 8017f56:	49a0      	ldr	r1, [pc, #640]	; (80181d8 <_strtod_l+0x580>)
 8017f58:	a81b      	add	r0, sp, #108	; 0x6c
 8017f5a:	f001 fdff 	bl	8019b5c <__match>
 8017f5e:	2800      	cmp	r0, #0
 8017f60:	f43f aed7 	beq.w	8017d12 <_strtod_l+0xba>
 8017f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017f66:	499d      	ldr	r1, [pc, #628]	; (80181dc <_strtod_l+0x584>)
 8017f68:	3b01      	subs	r3, #1
 8017f6a:	a81b      	add	r0, sp, #108	; 0x6c
 8017f6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8017f6e:	f001 fdf5 	bl	8019b5c <__match>
 8017f72:	b910      	cbnz	r0, 8017f7a <_strtod_l+0x322>
 8017f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017f76:	3301      	adds	r3, #1
 8017f78:	931b      	str	r3, [sp, #108]	; 0x6c
 8017f7a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80181f0 <_strtod_l+0x598>
 8017f7e:	f04f 0a00 	mov.w	sl, #0
 8017f82:	e6a8      	b.n	8017cd6 <_strtod_l+0x7e>
 8017f84:	210a      	movs	r1, #10
 8017f86:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017f8a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017f8e:	e7b8      	b.n	8017f02 <_strtod_l+0x2aa>
 8017f90:	46be      	mov	lr, r7
 8017f92:	e7c8      	b.n	8017f26 <_strtod_l+0x2ce>
 8017f94:	2b69      	cmp	r3, #105	; 0x69
 8017f96:	d0de      	beq.n	8017f56 <_strtod_l+0x2fe>
 8017f98:	2b6e      	cmp	r3, #110	; 0x6e
 8017f9a:	f47f aeba 	bne.w	8017d12 <_strtod_l+0xba>
 8017f9e:	4990      	ldr	r1, [pc, #576]	; (80181e0 <_strtod_l+0x588>)
 8017fa0:	a81b      	add	r0, sp, #108	; 0x6c
 8017fa2:	f001 fddb 	bl	8019b5c <__match>
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	f43f aeb3 	beq.w	8017d12 <_strtod_l+0xba>
 8017fac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017fae:	781b      	ldrb	r3, [r3, #0]
 8017fb0:	2b28      	cmp	r3, #40	; 0x28
 8017fb2:	d10e      	bne.n	8017fd2 <_strtod_l+0x37a>
 8017fb4:	aa1e      	add	r2, sp, #120	; 0x78
 8017fb6:	498b      	ldr	r1, [pc, #556]	; (80181e4 <_strtod_l+0x58c>)
 8017fb8:	a81b      	add	r0, sp, #108	; 0x6c
 8017fba:	f001 fde3 	bl	8019b84 <__hexnan>
 8017fbe:	2805      	cmp	r0, #5
 8017fc0:	d107      	bne.n	8017fd2 <_strtod_l+0x37a>
 8017fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017fc4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017fc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017fcc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017fd0:	e681      	b.n	8017cd6 <_strtod_l+0x7e>
 8017fd2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80181f8 <_strtod_l+0x5a0>
 8017fd6:	e7d2      	b.n	8017f7e <_strtod_l+0x326>
 8017fd8:	ebae 0302 	sub.w	r3, lr, r2
 8017fdc:	9306      	str	r3, [sp, #24]
 8017fde:	9b05      	ldr	r3, [sp, #20]
 8017fe0:	9807      	ldr	r0, [sp, #28]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	bf08      	it	eq
 8017fe6:	4623      	moveq	r3, r4
 8017fe8:	2c10      	cmp	r4, #16
 8017fea:	9305      	str	r3, [sp, #20]
 8017fec:	46a0      	mov	r8, r4
 8017fee:	bfa8      	it	ge
 8017ff0:	f04f 0810 	movge.w	r8, #16
 8017ff4:	f7e8 fa96 	bl	8000524 <__aeabi_ui2d>
 8017ff8:	2c09      	cmp	r4, #9
 8017ffa:	4682      	mov	sl, r0
 8017ffc:	468b      	mov	fp, r1
 8017ffe:	dc13      	bgt.n	8018028 <_strtod_l+0x3d0>
 8018000:	9b06      	ldr	r3, [sp, #24]
 8018002:	2b00      	cmp	r3, #0
 8018004:	f43f ae67 	beq.w	8017cd6 <_strtod_l+0x7e>
 8018008:	9b06      	ldr	r3, [sp, #24]
 801800a:	dd7a      	ble.n	8018102 <_strtod_l+0x4aa>
 801800c:	2b16      	cmp	r3, #22
 801800e:	dc61      	bgt.n	80180d4 <_strtod_l+0x47c>
 8018010:	4a75      	ldr	r2, [pc, #468]	; (80181e8 <_strtod_l+0x590>)
 8018012:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8018016:	e9de 0100 	ldrd	r0, r1, [lr]
 801801a:	4652      	mov	r2, sl
 801801c:	465b      	mov	r3, fp
 801801e:	f7e8 fafb 	bl	8000618 <__aeabi_dmul>
 8018022:	4682      	mov	sl, r0
 8018024:	468b      	mov	fp, r1
 8018026:	e656      	b.n	8017cd6 <_strtod_l+0x7e>
 8018028:	4b6f      	ldr	r3, [pc, #444]	; (80181e8 <_strtod_l+0x590>)
 801802a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801802e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018032:	f7e8 faf1 	bl	8000618 <__aeabi_dmul>
 8018036:	4606      	mov	r6, r0
 8018038:	4628      	mov	r0, r5
 801803a:	460f      	mov	r7, r1
 801803c:	f7e8 fa72 	bl	8000524 <__aeabi_ui2d>
 8018040:	4602      	mov	r2, r0
 8018042:	460b      	mov	r3, r1
 8018044:	4630      	mov	r0, r6
 8018046:	4639      	mov	r1, r7
 8018048:	f7e8 f930 	bl	80002ac <__adddf3>
 801804c:	2c0f      	cmp	r4, #15
 801804e:	4682      	mov	sl, r0
 8018050:	468b      	mov	fp, r1
 8018052:	ddd5      	ble.n	8018000 <_strtod_l+0x3a8>
 8018054:	9b06      	ldr	r3, [sp, #24]
 8018056:	eba4 0808 	sub.w	r8, r4, r8
 801805a:	4498      	add	r8, r3
 801805c:	f1b8 0f00 	cmp.w	r8, #0
 8018060:	f340 8096 	ble.w	8018190 <_strtod_l+0x538>
 8018064:	f018 030f 	ands.w	r3, r8, #15
 8018068:	d00a      	beq.n	8018080 <_strtod_l+0x428>
 801806a:	495f      	ldr	r1, [pc, #380]	; (80181e8 <_strtod_l+0x590>)
 801806c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018070:	4652      	mov	r2, sl
 8018072:	465b      	mov	r3, fp
 8018074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018078:	f7e8 face 	bl	8000618 <__aeabi_dmul>
 801807c:	4682      	mov	sl, r0
 801807e:	468b      	mov	fp, r1
 8018080:	f038 080f 	bics.w	r8, r8, #15
 8018084:	d073      	beq.n	801816e <_strtod_l+0x516>
 8018086:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801808a:	dd47      	ble.n	801811c <_strtod_l+0x4c4>
 801808c:	2400      	movs	r4, #0
 801808e:	46a0      	mov	r8, r4
 8018090:	9407      	str	r4, [sp, #28]
 8018092:	9405      	str	r4, [sp, #20]
 8018094:	2322      	movs	r3, #34	; 0x22
 8018096:	f8df b158 	ldr.w	fp, [pc, #344]	; 80181f0 <_strtod_l+0x598>
 801809a:	f8c9 3000 	str.w	r3, [r9]
 801809e:	f04f 0a00 	mov.w	sl, #0
 80180a2:	9b07      	ldr	r3, [sp, #28]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	f43f ae16 	beq.w	8017cd6 <_strtod_l+0x7e>
 80180aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80180ac:	4648      	mov	r0, r9
 80180ae:	f001 fe55 	bl	8019d5c <_Bfree>
 80180b2:	9905      	ldr	r1, [sp, #20]
 80180b4:	4648      	mov	r0, r9
 80180b6:	f001 fe51 	bl	8019d5c <_Bfree>
 80180ba:	4641      	mov	r1, r8
 80180bc:	4648      	mov	r0, r9
 80180be:	f001 fe4d 	bl	8019d5c <_Bfree>
 80180c2:	9907      	ldr	r1, [sp, #28]
 80180c4:	4648      	mov	r0, r9
 80180c6:	f001 fe49 	bl	8019d5c <_Bfree>
 80180ca:	4621      	mov	r1, r4
 80180cc:	4648      	mov	r0, r9
 80180ce:	f001 fe45 	bl	8019d5c <_Bfree>
 80180d2:	e600      	b.n	8017cd6 <_strtod_l+0x7e>
 80180d4:	9a06      	ldr	r2, [sp, #24]
 80180d6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80180da:	4293      	cmp	r3, r2
 80180dc:	dbba      	blt.n	8018054 <_strtod_l+0x3fc>
 80180de:	4d42      	ldr	r5, [pc, #264]	; (80181e8 <_strtod_l+0x590>)
 80180e0:	f1c4 040f 	rsb	r4, r4, #15
 80180e4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80180e8:	4652      	mov	r2, sl
 80180ea:	465b      	mov	r3, fp
 80180ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80180f0:	f7e8 fa92 	bl	8000618 <__aeabi_dmul>
 80180f4:	9b06      	ldr	r3, [sp, #24]
 80180f6:	1b1c      	subs	r4, r3, r4
 80180f8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80180fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018100:	e78d      	b.n	801801e <_strtod_l+0x3c6>
 8018102:	f113 0f16 	cmn.w	r3, #22
 8018106:	dba5      	blt.n	8018054 <_strtod_l+0x3fc>
 8018108:	4a37      	ldr	r2, [pc, #220]	; (80181e8 <_strtod_l+0x590>)
 801810a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801810e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8018112:	4650      	mov	r0, sl
 8018114:	4659      	mov	r1, fp
 8018116:	f7e8 fba9 	bl	800086c <__aeabi_ddiv>
 801811a:	e782      	b.n	8018022 <_strtod_l+0x3ca>
 801811c:	2300      	movs	r3, #0
 801811e:	4e33      	ldr	r6, [pc, #204]	; (80181ec <_strtod_l+0x594>)
 8018120:	ea4f 1828 	mov.w	r8, r8, asr #4
 8018124:	4650      	mov	r0, sl
 8018126:	4659      	mov	r1, fp
 8018128:	461d      	mov	r5, r3
 801812a:	f1b8 0f01 	cmp.w	r8, #1
 801812e:	dc21      	bgt.n	8018174 <_strtod_l+0x51c>
 8018130:	b10b      	cbz	r3, 8018136 <_strtod_l+0x4de>
 8018132:	4682      	mov	sl, r0
 8018134:	468b      	mov	fp, r1
 8018136:	4b2d      	ldr	r3, [pc, #180]	; (80181ec <_strtod_l+0x594>)
 8018138:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801813c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018140:	4652      	mov	r2, sl
 8018142:	465b      	mov	r3, fp
 8018144:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018148:	f7e8 fa66 	bl	8000618 <__aeabi_dmul>
 801814c:	4b28      	ldr	r3, [pc, #160]	; (80181f0 <_strtod_l+0x598>)
 801814e:	460a      	mov	r2, r1
 8018150:	400b      	ands	r3, r1
 8018152:	4928      	ldr	r1, [pc, #160]	; (80181f4 <_strtod_l+0x59c>)
 8018154:	428b      	cmp	r3, r1
 8018156:	4682      	mov	sl, r0
 8018158:	d898      	bhi.n	801808c <_strtod_l+0x434>
 801815a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801815e:	428b      	cmp	r3, r1
 8018160:	bf86      	itte	hi
 8018162:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80181fc <_strtod_l+0x5a4>
 8018166:	f04f 3aff 	movhi.w	sl, #4294967295
 801816a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801816e:	2300      	movs	r3, #0
 8018170:	9304      	str	r3, [sp, #16]
 8018172:	e077      	b.n	8018264 <_strtod_l+0x60c>
 8018174:	f018 0f01 	tst.w	r8, #1
 8018178:	d006      	beq.n	8018188 <_strtod_l+0x530>
 801817a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018182:	f7e8 fa49 	bl	8000618 <__aeabi_dmul>
 8018186:	2301      	movs	r3, #1
 8018188:	3501      	adds	r5, #1
 801818a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801818e:	e7cc      	b.n	801812a <_strtod_l+0x4d2>
 8018190:	d0ed      	beq.n	801816e <_strtod_l+0x516>
 8018192:	f1c8 0800 	rsb	r8, r8, #0
 8018196:	f018 020f 	ands.w	r2, r8, #15
 801819a:	d00a      	beq.n	80181b2 <_strtod_l+0x55a>
 801819c:	4b12      	ldr	r3, [pc, #72]	; (80181e8 <_strtod_l+0x590>)
 801819e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80181a2:	4650      	mov	r0, sl
 80181a4:	4659      	mov	r1, fp
 80181a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181aa:	f7e8 fb5f 	bl	800086c <__aeabi_ddiv>
 80181ae:	4682      	mov	sl, r0
 80181b0:	468b      	mov	fp, r1
 80181b2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80181b6:	d0da      	beq.n	801816e <_strtod_l+0x516>
 80181b8:	f1b8 0f1f 	cmp.w	r8, #31
 80181bc:	dd20      	ble.n	8018200 <_strtod_l+0x5a8>
 80181be:	2400      	movs	r4, #0
 80181c0:	46a0      	mov	r8, r4
 80181c2:	9407      	str	r4, [sp, #28]
 80181c4:	9405      	str	r4, [sp, #20]
 80181c6:	2322      	movs	r3, #34	; 0x22
 80181c8:	f04f 0a00 	mov.w	sl, #0
 80181cc:	f04f 0b00 	mov.w	fp, #0
 80181d0:	f8c9 3000 	str.w	r3, [r9]
 80181d4:	e765      	b.n	80180a2 <_strtod_l+0x44a>
 80181d6:	bf00      	nop
 80181d8:	0801e0c1 	.word	0x0801e0c1
 80181dc:	0801e14b 	.word	0x0801e14b
 80181e0:	0801e0c9 	.word	0x0801e0c9
 80181e4:	0801e10c 	.word	0x0801e10c
 80181e8:	0801e188 	.word	0x0801e188
 80181ec:	0801e160 	.word	0x0801e160
 80181f0:	7ff00000 	.word	0x7ff00000
 80181f4:	7ca00000 	.word	0x7ca00000
 80181f8:	fff80000 	.word	0xfff80000
 80181fc:	7fefffff 	.word	0x7fefffff
 8018200:	f018 0310 	ands.w	r3, r8, #16
 8018204:	bf18      	it	ne
 8018206:	236a      	movne	r3, #106	; 0x6a
 8018208:	4da0      	ldr	r5, [pc, #640]	; (801848c <_strtod_l+0x834>)
 801820a:	9304      	str	r3, [sp, #16]
 801820c:	4650      	mov	r0, sl
 801820e:	4659      	mov	r1, fp
 8018210:	2300      	movs	r3, #0
 8018212:	f1b8 0f00 	cmp.w	r8, #0
 8018216:	f300 810a 	bgt.w	801842e <_strtod_l+0x7d6>
 801821a:	b10b      	cbz	r3, 8018220 <_strtod_l+0x5c8>
 801821c:	4682      	mov	sl, r0
 801821e:	468b      	mov	fp, r1
 8018220:	9b04      	ldr	r3, [sp, #16]
 8018222:	b1bb      	cbz	r3, 8018254 <_strtod_l+0x5fc>
 8018224:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8018228:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801822c:	2b00      	cmp	r3, #0
 801822e:	4659      	mov	r1, fp
 8018230:	dd10      	ble.n	8018254 <_strtod_l+0x5fc>
 8018232:	2b1f      	cmp	r3, #31
 8018234:	f340 8107 	ble.w	8018446 <_strtod_l+0x7ee>
 8018238:	2b34      	cmp	r3, #52	; 0x34
 801823a:	bfde      	ittt	le
 801823c:	3b20      	suble	r3, #32
 801823e:	f04f 32ff 	movle.w	r2, #4294967295
 8018242:	fa02 f303 	lslle.w	r3, r2, r3
 8018246:	f04f 0a00 	mov.w	sl, #0
 801824a:	bfcc      	ite	gt
 801824c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8018250:	ea03 0b01 	andle.w	fp, r3, r1
 8018254:	2200      	movs	r2, #0
 8018256:	2300      	movs	r3, #0
 8018258:	4650      	mov	r0, sl
 801825a:	4659      	mov	r1, fp
 801825c:	f7e8 fc44 	bl	8000ae8 <__aeabi_dcmpeq>
 8018260:	2800      	cmp	r0, #0
 8018262:	d1ac      	bne.n	80181be <_strtod_l+0x566>
 8018264:	9b07      	ldr	r3, [sp, #28]
 8018266:	9300      	str	r3, [sp, #0]
 8018268:	9a05      	ldr	r2, [sp, #20]
 801826a:	9908      	ldr	r1, [sp, #32]
 801826c:	4623      	mov	r3, r4
 801826e:	4648      	mov	r0, r9
 8018270:	f001 fdc6 	bl	8019e00 <__s2b>
 8018274:	9007      	str	r0, [sp, #28]
 8018276:	2800      	cmp	r0, #0
 8018278:	f43f af08 	beq.w	801808c <_strtod_l+0x434>
 801827c:	9a06      	ldr	r2, [sp, #24]
 801827e:	9b06      	ldr	r3, [sp, #24]
 8018280:	2a00      	cmp	r2, #0
 8018282:	f1c3 0300 	rsb	r3, r3, #0
 8018286:	bfa8      	it	ge
 8018288:	2300      	movge	r3, #0
 801828a:	930e      	str	r3, [sp, #56]	; 0x38
 801828c:	2400      	movs	r4, #0
 801828e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8018292:	9316      	str	r3, [sp, #88]	; 0x58
 8018294:	46a0      	mov	r8, r4
 8018296:	9b07      	ldr	r3, [sp, #28]
 8018298:	4648      	mov	r0, r9
 801829a:	6859      	ldr	r1, [r3, #4]
 801829c:	f001 fd2a 	bl	8019cf4 <_Balloc>
 80182a0:	9005      	str	r0, [sp, #20]
 80182a2:	2800      	cmp	r0, #0
 80182a4:	f43f aef6 	beq.w	8018094 <_strtod_l+0x43c>
 80182a8:	9b07      	ldr	r3, [sp, #28]
 80182aa:	691a      	ldr	r2, [r3, #16]
 80182ac:	3202      	adds	r2, #2
 80182ae:	f103 010c 	add.w	r1, r3, #12
 80182b2:	0092      	lsls	r2, r2, #2
 80182b4:	300c      	adds	r0, #12
 80182b6:	f7fe fd35 	bl	8016d24 <memcpy>
 80182ba:	aa1e      	add	r2, sp, #120	; 0x78
 80182bc:	a91d      	add	r1, sp, #116	; 0x74
 80182be:	ec4b ab10 	vmov	d0, sl, fp
 80182c2:	4648      	mov	r0, r9
 80182c4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80182c8:	f002 f856 	bl	801a378 <__d2b>
 80182cc:	901c      	str	r0, [sp, #112]	; 0x70
 80182ce:	2800      	cmp	r0, #0
 80182d0:	f43f aee0 	beq.w	8018094 <_strtod_l+0x43c>
 80182d4:	2101      	movs	r1, #1
 80182d6:	4648      	mov	r0, r9
 80182d8:	f001 fe1e 	bl	8019f18 <__i2b>
 80182dc:	4680      	mov	r8, r0
 80182de:	2800      	cmp	r0, #0
 80182e0:	f43f aed8 	beq.w	8018094 <_strtod_l+0x43c>
 80182e4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80182e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80182e8:	2e00      	cmp	r6, #0
 80182ea:	bfab      	itete	ge
 80182ec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80182ee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80182f0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80182f2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80182f4:	bfac      	ite	ge
 80182f6:	18f7      	addge	r7, r6, r3
 80182f8:	1b9d      	sublt	r5, r3, r6
 80182fa:	9b04      	ldr	r3, [sp, #16]
 80182fc:	1af6      	subs	r6, r6, r3
 80182fe:	4416      	add	r6, r2
 8018300:	4b63      	ldr	r3, [pc, #396]	; (8018490 <_strtod_l+0x838>)
 8018302:	3e01      	subs	r6, #1
 8018304:	429e      	cmp	r6, r3
 8018306:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801830a:	f280 80af 	bge.w	801846c <_strtod_l+0x814>
 801830e:	1b9b      	subs	r3, r3, r6
 8018310:	2b1f      	cmp	r3, #31
 8018312:	eba2 0203 	sub.w	r2, r2, r3
 8018316:	f04f 0101 	mov.w	r1, #1
 801831a:	f300 809b 	bgt.w	8018454 <_strtod_l+0x7fc>
 801831e:	fa01 f303 	lsl.w	r3, r1, r3
 8018322:	930f      	str	r3, [sp, #60]	; 0x3c
 8018324:	2300      	movs	r3, #0
 8018326:	930a      	str	r3, [sp, #40]	; 0x28
 8018328:	18be      	adds	r6, r7, r2
 801832a:	9b04      	ldr	r3, [sp, #16]
 801832c:	42b7      	cmp	r7, r6
 801832e:	4415      	add	r5, r2
 8018330:	441d      	add	r5, r3
 8018332:	463b      	mov	r3, r7
 8018334:	bfa8      	it	ge
 8018336:	4633      	movge	r3, r6
 8018338:	42ab      	cmp	r3, r5
 801833a:	bfa8      	it	ge
 801833c:	462b      	movge	r3, r5
 801833e:	2b00      	cmp	r3, #0
 8018340:	bfc2      	ittt	gt
 8018342:	1af6      	subgt	r6, r6, r3
 8018344:	1aed      	subgt	r5, r5, r3
 8018346:	1aff      	subgt	r7, r7, r3
 8018348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801834a:	b1bb      	cbz	r3, 801837c <_strtod_l+0x724>
 801834c:	4641      	mov	r1, r8
 801834e:	461a      	mov	r2, r3
 8018350:	4648      	mov	r0, r9
 8018352:	f001 fe81 	bl	801a058 <__pow5mult>
 8018356:	4680      	mov	r8, r0
 8018358:	2800      	cmp	r0, #0
 801835a:	f43f ae9b 	beq.w	8018094 <_strtod_l+0x43c>
 801835e:	4601      	mov	r1, r0
 8018360:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018362:	4648      	mov	r0, r9
 8018364:	f001 fde1 	bl	8019f2a <__multiply>
 8018368:	900c      	str	r0, [sp, #48]	; 0x30
 801836a:	2800      	cmp	r0, #0
 801836c:	f43f ae92 	beq.w	8018094 <_strtod_l+0x43c>
 8018370:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018372:	4648      	mov	r0, r9
 8018374:	f001 fcf2 	bl	8019d5c <_Bfree>
 8018378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801837a:	931c      	str	r3, [sp, #112]	; 0x70
 801837c:	2e00      	cmp	r6, #0
 801837e:	dc7a      	bgt.n	8018476 <_strtod_l+0x81e>
 8018380:	9b06      	ldr	r3, [sp, #24]
 8018382:	2b00      	cmp	r3, #0
 8018384:	dd08      	ble.n	8018398 <_strtod_l+0x740>
 8018386:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018388:	9905      	ldr	r1, [sp, #20]
 801838a:	4648      	mov	r0, r9
 801838c:	f001 fe64 	bl	801a058 <__pow5mult>
 8018390:	9005      	str	r0, [sp, #20]
 8018392:	2800      	cmp	r0, #0
 8018394:	f43f ae7e 	beq.w	8018094 <_strtod_l+0x43c>
 8018398:	2d00      	cmp	r5, #0
 801839a:	dd08      	ble.n	80183ae <_strtod_l+0x756>
 801839c:	462a      	mov	r2, r5
 801839e:	9905      	ldr	r1, [sp, #20]
 80183a0:	4648      	mov	r0, r9
 80183a2:	f001 fea7 	bl	801a0f4 <__lshift>
 80183a6:	9005      	str	r0, [sp, #20]
 80183a8:	2800      	cmp	r0, #0
 80183aa:	f43f ae73 	beq.w	8018094 <_strtod_l+0x43c>
 80183ae:	2f00      	cmp	r7, #0
 80183b0:	dd08      	ble.n	80183c4 <_strtod_l+0x76c>
 80183b2:	4641      	mov	r1, r8
 80183b4:	463a      	mov	r2, r7
 80183b6:	4648      	mov	r0, r9
 80183b8:	f001 fe9c 	bl	801a0f4 <__lshift>
 80183bc:	4680      	mov	r8, r0
 80183be:	2800      	cmp	r0, #0
 80183c0:	f43f ae68 	beq.w	8018094 <_strtod_l+0x43c>
 80183c4:	9a05      	ldr	r2, [sp, #20]
 80183c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80183c8:	4648      	mov	r0, r9
 80183ca:	f001 ff01 	bl	801a1d0 <__mdiff>
 80183ce:	4604      	mov	r4, r0
 80183d0:	2800      	cmp	r0, #0
 80183d2:	f43f ae5f 	beq.w	8018094 <_strtod_l+0x43c>
 80183d6:	68c3      	ldr	r3, [r0, #12]
 80183d8:	930c      	str	r3, [sp, #48]	; 0x30
 80183da:	2300      	movs	r3, #0
 80183dc:	60c3      	str	r3, [r0, #12]
 80183de:	4641      	mov	r1, r8
 80183e0:	f001 fedc 	bl	801a19c <__mcmp>
 80183e4:	2800      	cmp	r0, #0
 80183e6:	da55      	bge.n	8018494 <_strtod_l+0x83c>
 80183e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183ea:	b9e3      	cbnz	r3, 8018426 <_strtod_l+0x7ce>
 80183ec:	f1ba 0f00 	cmp.w	sl, #0
 80183f0:	d119      	bne.n	8018426 <_strtod_l+0x7ce>
 80183f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80183f6:	b9b3      	cbnz	r3, 8018426 <_strtod_l+0x7ce>
 80183f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80183fc:	0d1b      	lsrs	r3, r3, #20
 80183fe:	051b      	lsls	r3, r3, #20
 8018400:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018404:	d90f      	bls.n	8018426 <_strtod_l+0x7ce>
 8018406:	6963      	ldr	r3, [r4, #20]
 8018408:	b913      	cbnz	r3, 8018410 <_strtod_l+0x7b8>
 801840a:	6923      	ldr	r3, [r4, #16]
 801840c:	2b01      	cmp	r3, #1
 801840e:	dd0a      	ble.n	8018426 <_strtod_l+0x7ce>
 8018410:	4621      	mov	r1, r4
 8018412:	2201      	movs	r2, #1
 8018414:	4648      	mov	r0, r9
 8018416:	f001 fe6d 	bl	801a0f4 <__lshift>
 801841a:	4641      	mov	r1, r8
 801841c:	4604      	mov	r4, r0
 801841e:	f001 febd 	bl	801a19c <__mcmp>
 8018422:	2800      	cmp	r0, #0
 8018424:	dc67      	bgt.n	80184f6 <_strtod_l+0x89e>
 8018426:	9b04      	ldr	r3, [sp, #16]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d171      	bne.n	8018510 <_strtod_l+0x8b8>
 801842c:	e63d      	b.n	80180aa <_strtod_l+0x452>
 801842e:	f018 0f01 	tst.w	r8, #1
 8018432:	d004      	beq.n	801843e <_strtod_l+0x7e6>
 8018434:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018438:	f7e8 f8ee 	bl	8000618 <__aeabi_dmul>
 801843c:	2301      	movs	r3, #1
 801843e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018442:	3508      	adds	r5, #8
 8018444:	e6e5      	b.n	8018212 <_strtod_l+0x5ba>
 8018446:	f04f 32ff 	mov.w	r2, #4294967295
 801844a:	fa02 f303 	lsl.w	r3, r2, r3
 801844e:	ea03 0a0a 	and.w	sl, r3, sl
 8018452:	e6ff      	b.n	8018254 <_strtod_l+0x5fc>
 8018454:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8018458:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801845c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8018460:	36e2      	adds	r6, #226	; 0xe2
 8018462:	fa01 f306 	lsl.w	r3, r1, r6
 8018466:	930a      	str	r3, [sp, #40]	; 0x28
 8018468:	910f      	str	r1, [sp, #60]	; 0x3c
 801846a:	e75d      	b.n	8018328 <_strtod_l+0x6d0>
 801846c:	2300      	movs	r3, #0
 801846e:	930a      	str	r3, [sp, #40]	; 0x28
 8018470:	2301      	movs	r3, #1
 8018472:	930f      	str	r3, [sp, #60]	; 0x3c
 8018474:	e758      	b.n	8018328 <_strtod_l+0x6d0>
 8018476:	4632      	mov	r2, r6
 8018478:	991c      	ldr	r1, [sp, #112]	; 0x70
 801847a:	4648      	mov	r0, r9
 801847c:	f001 fe3a 	bl	801a0f4 <__lshift>
 8018480:	901c      	str	r0, [sp, #112]	; 0x70
 8018482:	2800      	cmp	r0, #0
 8018484:	f47f af7c 	bne.w	8018380 <_strtod_l+0x728>
 8018488:	e604      	b.n	8018094 <_strtod_l+0x43c>
 801848a:	bf00      	nop
 801848c:	0801e120 	.word	0x0801e120
 8018490:	fffffc02 	.word	0xfffffc02
 8018494:	465d      	mov	r5, fp
 8018496:	f040 8086 	bne.w	80185a6 <_strtod_l+0x94e>
 801849a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801849c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80184a0:	b32a      	cbz	r2, 80184ee <_strtod_l+0x896>
 80184a2:	4aaf      	ldr	r2, [pc, #700]	; (8018760 <_strtod_l+0xb08>)
 80184a4:	4293      	cmp	r3, r2
 80184a6:	d153      	bne.n	8018550 <_strtod_l+0x8f8>
 80184a8:	9b04      	ldr	r3, [sp, #16]
 80184aa:	4650      	mov	r0, sl
 80184ac:	b1d3      	cbz	r3, 80184e4 <_strtod_l+0x88c>
 80184ae:	4aad      	ldr	r2, [pc, #692]	; (8018764 <_strtod_l+0xb0c>)
 80184b0:	402a      	ands	r2, r5
 80184b2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80184b6:	f04f 31ff 	mov.w	r1, #4294967295
 80184ba:	d816      	bhi.n	80184ea <_strtod_l+0x892>
 80184bc:	0d12      	lsrs	r2, r2, #20
 80184be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80184c2:	fa01 f303 	lsl.w	r3, r1, r3
 80184c6:	4298      	cmp	r0, r3
 80184c8:	d142      	bne.n	8018550 <_strtod_l+0x8f8>
 80184ca:	4ba7      	ldr	r3, [pc, #668]	; (8018768 <_strtod_l+0xb10>)
 80184cc:	429d      	cmp	r5, r3
 80184ce:	d102      	bne.n	80184d6 <_strtod_l+0x87e>
 80184d0:	3001      	adds	r0, #1
 80184d2:	f43f addf 	beq.w	8018094 <_strtod_l+0x43c>
 80184d6:	4ba3      	ldr	r3, [pc, #652]	; (8018764 <_strtod_l+0xb0c>)
 80184d8:	402b      	ands	r3, r5
 80184da:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80184de:	f04f 0a00 	mov.w	sl, #0
 80184e2:	e7a0      	b.n	8018426 <_strtod_l+0x7ce>
 80184e4:	f04f 33ff 	mov.w	r3, #4294967295
 80184e8:	e7ed      	b.n	80184c6 <_strtod_l+0x86e>
 80184ea:	460b      	mov	r3, r1
 80184ec:	e7eb      	b.n	80184c6 <_strtod_l+0x86e>
 80184ee:	bb7b      	cbnz	r3, 8018550 <_strtod_l+0x8f8>
 80184f0:	f1ba 0f00 	cmp.w	sl, #0
 80184f4:	d12c      	bne.n	8018550 <_strtod_l+0x8f8>
 80184f6:	9904      	ldr	r1, [sp, #16]
 80184f8:	4a9a      	ldr	r2, [pc, #616]	; (8018764 <_strtod_l+0xb0c>)
 80184fa:	465b      	mov	r3, fp
 80184fc:	b1f1      	cbz	r1, 801853c <_strtod_l+0x8e4>
 80184fe:	ea02 010b 	and.w	r1, r2, fp
 8018502:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018506:	dc19      	bgt.n	801853c <_strtod_l+0x8e4>
 8018508:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801850c:	f77f ae5b 	ble.w	80181c6 <_strtod_l+0x56e>
 8018510:	4a96      	ldr	r2, [pc, #600]	; (801876c <_strtod_l+0xb14>)
 8018512:	2300      	movs	r3, #0
 8018514:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8018518:	4650      	mov	r0, sl
 801851a:	4659      	mov	r1, fp
 801851c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018520:	f7e8 f87a 	bl	8000618 <__aeabi_dmul>
 8018524:	4682      	mov	sl, r0
 8018526:	468b      	mov	fp, r1
 8018528:	2900      	cmp	r1, #0
 801852a:	f47f adbe 	bne.w	80180aa <_strtod_l+0x452>
 801852e:	2800      	cmp	r0, #0
 8018530:	f47f adbb 	bne.w	80180aa <_strtod_l+0x452>
 8018534:	2322      	movs	r3, #34	; 0x22
 8018536:	f8c9 3000 	str.w	r3, [r9]
 801853a:	e5b6      	b.n	80180aa <_strtod_l+0x452>
 801853c:	4013      	ands	r3, r2
 801853e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018542:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018546:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801854a:	f04f 3aff 	mov.w	sl, #4294967295
 801854e:	e76a      	b.n	8018426 <_strtod_l+0x7ce>
 8018550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018552:	b193      	cbz	r3, 801857a <_strtod_l+0x922>
 8018554:	422b      	tst	r3, r5
 8018556:	f43f af66 	beq.w	8018426 <_strtod_l+0x7ce>
 801855a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801855c:	9a04      	ldr	r2, [sp, #16]
 801855e:	4650      	mov	r0, sl
 8018560:	4659      	mov	r1, fp
 8018562:	b173      	cbz	r3, 8018582 <_strtod_l+0x92a>
 8018564:	f7ff fb59 	bl	8017c1a <sulp>
 8018568:	4602      	mov	r2, r0
 801856a:	460b      	mov	r3, r1
 801856c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018570:	f7e7 fe9c 	bl	80002ac <__adddf3>
 8018574:	4682      	mov	sl, r0
 8018576:	468b      	mov	fp, r1
 8018578:	e755      	b.n	8018426 <_strtod_l+0x7ce>
 801857a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801857c:	ea13 0f0a 	tst.w	r3, sl
 8018580:	e7e9      	b.n	8018556 <_strtod_l+0x8fe>
 8018582:	f7ff fb4a 	bl	8017c1a <sulp>
 8018586:	4602      	mov	r2, r0
 8018588:	460b      	mov	r3, r1
 801858a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801858e:	f7e7 fe8b 	bl	80002a8 <__aeabi_dsub>
 8018592:	2200      	movs	r2, #0
 8018594:	2300      	movs	r3, #0
 8018596:	4682      	mov	sl, r0
 8018598:	468b      	mov	fp, r1
 801859a:	f7e8 faa5 	bl	8000ae8 <__aeabi_dcmpeq>
 801859e:	2800      	cmp	r0, #0
 80185a0:	f47f ae11 	bne.w	80181c6 <_strtod_l+0x56e>
 80185a4:	e73f      	b.n	8018426 <_strtod_l+0x7ce>
 80185a6:	4641      	mov	r1, r8
 80185a8:	4620      	mov	r0, r4
 80185aa:	f001 ff34 	bl	801a416 <__ratio>
 80185ae:	ec57 6b10 	vmov	r6, r7, d0
 80185b2:	2200      	movs	r2, #0
 80185b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80185b8:	ee10 0a10 	vmov	r0, s0
 80185bc:	4639      	mov	r1, r7
 80185be:	f7e8 faa7 	bl	8000b10 <__aeabi_dcmple>
 80185c2:	2800      	cmp	r0, #0
 80185c4:	d077      	beq.n	80186b6 <_strtod_l+0xa5e>
 80185c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d04a      	beq.n	8018662 <_strtod_l+0xa0a>
 80185cc:	4b68      	ldr	r3, [pc, #416]	; (8018770 <_strtod_l+0xb18>)
 80185ce:	2200      	movs	r2, #0
 80185d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80185d4:	4f66      	ldr	r7, [pc, #408]	; (8018770 <_strtod_l+0xb18>)
 80185d6:	2600      	movs	r6, #0
 80185d8:	4b62      	ldr	r3, [pc, #392]	; (8018764 <_strtod_l+0xb0c>)
 80185da:	402b      	ands	r3, r5
 80185dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80185de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80185e0:	4b64      	ldr	r3, [pc, #400]	; (8018774 <_strtod_l+0xb1c>)
 80185e2:	429a      	cmp	r2, r3
 80185e4:	f040 80ce 	bne.w	8018784 <_strtod_l+0xb2c>
 80185e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80185ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80185f0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80185f4:	ec4b ab10 	vmov	d0, sl, fp
 80185f8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80185fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018600:	f001 fe44 	bl	801a28c <__ulp>
 8018604:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018608:	ec53 2b10 	vmov	r2, r3, d0
 801860c:	f7e8 f804 	bl	8000618 <__aeabi_dmul>
 8018610:	4652      	mov	r2, sl
 8018612:	465b      	mov	r3, fp
 8018614:	f7e7 fe4a 	bl	80002ac <__adddf3>
 8018618:	460b      	mov	r3, r1
 801861a:	4952      	ldr	r1, [pc, #328]	; (8018764 <_strtod_l+0xb0c>)
 801861c:	4a56      	ldr	r2, [pc, #344]	; (8018778 <_strtod_l+0xb20>)
 801861e:	4019      	ands	r1, r3
 8018620:	4291      	cmp	r1, r2
 8018622:	4682      	mov	sl, r0
 8018624:	d95b      	bls.n	80186de <_strtod_l+0xa86>
 8018626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018628:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801862c:	4293      	cmp	r3, r2
 801862e:	d103      	bne.n	8018638 <_strtod_l+0x9e0>
 8018630:	9b08      	ldr	r3, [sp, #32]
 8018632:	3301      	adds	r3, #1
 8018634:	f43f ad2e 	beq.w	8018094 <_strtod_l+0x43c>
 8018638:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8018768 <_strtod_l+0xb10>
 801863c:	f04f 3aff 	mov.w	sl, #4294967295
 8018640:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018642:	4648      	mov	r0, r9
 8018644:	f001 fb8a 	bl	8019d5c <_Bfree>
 8018648:	9905      	ldr	r1, [sp, #20]
 801864a:	4648      	mov	r0, r9
 801864c:	f001 fb86 	bl	8019d5c <_Bfree>
 8018650:	4641      	mov	r1, r8
 8018652:	4648      	mov	r0, r9
 8018654:	f001 fb82 	bl	8019d5c <_Bfree>
 8018658:	4621      	mov	r1, r4
 801865a:	4648      	mov	r0, r9
 801865c:	f001 fb7e 	bl	8019d5c <_Bfree>
 8018660:	e619      	b.n	8018296 <_strtod_l+0x63e>
 8018662:	f1ba 0f00 	cmp.w	sl, #0
 8018666:	d11a      	bne.n	801869e <_strtod_l+0xa46>
 8018668:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801866c:	b9eb      	cbnz	r3, 80186aa <_strtod_l+0xa52>
 801866e:	2200      	movs	r2, #0
 8018670:	4b3f      	ldr	r3, [pc, #252]	; (8018770 <_strtod_l+0xb18>)
 8018672:	4630      	mov	r0, r6
 8018674:	4639      	mov	r1, r7
 8018676:	f7e8 fa41 	bl	8000afc <__aeabi_dcmplt>
 801867a:	b9c8      	cbnz	r0, 80186b0 <_strtod_l+0xa58>
 801867c:	4630      	mov	r0, r6
 801867e:	4639      	mov	r1, r7
 8018680:	2200      	movs	r2, #0
 8018682:	4b3e      	ldr	r3, [pc, #248]	; (801877c <_strtod_l+0xb24>)
 8018684:	f7e7 ffc8 	bl	8000618 <__aeabi_dmul>
 8018688:	4606      	mov	r6, r0
 801868a:	460f      	mov	r7, r1
 801868c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8018690:	9618      	str	r6, [sp, #96]	; 0x60
 8018692:	9319      	str	r3, [sp, #100]	; 0x64
 8018694:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8018698:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801869c:	e79c      	b.n	80185d8 <_strtod_l+0x980>
 801869e:	f1ba 0f01 	cmp.w	sl, #1
 80186a2:	d102      	bne.n	80186aa <_strtod_l+0xa52>
 80186a4:	2d00      	cmp	r5, #0
 80186a6:	f43f ad8e 	beq.w	80181c6 <_strtod_l+0x56e>
 80186aa:	2200      	movs	r2, #0
 80186ac:	4b34      	ldr	r3, [pc, #208]	; (8018780 <_strtod_l+0xb28>)
 80186ae:	e78f      	b.n	80185d0 <_strtod_l+0x978>
 80186b0:	2600      	movs	r6, #0
 80186b2:	4f32      	ldr	r7, [pc, #200]	; (801877c <_strtod_l+0xb24>)
 80186b4:	e7ea      	b.n	801868c <_strtod_l+0xa34>
 80186b6:	4b31      	ldr	r3, [pc, #196]	; (801877c <_strtod_l+0xb24>)
 80186b8:	4630      	mov	r0, r6
 80186ba:	4639      	mov	r1, r7
 80186bc:	2200      	movs	r2, #0
 80186be:	f7e7 ffab 	bl	8000618 <__aeabi_dmul>
 80186c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80186c4:	4606      	mov	r6, r0
 80186c6:	460f      	mov	r7, r1
 80186c8:	b933      	cbnz	r3, 80186d8 <_strtod_l+0xa80>
 80186ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80186ce:	9010      	str	r0, [sp, #64]	; 0x40
 80186d0:	9311      	str	r3, [sp, #68]	; 0x44
 80186d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80186d6:	e7df      	b.n	8018698 <_strtod_l+0xa40>
 80186d8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80186dc:	e7f9      	b.n	80186d2 <_strtod_l+0xa7a>
 80186de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80186e2:	9b04      	ldr	r3, [sp, #16]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d1ab      	bne.n	8018640 <_strtod_l+0x9e8>
 80186e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80186ec:	0d1b      	lsrs	r3, r3, #20
 80186ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80186f0:	051b      	lsls	r3, r3, #20
 80186f2:	429a      	cmp	r2, r3
 80186f4:	465d      	mov	r5, fp
 80186f6:	d1a3      	bne.n	8018640 <_strtod_l+0x9e8>
 80186f8:	4639      	mov	r1, r7
 80186fa:	4630      	mov	r0, r6
 80186fc:	f7e8 fa3c 	bl	8000b78 <__aeabi_d2iz>
 8018700:	f7e7 ff20 	bl	8000544 <__aeabi_i2d>
 8018704:	460b      	mov	r3, r1
 8018706:	4602      	mov	r2, r0
 8018708:	4639      	mov	r1, r7
 801870a:	4630      	mov	r0, r6
 801870c:	f7e7 fdcc 	bl	80002a8 <__aeabi_dsub>
 8018710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018712:	4606      	mov	r6, r0
 8018714:	460f      	mov	r7, r1
 8018716:	b933      	cbnz	r3, 8018726 <_strtod_l+0xace>
 8018718:	f1ba 0f00 	cmp.w	sl, #0
 801871c:	d103      	bne.n	8018726 <_strtod_l+0xace>
 801871e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8018722:	2d00      	cmp	r5, #0
 8018724:	d06d      	beq.n	8018802 <_strtod_l+0xbaa>
 8018726:	a30a      	add	r3, pc, #40	; (adr r3, 8018750 <_strtod_l+0xaf8>)
 8018728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801872c:	4630      	mov	r0, r6
 801872e:	4639      	mov	r1, r7
 8018730:	f7e8 f9e4 	bl	8000afc <__aeabi_dcmplt>
 8018734:	2800      	cmp	r0, #0
 8018736:	f47f acb8 	bne.w	80180aa <_strtod_l+0x452>
 801873a:	a307      	add	r3, pc, #28	; (adr r3, 8018758 <_strtod_l+0xb00>)
 801873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018740:	4630      	mov	r0, r6
 8018742:	4639      	mov	r1, r7
 8018744:	f7e8 f9f8 	bl	8000b38 <__aeabi_dcmpgt>
 8018748:	2800      	cmp	r0, #0
 801874a:	f43f af79 	beq.w	8018640 <_strtod_l+0x9e8>
 801874e:	e4ac      	b.n	80180aa <_strtod_l+0x452>
 8018750:	94a03595 	.word	0x94a03595
 8018754:	3fdfffff 	.word	0x3fdfffff
 8018758:	35afe535 	.word	0x35afe535
 801875c:	3fe00000 	.word	0x3fe00000
 8018760:	000fffff 	.word	0x000fffff
 8018764:	7ff00000 	.word	0x7ff00000
 8018768:	7fefffff 	.word	0x7fefffff
 801876c:	39500000 	.word	0x39500000
 8018770:	3ff00000 	.word	0x3ff00000
 8018774:	7fe00000 	.word	0x7fe00000
 8018778:	7c9fffff 	.word	0x7c9fffff
 801877c:	3fe00000 	.word	0x3fe00000
 8018780:	bff00000 	.word	0xbff00000
 8018784:	9b04      	ldr	r3, [sp, #16]
 8018786:	b333      	cbz	r3, 80187d6 <_strtod_l+0xb7e>
 8018788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801878a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801878e:	d822      	bhi.n	80187d6 <_strtod_l+0xb7e>
 8018790:	a327      	add	r3, pc, #156	; (adr r3, 8018830 <_strtod_l+0xbd8>)
 8018792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018796:	4630      	mov	r0, r6
 8018798:	4639      	mov	r1, r7
 801879a:	f7e8 f9b9 	bl	8000b10 <__aeabi_dcmple>
 801879e:	b1a0      	cbz	r0, 80187ca <_strtod_l+0xb72>
 80187a0:	4639      	mov	r1, r7
 80187a2:	4630      	mov	r0, r6
 80187a4:	f7e8 fa10 	bl	8000bc8 <__aeabi_d2uiz>
 80187a8:	2800      	cmp	r0, #0
 80187aa:	bf08      	it	eq
 80187ac:	2001      	moveq	r0, #1
 80187ae:	f7e7 feb9 	bl	8000524 <__aeabi_ui2d>
 80187b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80187b4:	4606      	mov	r6, r0
 80187b6:	460f      	mov	r7, r1
 80187b8:	bb03      	cbnz	r3, 80187fc <_strtod_l+0xba4>
 80187ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80187be:	9012      	str	r0, [sp, #72]	; 0x48
 80187c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80187c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80187c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80187ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80187cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80187ce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80187d2:	1a9b      	subs	r3, r3, r2
 80187d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80187d6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80187da:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80187de:	f001 fd55 	bl	801a28c <__ulp>
 80187e2:	4650      	mov	r0, sl
 80187e4:	ec53 2b10 	vmov	r2, r3, d0
 80187e8:	4659      	mov	r1, fp
 80187ea:	f7e7 ff15 	bl	8000618 <__aeabi_dmul>
 80187ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80187f2:	f7e7 fd5b 	bl	80002ac <__adddf3>
 80187f6:	4682      	mov	sl, r0
 80187f8:	468b      	mov	fp, r1
 80187fa:	e772      	b.n	80186e2 <_strtod_l+0xa8a>
 80187fc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8018800:	e7df      	b.n	80187c2 <_strtod_l+0xb6a>
 8018802:	a30d      	add	r3, pc, #52	; (adr r3, 8018838 <_strtod_l+0xbe0>)
 8018804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018808:	f7e8 f978 	bl	8000afc <__aeabi_dcmplt>
 801880c:	e79c      	b.n	8018748 <_strtod_l+0xaf0>
 801880e:	2300      	movs	r3, #0
 8018810:	930d      	str	r3, [sp, #52]	; 0x34
 8018812:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018816:	6013      	str	r3, [r2, #0]
 8018818:	f7ff ba61 	b.w	8017cde <_strtod_l+0x86>
 801881c:	2b65      	cmp	r3, #101	; 0x65
 801881e:	f04f 0200 	mov.w	r2, #0
 8018822:	f43f ab4e 	beq.w	8017ec2 <_strtod_l+0x26a>
 8018826:	2101      	movs	r1, #1
 8018828:	4614      	mov	r4, r2
 801882a:	9104      	str	r1, [sp, #16]
 801882c:	f7ff bacb 	b.w	8017dc6 <_strtod_l+0x16e>
 8018830:	ffc00000 	.word	0xffc00000
 8018834:	41dfffff 	.word	0x41dfffff
 8018838:	94a03595 	.word	0x94a03595
 801883c:	3fcfffff 	.word	0x3fcfffff

08018840 <_strtod_r>:
 8018840:	4b05      	ldr	r3, [pc, #20]	; (8018858 <_strtod_r+0x18>)
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	b410      	push	{r4}
 8018846:	6a1b      	ldr	r3, [r3, #32]
 8018848:	4c04      	ldr	r4, [pc, #16]	; (801885c <_strtod_r+0x1c>)
 801884a:	2b00      	cmp	r3, #0
 801884c:	bf08      	it	eq
 801884e:	4623      	moveq	r3, r4
 8018850:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018854:	f7ff ba00 	b.w	8017c58 <_strtod_l>
 8018858:	20000198 	.word	0x20000198
 801885c:	200001fc 	.word	0x200001fc

08018860 <strtod>:
 8018860:	4b07      	ldr	r3, [pc, #28]	; (8018880 <strtod+0x20>)
 8018862:	4a08      	ldr	r2, [pc, #32]	; (8018884 <strtod+0x24>)
 8018864:	b410      	push	{r4}
 8018866:	681c      	ldr	r4, [r3, #0]
 8018868:	6a23      	ldr	r3, [r4, #32]
 801886a:	2b00      	cmp	r3, #0
 801886c:	bf08      	it	eq
 801886e:	4613      	moveq	r3, r2
 8018870:	460a      	mov	r2, r1
 8018872:	4601      	mov	r1, r0
 8018874:	4620      	mov	r0, r4
 8018876:	f85d 4b04 	ldr.w	r4, [sp], #4
 801887a:	f7ff b9ed 	b.w	8017c58 <_strtod_l>
 801887e:	bf00      	nop
 8018880:	20000198 	.word	0x20000198
 8018884:	200001fc 	.word	0x200001fc

08018888 <_strtol_l.isra.0>:
 8018888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801888c:	4680      	mov	r8, r0
 801888e:	4689      	mov	r9, r1
 8018890:	4692      	mov	sl, r2
 8018892:	461e      	mov	r6, r3
 8018894:	460f      	mov	r7, r1
 8018896:	463d      	mov	r5, r7
 8018898:	9808      	ldr	r0, [sp, #32]
 801889a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801889e:	f001 fa01 	bl	8019ca4 <__locale_ctype_ptr_l>
 80188a2:	4420      	add	r0, r4
 80188a4:	7843      	ldrb	r3, [r0, #1]
 80188a6:	f013 0308 	ands.w	r3, r3, #8
 80188aa:	d132      	bne.n	8018912 <_strtol_l.isra.0+0x8a>
 80188ac:	2c2d      	cmp	r4, #45	; 0x2d
 80188ae:	d132      	bne.n	8018916 <_strtol_l.isra.0+0x8e>
 80188b0:	787c      	ldrb	r4, [r7, #1]
 80188b2:	1cbd      	adds	r5, r7, #2
 80188b4:	2201      	movs	r2, #1
 80188b6:	2e00      	cmp	r6, #0
 80188b8:	d05d      	beq.n	8018976 <_strtol_l.isra.0+0xee>
 80188ba:	2e10      	cmp	r6, #16
 80188bc:	d109      	bne.n	80188d2 <_strtol_l.isra.0+0x4a>
 80188be:	2c30      	cmp	r4, #48	; 0x30
 80188c0:	d107      	bne.n	80188d2 <_strtol_l.isra.0+0x4a>
 80188c2:	782b      	ldrb	r3, [r5, #0]
 80188c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80188c8:	2b58      	cmp	r3, #88	; 0x58
 80188ca:	d14f      	bne.n	801896c <_strtol_l.isra.0+0xe4>
 80188cc:	786c      	ldrb	r4, [r5, #1]
 80188ce:	2610      	movs	r6, #16
 80188d0:	3502      	adds	r5, #2
 80188d2:	2a00      	cmp	r2, #0
 80188d4:	bf14      	ite	ne
 80188d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80188da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80188de:	2700      	movs	r7, #0
 80188e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80188e4:	4638      	mov	r0, r7
 80188e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80188ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80188ee:	2b09      	cmp	r3, #9
 80188f0:	d817      	bhi.n	8018922 <_strtol_l.isra.0+0x9a>
 80188f2:	461c      	mov	r4, r3
 80188f4:	42a6      	cmp	r6, r4
 80188f6:	dd23      	ble.n	8018940 <_strtol_l.isra.0+0xb8>
 80188f8:	1c7b      	adds	r3, r7, #1
 80188fa:	d007      	beq.n	801890c <_strtol_l.isra.0+0x84>
 80188fc:	4584      	cmp	ip, r0
 80188fe:	d31c      	bcc.n	801893a <_strtol_l.isra.0+0xb2>
 8018900:	d101      	bne.n	8018906 <_strtol_l.isra.0+0x7e>
 8018902:	45a6      	cmp	lr, r4
 8018904:	db19      	blt.n	801893a <_strtol_l.isra.0+0xb2>
 8018906:	fb00 4006 	mla	r0, r0, r6, r4
 801890a:	2701      	movs	r7, #1
 801890c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018910:	e7eb      	b.n	80188ea <_strtol_l.isra.0+0x62>
 8018912:	462f      	mov	r7, r5
 8018914:	e7bf      	b.n	8018896 <_strtol_l.isra.0+0xe>
 8018916:	2c2b      	cmp	r4, #43	; 0x2b
 8018918:	bf04      	itt	eq
 801891a:	1cbd      	addeq	r5, r7, #2
 801891c:	787c      	ldrbeq	r4, [r7, #1]
 801891e:	461a      	mov	r2, r3
 8018920:	e7c9      	b.n	80188b6 <_strtol_l.isra.0+0x2e>
 8018922:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8018926:	2b19      	cmp	r3, #25
 8018928:	d801      	bhi.n	801892e <_strtol_l.isra.0+0xa6>
 801892a:	3c37      	subs	r4, #55	; 0x37
 801892c:	e7e2      	b.n	80188f4 <_strtol_l.isra.0+0x6c>
 801892e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8018932:	2b19      	cmp	r3, #25
 8018934:	d804      	bhi.n	8018940 <_strtol_l.isra.0+0xb8>
 8018936:	3c57      	subs	r4, #87	; 0x57
 8018938:	e7dc      	b.n	80188f4 <_strtol_l.isra.0+0x6c>
 801893a:	f04f 37ff 	mov.w	r7, #4294967295
 801893e:	e7e5      	b.n	801890c <_strtol_l.isra.0+0x84>
 8018940:	1c7b      	adds	r3, r7, #1
 8018942:	d108      	bne.n	8018956 <_strtol_l.isra.0+0xce>
 8018944:	2322      	movs	r3, #34	; 0x22
 8018946:	f8c8 3000 	str.w	r3, [r8]
 801894a:	4608      	mov	r0, r1
 801894c:	f1ba 0f00 	cmp.w	sl, #0
 8018950:	d107      	bne.n	8018962 <_strtol_l.isra.0+0xda>
 8018952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018956:	b102      	cbz	r2, 801895a <_strtol_l.isra.0+0xd2>
 8018958:	4240      	negs	r0, r0
 801895a:	f1ba 0f00 	cmp.w	sl, #0
 801895e:	d0f8      	beq.n	8018952 <_strtol_l.isra.0+0xca>
 8018960:	b10f      	cbz	r7, 8018966 <_strtol_l.isra.0+0xde>
 8018962:	f105 39ff 	add.w	r9, r5, #4294967295
 8018966:	f8ca 9000 	str.w	r9, [sl]
 801896a:	e7f2      	b.n	8018952 <_strtol_l.isra.0+0xca>
 801896c:	2430      	movs	r4, #48	; 0x30
 801896e:	2e00      	cmp	r6, #0
 8018970:	d1af      	bne.n	80188d2 <_strtol_l.isra.0+0x4a>
 8018972:	2608      	movs	r6, #8
 8018974:	e7ad      	b.n	80188d2 <_strtol_l.isra.0+0x4a>
 8018976:	2c30      	cmp	r4, #48	; 0x30
 8018978:	d0a3      	beq.n	80188c2 <_strtol_l.isra.0+0x3a>
 801897a:	260a      	movs	r6, #10
 801897c:	e7a9      	b.n	80188d2 <_strtol_l.isra.0+0x4a>
	...

08018980 <_strtol_r>:
 8018980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018982:	4c06      	ldr	r4, [pc, #24]	; (801899c <_strtol_r+0x1c>)
 8018984:	4d06      	ldr	r5, [pc, #24]	; (80189a0 <_strtol_r+0x20>)
 8018986:	6824      	ldr	r4, [r4, #0]
 8018988:	6a24      	ldr	r4, [r4, #32]
 801898a:	2c00      	cmp	r4, #0
 801898c:	bf08      	it	eq
 801898e:	462c      	moveq	r4, r5
 8018990:	9400      	str	r4, [sp, #0]
 8018992:	f7ff ff79 	bl	8018888 <_strtol_l.isra.0>
 8018996:	b003      	add	sp, #12
 8018998:	bd30      	pop	{r4, r5, pc}
 801899a:	bf00      	nop
 801899c:	20000198 	.word	0x20000198
 80189a0:	200001fc 	.word	0x200001fc

080189a4 <strtol>:
 80189a4:	4b08      	ldr	r3, [pc, #32]	; (80189c8 <strtol+0x24>)
 80189a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80189a8:	681c      	ldr	r4, [r3, #0]
 80189aa:	4d08      	ldr	r5, [pc, #32]	; (80189cc <strtol+0x28>)
 80189ac:	6a23      	ldr	r3, [r4, #32]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	bf08      	it	eq
 80189b2:	462b      	moveq	r3, r5
 80189b4:	9300      	str	r3, [sp, #0]
 80189b6:	4613      	mov	r3, r2
 80189b8:	460a      	mov	r2, r1
 80189ba:	4601      	mov	r1, r0
 80189bc:	4620      	mov	r0, r4
 80189be:	f7ff ff63 	bl	8018888 <_strtol_l.isra.0>
 80189c2:	b003      	add	sp, #12
 80189c4:	bd30      	pop	{r4, r5, pc}
 80189c6:	bf00      	nop
 80189c8:	20000198 	.word	0x20000198
 80189cc:	200001fc 	.word	0x200001fc

080189d0 <quorem>:
 80189d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189d4:	6903      	ldr	r3, [r0, #16]
 80189d6:	690c      	ldr	r4, [r1, #16]
 80189d8:	42a3      	cmp	r3, r4
 80189da:	4680      	mov	r8, r0
 80189dc:	f2c0 8082 	blt.w	8018ae4 <quorem+0x114>
 80189e0:	3c01      	subs	r4, #1
 80189e2:	f101 0714 	add.w	r7, r1, #20
 80189e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80189ea:	f100 0614 	add.w	r6, r0, #20
 80189ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80189f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80189f6:	eb06 030c 	add.w	r3, r6, ip
 80189fa:	3501      	adds	r5, #1
 80189fc:	eb07 090c 	add.w	r9, r7, ip
 8018a00:	9301      	str	r3, [sp, #4]
 8018a02:	fbb0 f5f5 	udiv	r5, r0, r5
 8018a06:	b395      	cbz	r5, 8018a6e <quorem+0x9e>
 8018a08:	f04f 0a00 	mov.w	sl, #0
 8018a0c:	4638      	mov	r0, r7
 8018a0e:	46b6      	mov	lr, r6
 8018a10:	46d3      	mov	fp, sl
 8018a12:	f850 2b04 	ldr.w	r2, [r0], #4
 8018a16:	b293      	uxth	r3, r2
 8018a18:	fb05 a303 	mla	r3, r5, r3, sl
 8018a1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	ebab 0303 	sub.w	r3, fp, r3
 8018a26:	0c12      	lsrs	r2, r2, #16
 8018a28:	f8de b000 	ldr.w	fp, [lr]
 8018a2c:	fb05 a202 	mla	r2, r5, r2, sl
 8018a30:	fa13 f38b 	uxtah	r3, r3, fp
 8018a34:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8018a38:	fa1f fb82 	uxth.w	fp, r2
 8018a3c:	f8de 2000 	ldr.w	r2, [lr]
 8018a40:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8018a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018a48:	b29b      	uxth	r3, r3
 8018a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018a4e:	4581      	cmp	r9, r0
 8018a50:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8018a54:	f84e 3b04 	str.w	r3, [lr], #4
 8018a58:	d2db      	bcs.n	8018a12 <quorem+0x42>
 8018a5a:	f856 300c 	ldr.w	r3, [r6, ip]
 8018a5e:	b933      	cbnz	r3, 8018a6e <quorem+0x9e>
 8018a60:	9b01      	ldr	r3, [sp, #4]
 8018a62:	3b04      	subs	r3, #4
 8018a64:	429e      	cmp	r6, r3
 8018a66:	461a      	mov	r2, r3
 8018a68:	d330      	bcc.n	8018acc <quorem+0xfc>
 8018a6a:	f8c8 4010 	str.w	r4, [r8, #16]
 8018a6e:	4640      	mov	r0, r8
 8018a70:	f001 fb94 	bl	801a19c <__mcmp>
 8018a74:	2800      	cmp	r0, #0
 8018a76:	db25      	blt.n	8018ac4 <quorem+0xf4>
 8018a78:	3501      	adds	r5, #1
 8018a7a:	4630      	mov	r0, r6
 8018a7c:	f04f 0c00 	mov.w	ip, #0
 8018a80:	f857 2b04 	ldr.w	r2, [r7], #4
 8018a84:	f8d0 e000 	ldr.w	lr, [r0]
 8018a88:	b293      	uxth	r3, r2
 8018a8a:	ebac 0303 	sub.w	r3, ip, r3
 8018a8e:	0c12      	lsrs	r2, r2, #16
 8018a90:	fa13 f38e 	uxtah	r3, r3, lr
 8018a94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018a98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018a9c:	b29b      	uxth	r3, r3
 8018a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018aa2:	45b9      	cmp	r9, r7
 8018aa4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018aa8:	f840 3b04 	str.w	r3, [r0], #4
 8018aac:	d2e8      	bcs.n	8018a80 <quorem+0xb0>
 8018aae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8018ab2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8018ab6:	b92a      	cbnz	r2, 8018ac4 <quorem+0xf4>
 8018ab8:	3b04      	subs	r3, #4
 8018aba:	429e      	cmp	r6, r3
 8018abc:	461a      	mov	r2, r3
 8018abe:	d30b      	bcc.n	8018ad8 <quorem+0x108>
 8018ac0:	f8c8 4010 	str.w	r4, [r8, #16]
 8018ac4:	4628      	mov	r0, r5
 8018ac6:	b003      	add	sp, #12
 8018ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018acc:	6812      	ldr	r2, [r2, #0]
 8018ace:	3b04      	subs	r3, #4
 8018ad0:	2a00      	cmp	r2, #0
 8018ad2:	d1ca      	bne.n	8018a6a <quorem+0x9a>
 8018ad4:	3c01      	subs	r4, #1
 8018ad6:	e7c5      	b.n	8018a64 <quorem+0x94>
 8018ad8:	6812      	ldr	r2, [r2, #0]
 8018ada:	3b04      	subs	r3, #4
 8018adc:	2a00      	cmp	r2, #0
 8018ade:	d1ef      	bne.n	8018ac0 <quorem+0xf0>
 8018ae0:	3c01      	subs	r4, #1
 8018ae2:	e7ea      	b.n	8018aba <quorem+0xea>
 8018ae4:	2000      	movs	r0, #0
 8018ae6:	e7ee      	b.n	8018ac6 <quorem+0xf6>

08018ae8 <_dtoa_r>:
 8018ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aec:	ec57 6b10 	vmov	r6, r7, d0
 8018af0:	b097      	sub	sp, #92	; 0x5c
 8018af2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018af4:	9106      	str	r1, [sp, #24]
 8018af6:	4604      	mov	r4, r0
 8018af8:	920b      	str	r2, [sp, #44]	; 0x2c
 8018afa:	9312      	str	r3, [sp, #72]	; 0x48
 8018afc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018b00:	e9cd 6700 	strd	r6, r7, [sp]
 8018b04:	b93d      	cbnz	r5, 8018b16 <_dtoa_r+0x2e>
 8018b06:	2010      	movs	r0, #16
 8018b08:	f7fe f8fc 	bl	8016d04 <malloc>
 8018b0c:	6260      	str	r0, [r4, #36]	; 0x24
 8018b0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018b12:	6005      	str	r5, [r0, #0]
 8018b14:	60c5      	str	r5, [r0, #12]
 8018b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b18:	6819      	ldr	r1, [r3, #0]
 8018b1a:	b151      	cbz	r1, 8018b32 <_dtoa_r+0x4a>
 8018b1c:	685a      	ldr	r2, [r3, #4]
 8018b1e:	604a      	str	r2, [r1, #4]
 8018b20:	2301      	movs	r3, #1
 8018b22:	4093      	lsls	r3, r2
 8018b24:	608b      	str	r3, [r1, #8]
 8018b26:	4620      	mov	r0, r4
 8018b28:	f001 f918 	bl	8019d5c <_Bfree>
 8018b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b2e:	2200      	movs	r2, #0
 8018b30:	601a      	str	r2, [r3, #0]
 8018b32:	1e3b      	subs	r3, r7, #0
 8018b34:	bfbb      	ittet	lt
 8018b36:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018b3a:	9301      	strlt	r3, [sp, #4]
 8018b3c:	2300      	movge	r3, #0
 8018b3e:	2201      	movlt	r2, #1
 8018b40:	bfac      	ite	ge
 8018b42:	f8c8 3000 	strge.w	r3, [r8]
 8018b46:	f8c8 2000 	strlt.w	r2, [r8]
 8018b4a:	4baf      	ldr	r3, [pc, #700]	; (8018e08 <_dtoa_r+0x320>)
 8018b4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018b50:	ea33 0308 	bics.w	r3, r3, r8
 8018b54:	d114      	bne.n	8018b80 <_dtoa_r+0x98>
 8018b56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018b58:	f242 730f 	movw	r3, #9999	; 0x270f
 8018b5c:	6013      	str	r3, [r2, #0]
 8018b5e:	9b00      	ldr	r3, [sp, #0]
 8018b60:	b923      	cbnz	r3, 8018b6c <_dtoa_r+0x84>
 8018b62:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8018b66:	2800      	cmp	r0, #0
 8018b68:	f000 8542 	beq.w	80195f0 <_dtoa_r+0xb08>
 8018b6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b6e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8018e1c <_dtoa_r+0x334>
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	f000 8544 	beq.w	8019600 <_dtoa_r+0xb18>
 8018b78:	f10b 0303 	add.w	r3, fp, #3
 8018b7c:	f000 bd3e 	b.w	80195fc <_dtoa_r+0xb14>
 8018b80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018b84:	2200      	movs	r2, #0
 8018b86:	2300      	movs	r3, #0
 8018b88:	4630      	mov	r0, r6
 8018b8a:	4639      	mov	r1, r7
 8018b8c:	f7e7 ffac 	bl	8000ae8 <__aeabi_dcmpeq>
 8018b90:	4681      	mov	r9, r0
 8018b92:	b168      	cbz	r0, 8018bb0 <_dtoa_r+0xc8>
 8018b94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018b96:	2301      	movs	r3, #1
 8018b98:	6013      	str	r3, [r2, #0]
 8018b9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	f000 8524 	beq.w	80195ea <_dtoa_r+0xb02>
 8018ba2:	4b9a      	ldr	r3, [pc, #616]	; (8018e0c <_dtoa_r+0x324>)
 8018ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018ba6:	f103 3bff 	add.w	fp, r3, #4294967295
 8018baa:	6013      	str	r3, [r2, #0]
 8018bac:	f000 bd28 	b.w	8019600 <_dtoa_r+0xb18>
 8018bb0:	aa14      	add	r2, sp, #80	; 0x50
 8018bb2:	a915      	add	r1, sp, #84	; 0x54
 8018bb4:	ec47 6b10 	vmov	d0, r6, r7
 8018bb8:	4620      	mov	r0, r4
 8018bba:	f001 fbdd 	bl	801a378 <__d2b>
 8018bbe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8018bc2:	9004      	str	r0, [sp, #16]
 8018bc4:	2d00      	cmp	r5, #0
 8018bc6:	d07c      	beq.n	8018cc2 <_dtoa_r+0x1da>
 8018bc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018bcc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8018bd0:	46b2      	mov	sl, r6
 8018bd2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8018bd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018bda:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8018bde:	2200      	movs	r2, #0
 8018be0:	4b8b      	ldr	r3, [pc, #556]	; (8018e10 <_dtoa_r+0x328>)
 8018be2:	4650      	mov	r0, sl
 8018be4:	4659      	mov	r1, fp
 8018be6:	f7e7 fb5f 	bl	80002a8 <__aeabi_dsub>
 8018bea:	a381      	add	r3, pc, #516	; (adr r3, 8018df0 <_dtoa_r+0x308>)
 8018bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bf0:	f7e7 fd12 	bl	8000618 <__aeabi_dmul>
 8018bf4:	a380      	add	r3, pc, #512	; (adr r3, 8018df8 <_dtoa_r+0x310>)
 8018bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bfa:	f7e7 fb57 	bl	80002ac <__adddf3>
 8018bfe:	4606      	mov	r6, r0
 8018c00:	4628      	mov	r0, r5
 8018c02:	460f      	mov	r7, r1
 8018c04:	f7e7 fc9e 	bl	8000544 <__aeabi_i2d>
 8018c08:	a37d      	add	r3, pc, #500	; (adr r3, 8018e00 <_dtoa_r+0x318>)
 8018c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c0e:	f7e7 fd03 	bl	8000618 <__aeabi_dmul>
 8018c12:	4602      	mov	r2, r0
 8018c14:	460b      	mov	r3, r1
 8018c16:	4630      	mov	r0, r6
 8018c18:	4639      	mov	r1, r7
 8018c1a:	f7e7 fb47 	bl	80002ac <__adddf3>
 8018c1e:	4606      	mov	r6, r0
 8018c20:	460f      	mov	r7, r1
 8018c22:	f7e7 ffa9 	bl	8000b78 <__aeabi_d2iz>
 8018c26:	2200      	movs	r2, #0
 8018c28:	4682      	mov	sl, r0
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	4630      	mov	r0, r6
 8018c2e:	4639      	mov	r1, r7
 8018c30:	f7e7 ff64 	bl	8000afc <__aeabi_dcmplt>
 8018c34:	b148      	cbz	r0, 8018c4a <_dtoa_r+0x162>
 8018c36:	4650      	mov	r0, sl
 8018c38:	f7e7 fc84 	bl	8000544 <__aeabi_i2d>
 8018c3c:	4632      	mov	r2, r6
 8018c3e:	463b      	mov	r3, r7
 8018c40:	f7e7 ff52 	bl	8000ae8 <__aeabi_dcmpeq>
 8018c44:	b908      	cbnz	r0, 8018c4a <_dtoa_r+0x162>
 8018c46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018c4a:	f1ba 0f16 	cmp.w	sl, #22
 8018c4e:	d859      	bhi.n	8018d04 <_dtoa_r+0x21c>
 8018c50:	4970      	ldr	r1, [pc, #448]	; (8018e14 <_dtoa_r+0x32c>)
 8018c52:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018c5e:	f7e7 ff6b 	bl	8000b38 <__aeabi_dcmpgt>
 8018c62:	2800      	cmp	r0, #0
 8018c64:	d050      	beq.n	8018d08 <_dtoa_r+0x220>
 8018c66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8018c6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018c70:	1b5d      	subs	r5, r3, r5
 8018c72:	f1b5 0801 	subs.w	r8, r5, #1
 8018c76:	bf49      	itett	mi
 8018c78:	f1c5 0301 	rsbmi	r3, r5, #1
 8018c7c:	2300      	movpl	r3, #0
 8018c7e:	9305      	strmi	r3, [sp, #20]
 8018c80:	f04f 0800 	movmi.w	r8, #0
 8018c84:	bf58      	it	pl
 8018c86:	9305      	strpl	r3, [sp, #20]
 8018c88:	f1ba 0f00 	cmp.w	sl, #0
 8018c8c:	db3e      	blt.n	8018d0c <_dtoa_r+0x224>
 8018c8e:	2300      	movs	r3, #0
 8018c90:	44d0      	add	r8, sl
 8018c92:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018c96:	9307      	str	r3, [sp, #28]
 8018c98:	9b06      	ldr	r3, [sp, #24]
 8018c9a:	2b09      	cmp	r3, #9
 8018c9c:	f200 8090 	bhi.w	8018dc0 <_dtoa_r+0x2d8>
 8018ca0:	2b05      	cmp	r3, #5
 8018ca2:	bfc4      	itt	gt
 8018ca4:	3b04      	subgt	r3, #4
 8018ca6:	9306      	strgt	r3, [sp, #24]
 8018ca8:	9b06      	ldr	r3, [sp, #24]
 8018caa:	f1a3 0302 	sub.w	r3, r3, #2
 8018cae:	bfcc      	ite	gt
 8018cb0:	2500      	movgt	r5, #0
 8018cb2:	2501      	movle	r5, #1
 8018cb4:	2b03      	cmp	r3, #3
 8018cb6:	f200 808f 	bhi.w	8018dd8 <_dtoa_r+0x2f0>
 8018cba:	e8df f003 	tbb	[pc, r3]
 8018cbe:	7f7d      	.short	0x7f7d
 8018cc0:	7131      	.short	0x7131
 8018cc2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8018cc6:	441d      	add	r5, r3
 8018cc8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8018ccc:	2820      	cmp	r0, #32
 8018cce:	dd13      	ble.n	8018cf8 <_dtoa_r+0x210>
 8018cd0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8018cd4:	9b00      	ldr	r3, [sp, #0]
 8018cd6:	fa08 f800 	lsl.w	r8, r8, r0
 8018cda:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8018cde:	fa23 f000 	lsr.w	r0, r3, r0
 8018ce2:	ea48 0000 	orr.w	r0, r8, r0
 8018ce6:	f7e7 fc1d 	bl	8000524 <__aeabi_ui2d>
 8018cea:	2301      	movs	r3, #1
 8018cec:	4682      	mov	sl, r0
 8018cee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8018cf2:	3d01      	subs	r5, #1
 8018cf4:	9313      	str	r3, [sp, #76]	; 0x4c
 8018cf6:	e772      	b.n	8018bde <_dtoa_r+0xf6>
 8018cf8:	9b00      	ldr	r3, [sp, #0]
 8018cfa:	f1c0 0020 	rsb	r0, r0, #32
 8018cfe:	fa03 f000 	lsl.w	r0, r3, r0
 8018d02:	e7f0      	b.n	8018ce6 <_dtoa_r+0x1fe>
 8018d04:	2301      	movs	r3, #1
 8018d06:	e7b1      	b.n	8018c6c <_dtoa_r+0x184>
 8018d08:	900f      	str	r0, [sp, #60]	; 0x3c
 8018d0a:	e7b0      	b.n	8018c6e <_dtoa_r+0x186>
 8018d0c:	9b05      	ldr	r3, [sp, #20]
 8018d0e:	eba3 030a 	sub.w	r3, r3, sl
 8018d12:	9305      	str	r3, [sp, #20]
 8018d14:	f1ca 0300 	rsb	r3, sl, #0
 8018d18:	9307      	str	r3, [sp, #28]
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	930e      	str	r3, [sp, #56]	; 0x38
 8018d1e:	e7bb      	b.n	8018c98 <_dtoa_r+0x1b0>
 8018d20:	2301      	movs	r3, #1
 8018d22:	930a      	str	r3, [sp, #40]	; 0x28
 8018d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	dd59      	ble.n	8018dde <_dtoa_r+0x2f6>
 8018d2a:	9302      	str	r3, [sp, #8]
 8018d2c:	4699      	mov	r9, r3
 8018d2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018d30:	2200      	movs	r2, #0
 8018d32:	6072      	str	r2, [r6, #4]
 8018d34:	2204      	movs	r2, #4
 8018d36:	f102 0014 	add.w	r0, r2, #20
 8018d3a:	4298      	cmp	r0, r3
 8018d3c:	6871      	ldr	r1, [r6, #4]
 8018d3e:	d953      	bls.n	8018de8 <_dtoa_r+0x300>
 8018d40:	4620      	mov	r0, r4
 8018d42:	f000 ffd7 	bl	8019cf4 <_Balloc>
 8018d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d48:	6030      	str	r0, [r6, #0]
 8018d4a:	f1b9 0f0e 	cmp.w	r9, #14
 8018d4e:	f8d3 b000 	ldr.w	fp, [r3]
 8018d52:	f200 80e6 	bhi.w	8018f22 <_dtoa_r+0x43a>
 8018d56:	2d00      	cmp	r5, #0
 8018d58:	f000 80e3 	beq.w	8018f22 <_dtoa_r+0x43a>
 8018d5c:	ed9d 7b00 	vldr	d7, [sp]
 8018d60:	f1ba 0f00 	cmp.w	sl, #0
 8018d64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8018d68:	dd74      	ble.n	8018e54 <_dtoa_r+0x36c>
 8018d6a:	4a2a      	ldr	r2, [pc, #168]	; (8018e14 <_dtoa_r+0x32c>)
 8018d6c:	f00a 030f 	and.w	r3, sl, #15
 8018d70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018d74:	ed93 7b00 	vldr	d7, [r3]
 8018d78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8018d7c:	06f0      	lsls	r0, r6, #27
 8018d7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018d82:	d565      	bpl.n	8018e50 <_dtoa_r+0x368>
 8018d84:	4b24      	ldr	r3, [pc, #144]	; (8018e18 <_dtoa_r+0x330>)
 8018d86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018d8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018d8e:	f7e7 fd6d 	bl	800086c <__aeabi_ddiv>
 8018d92:	e9cd 0100 	strd	r0, r1, [sp]
 8018d96:	f006 060f 	and.w	r6, r6, #15
 8018d9a:	2503      	movs	r5, #3
 8018d9c:	4f1e      	ldr	r7, [pc, #120]	; (8018e18 <_dtoa_r+0x330>)
 8018d9e:	e04c      	b.n	8018e3a <_dtoa_r+0x352>
 8018da0:	2301      	movs	r3, #1
 8018da2:	930a      	str	r3, [sp, #40]	; 0x28
 8018da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018da6:	4453      	add	r3, sl
 8018da8:	f103 0901 	add.w	r9, r3, #1
 8018dac:	9302      	str	r3, [sp, #8]
 8018dae:	464b      	mov	r3, r9
 8018db0:	2b01      	cmp	r3, #1
 8018db2:	bfb8      	it	lt
 8018db4:	2301      	movlt	r3, #1
 8018db6:	e7ba      	b.n	8018d2e <_dtoa_r+0x246>
 8018db8:	2300      	movs	r3, #0
 8018dba:	e7b2      	b.n	8018d22 <_dtoa_r+0x23a>
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	e7f0      	b.n	8018da2 <_dtoa_r+0x2ba>
 8018dc0:	2501      	movs	r5, #1
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	9306      	str	r3, [sp, #24]
 8018dc6:	950a      	str	r5, [sp, #40]	; 0x28
 8018dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8018dcc:	9302      	str	r3, [sp, #8]
 8018dce:	4699      	mov	r9, r3
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	2312      	movs	r3, #18
 8018dd4:	920b      	str	r2, [sp, #44]	; 0x2c
 8018dd6:	e7aa      	b.n	8018d2e <_dtoa_r+0x246>
 8018dd8:	2301      	movs	r3, #1
 8018dda:	930a      	str	r3, [sp, #40]	; 0x28
 8018ddc:	e7f4      	b.n	8018dc8 <_dtoa_r+0x2e0>
 8018dde:	2301      	movs	r3, #1
 8018de0:	9302      	str	r3, [sp, #8]
 8018de2:	4699      	mov	r9, r3
 8018de4:	461a      	mov	r2, r3
 8018de6:	e7f5      	b.n	8018dd4 <_dtoa_r+0x2ec>
 8018de8:	3101      	adds	r1, #1
 8018dea:	6071      	str	r1, [r6, #4]
 8018dec:	0052      	lsls	r2, r2, #1
 8018dee:	e7a2      	b.n	8018d36 <_dtoa_r+0x24e>
 8018df0:	636f4361 	.word	0x636f4361
 8018df4:	3fd287a7 	.word	0x3fd287a7
 8018df8:	8b60c8b3 	.word	0x8b60c8b3
 8018dfc:	3fc68a28 	.word	0x3fc68a28
 8018e00:	509f79fb 	.word	0x509f79fb
 8018e04:	3fd34413 	.word	0x3fd34413
 8018e08:	7ff00000 	.word	0x7ff00000
 8018e0c:	0801e0cd 	.word	0x0801e0cd
 8018e10:	3ff80000 	.word	0x3ff80000
 8018e14:	0801e188 	.word	0x0801e188
 8018e18:	0801e160 	.word	0x0801e160
 8018e1c:	0801e151 	.word	0x0801e151
 8018e20:	07f1      	lsls	r1, r6, #31
 8018e22:	d508      	bpl.n	8018e36 <_dtoa_r+0x34e>
 8018e24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018e2c:	f7e7 fbf4 	bl	8000618 <__aeabi_dmul>
 8018e30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018e34:	3501      	adds	r5, #1
 8018e36:	1076      	asrs	r6, r6, #1
 8018e38:	3708      	adds	r7, #8
 8018e3a:	2e00      	cmp	r6, #0
 8018e3c:	d1f0      	bne.n	8018e20 <_dtoa_r+0x338>
 8018e3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018e42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018e46:	f7e7 fd11 	bl	800086c <__aeabi_ddiv>
 8018e4a:	e9cd 0100 	strd	r0, r1, [sp]
 8018e4e:	e01a      	b.n	8018e86 <_dtoa_r+0x39e>
 8018e50:	2502      	movs	r5, #2
 8018e52:	e7a3      	b.n	8018d9c <_dtoa_r+0x2b4>
 8018e54:	f000 80a0 	beq.w	8018f98 <_dtoa_r+0x4b0>
 8018e58:	f1ca 0600 	rsb	r6, sl, #0
 8018e5c:	4b9f      	ldr	r3, [pc, #636]	; (80190dc <_dtoa_r+0x5f4>)
 8018e5e:	4fa0      	ldr	r7, [pc, #640]	; (80190e0 <_dtoa_r+0x5f8>)
 8018e60:	f006 020f 	and.w	r2, r6, #15
 8018e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018e70:	f7e7 fbd2 	bl	8000618 <__aeabi_dmul>
 8018e74:	e9cd 0100 	strd	r0, r1, [sp]
 8018e78:	1136      	asrs	r6, r6, #4
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	2502      	movs	r5, #2
 8018e7e:	2e00      	cmp	r6, #0
 8018e80:	d17f      	bne.n	8018f82 <_dtoa_r+0x49a>
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d1e1      	bne.n	8018e4a <_dtoa_r+0x362>
 8018e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	f000 8087 	beq.w	8018f9c <_dtoa_r+0x4b4>
 8018e8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018e92:	2200      	movs	r2, #0
 8018e94:	4b93      	ldr	r3, [pc, #588]	; (80190e4 <_dtoa_r+0x5fc>)
 8018e96:	4630      	mov	r0, r6
 8018e98:	4639      	mov	r1, r7
 8018e9a:	f7e7 fe2f 	bl	8000afc <__aeabi_dcmplt>
 8018e9e:	2800      	cmp	r0, #0
 8018ea0:	d07c      	beq.n	8018f9c <_dtoa_r+0x4b4>
 8018ea2:	f1b9 0f00 	cmp.w	r9, #0
 8018ea6:	d079      	beq.n	8018f9c <_dtoa_r+0x4b4>
 8018ea8:	9b02      	ldr	r3, [sp, #8]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	dd35      	ble.n	8018f1a <_dtoa_r+0x432>
 8018eae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018eb2:	9308      	str	r3, [sp, #32]
 8018eb4:	4639      	mov	r1, r7
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	4b8b      	ldr	r3, [pc, #556]	; (80190e8 <_dtoa_r+0x600>)
 8018eba:	4630      	mov	r0, r6
 8018ebc:	f7e7 fbac 	bl	8000618 <__aeabi_dmul>
 8018ec0:	e9cd 0100 	strd	r0, r1, [sp]
 8018ec4:	9f02      	ldr	r7, [sp, #8]
 8018ec6:	3501      	adds	r5, #1
 8018ec8:	4628      	mov	r0, r5
 8018eca:	f7e7 fb3b 	bl	8000544 <__aeabi_i2d>
 8018ece:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018ed2:	f7e7 fba1 	bl	8000618 <__aeabi_dmul>
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	4b84      	ldr	r3, [pc, #528]	; (80190ec <_dtoa_r+0x604>)
 8018eda:	f7e7 f9e7 	bl	80002ac <__adddf3>
 8018ede:	4605      	mov	r5, r0
 8018ee0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8018ee4:	2f00      	cmp	r7, #0
 8018ee6:	d15d      	bne.n	8018fa4 <_dtoa_r+0x4bc>
 8018ee8:	2200      	movs	r2, #0
 8018eea:	4b81      	ldr	r3, [pc, #516]	; (80190f0 <_dtoa_r+0x608>)
 8018eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018ef0:	f7e7 f9da 	bl	80002a8 <__aeabi_dsub>
 8018ef4:	462a      	mov	r2, r5
 8018ef6:	4633      	mov	r3, r6
 8018ef8:	e9cd 0100 	strd	r0, r1, [sp]
 8018efc:	f7e7 fe1c 	bl	8000b38 <__aeabi_dcmpgt>
 8018f00:	2800      	cmp	r0, #0
 8018f02:	f040 8288 	bne.w	8019416 <_dtoa_r+0x92e>
 8018f06:	462a      	mov	r2, r5
 8018f08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8018f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018f10:	f7e7 fdf4 	bl	8000afc <__aeabi_dcmplt>
 8018f14:	2800      	cmp	r0, #0
 8018f16:	f040 827c 	bne.w	8019412 <_dtoa_r+0x92a>
 8018f1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018f1e:	e9cd 2300 	strd	r2, r3, [sp]
 8018f22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	f2c0 8150 	blt.w	80191ca <_dtoa_r+0x6e2>
 8018f2a:	f1ba 0f0e 	cmp.w	sl, #14
 8018f2e:	f300 814c 	bgt.w	80191ca <_dtoa_r+0x6e2>
 8018f32:	4b6a      	ldr	r3, [pc, #424]	; (80190dc <_dtoa_r+0x5f4>)
 8018f34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018f38:	ed93 7b00 	vldr	d7, [r3]
 8018f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018f44:	f280 80d8 	bge.w	80190f8 <_dtoa_r+0x610>
 8018f48:	f1b9 0f00 	cmp.w	r9, #0
 8018f4c:	f300 80d4 	bgt.w	80190f8 <_dtoa_r+0x610>
 8018f50:	f040 825e 	bne.w	8019410 <_dtoa_r+0x928>
 8018f54:	2200      	movs	r2, #0
 8018f56:	4b66      	ldr	r3, [pc, #408]	; (80190f0 <_dtoa_r+0x608>)
 8018f58:	ec51 0b17 	vmov	r0, r1, d7
 8018f5c:	f7e7 fb5c 	bl	8000618 <__aeabi_dmul>
 8018f60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018f64:	f7e7 fdde 	bl	8000b24 <__aeabi_dcmpge>
 8018f68:	464f      	mov	r7, r9
 8018f6a:	464e      	mov	r6, r9
 8018f6c:	2800      	cmp	r0, #0
 8018f6e:	f040 8234 	bne.w	80193da <_dtoa_r+0x8f2>
 8018f72:	2331      	movs	r3, #49	; 0x31
 8018f74:	f10b 0501 	add.w	r5, fp, #1
 8018f78:	f88b 3000 	strb.w	r3, [fp]
 8018f7c:	f10a 0a01 	add.w	sl, sl, #1
 8018f80:	e22f      	b.n	80193e2 <_dtoa_r+0x8fa>
 8018f82:	07f2      	lsls	r2, r6, #31
 8018f84:	d505      	bpl.n	8018f92 <_dtoa_r+0x4aa>
 8018f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018f8a:	f7e7 fb45 	bl	8000618 <__aeabi_dmul>
 8018f8e:	3501      	adds	r5, #1
 8018f90:	2301      	movs	r3, #1
 8018f92:	1076      	asrs	r6, r6, #1
 8018f94:	3708      	adds	r7, #8
 8018f96:	e772      	b.n	8018e7e <_dtoa_r+0x396>
 8018f98:	2502      	movs	r5, #2
 8018f9a:	e774      	b.n	8018e86 <_dtoa_r+0x39e>
 8018f9c:	f8cd a020 	str.w	sl, [sp, #32]
 8018fa0:	464f      	mov	r7, r9
 8018fa2:	e791      	b.n	8018ec8 <_dtoa_r+0x3e0>
 8018fa4:	4b4d      	ldr	r3, [pc, #308]	; (80190dc <_dtoa_r+0x5f4>)
 8018fa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018faa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8018fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d047      	beq.n	8019044 <_dtoa_r+0x55c>
 8018fb4:	4602      	mov	r2, r0
 8018fb6:	460b      	mov	r3, r1
 8018fb8:	2000      	movs	r0, #0
 8018fba:	494e      	ldr	r1, [pc, #312]	; (80190f4 <_dtoa_r+0x60c>)
 8018fbc:	f7e7 fc56 	bl	800086c <__aeabi_ddiv>
 8018fc0:	462a      	mov	r2, r5
 8018fc2:	4633      	mov	r3, r6
 8018fc4:	f7e7 f970 	bl	80002a8 <__aeabi_dsub>
 8018fc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018fcc:	465d      	mov	r5, fp
 8018fce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018fd2:	f7e7 fdd1 	bl	8000b78 <__aeabi_d2iz>
 8018fd6:	4606      	mov	r6, r0
 8018fd8:	f7e7 fab4 	bl	8000544 <__aeabi_i2d>
 8018fdc:	4602      	mov	r2, r0
 8018fde:	460b      	mov	r3, r1
 8018fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018fe4:	f7e7 f960 	bl	80002a8 <__aeabi_dsub>
 8018fe8:	3630      	adds	r6, #48	; 0x30
 8018fea:	f805 6b01 	strb.w	r6, [r5], #1
 8018fee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018ff2:	e9cd 0100 	strd	r0, r1, [sp]
 8018ff6:	f7e7 fd81 	bl	8000afc <__aeabi_dcmplt>
 8018ffa:	2800      	cmp	r0, #0
 8018ffc:	d163      	bne.n	80190c6 <_dtoa_r+0x5de>
 8018ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019002:	2000      	movs	r0, #0
 8019004:	4937      	ldr	r1, [pc, #220]	; (80190e4 <_dtoa_r+0x5fc>)
 8019006:	f7e7 f94f 	bl	80002a8 <__aeabi_dsub>
 801900a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801900e:	f7e7 fd75 	bl	8000afc <__aeabi_dcmplt>
 8019012:	2800      	cmp	r0, #0
 8019014:	f040 80b7 	bne.w	8019186 <_dtoa_r+0x69e>
 8019018:	eba5 030b 	sub.w	r3, r5, fp
 801901c:	429f      	cmp	r7, r3
 801901e:	f77f af7c 	ble.w	8018f1a <_dtoa_r+0x432>
 8019022:	2200      	movs	r2, #0
 8019024:	4b30      	ldr	r3, [pc, #192]	; (80190e8 <_dtoa_r+0x600>)
 8019026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801902a:	f7e7 faf5 	bl	8000618 <__aeabi_dmul>
 801902e:	2200      	movs	r2, #0
 8019030:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019034:	4b2c      	ldr	r3, [pc, #176]	; (80190e8 <_dtoa_r+0x600>)
 8019036:	e9dd 0100 	ldrd	r0, r1, [sp]
 801903a:	f7e7 faed 	bl	8000618 <__aeabi_dmul>
 801903e:	e9cd 0100 	strd	r0, r1, [sp]
 8019042:	e7c4      	b.n	8018fce <_dtoa_r+0x4e6>
 8019044:	462a      	mov	r2, r5
 8019046:	4633      	mov	r3, r6
 8019048:	f7e7 fae6 	bl	8000618 <__aeabi_dmul>
 801904c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019050:	eb0b 0507 	add.w	r5, fp, r7
 8019054:	465e      	mov	r6, fp
 8019056:	e9dd 0100 	ldrd	r0, r1, [sp]
 801905a:	f7e7 fd8d 	bl	8000b78 <__aeabi_d2iz>
 801905e:	4607      	mov	r7, r0
 8019060:	f7e7 fa70 	bl	8000544 <__aeabi_i2d>
 8019064:	3730      	adds	r7, #48	; 0x30
 8019066:	4602      	mov	r2, r0
 8019068:	460b      	mov	r3, r1
 801906a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801906e:	f7e7 f91b 	bl	80002a8 <__aeabi_dsub>
 8019072:	f806 7b01 	strb.w	r7, [r6], #1
 8019076:	42ae      	cmp	r6, r5
 8019078:	e9cd 0100 	strd	r0, r1, [sp]
 801907c:	f04f 0200 	mov.w	r2, #0
 8019080:	d126      	bne.n	80190d0 <_dtoa_r+0x5e8>
 8019082:	4b1c      	ldr	r3, [pc, #112]	; (80190f4 <_dtoa_r+0x60c>)
 8019084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019088:	f7e7 f910 	bl	80002ac <__adddf3>
 801908c:	4602      	mov	r2, r0
 801908e:	460b      	mov	r3, r1
 8019090:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019094:	f7e7 fd50 	bl	8000b38 <__aeabi_dcmpgt>
 8019098:	2800      	cmp	r0, #0
 801909a:	d174      	bne.n	8019186 <_dtoa_r+0x69e>
 801909c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80190a0:	2000      	movs	r0, #0
 80190a2:	4914      	ldr	r1, [pc, #80]	; (80190f4 <_dtoa_r+0x60c>)
 80190a4:	f7e7 f900 	bl	80002a8 <__aeabi_dsub>
 80190a8:	4602      	mov	r2, r0
 80190aa:	460b      	mov	r3, r1
 80190ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80190b0:	f7e7 fd24 	bl	8000afc <__aeabi_dcmplt>
 80190b4:	2800      	cmp	r0, #0
 80190b6:	f43f af30 	beq.w	8018f1a <_dtoa_r+0x432>
 80190ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80190be:	2b30      	cmp	r3, #48	; 0x30
 80190c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80190c4:	d002      	beq.n	80190cc <_dtoa_r+0x5e4>
 80190c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80190ca:	e04a      	b.n	8019162 <_dtoa_r+0x67a>
 80190cc:	4615      	mov	r5, r2
 80190ce:	e7f4      	b.n	80190ba <_dtoa_r+0x5d2>
 80190d0:	4b05      	ldr	r3, [pc, #20]	; (80190e8 <_dtoa_r+0x600>)
 80190d2:	f7e7 faa1 	bl	8000618 <__aeabi_dmul>
 80190d6:	e9cd 0100 	strd	r0, r1, [sp]
 80190da:	e7bc      	b.n	8019056 <_dtoa_r+0x56e>
 80190dc:	0801e188 	.word	0x0801e188
 80190e0:	0801e160 	.word	0x0801e160
 80190e4:	3ff00000 	.word	0x3ff00000
 80190e8:	40240000 	.word	0x40240000
 80190ec:	401c0000 	.word	0x401c0000
 80190f0:	40140000 	.word	0x40140000
 80190f4:	3fe00000 	.word	0x3fe00000
 80190f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80190fc:	465d      	mov	r5, fp
 80190fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019102:	4630      	mov	r0, r6
 8019104:	4639      	mov	r1, r7
 8019106:	f7e7 fbb1 	bl	800086c <__aeabi_ddiv>
 801910a:	f7e7 fd35 	bl	8000b78 <__aeabi_d2iz>
 801910e:	4680      	mov	r8, r0
 8019110:	f7e7 fa18 	bl	8000544 <__aeabi_i2d>
 8019114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019118:	f7e7 fa7e 	bl	8000618 <__aeabi_dmul>
 801911c:	4602      	mov	r2, r0
 801911e:	460b      	mov	r3, r1
 8019120:	4630      	mov	r0, r6
 8019122:	4639      	mov	r1, r7
 8019124:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8019128:	f7e7 f8be 	bl	80002a8 <__aeabi_dsub>
 801912c:	f805 6b01 	strb.w	r6, [r5], #1
 8019130:	eba5 060b 	sub.w	r6, r5, fp
 8019134:	45b1      	cmp	r9, r6
 8019136:	4602      	mov	r2, r0
 8019138:	460b      	mov	r3, r1
 801913a:	d139      	bne.n	80191b0 <_dtoa_r+0x6c8>
 801913c:	f7e7 f8b6 	bl	80002ac <__adddf3>
 8019140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019144:	4606      	mov	r6, r0
 8019146:	460f      	mov	r7, r1
 8019148:	f7e7 fcf6 	bl	8000b38 <__aeabi_dcmpgt>
 801914c:	b9c8      	cbnz	r0, 8019182 <_dtoa_r+0x69a>
 801914e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019152:	4630      	mov	r0, r6
 8019154:	4639      	mov	r1, r7
 8019156:	f7e7 fcc7 	bl	8000ae8 <__aeabi_dcmpeq>
 801915a:	b110      	cbz	r0, 8019162 <_dtoa_r+0x67a>
 801915c:	f018 0f01 	tst.w	r8, #1
 8019160:	d10f      	bne.n	8019182 <_dtoa_r+0x69a>
 8019162:	9904      	ldr	r1, [sp, #16]
 8019164:	4620      	mov	r0, r4
 8019166:	f000 fdf9 	bl	8019d5c <_Bfree>
 801916a:	2300      	movs	r3, #0
 801916c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801916e:	702b      	strb	r3, [r5, #0]
 8019170:	f10a 0301 	add.w	r3, sl, #1
 8019174:	6013      	str	r3, [r2, #0]
 8019176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019178:	2b00      	cmp	r3, #0
 801917a:	f000 8241 	beq.w	8019600 <_dtoa_r+0xb18>
 801917e:	601d      	str	r5, [r3, #0]
 8019180:	e23e      	b.n	8019600 <_dtoa_r+0xb18>
 8019182:	f8cd a020 	str.w	sl, [sp, #32]
 8019186:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801918a:	2a39      	cmp	r2, #57	; 0x39
 801918c:	f105 33ff 	add.w	r3, r5, #4294967295
 8019190:	d108      	bne.n	80191a4 <_dtoa_r+0x6bc>
 8019192:	459b      	cmp	fp, r3
 8019194:	d10a      	bne.n	80191ac <_dtoa_r+0x6c4>
 8019196:	9b08      	ldr	r3, [sp, #32]
 8019198:	3301      	adds	r3, #1
 801919a:	9308      	str	r3, [sp, #32]
 801919c:	2330      	movs	r3, #48	; 0x30
 801919e:	f88b 3000 	strb.w	r3, [fp]
 80191a2:	465b      	mov	r3, fp
 80191a4:	781a      	ldrb	r2, [r3, #0]
 80191a6:	3201      	adds	r2, #1
 80191a8:	701a      	strb	r2, [r3, #0]
 80191aa:	e78c      	b.n	80190c6 <_dtoa_r+0x5de>
 80191ac:	461d      	mov	r5, r3
 80191ae:	e7ea      	b.n	8019186 <_dtoa_r+0x69e>
 80191b0:	2200      	movs	r2, #0
 80191b2:	4b9b      	ldr	r3, [pc, #620]	; (8019420 <_dtoa_r+0x938>)
 80191b4:	f7e7 fa30 	bl	8000618 <__aeabi_dmul>
 80191b8:	2200      	movs	r2, #0
 80191ba:	2300      	movs	r3, #0
 80191bc:	4606      	mov	r6, r0
 80191be:	460f      	mov	r7, r1
 80191c0:	f7e7 fc92 	bl	8000ae8 <__aeabi_dcmpeq>
 80191c4:	2800      	cmp	r0, #0
 80191c6:	d09a      	beq.n	80190fe <_dtoa_r+0x616>
 80191c8:	e7cb      	b.n	8019162 <_dtoa_r+0x67a>
 80191ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80191cc:	2a00      	cmp	r2, #0
 80191ce:	f000 808b 	beq.w	80192e8 <_dtoa_r+0x800>
 80191d2:	9a06      	ldr	r2, [sp, #24]
 80191d4:	2a01      	cmp	r2, #1
 80191d6:	dc6e      	bgt.n	80192b6 <_dtoa_r+0x7ce>
 80191d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80191da:	2a00      	cmp	r2, #0
 80191dc:	d067      	beq.n	80192ae <_dtoa_r+0x7c6>
 80191de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80191e2:	9f07      	ldr	r7, [sp, #28]
 80191e4:	9d05      	ldr	r5, [sp, #20]
 80191e6:	9a05      	ldr	r2, [sp, #20]
 80191e8:	2101      	movs	r1, #1
 80191ea:	441a      	add	r2, r3
 80191ec:	4620      	mov	r0, r4
 80191ee:	9205      	str	r2, [sp, #20]
 80191f0:	4498      	add	r8, r3
 80191f2:	f000 fe91 	bl	8019f18 <__i2b>
 80191f6:	4606      	mov	r6, r0
 80191f8:	2d00      	cmp	r5, #0
 80191fa:	dd0c      	ble.n	8019216 <_dtoa_r+0x72e>
 80191fc:	f1b8 0f00 	cmp.w	r8, #0
 8019200:	dd09      	ble.n	8019216 <_dtoa_r+0x72e>
 8019202:	4545      	cmp	r5, r8
 8019204:	9a05      	ldr	r2, [sp, #20]
 8019206:	462b      	mov	r3, r5
 8019208:	bfa8      	it	ge
 801920a:	4643      	movge	r3, r8
 801920c:	1ad2      	subs	r2, r2, r3
 801920e:	9205      	str	r2, [sp, #20]
 8019210:	1aed      	subs	r5, r5, r3
 8019212:	eba8 0803 	sub.w	r8, r8, r3
 8019216:	9b07      	ldr	r3, [sp, #28]
 8019218:	b1eb      	cbz	r3, 8019256 <_dtoa_r+0x76e>
 801921a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801921c:	2b00      	cmp	r3, #0
 801921e:	d067      	beq.n	80192f0 <_dtoa_r+0x808>
 8019220:	b18f      	cbz	r7, 8019246 <_dtoa_r+0x75e>
 8019222:	4631      	mov	r1, r6
 8019224:	463a      	mov	r2, r7
 8019226:	4620      	mov	r0, r4
 8019228:	f000 ff16 	bl	801a058 <__pow5mult>
 801922c:	9a04      	ldr	r2, [sp, #16]
 801922e:	4601      	mov	r1, r0
 8019230:	4606      	mov	r6, r0
 8019232:	4620      	mov	r0, r4
 8019234:	f000 fe79 	bl	8019f2a <__multiply>
 8019238:	9904      	ldr	r1, [sp, #16]
 801923a:	9008      	str	r0, [sp, #32]
 801923c:	4620      	mov	r0, r4
 801923e:	f000 fd8d 	bl	8019d5c <_Bfree>
 8019242:	9b08      	ldr	r3, [sp, #32]
 8019244:	9304      	str	r3, [sp, #16]
 8019246:	9b07      	ldr	r3, [sp, #28]
 8019248:	1bda      	subs	r2, r3, r7
 801924a:	d004      	beq.n	8019256 <_dtoa_r+0x76e>
 801924c:	9904      	ldr	r1, [sp, #16]
 801924e:	4620      	mov	r0, r4
 8019250:	f000 ff02 	bl	801a058 <__pow5mult>
 8019254:	9004      	str	r0, [sp, #16]
 8019256:	2101      	movs	r1, #1
 8019258:	4620      	mov	r0, r4
 801925a:	f000 fe5d 	bl	8019f18 <__i2b>
 801925e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019260:	4607      	mov	r7, r0
 8019262:	2b00      	cmp	r3, #0
 8019264:	f000 81d0 	beq.w	8019608 <_dtoa_r+0xb20>
 8019268:	461a      	mov	r2, r3
 801926a:	4601      	mov	r1, r0
 801926c:	4620      	mov	r0, r4
 801926e:	f000 fef3 	bl	801a058 <__pow5mult>
 8019272:	9b06      	ldr	r3, [sp, #24]
 8019274:	2b01      	cmp	r3, #1
 8019276:	4607      	mov	r7, r0
 8019278:	dc40      	bgt.n	80192fc <_dtoa_r+0x814>
 801927a:	9b00      	ldr	r3, [sp, #0]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d139      	bne.n	80192f4 <_dtoa_r+0x80c>
 8019280:	9b01      	ldr	r3, [sp, #4]
 8019282:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019286:	2b00      	cmp	r3, #0
 8019288:	d136      	bne.n	80192f8 <_dtoa_r+0x810>
 801928a:	9b01      	ldr	r3, [sp, #4]
 801928c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019290:	0d1b      	lsrs	r3, r3, #20
 8019292:	051b      	lsls	r3, r3, #20
 8019294:	b12b      	cbz	r3, 80192a2 <_dtoa_r+0x7ba>
 8019296:	9b05      	ldr	r3, [sp, #20]
 8019298:	3301      	adds	r3, #1
 801929a:	9305      	str	r3, [sp, #20]
 801929c:	f108 0801 	add.w	r8, r8, #1
 80192a0:	2301      	movs	r3, #1
 80192a2:	9307      	str	r3, [sp, #28]
 80192a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d12a      	bne.n	8019300 <_dtoa_r+0x818>
 80192aa:	2001      	movs	r0, #1
 80192ac:	e030      	b.n	8019310 <_dtoa_r+0x828>
 80192ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80192b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80192b4:	e795      	b.n	80191e2 <_dtoa_r+0x6fa>
 80192b6:	9b07      	ldr	r3, [sp, #28]
 80192b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80192bc:	42bb      	cmp	r3, r7
 80192be:	bfbf      	itttt	lt
 80192c0:	9b07      	ldrlt	r3, [sp, #28]
 80192c2:	9707      	strlt	r7, [sp, #28]
 80192c4:	1afa      	sublt	r2, r7, r3
 80192c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80192c8:	bfbb      	ittet	lt
 80192ca:	189b      	addlt	r3, r3, r2
 80192cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80192ce:	1bdf      	subge	r7, r3, r7
 80192d0:	2700      	movlt	r7, #0
 80192d2:	f1b9 0f00 	cmp.w	r9, #0
 80192d6:	bfb5      	itete	lt
 80192d8:	9b05      	ldrlt	r3, [sp, #20]
 80192da:	9d05      	ldrge	r5, [sp, #20]
 80192dc:	eba3 0509 	sublt.w	r5, r3, r9
 80192e0:	464b      	movge	r3, r9
 80192e2:	bfb8      	it	lt
 80192e4:	2300      	movlt	r3, #0
 80192e6:	e77e      	b.n	80191e6 <_dtoa_r+0x6fe>
 80192e8:	9f07      	ldr	r7, [sp, #28]
 80192ea:	9d05      	ldr	r5, [sp, #20]
 80192ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80192ee:	e783      	b.n	80191f8 <_dtoa_r+0x710>
 80192f0:	9a07      	ldr	r2, [sp, #28]
 80192f2:	e7ab      	b.n	801924c <_dtoa_r+0x764>
 80192f4:	2300      	movs	r3, #0
 80192f6:	e7d4      	b.n	80192a2 <_dtoa_r+0x7ba>
 80192f8:	9b00      	ldr	r3, [sp, #0]
 80192fa:	e7d2      	b.n	80192a2 <_dtoa_r+0x7ba>
 80192fc:	2300      	movs	r3, #0
 80192fe:	9307      	str	r3, [sp, #28]
 8019300:	693b      	ldr	r3, [r7, #16]
 8019302:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8019306:	6918      	ldr	r0, [r3, #16]
 8019308:	f000 fdb8 	bl	8019e7c <__hi0bits>
 801930c:	f1c0 0020 	rsb	r0, r0, #32
 8019310:	4440      	add	r0, r8
 8019312:	f010 001f 	ands.w	r0, r0, #31
 8019316:	d047      	beq.n	80193a8 <_dtoa_r+0x8c0>
 8019318:	f1c0 0320 	rsb	r3, r0, #32
 801931c:	2b04      	cmp	r3, #4
 801931e:	dd3b      	ble.n	8019398 <_dtoa_r+0x8b0>
 8019320:	9b05      	ldr	r3, [sp, #20]
 8019322:	f1c0 001c 	rsb	r0, r0, #28
 8019326:	4403      	add	r3, r0
 8019328:	9305      	str	r3, [sp, #20]
 801932a:	4405      	add	r5, r0
 801932c:	4480      	add	r8, r0
 801932e:	9b05      	ldr	r3, [sp, #20]
 8019330:	2b00      	cmp	r3, #0
 8019332:	dd05      	ble.n	8019340 <_dtoa_r+0x858>
 8019334:	461a      	mov	r2, r3
 8019336:	9904      	ldr	r1, [sp, #16]
 8019338:	4620      	mov	r0, r4
 801933a:	f000 fedb 	bl	801a0f4 <__lshift>
 801933e:	9004      	str	r0, [sp, #16]
 8019340:	f1b8 0f00 	cmp.w	r8, #0
 8019344:	dd05      	ble.n	8019352 <_dtoa_r+0x86a>
 8019346:	4639      	mov	r1, r7
 8019348:	4642      	mov	r2, r8
 801934a:	4620      	mov	r0, r4
 801934c:	f000 fed2 	bl	801a0f4 <__lshift>
 8019350:	4607      	mov	r7, r0
 8019352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019354:	b353      	cbz	r3, 80193ac <_dtoa_r+0x8c4>
 8019356:	4639      	mov	r1, r7
 8019358:	9804      	ldr	r0, [sp, #16]
 801935a:	f000 ff1f 	bl	801a19c <__mcmp>
 801935e:	2800      	cmp	r0, #0
 8019360:	da24      	bge.n	80193ac <_dtoa_r+0x8c4>
 8019362:	2300      	movs	r3, #0
 8019364:	220a      	movs	r2, #10
 8019366:	9904      	ldr	r1, [sp, #16]
 8019368:	4620      	mov	r0, r4
 801936a:	f000 fd0e 	bl	8019d8a <__multadd>
 801936e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019370:	9004      	str	r0, [sp, #16]
 8019372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019376:	2b00      	cmp	r3, #0
 8019378:	f000 814d 	beq.w	8019616 <_dtoa_r+0xb2e>
 801937c:	2300      	movs	r3, #0
 801937e:	4631      	mov	r1, r6
 8019380:	220a      	movs	r2, #10
 8019382:	4620      	mov	r0, r4
 8019384:	f000 fd01 	bl	8019d8a <__multadd>
 8019388:	9b02      	ldr	r3, [sp, #8]
 801938a:	2b00      	cmp	r3, #0
 801938c:	4606      	mov	r6, r0
 801938e:	dc4f      	bgt.n	8019430 <_dtoa_r+0x948>
 8019390:	9b06      	ldr	r3, [sp, #24]
 8019392:	2b02      	cmp	r3, #2
 8019394:	dd4c      	ble.n	8019430 <_dtoa_r+0x948>
 8019396:	e011      	b.n	80193bc <_dtoa_r+0x8d4>
 8019398:	d0c9      	beq.n	801932e <_dtoa_r+0x846>
 801939a:	9a05      	ldr	r2, [sp, #20]
 801939c:	331c      	adds	r3, #28
 801939e:	441a      	add	r2, r3
 80193a0:	9205      	str	r2, [sp, #20]
 80193a2:	441d      	add	r5, r3
 80193a4:	4498      	add	r8, r3
 80193a6:	e7c2      	b.n	801932e <_dtoa_r+0x846>
 80193a8:	4603      	mov	r3, r0
 80193aa:	e7f6      	b.n	801939a <_dtoa_r+0x8b2>
 80193ac:	f1b9 0f00 	cmp.w	r9, #0
 80193b0:	dc38      	bgt.n	8019424 <_dtoa_r+0x93c>
 80193b2:	9b06      	ldr	r3, [sp, #24]
 80193b4:	2b02      	cmp	r3, #2
 80193b6:	dd35      	ble.n	8019424 <_dtoa_r+0x93c>
 80193b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80193bc:	9b02      	ldr	r3, [sp, #8]
 80193be:	b963      	cbnz	r3, 80193da <_dtoa_r+0x8f2>
 80193c0:	4639      	mov	r1, r7
 80193c2:	2205      	movs	r2, #5
 80193c4:	4620      	mov	r0, r4
 80193c6:	f000 fce0 	bl	8019d8a <__multadd>
 80193ca:	4601      	mov	r1, r0
 80193cc:	4607      	mov	r7, r0
 80193ce:	9804      	ldr	r0, [sp, #16]
 80193d0:	f000 fee4 	bl	801a19c <__mcmp>
 80193d4:	2800      	cmp	r0, #0
 80193d6:	f73f adcc 	bgt.w	8018f72 <_dtoa_r+0x48a>
 80193da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193dc:	465d      	mov	r5, fp
 80193de:	ea6f 0a03 	mvn.w	sl, r3
 80193e2:	f04f 0900 	mov.w	r9, #0
 80193e6:	4639      	mov	r1, r7
 80193e8:	4620      	mov	r0, r4
 80193ea:	f000 fcb7 	bl	8019d5c <_Bfree>
 80193ee:	2e00      	cmp	r6, #0
 80193f0:	f43f aeb7 	beq.w	8019162 <_dtoa_r+0x67a>
 80193f4:	f1b9 0f00 	cmp.w	r9, #0
 80193f8:	d005      	beq.n	8019406 <_dtoa_r+0x91e>
 80193fa:	45b1      	cmp	r9, r6
 80193fc:	d003      	beq.n	8019406 <_dtoa_r+0x91e>
 80193fe:	4649      	mov	r1, r9
 8019400:	4620      	mov	r0, r4
 8019402:	f000 fcab 	bl	8019d5c <_Bfree>
 8019406:	4631      	mov	r1, r6
 8019408:	4620      	mov	r0, r4
 801940a:	f000 fca7 	bl	8019d5c <_Bfree>
 801940e:	e6a8      	b.n	8019162 <_dtoa_r+0x67a>
 8019410:	2700      	movs	r7, #0
 8019412:	463e      	mov	r6, r7
 8019414:	e7e1      	b.n	80193da <_dtoa_r+0x8f2>
 8019416:	f8dd a020 	ldr.w	sl, [sp, #32]
 801941a:	463e      	mov	r6, r7
 801941c:	e5a9      	b.n	8018f72 <_dtoa_r+0x48a>
 801941e:	bf00      	nop
 8019420:	40240000 	.word	0x40240000
 8019424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019426:	f8cd 9008 	str.w	r9, [sp, #8]
 801942a:	2b00      	cmp	r3, #0
 801942c:	f000 80fa 	beq.w	8019624 <_dtoa_r+0xb3c>
 8019430:	2d00      	cmp	r5, #0
 8019432:	dd05      	ble.n	8019440 <_dtoa_r+0x958>
 8019434:	4631      	mov	r1, r6
 8019436:	462a      	mov	r2, r5
 8019438:	4620      	mov	r0, r4
 801943a:	f000 fe5b 	bl	801a0f4 <__lshift>
 801943e:	4606      	mov	r6, r0
 8019440:	9b07      	ldr	r3, [sp, #28]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d04c      	beq.n	80194e0 <_dtoa_r+0x9f8>
 8019446:	6871      	ldr	r1, [r6, #4]
 8019448:	4620      	mov	r0, r4
 801944a:	f000 fc53 	bl	8019cf4 <_Balloc>
 801944e:	6932      	ldr	r2, [r6, #16]
 8019450:	3202      	adds	r2, #2
 8019452:	4605      	mov	r5, r0
 8019454:	0092      	lsls	r2, r2, #2
 8019456:	f106 010c 	add.w	r1, r6, #12
 801945a:	300c      	adds	r0, #12
 801945c:	f7fd fc62 	bl	8016d24 <memcpy>
 8019460:	2201      	movs	r2, #1
 8019462:	4629      	mov	r1, r5
 8019464:	4620      	mov	r0, r4
 8019466:	f000 fe45 	bl	801a0f4 <__lshift>
 801946a:	9b00      	ldr	r3, [sp, #0]
 801946c:	f8cd b014 	str.w	fp, [sp, #20]
 8019470:	f003 0301 	and.w	r3, r3, #1
 8019474:	46b1      	mov	r9, r6
 8019476:	9307      	str	r3, [sp, #28]
 8019478:	4606      	mov	r6, r0
 801947a:	4639      	mov	r1, r7
 801947c:	9804      	ldr	r0, [sp, #16]
 801947e:	f7ff faa7 	bl	80189d0 <quorem>
 8019482:	4649      	mov	r1, r9
 8019484:	4605      	mov	r5, r0
 8019486:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801948a:	9804      	ldr	r0, [sp, #16]
 801948c:	f000 fe86 	bl	801a19c <__mcmp>
 8019490:	4632      	mov	r2, r6
 8019492:	9000      	str	r0, [sp, #0]
 8019494:	4639      	mov	r1, r7
 8019496:	4620      	mov	r0, r4
 8019498:	f000 fe9a 	bl	801a1d0 <__mdiff>
 801949c:	68c3      	ldr	r3, [r0, #12]
 801949e:	4602      	mov	r2, r0
 80194a0:	bb03      	cbnz	r3, 80194e4 <_dtoa_r+0x9fc>
 80194a2:	4601      	mov	r1, r0
 80194a4:	9008      	str	r0, [sp, #32]
 80194a6:	9804      	ldr	r0, [sp, #16]
 80194a8:	f000 fe78 	bl	801a19c <__mcmp>
 80194ac:	9a08      	ldr	r2, [sp, #32]
 80194ae:	4603      	mov	r3, r0
 80194b0:	4611      	mov	r1, r2
 80194b2:	4620      	mov	r0, r4
 80194b4:	9308      	str	r3, [sp, #32]
 80194b6:	f000 fc51 	bl	8019d5c <_Bfree>
 80194ba:	9b08      	ldr	r3, [sp, #32]
 80194bc:	b9a3      	cbnz	r3, 80194e8 <_dtoa_r+0xa00>
 80194be:	9a06      	ldr	r2, [sp, #24]
 80194c0:	b992      	cbnz	r2, 80194e8 <_dtoa_r+0xa00>
 80194c2:	9a07      	ldr	r2, [sp, #28]
 80194c4:	b982      	cbnz	r2, 80194e8 <_dtoa_r+0xa00>
 80194c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80194ca:	d029      	beq.n	8019520 <_dtoa_r+0xa38>
 80194cc:	9b00      	ldr	r3, [sp, #0]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	dd01      	ble.n	80194d6 <_dtoa_r+0x9ee>
 80194d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80194d6:	9b05      	ldr	r3, [sp, #20]
 80194d8:	1c5d      	adds	r5, r3, #1
 80194da:	f883 8000 	strb.w	r8, [r3]
 80194de:	e782      	b.n	80193e6 <_dtoa_r+0x8fe>
 80194e0:	4630      	mov	r0, r6
 80194e2:	e7c2      	b.n	801946a <_dtoa_r+0x982>
 80194e4:	2301      	movs	r3, #1
 80194e6:	e7e3      	b.n	80194b0 <_dtoa_r+0x9c8>
 80194e8:	9a00      	ldr	r2, [sp, #0]
 80194ea:	2a00      	cmp	r2, #0
 80194ec:	db04      	blt.n	80194f8 <_dtoa_r+0xa10>
 80194ee:	d125      	bne.n	801953c <_dtoa_r+0xa54>
 80194f0:	9a06      	ldr	r2, [sp, #24]
 80194f2:	bb1a      	cbnz	r2, 801953c <_dtoa_r+0xa54>
 80194f4:	9a07      	ldr	r2, [sp, #28]
 80194f6:	bb0a      	cbnz	r2, 801953c <_dtoa_r+0xa54>
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	ddec      	ble.n	80194d6 <_dtoa_r+0x9ee>
 80194fc:	2201      	movs	r2, #1
 80194fe:	9904      	ldr	r1, [sp, #16]
 8019500:	4620      	mov	r0, r4
 8019502:	f000 fdf7 	bl	801a0f4 <__lshift>
 8019506:	4639      	mov	r1, r7
 8019508:	9004      	str	r0, [sp, #16]
 801950a:	f000 fe47 	bl	801a19c <__mcmp>
 801950e:	2800      	cmp	r0, #0
 8019510:	dc03      	bgt.n	801951a <_dtoa_r+0xa32>
 8019512:	d1e0      	bne.n	80194d6 <_dtoa_r+0x9ee>
 8019514:	f018 0f01 	tst.w	r8, #1
 8019518:	d0dd      	beq.n	80194d6 <_dtoa_r+0x9ee>
 801951a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801951e:	d1d8      	bne.n	80194d2 <_dtoa_r+0x9ea>
 8019520:	9b05      	ldr	r3, [sp, #20]
 8019522:	9a05      	ldr	r2, [sp, #20]
 8019524:	1c5d      	adds	r5, r3, #1
 8019526:	2339      	movs	r3, #57	; 0x39
 8019528:	7013      	strb	r3, [r2, #0]
 801952a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801952e:	2b39      	cmp	r3, #57	; 0x39
 8019530:	f105 32ff 	add.w	r2, r5, #4294967295
 8019534:	d04f      	beq.n	80195d6 <_dtoa_r+0xaee>
 8019536:	3301      	adds	r3, #1
 8019538:	7013      	strb	r3, [r2, #0]
 801953a:	e754      	b.n	80193e6 <_dtoa_r+0x8fe>
 801953c:	9a05      	ldr	r2, [sp, #20]
 801953e:	2b00      	cmp	r3, #0
 8019540:	f102 0501 	add.w	r5, r2, #1
 8019544:	dd06      	ble.n	8019554 <_dtoa_r+0xa6c>
 8019546:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801954a:	d0e9      	beq.n	8019520 <_dtoa_r+0xa38>
 801954c:	f108 0801 	add.w	r8, r8, #1
 8019550:	9b05      	ldr	r3, [sp, #20]
 8019552:	e7c2      	b.n	80194da <_dtoa_r+0x9f2>
 8019554:	9a02      	ldr	r2, [sp, #8]
 8019556:	f805 8c01 	strb.w	r8, [r5, #-1]
 801955a:	eba5 030b 	sub.w	r3, r5, fp
 801955e:	4293      	cmp	r3, r2
 8019560:	d021      	beq.n	80195a6 <_dtoa_r+0xabe>
 8019562:	2300      	movs	r3, #0
 8019564:	220a      	movs	r2, #10
 8019566:	9904      	ldr	r1, [sp, #16]
 8019568:	4620      	mov	r0, r4
 801956a:	f000 fc0e 	bl	8019d8a <__multadd>
 801956e:	45b1      	cmp	r9, r6
 8019570:	9004      	str	r0, [sp, #16]
 8019572:	f04f 0300 	mov.w	r3, #0
 8019576:	f04f 020a 	mov.w	r2, #10
 801957a:	4649      	mov	r1, r9
 801957c:	4620      	mov	r0, r4
 801957e:	d105      	bne.n	801958c <_dtoa_r+0xaa4>
 8019580:	f000 fc03 	bl	8019d8a <__multadd>
 8019584:	4681      	mov	r9, r0
 8019586:	4606      	mov	r6, r0
 8019588:	9505      	str	r5, [sp, #20]
 801958a:	e776      	b.n	801947a <_dtoa_r+0x992>
 801958c:	f000 fbfd 	bl	8019d8a <__multadd>
 8019590:	4631      	mov	r1, r6
 8019592:	4681      	mov	r9, r0
 8019594:	2300      	movs	r3, #0
 8019596:	220a      	movs	r2, #10
 8019598:	4620      	mov	r0, r4
 801959a:	f000 fbf6 	bl	8019d8a <__multadd>
 801959e:	4606      	mov	r6, r0
 80195a0:	e7f2      	b.n	8019588 <_dtoa_r+0xaa0>
 80195a2:	f04f 0900 	mov.w	r9, #0
 80195a6:	2201      	movs	r2, #1
 80195a8:	9904      	ldr	r1, [sp, #16]
 80195aa:	4620      	mov	r0, r4
 80195ac:	f000 fda2 	bl	801a0f4 <__lshift>
 80195b0:	4639      	mov	r1, r7
 80195b2:	9004      	str	r0, [sp, #16]
 80195b4:	f000 fdf2 	bl	801a19c <__mcmp>
 80195b8:	2800      	cmp	r0, #0
 80195ba:	dcb6      	bgt.n	801952a <_dtoa_r+0xa42>
 80195bc:	d102      	bne.n	80195c4 <_dtoa_r+0xadc>
 80195be:	f018 0f01 	tst.w	r8, #1
 80195c2:	d1b2      	bne.n	801952a <_dtoa_r+0xa42>
 80195c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80195c8:	2b30      	cmp	r3, #48	; 0x30
 80195ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80195ce:	f47f af0a 	bne.w	80193e6 <_dtoa_r+0x8fe>
 80195d2:	4615      	mov	r5, r2
 80195d4:	e7f6      	b.n	80195c4 <_dtoa_r+0xadc>
 80195d6:	4593      	cmp	fp, r2
 80195d8:	d105      	bne.n	80195e6 <_dtoa_r+0xafe>
 80195da:	2331      	movs	r3, #49	; 0x31
 80195dc:	f10a 0a01 	add.w	sl, sl, #1
 80195e0:	f88b 3000 	strb.w	r3, [fp]
 80195e4:	e6ff      	b.n	80193e6 <_dtoa_r+0x8fe>
 80195e6:	4615      	mov	r5, r2
 80195e8:	e79f      	b.n	801952a <_dtoa_r+0xa42>
 80195ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8019650 <_dtoa_r+0xb68>
 80195ee:	e007      	b.n	8019600 <_dtoa_r+0xb18>
 80195f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80195f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8019654 <_dtoa_r+0xb6c>
 80195f6:	b11b      	cbz	r3, 8019600 <_dtoa_r+0xb18>
 80195f8:	f10b 0308 	add.w	r3, fp, #8
 80195fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80195fe:	6013      	str	r3, [r2, #0]
 8019600:	4658      	mov	r0, fp
 8019602:	b017      	add	sp, #92	; 0x5c
 8019604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019608:	9b06      	ldr	r3, [sp, #24]
 801960a:	2b01      	cmp	r3, #1
 801960c:	f77f ae35 	ble.w	801927a <_dtoa_r+0x792>
 8019610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019612:	9307      	str	r3, [sp, #28]
 8019614:	e649      	b.n	80192aa <_dtoa_r+0x7c2>
 8019616:	9b02      	ldr	r3, [sp, #8]
 8019618:	2b00      	cmp	r3, #0
 801961a:	dc03      	bgt.n	8019624 <_dtoa_r+0xb3c>
 801961c:	9b06      	ldr	r3, [sp, #24]
 801961e:	2b02      	cmp	r3, #2
 8019620:	f73f aecc 	bgt.w	80193bc <_dtoa_r+0x8d4>
 8019624:	465d      	mov	r5, fp
 8019626:	4639      	mov	r1, r7
 8019628:	9804      	ldr	r0, [sp, #16]
 801962a:	f7ff f9d1 	bl	80189d0 <quorem>
 801962e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8019632:	f805 8b01 	strb.w	r8, [r5], #1
 8019636:	9a02      	ldr	r2, [sp, #8]
 8019638:	eba5 030b 	sub.w	r3, r5, fp
 801963c:	429a      	cmp	r2, r3
 801963e:	ddb0      	ble.n	80195a2 <_dtoa_r+0xaba>
 8019640:	2300      	movs	r3, #0
 8019642:	220a      	movs	r2, #10
 8019644:	9904      	ldr	r1, [sp, #16]
 8019646:	4620      	mov	r0, r4
 8019648:	f000 fb9f 	bl	8019d8a <__multadd>
 801964c:	9004      	str	r0, [sp, #16]
 801964e:	e7ea      	b.n	8019626 <_dtoa_r+0xb3e>
 8019650:	0801e0cc 	.word	0x0801e0cc
 8019654:	0801e148 	.word	0x0801e148

08019658 <rshift>:
 8019658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801965a:	6906      	ldr	r6, [r0, #16]
 801965c:	114b      	asrs	r3, r1, #5
 801965e:	429e      	cmp	r6, r3
 8019660:	f100 0414 	add.w	r4, r0, #20
 8019664:	dd30      	ble.n	80196c8 <rshift+0x70>
 8019666:	f011 011f 	ands.w	r1, r1, #31
 801966a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801966e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8019672:	d108      	bne.n	8019686 <rshift+0x2e>
 8019674:	4621      	mov	r1, r4
 8019676:	42b2      	cmp	r2, r6
 8019678:	460b      	mov	r3, r1
 801967a:	d211      	bcs.n	80196a0 <rshift+0x48>
 801967c:	f852 3b04 	ldr.w	r3, [r2], #4
 8019680:	f841 3b04 	str.w	r3, [r1], #4
 8019684:	e7f7      	b.n	8019676 <rshift+0x1e>
 8019686:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801968a:	f1c1 0c20 	rsb	ip, r1, #32
 801968e:	40cd      	lsrs	r5, r1
 8019690:	3204      	adds	r2, #4
 8019692:	4623      	mov	r3, r4
 8019694:	42b2      	cmp	r2, r6
 8019696:	4617      	mov	r7, r2
 8019698:	d30c      	bcc.n	80196b4 <rshift+0x5c>
 801969a:	601d      	str	r5, [r3, #0]
 801969c:	b105      	cbz	r5, 80196a0 <rshift+0x48>
 801969e:	3304      	adds	r3, #4
 80196a0:	1b1a      	subs	r2, r3, r4
 80196a2:	42a3      	cmp	r3, r4
 80196a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80196a8:	bf08      	it	eq
 80196aa:	2300      	moveq	r3, #0
 80196ac:	6102      	str	r2, [r0, #16]
 80196ae:	bf08      	it	eq
 80196b0:	6143      	streq	r3, [r0, #20]
 80196b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196b4:	683f      	ldr	r7, [r7, #0]
 80196b6:	fa07 f70c 	lsl.w	r7, r7, ip
 80196ba:	433d      	orrs	r5, r7
 80196bc:	f843 5b04 	str.w	r5, [r3], #4
 80196c0:	f852 5b04 	ldr.w	r5, [r2], #4
 80196c4:	40cd      	lsrs	r5, r1
 80196c6:	e7e5      	b.n	8019694 <rshift+0x3c>
 80196c8:	4623      	mov	r3, r4
 80196ca:	e7e9      	b.n	80196a0 <rshift+0x48>

080196cc <__hexdig_fun>:
 80196cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80196d0:	2b09      	cmp	r3, #9
 80196d2:	d802      	bhi.n	80196da <__hexdig_fun+0xe>
 80196d4:	3820      	subs	r0, #32
 80196d6:	b2c0      	uxtb	r0, r0
 80196d8:	4770      	bx	lr
 80196da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80196de:	2b05      	cmp	r3, #5
 80196e0:	d801      	bhi.n	80196e6 <__hexdig_fun+0x1a>
 80196e2:	3847      	subs	r0, #71	; 0x47
 80196e4:	e7f7      	b.n	80196d6 <__hexdig_fun+0xa>
 80196e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80196ea:	2b05      	cmp	r3, #5
 80196ec:	d801      	bhi.n	80196f2 <__hexdig_fun+0x26>
 80196ee:	3827      	subs	r0, #39	; 0x27
 80196f0:	e7f1      	b.n	80196d6 <__hexdig_fun+0xa>
 80196f2:	2000      	movs	r0, #0
 80196f4:	4770      	bx	lr

080196f6 <__gethex>:
 80196f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196fa:	b08b      	sub	sp, #44	; 0x2c
 80196fc:	468a      	mov	sl, r1
 80196fe:	9002      	str	r0, [sp, #8]
 8019700:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019702:	9306      	str	r3, [sp, #24]
 8019704:	4690      	mov	r8, r2
 8019706:	f000 fad0 	bl	8019caa <__localeconv_l>
 801970a:	6803      	ldr	r3, [r0, #0]
 801970c:	9303      	str	r3, [sp, #12]
 801970e:	4618      	mov	r0, r3
 8019710:	f7e6 fd68 	bl	80001e4 <strlen>
 8019714:	9b03      	ldr	r3, [sp, #12]
 8019716:	9001      	str	r0, [sp, #4]
 8019718:	4403      	add	r3, r0
 801971a:	f04f 0b00 	mov.w	fp, #0
 801971e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019722:	9307      	str	r3, [sp, #28]
 8019724:	f8da 3000 	ldr.w	r3, [sl]
 8019728:	3302      	adds	r3, #2
 801972a:	461f      	mov	r7, r3
 801972c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019730:	2830      	cmp	r0, #48	; 0x30
 8019732:	d06c      	beq.n	801980e <__gethex+0x118>
 8019734:	f7ff ffca 	bl	80196cc <__hexdig_fun>
 8019738:	4604      	mov	r4, r0
 801973a:	2800      	cmp	r0, #0
 801973c:	d16a      	bne.n	8019814 <__gethex+0x11e>
 801973e:	9a01      	ldr	r2, [sp, #4]
 8019740:	9903      	ldr	r1, [sp, #12]
 8019742:	4638      	mov	r0, r7
 8019744:	f7fe fa42 	bl	8017bcc <strncmp>
 8019748:	2800      	cmp	r0, #0
 801974a:	d166      	bne.n	801981a <__gethex+0x124>
 801974c:	9b01      	ldr	r3, [sp, #4]
 801974e:	5cf8      	ldrb	r0, [r7, r3]
 8019750:	18fe      	adds	r6, r7, r3
 8019752:	f7ff ffbb 	bl	80196cc <__hexdig_fun>
 8019756:	2800      	cmp	r0, #0
 8019758:	d062      	beq.n	8019820 <__gethex+0x12a>
 801975a:	4633      	mov	r3, r6
 801975c:	7818      	ldrb	r0, [r3, #0]
 801975e:	2830      	cmp	r0, #48	; 0x30
 8019760:	461f      	mov	r7, r3
 8019762:	f103 0301 	add.w	r3, r3, #1
 8019766:	d0f9      	beq.n	801975c <__gethex+0x66>
 8019768:	f7ff ffb0 	bl	80196cc <__hexdig_fun>
 801976c:	fab0 f580 	clz	r5, r0
 8019770:	096d      	lsrs	r5, r5, #5
 8019772:	4634      	mov	r4, r6
 8019774:	f04f 0b01 	mov.w	fp, #1
 8019778:	463a      	mov	r2, r7
 801977a:	4616      	mov	r6, r2
 801977c:	3201      	adds	r2, #1
 801977e:	7830      	ldrb	r0, [r6, #0]
 8019780:	f7ff ffa4 	bl	80196cc <__hexdig_fun>
 8019784:	2800      	cmp	r0, #0
 8019786:	d1f8      	bne.n	801977a <__gethex+0x84>
 8019788:	9a01      	ldr	r2, [sp, #4]
 801978a:	9903      	ldr	r1, [sp, #12]
 801978c:	4630      	mov	r0, r6
 801978e:	f7fe fa1d 	bl	8017bcc <strncmp>
 8019792:	b950      	cbnz	r0, 80197aa <__gethex+0xb4>
 8019794:	b954      	cbnz	r4, 80197ac <__gethex+0xb6>
 8019796:	9b01      	ldr	r3, [sp, #4]
 8019798:	18f4      	adds	r4, r6, r3
 801979a:	4622      	mov	r2, r4
 801979c:	4616      	mov	r6, r2
 801979e:	3201      	adds	r2, #1
 80197a0:	7830      	ldrb	r0, [r6, #0]
 80197a2:	f7ff ff93 	bl	80196cc <__hexdig_fun>
 80197a6:	2800      	cmp	r0, #0
 80197a8:	d1f8      	bne.n	801979c <__gethex+0xa6>
 80197aa:	b10c      	cbz	r4, 80197b0 <__gethex+0xba>
 80197ac:	1ba4      	subs	r4, r4, r6
 80197ae:	00a4      	lsls	r4, r4, #2
 80197b0:	7833      	ldrb	r3, [r6, #0]
 80197b2:	2b50      	cmp	r3, #80	; 0x50
 80197b4:	d001      	beq.n	80197ba <__gethex+0xc4>
 80197b6:	2b70      	cmp	r3, #112	; 0x70
 80197b8:	d140      	bne.n	801983c <__gethex+0x146>
 80197ba:	7873      	ldrb	r3, [r6, #1]
 80197bc:	2b2b      	cmp	r3, #43	; 0x2b
 80197be:	d031      	beq.n	8019824 <__gethex+0x12e>
 80197c0:	2b2d      	cmp	r3, #45	; 0x2d
 80197c2:	d033      	beq.n	801982c <__gethex+0x136>
 80197c4:	1c71      	adds	r1, r6, #1
 80197c6:	f04f 0900 	mov.w	r9, #0
 80197ca:	7808      	ldrb	r0, [r1, #0]
 80197cc:	f7ff ff7e 	bl	80196cc <__hexdig_fun>
 80197d0:	1e43      	subs	r3, r0, #1
 80197d2:	b2db      	uxtb	r3, r3
 80197d4:	2b18      	cmp	r3, #24
 80197d6:	d831      	bhi.n	801983c <__gethex+0x146>
 80197d8:	f1a0 0210 	sub.w	r2, r0, #16
 80197dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80197e0:	f7ff ff74 	bl	80196cc <__hexdig_fun>
 80197e4:	1e43      	subs	r3, r0, #1
 80197e6:	b2db      	uxtb	r3, r3
 80197e8:	2b18      	cmp	r3, #24
 80197ea:	d922      	bls.n	8019832 <__gethex+0x13c>
 80197ec:	f1b9 0f00 	cmp.w	r9, #0
 80197f0:	d000      	beq.n	80197f4 <__gethex+0xfe>
 80197f2:	4252      	negs	r2, r2
 80197f4:	4414      	add	r4, r2
 80197f6:	f8ca 1000 	str.w	r1, [sl]
 80197fa:	b30d      	cbz	r5, 8019840 <__gethex+0x14a>
 80197fc:	f1bb 0f00 	cmp.w	fp, #0
 8019800:	bf0c      	ite	eq
 8019802:	2706      	moveq	r7, #6
 8019804:	2700      	movne	r7, #0
 8019806:	4638      	mov	r0, r7
 8019808:	b00b      	add	sp, #44	; 0x2c
 801980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801980e:	f10b 0b01 	add.w	fp, fp, #1
 8019812:	e78a      	b.n	801972a <__gethex+0x34>
 8019814:	2500      	movs	r5, #0
 8019816:	462c      	mov	r4, r5
 8019818:	e7ae      	b.n	8019778 <__gethex+0x82>
 801981a:	463e      	mov	r6, r7
 801981c:	2501      	movs	r5, #1
 801981e:	e7c7      	b.n	80197b0 <__gethex+0xba>
 8019820:	4604      	mov	r4, r0
 8019822:	e7fb      	b.n	801981c <__gethex+0x126>
 8019824:	f04f 0900 	mov.w	r9, #0
 8019828:	1cb1      	adds	r1, r6, #2
 801982a:	e7ce      	b.n	80197ca <__gethex+0xd4>
 801982c:	f04f 0901 	mov.w	r9, #1
 8019830:	e7fa      	b.n	8019828 <__gethex+0x132>
 8019832:	230a      	movs	r3, #10
 8019834:	fb03 0202 	mla	r2, r3, r2, r0
 8019838:	3a10      	subs	r2, #16
 801983a:	e7cf      	b.n	80197dc <__gethex+0xe6>
 801983c:	4631      	mov	r1, r6
 801983e:	e7da      	b.n	80197f6 <__gethex+0x100>
 8019840:	1bf3      	subs	r3, r6, r7
 8019842:	3b01      	subs	r3, #1
 8019844:	4629      	mov	r1, r5
 8019846:	2b07      	cmp	r3, #7
 8019848:	dc49      	bgt.n	80198de <__gethex+0x1e8>
 801984a:	9802      	ldr	r0, [sp, #8]
 801984c:	f000 fa52 	bl	8019cf4 <_Balloc>
 8019850:	9b01      	ldr	r3, [sp, #4]
 8019852:	f100 0914 	add.w	r9, r0, #20
 8019856:	f04f 0b00 	mov.w	fp, #0
 801985a:	f1c3 0301 	rsb	r3, r3, #1
 801985e:	4605      	mov	r5, r0
 8019860:	f8cd 9010 	str.w	r9, [sp, #16]
 8019864:	46da      	mov	sl, fp
 8019866:	9308      	str	r3, [sp, #32]
 8019868:	42b7      	cmp	r7, r6
 801986a:	d33b      	bcc.n	80198e4 <__gethex+0x1ee>
 801986c:	9804      	ldr	r0, [sp, #16]
 801986e:	f840 ab04 	str.w	sl, [r0], #4
 8019872:	eba0 0009 	sub.w	r0, r0, r9
 8019876:	1080      	asrs	r0, r0, #2
 8019878:	6128      	str	r0, [r5, #16]
 801987a:	0147      	lsls	r7, r0, #5
 801987c:	4650      	mov	r0, sl
 801987e:	f000 fafd 	bl	8019e7c <__hi0bits>
 8019882:	f8d8 6000 	ldr.w	r6, [r8]
 8019886:	1a3f      	subs	r7, r7, r0
 8019888:	42b7      	cmp	r7, r6
 801988a:	dd64      	ble.n	8019956 <__gethex+0x260>
 801988c:	1bbf      	subs	r7, r7, r6
 801988e:	4639      	mov	r1, r7
 8019890:	4628      	mov	r0, r5
 8019892:	f000 fe0d 	bl	801a4b0 <__any_on>
 8019896:	4682      	mov	sl, r0
 8019898:	b178      	cbz	r0, 80198ba <__gethex+0x1c4>
 801989a:	1e7b      	subs	r3, r7, #1
 801989c:	1159      	asrs	r1, r3, #5
 801989e:	f003 021f 	and.w	r2, r3, #31
 80198a2:	f04f 0a01 	mov.w	sl, #1
 80198a6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80198aa:	fa0a f202 	lsl.w	r2, sl, r2
 80198ae:	420a      	tst	r2, r1
 80198b0:	d003      	beq.n	80198ba <__gethex+0x1c4>
 80198b2:	4553      	cmp	r3, sl
 80198b4:	dc46      	bgt.n	8019944 <__gethex+0x24e>
 80198b6:	f04f 0a02 	mov.w	sl, #2
 80198ba:	4639      	mov	r1, r7
 80198bc:	4628      	mov	r0, r5
 80198be:	f7ff fecb 	bl	8019658 <rshift>
 80198c2:	443c      	add	r4, r7
 80198c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80198c8:	42a3      	cmp	r3, r4
 80198ca:	da52      	bge.n	8019972 <__gethex+0x27c>
 80198cc:	4629      	mov	r1, r5
 80198ce:	9802      	ldr	r0, [sp, #8]
 80198d0:	f000 fa44 	bl	8019d5c <_Bfree>
 80198d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80198d6:	2300      	movs	r3, #0
 80198d8:	6013      	str	r3, [r2, #0]
 80198da:	27a3      	movs	r7, #163	; 0xa3
 80198dc:	e793      	b.n	8019806 <__gethex+0x110>
 80198de:	3101      	adds	r1, #1
 80198e0:	105b      	asrs	r3, r3, #1
 80198e2:	e7b0      	b.n	8019846 <__gethex+0x150>
 80198e4:	1e73      	subs	r3, r6, #1
 80198e6:	9305      	str	r3, [sp, #20]
 80198e8:	9a07      	ldr	r2, [sp, #28]
 80198ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80198ee:	4293      	cmp	r3, r2
 80198f0:	d018      	beq.n	8019924 <__gethex+0x22e>
 80198f2:	f1bb 0f20 	cmp.w	fp, #32
 80198f6:	d107      	bne.n	8019908 <__gethex+0x212>
 80198f8:	9b04      	ldr	r3, [sp, #16]
 80198fa:	f8c3 a000 	str.w	sl, [r3]
 80198fe:	3304      	adds	r3, #4
 8019900:	f04f 0a00 	mov.w	sl, #0
 8019904:	9304      	str	r3, [sp, #16]
 8019906:	46d3      	mov	fp, sl
 8019908:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801990c:	f7ff fede 	bl	80196cc <__hexdig_fun>
 8019910:	f000 000f 	and.w	r0, r0, #15
 8019914:	fa00 f00b 	lsl.w	r0, r0, fp
 8019918:	ea4a 0a00 	orr.w	sl, sl, r0
 801991c:	f10b 0b04 	add.w	fp, fp, #4
 8019920:	9b05      	ldr	r3, [sp, #20]
 8019922:	e00d      	b.n	8019940 <__gethex+0x24a>
 8019924:	9b05      	ldr	r3, [sp, #20]
 8019926:	9a08      	ldr	r2, [sp, #32]
 8019928:	4413      	add	r3, r2
 801992a:	42bb      	cmp	r3, r7
 801992c:	d3e1      	bcc.n	80198f2 <__gethex+0x1fc>
 801992e:	4618      	mov	r0, r3
 8019930:	9a01      	ldr	r2, [sp, #4]
 8019932:	9903      	ldr	r1, [sp, #12]
 8019934:	9309      	str	r3, [sp, #36]	; 0x24
 8019936:	f7fe f949 	bl	8017bcc <strncmp>
 801993a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801993c:	2800      	cmp	r0, #0
 801993e:	d1d8      	bne.n	80198f2 <__gethex+0x1fc>
 8019940:	461e      	mov	r6, r3
 8019942:	e791      	b.n	8019868 <__gethex+0x172>
 8019944:	1eb9      	subs	r1, r7, #2
 8019946:	4628      	mov	r0, r5
 8019948:	f000 fdb2 	bl	801a4b0 <__any_on>
 801994c:	2800      	cmp	r0, #0
 801994e:	d0b2      	beq.n	80198b6 <__gethex+0x1c0>
 8019950:	f04f 0a03 	mov.w	sl, #3
 8019954:	e7b1      	b.n	80198ba <__gethex+0x1c4>
 8019956:	da09      	bge.n	801996c <__gethex+0x276>
 8019958:	1bf7      	subs	r7, r6, r7
 801995a:	4629      	mov	r1, r5
 801995c:	463a      	mov	r2, r7
 801995e:	9802      	ldr	r0, [sp, #8]
 8019960:	f000 fbc8 	bl	801a0f4 <__lshift>
 8019964:	1be4      	subs	r4, r4, r7
 8019966:	4605      	mov	r5, r0
 8019968:	f100 0914 	add.w	r9, r0, #20
 801996c:	f04f 0a00 	mov.w	sl, #0
 8019970:	e7a8      	b.n	80198c4 <__gethex+0x1ce>
 8019972:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019976:	42a0      	cmp	r0, r4
 8019978:	dd6a      	ble.n	8019a50 <__gethex+0x35a>
 801997a:	1b04      	subs	r4, r0, r4
 801997c:	42a6      	cmp	r6, r4
 801997e:	dc2e      	bgt.n	80199de <__gethex+0x2e8>
 8019980:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019984:	2b02      	cmp	r3, #2
 8019986:	d022      	beq.n	80199ce <__gethex+0x2d8>
 8019988:	2b03      	cmp	r3, #3
 801998a:	d024      	beq.n	80199d6 <__gethex+0x2e0>
 801998c:	2b01      	cmp	r3, #1
 801998e:	d115      	bne.n	80199bc <__gethex+0x2c6>
 8019990:	42a6      	cmp	r6, r4
 8019992:	d113      	bne.n	80199bc <__gethex+0x2c6>
 8019994:	2e01      	cmp	r6, #1
 8019996:	dc0b      	bgt.n	80199b0 <__gethex+0x2ba>
 8019998:	9a06      	ldr	r2, [sp, #24]
 801999a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801999e:	6013      	str	r3, [r2, #0]
 80199a0:	2301      	movs	r3, #1
 80199a2:	612b      	str	r3, [r5, #16]
 80199a4:	f8c9 3000 	str.w	r3, [r9]
 80199a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80199aa:	2762      	movs	r7, #98	; 0x62
 80199ac:	601d      	str	r5, [r3, #0]
 80199ae:	e72a      	b.n	8019806 <__gethex+0x110>
 80199b0:	1e71      	subs	r1, r6, #1
 80199b2:	4628      	mov	r0, r5
 80199b4:	f000 fd7c 	bl	801a4b0 <__any_on>
 80199b8:	2800      	cmp	r0, #0
 80199ba:	d1ed      	bne.n	8019998 <__gethex+0x2a2>
 80199bc:	4629      	mov	r1, r5
 80199be:	9802      	ldr	r0, [sp, #8]
 80199c0:	f000 f9cc 	bl	8019d5c <_Bfree>
 80199c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80199c6:	2300      	movs	r3, #0
 80199c8:	6013      	str	r3, [r2, #0]
 80199ca:	2750      	movs	r7, #80	; 0x50
 80199cc:	e71b      	b.n	8019806 <__gethex+0x110>
 80199ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d0e1      	beq.n	8019998 <__gethex+0x2a2>
 80199d4:	e7f2      	b.n	80199bc <__gethex+0x2c6>
 80199d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d1dd      	bne.n	8019998 <__gethex+0x2a2>
 80199dc:	e7ee      	b.n	80199bc <__gethex+0x2c6>
 80199de:	1e67      	subs	r7, r4, #1
 80199e0:	f1ba 0f00 	cmp.w	sl, #0
 80199e4:	d131      	bne.n	8019a4a <__gethex+0x354>
 80199e6:	b127      	cbz	r7, 80199f2 <__gethex+0x2fc>
 80199e8:	4639      	mov	r1, r7
 80199ea:	4628      	mov	r0, r5
 80199ec:	f000 fd60 	bl	801a4b0 <__any_on>
 80199f0:	4682      	mov	sl, r0
 80199f2:	117a      	asrs	r2, r7, #5
 80199f4:	2301      	movs	r3, #1
 80199f6:	f007 071f 	and.w	r7, r7, #31
 80199fa:	fa03 f707 	lsl.w	r7, r3, r7
 80199fe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8019a02:	4621      	mov	r1, r4
 8019a04:	421f      	tst	r7, r3
 8019a06:	4628      	mov	r0, r5
 8019a08:	bf18      	it	ne
 8019a0a:	f04a 0a02 	orrne.w	sl, sl, #2
 8019a0e:	1b36      	subs	r6, r6, r4
 8019a10:	f7ff fe22 	bl	8019658 <rshift>
 8019a14:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019a18:	2702      	movs	r7, #2
 8019a1a:	f1ba 0f00 	cmp.w	sl, #0
 8019a1e:	d048      	beq.n	8019ab2 <__gethex+0x3bc>
 8019a20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019a24:	2b02      	cmp	r3, #2
 8019a26:	d015      	beq.n	8019a54 <__gethex+0x35e>
 8019a28:	2b03      	cmp	r3, #3
 8019a2a:	d017      	beq.n	8019a5c <__gethex+0x366>
 8019a2c:	2b01      	cmp	r3, #1
 8019a2e:	d109      	bne.n	8019a44 <__gethex+0x34e>
 8019a30:	f01a 0f02 	tst.w	sl, #2
 8019a34:	d006      	beq.n	8019a44 <__gethex+0x34e>
 8019a36:	f8d9 3000 	ldr.w	r3, [r9]
 8019a3a:	ea4a 0a03 	orr.w	sl, sl, r3
 8019a3e:	f01a 0f01 	tst.w	sl, #1
 8019a42:	d10e      	bne.n	8019a62 <__gethex+0x36c>
 8019a44:	f047 0710 	orr.w	r7, r7, #16
 8019a48:	e033      	b.n	8019ab2 <__gethex+0x3bc>
 8019a4a:	f04f 0a01 	mov.w	sl, #1
 8019a4e:	e7d0      	b.n	80199f2 <__gethex+0x2fc>
 8019a50:	2701      	movs	r7, #1
 8019a52:	e7e2      	b.n	8019a1a <__gethex+0x324>
 8019a54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019a56:	f1c3 0301 	rsb	r3, r3, #1
 8019a5a:	9315      	str	r3, [sp, #84]	; 0x54
 8019a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d0f0      	beq.n	8019a44 <__gethex+0x34e>
 8019a62:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8019a66:	f105 0314 	add.w	r3, r5, #20
 8019a6a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8019a6e:	eb03 010a 	add.w	r1, r3, sl
 8019a72:	f04f 0c00 	mov.w	ip, #0
 8019a76:	4618      	mov	r0, r3
 8019a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019a80:	d01c      	beq.n	8019abc <__gethex+0x3c6>
 8019a82:	3201      	adds	r2, #1
 8019a84:	6002      	str	r2, [r0, #0]
 8019a86:	2f02      	cmp	r7, #2
 8019a88:	f105 0314 	add.w	r3, r5, #20
 8019a8c:	d138      	bne.n	8019b00 <__gethex+0x40a>
 8019a8e:	f8d8 2000 	ldr.w	r2, [r8]
 8019a92:	3a01      	subs	r2, #1
 8019a94:	42b2      	cmp	r2, r6
 8019a96:	d10a      	bne.n	8019aae <__gethex+0x3b8>
 8019a98:	1171      	asrs	r1, r6, #5
 8019a9a:	2201      	movs	r2, #1
 8019a9c:	f006 061f 	and.w	r6, r6, #31
 8019aa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019aa4:	fa02 f606 	lsl.w	r6, r2, r6
 8019aa8:	421e      	tst	r6, r3
 8019aaa:	bf18      	it	ne
 8019aac:	4617      	movne	r7, r2
 8019aae:	f047 0720 	orr.w	r7, r7, #32
 8019ab2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ab4:	601d      	str	r5, [r3, #0]
 8019ab6:	9b06      	ldr	r3, [sp, #24]
 8019ab8:	601c      	str	r4, [r3, #0]
 8019aba:	e6a4      	b.n	8019806 <__gethex+0x110>
 8019abc:	4299      	cmp	r1, r3
 8019abe:	f843 cc04 	str.w	ip, [r3, #-4]
 8019ac2:	d8d8      	bhi.n	8019a76 <__gethex+0x380>
 8019ac4:	68ab      	ldr	r3, [r5, #8]
 8019ac6:	4599      	cmp	r9, r3
 8019ac8:	db12      	blt.n	8019af0 <__gethex+0x3fa>
 8019aca:	6869      	ldr	r1, [r5, #4]
 8019acc:	9802      	ldr	r0, [sp, #8]
 8019ace:	3101      	adds	r1, #1
 8019ad0:	f000 f910 	bl	8019cf4 <_Balloc>
 8019ad4:	692a      	ldr	r2, [r5, #16]
 8019ad6:	3202      	adds	r2, #2
 8019ad8:	f105 010c 	add.w	r1, r5, #12
 8019adc:	4683      	mov	fp, r0
 8019ade:	0092      	lsls	r2, r2, #2
 8019ae0:	300c      	adds	r0, #12
 8019ae2:	f7fd f91f 	bl	8016d24 <memcpy>
 8019ae6:	4629      	mov	r1, r5
 8019ae8:	9802      	ldr	r0, [sp, #8]
 8019aea:	f000 f937 	bl	8019d5c <_Bfree>
 8019aee:	465d      	mov	r5, fp
 8019af0:	692b      	ldr	r3, [r5, #16]
 8019af2:	1c5a      	adds	r2, r3, #1
 8019af4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8019af8:	612a      	str	r2, [r5, #16]
 8019afa:	2201      	movs	r2, #1
 8019afc:	615a      	str	r2, [r3, #20]
 8019afe:	e7c2      	b.n	8019a86 <__gethex+0x390>
 8019b00:	692a      	ldr	r2, [r5, #16]
 8019b02:	454a      	cmp	r2, r9
 8019b04:	dd0b      	ble.n	8019b1e <__gethex+0x428>
 8019b06:	2101      	movs	r1, #1
 8019b08:	4628      	mov	r0, r5
 8019b0a:	f7ff fda5 	bl	8019658 <rshift>
 8019b0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019b12:	3401      	adds	r4, #1
 8019b14:	42a3      	cmp	r3, r4
 8019b16:	f6ff aed9 	blt.w	80198cc <__gethex+0x1d6>
 8019b1a:	2701      	movs	r7, #1
 8019b1c:	e7c7      	b.n	8019aae <__gethex+0x3b8>
 8019b1e:	f016 061f 	ands.w	r6, r6, #31
 8019b22:	d0fa      	beq.n	8019b1a <__gethex+0x424>
 8019b24:	449a      	add	sl, r3
 8019b26:	f1c6 0620 	rsb	r6, r6, #32
 8019b2a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019b2e:	f000 f9a5 	bl	8019e7c <__hi0bits>
 8019b32:	42b0      	cmp	r0, r6
 8019b34:	dbe7      	blt.n	8019b06 <__gethex+0x410>
 8019b36:	e7f0      	b.n	8019b1a <__gethex+0x424>

08019b38 <L_shift>:
 8019b38:	f1c2 0208 	rsb	r2, r2, #8
 8019b3c:	0092      	lsls	r2, r2, #2
 8019b3e:	b570      	push	{r4, r5, r6, lr}
 8019b40:	f1c2 0620 	rsb	r6, r2, #32
 8019b44:	6843      	ldr	r3, [r0, #4]
 8019b46:	6804      	ldr	r4, [r0, #0]
 8019b48:	fa03 f506 	lsl.w	r5, r3, r6
 8019b4c:	432c      	orrs	r4, r5
 8019b4e:	40d3      	lsrs	r3, r2
 8019b50:	6004      	str	r4, [r0, #0]
 8019b52:	f840 3f04 	str.w	r3, [r0, #4]!
 8019b56:	4288      	cmp	r0, r1
 8019b58:	d3f4      	bcc.n	8019b44 <L_shift+0xc>
 8019b5a:	bd70      	pop	{r4, r5, r6, pc}

08019b5c <__match>:
 8019b5c:	b530      	push	{r4, r5, lr}
 8019b5e:	6803      	ldr	r3, [r0, #0]
 8019b60:	3301      	adds	r3, #1
 8019b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019b66:	b914      	cbnz	r4, 8019b6e <__match+0x12>
 8019b68:	6003      	str	r3, [r0, #0]
 8019b6a:	2001      	movs	r0, #1
 8019b6c:	bd30      	pop	{r4, r5, pc}
 8019b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019b76:	2d19      	cmp	r5, #25
 8019b78:	bf98      	it	ls
 8019b7a:	3220      	addls	r2, #32
 8019b7c:	42a2      	cmp	r2, r4
 8019b7e:	d0f0      	beq.n	8019b62 <__match+0x6>
 8019b80:	2000      	movs	r0, #0
 8019b82:	e7f3      	b.n	8019b6c <__match+0x10>

08019b84 <__hexnan>:
 8019b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b88:	680b      	ldr	r3, [r1, #0]
 8019b8a:	6801      	ldr	r1, [r0, #0]
 8019b8c:	115f      	asrs	r7, r3, #5
 8019b8e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8019b92:	f013 031f 	ands.w	r3, r3, #31
 8019b96:	b087      	sub	sp, #28
 8019b98:	bf18      	it	ne
 8019b9a:	3704      	addne	r7, #4
 8019b9c:	2500      	movs	r5, #0
 8019b9e:	1f3e      	subs	r6, r7, #4
 8019ba0:	4682      	mov	sl, r0
 8019ba2:	4690      	mov	r8, r2
 8019ba4:	9301      	str	r3, [sp, #4]
 8019ba6:	f847 5c04 	str.w	r5, [r7, #-4]
 8019baa:	46b1      	mov	r9, r6
 8019bac:	4634      	mov	r4, r6
 8019bae:	9502      	str	r5, [sp, #8]
 8019bb0:	46ab      	mov	fp, r5
 8019bb2:	784a      	ldrb	r2, [r1, #1]
 8019bb4:	1c4b      	adds	r3, r1, #1
 8019bb6:	9303      	str	r3, [sp, #12]
 8019bb8:	b342      	cbz	r2, 8019c0c <__hexnan+0x88>
 8019bba:	4610      	mov	r0, r2
 8019bbc:	9105      	str	r1, [sp, #20]
 8019bbe:	9204      	str	r2, [sp, #16]
 8019bc0:	f7ff fd84 	bl	80196cc <__hexdig_fun>
 8019bc4:	2800      	cmp	r0, #0
 8019bc6:	d143      	bne.n	8019c50 <__hexnan+0xcc>
 8019bc8:	9a04      	ldr	r2, [sp, #16]
 8019bca:	9905      	ldr	r1, [sp, #20]
 8019bcc:	2a20      	cmp	r2, #32
 8019bce:	d818      	bhi.n	8019c02 <__hexnan+0x7e>
 8019bd0:	9b02      	ldr	r3, [sp, #8]
 8019bd2:	459b      	cmp	fp, r3
 8019bd4:	dd13      	ble.n	8019bfe <__hexnan+0x7a>
 8019bd6:	454c      	cmp	r4, r9
 8019bd8:	d206      	bcs.n	8019be8 <__hexnan+0x64>
 8019bda:	2d07      	cmp	r5, #7
 8019bdc:	dc04      	bgt.n	8019be8 <__hexnan+0x64>
 8019bde:	462a      	mov	r2, r5
 8019be0:	4649      	mov	r1, r9
 8019be2:	4620      	mov	r0, r4
 8019be4:	f7ff ffa8 	bl	8019b38 <L_shift>
 8019be8:	4544      	cmp	r4, r8
 8019bea:	d944      	bls.n	8019c76 <__hexnan+0xf2>
 8019bec:	2300      	movs	r3, #0
 8019bee:	f1a4 0904 	sub.w	r9, r4, #4
 8019bf2:	f844 3c04 	str.w	r3, [r4, #-4]
 8019bf6:	f8cd b008 	str.w	fp, [sp, #8]
 8019bfa:	464c      	mov	r4, r9
 8019bfc:	461d      	mov	r5, r3
 8019bfe:	9903      	ldr	r1, [sp, #12]
 8019c00:	e7d7      	b.n	8019bb2 <__hexnan+0x2e>
 8019c02:	2a29      	cmp	r2, #41	; 0x29
 8019c04:	d14a      	bne.n	8019c9c <__hexnan+0x118>
 8019c06:	3102      	adds	r1, #2
 8019c08:	f8ca 1000 	str.w	r1, [sl]
 8019c0c:	f1bb 0f00 	cmp.w	fp, #0
 8019c10:	d044      	beq.n	8019c9c <__hexnan+0x118>
 8019c12:	454c      	cmp	r4, r9
 8019c14:	d206      	bcs.n	8019c24 <__hexnan+0xa0>
 8019c16:	2d07      	cmp	r5, #7
 8019c18:	dc04      	bgt.n	8019c24 <__hexnan+0xa0>
 8019c1a:	462a      	mov	r2, r5
 8019c1c:	4649      	mov	r1, r9
 8019c1e:	4620      	mov	r0, r4
 8019c20:	f7ff ff8a 	bl	8019b38 <L_shift>
 8019c24:	4544      	cmp	r4, r8
 8019c26:	d928      	bls.n	8019c7a <__hexnan+0xf6>
 8019c28:	4643      	mov	r3, r8
 8019c2a:	f854 2b04 	ldr.w	r2, [r4], #4
 8019c2e:	f843 2b04 	str.w	r2, [r3], #4
 8019c32:	42a6      	cmp	r6, r4
 8019c34:	d2f9      	bcs.n	8019c2a <__hexnan+0xa6>
 8019c36:	2200      	movs	r2, #0
 8019c38:	f843 2b04 	str.w	r2, [r3], #4
 8019c3c:	429e      	cmp	r6, r3
 8019c3e:	d2fb      	bcs.n	8019c38 <__hexnan+0xb4>
 8019c40:	6833      	ldr	r3, [r6, #0]
 8019c42:	b91b      	cbnz	r3, 8019c4c <__hexnan+0xc8>
 8019c44:	4546      	cmp	r6, r8
 8019c46:	d127      	bne.n	8019c98 <__hexnan+0x114>
 8019c48:	2301      	movs	r3, #1
 8019c4a:	6033      	str	r3, [r6, #0]
 8019c4c:	2005      	movs	r0, #5
 8019c4e:	e026      	b.n	8019c9e <__hexnan+0x11a>
 8019c50:	3501      	adds	r5, #1
 8019c52:	2d08      	cmp	r5, #8
 8019c54:	f10b 0b01 	add.w	fp, fp, #1
 8019c58:	dd06      	ble.n	8019c68 <__hexnan+0xe4>
 8019c5a:	4544      	cmp	r4, r8
 8019c5c:	d9cf      	bls.n	8019bfe <__hexnan+0x7a>
 8019c5e:	2300      	movs	r3, #0
 8019c60:	f844 3c04 	str.w	r3, [r4, #-4]
 8019c64:	2501      	movs	r5, #1
 8019c66:	3c04      	subs	r4, #4
 8019c68:	6822      	ldr	r2, [r4, #0]
 8019c6a:	f000 000f 	and.w	r0, r0, #15
 8019c6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019c72:	6020      	str	r0, [r4, #0]
 8019c74:	e7c3      	b.n	8019bfe <__hexnan+0x7a>
 8019c76:	2508      	movs	r5, #8
 8019c78:	e7c1      	b.n	8019bfe <__hexnan+0x7a>
 8019c7a:	9b01      	ldr	r3, [sp, #4]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d0df      	beq.n	8019c40 <__hexnan+0xbc>
 8019c80:	f04f 32ff 	mov.w	r2, #4294967295
 8019c84:	f1c3 0320 	rsb	r3, r3, #32
 8019c88:	fa22 f303 	lsr.w	r3, r2, r3
 8019c8c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8019c90:	401a      	ands	r2, r3
 8019c92:	f847 2c04 	str.w	r2, [r7, #-4]
 8019c96:	e7d3      	b.n	8019c40 <__hexnan+0xbc>
 8019c98:	3e04      	subs	r6, #4
 8019c9a:	e7d1      	b.n	8019c40 <__hexnan+0xbc>
 8019c9c:	2004      	movs	r0, #4
 8019c9e:	b007      	add	sp, #28
 8019ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019ca4 <__locale_ctype_ptr_l>:
 8019ca4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8019ca8:	4770      	bx	lr

08019caa <__localeconv_l>:
 8019caa:	30f0      	adds	r0, #240	; 0xf0
 8019cac:	4770      	bx	lr
	...

08019cb0 <_localeconv_r>:
 8019cb0:	4b04      	ldr	r3, [pc, #16]	; (8019cc4 <_localeconv_r+0x14>)
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	6a18      	ldr	r0, [r3, #32]
 8019cb6:	4b04      	ldr	r3, [pc, #16]	; (8019cc8 <_localeconv_r+0x18>)
 8019cb8:	2800      	cmp	r0, #0
 8019cba:	bf08      	it	eq
 8019cbc:	4618      	moveq	r0, r3
 8019cbe:	30f0      	adds	r0, #240	; 0xf0
 8019cc0:	4770      	bx	lr
 8019cc2:	bf00      	nop
 8019cc4:	20000198 	.word	0x20000198
 8019cc8:	200001fc 	.word	0x200001fc

08019ccc <__ascii_mbtowc>:
 8019ccc:	b082      	sub	sp, #8
 8019cce:	b901      	cbnz	r1, 8019cd2 <__ascii_mbtowc+0x6>
 8019cd0:	a901      	add	r1, sp, #4
 8019cd2:	b142      	cbz	r2, 8019ce6 <__ascii_mbtowc+0x1a>
 8019cd4:	b14b      	cbz	r3, 8019cea <__ascii_mbtowc+0x1e>
 8019cd6:	7813      	ldrb	r3, [r2, #0]
 8019cd8:	600b      	str	r3, [r1, #0]
 8019cda:	7812      	ldrb	r2, [r2, #0]
 8019cdc:	1c10      	adds	r0, r2, #0
 8019cde:	bf18      	it	ne
 8019ce0:	2001      	movne	r0, #1
 8019ce2:	b002      	add	sp, #8
 8019ce4:	4770      	bx	lr
 8019ce6:	4610      	mov	r0, r2
 8019ce8:	e7fb      	b.n	8019ce2 <__ascii_mbtowc+0x16>
 8019cea:	f06f 0001 	mvn.w	r0, #1
 8019cee:	e7f8      	b.n	8019ce2 <__ascii_mbtowc+0x16>

08019cf0 <__malloc_lock>:
 8019cf0:	4770      	bx	lr

08019cf2 <__malloc_unlock>:
 8019cf2:	4770      	bx	lr

08019cf4 <_Balloc>:
 8019cf4:	b570      	push	{r4, r5, r6, lr}
 8019cf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019cf8:	4604      	mov	r4, r0
 8019cfa:	460e      	mov	r6, r1
 8019cfc:	b93d      	cbnz	r5, 8019d0e <_Balloc+0x1a>
 8019cfe:	2010      	movs	r0, #16
 8019d00:	f7fd f800 	bl	8016d04 <malloc>
 8019d04:	6260      	str	r0, [r4, #36]	; 0x24
 8019d06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019d0a:	6005      	str	r5, [r0, #0]
 8019d0c:	60c5      	str	r5, [r0, #12]
 8019d0e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019d10:	68eb      	ldr	r3, [r5, #12]
 8019d12:	b183      	cbz	r3, 8019d36 <_Balloc+0x42>
 8019d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019d16:	68db      	ldr	r3, [r3, #12]
 8019d18:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8019d1c:	b9b8      	cbnz	r0, 8019d4e <_Balloc+0x5a>
 8019d1e:	2101      	movs	r1, #1
 8019d20:	fa01 f506 	lsl.w	r5, r1, r6
 8019d24:	1d6a      	adds	r2, r5, #5
 8019d26:	0092      	lsls	r2, r2, #2
 8019d28:	4620      	mov	r0, r4
 8019d2a:	f000 fbe2 	bl	801a4f2 <_calloc_r>
 8019d2e:	b160      	cbz	r0, 8019d4a <_Balloc+0x56>
 8019d30:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8019d34:	e00e      	b.n	8019d54 <_Balloc+0x60>
 8019d36:	2221      	movs	r2, #33	; 0x21
 8019d38:	2104      	movs	r1, #4
 8019d3a:	4620      	mov	r0, r4
 8019d3c:	f000 fbd9 	bl	801a4f2 <_calloc_r>
 8019d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019d42:	60e8      	str	r0, [r5, #12]
 8019d44:	68db      	ldr	r3, [r3, #12]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d1e4      	bne.n	8019d14 <_Balloc+0x20>
 8019d4a:	2000      	movs	r0, #0
 8019d4c:	bd70      	pop	{r4, r5, r6, pc}
 8019d4e:	6802      	ldr	r2, [r0, #0]
 8019d50:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8019d54:	2300      	movs	r3, #0
 8019d56:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019d5a:	e7f7      	b.n	8019d4c <_Balloc+0x58>

08019d5c <_Bfree>:
 8019d5c:	b570      	push	{r4, r5, r6, lr}
 8019d5e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8019d60:	4606      	mov	r6, r0
 8019d62:	460d      	mov	r5, r1
 8019d64:	b93c      	cbnz	r4, 8019d76 <_Bfree+0x1a>
 8019d66:	2010      	movs	r0, #16
 8019d68:	f7fc ffcc 	bl	8016d04 <malloc>
 8019d6c:	6270      	str	r0, [r6, #36]	; 0x24
 8019d6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019d72:	6004      	str	r4, [r0, #0]
 8019d74:	60c4      	str	r4, [r0, #12]
 8019d76:	b13d      	cbz	r5, 8019d88 <_Bfree+0x2c>
 8019d78:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019d7a:	686a      	ldr	r2, [r5, #4]
 8019d7c:	68db      	ldr	r3, [r3, #12]
 8019d7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019d82:	6029      	str	r1, [r5, #0]
 8019d84:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8019d88:	bd70      	pop	{r4, r5, r6, pc}

08019d8a <__multadd>:
 8019d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d8e:	690d      	ldr	r5, [r1, #16]
 8019d90:	461f      	mov	r7, r3
 8019d92:	4606      	mov	r6, r0
 8019d94:	460c      	mov	r4, r1
 8019d96:	f101 0c14 	add.w	ip, r1, #20
 8019d9a:	2300      	movs	r3, #0
 8019d9c:	f8dc 0000 	ldr.w	r0, [ip]
 8019da0:	b281      	uxth	r1, r0
 8019da2:	fb02 7101 	mla	r1, r2, r1, r7
 8019da6:	0c0f      	lsrs	r7, r1, #16
 8019da8:	0c00      	lsrs	r0, r0, #16
 8019daa:	fb02 7000 	mla	r0, r2, r0, r7
 8019dae:	b289      	uxth	r1, r1
 8019db0:	3301      	adds	r3, #1
 8019db2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8019db6:	429d      	cmp	r5, r3
 8019db8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8019dbc:	f84c 1b04 	str.w	r1, [ip], #4
 8019dc0:	dcec      	bgt.n	8019d9c <__multadd+0x12>
 8019dc2:	b1d7      	cbz	r7, 8019dfa <__multadd+0x70>
 8019dc4:	68a3      	ldr	r3, [r4, #8]
 8019dc6:	42ab      	cmp	r3, r5
 8019dc8:	dc12      	bgt.n	8019df0 <__multadd+0x66>
 8019dca:	6861      	ldr	r1, [r4, #4]
 8019dcc:	4630      	mov	r0, r6
 8019dce:	3101      	adds	r1, #1
 8019dd0:	f7ff ff90 	bl	8019cf4 <_Balloc>
 8019dd4:	6922      	ldr	r2, [r4, #16]
 8019dd6:	3202      	adds	r2, #2
 8019dd8:	f104 010c 	add.w	r1, r4, #12
 8019ddc:	4680      	mov	r8, r0
 8019dde:	0092      	lsls	r2, r2, #2
 8019de0:	300c      	adds	r0, #12
 8019de2:	f7fc ff9f 	bl	8016d24 <memcpy>
 8019de6:	4621      	mov	r1, r4
 8019de8:	4630      	mov	r0, r6
 8019dea:	f7ff ffb7 	bl	8019d5c <_Bfree>
 8019dee:	4644      	mov	r4, r8
 8019df0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019df4:	3501      	adds	r5, #1
 8019df6:	615f      	str	r7, [r3, #20]
 8019df8:	6125      	str	r5, [r4, #16]
 8019dfa:	4620      	mov	r0, r4
 8019dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e00 <__s2b>:
 8019e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e04:	460c      	mov	r4, r1
 8019e06:	4615      	mov	r5, r2
 8019e08:	461f      	mov	r7, r3
 8019e0a:	2209      	movs	r2, #9
 8019e0c:	3308      	adds	r3, #8
 8019e0e:	4606      	mov	r6, r0
 8019e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8019e14:	2100      	movs	r1, #0
 8019e16:	2201      	movs	r2, #1
 8019e18:	429a      	cmp	r2, r3
 8019e1a:	db20      	blt.n	8019e5e <__s2b+0x5e>
 8019e1c:	4630      	mov	r0, r6
 8019e1e:	f7ff ff69 	bl	8019cf4 <_Balloc>
 8019e22:	9b08      	ldr	r3, [sp, #32]
 8019e24:	6143      	str	r3, [r0, #20]
 8019e26:	2d09      	cmp	r5, #9
 8019e28:	f04f 0301 	mov.w	r3, #1
 8019e2c:	6103      	str	r3, [r0, #16]
 8019e2e:	dd19      	ble.n	8019e64 <__s2b+0x64>
 8019e30:	f104 0809 	add.w	r8, r4, #9
 8019e34:	46c1      	mov	r9, r8
 8019e36:	442c      	add	r4, r5
 8019e38:	f819 3b01 	ldrb.w	r3, [r9], #1
 8019e3c:	4601      	mov	r1, r0
 8019e3e:	3b30      	subs	r3, #48	; 0x30
 8019e40:	220a      	movs	r2, #10
 8019e42:	4630      	mov	r0, r6
 8019e44:	f7ff ffa1 	bl	8019d8a <__multadd>
 8019e48:	45a1      	cmp	r9, r4
 8019e4a:	d1f5      	bne.n	8019e38 <__s2b+0x38>
 8019e4c:	eb08 0405 	add.w	r4, r8, r5
 8019e50:	3c08      	subs	r4, #8
 8019e52:	1b2d      	subs	r5, r5, r4
 8019e54:	1963      	adds	r3, r4, r5
 8019e56:	42bb      	cmp	r3, r7
 8019e58:	db07      	blt.n	8019e6a <__s2b+0x6a>
 8019e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e5e:	0052      	lsls	r2, r2, #1
 8019e60:	3101      	adds	r1, #1
 8019e62:	e7d9      	b.n	8019e18 <__s2b+0x18>
 8019e64:	340a      	adds	r4, #10
 8019e66:	2509      	movs	r5, #9
 8019e68:	e7f3      	b.n	8019e52 <__s2b+0x52>
 8019e6a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019e6e:	4601      	mov	r1, r0
 8019e70:	3b30      	subs	r3, #48	; 0x30
 8019e72:	220a      	movs	r2, #10
 8019e74:	4630      	mov	r0, r6
 8019e76:	f7ff ff88 	bl	8019d8a <__multadd>
 8019e7a:	e7eb      	b.n	8019e54 <__s2b+0x54>

08019e7c <__hi0bits>:
 8019e7c:	0c02      	lsrs	r2, r0, #16
 8019e7e:	0412      	lsls	r2, r2, #16
 8019e80:	4603      	mov	r3, r0
 8019e82:	b9b2      	cbnz	r2, 8019eb2 <__hi0bits+0x36>
 8019e84:	0403      	lsls	r3, r0, #16
 8019e86:	2010      	movs	r0, #16
 8019e88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019e8c:	bf04      	itt	eq
 8019e8e:	021b      	lsleq	r3, r3, #8
 8019e90:	3008      	addeq	r0, #8
 8019e92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019e96:	bf04      	itt	eq
 8019e98:	011b      	lsleq	r3, r3, #4
 8019e9a:	3004      	addeq	r0, #4
 8019e9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019ea0:	bf04      	itt	eq
 8019ea2:	009b      	lsleq	r3, r3, #2
 8019ea4:	3002      	addeq	r0, #2
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	db06      	blt.n	8019eb8 <__hi0bits+0x3c>
 8019eaa:	005b      	lsls	r3, r3, #1
 8019eac:	d503      	bpl.n	8019eb6 <__hi0bits+0x3a>
 8019eae:	3001      	adds	r0, #1
 8019eb0:	4770      	bx	lr
 8019eb2:	2000      	movs	r0, #0
 8019eb4:	e7e8      	b.n	8019e88 <__hi0bits+0xc>
 8019eb6:	2020      	movs	r0, #32
 8019eb8:	4770      	bx	lr

08019eba <__lo0bits>:
 8019eba:	6803      	ldr	r3, [r0, #0]
 8019ebc:	f013 0207 	ands.w	r2, r3, #7
 8019ec0:	4601      	mov	r1, r0
 8019ec2:	d00b      	beq.n	8019edc <__lo0bits+0x22>
 8019ec4:	07da      	lsls	r2, r3, #31
 8019ec6:	d423      	bmi.n	8019f10 <__lo0bits+0x56>
 8019ec8:	0798      	lsls	r0, r3, #30
 8019eca:	bf49      	itett	mi
 8019ecc:	085b      	lsrmi	r3, r3, #1
 8019ece:	089b      	lsrpl	r3, r3, #2
 8019ed0:	2001      	movmi	r0, #1
 8019ed2:	600b      	strmi	r3, [r1, #0]
 8019ed4:	bf5c      	itt	pl
 8019ed6:	600b      	strpl	r3, [r1, #0]
 8019ed8:	2002      	movpl	r0, #2
 8019eda:	4770      	bx	lr
 8019edc:	b298      	uxth	r0, r3
 8019ede:	b9a8      	cbnz	r0, 8019f0c <__lo0bits+0x52>
 8019ee0:	0c1b      	lsrs	r3, r3, #16
 8019ee2:	2010      	movs	r0, #16
 8019ee4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019ee8:	bf04      	itt	eq
 8019eea:	0a1b      	lsreq	r3, r3, #8
 8019eec:	3008      	addeq	r0, #8
 8019eee:	071a      	lsls	r2, r3, #28
 8019ef0:	bf04      	itt	eq
 8019ef2:	091b      	lsreq	r3, r3, #4
 8019ef4:	3004      	addeq	r0, #4
 8019ef6:	079a      	lsls	r2, r3, #30
 8019ef8:	bf04      	itt	eq
 8019efa:	089b      	lsreq	r3, r3, #2
 8019efc:	3002      	addeq	r0, #2
 8019efe:	07da      	lsls	r2, r3, #31
 8019f00:	d402      	bmi.n	8019f08 <__lo0bits+0x4e>
 8019f02:	085b      	lsrs	r3, r3, #1
 8019f04:	d006      	beq.n	8019f14 <__lo0bits+0x5a>
 8019f06:	3001      	adds	r0, #1
 8019f08:	600b      	str	r3, [r1, #0]
 8019f0a:	4770      	bx	lr
 8019f0c:	4610      	mov	r0, r2
 8019f0e:	e7e9      	b.n	8019ee4 <__lo0bits+0x2a>
 8019f10:	2000      	movs	r0, #0
 8019f12:	4770      	bx	lr
 8019f14:	2020      	movs	r0, #32
 8019f16:	4770      	bx	lr

08019f18 <__i2b>:
 8019f18:	b510      	push	{r4, lr}
 8019f1a:	460c      	mov	r4, r1
 8019f1c:	2101      	movs	r1, #1
 8019f1e:	f7ff fee9 	bl	8019cf4 <_Balloc>
 8019f22:	2201      	movs	r2, #1
 8019f24:	6144      	str	r4, [r0, #20]
 8019f26:	6102      	str	r2, [r0, #16]
 8019f28:	bd10      	pop	{r4, pc}

08019f2a <__multiply>:
 8019f2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f2e:	4614      	mov	r4, r2
 8019f30:	690a      	ldr	r2, [r1, #16]
 8019f32:	6923      	ldr	r3, [r4, #16]
 8019f34:	429a      	cmp	r2, r3
 8019f36:	bfb8      	it	lt
 8019f38:	460b      	movlt	r3, r1
 8019f3a:	4688      	mov	r8, r1
 8019f3c:	bfbc      	itt	lt
 8019f3e:	46a0      	movlt	r8, r4
 8019f40:	461c      	movlt	r4, r3
 8019f42:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019f46:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019f4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019f4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019f52:	eb07 0609 	add.w	r6, r7, r9
 8019f56:	42b3      	cmp	r3, r6
 8019f58:	bfb8      	it	lt
 8019f5a:	3101      	addlt	r1, #1
 8019f5c:	f7ff feca 	bl	8019cf4 <_Balloc>
 8019f60:	f100 0514 	add.w	r5, r0, #20
 8019f64:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8019f68:	462b      	mov	r3, r5
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	4573      	cmp	r3, lr
 8019f6e:	d316      	bcc.n	8019f9e <__multiply+0x74>
 8019f70:	f104 0214 	add.w	r2, r4, #20
 8019f74:	f108 0114 	add.w	r1, r8, #20
 8019f78:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8019f7c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8019f80:	9300      	str	r3, [sp, #0]
 8019f82:	9b00      	ldr	r3, [sp, #0]
 8019f84:	9201      	str	r2, [sp, #4]
 8019f86:	4293      	cmp	r3, r2
 8019f88:	d80c      	bhi.n	8019fa4 <__multiply+0x7a>
 8019f8a:	2e00      	cmp	r6, #0
 8019f8c:	dd03      	ble.n	8019f96 <__multiply+0x6c>
 8019f8e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d05d      	beq.n	801a052 <__multiply+0x128>
 8019f96:	6106      	str	r6, [r0, #16]
 8019f98:	b003      	add	sp, #12
 8019f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f9e:	f843 2b04 	str.w	r2, [r3], #4
 8019fa2:	e7e3      	b.n	8019f6c <__multiply+0x42>
 8019fa4:	f8b2 b000 	ldrh.w	fp, [r2]
 8019fa8:	f1bb 0f00 	cmp.w	fp, #0
 8019fac:	d023      	beq.n	8019ff6 <__multiply+0xcc>
 8019fae:	4689      	mov	r9, r1
 8019fb0:	46ac      	mov	ip, r5
 8019fb2:	f04f 0800 	mov.w	r8, #0
 8019fb6:	f859 4b04 	ldr.w	r4, [r9], #4
 8019fba:	f8dc a000 	ldr.w	sl, [ip]
 8019fbe:	b2a3      	uxth	r3, r4
 8019fc0:	fa1f fa8a 	uxth.w	sl, sl
 8019fc4:	fb0b a303 	mla	r3, fp, r3, sl
 8019fc8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019fcc:	f8dc 4000 	ldr.w	r4, [ip]
 8019fd0:	4443      	add	r3, r8
 8019fd2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019fd6:	fb0b 840a 	mla	r4, fp, sl, r8
 8019fda:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8019fde:	46e2      	mov	sl, ip
 8019fe0:	b29b      	uxth	r3, r3
 8019fe2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019fe6:	454f      	cmp	r7, r9
 8019fe8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019fec:	f84a 3b04 	str.w	r3, [sl], #4
 8019ff0:	d82b      	bhi.n	801a04a <__multiply+0x120>
 8019ff2:	f8cc 8004 	str.w	r8, [ip, #4]
 8019ff6:	9b01      	ldr	r3, [sp, #4]
 8019ff8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8019ffc:	3204      	adds	r2, #4
 8019ffe:	f1ba 0f00 	cmp.w	sl, #0
 801a002:	d020      	beq.n	801a046 <__multiply+0x11c>
 801a004:	682b      	ldr	r3, [r5, #0]
 801a006:	4689      	mov	r9, r1
 801a008:	46a8      	mov	r8, r5
 801a00a:	f04f 0b00 	mov.w	fp, #0
 801a00e:	f8b9 c000 	ldrh.w	ip, [r9]
 801a012:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801a016:	fb0a 440c 	mla	r4, sl, ip, r4
 801a01a:	445c      	add	r4, fp
 801a01c:	46c4      	mov	ip, r8
 801a01e:	b29b      	uxth	r3, r3
 801a020:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a024:	f84c 3b04 	str.w	r3, [ip], #4
 801a028:	f859 3b04 	ldr.w	r3, [r9], #4
 801a02c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801a030:	0c1b      	lsrs	r3, r3, #16
 801a032:	fb0a b303 	mla	r3, sl, r3, fp
 801a036:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801a03a:	454f      	cmp	r7, r9
 801a03c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801a040:	d805      	bhi.n	801a04e <__multiply+0x124>
 801a042:	f8c8 3004 	str.w	r3, [r8, #4]
 801a046:	3504      	adds	r5, #4
 801a048:	e79b      	b.n	8019f82 <__multiply+0x58>
 801a04a:	46d4      	mov	ip, sl
 801a04c:	e7b3      	b.n	8019fb6 <__multiply+0x8c>
 801a04e:	46e0      	mov	r8, ip
 801a050:	e7dd      	b.n	801a00e <__multiply+0xe4>
 801a052:	3e01      	subs	r6, #1
 801a054:	e799      	b.n	8019f8a <__multiply+0x60>
	...

0801a058 <__pow5mult>:
 801a058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a05c:	4615      	mov	r5, r2
 801a05e:	f012 0203 	ands.w	r2, r2, #3
 801a062:	4606      	mov	r6, r0
 801a064:	460f      	mov	r7, r1
 801a066:	d007      	beq.n	801a078 <__pow5mult+0x20>
 801a068:	3a01      	subs	r2, #1
 801a06a:	4c21      	ldr	r4, [pc, #132]	; (801a0f0 <__pow5mult+0x98>)
 801a06c:	2300      	movs	r3, #0
 801a06e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a072:	f7ff fe8a 	bl	8019d8a <__multadd>
 801a076:	4607      	mov	r7, r0
 801a078:	10ad      	asrs	r5, r5, #2
 801a07a:	d035      	beq.n	801a0e8 <__pow5mult+0x90>
 801a07c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a07e:	b93c      	cbnz	r4, 801a090 <__pow5mult+0x38>
 801a080:	2010      	movs	r0, #16
 801a082:	f7fc fe3f 	bl	8016d04 <malloc>
 801a086:	6270      	str	r0, [r6, #36]	; 0x24
 801a088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a08c:	6004      	str	r4, [r0, #0]
 801a08e:	60c4      	str	r4, [r0, #12]
 801a090:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a098:	b94c      	cbnz	r4, 801a0ae <__pow5mult+0x56>
 801a09a:	f240 2171 	movw	r1, #625	; 0x271
 801a09e:	4630      	mov	r0, r6
 801a0a0:	f7ff ff3a 	bl	8019f18 <__i2b>
 801a0a4:	2300      	movs	r3, #0
 801a0a6:	f8c8 0008 	str.w	r0, [r8, #8]
 801a0aa:	4604      	mov	r4, r0
 801a0ac:	6003      	str	r3, [r0, #0]
 801a0ae:	f04f 0800 	mov.w	r8, #0
 801a0b2:	07eb      	lsls	r3, r5, #31
 801a0b4:	d50a      	bpl.n	801a0cc <__pow5mult+0x74>
 801a0b6:	4639      	mov	r1, r7
 801a0b8:	4622      	mov	r2, r4
 801a0ba:	4630      	mov	r0, r6
 801a0bc:	f7ff ff35 	bl	8019f2a <__multiply>
 801a0c0:	4639      	mov	r1, r7
 801a0c2:	4681      	mov	r9, r0
 801a0c4:	4630      	mov	r0, r6
 801a0c6:	f7ff fe49 	bl	8019d5c <_Bfree>
 801a0ca:	464f      	mov	r7, r9
 801a0cc:	106d      	asrs	r5, r5, #1
 801a0ce:	d00b      	beq.n	801a0e8 <__pow5mult+0x90>
 801a0d0:	6820      	ldr	r0, [r4, #0]
 801a0d2:	b938      	cbnz	r0, 801a0e4 <__pow5mult+0x8c>
 801a0d4:	4622      	mov	r2, r4
 801a0d6:	4621      	mov	r1, r4
 801a0d8:	4630      	mov	r0, r6
 801a0da:	f7ff ff26 	bl	8019f2a <__multiply>
 801a0de:	6020      	str	r0, [r4, #0]
 801a0e0:	f8c0 8000 	str.w	r8, [r0]
 801a0e4:	4604      	mov	r4, r0
 801a0e6:	e7e4      	b.n	801a0b2 <__pow5mult+0x5a>
 801a0e8:	4638      	mov	r0, r7
 801a0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0ee:	bf00      	nop
 801a0f0:	0801e250 	.word	0x0801e250

0801a0f4 <__lshift>:
 801a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0f8:	460c      	mov	r4, r1
 801a0fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a0fe:	6923      	ldr	r3, [r4, #16]
 801a100:	6849      	ldr	r1, [r1, #4]
 801a102:	eb0a 0903 	add.w	r9, sl, r3
 801a106:	68a3      	ldr	r3, [r4, #8]
 801a108:	4607      	mov	r7, r0
 801a10a:	4616      	mov	r6, r2
 801a10c:	f109 0501 	add.w	r5, r9, #1
 801a110:	42ab      	cmp	r3, r5
 801a112:	db32      	blt.n	801a17a <__lshift+0x86>
 801a114:	4638      	mov	r0, r7
 801a116:	f7ff fded 	bl	8019cf4 <_Balloc>
 801a11a:	2300      	movs	r3, #0
 801a11c:	4680      	mov	r8, r0
 801a11e:	f100 0114 	add.w	r1, r0, #20
 801a122:	461a      	mov	r2, r3
 801a124:	4553      	cmp	r3, sl
 801a126:	db2b      	blt.n	801a180 <__lshift+0x8c>
 801a128:	6920      	ldr	r0, [r4, #16]
 801a12a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a12e:	f104 0314 	add.w	r3, r4, #20
 801a132:	f016 021f 	ands.w	r2, r6, #31
 801a136:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a13a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a13e:	d025      	beq.n	801a18c <__lshift+0x98>
 801a140:	f1c2 0e20 	rsb	lr, r2, #32
 801a144:	2000      	movs	r0, #0
 801a146:	681e      	ldr	r6, [r3, #0]
 801a148:	468a      	mov	sl, r1
 801a14a:	4096      	lsls	r6, r2
 801a14c:	4330      	orrs	r0, r6
 801a14e:	f84a 0b04 	str.w	r0, [sl], #4
 801a152:	f853 0b04 	ldr.w	r0, [r3], #4
 801a156:	459c      	cmp	ip, r3
 801a158:	fa20 f00e 	lsr.w	r0, r0, lr
 801a15c:	d814      	bhi.n	801a188 <__lshift+0x94>
 801a15e:	6048      	str	r0, [r1, #4]
 801a160:	b108      	cbz	r0, 801a166 <__lshift+0x72>
 801a162:	f109 0502 	add.w	r5, r9, #2
 801a166:	3d01      	subs	r5, #1
 801a168:	4638      	mov	r0, r7
 801a16a:	f8c8 5010 	str.w	r5, [r8, #16]
 801a16e:	4621      	mov	r1, r4
 801a170:	f7ff fdf4 	bl	8019d5c <_Bfree>
 801a174:	4640      	mov	r0, r8
 801a176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a17a:	3101      	adds	r1, #1
 801a17c:	005b      	lsls	r3, r3, #1
 801a17e:	e7c7      	b.n	801a110 <__lshift+0x1c>
 801a180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a184:	3301      	adds	r3, #1
 801a186:	e7cd      	b.n	801a124 <__lshift+0x30>
 801a188:	4651      	mov	r1, sl
 801a18a:	e7dc      	b.n	801a146 <__lshift+0x52>
 801a18c:	3904      	subs	r1, #4
 801a18e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a192:	f841 2f04 	str.w	r2, [r1, #4]!
 801a196:	459c      	cmp	ip, r3
 801a198:	d8f9      	bhi.n	801a18e <__lshift+0x9a>
 801a19a:	e7e4      	b.n	801a166 <__lshift+0x72>

0801a19c <__mcmp>:
 801a19c:	6903      	ldr	r3, [r0, #16]
 801a19e:	690a      	ldr	r2, [r1, #16]
 801a1a0:	1a9b      	subs	r3, r3, r2
 801a1a2:	b530      	push	{r4, r5, lr}
 801a1a4:	d10c      	bne.n	801a1c0 <__mcmp+0x24>
 801a1a6:	0092      	lsls	r2, r2, #2
 801a1a8:	3014      	adds	r0, #20
 801a1aa:	3114      	adds	r1, #20
 801a1ac:	1884      	adds	r4, r0, r2
 801a1ae:	4411      	add	r1, r2
 801a1b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a1b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a1b8:	4295      	cmp	r5, r2
 801a1ba:	d003      	beq.n	801a1c4 <__mcmp+0x28>
 801a1bc:	d305      	bcc.n	801a1ca <__mcmp+0x2e>
 801a1be:	2301      	movs	r3, #1
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	bd30      	pop	{r4, r5, pc}
 801a1c4:	42a0      	cmp	r0, r4
 801a1c6:	d3f3      	bcc.n	801a1b0 <__mcmp+0x14>
 801a1c8:	e7fa      	b.n	801a1c0 <__mcmp+0x24>
 801a1ca:	f04f 33ff 	mov.w	r3, #4294967295
 801a1ce:	e7f7      	b.n	801a1c0 <__mcmp+0x24>

0801a1d0 <__mdiff>:
 801a1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1d4:	460d      	mov	r5, r1
 801a1d6:	4607      	mov	r7, r0
 801a1d8:	4611      	mov	r1, r2
 801a1da:	4628      	mov	r0, r5
 801a1dc:	4614      	mov	r4, r2
 801a1de:	f7ff ffdd 	bl	801a19c <__mcmp>
 801a1e2:	1e06      	subs	r6, r0, #0
 801a1e4:	d108      	bne.n	801a1f8 <__mdiff+0x28>
 801a1e6:	4631      	mov	r1, r6
 801a1e8:	4638      	mov	r0, r7
 801a1ea:	f7ff fd83 	bl	8019cf4 <_Balloc>
 801a1ee:	2301      	movs	r3, #1
 801a1f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801a1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1f8:	bfa4      	itt	ge
 801a1fa:	4623      	movge	r3, r4
 801a1fc:	462c      	movge	r4, r5
 801a1fe:	4638      	mov	r0, r7
 801a200:	6861      	ldr	r1, [r4, #4]
 801a202:	bfa6      	itte	ge
 801a204:	461d      	movge	r5, r3
 801a206:	2600      	movge	r6, #0
 801a208:	2601      	movlt	r6, #1
 801a20a:	f7ff fd73 	bl	8019cf4 <_Balloc>
 801a20e:	692b      	ldr	r3, [r5, #16]
 801a210:	60c6      	str	r6, [r0, #12]
 801a212:	6926      	ldr	r6, [r4, #16]
 801a214:	f105 0914 	add.w	r9, r5, #20
 801a218:	f104 0214 	add.w	r2, r4, #20
 801a21c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801a220:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801a224:	f100 0514 	add.w	r5, r0, #20
 801a228:	f04f 0e00 	mov.w	lr, #0
 801a22c:	f852 ab04 	ldr.w	sl, [r2], #4
 801a230:	f859 4b04 	ldr.w	r4, [r9], #4
 801a234:	fa1e f18a 	uxtah	r1, lr, sl
 801a238:	b2a3      	uxth	r3, r4
 801a23a:	1ac9      	subs	r1, r1, r3
 801a23c:	0c23      	lsrs	r3, r4, #16
 801a23e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801a242:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a246:	b289      	uxth	r1, r1
 801a248:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801a24c:	45c8      	cmp	r8, r9
 801a24e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a252:	4694      	mov	ip, r2
 801a254:	f845 3b04 	str.w	r3, [r5], #4
 801a258:	d8e8      	bhi.n	801a22c <__mdiff+0x5c>
 801a25a:	45bc      	cmp	ip, r7
 801a25c:	d304      	bcc.n	801a268 <__mdiff+0x98>
 801a25e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a262:	b183      	cbz	r3, 801a286 <__mdiff+0xb6>
 801a264:	6106      	str	r6, [r0, #16]
 801a266:	e7c5      	b.n	801a1f4 <__mdiff+0x24>
 801a268:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a26c:	fa1e f381 	uxtah	r3, lr, r1
 801a270:	141a      	asrs	r2, r3, #16
 801a272:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a276:	b29b      	uxth	r3, r3
 801a278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a27c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801a280:	f845 3b04 	str.w	r3, [r5], #4
 801a284:	e7e9      	b.n	801a25a <__mdiff+0x8a>
 801a286:	3e01      	subs	r6, #1
 801a288:	e7e9      	b.n	801a25e <__mdiff+0x8e>
	...

0801a28c <__ulp>:
 801a28c:	4b12      	ldr	r3, [pc, #72]	; (801a2d8 <__ulp+0x4c>)
 801a28e:	ee10 2a90 	vmov	r2, s1
 801a292:	401a      	ands	r2, r3
 801a294:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801a298:	2b00      	cmp	r3, #0
 801a29a:	dd04      	ble.n	801a2a6 <__ulp+0x1a>
 801a29c:	2000      	movs	r0, #0
 801a29e:	4619      	mov	r1, r3
 801a2a0:	ec41 0b10 	vmov	d0, r0, r1
 801a2a4:	4770      	bx	lr
 801a2a6:	425b      	negs	r3, r3
 801a2a8:	151b      	asrs	r3, r3, #20
 801a2aa:	2b13      	cmp	r3, #19
 801a2ac:	f04f 0000 	mov.w	r0, #0
 801a2b0:	f04f 0100 	mov.w	r1, #0
 801a2b4:	dc04      	bgt.n	801a2c0 <__ulp+0x34>
 801a2b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a2ba:	fa42 f103 	asr.w	r1, r2, r3
 801a2be:	e7ef      	b.n	801a2a0 <__ulp+0x14>
 801a2c0:	3b14      	subs	r3, #20
 801a2c2:	2b1e      	cmp	r3, #30
 801a2c4:	f04f 0201 	mov.w	r2, #1
 801a2c8:	bfda      	itte	le
 801a2ca:	f1c3 031f 	rsble	r3, r3, #31
 801a2ce:	fa02 f303 	lslle.w	r3, r2, r3
 801a2d2:	4613      	movgt	r3, r2
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	e7e3      	b.n	801a2a0 <__ulp+0x14>
 801a2d8:	7ff00000 	.word	0x7ff00000

0801a2dc <__b2d>:
 801a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2de:	6905      	ldr	r5, [r0, #16]
 801a2e0:	f100 0714 	add.w	r7, r0, #20
 801a2e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a2e8:	1f2e      	subs	r6, r5, #4
 801a2ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a2ee:	4620      	mov	r0, r4
 801a2f0:	f7ff fdc4 	bl	8019e7c <__hi0bits>
 801a2f4:	f1c0 0320 	rsb	r3, r0, #32
 801a2f8:	280a      	cmp	r0, #10
 801a2fa:	600b      	str	r3, [r1, #0]
 801a2fc:	f8df c074 	ldr.w	ip, [pc, #116]	; 801a374 <__b2d+0x98>
 801a300:	dc14      	bgt.n	801a32c <__b2d+0x50>
 801a302:	f1c0 0e0b 	rsb	lr, r0, #11
 801a306:	fa24 f10e 	lsr.w	r1, r4, lr
 801a30a:	42b7      	cmp	r7, r6
 801a30c:	ea41 030c 	orr.w	r3, r1, ip
 801a310:	bf34      	ite	cc
 801a312:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a316:	2100      	movcs	r1, #0
 801a318:	3015      	adds	r0, #21
 801a31a:	fa04 f000 	lsl.w	r0, r4, r0
 801a31e:	fa21 f10e 	lsr.w	r1, r1, lr
 801a322:	ea40 0201 	orr.w	r2, r0, r1
 801a326:	ec43 2b10 	vmov	d0, r2, r3
 801a32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a32c:	42b7      	cmp	r7, r6
 801a32e:	bf3a      	itte	cc
 801a330:	f1a5 0608 	subcc.w	r6, r5, #8
 801a334:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a338:	2100      	movcs	r1, #0
 801a33a:	380b      	subs	r0, #11
 801a33c:	d015      	beq.n	801a36a <__b2d+0x8e>
 801a33e:	4084      	lsls	r4, r0
 801a340:	f1c0 0520 	rsb	r5, r0, #32
 801a344:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801a348:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801a34c:	42be      	cmp	r6, r7
 801a34e:	fa21 fc05 	lsr.w	ip, r1, r5
 801a352:	ea44 030c 	orr.w	r3, r4, ip
 801a356:	bf8c      	ite	hi
 801a358:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a35c:	2400      	movls	r4, #0
 801a35e:	fa01 f000 	lsl.w	r0, r1, r0
 801a362:	40ec      	lsrs	r4, r5
 801a364:	ea40 0204 	orr.w	r2, r0, r4
 801a368:	e7dd      	b.n	801a326 <__b2d+0x4a>
 801a36a:	ea44 030c 	orr.w	r3, r4, ip
 801a36e:	460a      	mov	r2, r1
 801a370:	e7d9      	b.n	801a326 <__b2d+0x4a>
 801a372:	bf00      	nop
 801a374:	3ff00000 	.word	0x3ff00000

0801a378 <__d2b>:
 801a378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a37c:	460e      	mov	r6, r1
 801a37e:	2101      	movs	r1, #1
 801a380:	ec59 8b10 	vmov	r8, r9, d0
 801a384:	4615      	mov	r5, r2
 801a386:	f7ff fcb5 	bl	8019cf4 <_Balloc>
 801a38a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801a38e:	4607      	mov	r7, r0
 801a390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a394:	bb34      	cbnz	r4, 801a3e4 <__d2b+0x6c>
 801a396:	9301      	str	r3, [sp, #4]
 801a398:	f1b8 0300 	subs.w	r3, r8, #0
 801a39c:	d027      	beq.n	801a3ee <__d2b+0x76>
 801a39e:	a802      	add	r0, sp, #8
 801a3a0:	f840 3d08 	str.w	r3, [r0, #-8]!
 801a3a4:	f7ff fd89 	bl	8019eba <__lo0bits>
 801a3a8:	9900      	ldr	r1, [sp, #0]
 801a3aa:	b1f0      	cbz	r0, 801a3ea <__d2b+0x72>
 801a3ac:	9a01      	ldr	r2, [sp, #4]
 801a3ae:	f1c0 0320 	rsb	r3, r0, #32
 801a3b2:	fa02 f303 	lsl.w	r3, r2, r3
 801a3b6:	430b      	orrs	r3, r1
 801a3b8:	40c2      	lsrs	r2, r0
 801a3ba:	617b      	str	r3, [r7, #20]
 801a3bc:	9201      	str	r2, [sp, #4]
 801a3be:	9b01      	ldr	r3, [sp, #4]
 801a3c0:	61bb      	str	r3, [r7, #24]
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	bf14      	ite	ne
 801a3c6:	2102      	movne	r1, #2
 801a3c8:	2101      	moveq	r1, #1
 801a3ca:	6139      	str	r1, [r7, #16]
 801a3cc:	b1c4      	cbz	r4, 801a400 <__d2b+0x88>
 801a3ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801a3d2:	4404      	add	r4, r0
 801a3d4:	6034      	str	r4, [r6, #0]
 801a3d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a3da:	6028      	str	r0, [r5, #0]
 801a3dc:	4638      	mov	r0, r7
 801a3de:	b003      	add	sp, #12
 801a3e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a3e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a3e8:	e7d5      	b.n	801a396 <__d2b+0x1e>
 801a3ea:	6179      	str	r1, [r7, #20]
 801a3ec:	e7e7      	b.n	801a3be <__d2b+0x46>
 801a3ee:	a801      	add	r0, sp, #4
 801a3f0:	f7ff fd63 	bl	8019eba <__lo0bits>
 801a3f4:	9b01      	ldr	r3, [sp, #4]
 801a3f6:	617b      	str	r3, [r7, #20]
 801a3f8:	2101      	movs	r1, #1
 801a3fa:	6139      	str	r1, [r7, #16]
 801a3fc:	3020      	adds	r0, #32
 801a3fe:	e7e5      	b.n	801a3cc <__d2b+0x54>
 801a400:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801a404:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a408:	6030      	str	r0, [r6, #0]
 801a40a:	6918      	ldr	r0, [r3, #16]
 801a40c:	f7ff fd36 	bl	8019e7c <__hi0bits>
 801a410:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801a414:	e7e1      	b.n	801a3da <__d2b+0x62>

0801a416 <__ratio>:
 801a416:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a41a:	4688      	mov	r8, r1
 801a41c:	4669      	mov	r1, sp
 801a41e:	4681      	mov	r9, r0
 801a420:	f7ff ff5c 	bl	801a2dc <__b2d>
 801a424:	a901      	add	r1, sp, #4
 801a426:	4640      	mov	r0, r8
 801a428:	ec57 6b10 	vmov	r6, r7, d0
 801a42c:	f7ff ff56 	bl	801a2dc <__b2d>
 801a430:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a434:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a438:	eba3 0c02 	sub.w	ip, r3, r2
 801a43c:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a440:	1a9b      	subs	r3, r3, r2
 801a442:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a446:	ec5b ab10 	vmov	sl, fp, d0
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	bfce      	itee	gt
 801a44e:	463a      	movgt	r2, r7
 801a450:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a454:	465a      	movle	r2, fp
 801a456:	4659      	mov	r1, fp
 801a458:	463d      	mov	r5, r7
 801a45a:	bfd4      	ite	le
 801a45c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801a460:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801a464:	4630      	mov	r0, r6
 801a466:	ee10 2a10 	vmov	r2, s0
 801a46a:	460b      	mov	r3, r1
 801a46c:	4629      	mov	r1, r5
 801a46e:	f7e6 f9fd 	bl	800086c <__aeabi_ddiv>
 801a472:	ec41 0b10 	vmov	d0, r0, r1
 801a476:	b003      	add	sp, #12
 801a478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a47c <__copybits>:
 801a47c:	3901      	subs	r1, #1
 801a47e:	b510      	push	{r4, lr}
 801a480:	1149      	asrs	r1, r1, #5
 801a482:	6914      	ldr	r4, [r2, #16]
 801a484:	3101      	adds	r1, #1
 801a486:	f102 0314 	add.w	r3, r2, #20
 801a48a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a48e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a492:	42a3      	cmp	r3, r4
 801a494:	4602      	mov	r2, r0
 801a496:	d303      	bcc.n	801a4a0 <__copybits+0x24>
 801a498:	2300      	movs	r3, #0
 801a49a:	428a      	cmp	r2, r1
 801a49c:	d305      	bcc.n	801a4aa <__copybits+0x2e>
 801a49e:	bd10      	pop	{r4, pc}
 801a4a0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a4a4:	f840 2b04 	str.w	r2, [r0], #4
 801a4a8:	e7f3      	b.n	801a492 <__copybits+0x16>
 801a4aa:	f842 3b04 	str.w	r3, [r2], #4
 801a4ae:	e7f4      	b.n	801a49a <__copybits+0x1e>

0801a4b0 <__any_on>:
 801a4b0:	f100 0214 	add.w	r2, r0, #20
 801a4b4:	6900      	ldr	r0, [r0, #16]
 801a4b6:	114b      	asrs	r3, r1, #5
 801a4b8:	4298      	cmp	r0, r3
 801a4ba:	b510      	push	{r4, lr}
 801a4bc:	db11      	blt.n	801a4e2 <__any_on+0x32>
 801a4be:	dd0a      	ble.n	801a4d6 <__any_on+0x26>
 801a4c0:	f011 011f 	ands.w	r1, r1, #31
 801a4c4:	d007      	beq.n	801a4d6 <__any_on+0x26>
 801a4c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a4ca:	fa24 f001 	lsr.w	r0, r4, r1
 801a4ce:	fa00 f101 	lsl.w	r1, r0, r1
 801a4d2:	428c      	cmp	r4, r1
 801a4d4:	d10b      	bne.n	801a4ee <__any_on+0x3e>
 801a4d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a4da:	4293      	cmp	r3, r2
 801a4dc:	d803      	bhi.n	801a4e6 <__any_on+0x36>
 801a4de:	2000      	movs	r0, #0
 801a4e0:	bd10      	pop	{r4, pc}
 801a4e2:	4603      	mov	r3, r0
 801a4e4:	e7f7      	b.n	801a4d6 <__any_on+0x26>
 801a4e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a4ea:	2900      	cmp	r1, #0
 801a4ec:	d0f5      	beq.n	801a4da <__any_on+0x2a>
 801a4ee:	2001      	movs	r0, #1
 801a4f0:	e7f6      	b.n	801a4e0 <__any_on+0x30>

0801a4f2 <_calloc_r>:
 801a4f2:	b538      	push	{r3, r4, r5, lr}
 801a4f4:	fb02 f401 	mul.w	r4, r2, r1
 801a4f8:	4621      	mov	r1, r4
 801a4fa:	f7fc fc75 	bl	8016de8 <_malloc_r>
 801a4fe:	4605      	mov	r5, r0
 801a500:	b118      	cbz	r0, 801a50a <_calloc_r+0x18>
 801a502:	4622      	mov	r2, r4
 801a504:	2100      	movs	r1, #0
 801a506:	f7fc fc18 	bl	8016d3a <memset>
 801a50a:	4628      	mov	r0, r5
 801a50c:	bd38      	pop	{r3, r4, r5, pc}

0801a50e <__ssputs_r>:
 801a50e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a512:	688e      	ldr	r6, [r1, #8]
 801a514:	429e      	cmp	r6, r3
 801a516:	4682      	mov	sl, r0
 801a518:	460c      	mov	r4, r1
 801a51a:	4690      	mov	r8, r2
 801a51c:	4699      	mov	r9, r3
 801a51e:	d837      	bhi.n	801a590 <__ssputs_r+0x82>
 801a520:	898a      	ldrh	r2, [r1, #12]
 801a522:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a526:	d031      	beq.n	801a58c <__ssputs_r+0x7e>
 801a528:	6825      	ldr	r5, [r4, #0]
 801a52a:	6909      	ldr	r1, [r1, #16]
 801a52c:	1a6f      	subs	r7, r5, r1
 801a52e:	6965      	ldr	r5, [r4, #20]
 801a530:	2302      	movs	r3, #2
 801a532:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a536:	fb95 f5f3 	sdiv	r5, r5, r3
 801a53a:	f109 0301 	add.w	r3, r9, #1
 801a53e:	443b      	add	r3, r7
 801a540:	429d      	cmp	r5, r3
 801a542:	bf38      	it	cc
 801a544:	461d      	movcc	r5, r3
 801a546:	0553      	lsls	r3, r2, #21
 801a548:	d530      	bpl.n	801a5ac <__ssputs_r+0x9e>
 801a54a:	4629      	mov	r1, r5
 801a54c:	f7fc fc4c 	bl	8016de8 <_malloc_r>
 801a550:	4606      	mov	r6, r0
 801a552:	b950      	cbnz	r0, 801a56a <__ssputs_r+0x5c>
 801a554:	230c      	movs	r3, #12
 801a556:	f8ca 3000 	str.w	r3, [sl]
 801a55a:	89a3      	ldrh	r3, [r4, #12]
 801a55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a560:	81a3      	strh	r3, [r4, #12]
 801a562:	f04f 30ff 	mov.w	r0, #4294967295
 801a566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a56a:	463a      	mov	r2, r7
 801a56c:	6921      	ldr	r1, [r4, #16]
 801a56e:	f7fc fbd9 	bl	8016d24 <memcpy>
 801a572:	89a3      	ldrh	r3, [r4, #12]
 801a574:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a57c:	81a3      	strh	r3, [r4, #12]
 801a57e:	6126      	str	r6, [r4, #16]
 801a580:	6165      	str	r5, [r4, #20]
 801a582:	443e      	add	r6, r7
 801a584:	1bed      	subs	r5, r5, r7
 801a586:	6026      	str	r6, [r4, #0]
 801a588:	60a5      	str	r5, [r4, #8]
 801a58a:	464e      	mov	r6, r9
 801a58c:	454e      	cmp	r6, r9
 801a58e:	d900      	bls.n	801a592 <__ssputs_r+0x84>
 801a590:	464e      	mov	r6, r9
 801a592:	4632      	mov	r2, r6
 801a594:	4641      	mov	r1, r8
 801a596:	6820      	ldr	r0, [r4, #0]
 801a598:	f000 f919 	bl	801a7ce <memmove>
 801a59c:	68a3      	ldr	r3, [r4, #8]
 801a59e:	1b9b      	subs	r3, r3, r6
 801a5a0:	60a3      	str	r3, [r4, #8]
 801a5a2:	6823      	ldr	r3, [r4, #0]
 801a5a4:	441e      	add	r6, r3
 801a5a6:	6026      	str	r6, [r4, #0]
 801a5a8:	2000      	movs	r0, #0
 801a5aa:	e7dc      	b.n	801a566 <__ssputs_r+0x58>
 801a5ac:	462a      	mov	r2, r5
 801a5ae:	f000 f927 	bl	801a800 <_realloc_r>
 801a5b2:	4606      	mov	r6, r0
 801a5b4:	2800      	cmp	r0, #0
 801a5b6:	d1e2      	bne.n	801a57e <__ssputs_r+0x70>
 801a5b8:	6921      	ldr	r1, [r4, #16]
 801a5ba:	4650      	mov	r0, sl
 801a5bc:	f7fc fbc6 	bl	8016d4c <_free_r>
 801a5c0:	e7c8      	b.n	801a554 <__ssputs_r+0x46>
	...

0801a5c4 <_svfiprintf_r>:
 801a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5c8:	461d      	mov	r5, r3
 801a5ca:	898b      	ldrh	r3, [r1, #12]
 801a5cc:	061f      	lsls	r7, r3, #24
 801a5ce:	b09d      	sub	sp, #116	; 0x74
 801a5d0:	4680      	mov	r8, r0
 801a5d2:	460c      	mov	r4, r1
 801a5d4:	4616      	mov	r6, r2
 801a5d6:	d50f      	bpl.n	801a5f8 <_svfiprintf_r+0x34>
 801a5d8:	690b      	ldr	r3, [r1, #16]
 801a5da:	b96b      	cbnz	r3, 801a5f8 <_svfiprintf_r+0x34>
 801a5dc:	2140      	movs	r1, #64	; 0x40
 801a5de:	f7fc fc03 	bl	8016de8 <_malloc_r>
 801a5e2:	6020      	str	r0, [r4, #0]
 801a5e4:	6120      	str	r0, [r4, #16]
 801a5e6:	b928      	cbnz	r0, 801a5f4 <_svfiprintf_r+0x30>
 801a5e8:	230c      	movs	r3, #12
 801a5ea:	f8c8 3000 	str.w	r3, [r8]
 801a5ee:	f04f 30ff 	mov.w	r0, #4294967295
 801a5f2:	e0c8      	b.n	801a786 <_svfiprintf_r+0x1c2>
 801a5f4:	2340      	movs	r3, #64	; 0x40
 801a5f6:	6163      	str	r3, [r4, #20]
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	9309      	str	r3, [sp, #36]	; 0x24
 801a5fc:	2320      	movs	r3, #32
 801a5fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a602:	2330      	movs	r3, #48	; 0x30
 801a604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a608:	9503      	str	r5, [sp, #12]
 801a60a:	f04f 0b01 	mov.w	fp, #1
 801a60e:	4637      	mov	r7, r6
 801a610:	463d      	mov	r5, r7
 801a612:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a616:	b10b      	cbz	r3, 801a61c <_svfiprintf_r+0x58>
 801a618:	2b25      	cmp	r3, #37	; 0x25
 801a61a:	d13e      	bne.n	801a69a <_svfiprintf_r+0xd6>
 801a61c:	ebb7 0a06 	subs.w	sl, r7, r6
 801a620:	d00b      	beq.n	801a63a <_svfiprintf_r+0x76>
 801a622:	4653      	mov	r3, sl
 801a624:	4632      	mov	r2, r6
 801a626:	4621      	mov	r1, r4
 801a628:	4640      	mov	r0, r8
 801a62a:	f7ff ff70 	bl	801a50e <__ssputs_r>
 801a62e:	3001      	adds	r0, #1
 801a630:	f000 80a4 	beq.w	801a77c <_svfiprintf_r+0x1b8>
 801a634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a636:	4453      	add	r3, sl
 801a638:	9309      	str	r3, [sp, #36]	; 0x24
 801a63a:	783b      	ldrb	r3, [r7, #0]
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	f000 809d 	beq.w	801a77c <_svfiprintf_r+0x1b8>
 801a642:	2300      	movs	r3, #0
 801a644:	f04f 32ff 	mov.w	r2, #4294967295
 801a648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a64c:	9304      	str	r3, [sp, #16]
 801a64e:	9307      	str	r3, [sp, #28]
 801a650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a654:	931a      	str	r3, [sp, #104]	; 0x68
 801a656:	462f      	mov	r7, r5
 801a658:	2205      	movs	r2, #5
 801a65a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a65e:	4850      	ldr	r0, [pc, #320]	; (801a7a0 <_svfiprintf_r+0x1dc>)
 801a660:	f7e5 fdce 	bl	8000200 <memchr>
 801a664:	9b04      	ldr	r3, [sp, #16]
 801a666:	b9d0      	cbnz	r0, 801a69e <_svfiprintf_r+0xda>
 801a668:	06d9      	lsls	r1, r3, #27
 801a66a:	bf44      	itt	mi
 801a66c:	2220      	movmi	r2, #32
 801a66e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a672:	071a      	lsls	r2, r3, #28
 801a674:	bf44      	itt	mi
 801a676:	222b      	movmi	r2, #43	; 0x2b
 801a678:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a67c:	782a      	ldrb	r2, [r5, #0]
 801a67e:	2a2a      	cmp	r2, #42	; 0x2a
 801a680:	d015      	beq.n	801a6ae <_svfiprintf_r+0xea>
 801a682:	9a07      	ldr	r2, [sp, #28]
 801a684:	462f      	mov	r7, r5
 801a686:	2000      	movs	r0, #0
 801a688:	250a      	movs	r5, #10
 801a68a:	4639      	mov	r1, r7
 801a68c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a690:	3b30      	subs	r3, #48	; 0x30
 801a692:	2b09      	cmp	r3, #9
 801a694:	d94d      	bls.n	801a732 <_svfiprintf_r+0x16e>
 801a696:	b1b8      	cbz	r0, 801a6c8 <_svfiprintf_r+0x104>
 801a698:	e00f      	b.n	801a6ba <_svfiprintf_r+0xf6>
 801a69a:	462f      	mov	r7, r5
 801a69c:	e7b8      	b.n	801a610 <_svfiprintf_r+0x4c>
 801a69e:	4a40      	ldr	r2, [pc, #256]	; (801a7a0 <_svfiprintf_r+0x1dc>)
 801a6a0:	1a80      	subs	r0, r0, r2
 801a6a2:	fa0b f000 	lsl.w	r0, fp, r0
 801a6a6:	4318      	orrs	r0, r3
 801a6a8:	9004      	str	r0, [sp, #16]
 801a6aa:	463d      	mov	r5, r7
 801a6ac:	e7d3      	b.n	801a656 <_svfiprintf_r+0x92>
 801a6ae:	9a03      	ldr	r2, [sp, #12]
 801a6b0:	1d11      	adds	r1, r2, #4
 801a6b2:	6812      	ldr	r2, [r2, #0]
 801a6b4:	9103      	str	r1, [sp, #12]
 801a6b6:	2a00      	cmp	r2, #0
 801a6b8:	db01      	blt.n	801a6be <_svfiprintf_r+0xfa>
 801a6ba:	9207      	str	r2, [sp, #28]
 801a6bc:	e004      	b.n	801a6c8 <_svfiprintf_r+0x104>
 801a6be:	4252      	negs	r2, r2
 801a6c0:	f043 0302 	orr.w	r3, r3, #2
 801a6c4:	9207      	str	r2, [sp, #28]
 801a6c6:	9304      	str	r3, [sp, #16]
 801a6c8:	783b      	ldrb	r3, [r7, #0]
 801a6ca:	2b2e      	cmp	r3, #46	; 0x2e
 801a6cc:	d10c      	bne.n	801a6e8 <_svfiprintf_r+0x124>
 801a6ce:	787b      	ldrb	r3, [r7, #1]
 801a6d0:	2b2a      	cmp	r3, #42	; 0x2a
 801a6d2:	d133      	bne.n	801a73c <_svfiprintf_r+0x178>
 801a6d4:	9b03      	ldr	r3, [sp, #12]
 801a6d6:	1d1a      	adds	r2, r3, #4
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	9203      	str	r2, [sp, #12]
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	bfb8      	it	lt
 801a6e0:	f04f 33ff 	movlt.w	r3, #4294967295
 801a6e4:	3702      	adds	r7, #2
 801a6e6:	9305      	str	r3, [sp, #20]
 801a6e8:	4d2e      	ldr	r5, [pc, #184]	; (801a7a4 <_svfiprintf_r+0x1e0>)
 801a6ea:	7839      	ldrb	r1, [r7, #0]
 801a6ec:	2203      	movs	r2, #3
 801a6ee:	4628      	mov	r0, r5
 801a6f0:	f7e5 fd86 	bl	8000200 <memchr>
 801a6f4:	b138      	cbz	r0, 801a706 <_svfiprintf_r+0x142>
 801a6f6:	2340      	movs	r3, #64	; 0x40
 801a6f8:	1b40      	subs	r0, r0, r5
 801a6fa:	fa03 f000 	lsl.w	r0, r3, r0
 801a6fe:	9b04      	ldr	r3, [sp, #16]
 801a700:	4303      	orrs	r3, r0
 801a702:	3701      	adds	r7, #1
 801a704:	9304      	str	r3, [sp, #16]
 801a706:	7839      	ldrb	r1, [r7, #0]
 801a708:	4827      	ldr	r0, [pc, #156]	; (801a7a8 <_svfiprintf_r+0x1e4>)
 801a70a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a70e:	2206      	movs	r2, #6
 801a710:	1c7e      	adds	r6, r7, #1
 801a712:	f7e5 fd75 	bl	8000200 <memchr>
 801a716:	2800      	cmp	r0, #0
 801a718:	d038      	beq.n	801a78c <_svfiprintf_r+0x1c8>
 801a71a:	4b24      	ldr	r3, [pc, #144]	; (801a7ac <_svfiprintf_r+0x1e8>)
 801a71c:	bb13      	cbnz	r3, 801a764 <_svfiprintf_r+0x1a0>
 801a71e:	9b03      	ldr	r3, [sp, #12]
 801a720:	3307      	adds	r3, #7
 801a722:	f023 0307 	bic.w	r3, r3, #7
 801a726:	3308      	adds	r3, #8
 801a728:	9303      	str	r3, [sp, #12]
 801a72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a72c:	444b      	add	r3, r9
 801a72e:	9309      	str	r3, [sp, #36]	; 0x24
 801a730:	e76d      	b.n	801a60e <_svfiprintf_r+0x4a>
 801a732:	fb05 3202 	mla	r2, r5, r2, r3
 801a736:	2001      	movs	r0, #1
 801a738:	460f      	mov	r7, r1
 801a73a:	e7a6      	b.n	801a68a <_svfiprintf_r+0xc6>
 801a73c:	2300      	movs	r3, #0
 801a73e:	3701      	adds	r7, #1
 801a740:	9305      	str	r3, [sp, #20]
 801a742:	4619      	mov	r1, r3
 801a744:	250a      	movs	r5, #10
 801a746:	4638      	mov	r0, r7
 801a748:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a74c:	3a30      	subs	r2, #48	; 0x30
 801a74e:	2a09      	cmp	r2, #9
 801a750:	d903      	bls.n	801a75a <_svfiprintf_r+0x196>
 801a752:	2b00      	cmp	r3, #0
 801a754:	d0c8      	beq.n	801a6e8 <_svfiprintf_r+0x124>
 801a756:	9105      	str	r1, [sp, #20]
 801a758:	e7c6      	b.n	801a6e8 <_svfiprintf_r+0x124>
 801a75a:	fb05 2101 	mla	r1, r5, r1, r2
 801a75e:	2301      	movs	r3, #1
 801a760:	4607      	mov	r7, r0
 801a762:	e7f0      	b.n	801a746 <_svfiprintf_r+0x182>
 801a764:	ab03      	add	r3, sp, #12
 801a766:	9300      	str	r3, [sp, #0]
 801a768:	4622      	mov	r2, r4
 801a76a:	4b11      	ldr	r3, [pc, #68]	; (801a7b0 <_svfiprintf_r+0x1ec>)
 801a76c:	a904      	add	r1, sp, #16
 801a76e:	4640      	mov	r0, r8
 801a770:	f7fc fc28 	bl	8016fc4 <_printf_float>
 801a774:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a778:	4681      	mov	r9, r0
 801a77a:	d1d6      	bne.n	801a72a <_svfiprintf_r+0x166>
 801a77c:	89a3      	ldrh	r3, [r4, #12]
 801a77e:	065b      	lsls	r3, r3, #25
 801a780:	f53f af35 	bmi.w	801a5ee <_svfiprintf_r+0x2a>
 801a784:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a786:	b01d      	add	sp, #116	; 0x74
 801a788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a78c:	ab03      	add	r3, sp, #12
 801a78e:	9300      	str	r3, [sp, #0]
 801a790:	4622      	mov	r2, r4
 801a792:	4b07      	ldr	r3, [pc, #28]	; (801a7b0 <_svfiprintf_r+0x1ec>)
 801a794:	a904      	add	r1, sp, #16
 801a796:	4640      	mov	r0, r8
 801a798:	f7fc feca 	bl	8017530 <_printf_i>
 801a79c:	e7ea      	b.n	801a774 <_svfiprintf_r+0x1b0>
 801a79e:	bf00      	nop
 801a7a0:	0801e25c 	.word	0x0801e25c
 801a7a4:	0801e262 	.word	0x0801e262
 801a7a8:	0801e266 	.word	0x0801e266
 801a7ac:	08016fc5 	.word	0x08016fc5
 801a7b0:	0801a50f 	.word	0x0801a50f

0801a7b4 <__ascii_wctomb>:
 801a7b4:	b149      	cbz	r1, 801a7ca <__ascii_wctomb+0x16>
 801a7b6:	2aff      	cmp	r2, #255	; 0xff
 801a7b8:	bf85      	ittet	hi
 801a7ba:	238a      	movhi	r3, #138	; 0x8a
 801a7bc:	6003      	strhi	r3, [r0, #0]
 801a7be:	700a      	strbls	r2, [r1, #0]
 801a7c0:	f04f 30ff 	movhi.w	r0, #4294967295
 801a7c4:	bf98      	it	ls
 801a7c6:	2001      	movls	r0, #1
 801a7c8:	4770      	bx	lr
 801a7ca:	4608      	mov	r0, r1
 801a7cc:	4770      	bx	lr

0801a7ce <memmove>:
 801a7ce:	4288      	cmp	r0, r1
 801a7d0:	b510      	push	{r4, lr}
 801a7d2:	eb01 0302 	add.w	r3, r1, r2
 801a7d6:	d807      	bhi.n	801a7e8 <memmove+0x1a>
 801a7d8:	1e42      	subs	r2, r0, #1
 801a7da:	4299      	cmp	r1, r3
 801a7dc:	d00a      	beq.n	801a7f4 <memmove+0x26>
 801a7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a7e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a7e6:	e7f8      	b.n	801a7da <memmove+0xc>
 801a7e8:	4283      	cmp	r3, r0
 801a7ea:	d9f5      	bls.n	801a7d8 <memmove+0xa>
 801a7ec:	1881      	adds	r1, r0, r2
 801a7ee:	1ad2      	subs	r2, r2, r3
 801a7f0:	42d3      	cmn	r3, r2
 801a7f2:	d100      	bne.n	801a7f6 <memmove+0x28>
 801a7f4:	bd10      	pop	{r4, pc}
 801a7f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a7fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a7fe:	e7f7      	b.n	801a7f0 <memmove+0x22>

0801a800 <_realloc_r>:
 801a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a802:	4607      	mov	r7, r0
 801a804:	4614      	mov	r4, r2
 801a806:	460e      	mov	r6, r1
 801a808:	b921      	cbnz	r1, 801a814 <_realloc_r+0x14>
 801a80a:	4611      	mov	r1, r2
 801a80c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a810:	f7fc baea 	b.w	8016de8 <_malloc_r>
 801a814:	b922      	cbnz	r2, 801a820 <_realloc_r+0x20>
 801a816:	f7fc fa99 	bl	8016d4c <_free_r>
 801a81a:	4625      	mov	r5, r4
 801a81c:	4628      	mov	r0, r5
 801a81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a820:	f000 f814 	bl	801a84c <_malloc_usable_size_r>
 801a824:	42a0      	cmp	r0, r4
 801a826:	d20f      	bcs.n	801a848 <_realloc_r+0x48>
 801a828:	4621      	mov	r1, r4
 801a82a:	4638      	mov	r0, r7
 801a82c:	f7fc fadc 	bl	8016de8 <_malloc_r>
 801a830:	4605      	mov	r5, r0
 801a832:	2800      	cmp	r0, #0
 801a834:	d0f2      	beq.n	801a81c <_realloc_r+0x1c>
 801a836:	4631      	mov	r1, r6
 801a838:	4622      	mov	r2, r4
 801a83a:	f7fc fa73 	bl	8016d24 <memcpy>
 801a83e:	4631      	mov	r1, r6
 801a840:	4638      	mov	r0, r7
 801a842:	f7fc fa83 	bl	8016d4c <_free_r>
 801a846:	e7e9      	b.n	801a81c <_realloc_r+0x1c>
 801a848:	4635      	mov	r5, r6
 801a84a:	e7e7      	b.n	801a81c <_realloc_r+0x1c>

0801a84c <_malloc_usable_size_r>:
 801a84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a850:	1f18      	subs	r0, r3, #4
 801a852:	2b00      	cmp	r3, #0
 801a854:	bfbc      	itt	lt
 801a856:	580b      	ldrlt	r3, [r1, r0]
 801a858:	18c0      	addlt	r0, r0, r3
 801a85a:	4770      	bx	lr
 801a85c:	0000      	movs	r0, r0
	...

0801a860 <cos>:
 801a860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a862:	ec51 0b10 	vmov	r0, r1, d0
 801a866:	4a1e      	ldr	r2, [pc, #120]	; (801a8e0 <cos+0x80>)
 801a868:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a86c:	4293      	cmp	r3, r2
 801a86e:	dc06      	bgt.n	801a87e <cos+0x1e>
 801a870:	ed9f 1b19 	vldr	d1, [pc, #100]	; 801a8d8 <cos+0x78>
 801a874:	f001 feb8 	bl	801c5e8 <__kernel_cos>
 801a878:	ec51 0b10 	vmov	r0, r1, d0
 801a87c:	e007      	b.n	801a88e <cos+0x2e>
 801a87e:	4a19      	ldr	r2, [pc, #100]	; (801a8e4 <cos+0x84>)
 801a880:	4293      	cmp	r3, r2
 801a882:	dd09      	ble.n	801a898 <cos+0x38>
 801a884:	ee10 2a10 	vmov	r2, s0
 801a888:	460b      	mov	r3, r1
 801a88a:	f7e5 fd0d 	bl	80002a8 <__aeabi_dsub>
 801a88e:	ec41 0b10 	vmov	d0, r0, r1
 801a892:	b005      	add	sp, #20
 801a894:	f85d fb04 	ldr.w	pc, [sp], #4
 801a898:	4668      	mov	r0, sp
 801a89a:	f001 fbfd 	bl	801c098 <__ieee754_rem_pio2>
 801a89e:	f000 0003 	and.w	r0, r0, #3
 801a8a2:	2801      	cmp	r0, #1
 801a8a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a8a8:	ed9d 0b00 	vldr	d0, [sp]
 801a8ac:	d007      	beq.n	801a8be <cos+0x5e>
 801a8ae:	2802      	cmp	r0, #2
 801a8b0:	d00e      	beq.n	801a8d0 <cos+0x70>
 801a8b2:	2800      	cmp	r0, #0
 801a8b4:	d0de      	beq.n	801a874 <cos+0x14>
 801a8b6:	2001      	movs	r0, #1
 801a8b8:	f002 fa9e 	bl	801cdf8 <__kernel_sin>
 801a8bc:	e7dc      	b.n	801a878 <cos+0x18>
 801a8be:	f002 fa9b 	bl	801cdf8 <__kernel_sin>
 801a8c2:	ec53 2b10 	vmov	r2, r3, d0
 801a8c6:	ee10 0a10 	vmov	r0, s0
 801a8ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a8ce:	e7de      	b.n	801a88e <cos+0x2e>
 801a8d0:	f001 fe8a 	bl	801c5e8 <__kernel_cos>
 801a8d4:	e7f5      	b.n	801a8c2 <cos+0x62>
 801a8d6:	bf00      	nop
	...
 801a8e0:	3fe921fb 	.word	0x3fe921fb
 801a8e4:	7fefffff 	.word	0x7fefffff

0801a8e8 <sin>:
 801a8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a8ea:	ec51 0b10 	vmov	r0, r1, d0
 801a8ee:	4a20      	ldr	r2, [pc, #128]	; (801a970 <sin+0x88>)
 801a8f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a8f4:	4293      	cmp	r3, r2
 801a8f6:	dc07      	bgt.n	801a908 <sin+0x20>
 801a8f8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 801a968 <sin+0x80>
 801a8fc:	2000      	movs	r0, #0
 801a8fe:	f002 fa7b 	bl	801cdf8 <__kernel_sin>
 801a902:	ec51 0b10 	vmov	r0, r1, d0
 801a906:	e007      	b.n	801a918 <sin+0x30>
 801a908:	4a1a      	ldr	r2, [pc, #104]	; (801a974 <sin+0x8c>)
 801a90a:	4293      	cmp	r3, r2
 801a90c:	dd09      	ble.n	801a922 <sin+0x3a>
 801a90e:	ee10 2a10 	vmov	r2, s0
 801a912:	460b      	mov	r3, r1
 801a914:	f7e5 fcc8 	bl	80002a8 <__aeabi_dsub>
 801a918:	ec41 0b10 	vmov	d0, r0, r1
 801a91c:	b005      	add	sp, #20
 801a91e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a922:	4668      	mov	r0, sp
 801a924:	f001 fbb8 	bl	801c098 <__ieee754_rem_pio2>
 801a928:	f000 0003 	and.w	r0, r0, #3
 801a92c:	2801      	cmp	r0, #1
 801a92e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a932:	ed9d 0b00 	vldr	d0, [sp]
 801a936:	d004      	beq.n	801a942 <sin+0x5a>
 801a938:	2802      	cmp	r0, #2
 801a93a:	d005      	beq.n	801a948 <sin+0x60>
 801a93c:	b970      	cbnz	r0, 801a95c <sin+0x74>
 801a93e:	2001      	movs	r0, #1
 801a940:	e7dd      	b.n	801a8fe <sin+0x16>
 801a942:	f001 fe51 	bl	801c5e8 <__kernel_cos>
 801a946:	e7dc      	b.n	801a902 <sin+0x1a>
 801a948:	2001      	movs	r0, #1
 801a94a:	f002 fa55 	bl	801cdf8 <__kernel_sin>
 801a94e:	ec53 2b10 	vmov	r2, r3, d0
 801a952:	ee10 0a10 	vmov	r0, s0
 801a956:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a95a:	e7dd      	b.n	801a918 <sin+0x30>
 801a95c:	f001 fe44 	bl	801c5e8 <__kernel_cos>
 801a960:	e7f5      	b.n	801a94e <sin+0x66>
 801a962:	bf00      	nop
 801a964:	f3af 8000 	nop.w
	...
 801a970:	3fe921fb 	.word	0x3fe921fb
 801a974:	7fefffff 	.word	0x7fefffff

0801a978 <asin>:
 801a978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a97a:	ed2d 8b02 	vpush	{d8}
 801a97e:	4e26      	ldr	r6, [pc, #152]	; (801aa18 <asin+0xa0>)
 801a980:	b08b      	sub	sp, #44	; 0x2c
 801a982:	ec55 4b10 	vmov	r4, r5, d0
 801a986:	f000 fa77 	bl	801ae78 <__ieee754_asin>
 801a98a:	f996 3000 	ldrsb.w	r3, [r6]
 801a98e:	eeb0 8a40 	vmov.f32	s16, s0
 801a992:	eef0 8a60 	vmov.f32	s17, s1
 801a996:	3301      	adds	r3, #1
 801a998:	d036      	beq.n	801aa08 <asin+0x90>
 801a99a:	4622      	mov	r2, r4
 801a99c:	462b      	mov	r3, r5
 801a99e:	4620      	mov	r0, r4
 801a9a0:	4629      	mov	r1, r5
 801a9a2:	f7e6 f8d3 	bl	8000b4c <__aeabi_dcmpun>
 801a9a6:	4607      	mov	r7, r0
 801a9a8:	bb70      	cbnz	r0, 801aa08 <asin+0x90>
 801a9aa:	ec45 4b10 	vmov	d0, r4, r5
 801a9ae:	f002 fc7f 	bl	801d2b0 <fabs>
 801a9b2:	2200      	movs	r2, #0
 801a9b4:	4b19      	ldr	r3, [pc, #100]	; (801aa1c <asin+0xa4>)
 801a9b6:	ec51 0b10 	vmov	r0, r1, d0
 801a9ba:	f7e6 f8bd 	bl	8000b38 <__aeabi_dcmpgt>
 801a9be:	b318      	cbz	r0, 801aa08 <asin+0x90>
 801a9c0:	2301      	movs	r3, #1
 801a9c2:	9300      	str	r3, [sp, #0]
 801a9c4:	4816      	ldr	r0, [pc, #88]	; (801aa20 <asin+0xa8>)
 801a9c6:	4b17      	ldr	r3, [pc, #92]	; (801aa24 <asin+0xac>)
 801a9c8:	9301      	str	r3, [sp, #4]
 801a9ca:	9708      	str	r7, [sp, #32]
 801a9cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801a9d0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801a9d4:	f002 fd08 	bl	801d3e8 <nan>
 801a9d8:	f996 3000 	ldrsb.w	r3, [r6]
 801a9dc:	2b02      	cmp	r3, #2
 801a9de:	ed8d 0b06 	vstr	d0, [sp, #24]
 801a9e2:	d104      	bne.n	801a9ee <asin+0x76>
 801a9e4:	f7fc f964 	bl	8016cb0 <__errno>
 801a9e8:	2321      	movs	r3, #33	; 0x21
 801a9ea:	6003      	str	r3, [r0, #0]
 801a9ec:	e004      	b.n	801a9f8 <asin+0x80>
 801a9ee:	4668      	mov	r0, sp
 801a9f0:	f002 fcf6 	bl	801d3e0 <matherr>
 801a9f4:	2800      	cmp	r0, #0
 801a9f6:	d0f5      	beq.n	801a9e4 <asin+0x6c>
 801a9f8:	9b08      	ldr	r3, [sp, #32]
 801a9fa:	b11b      	cbz	r3, 801aa04 <asin+0x8c>
 801a9fc:	f7fc f958 	bl	8016cb0 <__errno>
 801aa00:	9b08      	ldr	r3, [sp, #32]
 801aa02:	6003      	str	r3, [r0, #0]
 801aa04:	ed9d 8b06 	vldr	d8, [sp, #24]
 801aa08:	eeb0 0a48 	vmov.f32	s0, s16
 801aa0c:	eef0 0a68 	vmov.f32	s1, s17
 801aa10:	b00b      	add	sp, #44	; 0x2c
 801aa12:	ecbd 8b02 	vpop	{d8}
 801aa16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa18:	20000368 	.word	0x20000368
 801aa1c:	3ff00000 	.word	0x3ff00000
 801aa20:	0801e261 	.word	0x0801e261
 801aa24:	0801e36e 	.word	0x0801e36e

0801aa28 <atan2>:
 801aa28:	f000 bc36 	b.w	801b298 <__ieee754_atan2>

0801aa2c <fmod>:
 801aa2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa30:	ed2d 8b02 	vpush	{d8}
 801aa34:	b08b      	sub	sp, #44	; 0x2c
 801aa36:	ec55 4b10 	vmov	r4, r5, d0
 801aa3a:	ec57 6b11 	vmov	r6, r7, d1
 801aa3e:	f000 fd09 	bl	801b454 <__ieee754_fmod>
 801aa42:	4b2a      	ldr	r3, [pc, #168]	; (801aaec <fmod+0xc0>)
 801aa44:	eeb0 8a40 	vmov.f32	s16, s0
 801aa48:	eef0 8a60 	vmov.f32	s17, s1
 801aa4c:	f993 8000 	ldrsb.w	r8, [r3]
 801aa50:	f1b8 3fff 	cmp.w	r8, #4294967295
 801aa54:	d030      	beq.n	801aab8 <fmod+0x8c>
 801aa56:	4632      	mov	r2, r6
 801aa58:	463b      	mov	r3, r7
 801aa5a:	4630      	mov	r0, r6
 801aa5c:	4639      	mov	r1, r7
 801aa5e:	f7e6 f875 	bl	8000b4c <__aeabi_dcmpun>
 801aa62:	bb48      	cbnz	r0, 801aab8 <fmod+0x8c>
 801aa64:	4622      	mov	r2, r4
 801aa66:	462b      	mov	r3, r5
 801aa68:	4620      	mov	r0, r4
 801aa6a:	4629      	mov	r1, r5
 801aa6c:	f7e6 f86e 	bl	8000b4c <__aeabi_dcmpun>
 801aa70:	4681      	mov	r9, r0
 801aa72:	bb08      	cbnz	r0, 801aab8 <fmod+0x8c>
 801aa74:	2200      	movs	r2, #0
 801aa76:	2300      	movs	r3, #0
 801aa78:	4630      	mov	r0, r6
 801aa7a:	4639      	mov	r1, r7
 801aa7c:	f7e6 f834 	bl	8000ae8 <__aeabi_dcmpeq>
 801aa80:	b1d0      	cbz	r0, 801aab8 <fmod+0x8c>
 801aa82:	2301      	movs	r3, #1
 801aa84:	9300      	str	r3, [sp, #0]
 801aa86:	4b1a      	ldr	r3, [pc, #104]	; (801aaf0 <fmod+0xc4>)
 801aa88:	9301      	str	r3, [sp, #4]
 801aa8a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801aa8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801aa92:	f8cd 9020 	str.w	r9, [sp, #32]
 801aa96:	f1b8 0f00 	cmp.w	r8, #0
 801aa9a:	d116      	bne.n	801aaca <fmod+0x9e>
 801aa9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801aaa0:	4668      	mov	r0, sp
 801aaa2:	f002 fc9d 	bl	801d3e0 <matherr>
 801aaa6:	b1d8      	cbz	r0, 801aae0 <fmod+0xb4>
 801aaa8:	9b08      	ldr	r3, [sp, #32]
 801aaaa:	b11b      	cbz	r3, 801aab4 <fmod+0x88>
 801aaac:	f7fc f900 	bl	8016cb0 <__errno>
 801aab0:	9b08      	ldr	r3, [sp, #32]
 801aab2:	6003      	str	r3, [r0, #0]
 801aab4:	ed9d 8b06 	vldr	d8, [sp, #24]
 801aab8:	eeb0 0a48 	vmov.f32	s0, s16
 801aabc:	eef0 0a68 	vmov.f32	s1, s17
 801aac0:	b00b      	add	sp, #44	; 0x2c
 801aac2:	ecbd 8b02 	vpop	{d8}
 801aac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aaca:	2200      	movs	r2, #0
 801aacc:	2300      	movs	r3, #0
 801aace:	4610      	mov	r0, r2
 801aad0:	4619      	mov	r1, r3
 801aad2:	f7e5 fecb 	bl	800086c <__aeabi_ddiv>
 801aad6:	f1b8 0f02 	cmp.w	r8, #2
 801aada:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801aade:	d1df      	bne.n	801aaa0 <fmod+0x74>
 801aae0:	f7fc f8e6 	bl	8016cb0 <__errno>
 801aae4:	2321      	movs	r3, #33	; 0x21
 801aae6:	6003      	str	r3, [r0, #0]
 801aae8:	e7de      	b.n	801aaa8 <fmod+0x7c>
 801aaea:	bf00      	nop
 801aaec:	20000368 	.word	0x20000368
 801aaf0:	0801e373 	.word	0x0801e373

0801aaf4 <pow>:
 801aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaf8:	ed2d 8b04 	vpush	{d8-d9}
 801aafc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801add0 <pow+0x2dc>
 801ab00:	b08d      	sub	sp, #52	; 0x34
 801ab02:	ec57 6b10 	vmov	r6, r7, d0
 801ab06:	ec55 4b11 	vmov	r4, r5, d1
 801ab0a:	f000 fdb5 	bl	801b678 <__ieee754_pow>
 801ab0e:	f999 3000 	ldrsb.w	r3, [r9]
 801ab12:	9300      	str	r3, [sp, #0]
 801ab14:	3301      	adds	r3, #1
 801ab16:	eeb0 8a40 	vmov.f32	s16, s0
 801ab1a:	eef0 8a60 	vmov.f32	s17, s1
 801ab1e:	46c8      	mov	r8, r9
 801ab20:	d05f      	beq.n	801abe2 <pow+0xee>
 801ab22:	4622      	mov	r2, r4
 801ab24:	462b      	mov	r3, r5
 801ab26:	4620      	mov	r0, r4
 801ab28:	4629      	mov	r1, r5
 801ab2a:	f7e6 f80f 	bl	8000b4c <__aeabi_dcmpun>
 801ab2e:	4683      	mov	fp, r0
 801ab30:	2800      	cmp	r0, #0
 801ab32:	d156      	bne.n	801abe2 <pow+0xee>
 801ab34:	4632      	mov	r2, r6
 801ab36:	463b      	mov	r3, r7
 801ab38:	4630      	mov	r0, r6
 801ab3a:	4639      	mov	r1, r7
 801ab3c:	f7e6 f806 	bl	8000b4c <__aeabi_dcmpun>
 801ab40:	9001      	str	r0, [sp, #4]
 801ab42:	b1e8      	cbz	r0, 801ab80 <pow+0x8c>
 801ab44:	2200      	movs	r2, #0
 801ab46:	2300      	movs	r3, #0
 801ab48:	4620      	mov	r0, r4
 801ab4a:	4629      	mov	r1, r5
 801ab4c:	f7e5 ffcc 	bl	8000ae8 <__aeabi_dcmpeq>
 801ab50:	2800      	cmp	r0, #0
 801ab52:	d046      	beq.n	801abe2 <pow+0xee>
 801ab54:	2301      	movs	r3, #1
 801ab56:	9302      	str	r3, [sp, #8]
 801ab58:	4b96      	ldr	r3, [pc, #600]	; (801adb4 <pow+0x2c0>)
 801ab5a:	9303      	str	r3, [sp, #12]
 801ab5c:	4b96      	ldr	r3, [pc, #600]	; (801adb8 <pow+0x2c4>)
 801ab5e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801ab62:	2200      	movs	r2, #0
 801ab64:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ab68:	9b00      	ldr	r3, [sp, #0]
 801ab6a:	2b02      	cmp	r3, #2
 801ab6c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ab70:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ab74:	d033      	beq.n	801abde <pow+0xea>
 801ab76:	a802      	add	r0, sp, #8
 801ab78:	f002 fc32 	bl	801d3e0 <matherr>
 801ab7c:	bb48      	cbnz	r0, 801abd2 <pow+0xde>
 801ab7e:	e05d      	b.n	801ac3c <pow+0x148>
 801ab80:	f04f 0a00 	mov.w	sl, #0
 801ab84:	f04f 0b00 	mov.w	fp, #0
 801ab88:	4652      	mov	r2, sl
 801ab8a:	465b      	mov	r3, fp
 801ab8c:	4630      	mov	r0, r6
 801ab8e:	4639      	mov	r1, r7
 801ab90:	f7e5 ffaa 	bl	8000ae8 <__aeabi_dcmpeq>
 801ab94:	ec4b ab19 	vmov	d9, sl, fp
 801ab98:	2800      	cmp	r0, #0
 801ab9a:	d054      	beq.n	801ac46 <pow+0x152>
 801ab9c:	4652      	mov	r2, sl
 801ab9e:	465b      	mov	r3, fp
 801aba0:	4620      	mov	r0, r4
 801aba2:	4629      	mov	r1, r5
 801aba4:	f7e5 ffa0 	bl	8000ae8 <__aeabi_dcmpeq>
 801aba8:	4680      	mov	r8, r0
 801abaa:	b318      	cbz	r0, 801abf4 <pow+0x100>
 801abac:	2301      	movs	r3, #1
 801abae:	9302      	str	r3, [sp, #8]
 801abb0:	4b80      	ldr	r3, [pc, #512]	; (801adb4 <pow+0x2c0>)
 801abb2:	9303      	str	r3, [sp, #12]
 801abb4:	9b01      	ldr	r3, [sp, #4]
 801abb6:	930a      	str	r3, [sp, #40]	; 0x28
 801abb8:	9b00      	ldr	r3, [sp, #0]
 801abba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801abbe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801abc2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d0d5      	beq.n	801ab76 <pow+0x82>
 801abca:	4b7b      	ldr	r3, [pc, #492]	; (801adb8 <pow+0x2c4>)
 801abcc:	2200      	movs	r2, #0
 801abce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801abd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abd4:	b11b      	cbz	r3, 801abde <pow+0xea>
 801abd6:	f7fc f86b 	bl	8016cb0 <__errno>
 801abda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abdc:	6003      	str	r3, [r0, #0]
 801abde:	ed9d 8b08 	vldr	d8, [sp, #32]
 801abe2:	eeb0 0a48 	vmov.f32	s0, s16
 801abe6:	eef0 0a68 	vmov.f32	s1, s17
 801abea:	b00d      	add	sp, #52	; 0x34
 801abec:	ecbd 8b04 	vpop	{d8-d9}
 801abf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abf4:	ec45 4b10 	vmov	d0, r4, r5
 801abf8:	f002 fb63 	bl	801d2c2 <finite>
 801abfc:	2800      	cmp	r0, #0
 801abfe:	d0f0      	beq.n	801abe2 <pow+0xee>
 801ac00:	4652      	mov	r2, sl
 801ac02:	465b      	mov	r3, fp
 801ac04:	4620      	mov	r0, r4
 801ac06:	4629      	mov	r1, r5
 801ac08:	f7e5 ff78 	bl	8000afc <__aeabi_dcmplt>
 801ac0c:	2800      	cmp	r0, #0
 801ac0e:	d0e8      	beq.n	801abe2 <pow+0xee>
 801ac10:	2301      	movs	r3, #1
 801ac12:	9302      	str	r3, [sp, #8]
 801ac14:	4b67      	ldr	r3, [pc, #412]	; (801adb4 <pow+0x2c0>)
 801ac16:	9303      	str	r3, [sp, #12]
 801ac18:	f999 3000 	ldrsb.w	r3, [r9]
 801ac1c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801ac20:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ac24:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ac28:	b913      	cbnz	r3, 801ac30 <pow+0x13c>
 801ac2a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801ac2e:	e7a2      	b.n	801ab76 <pow+0x82>
 801ac30:	4962      	ldr	r1, [pc, #392]	; (801adbc <pow+0x2c8>)
 801ac32:	2000      	movs	r0, #0
 801ac34:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ac38:	2b02      	cmp	r3, #2
 801ac3a:	d19c      	bne.n	801ab76 <pow+0x82>
 801ac3c:	f7fc f838 	bl	8016cb0 <__errno>
 801ac40:	2321      	movs	r3, #33	; 0x21
 801ac42:	6003      	str	r3, [r0, #0]
 801ac44:	e7c5      	b.n	801abd2 <pow+0xde>
 801ac46:	eeb0 0a48 	vmov.f32	s0, s16
 801ac4a:	eef0 0a68 	vmov.f32	s1, s17
 801ac4e:	f002 fb38 	bl	801d2c2 <finite>
 801ac52:	9000      	str	r0, [sp, #0]
 801ac54:	2800      	cmp	r0, #0
 801ac56:	f040 8081 	bne.w	801ad5c <pow+0x268>
 801ac5a:	ec47 6b10 	vmov	d0, r6, r7
 801ac5e:	f002 fb30 	bl	801d2c2 <finite>
 801ac62:	2800      	cmp	r0, #0
 801ac64:	d07a      	beq.n	801ad5c <pow+0x268>
 801ac66:	ec45 4b10 	vmov	d0, r4, r5
 801ac6a:	f002 fb2a 	bl	801d2c2 <finite>
 801ac6e:	2800      	cmp	r0, #0
 801ac70:	d074      	beq.n	801ad5c <pow+0x268>
 801ac72:	ec53 2b18 	vmov	r2, r3, d8
 801ac76:	ee18 0a10 	vmov	r0, s16
 801ac7a:	4619      	mov	r1, r3
 801ac7c:	f7e5 ff66 	bl	8000b4c <__aeabi_dcmpun>
 801ac80:	f999 9000 	ldrsb.w	r9, [r9]
 801ac84:	4b4b      	ldr	r3, [pc, #300]	; (801adb4 <pow+0x2c0>)
 801ac86:	b1b0      	cbz	r0, 801acb6 <pow+0x1c2>
 801ac88:	2201      	movs	r2, #1
 801ac8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ac8e:	9b00      	ldr	r3, [sp, #0]
 801ac90:	930a      	str	r3, [sp, #40]	; 0x28
 801ac92:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ac96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ac9a:	f1b9 0f00 	cmp.w	r9, #0
 801ac9e:	d0c4      	beq.n	801ac2a <pow+0x136>
 801aca0:	4652      	mov	r2, sl
 801aca2:	465b      	mov	r3, fp
 801aca4:	4650      	mov	r0, sl
 801aca6:	4659      	mov	r1, fp
 801aca8:	f7e5 fde0 	bl	800086c <__aeabi_ddiv>
 801acac:	f1b9 0f02 	cmp.w	r9, #2
 801acb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801acb4:	e7c1      	b.n	801ac3a <pow+0x146>
 801acb6:	2203      	movs	r2, #3
 801acb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801acbc:	900a      	str	r0, [sp, #40]	; 0x28
 801acbe:	4629      	mov	r1, r5
 801acc0:	4620      	mov	r0, r4
 801acc2:	2200      	movs	r2, #0
 801acc4:	4b3e      	ldr	r3, [pc, #248]	; (801adc0 <pow+0x2cc>)
 801acc6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801acca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801acce:	f7e5 fca3 	bl	8000618 <__aeabi_dmul>
 801acd2:	4604      	mov	r4, r0
 801acd4:	460d      	mov	r5, r1
 801acd6:	f1b9 0f00 	cmp.w	r9, #0
 801acda:	d124      	bne.n	801ad26 <pow+0x232>
 801acdc:	4b39      	ldr	r3, [pc, #228]	; (801adc4 <pow+0x2d0>)
 801acde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801ace2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ace6:	4630      	mov	r0, r6
 801ace8:	4652      	mov	r2, sl
 801acea:	465b      	mov	r3, fp
 801acec:	4639      	mov	r1, r7
 801acee:	f7e5 ff05 	bl	8000afc <__aeabi_dcmplt>
 801acf2:	2800      	cmp	r0, #0
 801acf4:	d056      	beq.n	801ada4 <pow+0x2b0>
 801acf6:	ec45 4b10 	vmov	d0, r4, r5
 801acfa:	f002 fb7d 	bl	801d3f8 <rint>
 801acfe:	4622      	mov	r2, r4
 801ad00:	462b      	mov	r3, r5
 801ad02:	ec51 0b10 	vmov	r0, r1, d0
 801ad06:	f7e5 feef 	bl	8000ae8 <__aeabi_dcmpeq>
 801ad0a:	b920      	cbnz	r0, 801ad16 <pow+0x222>
 801ad0c:	4b2e      	ldr	r3, [pc, #184]	; (801adc8 <pow+0x2d4>)
 801ad0e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801ad12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ad16:	f998 3000 	ldrsb.w	r3, [r8]
 801ad1a:	2b02      	cmp	r3, #2
 801ad1c:	d142      	bne.n	801ada4 <pow+0x2b0>
 801ad1e:	f7fb ffc7 	bl	8016cb0 <__errno>
 801ad22:	2322      	movs	r3, #34	; 0x22
 801ad24:	e78d      	b.n	801ac42 <pow+0x14e>
 801ad26:	4b29      	ldr	r3, [pc, #164]	; (801adcc <pow+0x2d8>)
 801ad28:	2200      	movs	r2, #0
 801ad2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ad2e:	4630      	mov	r0, r6
 801ad30:	4652      	mov	r2, sl
 801ad32:	465b      	mov	r3, fp
 801ad34:	4639      	mov	r1, r7
 801ad36:	f7e5 fee1 	bl	8000afc <__aeabi_dcmplt>
 801ad3a:	2800      	cmp	r0, #0
 801ad3c:	d0eb      	beq.n	801ad16 <pow+0x222>
 801ad3e:	ec45 4b10 	vmov	d0, r4, r5
 801ad42:	f002 fb59 	bl	801d3f8 <rint>
 801ad46:	4622      	mov	r2, r4
 801ad48:	462b      	mov	r3, r5
 801ad4a:	ec51 0b10 	vmov	r0, r1, d0
 801ad4e:	f7e5 fecb 	bl	8000ae8 <__aeabi_dcmpeq>
 801ad52:	2800      	cmp	r0, #0
 801ad54:	d1df      	bne.n	801ad16 <pow+0x222>
 801ad56:	2200      	movs	r2, #0
 801ad58:	4b18      	ldr	r3, [pc, #96]	; (801adbc <pow+0x2c8>)
 801ad5a:	e7da      	b.n	801ad12 <pow+0x21e>
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	2300      	movs	r3, #0
 801ad60:	ec51 0b18 	vmov	r0, r1, d8
 801ad64:	f7e5 fec0 	bl	8000ae8 <__aeabi_dcmpeq>
 801ad68:	2800      	cmp	r0, #0
 801ad6a:	f43f af3a 	beq.w	801abe2 <pow+0xee>
 801ad6e:	ec47 6b10 	vmov	d0, r6, r7
 801ad72:	f002 faa6 	bl	801d2c2 <finite>
 801ad76:	2800      	cmp	r0, #0
 801ad78:	f43f af33 	beq.w	801abe2 <pow+0xee>
 801ad7c:	ec45 4b10 	vmov	d0, r4, r5
 801ad80:	f002 fa9f 	bl	801d2c2 <finite>
 801ad84:	2800      	cmp	r0, #0
 801ad86:	f43f af2c 	beq.w	801abe2 <pow+0xee>
 801ad8a:	2304      	movs	r3, #4
 801ad8c:	9302      	str	r3, [sp, #8]
 801ad8e:	4b09      	ldr	r3, [pc, #36]	; (801adb4 <pow+0x2c0>)
 801ad90:	9303      	str	r3, [sp, #12]
 801ad92:	2300      	movs	r3, #0
 801ad94:	930a      	str	r3, [sp, #40]	; 0x28
 801ad96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801ad9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801ad9e:	ed8d 9b08 	vstr	d9, [sp, #32]
 801ada2:	e7b8      	b.n	801ad16 <pow+0x222>
 801ada4:	a802      	add	r0, sp, #8
 801ada6:	f002 fb1b 	bl	801d3e0 <matherr>
 801adaa:	2800      	cmp	r0, #0
 801adac:	f47f af11 	bne.w	801abd2 <pow+0xde>
 801adb0:	e7b5      	b.n	801ad1e <pow+0x22a>
 801adb2:	bf00      	nop
 801adb4:	0801e378 	.word	0x0801e378
 801adb8:	3ff00000 	.word	0x3ff00000
 801adbc:	fff00000 	.word	0xfff00000
 801adc0:	3fe00000 	.word	0x3fe00000
 801adc4:	47efffff 	.word	0x47efffff
 801adc8:	c7efffff 	.word	0xc7efffff
 801adcc:	7ff00000 	.word	0x7ff00000
 801add0:	20000368 	.word	0x20000368

0801add4 <sqrtf>:
 801add4:	b510      	push	{r4, lr}
 801add6:	ed2d 8b02 	vpush	{d8}
 801adda:	b08a      	sub	sp, #40	; 0x28
 801addc:	eeb0 8a40 	vmov.f32	s16, s0
 801ade0:	f001 fbfc 	bl	801c5dc <__ieee754_sqrtf>
 801ade4:	4b21      	ldr	r3, [pc, #132]	; (801ae6c <sqrtf+0x98>)
 801ade6:	f993 4000 	ldrsb.w	r4, [r3]
 801adea:	1c63      	adds	r3, r4, #1
 801adec:	d02c      	beq.n	801ae48 <sqrtf+0x74>
 801adee:	eeb4 8a48 	vcmp.f32	s16, s16
 801adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adf6:	d627      	bvs.n	801ae48 <sqrtf+0x74>
 801adf8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801adfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae00:	d522      	bpl.n	801ae48 <sqrtf+0x74>
 801ae02:	2301      	movs	r3, #1
 801ae04:	9300      	str	r3, [sp, #0]
 801ae06:	4b1a      	ldr	r3, [pc, #104]	; (801ae70 <sqrtf+0x9c>)
 801ae08:	9301      	str	r3, [sp, #4]
 801ae0a:	ee18 0a10 	vmov	r0, s16
 801ae0e:	2300      	movs	r3, #0
 801ae10:	9308      	str	r3, [sp, #32]
 801ae12:	f7e5 fba9 	bl	8000568 <__aeabi_f2d>
 801ae16:	2200      	movs	r2, #0
 801ae18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ae1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae20:	2300      	movs	r3, #0
 801ae22:	b9ac      	cbnz	r4, 801ae50 <sqrtf+0x7c>
 801ae24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ae28:	4668      	mov	r0, sp
 801ae2a:	f002 fad9 	bl	801d3e0 <matherr>
 801ae2e:	b1b8      	cbz	r0, 801ae60 <sqrtf+0x8c>
 801ae30:	9b08      	ldr	r3, [sp, #32]
 801ae32:	b11b      	cbz	r3, 801ae3c <sqrtf+0x68>
 801ae34:	f7fb ff3c 	bl	8016cb0 <__errno>
 801ae38:	9b08      	ldr	r3, [sp, #32]
 801ae3a:	6003      	str	r3, [r0, #0]
 801ae3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ae40:	f7e5 fee2 	bl	8000c08 <__aeabi_d2f>
 801ae44:	ee00 0a10 	vmov	s0, r0
 801ae48:	b00a      	add	sp, #40	; 0x28
 801ae4a:	ecbd 8b02 	vpop	{d8}
 801ae4e:	bd10      	pop	{r4, pc}
 801ae50:	4610      	mov	r0, r2
 801ae52:	4619      	mov	r1, r3
 801ae54:	f7e5 fd0a 	bl	800086c <__aeabi_ddiv>
 801ae58:	2c02      	cmp	r4, #2
 801ae5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ae5e:	d1e3      	bne.n	801ae28 <sqrtf+0x54>
 801ae60:	f7fb ff26 	bl	8016cb0 <__errno>
 801ae64:	2321      	movs	r3, #33	; 0x21
 801ae66:	6003      	str	r3, [r0, #0]
 801ae68:	e7e2      	b.n	801ae30 <sqrtf+0x5c>
 801ae6a:	bf00      	nop
 801ae6c:	20000368 	.word	0x20000368
 801ae70:	0801e37c 	.word	0x0801e37c
 801ae74:	00000000 	.word	0x00000000

0801ae78 <__ieee754_asin>:
 801ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae7c:	ec55 4b10 	vmov	r4, r5, d0
 801ae80:	4bcb      	ldr	r3, [pc, #812]	; (801b1b0 <__ieee754_asin+0x338>)
 801ae82:	b087      	sub	sp, #28
 801ae84:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801ae88:	429f      	cmp	r7, r3
 801ae8a:	9501      	str	r5, [sp, #4]
 801ae8c:	dd31      	ble.n	801aef2 <__ieee754_asin+0x7a>
 801ae8e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801ae92:	ee10 3a10 	vmov	r3, s0
 801ae96:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801ae9a:	433b      	orrs	r3, r7
 801ae9c:	d117      	bne.n	801aece <__ieee754_asin+0x56>
 801ae9e:	a3aa      	add	r3, pc, #680	; (adr r3, 801b148 <__ieee754_asin+0x2d0>)
 801aea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aea4:	ee10 0a10 	vmov	r0, s0
 801aea8:	4629      	mov	r1, r5
 801aeaa:	f7e5 fbb5 	bl	8000618 <__aeabi_dmul>
 801aeae:	a3a8      	add	r3, pc, #672	; (adr r3, 801b150 <__ieee754_asin+0x2d8>)
 801aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeb4:	4606      	mov	r6, r0
 801aeb6:	460f      	mov	r7, r1
 801aeb8:	4620      	mov	r0, r4
 801aeba:	4629      	mov	r1, r5
 801aebc:	f7e5 fbac 	bl	8000618 <__aeabi_dmul>
 801aec0:	4602      	mov	r2, r0
 801aec2:	460b      	mov	r3, r1
 801aec4:	4630      	mov	r0, r6
 801aec6:	4639      	mov	r1, r7
 801aec8:	f7e5 f9f0 	bl	80002ac <__adddf3>
 801aecc:	e00a      	b.n	801aee4 <__ieee754_asin+0x6c>
 801aece:	ee10 2a10 	vmov	r2, s0
 801aed2:	462b      	mov	r3, r5
 801aed4:	4620      	mov	r0, r4
 801aed6:	4629      	mov	r1, r5
 801aed8:	f7e5 f9e6 	bl	80002a8 <__aeabi_dsub>
 801aedc:	4602      	mov	r2, r0
 801aede:	460b      	mov	r3, r1
 801aee0:	f7e5 fcc4 	bl	800086c <__aeabi_ddiv>
 801aee4:	4604      	mov	r4, r0
 801aee6:	460d      	mov	r5, r1
 801aee8:	ec45 4b10 	vmov	d0, r4, r5
 801aeec:	b007      	add	sp, #28
 801aeee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aef2:	4bb0      	ldr	r3, [pc, #704]	; (801b1b4 <__ieee754_asin+0x33c>)
 801aef4:	429f      	cmp	r7, r3
 801aef6:	dc11      	bgt.n	801af1c <__ieee754_asin+0xa4>
 801aef8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801aefc:	f280 80ae 	bge.w	801b05c <__ieee754_asin+0x1e4>
 801af00:	a395      	add	r3, pc, #596	; (adr r3, 801b158 <__ieee754_asin+0x2e0>)
 801af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af06:	ee10 0a10 	vmov	r0, s0
 801af0a:	4629      	mov	r1, r5
 801af0c:	f7e5 f9ce 	bl	80002ac <__adddf3>
 801af10:	2200      	movs	r2, #0
 801af12:	4ba9      	ldr	r3, [pc, #676]	; (801b1b8 <__ieee754_asin+0x340>)
 801af14:	f7e5 fe10 	bl	8000b38 <__aeabi_dcmpgt>
 801af18:	2800      	cmp	r0, #0
 801af1a:	d1e5      	bne.n	801aee8 <__ieee754_asin+0x70>
 801af1c:	ec45 4b10 	vmov	d0, r4, r5
 801af20:	f002 f9c6 	bl	801d2b0 <fabs>
 801af24:	2000      	movs	r0, #0
 801af26:	ec53 2b10 	vmov	r2, r3, d0
 801af2a:	49a3      	ldr	r1, [pc, #652]	; (801b1b8 <__ieee754_asin+0x340>)
 801af2c:	f7e5 f9bc 	bl	80002a8 <__aeabi_dsub>
 801af30:	2200      	movs	r2, #0
 801af32:	4ba2      	ldr	r3, [pc, #648]	; (801b1bc <__ieee754_asin+0x344>)
 801af34:	f7e5 fb70 	bl	8000618 <__aeabi_dmul>
 801af38:	a389      	add	r3, pc, #548	; (adr r3, 801b160 <__ieee754_asin+0x2e8>)
 801af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af3e:	4604      	mov	r4, r0
 801af40:	460d      	mov	r5, r1
 801af42:	f7e5 fb69 	bl	8000618 <__aeabi_dmul>
 801af46:	a388      	add	r3, pc, #544	; (adr r3, 801b168 <__ieee754_asin+0x2f0>)
 801af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af4c:	f7e5 f9ae 	bl	80002ac <__adddf3>
 801af50:	4622      	mov	r2, r4
 801af52:	462b      	mov	r3, r5
 801af54:	f7e5 fb60 	bl	8000618 <__aeabi_dmul>
 801af58:	a385      	add	r3, pc, #532	; (adr r3, 801b170 <__ieee754_asin+0x2f8>)
 801af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af5e:	f7e5 f9a3 	bl	80002a8 <__aeabi_dsub>
 801af62:	4622      	mov	r2, r4
 801af64:	462b      	mov	r3, r5
 801af66:	f7e5 fb57 	bl	8000618 <__aeabi_dmul>
 801af6a:	a383      	add	r3, pc, #524	; (adr r3, 801b178 <__ieee754_asin+0x300>)
 801af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af70:	f7e5 f99c 	bl	80002ac <__adddf3>
 801af74:	4622      	mov	r2, r4
 801af76:	462b      	mov	r3, r5
 801af78:	f7e5 fb4e 	bl	8000618 <__aeabi_dmul>
 801af7c:	a380      	add	r3, pc, #512	; (adr r3, 801b180 <__ieee754_asin+0x308>)
 801af7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af82:	f7e5 f991 	bl	80002a8 <__aeabi_dsub>
 801af86:	4622      	mov	r2, r4
 801af88:	462b      	mov	r3, r5
 801af8a:	f7e5 fb45 	bl	8000618 <__aeabi_dmul>
 801af8e:	a37e      	add	r3, pc, #504	; (adr r3, 801b188 <__ieee754_asin+0x310>)
 801af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af94:	f7e5 f98a 	bl	80002ac <__adddf3>
 801af98:	4622      	mov	r2, r4
 801af9a:	462b      	mov	r3, r5
 801af9c:	f7e5 fb3c 	bl	8000618 <__aeabi_dmul>
 801afa0:	a37b      	add	r3, pc, #492	; (adr r3, 801b190 <__ieee754_asin+0x318>)
 801afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afa6:	4680      	mov	r8, r0
 801afa8:	4689      	mov	r9, r1
 801afaa:	4620      	mov	r0, r4
 801afac:	4629      	mov	r1, r5
 801afae:	f7e5 fb33 	bl	8000618 <__aeabi_dmul>
 801afb2:	a379      	add	r3, pc, #484	; (adr r3, 801b198 <__ieee754_asin+0x320>)
 801afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afb8:	f7e5 f976 	bl	80002a8 <__aeabi_dsub>
 801afbc:	4622      	mov	r2, r4
 801afbe:	462b      	mov	r3, r5
 801afc0:	f7e5 fb2a 	bl	8000618 <__aeabi_dmul>
 801afc4:	a376      	add	r3, pc, #472	; (adr r3, 801b1a0 <__ieee754_asin+0x328>)
 801afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afca:	f7e5 f96f 	bl	80002ac <__adddf3>
 801afce:	4622      	mov	r2, r4
 801afd0:	462b      	mov	r3, r5
 801afd2:	f7e5 fb21 	bl	8000618 <__aeabi_dmul>
 801afd6:	a374      	add	r3, pc, #464	; (adr r3, 801b1a8 <__ieee754_asin+0x330>)
 801afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afdc:	f7e5 f964 	bl	80002a8 <__aeabi_dsub>
 801afe0:	4622      	mov	r2, r4
 801afe2:	462b      	mov	r3, r5
 801afe4:	f7e5 fb18 	bl	8000618 <__aeabi_dmul>
 801afe8:	4b73      	ldr	r3, [pc, #460]	; (801b1b8 <__ieee754_asin+0x340>)
 801afea:	2200      	movs	r2, #0
 801afec:	f7e5 f95e 	bl	80002ac <__adddf3>
 801aff0:	ec45 4b10 	vmov	d0, r4, r5
 801aff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aff8:	f001 fa40 	bl	801c47c <__ieee754_sqrt>
 801affc:	4b70      	ldr	r3, [pc, #448]	; (801b1c0 <__ieee754_asin+0x348>)
 801affe:	429f      	cmp	r7, r3
 801b000:	ec5b ab10 	vmov	sl, fp, d0
 801b004:	f340 80de 	ble.w	801b1c4 <__ieee754_asin+0x34c>
 801b008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b00c:	4640      	mov	r0, r8
 801b00e:	4649      	mov	r1, r9
 801b010:	f7e5 fc2c 	bl	800086c <__aeabi_ddiv>
 801b014:	4652      	mov	r2, sl
 801b016:	465b      	mov	r3, fp
 801b018:	f7e5 fafe 	bl	8000618 <__aeabi_dmul>
 801b01c:	4652      	mov	r2, sl
 801b01e:	465b      	mov	r3, fp
 801b020:	f7e5 f944 	bl	80002ac <__adddf3>
 801b024:	4602      	mov	r2, r0
 801b026:	460b      	mov	r3, r1
 801b028:	f7e5 f940 	bl	80002ac <__adddf3>
 801b02c:	a348      	add	r3, pc, #288	; (adr r3, 801b150 <__ieee754_asin+0x2d8>)
 801b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b032:	f7e5 f939 	bl	80002a8 <__aeabi_dsub>
 801b036:	4602      	mov	r2, r0
 801b038:	460b      	mov	r3, r1
 801b03a:	a143      	add	r1, pc, #268	; (adr r1, 801b148 <__ieee754_asin+0x2d0>)
 801b03c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b040:	f7e5 f932 	bl	80002a8 <__aeabi_dsub>
 801b044:	9b01      	ldr	r3, [sp, #4]
 801b046:	2b00      	cmp	r3, #0
 801b048:	bfdc      	itt	le
 801b04a:	4602      	movle	r2, r0
 801b04c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801b050:	4604      	mov	r4, r0
 801b052:	460d      	mov	r5, r1
 801b054:	bfdc      	itt	le
 801b056:	4614      	movle	r4, r2
 801b058:	461d      	movle	r5, r3
 801b05a:	e745      	b.n	801aee8 <__ieee754_asin+0x70>
 801b05c:	ee10 2a10 	vmov	r2, s0
 801b060:	ee10 0a10 	vmov	r0, s0
 801b064:	462b      	mov	r3, r5
 801b066:	4629      	mov	r1, r5
 801b068:	f7e5 fad6 	bl	8000618 <__aeabi_dmul>
 801b06c:	a33c      	add	r3, pc, #240	; (adr r3, 801b160 <__ieee754_asin+0x2e8>)
 801b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b072:	4606      	mov	r6, r0
 801b074:	460f      	mov	r7, r1
 801b076:	f7e5 facf 	bl	8000618 <__aeabi_dmul>
 801b07a:	a33b      	add	r3, pc, #236	; (adr r3, 801b168 <__ieee754_asin+0x2f0>)
 801b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b080:	f7e5 f914 	bl	80002ac <__adddf3>
 801b084:	4632      	mov	r2, r6
 801b086:	463b      	mov	r3, r7
 801b088:	f7e5 fac6 	bl	8000618 <__aeabi_dmul>
 801b08c:	a338      	add	r3, pc, #224	; (adr r3, 801b170 <__ieee754_asin+0x2f8>)
 801b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b092:	f7e5 f909 	bl	80002a8 <__aeabi_dsub>
 801b096:	4632      	mov	r2, r6
 801b098:	463b      	mov	r3, r7
 801b09a:	f7e5 fabd 	bl	8000618 <__aeabi_dmul>
 801b09e:	a336      	add	r3, pc, #216	; (adr r3, 801b178 <__ieee754_asin+0x300>)
 801b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0a4:	f7e5 f902 	bl	80002ac <__adddf3>
 801b0a8:	4632      	mov	r2, r6
 801b0aa:	463b      	mov	r3, r7
 801b0ac:	f7e5 fab4 	bl	8000618 <__aeabi_dmul>
 801b0b0:	a333      	add	r3, pc, #204	; (adr r3, 801b180 <__ieee754_asin+0x308>)
 801b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0b6:	f7e5 f8f7 	bl	80002a8 <__aeabi_dsub>
 801b0ba:	4632      	mov	r2, r6
 801b0bc:	463b      	mov	r3, r7
 801b0be:	f7e5 faab 	bl	8000618 <__aeabi_dmul>
 801b0c2:	a331      	add	r3, pc, #196	; (adr r3, 801b188 <__ieee754_asin+0x310>)
 801b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0c8:	f7e5 f8f0 	bl	80002ac <__adddf3>
 801b0cc:	4632      	mov	r2, r6
 801b0ce:	463b      	mov	r3, r7
 801b0d0:	f7e5 faa2 	bl	8000618 <__aeabi_dmul>
 801b0d4:	a32e      	add	r3, pc, #184	; (adr r3, 801b190 <__ieee754_asin+0x318>)
 801b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0da:	4680      	mov	r8, r0
 801b0dc:	4689      	mov	r9, r1
 801b0de:	4630      	mov	r0, r6
 801b0e0:	4639      	mov	r1, r7
 801b0e2:	f7e5 fa99 	bl	8000618 <__aeabi_dmul>
 801b0e6:	a32c      	add	r3, pc, #176	; (adr r3, 801b198 <__ieee754_asin+0x320>)
 801b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0ec:	f7e5 f8dc 	bl	80002a8 <__aeabi_dsub>
 801b0f0:	4632      	mov	r2, r6
 801b0f2:	463b      	mov	r3, r7
 801b0f4:	f7e5 fa90 	bl	8000618 <__aeabi_dmul>
 801b0f8:	a329      	add	r3, pc, #164	; (adr r3, 801b1a0 <__ieee754_asin+0x328>)
 801b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0fe:	f7e5 f8d5 	bl	80002ac <__adddf3>
 801b102:	4632      	mov	r2, r6
 801b104:	463b      	mov	r3, r7
 801b106:	f7e5 fa87 	bl	8000618 <__aeabi_dmul>
 801b10a:	a327      	add	r3, pc, #156	; (adr r3, 801b1a8 <__ieee754_asin+0x330>)
 801b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b110:	f7e5 f8ca 	bl	80002a8 <__aeabi_dsub>
 801b114:	4632      	mov	r2, r6
 801b116:	463b      	mov	r3, r7
 801b118:	f7e5 fa7e 	bl	8000618 <__aeabi_dmul>
 801b11c:	2200      	movs	r2, #0
 801b11e:	4b26      	ldr	r3, [pc, #152]	; (801b1b8 <__ieee754_asin+0x340>)
 801b120:	f7e5 f8c4 	bl	80002ac <__adddf3>
 801b124:	4602      	mov	r2, r0
 801b126:	460b      	mov	r3, r1
 801b128:	4640      	mov	r0, r8
 801b12a:	4649      	mov	r1, r9
 801b12c:	f7e5 fb9e 	bl	800086c <__aeabi_ddiv>
 801b130:	4622      	mov	r2, r4
 801b132:	462b      	mov	r3, r5
 801b134:	f7e5 fa70 	bl	8000618 <__aeabi_dmul>
 801b138:	4602      	mov	r2, r0
 801b13a:	460b      	mov	r3, r1
 801b13c:	4620      	mov	r0, r4
 801b13e:	4629      	mov	r1, r5
 801b140:	e6c2      	b.n	801aec8 <__ieee754_asin+0x50>
 801b142:	bf00      	nop
 801b144:	f3af 8000 	nop.w
 801b148:	54442d18 	.word	0x54442d18
 801b14c:	3ff921fb 	.word	0x3ff921fb
 801b150:	33145c07 	.word	0x33145c07
 801b154:	3c91a626 	.word	0x3c91a626
 801b158:	8800759c 	.word	0x8800759c
 801b15c:	7e37e43c 	.word	0x7e37e43c
 801b160:	0dfdf709 	.word	0x0dfdf709
 801b164:	3f023de1 	.word	0x3f023de1
 801b168:	7501b288 	.word	0x7501b288
 801b16c:	3f49efe0 	.word	0x3f49efe0
 801b170:	b5688f3b 	.word	0xb5688f3b
 801b174:	3fa48228 	.word	0x3fa48228
 801b178:	0e884455 	.word	0x0e884455
 801b17c:	3fc9c155 	.word	0x3fc9c155
 801b180:	03eb6f7d 	.word	0x03eb6f7d
 801b184:	3fd4d612 	.word	0x3fd4d612
 801b188:	55555555 	.word	0x55555555
 801b18c:	3fc55555 	.word	0x3fc55555
 801b190:	b12e9282 	.word	0xb12e9282
 801b194:	3fb3b8c5 	.word	0x3fb3b8c5
 801b198:	1b8d0159 	.word	0x1b8d0159
 801b19c:	3fe6066c 	.word	0x3fe6066c
 801b1a0:	9c598ac8 	.word	0x9c598ac8
 801b1a4:	40002ae5 	.word	0x40002ae5
 801b1a8:	1c8a2d4b 	.word	0x1c8a2d4b
 801b1ac:	40033a27 	.word	0x40033a27
 801b1b0:	3fefffff 	.word	0x3fefffff
 801b1b4:	3fdfffff 	.word	0x3fdfffff
 801b1b8:	3ff00000 	.word	0x3ff00000
 801b1bc:	3fe00000 	.word	0x3fe00000
 801b1c0:	3fef3332 	.word	0x3fef3332
 801b1c4:	ee10 2a10 	vmov	r2, s0
 801b1c8:	ee10 0a10 	vmov	r0, s0
 801b1cc:	465b      	mov	r3, fp
 801b1ce:	4659      	mov	r1, fp
 801b1d0:	f7e5 f86c 	bl	80002ac <__adddf3>
 801b1d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b1d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b1dc:	4640      	mov	r0, r8
 801b1de:	4649      	mov	r1, r9
 801b1e0:	f7e5 fb44 	bl	800086c <__aeabi_ddiv>
 801b1e4:	4602      	mov	r2, r0
 801b1e6:	460b      	mov	r3, r1
 801b1e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b1ec:	f7e5 fa14 	bl	8000618 <__aeabi_dmul>
 801b1f0:	2600      	movs	r6, #0
 801b1f2:	4680      	mov	r8, r0
 801b1f4:	4689      	mov	r9, r1
 801b1f6:	4632      	mov	r2, r6
 801b1f8:	465b      	mov	r3, fp
 801b1fa:	4630      	mov	r0, r6
 801b1fc:	4659      	mov	r1, fp
 801b1fe:	f7e5 fa0b 	bl	8000618 <__aeabi_dmul>
 801b202:	4602      	mov	r2, r0
 801b204:	460b      	mov	r3, r1
 801b206:	4620      	mov	r0, r4
 801b208:	4629      	mov	r1, r5
 801b20a:	f7e5 f84d 	bl	80002a8 <__aeabi_dsub>
 801b20e:	4632      	mov	r2, r6
 801b210:	4604      	mov	r4, r0
 801b212:	460d      	mov	r5, r1
 801b214:	465b      	mov	r3, fp
 801b216:	4650      	mov	r0, sl
 801b218:	4659      	mov	r1, fp
 801b21a:	f7e5 f847 	bl	80002ac <__adddf3>
 801b21e:	4602      	mov	r2, r0
 801b220:	460b      	mov	r3, r1
 801b222:	4620      	mov	r0, r4
 801b224:	4629      	mov	r1, r5
 801b226:	f7e5 fb21 	bl	800086c <__aeabi_ddiv>
 801b22a:	4602      	mov	r2, r0
 801b22c:	460b      	mov	r3, r1
 801b22e:	f7e5 f83d 	bl	80002ac <__adddf3>
 801b232:	4602      	mov	r2, r0
 801b234:	460b      	mov	r3, r1
 801b236:	a114      	add	r1, pc, #80	; (adr r1, 801b288 <__ieee754_asin+0x410>)
 801b238:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b23c:	f7e5 f834 	bl	80002a8 <__aeabi_dsub>
 801b240:	4602      	mov	r2, r0
 801b242:	460b      	mov	r3, r1
 801b244:	4640      	mov	r0, r8
 801b246:	4649      	mov	r1, r9
 801b248:	f7e5 f82e 	bl	80002a8 <__aeabi_dsub>
 801b24c:	465f      	mov	r7, fp
 801b24e:	4604      	mov	r4, r0
 801b250:	460d      	mov	r5, r1
 801b252:	4632      	mov	r2, r6
 801b254:	465b      	mov	r3, fp
 801b256:	4630      	mov	r0, r6
 801b258:	4639      	mov	r1, r7
 801b25a:	f7e5 f827 	bl	80002ac <__adddf3>
 801b25e:	4602      	mov	r2, r0
 801b260:	460b      	mov	r3, r1
 801b262:	a10b      	add	r1, pc, #44	; (adr r1, 801b290 <__ieee754_asin+0x418>)
 801b264:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b268:	f7e5 f81e 	bl	80002a8 <__aeabi_dsub>
 801b26c:	4602      	mov	r2, r0
 801b26e:	460b      	mov	r3, r1
 801b270:	4620      	mov	r0, r4
 801b272:	4629      	mov	r1, r5
 801b274:	f7e5 f818 	bl	80002a8 <__aeabi_dsub>
 801b278:	4602      	mov	r2, r0
 801b27a:	460b      	mov	r3, r1
 801b27c:	a104      	add	r1, pc, #16	; (adr r1, 801b290 <__ieee754_asin+0x418>)
 801b27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b282:	e6dd      	b.n	801b040 <__ieee754_asin+0x1c8>
 801b284:	f3af 8000 	nop.w
 801b288:	33145c07 	.word	0x33145c07
 801b28c:	3c91a626 	.word	0x3c91a626
 801b290:	54442d18 	.word	0x54442d18
 801b294:	3fe921fb 	.word	0x3fe921fb

0801b298 <__ieee754_atan2>:
 801b298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b29c:	ec57 6b11 	vmov	r6, r7, d1
 801b2a0:	4273      	negs	r3, r6
 801b2a2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801b2a6:	4333      	orrs	r3, r6
 801b2a8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801b450 <__ieee754_atan2+0x1b8>
 801b2ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801b2b0:	4573      	cmp	r3, lr
 801b2b2:	ec51 0b10 	vmov	r0, r1, d0
 801b2b6:	ee11 8a10 	vmov	r8, s2
 801b2ba:	d80a      	bhi.n	801b2d2 <__ieee754_atan2+0x3a>
 801b2bc:	4244      	negs	r4, r0
 801b2be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b2c2:	4304      	orrs	r4, r0
 801b2c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801b2c8:	4574      	cmp	r4, lr
 801b2ca:	468c      	mov	ip, r1
 801b2cc:	ee10 9a10 	vmov	r9, s0
 801b2d0:	d907      	bls.n	801b2e2 <__ieee754_atan2+0x4a>
 801b2d2:	4632      	mov	r2, r6
 801b2d4:	463b      	mov	r3, r7
 801b2d6:	f7e4 ffe9 	bl	80002ac <__adddf3>
 801b2da:	ec41 0b10 	vmov	d0, r0, r1
 801b2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b2e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801b2e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b2ea:	4334      	orrs	r4, r6
 801b2ec:	d103      	bne.n	801b2f6 <__ieee754_atan2+0x5e>
 801b2ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2f2:	f001 be3d 	b.w	801cf70 <atan>
 801b2f6:	17bc      	asrs	r4, r7, #30
 801b2f8:	f004 0402 	and.w	r4, r4, #2
 801b2fc:	ea53 0909 	orrs.w	r9, r3, r9
 801b300:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801b304:	d107      	bne.n	801b316 <__ieee754_atan2+0x7e>
 801b306:	2c02      	cmp	r4, #2
 801b308:	d073      	beq.n	801b3f2 <__ieee754_atan2+0x15a>
 801b30a:	2c03      	cmp	r4, #3
 801b30c:	d1e5      	bne.n	801b2da <__ieee754_atan2+0x42>
 801b30e:	a13e      	add	r1, pc, #248	; (adr r1, 801b408 <__ieee754_atan2+0x170>)
 801b310:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b314:	e7e1      	b.n	801b2da <__ieee754_atan2+0x42>
 801b316:	ea52 0808 	orrs.w	r8, r2, r8
 801b31a:	d106      	bne.n	801b32a <__ieee754_atan2+0x92>
 801b31c:	f1bc 0f00 	cmp.w	ip, #0
 801b320:	da6b      	bge.n	801b3fa <__ieee754_atan2+0x162>
 801b322:	a13b      	add	r1, pc, #236	; (adr r1, 801b410 <__ieee754_atan2+0x178>)
 801b324:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b328:	e7d7      	b.n	801b2da <__ieee754_atan2+0x42>
 801b32a:	4572      	cmp	r2, lr
 801b32c:	d120      	bne.n	801b370 <__ieee754_atan2+0xd8>
 801b32e:	4293      	cmp	r3, r2
 801b330:	d111      	bne.n	801b356 <__ieee754_atan2+0xbe>
 801b332:	2c02      	cmp	r4, #2
 801b334:	d007      	beq.n	801b346 <__ieee754_atan2+0xae>
 801b336:	2c03      	cmp	r4, #3
 801b338:	d009      	beq.n	801b34e <__ieee754_atan2+0xb6>
 801b33a:	2c01      	cmp	r4, #1
 801b33c:	d155      	bne.n	801b3ea <__ieee754_atan2+0x152>
 801b33e:	a136      	add	r1, pc, #216	; (adr r1, 801b418 <__ieee754_atan2+0x180>)
 801b340:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b344:	e7c9      	b.n	801b2da <__ieee754_atan2+0x42>
 801b346:	a136      	add	r1, pc, #216	; (adr r1, 801b420 <__ieee754_atan2+0x188>)
 801b348:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b34c:	e7c5      	b.n	801b2da <__ieee754_atan2+0x42>
 801b34e:	a136      	add	r1, pc, #216	; (adr r1, 801b428 <__ieee754_atan2+0x190>)
 801b350:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b354:	e7c1      	b.n	801b2da <__ieee754_atan2+0x42>
 801b356:	2c02      	cmp	r4, #2
 801b358:	d04b      	beq.n	801b3f2 <__ieee754_atan2+0x15a>
 801b35a:	2c03      	cmp	r4, #3
 801b35c:	d0d7      	beq.n	801b30e <__ieee754_atan2+0x76>
 801b35e:	2c01      	cmp	r4, #1
 801b360:	f04f 0000 	mov.w	r0, #0
 801b364:	d102      	bne.n	801b36c <__ieee754_atan2+0xd4>
 801b366:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801b36a:	e7b6      	b.n	801b2da <__ieee754_atan2+0x42>
 801b36c:	2100      	movs	r1, #0
 801b36e:	e7b4      	b.n	801b2da <__ieee754_atan2+0x42>
 801b370:	4573      	cmp	r3, lr
 801b372:	d0d3      	beq.n	801b31c <__ieee754_atan2+0x84>
 801b374:	1a9b      	subs	r3, r3, r2
 801b376:	151b      	asrs	r3, r3, #20
 801b378:	2b3c      	cmp	r3, #60	; 0x3c
 801b37a:	dc1e      	bgt.n	801b3ba <__ieee754_atan2+0x122>
 801b37c:	2f00      	cmp	r7, #0
 801b37e:	da01      	bge.n	801b384 <__ieee754_atan2+0xec>
 801b380:	333c      	adds	r3, #60	; 0x3c
 801b382:	db1e      	blt.n	801b3c2 <__ieee754_atan2+0x12a>
 801b384:	4632      	mov	r2, r6
 801b386:	463b      	mov	r3, r7
 801b388:	f7e5 fa70 	bl	800086c <__aeabi_ddiv>
 801b38c:	ec41 0b10 	vmov	d0, r0, r1
 801b390:	f001 ff8e 	bl	801d2b0 <fabs>
 801b394:	f001 fdec 	bl	801cf70 <atan>
 801b398:	ec51 0b10 	vmov	r0, r1, d0
 801b39c:	2c01      	cmp	r4, #1
 801b39e:	d013      	beq.n	801b3c8 <__ieee754_atan2+0x130>
 801b3a0:	2c02      	cmp	r4, #2
 801b3a2:	d015      	beq.n	801b3d0 <__ieee754_atan2+0x138>
 801b3a4:	2c00      	cmp	r4, #0
 801b3a6:	d098      	beq.n	801b2da <__ieee754_atan2+0x42>
 801b3a8:	a321      	add	r3, pc, #132	; (adr r3, 801b430 <__ieee754_atan2+0x198>)
 801b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ae:	f7e4 ff7b 	bl	80002a8 <__aeabi_dsub>
 801b3b2:	a321      	add	r3, pc, #132	; (adr r3, 801b438 <__ieee754_atan2+0x1a0>)
 801b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3b8:	e014      	b.n	801b3e4 <__ieee754_atan2+0x14c>
 801b3ba:	a121      	add	r1, pc, #132	; (adr r1, 801b440 <__ieee754_atan2+0x1a8>)
 801b3bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b3c0:	e7ec      	b.n	801b39c <__ieee754_atan2+0x104>
 801b3c2:	2000      	movs	r0, #0
 801b3c4:	2100      	movs	r1, #0
 801b3c6:	e7e9      	b.n	801b39c <__ieee754_atan2+0x104>
 801b3c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b3cc:	4619      	mov	r1, r3
 801b3ce:	e784      	b.n	801b2da <__ieee754_atan2+0x42>
 801b3d0:	a317      	add	r3, pc, #92	; (adr r3, 801b430 <__ieee754_atan2+0x198>)
 801b3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3d6:	f7e4 ff67 	bl	80002a8 <__aeabi_dsub>
 801b3da:	4602      	mov	r2, r0
 801b3dc:	460b      	mov	r3, r1
 801b3de:	a116      	add	r1, pc, #88	; (adr r1, 801b438 <__ieee754_atan2+0x1a0>)
 801b3e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b3e4:	f7e4 ff60 	bl	80002a8 <__aeabi_dsub>
 801b3e8:	e777      	b.n	801b2da <__ieee754_atan2+0x42>
 801b3ea:	a117      	add	r1, pc, #92	; (adr r1, 801b448 <__ieee754_atan2+0x1b0>)
 801b3ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b3f0:	e773      	b.n	801b2da <__ieee754_atan2+0x42>
 801b3f2:	a111      	add	r1, pc, #68	; (adr r1, 801b438 <__ieee754_atan2+0x1a0>)
 801b3f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b3f8:	e76f      	b.n	801b2da <__ieee754_atan2+0x42>
 801b3fa:	a111      	add	r1, pc, #68	; (adr r1, 801b440 <__ieee754_atan2+0x1a8>)
 801b3fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b400:	e76b      	b.n	801b2da <__ieee754_atan2+0x42>
 801b402:	bf00      	nop
 801b404:	f3af 8000 	nop.w
 801b408:	54442d18 	.word	0x54442d18
 801b40c:	c00921fb 	.word	0xc00921fb
 801b410:	54442d18 	.word	0x54442d18
 801b414:	bff921fb 	.word	0xbff921fb
 801b418:	54442d18 	.word	0x54442d18
 801b41c:	bfe921fb 	.word	0xbfe921fb
 801b420:	7f3321d2 	.word	0x7f3321d2
 801b424:	4002d97c 	.word	0x4002d97c
 801b428:	7f3321d2 	.word	0x7f3321d2
 801b42c:	c002d97c 	.word	0xc002d97c
 801b430:	33145c07 	.word	0x33145c07
 801b434:	3ca1a626 	.word	0x3ca1a626
 801b438:	54442d18 	.word	0x54442d18
 801b43c:	400921fb 	.word	0x400921fb
 801b440:	54442d18 	.word	0x54442d18
 801b444:	3ff921fb 	.word	0x3ff921fb
 801b448:	54442d18 	.word	0x54442d18
 801b44c:	3fe921fb 	.word	0x3fe921fb
 801b450:	7ff00000 	.word	0x7ff00000

0801b454 <__ieee754_fmod>:
 801b454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b458:	ec53 2b11 	vmov	r2, r3, d1
 801b45c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 801b460:	ea5e 0402 	orrs.w	r4, lr, r2
 801b464:	ec51 0b10 	vmov	r0, r1, d0
 801b468:	461e      	mov	r6, r3
 801b46a:	ee11 5a10 	vmov	r5, s2
 801b46e:	4694      	mov	ip, r2
 801b470:	d00c      	beq.n	801b48c <__ieee754_fmod+0x38>
 801b472:	4c7a      	ldr	r4, [pc, #488]	; (801b65c <__ieee754_fmod+0x208>)
 801b474:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801b478:	45a0      	cmp	r8, r4
 801b47a:	4689      	mov	r9, r1
 801b47c:	dc06      	bgt.n	801b48c <__ieee754_fmod+0x38>
 801b47e:	4254      	negs	r4, r2
 801b480:	4314      	orrs	r4, r2
 801b482:	4f77      	ldr	r7, [pc, #476]	; (801b660 <__ieee754_fmod+0x20c>)
 801b484:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 801b488:	42bc      	cmp	r4, r7
 801b48a:	d909      	bls.n	801b4a0 <__ieee754_fmod+0x4c>
 801b48c:	f7e5 f8c4 	bl	8000618 <__aeabi_dmul>
 801b490:	4602      	mov	r2, r0
 801b492:	460b      	mov	r3, r1
 801b494:	f7e5 f9ea 	bl	800086c <__aeabi_ddiv>
 801b498:	ec41 0b10 	vmov	d0, r0, r1
 801b49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4a0:	45f0      	cmp	r8, lr
 801b4a2:	ee10 2a10 	vmov	r2, s0
 801b4a6:	4607      	mov	r7, r0
 801b4a8:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 801b4ac:	dc0a      	bgt.n	801b4c4 <__ieee754_fmod+0x70>
 801b4ae:	dbf3      	blt.n	801b498 <__ieee754_fmod+0x44>
 801b4b0:	42a8      	cmp	r0, r5
 801b4b2:	d3f1      	bcc.n	801b498 <__ieee754_fmod+0x44>
 801b4b4:	d106      	bne.n	801b4c4 <__ieee754_fmod+0x70>
 801b4b6:	496b      	ldr	r1, [pc, #428]	; (801b664 <__ieee754_fmod+0x210>)
 801b4b8:	0fe4      	lsrs	r4, r4, #31
 801b4ba:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801b4be:	e9d4 0100 	ldrd	r0, r1, [r4]
 801b4c2:	e7e9      	b.n	801b498 <__ieee754_fmod+0x44>
 801b4c4:	4b68      	ldr	r3, [pc, #416]	; (801b668 <__ieee754_fmod+0x214>)
 801b4c6:	4598      	cmp	r8, r3
 801b4c8:	dc49      	bgt.n	801b55e <__ieee754_fmod+0x10a>
 801b4ca:	f1b8 0f00 	cmp.w	r8, #0
 801b4ce:	d13d      	bne.n	801b54c <__ieee754_fmod+0xf8>
 801b4d0:	4866      	ldr	r0, [pc, #408]	; (801b66c <__ieee754_fmod+0x218>)
 801b4d2:	4611      	mov	r1, r2
 801b4d4:	2900      	cmp	r1, #0
 801b4d6:	dc36      	bgt.n	801b546 <__ieee754_fmod+0xf2>
 801b4d8:	459e      	cmp	lr, r3
 801b4da:	dc51      	bgt.n	801b580 <__ieee754_fmod+0x12c>
 801b4dc:	f1be 0f00 	cmp.w	lr, #0
 801b4e0:	d145      	bne.n	801b56e <__ieee754_fmod+0x11a>
 801b4e2:	4b62      	ldr	r3, [pc, #392]	; (801b66c <__ieee754_fmod+0x218>)
 801b4e4:	4629      	mov	r1, r5
 801b4e6:	2900      	cmp	r1, #0
 801b4e8:	dc3e      	bgt.n	801b568 <__ieee754_fmod+0x114>
 801b4ea:	4961      	ldr	r1, [pc, #388]	; (801b670 <__ieee754_fmod+0x21c>)
 801b4ec:	4288      	cmp	r0, r1
 801b4ee:	db4c      	blt.n	801b58a <__ieee754_fmod+0x136>
 801b4f0:	f3c9 0113 	ubfx	r1, r9, #0, #20
 801b4f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b4f8:	4a5d      	ldr	r2, [pc, #372]	; (801b670 <__ieee754_fmod+0x21c>)
 801b4fa:	4293      	cmp	r3, r2
 801b4fc:	db59      	blt.n	801b5b2 <__ieee754_fmod+0x15e>
 801b4fe:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801b502:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801b506:	1ac0      	subs	r0, r0, r3
 801b508:	1b8a      	subs	r2, r1, r6
 801b50a:	eba7 050c 	sub.w	r5, r7, ip
 801b50e:	2800      	cmp	r0, #0
 801b510:	d166      	bne.n	801b5e0 <__ieee754_fmod+0x18c>
 801b512:	4567      	cmp	r7, ip
 801b514:	bf38      	it	cc
 801b516:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801b51a:	2a00      	cmp	r2, #0
 801b51c:	bfbc      	itt	lt
 801b51e:	463d      	movlt	r5, r7
 801b520:	460a      	movlt	r2, r1
 801b522:	ea52 0105 	orrs.w	r1, r2, r5
 801b526:	d0c6      	beq.n	801b4b6 <__ieee754_fmod+0x62>
 801b528:	494f      	ldr	r1, [pc, #316]	; (801b668 <__ieee754_fmod+0x214>)
 801b52a:	428a      	cmp	r2, r1
 801b52c:	dd6d      	ble.n	801b60a <__ieee754_fmod+0x1b6>
 801b52e:	4950      	ldr	r1, [pc, #320]	; (801b670 <__ieee754_fmod+0x21c>)
 801b530:	428b      	cmp	r3, r1
 801b532:	db70      	blt.n	801b616 <__ieee754_fmod+0x1c2>
 801b534:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 801b538:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 801b53c:	4314      	orrs	r4, r2
 801b53e:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 801b542:	4628      	mov	r0, r5
 801b544:	e7a8      	b.n	801b498 <__ieee754_fmod+0x44>
 801b546:	3801      	subs	r0, #1
 801b548:	0049      	lsls	r1, r1, #1
 801b54a:	e7c3      	b.n	801b4d4 <__ieee754_fmod+0x80>
 801b54c:	4848      	ldr	r0, [pc, #288]	; (801b670 <__ieee754_fmod+0x21c>)
 801b54e:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 801b552:	0049      	lsls	r1, r1, #1
 801b554:	2900      	cmp	r1, #0
 801b556:	f100 30ff 	add.w	r0, r0, #4294967295
 801b55a:	dcfa      	bgt.n	801b552 <__ieee754_fmod+0xfe>
 801b55c:	e7bc      	b.n	801b4d8 <__ieee754_fmod+0x84>
 801b55e:	ea4f 5028 	mov.w	r0, r8, asr #20
 801b562:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801b566:	e7b7      	b.n	801b4d8 <__ieee754_fmod+0x84>
 801b568:	3b01      	subs	r3, #1
 801b56a:	0049      	lsls	r1, r1, #1
 801b56c:	e7bb      	b.n	801b4e6 <__ieee754_fmod+0x92>
 801b56e:	4b40      	ldr	r3, [pc, #256]	; (801b670 <__ieee754_fmod+0x21c>)
 801b570:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 801b574:	0049      	lsls	r1, r1, #1
 801b576:	2900      	cmp	r1, #0
 801b578:	f103 33ff 	add.w	r3, r3, #4294967295
 801b57c:	dcfa      	bgt.n	801b574 <__ieee754_fmod+0x120>
 801b57e:	e7b4      	b.n	801b4ea <__ieee754_fmod+0x96>
 801b580:	ea4f 532e 	mov.w	r3, lr, asr #20
 801b584:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b588:	e7af      	b.n	801b4ea <__ieee754_fmod+0x96>
 801b58a:	1a0f      	subs	r7, r1, r0
 801b58c:	2f1f      	cmp	r7, #31
 801b58e:	dc0a      	bgt.n	801b5a6 <__ieee754_fmod+0x152>
 801b590:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 801b594:	fa08 f807 	lsl.w	r8, r8, r7
 801b598:	fa22 f101 	lsr.w	r1, r2, r1
 801b59c:	ea41 0108 	orr.w	r1, r1, r8
 801b5a0:	fa02 f707 	lsl.w	r7, r2, r7
 801b5a4:	e7a8      	b.n	801b4f8 <__ieee754_fmod+0xa4>
 801b5a6:	4933      	ldr	r1, [pc, #204]	; (801b674 <__ieee754_fmod+0x220>)
 801b5a8:	1a09      	subs	r1, r1, r0
 801b5aa:	fa02 f101 	lsl.w	r1, r2, r1
 801b5ae:	2700      	movs	r7, #0
 801b5b0:	e7a2      	b.n	801b4f8 <__ieee754_fmod+0xa4>
 801b5b2:	eba2 0c03 	sub.w	ip, r2, r3
 801b5b6:	f1bc 0f1f 	cmp.w	ip, #31
 801b5ba:	dc0a      	bgt.n	801b5d2 <__ieee754_fmod+0x17e>
 801b5bc:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 801b5c0:	fa0e fe0c 	lsl.w	lr, lr, ip
 801b5c4:	fa25 f606 	lsr.w	r6, r5, r6
 801b5c8:	ea46 060e 	orr.w	r6, r6, lr
 801b5cc:	fa05 fc0c 	lsl.w	ip, r5, ip
 801b5d0:	e799      	b.n	801b506 <__ieee754_fmod+0xb2>
 801b5d2:	4e28      	ldr	r6, [pc, #160]	; (801b674 <__ieee754_fmod+0x220>)
 801b5d4:	1af6      	subs	r6, r6, r3
 801b5d6:	fa05 f606 	lsl.w	r6, r5, r6
 801b5da:	f04f 0c00 	mov.w	ip, #0
 801b5de:	e792      	b.n	801b506 <__ieee754_fmod+0xb2>
 801b5e0:	4567      	cmp	r7, ip
 801b5e2:	bf38      	it	cc
 801b5e4:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801b5e8:	2a00      	cmp	r2, #0
 801b5ea:	da05      	bge.n	801b5f8 <__ieee754_fmod+0x1a4>
 801b5ec:	0ffa      	lsrs	r2, r7, #31
 801b5ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801b5f2:	007f      	lsls	r7, r7, #1
 801b5f4:	3801      	subs	r0, #1
 801b5f6:	e787      	b.n	801b508 <__ieee754_fmod+0xb4>
 801b5f8:	ea52 0105 	orrs.w	r1, r2, r5
 801b5fc:	f43f af5b 	beq.w	801b4b6 <__ieee754_fmod+0x62>
 801b600:	0fe9      	lsrs	r1, r5, #31
 801b602:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801b606:	006f      	lsls	r7, r5, #1
 801b608:	e7f4      	b.n	801b5f4 <__ieee754_fmod+0x1a0>
 801b60a:	0fe8      	lsrs	r0, r5, #31
 801b60c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b610:	006d      	lsls	r5, r5, #1
 801b612:	3b01      	subs	r3, #1
 801b614:	e789      	b.n	801b52a <__ieee754_fmod+0xd6>
 801b616:	1ac9      	subs	r1, r1, r3
 801b618:	2914      	cmp	r1, #20
 801b61a:	dc0a      	bgt.n	801b632 <__ieee754_fmod+0x1de>
 801b61c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801b620:	fa02 f303 	lsl.w	r3, r2, r3
 801b624:	40cd      	lsrs	r5, r1
 801b626:	432b      	orrs	r3, r5
 801b628:	410a      	asrs	r2, r1
 801b62a:	ea42 0104 	orr.w	r1, r2, r4
 801b62e:	4618      	mov	r0, r3
 801b630:	e732      	b.n	801b498 <__ieee754_fmod+0x44>
 801b632:	291f      	cmp	r1, #31
 801b634:	dc07      	bgt.n	801b646 <__ieee754_fmod+0x1f2>
 801b636:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801b63a:	40cd      	lsrs	r5, r1
 801b63c:	fa02 f303 	lsl.w	r3, r2, r3
 801b640:	432b      	orrs	r3, r5
 801b642:	4622      	mov	r2, r4
 801b644:	e7f1      	b.n	801b62a <__ieee754_fmod+0x1d6>
 801b646:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801b64a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801b64e:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801b652:	33e2      	adds	r3, #226	; 0xe2
 801b654:	fa42 f303 	asr.w	r3, r2, r3
 801b658:	e7f3      	b.n	801b642 <__ieee754_fmod+0x1ee>
 801b65a:	bf00      	nop
 801b65c:	7fefffff 	.word	0x7fefffff
 801b660:	7ff00000 	.word	0x7ff00000
 801b664:	0801e388 	.word	0x0801e388
 801b668:	000fffff 	.word	0x000fffff
 801b66c:	fffffbed 	.word	0xfffffbed
 801b670:	fffffc02 	.word	0xfffffc02
 801b674:	fffffbe2 	.word	0xfffffbe2

0801b678 <__ieee754_pow>:
 801b678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b67c:	b091      	sub	sp, #68	; 0x44
 801b67e:	ed8d 1b00 	vstr	d1, [sp]
 801b682:	e9dd 2900 	ldrd	r2, r9, [sp]
 801b686:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801b68a:	ea58 0302 	orrs.w	r3, r8, r2
 801b68e:	ec57 6b10 	vmov	r6, r7, d0
 801b692:	f000 84be 	beq.w	801c012 <__ieee754_pow+0x99a>
 801b696:	4b7a      	ldr	r3, [pc, #488]	; (801b880 <__ieee754_pow+0x208>)
 801b698:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801b69c:	429c      	cmp	r4, r3
 801b69e:	463d      	mov	r5, r7
 801b6a0:	ee10 aa10 	vmov	sl, s0
 801b6a4:	dc09      	bgt.n	801b6ba <__ieee754_pow+0x42>
 801b6a6:	d103      	bne.n	801b6b0 <__ieee754_pow+0x38>
 801b6a8:	b93e      	cbnz	r6, 801b6ba <__ieee754_pow+0x42>
 801b6aa:	45a0      	cmp	r8, r4
 801b6ac:	dc0d      	bgt.n	801b6ca <__ieee754_pow+0x52>
 801b6ae:	e001      	b.n	801b6b4 <__ieee754_pow+0x3c>
 801b6b0:	4598      	cmp	r8, r3
 801b6b2:	dc02      	bgt.n	801b6ba <__ieee754_pow+0x42>
 801b6b4:	4598      	cmp	r8, r3
 801b6b6:	d10e      	bne.n	801b6d6 <__ieee754_pow+0x5e>
 801b6b8:	b16a      	cbz	r2, 801b6d6 <__ieee754_pow+0x5e>
 801b6ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b6be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b6c2:	ea54 030a 	orrs.w	r3, r4, sl
 801b6c6:	f000 84a4 	beq.w	801c012 <__ieee754_pow+0x99a>
 801b6ca:	486e      	ldr	r0, [pc, #440]	; (801b884 <__ieee754_pow+0x20c>)
 801b6cc:	b011      	add	sp, #68	; 0x44
 801b6ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d2:	f001 be89 	b.w	801d3e8 <nan>
 801b6d6:	2d00      	cmp	r5, #0
 801b6d8:	da53      	bge.n	801b782 <__ieee754_pow+0x10a>
 801b6da:	4b6b      	ldr	r3, [pc, #428]	; (801b888 <__ieee754_pow+0x210>)
 801b6dc:	4598      	cmp	r8, r3
 801b6de:	dc4d      	bgt.n	801b77c <__ieee754_pow+0x104>
 801b6e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801b6e4:	4598      	cmp	r8, r3
 801b6e6:	dd4c      	ble.n	801b782 <__ieee754_pow+0x10a>
 801b6e8:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b6ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b6f0:	2b14      	cmp	r3, #20
 801b6f2:	dd26      	ble.n	801b742 <__ieee754_pow+0xca>
 801b6f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b6f8:	fa22 f103 	lsr.w	r1, r2, r3
 801b6fc:	fa01 f303 	lsl.w	r3, r1, r3
 801b700:	4293      	cmp	r3, r2
 801b702:	d13e      	bne.n	801b782 <__ieee754_pow+0x10a>
 801b704:	f001 0101 	and.w	r1, r1, #1
 801b708:	f1c1 0b02 	rsb	fp, r1, #2
 801b70c:	2a00      	cmp	r2, #0
 801b70e:	d15b      	bne.n	801b7c8 <__ieee754_pow+0x150>
 801b710:	4b5b      	ldr	r3, [pc, #364]	; (801b880 <__ieee754_pow+0x208>)
 801b712:	4598      	cmp	r8, r3
 801b714:	d124      	bne.n	801b760 <__ieee754_pow+0xe8>
 801b716:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b71a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b71e:	ea53 030a 	orrs.w	r3, r3, sl
 801b722:	f000 8476 	beq.w	801c012 <__ieee754_pow+0x99a>
 801b726:	4b59      	ldr	r3, [pc, #356]	; (801b88c <__ieee754_pow+0x214>)
 801b728:	429c      	cmp	r4, r3
 801b72a:	dd2d      	ble.n	801b788 <__ieee754_pow+0x110>
 801b72c:	f1b9 0f00 	cmp.w	r9, #0
 801b730:	f280 8473 	bge.w	801c01a <__ieee754_pow+0x9a2>
 801b734:	2000      	movs	r0, #0
 801b736:	2100      	movs	r1, #0
 801b738:	ec41 0b10 	vmov	d0, r0, r1
 801b73c:	b011      	add	sp, #68	; 0x44
 801b73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b742:	2a00      	cmp	r2, #0
 801b744:	d13e      	bne.n	801b7c4 <__ieee754_pow+0x14c>
 801b746:	f1c3 0314 	rsb	r3, r3, #20
 801b74a:	fa48 f103 	asr.w	r1, r8, r3
 801b74e:	fa01 f303 	lsl.w	r3, r1, r3
 801b752:	4543      	cmp	r3, r8
 801b754:	f040 8469 	bne.w	801c02a <__ieee754_pow+0x9b2>
 801b758:	f001 0101 	and.w	r1, r1, #1
 801b75c:	f1c1 0b02 	rsb	fp, r1, #2
 801b760:	4b4b      	ldr	r3, [pc, #300]	; (801b890 <__ieee754_pow+0x218>)
 801b762:	4598      	cmp	r8, r3
 801b764:	d118      	bne.n	801b798 <__ieee754_pow+0x120>
 801b766:	f1b9 0f00 	cmp.w	r9, #0
 801b76a:	f280 845a 	bge.w	801c022 <__ieee754_pow+0x9aa>
 801b76e:	4948      	ldr	r1, [pc, #288]	; (801b890 <__ieee754_pow+0x218>)
 801b770:	4632      	mov	r2, r6
 801b772:	463b      	mov	r3, r7
 801b774:	2000      	movs	r0, #0
 801b776:	f7e5 f879 	bl	800086c <__aeabi_ddiv>
 801b77a:	e7dd      	b.n	801b738 <__ieee754_pow+0xc0>
 801b77c:	f04f 0b02 	mov.w	fp, #2
 801b780:	e7c4      	b.n	801b70c <__ieee754_pow+0x94>
 801b782:	f04f 0b00 	mov.w	fp, #0
 801b786:	e7c1      	b.n	801b70c <__ieee754_pow+0x94>
 801b788:	f1b9 0f00 	cmp.w	r9, #0
 801b78c:	dad2      	bge.n	801b734 <__ieee754_pow+0xbc>
 801b78e:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b792:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b796:	e7cf      	b.n	801b738 <__ieee754_pow+0xc0>
 801b798:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801b79c:	d106      	bne.n	801b7ac <__ieee754_pow+0x134>
 801b79e:	4632      	mov	r2, r6
 801b7a0:	463b      	mov	r3, r7
 801b7a2:	4610      	mov	r0, r2
 801b7a4:	4619      	mov	r1, r3
 801b7a6:	f7e4 ff37 	bl	8000618 <__aeabi_dmul>
 801b7aa:	e7c5      	b.n	801b738 <__ieee754_pow+0xc0>
 801b7ac:	4b39      	ldr	r3, [pc, #228]	; (801b894 <__ieee754_pow+0x21c>)
 801b7ae:	4599      	cmp	r9, r3
 801b7b0:	d10a      	bne.n	801b7c8 <__ieee754_pow+0x150>
 801b7b2:	2d00      	cmp	r5, #0
 801b7b4:	db08      	blt.n	801b7c8 <__ieee754_pow+0x150>
 801b7b6:	ec47 6b10 	vmov	d0, r6, r7
 801b7ba:	b011      	add	sp, #68	; 0x44
 801b7bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7c0:	f000 be5c 	b.w	801c47c <__ieee754_sqrt>
 801b7c4:	f04f 0b00 	mov.w	fp, #0
 801b7c8:	ec47 6b10 	vmov	d0, r6, r7
 801b7cc:	f001 fd70 	bl	801d2b0 <fabs>
 801b7d0:	ec51 0b10 	vmov	r0, r1, d0
 801b7d4:	f1ba 0f00 	cmp.w	sl, #0
 801b7d8:	d127      	bne.n	801b82a <__ieee754_pow+0x1b2>
 801b7da:	b124      	cbz	r4, 801b7e6 <__ieee754_pow+0x16e>
 801b7dc:	4b2c      	ldr	r3, [pc, #176]	; (801b890 <__ieee754_pow+0x218>)
 801b7de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801b7e2:	429a      	cmp	r2, r3
 801b7e4:	d121      	bne.n	801b82a <__ieee754_pow+0x1b2>
 801b7e6:	f1b9 0f00 	cmp.w	r9, #0
 801b7ea:	da05      	bge.n	801b7f8 <__ieee754_pow+0x180>
 801b7ec:	4602      	mov	r2, r0
 801b7ee:	460b      	mov	r3, r1
 801b7f0:	2000      	movs	r0, #0
 801b7f2:	4927      	ldr	r1, [pc, #156]	; (801b890 <__ieee754_pow+0x218>)
 801b7f4:	f7e5 f83a 	bl	800086c <__aeabi_ddiv>
 801b7f8:	2d00      	cmp	r5, #0
 801b7fa:	da9d      	bge.n	801b738 <__ieee754_pow+0xc0>
 801b7fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b800:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b804:	ea54 030b 	orrs.w	r3, r4, fp
 801b808:	d108      	bne.n	801b81c <__ieee754_pow+0x1a4>
 801b80a:	4602      	mov	r2, r0
 801b80c:	460b      	mov	r3, r1
 801b80e:	4610      	mov	r0, r2
 801b810:	4619      	mov	r1, r3
 801b812:	f7e4 fd49 	bl	80002a8 <__aeabi_dsub>
 801b816:	4602      	mov	r2, r0
 801b818:	460b      	mov	r3, r1
 801b81a:	e7ac      	b.n	801b776 <__ieee754_pow+0xfe>
 801b81c:	f1bb 0f01 	cmp.w	fp, #1
 801b820:	d18a      	bne.n	801b738 <__ieee754_pow+0xc0>
 801b822:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b826:	4619      	mov	r1, r3
 801b828:	e786      	b.n	801b738 <__ieee754_pow+0xc0>
 801b82a:	0fed      	lsrs	r5, r5, #31
 801b82c:	1e6b      	subs	r3, r5, #1
 801b82e:	930d      	str	r3, [sp, #52]	; 0x34
 801b830:	ea5b 0303 	orrs.w	r3, fp, r3
 801b834:	d102      	bne.n	801b83c <__ieee754_pow+0x1c4>
 801b836:	4632      	mov	r2, r6
 801b838:	463b      	mov	r3, r7
 801b83a:	e7e8      	b.n	801b80e <__ieee754_pow+0x196>
 801b83c:	4b16      	ldr	r3, [pc, #88]	; (801b898 <__ieee754_pow+0x220>)
 801b83e:	4598      	cmp	r8, r3
 801b840:	f340 80fe 	ble.w	801ba40 <__ieee754_pow+0x3c8>
 801b844:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801b848:	4598      	cmp	r8, r3
 801b84a:	dd0a      	ble.n	801b862 <__ieee754_pow+0x1ea>
 801b84c:	4b0f      	ldr	r3, [pc, #60]	; (801b88c <__ieee754_pow+0x214>)
 801b84e:	429c      	cmp	r4, r3
 801b850:	dc0d      	bgt.n	801b86e <__ieee754_pow+0x1f6>
 801b852:	f1b9 0f00 	cmp.w	r9, #0
 801b856:	f6bf af6d 	bge.w	801b734 <__ieee754_pow+0xbc>
 801b85a:	a307      	add	r3, pc, #28	; (adr r3, 801b878 <__ieee754_pow+0x200>)
 801b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b860:	e79f      	b.n	801b7a2 <__ieee754_pow+0x12a>
 801b862:	4b0e      	ldr	r3, [pc, #56]	; (801b89c <__ieee754_pow+0x224>)
 801b864:	429c      	cmp	r4, r3
 801b866:	ddf4      	ble.n	801b852 <__ieee754_pow+0x1da>
 801b868:	4b09      	ldr	r3, [pc, #36]	; (801b890 <__ieee754_pow+0x218>)
 801b86a:	429c      	cmp	r4, r3
 801b86c:	dd18      	ble.n	801b8a0 <__ieee754_pow+0x228>
 801b86e:	f1b9 0f00 	cmp.w	r9, #0
 801b872:	dcf2      	bgt.n	801b85a <__ieee754_pow+0x1e2>
 801b874:	e75e      	b.n	801b734 <__ieee754_pow+0xbc>
 801b876:	bf00      	nop
 801b878:	8800759c 	.word	0x8800759c
 801b87c:	7e37e43c 	.word	0x7e37e43c
 801b880:	7ff00000 	.word	0x7ff00000
 801b884:	0801e261 	.word	0x0801e261
 801b888:	433fffff 	.word	0x433fffff
 801b88c:	3fefffff 	.word	0x3fefffff
 801b890:	3ff00000 	.word	0x3ff00000
 801b894:	3fe00000 	.word	0x3fe00000
 801b898:	41e00000 	.word	0x41e00000
 801b89c:	3feffffe 	.word	0x3feffffe
 801b8a0:	2200      	movs	r2, #0
 801b8a2:	4b63      	ldr	r3, [pc, #396]	; (801ba30 <__ieee754_pow+0x3b8>)
 801b8a4:	f7e4 fd00 	bl	80002a8 <__aeabi_dsub>
 801b8a8:	a355      	add	r3, pc, #340	; (adr r3, 801ba00 <__ieee754_pow+0x388>)
 801b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ae:	4604      	mov	r4, r0
 801b8b0:	460d      	mov	r5, r1
 801b8b2:	f7e4 feb1 	bl	8000618 <__aeabi_dmul>
 801b8b6:	a354      	add	r3, pc, #336	; (adr r3, 801ba08 <__ieee754_pow+0x390>)
 801b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8bc:	4606      	mov	r6, r0
 801b8be:	460f      	mov	r7, r1
 801b8c0:	4620      	mov	r0, r4
 801b8c2:	4629      	mov	r1, r5
 801b8c4:	f7e4 fea8 	bl	8000618 <__aeabi_dmul>
 801b8c8:	2200      	movs	r2, #0
 801b8ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b8ce:	4b59      	ldr	r3, [pc, #356]	; (801ba34 <__ieee754_pow+0x3bc>)
 801b8d0:	4620      	mov	r0, r4
 801b8d2:	4629      	mov	r1, r5
 801b8d4:	f7e4 fea0 	bl	8000618 <__aeabi_dmul>
 801b8d8:	4602      	mov	r2, r0
 801b8da:	460b      	mov	r3, r1
 801b8dc:	a14c      	add	r1, pc, #304	; (adr r1, 801ba10 <__ieee754_pow+0x398>)
 801b8de:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b8e2:	f7e4 fce1 	bl	80002a8 <__aeabi_dsub>
 801b8e6:	4622      	mov	r2, r4
 801b8e8:	462b      	mov	r3, r5
 801b8ea:	f7e4 fe95 	bl	8000618 <__aeabi_dmul>
 801b8ee:	4602      	mov	r2, r0
 801b8f0:	460b      	mov	r3, r1
 801b8f2:	2000      	movs	r0, #0
 801b8f4:	4950      	ldr	r1, [pc, #320]	; (801ba38 <__ieee754_pow+0x3c0>)
 801b8f6:	f7e4 fcd7 	bl	80002a8 <__aeabi_dsub>
 801b8fa:	4622      	mov	r2, r4
 801b8fc:	462b      	mov	r3, r5
 801b8fe:	4680      	mov	r8, r0
 801b900:	4689      	mov	r9, r1
 801b902:	4620      	mov	r0, r4
 801b904:	4629      	mov	r1, r5
 801b906:	f7e4 fe87 	bl	8000618 <__aeabi_dmul>
 801b90a:	4602      	mov	r2, r0
 801b90c:	460b      	mov	r3, r1
 801b90e:	4640      	mov	r0, r8
 801b910:	4649      	mov	r1, r9
 801b912:	f7e4 fe81 	bl	8000618 <__aeabi_dmul>
 801b916:	a340      	add	r3, pc, #256	; (adr r3, 801ba18 <__ieee754_pow+0x3a0>)
 801b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b91c:	f7e4 fe7c 	bl	8000618 <__aeabi_dmul>
 801b920:	4602      	mov	r2, r0
 801b922:	460b      	mov	r3, r1
 801b924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b928:	f7e4 fcbe 	bl	80002a8 <__aeabi_dsub>
 801b92c:	4602      	mov	r2, r0
 801b92e:	460b      	mov	r3, r1
 801b930:	4604      	mov	r4, r0
 801b932:	460d      	mov	r5, r1
 801b934:	4630      	mov	r0, r6
 801b936:	4639      	mov	r1, r7
 801b938:	f7e4 fcb8 	bl	80002ac <__adddf3>
 801b93c:	2000      	movs	r0, #0
 801b93e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b942:	4632      	mov	r2, r6
 801b944:	463b      	mov	r3, r7
 801b946:	f7e4 fcaf 	bl	80002a8 <__aeabi_dsub>
 801b94a:	4602      	mov	r2, r0
 801b94c:	460b      	mov	r3, r1
 801b94e:	4620      	mov	r0, r4
 801b950:	4629      	mov	r1, r5
 801b952:	f7e4 fca9 	bl	80002a8 <__aeabi_dsub>
 801b956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b958:	f10b 33ff 	add.w	r3, fp, #4294967295
 801b95c:	4313      	orrs	r3, r2
 801b95e:	4606      	mov	r6, r0
 801b960:	460f      	mov	r7, r1
 801b962:	f040 81eb 	bne.w	801bd3c <__ieee754_pow+0x6c4>
 801b966:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ba20 <__ieee754_pow+0x3a8>
 801b96a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801b96e:	2400      	movs	r4, #0
 801b970:	4622      	mov	r2, r4
 801b972:	462b      	mov	r3, r5
 801b974:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b978:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b97c:	f7e4 fc94 	bl	80002a8 <__aeabi_dsub>
 801b980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b984:	f7e4 fe48 	bl	8000618 <__aeabi_dmul>
 801b988:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b98c:	4680      	mov	r8, r0
 801b98e:	4689      	mov	r9, r1
 801b990:	4630      	mov	r0, r6
 801b992:	4639      	mov	r1, r7
 801b994:	f7e4 fe40 	bl	8000618 <__aeabi_dmul>
 801b998:	4602      	mov	r2, r0
 801b99a:	460b      	mov	r3, r1
 801b99c:	4640      	mov	r0, r8
 801b99e:	4649      	mov	r1, r9
 801b9a0:	f7e4 fc84 	bl	80002ac <__adddf3>
 801b9a4:	4622      	mov	r2, r4
 801b9a6:	462b      	mov	r3, r5
 801b9a8:	4680      	mov	r8, r0
 801b9aa:	4689      	mov	r9, r1
 801b9ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b9b0:	f7e4 fe32 	bl	8000618 <__aeabi_dmul>
 801b9b4:	460b      	mov	r3, r1
 801b9b6:	4604      	mov	r4, r0
 801b9b8:	460d      	mov	r5, r1
 801b9ba:	4602      	mov	r2, r0
 801b9bc:	4649      	mov	r1, r9
 801b9be:	4640      	mov	r0, r8
 801b9c0:	e9cd 4500 	strd	r4, r5, [sp]
 801b9c4:	f7e4 fc72 	bl	80002ac <__adddf3>
 801b9c8:	4b1c      	ldr	r3, [pc, #112]	; (801ba3c <__ieee754_pow+0x3c4>)
 801b9ca:	4299      	cmp	r1, r3
 801b9cc:	4606      	mov	r6, r0
 801b9ce:	460f      	mov	r7, r1
 801b9d0:	468b      	mov	fp, r1
 801b9d2:	f340 82f7 	ble.w	801bfc4 <__ieee754_pow+0x94c>
 801b9d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801b9da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801b9de:	4303      	orrs	r3, r0
 801b9e0:	f000 81ea 	beq.w	801bdb8 <__ieee754_pow+0x740>
 801b9e4:	a310      	add	r3, pc, #64	; (adr r3, 801ba28 <__ieee754_pow+0x3b0>)
 801b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b9ee:	f7e4 fe13 	bl	8000618 <__aeabi_dmul>
 801b9f2:	a30d      	add	r3, pc, #52	; (adr r3, 801ba28 <__ieee754_pow+0x3b0>)
 801b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9f8:	e6d5      	b.n	801b7a6 <__ieee754_pow+0x12e>
 801b9fa:	bf00      	nop
 801b9fc:	f3af 8000 	nop.w
 801ba00:	60000000 	.word	0x60000000
 801ba04:	3ff71547 	.word	0x3ff71547
 801ba08:	f85ddf44 	.word	0xf85ddf44
 801ba0c:	3e54ae0b 	.word	0x3e54ae0b
 801ba10:	55555555 	.word	0x55555555
 801ba14:	3fd55555 	.word	0x3fd55555
 801ba18:	652b82fe 	.word	0x652b82fe
 801ba1c:	3ff71547 	.word	0x3ff71547
 801ba20:	00000000 	.word	0x00000000
 801ba24:	bff00000 	.word	0xbff00000
 801ba28:	8800759c 	.word	0x8800759c
 801ba2c:	7e37e43c 	.word	0x7e37e43c
 801ba30:	3ff00000 	.word	0x3ff00000
 801ba34:	3fd00000 	.word	0x3fd00000
 801ba38:	3fe00000 	.word	0x3fe00000
 801ba3c:	408fffff 	.word	0x408fffff
 801ba40:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ba44:	f04f 0200 	mov.w	r2, #0
 801ba48:	da05      	bge.n	801ba56 <__ieee754_pow+0x3de>
 801ba4a:	4bd3      	ldr	r3, [pc, #844]	; (801bd98 <__ieee754_pow+0x720>)
 801ba4c:	f7e4 fde4 	bl	8000618 <__aeabi_dmul>
 801ba50:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ba54:	460c      	mov	r4, r1
 801ba56:	1523      	asrs	r3, r4, #20
 801ba58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ba5c:	4413      	add	r3, r2
 801ba5e:	9309      	str	r3, [sp, #36]	; 0x24
 801ba60:	4bce      	ldr	r3, [pc, #824]	; (801bd9c <__ieee754_pow+0x724>)
 801ba62:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ba66:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ba6a:	429c      	cmp	r4, r3
 801ba6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ba70:	dd08      	ble.n	801ba84 <__ieee754_pow+0x40c>
 801ba72:	4bcb      	ldr	r3, [pc, #812]	; (801bda0 <__ieee754_pow+0x728>)
 801ba74:	429c      	cmp	r4, r3
 801ba76:	f340 815e 	ble.w	801bd36 <__ieee754_pow+0x6be>
 801ba7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba7c:	3301      	adds	r3, #1
 801ba7e:	9309      	str	r3, [sp, #36]	; 0x24
 801ba80:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ba84:	f04f 0a00 	mov.w	sl, #0
 801ba88:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801ba8c:	930c      	str	r3, [sp, #48]	; 0x30
 801ba8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ba90:	4bc4      	ldr	r3, [pc, #784]	; (801bda4 <__ieee754_pow+0x72c>)
 801ba92:	4413      	add	r3, r2
 801ba94:	ed93 7b00 	vldr	d7, [r3]
 801ba98:	4629      	mov	r1, r5
 801ba9a:	ec53 2b17 	vmov	r2, r3, d7
 801ba9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801baa2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801baa6:	f7e4 fbff 	bl	80002a8 <__aeabi_dsub>
 801baaa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801baae:	4606      	mov	r6, r0
 801bab0:	460f      	mov	r7, r1
 801bab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bab6:	f7e4 fbf9 	bl	80002ac <__adddf3>
 801baba:	4602      	mov	r2, r0
 801babc:	460b      	mov	r3, r1
 801babe:	2000      	movs	r0, #0
 801bac0:	49b9      	ldr	r1, [pc, #740]	; (801bda8 <__ieee754_pow+0x730>)
 801bac2:	f7e4 fed3 	bl	800086c <__aeabi_ddiv>
 801bac6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801baca:	4602      	mov	r2, r0
 801bacc:	460b      	mov	r3, r1
 801bace:	4630      	mov	r0, r6
 801bad0:	4639      	mov	r1, r7
 801bad2:	f7e4 fda1 	bl	8000618 <__aeabi_dmul>
 801bad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bada:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801bade:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bae2:	2300      	movs	r3, #0
 801bae4:	9302      	str	r3, [sp, #8]
 801bae6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801baea:	106d      	asrs	r5, r5, #1
 801baec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801baf0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801baf4:	2200      	movs	r2, #0
 801baf6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801bafa:	4640      	mov	r0, r8
 801bafc:	4649      	mov	r1, r9
 801bafe:	4614      	mov	r4, r2
 801bb00:	461d      	mov	r5, r3
 801bb02:	f7e4 fd89 	bl	8000618 <__aeabi_dmul>
 801bb06:	4602      	mov	r2, r0
 801bb08:	460b      	mov	r3, r1
 801bb0a:	4630      	mov	r0, r6
 801bb0c:	4639      	mov	r1, r7
 801bb0e:	f7e4 fbcb 	bl	80002a8 <__aeabi_dsub>
 801bb12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bb16:	4606      	mov	r6, r0
 801bb18:	460f      	mov	r7, r1
 801bb1a:	4620      	mov	r0, r4
 801bb1c:	4629      	mov	r1, r5
 801bb1e:	f7e4 fbc3 	bl	80002a8 <__aeabi_dsub>
 801bb22:	4602      	mov	r2, r0
 801bb24:	460b      	mov	r3, r1
 801bb26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bb2a:	f7e4 fbbd 	bl	80002a8 <__aeabi_dsub>
 801bb2e:	4642      	mov	r2, r8
 801bb30:	464b      	mov	r3, r9
 801bb32:	f7e4 fd71 	bl	8000618 <__aeabi_dmul>
 801bb36:	4602      	mov	r2, r0
 801bb38:	460b      	mov	r3, r1
 801bb3a:	4630      	mov	r0, r6
 801bb3c:	4639      	mov	r1, r7
 801bb3e:	f7e4 fbb3 	bl	80002a8 <__aeabi_dsub>
 801bb42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801bb46:	f7e4 fd67 	bl	8000618 <__aeabi_dmul>
 801bb4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bb4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bb52:	4610      	mov	r0, r2
 801bb54:	4619      	mov	r1, r3
 801bb56:	f7e4 fd5f 	bl	8000618 <__aeabi_dmul>
 801bb5a:	a37b      	add	r3, pc, #492	; (adr r3, 801bd48 <__ieee754_pow+0x6d0>)
 801bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb60:	4604      	mov	r4, r0
 801bb62:	460d      	mov	r5, r1
 801bb64:	f7e4 fd58 	bl	8000618 <__aeabi_dmul>
 801bb68:	a379      	add	r3, pc, #484	; (adr r3, 801bd50 <__ieee754_pow+0x6d8>)
 801bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb6e:	f7e4 fb9d 	bl	80002ac <__adddf3>
 801bb72:	4622      	mov	r2, r4
 801bb74:	462b      	mov	r3, r5
 801bb76:	f7e4 fd4f 	bl	8000618 <__aeabi_dmul>
 801bb7a:	a377      	add	r3, pc, #476	; (adr r3, 801bd58 <__ieee754_pow+0x6e0>)
 801bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb80:	f7e4 fb94 	bl	80002ac <__adddf3>
 801bb84:	4622      	mov	r2, r4
 801bb86:	462b      	mov	r3, r5
 801bb88:	f7e4 fd46 	bl	8000618 <__aeabi_dmul>
 801bb8c:	a374      	add	r3, pc, #464	; (adr r3, 801bd60 <__ieee754_pow+0x6e8>)
 801bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb92:	f7e4 fb8b 	bl	80002ac <__adddf3>
 801bb96:	4622      	mov	r2, r4
 801bb98:	462b      	mov	r3, r5
 801bb9a:	f7e4 fd3d 	bl	8000618 <__aeabi_dmul>
 801bb9e:	a372      	add	r3, pc, #456	; (adr r3, 801bd68 <__ieee754_pow+0x6f0>)
 801bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bba4:	f7e4 fb82 	bl	80002ac <__adddf3>
 801bba8:	4622      	mov	r2, r4
 801bbaa:	462b      	mov	r3, r5
 801bbac:	f7e4 fd34 	bl	8000618 <__aeabi_dmul>
 801bbb0:	a36f      	add	r3, pc, #444	; (adr r3, 801bd70 <__ieee754_pow+0x6f8>)
 801bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbb6:	f7e4 fb79 	bl	80002ac <__adddf3>
 801bbba:	4622      	mov	r2, r4
 801bbbc:	4606      	mov	r6, r0
 801bbbe:	460f      	mov	r7, r1
 801bbc0:	462b      	mov	r3, r5
 801bbc2:	4620      	mov	r0, r4
 801bbc4:	4629      	mov	r1, r5
 801bbc6:	f7e4 fd27 	bl	8000618 <__aeabi_dmul>
 801bbca:	4602      	mov	r2, r0
 801bbcc:	460b      	mov	r3, r1
 801bbce:	4630      	mov	r0, r6
 801bbd0:	4639      	mov	r1, r7
 801bbd2:	f7e4 fd21 	bl	8000618 <__aeabi_dmul>
 801bbd6:	4642      	mov	r2, r8
 801bbd8:	4604      	mov	r4, r0
 801bbda:	460d      	mov	r5, r1
 801bbdc:	464b      	mov	r3, r9
 801bbde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bbe2:	f7e4 fb63 	bl	80002ac <__adddf3>
 801bbe6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bbea:	f7e4 fd15 	bl	8000618 <__aeabi_dmul>
 801bbee:	4622      	mov	r2, r4
 801bbf0:	462b      	mov	r3, r5
 801bbf2:	f7e4 fb5b 	bl	80002ac <__adddf3>
 801bbf6:	4642      	mov	r2, r8
 801bbf8:	4606      	mov	r6, r0
 801bbfa:	460f      	mov	r7, r1
 801bbfc:	464b      	mov	r3, r9
 801bbfe:	4640      	mov	r0, r8
 801bc00:	4649      	mov	r1, r9
 801bc02:	f7e4 fd09 	bl	8000618 <__aeabi_dmul>
 801bc06:	2200      	movs	r2, #0
 801bc08:	4b68      	ldr	r3, [pc, #416]	; (801bdac <__ieee754_pow+0x734>)
 801bc0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bc0e:	f7e4 fb4d 	bl	80002ac <__adddf3>
 801bc12:	4632      	mov	r2, r6
 801bc14:	463b      	mov	r3, r7
 801bc16:	f7e4 fb49 	bl	80002ac <__adddf3>
 801bc1a:	9802      	ldr	r0, [sp, #8]
 801bc1c:	460d      	mov	r5, r1
 801bc1e:	4604      	mov	r4, r0
 801bc20:	4602      	mov	r2, r0
 801bc22:	460b      	mov	r3, r1
 801bc24:	4640      	mov	r0, r8
 801bc26:	4649      	mov	r1, r9
 801bc28:	f7e4 fcf6 	bl	8000618 <__aeabi_dmul>
 801bc2c:	2200      	movs	r2, #0
 801bc2e:	4680      	mov	r8, r0
 801bc30:	4689      	mov	r9, r1
 801bc32:	4b5e      	ldr	r3, [pc, #376]	; (801bdac <__ieee754_pow+0x734>)
 801bc34:	4620      	mov	r0, r4
 801bc36:	4629      	mov	r1, r5
 801bc38:	f7e4 fb36 	bl	80002a8 <__aeabi_dsub>
 801bc3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bc40:	f7e4 fb32 	bl	80002a8 <__aeabi_dsub>
 801bc44:	4602      	mov	r2, r0
 801bc46:	460b      	mov	r3, r1
 801bc48:	4630      	mov	r0, r6
 801bc4a:	4639      	mov	r1, r7
 801bc4c:	f7e4 fb2c 	bl	80002a8 <__aeabi_dsub>
 801bc50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bc54:	f7e4 fce0 	bl	8000618 <__aeabi_dmul>
 801bc58:	4622      	mov	r2, r4
 801bc5a:	4606      	mov	r6, r0
 801bc5c:	460f      	mov	r7, r1
 801bc5e:	462b      	mov	r3, r5
 801bc60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bc64:	f7e4 fcd8 	bl	8000618 <__aeabi_dmul>
 801bc68:	4602      	mov	r2, r0
 801bc6a:	460b      	mov	r3, r1
 801bc6c:	4630      	mov	r0, r6
 801bc6e:	4639      	mov	r1, r7
 801bc70:	f7e4 fb1c 	bl	80002ac <__adddf3>
 801bc74:	4606      	mov	r6, r0
 801bc76:	460f      	mov	r7, r1
 801bc78:	4602      	mov	r2, r0
 801bc7a:	460b      	mov	r3, r1
 801bc7c:	4640      	mov	r0, r8
 801bc7e:	4649      	mov	r1, r9
 801bc80:	f7e4 fb14 	bl	80002ac <__adddf3>
 801bc84:	9802      	ldr	r0, [sp, #8]
 801bc86:	a33c      	add	r3, pc, #240	; (adr r3, 801bd78 <__ieee754_pow+0x700>)
 801bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc8c:	4604      	mov	r4, r0
 801bc8e:	460d      	mov	r5, r1
 801bc90:	f7e4 fcc2 	bl	8000618 <__aeabi_dmul>
 801bc94:	4642      	mov	r2, r8
 801bc96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bc9a:	464b      	mov	r3, r9
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	4629      	mov	r1, r5
 801bca0:	f7e4 fb02 	bl	80002a8 <__aeabi_dsub>
 801bca4:	4602      	mov	r2, r0
 801bca6:	460b      	mov	r3, r1
 801bca8:	4630      	mov	r0, r6
 801bcaa:	4639      	mov	r1, r7
 801bcac:	f7e4 fafc 	bl	80002a8 <__aeabi_dsub>
 801bcb0:	a333      	add	r3, pc, #204	; (adr r3, 801bd80 <__ieee754_pow+0x708>)
 801bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcb6:	f7e4 fcaf 	bl	8000618 <__aeabi_dmul>
 801bcba:	a333      	add	r3, pc, #204	; (adr r3, 801bd88 <__ieee754_pow+0x710>)
 801bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcc0:	4606      	mov	r6, r0
 801bcc2:	460f      	mov	r7, r1
 801bcc4:	4620      	mov	r0, r4
 801bcc6:	4629      	mov	r1, r5
 801bcc8:	f7e4 fca6 	bl	8000618 <__aeabi_dmul>
 801bccc:	4602      	mov	r2, r0
 801bcce:	460b      	mov	r3, r1
 801bcd0:	4630      	mov	r0, r6
 801bcd2:	4639      	mov	r1, r7
 801bcd4:	f7e4 faea 	bl	80002ac <__adddf3>
 801bcd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bcda:	4b35      	ldr	r3, [pc, #212]	; (801bdb0 <__ieee754_pow+0x738>)
 801bcdc:	4413      	add	r3, r2
 801bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bce2:	f7e4 fae3 	bl	80002ac <__adddf3>
 801bce6:	4604      	mov	r4, r0
 801bce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bcea:	460d      	mov	r5, r1
 801bcec:	f7e4 fc2a 	bl	8000544 <__aeabi_i2d>
 801bcf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bcf2:	4b30      	ldr	r3, [pc, #192]	; (801bdb4 <__ieee754_pow+0x73c>)
 801bcf4:	4413      	add	r3, r2
 801bcf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bcfa:	4606      	mov	r6, r0
 801bcfc:	460f      	mov	r7, r1
 801bcfe:	4622      	mov	r2, r4
 801bd00:	462b      	mov	r3, r5
 801bd02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bd06:	f7e4 fad1 	bl	80002ac <__adddf3>
 801bd0a:	4642      	mov	r2, r8
 801bd0c:	464b      	mov	r3, r9
 801bd0e:	f7e4 facd 	bl	80002ac <__adddf3>
 801bd12:	4632      	mov	r2, r6
 801bd14:	463b      	mov	r3, r7
 801bd16:	f7e4 fac9 	bl	80002ac <__adddf3>
 801bd1a:	9802      	ldr	r0, [sp, #8]
 801bd1c:	4632      	mov	r2, r6
 801bd1e:	463b      	mov	r3, r7
 801bd20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bd24:	f7e4 fac0 	bl	80002a8 <__aeabi_dsub>
 801bd28:	4642      	mov	r2, r8
 801bd2a:	464b      	mov	r3, r9
 801bd2c:	f7e4 fabc 	bl	80002a8 <__aeabi_dsub>
 801bd30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bd34:	e607      	b.n	801b946 <__ieee754_pow+0x2ce>
 801bd36:	f04f 0a01 	mov.w	sl, #1
 801bd3a:	e6a5      	b.n	801ba88 <__ieee754_pow+0x410>
 801bd3c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801bd90 <__ieee754_pow+0x718>
 801bd40:	e613      	b.n	801b96a <__ieee754_pow+0x2f2>
 801bd42:	bf00      	nop
 801bd44:	f3af 8000 	nop.w
 801bd48:	4a454eef 	.word	0x4a454eef
 801bd4c:	3fca7e28 	.word	0x3fca7e28
 801bd50:	93c9db65 	.word	0x93c9db65
 801bd54:	3fcd864a 	.word	0x3fcd864a
 801bd58:	a91d4101 	.word	0xa91d4101
 801bd5c:	3fd17460 	.word	0x3fd17460
 801bd60:	518f264d 	.word	0x518f264d
 801bd64:	3fd55555 	.word	0x3fd55555
 801bd68:	db6fabff 	.word	0xdb6fabff
 801bd6c:	3fdb6db6 	.word	0x3fdb6db6
 801bd70:	33333303 	.word	0x33333303
 801bd74:	3fe33333 	.word	0x3fe33333
 801bd78:	e0000000 	.word	0xe0000000
 801bd7c:	3feec709 	.word	0x3feec709
 801bd80:	dc3a03fd 	.word	0xdc3a03fd
 801bd84:	3feec709 	.word	0x3feec709
 801bd88:	145b01f5 	.word	0x145b01f5
 801bd8c:	be3e2fe0 	.word	0xbe3e2fe0
 801bd90:	00000000 	.word	0x00000000
 801bd94:	3ff00000 	.word	0x3ff00000
 801bd98:	43400000 	.word	0x43400000
 801bd9c:	0003988e 	.word	0x0003988e
 801bda0:	000bb679 	.word	0x000bb679
 801bda4:	0801e398 	.word	0x0801e398
 801bda8:	3ff00000 	.word	0x3ff00000
 801bdac:	40080000 	.word	0x40080000
 801bdb0:	0801e3b8 	.word	0x0801e3b8
 801bdb4:	0801e3a8 	.word	0x0801e3a8
 801bdb8:	a3b4      	add	r3, pc, #720	; (adr r3, 801c08c <__ieee754_pow+0xa14>)
 801bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdbe:	4640      	mov	r0, r8
 801bdc0:	4649      	mov	r1, r9
 801bdc2:	f7e4 fa73 	bl	80002ac <__adddf3>
 801bdc6:	4622      	mov	r2, r4
 801bdc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bdcc:	462b      	mov	r3, r5
 801bdce:	4630      	mov	r0, r6
 801bdd0:	4639      	mov	r1, r7
 801bdd2:	f7e4 fa69 	bl	80002a8 <__aeabi_dsub>
 801bdd6:	4602      	mov	r2, r0
 801bdd8:	460b      	mov	r3, r1
 801bdda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bdde:	f7e4 feab 	bl	8000b38 <__aeabi_dcmpgt>
 801bde2:	2800      	cmp	r0, #0
 801bde4:	f47f adfe 	bne.w	801b9e4 <__ieee754_pow+0x36c>
 801bde8:	4aa3      	ldr	r2, [pc, #652]	; (801c078 <__ieee754_pow+0xa00>)
 801bdea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bdee:	4293      	cmp	r3, r2
 801bdf0:	f340 810a 	ble.w	801c008 <__ieee754_pow+0x990>
 801bdf4:	151b      	asrs	r3, r3, #20
 801bdf6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801bdfa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801bdfe:	fa4a f303 	asr.w	r3, sl, r3
 801be02:	445b      	add	r3, fp
 801be04:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801be08:	4e9c      	ldr	r6, [pc, #624]	; (801c07c <__ieee754_pow+0xa04>)
 801be0a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801be0e:	4116      	asrs	r6, r2
 801be10:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801be14:	2000      	movs	r0, #0
 801be16:	ea23 0106 	bic.w	r1, r3, r6
 801be1a:	f1c2 0214 	rsb	r2, r2, #20
 801be1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801be22:	fa4a fa02 	asr.w	sl, sl, r2
 801be26:	f1bb 0f00 	cmp.w	fp, #0
 801be2a:	4602      	mov	r2, r0
 801be2c:	460b      	mov	r3, r1
 801be2e:	4620      	mov	r0, r4
 801be30:	4629      	mov	r1, r5
 801be32:	bfb8      	it	lt
 801be34:	f1ca 0a00 	rsblt	sl, sl, #0
 801be38:	f7e4 fa36 	bl	80002a8 <__aeabi_dsub>
 801be3c:	e9cd 0100 	strd	r0, r1, [sp]
 801be40:	4642      	mov	r2, r8
 801be42:	464b      	mov	r3, r9
 801be44:	e9dd 0100 	ldrd	r0, r1, [sp]
 801be48:	f7e4 fa30 	bl	80002ac <__adddf3>
 801be4c:	2000      	movs	r0, #0
 801be4e:	a378      	add	r3, pc, #480	; (adr r3, 801c030 <__ieee754_pow+0x9b8>)
 801be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be54:	4604      	mov	r4, r0
 801be56:	460d      	mov	r5, r1
 801be58:	f7e4 fbde 	bl	8000618 <__aeabi_dmul>
 801be5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be60:	4606      	mov	r6, r0
 801be62:	460f      	mov	r7, r1
 801be64:	4620      	mov	r0, r4
 801be66:	4629      	mov	r1, r5
 801be68:	f7e4 fa1e 	bl	80002a8 <__aeabi_dsub>
 801be6c:	4602      	mov	r2, r0
 801be6e:	460b      	mov	r3, r1
 801be70:	4640      	mov	r0, r8
 801be72:	4649      	mov	r1, r9
 801be74:	f7e4 fa18 	bl	80002a8 <__aeabi_dsub>
 801be78:	a36f      	add	r3, pc, #444	; (adr r3, 801c038 <__ieee754_pow+0x9c0>)
 801be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be7e:	f7e4 fbcb 	bl	8000618 <__aeabi_dmul>
 801be82:	a36f      	add	r3, pc, #444	; (adr r3, 801c040 <__ieee754_pow+0x9c8>)
 801be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be88:	4680      	mov	r8, r0
 801be8a:	4689      	mov	r9, r1
 801be8c:	4620      	mov	r0, r4
 801be8e:	4629      	mov	r1, r5
 801be90:	f7e4 fbc2 	bl	8000618 <__aeabi_dmul>
 801be94:	4602      	mov	r2, r0
 801be96:	460b      	mov	r3, r1
 801be98:	4640      	mov	r0, r8
 801be9a:	4649      	mov	r1, r9
 801be9c:	f7e4 fa06 	bl	80002ac <__adddf3>
 801bea0:	4604      	mov	r4, r0
 801bea2:	460d      	mov	r5, r1
 801bea4:	4602      	mov	r2, r0
 801bea6:	460b      	mov	r3, r1
 801bea8:	4630      	mov	r0, r6
 801beaa:	4639      	mov	r1, r7
 801beac:	f7e4 f9fe 	bl	80002ac <__adddf3>
 801beb0:	4632      	mov	r2, r6
 801beb2:	463b      	mov	r3, r7
 801beb4:	4680      	mov	r8, r0
 801beb6:	4689      	mov	r9, r1
 801beb8:	f7e4 f9f6 	bl	80002a8 <__aeabi_dsub>
 801bebc:	4602      	mov	r2, r0
 801bebe:	460b      	mov	r3, r1
 801bec0:	4620      	mov	r0, r4
 801bec2:	4629      	mov	r1, r5
 801bec4:	f7e4 f9f0 	bl	80002a8 <__aeabi_dsub>
 801bec8:	4642      	mov	r2, r8
 801beca:	4606      	mov	r6, r0
 801becc:	460f      	mov	r7, r1
 801bece:	464b      	mov	r3, r9
 801bed0:	4640      	mov	r0, r8
 801bed2:	4649      	mov	r1, r9
 801bed4:	f7e4 fba0 	bl	8000618 <__aeabi_dmul>
 801bed8:	a35b      	add	r3, pc, #364	; (adr r3, 801c048 <__ieee754_pow+0x9d0>)
 801beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bede:	4604      	mov	r4, r0
 801bee0:	460d      	mov	r5, r1
 801bee2:	f7e4 fb99 	bl	8000618 <__aeabi_dmul>
 801bee6:	a35a      	add	r3, pc, #360	; (adr r3, 801c050 <__ieee754_pow+0x9d8>)
 801bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beec:	f7e4 f9dc 	bl	80002a8 <__aeabi_dsub>
 801bef0:	4622      	mov	r2, r4
 801bef2:	462b      	mov	r3, r5
 801bef4:	f7e4 fb90 	bl	8000618 <__aeabi_dmul>
 801bef8:	a357      	add	r3, pc, #348	; (adr r3, 801c058 <__ieee754_pow+0x9e0>)
 801befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801befe:	f7e4 f9d5 	bl	80002ac <__adddf3>
 801bf02:	4622      	mov	r2, r4
 801bf04:	462b      	mov	r3, r5
 801bf06:	f7e4 fb87 	bl	8000618 <__aeabi_dmul>
 801bf0a:	a355      	add	r3, pc, #340	; (adr r3, 801c060 <__ieee754_pow+0x9e8>)
 801bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf10:	f7e4 f9ca 	bl	80002a8 <__aeabi_dsub>
 801bf14:	4622      	mov	r2, r4
 801bf16:	462b      	mov	r3, r5
 801bf18:	f7e4 fb7e 	bl	8000618 <__aeabi_dmul>
 801bf1c:	a352      	add	r3, pc, #328	; (adr r3, 801c068 <__ieee754_pow+0x9f0>)
 801bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf22:	f7e4 f9c3 	bl	80002ac <__adddf3>
 801bf26:	4622      	mov	r2, r4
 801bf28:	462b      	mov	r3, r5
 801bf2a:	f7e4 fb75 	bl	8000618 <__aeabi_dmul>
 801bf2e:	4602      	mov	r2, r0
 801bf30:	460b      	mov	r3, r1
 801bf32:	4640      	mov	r0, r8
 801bf34:	4649      	mov	r1, r9
 801bf36:	f7e4 f9b7 	bl	80002a8 <__aeabi_dsub>
 801bf3a:	4604      	mov	r4, r0
 801bf3c:	460d      	mov	r5, r1
 801bf3e:	4602      	mov	r2, r0
 801bf40:	460b      	mov	r3, r1
 801bf42:	4640      	mov	r0, r8
 801bf44:	4649      	mov	r1, r9
 801bf46:	f7e4 fb67 	bl	8000618 <__aeabi_dmul>
 801bf4a:	2200      	movs	r2, #0
 801bf4c:	e9cd 0100 	strd	r0, r1, [sp]
 801bf50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bf54:	4620      	mov	r0, r4
 801bf56:	4629      	mov	r1, r5
 801bf58:	f7e4 f9a6 	bl	80002a8 <__aeabi_dsub>
 801bf5c:	4602      	mov	r2, r0
 801bf5e:	460b      	mov	r3, r1
 801bf60:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf64:	f7e4 fc82 	bl	800086c <__aeabi_ddiv>
 801bf68:	4632      	mov	r2, r6
 801bf6a:	4604      	mov	r4, r0
 801bf6c:	460d      	mov	r5, r1
 801bf6e:	463b      	mov	r3, r7
 801bf70:	4640      	mov	r0, r8
 801bf72:	4649      	mov	r1, r9
 801bf74:	f7e4 fb50 	bl	8000618 <__aeabi_dmul>
 801bf78:	4632      	mov	r2, r6
 801bf7a:	463b      	mov	r3, r7
 801bf7c:	f7e4 f996 	bl	80002ac <__adddf3>
 801bf80:	4602      	mov	r2, r0
 801bf82:	460b      	mov	r3, r1
 801bf84:	4620      	mov	r0, r4
 801bf86:	4629      	mov	r1, r5
 801bf88:	f7e4 f98e 	bl	80002a8 <__aeabi_dsub>
 801bf8c:	4642      	mov	r2, r8
 801bf8e:	464b      	mov	r3, r9
 801bf90:	f7e4 f98a 	bl	80002a8 <__aeabi_dsub>
 801bf94:	4602      	mov	r2, r0
 801bf96:	460b      	mov	r3, r1
 801bf98:	2000      	movs	r0, #0
 801bf9a:	4939      	ldr	r1, [pc, #228]	; (801c080 <__ieee754_pow+0xa08>)
 801bf9c:	f7e4 f984 	bl	80002a8 <__aeabi_dsub>
 801bfa0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801bfa4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801bfa8:	4602      	mov	r2, r0
 801bfaa:	460b      	mov	r3, r1
 801bfac:	da2f      	bge.n	801c00e <__ieee754_pow+0x996>
 801bfae:	4650      	mov	r0, sl
 801bfb0:	ec43 2b10 	vmov	d0, r2, r3
 801bfb4:	f001 faa4 	bl	801d500 <scalbn>
 801bfb8:	ec51 0b10 	vmov	r0, r1, d0
 801bfbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bfc0:	f7ff bbf1 	b.w	801b7a6 <__ieee754_pow+0x12e>
 801bfc4:	4b2f      	ldr	r3, [pc, #188]	; (801c084 <__ieee754_pow+0xa0c>)
 801bfc6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801bfca:	429e      	cmp	r6, r3
 801bfcc:	f77f af0c 	ble.w	801bde8 <__ieee754_pow+0x770>
 801bfd0:	4b2d      	ldr	r3, [pc, #180]	; (801c088 <__ieee754_pow+0xa10>)
 801bfd2:	440b      	add	r3, r1
 801bfd4:	4303      	orrs	r3, r0
 801bfd6:	d00b      	beq.n	801bff0 <__ieee754_pow+0x978>
 801bfd8:	a325      	add	r3, pc, #148	; (adr r3, 801c070 <__ieee754_pow+0x9f8>)
 801bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bfe2:	f7e4 fb19 	bl	8000618 <__aeabi_dmul>
 801bfe6:	a322      	add	r3, pc, #136	; (adr r3, 801c070 <__ieee754_pow+0x9f8>)
 801bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfec:	f7ff bbdb 	b.w	801b7a6 <__ieee754_pow+0x12e>
 801bff0:	4622      	mov	r2, r4
 801bff2:	462b      	mov	r3, r5
 801bff4:	f7e4 f958 	bl	80002a8 <__aeabi_dsub>
 801bff8:	4642      	mov	r2, r8
 801bffa:	464b      	mov	r3, r9
 801bffc:	f7e4 fd92 	bl	8000b24 <__aeabi_dcmpge>
 801c000:	2800      	cmp	r0, #0
 801c002:	f43f aef1 	beq.w	801bde8 <__ieee754_pow+0x770>
 801c006:	e7e7      	b.n	801bfd8 <__ieee754_pow+0x960>
 801c008:	f04f 0a00 	mov.w	sl, #0
 801c00c:	e718      	b.n	801be40 <__ieee754_pow+0x7c8>
 801c00e:	4621      	mov	r1, r4
 801c010:	e7d4      	b.n	801bfbc <__ieee754_pow+0x944>
 801c012:	2000      	movs	r0, #0
 801c014:	491a      	ldr	r1, [pc, #104]	; (801c080 <__ieee754_pow+0xa08>)
 801c016:	f7ff bb8f 	b.w	801b738 <__ieee754_pow+0xc0>
 801c01a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c01e:	f7ff bb8b 	b.w	801b738 <__ieee754_pow+0xc0>
 801c022:	4630      	mov	r0, r6
 801c024:	4639      	mov	r1, r7
 801c026:	f7ff bb87 	b.w	801b738 <__ieee754_pow+0xc0>
 801c02a:	4693      	mov	fp, r2
 801c02c:	f7ff bb98 	b.w	801b760 <__ieee754_pow+0xe8>
 801c030:	00000000 	.word	0x00000000
 801c034:	3fe62e43 	.word	0x3fe62e43
 801c038:	fefa39ef 	.word	0xfefa39ef
 801c03c:	3fe62e42 	.word	0x3fe62e42
 801c040:	0ca86c39 	.word	0x0ca86c39
 801c044:	be205c61 	.word	0xbe205c61
 801c048:	72bea4d0 	.word	0x72bea4d0
 801c04c:	3e663769 	.word	0x3e663769
 801c050:	c5d26bf1 	.word	0xc5d26bf1
 801c054:	3ebbbd41 	.word	0x3ebbbd41
 801c058:	af25de2c 	.word	0xaf25de2c
 801c05c:	3f11566a 	.word	0x3f11566a
 801c060:	16bebd93 	.word	0x16bebd93
 801c064:	3f66c16c 	.word	0x3f66c16c
 801c068:	5555553e 	.word	0x5555553e
 801c06c:	3fc55555 	.word	0x3fc55555
 801c070:	c2f8f359 	.word	0xc2f8f359
 801c074:	01a56e1f 	.word	0x01a56e1f
 801c078:	3fe00000 	.word	0x3fe00000
 801c07c:	000fffff 	.word	0x000fffff
 801c080:	3ff00000 	.word	0x3ff00000
 801c084:	4090cbff 	.word	0x4090cbff
 801c088:	3f6f3400 	.word	0x3f6f3400
 801c08c:	652b82fe 	.word	0x652b82fe
 801c090:	3c971547 	.word	0x3c971547
 801c094:	00000000 	.word	0x00000000

0801c098 <__ieee754_rem_pio2>:
 801c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c09c:	ec57 6b10 	vmov	r6, r7, d0
 801c0a0:	4bc3      	ldr	r3, [pc, #780]	; (801c3b0 <__ieee754_rem_pio2+0x318>)
 801c0a2:	b08d      	sub	sp, #52	; 0x34
 801c0a4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801c0a8:	4598      	cmp	r8, r3
 801c0aa:	4604      	mov	r4, r0
 801c0ac:	9704      	str	r7, [sp, #16]
 801c0ae:	dc07      	bgt.n	801c0c0 <__ieee754_rem_pio2+0x28>
 801c0b0:	2200      	movs	r2, #0
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	ed84 0b00 	vstr	d0, [r4]
 801c0b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c0bc:	2500      	movs	r5, #0
 801c0be:	e027      	b.n	801c110 <__ieee754_rem_pio2+0x78>
 801c0c0:	4bbc      	ldr	r3, [pc, #752]	; (801c3b4 <__ieee754_rem_pio2+0x31c>)
 801c0c2:	4598      	cmp	r8, r3
 801c0c4:	dc75      	bgt.n	801c1b2 <__ieee754_rem_pio2+0x11a>
 801c0c6:	9b04      	ldr	r3, [sp, #16]
 801c0c8:	4dbb      	ldr	r5, [pc, #748]	; (801c3b8 <__ieee754_rem_pio2+0x320>)
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	ee10 0a10 	vmov	r0, s0
 801c0d0:	a3a9      	add	r3, pc, #676	; (adr r3, 801c378 <__ieee754_rem_pio2+0x2e0>)
 801c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0d6:	4639      	mov	r1, r7
 801c0d8:	dd36      	ble.n	801c148 <__ieee754_rem_pio2+0xb0>
 801c0da:	f7e4 f8e5 	bl	80002a8 <__aeabi_dsub>
 801c0de:	45a8      	cmp	r8, r5
 801c0e0:	4606      	mov	r6, r0
 801c0e2:	460f      	mov	r7, r1
 801c0e4:	d018      	beq.n	801c118 <__ieee754_rem_pio2+0x80>
 801c0e6:	a3a6      	add	r3, pc, #664	; (adr r3, 801c380 <__ieee754_rem_pio2+0x2e8>)
 801c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ec:	f7e4 f8dc 	bl	80002a8 <__aeabi_dsub>
 801c0f0:	4602      	mov	r2, r0
 801c0f2:	460b      	mov	r3, r1
 801c0f4:	e9c4 2300 	strd	r2, r3, [r4]
 801c0f8:	4630      	mov	r0, r6
 801c0fa:	4639      	mov	r1, r7
 801c0fc:	f7e4 f8d4 	bl	80002a8 <__aeabi_dsub>
 801c100:	a39f      	add	r3, pc, #636	; (adr r3, 801c380 <__ieee754_rem_pio2+0x2e8>)
 801c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c106:	f7e4 f8cf 	bl	80002a8 <__aeabi_dsub>
 801c10a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c10e:	2501      	movs	r5, #1
 801c110:	4628      	mov	r0, r5
 801c112:	b00d      	add	sp, #52	; 0x34
 801c114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c118:	a39b      	add	r3, pc, #620	; (adr r3, 801c388 <__ieee754_rem_pio2+0x2f0>)
 801c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c11e:	f7e4 f8c3 	bl	80002a8 <__aeabi_dsub>
 801c122:	a39b      	add	r3, pc, #620	; (adr r3, 801c390 <__ieee754_rem_pio2+0x2f8>)
 801c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c128:	4606      	mov	r6, r0
 801c12a:	460f      	mov	r7, r1
 801c12c:	f7e4 f8bc 	bl	80002a8 <__aeabi_dsub>
 801c130:	4602      	mov	r2, r0
 801c132:	460b      	mov	r3, r1
 801c134:	e9c4 2300 	strd	r2, r3, [r4]
 801c138:	4630      	mov	r0, r6
 801c13a:	4639      	mov	r1, r7
 801c13c:	f7e4 f8b4 	bl	80002a8 <__aeabi_dsub>
 801c140:	a393      	add	r3, pc, #588	; (adr r3, 801c390 <__ieee754_rem_pio2+0x2f8>)
 801c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c146:	e7de      	b.n	801c106 <__ieee754_rem_pio2+0x6e>
 801c148:	f7e4 f8b0 	bl	80002ac <__adddf3>
 801c14c:	45a8      	cmp	r8, r5
 801c14e:	4606      	mov	r6, r0
 801c150:	460f      	mov	r7, r1
 801c152:	d016      	beq.n	801c182 <__ieee754_rem_pio2+0xea>
 801c154:	a38a      	add	r3, pc, #552	; (adr r3, 801c380 <__ieee754_rem_pio2+0x2e8>)
 801c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c15a:	f7e4 f8a7 	bl	80002ac <__adddf3>
 801c15e:	4602      	mov	r2, r0
 801c160:	460b      	mov	r3, r1
 801c162:	e9c4 2300 	strd	r2, r3, [r4]
 801c166:	4630      	mov	r0, r6
 801c168:	4639      	mov	r1, r7
 801c16a:	f7e4 f89d 	bl	80002a8 <__aeabi_dsub>
 801c16e:	a384      	add	r3, pc, #528	; (adr r3, 801c380 <__ieee754_rem_pio2+0x2e8>)
 801c170:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c174:	f7e4 f89a 	bl	80002ac <__adddf3>
 801c178:	f04f 35ff 	mov.w	r5, #4294967295
 801c17c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c180:	e7c6      	b.n	801c110 <__ieee754_rem_pio2+0x78>
 801c182:	a381      	add	r3, pc, #516	; (adr r3, 801c388 <__ieee754_rem_pio2+0x2f0>)
 801c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c188:	f7e4 f890 	bl	80002ac <__adddf3>
 801c18c:	a380      	add	r3, pc, #512	; (adr r3, 801c390 <__ieee754_rem_pio2+0x2f8>)
 801c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c192:	4606      	mov	r6, r0
 801c194:	460f      	mov	r7, r1
 801c196:	f7e4 f889 	bl	80002ac <__adddf3>
 801c19a:	4602      	mov	r2, r0
 801c19c:	460b      	mov	r3, r1
 801c19e:	e9c4 2300 	strd	r2, r3, [r4]
 801c1a2:	4630      	mov	r0, r6
 801c1a4:	4639      	mov	r1, r7
 801c1a6:	f7e4 f87f 	bl	80002a8 <__aeabi_dsub>
 801c1aa:	a379      	add	r3, pc, #484	; (adr r3, 801c390 <__ieee754_rem_pio2+0x2f8>)
 801c1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1b0:	e7e0      	b.n	801c174 <__ieee754_rem_pio2+0xdc>
 801c1b2:	4b82      	ldr	r3, [pc, #520]	; (801c3bc <__ieee754_rem_pio2+0x324>)
 801c1b4:	4598      	cmp	r8, r3
 801c1b6:	f300 80d0 	bgt.w	801c35a <__ieee754_rem_pio2+0x2c2>
 801c1ba:	f001 f879 	bl	801d2b0 <fabs>
 801c1be:	ec57 6b10 	vmov	r6, r7, d0
 801c1c2:	ee10 0a10 	vmov	r0, s0
 801c1c6:	a374      	add	r3, pc, #464	; (adr r3, 801c398 <__ieee754_rem_pio2+0x300>)
 801c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1cc:	4639      	mov	r1, r7
 801c1ce:	f7e4 fa23 	bl	8000618 <__aeabi_dmul>
 801c1d2:	2200      	movs	r2, #0
 801c1d4:	4b7a      	ldr	r3, [pc, #488]	; (801c3c0 <__ieee754_rem_pio2+0x328>)
 801c1d6:	f7e4 f869 	bl	80002ac <__adddf3>
 801c1da:	f7e4 fccd 	bl	8000b78 <__aeabi_d2iz>
 801c1de:	4605      	mov	r5, r0
 801c1e0:	f7e4 f9b0 	bl	8000544 <__aeabi_i2d>
 801c1e4:	a364      	add	r3, pc, #400	; (adr r3, 801c378 <__ieee754_rem_pio2+0x2e0>)
 801c1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c1ee:	f7e4 fa13 	bl	8000618 <__aeabi_dmul>
 801c1f2:	4602      	mov	r2, r0
 801c1f4:	460b      	mov	r3, r1
 801c1f6:	4630      	mov	r0, r6
 801c1f8:	4639      	mov	r1, r7
 801c1fa:	f7e4 f855 	bl	80002a8 <__aeabi_dsub>
 801c1fe:	a360      	add	r3, pc, #384	; (adr r3, 801c380 <__ieee754_rem_pio2+0x2e8>)
 801c200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c204:	4682      	mov	sl, r0
 801c206:	468b      	mov	fp, r1
 801c208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c20c:	f7e4 fa04 	bl	8000618 <__aeabi_dmul>
 801c210:	2d1f      	cmp	r5, #31
 801c212:	4606      	mov	r6, r0
 801c214:	460f      	mov	r7, r1
 801c216:	dc0c      	bgt.n	801c232 <__ieee754_rem_pio2+0x19a>
 801c218:	1e6a      	subs	r2, r5, #1
 801c21a:	4b6a      	ldr	r3, [pc, #424]	; (801c3c4 <__ieee754_rem_pio2+0x32c>)
 801c21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c220:	4543      	cmp	r3, r8
 801c222:	d006      	beq.n	801c232 <__ieee754_rem_pio2+0x19a>
 801c224:	4632      	mov	r2, r6
 801c226:	463b      	mov	r3, r7
 801c228:	4650      	mov	r0, sl
 801c22a:	4659      	mov	r1, fp
 801c22c:	f7e4 f83c 	bl	80002a8 <__aeabi_dsub>
 801c230:	e00e      	b.n	801c250 <__ieee754_rem_pio2+0x1b8>
 801c232:	4632      	mov	r2, r6
 801c234:	463b      	mov	r3, r7
 801c236:	4650      	mov	r0, sl
 801c238:	4659      	mov	r1, fp
 801c23a:	f7e4 f835 	bl	80002a8 <__aeabi_dsub>
 801c23e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c242:	9305      	str	r3, [sp, #20]
 801c244:	9a05      	ldr	r2, [sp, #20]
 801c246:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c24a:	1ad3      	subs	r3, r2, r3
 801c24c:	2b10      	cmp	r3, #16
 801c24e:	dc02      	bgt.n	801c256 <__ieee754_rem_pio2+0x1be>
 801c250:	e9c4 0100 	strd	r0, r1, [r4]
 801c254:	e039      	b.n	801c2ca <__ieee754_rem_pio2+0x232>
 801c256:	a34c      	add	r3, pc, #304	; (adr r3, 801c388 <__ieee754_rem_pio2+0x2f0>)
 801c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c25c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c260:	f7e4 f9da 	bl	8000618 <__aeabi_dmul>
 801c264:	4606      	mov	r6, r0
 801c266:	460f      	mov	r7, r1
 801c268:	4602      	mov	r2, r0
 801c26a:	460b      	mov	r3, r1
 801c26c:	4650      	mov	r0, sl
 801c26e:	4659      	mov	r1, fp
 801c270:	f7e4 f81a 	bl	80002a8 <__aeabi_dsub>
 801c274:	4602      	mov	r2, r0
 801c276:	460b      	mov	r3, r1
 801c278:	4680      	mov	r8, r0
 801c27a:	4689      	mov	r9, r1
 801c27c:	4650      	mov	r0, sl
 801c27e:	4659      	mov	r1, fp
 801c280:	f7e4 f812 	bl	80002a8 <__aeabi_dsub>
 801c284:	4632      	mov	r2, r6
 801c286:	463b      	mov	r3, r7
 801c288:	f7e4 f80e 	bl	80002a8 <__aeabi_dsub>
 801c28c:	a340      	add	r3, pc, #256	; (adr r3, 801c390 <__ieee754_rem_pio2+0x2f8>)
 801c28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c292:	4606      	mov	r6, r0
 801c294:	460f      	mov	r7, r1
 801c296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c29a:	f7e4 f9bd 	bl	8000618 <__aeabi_dmul>
 801c29e:	4632      	mov	r2, r6
 801c2a0:	463b      	mov	r3, r7
 801c2a2:	f7e4 f801 	bl	80002a8 <__aeabi_dsub>
 801c2a6:	4602      	mov	r2, r0
 801c2a8:	460b      	mov	r3, r1
 801c2aa:	4606      	mov	r6, r0
 801c2ac:	460f      	mov	r7, r1
 801c2ae:	4640      	mov	r0, r8
 801c2b0:	4649      	mov	r1, r9
 801c2b2:	f7e3 fff9 	bl	80002a8 <__aeabi_dsub>
 801c2b6:	9a05      	ldr	r2, [sp, #20]
 801c2b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c2bc:	1ad3      	subs	r3, r2, r3
 801c2be:	2b31      	cmp	r3, #49	; 0x31
 801c2c0:	dc20      	bgt.n	801c304 <__ieee754_rem_pio2+0x26c>
 801c2c2:	e9c4 0100 	strd	r0, r1, [r4]
 801c2c6:	46c2      	mov	sl, r8
 801c2c8:	46cb      	mov	fp, r9
 801c2ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c2ce:	4650      	mov	r0, sl
 801c2d0:	4642      	mov	r2, r8
 801c2d2:	464b      	mov	r3, r9
 801c2d4:	4659      	mov	r1, fp
 801c2d6:	f7e3 ffe7 	bl	80002a8 <__aeabi_dsub>
 801c2da:	463b      	mov	r3, r7
 801c2dc:	4632      	mov	r2, r6
 801c2de:	f7e3 ffe3 	bl	80002a8 <__aeabi_dsub>
 801c2e2:	9b04      	ldr	r3, [sp, #16]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c2ea:	f6bf af11 	bge.w	801c110 <__ieee754_rem_pio2+0x78>
 801c2ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c2f2:	6063      	str	r3, [r4, #4]
 801c2f4:	f8c4 8000 	str.w	r8, [r4]
 801c2f8:	60a0      	str	r0, [r4, #8]
 801c2fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c2fe:	60e3      	str	r3, [r4, #12]
 801c300:	426d      	negs	r5, r5
 801c302:	e705      	b.n	801c110 <__ieee754_rem_pio2+0x78>
 801c304:	a326      	add	r3, pc, #152	; (adr r3, 801c3a0 <__ieee754_rem_pio2+0x308>)
 801c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c30a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c30e:	f7e4 f983 	bl	8000618 <__aeabi_dmul>
 801c312:	4606      	mov	r6, r0
 801c314:	460f      	mov	r7, r1
 801c316:	4602      	mov	r2, r0
 801c318:	460b      	mov	r3, r1
 801c31a:	4640      	mov	r0, r8
 801c31c:	4649      	mov	r1, r9
 801c31e:	f7e3 ffc3 	bl	80002a8 <__aeabi_dsub>
 801c322:	4602      	mov	r2, r0
 801c324:	460b      	mov	r3, r1
 801c326:	4682      	mov	sl, r0
 801c328:	468b      	mov	fp, r1
 801c32a:	4640      	mov	r0, r8
 801c32c:	4649      	mov	r1, r9
 801c32e:	f7e3 ffbb 	bl	80002a8 <__aeabi_dsub>
 801c332:	4632      	mov	r2, r6
 801c334:	463b      	mov	r3, r7
 801c336:	f7e3 ffb7 	bl	80002a8 <__aeabi_dsub>
 801c33a:	a31b      	add	r3, pc, #108	; (adr r3, 801c3a8 <__ieee754_rem_pio2+0x310>)
 801c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c340:	4606      	mov	r6, r0
 801c342:	460f      	mov	r7, r1
 801c344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c348:	f7e4 f966 	bl	8000618 <__aeabi_dmul>
 801c34c:	4632      	mov	r2, r6
 801c34e:	463b      	mov	r3, r7
 801c350:	f7e3 ffaa 	bl	80002a8 <__aeabi_dsub>
 801c354:	4606      	mov	r6, r0
 801c356:	460f      	mov	r7, r1
 801c358:	e764      	b.n	801c224 <__ieee754_rem_pio2+0x18c>
 801c35a:	4b1b      	ldr	r3, [pc, #108]	; (801c3c8 <__ieee754_rem_pio2+0x330>)
 801c35c:	4598      	cmp	r8, r3
 801c35e:	dd35      	ble.n	801c3cc <__ieee754_rem_pio2+0x334>
 801c360:	ee10 2a10 	vmov	r2, s0
 801c364:	463b      	mov	r3, r7
 801c366:	4630      	mov	r0, r6
 801c368:	4639      	mov	r1, r7
 801c36a:	f7e3 ff9d 	bl	80002a8 <__aeabi_dsub>
 801c36e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c372:	e9c4 0100 	strd	r0, r1, [r4]
 801c376:	e6a1      	b.n	801c0bc <__ieee754_rem_pio2+0x24>
 801c378:	54400000 	.word	0x54400000
 801c37c:	3ff921fb 	.word	0x3ff921fb
 801c380:	1a626331 	.word	0x1a626331
 801c384:	3dd0b461 	.word	0x3dd0b461
 801c388:	1a600000 	.word	0x1a600000
 801c38c:	3dd0b461 	.word	0x3dd0b461
 801c390:	2e037073 	.word	0x2e037073
 801c394:	3ba3198a 	.word	0x3ba3198a
 801c398:	6dc9c883 	.word	0x6dc9c883
 801c39c:	3fe45f30 	.word	0x3fe45f30
 801c3a0:	2e000000 	.word	0x2e000000
 801c3a4:	3ba3198a 	.word	0x3ba3198a
 801c3a8:	252049c1 	.word	0x252049c1
 801c3ac:	397b839a 	.word	0x397b839a
 801c3b0:	3fe921fb 	.word	0x3fe921fb
 801c3b4:	4002d97b 	.word	0x4002d97b
 801c3b8:	3ff921fb 	.word	0x3ff921fb
 801c3bc:	413921fb 	.word	0x413921fb
 801c3c0:	3fe00000 	.word	0x3fe00000
 801c3c4:	0801e3c8 	.word	0x0801e3c8
 801c3c8:	7fefffff 	.word	0x7fefffff
 801c3cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 801c3d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801c3d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801c3d8:	4630      	mov	r0, r6
 801c3da:	460f      	mov	r7, r1
 801c3dc:	f7e4 fbcc 	bl	8000b78 <__aeabi_d2iz>
 801c3e0:	f7e4 f8b0 	bl	8000544 <__aeabi_i2d>
 801c3e4:	4602      	mov	r2, r0
 801c3e6:	460b      	mov	r3, r1
 801c3e8:	4630      	mov	r0, r6
 801c3ea:	4639      	mov	r1, r7
 801c3ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c3f0:	f7e3 ff5a 	bl	80002a8 <__aeabi_dsub>
 801c3f4:	2200      	movs	r2, #0
 801c3f6:	4b1f      	ldr	r3, [pc, #124]	; (801c474 <__ieee754_rem_pio2+0x3dc>)
 801c3f8:	f7e4 f90e 	bl	8000618 <__aeabi_dmul>
 801c3fc:	460f      	mov	r7, r1
 801c3fe:	4606      	mov	r6, r0
 801c400:	f7e4 fbba 	bl	8000b78 <__aeabi_d2iz>
 801c404:	f7e4 f89e 	bl	8000544 <__aeabi_i2d>
 801c408:	4602      	mov	r2, r0
 801c40a:	460b      	mov	r3, r1
 801c40c:	4630      	mov	r0, r6
 801c40e:	4639      	mov	r1, r7
 801c410:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c414:	f7e3 ff48 	bl	80002a8 <__aeabi_dsub>
 801c418:	2200      	movs	r2, #0
 801c41a:	4b16      	ldr	r3, [pc, #88]	; (801c474 <__ieee754_rem_pio2+0x3dc>)
 801c41c:	f7e4 f8fc 	bl	8000618 <__aeabi_dmul>
 801c420:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c424:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801c428:	f04f 0803 	mov.w	r8, #3
 801c42c:	2600      	movs	r6, #0
 801c42e:	2700      	movs	r7, #0
 801c430:	4632      	mov	r2, r6
 801c432:	463b      	mov	r3, r7
 801c434:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801c438:	f108 3aff 	add.w	sl, r8, #4294967295
 801c43c:	f7e4 fb54 	bl	8000ae8 <__aeabi_dcmpeq>
 801c440:	b9b0      	cbnz	r0, 801c470 <__ieee754_rem_pio2+0x3d8>
 801c442:	4b0d      	ldr	r3, [pc, #52]	; (801c478 <__ieee754_rem_pio2+0x3e0>)
 801c444:	9301      	str	r3, [sp, #4]
 801c446:	2302      	movs	r3, #2
 801c448:	9300      	str	r3, [sp, #0]
 801c44a:	462a      	mov	r2, r5
 801c44c:	4643      	mov	r3, r8
 801c44e:	4621      	mov	r1, r4
 801c450:	a806      	add	r0, sp, #24
 801c452:	f000 f991 	bl	801c778 <__kernel_rem_pio2>
 801c456:	9b04      	ldr	r3, [sp, #16]
 801c458:	2b00      	cmp	r3, #0
 801c45a:	4605      	mov	r5, r0
 801c45c:	f6bf ae58 	bge.w	801c110 <__ieee754_rem_pio2+0x78>
 801c460:	6863      	ldr	r3, [r4, #4]
 801c462:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c466:	6063      	str	r3, [r4, #4]
 801c468:	68e3      	ldr	r3, [r4, #12]
 801c46a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c46e:	e746      	b.n	801c2fe <__ieee754_rem_pio2+0x266>
 801c470:	46d0      	mov	r8, sl
 801c472:	e7dd      	b.n	801c430 <__ieee754_rem_pio2+0x398>
 801c474:	41700000 	.word	0x41700000
 801c478:	0801e448 	.word	0x0801e448

0801c47c <__ieee754_sqrt>:
 801c47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c480:	4955      	ldr	r1, [pc, #340]	; (801c5d8 <__ieee754_sqrt+0x15c>)
 801c482:	ec55 4b10 	vmov	r4, r5, d0
 801c486:	43a9      	bics	r1, r5
 801c488:	462b      	mov	r3, r5
 801c48a:	462a      	mov	r2, r5
 801c48c:	d112      	bne.n	801c4b4 <__ieee754_sqrt+0x38>
 801c48e:	ee10 2a10 	vmov	r2, s0
 801c492:	ee10 0a10 	vmov	r0, s0
 801c496:	4629      	mov	r1, r5
 801c498:	f7e4 f8be 	bl	8000618 <__aeabi_dmul>
 801c49c:	4602      	mov	r2, r0
 801c49e:	460b      	mov	r3, r1
 801c4a0:	4620      	mov	r0, r4
 801c4a2:	4629      	mov	r1, r5
 801c4a4:	f7e3 ff02 	bl	80002ac <__adddf3>
 801c4a8:	4604      	mov	r4, r0
 801c4aa:	460d      	mov	r5, r1
 801c4ac:	ec45 4b10 	vmov	d0, r4, r5
 801c4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4b4:	2d00      	cmp	r5, #0
 801c4b6:	ee10 0a10 	vmov	r0, s0
 801c4ba:	4621      	mov	r1, r4
 801c4bc:	dc0f      	bgt.n	801c4de <__ieee754_sqrt+0x62>
 801c4be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c4c2:	4330      	orrs	r0, r6
 801c4c4:	d0f2      	beq.n	801c4ac <__ieee754_sqrt+0x30>
 801c4c6:	b155      	cbz	r5, 801c4de <__ieee754_sqrt+0x62>
 801c4c8:	ee10 2a10 	vmov	r2, s0
 801c4cc:	4620      	mov	r0, r4
 801c4ce:	4629      	mov	r1, r5
 801c4d0:	f7e3 feea 	bl	80002a8 <__aeabi_dsub>
 801c4d4:	4602      	mov	r2, r0
 801c4d6:	460b      	mov	r3, r1
 801c4d8:	f7e4 f9c8 	bl	800086c <__aeabi_ddiv>
 801c4dc:	e7e4      	b.n	801c4a8 <__ieee754_sqrt+0x2c>
 801c4de:	151b      	asrs	r3, r3, #20
 801c4e0:	d073      	beq.n	801c5ca <__ieee754_sqrt+0x14e>
 801c4e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c4e6:	07dd      	lsls	r5, r3, #31
 801c4e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c4ec:	bf48      	it	mi
 801c4ee:	0fc8      	lsrmi	r0, r1, #31
 801c4f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801c4f4:	bf44      	itt	mi
 801c4f6:	0049      	lslmi	r1, r1, #1
 801c4f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801c4fc:	2500      	movs	r5, #0
 801c4fe:	1058      	asrs	r0, r3, #1
 801c500:	0fcb      	lsrs	r3, r1, #31
 801c502:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801c506:	0049      	lsls	r1, r1, #1
 801c508:	2316      	movs	r3, #22
 801c50a:	462c      	mov	r4, r5
 801c50c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c510:	19a7      	adds	r7, r4, r6
 801c512:	4297      	cmp	r7, r2
 801c514:	bfde      	ittt	le
 801c516:	19bc      	addle	r4, r7, r6
 801c518:	1bd2      	suble	r2, r2, r7
 801c51a:	19ad      	addle	r5, r5, r6
 801c51c:	0fcf      	lsrs	r7, r1, #31
 801c51e:	3b01      	subs	r3, #1
 801c520:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801c524:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c528:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c52c:	d1f0      	bne.n	801c510 <__ieee754_sqrt+0x94>
 801c52e:	f04f 0c20 	mov.w	ip, #32
 801c532:	469e      	mov	lr, r3
 801c534:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c538:	42a2      	cmp	r2, r4
 801c53a:	eb06 070e 	add.w	r7, r6, lr
 801c53e:	dc02      	bgt.n	801c546 <__ieee754_sqrt+0xca>
 801c540:	d112      	bne.n	801c568 <__ieee754_sqrt+0xec>
 801c542:	428f      	cmp	r7, r1
 801c544:	d810      	bhi.n	801c568 <__ieee754_sqrt+0xec>
 801c546:	2f00      	cmp	r7, #0
 801c548:	eb07 0e06 	add.w	lr, r7, r6
 801c54c:	da42      	bge.n	801c5d4 <__ieee754_sqrt+0x158>
 801c54e:	f1be 0f00 	cmp.w	lr, #0
 801c552:	db3f      	blt.n	801c5d4 <__ieee754_sqrt+0x158>
 801c554:	f104 0801 	add.w	r8, r4, #1
 801c558:	1b12      	subs	r2, r2, r4
 801c55a:	428f      	cmp	r7, r1
 801c55c:	bf88      	it	hi
 801c55e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c562:	1bc9      	subs	r1, r1, r7
 801c564:	4433      	add	r3, r6
 801c566:	4644      	mov	r4, r8
 801c568:	0052      	lsls	r2, r2, #1
 801c56a:	f1bc 0c01 	subs.w	ip, ip, #1
 801c56e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801c572:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c576:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c57a:	d1dd      	bne.n	801c538 <__ieee754_sqrt+0xbc>
 801c57c:	430a      	orrs	r2, r1
 801c57e:	d006      	beq.n	801c58e <__ieee754_sqrt+0x112>
 801c580:	1c5c      	adds	r4, r3, #1
 801c582:	bf13      	iteet	ne
 801c584:	3301      	addne	r3, #1
 801c586:	3501      	addeq	r5, #1
 801c588:	4663      	moveq	r3, ip
 801c58a:	f023 0301 	bicne.w	r3, r3, #1
 801c58e:	106a      	asrs	r2, r5, #1
 801c590:	085b      	lsrs	r3, r3, #1
 801c592:	07e9      	lsls	r1, r5, #31
 801c594:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c598:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c59c:	bf48      	it	mi
 801c59e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c5a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801c5a6:	461c      	mov	r4, r3
 801c5a8:	e780      	b.n	801c4ac <__ieee754_sqrt+0x30>
 801c5aa:	0aca      	lsrs	r2, r1, #11
 801c5ac:	3815      	subs	r0, #21
 801c5ae:	0549      	lsls	r1, r1, #21
 801c5b0:	2a00      	cmp	r2, #0
 801c5b2:	d0fa      	beq.n	801c5aa <__ieee754_sqrt+0x12e>
 801c5b4:	02d6      	lsls	r6, r2, #11
 801c5b6:	d50a      	bpl.n	801c5ce <__ieee754_sqrt+0x152>
 801c5b8:	f1c3 0420 	rsb	r4, r3, #32
 801c5bc:	fa21 f404 	lsr.w	r4, r1, r4
 801c5c0:	1e5d      	subs	r5, r3, #1
 801c5c2:	4099      	lsls	r1, r3
 801c5c4:	4322      	orrs	r2, r4
 801c5c6:	1b43      	subs	r3, r0, r5
 801c5c8:	e78b      	b.n	801c4e2 <__ieee754_sqrt+0x66>
 801c5ca:	4618      	mov	r0, r3
 801c5cc:	e7f0      	b.n	801c5b0 <__ieee754_sqrt+0x134>
 801c5ce:	0052      	lsls	r2, r2, #1
 801c5d0:	3301      	adds	r3, #1
 801c5d2:	e7ef      	b.n	801c5b4 <__ieee754_sqrt+0x138>
 801c5d4:	46a0      	mov	r8, r4
 801c5d6:	e7bf      	b.n	801c558 <__ieee754_sqrt+0xdc>
 801c5d8:	7ff00000 	.word	0x7ff00000

0801c5dc <__ieee754_sqrtf>:
 801c5dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c5e0:	4770      	bx	lr
 801c5e2:	0000      	movs	r0, r0
 801c5e4:	0000      	movs	r0, r0
	...

0801c5e8 <__kernel_cos>:
 801c5e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5ec:	ec59 8b10 	vmov	r8, r9, d0
 801c5f0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801c5f4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801c5f8:	ed2d 8b02 	vpush	{d8}
 801c5fc:	eeb0 8a41 	vmov.f32	s16, s2
 801c600:	eef0 8a61 	vmov.f32	s17, s3
 801c604:	da07      	bge.n	801c616 <__kernel_cos+0x2e>
 801c606:	ee10 0a10 	vmov	r0, s0
 801c60a:	4649      	mov	r1, r9
 801c60c:	f7e4 fab4 	bl	8000b78 <__aeabi_d2iz>
 801c610:	2800      	cmp	r0, #0
 801c612:	f000 8089 	beq.w	801c728 <__kernel_cos+0x140>
 801c616:	4642      	mov	r2, r8
 801c618:	464b      	mov	r3, r9
 801c61a:	4640      	mov	r0, r8
 801c61c:	4649      	mov	r1, r9
 801c61e:	f7e3 fffb 	bl	8000618 <__aeabi_dmul>
 801c622:	2200      	movs	r2, #0
 801c624:	4b4e      	ldr	r3, [pc, #312]	; (801c760 <__kernel_cos+0x178>)
 801c626:	4604      	mov	r4, r0
 801c628:	460d      	mov	r5, r1
 801c62a:	f7e3 fff5 	bl	8000618 <__aeabi_dmul>
 801c62e:	a340      	add	r3, pc, #256	; (adr r3, 801c730 <__kernel_cos+0x148>)
 801c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c634:	4682      	mov	sl, r0
 801c636:	468b      	mov	fp, r1
 801c638:	4620      	mov	r0, r4
 801c63a:	4629      	mov	r1, r5
 801c63c:	f7e3 ffec 	bl	8000618 <__aeabi_dmul>
 801c640:	a33d      	add	r3, pc, #244	; (adr r3, 801c738 <__kernel_cos+0x150>)
 801c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c646:	f7e3 fe31 	bl	80002ac <__adddf3>
 801c64a:	4622      	mov	r2, r4
 801c64c:	462b      	mov	r3, r5
 801c64e:	f7e3 ffe3 	bl	8000618 <__aeabi_dmul>
 801c652:	a33b      	add	r3, pc, #236	; (adr r3, 801c740 <__kernel_cos+0x158>)
 801c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c658:	f7e3 fe26 	bl	80002a8 <__aeabi_dsub>
 801c65c:	4622      	mov	r2, r4
 801c65e:	462b      	mov	r3, r5
 801c660:	f7e3 ffda 	bl	8000618 <__aeabi_dmul>
 801c664:	a338      	add	r3, pc, #224	; (adr r3, 801c748 <__kernel_cos+0x160>)
 801c666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c66a:	f7e3 fe1f 	bl	80002ac <__adddf3>
 801c66e:	4622      	mov	r2, r4
 801c670:	462b      	mov	r3, r5
 801c672:	f7e3 ffd1 	bl	8000618 <__aeabi_dmul>
 801c676:	a336      	add	r3, pc, #216	; (adr r3, 801c750 <__kernel_cos+0x168>)
 801c678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c67c:	f7e3 fe14 	bl	80002a8 <__aeabi_dsub>
 801c680:	4622      	mov	r2, r4
 801c682:	462b      	mov	r3, r5
 801c684:	f7e3 ffc8 	bl	8000618 <__aeabi_dmul>
 801c688:	a333      	add	r3, pc, #204	; (adr r3, 801c758 <__kernel_cos+0x170>)
 801c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c68e:	f7e3 fe0d 	bl	80002ac <__adddf3>
 801c692:	4622      	mov	r2, r4
 801c694:	462b      	mov	r3, r5
 801c696:	f7e3 ffbf 	bl	8000618 <__aeabi_dmul>
 801c69a:	4622      	mov	r2, r4
 801c69c:	462b      	mov	r3, r5
 801c69e:	f7e3 ffbb 	bl	8000618 <__aeabi_dmul>
 801c6a2:	ec53 2b18 	vmov	r2, r3, d8
 801c6a6:	4604      	mov	r4, r0
 801c6a8:	460d      	mov	r5, r1
 801c6aa:	4640      	mov	r0, r8
 801c6ac:	4649      	mov	r1, r9
 801c6ae:	f7e3 ffb3 	bl	8000618 <__aeabi_dmul>
 801c6b2:	460b      	mov	r3, r1
 801c6b4:	4602      	mov	r2, r0
 801c6b6:	4629      	mov	r1, r5
 801c6b8:	4620      	mov	r0, r4
 801c6ba:	f7e3 fdf5 	bl	80002a8 <__aeabi_dsub>
 801c6be:	4b29      	ldr	r3, [pc, #164]	; (801c764 <__kernel_cos+0x17c>)
 801c6c0:	429e      	cmp	r6, r3
 801c6c2:	4680      	mov	r8, r0
 801c6c4:	4689      	mov	r9, r1
 801c6c6:	dc11      	bgt.n	801c6ec <__kernel_cos+0x104>
 801c6c8:	4602      	mov	r2, r0
 801c6ca:	460b      	mov	r3, r1
 801c6cc:	4650      	mov	r0, sl
 801c6ce:	4659      	mov	r1, fp
 801c6d0:	f7e3 fdea 	bl	80002a8 <__aeabi_dsub>
 801c6d4:	460b      	mov	r3, r1
 801c6d6:	4924      	ldr	r1, [pc, #144]	; (801c768 <__kernel_cos+0x180>)
 801c6d8:	4602      	mov	r2, r0
 801c6da:	2000      	movs	r0, #0
 801c6dc:	f7e3 fde4 	bl	80002a8 <__aeabi_dsub>
 801c6e0:	ecbd 8b02 	vpop	{d8}
 801c6e4:	ec41 0b10 	vmov	d0, r0, r1
 801c6e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ec:	4b1f      	ldr	r3, [pc, #124]	; (801c76c <__kernel_cos+0x184>)
 801c6ee:	491e      	ldr	r1, [pc, #120]	; (801c768 <__kernel_cos+0x180>)
 801c6f0:	429e      	cmp	r6, r3
 801c6f2:	bfcc      	ite	gt
 801c6f4:	4d1e      	ldrgt	r5, [pc, #120]	; (801c770 <__kernel_cos+0x188>)
 801c6f6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801c6fa:	2400      	movs	r4, #0
 801c6fc:	4622      	mov	r2, r4
 801c6fe:	462b      	mov	r3, r5
 801c700:	2000      	movs	r0, #0
 801c702:	f7e3 fdd1 	bl	80002a8 <__aeabi_dsub>
 801c706:	4622      	mov	r2, r4
 801c708:	4606      	mov	r6, r0
 801c70a:	460f      	mov	r7, r1
 801c70c:	462b      	mov	r3, r5
 801c70e:	4650      	mov	r0, sl
 801c710:	4659      	mov	r1, fp
 801c712:	f7e3 fdc9 	bl	80002a8 <__aeabi_dsub>
 801c716:	4642      	mov	r2, r8
 801c718:	464b      	mov	r3, r9
 801c71a:	f7e3 fdc5 	bl	80002a8 <__aeabi_dsub>
 801c71e:	4602      	mov	r2, r0
 801c720:	460b      	mov	r3, r1
 801c722:	4630      	mov	r0, r6
 801c724:	4639      	mov	r1, r7
 801c726:	e7d9      	b.n	801c6dc <__kernel_cos+0xf4>
 801c728:	2000      	movs	r0, #0
 801c72a:	490f      	ldr	r1, [pc, #60]	; (801c768 <__kernel_cos+0x180>)
 801c72c:	e7d8      	b.n	801c6e0 <__kernel_cos+0xf8>
 801c72e:	bf00      	nop
 801c730:	be8838d4 	.word	0xbe8838d4
 801c734:	bda8fae9 	.word	0xbda8fae9
 801c738:	bdb4b1c4 	.word	0xbdb4b1c4
 801c73c:	3e21ee9e 	.word	0x3e21ee9e
 801c740:	809c52ad 	.word	0x809c52ad
 801c744:	3e927e4f 	.word	0x3e927e4f
 801c748:	19cb1590 	.word	0x19cb1590
 801c74c:	3efa01a0 	.word	0x3efa01a0
 801c750:	16c15177 	.word	0x16c15177
 801c754:	3f56c16c 	.word	0x3f56c16c
 801c758:	5555554c 	.word	0x5555554c
 801c75c:	3fa55555 	.word	0x3fa55555
 801c760:	3fe00000 	.word	0x3fe00000
 801c764:	3fd33332 	.word	0x3fd33332
 801c768:	3ff00000 	.word	0x3ff00000
 801c76c:	3fe90000 	.word	0x3fe90000
 801c770:	3fd20000 	.word	0x3fd20000
 801c774:	00000000 	.word	0x00000000

0801c778 <__kernel_rem_pio2>:
 801c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c77c:	ed2d 8b02 	vpush	{d8}
 801c780:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801c784:	1ed4      	subs	r4, r2, #3
 801c786:	9308      	str	r3, [sp, #32]
 801c788:	9101      	str	r1, [sp, #4]
 801c78a:	4bc5      	ldr	r3, [pc, #788]	; (801caa0 <__kernel_rem_pio2+0x328>)
 801c78c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801c78e:	9009      	str	r0, [sp, #36]	; 0x24
 801c790:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c794:	9304      	str	r3, [sp, #16]
 801c796:	9b08      	ldr	r3, [sp, #32]
 801c798:	3b01      	subs	r3, #1
 801c79a:	9307      	str	r3, [sp, #28]
 801c79c:	2318      	movs	r3, #24
 801c79e:	fb94 f4f3 	sdiv	r4, r4, r3
 801c7a2:	f06f 0317 	mvn.w	r3, #23
 801c7a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801c7aa:	fb04 3303 	mla	r3, r4, r3, r3
 801c7ae:	eb03 0a02 	add.w	sl, r3, r2
 801c7b2:	9b04      	ldr	r3, [sp, #16]
 801c7b4:	9a07      	ldr	r2, [sp, #28]
 801c7b6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801ca90 <__kernel_rem_pio2+0x318>
 801c7ba:	eb03 0802 	add.w	r8, r3, r2
 801c7be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801c7c0:	1aa7      	subs	r7, r4, r2
 801c7c2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801c7c6:	ae22      	add	r6, sp, #136	; 0x88
 801c7c8:	2500      	movs	r5, #0
 801c7ca:	4545      	cmp	r5, r8
 801c7cc:	dd13      	ble.n	801c7f6 <__kernel_rem_pio2+0x7e>
 801c7ce:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801ca90 <__kernel_rem_pio2+0x318>
 801c7d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801c7d6:	2600      	movs	r6, #0
 801c7d8:	9b04      	ldr	r3, [sp, #16]
 801c7da:	429e      	cmp	r6, r3
 801c7dc:	dc32      	bgt.n	801c844 <__kernel_rem_pio2+0xcc>
 801c7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7e0:	9302      	str	r3, [sp, #8]
 801c7e2:	9b08      	ldr	r3, [sp, #32]
 801c7e4:	199d      	adds	r5, r3, r6
 801c7e6:	ab22      	add	r3, sp, #136	; 0x88
 801c7e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c7ec:	9306      	str	r3, [sp, #24]
 801c7ee:	ec59 8b18 	vmov	r8, r9, d8
 801c7f2:	2700      	movs	r7, #0
 801c7f4:	e01f      	b.n	801c836 <__kernel_rem_pio2+0xbe>
 801c7f6:	42ef      	cmn	r7, r5
 801c7f8:	d407      	bmi.n	801c80a <__kernel_rem_pio2+0x92>
 801c7fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801c7fe:	f7e3 fea1 	bl	8000544 <__aeabi_i2d>
 801c802:	e8e6 0102 	strd	r0, r1, [r6], #8
 801c806:	3501      	adds	r5, #1
 801c808:	e7df      	b.n	801c7ca <__kernel_rem_pio2+0x52>
 801c80a:	ec51 0b18 	vmov	r0, r1, d8
 801c80e:	e7f8      	b.n	801c802 <__kernel_rem_pio2+0x8a>
 801c810:	9906      	ldr	r1, [sp, #24]
 801c812:	9d02      	ldr	r5, [sp, #8]
 801c814:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801c818:	9106      	str	r1, [sp, #24]
 801c81a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801c81e:	9502      	str	r5, [sp, #8]
 801c820:	f7e3 fefa 	bl	8000618 <__aeabi_dmul>
 801c824:	4602      	mov	r2, r0
 801c826:	460b      	mov	r3, r1
 801c828:	4640      	mov	r0, r8
 801c82a:	4649      	mov	r1, r9
 801c82c:	f7e3 fd3e 	bl	80002ac <__adddf3>
 801c830:	3701      	adds	r7, #1
 801c832:	4680      	mov	r8, r0
 801c834:	4689      	mov	r9, r1
 801c836:	9b07      	ldr	r3, [sp, #28]
 801c838:	429f      	cmp	r7, r3
 801c83a:	dde9      	ble.n	801c810 <__kernel_rem_pio2+0x98>
 801c83c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801c840:	3601      	adds	r6, #1
 801c842:	e7c9      	b.n	801c7d8 <__kernel_rem_pio2+0x60>
 801c844:	9b04      	ldr	r3, [sp, #16]
 801c846:	aa0e      	add	r2, sp, #56	; 0x38
 801c848:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c84c:	930c      	str	r3, [sp, #48]	; 0x30
 801c84e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801c850:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801c854:	9c04      	ldr	r4, [sp, #16]
 801c856:	930b      	str	r3, [sp, #44]	; 0x2c
 801c858:	ab9a      	add	r3, sp, #616	; 0x268
 801c85a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801c85e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c862:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c866:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801c86a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801c86e:	ab9a      	add	r3, sp, #616	; 0x268
 801c870:	445b      	add	r3, fp
 801c872:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801c876:	2500      	movs	r5, #0
 801c878:	1b63      	subs	r3, r4, r5
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	dc78      	bgt.n	801c970 <__kernel_rem_pio2+0x1f8>
 801c87e:	4650      	mov	r0, sl
 801c880:	ec49 8b10 	vmov	d0, r8, r9
 801c884:	f000 fe3c 	bl	801d500 <scalbn>
 801c888:	ec57 6b10 	vmov	r6, r7, d0
 801c88c:	2200      	movs	r2, #0
 801c88e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801c892:	ee10 0a10 	vmov	r0, s0
 801c896:	4639      	mov	r1, r7
 801c898:	f7e3 febe 	bl	8000618 <__aeabi_dmul>
 801c89c:	ec41 0b10 	vmov	d0, r0, r1
 801c8a0:	f000 fd1a 	bl	801d2d8 <floor>
 801c8a4:	2200      	movs	r2, #0
 801c8a6:	ec51 0b10 	vmov	r0, r1, d0
 801c8aa:	4b7e      	ldr	r3, [pc, #504]	; (801caa4 <__kernel_rem_pio2+0x32c>)
 801c8ac:	f7e3 feb4 	bl	8000618 <__aeabi_dmul>
 801c8b0:	4602      	mov	r2, r0
 801c8b2:	460b      	mov	r3, r1
 801c8b4:	4630      	mov	r0, r6
 801c8b6:	4639      	mov	r1, r7
 801c8b8:	f7e3 fcf6 	bl	80002a8 <__aeabi_dsub>
 801c8bc:	460f      	mov	r7, r1
 801c8be:	4606      	mov	r6, r0
 801c8c0:	f7e4 f95a 	bl	8000b78 <__aeabi_d2iz>
 801c8c4:	9006      	str	r0, [sp, #24]
 801c8c6:	f7e3 fe3d 	bl	8000544 <__aeabi_i2d>
 801c8ca:	4602      	mov	r2, r0
 801c8cc:	460b      	mov	r3, r1
 801c8ce:	4630      	mov	r0, r6
 801c8d0:	4639      	mov	r1, r7
 801c8d2:	f7e3 fce9 	bl	80002a8 <__aeabi_dsub>
 801c8d6:	f1ba 0f00 	cmp.w	sl, #0
 801c8da:	4606      	mov	r6, r0
 801c8dc:	460f      	mov	r7, r1
 801c8de:	dd6c      	ble.n	801c9ba <__kernel_rem_pio2+0x242>
 801c8e0:	1e62      	subs	r2, r4, #1
 801c8e2:	ab0e      	add	r3, sp, #56	; 0x38
 801c8e4:	f1ca 0118 	rsb	r1, sl, #24
 801c8e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c8ec:	9d06      	ldr	r5, [sp, #24]
 801c8ee:	fa40 f301 	asr.w	r3, r0, r1
 801c8f2:	441d      	add	r5, r3
 801c8f4:	408b      	lsls	r3, r1
 801c8f6:	1ac0      	subs	r0, r0, r3
 801c8f8:	ab0e      	add	r3, sp, #56	; 0x38
 801c8fa:	9506      	str	r5, [sp, #24]
 801c8fc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801c900:	f1ca 0317 	rsb	r3, sl, #23
 801c904:	fa40 f303 	asr.w	r3, r0, r3
 801c908:	9302      	str	r3, [sp, #8]
 801c90a:	9b02      	ldr	r3, [sp, #8]
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	dd62      	ble.n	801c9d6 <__kernel_rem_pio2+0x25e>
 801c910:	9b06      	ldr	r3, [sp, #24]
 801c912:	2200      	movs	r2, #0
 801c914:	3301      	adds	r3, #1
 801c916:	9306      	str	r3, [sp, #24]
 801c918:	4615      	mov	r5, r2
 801c91a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801c91e:	4294      	cmp	r4, r2
 801c920:	f300 8095 	bgt.w	801ca4e <__kernel_rem_pio2+0x2d6>
 801c924:	f1ba 0f00 	cmp.w	sl, #0
 801c928:	dd07      	ble.n	801c93a <__kernel_rem_pio2+0x1c2>
 801c92a:	f1ba 0f01 	cmp.w	sl, #1
 801c92e:	f000 80a2 	beq.w	801ca76 <__kernel_rem_pio2+0x2fe>
 801c932:	f1ba 0f02 	cmp.w	sl, #2
 801c936:	f000 80c1 	beq.w	801cabc <__kernel_rem_pio2+0x344>
 801c93a:	9b02      	ldr	r3, [sp, #8]
 801c93c:	2b02      	cmp	r3, #2
 801c93e:	d14a      	bne.n	801c9d6 <__kernel_rem_pio2+0x25e>
 801c940:	4632      	mov	r2, r6
 801c942:	463b      	mov	r3, r7
 801c944:	2000      	movs	r0, #0
 801c946:	4958      	ldr	r1, [pc, #352]	; (801caa8 <__kernel_rem_pio2+0x330>)
 801c948:	f7e3 fcae 	bl	80002a8 <__aeabi_dsub>
 801c94c:	4606      	mov	r6, r0
 801c94e:	460f      	mov	r7, r1
 801c950:	2d00      	cmp	r5, #0
 801c952:	d040      	beq.n	801c9d6 <__kernel_rem_pio2+0x25e>
 801c954:	4650      	mov	r0, sl
 801c956:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801ca98 <__kernel_rem_pio2+0x320>
 801c95a:	f000 fdd1 	bl	801d500 <scalbn>
 801c95e:	4630      	mov	r0, r6
 801c960:	4639      	mov	r1, r7
 801c962:	ec53 2b10 	vmov	r2, r3, d0
 801c966:	f7e3 fc9f 	bl	80002a8 <__aeabi_dsub>
 801c96a:	4606      	mov	r6, r0
 801c96c:	460f      	mov	r7, r1
 801c96e:	e032      	b.n	801c9d6 <__kernel_rem_pio2+0x25e>
 801c970:	2200      	movs	r2, #0
 801c972:	4b4e      	ldr	r3, [pc, #312]	; (801caac <__kernel_rem_pio2+0x334>)
 801c974:	4640      	mov	r0, r8
 801c976:	4649      	mov	r1, r9
 801c978:	f7e3 fe4e 	bl	8000618 <__aeabi_dmul>
 801c97c:	f7e4 f8fc 	bl	8000b78 <__aeabi_d2iz>
 801c980:	f7e3 fde0 	bl	8000544 <__aeabi_i2d>
 801c984:	2200      	movs	r2, #0
 801c986:	4b4a      	ldr	r3, [pc, #296]	; (801cab0 <__kernel_rem_pio2+0x338>)
 801c988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c98c:	f7e3 fe44 	bl	8000618 <__aeabi_dmul>
 801c990:	4602      	mov	r2, r0
 801c992:	460b      	mov	r3, r1
 801c994:	4640      	mov	r0, r8
 801c996:	4649      	mov	r1, r9
 801c998:	f7e3 fc86 	bl	80002a8 <__aeabi_dsub>
 801c99c:	f7e4 f8ec 	bl	8000b78 <__aeabi_d2iz>
 801c9a0:	ab0e      	add	r3, sp, #56	; 0x38
 801c9a2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801c9a6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801c9aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c9ae:	f7e3 fc7d 	bl	80002ac <__adddf3>
 801c9b2:	3501      	adds	r5, #1
 801c9b4:	4680      	mov	r8, r0
 801c9b6:	4689      	mov	r9, r1
 801c9b8:	e75e      	b.n	801c878 <__kernel_rem_pio2+0x100>
 801c9ba:	d105      	bne.n	801c9c8 <__kernel_rem_pio2+0x250>
 801c9bc:	1e63      	subs	r3, r4, #1
 801c9be:	aa0e      	add	r2, sp, #56	; 0x38
 801c9c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801c9c4:	15c3      	asrs	r3, r0, #23
 801c9c6:	e79f      	b.n	801c908 <__kernel_rem_pio2+0x190>
 801c9c8:	2200      	movs	r2, #0
 801c9ca:	4b3a      	ldr	r3, [pc, #232]	; (801cab4 <__kernel_rem_pio2+0x33c>)
 801c9cc:	f7e4 f8aa 	bl	8000b24 <__aeabi_dcmpge>
 801c9d0:	2800      	cmp	r0, #0
 801c9d2:	d139      	bne.n	801ca48 <__kernel_rem_pio2+0x2d0>
 801c9d4:	9002      	str	r0, [sp, #8]
 801c9d6:	2200      	movs	r2, #0
 801c9d8:	2300      	movs	r3, #0
 801c9da:	4630      	mov	r0, r6
 801c9dc:	4639      	mov	r1, r7
 801c9de:	f7e4 f883 	bl	8000ae8 <__aeabi_dcmpeq>
 801c9e2:	2800      	cmp	r0, #0
 801c9e4:	f000 80c7 	beq.w	801cb76 <__kernel_rem_pio2+0x3fe>
 801c9e8:	1e65      	subs	r5, r4, #1
 801c9ea:	462b      	mov	r3, r5
 801c9ec:	2200      	movs	r2, #0
 801c9ee:	9904      	ldr	r1, [sp, #16]
 801c9f0:	428b      	cmp	r3, r1
 801c9f2:	da6a      	bge.n	801caca <__kernel_rem_pio2+0x352>
 801c9f4:	2a00      	cmp	r2, #0
 801c9f6:	f000 8088 	beq.w	801cb0a <__kernel_rem_pio2+0x392>
 801c9fa:	ab0e      	add	r3, sp, #56	; 0x38
 801c9fc:	f1aa 0a18 	sub.w	sl, sl, #24
 801ca00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	f000 80b4 	beq.w	801cb72 <__kernel_rem_pio2+0x3fa>
 801ca0a:	4650      	mov	r0, sl
 801ca0c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801ca98 <__kernel_rem_pio2+0x320>
 801ca10:	f000 fd76 	bl	801d500 <scalbn>
 801ca14:	00ec      	lsls	r4, r5, #3
 801ca16:	ab72      	add	r3, sp, #456	; 0x1c8
 801ca18:	191e      	adds	r6, r3, r4
 801ca1a:	ec59 8b10 	vmov	r8, r9, d0
 801ca1e:	f106 0a08 	add.w	sl, r6, #8
 801ca22:	462f      	mov	r7, r5
 801ca24:	2f00      	cmp	r7, #0
 801ca26:	f280 80df 	bge.w	801cbe8 <__kernel_rem_pio2+0x470>
 801ca2a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801ca90 <__kernel_rem_pio2+0x318>
 801ca2e:	f04f 0a00 	mov.w	sl, #0
 801ca32:	eba5 030a 	sub.w	r3, r5, sl
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	f2c0 810a 	blt.w	801cc50 <__kernel_rem_pio2+0x4d8>
 801ca3c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801cab8 <__kernel_rem_pio2+0x340>
 801ca40:	ec59 8b18 	vmov	r8, r9, d8
 801ca44:	2700      	movs	r7, #0
 801ca46:	e0f5      	b.n	801cc34 <__kernel_rem_pio2+0x4bc>
 801ca48:	2302      	movs	r3, #2
 801ca4a:	9302      	str	r3, [sp, #8]
 801ca4c:	e760      	b.n	801c910 <__kernel_rem_pio2+0x198>
 801ca4e:	ab0e      	add	r3, sp, #56	; 0x38
 801ca50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca54:	b94d      	cbnz	r5, 801ca6a <__kernel_rem_pio2+0x2f2>
 801ca56:	b12b      	cbz	r3, 801ca64 <__kernel_rem_pio2+0x2ec>
 801ca58:	a80e      	add	r0, sp, #56	; 0x38
 801ca5a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801ca5e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801ca62:	2301      	movs	r3, #1
 801ca64:	3201      	adds	r2, #1
 801ca66:	461d      	mov	r5, r3
 801ca68:	e759      	b.n	801c91e <__kernel_rem_pio2+0x1a6>
 801ca6a:	a80e      	add	r0, sp, #56	; 0x38
 801ca6c:	1acb      	subs	r3, r1, r3
 801ca6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801ca72:	462b      	mov	r3, r5
 801ca74:	e7f6      	b.n	801ca64 <__kernel_rem_pio2+0x2ec>
 801ca76:	1e62      	subs	r2, r4, #1
 801ca78:	ab0e      	add	r3, sp, #56	; 0x38
 801ca7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca7e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801ca82:	a90e      	add	r1, sp, #56	; 0x38
 801ca84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801ca88:	e757      	b.n	801c93a <__kernel_rem_pio2+0x1c2>
 801ca8a:	bf00      	nop
 801ca8c:	f3af 8000 	nop.w
	...
 801ca9c:	3ff00000 	.word	0x3ff00000
 801caa0:	0801e590 	.word	0x0801e590
 801caa4:	40200000 	.word	0x40200000
 801caa8:	3ff00000 	.word	0x3ff00000
 801caac:	3e700000 	.word	0x3e700000
 801cab0:	41700000 	.word	0x41700000
 801cab4:	3fe00000 	.word	0x3fe00000
 801cab8:	0801e550 	.word	0x0801e550
 801cabc:	1e62      	subs	r2, r4, #1
 801cabe:	ab0e      	add	r3, sp, #56	; 0x38
 801cac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cac4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801cac8:	e7db      	b.n	801ca82 <__kernel_rem_pio2+0x30a>
 801caca:	a90e      	add	r1, sp, #56	; 0x38
 801cacc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801cad0:	3b01      	subs	r3, #1
 801cad2:	430a      	orrs	r2, r1
 801cad4:	e78b      	b.n	801c9ee <__kernel_rem_pio2+0x276>
 801cad6:	3301      	adds	r3, #1
 801cad8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801cadc:	2900      	cmp	r1, #0
 801cade:	d0fa      	beq.n	801cad6 <__kernel_rem_pio2+0x35e>
 801cae0:	9a08      	ldr	r2, [sp, #32]
 801cae2:	4422      	add	r2, r4
 801cae4:	00d2      	lsls	r2, r2, #3
 801cae6:	a922      	add	r1, sp, #136	; 0x88
 801cae8:	18e3      	adds	r3, r4, r3
 801caea:	9206      	str	r2, [sp, #24]
 801caec:	440a      	add	r2, r1
 801caee:	9302      	str	r3, [sp, #8]
 801caf0:	f10b 0108 	add.w	r1, fp, #8
 801caf4:	f102 0308 	add.w	r3, r2, #8
 801caf8:	1c66      	adds	r6, r4, #1
 801cafa:	910a      	str	r1, [sp, #40]	; 0x28
 801cafc:	2500      	movs	r5, #0
 801cafe:	930d      	str	r3, [sp, #52]	; 0x34
 801cb00:	9b02      	ldr	r3, [sp, #8]
 801cb02:	42b3      	cmp	r3, r6
 801cb04:	da04      	bge.n	801cb10 <__kernel_rem_pio2+0x398>
 801cb06:	461c      	mov	r4, r3
 801cb08:	e6a6      	b.n	801c858 <__kernel_rem_pio2+0xe0>
 801cb0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cb0c:	2301      	movs	r3, #1
 801cb0e:	e7e3      	b.n	801cad8 <__kernel_rem_pio2+0x360>
 801cb10:	9b06      	ldr	r3, [sp, #24]
 801cb12:	18ef      	adds	r7, r5, r3
 801cb14:	ab22      	add	r3, sp, #136	; 0x88
 801cb16:	441f      	add	r7, r3
 801cb18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb1a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801cb1e:	f7e3 fd11 	bl	8000544 <__aeabi_i2d>
 801cb22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb24:	461c      	mov	r4, r3
 801cb26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb28:	e9c7 0100 	strd	r0, r1, [r7]
 801cb2c:	eb03 0b05 	add.w	fp, r3, r5
 801cb30:	2700      	movs	r7, #0
 801cb32:	f04f 0800 	mov.w	r8, #0
 801cb36:	f04f 0900 	mov.w	r9, #0
 801cb3a:	9b07      	ldr	r3, [sp, #28]
 801cb3c:	429f      	cmp	r7, r3
 801cb3e:	dd08      	ble.n	801cb52 <__kernel_rem_pio2+0x3da>
 801cb40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb42:	aa72      	add	r2, sp, #456	; 0x1c8
 801cb44:	18eb      	adds	r3, r5, r3
 801cb46:	4413      	add	r3, r2
 801cb48:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801cb4c:	3601      	adds	r6, #1
 801cb4e:	3508      	adds	r5, #8
 801cb50:	e7d6      	b.n	801cb00 <__kernel_rem_pio2+0x388>
 801cb52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801cb56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801cb5a:	f7e3 fd5d 	bl	8000618 <__aeabi_dmul>
 801cb5e:	4602      	mov	r2, r0
 801cb60:	460b      	mov	r3, r1
 801cb62:	4640      	mov	r0, r8
 801cb64:	4649      	mov	r1, r9
 801cb66:	f7e3 fba1 	bl	80002ac <__adddf3>
 801cb6a:	3701      	adds	r7, #1
 801cb6c:	4680      	mov	r8, r0
 801cb6e:	4689      	mov	r9, r1
 801cb70:	e7e3      	b.n	801cb3a <__kernel_rem_pio2+0x3c2>
 801cb72:	3d01      	subs	r5, #1
 801cb74:	e741      	b.n	801c9fa <__kernel_rem_pio2+0x282>
 801cb76:	f1ca 0000 	rsb	r0, sl, #0
 801cb7a:	ec47 6b10 	vmov	d0, r6, r7
 801cb7e:	f000 fcbf 	bl	801d500 <scalbn>
 801cb82:	ec57 6b10 	vmov	r6, r7, d0
 801cb86:	2200      	movs	r2, #0
 801cb88:	4b99      	ldr	r3, [pc, #612]	; (801cdf0 <__kernel_rem_pio2+0x678>)
 801cb8a:	ee10 0a10 	vmov	r0, s0
 801cb8e:	4639      	mov	r1, r7
 801cb90:	f7e3 ffc8 	bl	8000b24 <__aeabi_dcmpge>
 801cb94:	b1f8      	cbz	r0, 801cbd6 <__kernel_rem_pio2+0x45e>
 801cb96:	2200      	movs	r2, #0
 801cb98:	4b96      	ldr	r3, [pc, #600]	; (801cdf4 <__kernel_rem_pio2+0x67c>)
 801cb9a:	4630      	mov	r0, r6
 801cb9c:	4639      	mov	r1, r7
 801cb9e:	f7e3 fd3b 	bl	8000618 <__aeabi_dmul>
 801cba2:	f7e3 ffe9 	bl	8000b78 <__aeabi_d2iz>
 801cba6:	4680      	mov	r8, r0
 801cba8:	f7e3 fccc 	bl	8000544 <__aeabi_i2d>
 801cbac:	2200      	movs	r2, #0
 801cbae:	4b90      	ldr	r3, [pc, #576]	; (801cdf0 <__kernel_rem_pio2+0x678>)
 801cbb0:	f7e3 fd32 	bl	8000618 <__aeabi_dmul>
 801cbb4:	460b      	mov	r3, r1
 801cbb6:	4602      	mov	r2, r0
 801cbb8:	4639      	mov	r1, r7
 801cbba:	4630      	mov	r0, r6
 801cbbc:	f7e3 fb74 	bl	80002a8 <__aeabi_dsub>
 801cbc0:	f7e3 ffda 	bl	8000b78 <__aeabi_d2iz>
 801cbc4:	1c65      	adds	r5, r4, #1
 801cbc6:	ab0e      	add	r3, sp, #56	; 0x38
 801cbc8:	f10a 0a18 	add.w	sl, sl, #24
 801cbcc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801cbd0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801cbd4:	e719      	b.n	801ca0a <__kernel_rem_pio2+0x292>
 801cbd6:	4630      	mov	r0, r6
 801cbd8:	4639      	mov	r1, r7
 801cbda:	f7e3 ffcd 	bl	8000b78 <__aeabi_d2iz>
 801cbde:	ab0e      	add	r3, sp, #56	; 0x38
 801cbe0:	4625      	mov	r5, r4
 801cbe2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801cbe6:	e710      	b.n	801ca0a <__kernel_rem_pio2+0x292>
 801cbe8:	ab0e      	add	r3, sp, #56	; 0x38
 801cbea:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801cbee:	f7e3 fca9 	bl	8000544 <__aeabi_i2d>
 801cbf2:	4642      	mov	r2, r8
 801cbf4:	464b      	mov	r3, r9
 801cbf6:	f7e3 fd0f 	bl	8000618 <__aeabi_dmul>
 801cbfa:	2200      	movs	r2, #0
 801cbfc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801cc00:	4b7c      	ldr	r3, [pc, #496]	; (801cdf4 <__kernel_rem_pio2+0x67c>)
 801cc02:	4640      	mov	r0, r8
 801cc04:	4649      	mov	r1, r9
 801cc06:	f7e3 fd07 	bl	8000618 <__aeabi_dmul>
 801cc0a:	3f01      	subs	r7, #1
 801cc0c:	4680      	mov	r8, r0
 801cc0e:	4689      	mov	r9, r1
 801cc10:	e708      	b.n	801ca24 <__kernel_rem_pio2+0x2ac>
 801cc12:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc1a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801cc1e:	f7e3 fcfb 	bl	8000618 <__aeabi_dmul>
 801cc22:	4602      	mov	r2, r0
 801cc24:	460b      	mov	r3, r1
 801cc26:	4640      	mov	r0, r8
 801cc28:	4649      	mov	r1, r9
 801cc2a:	f7e3 fb3f 	bl	80002ac <__adddf3>
 801cc2e:	3701      	adds	r7, #1
 801cc30:	4680      	mov	r8, r0
 801cc32:	4689      	mov	r9, r1
 801cc34:	9b04      	ldr	r3, [sp, #16]
 801cc36:	429f      	cmp	r7, r3
 801cc38:	dc01      	bgt.n	801cc3e <__kernel_rem_pio2+0x4c6>
 801cc3a:	45ba      	cmp	sl, r7
 801cc3c:	dae9      	bge.n	801cc12 <__kernel_rem_pio2+0x49a>
 801cc3e:	ab4a      	add	r3, sp, #296	; 0x128
 801cc40:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801cc44:	e9c3 8900 	strd	r8, r9, [r3]
 801cc48:	f10a 0a01 	add.w	sl, sl, #1
 801cc4c:	3e08      	subs	r6, #8
 801cc4e:	e6f0      	b.n	801ca32 <__kernel_rem_pio2+0x2ba>
 801cc50:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801cc52:	2b03      	cmp	r3, #3
 801cc54:	d85b      	bhi.n	801cd0e <__kernel_rem_pio2+0x596>
 801cc56:	e8df f003 	tbb	[pc, r3]
 801cc5a:	264a      	.short	0x264a
 801cc5c:	0226      	.short	0x0226
 801cc5e:	ab9a      	add	r3, sp, #616	; 0x268
 801cc60:	441c      	add	r4, r3
 801cc62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801cc66:	46a2      	mov	sl, r4
 801cc68:	46ab      	mov	fp, r5
 801cc6a:	f1bb 0f00 	cmp.w	fp, #0
 801cc6e:	dc6c      	bgt.n	801cd4a <__kernel_rem_pio2+0x5d2>
 801cc70:	46a2      	mov	sl, r4
 801cc72:	46ab      	mov	fp, r5
 801cc74:	f1bb 0f01 	cmp.w	fp, #1
 801cc78:	f300 8086 	bgt.w	801cd88 <__kernel_rem_pio2+0x610>
 801cc7c:	2000      	movs	r0, #0
 801cc7e:	2100      	movs	r1, #0
 801cc80:	2d01      	cmp	r5, #1
 801cc82:	f300 80a0 	bgt.w	801cdc6 <__kernel_rem_pio2+0x64e>
 801cc86:	9b02      	ldr	r3, [sp, #8]
 801cc88:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801cc8c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	f040 809e 	bne.w	801cdd2 <__kernel_rem_pio2+0x65a>
 801cc96:	9b01      	ldr	r3, [sp, #4]
 801cc98:	e9c3 7800 	strd	r7, r8, [r3]
 801cc9c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801cca0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801cca4:	e033      	b.n	801cd0e <__kernel_rem_pio2+0x596>
 801cca6:	3408      	adds	r4, #8
 801cca8:	ab4a      	add	r3, sp, #296	; 0x128
 801ccaa:	441c      	add	r4, r3
 801ccac:	462e      	mov	r6, r5
 801ccae:	2000      	movs	r0, #0
 801ccb0:	2100      	movs	r1, #0
 801ccb2:	2e00      	cmp	r6, #0
 801ccb4:	da3a      	bge.n	801cd2c <__kernel_rem_pio2+0x5b4>
 801ccb6:	9b02      	ldr	r3, [sp, #8]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d03d      	beq.n	801cd38 <__kernel_rem_pio2+0x5c0>
 801ccbc:	4602      	mov	r2, r0
 801ccbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ccc2:	9c01      	ldr	r4, [sp, #4]
 801ccc4:	e9c4 2300 	strd	r2, r3, [r4]
 801ccc8:	4602      	mov	r2, r0
 801ccca:	460b      	mov	r3, r1
 801cccc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801ccd0:	f7e3 faea 	bl	80002a8 <__aeabi_dsub>
 801ccd4:	ae4c      	add	r6, sp, #304	; 0x130
 801ccd6:	2401      	movs	r4, #1
 801ccd8:	42a5      	cmp	r5, r4
 801ccda:	da30      	bge.n	801cd3e <__kernel_rem_pio2+0x5c6>
 801ccdc:	9b02      	ldr	r3, [sp, #8]
 801ccde:	b113      	cbz	r3, 801cce6 <__kernel_rem_pio2+0x56e>
 801cce0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cce4:	4619      	mov	r1, r3
 801cce6:	9b01      	ldr	r3, [sp, #4]
 801cce8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801ccec:	e00f      	b.n	801cd0e <__kernel_rem_pio2+0x596>
 801ccee:	ab9a      	add	r3, sp, #616	; 0x268
 801ccf0:	441c      	add	r4, r3
 801ccf2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801ccf6:	2000      	movs	r0, #0
 801ccf8:	2100      	movs	r1, #0
 801ccfa:	2d00      	cmp	r5, #0
 801ccfc:	da10      	bge.n	801cd20 <__kernel_rem_pio2+0x5a8>
 801ccfe:	9b02      	ldr	r3, [sp, #8]
 801cd00:	b113      	cbz	r3, 801cd08 <__kernel_rem_pio2+0x590>
 801cd02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cd06:	4619      	mov	r1, r3
 801cd08:	9b01      	ldr	r3, [sp, #4]
 801cd0a:	e9c3 0100 	strd	r0, r1, [r3]
 801cd0e:	9b06      	ldr	r3, [sp, #24]
 801cd10:	f003 0007 	and.w	r0, r3, #7
 801cd14:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801cd18:	ecbd 8b02 	vpop	{d8}
 801cd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd20:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801cd24:	f7e3 fac2 	bl	80002ac <__adddf3>
 801cd28:	3d01      	subs	r5, #1
 801cd2a:	e7e6      	b.n	801ccfa <__kernel_rem_pio2+0x582>
 801cd2c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801cd30:	f7e3 fabc 	bl	80002ac <__adddf3>
 801cd34:	3e01      	subs	r6, #1
 801cd36:	e7bc      	b.n	801ccb2 <__kernel_rem_pio2+0x53a>
 801cd38:	4602      	mov	r2, r0
 801cd3a:	460b      	mov	r3, r1
 801cd3c:	e7c1      	b.n	801ccc2 <__kernel_rem_pio2+0x54a>
 801cd3e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801cd42:	f7e3 fab3 	bl	80002ac <__adddf3>
 801cd46:	3401      	adds	r4, #1
 801cd48:	e7c6      	b.n	801ccd8 <__kernel_rem_pio2+0x560>
 801cd4a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801cd4e:	ed3a 7b02 	vldmdb	sl!, {d7}
 801cd52:	4640      	mov	r0, r8
 801cd54:	ec53 2b17 	vmov	r2, r3, d7
 801cd58:	4649      	mov	r1, r9
 801cd5a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801cd5e:	f7e3 faa5 	bl	80002ac <__adddf3>
 801cd62:	4602      	mov	r2, r0
 801cd64:	460b      	mov	r3, r1
 801cd66:	4606      	mov	r6, r0
 801cd68:	460f      	mov	r7, r1
 801cd6a:	4640      	mov	r0, r8
 801cd6c:	4649      	mov	r1, r9
 801cd6e:	f7e3 fa9b 	bl	80002a8 <__aeabi_dsub>
 801cd72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cd76:	f7e3 fa99 	bl	80002ac <__adddf3>
 801cd7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cd7e:	e9ca 0100 	strd	r0, r1, [sl]
 801cd82:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801cd86:	e770      	b.n	801cc6a <__kernel_rem_pio2+0x4f2>
 801cd88:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801cd8c:	ed3a 7b02 	vldmdb	sl!, {d7}
 801cd90:	4630      	mov	r0, r6
 801cd92:	ec53 2b17 	vmov	r2, r3, d7
 801cd96:	4639      	mov	r1, r7
 801cd98:	ed8d 7b04 	vstr	d7, [sp, #16]
 801cd9c:	f7e3 fa86 	bl	80002ac <__adddf3>
 801cda0:	4602      	mov	r2, r0
 801cda2:	460b      	mov	r3, r1
 801cda4:	4680      	mov	r8, r0
 801cda6:	4689      	mov	r9, r1
 801cda8:	4630      	mov	r0, r6
 801cdaa:	4639      	mov	r1, r7
 801cdac:	f7e3 fa7c 	bl	80002a8 <__aeabi_dsub>
 801cdb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cdb4:	f7e3 fa7a 	bl	80002ac <__adddf3>
 801cdb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cdbc:	e9ca 0100 	strd	r0, r1, [sl]
 801cdc0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801cdc4:	e756      	b.n	801cc74 <__kernel_rem_pio2+0x4fc>
 801cdc6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801cdca:	f7e3 fa6f 	bl	80002ac <__adddf3>
 801cdce:	3d01      	subs	r5, #1
 801cdd0:	e756      	b.n	801cc80 <__kernel_rem_pio2+0x508>
 801cdd2:	9b01      	ldr	r3, [sp, #4]
 801cdd4:	9a01      	ldr	r2, [sp, #4]
 801cdd6:	601f      	str	r7, [r3, #0]
 801cdd8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801cddc:	605c      	str	r4, [r3, #4]
 801cdde:	609d      	str	r5, [r3, #8]
 801cde0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801cde4:	60d3      	str	r3, [r2, #12]
 801cde6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cdea:	6110      	str	r0, [r2, #16]
 801cdec:	6153      	str	r3, [r2, #20]
 801cdee:	e78e      	b.n	801cd0e <__kernel_rem_pio2+0x596>
 801cdf0:	41700000 	.word	0x41700000
 801cdf4:	3e700000 	.word	0x3e700000

0801cdf8 <__kernel_sin>:
 801cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdfc:	ec55 4b10 	vmov	r4, r5, d0
 801ce00:	b085      	sub	sp, #20
 801ce02:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ce06:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ce0a:	ed8d 1b00 	vstr	d1, [sp]
 801ce0e:	9002      	str	r0, [sp, #8]
 801ce10:	da06      	bge.n	801ce20 <__kernel_sin+0x28>
 801ce12:	ee10 0a10 	vmov	r0, s0
 801ce16:	4629      	mov	r1, r5
 801ce18:	f7e3 feae 	bl	8000b78 <__aeabi_d2iz>
 801ce1c:	2800      	cmp	r0, #0
 801ce1e:	d051      	beq.n	801cec4 <__kernel_sin+0xcc>
 801ce20:	4622      	mov	r2, r4
 801ce22:	462b      	mov	r3, r5
 801ce24:	4620      	mov	r0, r4
 801ce26:	4629      	mov	r1, r5
 801ce28:	f7e3 fbf6 	bl	8000618 <__aeabi_dmul>
 801ce2c:	4682      	mov	sl, r0
 801ce2e:	468b      	mov	fp, r1
 801ce30:	4602      	mov	r2, r0
 801ce32:	460b      	mov	r3, r1
 801ce34:	4620      	mov	r0, r4
 801ce36:	4629      	mov	r1, r5
 801ce38:	f7e3 fbee 	bl	8000618 <__aeabi_dmul>
 801ce3c:	a341      	add	r3, pc, #260	; (adr r3, 801cf44 <__kernel_sin+0x14c>)
 801ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce42:	4680      	mov	r8, r0
 801ce44:	4689      	mov	r9, r1
 801ce46:	4650      	mov	r0, sl
 801ce48:	4659      	mov	r1, fp
 801ce4a:	f7e3 fbe5 	bl	8000618 <__aeabi_dmul>
 801ce4e:	a33f      	add	r3, pc, #252	; (adr r3, 801cf4c <__kernel_sin+0x154>)
 801ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce54:	f7e3 fa28 	bl	80002a8 <__aeabi_dsub>
 801ce58:	4652      	mov	r2, sl
 801ce5a:	465b      	mov	r3, fp
 801ce5c:	f7e3 fbdc 	bl	8000618 <__aeabi_dmul>
 801ce60:	a33c      	add	r3, pc, #240	; (adr r3, 801cf54 <__kernel_sin+0x15c>)
 801ce62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce66:	f7e3 fa21 	bl	80002ac <__adddf3>
 801ce6a:	4652      	mov	r2, sl
 801ce6c:	465b      	mov	r3, fp
 801ce6e:	f7e3 fbd3 	bl	8000618 <__aeabi_dmul>
 801ce72:	a33a      	add	r3, pc, #232	; (adr r3, 801cf5c <__kernel_sin+0x164>)
 801ce74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce78:	f7e3 fa16 	bl	80002a8 <__aeabi_dsub>
 801ce7c:	4652      	mov	r2, sl
 801ce7e:	465b      	mov	r3, fp
 801ce80:	f7e3 fbca 	bl	8000618 <__aeabi_dmul>
 801ce84:	a337      	add	r3, pc, #220	; (adr r3, 801cf64 <__kernel_sin+0x16c>)
 801ce86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce8a:	f7e3 fa0f 	bl	80002ac <__adddf3>
 801ce8e:	9b02      	ldr	r3, [sp, #8]
 801ce90:	4606      	mov	r6, r0
 801ce92:	460f      	mov	r7, r1
 801ce94:	b9db      	cbnz	r3, 801cece <__kernel_sin+0xd6>
 801ce96:	4602      	mov	r2, r0
 801ce98:	460b      	mov	r3, r1
 801ce9a:	4650      	mov	r0, sl
 801ce9c:	4659      	mov	r1, fp
 801ce9e:	f7e3 fbbb 	bl	8000618 <__aeabi_dmul>
 801cea2:	a325      	add	r3, pc, #148	; (adr r3, 801cf38 <__kernel_sin+0x140>)
 801cea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cea8:	f7e3 f9fe 	bl	80002a8 <__aeabi_dsub>
 801ceac:	4642      	mov	r2, r8
 801ceae:	464b      	mov	r3, r9
 801ceb0:	f7e3 fbb2 	bl	8000618 <__aeabi_dmul>
 801ceb4:	4602      	mov	r2, r0
 801ceb6:	460b      	mov	r3, r1
 801ceb8:	4620      	mov	r0, r4
 801ceba:	4629      	mov	r1, r5
 801cebc:	f7e3 f9f6 	bl	80002ac <__adddf3>
 801cec0:	4604      	mov	r4, r0
 801cec2:	460d      	mov	r5, r1
 801cec4:	ec45 4b10 	vmov	d0, r4, r5
 801cec8:	b005      	add	sp, #20
 801ceca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cece:	2200      	movs	r2, #0
 801ced0:	4b1b      	ldr	r3, [pc, #108]	; (801cf40 <__kernel_sin+0x148>)
 801ced2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ced6:	f7e3 fb9f 	bl	8000618 <__aeabi_dmul>
 801ceda:	4632      	mov	r2, r6
 801cedc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cee0:	463b      	mov	r3, r7
 801cee2:	4640      	mov	r0, r8
 801cee4:	4649      	mov	r1, r9
 801cee6:	f7e3 fb97 	bl	8000618 <__aeabi_dmul>
 801ceea:	4602      	mov	r2, r0
 801ceec:	460b      	mov	r3, r1
 801ceee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cef2:	f7e3 f9d9 	bl	80002a8 <__aeabi_dsub>
 801cef6:	4652      	mov	r2, sl
 801cef8:	465b      	mov	r3, fp
 801cefa:	f7e3 fb8d 	bl	8000618 <__aeabi_dmul>
 801cefe:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cf02:	f7e3 f9d1 	bl	80002a8 <__aeabi_dsub>
 801cf06:	a30c      	add	r3, pc, #48	; (adr r3, 801cf38 <__kernel_sin+0x140>)
 801cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf0c:	4606      	mov	r6, r0
 801cf0e:	460f      	mov	r7, r1
 801cf10:	4640      	mov	r0, r8
 801cf12:	4649      	mov	r1, r9
 801cf14:	f7e3 fb80 	bl	8000618 <__aeabi_dmul>
 801cf18:	4602      	mov	r2, r0
 801cf1a:	460b      	mov	r3, r1
 801cf1c:	4630      	mov	r0, r6
 801cf1e:	4639      	mov	r1, r7
 801cf20:	f7e3 f9c4 	bl	80002ac <__adddf3>
 801cf24:	4602      	mov	r2, r0
 801cf26:	460b      	mov	r3, r1
 801cf28:	4620      	mov	r0, r4
 801cf2a:	4629      	mov	r1, r5
 801cf2c:	f7e3 f9bc 	bl	80002a8 <__aeabi_dsub>
 801cf30:	e7c6      	b.n	801cec0 <__kernel_sin+0xc8>
 801cf32:	bf00      	nop
 801cf34:	f3af 8000 	nop.w
 801cf38:	55555549 	.word	0x55555549
 801cf3c:	3fc55555 	.word	0x3fc55555
 801cf40:	3fe00000 	.word	0x3fe00000
 801cf44:	5acfd57c 	.word	0x5acfd57c
 801cf48:	3de5d93a 	.word	0x3de5d93a
 801cf4c:	8a2b9ceb 	.word	0x8a2b9ceb
 801cf50:	3e5ae5e6 	.word	0x3e5ae5e6
 801cf54:	57b1fe7d 	.word	0x57b1fe7d
 801cf58:	3ec71de3 	.word	0x3ec71de3
 801cf5c:	19c161d5 	.word	0x19c161d5
 801cf60:	3f2a01a0 	.word	0x3f2a01a0
 801cf64:	1110f8a6 	.word	0x1110f8a6
 801cf68:	3f811111 	.word	0x3f811111
 801cf6c:	00000000 	.word	0x00000000

0801cf70 <atan>:
 801cf70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf74:	ec55 4b10 	vmov	r4, r5, d0
 801cf78:	4bc3      	ldr	r3, [pc, #780]	; (801d288 <atan+0x318>)
 801cf7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801cf7e:	429e      	cmp	r6, r3
 801cf80:	46ab      	mov	fp, r5
 801cf82:	dd18      	ble.n	801cfb6 <atan+0x46>
 801cf84:	4bc1      	ldr	r3, [pc, #772]	; (801d28c <atan+0x31c>)
 801cf86:	429e      	cmp	r6, r3
 801cf88:	dc01      	bgt.n	801cf8e <atan+0x1e>
 801cf8a:	d109      	bne.n	801cfa0 <atan+0x30>
 801cf8c:	b144      	cbz	r4, 801cfa0 <atan+0x30>
 801cf8e:	4622      	mov	r2, r4
 801cf90:	462b      	mov	r3, r5
 801cf92:	4620      	mov	r0, r4
 801cf94:	4629      	mov	r1, r5
 801cf96:	f7e3 f989 	bl	80002ac <__adddf3>
 801cf9a:	4604      	mov	r4, r0
 801cf9c:	460d      	mov	r5, r1
 801cf9e:	e006      	b.n	801cfae <atan+0x3e>
 801cfa0:	f1bb 0f00 	cmp.w	fp, #0
 801cfa4:	f340 8131 	ble.w	801d20a <atan+0x29a>
 801cfa8:	a59b      	add	r5, pc, #620	; (adr r5, 801d218 <atan+0x2a8>)
 801cfaa:	e9d5 4500 	ldrd	r4, r5, [r5]
 801cfae:	ec45 4b10 	vmov	d0, r4, r5
 801cfb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfb6:	4bb6      	ldr	r3, [pc, #728]	; (801d290 <atan+0x320>)
 801cfb8:	429e      	cmp	r6, r3
 801cfba:	dc14      	bgt.n	801cfe6 <atan+0x76>
 801cfbc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801cfc0:	429e      	cmp	r6, r3
 801cfc2:	dc0d      	bgt.n	801cfe0 <atan+0x70>
 801cfc4:	a396      	add	r3, pc, #600	; (adr r3, 801d220 <atan+0x2b0>)
 801cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfca:	ee10 0a10 	vmov	r0, s0
 801cfce:	4629      	mov	r1, r5
 801cfd0:	f7e3 f96c 	bl	80002ac <__adddf3>
 801cfd4:	2200      	movs	r2, #0
 801cfd6:	4baf      	ldr	r3, [pc, #700]	; (801d294 <atan+0x324>)
 801cfd8:	f7e3 fdae 	bl	8000b38 <__aeabi_dcmpgt>
 801cfdc:	2800      	cmp	r0, #0
 801cfde:	d1e6      	bne.n	801cfae <atan+0x3e>
 801cfe0:	f04f 3aff 	mov.w	sl, #4294967295
 801cfe4:	e02b      	b.n	801d03e <atan+0xce>
 801cfe6:	f000 f963 	bl	801d2b0 <fabs>
 801cfea:	4bab      	ldr	r3, [pc, #684]	; (801d298 <atan+0x328>)
 801cfec:	429e      	cmp	r6, r3
 801cfee:	ec55 4b10 	vmov	r4, r5, d0
 801cff2:	f300 80bf 	bgt.w	801d174 <atan+0x204>
 801cff6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801cffa:	429e      	cmp	r6, r3
 801cffc:	f300 80a0 	bgt.w	801d140 <atan+0x1d0>
 801d000:	ee10 2a10 	vmov	r2, s0
 801d004:	ee10 0a10 	vmov	r0, s0
 801d008:	462b      	mov	r3, r5
 801d00a:	4629      	mov	r1, r5
 801d00c:	f7e3 f94e 	bl	80002ac <__adddf3>
 801d010:	2200      	movs	r2, #0
 801d012:	4ba0      	ldr	r3, [pc, #640]	; (801d294 <atan+0x324>)
 801d014:	f7e3 f948 	bl	80002a8 <__aeabi_dsub>
 801d018:	2200      	movs	r2, #0
 801d01a:	4606      	mov	r6, r0
 801d01c:	460f      	mov	r7, r1
 801d01e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d022:	4620      	mov	r0, r4
 801d024:	4629      	mov	r1, r5
 801d026:	f7e3 f941 	bl	80002ac <__adddf3>
 801d02a:	4602      	mov	r2, r0
 801d02c:	460b      	mov	r3, r1
 801d02e:	4630      	mov	r0, r6
 801d030:	4639      	mov	r1, r7
 801d032:	f7e3 fc1b 	bl	800086c <__aeabi_ddiv>
 801d036:	f04f 0a00 	mov.w	sl, #0
 801d03a:	4604      	mov	r4, r0
 801d03c:	460d      	mov	r5, r1
 801d03e:	4622      	mov	r2, r4
 801d040:	462b      	mov	r3, r5
 801d042:	4620      	mov	r0, r4
 801d044:	4629      	mov	r1, r5
 801d046:	f7e3 fae7 	bl	8000618 <__aeabi_dmul>
 801d04a:	4602      	mov	r2, r0
 801d04c:	460b      	mov	r3, r1
 801d04e:	4680      	mov	r8, r0
 801d050:	4689      	mov	r9, r1
 801d052:	f7e3 fae1 	bl	8000618 <__aeabi_dmul>
 801d056:	a374      	add	r3, pc, #464	; (adr r3, 801d228 <atan+0x2b8>)
 801d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d05c:	4606      	mov	r6, r0
 801d05e:	460f      	mov	r7, r1
 801d060:	f7e3 fada 	bl	8000618 <__aeabi_dmul>
 801d064:	a372      	add	r3, pc, #456	; (adr r3, 801d230 <atan+0x2c0>)
 801d066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d06a:	f7e3 f91f 	bl	80002ac <__adddf3>
 801d06e:	4632      	mov	r2, r6
 801d070:	463b      	mov	r3, r7
 801d072:	f7e3 fad1 	bl	8000618 <__aeabi_dmul>
 801d076:	a370      	add	r3, pc, #448	; (adr r3, 801d238 <atan+0x2c8>)
 801d078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d07c:	f7e3 f916 	bl	80002ac <__adddf3>
 801d080:	4632      	mov	r2, r6
 801d082:	463b      	mov	r3, r7
 801d084:	f7e3 fac8 	bl	8000618 <__aeabi_dmul>
 801d088:	a36d      	add	r3, pc, #436	; (adr r3, 801d240 <atan+0x2d0>)
 801d08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d08e:	f7e3 f90d 	bl	80002ac <__adddf3>
 801d092:	4632      	mov	r2, r6
 801d094:	463b      	mov	r3, r7
 801d096:	f7e3 fabf 	bl	8000618 <__aeabi_dmul>
 801d09a:	a36b      	add	r3, pc, #428	; (adr r3, 801d248 <atan+0x2d8>)
 801d09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0a0:	f7e3 f904 	bl	80002ac <__adddf3>
 801d0a4:	4632      	mov	r2, r6
 801d0a6:	463b      	mov	r3, r7
 801d0a8:	f7e3 fab6 	bl	8000618 <__aeabi_dmul>
 801d0ac:	a368      	add	r3, pc, #416	; (adr r3, 801d250 <atan+0x2e0>)
 801d0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0b2:	f7e3 f8fb 	bl	80002ac <__adddf3>
 801d0b6:	4642      	mov	r2, r8
 801d0b8:	464b      	mov	r3, r9
 801d0ba:	f7e3 faad 	bl	8000618 <__aeabi_dmul>
 801d0be:	a366      	add	r3, pc, #408	; (adr r3, 801d258 <atan+0x2e8>)
 801d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0c4:	4680      	mov	r8, r0
 801d0c6:	4689      	mov	r9, r1
 801d0c8:	4630      	mov	r0, r6
 801d0ca:	4639      	mov	r1, r7
 801d0cc:	f7e3 faa4 	bl	8000618 <__aeabi_dmul>
 801d0d0:	a363      	add	r3, pc, #396	; (adr r3, 801d260 <atan+0x2f0>)
 801d0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0d6:	f7e3 f8e7 	bl	80002a8 <__aeabi_dsub>
 801d0da:	4632      	mov	r2, r6
 801d0dc:	463b      	mov	r3, r7
 801d0de:	f7e3 fa9b 	bl	8000618 <__aeabi_dmul>
 801d0e2:	a361      	add	r3, pc, #388	; (adr r3, 801d268 <atan+0x2f8>)
 801d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0e8:	f7e3 f8de 	bl	80002a8 <__aeabi_dsub>
 801d0ec:	4632      	mov	r2, r6
 801d0ee:	463b      	mov	r3, r7
 801d0f0:	f7e3 fa92 	bl	8000618 <__aeabi_dmul>
 801d0f4:	a35e      	add	r3, pc, #376	; (adr r3, 801d270 <atan+0x300>)
 801d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0fa:	f7e3 f8d5 	bl	80002a8 <__aeabi_dsub>
 801d0fe:	4632      	mov	r2, r6
 801d100:	463b      	mov	r3, r7
 801d102:	f7e3 fa89 	bl	8000618 <__aeabi_dmul>
 801d106:	a35c      	add	r3, pc, #368	; (adr r3, 801d278 <atan+0x308>)
 801d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d10c:	f7e3 f8cc 	bl	80002a8 <__aeabi_dsub>
 801d110:	4632      	mov	r2, r6
 801d112:	463b      	mov	r3, r7
 801d114:	f7e3 fa80 	bl	8000618 <__aeabi_dmul>
 801d118:	4602      	mov	r2, r0
 801d11a:	460b      	mov	r3, r1
 801d11c:	4640      	mov	r0, r8
 801d11e:	4649      	mov	r1, r9
 801d120:	f7e3 f8c4 	bl	80002ac <__adddf3>
 801d124:	4622      	mov	r2, r4
 801d126:	462b      	mov	r3, r5
 801d128:	f7e3 fa76 	bl	8000618 <__aeabi_dmul>
 801d12c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801d130:	4602      	mov	r2, r0
 801d132:	460b      	mov	r3, r1
 801d134:	d14b      	bne.n	801d1ce <atan+0x25e>
 801d136:	4620      	mov	r0, r4
 801d138:	4629      	mov	r1, r5
 801d13a:	f7e3 f8b5 	bl	80002a8 <__aeabi_dsub>
 801d13e:	e72c      	b.n	801cf9a <atan+0x2a>
 801d140:	ee10 0a10 	vmov	r0, s0
 801d144:	2200      	movs	r2, #0
 801d146:	4b53      	ldr	r3, [pc, #332]	; (801d294 <atan+0x324>)
 801d148:	4629      	mov	r1, r5
 801d14a:	f7e3 f8ad 	bl	80002a8 <__aeabi_dsub>
 801d14e:	2200      	movs	r2, #0
 801d150:	4606      	mov	r6, r0
 801d152:	460f      	mov	r7, r1
 801d154:	4b4f      	ldr	r3, [pc, #316]	; (801d294 <atan+0x324>)
 801d156:	4620      	mov	r0, r4
 801d158:	4629      	mov	r1, r5
 801d15a:	f7e3 f8a7 	bl	80002ac <__adddf3>
 801d15e:	4602      	mov	r2, r0
 801d160:	460b      	mov	r3, r1
 801d162:	4630      	mov	r0, r6
 801d164:	4639      	mov	r1, r7
 801d166:	f7e3 fb81 	bl	800086c <__aeabi_ddiv>
 801d16a:	f04f 0a01 	mov.w	sl, #1
 801d16e:	4604      	mov	r4, r0
 801d170:	460d      	mov	r5, r1
 801d172:	e764      	b.n	801d03e <atan+0xce>
 801d174:	4b49      	ldr	r3, [pc, #292]	; (801d29c <atan+0x32c>)
 801d176:	429e      	cmp	r6, r3
 801d178:	dc1d      	bgt.n	801d1b6 <atan+0x246>
 801d17a:	ee10 0a10 	vmov	r0, s0
 801d17e:	2200      	movs	r2, #0
 801d180:	4b47      	ldr	r3, [pc, #284]	; (801d2a0 <atan+0x330>)
 801d182:	4629      	mov	r1, r5
 801d184:	f7e3 f890 	bl	80002a8 <__aeabi_dsub>
 801d188:	2200      	movs	r2, #0
 801d18a:	4606      	mov	r6, r0
 801d18c:	460f      	mov	r7, r1
 801d18e:	4b44      	ldr	r3, [pc, #272]	; (801d2a0 <atan+0x330>)
 801d190:	4620      	mov	r0, r4
 801d192:	4629      	mov	r1, r5
 801d194:	f7e3 fa40 	bl	8000618 <__aeabi_dmul>
 801d198:	2200      	movs	r2, #0
 801d19a:	4b3e      	ldr	r3, [pc, #248]	; (801d294 <atan+0x324>)
 801d19c:	f7e3 f886 	bl	80002ac <__adddf3>
 801d1a0:	4602      	mov	r2, r0
 801d1a2:	460b      	mov	r3, r1
 801d1a4:	4630      	mov	r0, r6
 801d1a6:	4639      	mov	r1, r7
 801d1a8:	f7e3 fb60 	bl	800086c <__aeabi_ddiv>
 801d1ac:	f04f 0a02 	mov.w	sl, #2
 801d1b0:	4604      	mov	r4, r0
 801d1b2:	460d      	mov	r5, r1
 801d1b4:	e743      	b.n	801d03e <atan+0xce>
 801d1b6:	462b      	mov	r3, r5
 801d1b8:	ee10 2a10 	vmov	r2, s0
 801d1bc:	2000      	movs	r0, #0
 801d1be:	4939      	ldr	r1, [pc, #228]	; (801d2a4 <atan+0x334>)
 801d1c0:	f7e3 fb54 	bl	800086c <__aeabi_ddiv>
 801d1c4:	f04f 0a03 	mov.w	sl, #3
 801d1c8:	4604      	mov	r4, r0
 801d1ca:	460d      	mov	r5, r1
 801d1cc:	e737      	b.n	801d03e <atan+0xce>
 801d1ce:	4b36      	ldr	r3, [pc, #216]	; (801d2a8 <atan+0x338>)
 801d1d0:	4e36      	ldr	r6, [pc, #216]	; (801d2ac <atan+0x33c>)
 801d1d2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801d1d6:	4456      	add	r6, sl
 801d1d8:	449a      	add	sl, r3
 801d1da:	e9da 2300 	ldrd	r2, r3, [sl]
 801d1de:	f7e3 f863 	bl	80002a8 <__aeabi_dsub>
 801d1e2:	4622      	mov	r2, r4
 801d1e4:	462b      	mov	r3, r5
 801d1e6:	f7e3 f85f 	bl	80002a8 <__aeabi_dsub>
 801d1ea:	4602      	mov	r2, r0
 801d1ec:	460b      	mov	r3, r1
 801d1ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d1f2:	f7e3 f859 	bl	80002a8 <__aeabi_dsub>
 801d1f6:	f1bb 0f00 	cmp.w	fp, #0
 801d1fa:	4604      	mov	r4, r0
 801d1fc:	460d      	mov	r5, r1
 801d1fe:	f6bf aed6 	bge.w	801cfae <atan+0x3e>
 801d202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d206:	461d      	mov	r5, r3
 801d208:	e6d1      	b.n	801cfae <atan+0x3e>
 801d20a:	a51d      	add	r5, pc, #116	; (adr r5, 801d280 <atan+0x310>)
 801d20c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d210:	e6cd      	b.n	801cfae <atan+0x3e>
 801d212:	bf00      	nop
 801d214:	f3af 8000 	nop.w
 801d218:	54442d18 	.word	0x54442d18
 801d21c:	3ff921fb 	.word	0x3ff921fb
 801d220:	8800759c 	.word	0x8800759c
 801d224:	7e37e43c 	.word	0x7e37e43c
 801d228:	e322da11 	.word	0xe322da11
 801d22c:	3f90ad3a 	.word	0x3f90ad3a
 801d230:	24760deb 	.word	0x24760deb
 801d234:	3fa97b4b 	.word	0x3fa97b4b
 801d238:	a0d03d51 	.word	0xa0d03d51
 801d23c:	3fb10d66 	.word	0x3fb10d66
 801d240:	c54c206e 	.word	0xc54c206e
 801d244:	3fb745cd 	.word	0x3fb745cd
 801d248:	920083ff 	.word	0x920083ff
 801d24c:	3fc24924 	.word	0x3fc24924
 801d250:	5555550d 	.word	0x5555550d
 801d254:	3fd55555 	.word	0x3fd55555
 801d258:	2c6a6c2f 	.word	0x2c6a6c2f
 801d25c:	bfa2b444 	.word	0xbfa2b444
 801d260:	52defd9a 	.word	0x52defd9a
 801d264:	3fadde2d 	.word	0x3fadde2d
 801d268:	af749a6d 	.word	0xaf749a6d
 801d26c:	3fb3b0f2 	.word	0x3fb3b0f2
 801d270:	fe231671 	.word	0xfe231671
 801d274:	3fbc71c6 	.word	0x3fbc71c6
 801d278:	9998ebc4 	.word	0x9998ebc4
 801d27c:	3fc99999 	.word	0x3fc99999
 801d280:	54442d18 	.word	0x54442d18
 801d284:	bff921fb 	.word	0xbff921fb
 801d288:	440fffff 	.word	0x440fffff
 801d28c:	7ff00000 	.word	0x7ff00000
 801d290:	3fdbffff 	.word	0x3fdbffff
 801d294:	3ff00000 	.word	0x3ff00000
 801d298:	3ff2ffff 	.word	0x3ff2ffff
 801d29c:	40037fff 	.word	0x40037fff
 801d2a0:	3ff80000 	.word	0x3ff80000
 801d2a4:	bff00000 	.word	0xbff00000
 801d2a8:	0801e5c0 	.word	0x0801e5c0
 801d2ac:	0801e5a0 	.word	0x0801e5a0

0801d2b0 <fabs>:
 801d2b0:	ec51 0b10 	vmov	r0, r1, d0
 801d2b4:	ee10 2a10 	vmov	r2, s0
 801d2b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d2bc:	ec43 2b10 	vmov	d0, r2, r3
 801d2c0:	4770      	bx	lr

0801d2c2 <finite>:
 801d2c2:	ee10 3a90 	vmov	r3, s1
 801d2c6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801d2ca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d2ce:	0fc0      	lsrs	r0, r0, #31
 801d2d0:	4770      	bx	lr
 801d2d2:	0000      	movs	r0, r0
 801d2d4:	0000      	movs	r0, r0
	...

0801d2d8 <floor>:
 801d2d8:	ec51 0b10 	vmov	r0, r1, d0
 801d2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801d2e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801d2e8:	2e13      	cmp	r6, #19
 801d2ea:	460c      	mov	r4, r1
 801d2ec:	ee10 5a10 	vmov	r5, s0
 801d2f0:	4680      	mov	r8, r0
 801d2f2:	dc34      	bgt.n	801d35e <floor+0x86>
 801d2f4:	2e00      	cmp	r6, #0
 801d2f6:	da16      	bge.n	801d326 <floor+0x4e>
 801d2f8:	a335      	add	r3, pc, #212	; (adr r3, 801d3d0 <floor+0xf8>)
 801d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2fe:	f7e2 ffd5 	bl	80002ac <__adddf3>
 801d302:	2200      	movs	r2, #0
 801d304:	2300      	movs	r3, #0
 801d306:	f7e3 fc17 	bl	8000b38 <__aeabi_dcmpgt>
 801d30a:	b148      	cbz	r0, 801d320 <floor+0x48>
 801d30c:	2c00      	cmp	r4, #0
 801d30e:	da59      	bge.n	801d3c4 <floor+0xec>
 801d310:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d314:	4a30      	ldr	r2, [pc, #192]	; (801d3d8 <floor+0x100>)
 801d316:	432b      	orrs	r3, r5
 801d318:	2500      	movs	r5, #0
 801d31a:	42ab      	cmp	r3, r5
 801d31c:	bf18      	it	ne
 801d31e:	4614      	movne	r4, r2
 801d320:	4621      	mov	r1, r4
 801d322:	4628      	mov	r0, r5
 801d324:	e025      	b.n	801d372 <floor+0x9a>
 801d326:	4f2d      	ldr	r7, [pc, #180]	; (801d3dc <floor+0x104>)
 801d328:	4137      	asrs	r7, r6
 801d32a:	ea01 0307 	and.w	r3, r1, r7
 801d32e:	4303      	orrs	r3, r0
 801d330:	d01f      	beq.n	801d372 <floor+0x9a>
 801d332:	a327      	add	r3, pc, #156	; (adr r3, 801d3d0 <floor+0xf8>)
 801d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d338:	f7e2 ffb8 	bl	80002ac <__adddf3>
 801d33c:	2200      	movs	r2, #0
 801d33e:	2300      	movs	r3, #0
 801d340:	f7e3 fbfa 	bl	8000b38 <__aeabi_dcmpgt>
 801d344:	2800      	cmp	r0, #0
 801d346:	d0eb      	beq.n	801d320 <floor+0x48>
 801d348:	2c00      	cmp	r4, #0
 801d34a:	bfbe      	ittt	lt
 801d34c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d350:	fa43 f606 	asrlt.w	r6, r3, r6
 801d354:	19a4      	addlt	r4, r4, r6
 801d356:	ea24 0407 	bic.w	r4, r4, r7
 801d35a:	2500      	movs	r5, #0
 801d35c:	e7e0      	b.n	801d320 <floor+0x48>
 801d35e:	2e33      	cmp	r6, #51	; 0x33
 801d360:	dd0b      	ble.n	801d37a <floor+0xa2>
 801d362:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d366:	d104      	bne.n	801d372 <floor+0x9a>
 801d368:	ee10 2a10 	vmov	r2, s0
 801d36c:	460b      	mov	r3, r1
 801d36e:	f7e2 ff9d 	bl	80002ac <__adddf3>
 801d372:	ec41 0b10 	vmov	d0, r0, r1
 801d376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d37a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801d37e:	f04f 33ff 	mov.w	r3, #4294967295
 801d382:	fa23 f707 	lsr.w	r7, r3, r7
 801d386:	4207      	tst	r7, r0
 801d388:	d0f3      	beq.n	801d372 <floor+0x9a>
 801d38a:	a311      	add	r3, pc, #68	; (adr r3, 801d3d0 <floor+0xf8>)
 801d38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d390:	f7e2 ff8c 	bl	80002ac <__adddf3>
 801d394:	2200      	movs	r2, #0
 801d396:	2300      	movs	r3, #0
 801d398:	f7e3 fbce 	bl	8000b38 <__aeabi_dcmpgt>
 801d39c:	2800      	cmp	r0, #0
 801d39e:	d0bf      	beq.n	801d320 <floor+0x48>
 801d3a0:	2c00      	cmp	r4, #0
 801d3a2:	da02      	bge.n	801d3aa <floor+0xd2>
 801d3a4:	2e14      	cmp	r6, #20
 801d3a6:	d103      	bne.n	801d3b0 <floor+0xd8>
 801d3a8:	3401      	adds	r4, #1
 801d3aa:	ea25 0507 	bic.w	r5, r5, r7
 801d3ae:	e7b7      	b.n	801d320 <floor+0x48>
 801d3b0:	2301      	movs	r3, #1
 801d3b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d3b6:	fa03 f606 	lsl.w	r6, r3, r6
 801d3ba:	4435      	add	r5, r6
 801d3bc:	4545      	cmp	r5, r8
 801d3be:	bf38      	it	cc
 801d3c0:	18e4      	addcc	r4, r4, r3
 801d3c2:	e7f2      	b.n	801d3aa <floor+0xd2>
 801d3c4:	2500      	movs	r5, #0
 801d3c6:	462c      	mov	r4, r5
 801d3c8:	e7aa      	b.n	801d320 <floor+0x48>
 801d3ca:	bf00      	nop
 801d3cc:	f3af 8000 	nop.w
 801d3d0:	8800759c 	.word	0x8800759c
 801d3d4:	7e37e43c 	.word	0x7e37e43c
 801d3d8:	bff00000 	.word	0xbff00000
 801d3dc:	000fffff 	.word	0x000fffff

0801d3e0 <matherr>:
 801d3e0:	2000      	movs	r0, #0
 801d3e2:	4770      	bx	lr
 801d3e4:	0000      	movs	r0, r0
	...

0801d3e8 <nan>:
 801d3e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d3f0 <nan+0x8>
 801d3ec:	4770      	bx	lr
 801d3ee:	bf00      	nop
 801d3f0:	00000000 	.word	0x00000000
 801d3f4:	7ff80000 	.word	0x7ff80000

0801d3f8 <rint>:
 801d3f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d3fa:	ec51 0b10 	vmov	r0, r1, d0
 801d3fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d402:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801d406:	2e13      	cmp	r6, #19
 801d408:	460b      	mov	r3, r1
 801d40a:	ee10 4a10 	vmov	r4, s0
 801d40e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801d412:	dc56      	bgt.n	801d4c2 <rint+0xca>
 801d414:	2e00      	cmp	r6, #0
 801d416:	da2b      	bge.n	801d470 <rint+0x78>
 801d418:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801d41c:	4302      	orrs	r2, r0
 801d41e:	d023      	beq.n	801d468 <rint+0x70>
 801d420:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801d424:	4302      	orrs	r2, r0
 801d426:	4254      	negs	r4, r2
 801d428:	4314      	orrs	r4, r2
 801d42a:	0c4b      	lsrs	r3, r1, #17
 801d42c:	0b24      	lsrs	r4, r4, #12
 801d42e:	045b      	lsls	r3, r3, #17
 801d430:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801d434:	ea44 0103 	orr.w	r1, r4, r3
 801d438:	460b      	mov	r3, r1
 801d43a:	492f      	ldr	r1, [pc, #188]	; (801d4f8 <rint+0x100>)
 801d43c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801d440:	e9d1 6700 	ldrd	r6, r7, [r1]
 801d444:	4602      	mov	r2, r0
 801d446:	4639      	mov	r1, r7
 801d448:	4630      	mov	r0, r6
 801d44a:	f7e2 ff2f 	bl	80002ac <__adddf3>
 801d44e:	e9cd 0100 	strd	r0, r1, [sp]
 801d452:	463b      	mov	r3, r7
 801d454:	4632      	mov	r2, r6
 801d456:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d45a:	f7e2 ff25 	bl	80002a8 <__aeabi_dsub>
 801d45e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d462:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801d466:	4639      	mov	r1, r7
 801d468:	ec41 0b10 	vmov	d0, r0, r1
 801d46c:	b003      	add	sp, #12
 801d46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d470:	4a22      	ldr	r2, [pc, #136]	; (801d4fc <rint+0x104>)
 801d472:	4132      	asrs	r2, r6
 801d474:	ea01 0702 	and.w	r7, r1, r2
 801d478:	4307      	orrs	r7, r0
 801d47a:	d0f5      	beq.n	801d468 <rint+0x70>
 801d47c:	0852      	lsrs	r2, r2, #1
 801d47e:	4011      	ands	r1, r2
 801d480:	430c      	orrs	r4, r1
 801d482:	d00b      	beq.n	801d49c <rint+0xa4>
 801d484:	ea23 0202 	bic.w	r2, r3, r2
 801d488:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d48c:	2e13      	cmp	r6, #19
 801d48e:	fa43 f306 	asr.w	r3, r3, r6
 801d492:	bf0c      	ite	eq
 801d494:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801d498:	2400      	movne	r4, #0
 801d49a:	4313      	orrs	r3, r2
 801d49c:	4916      	ldr	r1, [pc, #88]	; (801d4f8 <rint+0x100>)
 801d49e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801d4a2:	4622      	mov	r2, r4
 801d4a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d4a8:	4620      	mov	r0, r4
 801d4aa:	4629      	mov	r1, r5
 801d4ac:	f7e2 fefe 	bl	80002ac <__adddf3>
 801d4b0:	e9cd 0100 	strd	r0, r1, [sp]
 801d4b4:	4622      	mov	r2, r4
 801d4b6:	462b      	mov	r3, r5
 801d4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d4bc:	f7e2 fef4 	bl	80002a8 <__aeabi_dsub>
 801d4c0:	e7d2      	b.n	801d468 <rint+0x70>
 801d4c2:	2e33      	cmp	r6, #51	; 0x33
 801d4c4:	dd07      	ble.n	801d4d6 <rint+0xde>
 801d4c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d4ca:	d1cd      	bne.n	801d468 <rint+0x70>
 801d4cc:	ee10 2a10 	vmov	r2, s0
 801d4d0:	f7e2 feec 	bl	80002ac <__adddf3>
 801d4d4:	e7c8      	b.n	801d468 <rint+0x70>
 801d4d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801d4da:	f04f 32ff 	mov.w	r2, #4294967295
 801d4de:	40f2      	lsrs	r2, r6
 801d4e0:	4210      	tst	r0, r2
 801d4e2:	d0c1      	beq.n	801d468 <rint+0x70>
 801d4e4:	0852      	lsrs	r2, r2, #1
 801d4e6:	4210      	tst	r0, r2
 801d4e8:	bf1f      	itttt	ne
 801d4ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801d4ee:	ea20 0202 	bicne.w	r2, r0, r2
 801d4f2:	4134      	asrne	r4, r6
 801d4f4:	4314      	orrne	r4, r2
 801d4f6:	e7d1      	b.n	801d49c <rint+0xa4>
 801d4f8:	0801e5e0 	.word	0x0801e5e0
 801d4fc:	000fffff 	.word	0x000fffff

0801d500 <scalbn>:
 801d500:	b570      	push	{r4, r5, r6, lr}
 801d502:	ec55 4b10 	vmov	r4, r5, d0
 801d506:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d50a:	4606      	mov	r6, r0
 801d50c:	462b      	mov	r3, r5
 801d50e:	b9aa      	cbnz	r2, 801d53c <scalbn+0x3c>
 801d510:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d514:	4323      	orrs	r3, r4
 801d516:	d03b      	beq.n	801d590 <scalbn+0x90>
 801d518:	4b31      	ldr	r3, [pc, #196]	; (801d5e0 <scalbn+0xe0>)
 801d51a:	4629      	mov	r1, r5
 801d51c:	2200      	movs	r2, #0
 801d51e:	ee10 0a10 	vmov	r0, s0
 801d522:	f7e3 f879 	bl	8000618 <__aeabi_dmul>
 801d526:	4b2f      	ldr	r3, [pc, #188]	; (801d5e4 <scalbn+0xe4>)
 801d528:	429e      	cmp	r6, r3
 801d52a:	4604      	mov	r4, r0
 801d52c:	460d      	mov	r5, r1
 801d52e:	da12      	bge.n	801d556 <scalbn+0x56>
 801d530:	a327      	add	r3, pc, #156	; (adr r3, 801d5d0 <scalbn+0xd0>)
 801d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d536:	f7e3 f86f 	bl	8000618 <__aeabi_dmul>
 801d53a:	e009      	b.n	801d550 <scalbn+0x50>
 801d53c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801d540:	428a      	cmp	r2, r1
 801d542:	d10c      	bne.n	801d55e <scalbn+0x5e>
 801d544:	ee10 2a10 	vmov	r2, s0
 801d548:	4620      	mov	r0, r4
 801d54a:	4629      	mov	r1, r5
 801d54c:	f7e2 feae 	bl	80002ac <__adddf3>
 801d550:	4604      	mov	r4, r0
 801d552:	460d      	mov	r5, r1
 801d554:	e01c      	b.n	801d590 <scalbn+0x90>
 801d556:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d55a:	460b      	mov	r3, r1
 801d55c:	3a36      	subs	r2, #54	; 0x36
 801d55e:	4432      	add	r2, r6
 801d560:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d564:	428a      	cmp	r2, r1
 801d566:	dd0b      	ble.n	801d580 <scalbn+0x80>
 801d568:	ec45 4b11 	vmov	d1, r4, r5
 801d56c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801d5d8 <scalbn+0xd8>
 801d570:	f000 f83c 	bl	801d5ec <copysign>
 801d574:	a318      	add	r3, pc, #96	; (adr r3, 801d5d8 <scalbn+0xd8>)
 801d576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d57a:	ec51 0b10 	vmov	r0, r1, d0
 801d57e:	e7da      	b.n	801d536 <scalbn+0x36>
 801d580:	2a00      	cmp	r2, #0
 801d582:	dd08      	ble.n	801d596 <scalbn+0x96>
 801d584:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d588:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d58c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d590:	ec45 4b10 	vmov	d0, r4, r5
 801d594:	bd70      	pop	{r4, r5, r6, pc}
 801d596:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801d59a:	da0d      	bge.n	801d5b8 <scalbn+0xb8>
 801d59c:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d5a0:	429e      	cmp	r6, r3
 801d5a2:	ec45 4b11 	vmov	d1, r4, r5
 801d5a6:	dce1      	bgt.n	801d56c <scalbn+0x6c>
 801d5a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801d5d0 <scalbn+0xd0>
 801d5ac:	f000 f81e 	bl	801d5ec <copysign>
 801d5b0:	a307      	add	r3, pc, #28	; (adr r3, 801d5d0 <scalbn+0xd0>)
 801d5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5b6:	e7e0      	b.n	801d57a <scalbn+0x7a>
 801d5b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d5bc:	3236      	adds	r2, #54	; 0x36
 801d5be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d5c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d5c6:	4620      	mov	r0, r4
 801d5c8:	4629      	mov	r1, r5
 801d5ca:	2200      	movs	r2, #0
 801d5cc:	4b06      	ldr	r3, [pc, #24]	; (801d5e8 <scalbn+0xe8>)
 801d5ce:	e7b2      	b.n	801d536 <scalbn+0x36>
 801d5d0:	c2f8f359 	.word	0xc2f8f359
 801d5d4:	01a56e1f 	.word	0x01a56e1f
 801d5d8:	8800759c 	.word	0x8800759c
 801d5dc:	7e37e43c 	.word	0x7e37e43c
 801d5e0:	43500000 	.word	0x43500000
 801d5e4:	ffff3cb0 	.word	0xffff3cb0
 801d5e8:	3c900000 	.word	0x3c900000

0801d5ec <copysign>:
 801d5ec:	ec51 0b10 	vmov	r0, r1, d0
 801d5f0:	ee11 0a90 	vmov	r0, s3
 801d5f4:	ee10 2a10 	vmov	r2, s0
 801d5f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801d5fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801d600:	ea41 0300 	orr.w	r3, r1, r0
 801d604:	ec43 2b10 	vmov	d0, r2, r3
 801d608:	4770      	bx	lr
	...

0801d60c <_init>:
 801d60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d60e:	bf00      	nop
 801d610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d612:	bc08      	pop	{r3}
 801d614:	469e      	mov	lr, r3
 801d616:	4770      	bx	lr

0801d618 <_fini>:
 801d618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d61a:	bf00      	nop
 801d61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d61e:	bc08      	pop	{r3}
 801d620:	469e      	mov	lr, r3
 801d622:	4770      	bx	lr
