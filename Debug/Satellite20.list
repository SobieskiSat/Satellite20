
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001da5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d78  0801dbf0  0801dbf0  0002dbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e968  0801e968  000303a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e968  0801e968  0002e968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e970  0801e970  000303a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e970  0801e970  0002e970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e974  0801e974  0002e974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0801e978  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a20c  200003a8  0801ed20  000303a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a5b4  0801ed20  0003a5b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ad59  00000000  00000000  000303d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006c36  00000000  00000000  0006b131  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002620  00000000  00000000  00071d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002348  00000000  00000000  00074388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bcc8  00000000  00000000  000766d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002690f  00000000  00000000  000a2398  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7aa0  00000000  00000000  000c8ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a0747  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b530  00000000  00000000  001a07c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  001abcf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003a8 	.word	0x200003a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801dbd4 	.word	0x0801dbd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003ac 	.word	0x200003ac
 80001cc:	0801dbd4 	.word	0x0801dbd4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <micros>:

#include <stdbool.h>
#include "main.h"
#include "stm32f4xx_hal.h"

static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
 800104c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <println>:
		return true;
	}
	return false;
}
static inline bool println(const char* format, ...)
{
 800105c:	b40f      	push	{r0, r1, r2, r3}
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
	if (usbPresent)
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <println+0xb4>)
 8001066:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800106a:	2b03      	cmp	r3, #3
 800106c:	d147      	bne.n	80010fe <println+0xa2>
	{
		writePin(LEDD, HIGH);
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001074:	4827      	ldr	r0, [pc, #156]	; (8001114 <println+0xb8>)
 8001076:	f006 fc25 	bl	80078c4 <HAL_GPIO_WritePin>
		va_list argptr;
		va_start(argptr, format);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	4824      	ldr	r0, [pc, #144]	; (8001118 <println+0xbc>)
 8001086:	f017 ff7d 	bl	8018f84 <vsiprintf>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <println+0xc0>)
 8001090:	601a      	str	r2, [r3, #0]
		va_end(argptr);

		printBuffer[printLen] = '\r';
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <println+0xc0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a20      	ldr	r2, [pc, #128]	; (8001118 <println+0xbc>)
 8001098:	210d      	movs	r1, #13
 800109a:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <println+0xc0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <println+0xbc>)
 80010a4:	210a      	movs	r1, #10
 80010a6:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <println+0xc0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3302      	adds	r3, #2
 80010ae:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <println+0xbc>)
 80010b0:	2100      	movs	r1, #0
 80010b2:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <println+0xc0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3303      	adds	r3, #3
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <println+0xc0>)
 80010bc:	6013      	str	r3, [r2, #0]

		uint32_t printStart = micros();
 80010be:	f7ff ffc3 	bl	8001048 <micros>
 80010c2:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <println+0xc0>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	3346      	adds	r3, #70	; 0x46
 80010d2:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80010d4:	e001      	b.n	80010da <println+0x7e>
		{
			if (micros() - printStart > timeout && false)
 80010d6:	f7ff ffb7 	bl	8001048 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <println+0xc0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4619      	mov	r1, r3
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <println+0xbc>)
 80010e4:	f015 fc42 	bl	801696c <CDC_Transmit_FS>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d0f3      	beq.n	80010d6 <println+0x7a>
			{
				writePin(LEDD, LOW);
				return false;
			}
		}
		writePin(LEDD, LOW);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <println+0xb8>)
 80010f6:	f006 fbe5 	bl	80078c4 <HAL_GPIO_WritePin>
		return true;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <println+0xa4>
	}
	return false;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800110a:	b004      	add	sp, #16
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000e3c 	.word	0x20000e3c
 8001114:	40020400 	.word	0x40020400
 8001118:	200003cc 	.word	0x200003cc
 800111c:	200003c8 	.word	0x200003c8

08001120 <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

void setMotors(float dutyL, float dutyR)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	ed87 0a01 	vstr	s0, [r7, #4]
 800112a:	edc7 0a00 	vstr	s1, [r7]
	if (motorsEnabled)
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <setMotors+0x90>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d037      	beq.n	80011a6 <setMotors+0x86>
	{
		TIM5->CCR2 = (uint32_t)((float)TIM5->ARR * (1 - dutyL));
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <setMotors+0x94>)
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001146:	edd7 7a01 	vldr	s15, [r7, #4]
 800114a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <setMotors+0x94>)
 8001154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001158:	ee17 2a90 	vmov	r2, s15
 800115c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM5->CCR4 = (uint32_t)((float)TIM5->ARR * (1 - dutyR));
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <setMotors+0x94>)
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800116a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800116e:	edd7 7a00 	vldr	s15, [r7]
 8001172:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <setMotors+0x94>)
 800117c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001180:	ee17 2a90 	vmov	r2, s15
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
		TIM5->CNT = 0;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <setMotors+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24

		TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <setMotors+0x98>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2104      	movs	r1, #4
 8001196:	4809      	ldr	r0, [pc, #36]	; (80011bc <setMotors+0x9c>)
 8001198:	f006 fb94 	bl	80078c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <setMotors+0x9c>)
 80011a2:	f006 fb8f 	bl	80078c4 <HAL_GPIO_WritePin>
	}
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200003c4 	.word	0x200003c4
 80011b4:	40000c00 	.word	0x40000c00
 80011b8:	40000800 	.word	0x40000800
 80011bc:	40020000 	.word	0x40020000

080011c0 <haltMotors>:

void haltMotors(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM5->CCR2 = TIM5->ARR;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <haltMotors+0x24>)
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <haltMotors+0x24>)
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	6393      	str	r3, [r2, #56]	; 0x38
	TIM5->CCR4 = TIM5->ARR;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <haltMotors+0x24>)
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <haltMotors+0x24>)
 80011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <haltMotors+0x28>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40000c00 	.word	0x40000c00
 80011e8:	40000800 	.word	0x40000800

080011ec <enableMotors>:

void enableMotors(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	if (!motorsEnabled)
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <enableMotors+0x70>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d02b      	beq.n	8001256 <enableMotors+0x6a>
	{
		haltMotors();
 80011fe:	f7ff ffdf 	bl	80011c0 <haltMotors>
		motorsEnabled = true;
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <enableMotors+0x70>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]

		//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
		//setPwmFrequency(MAX_PWM_FREQ);

		motL_forward = true;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <enableMotors+0x74>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
		motR_forward = true;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <enableMotors+0x78>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]

		// flip direction based on config
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <enableMotors+0x74>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	2101      	movs	r1, #1
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <enableMotors+0x7c>)
 800121e:	f006 fb51 	bl	80078c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <enableMotors+0x78>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	2104      	movs	r1, #4
 800122a:	480f      	ldr	r0, [pc, #60]	; (8001268 <enableMotors+0x7c>)
 800122c:	f006 fb4a 	bl	80078c4 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_2);
 8001230:	f014 fce2 	bl	8015bf8 <Get_TIM5_Instance>
 8001234:	4603      	mov	r3, r0
 8001236:	2104      	movs	r1, #4
 8001238:	4618      	mov	r0, r3
 800123a:	f00b fa75 	bl	800c728 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_4);
 800123e:	f014 fcdb 	bl	8015bf8 <Get_TIM5_Instance>
 8001242:	4603      	mov	r3, r0
 8001244:	210c      	movs	r1, #12
 8001246:	4618      	mov	r0, r3
 8001248:	f00b fa6e 	bl	800c728 <HAL_TIM_PWM_Start>

		haltMotors();
 800124c:	f7ff ffb8 	bl	80011c0 <haltMotors>
		println("[MOT] MOTORS ENABLED!!");
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <enableMotors+0x80>)
 8001252:	f7ff ff03 	bl	800105c <println>
	}
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200003c4 	.word	0x200003c4
 8001260:	20000000 	.word	0x20000000
 8001264:	20000001 	.word	0x20000001
 8001268:	40020000 	.word	0x40020000
 800126c:	0801dbf0 	.word	0x0801dbf0

08001270 <disableMotors>:

void disableMotors(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	if (motorsEnabled)
 8001274:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <disableMotors+0x3c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d015      	beq.n	80012a8 <disableMotors+0x38>
	{
		haltMotors();
 800127c:	f7ff ffa0 	bl	80011c0 <haltMotors>
		motorsEnabled = false;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <disableMotors+0x3c>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(Get_TIM5_Instance(), TIM_CHANNEL_2);
 8001286:	f014 fcb7 	bl	8015bf8 <Get_TIM5_Instance>
 800128a:	4603      	mov	r3, r0
 800128c:	2104      	movs	r1, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f00b fa88 	bl	800c7a4 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(Get_TIM5_Instance(), TIM_CHANNEL_4);
 8001294:	f014 fcb0 	bl	8015bf8 <Get_TIM5_Instance>
 8001298:	4603      	mov	r3, r0
 800129a:	210c      	movs	r1, #12
 800129c:	4618      	mov	r0, r3
 800129e:	f00b fa81 	bl	800c7a4 <HAL_TIM_PWM_Stop>
		println("[MOT] Motors DISABLED!!!!!!!1");
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <disableMotors+0x40>)
 80012a4:	f7ff feda 	bl	800105c <println>
	}
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200003c4 	.word	0x200003c4
 80012b0:	0801dc08 	.word	0x0801dc08

080012b4 <SD_init>:
    return FR_OK;
}


FRESULT SD_init()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 80012ba:	f012 fcd9 	bl	8013c70 <BSP_SD_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SD_init+0x14>
 80012c4:	2303      	movs	r3, #3
 80012c6:	e027      	b.n	8001318 <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 80012c8:	4815      	ldr	r0, [pc, #84]	; (8001320 <SD_init+0x6c>)
 80012ca:	f012 fcc3 	bl	8013c54 <FATFS_UnLinkDriver>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SD_init+0x24>
 80012d4:	2303      	movs	r3, #3
 80012d6:	e01f      	b.n	8001318 <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 80012d8:	4911      	ldr	r1, [pc, #68]	; (8001320 <SD_init+0x6c>)
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <SD_init+0x70>)
 80012dc:	f012 fc72 	bl	8013bc4 <FATFS_LinkDriver>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SD_init+0x36>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e016      	b.n	8001318 <SD_init+0x64>

	f_mount(0, SDPath, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <SD_init+0x6c>)
 80012ee:	2000      	movs	r0, #0
 80012f0:	f011 fec0 	bl	8013074 <f_mount>
	FRESULT mountStatus = f_mount(&fso, SDPath, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	490a      	ldr	r1, [pc, #40]	; (8001320 <SD_init+0x6c>)
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <SD_init+0x74>)
 80012fa:	f011 febb 	bl	8013074 <f_mount>
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	if (mountStatus != FR_OK)
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	4905      	ldr	r1, [pc, #20]	; (8001320 <SD_init+0x6c>)
 800130c:	2000      	movs	r0, #0
 800130e:	f011 feb1 	bl	8013074 <f_mount>
		return mountStatus;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	e000      	b.n	8001318 <SD_init+0x64>
	}

	return FR_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20006c30 	.word	0x20006c30
 8001324:	0801e404 	.word	0x0801e404
 8001328:	2000210c 	.word	0x2000210c

0800132c <SD_newFile>:

	return FR_OK;
}

FRESULT SD_newFile(char* path)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	stato = f_open(&fileo, path, FA_CREATE_ALWAYS);
 8001334:	2208      	movs	r2, #8
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <SD_newFile+0x44>)
 800133a:	f011 fee1 	bl	8013100 <f_open>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <SD_newFile+0x48>)
 8001344:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK)
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <SD_newFile+0x48>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <SD_newFile+0x32>
	{
		f_mount(0, SDPath, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	4909      	ldr	r1, [pc, #36]	; (8001378 <SD_newFile+0x4c>)
 8001352:	2000      	movs	r0, #0
 8001354:	f011 fe8e 	bl	8013074 <f_mount>
		return stato;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <SD_newFile+0x48>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	e004      	b.n	8001368 <SD_newFile+0x3c>


	//DateTime now = getTime();
	//SD_setFileTime(path, &now);

	f_close(&fileo);
 800135e:	4804      	ldr	r0, [pc, #16]	; (8001370 <SD_newFile+0x44>)
 8001360:	f012 faac 	bl	80138bc <f_close>
	return stato;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <SD_newFile+0x48>)
 8001366:	781b      	ldrb	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200010dc 	.word	0x200010dc
 8001374:	200010d8 	.word	0x200010d8
 8001378:	20006c30 	.word	0x20006c30

0800137c <SD_writeToFile>:
{
	return f_unlink(path);
}

FRESULT SD_writeToFile(char* path, char* content)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	stato = f_open(&fileo, path,  FA_WRITE | FA_OPEN_APPEND);
 8001386:	2232      	movs	r2, #50	; 0x32
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4815      	ldr	r0, [pc, #84]	; (80013e0 <SD_writeToFile+0x64>)
 800138c:	f011 feb8 	bl	8013100 <f_open>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <SD_writeToFile+0x68>)
 8001396:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <SD_writeToFile+0x68>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <SD_writeToFile+0x2a>
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <SD_writeToFile+0x68>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	e017      	b.n	80013d6 <SD_writeToFile+0x5a>

	stato = f_write(&fileo, content, strlen(content), &testByteo);
 80013a6:	6838      	ldr	r0, [r7, #0]
 80013a8:	f7fe ff1c 	bl	80001e4 <strlen>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <SD_writeToFile+0x6c>)
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <SD_writeToFile+0x64>)
 80013b4:	f012 f870 	bl	8013498 <f_write>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <SD_writeToFile+0x68>)
 80013be:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <SD_writeToFile+0x68>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <SD_writeToFile+0x52>
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SD_writeToFile+0x68>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	e003      	b.n	80013d6 <SD_writeToFile+0x5a>

	return f_close(&fileo);
 80013ce:	4804      	ldr	r0, [pc, #16]	; (80013e0 <SD_writeToFile+0x64>)
 80013d0:	f012 fa74 	bl	80138bc <f_close>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200010dc 	.word	0x200010dc
 80013e4:	200010d8 	.word	0x200010d8
 80013e8:	20003140 	.word	0x20003140

080013ec <SD_newDirectory>:
	//########################
	return FR_OK;
}

FRESULT SD_newDirectory(char* path)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ implement: tree -> multiple '/'
	return f_mkdir(path);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f012 fa8b 	bl	8013910 <f_mkdir>
 80013fa:	4603      	mov	r3, r0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
 8001408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <millis+0x1c>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	10624dd3 	.word	0x10624dd3

08001424 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 8001430:	1cf9      	adds	r1, r7, #3
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	2201      	movs	r2, #1
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f00a fd60 	bl	800befe <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 800143e:	bf00      	nop
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f00b f832 	bl	800c4aa <HAL_SPI_GetState>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	d1f9      	bne.n	8001440 <SX1278_write+0x1c>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
 8001460:	4613      	mov	r3, r2
 8001462:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a18      	ldr	r0, [r3, #32]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	8a5b      	ldrh	r3, [r3, #18]
 800146c:	2200      	movs	r2, #0
 800146e:	4619      	mov	r1, r3
 8001470:	f006 fa28 	bl	80078c4 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4619      	mov	r1, r3
 8001482:	4610      	mov	r0, r2
 8001484:	f7ff ffce 	bl	8001424 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	78ba      	ldrb	r2, [r7, #2]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ffc7 	bl	8001424 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a18      	ldr	r0, [r3, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8a5b      	ldrh	r3, [r3, #18]
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	f006 fa0f 	bl	80078c4 <HAL_GPIO_WritePin>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	461a      	mov	r2, r3
 80014ba:	460b      	mov	r3, r1
 80014bc:	72fb      	strb	r3, [r7, #11]
 80014be:	4613      	mov	r3, r2
 80014c0:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80014c2:	7abb      	ldrb	r3, [r7, #10]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d92d      	bls.n	8001524 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a18      	ldr	r0, [r3, #32]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8a5b      	ldrh	r3, [r3, #18]
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	f006 f9f6 	bl	80078c4 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff ff9c 	bl	8001424 <SX1278_write>
	for (i = 0; i < len; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	75fb      	strb	r3, [r7, #23]
 80014f0:	e00b      	b.n	800150a <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff ff90 	bl	8001424 <SX1278_write>
	for (i = 0; i < len; i++)
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	3301      	adds	r3, #1
 8001508:	75fb      	strb	r3, [r7, #23]
 800150a:	7dfa      	ldrb	r2, [r7, #23]
 800150c:	7abb      	ldrb	r3, [r7, #10]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3ef      	bcc.n	80014f2 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a18      	ldr	r0, [r3, #32]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8a5b      	ldrh	r3, [r3, #18]
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	f006 f9d1 	bl	80078c4 <HAL_GPIO_WritePin>
 8001522:	e000      	b.n	8001526 <SX1278_command_burst+0x78>
	if (len <= 1) return;
 8001524:	bf00      	nop
}
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af02      	add	r7, sp, #8
 8001532:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001538:	2300      	movs	r3, #0
 800153a:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 800153c:	f107 020e 	add.w	r2, r7, #14
 8001540:	f107 010f 	add.w	r1, r7, #15
 8001544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2301      	movs	r3, #1
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f00a fe0a 	bl	800c166 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001552:	bf00      	nop
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f00a ffa8 	bl	800c4aa <HAL_SPI_GetState>
 800155a:	4603      	mov	r3, r0
 800155c:	2b01      	cmp	r3, #1
 800155e:	d1f9      	bne.n	8001554 <SX1278_read+0x28>

	return rxByte;
 8001560:	7bbb      	ldrb	r3, [r7, #14]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a18      	ldr	r0, [r3, #32]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	8a5b      	ldrh	r3, [r3, #18]
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	f006 f99f 	bl	80078c4 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	78fa      	ldrb	r2, [r7, #3]
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff48 	bl	8001424 <SX1278_write>
	recv = SX1278_read(inst->spi);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ffc7 	bl	800152c <SX1278_read>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a18      	ldr	r0, [r3, #32]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8a5b      	ldrh	r3, [r3, #18]
 80015aa:	2201      	movs	r2, #1
 80015ac:	4619      	mov	r1, r3
 80015ae:	f006 f989 	bl	80078c4 <HAL_GPIO_WritePin>

	return recv;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	461a      	mov	r2, r3
 80015c8:	460b      	mov	r3, r1
 80015ca:	72fb      	strb	r3, [r7, #11]
 80015cc:	4613      	mov	r3, r2
 80015ce:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80015d0:	7abb      	ldrb	r3, [r7, #10]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d92b      	bls.n	800162e <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a18      	ldr	r0, [r3, #32]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8a5b      	ldrh	r3, [r3, #18]
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	f006 f96f 	bl	80078c4 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	7afa      	ldrb	r2, [r7, #11]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff18 	bl	8001424 <SX1278_write>
	for (i = 0; i < len; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	75fb      	strb	r3, [r7, #23]
 80015f8:	e00c      	b.n	8001614 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	18d4      	adds	r4, r2, r3
 8001604:	4608      	mov	r0, r1
 8001606:	f7ff ff91 	bl	800152c <SX1278_read>
 800160a:	4603      	mov	r3, r0
 800160c:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	3301      	adds	r3, #1
 8001612:	75fb      	strb	r3, [r7, #23]
 8001614:	7dfa      	ldrb	r2, [r7, #23]
 8001616:	7abb      	ldrb	r3, [r7, #10]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3ee      	bcc.n	80015fa <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a18      	ldr	r0, [r3, #32]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8a5b      	ldrh	r3, [r3, #18]
 8001624:	2201      	movs	r2, #1
 8001626:	4619      	mov	r1, r3
 8001628:	f006 f94c 	bl	80078c4 <HAL_GPIO_WritePin>
 800162c:	e000      	b.n	8001630 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 800162e:	bf00      	nop
}
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}
	...

08001638 <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	inst->active = false;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	SX1278_reset(inst);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fab9 	bl	8001bc0 <SX1278_reset>

	//unable to establish the connection with module
	uint8_t recvVersion = SX1278_read_address(inst, REG_LR_VERSION);
 800164e:	2142      	movs	r1, #66	; 0x42
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff8a 	bl	800156a <SX1278_read_address>
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
	//printLen = s//printf(//printBuffer, "Recv: %x\r\n", recvVersion);
	//printv(//printBuffer, //printLen);
	if (recvVersion != 0x12)
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b12      	cmp	r3, #18
 800165e:	d001      	beq.n	8001664 <SX1278_init+0x2c>
	{
		//println("[LoRa] Abort: Unable to access version register, SPI not working!");
		return false;
 8001660:	2300      	movs	r3, #0
 8001662:	e0d7      	b.n	8001814 <SX1278_init+0x1dc>
	}

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fa8b 	bl	8001b80 <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 800166a:	2288      	movs	r2, #136	; 0x88
 800166c:	2101      	movs	r1, #1
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fef0 	bl	8001454 <SX1278_command>

	//SX1278_command(inst, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	frf = inst->config.frequency;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f04f 0400 	mov.w	r4, #0
 800167c:	4a67      	ldr	r2, [pc, #412]	; (800181c <SX1278_init+0x1e4>)
 800167e:	e9c2 3400 	strd	r3, r4, [r2]
	frf <<= 14;
 8001682:	4b66      	ldr	r3, [pc, #408]	; (800181c <SX1278_init+0x1e4>)
 8001684:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	f04f 0400 	mov.w	r4, #0
 8001690:	0394      	lsls	r4, r2, #14
 8001692:	ea44 4491 	orr.w	r4, r4, r1, lsr #18
 8001696:	038b      	lsls	r3, r1, #14
 8001698:	4a60      	ldr	r2, [pc, #384]	; (800181c <SX1278_init+0x1e4>)
 800169a:	e9c2 3400 	strd	r3, r4, [r2]
	frf /= 1000000;
 800169e:	4b5f      	ldr	r3, [pc, #380]	; (800181c <SX1278_init+0x1e4>)
 80016a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a4:	4a5e      	ldr	r2, [pc, #376]	; (8001820 <SX1278_init+0x1e8>)
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	f7ff fb4d 	bl	8000d48 <__aeabi_uldivmod>
 80016ae:	4603      	mov	r3, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	4a5a      	ldr	r2, [pc, #360]	; (800181c <SX1278_init+0x1e4>)
 80016b4:	e9c2 3400 	strd	r3, r4, [r2]
	memcpy(frf_bytes, &frf, 8);
 80016b8:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <SX1278_init+0x1ec>)
 80016ba:	4a58      	ldr	r2, [pc, #352]	; (800181c <SX1278_init+0x1e4>)
 80016bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c0:	e883 0003 	stmia.w	r3, {r0, r1}
	SX1278_command(inst, LR_RegFrMsb, frf_bytes[2]);
 80016c4:	4b57      	ldr	r3, [pc, #348]	; (8001824 <SX1278_init+0x1ec>)
 80016c6:	789b      	ldrb	r3, [r3, #2]
 80016c8:	461a      	mov	r2, r3
 80016ca:	2106      	movs	r1, #6
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fec1 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, frf_bytes[1]);
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <SX1278_init+0x1ec>)
 80016d4:	785b      	ldrb	r3, [r3, #1]
 80016d6:	461a      	mov	r2, r3
 80016d8:	2107      	movs	r1, #7
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff feba 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, frf_bytes[0]);
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <SX1278_init+0x1ec>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	2108      	movs	r1, #8
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff feb3 	bl	8001454 <SX1278_command>
	//printLen = s//printf(//printBuffer, "[LoRa] Frequency setting: %x_%x_%x\r\n", frf_bytes[2], frf_bytes[1], frf_bytes[0]);
	//printv(//printBuffer, //printLen);

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);	//Setting transmit power
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	791b      	ldrb	r3, [r3, #4]
 80016f2:	461a      	mov	r2, r3
 80016f4:	2109      	movs	r1, #9
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff feac 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 80016fc:	222b      	movs	r2, #43	; 0x2b
 80016fe:	210b      	movs	r1, #11
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fea7 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 8001706:	2223      	movs	r2, #35	; 0x23
 8001708:	210c      	movs	r1, #12
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fea2 	bl	8001454 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 8001710:	2287      	movs	r2, #135	; 0x87
 8001712:	214d      	movs	r1, #77	; 0x4d
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fe9d 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 800171a:	2200      	movs	r2, #0
 800171c:	2124      	movs	r1, #36	; 0x24
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fe98 	bl	8001454 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	795b      	ldrb	r3, [r3, #5]
 8001728:	2b06      	cmp	r3, #6
 800172a:	d139      	bne.n	80017a0 <SX1278_init+0x168>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	79db      	ldrb	r3, [r3, #7]
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	b2da      	uxtb	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	799b      	ldrb	r3, [r3, #6]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4413      	add	r3, r2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	3301      	adds	r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	211d      	movs	r1, #29
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fe83 	bl	8001454 <SX1278_command>
		//SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	795b      	ldrb	r3, [r3, #5]
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	b2da      	uxtb	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7a1b      	ldrb	r3, [r3, #8]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4413      	add	r3, r2
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	211e      	movs	r1, #30
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fe74 	bl	8001454 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 800176c:	2131      	movs	r1, #49	; 0x31
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fefb 	bl	800156a <SX1278_read_address>
 8001774:	4603      	mov	r3, r0
 8001776:	73bb      	strb	r3, [r7, #14]
		tmp &= 0xF8;
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	f023 0307 	bic.w	r3, r3, #7
 800177e:	73bb      	strb	r3, [r7, #14]
		tmp |= 0x05;
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	f043 0305 	orr.w	r3, r3, #5
 8001786:	73bb      	strb	r3, [r7, #14]
		SX1278_command(inst, 0x31, tmp);
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	461a      	mov	r2, r3
 800178c:	2131      	movs	r1, #49	; 0x31
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fe60 	bl	8001454 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 8001794:	220c      	movs	r2, #12
 8001796:	2137      	movs	r1, #55	; 0x37
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fe5b 	bl	8001454 <SX1278_command>
 800179e:	e01d      	b.n	80017dc <SX1278_init+0x1a4>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	79db      	ldrb	r3, [r3, #7]
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	799b      	ldrb	r3, [r3, #6]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	211d      	movs	r1, #29
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe4b 	bl	8001454 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	795b      	ldrb	r3, [r3, #5]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7a1b      	ldrb	r3, [r3, #8]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	211e      	movs	r1, #30
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fe3c 	bl	8001454 <SX1278_command>
	}

	//SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
	SX1278_command(inst, LR_RegSymbTimeoutLsb, 0x64);	//recievier timeout value [timeout = symbtimeout*ts]
 80017dc:	2264      	movs	r2, #100	; 0x64
 80017de:	211f      	movs	r1, #31
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fe37 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 80017e6:	2200      	movs	r2, #0
 80017e8:	2120      	movs	r1, #32
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fe32 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 80017f0:	220c      	movs	r2, #12
 80017f2:	2121      	movs	r1, #33	; 0x21
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fe2d 	bl	8001454 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 80017fa:	2201      	movs	r2, #1
 80017fc:	2141      	movs	r1, #65	; 0x41
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe28 	bl	8001454 <SX1278_command>

	SX1278_standby(inst);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f9cb 	bl	8001ba0 <SX1278_standby>

	inst->active = true;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	return true;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	200005d0 	.word	0x200005d0
 8001820:	000f4240 	.word	0x000f4240
 8001824:	200005d8 	.word	0x200005d8

08001828 <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	4613      	mov	r3, r2
 8001834:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	7b1b      	ldrb	r3, [r3, #12]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d12b      	bne.n	8001896 <SX1278_transmit+0x6e>
	{
		//println("[LoRa] Starting transmission...");
		inst->txDone = false;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		SX1278_tx_mode(inst);
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 f932 	bl	8001ab0 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	461a      	mov	r2, r3
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f86c 	bl	8001930 <SX1278_tx_input>
		SX1278_tx_push(inst);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f898 	bl	800198e <SX1278_tx_push>

		if (inst->useDio0IRQ)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <SX1278_transmit+0x4c>
		{
			//waiting for interrupt
			//println("[LoRa] Transmission pushed! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001870:	2301      	movs	r3, #1
 8001872:	e011      	b.n	8001898 <SX1278_transmit+0x70>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001874:	bf00      	nop
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8a1b      	ldrh	r3, [r3, #16]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f006 f807 	bl	8007894 <HAL_GPIO_ReadPin>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f4      	beq.n	8001876 <SX1278_transmit+0x4e>
			return SX1278_tx_finish(inst);
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f88b 	bl	80019a8 <SX1278_tx_finish>
 8001892:	4603      	mov	r3, r0
 8001894:	e000      	b.n	8001898 <SX1278_transmit+0x70>
	}
	else
	{
		//println("[LoRa] Cannot transmit...standby");
		return false;
 8001896:	2300      	movs	r3, #0
	}
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7b1b      	ldrb	r3, [r3, #12]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d13a      	bne.n	8001926 <SX1278_receive+0x86>
	{
		//println("[LoRa] Starting receiving...");
		SX1278_rx_mode(inst);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f929 	bl	8001b08 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00a      	beq.n	80018d6 <SX1278_receive+0x36>
		{
			//waiting for interrupt
			//println("[LoRa] Receiver set! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			inst->rxStart = millis();
 80018c8:	f7ff fd9c 	bl	8001404 <millis>
 80018cc:	4602      	mov	r2, r0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e028      	b.n	8001928 <SX1278_receive+0x88>
			uint32_t recvStart = millis();
 80018d6:	f7ff fd95 	bl	8001404 <millis>
 80018da:	60f8      	str	r0, [r7, #12]
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 80018dc:	e011      	b.n	8001902 <SX1278_receive+0x62>
				if (millis() - recvStart >= inst->config.rxTimeoutSymb)
 80018de:	f7ff fd91 	bl	8001404 <millis>
 80018e2:	4602      	mov	r2, r0
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	8952      	ldrh	r2, [r2, #10]
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d308      	bcc.n	8001902 <SX1278_receive+0x62>
					SX1278_rx_get_packet(inst);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f87e 	bl	80019f2 <SX1278_rx_get_packet>
					inst->rxTimeout = true;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					return false;
 80018fe:	2300      	movs	r3, #0
 8001900:	e012      	b.n	8001928 <SX1278_receive+0x88>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69da      	ldr	r2, [r3, #28]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	8a1b      	ldrh	r3, [r3, #16]
 800190a:	4619      	mov	r1, r3
 800190c:	4610      	mov	r0, r2
 800190e:	f005 ffc1 	bl	8007894 <HAL_GPIO_ReadPin>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0e2      	beq.n	80018de <SX1278_receive+0x3e>
			SX1278_rx_get_packet(inst);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f86a 	bl	80019f2 <SX1278_rx_get_packet>
			return inst->newPacket;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001924:	e000      	b.n	8001928 <SX1278_receive+0x88>
	}
	else
	{
		//println("[LoRa] Cannot receive...standby");
		return false;
 8001926:	2300      	movs	r3, #0
	}
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	4613      	mov	r3, r2
 800193c:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	461a      	mov	r2, r3
 8001942:	2122      	movs	r1, #34	; 0x22
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7ff fd85 	bl	8001454 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	2100      	movs	r1, #0
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff fdac 	bl	80014ae <SX1278_command_burst>

	//sprintf(inst->lastPacket, (char*)txBuffer);
	uint8_t l;
	for (l = 0; l < length; l++)
 8001956:	2300      	movs	r3, #0
 8001958:	75fb      	strb	r3, [r7, #23]
 800195a:	e00c      	b.n	8001976 <SX1278_tx_input+0x46>
	{
		inst->txBuffer[l] = txBuffer[l];
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	441a      	add	r2, r3
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	7811      	ldrb	r1, [r2, #0]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	460a      	mov	r2, r1
 800196c:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	for (l = 0; l < length; l++)
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	3301      	adds	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
 8001976:	7dfa      	ldrb	r2, [r7, #23]
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3ee      	bcc.n	800195c <SX1278_tx_input+0x2c>
	}
	inst->txLen = length;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	79fa      	ldrb	r2, [r7, #7]
 8001982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 8001996:	228b      	movs	r2, #139	; 0x8b
 8001998:	2101      	movs	r1, #1
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff fd5a 	bl	8001454 <SX1278_command>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80019b0:	2112      	movs	r1, #18
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fdd9 	bl	800156a <SX1278_read_address>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bfcc      	ite	gt
 80019d0:	2301      	movgt	r3, #1
 80019d2:	2300      	movle	r3, #0
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	SX1278_clearLoRaIrq(inst);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f9d2 	bl	8001d86 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f8dc 	bl	8001ba0 <SX1278_standby>

	//printLen = s//printf(//printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
	//printv(//printBuffer, //printLen);
	return true;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f980 	bl	8001d00 <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3344      	adds	r3, #68	; 0x44
 8001a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f015 fc5b 	bl	80172c6 <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 8001a10:	2110      	movs	r1, #16
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fda9 	bl	800156a <SX1278_read_address>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 8001a1c:	7bbb      	ldrb	r3, [r7, #14]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	210d      	movs	r1, #13
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fd16 	bl	8001454 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	795b      	ldrb	r3, [r3, #5]
 8001a2c:	2b06      	cmp	r3, #6
 8001a2e:	d104      	bne.n	8001a3a <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e005      	b.n	8001a46 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 8001a3a:	2113      	movs	r1, #19
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fd94 	bl	800156a <SX1278_read_address>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2100      	movs	r1, #0
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff fdb3 	bl	80015bc <SX1278_read_burst>

	inst->newPacket = inst->rxDone && !inst->rxTimeout && !(inst->crcError && !LR_VALIDATE_CRCERROR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d009      	beq.n	8001a74 <SX1278_rx_get_packet+0x82>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001a66:	f083 0301 	eor.w	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SX1278_rx_get_packet+0x82>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <SX1278_rx_get_packet+0x84>
 8001a74:	2300      	movs	r3, #0
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rssi = SX1278_getRSSI(inst);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f98c 	bl	8001da0 <SX1278_getRSSI>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34
	inst->rxLen = packet_size;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	SX1278_clearLoRaIrq(inst);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f975 	bl	8001d86 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f87f 	bl	8001ba0 <SX1278_standby>
	{
		//printLen = s//printf(//printBuffer, "[LoRa] Valid packet received!\r\n");
	}
	//printv(//printBuffer, //printLen);

	return inst->newPacket;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Transmit mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f964 	bl	8001d86 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8001abe:	2241      	movs	r2, #65	; 0x41
 8001ac0:	2140      	movs	r1, #64	; 0x40
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fcc6 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001ac8:	22f7      	movs	r2, #247	; 0xf7
 8001aca:	2111      	movs	r1, #17
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff fcc1 	bl	8001454 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001ad2:	210e      	movs	r1, #14
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fd48 	bl	800156a <SX1278_read_address>
 8001ada:	4603      	mov	r3, r0
 8001adc:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	210d      	movs	r1, #13
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fcb5 	bl	8001454 <SX1278_command>

	inst->txLen = 0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	inst->txDone = false;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->mode = TX;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	731a      	strb	r2, [r3, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	SX1278_standby(inst);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f845 	bl	8001ba0 <SX1278_standby>
	//println("[LoRa] Goes into Receive mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f935 	bl	8001d86 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2140      	movs	r1, #64	; 0x40
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fc97 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 8001b26:	221f      	movs	r2, #31
 8001b28:	2111      	movs	r1, #17
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fc92 	bl	8001454 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 8001b30:	210f      	movs	r1, #15
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fd19 	bl	800156a <SX1278_read_address>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	210d      	movs	r1, #13
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fc86 	bl	8001454 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 8001b48:	228d      	movs	r2, #141	; 0x8d
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fc81 	bl	8001454 <SX1278_command>

	inst->crcError = false;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxLen = 0;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	inst->newPacket = false;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxDone = false;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->mode = RX;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2203      	movs	r2, #3
 8001b76:	731a      	strb	r2, [r3, #12]
	//println("[LoRa] Finished setting RX mode.");
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Sleep mode.");
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001b88:	2208      	movs	r2, #8
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fc61 	bl	8001454 <SX1278_command>
	inst->mode = SLEEP;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	731a      	strb	r2, [r3, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Standby mode.");
	SX1278_command(inst, LR_RegOpMode, 0x09);
 8001ba8:	2209      	movs	r2, #9
 8001baa:	2101      	movs	r1, #1
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff fc51 	bl	8001454 <SX1278_command>
	inst->mode = STANDBY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	731a      	strb	r2, [r3, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <SX1278_reset>:

void SX1278_reset(SX1278* inst) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Resetting...");
	inst->newPacket = true;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxTimeout = false;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxDone = false;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->crcError = false;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = 1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
	inst->newPacket = false;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->pendingIRQ = false;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	inst->txLen = 0;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	inst->rxLen = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	inst->mode = SLEEP;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a18      	ldr	r0, [r3, #32]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	8a5b      	ldrh	r3, [r3, #18]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f005 fe50 	bl	80078c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_RESET);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6998      	ldr	r0, [r3, #24]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	89db      	ldrh	r3, [r3, #14]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f005 fe48 	bl	80078c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c34:	2001      	movs	r0, #1
 8001c36:	f004 ffc7 	bl	8006bc8 <HAL_Delay>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_SET);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6998      	ldr	r0, [r3, #24]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	89db      	ldrh	r3, [r3, #14]
 8001c42:	2201      	movs	r2, #1
 8001c44:	4619      	mov	r1, r3
 8001c46:	f005 fe3d 	bl	80078c4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c4a:	2064      	movs	r0, #100	; 0x64
 8001c4c:	f004 ffbc 	bl	8006bc8 <HAL_Delay>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <SX1278_dio0_IRQ>:

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d01e      	beq.n	8001ca8 <SX1278_dio0_IRQ+0x50>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d019      	beq.n	8001ca8 <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7b1b      	ldrb	r3, [r3, #12]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d104      	bne.n	8001c86 <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff fe93 	bl	80019a8 <SX1278_tx_finish>
 8001c82:	4603      	mov	r3, r0
 8001c84:	e011      	b.n	8001caa <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7b1b      	ldrb	r3, [r3, #12]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d104      	bne.n	8001c98 <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff feaf 	bl	80019f2 <SX1278_rx_get_packet>
 8001c94:	4603      	mov	r3, r0
 8001c96:	e008      	b.n	8001caa <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f874 	bl	8001d86 <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff7e 	bl	8001ba0 <SX1278_standby>
			return false;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e000      	b.n	8001caa <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 8001ca8:	2300      	movs	r3, #0
	}
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <SX1278_intTimeout>:

bool SX1278_intTimeout(SX1278* inst)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
	if ((millis() - inst->rxStart >= inst->config.rxTimeoutSymb) && inst->mode == RX && inst->pendingIRQ)
 8001cba:	f7ff fba3 	bl	8001404 <millis>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	8952      	ldrh	r2, [r2, #10]
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d313      	bcc.n	8001cf6 <SX1278_intTimeout+0x44>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7b1b      	ldrb	r3, [r3, #12]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d10f      	bne.n	8001cf6 <SX1278_intTimeout+0x44>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <SX1278_intTimeout+0x44>
	{
		inst->rxTimeout = true;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		inst->rxStart = millis();
 8001ce8:	f7ff fb8c 	bl	8001404 <millis>
 8001cec:	4602      	mov	r2, r0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	63da      	str	r2, [r3, #60]	; 0x3c

		return true;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <SX1278_intTimeout+0x46>
	}
	return false;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001d08:	2112      	movs	r1, #18
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fc2d 	bl	800156a <SX1278_read_address>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bfcc      	ite	gt
 8001d28:	2301      	movgt	r3, #1
 8001d2a:	2300      	movle	r3, #0
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	// || inst->rxDone ##################################################### might cause error when reading this value!!!!!!!!!!!!!!!!!!!!!!!
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00) || !(inst->rxDone);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	dc07      	bgt.n	8001d52 <SX1278_update_IRQ_status+0x52>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SX1278_update_IRQ_status+0x56>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <SX1278_update_IRQ_status+0x58>
 8001d56:	2300      	movs	r3, #0
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bfcc      	ite	gt
 8001d72:	2301      	movgt	r3, #1
 8001d74:	2300      	movle	r3, #0
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001d8e:	22ff      	movs	r2, #255	; 0xff
 8001d90:	2112      	movs	r1, #18
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fb5e 	bl	8001454 <SX1278_command>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001da8:	211a      	movs	r1, #26
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fbdd 	bl	800156a <SX1278_read_address>
 8001db0:	4603      	mov	r3, r0
 8001db2:	3ba4      	subs	r3, #164	; 0xa4
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <BMP280_readBytes>:
#include "bmp280.h"
#include "run.h"
#include "config.h"

static bool BMP280_readBytes(BMP280* inst, uint8_t mem_addr, uint8_t* data, uint8_t len)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	72fb      	strb	r3, [r7, #11]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	72bb      	strb	r3, [r7, #10]
	return (HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, len, 5000) == HAL_OK);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8899      	ldrh	r1, [r3, #4]
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	b29c      	uxth	r4, r3
 8001ddc:	7abb      	ldrb	r3, [r7, #10]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de4:	9202      	str	r2, [sp, #8]
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2301      	movs	r3, #1
 8001dee:	4622      	mov	r2, r4
 8001df0:	f005 ffbe 	bl	8007d70 <HAL_I2C_Mem_Read>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf0c      	ite	eq
 8001dfa:	2301      	moveq	r3, #1
 8001dfc:	2300      	movne	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd90      	pop	{r4, r7, pc}

08001e08 <BMP280_writeByte>:
static bool BMP280_writeByte(BMP280* inst, uint8_t mem_addr, uint8_t data)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af04      	add	r7, sp, #16
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
 8001e14:	4613      	mov	r3, r2
 8001e16:	70bb      	strb	r3, [r7, #2]
	return (HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 10000) == HAL_OK);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	8899      	ldrh	r1, [r3, #4]
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e28:	9302      	str	r3, [sp, #8]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	1cbb      	adds	r3, r7, #2
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2301      	movs	r3, #1
 8001e34:	f005 fea2 	bl	8007b7c <HAL_I2C_Mem_Write>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <BMP280_read16>:
static bool BMP280_read16(BMP280* inst, uint8_t mem_addr, uint16_t* data)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af04      	add	r7, sp, #16
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	460b      	mov	r3, r1
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_buff[2];

	if (HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, rx_buff, 2, 5000) == HAL_OK)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8899      	ldrh	r1, [r3, #4]
 8001e62:	7afb      	ldrb	r3, [r7, #11]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2301      	movs	r3, #1
 8001e78:	f005 ff7a 	bl	8007d70 <HAL_I2C_Mem_Read>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10b      	bne.n	8001e9a <BMP280_read16+0x4e>
	{
		*data = (uint16_t)((rx_buff[1] << 8) | rx_buff[0]);
 8001e82:	7d7b      	ldrb	r3, [r7, #21]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b21a      	sxth	r2, r3
 8001e88:	7d3b      	ldrb	r3, [r7, #20]
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	801a      	strh	r2, [r3, #0]
		return true;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <BMP280_read16+0x50>
	}
	else return false;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <read_calibration_data>:

static bool read_calibration_data(BMP280* inst)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	return(BMP280_read16(inst, 0x88, &inst->dig_T1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	331a      	adds	r3, #26
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2188      	movs	r1, #136	; 0x88
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffc9 	bl	8001e4c <BMP280_read16>
 8001eba:	4603      	mov	r3, r0
		&& BMP280_read16(inst, 0x94, (uint16_t*) &inst->dig_P4)
		&& BMP280_read16(inst, 0x96, (uint16_t*) &inst->dig_P5)
		&& BMP280_read16(inst, 0x98, (uint16_t*) &inst->dig_P6)
		&& BMP280_read16(inst, 0x9a, (uint16_t*) &inst->dig_P7)
		&& BMP280_read16(inst, 0x9c, (uint16_t*) &inst->dig_P8)
		&& BMP280_read16(inst, 0x9e, (uint16_t*) &inst->dig_P9));
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d06f      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8a, (uint16_t*) &inst->dig_T2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	331c      	adds	r3, #28
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	218a      	movs	r1, #138	; 0x8a
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ffbf 	bl	8001e4c <BMP280_read16>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d065      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8c, (uint16_t*) &inst->dig_T3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	331e      	adds	r3, #30
 8001ed8:	461a      	mov	r2, r3
 8001eda:	218c      	movs	r1, #140	; 0x8c
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ffb5 	bl	8001e4c <BMP280_read16>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d05b      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8e, &inst->dig_P1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3320      	adds	r3, #32
 8001eec:	461a      	mov	r2, r3
 8001eee:	218e      	movs	r1, #142	; 0x8e
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ffab 	bl	8001e4c <BMP280_read16>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d051      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x90, (uint16_t*) &inst->dig_P2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3322      	adds	r3, #34	; 0x22
 8001f00:	461a      	mov	r2, r3
 8001f02:	2190      	movs	r1, #144	; 0x90
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ffa1 	bl	8001e4c <BMP280_read16>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d047      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x92, (uint16_t*) &inst->dig_P3)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3324      	adds	r3, #36	; 0x24
 8001f14:	461a      	mov	r2, r3
 8001f16:	2192      	movs	r1, #146	; 0x92
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff97 	bl	8001e4c <BMP280_read16>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d03d      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x94, (uint16_t*) &inst->dig_P4)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3326      	adds	r3, #38	; 0x26
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2194      	movs	r1, #148	; 0x94
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff8d 	bl	8001e4c <BMP280_read16>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d033      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x96, (uint16_t*) &inst->dig_P5)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3328      	adds	r3, #40	; 0x28
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2196      	movs	r1, #150	; 0x96
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff83 	bl	8001e4c <BMP280_read16>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d029      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x98, (uint16_t*) &inst->dig_P6)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	332a      	adds	r3, #42	; 0x2a
 8001f50:	461a      	mov	r2, r3
 8001f52:	2198      	movs	r1, #152	; 0x98
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff79 	bl	8001e4c <BMP280_read16>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01f      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9a, (uint16_t*) &inst->dig_P7)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	332c      	adds	r3, #44	; 0x2c
 8001f64:	461a      	mov	r2, r3
 8001f66:	219a      	movs	r1, #154	; 0x9a
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff6f 	bl	8001e4c <BMP280_read16>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9c, (uint16_t*) &inst->dig_P8)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	332e      	adds	r3, #46	; 0x2e
 8001f78:	461a      	mov	r2, r3
 8001f7a:	219c      	movs	r1, #156	; 0x9c
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff65 	bl	8001e4c <BMP280_read16>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9e, (uint16_t*) &inst->dig_P9));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3330      	adds	r3, #48	; 0x30
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	219e      	movs	r1, #158	; 0x9e
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff5b 	bl	8001e4c <BMP280_read16>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <read_calibration_data+0xfc>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <read_calibration_data+0xfe>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <compensate_temperature>:

static int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp, int32_t *fine_temp)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	10da      	asrs	r2, r3, #3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8b5b      	ldrh	r3, [r3, #26]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001fd2:	12db      	asrs	r3, r3, #11
 8001fd4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	111b      	asrs	r3, r3, #4
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	8b52      	ldrh	r2, [r2, #26]
 8001fde:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	1112      	asrs	r2, r2, #4
 8001fe4:	68f9      	ldr	r1, [r7, #12]
 8001fe6:	8b49      	ldrh	r1, [r1, #26]
 8001fe8:	1a52      	subs	r2, r2, r1
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001ffa:	139b      	asrs	r3, r3, #14
 8001ffc:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	441a      	add	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3380      	adds	r3, #128	; 0x80
 8002014:	121b      	asrs	r3, r3, #8
}
 8002016:	4618      	mov	r0, r3
 8002018:	371c      	adds	r7, #28
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <compensate_pressure>:

static uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press, int32_t fine_temp)
{
 8002022:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4619      	mov	r1, r3
 8002034:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002038:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800203c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002040:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	6a3a      	ldr	r2, [r7, #32]
 8002048:	fb02 f203 	mul.w	r2, r2, r3
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	6a39      	ldr	r1, [r7, #32]
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	441a      	add	r2, r3
 8002056:	6a39      	ldr	r1, [r7, #32]
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	fba1 3403 	umull	r3, r4, r1, r3
 800205e:	4422      	add	r2, r4
 8002060:	4614      	mov	r4, r2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	f9b2 202a 	ldrsh.w	r2, [r2, #42]	; 0x2a
 8002068:	b211      	sxth	r1, r2
 800206a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800206e:	fb01 f504 	mul.w	r5, r1, r4
 8002072:	fb03 f002 	mul.w	r0, r3, r2
 8002076:	4428      	add	r0, r5
 8002078:	fba3 3401 	umull	r3, r4, r3, r1
 800207c:	1902      	adds	r2, r0, r4
 800207e:	4614      	mov	r4, r2
 8002080:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8002084:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800208e:	b21b      	sxth	r3, r3
 8002090:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002094:	6a3a      	ldr	r2, [r7, #32]
 8002096:	fb04 f102 	mul.w	r1, r4, r2
 800209a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209c:	fb03 f202 	mul.w	r2, r3, r2
 80020a0:	1888      	adds	r0, r1, r2
 80020a2:	6a3a      	ldr	r2, [r7, #32]
 80020a4:	fba2 1203 	umull	r1, r2, r2, r3
 80020a8:	1883      	adds	r3, r0, r2
 80020aa:	461a      	mov	r2, r3
 80020ac:	f04f 0500 	mov.w	r5, #0
 80020b0:	f04f 0600 	mov.w	r6, #0
 80020b4:	0456      	lsls	r6, r2, #17
 80020b6:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80020ba:	044d      	lsls	r5, r1, #17
 80020bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80020c0:	186b      	adds	r3, r5, r1
 80020c2:	eb46 0402 	adc.w	r4, r6, r2
 80020c6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80020d0:	b219      	sxth	r1, r3
 80020d2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80020d6:	f04f 0500 	mov.w	r5, #0
 80020da:	f04f 0600 	mov.w	r6, #0
 80020de:	00ce      	lsls	r6, r1, #3
 80020e0:	2500      	movs	r5, #0
 80020e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80020e6:	186b      	adds	r3, r5, r1
 80020e8:	eb46 0402 	adc.w	r4, r6, r2
 80020ec:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	6a3a      	ldr	r2, [r7, #32]
 80020f4:	fb02 f203 	mul.w	r2, r2, r3
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	6a39      	ldr	r1, [r7, #32]
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	441a      	add	r2, r3
 8002102:	6a39      	ldr	r1, [r7, #32]
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	fba1 3403 	umull	r3, r4, r1, r3
 800210a:	4422      	add	r2, r4
 800210c:	4614      	mov	r4, r2
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8002114:	b211      	sxth	r1, r2
 8002116:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800211a:	fb01 f504 	mul.w	r5, r1, r4
 800211e:	fb03 f002 	mul.w	r0, r3, r2
 8002122:	4428      	add	r0, r5
 8002124:	fba3 3401 	umull	r3, r4, r3, r1
 8002128:	1902      	adds	r2, r0, r4
 800212a:	4614      	mov	r4, r2
 800212c:	f04f 0100 	mov.w	r1, #0
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	0a19      	lsrs	r1, r3, #8
 8002136:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800213a:	1222      	asrs	r2, r4, #8
		 + ((var1 * (int64_t) inst->dig_P2) << 12);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002142:	b21b      	sxth	r3, r3
 8002144:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002148:	6a38      	ldr	r0, [r7, #32]
 800214a:	fb04 f500 	mul.w	r5, r4, r0
 800214e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002150:	fb03 f000 	mul.w	r0, r3, r0
 8002154:	4428      	add	r0, r5
 8002156:	6a3d      	ldr	r5, [r7, #32]
 8002158:	fba5 5603 	umull	r5, r6, r5, r3
 800215c:	1983      	adds	r3, r0, r6
 800215e:	461e      	mov	r6, r3
 8002160:	f04f 0b00 	mov.w	fp, #0
 8002164:	f04f 0c00 	mov.w	ip, #0
 8002168:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800216c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8002170:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8002174:	eb1b 0301 	adds.w	r3, fp, r1
 8002178:	eb4c 0402 	adc.w	r4, ip, r2
 800217c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 8002180:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002184:	1c19      	adds	r1, r3, #0
 8002186:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8c1b      	ldrh	r3, [r3, #32]
 800218e:	b29b      	uxth	r3, r3
 8002190:	f04f 0400 	mov.w	r4, #0
 8002194:	fb03 f502 	mul.w	r5, r3, r2
 8002198:	fb01 f004 	mul.w	r0, r1, r4
 800219c:	4428      	add	r0, r5
 800219e:	fba1 3403 	umull	r3, r4, r1, r3
 80021a2:	1902      	adds	r2, r0, r4
 80021a4:	4614      	mov	r4, r2
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	1061      	asrs	r1, r4, #1
 80021b0:	17e2      	asrs	r2, r4, #31
 80021b2:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 80021b6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80021ba:	4323      	orrs	r3, r4
 80021bc:	d101      	bne.n	80021c2 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80021be:	2300      	movs	r3, #0
 80021c0:	e0d4      	b.n	800236c <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80021c8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80021cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	ea4f 0963 	mov.w	r9, r3, asr #1
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80021dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80021e0:	4645      	mov	r5, r8
 80021e2:	464e      	mov	r6, r9
 80021e4:	1aed      	subs	r5, r5, r3
 80021e6:	eb66 0604 	sbc.w	r6, r6, r4
 80021ea:	46a8      	mov	r8, r5
 80021ec:	46b1      	mov	r9, r6
 80021ee:	eb18 0308 	adds.w	r3, r8, r8
 80021f2:	eb49 0409 	adc.w	r4, r9, r9
 80021f6:	4698      	mov	r8, r3
 80021f8:	46a1      	mov	r9, r4
 80021fa:	eb18 0805 	adds.w	r8, r8, r5
 80021fe:	eb49 0906 	adc.w	r9, r9, r6
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800220e:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8002212:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8002216:	eb18 0801 	adds.w	r8, r8, r1
 800221a:	eb49 0902 	adc.w	r9, r9, r2
 800221e:	f04f 0100 	mov.w	r1, #0
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800222a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800222e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002232:	4688      	mov	r8, r1
 8002234:	4691      	mov	r9, r2
 8002236:	eb18 0805 	adds.w	r8, r8, r5
 800223a:	eb49 0906 	adc.w	r9, r9, r6
 800223e:	f04f 0100 	mov.w	r1, #0
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800224a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800224e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002252:	4688      	mov	r8, r1
 8002254:	4691      	mov	r9, r2
 8002256:	eb18 0005 	adds.w	r0, r8, r5
 800225a:	eb49 0106 	adc.w	r1, r9, r6
 800225e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002262:	f7fe fd21 	bl	8000ca8 <__aeabi_ldivmod>
 8002266:	4603      	mov	r3, r0
 8002268:	460c      	mov	r4, r1
 800226a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002274:	b219      	sxth	r1, r3
 8002276:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800227a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	f04f 0400 	mov.w	r4, #0
 8002286:	0b6b      	lsrs	r3, r5, #13
 8002288:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800228c:	1374      	asrs	r4, r6, #13
 800228e:	fb03 f502 	mul.w	r5, r3, r2
 8002292:	fb01 f004 	mul.w	r0, r1, r4
 8002296:	4428      	add	r0, r5
 8002298:	fba1 1203 	umull	r1, r2, r1, r3
 800229c:	1883      	adds	r3, r0, r2
 800229e:	461a      	mov	r2, r3
 80022a0:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	f04f 0400 	mov.w	r4, #0
 80022ac:	0b6b      	lsrs	r3, r5, #13
 80022ae:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80022b2:	1374      	asrs	r4, r6, #13
 80022b4:	fb03 f502 	mul.w	r5, r3, r2
 80022b8:	fb01 f004 	mul.w	r0, r1, r4
 80022bc:	4428      	add	r0, r5
 80022be:	fba1 1203 	umull	r1, r2, r1, r3
 80022c2:	1883      	adds	r3, r0, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	f04f 0400 	mov.w	r4, #0
 80022ce:	0e4b      	lsrs	r3, r1, #25
 80022d0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80022d4:	1654      	asrs	r4, r2, #25
 80022d6:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	fb04 f102 	mul.w	r1, r4, r2
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	fb03 f202 	mul.w	r2, r3, r2
 80022f2:	1888      	adds	r0, r1, r2
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	fba2 1203 	umull	r1, r2, r2, r3
 80022fa:	1883      	adds	r3, r0, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	f04f 0400 	mov.w	r4, #0
 8002306:	0ccb      	lsrs	r3, r1, #19
 8002308:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800230c:	14d4      	asrs	r4, r2, #19
 800230e:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 8002312:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002316:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800231a:	eb11 0803 	adds.w	r8, r1, r3
 800231e:	eb42 0904 	adc.w	r9, r2, r4
 8002322:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002326:	eb13 0508 	adds.w	r5, r3, r8
 800232a:	eb44 0609 	adc.w	r6, r4, r9
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	0a29      	lsrs	r1, r5, #8
 8002338:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800233c:	1232      	asrs	r2, r6, #8
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002344:	b21d      	sxth	r5, r3
 8002346:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800234a:	f04f 0800 	mov.w	r8, #0
 800234e:	f04f 0900 	mov.w	r9, #0
 8002352:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002356:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800235a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800235e:	eb18 0301 	adds.w	r3, r8, r1
 8002362:	eb49 0402 	adc.w	r4, r9, r2
 8002366:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 800236a:	693b      	ldr	r3, [r7, #16]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08002376 <bmp280_reset>:

void bmp280_reset(BMP280* inst)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	// soft reset
	BMP280_writeByte(inst, BMP280_REG_RESET, BMP280_RESET_VALUE);
 800237e:	22b6      	movs	r2, #182	; 0xb6
 8002380:	21e0      	movs	r1, #224	; 0xe0
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fd40 	bl	8001e08 <BMP280_writeByte>
	delay(100);
 8002388:	2064      	movs	r0, #100	; 0x64
 800238a:	f004 fc1d 	bl	8006bc8 <HAL_Delay>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <bmp280_present>:

bool bmp280_present(BMP280* inst, uint8_t trials)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	70fb      	strb	r3, [r7, #3]
	// request and verify chip id
	uint8_t attempts = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
	do
	{
		bmp280_reset(inst);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffe5 	bl	8002376 <bmp280_reset>
		uint8_t who[1] = { 0x00 };
 80023ac:	2300      	movs	r3, #0
 80023ae:	733b      	strb	r3, [r7, #12]
		BMP280_readBytes(inst, BMP280_REG_ID, who, 1);
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	2301      	movs	r3, #1
 80023b6:	21d0      	movs	r1, #208	; 0xd0
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff fcff 	bl	8001dbc <BMP280_readBytes>
		if (who[0] == BMP280_CHIP_ID) return true;
 80023be:	7b3b      	ldrb	r3, [r7, #12]
 80023c0:	2b58      	cmp	r3, #88	; 0x58
 80023c2:	d101      	bne.n	80023c8 <bmp280_present+0x32>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e00e      	b.n	80023e6 <bmp280_present+0x50>
		else
		{
			attempts++;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	3301      	adds	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
			delay(1000);
 80023ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023d2:	f004 fbf9 	bl	8006bc8 <HAL_Delay>
		}
	} while (attempts <= trials);
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d9e3      	bls.n	80023a6 <bmp280_present+0x10>
	inst->active = false;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	761a      	strb	r2, [r3, #24]
	return false;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <bmp280_init>:

bool bmp280_init(BMP280* inst, BMP280_config* params)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
	uint8_t temp_data[1];	// nasty temporary byte, used for everything
	inst->active = false;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	761a      	strb	r2, [r3, #24]

	if (!bmp280_present(inst, 1)) return false;
 80023fe:	2101      	movs	r1, #1
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ffc8 	bl	8002396 <bmp280_present>
 8002406:	4603      	mov	r3, r0
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <bmp280_init+0x28>
 8002412:	2300      	movs	r3, #0
 8002414:	e064      	b.n	80024e0 <bmp280_init+0xf2>
	bmp280_reset(inst);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ffad 	bl	8002376 <bmp280_reset>

	while (!(BMP280_readBytes(inst, BMP280_REG_STATUS, temp_data, 1) && (temp_data[0] & 0x01) == 0)); // wait until finished copying over the NVM data
 800241c:	bf00      	nop
 800241e:	f107 020c 	add.w	r2, r7, #12
 8002422:	2301      	movs	r3, #1
 8002424:	21f3      	movs	r1, #243	; 0xf3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fcc8 	bl	8001dbc <BMP280_readBytes>
 800242c:	4603      	mov	r3, r0
 800242e:	f083 0301 	eor.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f2      	bne.n	800241e <bmp280_init+0x30>
 8002438:	7b3b      	ldrb	r3, [r7, #12]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ed      	bne.n	800241e <bmp280_init+0x30>

	if (!read_calibration_data(inst)) return false;
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff fd2e 	bl	8001ea4 <read_calibration_data>
 8002448:	4603      	mov	r3, r0
 800244a:	f083 0301 	eor.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <bmp280_init+0x6a>
 8002454:	2300      	movs	r3, #0
 8002456:	e043      	b.n	80024e0 <bmp280_init+0xf2>

	// Setting parameters
	temp_data[0] = (params->standby << 5) | (params->filter << 2);	// config byte
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	791b      	ldrb	r3, [r3, #4]
 800245c:	015b      	lsls	r3, r3, #5
 800245e:	b25a      	sxtb	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	b25b      	sxtb	r3, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	b25b      	sxtb	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	733b      	strb	r3, [r7, #12]
	if (!BMP280_writeByte(inst, BMP280_REG_CONFIG, temp_data[0])) return false;
 8002470:	7b3b      	ldrb	r3, [r7, #12]
 8002472:	461a      	mov	r2, r3
 8002474:	21f5      	movs	r1, #245	; 0xf5
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fcc6 	bl	8001e08 <BMP280_writeByte>
 800247c:	4603      	mov	r3, r0
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <bmp280_init+0x9e>
 8002488:	2300      	movs	r3, #0
 800248a:	e029      	b.n	80024e0 <bmp280_init+0xf2>

	if (params->mode == BMP280_MODE_FORCED) params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d102      	bne.n	800249a <bmp280_init+0xac>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
	temp_data[0] = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode); // ctrl byte
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	78db      	ldrb	r3, [r3, #3]
 800249e:	015b      	lsls	r3, r3, #5
 80024a0:	b25a      	sxtb	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	789b      	ldrb	r3, [r3, #2]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b25a      	sxtb	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b25b      	sxtb	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	733b      	strb	r3, [r7, #12]
	if (!BMP280_writeByte(inst, BMP280_REG_CTRL, temp_data[0])) return false;
 80024bc:	7b3b      	ldrb	r3, [r7, #12]
 80024be:	461a      	mov	r2, r3
 80024c0:	21f4      	movs	r1, #244	; 0xf4
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff fca0 	bl	8001e08 <BMP280_writeByte>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <bmp280_init+0xea>
 80024d4:	2300      	movs	r3, #0
 80024d6:	e003      	b.n	80024e0 <bmp280_init+0xf2>

	inst->active = true;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	761a      	strb	r2, [r3, #24]
	return true;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <bmp280_update>:

bool bmp280_update(BMP280 *inst)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	size_t size = 6;
 80024f0:	2306      	movs	r3, #6
 80024f2:	61fb      	str	r3, [r7, #28]
	if (!BMP280_readBytes(inst, 0xf7, data, size)) return false;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f107 020c 	add.w	r2, r7, #12
 80024fc:	21f7      	movs	r1, #247	; 0xf7
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fc5c 	bl	8001dbc <BMP280_readBytes>
 8002504:	4603      	mov	r3, r0
 8002506:	f083 0301 	eor.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <bmp280_update+0x2c>
 8002510:	2300      	movs	r3, #0
 8002512:	e065      	b.n	80025e0 <bmp280_update+0xf8>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002514:	7b3b      	ldrb	r3, [r7, #12]
 8002516:	031a      	lsls	r2, r3, #12
 8002518:	7b7b      	ldrb	r3, [r7, #13]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	4313      	orrs	r3, r2
 800251e:	7bba      	ldrb	r2, [r7, #14]
 8002520:	0912      	lsrs	r2, r2, #4
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	031a      	lsls	r2, r3, #12
 800252c:	7c3b      	ldrb	r3, [r7, #16]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4313      	orrs	r3, r2
 8002532:	7c7a      	ldrb	r2, [r7, #17]
 8002534:	0912      	lsrs	r2, r2, #4
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

	int32_t fine_temp;
	inst->temperature = (float)(compensate_temperature(inst, adc_temp, &fine_temp)) / 100.0;
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	461a      	mov	r2, r3
 8002542:	6979      	ldr	r1, [r7, #20]
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fd33 	bl	8001fb0 <compensate_temperature>
 800254a:	ee07 0a90 	vmov	s15, r0
 800254e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002552:	eddf 6a29 	vldr	s13, [pc, #164]	; 80025f8 <bmp280_update+0x110>
 8002556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->pressure = (float)(compensate_pressure(inst, adc_pressure, fine_temp)) / 256.0;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	461a      	mov	r2, r3
 8002564:	69b9      	ldr	r1, [r7, #24]
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fd5b 	bl	8002022 <compensate_pressure>
 800256c:	ee07 0a90 	vmov	s15, r0
 8002570:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002574:	eddf 6a21 	vldr	s13, [pc, #132]	; 80025fc <bmp280_update+0x114>
 8002578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	edc3 7a03 	vstr	s15, [r3, #12]
	inst->altitude = 44330 * (1.0 - pow(inst->pressure / SEA_PRESSURE, 0.1903));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	edd3 7a03 	vldr	s15, [r3, #12]
 8002588:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002600 <bmp280_update+0x118>
 800258c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002590:	ee16 0a90 	vmov	r0, s13
 8002594:	f7fd ffe8 	bl	8000568 <__aeabi_f2d>
 8002598:	4603      	mov	r3, r0
 800259a:	460c      	mov	r4, r1
 800259c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80025e8 <bmp280_update+0x100>
 80025a0:	ec44 3b10 	vmov	d0, r3, r4
 80025a4:	f018 fd8a 	bl	801b0bc <pow>
 80025a8:	ec54 3b10 	vmov	r3, r4, d0
 80025ac:	461a      	mov	r2, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	f04f 0000 	mov.w	r0, #0
 80025b4:	4913      	ldr	r1, [pc, #76]	; (8002604 <bmp280_update+0x11c>)
 80025b6:	f7fd fe77 	bl	80002a8 <__aeabi_dsub>
 80025ba:	4603      	mov	r3, r0
 80025bc:	460c      	mov	r4, r1
 80025be:	4618      	mov	r0, r3
 80025c0:	4621      	mov	r1, r4
 80025c2:	a30b      	add	r3, pc, #44	; (adr r3, 80025f0 <bmp280_update+0x108>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe f826 	bl	8000618 <__aeabi_dmul>
 80025cc:	4603      	mov	r3, r0
 80025ce:	460c      	mov	r4, r1
 80025d0:	4618      	mov	r0, r3
 80025d2:	4621      	mov	r1, r4
 80025d4:	f7fe fb18 	bl	8000c08 <__aeabi_d2f>
 80025d8:	4602      	mov	r2, r0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	615a      	str	r2, [r3, #20]

	return true;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3724      	adds	r7, #36	; 0x24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd90      	pop	{r4, r7, pc}
 80025e8:	1a36e2eb 	.word	0x1a36e2eb
 80025ec:	3fc85bc0 	.word	0x3fc85bc0
 80025f0:	00000000 	.word	0x00000000
 80025f4:	40e5a540 	.word	0x40e5a540
 80025f8:	42c80000 	.word	0x42c80000
 80025fc:	43800000 	.word	0x43800000
 8002600:	447a8000 	.word	0x447a8000
 8002604:	3ff00000 	.word	0x3ff00000

08002608 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
 800260c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
 8002620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <millis+0x1c>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	10624dd3 	.word	0x10624dd3

0800263c <println>:
{
 800263c:	b40f      	push	{r0, r1, r2, r3}
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
	if (usbPresent)
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <println+0xb4>)
 8002646:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800264a:	2b03      	cmp	r3, #3
 800264c:	d147      	bne.n	80026de <println+0xa2>
		writePin(LEDD, HIGH);
 800264e:	2201      	movs	r2, #1
 8002650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002654:	4827      	ldr	r0, [pc, #156]	; (80026f4 <println+0xb8>)
 8002656:	f005 f935 	bl	80078c4 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 800265a:	f107 031c 	add.w	r3, r7, #28
 800265e:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	69b9      	ldr	r1, [r7, #24]
 8002664:	4824      	ldr	r0, [pc, #144]	; (80026f8 <println+0xbc>)
 8002666:	f016 fc8d 	bl	8018f84 <vsiprintf>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <println+0xc0>)
 8002670:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <println+0xc0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <println+0xbc>)
 8002678:	210d      	movs	r1, #13
 800267a:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 800267c:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <println+0xc0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <println+0xbc>)
 8002684:	210a      	movs	r1, #10
 8002686:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8002688:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <println+0xc0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3302      	adds	r3, #2
 800268e:	4a1a      	ldr	r2, [pc, #104]	; (80026f8 <println+0xbc>)
 8002690:	2100      	movs	r1, #0
 8002692:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <println+0xc0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3303      	adds	r3, #3
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <println+0xc0>)
 800269c:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 800269e:	f7ff ffb3 	bl	8002608 <micros>
 80026a2:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 80026a4:	4b15      	ldr	r3, [pc, #84]	; (80026fc <println+0xc0>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	3346      	adds	r3, #70	; 0x46
 80026b2:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80026b4:	e001      	b.n	80026ba <println+0x7e>
			if (micros() - printStart > timeout && false)
 80026b6:	f7ff ffa7 	bl	8002608 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <println+0xc0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	4619      	mov	r1, r3
 80026c2:	480d      	ldr	r0, [pc, #52]	; (80026f8 <println+0xbc>)
 80026c4:	f014 f952 	bl	801696c <CDC_Transmit_FS>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d0f3      	beq.n	80026b6 <println+0x7a>
		writePin(LEDD, LOW);
 80026ce:	2200      	movs	r2, #0
 80026d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026d4:	4807      	ldr	r0, [pc, #28]	; (80026f4 <println+0xb8>)
 80026d6:	f005 f8f5 	bl	80078c4 <HAL_GPIO_WritePin>
		return true;
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <println+0xa4>
	return false;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026ea:	b004      	add	sp, #16
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000e3c 	.word	0x20000e3c
 80026f4:	40020400 	.word	0x40020400
 80026f8:	200005e4 	.word	0x200005e4
 80026fc:	200005e0 	.word	0x200005e0

08002700 <GPS_read>:
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
	return true;
}

char GPS_read(GPS* inst)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	static uint32_t firstChar = 0;	// first character received in current sentence
	uint32_t tStart = millis();		// as close as we can get to time char was sent
 8002708:	f7ff ff88 	bl	800261c <millis>
 800270c:	60f8      	str	r0, [r7, #12]
	char c = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	72fb      	strb	r3, [r7, #11]
	if (inst->paused) return c;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <GPS_read+0x20>
 800271c:	7afb      	ldrb	r3, [r7, #11]
 800271e:	e069      	b.n	80027f4 <GPS_read+0xf4>

	c = (char)inst->uartBuffer[0];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8002726:	72fb      	strb	r3, [r7, #11]

	inst->currentline[inst->lineidx++] = c;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8002734:	b2db      	uxtb	r3, r3
 8002736:	1c59      	adds	r1, r3, #1
 8002738:	b2c8      	uxtb	r0, r1
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
 8002740:	4413      	add	r3, r2
 8002742:	7afa      	ldrb	r2, [r7, #11]
 8002744:	701a      	strb	r2, [r3, #0]
	// [!!!] \/ wtf is that
	if (inst->lineidx >= MAXLINELENGTH) inst->lineidx = MAXLINELENGTH - 1; // ensure there is someplace to put the next received character
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b77      	cmp	r3, #119	; 0x77
 8002750:	d903      	bls.n	800275a <GPS_read+0x5a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2277      	movs	r2, #119	; 0x77
 8002756:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	if (c == '\n')
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	2b0a      	cmp	r3, #10
 800275e:	d141      	bne.n	80027e4 <GPS_read+0xe4>
	{
		inst->currentline[inst->lineidx] = 0;	// add endline character
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	4413      	add	r3, r2
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]

		if (inst->currentline == inst->line1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	33d8      	adds	r3, #216	; 0xd8
 800277e:	429a      	cmp	r2, r3
 8002780:	d10c      	bne.n	800279c <GPS_read+0x9c>
		{
			inst->currentline = inst->line2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 800279a:	e00b      	b.n	80027b4 <GPS_read+0xb4>
		}
		else
		{
			inst->currentline = inst->line1;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		}

		inst->lineidx = 0;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		inst->recvdflag = true;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		inst->recvdTime = millis();	// time we got the end of the string
 80027c4:	f7ff ff2a 	bl	800261c <millis>
 80027c8:	4602      	mov	r2, r0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		inst->sentTime = firstChar;
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <GPS_read+0xfc>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		firstChar = 0;				// there are no characters yet
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <GPS_read+0xfc>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
		return c;					// wait until next character to set time
 80027e0:	7afb      	ldrb	r3, [r7, #11]
 80027e2:	e007      	b.n	80027f4 <GPS_read+0xf4>
	}

	if (firstChar == 0) firstChar = tStart;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <GPS_read+0xfc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <GPS_read+0xf2>
 80027ec:	4a03      	ldr	r2, [pc, #12]	; (80027fc <GPS_read+0xfc>)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6013      	str	r3, [r2, #0]
	return c;
 80027f2:	7afb      	ldrb	r3, [r7, #11]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200007e4 	.word	0x200007e4

08002800 <GPS_init>:
/*!
		@brief Initialization code used by all constructor types
*/
/**************************************************************************/
bool GPS_init(GPS* inst)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	// UART instance, code ##########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@
	//println("[GPS] init()");
	inst->active = false;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	inst->recvdflag = false;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	inst->inStandbyMode = false;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	inst->paused = false;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	inst->lineidx = 0;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	inst->currentline = inst->line1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	inst->lastline = inst->line2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	// uint8_t
	inst->gpsTime.hour = 0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = 0;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = 0;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->gpsTime.year = 0;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->gpsTime.month = 0;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->gpsTime.dayM = 0;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->fixquality = 0;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	inst->fixquality_3d = 0;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	inst->satellites = 0;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	// bool
	inst->fix = false;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	// char
	inst->lat = 0;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 0;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 0;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	// uint16_t
	inst->gpsTime.msecond = 0;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	875a      	strh	r2, [r3, #58]	; 0x3a
	// float
	inst->latitude = 0.0;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	63da      	str	r2, [r3, #60]	; 0x3c
	inst->longitude = 0.0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
	inst->geoidheight = 0.0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
	inst->altitude = 0.0;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	659a      	str	r2, [r3, #88]	; 0x58
	inst->speed = 0.0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	65da      	str	r2, [r3, #92]	; 0x5c
	inst->angle = 0.0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	661a      	str	r2, [r3, #96]	; 0x60
	inst->magvariation = 0.0;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	665a      	str	r2, [r3, #100]	; 0x64
	inst->HDOP = 0.0;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	669a      	str	r2, [r3, #104]	; 0x68
	inst->VDOP = 0.0;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	66da      	str	r2, [r3, #108]	; 0x6c
	inst->PDOP = 0.0;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	671a      	str	r2, [r3, #112]	; 0x70

	inst->lastUpdate = 0; // millis() when last full sentence successfully parsed
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	inst->lastFix = 0;  // millis() when last fix received
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	inst->lastTime = 0; // millis() when last time received
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	inst->lastDate = 0; // millis() when last date received
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	inst->recvdTime = 0; // millis() when last full sentence received
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	inst->sentTime = 0; // millis() when first character of last full sentence received
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	inst->lat = 'X';
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2258      	movs	r2, #88	; 0x58
 800293a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 'X';
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2258      	movs	r2, #88	; 0x58
 8002942:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 'X';
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2258      	movs	r2, #88	; 0x58
 800294a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	inst->thisCheck = 0;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
	memset(inst->thisSource, 0x00, NMEA_MAX_SOURCE_ID);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	2203      	movs	r2, #3
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f014 fcb2 	bl	80172c6 <memset>
	memset(inst->thisSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3307      	adds	r3, #7
 8002966:	2214      	movs	r2, #20
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f014 fcab 	bl	80172c6 <memset>
	memset(inst->lastSource, 0x00, NMEA_MAX_SOURCE_ID);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	331b      	adds	r3, #27
 8002974:	2203      	movs	r2, #3
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f014 fca4 	bl	80172c6 <memset>
	memset(inst->lastSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	331e      	adds	r3, #30
 8002982:	2214      	movs	r2, #20
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f014 fc9d 	bl	80172c6 <memset>

	memset(inst->txtTXT, 0x00, 63);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3388      	adds	r3, #136	; 0x88
 8002990:	223f      	movs	r2, #63	; 0x3f
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f014 fc96 	bl	80172c6 <memset>
	inst->txtTot = 0;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	inst->txtID = 0;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	inst->txtN = 0;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	inst->sources[0] = "II";
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a41      	ldr	r2, [pc, #260]	; (8002abc <GPS_init+0x2bc>)
 80029b6:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	inst->sources[1] = "WI";
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a40      	ldr	r2, [pc, #256]	; (8002ac0 <GPS_init+0x2c0>)
 80029be:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	inst->sources[2] = "GP";
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a3f      	ldr	r2, [pc, #252]	; (8002ac4 <GPS_init+0x2c4>)
 80029c6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	inst->sources[3] = "GN";
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a3e      	ldr	r2, [pc, #248]	; (8002ac8 <GPS_init+0x2c8>)
 80029ce:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	inst->sources[4] = "ZZZ";
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a3d      	ldr	r2, [pc, #244]	; (8002acc <GPS_init+0x2cc>)
 80029d6:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	inst->sentences_parsed[0] = "GGA";
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a3c      	ldr	r2, [pc, #240]	; (8002ad0 <GPS_init+0x2d0>)
 80029de:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	inst->sentences_parsed[1] = "GLL";
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a3b      	ldr	r2, [pc, #236]	; (8002ad4 <GPS_init+0x2d4>)
 80029e6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	inst->sentences_parsed[2] = "GSA";
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a3a      	ldr	r2, [pc, #232]	; (8002ad8 <GPS_init+0x2d8>)
 80029ee:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	inst->sentences_parsed[3] = "RMC";
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a39      	ldr	r2, [pc, #228]	; (8002adc <GPS_init+0x2dc>)
 80029f6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	inst->sentences_parsed[4] = "ZZZ";
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a33      	ldr	r2, [pc, #204]	; (8002acc <GPS_init+0x2cc>)
 80029fe:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	inst->sentences_known[0] = "ZZZ";
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a31      	ldr	r2, [pc, #196]	; (8002acc <GPS_init+0x2cc>)
 8002a06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	//GPS_standby(inst);
	//GPS_wakeup(inst);

	HAL_Delay(1000);
 8002a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a0e:	f004 f8db 	bl	8006bc8 <HAL_Delay>

	GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_ALLDATA);
 8002a12:	4933      	ldr	r1, [pc, #204]	; (8002ae0 <GPS_init+0x2e0>)
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f867 	bl	8002ae8 <GPS_sendCommand>

	HAL_Delay(1000);
 8002a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a1e:	f004 f8d3 	bl	8006bc8 <HAL_Delay>

	GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_5HZ);
 8002a22:	4930      	ldr	r1, [pc, #192]	; (8002ae4 <GPS_init+0x2e4>)
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f85f 	bl	8002ae8 <GPS_sendCommand>

	HAL_Delay(1000);
 8002a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a2e:	f004 f8cb 	bl	8006bc8 <HAL_Delay>

	//GPS_sendCommand(inst, PMTK_API_SET_FIX_CTL_1HZ);
	//GPS_sendCommand(inst, PGCMD_ANTENNA);
	//GPS_sendCommand(inst, PMTK_Q_RELEASE);

	HAL_UART_Receive_IT(inst->uart, inst->uartBuffer, 1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4619      	mov	r1, r3
 8002a42:	f00a fcbf 	bl	800d3c4 <HAL_UART_Receive_IT>

	uint32_t timeout = millis();
 8002a46:	f7ff fde9 	bl	800261c <millis>
 8002a4a:	60f8      	str	r0, [r7, #12]

	while (millis() - timeout <= 1000)
 8002a4c:	e029      	b.n	8002aa2 <GPS_init+0x2a2>
	{
		//GPS_read(inst);
		if (GPS_newNMEAreceived(inst))
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 ffc3 	bl	80039da <GPS_newNMEAreceived>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d023      	beq.n	8002aa2 <GPS_init+0x2a2>
		{
			// not exact, but works now
			println(GPS_lastNMEA(inst));
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 ffcb 	bl	80039f6 <GPS_lastNMEA>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fdea 	bl	800263c <println>
			GPS_parse(inst, GPS_lastNMEA(inst));
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 ffc4 	bl	80039f6 <GPS_lastNMEA>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4619      	mov	r1, r3
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f868 	bl	8002b48 <GPS_parse>
			if (GPS_lastNMEA(inst)[0] == '$' && GPS_lastNMEA(inst)[1] == 'G')
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 ffbc 	bl	80039f6 <GPS_lastNMEA>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b24      	cmp	r3, #36	; 0x24
 8002a84:	d10d      	bne.n	8002aa2 <GPS_init+0x2a2>
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 ffb5 	bl	80039f6 <GPS_lastNMEA>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	3301      	adds	r3, #1
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b47      	cmp	r3, #71	; 0x47
 8002a94:	d105      	bne.n	8002aa2 <GPS_init+0x2a2>
			{
				//GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_RMCGGAGSA);
				//GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_1HZ);
				inst->active = true;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
				return true;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e008      	b.n	8002ab4 <GPS_init+0x2b4>
	while (millis() - timeout <= 1000)
 8002aa2:	f7ff fdbb 	bl	800261c <millis>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab0:	d9cd      	bls.n	8002a4e <GPS_init+0x24e>

			}
		}
	}
	return true;
 8002ab2:	2301      	movs	r3, #1
//	return false;
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	0801dcbc 	.word	0x0801dcbc
 8002ac0:	0801dcc0 	.word	0x0801dcc0
 8002ac4:	0801dcc4 	.word	0x0801dcc4
 8002ac8:	0801dcc8 	.word	0x0801dcc8
 8002acc:	0801dccc 	.word	0x0801dccc
 8002ad0:	0801dcd0 	.word	0x0801dcd0
 8002ad4:	0801dcd4 	.word	0x0801dcd4
 8002ad8:	0801dcd8 	.word	0x0801dcd8
 8002adc:	0801dcdc 	.word	0x0801dcdc
 8002ae0:	0801dce0 	.word	0x0801dce0
 8002ae4:	0801dd14 	.word	0x0801dd14

08002ae8 <GPS_sendCommand>:
		@brief Send a command to the GPS device
		@param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void GPS_sendCommand(GPS* inst, char* str)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
	//println("[GPS] sendCommand()");
	// NOT THIS //printLN, code !!!!!!!!!!!!!!@@@@@@@@@@@@@@@@@@@#################$$$$$$$$$$$$$$$$$$$$$$$$$$
	HAL_UART_Transmit(inst->uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 8002af8:	6838      	ldr	r0, [r7, #0]
 8002afa:	f7fd fb73 	bl	80001e4 <strlen>
 8002afe:	4603      	mov	r3, r0
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	6839      	ldr	r1, [r7, #0]
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f00a fbc2 	bl	800d292 <HAL_UART_Transmit>
	//println("[GPS] sendCommand()... waiting");
	// wait for finished transmission
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 8002b0e:	bf00      	nop
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002b16:	4618      	mov	r0, r3
 8002b18:	f00a fdba 	bl	800d690 <HAL_UART_GetState>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d1f6      	bne.n	8002b10 <GPS_sendCommand+0x28>
	uint8_t nla[2] = {(uint8_t)('\r'), (uint8_t)('\n')};
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <GPS_sendCommand+0x5c>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(inst->uart, nla, 2, HAL_MAX_DELAY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002b2e:	f107 010c 	add.w	r1, r7, #12
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	2202      	movs	r2, #2
 8002b38:	f00a fbab 	bl	800d292 <HAL_UART_Transmit>
	//println("[GPS] finished");
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd90      	pop	{r4, r7, pc}
 8002b44:	0801dd24 	.word	0x0801dd24

08002b48 <GPS_parse>:
		@return True if we parsed it, false if it has an invalid checksum or invalid
	 data
*/
/**************************************************************************/
bool GPS_parse(GPS* inst, char* nmea)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
	// do checksum check
	if (!GPS_check(inst, nmea)) return false;
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fb65 	bl	8003224 <GPS_check>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f083 0301 	eor.w	r3, r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <GPS_parse+0x22>
 8002b66:	2300      	movs	r3, #0
 8002b68:	e355      	b.n	8003216 <GPS_parse+0x6ce>
	// passed the check, so there's a valid source in thisSource and a valid
	// sentence in thisSentence

	// look for a few common sentences
	char* p = nmea; // Pointer to move through the sentence -- good parsers are
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	617b      	str	r3, [r7, #20]
									// non-destructive
	p = strchr(p, ',') + 1; // Skip to the character after the next comma, then check sentence.
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	6978      	ldr	r0, [r7, #20]
 8002b72:	f015 fadc 	bl	801812e <strchr>
 8002b76:	4603      	mov	r3, r0
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]

	if (!strcmp(inst->thisSentence, "GGA"))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3307      	adds	r3, #7
 8002b80:	49a5      	ldr	r1, [pc, #660]	; (8002e18 <GPS_parse+0x2d0>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fb24 	bl	80001d0 <strcmp>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 80e6 	bne.w	8002d5c <GPS_parse+0x214>
	{
		// found GGA
		// get time
		GPS_parseTime(inst, p);
 8002b90:	6979      	ldr	r1, [r7, #20]
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fcc6 	bl	8003524 <GPS_parseTime>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	6978      	ldr	r0, [r7, #20]
 8002b9c:	f015 fac7 	bl	801812e <strchr>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002ba6:	6979      	ldr	r1, [r7, #20]
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fd09 	bl	80035c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	6978      	ldr	r0, [r7, #20]
 8002bb2:	f015 fabc 	bl	801812e <strchr>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	3301      	adds	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002bbc:	6979      	ldr	r1, [r7, #20]
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fdb4 	bl	800372c <GPS_parseLatDir>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f083 0301 	eor.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <GPS_parse+0x8c>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e320      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f015 faa9 	bl	801812e <strchr>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002be2:	6979      	ldr	r1, [r7, #20]
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fde1 	bl	80037ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	6978      	ldr	r0, [r7, #20]
 8002bee:	f015 fa9e 	bl	801812e <strchr>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002bf8:	6979      	ldr	r1, [r7, #20]
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fe7e 	bl	80038fc <GPS_parseLonDir>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <GPS_parse+0xc8>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e302      	b.n	8003216 <GPS_parse+0x6ce>

		p = strchr(p, ',') + 1;
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f015 fa8b 	bl	801812e <strchr>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002c1e:	6979      	ldr	r1, [r7, #20]
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fc66 	bl	80034f2 <GPS_isEmpty>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f083 0301 	eor.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01b      	beq.n	8002c6a <GPS_parse+0x122>
		{
			inst->fixquality = atoi(p);
 8002c32:	6978      	ldr	r0, [r7, #20]
 8002c34:	f014 fafa 	bl	801722c <atoi>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			if (inst->fixquality > 0)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <GPS_parse+0x11a>
			{
				inst->fix = true;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				inst->lastFix = inst->sentTime;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002c60:	e003      	b.n	8002c6a <GPS_parse+0x122>
			}
			else inst->fix = false;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		}

		p = strchr(p, ',') + 1;
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	6978      	ldr	r0, [r7, #20]
 8002c6e:	f015 fa5e 	bl	801812e <strchr>
 8002c72:	4603      	mov	r3, r0
 8002c74:	3301      	adds	r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->satellites = atoi(p);
 8002c78:	6979      	ldr	r1, [r7, #20]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fc39 	bl	80034f2 <GPS_isEmpty>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <GPS_parse+0x154>
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f014 facd 	bl	801722c <atoi>
 8002c92:	4603      	mov	r3, r0
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

		p = strchr(p, ',') + 1;
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f015 fa45 	bl	801812e <strchr>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002caa:	6979      	ldr	r1, [r7, #20]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fc20 	bl	80034f2 <GPS_isEmpty>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f083 0301 	eor.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <GPS_parse+0x18e>
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f014 fab1 	bl	8017226 <atof>
 8002cc4:	ec54 3b10 	vmov	r3, r4, d0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	4621      	mov	r1, r4
 8002ccc:	f7fd ff9c 	bl	8000c08 <__aeabi_d2f>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	669a      	str	r2, [r3, #104]	; 0x68

		p = strchr(p, ',') + 1;
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f015 fa28 	bl	801812e <strchr>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->altitude = (float)atof(p);
 8002ce4:	6979      	ldr	r1, [r7, #20]
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fc03 	bl	80034f2 <GPS_isEmpty>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <GPS_parse+0x1c8>
 8002cf8:	6978      	ldr	r0, [r7, #20]
 8002cfa:	f014 fa94 	bl	8017226 <atof>
 8002cfe:	ec54 3b10 	vmov	r3, r4, d0
 8002d02:	4618      	mov	r0, r3
 8002d04:	4621      	mov	r1, r4
 8002d06:	f7fd ff7f 	bl	8000c08 <__aeabi_d2f>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	659a      	str	r2, [r3, #88]	; 0x58

		p = strchr(p, ',') + 1;
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f015 fa0b 	bl	801812e <strchr>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
		p = strchr(p, ',') + 1;
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	6978      	ldr	r0, [r7, #20]
 8002d22:	f015 fa04 	bl	801812e <strchr>
 8002d26:	4603      	mov	r3, r0
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->geoidheight = (float)atof(p);
 8002d2c:	6979      	ldr	r1, [r7, #20]
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fbdf 	bl	80034f2 <GPS_isEmpty>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8251 	beq.w	80031e4 <GPS_parse+0x69c>
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f014 fa6f 	bl	8017226 <atof>
 8002d48:	ec54 3b10 	vmov	r3, r4, d0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	4621      	mov	r1, r4
 8002d50:	f7fd ff5a 	bl	8000c08 <__aeabi_d2f>
 8002d54:	4602      	mov	r2, r0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
 8002d5a:	e243      	b.n	80031e4 <GPS_parse+0x69c>
	}

	else if (!strcmp(inst->thisSentence, "RMC"))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3307      	adds	r3, #7
 8002d60:	492e      	ldr	r1, [pc, #184]	; (8002e1c <GPS_parse+0x2d4>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fa34 	bl	80001d0 <strcmp>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 80e3 	bne.w	8002f36 <GPS_parse+0x3ee>
	{
		// found RMC
		// get time
		GPS_parseTime(inst, p);
 8002d70:	6979      	ldr	r1, [r7, #20]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fbd6 	bl	8003524 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f015 f9d7 	bl	801812e <strchr>
 8002d80:	4603      	mov	r3, r0
 8002d82:	3301      	adds	r3, #1
 8002d84:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002d86:	6979      	ldr	r1, [r7, #20]
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fe00 	bl	800398e <GPS_parseFix>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f083 0301 	eor.w	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <GPS_parse+0x256>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e23b      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	6978      	ldr	r0, [r7, #20]
 8002da2:	f015 f9c4 	bl	801812e <strchr>
 8002da6:	4603      	mov	r3, r0
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002dac:	6979      	ldr	r1, [r7, #20]
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fc06 	bl	80035c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f015 f9b9 	bl	801812e <strchr>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002dc2:	6979      	ldr	r1, [r7, #20]
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fcb1 	bl	800372c <GPS_parseLatDir>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f083 0301 	eor.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <GPS_parse+0x292>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e21d      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	6978      	ldr	r0, [r7, #20]
 8002dde:	f015 f9a6 	bl	801812e <strchr>
 8002de2:	4603      	mov	r3, r0
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fcde 	bl	80037ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f015 f99b 	bl	801812e <strchr>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002dfe:	6979      	ldr	r1, [r7, #20]
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fd7b 	bl	80038fc <GPS_parseLonDir>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f083 0301 	eor.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <GPS_parse+0x2d8>
 8002e12:	2300      	movs	r3, #0
 8002e14:	e1ff      	b.n	8003216 <GPS_parse+0x6ce>
 8002e16:	bf00      	nop
 8002e18:	0801dcd0 	.word	0x0801dcd0
 8002e1c:	0801dcdc 	.word	0x0801dcdc

		// speed
		p = strchr(p, ',') + 1;
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f015 f983 	bl	801812e <strchr>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->speed = (float)atof(p);
 8002e2e:	6979      	ldr	r1, [r7, #20]
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fb5e 	bl	80034f2 <GPS_isEmpty>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f083 0301 	eor.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <GPS_parse+0x312>
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f014 f9ef 	bl	8017226 <atof>
 8002e48:	ec54 3b10 	vmov	r3, r4, d0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	4621      	mov	r1, r4
 8002e50:	f7fd feda 	bl	8000c08 <__aeabi_d2f>
 8002e54:	4602      	mov	r2, r0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c

		// angle
		p = strchr(p, ',') + 1;
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	6978      	ldr	r0, [r7, #20]
 8002e5e:	f015 f966 	bl	801812e <strchr>
 8002e62:	4603      	mov	r3, r0
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->angle = (float)atof(p);
 8002e68:	6979      	ldr	r1, [r7, #20]
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fb41 	bl	80034f2 <GPS_isEmpty>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f083 0301 	eor.w	r3, r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <GPS_parse+0x34c>
 8002e7c:	6978      	ldr	r0, [r7, #20]
 8002e7e:	f014 f9d2 	bl	8017226 <atof>
 8002e82:	ec54 3b10 	vmov	r3, r4, d0
 8002e86:	4618      	mov	r0, r3
 8002e88:	4621      	mov	r1, r4
 8002e8a:	f7fd febd 	bl	8000c08 <__aeabi_d2f>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	661a      	str	r2, [r3, #96]	; 0x60

		p = strchr(p, ',') + 1;
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f015 f949 	bl	801812e <strchr>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002ea2:	6979      	ldr	r1, [r7, #20]
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fb24 	bl	80034f2 <GPS_isEmpty>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f083 0301 	eor.w	r3, r3, #1
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8196 	beq.w	80031e4 <GPS_parse+0x69c>
		{
			uint32_t fulldate = (float)atof(p);
 8002eb8:	6978      	ldr	r0, [r7, #20]
 8002eba:	f014 f9b4 	bl	8017226 <atof>
 8002ebe:	ec54 3b10 	vmov	r3, r4, d0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	f7fd fe9f 	bl	8000c08 <__aeabi_d2f>
 8002eca:	ee07 0a90 	vmov	s15, r0
 8002ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed2:	ee17 3a90 	vmov	r3, s15
 8002ed6:	60fb      	str	r3, [r7, #12]
			inst->gpsTime.dayM = fulldate / 10000;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a8b      	ldr	r2, [pc, #556]	; (8003108 <GPS_parse+0x5c0>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0b5b      	lsrs	r3, r3, #13
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inst->gpsTime.month = (fulldate % 10000) / 100;
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4b86      	ldr	r3, [pc, #536]	; (8003108 <GPS_parse+0x5c0>)
 8002eee:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef2:	0b5b      	lsrs	r3, r3, #13
 8002ef4:	f242 7110 	movw	r1, #10000	; 0x2710
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	4a83      	ldr	r2, [pc, #524]	; (800310c <GPS_parse+0x5c4>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inst->gpsTime.year = (fulldate % 100);
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4b7e      	ldr	r3, [pc, #504]	; (800310c <GPS_parse+0x5c4>)
 8002f12:	fba3 1302 	umull	r1, r3, r3, r2
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2164      	movs	r1, #100	; 0x64
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			inst->lastDate = inst->sentTime;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002f34:	e156      	b.n	80031e4 <GPS_parse+0x69c>
		}
	}

	else if (!strcmp(inst->thisSentence, "GLL"))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3307      	adds	r3, #7
 8002f3a:	4975      	ldr	r1, [pc, #468]	; (8003110 <GPS_parse+0x5c8>)
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd f947 	bl	80001d0 <strcmp>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d153      	bne.n	8002ff0 <GPS_parse+0x4a8>
	{
		// found GLL
		// parse out latitude
		GPS_parseLat(inst, p);
 8002f48:	6979      	ldr	r1, [r7, #20]
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fb38 	bl	80035c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	6978      	ldr	r0, [r7, #20]
 8002f54:	f015 f8eb 	bl	801812e <strchr>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002f5e:	6979      	ldr	r1, [r7, #20]
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fbe3 	bl	800372c <GPS_parseLatDir>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f083 0301 	eor.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <GPS_parse+0x42e>
 8002f72:	2300      	movs	r3, #0
 8002f74:	e14f      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	6978      	ldr	r0, [r7, #20]
 8002f7a:	f015 f8d8 	bl	801812e <strchr>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	3301      	adds	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002f84:	6979      	ldr	r1, [r7, #20]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fc10 	bl	80037ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	f015 f8cd 	bl	801812e <strchr>
 8002f94:	4603      	mov	r3, r0
 8002f96:	3301      	adds	r3, #1
 8002f98:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002f9a:	6979      	ldr	r1, [r7, #20]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fcad 	bl	80038fc <GPS_parseLonDir>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f083 0301 	eor.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <GPS_parse+0x46a>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e131      	b.n	8003216 <GPS_parse+0x6ce>

		// get time
		p = strchr(p, ',') + 1;
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	6978      	ldr	r0, [r7, #20]
 8002fb6:	f015 f8ba 	bl	801812e <strchr>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
		GPS_parseTime(inst, p);
 8002fc0:	6979      	ldr	r1, [r7, #20]
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 faae 	bl	8003524 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	6978      	ldr	r0, [r7, #20]
 8002fcc:	f015 f8af 	bl	801812e <strchr>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002fd6:	6979      	ldr	r1, [r7, #20]
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fcd8 	bl	800398e <GPS_parseFix>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f083 0301 	eor.w	r3, r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80fc 	beq.w	80031e4 <GPS_parse+0x69c>
 8002fec:	2300      	movs	r3, #0
 8002fee:	e112      	b.n	8003216 <GPS_parse+0x6ce>
	}

	else if (!strcmp(inst->thisSentence, "GSA"))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3307      	adds	r3, #7
 8002ff4:	4947      	ldr	r1, [pc, #284]	; (8003114 <GPS_parse+0x5cc>)
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd f8ea 	bl	80001d0 <strcmp>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f040 808a 	bne.w	8003118 <GPS_parse+0x5d0>
	{
		// found GSA
		// parse out Auto selection, but ignore them
		// parse out 3d fixquality
		p = strchr(p, ',') + 1;
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f015 f891 	bl	801812e <strchr>
 800300c:	4603      	mov	r3, r0
 800300e:	3301      	adds	r3, #1
 8003010:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->fixquality_3d = atoi(p);
 8003012:	6979      	ldr	r1, [r7, #20]
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fa6c 	bl	80034f2 <GPS_isEmpty>
 800301a:	4603      	mov	r3, r0
 800301c:	f083 0301 	eor.w	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <GPS_parse+0x4ee>
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f014 f900 	bl	801722c <atoi>
 800302c:	4603      	mov	r3, r0
 800302e:	b2da      	uxtb	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		// skip 12 Satellite PDNs without interpreting them
		for (int i = 0; i < 12; i++)
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	e009      	b.n	8003050 <GPS_parse+0x508>
		{
			p = strchr(p, ',') + 1;
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f015 f875 	bl	801812e <strchr>
 8003044:	4603      	mov	r3, r0
 8003046:	3301      	adds	r3, #1
 8003048:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 12; i++)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3301      	adds	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b0b      	cmp	r3, #11
 8003054:	ddf2      	ble.n	800303c <GPS_parse+0x4f4>
		}
		
		// parse out PDOP
		p = strchr(p, ',') + 1;
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	6978      	ldr	r0, [r7, #20]
 800305a:	f015 f868 	bl	801812e <strchr>
 800305e:	4603      	mov	r3, r0
 8003060:	3301      	adds	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->PDOP = (float)atof(p);
 8003064:	6979      	ldr	r1, [r7, #20]
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fa43 	bl	80034f2 <GPS_isEmpty>
 800306c:	4603      	mov	r3, r0
 800306e:	f083 0301 	eor.w	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <GPS_parse+0x548>
 8003078:	6978      	ldr	r0, [r7, #20]
 800307a:	f014 f8d4 	bl	8017226 <atof>
 800307e:	ec54 3b10 	vmov	r3, r4, d0
 8003082:	4618      	mov	r0, r3
 8003084:	4621      	mov	r1, r4
 8003086:	f7fd fdbf 	bl	8000c08 <__aeabi_d2f>
 800308a:	4602      	mov	r2, r0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	671a      	str	r2, [r3, #112]	; 0x70
		
		// parse out HDOP, we also parse this from the GGA sentence. Chipset should
		// report the same for both
		p = strchr(p, ',') + 1;
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f015 f84b 	bl	801812e <strchr>
 8003098:	4603      	mov	r3, r0
 800309a:	3301      	adds	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fa26 	bl	80034f2 <GPS_isEmpty>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f083 0301 	eor.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <GPS_parse+0x582>
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f014 f8b7 	bl	8017226 <atof>
 80030b8:	ec54 3b10 	vmov	r3, r4, d0
 80030bc:	4618      	mov	r0, r3
 80030be:	4621      	mov	r1, r4
 80030c0:	f7fd fda2 	bl	8000c08 <__aeabi_d2f>
 80030c4:	4602      	mov	r2, r0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	669a      	str	r2, [r3, #104]	; 0x68
		
		// parse out VDOP
		p = strchr(p, ',') + 1;
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	6978      	ldr	r0, [r7, #20]
 80030ce:	f015 f82e 	bl	801812e <strchr>
 80030d2:	4603      	mov	r3, r0
 80030d4:	3301      	adds	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->VDOP = (float)atof(p);
 80030d8:	6979      	ldr	r1, [r7, #20]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa09 	bl	80034f2 <GPS_isEmpty>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f083 0301 	eor.w	r3, r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d07b      	beq.n	80031e4 <GPS_parse+0x69c>
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f014 f89a 	bl	8017226 <atof>
 80030f2:	ec54 3b10 	vmov	r3, r4, d0
 80030f6:	4618      	mov	r0, r3
 80030f8:	4621      	mov	r1, r4
 80030fa:	f7fd fd85 	bl	8000c08 <__aeabi_d2f>
 80030fe:	4602      	mov	r2, r0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	66da      	str	r2, [r3, #108]	; 0x6c
 8003104:	e06e      	b.n	80031e4 <GPS_parse+0x69c>
 8003106:	bf00      	nop
 8003108:	d1b71759 	.word	0xd1b71759
 800310c:	51eb851f 	.word	0x51eb851f
 8003110:	0801dcd4 	.word	0x0801dcd4
 8003114:	0801dcd8 	.word	0x0801dcd8
	}

#ifdef NMEA_EXTENSIONS // Sentences not required for basic GPS functionality
	else if (!strcmp(inst->thisSentence, "TXT"))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3307      	adds	r3, #7
 800311c:	4940      	ldr	r1, [pc, #256]	; (8003220 <GPS_parse+0x6d8>)
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f856 	bl	80001d0 <strcmp>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d15a      	bne.n	80031e0 <GPS_parse+0x698>
	{ //*******************************TXT
		if (!GPS_isEmpty(inst, p)) inst->txtTot = atoi(p);
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f9e0 	bl	80034f2 <GPS_isEmpty>
 8003132:	4603      	mov	r3, r0
 8003134:	f083 0301 	eor.w	r3, r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d006      	beq.n	800314c <GPS_parse+0x604>
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f014 f874 	bl	801722c <atoi>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		p = strchr(p, ',') + 1;
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	6978      	ldr	r0, [r7, #20]
 8003150:	f014 ffed 	bl	801812e <strchr>
 8003154:	4603      	mov	r3, r0
 8003156:	3301      	adds	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtN = atoi(p);
 800315a:	6979      	ldr	r1, [r7, #20]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f9c8 	bl	80034f2 <GPS_isEmpty>
 8003162:	4603      	mov	r3, r0
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <GPS_parse+0x634>
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f014 f85c 	bl	801722c <atoi>
 8003174:	4602      	mov	r2, r0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p = strchr(p, ',') + 1;
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	6978      	ldr	r0, [r7, #20]
 8003180:	f014 ffd5 	bl	801812e <strchr>
 8003184:	4603      	mov	r3, r0
 8003186:	3301      	adds	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtID = atoi(p);
 800318a:	6979      	ldr	r1, [r7, #20]
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f9b0 	bl	80034f2 <GPS_isEmpty>
 8003192:	4603      	mov	r3, r0
 8003194:	f083 0301 	eor.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <GPS_parse+0x664>
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f014 f844 	bl	801722c <atoi>
 80031a4:	4602      	mov	r2, r0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		p = strchr(p, ',') + 1;
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f014 ffbd 	bl	801812e <strchr>
 80031b4:	4603      	mov	r3, r0
 80031b6:	3301      	adds	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) GPS_parseStr(inst, inst->txtTXT, p, 61); // copy the text to NMEA TXT max of 61 characters
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f998 	bl	80034f2 <GPS_isEmpty>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f083 0301 	eor.w	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <GPS_parse+0x69c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f103 0188 	add.w	r1, r3, #136	; 0x88
 80031d4:	233d      	movs	r3, #61	; 0x3d
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f923 	bl	8003424 <GPS_parseStr>
 80031de:	e001      	b.n	80031e4 <GPS_parse+0x69c>
	}
#endif // NMEA_EXTENSIONS

	// we dont parse the remaining, yet!
	else return false;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e018      	b.n	8003216 <GPS_parse+0x6ce>

	// Record the successful parsing of where the last data came from and when
	strcpy(inst->lastSource, inst->thisSource);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f103 021b 	add.w	r2, r3, #27
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f014 ffa9 	bl	8018148 <strcpy>
	strcpy(inst->lastSentence, inst->thisSentence);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f103 021e 	add.w	r2, r3, #30
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3307      	adds	r3, #7
 8003200:	4619      	mov	r1, r3
 8003202:	4610      	mov	r0, r2
 8003204:	f014 ffa0 	bl	8018148 <strcpy>
	inst->lastUpdate = millis();
 8003208:	f7ff fa08 	bl	800261c <millis>
 800320c:	4602      	mov	r2, r0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	return true;
 8003214:	2301      	movs	r3, #1
}
 8003216:	4618      	mov	r0, r3
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	bd90      	pop	{r4, r7, pc}
 800321e:	bf00      	nop
 8003220:	0801dd28 	.word	0x0801dd28

08003224 <GPS_check>:
		@param nmea Pointer to the NMEA string
		@return True if well formed, false if it has problems
*/
/**************************************************************************/
bool GPS_check(GPS* inst, char* nmea)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
	inst->thisCheck = 0; // new check
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
	if (*nmea != '$') return false; // doesn't start with $
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b24      	cmp	r3, #36	; 0x24
 800323a:	d001      	beq.n	8003240 <GPS_check+0x1c>
 800323c:	2300      	movs	r3, #0
 800323e:	e0ad      	b.n	800339c <GPS_check+0x178>
	else inst->thisCheck += NMEA_HAS_DOLLAR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	601a      	str	r2, [r3, #0]
	// do checksum check -- first look if we even have one -- ignore all but last
	//* 
	char* ast = nmea; // not strchr(nmea,'*'); for first* 
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
	while (*ast) ast++; // go to the end
 800324e:	e002      	b.n	8003256 <GPS_check+0x32>
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	3301      	adds	r3, #1
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f8      	bne.n	8003250 <GPS_check+0x2c>
	while (*ast != '*' && ast > nmea) ast--; // then back to*	if it's there
 800325e:	e002      	b.n	8003266 <GPS_check+0x42>
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	3b01      	subs	r3, #1
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b2a      	cmp	r3, #42	; 0x2a
 800326c:	d003      	beq.n	8003276 <GPS_check+0x52>
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d8f4      	bhi.n	8003260 <GPS_check+0x3c>
	if (*ast != '*') return false; // there is no asterisk
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b2a      	cmp	r3, #42	; 0x2a
 800327c:	d001      	beq.n	8003282 <GPS_check+0x5e>
 800327e:	2300      	movs	r3, #0
 8003280:	e08c      	b.n	800339c <GPS_check+0x178>
	else
	{
		uint16_t sum = GPS_parseHex(inst, *(ast + 1)) * 16; // extract checksum
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	3301      	adds	r3, #1
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fbc4 	bl	8003a18 <GPS_parseHex>
 8003290:	4603      	mov	r3, r0
 8003292:	b29b      	uxth	r3, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	847b      	strh	r3, [r7, #34]	; 0x22
		sum += GPS_parseHex(inst, *(ast + 2));
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	3302      	adds	r3, #2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	4619      	mov	r1, r3
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fbb9 	bl	8003a18 <GPS_parseHex>
 80032a6:	4603      	mov	r3, r0
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032ac:	4413      	add	r3, r2
 80032ae:	847b      	strh	r3, [r7, #34]	; 0x22
		char* p = nmea; // check checksum
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	61bb      	str	r3, [r7, #24]
		for (char* p1 = p + 1; p1 < ast; p1++)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	3301      	adds	r3, #1
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e008      	b.n	80032ce <GPS_check+0xaa>
		{
			sum ^=* p1;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032c4:	4053      	eors	r3, r2
 80032c6:	847b      	strh	r3, [r7, #34]	; 0x22
		for (char* p1 = p + 1; p1 < ast; p1++)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3301      	adds	r3, #1
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3f2      	bcc.n	80032bc <GPS_check+0x98>
		}
		if (sum != 0) return false; // bad checksum :(
 80032d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <GPS_check+0xbc>
 80032dc:	2300      	movs	r3, #0
 80032de:	e05d      	b.n	800339c <GPS_check+0x178>
		else inst->thisCheck += NMEA_HAS_CHECKSUM;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	1c9a      	adds	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
	}
	// extract source of variable length
	char* p = nmea + 1;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
	const char* src = GPS_tokenOnList(inst, p, inst->sources);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80032f6:	461a      	mov	r2, r3
 80032f8:	6979      	ldr	r1, [r7, #20]
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f852 	bl	80033a4 <GPS_tokenOnList>
 8003300:	6138      	str	r0, [r7, #16]
	if (src)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01f      	beq.n	8003348 <GPS_check+0x124>
	{
		strcpy(inst->thisSource, src);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	6939      	ldr	r1, [r7, #16]
 800330e:	4618      	mov	r0, r3
 8003310:	f014 ff1a 	bl	8018148 <strcpy>
		inst->thisCheck += NMEA_HAS_SOURCE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f103 020a 	add.w	r2, r3, #10
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	601a      	str	r2, [r3, #0]
	}
	else return false;
	p += strlen(src);
 8003320:	6938      	ldr	r0, [r7, #16]
 8003322:	f7fc ff5f 	bl	80001e4 <strlen>
 8003326:	4602      	mov	r2, r0
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4413      	add	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
	// extract sentence id and check if parsed
	const char* snc = GPS_tokenOnList(inst, p, inst->sentences_parsed);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003334:	461a      	mov	r2, r3
 8003336:	6979      	ldr	r1, [r7, #20]
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f833 	bl	80033a4 <GPS_tokenOnList>
 800333e:	60f8      	str	r0, [r7, #12]
	if (snc)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00f      	beq.n	8003366 <GPS_check+0x142>
 8003346:	e001      	b.n	800334c <GPS_check+0x128>
	else return false;
 8003348:	2300      	movs	r3, #0
 800334a:	e027      	b.n	800339c <GPS_check+0x178>
	{
		strcpy(inst->thisSentence, snc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3307      	adds	r3, #7
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	4618      	mov	r0, r3
 8003354:	f014 fef8 	bl	8018148 <strcpy>
		inst->thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e019      	b.n	800339a <GPS_check+0x176>
	}
	else
	{ // check if known
		snc = GPS_tokenOnList(inst, p, inst->sentences_known);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800336c:	461a      	mov	r2, r3
 800336e:	6979      	ldr	r1, [r7, #20]
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f817 	bl	80033a4 <GPS_tokenOnList>
 8003376:	60f8      	str	r0, [r7, #12]
		if (snc)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <GPS_check+0x176>
		{
			strcpy(inst->thisSentence, snc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3307      	adds	r3, #7
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	4618      	mov	r0, r3
 8003386:	f014 fedf 	bl	8018148 <strcpy>
			inst->thisCheck += NMEA_HAS_SENTENCE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f103 0214 	add.w	r2, r3, #20
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	601a      	str	r2, [r3, #0]
			return false;
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <GPS_check+0x178>
		}
	}
	return true; // passed all the tests
 800339a:	2301      	movs	r3, #1
}
 800339c:	4618      	mov	r0, r3
 800339e:	3728      	adds	r7, #40	; 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <GPS_tokenOnList>:
		@param list A list of strings, with the final entry starting "ZZ"
		@return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char* GPS_tokenOnList(GPS* inst, char* token, const char* *list)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
	int i = 0; // index in the list
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80033b4:	e01e      	b.n	80033f4 <GPS_tokenOnList+0x50>
	{ // stop at terminator and don't crash without it
		// test for a match on the sentence name
		if (!strncmp((const char* )list[i], (const char* )token, strlen(list[i]))) return list[i];
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	681c      	ldr	r4, [r3, #0]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	4413      	add	r3, r2
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fc ff0a 	bl	80001e4 <strlen>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4620      	mov	r0, r4
 80033d8:	f014 febe 	bl	8018158 <strncmp>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <GPS_tokenOnList+0x4a>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	e014      	b.n	8003418 <GPS_tokenOnList+0x74>
		i++;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2202      	movs	r2, #2
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <GPS_tokenOnList+0x7c>)
 8003402:	4618      	mov	r0, r3
 8003404:	f014 fea8 	bl	8018158 <strncmp>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <GPS_tokenOnList+0x72>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003414:	dbcf      	blt.n	80033b6 <GPS_tokenOnList+0x12>
	}
	return NULL; // couldn't find a match
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd90      	pop	{r4, r7, pc}
 8003420:	0801dd2c 	.word	0x0801dd2c

08003424 <GPS_parseStr>:
		@param n Max permitted size of string including terminating 0
		@return Pointer to the string buffer
*/
/**************************************************************************/
char* GPS_parseStr(GPS* inst, char* buff, char* p, int n)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	; 0x30
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
	char* e = strchr(p, ',');
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f014 fe7a 	bl	801812e <strchr>
 800343a:	62f8      	str	r0, [r7, #44]	; 0x2c
	int len = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (e) 
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d018      	beq.n	8003478 <GPS_parseStr+0x54>
	{
		len = min(e - p, n - 1);
 8003446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	3b01      	subs	r3, #1
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4293      	cmp	r3, r2
 800345a:	bfa8      	it	ge
 800345c:	4613      	movge	r3, r2
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(buff, p, len); // copy up to the comma
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	461a      	mov	r2, r3
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	68b8      	ldr	r0, [r7, #8]
 8003468:	f014 fe88 	bl	801817c <strncpy>
		buff[len] = 0;
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4413      	add	r3, r2
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	e037      	b.n	80034e8 <GPS_parseStr+0xc4>
	}
	else
	{
		e = strchr(p, '*');
 8003478:	212a      	movs	r1, #42	; 0x2a
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f014 fe57 	bl	801812e <strchr>
 8003480:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (e)
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01b      	beq.n	80034c0 <GPS_parseStr+0x9c>
		{
			len = min(e - p, n - 1);
 8003488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	3b01      	subs	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4293      	cmp	r3, r2
 800349c:	bfa8      	it	ge
 800349e:	4613      	movge	r3, r2
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or up to the* 
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	461a      	mov	r2, r3
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68b8      	ldr	r0, [r7, #8]
 80034aa:	f014 fe67 	bl	801817c <strncpy>
			buff[e - p] = 0;
 80034ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4413      	add	r3, r2
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e013      	b.n	80034e8 <GPS_parseStr+0xc4>
		}
		else
		{
			len = min((int)strlen(p), n - 1);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fc fe8f 	bl	80001e4 <strlen>
 80034c6:	4603      	mov	r3, r0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	4293      	cmp	r3, r2
 80034d6:	bfa8      	it	ge
 80034d8:	4613      	movge	r3, r2
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or to the end or max capacity
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	461a      	mov	r2, r3
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	68b8      	ldr	r0, [r7, #8]
 80034e4:	f014 fe4a 	bl	801817c <strncpy>
		}
	}
	return buff;
 80034e8:	68bb      	ldr	r3, [r7, #8]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3730      	adds	r7, #48	; 0x30
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <GPS_isEmpty>:
		@param pStart Pointer to the location of the token in the NMEA string
		@return true if empty field, false if something there
*/
/**************************************************************************/
bool GPS_isEmpty(GPS* inst, char* pStart)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
	if (',' !=* pStart && '*' !=* pStart && pStart != NULL) return false;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b2c      	cmp	r3, #44	; 0x2c
 8003502:	d008      	beq.n	8003516 <GPS_isEmpty+0x24>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b2a      	cmp	r3, #42	; 0x2a
 800350a:	d004      	beq.n	8003516 <GPS_isEmpty+0x24>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <GPS_isEmpty+0x24>
 8003512:	2300      	movs	r3, #0
 8003514:	e000      	b.n	8003518 <GPS_isEmpty+0x26>
	else return true;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <GPS_parseTime>:
		@brief Parse a part of an NMEA string for time
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseTime(GPS* inst, char* p)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
	// get time
	uint32_t time = atol(p);
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	f013 fe80 	bl	8017234 <atol>
 8003534:	4603      	mov	r3, r0
 8003536:	60fb      	str	r3, [r7, #12]
	inst->gpsTime.hour = time / 10000;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <GPS_parseTime+0x94>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	0b5b      	lsrs	r3, r3, #13
 8003542:	b2da      	uxtb	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = (time % 10000) / 100;
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <GPS_parseTime+0x94>)
 800354e:	fba3 1302 	umull	r1, r3, r3, r2
 8003552:	0b5b      	lsrs	r3, r3, #13
 8003554:	f242 7110 	movw	r1, #10000	; 0x2710
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	4a17      	ldr	r2, [pc, #92]	; (80035bc <GPS_parseTime+0x98>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	b2da      	uxtb	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = (time % 100);
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4b12      	ldr	r3, [pc, #72]	; (80035bc <GPS_parseTime+0x98>)
 8003572:	fba3 1302 	umull	r1, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2164      	movs	r1, #100	; 0x64
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	b2da      	uxtb	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	p = strchr(p, '.') + 1;
 8003588:	212e      	movs	r1, #46	; 0x2e
 800358a:	6838      	ldr	r0, [r7, #0]
 800358c:	f014 fdcf 	bl	801812e <strchr>
 8003590:	4603      	mov	r3, r0
 8003592:	3301      	adds	r3, #1
 8003594:	603b      	str	r3, [r7, #0]
	inst->gpsTime.msecond = (uint32_t)atoi(p);
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f013 fe48 	bl	801722c <atoi>
 800359c:	4603      	mov	r3, r0
 800359e:	b29a      	uxth	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	875a      	strh	r2, [r3, #58]	; 0x3a
	inst->lastTime = inst->sentTime;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	d1b71759 	.word	0xd1b71759
 80035bc:	51eb851f 	.word	0x51eb851f

080035c0 <GPS_parseLat>:
		@brief Parse a part of an NMEA string for latitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLat(GPS* inst, char* p)
{
 80035c0:	b5b0      	push	{r4, r5, r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	//int32_t degree;
	//long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80035ca:	6839      	ldr	r1, [r7, #0]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff90 	bl	80034f2 <GPS_isEmpty>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f083 0301 	eor.w	r3, r3, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8092 	beq.w	8003704 <GPS_parseLat+0x144>
	{
		strncpy(degreebuff, p, 2);
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	2202      	movs	r2, #2
 80035e6:	6839      	ldr	r1, [r7, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f014 fdc7 	bl	801817c <strncpy>
		p += 2;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	3302      	adds	r3, #2
 80035f2:	603b      	str	r3, [r7, #0]
		degreebuff[2] = '\0';
 80035f4:	2300      	movs	r3, #0
 80035f6:	73bb      	strb	r3, [r7, #14]
		long degree = atol(degreebuff) * 10000000;
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	4618      	mov	r0, r3
 80035fe:	f013 fe19 	bl	8017234 <atol>
 8003602:	4602      	mov	r2, r0
 8003604:	4b44      	ldr	r3, [pc, #272]	; (8003718 <GPS_parseLat+0x158>)
 8003606:	fb03 f302 	mul.w	r3, r3, r2
 800360a:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 800360c:	f107 030c 	add.w	r3, r7, #12
 8003610:	2202      	movs	r2, #2
 8003612:	6839      	ldr	r1, [r7, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f014 fdb1 	bl	801817c <strncpy>
		p += 3;										// skip decimal point
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	3303      	adds	r3, #3
 800361e:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 8003620:	f107 030c 	add.w	r3, r7, #12
 8003624:	3302      	adds	r3, #2
 8003626:	2204      	movs	r2, #4
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f014 fda6 	bl	801817c <strncpy>
		degreebuff[6] = '\0';
 8003630:	2300      	movs	r3, #0
 8003632:	74bb      	strb	r3, [r7, #18]
		long minutes = 50*	atol(degreebuff) / 3;
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	4618      	mov	r0, r3
 800363a:	f013 fdfb 	bl	8017234 <atol>
 800363e:	4602      	mov	r2, r0
 8003640:	2332      	movs	r3, #50	; 0x32
 8003642:	fb03 f302 	mul.w	r3, r3, r2
 8003646:	4a35      	ldr	r2, [pc, #212]	; (800371c <GPS_parseLat+0x15c>)
 8003648:	fb82 1203 	smull	r1, r2, r2, r3
 800364c:	17db      	asrs	r3, r3, #31
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	61bb      	str	r3, [r7, #24]
		inst->latitude_fixed = degree + minutes;
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	441a      	add	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	645a      	str	r2, [r3, #68]	; 0x44
		inst->latitude = degree / 100000 + minutes * 0.000006;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4a30      	ldr	r2, [pc, #192]	; (8003720 <GPS_parseLat+0x160>)
 8003660:	fb82 1203 	smull	r1, r2, r2, r3
 8003664:	1352      	asrs	r2, r2, #13
 8003666:	17db      	asrs	r3, r3, #31
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ff6a 	bl	8000544 <__aeabi_i2d>
 8003670:	4604      	mov	r4, r0
 8003672:	460d      	mov	r5, r1
 8003674:	69b8      	ldr	r0, [r7, #24]
 8003676:	f7fc ff65 	bl	8000544 <__aeabi_i2d>
 800367a:	a325      	add	r3, pc, #148	; (adr r3, 8003710 <GPS_parseLat+0x150>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f7fc ffca 	bl	8000618 <__aeabi_dmul>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4620      	mov	r0, r4
 800368a:	4629      	mov	r1, r5
 800368c:	f7fc fe0e 	bl	80002ac <__adddf3>
 8003690:	4603      	mov	r3, r0
 8003692:	460c      	mov	r4, r1
 8003694:	4618      	mov	r0, r3
 8003696:	4621      	mov	r1, r4
 8003698:	f7fd fab6 	bl	8000c08 <__aeabi_d2f>
 800369c:	4602      	mov	r2, r0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c
		inst->latitudeDegrees = (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80036ae:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8003724 <GPS_parseLat+0x164>
 80036b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ba:	ee17 2a90 	vmov	r2, s15
 80036be:	2364      	movs	r3, #100	; 0x64
 80036c0:	fb03 f302 	mul.w	r3, r3, r2
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036d0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003728 <GPS_parseLat+0x168>
 80036d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitudeDegrees += (int)(inst->latitude / 100);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80036ea:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8003724 <GPS_parseLat+0x164>
 80036ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	}
}
 8003704:	bf00      	nop
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bdb0      	pop	{r4, r5, r7, pc}
 800370c:	f3af 8000 	nop.w
 8003710:	7110e454 	.word	0x7110e454
 8003714:	3ed92a73 	.word	0x3ed92a73
 8003718:	00989680 	.word	0x00989680
 800371c:	55555556 	.word	0x55555556
 8003720:	14f8b589 	.word	0x14f8b589
 8003724:	42c80000 	.word	0x42c80000
 8003728:	42700000 	.word	0x42700000

0800372c <GPS_parseLatDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLatDir(GPS* inst, char* p)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	if (p[0] == 'S')
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b53      	cmp	r3, #83	; 0x53
 800373c:	d11c      	bne.n	8003778 <GPS_parseLatDir+0x4c>
	{
		inst->lat = 'S';
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2253      	movs	r2, #83	; 0x53
 8003742:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inst->latitudeDegrees *= -1.0;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc ff0c 	bl	8000568 <__aeabi_f2d>
 8003750:	4603      	mov	r3, r0
 8003752:	460c      	mov	r4, r1
 8003754:	4618      	mov	r0, r3
 8003756:	4621      	mov	r1, r4
 8003758:	f7fd fa56 	bl	8000c08 <__aeabi_d2f>
 800375c:	4603      	mov	r3, r0
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef1 7a67 	vneg.f32	s15, s15
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitude_fixed *= -1;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	425a      	negs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	645a      	str	r2, [r3, #68]	; 0x44
 8003776:	e013      	b.n	80037a0 <GPS_parseLatDir+0x74>
	}
	else if (p[0] == 'N') inst->lat = 'N';
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b4e      	cmp	r3, #78	; 0x4e
 800377e:	d104      	bne.n	800378a <GPS_parseLatDir+0x5e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	224e      	movs	r2, #78	; 0x4e
 8003784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003788:	e00a      	b.n	80037a0 <GPS_parseLatDir+0x74>
	else if (p[0] == ',') inst->lat = 0;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b2c      	cmp	r3, #44	; 0x2c
 8003790:	d104      	bne.n	800379c <GPS_parseLatDir+0x70>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800379a:	e001      	b.n	80037a0 <GPS_parseLatDir+0x74>
	else return false;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <GPS_parseLatDir+0x76>
	
	return true;
 80037a0:	2301      	movs	r3, #1
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd90      	pop	{r4, r7, pc}
	...

080037ac <GPS_parseLon>:
		@brief Parse a part of an NMEA string for longitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLon(GPS* inst, char* p)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff fe9a 	bl	80034f2 <GPS_isEmpty>
 80037be:	4603      	mov	r3, r0
 80037c0:	f083 0301 	eor.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8088 	beq.w	80038dc <GPS_parseLon+0x130>
	{
		strncpy(degreebuff, p, 3);
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	2203      	movs	r2, #3
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f014 fcd1 	bl	801817c <strncpy>
		p += 3;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	3303      	adds	r3, #3
 80037de:	603b      	str	r3, [r7, #0]
		degreebuff[3] = '\0';
 80037e0:	2300      	movs	r3, #0
 80037e2:	73fb      	strb	r3, [r7, #15]
		degree = atol(degreebuff)*	10000000;
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	4618      	mov	r0, r3
 80037ea:	f013 fd23 	bl	8017234 <atol>
 80037ee:	4602      	mov	r2, r0
 80037f0:	4b3c      	ldr	r3, [pc, #240]	; (80038e4 <GPS_parseLon+0x138>)
 80037f2:	fb03 f302 	mul.w	r3, r3, r2
 80037f6:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	2202      	movs	r2, #2
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f014 fcbb 	bl	801817c <strncpy>
		p += 3;										// skip decimal point
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	3303      	adds	r3, #3
 800380a:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	3302      	adds	r3, #2
 8003812:	2204      	movs	r2, #4
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f014 fcb0 	bl	801817c <strncpy>
		degreebuff[6] = '\0';
 800381c:	2300      	movs	r3, #0
 800381e:	74bb      	strb	r3, [r7, #18]
		minutes = 50 * atol(degreebuff) / 3;
 8003820:	f107 030c 	add.w	r3, r7, #12
 8003824:	4618      	mov	r0, r3
 8003826:	f013 fd05 	bl	8017234 <atol>
 800382a:	4602      	mov	r2, r0
 800382c:	2332      	movs	r3, #50	; 0x32
 800382e:	fb03 f302 	mul.w	r3, r3, r2
 8003832:	4a2d      	ldr	r2, [pc, #180]	; (80038e8 <GPS_parseLon+0x13c>)
 8003834:	fb82 1203 	smull	r1, r2, r2, r3
 8003838:	17db      	asrs	r3, r3, #31
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	61bb      	str	r3, [r7, #24]
		inst->longitude_fixed = degree + minutes;
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	441a      	add	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	649a      	str	r2, [r3, #72]	; 0x48
		inst->longitude = degree / 100000 + minutes * 0.000006f;
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4a28      	ldr	r2, [pc, #160]	; (80038ec <GPS_parseLon+0x140>)
 800384c:	fb82 1203 	smull	r1, r2, r2, r3
 8003850:	1352      	asrs	r2, r2, #13
 8003852:	17db      	asrs	r3, r3, #31
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003868:	eddf 6a21 	vldr	s13, [pc, #132]	; 80038f0 <GPS_parseLon+0x144>
 800386c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		inst->longitudeDegrees = (inst->longitude - 100 * (int)(inst->longitude / 100)) / 60.0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8003886:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80038f4 <GPS_parseLon+0x148>
 800388a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800388e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003892:	ee17 2a90 	vmov	r2, s15
 8003896:	2364      	movs	r3, #100	; 0x64
 8003898:	fb03 f302 	mul.w	r3, r3, r2
 800389c:	ee07 3a90 	vmov	s15, r3
 80038a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038a8:	eddf 6a13 	vldr	s13, [pc, #76]	; 80038f8 <GPS_parseLon+0x14c>
 80038ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		inst->longitudeDegrees += (int)(inst->longitude / 100);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80038c2:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80038f4 <GPS_parseLon+0x148>
 80038c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80038ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
}
 80038dc:	bf00      	nop
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	00989680 	.word	0x00989680
 80038e8:	55555556 	.word	0x55555556
 80038ec:	14f8b589 	.word	0x14f8b589
 80038f0:	36c9539c 	.word	0x36c9539c
 80038f4:	42c80000 	.word	0x42c80000
 80038f8:	42700000 	.word	0x42700000

080038fc <GPS_parseLonDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLonDir(GPS* inst, char* p)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	if (!GPS_isEmpty(inst, p))
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fdf2 	bl	80034f2 <GPS_isEmpty>
 800390e:	4603      	mov	r3, r0
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d034      	beq.n	8003984 <GPS_parseLonDir+0x88>
	{
		if (p[0] == 'W')
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b57      	cmp	r3, #87	; 0x57
 8003920:	d11c      	bne.n	800395c <GPS_parseLonDir+0x60>
		{
			inst->lon = 'W';
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2257      	movs	r2, #87	; 0x57
 8003926:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			inst->longitudeDegrees *= -1.0;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fe1a 	bl	8000568 <__aeabi_f2d>
 8003934:	4603      	mov	r3, r0
 8003936:	460c      	mov	r4, r1
 8003938:	4618      	mov	r0, r3
 800393a:	4621      	mov	r1, r4
 800393c:	f7fd f964 	bl	8000c08 <__aeabi_d2f>
 8003940:	4603      	mov	r3, r0
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef1 7a67 	vneg.f32	s15, s15
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			inst->longitude_fixed *= -1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003954:	425a      	negs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	649a      	str	r2, [r3, #72]	; 0x48
 800395a:	e013      	b.n	8003984 <GPS_parseLonDir+0x88>
		}
		else if (p[0] == 'E') inst->lon = 'E';
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b45      	cmp	r3, #69	; 0x45
 8003962:	d104      	bne.n	800396e <GPS_parseLonDir+0x72>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2245      	movs	r2, #69	; 0x45
 8003968:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800396c:	e00a      	b.n	8003984 <GPS_parseLonDir+0x88>
		else if (p[0] == ',') inst->lon = 0;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b2c      	cmp	r3, #44	; 0x2c
 8003974:	d104      	bne.n	8003980 <GPS_parseLonDir+0x84>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800397e:	e001      	b.n	8003984 <GPS_parseLonDir+0x88>
		else return false;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <GPS_parseLonDir+0x8a>
	}
	return true;
 8003984:	2301      	movs	r3, #1
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bd90      	pop	{r4, r7, pc}

0800398e <GPS_parseFix>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseFix(GPS* inst, char* p)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
	if (p[0] == 'A')
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b41      	cmp	r3, #65	; 0x41
 800399e:	d10a      	bne.n	80039b6 <GPS_parseFix+0x28>
	{
		inst->fix = true;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inst->lastFix = inst->sentTime;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80039b4:	e00a      	b.n	80039cc <GPS_parseFix+0x3e>
	}
	else if (p[0] == 'V') inst->fix = false;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b56      	cmp	r3, #86	; 0x56
 80039bc:	d104      	bne.n	80039c8 <GPS_parseFix+0x3a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80039c6:	e001      	b.n	80039cc <GPS_parseFix+0x3e>
	else return false;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <GPS_parseFix+0x40>
	return true;
 80039cc:	2301      	movs	r3, #1
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <GPS_newNMEAreceived>:
/*!
		@brief Check to see if a new NMEA line has been received
		@return True if received, false if not
*/
/**************************************************************************/
bool GPS_newNMEAreceived(GPS* inst) { return inst->recvdflag; }
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <GPS_lastNMEA>:
		@brief Returns the last NMEA line received and unsets the received flag
		@return Pointer to the last line string
*/
/**************************************************************************/
char* GPS_lastNMEA(GPS* inst)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
	inst->recvdflag = false;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	return (char*)inst->lastline;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <GPS_parseHex>:
	 character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t GPS_parseHex(GPS* inst, char c)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
	if (c < '0') return 0;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	2b2f      	cmp	r3, #47	; 0x2f
 8003a28:	d801      	bhi.n	8003a2e <GPS_parseHex+0x16>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e013      	b.n	8003a56 <GPS_parseHex+0x3e>
	if (c <= '9') return c - '0';
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	2b39      	cmp	r3, #57	; 0x39
 8003a32:	d803      	bhi.n	8003a3c <GPS_parseHex+0x24>
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	3b30      	subs	r3, #48	; 0x30
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e00c      	b.n	8003a56 <GPS_parseHex+0x3e>
	if (c < 'A') return 0;
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d801      	bhi.n	8003a46 <GPS_parseHex+0x2e>
 8003a42:	2300      	movs	r3, #0
 8003a44:	e007      	b.n	8003a56 <GPS_parseHex+0x3e>
	if (c <= 'F') return (c - 'A') + 10;
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	2b46      	cmp	r3, #70	; 0x46
 8003a4a:	d803      	bhi.n	8003a54 <GPS_parseHex+0x3c>
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	3b37      	subs	r3, #55	; 0x37
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e000      	b.n	8003a56 <GPS_parseHex+0x3e>
	// if (c > 'F')
	return 0;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <println>:
{
 8003a78:	b40f      	push	{r0, r1, r2, r3}
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
	if (usbPresent)
 8003a80:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <println+0xb4>)
 8003a82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d147      	bne.n	8003b1a <println+0xa2>
		writePin(LEDD, HIGH);
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a90:	4827      	ldr	r0, [pc, #156]	; (8003b30 <println+0xb8>)
 8003a92:	f003 ff17 	bl	80078c4 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 8003a96:	f107 031c 	add.w	r3, r7, #28
 8003a9a:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	69b9      	ldr	r1, [r7, #24]
 8003aa0:	4824      	ldr	r0, [pc, #144]	; (8003b34 <println+0xbc>)
 8003aa2:	f015 fa6f 	bl	8018f84 <vsiprintf>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <println+0xc0>)
 8003aac:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 8003aae:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <println+0xc0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a20      	ldr	r2, [pc, #128]	; (8003b34 <println+0xbc>)
 8003ab4:	210d      	movs	r1, #13
 8003ab6:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <println+0xc0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <println+0xbc>)
 8003ac0:	210a      	movs	r1, #10
 8003ac2:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <println+0xc0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3302      	adds	r3, #2
 8003aca:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <println+0xbc>)
 8003acc:	2100      	movs	r1, #0
 8003ace:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <println+0xc0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3303      	adds	r3, #3
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <println+0xc0>)
 8003ad8:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 8003ada:	f7ff ffc2 	bl	8003a62 <micros>
 8003ade:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8003ae0:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <println+0xc0>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	3346      	adds	r3, #70	; 0x46
 8003aee:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8003af0:	e001      	b.n	8003af6 <println+0x7e>
			if (micros() - printStart > timeout && false)
 8003af2:	f7ff ffb6 	bl	8003a62 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <println+0xc0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	480d      	ldr	r0, [pc, #52]	; (8003b34 <println+0xbc>)
 8003b00:	f012 ff34 	bl	801696c <CDC_Transmit_FS>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d0f3      	beq.n	8003af2 <println+0x7a>
		writePin(LEDD, LOW);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b10:	4807      	ldr	r0, [pc, #28]	; (8003b30 <println+0xb8>)
 8003b12:	f003 fed7 	bl	80078c4 <HAL_GPIO_WritePin>
		return true;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <println+0xa4>
	return false;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b26:	b004      	add	sp, #16
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000e3c 	.word	0x20000e3c
 8003b30:	40020400 	.word	0x40020400
 8003b34:	200007ec 	.word	0x200007ec
 8003b38:	200007e8 	.word	0x200007e8

08003b3c <MPU9250_writeByte>:
#include "stm32f4xx_hal_i2c.h"

// #################### Low level communication ####################

static void MPU9250_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af04      	add	r7, sp, #16
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	70fb      	strb	r3, [r7, #3]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	791b      	ldrb	r3, [r3, #4]
 8003b54:	b299      	uxth	r1, r3
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	9302      	str	r3, [sp, #8]
 8003b5e:	2301      	movs	r3, #1
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	1cbb      	adds	r3, r7, #2
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2301      	movs	r3, #1
 8003b68:	f004 f808 	bl	8007b7c <HAL_I2C_Mem_Write>
}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <MPU9250_readByte>:
static char MPU9250_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af04      	add	r7, sp, #16
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, 1, 2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	791b      	ldrb	r3, [r3, #4]
 8003b88:	b299      	uxth	r1, r3
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	2302      	movs	r3, #2
 8003b90:	9302      	str	r3, [sp, #8]
 8003b92:	2301      	movs	r3, #1
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	f107 030c 	add.w	r3, r7, #12
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f004 f8e7 	bl	8007d70 <HAL_I2C_Mem_Read>
	return (char)data[0];
 8003ba2:	7b3b      	ldrb	r3, [r7, #12]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <MPU9250_readBytes>:
static void MPU9250_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b08f      	sub	sp, #60	; 0x3c
 8003bb0:	af04      	add	r7, sp, #16
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	72fb      	strb	r3, [r7, #11]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, count, 2);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	791b      	ldrb	r3, [r3, #4]
 8003bc6:	b299      	uxth	r1, r3
 8003bc8:	7afb      	ldrb	r3, [r7, #11]
 8003bca:	b29c      	uxth	r4, r3
 8003bcc:	7abb      	ldrb	r3, [r7, #10]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	9202      	str	r2, [sp, #8]
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2301      	movs	r3, #1
 8003bde:	4622      	mov	r2, r4
 8003be0:	f004 f8c6 	bl	8007d70 <HAL_I2C_Mem_Read>

	int ii = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
 8003bec:	e00b      	b.n	8003c06 <MPU9250_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f107 0114 	add.w	r1, r7, #20
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	440a      	add	r2, r1
 8003bfc:	7812      	ldrb	r2, [r2, #0]
 8003bfe:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	3301      	adds	r3, #1
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	7abb      	ldrb	r3, [r7, #10]
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	dbef      	blt.n	8003bee <MPU9250_readBytes+0x42>
	}
}
 8003c0e:	bf00      	nop
 8003c10:	372c      	adds	r7, #44	; 0x2c
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd90      	pop	{r4, r7, pc}

08003c16 <AK8963_writeByte>:
static void AK8963_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b086      	sub	sp, #24
 8003c1a:	af04      	add	r7, sp, #16
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	70fb      	strb	r3, [r7, #3]
 8003c22:	4613      	mov	r3, r2
 8003c24:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, &data, 1, 2);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	795b      	ldrb	r3, [r3, #5]
 8003c2e:	b299      	uxth	r1, r3
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	2302      	movs	r3, #2
 8003c36:	9302      	str	r3, [sp, #8]
 8003c38:	2301      	movs	r3, #1
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	1cbb      	adds	r3, r7, #2
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2301      	movs	r3, #1
 8003c42:	f003 ff9b 	bl	8007b7c <HAL_I2C_Mem_Write>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <AK8963_readByte>:
static char AK8963_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b088      	sub	sp, #32
 8003c52:	af04      	add	r7, sp, #16
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, 1, 2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	795b      	ldrb	r3, [r3, #5]
 8003c62:	b299      	uxth	r1, r3
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	2302      	movs	r3, #2
 8003c6a:	9302      	str	r3, [sp, #8]
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	f107 030c 	add.w	r3, r7, #12
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	2301      	movs	r3, #1
 8003c78:	f004 f87a 	bl	8007d70 <HAL_I2C_Mem_Read>
	return (char)data[0];
 8003c7c:	7b3b      	ldrb	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <AK8963_readBytes>:
static void AK8963_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 8003c86:	b590      	push	{r4, r7, lr}
 8003c88:	b08f      	sub	sp, #60	; 0x3c
 8003c8a:	af04      	add	r7, sp, #16
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	607b      	str	r3, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	72fb      	strb	r3, [r7, #11]
 8003c94:	4613      	mov	r3, r2
 8003c96:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, count, 2);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	795b      	ldrb	r3, [r3, #5]
 8003ca0:	b299      	uxth	r1, r3
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	b29c      	uxth	r4, r3
 8003ca6:	7abb      	ldrb	r3, [r7, #10]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2202      	movs	r2, #2
 8003cac:	9202      	str	r2, [sp, #8]
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	4622      	mov	r2, r4
 8003cba:	f004 f859 	bl	8007d70 <HAL_I2C_Mem_Read>

	int ii = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc6:	e00b      	b.n	8003ce0 <AK8963_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f107 0114 	add.w	r1, r7, #20
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd4:	440a      	add	r2, r1
 8003cd6:	7812      	ldrb	r2, [r2, #0]
 8003cd8:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	3301      	adds	r3, #1
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce0:	7abb      	ldrb	r3, [r7, #10]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	dbef      	blt.n	8003cc8 <AK8963_readBytes+0x42>
	}
}
 8003ce8:	bf00      	nop
 8003cea:	372c      	adds	r7, #44	; 0x2c
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd90      	pop	{r4, r7, pc}

08003cf0 <MPU9250_readAccelData>:

static void MPU9250_readAccelData(MPU9250* inst)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_ACCEL_XOUT_H, 6, &rawData[0]);
 8003cf8:	f107 0308 	add.w	r3, r7, #8
 8003cfc:	2206      	movs	r2, #6
 8003cfe:	213b      	movs	r1, #59	; 0x3b
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff53 	bl	8003bac <MPU9250_readBytes>
	// calculate actual g value
	inst->ax = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->aRes - inst->accelBias[0];	
 8003d06:	7a3b      	ldrb	r3, [r7, #8]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	b21a      	sxth	r2, r3
 8003d0c:	7a7b      	ldrb	r3, [r7, #9]
 8003d0e:	b21b      	sxth	r3, r3
 8003d10:	4313      	orrs	r3, r2
 8003d12:	b21b      	sxth	r3, r3
 8003d14:	ee07 3a90 	vmov	s15, r3
 8003d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003d22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	edc3 7a07 	vstr	s15, [r3, #28]
	inst->ay = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->aRes - inst->accelBias[1];
 8003d36:	7abb      	ldrb	r3, [r7, #10]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	b21a      	sxth	r2, r3
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	b21b      	sxth	r3, r3
 8003d40:	4313      	orrs	r3, r2
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	ee07 3a90 	vmov	s15, r3
 8003d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	edc3 7a08 	vstr	s15, [r3, #32]
	inst->az = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->aRes - inst->accelBias[2];
 8003d66:	7b3b      	ldrb	r3, [r7, #12]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	b21a      	sxth	r2, r3
 8003d6c:	7b7b      	ldrb	r3, [r7, #13]
 8003d6e:	b21b      	sxth	r3, r3
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b21b      	sxth	r3, r3
 8003d74:	ee07 3a90 	vmov	s15, r3
 8003d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003d82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <MPU9250_readGyroData>:
static void MPU9250_readGyroData(MPU9250* inst)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_GYRO_XOUT_H, 6, &rawData[0]);
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	2206      	movs	r2, #6
 8003dac:	2143      	movs	r1, #67	; 0x43
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff fefc 	bl	8003bac <MPU9250_readBytes>
	// calculate actual gyro value
	inst->gx = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->gRes - inst->gyroBias[0];
 8003db4:	7a3b      	ldrb	r3, [r7, #8]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	b21a      	sxth	r2, r3
 8003dba:	7a7b      	ldrb	r3, [r7, #9]
 8003dbc:	b21b      	sxth	r3, r3
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	b21b      	sxth	r3, r3
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	inst->gy = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->gRes - inst->gyroBias[1];
 8003de4:	7abb      	ldrb	r3, [r7, #10]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	b21a      	sxth	r2, r3
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	b21b      	sxth	r3, r3
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b21b      	sxth	r3, r3
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	inst->gz = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->gRes - inst->gyroBias[2];
 8003e14:	7b3b      	ldrb	r3, [r7, #12]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	b21a      	sxth	r2, r3
 8003e1a:	7b7b      	ldrb	r3, [r7, #13]
 8003e1c:	b21b      	sxth	r3, r3
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <MPU9250_readMagData>:
static void MPU9250_readMagData(MPU9250* inst)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];											// 7 because must read ST2 at end of data acquisition
	if(AK8963_readByte(inst, AK8963_ST1) & 0x01)				// wait for magnetometer data ready bit to be set
 8003e54:	2102      	movs	r1, #2
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff fef9 	bl	8003c4e <AK8963_readByte>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d064      	beq.n	8003f30 <MPU9250_readMagData+0xe4>
	{
		AK8963_readBytes(inst, AK8963_XOUT_L, 7, &rawData[0]);	// Read the six raw data and ST2 registers sequentially into data array
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	2207      	movs	r2, #7
 8003e6c:	2103      	movs	r1, #3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ff09 	bl	8003c86 <AK8963_readBytes>
		uint8_t c = rawData[6];									// End data read by reading ST2 register
 8003e74:	7bbb      	ldrb	r3, [r7, #14]
 8003e76:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))											// Check if magnetic sensor overflow set, if not then report data
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d156      	bne.n	8003f30 <MPU9250_readMagData+0xe4>
		{
			// calculate actual magnetometer value including factory calibration values
			inst->mx = (float)((int16_t)(((int16_t)rawData[1] << 8) | rawData[0]))*inst->mRes*inst->magCalibration[0] - inst->magBias[0];	
 8003e82:	7a7b      	ldrb	r3, [r7, #9]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	b21a      	sxth	r2, r3
 8003e88:	7a3b      	ldrb	r3, [r7, #8]
 8003e8a:	b21b      	sxth	r3, r3
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003ea8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			inst->my = (float)((int16_t)(((int16_t)rawData[3] << 8) | rawData[2]))*inst->mRes*inst->magCalibration[1] - inst->magBias[1];
 8003ebc:	7afb      	ldrb	r3, [r7, #11]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	b21a      	sxth	r2, r3
 8003ec2:	7abb      	ldrb	r3, [r7, #10]
 8003ec4:	b21b      	sxth	r3, r3
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	b21b      	sxth	r3, r3
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003ee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			inst->mz = (float)((int16_t)(((int16_t)rawData[5] << 8) | rawData[4]))*inst->mRes*inst->magCalibration[2] - inst->magBias[2];
 8003ef6:	7b7b      	ldrb	r3, [r7, #13]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	b21a      	sxth	r2, r3
 8003efc:	7b3b      	ldrb	r3, [r7, #12]
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	4313      	orrs	r3, r2
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		}
	}
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <MPU9250_getRes>:
	MPU9250_readBytes(inst, MPU9250_TEMP_OUT_H, 2, &rawData[0]);
	// calculate chip temperature in Celcius degrees
	inst->temperature = ((float)((int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]))) / 333.87 + 21.0;
}
static void MPU9250_getRes(MPU9250* inst, MPU9250_config* config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
	switch (config->Mscale)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	7b9b      	ldrb	r3, [r3, #14]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <MPU9250_getRes+0x18>
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d004      	beq.n	8003f58 <MPU9250_getRes+0x20>
 8003f4e:	e007      	b.n	8003f60 <MPU9250_getRes+0x28>
	{
		case MPU9250_MFS_14BITS:	inst->mRes = 10.0*4912.0/8190.0;	break;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <MPU9250_getRes+0xbc>)
 8003f54:	649a      	str	r2, [r3, #72]	; 0x48
 8003f56:	e003      	b.n	8003f60 <MPU9250_getRes+0x28>
		case MPU9250_MFS_16BITS:	inst->mRes = 10.0*4912.0/32760.0;	break;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <MPU9250_getRes+0xc0>)
 8003f5c:	649a      	str	r2, [r3, #72]	; 0x48
 8003f5e:	bf00      	nop
	}
	switch (config->Gscale)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	7b5b      	ldrb	r3, [r3, #13]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d81b      	bhi.n	8003fa0 <MPU9250_getRes+0x68>
 8003f68:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <MPU9250_getRes+0x38>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f89 	.word	0x08003f89
 8003f78:	08003f91 	.word	0x08003f91
 8003f7c:	08003f99 	.word	0x08003f99
	{
		case MPU9250_GFS_250DPS:	inst->gRes = 250.0/32768.0;			break;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <MPU9250_getRes+0xc4>)
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
 8003f86:	e00b      	b.n	8003fa0 <MPU9250_getRes+0x68>
		case MPU9250_GFS_500DPS:	inst->gRes = 500.0/32768.0;			break;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <MPU9250_getRes+0xc8>)
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f8e:	e007      	b.n	8003fa0 <MPU9250_getRes+0x68>
		case MPU9250_GFS_1000DPS:	inst->gRes = 1000.0/32768.0;		break;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <MPU9250_getRes+0xcc>)
 8003f94:	645a      	str	r2, [r3, #68]	; 0x44
 8003f96:	e003      	b.n	8003fa0 <MPU9250_getRes+0x68>
		case MPU9250_GFS_2000DPS:	inst->gRes = 2000.0/32768.0;		break;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <MPU9250_getRes+0xd0>)
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f9e:	bf00      	nop
	}
	switch (config->Ascale)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	7b1b      	ldrb	r3, [r3, #12]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d81f      	bhi.n	8003fe8 <MPU9250_getRes+0xb0>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <MPU9250_getRes+0x78>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fc1 	.word	0x08003fc1
 8003fb4:	08003fcb 	.word	0x08003fcb
 8003fb8:	08003fd5 	.word	0x08003fd5
 8003fbc:	08003fdf 	.word	0x08003fdf
	{
		case MPU9250_AFS_2G:		inst->aRes = 2.0/32768.0;			break;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8003fc8:	e00e      	b.n	8003fe8 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_4G:		inst->aRes = 4.0/32768.0;			break;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
 8003fd2:	e009      	b.n	8003fe8 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_8G:		inst->aRes = 8.0/32768.0;			break;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40
 8003fdc:	e004      	b.n	8003fe8 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_16G:		inst->aRes = 16.0/32768.0;			break;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8003fe6:	bf00      	nop
	}
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40bfebff 	.word	0x40bfebff
 8003ff8:	3fbfebff 	.word	0x3fbfebff
 8003ffc:	3bfa0000 	.word	0x3bfa0000
 8004000:	3c7a0000 	.word	0x3c7a0000
 8004004:	3cfa0000 	.word	0x3cfa0000
 8004008:	3d7a0000 	.word	0x3d7a0000
 800400c:	00000000 	.word	0x00000000

08004010 <MPU9250_init>:

// #################### Public routines ####################

bool MPU9250_init(MPU9250* inst, MPU9250_config* config)
{
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
	inst->active = false;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	721a      	strb	r2, [r3, #8]
	inst->alg_lastUpdate = 0;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c
	if (config->alg_rate > 0) inst->alg_delay = 1.0 / config->alg_rate;	// calculate delay in [s] from [Hz]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800402c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004034:	dd0a      	ble.n	800404c <MPU9250_init+0x3c>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800403c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800404a:	e004      	b.n	8004056 <MPU9250_init+0x46>
	else inst->alg_delay = 0;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	inst->euler_delay = 1000000.0 / config->euler_rate;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fa84 	bl	8000568 <__aeabi_f2d>
 8004060:	4603      	mov	r3, r0
 8004062:	460c      	mov	r4, r1
 8004064:	461a      	mov	r2, r3
 8004066:	4623      	mov	r3, r4
 8004068:	a183      	add	r1, pc, #524	; (adr r1, 8004278 <MPU9250_init+0x268>)
 800406a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800406e:	f7fc fbfd 	bl	800086c <__aeabi_ddiv>
 8004072:	4603      	mov	r3, r0
 8004074:	460c      	mov	r4, r1
 8004076:	4618      	mov	r0, r3
 8004078:	4621      	mov	r1, r4
 800407a:	f7fc fda5 	bl	8000bc8 <__aeabi_d2uiz>
 800407e:	4602      	mov	r2, r0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	int i;
	for (i = 0; i < 3; i++)
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e01f      	b.n	80040cc <MPU9250_init+0xbc>
	{
		inst->eulerOffsets[i] = config->eulerOffsets[i];
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	332a      	adds	r3, #42	; 0x2a
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	3304      	adds	r3, #4
 80040a2:	601a      	str	r2, [r3, #0]
		inst->eInt[i] = 0.0f;
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3326      	adds	r3, #38	; 0x26
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
		inst->q[i+1] = 0.0f;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3301      	adds	r3, #1
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	3322      	adds	r3, #34	; 0x22
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3301      	adds	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	dddc      	ble.n	800408c <MPU9250_init+0x7c>
	}
	inst->q[0] = 1.0f;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	if (MPU9250_present(inst, 5))
 80040dc:	2105      	movs	r1, #5
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f974 	bl	80043cc <MPU9250_present>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d03c      	beq.n	8004164 <MPU9250_init+0x154>
	{
		delay(100);
 80040ea:	2064      	movs	r0, #100	; 0x64
 80040ec:	f002 fd6c 	bl	8006bc8 <HAL_Delay>
		MPU9250_SelfTest(inst);					// Start by performing self test
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fc7d 	bl	80049f0 <MPU9250_SelfTest>
		delay(1000);
 80040f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040fa:	f002 fd65 	bl	8006bc8 <HAL_Delay>
		MPU9250_getRes(inst, config);			// Get sensor resolutions based on config, only need to do this once
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ff19 	bl	8003f38 <MPU9250_getRes>

		if (config->calibrate)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	7c1b      	ldrb	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <MPU9250_init+0x106>
		{
			MPU9250_calibrate(inst);			// Calibrate gyro and accelerometers, load biases in bias registers	
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f9fa 	bl	8004508 <MPU9250_calibrate>
 8004114:	e022      	b.n	800415c <MPU9250_init+0x14c>
		}
		else
		{										// Or load biases from config
			for (i = 0; i < 3; i++)
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e01c      	b.n	8004156 <MPU9250_init+0x146>
			{
				inst->accelBias[i] = config->accelBias[i];
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	330a      	adds	r3, #10
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	3304      	adds	r3, #4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3318      	adds	r3, #24
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	3304      	adds	r3, #4
 8004136:	601a      	str	r2, [r3, #0]
				inst->gyroBias[i] = config->gyroBias[i];
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3308      	adds	r3, #8
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3316      	adds	r3, #22
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 3; i++)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3301      	adds	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b02      	cmp	r3, #2
 800415a:	dddf      	ble.n	800411c <MPU9250_init+0x10c>
			}
			// magBias?
		}
		delay(1000);
 800415c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004160:	f002 fd32 	bl	8006bc8 <HAL_Delay>
	}
															// Initialize MPU9250 device
															// wake up device
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);		// Clear sleep mode bit (6), enable all sensors 
 8004164:	2200      	movs	r2, #0
 8004166:	216b      	movs	r1, #107	; 0x6b
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fce7 	bl	8003b3c <MPU9250_writeByte>
	delay(100); 											// get PLL established on x-axis gyro; should check for PLL ready interrupt  
 800416e:	2064      	movs	r0, #100	; 0x64
 8004170:	f002 fd2a 	bl	8006bc8 <HAL_Delay>
															// get stable time source
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8004174:	2201      	movs	r2, #1
 8004176:	216b      	movs	r1, #107	; 0x6b
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fcdf 	bl	8003b3c <MPU9250_writeByte>
															// Configure Gyro and Accelerometer
															// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively
	delay(100);												// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 800417e:	2064      	movs	r0, #100	; 0x64
 8004180:	f002 fd22 	bl	8006bc8 <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x03);			// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
 8004184:	2203      	movs	r2, #3
 8004186:	211a      	movs	r1, #26
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fcd7 	bl	8003b3c <MPU9250_writeByte>
	delay(100);												// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
 800418e:	2064      	movs	r0, #100	; 0x64
 8004190:	f002 fd1a 	bl	8006bc8 <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x04);		// Use a 200 Hz rate; the same rate set in CONFIG above
 8004194:	2204      	movs	r2, #4
 8004196:	2119      	movs	r1, #25
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff fccf 	bl	8003b3c <MPU9250_writeByte>

															// Set gyroscope full scale range
															// Range selects FS_SEL and AFS_SEL are 0 - 3
															// so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU9250_readByte(inst, MPU9250_GYRO_CONFIG);// get current GYRO_CONFIG register value
 800419e:	211b      	movs	r1, #27
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fce7 	bl	8003b74 <MPU9250_readByte>
 80041a6:	4603      	mov	r3, r0
 80041a8:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0; 										// Clear self-test bits [7:5]
	c = c & ~0x03;											// Clear Fchoice bits [1:0]
 80041aa:	7afb      	ldrb	r3, [r7, #11]
 80041ac:	f023 0303 	bic.w	r3, r3, #3
 80041b0:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x18;											// Clear AFS bits [4:3]
 80041b2:	7afb      	ldrb	r3, [r7, #11]
 80041b4:	f023 0318 	bic.w	r3, r3, #24
 80041b8:	72fb      	strb	r3, [r7, #11]
	c = c | config->Gscale << 3;							// Set full scale range for the gyro
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	7b5b      	ldrb	r3, [r3, #13]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	b25a      	sxtb	r2, r3
 80041c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	72fb      	strb	r3, [r7, #11]
	// c =| 0x00; 											// Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, c);		// Write new GYRO_CONFIG value to register
 80041cc:	7afb      	ldrb	r3, [r7, #11]
 80041ce:	461a      	mov	r2, r3
 80041d0:	211b      	movs	r1, #27
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fcb2 	bl	8003b3c <MPU9250_writeByte>

															// Set accelerometer full-scale range configuration
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG);		// get current ACCEL_CONFIG register value
 80041d8:	211c      	movs	r1, #28
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fcca 	bl	8003b74 <MPU9250_readByte>
 80041e0:	4603      	mov	r3, r0
 80041e2:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0;										// Clear self-test bits [7:5] 
	c = c & ~0x18;											// Clear AFS bits [4:3]
 80041e4:	7afb      	ldrb	r3, [r7, #11]
 80041e6:	f023 0318 	bic.w	r3, r3, #24
 80041ea:	72fb      	strb	r3, [r7, #11]
	c = c | config->Ascale << 3;							// Set full scale range for the accelerometer
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	7b1b      	ldrb	r3, [r3, #12]
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	b25a      	sxtb	r2, r3
 80041f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, c);		// Write new ACCEL_CONFIG register value
 80041fe:	7afb      	ldrb	r3, [r7, #11]
 8004200:	461a      	mov	r2, r3
 8004202:	211c      	movs	r1, #28
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fc99 	bl	8003b3c <MPU9250_writeByte>

															// Set accelerometer sample rate configuration
															// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1
															// for accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG2); 		// get current ACCEL_CONFIG2 register value
 800420a:	211d      	movs	r1, #29
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff fcb1 	bl	8003b74 <MPU9250_readByte>
 8004212:	4603      	mov	r3, r0
 8004214:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x0F; 											// Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 8004216:	7afb      	ldrb	r3, [r7, #11]
 8004218:	f023 030f 	bic.w	r3, r3, #15
 800421c:	72fb      	strb	r3, [r7, #11]
	c = c | 0x03;											// Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800421e:	7afb      	ldrb	r3, [r7, #11]
 8004220:	f043 0303 	orr.w	r3, r3, #3
 8004224:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, c);		// Write new ACCEL_CONFIG2 register value
 8004226:	7afb      	ldrb	r3, [r7, #11]
 8004228:	461a      	mov	r2, r3
 800422a:	211d      	movs	r1, #29
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fc85 	bl	8003b3c <MPU9250_writeByte>

	// The accelerometer, gyro, and thermometer are set to 1 kHz sample rates, 
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

															// Configure Interrupts and Bypass Enable
	MPU9250_writeByte(inst, MPU9250_INT_PIN_CFG, 0x22);    	// Set interrupt pin active high, push-pull,
 8004232:	2222      	movs	r2, #34	; 0x22
 8004234:	2137      	movs	r1, #55	; 0x37
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fc80 	bl	8003b3c <MPU9250_writeByte>
															//and clear on read of INT_STATUS, enable I2C_BYPASS_EN
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x01);		// Enable data ready (bit 0) interrupt
 800423c:	2201      	movs	r2, #1
 800423e:	2138      	movs	r1, #56	; 0x38
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff fc7b 	bl	8003b3c <MPU9250_writeByte>
	if (!config->calibrate && false)						// [SKIPPED] Do this step immidiately only if not calibrating
	{
		AK8963_init(inst, config);	 						// Get magnetometer calibration from AK8963 ROM
	}

	inst->mpu_active = true;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	719a      	strb	r2, [r3, #6]
	inst->active = inst->mpu_active && inst->ak_active;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	799b      	ldrb	r3, [r3, #6]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <MPU9250_init+0x250>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	79db      	ldrb	r3, [r3, #7]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MPU9250_init+0x250>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <MPU9250_init+0x252>
 8004260:	2300      	movs	r3, #0
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	b2da      	uxtb	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	721a      	strb	r2, [r3, #8]
	return true;
 800426c:	2301      	movs	r3, #1
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	bd90      	pop	{r4, r7, pc}
 8004276:	bf00      	nop
 8004278:	00000000 	.word	0x00000000
 800427c:	412e8480 	.word	0x412e8480

08004280 <AK8963_init>:

bool AK8963_init(MPU9250* inst, MPU9250_config* config)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
	delay(1000);
 800428a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800428e:	f002 fc9b 	bl	8006bc8 <HAL_Delay>
															// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  									// x/y/z gyro calibration data stored here
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 8004292:	2200      	movs	r2, #0
 8004294:	210a      	movs	r1, #10
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fcbd 	bl	8003c16 <AK8963_writeByte>
	delay(10);
 800429c:	200a      	movs	r0, #10
 800429e:	f002 fc93 	bl	8006bc8 <HAL_Delay>
	AK8963_writeByte(inst, AK8963_CNTL, 0x0F);				// Enter Fuse ROM access mode
 80042a2:	220f      	movs	r2, #15
 80042a4:	210a      	movs	r1, #10
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fcb5 	bl	8003c16 <AK8963_writeByte>
	delay(10);
 80042ac:	200a      	movs	r0, #10
 80042ae:	f002 fc8b 	bl	8006bc8 <HAL_Delay>
	AK8963_readBytes(inst, AK8963_ASAX, 3, &rawData[0]);	// Read the x,y,z-axis calibration values
 80042b2:	f107 0308 	add.w	r3, r7, #8
 80042b6:	2203      	movs	r2, #3
 80042b8:	2110      	movs	r1, #16
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff fce3 	bl	8003c86 <AK8963_readBytes>
	inst->magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return axis sensitivity adjustment values
 80042c0:	7a3b      	ldrb	r3, [r7, #8]
 80042c2:	3b80      	subs	r3, #128	; 0x80
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042cc:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80043c8 <AK8963_init+0x148>
 80042d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	inst->magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 80042e2:	7a7b      	ldrb	r3, [r7, #9]
 80042e4:	3b80      	subs	r3, #128	; 0x80
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042ee:	eddf 6a36 	vldr	s13, [pc, #216]	; 80043c8 <AK8963_init+0x148>
 80042f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	inst->magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8004304:	7abb      	ldrb	r3, [r7, #10]
 8004306:	3b80      	subs	r3, #128	; 0x80
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004310:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80043c8 <AK8963_init+0x148>
 8004314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800431c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 8004326:	2200      	movs	r2, #0
 8004328:	210a      	movs	r1, #10
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fc73 	bl	8003c16 <AK8963_writeByte>
	delay(10);
 8004330:	200a      	movs	r0, #10
 8004332:	f002 fc49 	bl	8006bc8 <HAL_Delay>
															// Configure the magnetometer for continuous read and highest resolution
															// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
															// and enable continuous mode data acquisition Mmode (bits [3:0]),
															// 0010 for 8 Hz and 0110 for 100 Hz sample rates
	AK8963_writeByte(inst, AK8963_CNTL, config->Mscale << 4 | config->Mmode); // Set magnetometer data resolution and sample ODR
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	7b9b      	ldrb	r3, [r3, #14]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	b25a      	sxtb	r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	7bdb      	ldrb	r3, [r3, #15]
 8004342:	b25b      	sxtb	r3, r3
 8004344:	4313      	orrs	r3, r2
 8004346:	b25b      	sxtb	r3, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	210a      	movs	r1, #10
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff fc61 	bl	8003c16 <AK8963_writeByte>
	delay(10);
 8004354:	200a      	movs	r0, #10
 8004356:	f002 fc37 	bl	8006bc8 <HAL_Delay>

	if (config->calibrate)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	7c1b      	ldrb	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <AK8963_init+0xea>
	{
		AK8963_calibrate(inst);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fe46 	bl	8004ff4 <AK8963_calibrate>
 8004368:	e016      	b.n	8004398 <AK8963_init+0x118>
	}
	else
	{
		int i;
		for (i = 0; i < 3; i++)
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e010      	b.n	8004392 <AK8963_init+0x112>
		{
			inst->magBias[i] = config->magBias[i];
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3304      	adds	r3, #4
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	3304      	adds	r3, #4
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3312      	adds	r3, #18
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	3304      	adds	r3, #4
 800438a:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3301      	adds	r3, #1
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b02      	cmp	r3, #2
 8004396:	ddeb      	ble.n	8004370 <AK8963_init+0xf0>
		}
	}
	
	inst->ak_active = true;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	71da      	strb	r2, [r3, #7]
	inst->active = inst->mpu_active && inst->ak_active;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	799b      	ldrb	r3, [r3, #6]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <AK8963_init+0x132>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	79db      	ldrb	r3, [r3, #7]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <AK8963_init+0x132>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <AK8963_init+0x134>
 80043b2:	2300      	movs	r3, #0
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	721a      	strb	r2, [r3, #8]
	return true;
 80043be:	2301      	movs	r3, #1
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	43800000 	.word	0x43800000

080043cc <MPU9250_present>:

bool MPU9250_present(MPU9250* inst, uint8_t trials)	// arg = trials of getting WHO_AM_I response from MPU and AK
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
	uint8_t attempts = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
	do
	{
		//MPU9250_reset(inst);
		char who[2] = {0, 0};
 80043dc:	2300      	movs	r3, #0
 80043de:	733b      	strb	r3, [r7, #12]
 80043e0:	2300      	movs	r3, #0
 80043e2:	737b      	strb	r3, [r7, #13]
		who[0] = MPU9250_readByte(inst, MPU9250_WHO_AM_I);
 80043e4:	2175      	movs	r1, #117	; 0x75
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fbc4 	bl	8003b74 <MPU9250_readByte>
 80043ec:	4603      	mov	r3, r0
 80043ee:	733b      	strb	r3, [r7, #12]
		who[1] = AK8963_readByte(inst, AK8963_WHO_AM_I);
 80043f0:	2100      	movs	r1, #0
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fc2b 	bl	8003c4e <AK8963_readByte>
 80043f8:	4603      	mov	r3, r0
 80043fa:	737b      	strb	r3, [r7, #13]
		if (who[0] == 0x71)
 80043fc:	7b3b      	ldrb	r3, [r7, #12]
 80043fe:	2b71      	cmp	r3, #113	; 0x71
 8004400:	d104      	bne.n	800440c <MPU9250_present+0x40>
		{
			println("Both present!");
 8004402:	480c      	ldr	r0, [pc, #48]	; (8004434 <MPU9250_present+0x68>)
 8004404:	f7ff fb38 	bl	8003a78 <println>
			return true;
 8004408:	2301      	movs	r3, #1
 800440a:	e00e      	b.n	800442a <MPU9250_present+0x5e>
		}
		else
		{
			attempts++;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	3301      	adds	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
			delay(1000);
 8004412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004416:	f002 fbd7 	bl	8006bc8 <HAL_Delay>
		}
	} while (attempts <= trials);
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	429a      	cmp	r2, r3
 8004420:	d9dc      	bls.n	80043dc <MPU9250_present+0x10>
	inst->active = false;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	721a      	strb	r2, [r3, #8]
	return false;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	0801de74 	.word	0x0801de74

08004438 <MPU9250_update>:

bool MPU9250_update(MPU9250* inst)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	if (MPU9250_readByte(inst, MPU9250_INT_STATUS) & 0x01)	// check if data is ready
 8004440:	213a      	movs	r1, #58	; 0x3a
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff fb96 	bl	8003b74 <MPU9250_readByte>
 8004448:	4603      	mov	r3, r0
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <MPU9250_update+0x2c>
	{
		MPU9250_readAccelData(inst);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff fc4c 	bl	8003cf0 <MPU9250_readAccelData>
		MPU9250_readGyroData(inst);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fca0 	bl	8003d9e <MPU9250_readGyroData>
		MPU9250_readMagData(inst);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff fcf4 	bl	8003e4c <MPU9250_readMagData>
	}

	inst->alg_deltat = ((micros() - inst->alg_lastUpdate)/1000000.0f);// set integration time by time elapsed since last filter update
 8004464:	f7ff fafd 	bl	8003a62 <micros>
 8004468:	4602      	mov	r2, r0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004478:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80044e4 <MPU9250_update+0xac>
 800447c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	if (inst->alg_deltat >= inst->alg_delay)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449a:	db1e      	blt.n	80044da <MPU9250_update+0xa2>
	{
		//inst->lastAlgUpdate = micros();	// [!!!] check position of this line vs performance
		MadgwickQuaternionUpdate(inst);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f001 f837 	bl	8005510 <MadgwickQuaternionUpdate>
		inst->alg_lastUpdate = micros();
 80044a2:	f7ff fade 	bl	8003a62 <micros>
 80044a6:	4602      	mov	r2, r0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	67da      	str	r2, [r3, #124]	; 0x7c

		if (micros() - inst->euler_lastUpdate >= inst->euler_delay)	// ! euler_delay is multiplied to be in [us]
 80044ac:	f7ff fad9 	bl	8003a62 <micros>
 80044b0:	4602      	mov	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044b8:	1ad2      	subs	r2, r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d30a      	bcc.n	80044da <MPU9250_update+0xa2>
		{
			MPU9250_updateEuler(inst);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fea7 	bl	8005218 <MPU9250_updateEuler>
			inst->euler_lastUpdate = micros();
 80044ca:	f7ff faca 	bl	8003a62 <micros>
 80044ce:	4602      	mov	r2, r0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			return true;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <MPU9250_update+0xa4>
		}
	}
	return false;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	49742400 	.word	0x49742400

080044e8 <MPU9250_reset>:

void MPU9250_reset(MPU9250* inst)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80044f0:	2280      	movs	r2, #128	; 0x80
 80044f2:	216b      	movs	r1, #107	; 0x6b
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fb21 	bl	8003b3c <MPU9250_writeByte>
	delay(100);
 80044fa:	2064      	movs	r0, #100	; 0x64
 80044fc:	f002 fb64 	bl	8006bc8 <HAL_Delay>
}
 8004500:	bf00      	nop
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <MPU9250_calibrate>:

void MPU9250_calibrate(MPU9250* inst)					// Function which accumulates gyro and accelerometer data after device initialization.
{														// It calculates the average of the at-rest readings and
 8004508:	b580      	push	{r7, lr}
 800450a:	b098      	sub	sp, #96	; 0x60
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	uint16_t i, packet_count, fifo_count;				// then loads the resulting offsets into accelerometer and gyro bias registers.
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8004510:	2300      	movs	r3, #0
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
 8004514:	2300      	movs	r3, #0
 8004516:	64bb      	str	r3, [r7, #72]	; 0x48
 8004518:	2300      	movs	r3, #0
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451c:	2300      	movs	r3, #0
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004520:	2300      	movs	r3, #0
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004524:	2300      	movs	r3, #0
 8004526:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t data[12]; 									// data array to hold accelerometer and gyro x, y, z, data

	MPU9250_reset(inst);								// clear gyro and accelerometer bias registers
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ffdd 	bl	80044e8 <MPU9250_reset>

	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  // Get stable time source
 800452e:	2201      	movs	r2, #1
 8004530:	216b      	movs	r1, #107	; 0x6b
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fb02 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_2, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8004538:	2200      	movs	r2, #0
 800453a:	216c      	movs	r1, #108	; 0x6c
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fafd 	bl	8003b3c <MPU9250_writeByte>
	delay(200);
 8004542:	20c8      	movs	r0, #200	; 0xc8
 8004544:	f002 fb40 	bl	8006bc8 <HAL_Delay>
														// Configure device for bias calculation
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x00);  // Disable all interrupts
 8004548:	2200      	movs	r2, #0
 800454a:	2138      	movs	r1, #56	; 0x38
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff faf5 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);     // Disable FIFO
 8004552:	2200      	movs	r2, #0
 8004554:	2123      	movs	r1, #35	; 0x23
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff faf0 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);  // Turn on internal clock source
 800455c:	2200      	movs	r2, #0
 800455e:	216b      	movs	r1, #107	; 0x6b
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff faeb 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_I2C_MST_CTRL, 0x00);// Disable I2C master
 8004566:	2200      	movs	r2, #0
 8004568:	2124      	movs	r1, #36	; 0x24
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fae6 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x00);   // Disable FIFO and I2C master modes
 8004570:	2200      	movs	r2, #0
 8004572:	216a      	movs	r1, #106	; 0x6a
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff fae1 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x0C);   // Reset FIFO and DMP
 800457a:	220c      	movs	r2, #12
 800457c:	216a      	movs	r1, #106	; 0x6a
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff fadc 	bl	8003b3c <MPU9250_writeByte>
	delay(15);
 8004584:	200f      	movs	r0, #15
 8004586:	f002 fb1f 	bl	8006bc8 <HAL_Delay>
														// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 800458a:	2201      	movs	r2, #1
 800458c:	211a      	movs	r1, #26
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fad4 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8004594:	2200      	movs	r2, #0
 8004596:	2119      	movs	r1, #25
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff facf 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800459e:	2200      	movs	r2, #0
 80045a0:	211b      	movs	r1, #27
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff faca 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 80045a8:	2200      	movs	r2, #0
 80045aa:	211c      	movs	r1, #28
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fac5 	bl	8003b3c <MPU9250_writeByte>

	uint16_t  gyrosensitivity  = 131;					// = 131 LSB/degrees/sec
 80045b2:	2383      	movs	r3, #131	; 0x83
 80045b4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;					// = 16384 LSB/g
 80045b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045bc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

														// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x40);   // Enable FIFO
 80045c0:	2240      	movs	r2, #64	; 0x40
 80045c2:	216a      	movs	r1, #106	; 0x6a
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fab9 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 80045ca:	2278      	movs	r2, #120	; 0x78
 80045cc:	2123      	movs	r1, #35	; 0x23
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fab4 	bl	8003b3c <MPU9250_writeByte>
	delay(40);											// accumulate 40 samples in 80 milliseconds = 480 bytes
 80045d4:	2028      	movs	r0, #40	; 0x28
 80045d6:	f002 faf7 	bl	8006bc8 <HAL_Delay>

														// At end of sample accumulation, turn off FIFO sensor read
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);		// Disable gyro and accelerometer sensors for FIFO
 80045da:	2200      	movs	r2, #0
 80045dc:	2123      	movs	r1, #35	; 0x23
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff faac 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_readBytes(inst, MPU9250_FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80045e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045e8:	2202      	movs	r2, #2
 80045ea:	2172      	movs	r1, #114	; 0x72
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff fadd 	bl	8003bac <MPU9250_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 80045f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	b21a      	sxth	r2, r3
 80045fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045fe:	b21b      	sxth	r3, r3
 8004600:	4313      	orrs	r3, r2
 8004602:	b21b      	sxth	r3, r3
 8004604:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;						// How many sets of full gyro and accelerometer data for averaging
 8004608:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800460c:	4aa8      	ldr	r2, [pc, #672]	; (80048b0 <MPU9250_calibrate+0x3a8>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	08db      	lsrs	r3, r3, #3
 8004614:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (i = 0; i < packet_count; i++)
 8004618:	2300      	movs	r3, #0
 800461a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800461e:	e071      	b.n	8004704 <MPU9250_calibrate+0x1fc>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};	// [!!!] strange, cannot get rid of those arrays, conversion is screwed then
 8004620:	2300      	movs	r3, #0
 8004622:	82bb      	strh	r3, [r7, #20]
 8004624:	2300      	movs	r3, #0
 8004626:	82fb      	strh	r3, [r7, #22]
 8004628:	2300      	movs	r3, #0
 800462a:	833b      	strh	r3, [r7, #24]
 800462c:	2300      	movs	r3, #0
 800462e:	81bb      	strh	r3, [r7, #12]
 8004630:	2300      	movs	r3, #0
 8004632:	81fb      	strh	r3, [r7, #14]
 8004634:	2300      	movs	r3, #0
 8004636:	823b      	strh	r3, [r7, #16]
		MPU9250_readBytes(inst, MPU9250_FIFO_R_W, 12, &data[0]); // read data for averaging
 8004638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800463c:	220c      	movs	r2, #12
 800463e:	2174      	movs	r1, #116	; 0x74
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff fab3 	bl	8003bac <MPU9250_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8004646:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	b21a      	sxth	r2, r3
 800464e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004652:	b21b      	sxth	r3, r3
 8004654:	4313      	orrs	r3, r2
 8004656:	b21b      	sxth	r3, r3
 8004658:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 800465a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	b21a      	sxth	r2, r3
 8004662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004666:	b21b      	sxth	r3, r3
 8004668:	4313      	orrs	r3, r2
 800466a:	b21b      	sxth	r3, r3
 800466c:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 800466e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	b21a      	sxth	r2, r3
 8004676:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800467a:	b21b      	sxth	r3, r3
 800467c:	4313      	orrs	r3, r2
 800467e:	b21b      	sxth	r3, r3
 8004680:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8004682:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	b21a      	sxth	r2, r3
 800468a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800468e:	b21b      	sxth	r3, r3
 8004690:	4313      	orrs	r3, r2
 8004692:	b21b      	sxth	r3, r3
 8004694:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8004696:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	b21a      	sxth	r2, r3
 800469e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80046a2:	b21b      	sxth	r3, r3
 80046a4:	4313      	orrs	r3, r2
 80046a6:	b21b      	sxth	r3, r3
 80046a8:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 80046aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	b21a      	sxth	r2, r3
 80046b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046b6:	b21b      	sxth	r3, r3
 80046b8:	4313      	orrs	r3, r2
 80046ba:	b21b      	sxth	r3, r3
 80046bc:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80046c4:	4413      	add	r3, r2
 80046c6:	63bb      	str	r3, [r7, #56]	; 0x38
		accel_bias[1] += (int32_t) accel_temp[1];
 80046c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046ce:	4413      	add	r3, r2
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		accel_bias[2] += (int32_t) accel_temp[2];
 80046d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80046d8:	4413      	add	r3, r2
 80046da:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 80046dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	647b      	str	r3, [r7, #68]	; 0x44
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 80046e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80046ec:	4413      	add	r3, r2
 80046ee:	64bb      	str	r3, [r7, #72]	; 0x48
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80046f6:	4413      	add	r3, r2
 80046f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (i = 0; i < packet_count; i++)
 80046fa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046fe:	3301      	adds	r3, #1
 8004700:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004704:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8004708:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800470c:	429a      	cmp	r2, r3
 800470e:	d387      	bcc.n	8004620 <MPU9250_calibrate+0x118>
	}

	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 8004710:	2300      	movs	r3, #0
 8004712:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004716:	e077      	b.n	8004808 <MPU9250_calibrate+0x300>
	{
		accel_bias[i] /= (int32_t) packet_count;
 8004718:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004722:	4413      	add	r3, r2
 8004724:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8004728:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800472c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004730:	fb91 f2f2 	sdiv	r2, r1, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800473a:	440b      	add	r3, r1
 800473c:	f843 2c28 	str.w	r2, [r3, #-40]
		gyro_bias[i]  /= (int32_t) packet_count;
 8004740:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800474a:	4413      	add	r3, r2
 800474c:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8004750:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8004754:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004758:	fb91 f2f2 	sdiv	r2, r1, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004762:	440b      	add	r3, r1
 8004764:	f843 2c1c 	str.w	r2, [r3, #-28]
			//accel_bias[abs(MPU9250_VERTICAL_AXIS)] += (int32_t)(accelsensitivity * sgn(MPU9250_VERTICAL_AXIS)); // !!! not sure about sign!
																					// [!!!] \/ \/ scarry, no sgn()!
			accel_bias[abs(MPU9250_VERTICAL_AXIS)] -= (int32_t)(accelsensitivity * (accel_bias[abs(MPU9250_VERTICAL_AXIS)] / abs(accel_bias[abs(MPU9250_VERTICAL_AXIS)])));
		}
		//[!!!] this part isn't needed unless [commented STEP1]	// Construct the gyro biases for push to the hardware gyro bias registers,
		data[2*i] =  ((-gyro_bias[i]/4) >> 8) & 0xFF;	// which are reset to zero upon device startup.
 8004768:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004772:	4413      	add	r3, r2
 8004774:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004778:	425b      	negs	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	da00      	bge.n	8004780 <MPU9250_calibrate+0x278>
 800477e:	3303      	adds	r3, #3
 8004780:	109b      	asrs	r3, r3, #2
 8004782:	121a      	asrs	r2, r3, #8
 8004784:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004790:	440b      	add	r3, r1
 8004792:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = (-gyro_bias[i]/4)		  & 0xFF;	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8004796:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047a0:	4413      	add	r3, r2
 80047a2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80047a6:	425b      	negs	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	da00      	bge.n	80047ae <MPU9250_calibrate+0x2a6>
 80047ac:	3303      	adds	r3, #3
 80047ae:	109b      	asrs	r3, r3, #2
 80047b0:	461a      	mov	r2, r3
 80047b2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	3301      	adds	r3, #1
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80047c0:	440b      	add	r3, r1
 80047c2:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP1]					// Biases are additive, so change sign on calculated average gyro biases
		inst->gyroBias[i] = (float)gyro_bias[i]/(float)gyrosensitivity;	// Construct gyro bias in deg/s for later manual subtraction
 80047c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047d0:	4413      	add	r3, r2
 80047d2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80047de:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	3316      	adds	r3, #22
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 80047fe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004802:	3301      	adds	r3, #1
 8004804:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004808:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800480c:	2b02      	cmp	r3, #2
 800480e:	d983      	bls.n	8004718 <MPU9250_calibrate+0x210>
	}

	if(accel_bias[2] > 0L)	accel_bias[2] -= (int32_t) accelsensitivity;
 8004810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	dd05      	ble.n	8004822 <MPU9250_calibrate+0x31a>
 8004816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004818:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	643b      	str	r3, [r7, #64]	; 0x40
 8004820:	e004      	b.n	800482c <MPU9250_calibrate+0x324>
	else 						accel_bias[2] += (int32_t) accelsensitivity;
 8004822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004824:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004828:	4413      	add	r3, r2
 800482a:	643b      	str	r3, [r7, #64]	; 0x40
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0};							// A place to hold the factory accelerometer trim biases
 800482c:	2300      	movs	r3, #0
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	2300      	movs	r3, #0
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
 8004834:	2300      	movs	r3, #0
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU9250_readBytes(inst, MPU9250_XA_OFFSET_H, 2, &data[0]);		// Read factory accelerometer trim values
 8004838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800483c:	2202      	movs	r2, #2
 800483e:	2177      	movs	r1, #119	; 0x77
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff f9b3 	bl	8003bac <MPU9250_readBytes>
	accel_bias_reg[0] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004846:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	b21b      	sxth	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004854:	4313      	orrs	r3, r2
 8004856:	623b      	str	r3, [r7, #32]
	MPU9250_readBytes(inst, MPU9250_YA_OFFSET_H, 2, &data[0]);
 8004858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800485c:	2202      	movs	r2, #2
 800485e:	217a      	movs	r1, #122	; 0x7a
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff f9a3 	bl	8003bac <MPU9250_readBytes>
	accel_bias_reg[1] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004866:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	b21b      	sxth	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004874:	4313      	orrs	r3, r2
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
	MPU9250_readBytes(inst, MPU9250_ZA_OFFSET_H, 2, &data[0]);
 8004878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800487c:	2202      	movs	r2, #2
 800487e:	217d      	movs	r1, #125	; 0x7d
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff f993 	bl	8003bac <MPU9250_readBytes>
	accel_bias_reg[2] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004886:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	b21b      	sxth	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004894:	4313      	orrs	r3, r2
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL;						// Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8004898:	2301      	movs	r3, #1
 800489a:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0};			// Define array to hold mask bit for each accelerometer bias axis
 800489c:	2300      	movs	r3, #0
 800489e:	773b      	strb	r3, [r7, #28]
 80048a0:	2300      	movs	r3, #0
 80048a2:	777b      	strb	r3, [r7, #29]
 80048a4:	2300      	movs	r3, #0
 80048a6:	77bb      	strb	r3, [r7, #30]
	for(i = 0; i < 3; i++)
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80048ae:	e096      	b.n	80049de <MPU9250_calibrate+0x4d6>
 80048b0:	aaaaaaab 	.word	0xaaaaaaab
	{											// If temperature compensation bit is set, record that fact in mask_bit
		if(accel_bias_reg[i] & mask) mask_bit[i] = 0x01;
 80048b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048be:	4413      	add	r3, r2
 80048c0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <MPU9250_calibrate+0x3d6>
 80048ce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048d6:	4413      	add	r3, r2
 80048d8:	2201      	movs	r2, #1
 80048da:	f803 2c44 	strb.w	r2, [r3, #-68]
												// Construct total accelerometer bias
		accel_bias_reg[i] -= (accel_bias[i]/8);	// Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80048de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048e8:	4413      	add	r3, r2
 80048ea:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80048ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80048f8:	440b      	add	r3, r1
 80048fa:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da00      	bge.n	8004904 <MPU9250_calibrate+0x3fc>
 8004902:	3307      	adds	r3, #7
 8004904:	10db      	asrs	r3, r3, #3
 8004906:	425b      	negs	r3, r3
 8004908:	4619      	mov	r1, r3
 800490a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800490e:	440a      	add	r2, r1
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004916:	440b      	add	r3, r1
 8004918:	f843 2c40 	str.w	r2, [r3, #-64]

		//[!!!] this part isn't needed unless [commented STEP2]
		data[2*i]   = (accel_bias_reg[i] >> 8) & 0xFF;
 800491c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004926:	4413      	add	r3, r2
 8004928:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800492c:	121a      	asrs	r2, r3, #8
 800492e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800493a:	440b      	add	r3, r1
 800493c:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] =  accel_bias_reg[i]	   & 0xFF;
 8004940:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800494a:	4413      	add	r3, r2
 800494c:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8004950:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	3301      	adds	r3, #1
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800495e:	440b      	add	r3, r1
 8004960:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = data[2*i+1] | mask_bit[i];// Preserve temperature compensation bit when writing back to accelerometer bias registers
 8004964:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	3301      	adds	r3, #1
 800496c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004970:	4413      	add	r3, r2
 8004972:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 8004976:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800497a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800497e:	4413      	add	r3, r2
 8004980:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8004984:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	3301      	adds	r3, #1
 800498c:	430a      	orrs	r2, r1
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004994:	440b      	add	r3, r1
 8004996:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP2]
												// Output scaled accelerometer biases for manual subtraction in the main program
		inst->accelBias[i] = (float)accel_bias[i]/(float)accelsensitivity;
 800499a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80049a4:	4413      	add	r3, r2
 80049a6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80049b2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	3318      	adds	r3, #24
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	3304      	adds	r3, #4
 80049d0:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 3; i++)
 80049d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049d8:	3301      	adds	r3, #1
 80049da:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80049de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	f67f af66 	bls.w	80048b4 <MPU9250_calibrate+0x3ac>
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_H, data[2]);
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_L, data[3]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_H, data[4]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_L, data[5]);
	*/
}
 80049e8:	bf00      	nop
 80049ea:	3760      	adds	r7, #96	; 0x60
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <MPU9250_SelfTest>:

bool MPU9250_SelfTest(MPU9250* inst)						// Accelerometer and gyroscope self test; check calibration wrt factory settings
{															// percent deviation from factory trim values should be within +/- 14% to pass
 80049f0:	b5b0      	push	{r4, r5, r7, lr}
 80049f2:	b0a2      	sub	sp, #136	; 0x88
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	uint8_t selfTest[6];
	float gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80049f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	float results[6];

	inst->aRes = 1;											// Prepare instance to SelfTest
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
	inst->gRes = 1;											//Configuration values (must?) not affect readings
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
	int i = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	for (i = 0; i < 3; i++)
 8004a44:	2300      	movs	r3, #0
 8004a46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a4a:	e017      	b.n	8004a7c <MPU9250_SelfTest+0x8c>
	{
		inst->accelBias[i] = 0.0f;
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a52:	3318      	adds	r3, #24
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	3304      	adds	r3, #4
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
		inst->gyroBias[i] = 0.0f;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a66:	3316      	adds	r3, #22
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8004a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a76:	3301      	adds	r3, #1
 8004a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	dde3      	ble.n	8004a4c <MPU9250_SelfTest+0x5c>
	}

	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);		// Set gyro sample rate to 1 kHz
 8004a84:	2200      	movs	r2, #0
 8004a86:	2119      	movs	r1, #25
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff f857 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x02);			// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8004a8e:	2202      	movs	r2, #2
 8004a90:	211a      	movs	r1, #26
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff f852 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, FS<<3);	// Set full scale range for the gyro to 250 dps
 8004a98:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	211b      	movs	r1, #27
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff f849 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8004aaa:	2202      	movs	r2, #2
 8004aac:	211d      	movs	r1, #29
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff f844 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, FS<<3);	// Set full scale range for the accelerometer to 2 g
 8004ab4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	211c      	movs	r1, #28
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff f83b 	bl	8003b3c <MPU9250_writeByte>

	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004acc:	e040      	b.n	8004b50 <MPU9250_SelfTest+0x160>
	{
		MPU9250_readAccelData(inst);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff f90e 	bl	8003cf0 <MPU9250_readAccelData>
		aAvg[0] += inst->ax;
 8004ad4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		aAvg[1] += inst->ay;
 8004ae6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	edd3 7a08 	vldr	s15, [r3, #32]
 8004af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004af4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		aAvg[2] += inst->az;
 8004af8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b06:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		MPU9250_readGyroData(inst);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff f947 	bl	8003d9e <MPU9250_readGyroData>
		gAvg[0] += inst->gx;
 8004b10:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b1e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		gAvg[1] += inst->gy;
 8004b22:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b30:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		gAvg[2] += inst->gz;
 8004b34:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b42:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 8004b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b54:	2bc7      	cmp	r3, #199	; 0xc7
 8004b56:	ddba      	ble.n	8004ace <MPU9250_SelfTest+0xde>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b5e:	e030      	b.n	8004bc2 <MPU9250_SelfTest+0x1d2>
	{
		aAvg[i] /= 200;
 8004b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3b34      	subs	r3, #52	; 0x34
 8004b6e:	ed93 7a00 	vldr	s14, [r3]
 8004b72:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8004e08 <MPU9250_SelfTest+0x418>
 8004b76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b84:	4413      	add	r3, r2
 8004b86:	3b34      	subs	r3, #52	; 0x34
 8004b88:	edc3 7a00 	vstr	s15, [r3]
		gAvg[i] /= 200;
 8004b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b96:	4413      	add	r3, r2
 8004b98:	3b28      	subs	r3, #40	; 0x28
 8004b9a:	ed93 7a00 	vldr	s14, [r3]
 8004b9e:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8004e08 <MPU9250_SelfTest+0x418>
 8004ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3b28      	subs	r3, #40	; 0x28
 8004bb4:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 8004bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	ddca      	ble.n	8004b60 <MPU9250_SelfTest+0x170>
	}
															// Configure the accelerometer for self-test
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0xE0);	// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8004bca:	22e0      	movs	r2, #224	; 0xe0
 8004bcc:	211c      	movs	r1, #28
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fe ffb4 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0xE0); 	// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8004bd4:	22e0      	movs	r2, #224	; 0xe0
 8004bd6:	211b      	movs	r1, #27
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7fe ffaf 	bl	8003b3c <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 8004bde:	2019      	movs	r0, #25
 8004be0:	f001 fff2 	bl	8006bc8 <HAL_Delay>

	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bea:	e040      	b.n	8004c6e <MPU9250_SelfTest+0x27e>
	{
		MPU9250_readAccelData(inst);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff f87f 	bl	8003cf0 <MPU9250_readAccelData>
		aSTAvg[0] += inst->ax;
 8004bf2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	edd3 7a07 	vldr	s15, [r3, #28]
 8004bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c00:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		aSTAvg[1] += inst->ay;
 8004c04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c12:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		aSTAvg[2] += inst->az;
 8004c16:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c24:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		MPU9250_readGyroData(inst);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff f8b8 	bl	8003d9e <MPU9250_readGyroData>
		gSTAvg[0] += inst->gx;
 8004c2e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c3c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		gSTAvg[1] += inst->gy;
 8004c40:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c4e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		gSTAvg[2] += inst->gz;
 8004c52:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c60:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 8004c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c68:	3301      	adds	r3, #1
 8004c6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c72:	2bc7      	cmp	r3, #199	; 0xc7
 8004c74:	ddba      	ble.n	8004bec <MPU9250_SelfTest+0x1fc>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 8004c76:	2300      	movs	r3, #0
 8004c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c7c:	e030      	b.n	8004ce0 <MPU9250_SelfTest+0x2f0>
	{
		aSTAvg[i] /= 200;
 8004c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c88:	4413      	add	r3, r2
 8004c8a:	3b40      	subs	r3, #64	; 0x40
 8004c8c:	ed93 7a00 	vldr	s14, [r3]
 8004c90:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8004e08 <MPU9250_SelfTest+0x418>
 8004c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3b40      	subs	r3, #64	; 0x40
 8004ca6:	edc3 7a00 	vstr	s15, [r3]
		gSTAvg[i] /= 200;
 8004caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3b4c      	subs	r3, #76	; 0x4c
 8004cb8:	ed93 7a00 	vldr	s14, [r3]
 8004cbc:	eddf 6a52 	vldr	s13, [pc, #328]	; 8004e08 <MPU9250_SelfTest+0x418>
 8004cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cce:	4413      	add	r3, r2
 8004cd0:	3b4c      	subs	r3, #76	; 0x4c
 8004cd2:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 8004cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cda:	3301      	adds	r3, #1
 8004cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	ddca      	ble.n	8004c7e <MPU9250_SelfTest+0x28e>
	}

	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);	// Configure the gyro and accelerometer for normal operation
 8004ce8:	2200      	movs	r2, #0
 8004cea:	211c      	movs	r1, #28
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fe ff25 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	211b      	movs	r1, #27
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fe ff20 	bl	8003b3c <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 8004cfc:	2019      	movs	r0, #25
 8004cfe:	f001 ff63 	bl	8006bc8 <HAL_Delay>

	selfTest[0] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_ACCEL);	// Retrieve accelerometer and gyro 
 8004d02:	210d      	movs	r1, #13
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fe ff35 	bl	8003b74 <MPU9250_readByte>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	selfTest[1] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_ACCEL);	// factory Self-Test Code from USR_Reg
 8004d10:	210e      	movs	r1, #14
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fe ff2e 	bl	8003b74 <MPU9250_readByte>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	selfTest[2] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_ACCEL);	// (self-test results)
 8004d1e:	210f      	movs	r1, #15
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fe ff27 	bl	8003b74 <MPU9250_readByte>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	selfTest[3] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_GYRO);
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fe ff20 	bl	8003b74 <MPU9250_readByte>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	selfTest[4] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_GYRO);
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7fe ff19 	bl	8003b74 <MPU9250_readByte>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	selfTest[5] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_GYRO);
 8004d48:	2102      	movs	r1, #2
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fe ff12 	bl	8003b74 <MPU9250_readByte>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8004d56:	2300      	movs	r3, #0
 8004d58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d5c:	e048      	b.n	8004df0 <MPU9250_SelfTest+0x400>
	{																					// from self-test code reads
		factoryTrim[i] = (float)(2620/1<<FS)*(pow(1.01, ((float)selfTest[i] - 1.0)));	// (FT[axis] factory trim calculation)
 8004d5e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004d62:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d72:	ee17 0a90 	vmov	r0, s15
 8004d76:	f7fb fbf7 	bl	8000568 <__aeabi_f2d>
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	460d      	mov	r5, r1
 8004d7e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d86:	4413      	add	r3, r2
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d92:	ee17 0a90 	vmov	r0, s15
 8004d96:	f7fb fbe7 	bl	8000568 <__aeabi_f2d>
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <MPU9250_SelfTest+0x41c>)
 8004da0:	f7fb fa82 	bl	80002a8 <__aeabi_dsub>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	ec43 2b17 	vmov	d7, r2, r3
 8004dac:	eeb0 1a47 	vmov.f32	s2, s14
 8004db0:	eef0 1a67 	vmov.f32	s3, s15
 8004db4:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8004e00 <MPU9250_SelfTest+0x410>
 8004db8:	f016 f980 	bl	801b0bc <pow>
 8004dbc:	ec53 2b10 	vmov	r2, r3, d0
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	f7fb fc28 	bl	8000618 <__aeabi_dmul>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	4618      	mov	r0, r3
 8004dce:	4621      	mov	r1, r4
 8004dd0:	f7fb ff1a 	bl	8000c08 <__aeabi_d2f>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004de0:	440b      	add	r3, r1
 8004de2:	3b64      	subs	r3, #100	; 0x64
 8004de4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8004de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dea:	3301      	adds	r3, #1
 8004dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	ddb2      	ble.n	8004d5e <MPU9250_SelfTest+0x36e>
	}

	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8004df8:	2300      	movs	r3, #0
 8004dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dfc:	e09b      	b.n	8004f36 <MPU9250_SelfTest+0x546>
 8004dfe:	bf00      	nop
 8004e00:	c28f5c29 	.word	0xc28f5c29
 8004e04:	3ff028f5 	.word	0x3ff028f5
 8004e08:	43480000 	.word	0x43480000
 8004e0c:	3ff00000 	.word	0x3ff00000
	{														// the change from Factory Trim of the Self-Test Response
		results[i]   = 	100.0*(aSTAvg[i] - aAvg[i])/factoryTrim[i]   - 100.0;
 8004e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e18:	4413      	add	r3, r2
 8004e1a:	3b40      	subs	r3, #64	; 0x40
 8004e1c:	ed93 7a00 	vldr	s14, [r3]
 8004e20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e28:	4413      	add	r3, r2
 8004e2a:	3b34      	subs	r3, #52	; 0x34
 8004e2c:	edd3 7a00 	vldr	s15, [r3]
 8004e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e34:	ee17 0a90 	vmov	r0, s15
 8004e38:	f7fb fb96 	bl	8000568 <__aeabi_f2d>
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	4b69      	ldr	r3, [pc, #420]	; (8004fe8 <MPU9250_SelfTest+0x5f8>)
 8004e42:	f7fb fbe9 	bl	8000618 <__aeabi_dmul>
 8004e46:	4603      	mov	r3, r0
 8004e48:	460c      	mov	r4, r1
 8004e4a:	4625      	mov	r5, r4
 8004e4c:	461c      	mov	r4, r3
 8004e4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e56:	4413      	add	r3, r2
 8004e58:	3b64      	subs	r3, #100	; 0x64
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb fb83 	bl	8000568 <__aeabi_f2d>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4620      	mov	r0, r4
 8004e68:	4629      	mov	r1, r5
 8004e6a:	f7fb fcff 	bl	800086c <__aeabi_ddiv>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	460c      	mov	r4, r1
 8004e72:	4618      	mov	r0, r3
 8004e74:	4621      	mov	r1, r4
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	4b5b      	ldr	r3, [pc, #364]	; (8004fe8 <MPU9250_SelfTest+0x5f8>)
 8004e7c:	f7fb fa14 	bl	80002a8 <__aeabi_dsub>
 8004e80:	4603      	mov	r3, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	4618      	mov	r0, r3
 8004e86:	4621      	mov	r1, r4
 8004e88:	f7fb febe 	bl	8000c08 <__aeabi_d2f>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e96:	440b      	add	r3, r1
 8004e98:	3b7c      	subs	r3, #124	; 0x7c
 8004e9a:	601a      	str	r2, [r3, #0]
		results[i+3] =	100.0*(gSTAvg[i] - gAvg[i])/factoryTrim[i+3] - 100.0;
 8004e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3b4c      	subs	r3, #76	; 0x4c
 8004ea8:	ed93 7a00 	vldr	s14, [r3]
 8004eac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3b28      	subs	r3, #40	; 0x28
 8004eb8:	edd3 7a00 	vldr	s15, [r3]
 8004ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ec0:	ee17 0a90 	vmov	r0, s15
 8004ec4:	f7fb fb50 	bl	8000568 <__aeabi_f2d>
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	4b46      	ldr	r3, [pc, #280]	; (8004fe8 <MPU9250_SelfTest+0x5f8>)
 8004ece:	f7fb fba3 	bl	8000618 <__aeabi_dmul>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	4625      	mov	r5, r4
 8004ed8:	461c      	mov	r4, r3
 8004eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004edc:	3303      	adds	r3, #3
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3b64      	subs	r3, #100	; 0x64
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fb fb3c 	bl	8000568 <__aeabi_f2d>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	f7fb fcb8 	bl	800086c <__aeabi_ddiv>
 8004efc:	4603      	mov	r3, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	4618      	mov	r0, r3
 8004f02:	4621      	mov	r1, r4
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	4b37      	ldr	r3, [pc, #220]	; (8004fe8 <MPU9250_SelfTest+0x5f8>)
 8004f0a:	f7fb f9cd 	bl	80002a8 <__aeabi_dsub>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	460c      	mov	r4, r1
 8004f12:	4619      	mov	r1, r3
 8004f14:	4622      	mov	r2, r4
 8004f16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f18:	1cdc      	adds	r4, r3, #3
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	f7fb fe73 	bl	8000c08 <__aeabi_d2f>
 8004f22:	4602      	mov	r2, r0
 8004f24:	00a3      	lsls	r3, r4, #2
 8004f26:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3b7c      	subs	r3, #124	; 0x7c
 8004f2e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8004f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f32:	3301      	adds	r3, #1
 8004f34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	f77f af69 	ble.w	8004e10 <MPU9250_SelfTest+0x420>
	}														// To get percent, must multiply by 100

	#if MPU9250_DEBUG
		println("[MPU9250] Self test results:");
 8004f3e:	482b      	ldr	r0, [pc, #172]	; (8004fec <MPU9250_SelfTest+0x5fc>)
 8004f40:	f7fe fd9a 	bl	8003a78 <println>
	#endif
	bool passed = true;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	677b      	str	r3, [r7, #116]	; 0x74
 8004f4e:	e042      	b.n	8004fd6 <MPU9250_SelfTest+0x5e6>
	{
		passed &= (results[i] > -14.0) & (results[i] < 14.0);
 8004f50:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004f54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f56:	0092      	lsls	r2, r2, #2
 8004f58:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004f5c:	440a      	add	r2, r1
 8004f5e:	3a7c      	subs	r2, #124	; 0x7c
 8004f60:	edd2 7a00 	vldr	s15, [r2]
 8004f64:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8004f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f70:	bfcc      	ite	gt
 8004f72:	2201      	movgt	r2, #1
 8004f74:	2200      	movle	r2, #0
 8004f76:	b2d1      	uxtb	r1, r2
 8004f78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f7a:	0092      	lsls	r2, r2, #2
 8004f7c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8004f80:	4402      	add	r2, r0
 8004f82:	3a7c      	subs	r2, #124	; 0x7c
 8004f84:	edd2 7a00 	vldr	s15, [r2]
 8004f88:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8004f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f94:	bf4c      	ite	mi
 8004f96:	2201      	movmi	r2, #1
 8004f98:	2200      	movpl	r2, #0
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		#if MPU9250_DEBUG
			println("%f", results[i]);
 8004fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3b7c      	subs	r3, #124	; 0x7c
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fb fad3 	bl	8000568 <__aeabi_f2d>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4623      	mov	r3, r4
 8004fca:	4809      	ldr	r0, [pc, #36]	; (8004ff0 <MPU9250_SelfTest+0x600>)
 8004fcc:	f7fe fd54 	bl	8003a78 <println>
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8004fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	677b      	str	r3, [r7, #116]	; 0x74
 8004fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	ddb9      	ble.n	8004f50 <MPU9250_SelfTest+0x560>
		#endif
	}
	return passed;
 8004fdc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3788      	adds	r7, #136	; 0x88
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8004fe8:	40590000 	.word	0x40590000
 8004fec:	0801de84 	.word	0x0801de84
 8004ff0:	0801dea4 	.word	0x0801dea4

08004ff4 <AK8963_calibrate>:

void AK8963_calibrate(MPU9250* inst)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08e      	sub	sp, #56	; 0x38
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	uint16_t i = 0, j = 0, sample_count = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005000:	2300      	movs	r3, #0
 8005002:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005004:	2300      	movs	r3, #0
 8005006:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8005008:	4a80      	ldr	r2, [pc, #512]	; (800520c <AK8963_calibrate+0x218>)
 800500a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800500e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005012:	6018      	str	r0, [r3, #0]
 8005014:	3304      	adds	r3, #4
 8005016:	8019      	strh	r1, [r3, #0]
 8005018:	4a7d      	ldr	r2, [pc, #500]	; (8005210 <AK8963_calibrate+0x21c>)
 800501a:	f107 031c 	add.w	r3, r7, #28
 800501e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005022:	6018      	str	r0, [r3, #0]
 8005024:	3304      	adds	r3, #4
 8005026:	8019      	strh	r1, [r3, #0]
 8005028:	2300      	movs	r3, #0
 800502a:	82bb      	strh	r3, [r7, #20]
 800502c:	2300      	movs	r3, #0
 800502e:	82fb      	strh	r3, [r7, #22]
 8005030:	2300      	movs	r3, #0
 8005032:	833b      	strh	r3, [r7, #24]

	float temp_mRes = inst->mRes;				// Temporarily store set calibation values
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
	float temp_magCalibration[3] = {inst->magCalibration[0], inst->magCalibration[1], inst->magCalibration[2]};
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800504a:	613b      	str	r3, [r7, #16]
	inst->mRes = 1;								// Calibration values (must?) not affect readings
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005052:	649a      	str	r2, [r3, #72]	; 0x48
	for (i = 0; i < 3; i++)
 8005054:	2300      	movs	r3, #0
 8005056:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005058:	e013      	b.n	8005082 <AK8963_calibrate+0x8e>
	{
		inst->magBias[i] = 0.0f;
 800505a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	3312      	adds	r3, #18
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	3304      	adds	r3, #4
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
		inst->magCalibration[i] = 1.0f;
 800506c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	331c      	adds	r3, #28
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800507a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 800507c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800507e:	3301      	adds	r3, #1
 8005080:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005082:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005084:	2b02      	cmp	r3, #2
 8005086:	d9e8      	bls.n	800505a <AK8963_calibrate+0x66>
	}

	delay(4000);								// [!!!] <- WHAT??, must change that
 8005088:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800508c:	f001 fd9c 	bl	8006bc8 <HAL_Delay>

	sample_count = 64;
 8005090:	2340      	movs	r3, #64	; 0x40
 8005092:	867b      	strh	r3, [r7, #50]	; 0x32
	for(i = 0; i < sample_count; i++)
 8005094:	2300      	movs	r3, #0
 8005096:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005098:	e06a      	b.n	8005170 <AK8963_calibrate+0x17c>
	{
		MPU9250_readMagData(inst);				// Read the mag data
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fe fed6 	bl	8003e4c <MPU9250_readMagData>
		mag_temp[0] = (int16_t)inst->mx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80050a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050aa:	ee17 3a90 	vmov	r3, s15
 80050ae:	b21b      	sxth	r3, r3
 80050b0:	82bb      	strh	r3, [r7, #20]
		mag_temp[1] = (int16_t)inst->my;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80050b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050bc:	ee17 3a90 	vmov	r3, s15
 80050c0:	b21b      	sxth	r3, r3
 80050c2:	82fb      	strh	r3, [r7, #22]
		mag_temp[2] = (int16_t)inst->mz;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80050ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ce:	ee17 3a90 	vmov	r3, s15
 80050d2:	b21b      	sxth	r3, r3
 80050d4:	833b      	strh	r3, [r7, #24]
		for (j = 0; j < 3; j++)
 80050d6:	2300      	movs	r3, #0
 80050d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050da:	e040      	b.n	800515e <AK8963_calibrate+0x16a>
		{
			if(mag_temp[j] > mag_max[j]) mag_max[j] = mag_temp[j];
 80050dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80050e4:	4413      	add	r3, r2
 80050e6:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 80050ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80050f2:	440b      	add	r3, r1
 80050f4:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	dd0e      	ble.n	800511a <AK8963_calibrate+0x126>
 80050fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005106:	440b      	add	r3, r1
 8005108:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800510c:	0053      	lsls	r3, r2, #1
 800510e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005112:	4413      	add	r3, r2
 8005114:	460a      	mov	r2, r1
 8005116:	f823 2c14 	strh.w	r2, [r3, #-20]
			if(mag_temp[j] < mag_min[j]) mag_min[j] = mag_temp[j];
 800511a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005122:	4413      	add	r3, r2
 8005124:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 8005128:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005130:	440b      	add	r3, r1
 8005132:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8005136:	429a      	cmp	r2, r3
 8005138:	da0e      	bge.n	8005158 <AK8963_calibrate+0x164>
 800513a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800513c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005144:	440b      	add	r3, r1
 8005146:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800514a:	0053      	lsls	r3, r2, #1
 800514c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005150:	4413      	add	r3, r2
 8005152:	460a      	mov	r2, r1
 8005154:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (j = 0; j < 3; j++)
 8005158:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800515a:	3301      	adds	r3, #1
 800515c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800515e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005160:	2b02      	cmp	r3, #2
 8005162:	d9bb      	bls.n	80050dc <AK8963_calibrate+0xe8>
		}
		delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms [!!!] <- this to change also
 8005164:	2087      	movs	r0, #135	; 0x87
 8005166:	f001 fd2f 	bl	8006bc8 <HAL_Delay>
	for(i = 0; i < sample_count; i++)
 800516a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800516c:	3301      	adds	r3, #1
 800516e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005170:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005172:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005174:	429a      	cmp	r2, r3
 8005176:	d390      	bcc.n	800509a <AK8963_calibrate+0xa6>
	}

	inst->mRes = temp_mRes;						// Retrieve stored calibation values
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800517c:	649a      	str	r2, [r3, #72]	; 0x48

	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 800517e:	2300      	movs	r3, #0
 8005180:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005182:	e03c      	b.n	80051fe <AK8963_calibrate+0x20a>
	{											// save mag biases in G for main program
		inst->magCalibration[i] = temp_magCalibration[i]; // Retrieve stored calibration values
 8005184:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005186:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005188:	0092      	lsls	r2, r2, #2
 800518a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800518e:	440a      	add	r2, r1
 8005190:	3a30      	subs	r2, #48	; 0x30
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	331c      	adds	r3, #28
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	601a      	str	r2, [r3, #0]
		inst->magBias[i] = (float)((mag_max[i] + mag_min[i])/2) * inst->mRes * inst->magCalibration[i];
 800519e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80051a6:	4413      	add	r3, r2
 80051a8:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80051ac:	461a      	mov	r2, r3
 80051ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80051b6:	440b      	add	r3, r1
 80051b8:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80051bc:	4413      	add	r3, r2
 80051be:	0fda      	lsrs	r2, r3, #31
 80051c0:	4413      	add	r3, r2
 80051c2:	105b      	asrs	r3, r3, #1
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80051d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	331c      	adds	r3, #28
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	edd3 7a00 	vldr	s15, [r3]
 80051e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	3312      	adds	r3, #18
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	3304      	adds	r3, #4
 80051f4:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 80051f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051fa:	3301      	adds	r3, #1
 80051fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80051fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005200:	2b02      	cmp	r3, #2
 8005202:	d9bf      	bls.n	8005184 <AK8963_calibrate+0x190>
	}
}
 8005204:	bf00      	nop
 8005206:	3738      	adds	r7, #56	; 0x38
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	0801dea8 	.word	0x0801dea8
 8005210:	0801deb0 	.word	0x0801deb0
 8005214:	00000000 	.word	0x00000000

08005218 <MPU9250_updateEuler>:

// #################### Algotithms ####################


void MPU9250_updateEuler(MPU9250* inst)		// Convert quaternions to Euler angles
{
 8005218:	b5b0      	push	{r4, r5, r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800522c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800523c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005244:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005248:	ee17 0a90 	vmov	r0, s15
 800524c:	f7fb f98c 	bl	8000568 <__aeabi_f2d>
 8005250:	4604      	mov	r4, r0
 8005252:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] + inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] - inst->q[3] * inst->q[3]);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005260:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005288:	ee37 7a67 	vsub.f32	s14, s14, s15
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800529c:	ee77 7a67 	vsub.f32	s15, s14, s15
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 80052a0:	ee17 0a90 	vmov	r0, s15
 80052a4:	f7fb f960 	bl	8000568 <__aeabi_f2d>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	ec43 2b11 	vmov	d1, r2, r3
 80052b0:	ec45 4b10 	vmov	d0, r4, r5
 80052b4:	f015 fe9c 	bl	801aff0 <atan2>
 80052b8:	ec54 3b10 	vmov	r3, r4, d0
 80052bc:	4618      	mov	r0, r3
 80052be:	4621      	mov	r1, r4
 80052c0:	f7fb fca2 	bl	8000c08 <__aeabi_d2f>
 80052c4:	4602      	mov	r2, r0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]
	inst->pitch = -asin(2.0f * (inst->q[1] * inst->q[3] - inst->q[0] * inst->q[2]));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80052d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80052e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052f2:	ee17 0a90 	vmov	r0, s15
 80052f6:	f7fb f937 	bl	8000568 <__aeabi_f2d>
 80052fa:	4603      	mov	r3, r0
 80052fc:	460c      	mov	r4, r1
 80052fe:	ec44 3b10 	vmov	d0, r3, r4
 8005302:	f015 fe1d 	bl	801af40 <asin>
 8005306:	ec54 3b10 	vmov	r3, r4, d0
 800530a:	4618      	mov	r0, r3
 800530c:	4621      	mov	r1, r4
 800530e:	f7fb fc7b 	bl	8000c08 <__aeabi_d2f>
 8005312:	4603      	mov	r3, r0
 8005314:	ee07 3a90 	vmov	s15, r3
 8005318:	eef1 7a67 	vneg.f32	s15, s15
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800532e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800533e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005346:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800534a:	ee17 0a90 	vmov	r0, s15
 800534e:	f7fb f90b 	bl	8000568 <__aeabi_f2d>
 8005352:	4604      	mov	r4, r0
 8005354:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] - inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] + inst->q[3] * inst->q[3]);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005376:	ee37 7a67 	vsub.f32	s14, s14, s15
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800538a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800539a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800539e:	ee77 7a27 	vadd.f32	s15, s14, s15
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 80053a2:	ee17 0a90 	vmov	r0, s15
 80053a6:	f7fb f8df 	bl	8000568 <__aeabi_f2d>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	ec43 2b11 	vmov	d1, r2, r3
 80053b2:	ec45 4b10 	vmov	d0, r4, r5
 80053b6:	f015 fe1b 	bl	801aff0 <atan2>
 80053ba:	ec54 3b10 	vmov	r3, r4, d0
 80053be:	4618      	mov	r0, r3
 80053c0:	4621      	mov	r1, r4
 80053c2:	f7fb fc21 	bl	8000c08 <__aeabi_d2f>
 80053c6:	4602      	mov	r2, r0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	615a      	str	r2, [r3, #20]
	inst->yaw	*= -180.0f / M_PI;			// Convert to degrees
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fb f8c9 	bl	8000568 <__aeabi_f2d>
 80053d6:	a349      	add	r3, pc, #292	; (adr r3, 80054fc <MPU9250_updateEuler+0x2e4>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f7fb f91c 	bl	8000618 <__aeabi_dmul>
 80053e0:	4603      	mov	r3, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	4618      	mov	r0, r3
 80053e6:	4621      	mov	r1, r4
 80053e8:	f7fb fc0e 	bl	8000c08 <__aeabi_d2f>
 80053ec:	4602      	mov	r2, r0
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60da      	str	r2, [r3, #12]
	inst->pitch *= 180.0f / M_PI;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fb f8b6 	bl	8000568 <__aeabi_f2d>
 80053fc:	a341      	add	r3, pc, #260	; (adr r3, 8005504 <MPU9250_updateEuler+0x2ec>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	f7fb f909 	bl	8000618 <__aeabi_dmul>
 8005406:	4603      	mov	r3, r0
 8005408:	460c      	mov	r4, r1
 800540a:	4618      	mov	r0, r3
 800540c:	4621      	mov	r1, r4
 800540e:	f7fb fbfb 	bl	8000c08 <__aeabi_d2f>
 8005412:	4602      	mov	r2, r0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	611a      	str	r2, [r3, #16]
	inst->roll  *= 180.0f / M_PI;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	4618      	mov	r0, r3
 800541e:	f7fb f8a3 	bl	8000568 <__aeabi_f2d>
 8005422:	a338      	add	r3, pc, #224	; (adr r3, 8005504 <MPU9250_updateEuler+0x2ec>)
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	f7fb f8f6 	bl	8000618 <__aeabi_dmul>
 800542c:	4603      	mov	r3, r0
 800542e:	460c      	mov	r4, r1
 8005430:	4618      	mov	r0, r3
 8005432:	4621      	mov	r1, r4
 8005434:	f7fb fbe8 	bl	8000c08 <__aeabi_d2f>
 8005438:	4602      	mov	r2, r0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	615a      	str	r2, [r3, #20]
	inst->yaw 	+= inst->eulerOffsets[0];	// Add offsets
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	ed93 7a03 	vldr	s14, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800544a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	edc3 7a03 	vstr	s15, [r3, #12]
	inst->pitch	+= inst->eulerOffsets[1];
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	ed93 7a04 	vldr	s14, [r3, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8005460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll 	+= inst->eulerOffsets[2];
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	ed93 7a05 	vldr	s14, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	edc3 7a05 	vstr	s15, [r3, #20]
	if(inst->yaw < 0)	inst->yaw	+= 360.0f;	// Fix overflow
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	edd3 7a03 	vldr	s15, [r3, #12]
 8005486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548e:	d509      	bpl.n	80054a4 <MPU9250_updateEuler+0x28c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	edd3 7a03 	vldr	s15, [r3, #12]
 8005496:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80054f8 <MPU9250_updateEuler+0x2e0>
 800549a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	edc3 7a03 	vstr	s15, [r3, #12]
	if(inst->pitch < 0)	inst->pitch	+= 360.0f;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80054aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b2:	d509      	bpl.n	80054c8 <MPU9250_updateEuler+0x2b0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80054ba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80054f8 <MPU9250_updateEuler+0x2e0>
 80054be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	edc3 7a04 	vstr	s15, [r3, #16]
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80054ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d6:	d400      	bmi.n	80054da <MPU9250_updateEuler+0x2c2>
	roll  *= 180.0f / PI;
	lin_ax = ax + a31;
	lin_ay = ay + a32;
	lin_az = az - a33;
	*/
}
 80054d8:	e009      	b.n	80054ee <MPU9250_updateEuler+0x2d6>
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80054e0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80054f8 <MPU9250_updateEuler+0x2e0>
 80054e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bdb0      	pop	{r4, r5, r7, pc}
 80054f6:	bf00      	nop
 80054f8:	43b40000 	.word	0x43b40000
 80054fc:	1a63c1f8 	.word	0x1a63c1f8
 8005500:	c04ca5dc 	.word	0xc04ca5dc
 8005504:	1a63c1f8 	.word	0x1a63c1f8
 8005508:	404ca5dc 	.word	0x404ca5dc
 800550c:	00000000 	.word	0x00000000

08005510 <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(MPU9250* inst)
{
 8005510:	b5b0      	push	{r4, r5, r7, lr}
 8005512:	b0b2      	sub	sp, #200	; 0xc8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
	// Transform matrix for proper axis
	float ax = inst->ax, 			 ay = -(inst->ay), 				az = -(inst->az);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	edd3 7a08 	vldr	s15, [r3, #32]
 8005526:	eef1 7a67 	vneg.f32	s15, s15
 800552a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005534:	eef1 7a67 	vneg.f32	s15, s15
 8005538:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	float gx = inst->gx*M_PI/180.0f, gy = -(inst->gy)*M_PI/180.0f, 	gz = -(inst->gz)*M_PI/180.0f;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005540:	4618      	mov	r0, r3
 8005542:	f7fb f811 	bl	8000568 <__aeabi_f2d>
 8005546:	a3b0      	add	r3, pc, #704	; (adr r3, 8005808 <MadgwickQuaternionUpdate+0x2f8>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f7fb f864 	bl	8000618 <__aeabi_dmul>
 8005550:	4603      	mov	r3, r0
 8005552:	460c      	mov	r4, r1
 8005554:	4618      	mov	r0, r3
 8005556:	4621      	mov	r1, r4
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	4bac      	ldr	r3, [pc, #688]	; (8005810 <MadgwickQuaternionUpdate+0x300>)
 800555e:	f7fb f985 	bl	800086c <__aeabi_ddiv>
 8005562:	4603      	mov	r3, r0
 8005564:	460c      	mov	r4, r1
 8005566:	4618      	mov	r0, r3
 8005568:	4621      	mov	r1, r4
 800556a:	f7fb fb4d 	bl	8000c08 <__aeabi_d2f>
 800556e:	4603      	mov	r3, r0
 8005570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800557a:	eef1 7a67 	vneg.f32	s15, s15
 800557e:	ee17 3a90 	vmov	r3, s15
 8005582:	4618      	mov	r0, r3
 8005584:	f7fa fff0 	bl	8000568 <__aeabi_f2d>
 8005588:	a39f      	add	r3, pc, #636	; (adr r3, 8005808 <MadgwickQuaternionUpdate+0x2f8>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fb f843 	bl	8000618 <__aeabi_dmul>
 8005592:	4603      	mov	r3, r0
 8005594:	460c      	mov	r4, r1
 8005596:	4618      	mov	r0, r3
 8005598:	4621      	mov	r1, r4
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	4b9c      	ldr	r3, [pc, #624]	; (8005810 <MadgwickQuaternionUpdate+0x300>)
 80055a0:	f7fb f964 	bl	800086c <__aeabi_ddiv>
 80055a4:	4603      	mov	r3, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	4618      	mov	r0, r3
 80055aa:	4621      	mov	r1, r4
 80055ac:	f7fb fb2c 	bl	8000c08 <__aeabi_d2f>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80055bc:	eef1 7a67 	vneg.f32	s15, s15
 80055c0:	ee17 3a90 	vmov	r3, s15
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fa ffcf 	bl	8000568 <__aeabi_f2d>
 80055ca:	a38f      	add	r3, pc, #572	; (adr r3, 8005808 <MadgwickQuaternionUpdate+0x2f8>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fb f822 	bl	8000618 <__aeabi_dmul>
 80055d4:	4603      	mov	r3, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	4618      	mov	r0, r3
 80055da:	4621      	mov	r1, r4
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	4b8b      	ldr	r3, [pc, #556]	; (8005810 <MadgwickQuaternionUpdate+0x300>)
 80055e2:	f7fb f943 	bl	800086c <__aeabi_ddiv>
 80055e6:	4603      	mov	r3, r0
 80055e8:	460c      	mov	r4, r1
 80055ea:	4618      	mov	r0, r3
 80055ec:	4621      	mov	r1, r4
 80055ee:	f7fb fb0b 	bl	8000c08 <__aeabi_d2f>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float mx = inst->my, 			 my = -(inst->mx),				mz = inst->mz;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005606:	eef1 7a67 	vneg.f32	s15, s15
 800560a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	float q1 = inst->q[0], q2 = inst->q[1], q3 = inst->q[2], q4 = inst->q[3];   // short name local variable for readability
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800563a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 800563e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005642:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005646:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float _2q2 = 2.0f * q2;
 800564a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800564e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005652:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float _2q3 = 2.0f * q3;
 8005656:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800565a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800565e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float _2q4 = 2.0f * q4;
 8005662:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005666:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800566a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float _2q1q3 = 2.0f * q1 * q3;
 800566e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005672:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005676:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float _2q3q4 = 2.0f * q3 * q4;
 8005682:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005686:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800568a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005692:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q1q1 = q1 * q1;
 8005696:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800569a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800569e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	float q1q2 = q1 * q2;
 80056a6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80056aa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80056ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q1q3 = q1 * q3;
 80056b6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80056ba:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q1q4 = q1 * q4;
 80056c6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80056ca:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q2q2 = q2 * q2;
 80056d6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80056da:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80056de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q2q3 = q2 * q3;
 80056e6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80056ea:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q2q4 = q2 * q4;
 80056f6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80056fa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q3q3 = q3 * q3;
 8005706:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800570a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800570e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005712:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q3q4 = q3 * q4;
 8005716:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800571a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q4q4 = q4 * q4;
 8005726:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800572a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800572e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005732:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8005736:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800573a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800573e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005742:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8005746:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800574a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800574e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005752:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8005756:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800575a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800575e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005762:	eeb0 0a67 	vmov.f32	s0, s15
 8005766:	f015 fe19 	bl	801b39c <sqrtf>
 800576a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 800576e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005772:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577a:	f000 8614 	beq.w	80063a6 <MadgwickQuaternionUpdate+0xe96>
	norm = 1.0f/norm;
 800577e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005782:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	ax *= norm;
 800578e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005792:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	ay *= norm;
 800579e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80057a2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	az *= norm;
 80057ae:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80057b2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 80057be:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80057c2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80057c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057ca:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 80057ce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80057d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057da:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80057de:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80057e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ea:	eeb0 0a67 	vmov.f32	s0, s15
 80057ee:	f015 fdd5 	bl	801b39c <sqrtf>
 80057f2:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 80057f6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005802:	f000 85d2 	beq.w	80063aa <MadgwickQuaternionUpdate+0xe9a>
 8005806:	e005      	b.n	8005814 <MadgwickQuaternionUpdate+0x304>
 8005808:	54442d18 	.word	0x54442d18
 800580c:	400921fb 	.word	0x400921fb
 8005810:	40668000 	.word	0x40668000
	norm = 1.0f/norm;
 8005814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005818:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800581c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005820:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	mx *= norm;
 8005824:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005828:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800582c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005830:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	my *= norm;
 8005834:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005838:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800583c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005840:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	mz *= norm;
 8005844:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005848:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800584c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005850:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8005854:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005858:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800585c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005864:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2q1my = 2.0f * q1 * my;
 8005868:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800586c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005870:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005878:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	_2q1mz = 2.0f * q1 * mz;
 800587c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005880:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005884:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_2q2mx = 2.0f * q2 * mx;
 8005890:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005894:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005898:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800589c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 80058a4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80058a8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80058ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058b0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80058b4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80058b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058c0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80058c4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80058c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058d0:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80058d4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80058d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058e0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80058e4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80058e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058ec:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80058f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058f8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80058fc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005900:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005904:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800590c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005910:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8005914:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800591c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005920:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8005924:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800592c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005930:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8005934:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005938:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800593c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005940:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005944:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800594c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005950:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005954:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800595c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005960:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005964:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800596c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005970:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005974:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800597c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005980:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005984:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800598c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005990:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005994:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005998:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800599c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80059a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059a8:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 80059ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80059b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059b8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	_2bx = sqrtf(hx * hx + hy * hy);
 80059bc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80059c0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80059c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059c8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80059cc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80059d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059d8:	eeb0 0a67 	vmov.f32	s0, s15
 80059dc:	f015 fcde 	bl	801b39c <sqrtf>
 80059e0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80059e4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80059e8:	eeb1 7a67 	vneg.f32	s14, s15
 80059ec:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80059f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059f4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80059f8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80059fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a04:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a08:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a14:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005a18:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a24:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a28:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a34:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005a38:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005a3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a40:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a4c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a50:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a5c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a60:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a6c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	_4bx = 2.0f * _2bx;
 8005a70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005a74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_4bz = 2.0f * _2bz;
 8005a7c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005a80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a84:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005a88:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005a8c:	eeb1 7a67 	vneg.f32	s14, s15
 8005a90:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a94:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005a98:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005a9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005aa0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005aa4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ab0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ab4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005ab8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005abc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005ac0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ac4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ad0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005ad4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005ad8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005adc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005ae0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005ae4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005ae8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005aec:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005af0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005af4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005af8:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005afc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005b00:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005b04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b08:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b0c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b10:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005b14:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b20:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b24:	eef1 6a67 	vneg.f32	s13, s15
 8005b28:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005b2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b30:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005b34:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005b38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005b3c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b40:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005b44:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005b48:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005b54:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005b58:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005b5c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005b60:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b64:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b68:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b6c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b7c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005b80:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005b84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b88:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005b8c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005b90:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b94:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b98:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005b9c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005ba0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005ba4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ba8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005bac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005bb0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005bb4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005bb8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005bbc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005bc0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bcc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005bd0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005bd4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005bd8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005bdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005be0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005be4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005be8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bf0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005bf4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005bf8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005bfc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c00:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005c04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005c08:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c14:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005c18:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005c1c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005c20:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005c24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005c2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c30:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005c34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c38:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c3c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005c40:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c4c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005c50:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005c54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c58:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005c5c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005c60:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005c68:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c70:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c74:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005c78:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005c7c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005c80:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005c84:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005c88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c8c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005c90:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c9c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005ca0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005ca4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ca8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005cac:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005cb0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cb4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005cb8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005cbc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005cc0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005cc4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005cc8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005ccc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005cd0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005cd4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005cd8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005cdc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ce0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ce4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005ce8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cf4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005cf8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005cfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d00:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8005d04:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005d08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d10:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005d14:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d18:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005d20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d24:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005d28:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005d2c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005d30:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005d34:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005d38:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005d3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005d40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d44:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005d48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d54:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005d58:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005d5c:	eeb1 7a67 	vneg.f32	s14, s15
 8005d60:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d68:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d70:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005d74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d7c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005d80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d84:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005d88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d8c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005d90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d94:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005da0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005da4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005da8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005dac:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005db0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005db4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005db8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005dbc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005dc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005dc4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005dc8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005dcc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dd8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005ddc:	eef1 6a67 	vneg.f32	s13, s15
 8005de0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005de4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005de8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005dec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005df0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005df4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005df8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005dfc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e00:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005e04:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005e08:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005e0c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e10:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005e14:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005e18:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005e1c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005e20:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e24:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005e28:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e2c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005e30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e3c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005e40:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005e44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e48:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005e4c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005e50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005e58:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005e5c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005e60:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005e64:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e68:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005e6c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005e70:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005e74:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005e78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e7c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005e80:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e84:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005e88:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e94:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005e98:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005e9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ea0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8005ea4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005ea8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005eac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005eb0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005eb4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005eb8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ebc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ec0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005ec4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005ec8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005ecc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ed0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005ed4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ed8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005edc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ee0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ee4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005ee8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef4:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005ef8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005efc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005f00:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005f04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f08:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005f0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f10:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f18:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005f1c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005f20:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005f24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f28:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005f2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f30:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005f40:	eef1 6a67 	vneg.f32	s13, s15
 8005f44:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f4c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005f50:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005f54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f58:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f5c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005f60:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005f64:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f68:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005f6c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f74:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005f78:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005f7c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005f80:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005f84:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f88:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005f8c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005f90:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f94:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fa0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005fa4:	eef1 6a67 	vneg.f32	s13, s15
 8005fa8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005fac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fb0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005fb4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005fb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005fbc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005fc0:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005fc4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005fc8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005fcc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005fd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005fd4:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005fd8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005fdc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005fe0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005fe4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005fe8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005fec:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005ff0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ffc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8006000:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006004:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006008:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800600c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006010:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006014:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006018:	ee26 6a27 	vmul.f32	s12, s12, s15
 800601c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8006020:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8006024:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006028:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800602c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006030:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006034:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006038:	ee36 6a27 	vadd.f32	s12, s12, s15
 800603c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006040:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800604c:	edc7 7a06 	vstr	s15, [r7, #24]
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8006050:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006054:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800605c:	edd7 6a08 	vldr	s13, [r7, #32]
 8006060:	edd7 7a08 	vldr	s15, [r7, #32]
 8006064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800606c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006070:	edd7 7a07 	vldr	s15, [r7, #28]
 8006074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800607c:	edd7 6a06 	vldr	s13, [r7, #24]
 8006080:	edd7 7a06 	vldr	s15, [r7, #24]
 8006084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800608c:	eeb0 0a67 	vmov.f32	s0, s15
 8006090:	f015 f984 	bl	801b39c <sqrtf>
 8006094:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 8006098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800609c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80060a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	s1 *= norm;
 80060a8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80060ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80060b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 *= norm;
 80060b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80060bc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80060c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c4:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 *= norm;
 80060c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80060cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80060d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d4:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 *= norm;
 80060d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80060dc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80060e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e4:	edc7 7a06 	vstr	s15, [r7, #24]

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - MPU9250_ALG_BETA * s1;
 80060e8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80060ec:	eeb1 7a67 	vneg.f32	s14, s15
 80060f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80060f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060f8:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80060fc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006104:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006108:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800610c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006118:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800611c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006120:	ee17 0a90 	vmov	r0, s15
 8006124:	f7fa fa20 	bl	8000568 <__aeabi_f2d>
 8006128:	4604      	mov	r4, r0
 800612a:	460d      	mov	r5, r1
 800612c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800612e:	f7fa fa1b 	bl	8000568 <__aeabi_f2d>
 8006132:	a3a1      	add	r3, pc, #644	; (adr r3, 80063b8 <MadgwickQuaternionUpdate+0xea8>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa fa6e 	bl	8000618 <__aeabi_dmul>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4620      	mov	r0, r4
 8006142:	4629      	mov	r1, r5
 8006144:	f7fa f8b0 	bl	80002a8 <__aeabi_dsub>
 8006148:	4603      	mov	r3, r0
 800614a:	460c      	mov	r4, r1
 800614c:	4618      	mov	r0, r3
 800614e:	4621      	mov	r1, r4
 8006150:	f7fa fd5a 	bl	8000c08 <__aeabi_d2f>
 8006154:	4603      	mov	r3, r0
 8006156:	617b      	str	r3, [r7, #20]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - MPU9250_ALG_BETA * s2;
 8006158:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800615c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006164:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006168:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800616c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006174:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006178:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800617c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006184:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800618c:	ee17 0a90 	vmov	r0, s15
 8006190:	f7fa f9ea 	bl	8000568 <__aeabi_f2d>
 8006194:	4604      	mov	r4, r0
 8006196:	460d      	mov	r5, r1
 8006198:	6a38      	ldr	r0, [r7, #32]
 800619a:	f7fa f9e5 	bl	8000568 <__aeabi_f2d>
 800619e:	a386      	add	r3, pc, #536	; (adr r3, 80063b8 <MadgwickQuaternionUpdate+0xea8>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7fa fa38 	bl	8000618 <__aeabi_dmul>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4620      	mov	r0, r4
 80061ae:	4629      	mov	r1, r5
 80061b0:	f7fa f87a 	bl	80002a8 <__aeabi_dsub>
 80061b4:	4603      	mov	r3, r0
 80061b6:	460c      	mov	r4, r1
 80061b8:	4618      	mov	r0, r3
 80061ba:	4621      	mov	r1, r4
 80061bc:	f7fa fd24 	bl	8000c08 <__aeabi_d2f>
 80061c0:	4603      	mov	r3, r0
 80061c2:	613b      	str	r3, [r7, #16]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - MPU9250_ALG_BETA * s3;
 80061c4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80061c8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80061cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061d0:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 80061d4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80061d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061e0:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80061e4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80061e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061f8:	ee17 0a90 	vmov	r0, s15
 80061fc:	f7fa f9b4 	bl	8000568 <__aeabi_f2d>
 8006200:	4604      	mov	r4, r0
 8006202:	460d      	mov	r5, r1
 8006204:	69f8      	ldr	r0, [r7, #28]
 8006206:	f7fa f9af 	bl	8000568 <__aeabi_f2d>
 800620a:	a36b      	add	r3, pc, #428	; (adr r3, 80063b8 <MadgwickQuaternionUpdate+0xea8>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7fa fa02 	bl	8000618 <__aeabi_dmul>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4620      	mov	r0, r4
 800621a:	4629      	mov	r1, r5
 800621c:	f7fa f844 	bl	80002a8 <__aeabi_dsub>
 8006220:	4603      	mov	r3, r0
 8006222:	460c      	mov	r4, r1
 8006224:	4618      	mov	r0, r3
 8006226:	4621      	mov	r1, r4
 8006228:	f7fa fcee 	bl	8000c08 <__aeabi_d2f>
 800622c:	4603      	mov	r3, r0
 800622e:	60fb      	str	r3, [r7, #12]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - MPU9250_ALG_BETA * s4;
 8006230:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006234:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800623c:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8006240:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006248:	ee37 7a27 	vadd.f32	s14, s14, s15
 800624c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006250:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800625c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006264:	ee17 0a90 	vmov	r0, s15
 8006268:	f7fa f97e 	bl	8000568 <__aeabi_f2d>
 800626c:	4604      	mov	r4, r0
 800626e:	460d      	mov	r5, r1
 8006270:	69b8      	ldr	r0, [r7, #24]
 8006272:	f7fa f979 	bl	8000568 <__aeabi_f2d>
 8006276:	a350      	add	r3, pc, #320	; (adr r3, 80063b8 <MadgwickQuaternionUpdate+0xea8>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7fa f9cc 	bl	8000618 <__aeabi_dmul>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4620      	mov	r0, r4
 8006286:	4629      	mov	r1, r5
 8006288:	f7fa f80e 	bl	80002a8 <__aeabi_dsub>
 800628c:	4603      	mov	r3, r0
 800628e:	460c      	mov	r4, r1
 8006290:	4618      	mov	r0, r3
 8006292:	4621      	mov	r1, r4
 8006294:	f7fa fcb8 	bl	8000c08 <__aeabi_d2f>
 8006298:	4603      	mov	r3, r0
 800629a:	60bb      	str	r3, [r7, #8]

	// Integrate to yield quaternion
	q1 += qDot1 * inst->alg_deltat;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80062a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80062a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062aa:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80062ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	q2 += qDot2 * inst->alg_deltat;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80062bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80062c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c4:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80062c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062cc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	q3 += qDot3 * inst->alg_deltat;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80062d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80062da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062de:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80062e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062e6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	q4 += qDot4 * inst->alg_deltat;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80062f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80062f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80062fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006300:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8006304:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006308:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800630c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006310:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8006314:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800631c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006320:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006324:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800632c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006330:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006334:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8006338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800633c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006340:	eeb0 0a67 	vmov.f32	s0, s15
 8006344:	f015 f82a 	bl	801b39c <sqrtf>
 8006348:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 800634c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006350:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006358:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	inst->q[0] = q1 * norm;
 800635c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006360:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	inst->q[1] = q2 * norm;
 800636e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8006372:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	inst->q[2] = q3 * norm;
 8006380:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006384:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	inst->q[3] = q4 * norm;
 8006392:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8006396:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800639a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
 80063a4:	e002      	b.n	80063ac <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 80063aa:	bf00      	nop
}
 80063ac:	37c8      	adds	r7, #200	; 0xc8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bdb0      	pop	{r4, r5, r7, pc}
 80063b2:	bf00      	nop
 80063b4:	f3af 8000 	nop.w
 80063b8:	89f0ed0f 	.word	0x89f0ed0f
 80063bc:	3fed0552 	.word	0x3fed0552

080063c0 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	4a04      	ldr	r2, [pc, #16]	; (80063dc <millis+0x1c>)
 80063cc:	fba2 2303 	umull	r2, r3, r2, r3
 80063d0:	099b      	lsrs	r3, r3, #6
 80063d2:	4618      	mov	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	10624dd3 	.word	0x10624dd3

080063e0 <getTime>:
	
	return true;
}

static inline DateTime getTime(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08c      	sub	sp, #48	; 0x30
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 80063e8:	f107 031c 	add.w	r3, r7, #28
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	605a      	str	r2, [r3, #4]
 80063f2:	609a      	str	r2, [r3, #8]
 80063f4:	60da      	str	r2, [r3, #12]
 80063f6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 80063f8:	2300      	movs	r3, #0
 80063fa:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 80063fc:	f107 030c 	add.w	r3, r7, #12
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8006408:	f00f fbe2 	bl	8015bd0 <Get_RTC_Instance>
 800640c:	f107 031c 	add.w	r3, r7, #28
 8006410:	2200      	movs	r2, #0
 8006412:	4619      	mov	r1, r3
 8006414:	f004 f911 	bl	800a63a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8006418:	f00f fbda 	bl	8015bd0 <Get_RTC_Instance>
 800641c:	f107 0318 	add.w	r3, r7, #24
 8006420:	2200      	movs	r2, #0
 8006422:	4619      	mov	r1, r3
 8006424:	f004 f967 	bl	800a6f6 <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8006428:	7efb      	ldrb	r3, [r7, #27]
 800642a:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 800642c:	7e7b      	ldrb	r3, [r7, #25]
 800642e:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 8006430:	7ebb      	ldrb	r3, [r7, #26]
 8006432:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8006434:	7e3b      	ldrb	r3, [r7, #24]
 8006436:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8006438:	7f3b      	ldrb	r3, [r7, #28]
 800643a:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 800643c:	7f7b      	ldrb	r3, [r7, #29]
 800643e:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8006440:	7fbb      	ldrb	r3, [r7, #30]
 8006442:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8006444:	f7ff ffbc 	bl	80063c0 <millis>
 8006448:	4602      	mov	r2, r0
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <getTime+0x9c>)
 800644c:	fba3 1302 	umull	r1, r3, r3, r2
 8006450:	099b      	lsrs	r3, r3, #6
 8006452:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	b29b      	uxth	r3, r3
 800645e:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	461a      	mov	r2, r3
 8006464:	f107 030c 	add.w	r3, r7, #12
 8006468:	cb03      	ldmia	r3!, {r0, r1}
 800646a:	6010      	str	r0, [r2, #0]
 800646c:	6051      	str	r1, [r2, #4]
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	8113      	strh	r3, [r2, #8]
}
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	3730      	adds	r7, #48	; 0x30
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	10624dd3 	.word	0x10624dd3

08006480 <log_new>:
#include "motors.h"
#include "sx1278.h"
#include "run.h"

void log_new()
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af02      	add	r7, sp, #8
	DateTime now = getTime();
 8006486:	1d3b      	adds	r3, r7, #4
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff ffa9 	bl	80063e0 <getTime>
	sprintf(directoryName, "/%02d%02d%02d%02d", now.hour, now.minute, now.dayM, now.month);
 800648e:	7a3b      	ldrb	r3, [r7, #8]
 8006490:	4619      	mov	r1, r3
 8006492:	7a7b      	ldrb	r3, [r7, #9]
 8006494:	4618      	mov	r0, r3
 8006496:	79bb      	ldrb	r3, [r7, #6]
 8006498:	797a      	ldrb	r2, [r7, #5]
 800649a:	9201      	str	r2, [sp, #4]
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	4603      	mov	r3, r0
 80064a0:	460a      	mov	r2, r1
 80064a2:	4957      	ldr	r1, [pc, #348]	; (8006600 <log_new+0x180>)
 80064a4:	4857      	ldr	r0, [pc, #348]	; (8006604 <log_new+0x184>)
 80064a6:	f011 fe13 	bl	80180d0 <siprintf>
	sprintf(directoryNameCopy, directoryName);
 80064aa:	4956      	ldr	r1, [pc, #344]	; (8006604 <log_new+0x184>)
 80064ac:	4856      	ldr	r0, [pc, #344]	; (8006608 <log_new+0x188>)
 80064ae:	f011 fe0f 	bl	80180d0 <siprintf>

	SD_init();
 80064b2:	f7fa feff 	bl	80012b4 <SD_init>
	SD_newDirectory((char*)directoryName);
 80064b6:	4853      	ldr	r0, [pc, #332]	; (8006604 <log_new+0x184>)
 80064b8:	f7fa ff98 	bl	80013ec <SD_newDirectory>
	SD_newFile(strcat(directoryName, "/LOG.TXT"));
 80064bc:	4851      	ldr	r0, [pc, #324]	; (8006604 <log_new+0x184>)
 80064be:	f7f9 fe91 	bl	80001e4 <strlen>
 80064c2:	4603      	mov	r3, r0
 80064c4:	461a      	mov	r2, r3
 80064c6:	4b4f      	ldr	r3, [pc, #316]	; (8006604 <log_new+0x184>)
 80064c8:	4413      	add	r3, r2
 80064ca:	4950      	ldr	r1, [pc, #320]	; (800660c <log_new+0x18c>)
 80064cc:	461a      	mov	r2, r3
 80064ce:	460b      	mov	r3, r1
 80064d0:	cb03      	ldmia	r3!, {r0, r1}
 80064d2:	6010      	str	r0, [r2, #0]
 80064d4:	6051      	str	r1, [r2, #4]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	7213      	strb	r3, [r2, #8]
 80064da:	4b4a      	ldr	r3, [pc, #296]	; (8006604 <log_new+0x184>)
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fa ff25 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 80064e2:	4949      	ldr	r1, [pc, #292]	; (8006608 <log_new+0x188>)
 80064e4:	4847      	ldr	r0, [pc, #284]	; (8006604 <log_new+0x184>)
 80064e6:	f011 fdf3 	bl	80180d0 <siprintf>
	SD_newFile(strcat(directoryName, "/BMP.TXT"));
 80064ea:	4846      	ldr	r0, [pc, #280]	; (8006604 <log_new+0x184>)
 80064ec:	f7f9 fe7a 	bl	80001e4 <strlen>
 80064f0:	4603      	mov	r3, r0
 80064f2:	461a      	mov	r2, r3
 80064f4:	4b43      	ldr	r3, [pc, #268]	; (8006604 <log_new+0x184>)
 80064f6:	4413      	add	r3, r2
 80064f8:	4945      	ldr	r1, [pc, #276]	; (8006610 <log_new+0x190>)
 80064fa:	461a      	mov	r2, r3
 80064fc:	460b      	mov	r3, r1
 80064fe:	cb03      	ldmia	r3!, {r0, r1}
 8006500:	6010      	str	r0, [r2, #0]
 8006502:	6051      	str	r1, [r2, #4]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	7213      	strb	r3, [r2, #8]
 8006508:	4b3e      	ldr	r3, [pc, #248]	; (8006604 <log_new+0x184>)
 800650a:	4618      	mov	r0, r3
 800650c:	f7fa ff0e 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8006510:	493d      	ldr	r1, [pc, #244]	; (8006608 <log_new+0x188>)
 8006512:	483c      	ldr	r0, [pc, #240]	; (8006604 <log_new+0x184>)
 8006514:	f011 fddc 	bl	80180d0 <siprintf>
	SD_newFile(strcat(directoryName, "/GPS.TXT"));
 8006518:	483a      	ldr	r0, [pc, #232]	; (8006604 <log_new+0x184>)
 800651a:	f7f9 fe63 	bl	80001e4 <strlen>
 800651e:	4603      	mov	r3, r0
 8006520:	461a      	mov	r2, r3
 8006522:	4b38      	ldr	r3, [pc, #224]	; (8006604 <log_new+0x184>)
 8006524:	4413      	add	r3, r2
 8006526:	493b      	ldr	r1, [pc, #236]	; (8006614 <log_new+0x194>)
 8006528:	461a      	mov	r2, r3
 800652a:	460b      	mov	r3, r1
 800652c:	cb03      	ldmia	r3!, {r0, r1}
 800652e:	6010      	str	r0, [r2, #0]
 8006530:	6051      	str	r1, [r2, #4]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	7213      	strb	r3, [r2, #8]
 8006536:	4b33      	ldr	r3, [pc, #204]	; (8006604 <log_new+0x184>)
 8006538:	4618      	mov	r0, r3
 800653a:	f7fa fef7 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 800653e:	4932      	ldr	r1, [pc, #200]	; (8006608 <log_new+0x188>)
 8006540:	4830      	ldr	r0, [pc, #192]	; (8006604 <log_new+0x184>)
 8006542:	f011 fdc5 	bl	80180d0 <siprintf>
	SD_newFile(strcat(directoryName, "/IMU.TXT"));
 8006546:	482f      	ldr	r0, [pc, #188]	; (8006604 <log_new+0x184>)
 8006548:	f7f9 fe4c 	bl	80001e4 <strlen>
 800654c:	4603      	mov	r3, r0
 800654e:	461a      	mov	r2, r3
 8006550:	4b2c      	ldr	r3, [pc, #176]	; (8006604 <log_new+0x184>)
 8006552:	4413      	add	r3, r2
 8006554:	4930      	ldr	r1, [pc, #192]	; (8006618 <log_new+0x198>)
 8006556:	461a      	mov	r2, r3
 8006558:	460b      	mov	r3, r1
 800655a:	cb03      	ldmia	r3!, {r0, r1}
 800655c:	6010      	str	r0, [r2, #0]
 800655e:	6051      	str	r1, [r2, #4]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	7213      	strb	r3, [r2, #8]
 8006564:	4b27      	ldr	r3, [pc, #156]	; (8006604 <log_new+0x184>)
 8006566:	4618      	mov	r0, r3
 8006568:	f7fa fee0 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 800656c:	4926      	ldr	r1, [pc, #152]	; (8006608 <log_new+0x188>)
 800656e:	4825      	ldr	r0, [pc, #148]	; (8006604 <log_new+0x184>)
 8006570:	f011 fdae 	bl	80180d0 <siprintf>
	SD_newFile(strcat(directoryName, "/MOT.TXT"));
 8006574:	4823      	ldr	r0, [pc, #140]	; (8006604 <log_new+0x184>)
 8006576:	f7f9 fe35 	bl	80001e4 <strlen>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	4b21      	ldr	r3, [pc, #132]	; (8006604 <log_new+0x184>)
 8006580:	4413      	add	r3, r2
 8006582:	4926      	ldr	r1, [pc, #152]	; (800661c <log_new+0x19c>)
 8006584:	461a      	mov	r2, r3
 8006586:	460b      	mov	r3, r1
 8006588:	cb03      	ldmia	r3!, {r0, r1}
 800658a:	6010      	str	r0, [r2, #0]
 800658c:	6051      	str	r1, [r2, #4]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	7213      	strb	r3, [r2, #8]
 8006592:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <log_new+0x184>)
 8006594:	4618      	mov	r0, r3
 8006596:	f7fa fec9 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 800659a:	491b      	ldr	r1, [pc, #108]	; (8006608 <log_new+0x188>)
 800659c:	4819      	ldr	r0, [pc, #100]	; (8006604 <log_new+0x184>)
 800659e:	f011 fd97 	bl	80180d0 <siprintf>
	SD_newFile(strcat(directoryName, "/RADIO.TXT"));
 80065a2:	4818      	ldr	r0, [pc, #96]	; (8006604 <log_new+0x184>)
 80065a4:	f7f9 fe1e 	bl	80001e4 <strlen>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	4b15      	ldr	r3, [pc, #84]	; (8006604 <log_new+0x184>)
 80065ae:	4413      	add	r3, r2
 80065b0:	491b      	ldr	r1, [pc, #108]	; (8006620 <log_new+0x1a0>)
 80065b2:	461a      	mov	r2, r3
 80065b4:	460b      	mov	r3, r1
 80065b6:	cb03      	ldmia	r3!, {r0, r1}
 80065b8:	6010      	str	r0, [r2, #0]
 80065ba:	6051      	str	r1, [r2, #4]
 80065bc:	8819      	ldrh	r1, [r3, #0]
 80065be:	789b      	ldrb	r3, [r3, #2]
 80065c0:	8111      	strh	r1, [r2, #8]
 80065c2:	7293      	strb	r3, [r2, #10]
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <log_new+0x184>)
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fa feb0 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 80065cc:	490e      	ldr	r1, [pc, #56]	; (8006608 <log_new+0x188>)
 80065ce:	480d      	ldr	r0, [pc, #52]	; (8006604 <log_new+0x184>)
 80065d0:	f011 fd7e 	bl	80180d0 <siprintf>

	logBufferIndex = 0;
 80065d4:	4b13      	ldr	r3, [pc, #76]	; (8006624 <log_new+0x1a4>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 80065da:	4b13      	ldr	r3, [pc, #76]	; (8006628 <log_new+0x1a8>)
 80065dc:	2200      	movs	r2, #0
 80065de:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 80065e0:	4b12      	ldr	r3, [pc, #72]	; (800662c <log_new+0x1ac>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 80065e6:	4b12      	ldr	r3, [pc, #72]	; (8006630 <log_new+0x1b0>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 80065ec:	4b11      	ldr	r3, [pc, #68]	; (8006634 <log_new+0x1b4>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 80065f2:	4b11      	ldr	r3, [pc, #68]	; (8006638 <log_new+0x1b8>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	801a      	strh	r2, [r3, #0]
}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	0801deb8 	.word	0x0801deb8
 8006604:	20006720 	.word	0x20006720
 8006608:	20004394 	.word	0x20004394
 800660c:	0801decc 	.word	0x0801decc
 8006610:	0801ded8 	.word	0x0801ded8
 8006614:	0801dee4 	.word	0x0801dee4
 8006618:	0801def0 	.word	0x0801def0
 800661c:	0801defc 	.word	0x0801defc
 8006620:	0801df08 	.word	0x0801df08
 8006624:	200067fe 	.word	0x200067fe
 8006628:	200067fa 	.word	0x200067fa
 800662c:	20005318 	.word	0x20005318
 8006630:	20006814 	.word	0x20006814
 8006634:	20004f10 	.word	0x20004f10
 8006638:	20004ee8 	.word	0x20004ee8

0800663c <log_save>:

void log_save()
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
	//__disable_irq();


	if (logBufferIndex > 0)
 8006640:	4b7c      	ldr	r3, [pc, #496]	; (8006834 <log_save+0x1f8>)
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01b      	beq.n	8006680 <log_save+0x44>
	{
		sprintf(openedPath, strcat(directoryName, "/LOG.TXT"));
 8006648:	487b      	ldr	r0, [pc, #492]	; (8006838 <log_save+0x1fc>)
 800664a:	f7f9 fdcb 	bl	80001e4 <strlen>
 800664e:	4603      	mov	r3, r0
 8006650:	461a      	mov	r2, r3
 8006652:	4b79      	ldr	r3, [pc, #484]	; (8006838 <log_save+0x1fc>)
 8006654:	4413      	add	r3, r2
 8006656:	4979      	ldr	r1, [pc, #484]	; (800683c <log_save+0x200>)
 8006658:	461a      	mov	r2, r3
 800665a:	460b      	mov	r3, r1
 800665c:	cb03      	ldmia	r3!, {r0, r1}
 800665e:	6010      	str	r0, [r2, #0]
 8006660:	6051      	str	r1, [r2, #4]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	7213      	strb	r3, [r2, #8]
 8006666:	4b74      	ldr	r3, [pc, #464]	; (8006838 <log_save+0x1fc>)
 8006668:	4619      	mov	r1, r3
 800666a:	4875      	ldr	r0, [pc, #468]	; (8006840 <log_save+0x204>)
 800666c:	f011 fd30 	bl	80180d0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8006670:	4974      	ldr	r1, [pc, #464]	; (8006844 <log_save+0x208>)
 8006672:	4871      	ldr	r0, [pc, #452]	; (8006838 <log_save+0x1fc>)
 8006674:	f011 fd2c 	bl	80180d0 <siprintf>
		SD_writeToFile(openedPath, logBuffer);
 8006678:	4973      	ldr	r1, [pc, #460]	; (8006848 <log_save+0x20c>)
 800667a:	4871      	ldr	r0, [pc, #452]	; (8006840 <log_save+0x204>)
 800667c:	f7fa fe7e 	bl	800137c <SD_writeToFile>
	}

	if (bmpBufferIndex > 0)
 8006680:	4b72      	ldr	r3, [pc, #456]	; (800684c <log_save+0x210>)
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <log_save+0x84>
	{
		sprintf(openedPath, strcat(directoryName, "/BMP.TXT"));
 8006688:	486b      	ldr	r0, [pc, #428]	; (8006838 <log_save+0x1fc>)
 800668a:	f7f9 fdab 	bl	80001e4 <strlen>
 800668e:	4603      	mov	r3, r0
 8006690:	461a      	mov	r2, r3
 8006692:	4b69      	ldr	r3, [pc, #420]	; (8006838 <log_save+0x1fc>)
 8006694:	4413      	add	r3, r2
 8006696:	496e      	ldr	r1, [pc, #440]	; (8006850 <log_save+0x214>)
 8006698:	461a      	mov	r2, r3
 800669a:	460b      	mov	r3, r1
 800669c:	cb03      	ldmia	r3!, {r0, r1}
 800669e:	6010      	str	r0, [r2, #0]
 80066a0:	6051      	str	r1, [r2, #4]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	7213      	strb	r3, [r2, #8]
 80066a6:	4b64      	ldr	r3, [pc, #400]	; (8006838 <log_save+0x1fc>)
 80066a8:	4619      	mov	r1, r3
 80066aa:	4865      	ldr	r0, [pc, #404]	; (8006840 <log_save+0x204>)
 80066ac:	f011 fd10 	bl	80180d0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 80066b0:	4964      	ldr	r1, [pc, #400]	; (8006844 <log_save+0x208>)
 80066b2:	4861      	ldr	r0, [pc, #388]	; (8006838 <log_save+0x1fc>)
 80066b4:	f011 fd0c 	bl	80180d0 <siprintf>
		SD_writeToFile(openedPath, bmpBuffer);
 80066b8:	4966      	ldr	r1, [pc, #408]	; (8006854 <log_save+0x218>)
 80066ba:	4861      	ldr	r0, [pc, #388]	; (8006840 <log_save+0x204>)
 80066bc:	f7fa fe5e 	bl	800137c <SD_writeToFile>
	}

	if (gpsBufferIndex > 0)
 80066c0:	4b65      	ldr	r3, [pc, #404]	; (8006858 <log_save+0x21c>)
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01b      	beq.n	8006700 <log_save+0xc4>
	{
		sprintf(openedPath, strcat(directoryName, "/GPS.TXT"));
 80066c8:	485b      	ldr	r0, [pc, #364]	; (8006838 <log_save+0x1fc>)
 80066ca:	f7f9 fd8b 	bl	80001e4 <strlen>
 80066ce:	4603      	mov	r3, r0
 80066d0:	461a      	mov	r2, r3
 80066d2:	4b59      	ldr	r3, [pc, #356]	; (8006838 <log_save+0x1fc>)
 80066d4:	4413      	add	r3, r2
 80066d6:	4961      	ldr	r1, [pc, #388]	; (800685c <log_save+0x220>)
 80066d8:	461a      	mov	r2, r3
 80066da:	460b      	mov	r3, r1
 80066dc:	cb03      	ldmia	r3!, {r0, r1}
 80066de:	6010      	str	r0, [r2, #0]
 80066e0:	6051      	str	r1, [r2, #4]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	7213      	strb	r3, [r2, #8]
 80066e6:	4b54      	ldr	r3, [pc, #336]	; (8006838 <log_save+0x1fc>)
 80066e8:	4619      	mov	r1, r3
 80066ea:	4855      	ldr	r0, [pc, #340]	; (8006840 <log_save+0x204>)
 80066ec:	f011 fcf0 	bl	80180d0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 80066f0:	4954      	ldr	r1, [pc, #336]	; (8006844 <log_save+0x208>)
 80066f2:	4851      	ldr	r0, [pc, #324]	; (8006838 <log_save+0x1fc>)
 80066f4:	f011 fcec 	bl	80180d0 <siprintf>
		SD_writeToFile(openedPath, gpsBuffer);
 80066f8:	4959      	ldr	r1, [pc, #356]	; (8006860 <log_save+0x224>)
 80066fa:	4851      	ldr	r0, [pc, #324]	; (8006840 <log_save+0x204>)
 80066fc:	f7fa fe3e 	bl	800137c <SD_writeToFile>
	}

	if (imuBufferIndex > 0)
 8006700:	4b58      	ldr	r3, [pc, #352]	; (8006864 <log_save+0x228>)
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01b      	beq.n	8006740 <log_save+0x104>
	{
		sprintf(openedPath, strcat(directoryName, "/IMU.TXT"));
 8006708:	484b      	ldr	r0, [pc, #300]	; (8006838 <log_save+0x1fc>)
 800670a:	f7f9 fd6b 	bl	80001e4 <strlen>
 800670e:	4603      	mov	r3, r0
 8006710:	461a      	mov	r2, r3
 8006712:	4b49      	ldr	r3, [pc, #292]	; (8006838 <log_save+0x1fc>)
 8006714:	4413      	add	r3, r2
 8006716:	4954      	ldr	r1, [pc, #336]	; (8006868 <log_save+0x22c>)
 8006718:	461a      	mov	r2, r3
 800671a:	460b      	mov	r3, r1
 800671c:	cb03      	ldmia	r3!, {r0, r1}
 800671e:	6010      	str	r0, [r2, #0]
 8006720:	6051      	str	r1, [r2, #4]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	7213      	strb	r3, [r2, #8]
 8006726:	4b44      	ldr	r3, [pc, #272]	; (8006838 <log_save+0x1fc>)
 8006728:	4619      	mov	r1, r3
 800672a:	4845      	ldr	r0, [pc, #276]	; (8006840 <log_save+0x204>)
 800672c:	f011 fcd0 	bl	80180d0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8006730:	4944      	ldr	r1, [pc, #272]	; (8006844 <log_save+0x208>)
 8006732:	4841      	ldr	r0, [pc, #260]	; (8006838 <log_save+0x1fc>)
 8006734:	f011 fccc 	bl	80180d0 <siprintf>
		SD_writeToFile(openedPath, imuBuffer);
 8006738:	494c      	ldr	r1, [pc, #304]	; (800686c <log_save+0x230>)
 800673a:	4841      	ldr	r0, [pc, #260]	; (8006840 <log_save+0x204>)
 800673c:	f7fa fe1e 	bl	800137c <SD_writeToFile>
	}

	if (motBufferIndex > 0)
 8006740:	4b4b      	ldr	r3, [pc, #300]	; (8006870 <log_save+0x234>)
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01b      	beq.n	8006780 <log_save+0x144>
	{
		sprintf(openedPath, strcat(directoryName, "/MOT.TXT"));
 8006748:	483b      	ldr	r0, [pc, #236]	; (8006838 <log_save+0x1fc>)
 800674a:	f7f9 fd4b 	bl	80001e4 <strlen>
 800674e:	4603      	mov	r3, r0
 8006750:	461a      	mov	r2, r3
 8006752:	4b39      	ldr	r3, [pc, #228]	; (8006838 <log_save+0x1fc>)
 8006754:	4413      	add	r3, r2
 8006756:	4947      	ldr	r1, [pc, #284]	; (8006874 <log_save+0x238>)
 8006758:	461a      	mov	r2, r3
 800675a:	460b      	mov	r3, r1
 800675c:	cb03      	ldmia	r3!, {r0, r1}
 800675e:	6010      	str	r0, [r2, #0]
 8006760:	6051      	str	r1, [r2, #4]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	7213      	strb	r3, [r2, #8]
 8006766:	4b34      	ldr	r3, [pc, #208]	; (8006838 <log_save+0x1fc>)
 8006768:	4619      	mov	r1, r3
 800676a:	4835      	ldr	r0, [pc, #212]	; (8006840 <log_save+0x204>)
 800676c:	f011 fcb0 	bl	80180d0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8006770:	4934      	ldr	r1, [pc, #208]	; (8006844 <log_save+0x208>)
 8006772:	4831      	ldr	r0, [pc, #196]	; (8006838 <log_save+0x1fc>)
 8006774:	f011 fcac 	bl	80180d0 <siprintf>
		SD_writeToFile(openedPath, motBuffer);
 8006778:	493f      	ldr	r1, [pc, #252]	; (8006878 <log_save+0x23c>)
 800677a:	4831      	ldr	r0, [pc, #196]	; (8006840 <log_save+0x204>)
 800677c:	f7fa fdfe 	bl	800137c <SD_writeToFile>
	}

	if (radioBufferIndex > 0)
 8006780:	4b3e      	ldr	r3, [pc, #248]	; (800687c <log_save+0x240>)
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01d      	beq.n	80067c4 <log_save+0x188>
	{
		sprintf(openedPath, strcat(directoryName, "/RADIO.TXT"));
 8006788:	482b      	ldr	r0, [pc, #172]	; (8006838 <log_save+0x1fc>)
 800678a:	f7f9 fd2b 	bl	80001e4 <strlen>
 800678e:	4603      	mov	r3, r0
 8006790:	461a      	mov	r2, r3
 8006792:	4b29      	ldr	r3, [pc, #164]	; (8006838 <log_save+0x1fc>)
 8006794:	4413      	add	r3, r2
 8006796:	493a      	ldr	r1, [pc, #232]	; (8006880 <log_save+0x244>)
 8006798:	461a      	mov	r2, r3
 800679a:	460b      	mov	r3, r1
 800679c:	cb03      	ldmia	r3!, {r0, r1}
 800679e:	6010      	str	r0, [r2, #0]
 80067a0:	6051      	str	r1, [r2, #4]
 80067a2:	8819      	ldrh	r1, [r3, #0]
 80067a4:	789b      	ldrb	r3, [r3, #2]
 80067a6:	8111      	strh	r1, [r2, #8]
 80067a8:	7293      	strb	r3, [r2, #10]
 80067aa:	4b23      	ldr	r3, [pc, #140]	; (8006838 <log_save+0x1fc>)
 80067ac:	4619      	mov	r1, r3
 80067ae:	4824      	ldr	r0, [pc, #144]	; (8006840 <log_save+0x204>)
 80067b0:	f011 fc8e 	bl	80180d0 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 80067b4:	4923      	ldr	r1, [pc, #140]	; (8006844 <log_save+0x208>)
 80067b6:	4820      	ldr	r0, [pc, #128]	; (8006838 <log_save+0x1fc>)
 80067b8:	f011 fc8a 	bl	80180d0 <siprintf>
		SD_writeToFile(openedPath, radioBuffer);
 80067bc:	4931      	ldr	r1, [pc, #196]	; (8006884 <log_save+0x248>)
 80067be:	4820      	ldr	r0, [pc, #128]	; (8006840 <log_save+0x204>)
 80067c0:	f7fa fddc 	bl	800137c <SD_writeToFile>
	}


	logBufferIndex = 0;
 80067c4:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <log_save+0x1f8>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 80067ca:	4b20      	ldr	r3, [pc, #128]	; (800684c <log_save+0x210>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 80067d0:	4b21      	ldr	r3, [pc, #132]	; (8006858 <log_save+0x21c>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 80067d6:	4b23      	ldr	r3, [pc, #140]	; (8006864 <log_save+0x228>)
 80067d8:	2200      	movs	r2, #0
 80067da:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 80067dc:	4b24      	ldr	r3, [pc, #144]	; (8006870 <log_save+0x234>)
 80067de:	2200      	movs	r2, #0
 80067e0:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 80067e2:	4b26      	ldr	r3, [pc, #152]	; (800687c <log_save+0x240>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	801a      	strh	r2, [r3, #0]
	memset(logBuffer, 0x00, 1024);
 80067e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067ec:	2100      	movs	r1, #0
 80067ee:	4816      	ldr	r0, [pc, #88]	; (8006848 <log_save+0x20c>)
 80067f0:	f010 fd69 	bl	80172c6 <memset>
	memset(bmpBuffer, 0x00, 1024);
 80067f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067f8:	2100      	movs	r1, #0
 80067fa:	4816      	ldr	r0, [pc, #88]	; (8006854 <log_save+0x218>)
 80067fc:	f010 fd63 	bl	80172c6 <memset>
	memset(gpsBuffer, 0x00, 1024);
 8006800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006804:	2100      	movs	r1, #0
 8006806:	4816      	ldr	r0, [pc, #88]	; (8006860 <log_save+0x224>)
 8006808:	f010 fd5d 	bl	80172c6 <memset>
	memset(imuBuffer, 0x00, 1024);
 800680c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006810:	2100      	movs	r1, #0
 8006812:	4816      	ldr	r0, [pc, #88]	; (800686c <log_save+0x230>)
 8006814:	f010 fd57 	bl	80172c6 <memset>
	memset(motBuffer, 0x00, 1024);
 8006818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800681c:	2100      	movs	r1, #0
 800681e:	4816      	ldr	r0, [pc, #88]	; (8006878 <log_save+0x23c>)
 8006820:	f010 fd51 	bl	80172c6 <memset>
	memset(radioBuffer, 0x00, 4096);
 8006824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006828:	2100      	movs	r1, #0
 800682a:	4816      	ldr	r0, [pc, #88]	; (8006884 <log_save+0x248>)
 800682c:	f010 fd4b 	bl	80172c6 <memset>
}
 8006830:	bf00      	nop
 8006832:	bd80      	pop	{r7, pc}
 8006834:	200067fe 	.word	0x200067fe
 8006838:	20006720 	.word	0x20006720
 800683c:	0801decc 	.word	0x0801decc
 8006840:	200049dc 	.word	0x200049dc
 8006844:	20004394 	.word	0x20004394
 8006848:	20006320 	.word	0x20006320
 800684c:	200067fa 	.word	0x200067fa
 8006850:	0801ded8 	.word	0x0801ded8
 8006854:	20006820 	.word	0x20006820
 8006858:	20005318 	.word	0x20005318
 800685c:	0801dee4 	.word	0x0801dee4
 8006860:	200045d4 	.word	0x200045d4
 8006864:	20006814 	.word	0x20006814
 8006868:	0801def0 	.word	0x0801def0
 800686c:	20004f18 	.word	0x20004f18
 8006870:	20004f10 	.word	0x20004f10
 8006874:	0801defc 	.word	0x0801defc
 8006878:	20004ae8 	.word	0x20004ae8
 800687c:	20004ee8 	.word	0x20004ee8
 8006880:	0801df08 	.word	0x0801df08
 8006884:	20003394 	.word	0x20003394

08006888 <log_print>:


void log_print(char* line)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	if (logBufferIndex < 950)
 8006890:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <log_print+0x4c>)
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006898:	4293      	cmp	r3, r2
 800689a:	d816      	bhi.n	80068ca <log_print+0x42>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 800689c:	f7ff fd90 	bl	80063c0 <millis>
 80068a0:	4603      	mov	r3, r0
 80068a2:	461a      	mov	r2, r3
 80068a4:	490c      	ldr	r1, [pc, #48]	; (80068d8 <log_print+0x50>)
 80068a6:	480d      	ldr	r0, [pc, #52]	; (80068dc <log_print+0x54>)
 80068a8:	f011 fc12 	bl	80180d0 <siprintf>
		strcat(logBuffer, line);
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	480c      	ldr	r0, [pc, #48]	; (80068e0 <log_print+0x58>)
 80068b0:	f011 fc2e 	bl	8018110 <strcat>
		strcat(logBuffer, timestamp);
 80068b4:	4909      	ldr	r1, [pc, #36]	; (80068dc <log_print+0x54>)
 80068b6:	480a      	ldr	r0, [pc, #40]	; (80068e0 <log_print+0x58>)
 80068b8:	f011 fc2a 	bl	8018110 <strcat>
		logBufferIndex = strlen(logBuffer);
 80068bc:	4808      	ldr	r0, [pc, #32]	; (80068e0 <log_print+0x58>)
 80068be:	f7f9 fc91 	bl	80001e4 <strlen>
 80068c2:	4603      	mov	r3, r0
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <log_print+0x4c>)
 80068c8:	801a      	strh	r2, [r3, #0]
	}
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	200067fe 	.word	0x200067fe
 80068d8:	0801df14 	.word	0x0801df14
 80068dc:	20004ef0 	.word	0x20004ef0
 80068e0:	20006320 	.word	0x20006320

080068e4 <log_bmp>:

void log_bmp(BMP280* bmp)
{
 80068e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	6078      	str	r0, [r7, #4]
	if (bmpBufferIndex < 950)
 80068ec:	4b1e      	ldr	r3, [pc, #120]	; (8006968 <log_bmp+0x84>)
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d832      	bhi.n	800695e <log_bmp+0x7a>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 80068f8:	f7ff fd62 	bl	80063c0 <millis>
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	491a      	ldr	r1, [pc, #104]	; (800696c <log_bmp+0x88>)
 8006902:	481b      	ldr	r0, [pc, #108]	; (8006970 <log_bmp+0x8c>)
 8006904:	f011 fbe4 	bl	80180d0 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f", bmp->pressure, bmp->temperature);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	4618      	mov	r0, r3
 800690e:	f7f9 fe2b 	bl	8000568 <__aeabi_f2d>
 8006912:	4605      	mov	r5, r0
 8006914:	460e      	mov	r6, r1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	4618      	mov	r0, r3
 800691c:	f7f9 fe24 	bl	8000568 <__aeabi_f2d>
 8006920:	4603      	mov	r3, r0
 8006922:	460c      	mov	r4, r1
 8006924:	e9cd 3400 	strd	r3, r4, [sp]
 8006928:	462a      	mov	r2, r5
 800692a:	4633      	mov	r3, r6
 800692c:	4911      	ldr	r1, [pc, #68]	; (8006974 <log_bmp+0x90>)
 800692e:	4812      	ldr	r0, [pc, #72]	; (8006978 <log_bmp+0x94>)
 8006930:	f011 fbce 	bl	80180d0 <siprintf>
		strcat(tempBuffer, timestamp);
 8006934:	490e      	ldr	r1, [pc, #56]	; (8006970 <log_bmp+0x8c>)
 8006936:	4810      	ldr	r0, [pc, #64]	; (8006978 <log_bmp+0x94>)
 8006938:	f011 fbea 	bl	8018110 <strcat>
		strcat(bmpBuffer, tempBuffer);
 800693c:	490e      	ldr	r1, [pc, #56]	; (8006978 <log_bmp+0x94>)
 800693e:	480f      	ldr	r0, [pc, #60]	; (800697c <log_bmp+0x98>)
 8006940:	f011 fbe6 	bl	8018110 <strcat>
		bmpBufferIndex = strlen(bmpBuffer);
 8006944:	480d      	ldr	r0, [pc, #52]	; (800697c <log_bmp+0x98>)
 8006946:	f7f9 fc4d 	bl	80001e4 <strlen>
 800694a:	4603      	mov	r3, r0
 800694c:	b29a      	uxth	r2, r3
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <log_bmp+0x84>)
 8006950:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8006952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006956:	2100      	movs	r1, #0
 8006958:	4807      	ldr	r0, [pc, #28]	; (8006978 <log_bmp+0x94>)
 800695a:	f010 fcb4 	bl	80172c6 <memset>
	}
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006966:	bf00      	nop
 8006968:	200067fa 	.word	0x200067fa
 800696c:	0801df14 	.word	0x0801df14
 8006970:	20004ef0 	.word	0x20004ef0
 8006974:	0801df1c 	.word	0x0801df1c
 8006978:	2000531c 	.word	0x2000531c
 800697c:	20006820 	.word	0x20006820

08006980 <log_imu>:

		memset(tempBuffer, 0x00, 1024);
	}
}
void log_imu(MPU9250* mpu)
{
 8006980:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af04      	add	r7, sp, #16
 8006988:	6078      	str	r0, [r7, #4]
	if (imuBufferIndex < 950)
 800698a:	4b23      	ldr	r3, [pc, #140]	; (8006a18 <log_imu+0x98>)
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006992:	4293      	cmp	r3, r2
 8006994:	d83b      	bhi.n	8006a0e <log_imu+0x8e>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8006996:	f7ff fd13 	bl	80063c0 <millis>
 800699a:	4603      	mov	r3, r0
 800699c:	461a      	mov	r2, r3
 800699e:	491f      	ldr	r1, [pc, #124]	; (8006a1c <log_imu+0x9c>)
 80069a0:	481f      	ldr	r0, [pc, #124]	; (8006a20 <log_imu+0xa0>)
 80069a2:	f011 fb95 	bl	80180d0 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f %.02f", mpu->yaw, mpu->pitch, mpu->roll);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7f9 fddc 	bl	8000568 <__aeabi_f2d>
 80069b0:	4680      	mov	r8, r0
 80069b2:	4689      	mov	r9, r1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7f9 fdd5 	bl	8000568 <__aeabi_f2d>
 80069be:	4604      	mov	r4, r0
 80069c0:	460d      	mov	r5, r1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7f9 fdce 	bl	8000568 <__aeabi_f2d>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069d4:	e9cd 4500 	strd	r4, r5, [sp]
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	4911      	ldr	r1, [pc, #68]	; (8006a24 <log_imu+0xa4>)
 80069de:	4812      	ldr	r0, [pc, #72]	; (8006a28 <log_imu+0xa8>)
 80069e0:	f011 fb76 	bl	80180d0 <siprintf>
		strcat(tempBuffer, timestamp);
 80069e4:	490e      	ldr	r1, [pc, #56]	; (8006a20 <log_imu+0xa0>)
 80069e6:	4810      	ldr	r0, [pc, #64]	; (8006a28 <log_imu+0xa8>)
 80069e8:	f011 fb92 	bl	8018110 <strcat>
		strcat(imuBuffer, tempBuffer);
 80069ec:	490e      	ldr	r1, [pc, #56]	; (8006a28 <log_imu+0xa8>)
 80069ee:	480f      	ldr	r0, [pc, #60]	; (8006a2c <log_imu+0xac>)
 80069f0:	f011 fb8e 	bl	8018110 <strcat>
		imuBufferIndex = strlen(imuBuffer);
 80069f4:	480d      	ldr	r0, [pc, #52]	; (8006a2c <log_imu+0xac>)
 80069f6:	f7f9 fbf5 	bl	80001e4 <strlen>
 80069fa:	4603      	mov	r3, r0
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <log_imu+0x98>)
 8006a00:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8006a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a06:	2100      	movs	r1, #0
 8006a08:	4807      	ldr	r0, [pc, #28]	; (8006a28 <log_imu+0xa8>)
 8006a0a:	f010 fc5c 	bl	80172c6 <memset>
	}
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a18:	20006814 	.word	0x20006814
 8006a1c:	0801df14 	.word	0x0801df14
 8006a20:	20004ef0 	.word	0x20004ef0
 8006a24:	0801df34 	.word	0x0801df34
 8006a28:	2000531c 	.word	0x2000531c
 8006a2c:	20004f18 	.word	0x20004f18

08006a30 <log_radio>:

		memset(tempBuffer, 0x00, 1024);
	}
}
void log_radio(SX1278* radio, bool transmit)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
	if (radioBufferIndex < 3700)
 8006a3c:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <log_radio+0x98>)
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	f640 6273 	movw	r2, #3699	; 0xe73
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d83a      	bhi.n	8006abe <log_radio+0x8e>
	{
		sprintf(timestamp, "]\t@%lu\r\n", millis());
 8006a48:	f7ff fcba 	bl	80063c0 <millis>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	461a      	mov	r2, r3
 8006a50:	491e      	ldr	r1, [pc, #120]	; (8006acc <log_radio+0x9c>)
 8006a52:	481f      	ldr	r0, [pc, #124]	; (8006ad0 <log_radio+0xa0>)
 8006a54:	f011 fb3c 	bl	80180d0 <siprintf>

		if (transmit)
 8006a58:	78fb      	ldrb	r3, [r7, #3]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00d      	beq.n	8006a7a <log_radio+0x4a>
		{
			sprintf(tempBuffer, "TX\t[");
 8006a5e:	4b1d      	ldr	r3, [pc, #116]	; (8006ad4 <log_radio+0xa4>)
 8006a60:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <log_radio+0xa8>)
 8006a62:	6810      	ldr	r0, [r2, #0]
 8006a64:	6018      	str	r0, [r3, #0]
 8006a66:	7912      	ldrb	r2, [r2, #4]
 8006a68:	711a      	strb	r2, [r3, #4]
			strcat(tempBuffer, radio->txBuffer);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006a70:	4619      	mov	r1, r3
 8006a72:	4818      	ldr	r0, [pc, #96]	; (8006ad4 <log_radio+0xa4>)
 8006a74:	f011 fb4c 	bl	8018110 <strcat>
 8006a78:	e00c      	b.n	8006a94 <log_radio+0x64>
		}
		else
		{
			sprintf(tempBuffer, "RX\t%d\t[", radio->rssi);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4916      	ldr	r1, [pc, #88]	; (8006adc <log_radio+0xac>)
 8006a82:	4814      	ldr	r0, [pc, #80]	; (8006ad4 <log_radio+0xa4>)
 8006a84:	f011 fb24 	bl	80180d0 <siprintf>
			strcat(tempBuffer, radio->rxBuffer);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3344      	adds	r3, #68	; 0x44
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4811      	ldr	r0, [pc, #68]	; (8006ad4 <log_radio+0xa4>)
 8006a90:	f011 fb3e 	bl	8018110 <strcat>
		}

		strcat(tempBuffer, timestamp);
 8006a94:	490e      	ldr	r1, [pc, #56]	; (8006ad0 <log_radio+0xa0>)
 8006a96:	480f      	ldr	r0, [pc, #60]	; (8006ad4 <log_radio+0xa4>)
 8006a98:	f011 fb3a 	bl	8018110 <strcat>
		strcat(radioBuffer, tempBuffer);
 8006a9c:	490d      	ldr	r1, [pc, #52]	; (8006ad4 <log_radio+0xa4>)
 8006a9e:	4810      	ldr	r0, [pc, #64]	; (8006ae0 <log_radio+0xb0>)
 8006aa0:	f011 fb36 	bl	8018110 <strcat>
		radioBufferIndex = strlen(radioBuffer);
 8006aa4:	480e      	ldr	r0, [pc, #56]	; (8006ae0 <log_radio+0xb0>)
 8006aa6:	f7f9 fb9d 	bl	80001e4 <strlen>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <log_radio+0x98>)
 8006ab0:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8006ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	4806      	ldr	r0, [pc, #24]	; (8006ad4 <log_radio+0xa4>)
 8006aba:	f010 fc04 	bl	80172c6 <memset>
	}
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20004ee8 	.word	0x20004ee8
 8006acc:	0801df54 	.word	0x0801df54
 8006ad0:	20004ef0 	.word	0x20004ef0
 8006ad4:	2000531c 	.word	0x2000531c
 8006ad8:	0801df60 	.word	0x0801df60
 8006adc:	0801df68 	.word	0x0801df68
 8006ae0:	20003394 	.word	0x20003394

08006ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ae8:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <HAL_Init+0x40>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a0d      	ldr	r2, [pc, #52]	; (8006b24 <HAL_Init+0x40>)
 8006aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006af4:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <HAL_Init+0x40>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a0a      	ldr	r2, [pc, #40]	; (8006b24 <HAL_Init+0x40>)
 8006afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b00:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <HAL_Init+0x40>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a07      	ldr	r2, [pc, #28]	; (8006b24 <HAL_Init+0x40>)
 8006b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b0c:	2003      	movs	r0, #3
 8006b0e:	f000 f94d 	bl	8006dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b12:	2000      	movs	r0, #0
 8006b14:	f000 f808 	bl	8006b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b18:	f00f faa4 	bl	8016064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40023c00 	.word	0x40023c00

08006b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b30:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <HAL_InitTick+0x54>)
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	4b12      	ldr	r3, [pc, #72]	; (8006b80 <HAL_InitTick+0x58>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f965 	bl	8006e16 <HAL_SYSTICK_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e00e      	b.n	8006b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b0f      	cmp	r3, #15
 8006b5a:	d80a      	bhi.n	8006b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	f000 f92d 	bl	8006dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b68:	4a06      	ldr	r2, [pc, #24]	; (8006b84 <HAL_InitTick+0x5c>)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e000      	b.n	8006b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000170 	.word	0x20000170
 8006b80:	20000008 	.word	0x20000008
 8006b84:	20000004 	.word	0x20000004

08006b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b8c:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <HAL_IncTick+0x20>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	4b06      	ldr	r3, [pc, #24]	; (8006bac <HAL_IncTick+0x24>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4413      	add	r3, r2
 8006b98:	4a04      	ldr	r2, [pc, #16]	; (8006bac <HAL_IncTick+0x24>)
 8006b9a:	6013      	str	r3, [r2, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000008 	.word	0x20000008
 8006bac:	20006c28 	.word	0x20006c28

08006bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8006bb4:	4b03      	ldr	r3, [pc, #12]	; (8006bc4 <HAL_GetTick+0x14>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20006c28 	.word	0x20006c28

08006bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bd0:	f7ff ffee 	bl	8006bb0 <HAL_GetTick>
 8006bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d005      	beq.n	8006bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006be2:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <HAL_Delay+0x40>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006bee:	bf00      	nop
 8006bf0:	f7ff ffde 	bl	8006bb0 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d8f7      	bhi.n	8006bf0 <HAL_Delay+0x28>
  {
  }
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	20000008 	.word	0x20000008

08006c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <__NVIC_SetPriorityGrouping+0x44>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c28:	4013      	ands	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c3e:	4a04      	ldr	r2, [pc, #16]	; (8006c50 <__NVIC_SetPriorityGrouping+0x44>)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	60d3      	str	r3, [r2, #12]
}
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	e000ed00 	.word	0xe000ed00

08006c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c58:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <__NVIC_GetPriorityGrouping+0x18>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	f003 0307 	and.w	r3, r3, #7
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	e000ed00 	.word	0xe000ed00

08006c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	db0b      	blt.n	8006c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	f003 021f 	and.w	r2, r3, #31
 8006c88:	4907      	ldr	r1, [pc, #28]	; (8006ca8 <__NVIC_EnableIRQ+0x38>)
 8006c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c8e:	095b      	lsrs	r3, r3, #5
 8006c90:	2001      	movs	r0, #1
 8006c92:	fa00 f202 	lsl.w	r2, r0, r2
 8006c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	e000e100 	.word	0xe000e100

08006cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	6039      	str	r1, [r7, #0]
 8006cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	db0a      	blt.n	8006cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	490c      	ldr	r1, [pc, #48]	; (8006cf8 <__NVIC_SetPriority+0x4c>)
 8006cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cca:	0112      	lsls	r2, r2, #4
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	440b      	add	r3, r1
 8006cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006cd4:	e00a      	b.n	8006cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	4908      	ldr	r1, [pc, #32]	; (8006cfc <__NVIC_SetPriority+0x50>)
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	3b04      	subs	r3, #4
 8006ce4:	0112      	lsls	r2, r2, #4
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	440b      	add	r3, r1
 8006cea:	761a      	strb	r2, [r3, #24]
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	e000e100 	.word	0xe000e100
 8006cfc:	e000ed00 	.word	0xe000ed00

08006d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b089      	sub	sp, #36	; 0x24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	f1c3 0307 	rsb	r3, r3, #7
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	bf28      	it	cs
 8006d1e:	2304      	movcs	r3, #4
 8006d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	3304      	adds	r3, #4
 8006d26:	2b06      	cmp	r3, #6
 8006d28:	d902      	bls.n	8006d30 <NVIC_EncodePriority+0x30>
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	3b03      	subs	r3, #3
 8006d2e:	e000      	b.n	8006d32 <NVIC_EncodePriority+0x32>
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3e:	43da      	mvns	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	401a      	ands	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d48:	f04f 31ff 	mov.w	r1, #4294967295
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d52:	43d9      	mvns	r1, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d58:	4313      	orrs	r3, r2
         );
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3724      	adds	r7, #36	; 0x24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
	...

08006d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d78:	d301      	bcc.n	8006d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e00f      	b.n	8006d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d7e:	4a0a      	ldr	r2, [pc, #40]	; (8006da8 <SysTick_Config+0x40>)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d86:	210f      	movs	r1, #15
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8c:	f7ff ff8e 	bl	8006cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d90:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <SysTick_Config+0x40>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d96:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <SysTick_Config+0x40>)
 8006d98:	2207      	movs	r2, #7
 8006d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	e000e010 	.word	0xe000e010

08006dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff ff29 	bl	8006c0c <__NVIC_SetPriorityGrouping>
}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b086      	sub	sp, #24
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	4603      	mov	r3, r0
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	607a      	str	r2, [r7, #4]
 8006dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006dd4:	f7ff ff3e 	bl	8006c54 <__NVIC_GetPriorityGrouping>
 8006dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	6978      	ldr	r0, [r7, #20]
 8006de0:	f7ff ff8e 	bl	8006d00 <NVIC_EncodePriority>
 8006de4:	4602      	mov	r2, r0
 8006de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dea:	4611      	mov	r1, r2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff ff5d 	bl	8006cac <__NVIC_SetPriority>
}
 8006df2:	bf00      	nop
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	4603      	mov	r3, r0
 8006e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff ff31 	bl	8006c70 <__NVIC_EnableIRQ>
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff ffa2 	bl	8006d68 <SysTick_Config>
 8006e24:	4603      	mov	r3, r0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006e3c:	f7ff feb8 	bl	8006bb0 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e099      	b.n	8006f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0201 	bic.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e6c:	e00f      	b.n	8006e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e6e:	f7ff fe9f 	bl	8006bb0 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b05      	cmp	r3, #5
 8006e7a:	d908      	bls.n	8006e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2203      	movs	r2, #3
 8006e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e078      	b.n	8006f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e8      	bne.n	8006e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4b38      	ldr	r3, [pc, #224]	; (8006f88 <HAL_DMA_Init+0x158>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d107      	bne.n	8006ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f023 0307 	bic.w	r3, r3, #7
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d117      	bne.n	8006f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00e      	beq.n	8006f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fa99 	bl	800746c <DMA_CheckFifoParam>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2240      	movs	r2, #64	; 0x40
 8006f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e016      	b.n	8006f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa50 	bl	8007400 <DMA_CalcBaseAndBitshift>
 8006f60:	4603      	mov	r3, r0
 8006f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f68:	223f      	movs	r2, #63	; 0x3f
 8006f6a:	409a      	lsls	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	f010803f 	.word	0xf010803f

08006f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d101      	bne.n	8006fb2 <HAL_DMA_Start_IT+0x26>
 8006fae:	2302      	movs	r3, #2
 8006fb0:	e048      	b.n	8007044 <HAL_DMA_Start_IT+0xb8>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d137      	bne.n	8007036 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f9e2 	bl	80073a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe4:	223f      	movs	r2, #63	; 0x3f
 8006fe6:	409a      	lsls	r2, r3
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0216 	orr.w	r2, r2, #22
 8006ffa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695a      	ldr	r2, [r3, #20]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800700a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007010:	2b00      	cmp	r3, #0
 8007012:	d007      	beq.n	8007024 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0208 	orr.w	r2, r2, #8
 8007022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	e005      	b.n	8007042 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800703e:	2302      	movs	r3, #2
 8007040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007042:	7dfb      	ldrb	r3, [r7, #23]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d004      	beq.n	800706a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2280      	movs	r2, #128	; 0x80
 8007064:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e00c      	b.n	8007084 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2205      	movs	r2, #5
 800706e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0201 	bic.w	r2, r2, #1
 8007080:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800709c:	4b92      	ldr	r3, [pc, #584]	; (80072e8 <HAL_DMA_IRQHandler+0x258>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a92      	ldr	r2, [pc, #584]	; (80072ec <HAL_DMA_IRQHandler+0x25c>)
 80070a2:	fba2 2303 	umull	r2, r3, r2, r3
 80070a6:	0a9b      	lsrs	r3, r3, #10
 80070a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ba:	2208      	movs	r2, #8
 80070bc:	409a      	lsls	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4013      	ands	r3, r2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01a      	beq.n	80070fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d013      	beq.n	80070fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0204 	bic.w	r2, r2, #4
 80070e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e8:	2208      	movs	r2, #8
 80070ea:	409a      	lsls	r2, r3
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f4:	f043 0201 	orr.w	r2, r3, #1
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007100:	2201      	movs	r2, #1
 8007102:	409a      	lsls	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4013      	ands	r3, r2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d012      	beq.n	8007132 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00b      	beq.n	8007132 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800711e:	2201      	movs	r2, #1
 8007120:	409a      	lsls	r2, r3
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	f043 0202 	orr.w	r2, r3, #2
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007136:	2204      	movs	r2, #4
 8007138:	409a      	lsls	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4013      	ands	r3, r2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d012      	beq.n	8007168 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00b      	beq.n	8007168 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007154:	2204      	movs	r2, #4
 8007156:	409a      	lsls	r2, r3
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007160:	f043 0204 	orr.w	r2, r3, #4
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716c:	2210      	movs	r2, #16
 800716e:	409a      	lsls	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4013      	ands	r3, r2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d043      	beq.n	8007200 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d03c      	beq.n	8007200 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718a:	2210      	movs	r2, #16
 800718c:	409a      	lsls	r2, r3
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d018      	beq.n	80071d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d108      	bne.n	80071c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d024      	beq.n	8007200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
 80071be:	e01f      	b.n	8007200 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01b      	beq.n	8007200 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	4798      	blx	r3
 80071d0:	e016      	b.n	8007200 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d107      	bne.n	80071f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0208 	bic.w	r2, r2, #8
 80071ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007204:	2220      	movs	r2, #32
 8007206:	409a      	lsls	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 808e 	beq.w	800732e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0310 	and.w	r3, r3, #16
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8086 	beq.w	800732e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007226:	2220      	movs	r2, #32
 8007228:	409a      	lsls	r2, r3
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b05      	cmp	r3, #5
 8007238:	d136      	bne.n	80072a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0216 	bic.w	r2, r2, #22
 8007248:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695a      	ldr	r2, [r3, #20]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007258:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	2b00      	cmp	r3, #0
 8007260:	d103      	bne.n	800726a <HAL_DMA_IRQHandler+0x1da>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007266:	2b00      	cmp	r3, #0
 8007268:	d007      	beq.n	800727a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0208 	bic.w	r2, r2, #8
 8007278:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727e:	223f      	movs	r2, #63	; 0x3f
 8007280:	409a      	lsls	r2, r3
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729a:	2b00      	cmp	r3, #0
 800729c:	d07d      	beq.n	800739a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
        }
        return;
 80072a6:	e078      	b.n	800739a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d01c      	beq.n	80072f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d108      	bne.n	80072d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d030      	beq.n	800732e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	4798      	blx	r3
 80072d4:	e02b      	b.n	800732e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d027      	beq.n	800732e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
 80072e6:	e022      	b.n	800732e <HAL_DMA_IRQHandler+0x29e>
 80072e8:	20000170 	.word	0x20000170
 80072ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10f      	bne.n	800731e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0210 	bic.w	r2, r2, #16
 800730c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007332:	2b00      	cmp	r3, #0
 8007334:	d032      	beq.n	800739c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d022      	beq.n	8007388 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2205      	movs	r2, #5
 8007346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0201 	bic.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	3301      	adds	r3, #1
 800735e:	60bb      	str	r3, [r7, #8]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	429a      	cmp	r2, r3
 8007364:	d307      	bcc.n	8007376 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1f2      	bne.n	800735a <HAL_DMA_IRQHandler+0x2ca>
 8007374:	e000      	b.n	8007378 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007376:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	4798      	blx	r3
 8007398:	e000      	b.n	800739c <HAL_DMA_IRQHandler+0x30c>
        return;
 800739a:	bf00      	nop
    }
  }
}
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop

080073a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d108      	bne.n	80073e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80073e2:	e007      	b.n	80073f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	60da      	str	r2, [r3, #12]
}
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	3b10      	subs	r3, #16
 8007410:	4a14      	ldr	r2, [pc, #80]	; (8007464 <DMA_CalcBaseAndBitshift+0x64>)
 8007412:	fba2 2303 	umull	r2, r3, r2, r3
 8007416:	091b      	lsrs	r3, r3, #4
 8007418:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800741a:	4a13      	ldr	r2, [pc, #76]	; (8007468 <DMA_CalcBaseAndBitshift+0x68>)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b03      	cmp	r3, #3
 800742c:	d909      	bls.n	8007442 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007436:	f023 0303 	bic.w	r3, r3, #3
 800743a:	1d1a      	adds	r2, r3, #4
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	659a      	str	r2, [r3, #88]	; 0x58
 8007440:	e007      	b.n	8007452 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800744a:	f023 0303 	bic.w	r3, r3, #3
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	aaaaaaab 	.word	0xaaaaaaab
 8007468:	0801e37c 	.word	0x0801e37c

0800746c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d11f      	bne.n	80074c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d855      	bhi.n	8007538 <DMA_CheckFifoParam+0xcc>
 800748c:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <DMA_CheckFifoParam+0x28>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074a5 	.word	0x080074a5
 8007498:	080074b7 	.word	0x080074b7
 800749c:	080074a5 	.word	0x080074a5
 80074a0:	08007539 	.word	0x08007539
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d045      	beq.n	800753c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074b4:	e042      	b.n	800753c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074be:	d13f      	bne.n	8007540 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074c4:	e03c      	b.n	8007540 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ce:	d121      	bne.n	8007514 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d836      	bhi.n	8007544 <DMA_CheckFifoParam+0xd8>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <DMA_CheckFifoParam+0x70>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	080074ed 	.word	0x080074ed
 80074e0:	080074f3 	.word	0x080074f3
 80074e4:	080074ed 	.word	0x080074ed
 80074e8:	08007505 	.word	0x08007505
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	73fb      	strb	r3, [r7, #15]
      break;
 80074f0:	e02f      	b.n	8007552 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d024      	beq.n	8007548 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007502:	e021      	b.n	8007548 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800750c:	d11e      	bne.n	800754c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007512:	e01b      	b.n	800754c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d902      	bls.n	8007520 <DMA_CheckFifoParam+0xb4>
 800751a:	2b03      	cmp	r3, #3
 800751c:	d003      	beq.n	8007526 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800751e:	e018      	b.n	8007552 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	73fb      	strb	r3, [r7, #15]
      break;
 8007524:	e015      	b.n	8007552 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00e      	beq.n	8007550 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	73fb      	strb	r3, [r7, #15]
      break;
 8007536:	e00b      	b.n	8007550 <DMA_CheckFifoParam+0xe4>
      break;
 8007538:	bf00      	nop
 800753a:	e00a      	b.n	8007552 <DMA_CheckFifoParam+0xe6>
      break;
 800753c:	bf00      	nop
 800753e:	e008      	b.n	8007552 <DMA_CheckFifoParam+0xe6>
      break;
 8007540:	bf00      	nop
 8007542:	e006      	b.n	8007552 <DMA_CheckFifoParam+0xe6>
      break;
 8007544:	bf00      	nop
 8007546:	e004      	b.n	8007552 <DMA_CheckFifoParam+0xe6>
      break;
 8007548:	bf00      	nop
 800754a:	e002      	b.n	8007552 <DMA_CheckFifoParam+0xe6>
      break;   
 800754c:	bf00      	nop
 800754e:	e000      	b.n	8007552 <DMA_CheckFifoParam+0xe6>
      break;
 8007550:	bf00      	nop
    }
  } 
  
  return status; 
 8007552:	7bfb      	ldrb	r3, [r7, #15]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007560:	b480      	push	{r7}
 8007562:	b089      	sub	sp, #36	; 0x24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800756a:	2300      	movs	r3, #0
 800756c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800756e:	2300      	movs	r3, #0
 8007570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007572:	2300      	movs	r3, #0
 8007574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007576:	2300      	movs	r3, #0
 8007578:	61fb      	str	r3, [r7, #28]
 800757a:	e16b      	b.n	8007854 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800757c:	2201      	movs	r2, #1
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4013      	ands	r3, r2
 800758e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	429a      	cmp	r2, r3
 8007596:	f040 815a 	bne.w	800784e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d003      	beq.n	80075aa <HAL_GPIO_Init+0x4a>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b12      	cmp	r3, #18
 80075a8:	d123      	bne.n	80075f2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	08da      	lsrs	r2, r3, #3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3208      	adds	r2, #8
 80075b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	220f      	movs	r2, #15
 80075c2:	fa02 f303 	lsl.w	r3, r2, r3
 80075c6:	43db      	mvns	r3, r3
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	4013      	ands	r3, r2
 80075cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	691a      	ldr	r2, [r3, #16]
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	fa02 f303 	lsl.w	r3, r2, r3
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	08da      	lsrs	r2, r3, #3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3208      	adds	r2, #8
 80075ec:	69b9      	ldr	r1, [r7, #24]
 80075ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	2203      	movs	r2, #3
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	43db      	mvns	r3, r3
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	4013      	ands	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f003 0203 	and.w	r2, r3, #3
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	fa02 f303 	lsl.w	r3, r2, r3
 800761a:	69ba      	ldr	r2, [r7, #24]
 800761c:	4313      	orrs	r3, r2
 800761e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d00b      	beq.n	8007646 <HAL_GPIO_Init+0xe6>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d007      	beq.n	8007646 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800763a:	2b11      	cmp	r3, #17
 800763c:	d003      	beq.n	8007646 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2b12      	cmp	r3, #18
 8007644:	d130      	bne.n	80076a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	2203      	movs	r2, #3
 8007652:	fa02 f303 	lsl.w	r3, r2, r3
 8007656:	43db      	mvns	r3, r3
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	4013      	ands	r3, r2
 800765c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	4313      	orrs	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800767c:	2201      	movs	r2, #1
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	43db      	mvns	r3, r3
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	4013      	ands	r3, r2
 800768a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	091b      	lsrs	r3, r3, #4
 8007692:	f003 0201 	and.w	r2, r3, #1
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	4313      	orrs	r3, r2
 80076a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	2203      	movs	r2, #3
 80076b4:	fa02 f303 	lsl.w	r3, r2, r3
 80076b8:	43db      	mvns	r3, r3
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	4013      	ands	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 80b4 	beq.w	800784e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	4b5f      	ldr	r3, [pc, #380]	; (8007868 <HAL_GPIO_Init+0x308>)
 80076ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ee:	4a5e      	ldr	r2, [pc, #376]	; (8007868 <HAL_GPIO_Init+0x308>)
 80076f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076f4:	6453      	str	r3, [r2, #68]	; 0x44
 80076f6:	4b5c      	ldr	r3, [pc, #368]	; (8007868 <HAL_GPIO_Init+0x308>)
 80076f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007702:	4a5a      	ldr	r2, [pc, #360]	; (800786c <HAL_GPIO_Init+0x30c>)
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	089b      	lsrs	r3, r3, #2
 8007708:	3302      	adds	r3, #2
 800770a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800770e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	220f      	movs	r2, #15
 800771a:	fa02 f303 	lsl.w	r3, r2, r3
 800771e:	43db      	mvns	r3, r3
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	4013      	ands	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a51      	ldr	r2, [pc, #324]	; (8007870 <HAL_GPIO_Init+0x310>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d02b      	beq.n	8007786 <HAL_GPIO_Init+0x226>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a50      	ldr	r2, [pc, #320]	; (8007874 <HAL_GPIO_Init+0x314>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d025      	beq.n	8007782 <HAL_GPIO_Init+0x222>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a4f      	ldr	r2, [pc, #316]	; (8007878 <HAL_GPIO_Init+0x318>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d01f      	beq.n	800777e <HAL_GPIO_Init+0x21e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a4e      	ldr	r2, [pc, #312]	; (800787c <HAL_GPIO_Init+0x31c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d019      	beq.n	800777a <HAL_GPIO_Init+0x21a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a4d      	ldr	r2, [pc, #308]	; (8007880 <HAL_GPIO_Init+0x320>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d013      	beq.n	8007776 <HAL_GPIO_Init+0x216>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a4c      	ldr	r2, [pc, #304]	; (8007884 <HAL_GPIO_Init+0x324>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00d      	beq.n	8007772 <HAL_GPIO_Init+0x212>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a4b      	ldr	r2, [pc, #300]	; (8007888 <HAL_GPIO_Init+0x328>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d007      	beq.n	800776e <HAL_GPIO_Init+0x20e>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a4a      	ldr	r2, [pc, #296]	; (800788c <HAL_GPIO_Init+0x32c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d101      	bne.n	800776a <HAL_GPIO_Init+0x20a>
 8007766:	2307      	movs	r3, #7
 8007768:	e00e      	b.n	8007788 <HAL_GPIO_Init+0x228>
 800776a:	2308      	movs	r3, #8
 800776c:	e00c      	b.n	8007788 <HAL_GPIO_Init+0x228>
 800776e:	2306      	movs	r3, #6
 8007770:	e00a      	b.n	8007788 <HAL_GPIO_Init+0x228>
 8007772:	2305      	movs	r3, #5
 8007774:	e008      	b.n	8007788 <HAL_GPIO_Init+0x228>
 8007776:	2304      	movs	r3, #4
 8007778:	e006      	b.n	8007788 <HAL_GPIO_Init+0x228>
 800777a:	2303      	movs	r3, #3
 800777c:	e004      	b.n	8007788 <HAL_GPIO_Init+0x228>
 800777e:	2302      	movs	r3, #2
 8007780:	e002      	b.n	8007788 <HAL_GPIO_Init+0x228>
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <HAL_GPIO_Init+0x228>
 8007786:	2300      	movs	r3, #0
 8007788:	69fa      	ldr	r2, [r7, #28]
 800778a:	f002 0203 	and.w	r2, r2, #3
 800778e:	0092      	lsls	r2, r2, #2
 8007790:	4093      	lsls	r3, r2
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	4313      	orrs	r3, r2
 8007796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007798:	4934      	ldr	r1, [pc, #208]	; (800786c <HAL_GPIO_Init+0x30c>)
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	089b      	lsrs	r3, r3, #2
 800779e:	3302      	adds	r3, #2
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077a6:	4b3a      	ldr	r3, [pc, #232]	; (8007890 <HAL_GPIO_Init+0x330>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	43db      	mvns	r3, r3
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	4013      	ands	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077ca:	4a31      	ldr	r2, [pc, #196]	; (8007890 <HAL_GPIO_Init+0x330>)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80077d0:	4b2f      	ldr	r3, [pc, #188]	; (8007890 <HAL_GPIO_Init+0x330>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	43db      	mvns	r3, r3
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	4013      	ands	r3, r2
 80077de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80077f4:	4a26      	ldr	r2, [pc, #152]	; (8007890 <HAL_GPIO_Init+0x330>)
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077fa:	4b25      	ldr	r3, [pc, #148]	; (8007890 <HAL_GPIO_Init+0x330>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	43db      	mvns	r3, r3
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	4013      	ands	r3, r2
 8007808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	4313      	orrs	r3, r2
 800781c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800781e:	4a1c      	ldr	r2, [pc, #112]	; (8007890 <HAL_GPIO_Init+0x330>)
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007824:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <HAL_GPIO_Init+0x330>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	43db      	mvns	r3, r3
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	4013      	ands	r3, r2
 8007832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	4313      	orrs	r3, r2
 8007846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007848:	4a11      	ldr	r2, [pc, #68]	; (8007890 <HAL_GPIO_Init+0x330>)
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	3301      	adds	r3, #1
 8007852:	61fb      	str	r3, [r7, #28]
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	2b0f      	cmp	r3, #15
 8007858:	f67f ae90 	bls.w	800757c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800785c:	bf00      	nop
 800785e:	3724      	adds	r7, #36	; 0x24
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	40023800 	.word	0x40023800
 800786c:	40013800 	.word	0x40013800
 8007870:	40020000 	.word	0x40020000
 8007874:	40020400 	.word	0x40020400
 8007878:	40020800 	.word	0x40020800
 800787c:	40020c00 	.word	0x40020c00
 8007880:	40021000 	.word	0x40021000
 8007884:	40021400 	.word	0x40021400
 8007888:	40021800 	.word	0x40021800
 800788c:	40021c00 	.word	0x40021c00
 8007890:	40013c00 	.word	0x40013c00

08007894 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	887b      	ldrh	r3, [r7, #2]
 80078a6:	4013      	ands	r3, r2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80078ac:	2301      	movs	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
 80078b0:	e001      	b.n	80078b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80078b2:	2300      	movs	r3, #0
 80078b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	807b      	strh	r3, [r7, #2]
 80078d0:	4613      	mov	r3, r2
 80078d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80078d4:	787b      	ldrb	r3, [r7, #1]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078da:	887a      	ldrh	r2, [r7, #2]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80078e0:	e003      	b.n	80078ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80078e2:	887b      	ldrh	r3, [r7, #2]
 80078e4:	041a      	lsls	r2, r3, #16
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	619a      	str	r2, [r3, #24]
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	460b      	mov	r3, r1
 8007900:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695a      	ldr	r2, [r3, #20]
 8007906:	887b      	ldrh	r3, [r7, #2]
 8007908:	401a      	ands	r2, r3
 800790a:	887b      	ldrh	r3, [r7, #2]
 800790c:	429a      	cmp	r2, r3
 800790e:	d104      	bne.n	800791a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007910:	887b      	ldrh	r3, [r7, #2]
 8007912:	041a      	lsls	r2, r3, #16
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007918:	e002      	b.n	8007920 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800791a:	887a      	ldrh	r2, [r7, #2]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	619a      	str	r2, [r3, #24]
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e10f      	b.n	8007b5e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f00e fbae 	bl	80160b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2224      	movs	r2, #36	; 0x24
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0201 	bic.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007970:	f002 fcc8 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 8007974:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	4a7b      	ldr	r2, [pc, #492]	; (8007b68 <HAL_I2C_Init+0x23c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d807      	bhi.n	8007990 <HAL_I2C_Init+0x64>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4a7a      	ldr	r2, [pc, #488]	; (8007b6c <HAL_I2C_Init+0x240>)
 8007984:	4293      	cmp	r3, r2
 8007986:	bf94      	ite	ls
 8007988:	2301      	movls	r3, #1
 800798a:	2300      	movhi	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	e006      	b.n	800799e <HAL_I2C_Init+0x72>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4a77      	ldr	r2, [pc, #476]	; (8007b70 <HAL_I2C_Init+0x244>)
 8007994:	4293      	cmp	r3, r2
 8007996:	bf94      	ite	ls
 8007998:	2301      	movls	r3, #1
 800799a:	2300      	movhi	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e0db      	b.n	8007b5e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4a72      	ldr	r2, [pc, #456]	; (8007b74 <HAL_I2C_Init+0x248>)
 80079aa:	fba2 2303 	umull	r2, r3, r2, r3
 80079ae:	0c9b      	lsrs	r3, r3, #18
 80079b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	4a64      	ldr	r2, [pc, #400]	; (8007b68 <HAL_I2C_Init+0x23c>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d802      	bhi.n	80079e0 <HAL_I2C_Init+0xb4>
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	3301      	adds	r3, #1
 80079de:	e009      	b.n	80079f4 <HAL_I2C_Init+0xc8>
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80079e6:	fb02 f303 	mul.w	r3, r2, r3
 80079ea:	4a63      	ldr	r2, [pc, #396]	; (8007b78 <HAL_I2C_Init+0x24c>)
 80079ec:	fba2 2303 	umull	r2, r3, r2, r3
 80079f0:	099b      	lsrs	r3, r3, #6
 80079f2:	3301      	adds	r3, #1
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6812      	ldr	r2, [r2, #0]
 80079f8:	430b      	orrs	r3, r1
 80079fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007a06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	4956      	ldr	r1, [pc, #344]	; (8007b68 <HAL_I2C_Init+0x23c>)
 8007a10:	428b      	cmp	r3, r1
 8007a12:	d80d      	bhi.n	8007a30 <HAL_I2C_Init+0x104>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	1e59      	subs	r1, r3, #1
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a22:	3301      	adds	r3, #1
 8007a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	bf38      	it	cc
 8007a2c:	2304      	movcc	r3, #4
 8007a2e:	e04f      	b.n	8007ad0 <HAL_I2C_Init+0x1a4>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d111      	bne.n	8007a5c <HAL_I2C_Init+0x130>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	1e58      	subs	r0, r3, #1
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6859      	ldr	r1, [r3, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	440b      	add	r3, r1
 8007a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	bf0c      	ite	eq
 8007a54:	2301      	moveq	r3, #1
 8007a56:	2300      	movne	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	e012      	b.n	8007a82 <HAL_I2C_Init+0x156>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	1e58      	subs	r0, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6859      	ldr	r1, [r3, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	0099      	lsls	r1, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a72:	3301      	adds	r3, #1
 8007a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bf0c      	ite	eq
 8007a7c:	2301      	moveq	r3, #1
 8007a7e:	2300      	movne	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_I2C_Init+0x15e>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e022      	b.n	8007ad0 <HAL_I2C_Init+0x1a4>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10e      	bne.n	8007ab0 <HAL_I2C_Init+0x184>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	1e58      	subs	r0, r3, #1
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6859      	ldr	r1, [r3, #4]
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	440b      	add	r3, r1
 8007aa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aae:	e00f      	b.n	8007ad0 <HAL_I2C_Init+0x1a4>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	1e58      	subs	r0, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6859      	ldr	r1, [r3, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	440b      	add	r3, r1
 8007abe:	0099      	lsls	r1, r3, #2
 8007ac0:	440b      	add	r3, r1
 8007ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ad0:	6879      	ldr	r1, [r7, #4]
 8007ad2:	6809      	ldr	r1, [r1, #0]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	69da      	ldr	r2, [r3, #28]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	431a      	orrs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007afe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6911      	ldr	r1, [r2, #16]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	68d2      	ldr	r2, [r2, #12]
 8007b0a:	4311      	orrs	r1, r2
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6812      	ldr	r2, [r2, #0]
 8007b10:	430b      	orrs	r3, r1
 8007b12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	695a      	ldr	r2, [r3, #20]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0201 	orr.w	r2, r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	000186a0 	.word	0x000186a0
 8007b6c:	001e847f 	.word	0x001e847f
 8007b70:	003d08ff 	.word	0x003d08ff
 8007b74:	431bde83 	.word	0x431bde83
 8007b78:	10624dd3 	.word	0x10624dd3

08007b7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	4608      	mov	r0, r1
 8007b86:	4611      	mov	r1, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	817b      	strh	r3, [r7, #10]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	813b      	strh	r3, [r7, #8]
 8007b92:	4613      	mov	r3, r2
 8007b94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b96:	f7ff f80b 	bl	8006bb0 <HAL_GetTick>
 8007b9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	f040 80d9 	bne.w	8007d5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	2319      	movs	r3, #25
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	496d      	ldr	r1, [pc, #436]	; (8007d68 <HAL_I2C_Mem_Write+0x1ec>)
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 fc5b 	bl	8008470 <I2C_WaitOnFlagUntilTimeout>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e0cc      	b.n	8007d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d101      	bne.n	8007bd2 <HAL_I2C_Mem_Write+0x56>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	e0c5      	b.n	8007d5e <HAL_I2C_Mem_Write+0x1e2>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d007      	beq.n	8007bf8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2221      	movs	r2, #33	; 0x21
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2240      	movs	r2, #64	; 0x40
 8007c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6a3a      	ldr	r2, [r7, #32]
 8007c22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4a4d      	ldr	r2, [pc, #308]	; (8007d6c <HAL_I2C_Mem_Write+0x1f0>)
 8007c38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c3a:	88f8      	ldrh	r0, [r7, #6]
 8007c3c:	893a      	ldrh	r2, [r7, #8]
 8007c3e:	8979      	ldrh	r1, [r7, #10]
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	4603      	mov	r3, r0
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 fab6 	bl	80081bc <I2C_RequestMemoryWrite>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d052      	beq.n	8007cfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e081      	b.n	8007d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fcdc 	bl	800861c <I2C_WaitOnTXEFlagUntilTimeout>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00d      	beq.n	8007c86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d107      	bne.n	8007c82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e06b      	b.n	8007d5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	781a      	ldrb	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d11b      	bne.n	8007cfc <HAL_I2C_Mem_Write+0x180>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d017      	beq.n	8007cfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	781a      	ldrb	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1aa      	bne.n	8007c5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fcc8 	bl	800869e <I2C_WaitOnBTFFlagUntilTimeout>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00d      	beq.n	8007d30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d107      	bne.n	8007d2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e016      	b.n	8007d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e000      	b.n	8007d5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007d5c:	2302      	movs	r3, #2
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	00100002 	.word	0x00100002
 8007d6c:	ffff0000 	.word	0xffff0000

08007d70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08c      	sub	sp, #48	; 0x30
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	4608      	mov	r0, r1
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	4603      	mov	r3, r0
 8007d80:	817b      	strh	r3, [r7, #10]
 8007d82:	460b      	mov	r3, r1
 8007d84:	813b      	strh	r3, [r7, #8]
 8007d86:	4613      	mov	r3, r2
 8007d88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d8a:	f7fe ff11 	bl	8006bb0 <HAL_GetTick>
 8007d8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	f040 8208 	bne.w	80081ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	2319      	movs	r3, #25
 8007da4:	2201      	movs	r2, #1
 8007da6:	497b      	ldr	r1, [pc, #492]	; (8007f94 <HAL_I2C_Mem_Read+0x224>)
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 fb61 	bl	8008470 <I2C_WaitOnFlagUntilTimeout>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007db4:	2302      	movs	r3, #2
 8007db6:	e1fb      	b.n	80081b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d101      	bne.n	8007dc6 <HAL_I2C_Mem_Read+0x56>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e1f4      	b.n	80081b0 <HAL_I2C_Mem_Read+0x440>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d007      	beq.n	8007dec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0201 	orr.w	r2, r2, #1
 8007dea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2222      	movs	r2, #34	; 0x22
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2240      	movs	r2, #64	; 0x40
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4a5b      	ldr	r2, [pc, #364]	; (8007f98 <HAL_I2C_Mem_Read+0x228>)
 8007e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e2e:	88f8      	ldrh	r0, [r7, #6]
 8007e30:	893a      	ldrh	r2, [r7, #8]
 8007e32:	8979      	ldrh	r1, [r7, #10]
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 fa46 	bl	80082d0 <I2C_RequestMemoryRead>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e1b0      	b.n	80081b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d113      	bne.n	8007e7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e56:	2300      	movs	r3, #0
 8007e58:	623b      	str	r3, [r7, #32]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	623b      	str	r3, [r7, #32]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	623b      	str	r3, [r7, #32]
 8007e6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	e184      	b.n	8008188 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d11b      	bne.n	8007ebe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e96:	2300      	movs	r3, #0
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	61fb      	str	r3, [r7, #28]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	61fb      	str	r3, [r7, #28]
 8007eaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	e164      	b.n	8008188 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d11b      	bne.n	8007efe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ee4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	61bb      	str	r3, [r7, #24]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	61bb      	str	r3, [r7, #24]
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	e144      	b.n	8008188 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007efe:	2300      	movs	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	617b      	str	r3, [r7, #20]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007f14:	e138      	b.n	8008188 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	f200 80f1 	bhi.w	8008102 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d123      	bne.n	8007f70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 fbf7 	bl	8008720 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e139      	b.n	80081b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	691a      	ldr	r2, [r3, #16]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	3b01      	subs	r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f6e:	e10b      	b.n	8008188 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d14e      	bne.n	8008016 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4906      	ldr	r1, [pc, #24]	; (8007f9c <HAL_I2C_Mem_Read+0x22c>)
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 fa74 	bl	8008470 <I2C_WaitOnFlagUntilTimeout>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d008      	beq.n	8007fa0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e10e      	b.n	80081b0 <HAL_I2C_Mem_Read+0x440>
 8007f92:	bf00      	nop
 8007f94:	00100002 	.word	0x00100002
 8007f98:	ffff0000 	.word	0xffff0000
 8007f9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	b2d2      	uxtb	r2, r2
 8007fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	b2d2      	uxtb	r2, r2
 8007fee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	1c5a      	adds	r2, r3, #1
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b29a      	uxth	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800a:	b29b      	uxth	r3, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008014:	e0b8      	b.n	8008188 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	2200      	movs	r2, #0
 800801e:	4966      	ldr	r1, [pc, #408]	; (80081b8 <HAL_I2C_Mem_Read+0x448>)
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 fa25 	bl	8008470 <I2C_WaitOnFlagUntilTimeout>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e0bf      	b.n	80081b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800803e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691a      	ldr	r2, [r3, #16]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805c:	3b01      	subs	r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008068:	b29b      	uxth	r3, r3
 800806a:	3b01      	subs	r3, #1
 800806c:	b29a      	uxth	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	2200      	movs	r2, #0
 800807a:	494f      	ldr	r1, [pc, #316]	; (80081b8 <HAL_I2C_Mem_Read+0x448>)
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f9f7 	bl	8008470 <I2C_WaitOnFlagUntilTimeout>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e091      	b.n	80081b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800809a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b8:	3b01      	subs	r3, #1
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	b2d2      	uxtb	r2, r2
 80080da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008100:	e042      	b.n	8008188 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008104:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 fb0a 	bl	8008720 <I2C_WaitOnRXNEFlagUntilTimeout>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e04c      	b.n	80081b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	b2d2      	uxtb	r2, r2
 8008122:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008132:	3b01      	subs	r3, #1
 8008134:	b29a      	uxth	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813e:	b29b      	uxth	r3, r3
 8008140:	3b01      	subs	r3, #1
 8008142:	b29a      	uxth	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	f003 0304 	and.w	r3, r3, #4
 8008152:	2b04      	cmp	r3, #4
 8008154:	d118      	bne.n	8008188 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	691a      	ldr	r2, [r3, #16]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	b2d2      	uxtb	r2, r2
 8008162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	1c5a      	adds	r2, r3, #1
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008172:	3b01      	subs	r3, #1
 8008174:	b29a      	uxth	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817e:	b29b      	uxth	r3, r3
 8008180:	3b01      	subs	r3, #1
 8008182:	b29a      	uxth	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800818c:	2b00      	cmp	r3, #0
 800818e:	f47f aec2 	bne.w	8007f16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2220      	movs	r2, #32
 8008196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	e000      	b.n	80081b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80081ae:	2302      	movs	r3, #2
  }
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3728      	adds	r7, #40	; 0x28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	00010004 	.word	0x00010004

080081bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af02      	add	r7, sp, #8
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	4608      	mov	r0, r1
 80081c6:	4611      	mov	r1, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	4603      	mov	r3, r0
 80081cc:	817b      	strh	r3, [r7, #10]
 80081ce:	460b      	mov	r3, r1
 80081d0:	813b      	strh	r3, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f93c 	bl	8008470 <I2C_WaitOnFlagUntilTimeout>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e05f      	b.n	80082c2 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008202:	897b      	ldrh	r3, [r7, #10]
 8008204:	b2db      	uxtb	r3, r3
 8008206:	461a      	mov	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008210:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	6a3a      	ldr	r2, [r7, #32]
 8008216:	492d      	ldr	r1, [pc, #180]	; (80082cc <I2C_RequestMemoryWrite+0x110>)
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 f980 	bl	800851e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e04c      	b.n	80082c2 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008228:	2300      	movs	r3, #0
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800823e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008240:	6a39      	ldr	r1, [r7, #32]
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 f9ea 	bl	800861c <I2C_WaitOnTXEFlagUntilTimeout>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00d      	beq.n	800826a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	2b04      	cmp	r3, #4
 8008254:	d107      	bne.n	8008266 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008264:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e02b      	b.n	80082c2 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800826a:	88fb      	ldrh	r3, [r7, #6]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d105      	bne.n	800827c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008270:	893b      	ldrh	r3, [r7, #8]
 8008272:	b2da      	uxtb	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	611a      	str	r2, [r3, #16]
 800827a:	e021      	b.n	80082c0 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800827c:	893b      	ldrh	r3, [r7, #8]
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	b29b      	uxth	r3, r3
 8008282:	b2da      	uxtb	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800828a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828c:	6a39      	ldr	r1, [r7, #32]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 f9c4 	bl	800861c <I2C_WaitOnTXEFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00d      	beq.n	80082b6 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d107      	bne.n	80082b2 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e005      	b.n	80082c2 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082b6:	893b      	ldrh	r3, [r7, #8]
 80082b8:	b2da      	uxtb	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	00010002 	.word	0x00010002

080082d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	4608      	mov	r0, r1
 80082da:	4611      	mov	r1, r2
 80082dc:	461a      	mov	r2, r3
 80082de:	4603      	mov	r3, r0
 80082e0:	817b      	strh	r3, [r7, #10]
 80082e2:	460b      	mov	r3, r1
 80082e4:	813b      	strh	r3, [r7, #8]
 80082e6:	4613      	mov	r3, r2
 80082e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008308:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	2200      	movs	r2, #0
 8008312:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f8aa 	bl	8008470 <I2C_WaitOnFlagUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e09e      	b.n	8008464 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008326:	897b      	ldrh	r3, [r7, #10]
 8008328:	b2db      	uxtb	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008334:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	6a3a      	ldr	r2, [r7, #32]
 800833a:	494c      	ldr	r1, [pc, #304]	; (800846c <I2C_RequestMemoryRead+0x19c>)
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f8ee 	bl	800851e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e08b      	b.n	8008464 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800834c:	2300      	movs	r3, #0
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008364:	6a39      	ldr	r1, [r7, #32]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 f958 	bl	800861c <I2C_WaitOnTXEFlagUntilTimeout>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00d      	beq.n	800838e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008376:	2b04      	cmp	r3, #4
 8008378:	d107      	bne.n	800838a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008388:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e06a      	b.n	8008464 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800838e:	88fb      	ldrh	r3, [r7, #6]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d105      	bne.n	80083a0 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008394:	893b      	ldrh	r3, [r7, #8]
 8008396:	b2da      	uxtb	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	611a      	str	r2, [r3, #16]
 800839e:	e021      	b.n	80083e4 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80083a0:	893b      	ldrh	r3, [r7, #8]
 80083a2:	0a1b      	lsrs	r3, r3, #8
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b0:	6a39      	ldr	r1, [r7, #32]
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f000 f932 	bl	800861c <I2C_WaitOnTXEFlagUntilTimeout>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00d      	beq.n	80083da <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	d107      	bne.n	80083d6 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e044      	b.n	8008464 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083da:	893b      	ldrh	r3, [r7, #8]
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e6:	6a39      	ldr	r1, [r7, #32]
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 f917 	bl	800861c <I2C_WaitOnTXEFlagUntilTimeout>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00d      	beq.n	8008410 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d107      	bne.n	800840c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800840a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e029      	b.n	8008464 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800841e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	2200      	movs	r2, #0
 8008428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 f81f 	bl	8008470 <I2C_WaitOnFlagUntilTimeout>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e013      	b.n	8008464 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800843c:	897b      	ldrh	r3, [r7, #10]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	f043 0301 	orr.w	r3, r3, #1
 8008444:	b2da      	uxtb	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	6a3a      	ldr	r2, [r7, #32]
 8008450:	4906      	ldr	r1, [pc, #24]	; (800846c <I2C_RequestMemoryRead+0x19c>)
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 f863 	bl	800851e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	00010002 	.word	0x00010002

08008470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	4613      	mov	r3, r2
 800847e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008480:	e025      	b.n	80084ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008488:	d021      	beq.n	80084ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800848a:	f7fe fb91 	bl	8006bb0 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d302      	bcc.n	80084a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d116      	bne.n	80084ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ba:	f043 0220 	orr.w	r2, r3, #32
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e023      	b.n	8008516 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	0c1b      	lsrs	r3, r3, #16
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d10d      	bne.n	80084f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	43da      	mvns	r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4013      	ands	r3, r2
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bf0c      	ite	eq
 80084ea:	2301      	moveq	r3, #1
 80084ec:	2300      	movne	r3, #0
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	461a      	mov	r2, r3
 80084f2:	e00c      	b.n	800850e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	43da      	mvns	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	4013      	ands	r3, r2
 8008500:	b29b      	uxth	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	bf0c      	ite	eq
 8008506:	2301      	moveq	r3, #1
 8008508:	2300      	movne	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	461a      	mov	r2, r3
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	429a      	cmp	r2, r3
 8008512:	d0b6      	beq.n	8008482 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	607a      	str	r2, [r7, #4]
 800852a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800852c:	e051      	b.n	80085d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800853c:	d123      	bne.n	8008586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800854c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008556:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2220      	movs	r2, #32
 8008562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	f043 0204 	orr.w	r2, r3, #4
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e046      	b.n	8008614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858c:	d021      	beq.n	80085d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800858e:	f7fe fb0f 	bl	8006bb0 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	429a      	cmp	r2, r3
 800859c:	d302      	bcc.n	80085a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d116      	bne.n	80085d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	f043 0220 	orr.w	r2, r3, #32
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e020      	b.n	8008614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	0c1b      	lsrs	r3, r3, #16
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d10c      	bne.n	80085f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	43da      	mvns	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4013      	ands	r3, r2
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	bf14      	ite	ne
 80085ee:	2301      	movne	r3, #1
 80085f0:	2300      	moveq	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	e00b      	b.n	800860e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	43da      	mvns	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	4013      	ands	r3, r2
 8008602:	b29b      	uxth	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	bf14      	ite	ne
 8008608:	2301      	movne	r3, #1
 800860a:	2300      	moveq	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d18d      	bne.n	800852e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008628:	e02d      	b.n	8008686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 f8ce 	bl	80087cc <I2C_IsAcknowledgeFailed>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e02d      	b.n	8008696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008640:	d021      	beq.n	8008686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008642:	f7fe fab5 	bl	8006bb0 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	429a      	cmp	r2, r3
 8008650:	d302      	bcc.n	8008658 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d116      	bne.n	8008686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2220      	movs	r2, #32
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	f043 0220 	orr.w	r2, r3, #32
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e007      	b.n	8008696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008690:	2b80      	cmp	r3, #128	; 0x80
 8008692:	d1ca      	bne.n	800862a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086aa:	e02d      	b.n	8008708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f88d 	bl	80087cc <I2C_IsAcknowledgeFailed>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e02d      	b.n	8008718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c2:	d021      	beq.n	8008708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086c4:	f7fe fa74 	bl	8006bb0 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d302      	bcc.n	80086da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d116      	bne.n	8008708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2220      	movs	r2, #32
 80086e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f4:	f043 0220 	orr.w	r2, r3, #32
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e007      	b.n	8008718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b04      	cmp	r3, #4
 8008714:	d1ca      	bne.n	80086ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800872c:	e042      	b.n	80087b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b10      	cmp	r3, #16
 800873a:	d119      	bne.n	8008770 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f06f 0210 	mvn.w	r2, #16
 8008744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2220      	movs	r2, #32
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e029      	b.n	80087c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008770:	f7fe fa1e 	bl	8006bb0 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	429a      	cmp	r2, r3
 800877e:	d302      	bcc.n	8008786 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d116      	bne.n	80087b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2220      	movs	r2, #32
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a0:	f043 0220 	orr.w	r2, r3, #32
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e007      	b.n	80087c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087be:	2b40      	cmp	r3, #64	; 0x40
 80087c0:	d1b5      	bne.n	800872e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087e2:	d11b      	bne.n	800881c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008808:	f043 0204 	orr.w	r2, r3, #4
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e000      	b.n	800881e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800882a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800882c:	b08f      	sub	sp, #60	; 0x3c
 800882e:	af0a      	add	r7, sp, #40	; 0x28
 8008830:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e10f      	b.n	8008a5c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f00e f8ae 	bl	80169b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2203      	movs	r2, #3
 8008860:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f006 f911 	bl	800eaa2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	603b      	str	r3, [r7, #0]
 8008886:	687e      	ldr	r6, [r7, #4]
 8008888:	466d      	mov	r5, sp
 800888a:	f106 0410 	add.w	r4, r6, #16
 800888e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008896:	e894 0003 	ldmia.w	r4, {r0, r1}
 800889a:	e885 0003 	stmia.w	r5, {r0, r1}
 800889e:	1d33      	adds	r3, r6, #4
 80088a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088a2:	6838      	ldr	r0, [r7, #0]
 80088a4:	f005 ffe8 	bl	800e878 <USB_CoreInit>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2202      	movs	r2, #2
 80088b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e0d0      	b.n	8008a5c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2100      	movs	r1, #0
 80088c0:	4618      	mov	r0, r3
 80088c2:	f006 f8ff 	bl	800eac4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
 80088ca:	e04a      	b.n	8008962 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80088cc:	7bfa      	ldrb	r2, [r7, #15]
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	4613      	mov	r3, r2
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	1a9b      	subs	r3, r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	333d      	adds	r3, #61	; 0x3d
 80088dc:	2201      	movs	r2, #1
 80088de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80088e0:	7bfa      	ldrb	r2, [r7, #15]
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	4613      	mov	r3, r2
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	1a9b      	subs	r3, r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	333c      	adds	r3, #60	; 0x3c
 80088f0:	7bfa      	ldrb	r2, [r7, #15]
 80088f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80088f4:	7bfa      	ldrb	r2, [r7, #15]
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	b298      	uxth	r0, r3
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	4613      	mov	r3, r2
 80088fe:	00db      	lsls	r3, r3, #3
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	440b      	add	r3, r1
 8008906:	3342      	adds	r3, #66	; 0x42
 8008908:	4602      	mov	r2, r0
 800890a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800890c:	7bfa      	ldrb	r2, [r7, #15]
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	4613      	mov	r3, r2
 8008912:	00db      	lsls	r3, r3, #3
 8008914:	1a9b      	subs	r3, r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	440b      	add	r3, r1
 800891a:	333f      	adds	r3, #63	; 0x3f
 800891c:	2200      	movs	r2, #0
 800891e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008920:	7bfa      	ldrb	r2, [r7, #15]
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4613      	mov	r3, r2
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	1a9b      	subs	r3, r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	3344      	adds	r3, #68	; 0x44
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008934:	7bfa      	ldrb	r2, [r7, #15]
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	4613      	mov	r3, r2
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	440b      	add	r3, r1
 8008942:	3348      	adds	r3, #72	; 0x48
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008948:	7bfa      	ldrb	r2, [r7, #15]
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	4613      	mov	r3, r2
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	1a9b      	subs	r3, r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	3350      	adds	r3, #80	; 0x50
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	3301      	adds	r3, #1
 8008960:	73fb      	strb	r3, [r7, #15]
 8008962:	7bfa      	ldrb	r2, [r7, #15]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	429a      	cmp	r2, r3
 800896a:	d3af      	bcc.n	80088cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
 8008970:	e044      	b.n	80089fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008972:	7bfa      	ldrb	r2, [r7, #15]
 8008974:	6879      	ldr	r1, [r7, #4]
 8008976:	4613      	mov	r3, r2
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	1a9b      	subs	r3, r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	440b      	add	r3, r1
 8008980:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008988:	7bfa      	ldrb	r2, [r7, #15]
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	4613      	mov	r3, r2
 800898e:	00db      	lsls	r3, r3, #3
 8008990:	1a9b      	subs	r3, r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	440b      	add	r3, r1
 8008996:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800899a:	7bfa      	ldrb	r2, [r7, #15]
 800899c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800899e:	7bfa      	ldrb	r2, [r7, #15]
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	1a9b      	subs	r3, r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	440b      	add	r3, r1
 80089ac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80089b0:	2200      	movs	r2, #0
 80089b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80089b4:	7bfa      	ldrb	r2, [r7, #15]
 80089b6:	6879      	ldr	r1, [r7, #4]
 80089b8:	4613      	mov	r3, r2
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	1a9b      	subs	r3, r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	440b      	add	r3, r1
 80089c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80089ca:	7bfa      	ldrb	r2, [r7, #15]
 80089cc:	6879      	ldr	r1, [r7, #4]
 80089ce:	4613      	mov	r3, r2
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	1a9b      	subs	r3, r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	440b      	add	r3, r1
 80089d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80089e0:	7bfa      	ldrb	r2, [r7, #15]
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	4613      	mov	r3, r2
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	1a9b      	subs	r3, r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	3301      	adds	r3, #1
 80089fa:	73fb      	strb	r3, [r7, #15]
 80089fc:	7bfa      	ldrb	r2, [r7, #15]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d3b5      	bcc.n	8008972 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	687e      	ldr	r6, [r7, #4]
 8008a0e:	466d      	mov	r5, sp
 8008a10:	f106 0410 	add.w	r4, r6, #16
 8008a14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a20:	e885 0003 	stmia.w	r5, {r0, r1}
 8008a24:	1d33      	adds	r3, r6, #4
 8008a26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a28:	6838      	ldr	r0, [r7, #0]
 8008a2a:	f006 f875 	bl	800eb18 <USB_DevInit>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e00d      	b.n	8008a5c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f007 f86a 	bl	800fb2e <USB_DevDisconnect>

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <HAL_PCD_Start+0x1c>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e020      	b.n	8008ac2 <HAL_PCD_Start+0x5e>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d109      	bne.n	8008aa4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d005      	beq.n	8008aa4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f007 f828 	bl	800fafe <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f005 ffe4 	bl	800ea80 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008aca:	b590      	push	{r4, r7, lr}
 8008acc:	b08d      	sub	sp, #52	; 0x34
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f007 f8cf 	bl	800fc84 <USB_GetMode>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f040 838e 	bne.w	800920a <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f007 f833 	bl	800fb5e <USB_ReadInterrupts>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 8384 	beq.w	8009208 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f007 f82a 	bl	800fb5e <USB_ReadInterrupts>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d107      	bne.n	8008b24 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	695a      	ldr	r2, [r3, #20]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f002 0202 	and.w	r2, r2, #2
 8008b22:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f007 f818 	bl	800fb5e <USB_ReadInterrupts>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b38:	d17b      	bne.n	8008c32 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f007 f81e 	bl	800fb84 <USB_ReadDevAllOutEpInterrupt>
 8008b48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008b4a:	e06f      	b.n	8008c2c <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d064      	beq.n	8008c20 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5c:	b2d2      	uxtb	r2, r2
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4618      	mov	r0, r3
 8008b62:	f007 f843 	bl	800fbec <USB_ReadDevOutEPInterrupt>
 8008b66:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00c      	beq.n	8008b8c <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7e:	461a      	mov	r2, r3
 8008b80:	2301      	movs	r3, #1
 8008b82:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fe0e 	bl	80097a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	f003 0308 	and.w	r3, r3, #8
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00c      	beq.n	8008bb0 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008b96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 ff0d 	bl	80099b8 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008baa:	461a      	mov	r2, r3
 8008bac:	2308      	movs	r3, #8
 8008bae:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	f003 0310 	and.w	r3, r3, #16
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d008      	beq.n	8008bcc <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	2310      	movs	r3, #16
 8008bca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d015      	beq.n	8008c02 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d108      	bne.n	8008bf0 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008be8:	461a      	mov	r2, r3
 8008bea:	2101      	movs	r1, #1
 8008bec:	f007 f88e 	bl	800fd0c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	2320      	movs	r3, #32
 8008c00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d009      	beq.n	8008c20 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c18:	461a      	mov	r2, r3
 8008c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	3301      	adds	r3, #1
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	085b      	lsrs	r3, r3, #1
 8008c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d18c      	bne.n	8008b4c <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f006 ff91 	bl	800fb5e <USB_ReadInterrupts>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c46:	f040 80c4 	bne.w	8008dd2 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f006 ffb2 	bl	800fbb8 <USB_ReadDevAllInEpInterrupt>
 8008c54:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008c5a:	e0b6      	b.n	8008dca <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 80ab 	beq.w	8008dbe <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c6e:	b2d2      	uxtb	r2, r2
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f006 ffd8 	bl	800fc28 <USB_ReadDevInEPInterrupt>
 8008c78:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d05b      	beq.n	8008d3c <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	f003 030f 	and.w	r3, r3, #15
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c90:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	43db      	mvns	r3, r3
 8008c9e:	69f9      	ldr	r1, [r7, #28]
 8008ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d11b      	bne.n	8008cfa <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	00db      	lsls	r3, r3, #3
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	440b      	add	r3, r1
 8008cd0:	3348      	adds	r3, #72	; 0x48
 8008cd2:	6819      	ldr	r1, [r3, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd8:	4613      	mov	r3, r2
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	1a9b      	subs	r3, r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4403      	add	r3, r0
 8008ce2:	3344      	adds	r3, #68	; 0x44
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4419      	add	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cec:	4613      	mov	r3, r2
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	1a9b      	subs	r3, r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4403      	add	r3, r0
 8008cf6:	3348      	adds	r3, #72	; 0x48
 8008cf8:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f00d feda 	bl	8016aba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d116      	bne.n	8008d3c <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d113      	bne.n	8008d3c <HAL_PCD_IRQHandler+0x272>
 8008d14:	6879      	ldr	r1, [r7, #4]
 8008d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d18:	4613      	mov	r3, r2
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	440b      	add	r3, r1
 8008d22:	3350      	adds	r3, #80	; 0x50
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d108      	bne.n	8008d3c <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d34:	461a      	mov	r2, r3
 8008d36:	2101      	movs	r1, #1
 8008d38:	f006 ffe8 	bl	800fd0c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	f003 0308 	and.w	r3, r3, #8
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d52:	461a      	mov	r2, r3
 8008d54:	2308      	movs	r3, #8
 8008d56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	f003 0310 	and.w	r3, r3, #16
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d008      	beq.n	8008d74 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6e:	461a      	mov	r2, r3
 8008d70:	2310      	movs	r3, #16
 8008d72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d008      	beq.n	8008d90 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	2340      	movs	r3, #64	; 0x40
 8008d8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d008      	beq.n	8008dac <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da6:	461a      	mov	r2, r3
 8008da8:	2302      	movs	r3, #2
 8008daa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008db6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fc67 	bl	800968c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	085b      	lsrs	r3, r3, #1
 8008dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f47f af45 	bne.w	8008c5c <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f006 fec1 	bl	800fb5e <USB_ReadInterrupts>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008de6:	d122      	bne.n	8008e2e <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d108      	bne.n	8008e18 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e0e:	2100      	movs	r1, #0
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fe89 	bl	8009b28 <HAL_PCDEx_LPM_Callback>
 8008e16:	e002      	b.n	8008e1e <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f00d fec5 	bl	8016ba8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	695a      	ldr	r2, [r3, #20]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f006 fe93 	bl	800fb5e <USB_ReadInterrupts>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e42:	d112      	bne.n	8008e6a <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d102      	bne.n	8008e5a <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f00d fe81 	bl	8016b5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	695a      	ldr	r2, [r3, #20]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008e68:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f006 fe75 	bl	800fb5e <USB_ReadInterrupts>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e7e:	f040 80a7 	bne.w	8008fd0 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e90:	f023 0301 	bic.w	r3, r3, #1
 8008e94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2110      	movs	r1, #16
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f005 ffad 	bl	800edfc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ea6:	e036      	b.n	8008f16 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008eba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ecc:	0151      	lsls	r1, r2, #5
 8008ece:	69fa      	ldr	r2, [r7, #28]
 8008ed0:	440a      	add	r2, r1
 8008ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008eda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee8:	461a      	mov	r2, r3
 8008eea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008eee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f00:	0151      	lsls	r1, r2, #5
 8008f02:	69fa      	ldr	r2, [r7, #28]
 8008f04:	440a      	add	r2, r1
 8008f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f0e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	3301      	adds	r3, #1
 8008f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d3c3      	bcc.n	8008ea8 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	69fa      	ldr	r2, [r7, #28]
 8008f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f2e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008f32:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d016      	beq.n	8008f6a <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f46:	69fa      	ldr	r2, [r7, #28]
 8008f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f4c:	f043 030b 	orr.w	r3, r3, #11
 8008f50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5c:	69fa      	ldr	r2, [r7, #28]
 8008f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f62:	f043 030b 	orr.w	r3, r3, #11
 8008f66:	6453      	str	r3, [r2, #68]	; 0x44
 8008f68:	e015      	b.n	8008f96 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f7c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008f80:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f90:	f043 030b 	orr.w	r3, r3, #11
 8008f94:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69fa      	ldr	r2, [r7, #28]
 8008fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fa4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008fa8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f006 fea6 	bl	800fd0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	695a      	ldr	r2, [r3, #20]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f006 fdc2 	bl	800fb5e <USB_ReadInterrupts>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe4:	d124      	bne.n	8009030 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f006 fe58 	bl	800fca0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f005 ff62 	bl	800eebe <USB_GetDevSpeed>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681c      	ldr	r4, [r3, #0]
 8009006:	f001 f971 	bl	800a2ec <HAL_RCC_GetHCLKFreq>
 800900a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009010:	b2db      	uxtb	r3, r3
 8009012:	461a      	mov	r2, r3
 8009014:	4620      	mov	r0, r4
 8009016:	f005 fc91 	bl	800e93c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f00d fd75 	bl	8016b0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	695a      	ldr	r2, [r3, #20]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800902e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4618      	mov	r0, r3
 8009036:	f006 fd92 	bl	800fb5e <USB_ReadInterrupts>
 800903a:	4603      	mov	r3, r0
 800903c:	f003 0310 	and.w	r3, r3, #16
 8009040:	2b10      	cmp	r3, #16
 8009042:	d161      	bne.n	8009108 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699a      	ldr	r2, [r3, #24]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0210 	bic.w	r2, r2, #16
 8009052:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	6a1b      	ldr	r3, [r3, #32]
 8009058:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f003 020f 	and.w	r2, r3, #15
 8009060:	4613      	mov	r3, r2
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	1a9b      	subs	r3, r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	3304      	adds	r3, #4
 8009072:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	0c5b      	lsrs	r3, r3, #17
 8009078:	f003 030f 	and.w	r3, r3, #15
 800907c:	2b02      	cmp	r3, #2
 800907e:	d124      	bne.n	80090ca <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009086:	4013      	ands	r3, r2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d035      	beq.n	80090f8 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	091b      	lsrs	r3, r3, #4
 8009094:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800909a:	b29b      	uxth	r3, r3
 800909c:	461a      	mov	r2, r3
 800909e:	6a38      	ldr	r0, [r7, #32]
 80090a0:	f006 fc0a 	bl	800f8b8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	68da      	ldr	r2, [r3, #12]
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	091b      	lsrs	r3, r3, #4
 80090ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090b0:	441a      	add	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	699a      	ldr	r2, [r3, #24]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	091b      	lsrs	r3, r3, #4
 80090be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090c2:	441a      	add	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	619a      	str	r2, [r3, #24]
 80090c8:	e016      	b.n	80090f8 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	0c5b      	lsrs	r3, r3, #17
 80090ce:	f003 030f 	and.w	r3, r3, #15
 80090d2:	2b06      	cmp	r3, #6
 80090d4:	d110      	bne.n	80090f8 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090dc:	2208      	movs	r2, #8
 80090de:	4619      	mov	r1, r3
 80090e0:	6a38      	ldr	r0, [r7, #32]
 80090e2:	f006 fbe9 	bl	800f8b8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	091b      	lsrs	r3, r3, #4
 80090ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090f2:	441a      	add	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699a      	ldr	r2, [r3, #24]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0210 	orr.w	r2, r2, #16
 8009106:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4618      	mov	r0, r3
 800910e:	f006 fd26 	bl	800fb5e <USB_ReadInterrupts>
 8009112:	4603      	mov	r3, r0
 8009114:	f003 0308 	and.w	r3, r3, #8
 8009118:	2b08      	cmp	r3, #8
 800911a:	d10a      	bne.n	8009132 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f00d fce6 	bl	8016aee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	695a      	ldr	r2, [r3, #20]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f002 0208 	and.w	r2, r2, #8
 8009130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4618      	mov	r0, r3
 8009138:	f006 fd11 	bl	800fb5e <USB_ReadInterrupts>
 800913c:	4603      	mov	r3, r0
 800913e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009146:	d10f      	bne.n	8009168 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	b2db      	uxtb	r3, r3
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f00d fd48 	bl	8016be8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	695a      	ldr	r2, [r3, #20]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009166:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4618      	mov	r0, r3
 800916e:	f006 fcf6 	bl	800fb5e <USB_ReadInterrupts>
 8009172:	4603      	mov	r3, r0
 8009174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800917c:	d10f      	bne.n	800919e <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	b2db      	uxtb	r3, r3
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f00d fd1b 	bl	8016bc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	695a      	ldr	r2, [r3, #20]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800919c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f006 fcdb 	bl	800fb5e <USB_ReadInterrupts>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b2:	d10a      	bne.n	80091ca <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f00d fd29 	bl	8016c0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	695a      	ldr	r2, [r3, #20]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80091c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f006 fcc5 	bl	800fb5e <USB_ReadInterrupts>
 80091d4:	4603      	mov	r3, r0
 80091d6:	f003 0304 	and.w	r3, r3, #4
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d115      	bne.n	800920a <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f00d fd19 	bl	8016c28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6859      	ldr	r1, [r3, #4]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	430a      	orrs	r2, r1
 8009204:	605a      	str	r2, [r3, #4]
 8009206:	e000      	b.n	800920a <HAL_PCD_IRQHandler+0x740>
      return;
 8009208:	bf00      	nop
    }
  }
}
 800920a:	3734      	adds	r7, #52	; 0x34
 800920c:	46bd      	mov	sp, r7
 800920e:	bd90      	pop	{r4, r7, pc}

08009210 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009222:	2b01      	cmp	r3, #1
 8009224:	d101      	bne.n	800922a <HAL_PCD_SetAddress+0x1a>
 8009226:	2302      	movs	r3, #2
 8009228:	e013      	b.n	8009252 <HAL_PCD_SetAddress+0x42>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	78fa      	ldrb	r2, [r7, #3]
 8009236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	78fa      	ldrb	r2, [r7, #3]
 8009240:	4611      	mov	r1, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f006 fc35 	bl	800fab2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	4608      	mov	r0, r1
 8009264:	4611      	mov	r1, r2
 8009266:	461a      	mov	r2, r3
 8009268:	4603      	mov	r3, r0
 800926a:	70fb      	strb	r3, [r7, #3]
 800926c:	460b      	mov	r3, r1
 800926e:	803b      	strh	r3, [r7, #0]
 8009270:	4613      	mov	r3, r2
 8009272:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800927c:	2b00      	cmp	r3, #0
 800927e:	da0f      	bge.n	80092a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	f003 020f 	and.w	r2, r3, #15
 8009286:	4613      	mov	r3, r2
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	3338      	adds	r3, #56	; 0x38
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	4413      	add	r3, r2
 8009294:	3304      	adds	r3, #4
 8009296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2201      	movs	r2, #1
 800929c:	705a      	strb	r2, [r3, #1]
 800929e:	e00f      	b.n	80092c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	f003 020f 	and.w	r2, r3, #15
 80092a6:	4613      	mov	r3, r2
 80092a8:	00db      	lsls	r3, r3, #3
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	4413      	add	r3, r2
 80092b6:	3304      	adds	r3, #4
 80092b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	f003 030f 	and.w	r3, r3, #15
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80092cc:	883a      	ldrh	r2, [r7, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	78ba      	ldrb	r2, [r7, #2]
 80092d6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	785b      	ldrb	r3, [r3, #1]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d004      	beq.n	80092ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80092ea:	78bb      	ldrb	r3, [r7, #2]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d102      	bne.n	80092f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d101      	bne.n	8009304 <HAL_PCD_EP_Open+0xaa>
 8009300:	2302      	movs	r3, #2
 8009302:	e00e      	b.n	8009322 <HAL_PCD_EP_Open+0xc8>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68f9      	ldr	r1, [r7, #12]
 8009312:	4618      	mov	r0, r3
 8009314:	f005 fdf8 	bl	800ef08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009320:	7afb      	ldrb	r3, [r7, #11]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	460b      	mov	r3, r1
 8009334:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800933a:	2b00      	cmp	r3, #0
 800933c:	da0f      	bge.n	800935e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800933e:	78fb      	ldrb	r3, [r7, #3]
 8009340:	f003 020f 	and.w	r2, r3, #15
 8009344:	4613      	mov	r3, r2
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	1a9b      	subs	r3, r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	3338      	adds	r3, #56	; 0x38
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	4413      	add	r3, r2
 8009352:	3304      	adds	r3, #4
 8009354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2201      	movs	r2, #1
 800935a:	705a      	strb	r2, [r3, #1]
 800935c:	e00f      	b.n	800937e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800935e:	78fb      	ldrb	r3, [r7, #3]
 8009360:	f003 020f 	and.w	r2, r3, #15
 8009364:	4613      	mov	r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	1a9b      	subs	r3, r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	4413      	add	r3, r2
 8009374:	3304      	adds	r3, #4
 8009376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	f003 030f 	and.w	r3, r3, #15
 8009384:	b2da      	uxtb	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_PCD_EP_Close+0x6e>
 8009394:	2302      	movs	r3, #2
 8009396:	e00e      	b.n	80093b6 <HAL_PCD_EP_Close+0x8c>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68f9      	ldr	r1, [r7, #12]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f005 fe36 	bl	800f018 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b086      	sub	sp, #24
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	603b      	str	r3, [r7, #0]
 80093ca:	460b      	mov	r3, r1
 80093cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093ce:	7afb      	ldrb	r3, [r7, #11]
 80093d0:	f003 020f 	and.w	r2, r3, #15
 80093d4:	4613      	mov	r3, r2
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	1a9b      	subs	r3, r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4413      	add	r3, r2
 80093e4:	3304      	adds	r3, #4
 80093e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2200      	movs	r2, #0
 80093f8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2200      	movs	r2, #0
 80093fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009400:	7afb      	ldrb	r3, [r7, #11]
 8009402:	f003 030f 	and.w	r3, r3, #15
 8009406:	b2da      	uxtb	r2, r3
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d102      	bne.n	800941a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800941a:	7afb      	ldrb	r3, [r7, #11]
 800941c:	f003 030f 	and.w	r3, r3, #15
 8009420:	2b00      	cmp	r3, #0
 8009422:	d109      	bne.n	8009438 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	461a      	mov	r2, r3
 8009430:	6979      	ldr	r1, [r7, #20]
 8009432:	f006 f8b9 	bl	800f5a8 <USB_EP0StartXfer>
 8009436:	e008      	b.n	800944a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6818      	ldr	r0, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	b2db      	uxtb	r3, r3
 8009442:	461a      	mov	r2, r3
 8009444:	6979      	ldr	r1, [r7, #20]
 8009446:	f005 fe6b 	bl	800f120 <USB_EPStartXfer>
  }

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3718      	adds	r7, #24
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	f003 020f 	and.w	r2, r3, #15
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	4613      	mov	r3, r2
 800946a:	00db      	lsls	r3, r3, #3
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	440b      	add	r3, r1
 8009472:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009476:	681b      	ldr	r3, [r3, #0]
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	607a      	str	r2, [r7, #4]
 800948e:	603b      	str	r3, [r7, #0]
 8009490:	460b      	mov	r3, r1
 8009492:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009494:	7afb      	ldrb	r3, [r7, #11]
 8009496:	f003 020f 	and.w	r2, r3, #15
 800949a:	4613      	mov	r3, r2
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	1a9b      	subs	r3, r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	3338      	adds	r3, #56	; 0x38
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	4413      	add	r3, r2
 80094a8:	3304      	adds	r3, #4
 80094aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2200      	movs	r2, #0
 80094bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2201      	movs	r2, #1
 80094c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	f003 030f 	and.w	r3, r3, #15
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d102      	bne.n	80094de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80094de:	7afb      	ldrb	r3, [r7, #11]
 80094e0:	f003 030f 	and.w	r3, r3, #15
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d109      	bne.n	80094fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6818      	ldr	r0, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	461a      	mov	r2, r3
 80094f4:	6979      	ldr	r1, [r7, #20]
 80094f6:	f006 f857 	bl	800f5a8 <USB_EP0StartXfer>
 80094fa:	e008      	b.n	800950e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	461a      	mov	r2, r3
 8009508:	6979      	ldr	r1, [r7, #20]
 800950a:	f005 fe09 	bl	800f120 <USB_EPStartXfer>
  }

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3718      	adds	r7, #24
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009524:	78fb      	ldrb	r3, [r7, #3]
 8009526:	f003 020f 	and.w	r2, r3, #15
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	429a      	cmp	r2, r3
 8009530:	d901      	bls.n	8009536 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e050      	b.n	80095d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800953a:	2b00      	cmp	r3, #0
 800953c:	da0f      	bge.n	800955e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	f003 020f 	and.w	r2, r3, #15
 8009544:	4613      	mov	r3, r2
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	1a9b      	subs	r3, r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	3338      	adds	r3, #56	; 0x38
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	4413      	add	r3, r2
 8009552:	3304      	adds	r3, #4
 8009554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2201      	movs	r2, #1
 800955a:	705a      	strb	r2, [r3, #1]
 800955c:	e00d      	b.n	800957a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800955e:	78fa      	ldrb	r2, [r7, #3]
 8009560:	4613      	mov	r3, r2
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	1a9b      	subs	r3, r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	4413      	add	r3, r2
 8009570:	3304      	adds	r3, #4
 8009572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2201      	movs	r2, #1
 800957e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	f003 030f 	and.w	r3, r3, #15
 8009586:	b2da      	uxtb	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009592:	2b01      	cmp	r3, #1
 8009594:	d101      	bne.n	800959a <HAL_PCD_EP_SetStall+0x82>
 8009596:	2302      	movs	r3, #2
 8009598:	e01e      	b.n	80095d8 <HAL_PCD_EP_SetStall+0xc0>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68f9      	ldr	r1, [r7, #12]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f006 f9ae 	bl	800f90a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	f003 030f 	and.w	r3, r3, #15
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	b2d9      	uxtb	r1, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80095c8:	461a      	mov	r2, r3
 80095ca:	f006 fb9f 	bl	800fd0c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	f003 020f 	and.w	r2, r3, #15
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d901      	bls.n	80095fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e042      	b.n	8009684 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80095fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009602:	2b00      	cmp	r3, #0
 8009604:	da0f      	bge.n	8009626 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009606:	78fb      	ldrb	r3, [r7, #3]
 8009608:	f003 020f 	and.w	r2, r3, #15
 800960c:	4613      	mov	r3, r2
 800960e:	00db      	lsls	r3, r3, #3
 8009610:	1a9b      	subs	r3, r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	3338      	adds	r3, #56	; 0x38
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	4413      	add	r3, r2
 800961a:	3304      	adds	r3, #4
 800961c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	705a      	strb	r2, [r3, #1]
 8009624:	e00f      	b.n	8009646 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009626:	78fb      	ldrb	r3, [r7, #3]
 8009628:	f003 020f 	and.w	r2, r3, #15
 800962c:	4613      	mov	r3, r2
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	1a9b      	subs	r3, r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	4413      	add	r3, r2
 800963c:	3304      	adds	r3, #4
 800963e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800964c:	78fb      	ldrb	r3, [r7, #3]
 800964e:	f003 030f 	and.w	r3, r3, #15
 8009652:	b2da      	uxtb	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800965e:	2b01      	cmp	r3, #1
 8009660:	d101      	bne.n	8009666 <HAL_PCD_EP_ClrStall+0x86>
 8009662:	2302      	movs	r3, #2
 8009664:	e00e      	b.n	8009684 <HAL_PCD_EP_ClrStall+0xa4>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68f9      	ldr	r1, [r7, #12]
 8009674:	4618      	mov	r0, r3
 8009676:	f006 f9b6 	bl	800f9e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08a      	sub	sp, #40	; 0x28
 8009690:	af02      	add	r7, sp, #8
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	4613      	mov	r3, r2
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	1a9b      	subs	r3, r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	3338      	adds	r3, #56	; 0x38
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	4413      	add	r3, r2
 80096b0:	3304      	adds	r3, #4
 80096b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	699a      	ldr	r2, [r3, #24]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d901      	bls.n	80096c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e06c      	b.n	800979e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	695a      	ldr	r2, [r3, #20]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	69fa      	ldr	r2, [r7, #28]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d902      	bls.n	80096e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	3303      	adds	r3, #3
 80096e4:	089b      	lsrs	r3, r3, #2
 80096e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096e8:	e02b      	b.n	8009742 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	695a      	ldr	r2, [r3, #20]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	69fa      	ldr	r2, [r7, #28]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d902      	bls.n	8009706 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	3303      	adds	r3, #3
 800970a:	089b      	lsrs	r3, r3, #2
 800970c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	68d9      	ldr	r1, [r3, #12]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	b2da      	uxtb	r2, r3
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800971e:	b2db      	uxtb	r3, r3
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4603      	mov	r3, r0
 8009724:	6978      	ldr	r0, [r7, #20]
 8009726:	f006 f892 	bl	800f84e <USB_WritePacket>

    ep->xfer_buff  += len;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	441a      	add	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	699a      	ldr	r2, [r3, #24]
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	441a      	add	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	4413      	add	r3, r2
 800974a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	b29b      	uxth	r3, r3
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	429a      	cmp	r2, r3
 8009756:	d809      	bhi.n	800976c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	699a      	ldr	r2, [r3, #24]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009760:	429a      	cmp	r2, r3
 8009762:	d203      	bcs.n	800976c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1be      	bne.n	80096ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	695a      	ldr	r2, [r3, #20]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	429a      	cmp	r2, r3
 8009776:	d811      	bhi.n	800979c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	f003 030f 	and.w	r3, r3, #15
 800977e:	2201      	movs	r2, #1
 8009780:	fa02 f303 	lsl.w	r3, r2, r3
 8009784:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	43db      	mvns	r3, r3
 8009792:	6939      	ldr	r1, [r7, #16]
 8009794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009798:	4013      	ands	r3, r2
 800979a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3720      	adds	r7, #32
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
	...

080097a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	333c      	adds	r3, #60	; 0x3c
 80097c0:	3304      	adds	r3, #4
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	f040 80b3 	bne.w	8009946 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f003 0308 	and.w	r3, r3, #8
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d028      	beq.n	800983c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4a70      	ldr	r2, [pc, #448]	; (80099b0 <PCD_EP_OutXfrComplete_int+0x208>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d90e      	bls.n	8009810 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d009      	beq.n	8009810 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009808:	461a      	mov	r2, r3
 800980a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800980e:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f00d f925 	bl	8016a60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6818      	ldr	r0, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009820:	461a      	mov	r2, r3
 8009822:	2101      	movs	r1, #1
 8009824:	f006 fa72 	bl	800fd0c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	4413      	add	r3, r2
 8009830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009834:	461a      	mov	r2, r3
 8009836:	2308      	movs	r3, #8
 8009838:	6093      	str	r3, [r2, #8]
 800983a:	e0b3      	b.n	80099a4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	f003 0320 	and.w	r3, r3, #32
 8009842:	2b00      	cmp	r3, #0
 8009844:	d009      	beq.n	800985a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	4413      	add	r3, r2
 800984e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009852:	461a      	mov	r2, r3
 8009854:	2320      	movs	r3, #32
 8009856:	6093      	str	r3, [r2, #8]
 8009858:	e0a4      	b.n	80099a4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009860:	2b00      	cmp	r3, #0
 8009862:	f040 809f 	bne.w	80099a4 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	4a51      	ldr	r2, [pc, #324]	; (80099b0 <PCD_EP_OutXfrComplete_int+0x208>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d90f      	bls.n	800988e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00a      	beq.n	800988e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009884:	461a      	mov	r2, r3
 8009886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800988a:	6093      	str	r3, [r2, #8]
 800988c:	e08a      	b.n	80099a4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	4613      	mov	r3, r2
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	1a9b      	subs	r3, r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80098a0:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	0159      	lsls	r1, r3, #5
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	440b      	add	r3, r1
 80098aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80098b4:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	4613      	mov	r3, r2
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4403      	add	r3, r0
 80098c4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80098c8:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80098ca:	6879      	ldr	r1, [r7, #4]
 80098cc:	683a      	ldr	r2, [r7, #0]
 80098ce:	4613      	mov	r3, r2
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	1a9b      	subs	r3, r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	440b      	add	r3, r1
 80098d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80098dc:	6819      	ldr	r1, [r3, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	4613      	mov	r3, r2
 80098e4:	00db      	lsls	r3, r3, #3
 80098e6:	1a9b      	subs	r3, r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4403      	add	r3, r0
 80098ec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4419      	add	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	4613      	mov	r3, r2
 80098fa:	00db      	lsls	r3, r3, #3
 80098fc:	1a9b      	subs	r3, r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4403      	add	r3, r0
 8009902:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009906:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f00d f8b8 	bl	8016a84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d144      	bne.n	80099a4 <PCD_EP_OutXfrComplete_int+0x1fc>
 800991a:	6879      	ldr	r1, [r7, #4]
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	4613      	mov	r3, r2
 8009920:	00db      	lsls	r3, r3, #3
 8009922:	1a9b      	subs	r3, r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	440b      	add	r3, r1
 8009928:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d138      	bne.n	80099a4 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6818      	ldr	r0, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800993c:	461a      	mov	r2, r3
 800993e:	2101      	movs	r1, #1
 8009940:	f006 f9e4 	bl	800fd0c <USB_EP0_OutStart>
 8009944:	e02e      	b.n	80099a4 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4a1a      	ldr	r2, [pc, #104]	; (80099b4 <PCD_EP_OutXfrComplete_int+0x20c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d124      	bne.n	8009998 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00a      	beq.n	800996e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009964:	461a      	mov	r2, r3
 8009966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800996a:	6093      	str	r3, [r2, #8]
 800996c:	e01a      	b.n	80099a4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	f003 0320 	and.w	r3, r3, #32
 8009974:	2b00      	cmp	r3, #0
 8009976:	d008      	beq.n	800998a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009984:	461a      	mov	r2, r3
 8009986:	2320      	movs	r3, #32
 8009988:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f00d f877 	bl	8016a84 <HAL_PCD_DataOutStageCallback>
 8009996:	e005      	b.n	80099a4 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	b2db      	uxtb	r3, r3
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f00d f870 	bl	8016a84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	4f54300a 	.word	0x4f54300a
 80099b4:	4f54310a 	.word	0x4f54310a

080099b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	333c      	adds	r3, #60	; 0x3c
 80099d0:	3304      	adds	r3, #4
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d113      	bne.n	8009a16 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4a1f      	ldr	r2, [pc, #124]	; (8009a70 <PCD_EP_OutSetupPacket_int+0xb8>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d922      	bls.n	8009a3c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01d      	beq.n	8009a3c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a12:	6093      	str	r3, [r2, #8]
 8009a14:	e012      	b.n	8009a3c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4a16      	ldr	r2, [pc, #88]	; (8009a74 <PCD_EP_OutSetupPacket_int+0xbc>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d10e      	bne.n	8009a3c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d009      	beq.n	8009a3c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a34:	461a      	mov	r2, r3
 8009a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f00d f80f 	bl	8016a60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	4a0a      	ldr	r2, [pc, #40]	; (8009a70 <PCD_EP_OutSetupPacket_int+0xb8>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d90c      	bls.n	8009a64 <PCD_EP_OutSetupPacket_int+0xac>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d108      	bne.n	8009a64 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	2101      	movs	r1, #1
 8009a60:	f006 f954 	bl	800fd0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	4f54300a 	.word	0x4f54300a
 8009a74:	4f54310a 	.word	0x4f54310a

08009a78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
 8009a84:	4613      	mov	r3, r2
 8009a86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d107      	bne.n	8009aa6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009a96:	883b      	ldrh	r3, [r7, #0]
 8009a98:	0419      	lsls	r1, r3, #16
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8009aa4:	e028      	b.n	8009af8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aac:	0c1b      	lsrs	r3, r3, #16
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73fb      	strb	r3, [r7, #15]
 8009ab8:	e00d      	b.n	8009ad6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	3340      	adds	r3, #64	; 0x40
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	0c1b      	lsrs	r3, r3, #16
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	4413      	add	r3, r2
 8009ace:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	73fb      	strb	r3, [r7, #15]
 8009ad6:	7bfa      	ldrb	r2, [r7, #15]
 8009ad8:	78fb      	ldrb	r3, [r7, #3]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d3ec      	bcc.n	8009aba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009ae0:	883b      	ldrh	r3, [r7, #0]
 8009ae2:	0418      	lsls	r0, r3, #16
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6819      	ldr	r1, [r3, #0]
 8009ae8:	78fb      	ldrb	r3, [r7, #3]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	4302      	orrs	r2, r0
 8009af0:	3340      	adds	r3, #64	; 0x40
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	440b      	add	r3, r1
 8009af6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b083      	sub	sp, #12
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	887a      	ldrh	r2, [r7, #2]
 8009b18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	460b      	mov	r3, r1
 8009b32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e22d      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d075      	beq.n	8009c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009b5e:	4ba3      	ldr	r3, [pc, #652]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f003 030c 	and.w	r3, r3, #12
 8009b66:	2b04      	cmp	r3, #4
 8009b68:	d00c      	beq.n	8009b84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b6a:	4ba0      	ldr	r3, [pc, #640]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009b72:	2b08      	cmp	r3, #8
 8009b74:	d112      	bne.n	8009b9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b76:	4b9d      	ldr	r3, [pc, #628]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b82:	d10b      	bne.n	8009b9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b84:	4b99      	ldr	r3, [pc, #612]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d05b      	beq.n	8009c48 <HAL_RCC_OscConfig+0x108>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d157      	bne.n	8009c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e208      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ba4:	d106      	bne.n	8009bb4 <HAL_RCC_OscConfig+0x74>
 8009ba6:	4b91      	ldr	r3, [pc, #580]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a90      	ldr	r2, [pc, #576]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bb0:	6013      	str	r3, [r2, #0]
 8009bb2:	e01d      	b.n	8009bf0 <HAL_RCC_OscConfig+0xb0>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bbc:	d10c      	bne.n	8009bd8 <HAL_RCC_OscConfig+0x98>
 8009bbe:	4b8b      	ldr	r3, [pc, #556]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a8a      	ldr	r2, [pc, #552]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	4b88      	ldr	r3, [pc, #544]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a87      	ldr	r2, [pc, #540]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bd4:	6013      	str	r3, [r2, #0]
 8009bd6:	e00b      	b.n	8009bf0 <HAL_RCC_OscConfig+0xb0>
 8009bd8:	4b84      	ldr	r3, [pc, #528]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a83      	ldr	r2, [pc, #524]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	4b81      	ldr	r3, [pc, #516]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a80      	ldr	r2, [pc, #512]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d013      	beq.n	8009c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bf8:	f7fc ffda 	bl	8006bb0 <HAL_GetTick>
 8009bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bfe:	e008      	b.n	8009c12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009c00:	f7fc ffd6 	bl	8006bb0 <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	2b64      	cmp	r3, #100	; 0x64
 8009c0c:	d901      	bls.n	8009c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e1cd      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c12:	4b76      	ldr	r3, [pc, #472]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d0f0      	beq.n	8009c00 <HAL_RCC_OscConfig+0xc0>
 8009c1e:	e014      	b.n	8009c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c20:	f7fc ffc6 	bl	8006bb0 <HAL_GetTick>
 8009c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c26:	e008      	b.n	8009c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009c28:	f7fc ffc2 	bl	8006bb0 <HAL_GetTick>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b64      	cmp	r3, #100	; 0x64
 8009c34:	d901      	bls.n	8009c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e1b9      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c3a:	4b6c      	ldr	r3, [pc, #432]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1f0      	bne.n	8009c28 <HAL_RCC_OscConfig+0xe8>
 8009c46:	e000      	b.n	8009c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0302 	and.w	r3, r3, #2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d063      	beq.n	8009d1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009c56:	4b65      	ldr	r3, [pc, #404]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	f003 030c 	and.w	r3, r3, #12
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00b      	beq.n	8009c7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c62:	4b62      	ldr	r3, [pc, #392]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d11c      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c6e:	4b5f      	ldr	r3, [pc, #380]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d116      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c7a:	4b5c      	ldr	r3, [pc, #368]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0302 	and.w	r3, r3, #2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d005      	beq.n	8009c92 <HAL_RCC_OscConfig+0x152>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d001      	beq.n	8009c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e18d      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c92:	4b56      	ldr	r3, [pc, #344]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	4952      	ldr	r1, [pc, #328]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ca6:	e03a      	b.n	8009d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d020      	beq.n	8009cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009cb0:	4b4f      	ldr	r3, [pc, #316]	; (8009df0 <HAL_RCC_OscConfig+0x2b0>)
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cb6:	f7fc ff7b 	bl	8006bb0 <HAL_GetTick>
 8009cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cbc:	e008      	b.n	8009cd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009cbe:	f7fc ff77 	bl	8006bb0 <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d901      	bls.n	8009cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e16e      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cd0:	4b46      	ldr	r3, [pc, #280]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0302 	and.w	r3, r3, #2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d0f0      	beq.n	8009cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cdc:	4b43      	ldr	r3, [pc, #268]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	00db      	lsls	r3, r3, #3
 8009cea:	4940      	ldr	r1, [pc, #256]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009cec:	4313      	orrs	r3, r2
 8009cee:	600b      	str	r3, [r1, #0]
 8009cf0:	e015      	b.n	8009d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cf2:	4b3f      	ldr	r3, [pc, #252]	; (8009df0 <HAL_RCC_OscConfig+0x2b0>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf8:	f7fc ff5a 	bl	8006bb0 <HAL_GetTick>
 8009cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009cfe:	e008      	b.n	8009d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d00:	f7fc ff56 	bl	8006bb0 <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d901      	bls.n	8009d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e14d      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d12:	4b36      	ldr	r3, [pc, #216]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0302 	and.w	r3, r3, #2
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1f0      	bne.n	8009d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0308 	and.w	r3, r3, #8
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d030      	beq.n	8009d8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d016      	beq.n	8009d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d32:	4b30      	ldr	r3, [pc, #192]	; (8009df4 <HAL_RCC_OscConfig+0x2b4>)
 8009d34:	2201      	movs	r2, #1
 8009d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d38:	f7fc ff3a 	bl	8006bb0 <HAL_GetTick>
 8009d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d3e:	e008      	b.n	8009d52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d40:	f7fc ff36 	bl	8006bb0 <HAL_GetTick>
 8009d44:	4602      	mov	r2, r0
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d901      	bls.n	8009d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e12d      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d52:	4b26      	ldr	r3, [pc, #152]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0f0      	beq.n	8009d40 <HAL_RCC_OscConfig+0x200>
 8009d5e:	e015      	b.n	8009d8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d60:	4b24      	ldr	r3, [pc, #144]	; (8009df4 <HAL_RCC_OscConfig+0x2b4>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d66:	f7fc ff23 	bl	8006bb0 <HAL_GetTick>
 8009d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d6c:	e008      	b.n	8009d80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d6e:	f7fc ff1f 	bl	8006bb0 <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d901      	bls.n	8009d80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e116      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d80:	4b1a      	ldr	r3, [pc, #104]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1f0      	bne.n	8009d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 80a0 	beq.w	8009eda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d9e:	4b13      	ldr	r3, [pc, #76]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10f      	bne.n	8009dca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	4b0f      	ldr	r3, [pc, #60]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db2:	4a0e      	ldr	r2, [pc, #56]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009db8:	6413      	str	r3, [r2, #64]	; 0x40
 8009dba:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <HAL_RCC_OscConfig+0x2ac>)
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dca:	4b0b      	ldr	r3, [pc, #44]	; (8009df8 <HAL_RCC_OscConfig+0x2b8>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d121      	bne.n	8009e1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009dd6:	4b08      	ldr	r3, [pc, #32]	; (8009df8 <HAL_RCC_OscConfig+0x2b8>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a07      	ldr	r2, [pc, #28]	; (8009df8 <HAL_RCC_OscConfig+0x2b8>)
 8009ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009de2:	f7fc fee5 	bl	8006bb0 <HAL_GetTick>
 8009de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009de8:	e011      	b.n	8009e0e <HAL_RCC_OscConfig+0x2ce>
 8009dea:	bf00      	nop
 8009dec:	40023800 	.word	0x40023800
 8009df0:	42470000 	.word	0x42470000
 8009df4:	42470e80 	.word	0x42470e80
 8009df8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dfc:	f7fc fed8 	bl	8006bb0 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d901      	bls.n	8009e0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e0cf      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e0e:	4b6a      	ldr	r3, [pc, #424]	; (8009fb8 <HAL_RCC_OscConfig+0x478>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0f0      	beq.n	8009dfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d106      	bne.n	8009e30 <HAL_RCC_OscConfig+0x2f0>
 8009e22:	4b66      	ldr	r3, [pc, #408]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e26:	4a65      	ldr	r2, [pc, #404]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009e28:	f043 0301 	orr.w	r3, r3, #1
 8009e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8009e2e:	e01c      	b.n	8009e6a <HAL_RCC_OscConfig+0x32a>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	2b05      	cmp	r3, #5
 8009e36:	d10c      	bne.n	8009e52 <HAL_RCC_OscConfig+0x312>
 8009e38:	4b60      	ldr	r3, [pc, #384]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3c:	4a5f      	ldr	r2, [pc, #380]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009e3e:	f043 0304 	orr.w	r3, r3, #4
 8009e42:	6713      	str	r3, [r2, #112]	; 0x70
 8009e44:	4b5d      	ldr	r3, [pc, #372]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e48:	4a5c      	ldr	r2, [pc, #368]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009e4a:	f043 0301 	orr.w	r3, r3, #1
 8009e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e50:	e00b      	b.n	8009e6a <HAL_RCC_OscConfig+0x32a>
 8009e52:	4b5a      	ldr	r3, [pc, #360]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e56:	4a59      	ldr	r2, [pc, #356]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009e58:	f023 0301 	bic.w	r3, r3, #1
 8009e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8009e5e:	4b57      	ldr	r3, [pc, #348]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e62:	4a56      	ldr	r2, [pc, #344]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009e64:	f023 0304 	bic.w	r3, r3, #4
 8009e68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d015      	beq.n	8009e9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e72:	f7fc fe9d 	bl	8006bb0 <HAL_GetTick>
 8009e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e78:	e00a      	b.n	8009e90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e7a:	f7fc fe99 	bl	8006bb0 <HAL_GetTick>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d901      	bls.n	8009e90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e08e      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e90:	4b4a      	ldr	r3, [pc, #296]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d0ee      	beq.n	8009e7a <HAL_RCC_OscConfig+0x33a>
 8009e9c:	e014      	b.n	8009ec8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e9e:	f7fc fe87 	bl	8006bb0 <HAL_GetTick>
 8009ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ea4:	e00a      	b.n	8009ebc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ea6:	f7fc fe83 	bl	8006bb0 <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d901      	bls.n	8009ebc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e078      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ebc:	4b3f      	ldr	r3, [pc, #252]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec0:	f003 0302 	and.w	r3, r3, #2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1ee      	bne.n	8009ea6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d105      	bne.n	8009eda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ece:	4b3b      	ldr	r3, [pc, #236]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	4a3a      	ldr	r2, [pc, #232]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ed8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d064      	beq.n	8009fac <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ee2:	4b36      	ldr	r3, [pc, #216]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f003 030c 	and.w	r3, r3, #12
 8009eea:	2b08      	cmp	r3, #8
 8009eec:	d05c      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d141      	bne.n	8009f7a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ef6:	4b32      	ldr	r3, [pc, #200]	; (8009fc0 <HAL_RCC_OscConfig+0x480>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009efc:	f7fc fe58 	bl	8006bb0 <HAL_GetTick>
 8009f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f02:	e008      	b.n	8009f16 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f04:	f7fc fe54 	bl	8006bb0 <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d901      	bls.n	8009f16 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8009f12:	2303      	movs	r3, #3
 8009f14:	e04b      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f16:	4b29      	ldr	r3, [pc, #164]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1f0      	bne.n	8009f04 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	69da      	ldr	r2, [r3, #28]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	019b      	lsls	r3, r3, #6
 8009f32:	431a      	orrs	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f38:	085b      	lsrs	r3, r3, #1
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	041b      	lsls	r3, r3, #16
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f44:	061b      	lsls	r3, r3, #24
 8009f46:	491d      	ldr	r1, [pc, #116]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f4c:	4b1c      	ldr	r3, [pc, #112]	; (8009fc0 <HAL_RCC_OscConfig+0x480>)
 8009f4e:	2201      	movs	r2, #1
 8009f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f52:	f7fc fe2d 	bl	8006bb0 <HAL_GetTick>
 8009f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f58:	e008      	b.n	8009f6c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f5a:	f7fc fe29 	bl	8006bb0 <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d901      	bls.n	8009f6c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e020      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f6c:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0f0      	beq.n	8009f5a <HAL_RCC_OscConfig+0x41a>
 8009f78:	e018      	b.n	8009fac <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f7a:	4b11      	ldr	r3, [pc, #68]	; (8009fc0 <HAL_RCC_OscConfig+0x480>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f80:	f7fc fe16 	bl	8006bb0 <HAL_GetTick>
 8009f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f86:	e008      	b.n	8009f9a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f88:	f7fc fe12 	bl	8006bb0 <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d901      	bls.n	8009f9a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e009      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f9a:	4b08      	ldr	r3, [pc, #32]	; (8009fbc <HAL_RCC_OscConfig+0x47c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1f0      	bne.n	8009f88 <HAL_RCC_OscConfig+0x448>
 8009fa6:	e001      	b.n	8009fac <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e000      	b.n	8009fae <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	40007000 	.word	0x40007000
 8009fbc:	40023800 	.word	0x40023800
 8009fc0:	42470060 	.word	0x42470060

08009fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e0ca      	b.n	800a16e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fd8:	4b67      	ldr	r3, [pc, #412]	; (800a178 <HAL_RCC_ClockConfig+0x1b4>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 030f 	and.w	r3, r3, #15
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d90c      	bls.n	800a000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fe6:	4b64      	ldr	r3, [pc, #400]	; (800a178 <HAL_RCC_ClockConfig+0x1b4>)
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	b2d2      	uxtb	r2, r2
 8009fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fee:	4b62      	ldr	r3, [pc, #392]	; (800a178 <HAL_RCC_ClockConfig+0x1b4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 030f 	and.w	r3, r3, #15
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d001      	beq.n	800a000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e0b6      	b.n	800a16e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0302 	and.w	r3, r3, #2
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d020      	beq.n	800a04e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b00      	cmp	r3, #0
 800a016:	d005      	beq.n	800a024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a018:	4b58      	ldr	r3, [pc, #352]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	4a57      	ldr	r2, [pc, #348]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a01e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0308 	and.w	r3, r3, #8
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d005      	beq.n	800a03c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a030:	4b52      	ldr	r3, [pc, #328]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	4a51      	ldr	r2, [pc, #324]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a03a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a03c:	4b4f      	ldr	r3, [pc, #316]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	494c      	ldr	r1, [pc, #304]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a04a:	4313      	orrs	r3, r2
 800a04c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	d044      	beq.n	800a0e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d107      	bne.n	800a072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a062:	4b46      	ldr	r3, [pc, #280]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d119      	bne.n	800a0a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e07d      	b.n	800a16e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	2b02      	cmp	r3, #2
 800a078:	d003      	beq.n	800a082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d107      	bne.n	800a092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a082:	4b3e      	ldr	r3, [pc, #248]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d109      	bne.n	800a0a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e06d      	b.n	800a16e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a092:	4b3a      	ldr	r3, [pc, #232]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 0302 	and.w	r3, r3, #2
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d101      	bne.n	800a0a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e065      	b.n	800a16e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a0a2:	4b36      	ldr	r3, [pc, #216]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f023 0203 	bic.w	r2, r3, #3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	4933      	ldr	r1, [pc, #204]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a0b4:	f7fc fd7c 	bl	8006bb0 <HAL_GetTick>
 800a0b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0ba:	e00a      	b.n	800a0d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0bc:	f7fc fd78 	bl	8006bb0 <HAL_GetTick>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d901      	bls.n	800a0d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e04d      	b.n	800a16e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0d2:	4b2a      	ldr	r3, [pc, #168]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f003 020c 	and.w	r2, r3, #12
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d1eb      	bne.n	800a0bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a0e4:	4b24      	ldr	r3, [pc, #144]	; (800a178 <HAL_RCC_ClockConfig+0x1b4>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 030f 	and.w	r3, r3, #15
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d20c      	bcs.n	800a10c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0f2:	4b21      	ldr	r3, [pc, #132]	; (800a178 <HAL_RCC_ClockConfig+0x1b4>)
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0fa:	4b1f      	ldr	r3, [pc, #124]	; (800a178 <HAL_RCC_ClockConfig+0x1b4>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 030f 	and.w	r3, r3, #15
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	429a      	cmp	r2, r3
 800a106:	d001      	beq.n	800a10c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e030      	b.n	800a16e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	d008      	beq.n	800a12a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a118:	4b18      	ldr	r3, [pc, #96]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	4915      	ldr	r1, [pc, #84]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a126:	4313      	orrs	r3, r2
 800a128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0308 	and.w	r3, r3, #8
 800a132:	2b00      	cmp	r3, #0
 800a134:	d009      	beq.n	800a14a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a136:	4b11      	ldr	r3, [pc, #68]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	490d      	ldr	r1, [pc, #52]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a146:	4313      	orrs	r3, r2
 800a148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a14a:	f000 f81d 	bl	800a188 <HAL_RCC_GetSysClockFreq>
 800a14e:	4601      	mov	r1, r0
 800a150:	4b0a      	ldr	r3, [pc, #40]	; (800a17c <HAL_RCC_ClockConfig+0x1b8>)
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	091b      	lsrs	r3, r3, #4
 800a156:	f003 030f 	and.w	r3, r3, #15
 800a15a:	4a09      	ldr	r2, [pc, #36]	; (800a180 <HAL_RCC_ClockConfig+0x1bc>)
 800a15c:	5cd3      	ldrb	r3, [r2, r3]
 800a15e:	fa21 f303 	lsr.w	r3, r1, r3
 800a162:	4a08      	ldr	r2, [pc, #32]	; (800a184 <HAL_RCC_ClockConfig+0x1c0>)
 800a164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800a166:	2000      	movs	r0, #0
 800a168:	f7fc fcde 	bl	8006b28 <HAL_InitTick>

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	40023c00 	.word	0x40023c00
 800a17c:	40023800 	.word	0x40023800
 800a180:	0801e418 	.word	0x0801e418
 800a184:	20000170 	.word	0x20000170

0800a188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a18e:	2300      	movs	r3, #0
 800a190:	607b      	str	r3, [r7, #4]
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]
 800a196:	2300      	movs	r3, #0
 800a198:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a19e:	4b50      	ldr	r3, [pc, #320]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f003 030c 	and.w	r3, r3, #12
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d007      	beq.n	800a1ba <HAL_RCC_GetSysClockFreq+0x32>
 800a1aa:	2b08      	cmp	r3, #8
 800a1ac:	d008      	beq.n	800a1c0 <HAL_RCC_GetSysClockFreq+0x38>
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f040 808d 	bne.w	800a2ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a1b4:	4b4b      	ldr	r3, [pc, #300]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a1b6:	60bb      	str	r3, [r7, #8]
       break;
 800a1b8:	e08c      	b.n	800a2d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a1ba:	4b4b      	ldr	r3, [pc, #300]	; (800a2e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a1bc:	60bb      	str	r3, [r7, #8]
      break;
 800a1be:	e089      	b.n	800a2d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a1c0:	4b47      	ldr	r3, [pc, #284]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a1ca:	4b45      	ldr	r3, [pc, #276]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d023      	beq.n	800a21e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1d6:	4b42      	ldr	r3, [pc, #264]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	099b      	lsrs	r3, r3, #6
 800a1dc:	f04f 0400 	mov.w	r4, #0
 800a1e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a1e4:	f04f 0200 	mov.w	r2, #0
 800a1e8:	ea03 0501 	and.w	r5, r3, r1
 800a1ec:	ea04 0602 	and.w	r6, r4, r2
 800a1f0:	4a3d      	ldr	r2, [pc, #244]	; (800a2e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a1f2:	fb02 f106 	mul.w	r1, r2, r6
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	fb02 f205 	mul.w	r2, r2, r5
 800a1fc:	440a      	add	r2, r1
 800a1fe:	493a      	ldr	r1, [pc, #232]	; (800a2e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a200:	fba5 0101 	umull	r0, r1, r5, r1
 800a204:	1853      	adds	r3, r2, r1
 800a206:	4619      	mov	r1, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f04f 0400 	mov.w	r4, #0
 800a20e:	461a      	mov	r2, r3
 800a210:	4623      	mov	r3, r4
 800a212:	f7f6 fd99 	bl	8000d48 <__aeabi_uldivmod>
 800a216:	4603      	mov	r3, r0
 800a218:	460c      	mov	r4, r1
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	e049      	b.n	800a2b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a21e:	4b30      	ldr	r3, [pc, #192]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	099b      	lsrs	r3, r3, #6
 800a224:	f04f 0400 	mov.w	r4, #0
 800a228:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a22c:	f04f 0200 	mov.w	r2, #0
 800a230:	ea03 0501 	and.w	r5, r3, r1
 800a234:	ea04 0602 	and.w	r6, r4, r2
 800a238:	4629      	mov	r1, r5
 800a23a:	4632      	mov	r2, r6
 800a23c:	f04f 0300 	mov.w	r3, #0
 800a240:	f04f 0400 	mov.w	r4, #0
 800a244:	0154      	lsls	r4, r2, #5
 800a246:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a24a:	014b      	lsls	r3, r1, #5
 800a24c:	4619      	mov	r1, r3
 800a24e:	4622      	mov	r2, r4
 800a250:	1b49      	subs	r1, r1, r5
 800a252:	eb62 0206 	sbc.w	r2, r2, r6
 800a256:	f04f 0300 	mov.w	r3, #0
 800a25a:	f04f 0400 	mov.w	r4, #0
 800a25e:	0194      	lsls	r4, r2, #6
 800a260:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a264:	018b      	lsls	r3, r1, #6
 800a266:	1a5b      	subs	r3, r3, r1
 800a268:	eb64 0402 	sbc.w	r4, r4, r2
 800a26c:	f04f 0100 	mov.w	r1, #0
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	00e2      	lsls	r2, r4, #3
 800a276:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a27a:	00d9      	lsls	r1, r3, #3
 800a27c:	460b      	mov	r3, r1
 800a27e:	4614      	mov	r4, r2
 800a280:	195b      	adds	r3, r3, r5
 800a282:	eb44 0406 	adc.w	r4, r4, r6
 800a286:	f04f 0100 	mov.w	r1, #0
 800a28a:	f04f 0200 	mov.w	r2, #0
 800a28e:	02a2      	lsls	r2, r4, #10
 800a290:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a294:	0299      	lsls	r1, r3, #10
 800a296:	460b      	mov	r3, r1
 800a298:	4614      	mov	r4, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	4621      	mov	r1, r4
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f04f 0400 	mov.w	r4, #0
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	4623      	mov	r3, r4
 800a2a8:	f7f6 fd4e 	bl	8000d48 <__aeabi_uldivmod>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a2b2:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	0c1b      	lsrs	r3, r3, #16
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	3301      	adds	r3, #1
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ca:	60bb      	str	r3, [r7, #8]
      break;
 800a2cc:	e002      	b.n	800a2d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a2ce:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a2d0:	60bb      	str	r3, [r7, #8]
      break;
 800a2d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3714      	adds	r7, #20
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	40023800 	.word	0x40023800
 800a2e4:	00f42400 	.word	0x00f42400
 800a2e8:	00b71b00 	.word	0x00b71b00

0800a2ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2f0:	4b03      	ldr	r3, [pc, #12]	; (800a300 <HAL_RCC_GetHCLKFreq+0x14>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	20000170 	.word	0x20000170

0800a304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a308:	f7ff fff0 	bl	800a2ec <HAL_RCC_GetHCLKFreq>
 800a30c:	4601      	mov	r1, r0
 800a30e:	4b05      	ldr	r3, [pc, #20]	; (800a324 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	0a9b      	lsrs	r3, r3, #10
 800a314:	f003 0307 	and.w	r3, r3, #7
 800a318:	4a03      	ldr	r2, [pc, #12]	; (800a328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a31a:	5cd3      	ldrb	r3, [r2, r3]
 800a31c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a320:	4618      	mov	r0, r3
 800a322:	bd80      	pop	{r7, pc}
 800a324:	40023800 	.word	0x40023800
 800a328:	0801e428 	.word	0x0801e428

0800a32c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a330:	f7ff ffdc 	bl	800a2ec <HAL_RCC_GetHCLKFreq>
 800a334:	4601      	mov	r1, r0
 800a336:	4b05      	ldr	r3, [pc, #20]	; (800a34c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	0b5b      	lsrs	r3, r3, #13
 800a33c:	f003 0307 	and.w	r3, r3, #7
 800a340:	4a03      	ldr	r2, [pc, #12]	; (800a350 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a342:	5cd3      	ldrb	r3, [r2, r3]
 800a344:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a348:	4618      	mov	r0, r3
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	40023800 	.word	0x40023800
 800a350:	0801e428 	.word	0x0801e428

0800a354 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a360:	2300      	movs	r3, #0
 800a362:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d105      	bne.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d035      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a37c:	4b62      	ldr	r3, [pc, #392]	; (800a508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a382:	f7fc fc15 	bl	8006bb0 <HAL_GetTick>
 800a386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a388:	e008      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a38a:	f7fc fc11 	bl	8006bb0 <HAL_GetTick>
 800a38e:	4602      	mov	r2, r0
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	2b02      	cmp	r3, #2
 800a396:	d901      	bls.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e0b0      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a39c:	4b5b      	ldr	r3, [pc, #364]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1f0      	bne.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	019a      	lsls	r2, r3, #6
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	071b      	lsls	r3, r3, #28
 800a3b4:	4955      	ldr	r1, [pc, #340]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a3bc:	4b52      	ldr	r3, [pc, #328]	; (800a508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a3be:	2201      	movs	r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a3c2:	f7fc fbf5 	bl	8006bb0 <HAL_GetTick>
 800a3c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a3c8:	e008      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a3ca:	f7fc fbf1 	bl	8006bb0 <HAL_GetTick>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d901      	bls.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e090      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a3dc:	4b4b      	ldr	r3, [pc, #300]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d0f0      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0302 	and.w	r3, r3, #2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 8083 	beq.w	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60fb      	str	r3, [r7, #12]
 800a3fa:	4b44      	ldr	r3, [pc, #272]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	4a43      	ldr	r2, [pc, #268]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a404:	6413      	str	r3, [r2, #64]	; 0x40
 800a406:	4b41      	ldr	r3, [pc, #260]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a412:	4b3f      	ldr	r3, [pc, #252]	; (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a3e      	ldr	r2, [pc, #248]	; (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a41c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a41e:	f7fc fbc7 	bl	8006bb0 <HAL_GetTick>
 800a422:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a424:	e008      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a426:	f7fc fbc3 	bl	8006bb0 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	2b02      	cmp	r3, #2
 800a432:	d901      	bls.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e062      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a438:	4b35      	ldr	r3, [pc, #212]	; (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a440:	2b00      	cmp	r3, #0
 800a442:	d0f0      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a444:	4b31      	ldr	r3, [pc, #196]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a44c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d02f      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d028      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a462:	4b2a      	ldr	r3, [pc, #168]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a46a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a46c:	4b29      	ldr	r3, [pc, #164]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a46e:	2201      	movs	r2, #1
 800a470:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a472:	4b28      	ldr	r3, [pc, #160]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a478:	4a24      	ldr	r2, [pc, #144]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a47e:	4b23      	ldr	r3, [pc, #140]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a482:	f003 0301 	and.w	r3, r3, #1
 800a486:	2b01      	cmp	r3, #1
 800a488:	d114      	bne.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a48a:	f7fc fb91 	bl	8006bb0 <HAL_GetTick>
 800a48e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a490:	e00a      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a492:	f7fc fb8d 	bl	8006bb0 <HAL_GetTick>
 800a496:	4602      	mov	r2, r0
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d901      	bls.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e02a      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4a8:	4b18      	ldr	r3, [pc, #96]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a4aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ac:	f003 0302 	and.w	r3, r3, #2
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0ee      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4c0:	d10d      	bne.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a4c2:	4b12      	ldr	r3, [pc, #72]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a4d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4d6:	490d      	ldr	r1, [pc, #52]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	608b      	str	r3, [r1, #8]
 800a4dc:	e005      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a4de:	4b0b      	ldr	r3, [pc, #44]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	4a0a      	ldr	r2, [pc, #40]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a4e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a4e8:	6093      	str	r3, [r2, #8]
 800a4ea:	4b08      	ldr	r3, [pc, #32]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a4ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4f6:	4905      	ldr	r1, [pc, #20]	; (800a50c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3718      	adds	r7, #24
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	42470068 	.word	0x42470068
 800a50c:	40023800 	.word	0x40023800
 800a510:	40007000 	.word	0x40007000
 800a514:	42470e40 	.word	0x42470e40

0800a518 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d101      	bne.n	800a52a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e083      	b.n	800a632 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	7f5b      	ldrb	r3, [r3, #29]
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b00      	cmp	r3, #0
 800a532:	d105      	bne.n	800a540 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f00b fe02 	bl	8016144 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	22ca      	movs	r2, #202	; 0xca
 800a54c:	625a      	str	r2, [r3, #36]	; 0x24
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2253      	movs	r2, #83	; 0x53
 800a554:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f944 	bl	800a7e4 <RTC_EnterInitMode>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d008      	beq.n	800a574 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	22ff      	movs	r2, #255	; 0xff
 800a568:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2204      	movs	r2, #4
 800a56e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e05e      	b.n	800a632 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	6812      	ldr	r2, [r2, #0]
 800a57e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a586:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6899      	ldr	r1, [r3, #8]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	431a      	orrs	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	431a      	orrs	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	68d2      	ldr	r2, [r2, #12]
 800a5ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6919      	ldr	r1, [r3, #16]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	041a      	lsls	r2, r3, #16
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	430a      	orrs	r2, r1
 800a5c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68da      	ldr	r2, [r3, #12]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f003 0320 	and.w	r3, r3, #32
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10e      	bne.n	800a600 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f8d6 	bl	800a794 <HAL_RTC_WaitForSynchro>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d008      	beq.n	800a600 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	22ff      	movs	r2, #255	; 0xff
 800a5f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2204      	movs	r2, #4
 800a5fa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e018      	b.n	800a632 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a60e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	22ff      	movs	r2, #255	; 0xff
 800a628:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a630:	2300      	movs	r3, #0
  }
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b086      	sub	sp, #24
 800a63e:	af00      	add	r7, sp, #0
 800a640:	60f8      	str	r0, [r7, #12]
 800a642:	60b9      	str	r1, [r7, #8]
 800a644:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a646:	2300      	movs	r3, #0
 800a648:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a66c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a670:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	0c1b      	lsrs	r3, r3, #16
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	0a1b      	lsrs	r3, r3, #8
 800a686:	b2db      	uxtb	r3, r3
 800a688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	b2db      	uxtb	r3, r3
 800a696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	0c1b      	lsrs	r3, r3, #16
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d11a      	bne.n	800a6ec <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 f8be 	bl	800a83c <RTC_Bcd2ToByte>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	785b      	ldrb	r3, [r3, #1]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f8b5 	bl	800a83c <RTC_Bcd2ToByte>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	789b      	ldrb	r3, [r3, #2]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 f8ac 	bl	800a83c <RTC_Bcd2ToByte>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b086      	sub	sp, #24
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	60f8      	str	r0, [r7, #12]
 800a6fe:	60b9      	str	r1, [r7, #8]
 800a700:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a702:	2300      	movs	r3, #0
 800a704:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a710:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a714:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	0c1b      	lsrs	r3, r3, #16
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	0a1b      	lsrs	r3, r3, #8
 800a724:	b2db      	uxtb	r3, r3
 800a726:	f003 031f 	and.w	r3, r3, #31
 800a72a:	b2da      	uxtb	r2, r3
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	0b5b      	lsrs	r3, r3, #13
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 0307 	and.w	r3, r3, #7
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d11a      	bne.n	800a78a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	78db      	ldrb	r3, [r3, #3]
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 f86f 	bl	800a83c <RTC_Bcd2ToByte>
 800a75e:	4603      	mov	r3, r0
 800a760:	461a      	mov	r2, r3
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	785b      	ldrb	r3, [r3, #1]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 f866 	bl	800a83c <RTC_Bcd2ToByte>
 800a770:	4603      	mov	r3, r0
 800a772:	461a      	mov	r2, r3
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	789b      	ldrb	r3, [r3, #2]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 f85d 	bl	800a83c <RTC_Bcd2ToByte>
 800a782:	4603      	mov	r3, r0
 800a784:	461a      	mov	r2, r3
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68da      	ldr	r2, [r3, #12]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a7ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a7b0:	f7fc f9fe 	bl	8006bb0 <HAL_GetTick>
 800a7b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a7b6:	e009      	b.n	800a7cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a7b8:	f7fc f9fa 	bl	8006bb0 <HAL_GetTick>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7c6:	d901      	bls.n	800a7cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e007      	b.n	800a7dc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	f003 0320 	and.w	r3, r3, #32
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0ee      	beq.n	800a7b8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d119      	bne.n	800a832 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f04f 32ff 	mov.w	r2, #4294967295
 800a806:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a808:	f7fc f9d2 	bl	8006bb0 <HAL_GetTick>
 800a80c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a80e:	e009      	b.n	800a824 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a810:	f7fc f9ce 	bl	8006bb0 <HAL_GetTick>
 800a814:	4602      	mov	r2, r0
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a81e:	d901      	bls.n	800a824 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e007      	b.n	800a834 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0ee      	beq.n	800a810 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	4603      	mov	r3, r0
 800a844:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a846:	2300      	movs	r3, #0
 800a848:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a84a:	79fb      	ldrb	r3, [r7, #7]
 800a84c:	091b      	lsrs	r3, r3, #4
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	461a      	mov	r2, r3
 800a852:	4613      	mov	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a85c:	79fb      	ldrb	r3, [r7, #7]
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	b2da      	uxtb	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	b2db      	uxtb	r3, r3
 800a868:	4413      	add	r3, r2
 800a86a:	b2db      	uxtb	r3, r3
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d101      	bne.n	800a88a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e01d      	b.n	800a8c6 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d105      	bne.n	800a8a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f00b fc67 	bl	8016170 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2203      	movs	r2, #3
 800a8a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f810 	bl	800a8d0 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
	...

0800a8d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a8d0:	b5b0      	push	{r4, r5, r7, lr}
 800a8d2:	b08e      	sub	sp, #56	; 0x38
 800a8d4:	af04      	add	r7, sp, #16
 800a8d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a8f0:	2376      	movs	r3, #118	; 0x76
 800a8f2:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681d      	ldr	r5, [r3, #0]
 800a8f8:	466c      	mov	r4, sp
 800a8fa:	f107 0318 	add.w	r3, r7, #24
 800a8fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a902:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a906:	f107 030c 	add.w	r3, r7, #12
 800a90a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a90c:	4628      	mov	r0, r5
 800a90e:	f003 fa53 	bl	800ddb8 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800a912:	4b1c      	ldr	r3, [pc, #112]	; (800a984 <HAL_SD_InitCard+0xb4>)
 800a914:	2200      	movs	r2, #0
 800a916:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f003 fa94 	bl	800de4a <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a922:	4b18      	ldr	r3, [pc, #96]	; (800a984 <HAL_SD_InitCard+0xb4>)
 800a924:	2201      	movs	r2, #1
 800a926:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 800a928:	2002      	movs	r0, #2
 800a92a:	f7fc f94d 	bl	8006bc8 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fffe 	bl	800b930 <SD_PowerON>
 800a934:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00b      	beq.n	800a954 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	431a      	orrs	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e013      	b.n	800a97c <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 ff22 	bl	800b79e <SD_InitCard>
 800a95a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00b      	beq.n	800a97a <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a970:	431a      	orrs	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e000      	b.n	800a97c <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3728      	adds	r7, #40	; 0x28
 800a980:	46bd      	mov	sp, r7
 800a982:	bdb0      	pop	{r4, r5, r7, pc}
 800a984:	422580a0 	.word	0x422580a0

0800a988 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b08c      	sub	sp, #48	; 0x30
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
 800a994:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a996:	2300      	movs	r3, #0
 800a998:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d107      	bne.n	800a9b0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e0ad      	b.n	800ab0c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	f040 80a6 	bne.w	800ab0a <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	441a      	add	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d907      	bls.n	800a9e2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e094      	b.n	800ab0c <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2203      	movs	r2, #3
 800a9e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	6812      	ldr	r2, [r2, #0]
 800a9fc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800aa00:	f043 0302 	orr.w	r3, r3, #2
 800aa04:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0a:	4a42      	ldr	r2, [pc, #264]	; (800ab14 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800aa0c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa12:	4a41      	ldr	r2, [pc, #260]	; (800ab18 <HAL_SD_ReadBlocks_DMA+0x190>)
 800aa14:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3380      	adds	r3, #128	; 0x80
 800aa28:	4619      	mov	r1, r3
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	025b      	lsls	r3, r3, #9
 800aa30:	089b      	lsrs	r3, r3, #2
 800aa32:	f7fc faab 	bl	8006f8c <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800aa36:	4b39      	ldr	r3, [pc, #228]	; (800ab1c <HAL_SD_ReadBlocks_DMA+0x194>)
 800aa38:	2201      	movs	r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d002      	beq.n	800aa4a <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	025b      	lsls	r3, r3, #9
 800aa48:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa4a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4e:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	025b      	lsls	r3, r3, #9
 800aa54:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800aa56:	2390      	movs	r3, #144	; 0x90
 800aa58:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800aa62:	2301      	movs	r3, #1
 800aa64:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f107 0214 	add.w	r2, r7, #20
 800aa6e:	4611      	mov	r1, r2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f003 fa52 	bl	800df1a <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f003 fa77 	bl	800df72 <SDMMC_CmdBlockLength>
 800aa84:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d010      	beq.n	800aaae <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aa94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9c:	431a      	orrs	r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e02e      	b.n	800ab0c <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d90a      	bls.n	800aaca <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2282      	movs	r2, #130	; 0x82
 800aab8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f003 fa9e 	bl	800e002 <SDMMC_CmdReadMultiBlock>
 800aac6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800aac8:	e009      	b.n	800aade <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2281      	movs	r2, #129	; 0x81
 800aace:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6879      	ldr	r1, [r7, #4]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f003 fa6f 	bl	800dfba <SDMMC_CmdReadSingleBlock>
 800aadc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d010      	beq.n	800ab06 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aaec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	431a      	orrs	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e002      	b.n	800ab0c <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	e000      	b.n	800ab0c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800ab0a:	2302      	movs	r3, #2
  }
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3730      	adds	r7, #48	; 0x30
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	0800b5af 	.word	0x0800b5af
 800ab18:	0800b61d 	.word	0x0800b61d
 800ab1c:	4225858c 	.word	0x4225858c

0800ab20 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08c      	sub	sp, #48	; 0x30
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d107      	bne.n	800ab48 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e0ad      	b.n	800aca4 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	f040 80a6 	bne.w	800aca2 <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	441a      	add	r2, r3
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d907      	bls.n	800ab7a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	e094      	b.n	800aca4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2203      	movs	r2, #3
 800ab7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2200      	movs	r2, #0
 800ab88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	6812      	ldr	r2, [r2, #0]
 800ab94:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800ab98:	f043 0302 	orr.w	r3, r3, #2
 800ab9c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba2:	4a42      	ldr	r2, [pc, #264]	; (800acac <HAL_SD_WriteBlocks_DMA+0x18c>)
 800aba4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abaa:	4a41      	ldr	r2, [pc, #260]	; (800acb0 <HAL_SD_WriteBlocks_DMA+0x190>)
 800abac:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb2:	2200      	movs	r2, #0
 800abb4:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d002      	beq.n	800abc4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	025b      	lsls	r3, r3, #9
 800abc2:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800abcc:	4618      	mov	r0, r3
 800abce:	f003 f9d0 	bl	800df72 <SDMMC_CmdBlockLength>
 800abd2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800abd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d010      	beq.n	800abfc <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800abe2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abea:	431a      	orrs	r2, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e053      	b.n	800aca4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d90a      	bls.n	800ac18 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	22a0      	movs	r2, #160	; 0xa0
 800ac06:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6879      	ldr	r1, [r7, #4]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f003 fa3f 	bl	800e092 <SDMMC_CmdWriteMultiBlock>
 800ac14:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ac16:	e009      	b.n	800ac2c <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2290      	movs	r2, #144	; 0x90
 800ac1c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f003 fa10 	bl	800e04a <SDMMC_CmdWriteSingleBlock>
 800ac2a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d010      	beq.n	800ac54 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ac3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	431a      	orrs	r2, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	e027      	b.n	800aca4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ac54:	4b17      	ldr	r3, [pc, #92]	; (800acb4 <HAL_SD_WriteBlocks_DMA+0x194>)
 800ac56:	2201      	movs	r2, #1
 800ac58:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ac5e:	68b9      	ldr	r1, [r7, #8]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3380      	adds	r3, #128	; 0x80
 800ac66:	461a      	mov	r2, r3
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	025b      	lsls	r3, r3, #9
 800ac6c:	089b      	lsrs	r3, r3, #2
 800ac6e:	f7fc f98d 	bl	8006f8c <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ac72:	f04f 33ff 	mov.w	r3, #4294967295
 800ac76:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	025b      	lsls	r3, r3, #9
 800ac7c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ac7e:	2390      	movs	r3, #144	; 0x90
 800ac80:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ac82:	2300      	movs	r3, #0
 800ac84:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f107 0214 	add.w	r2, r7, #20
 800ac96:	4611      	mov	r1, r2
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f003 f93e 	bl	800df1a <SDIO_ConfigData>
    
    return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	e000      	b.n	800aca4 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800aca2:	2302      	movs	r3, #2
  }
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3730      	adds	r7, #48	; 0x30
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	0800b585 	.word	0x0800b585
 800acb0:	0800b61d 	.word	0x0800b61d
 800acb4:	4225858c 	.word	0x4225858c

0800acb8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800acc0:	2300      	movs	r3, #0
 800acc2:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f000 808d 	beq.w	800adee <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acdc:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	6812      	ldr	r2, [r2, #0]
 800ace8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800acec:	f023 0302 	bic.w	r3, r3, #2
 800acf0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf6:	f003 0308 	and.w	r3, r3, #8
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d03a      	beq.n	800ad74 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d105      	bne.n	800ad16 <HAL_SD_IRQHandler+0x5e>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0e:	f003 0320 	and.w	r3, r3, #32
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d011      	beq.n	800ad3a <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f003 f9de 	bl	800e0dc <SDMMC_CmdStopTransfer>
 800ad20:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d008      	beq.n	800ad3a <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f925 	bl	800af84 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ad42:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d105      	bne.n	800ad64 <HAL_SD_IRQHandler+0xac>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5c:	f003 0302 	and.w	r3, r3, #2
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f009 f80f 	bl	8013d88 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800ad6a:	e103      	b.n	800af74 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f009 f801 	bl	8013d74 <HAL_SD_TxCpltCallback>
}
 800ad72:	e0ff      	b.n	800af74 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f000 80f9 	beq.w	800af74 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad86:	f003 0320 	and.w	r3, r3, #32
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d011      	beq.n	800adb2 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f003 f9a2 	bl	800e0dc <SDMMC_CmdStopTransfer>
 800ad98:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d008      	beq.n	800adb2 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	431a      	orrs	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f8e9 	bl	800af84 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f040 80da 	bne.w	800af74 <HAL_SD_IRQHandler+0x2bc>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc4:	f003 0302 	and.w	r3, r3, #2
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f040 80d3 	bne.w	800af74 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f022 0208 	bic.w	r2, r2, #8
 800addc:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f008 ffc4 	bl	8013d74 <HAL_SD_TxCpltCallback>
}
 800adec:	e0c2      	b.n	800af74 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d008      	beq.n	800ae0e <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae04:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 ffef 	bl	800bdea <SD_Write_IT>
}
 800ae0c:	e0b2      	b.n	800af74 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d008      	beq.n	800ae2e <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ae24:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 ffb7 	bl	800bd9a <SD_Read_IT>
}
 800ae2c:	e0a2      	b.n	800af74 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae34:	f240 233a 	movw	r3, #570	; 0x23a
 800ae38:	4013      	ands	r3, r2
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f000 809a 	beq.w	800af74 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae46:	f003 0302 	and.w	r3, r3, #2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d005      	beq.n	800ae5a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae52:	f043 0202 	orr.w	r2, r3, #2
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae60:	f003 0308 	and.w	r3, r3, #8
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6c:	f043 0208 	orr.w	r2, r3, #8
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d005      	beq.n	800ae8e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae86:	f043 0220 	orr.w	r2, r3, #32
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae94:	f003 0310 	and.w	r3, r3, #16
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d005      	beq.n	800aea8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea0:	f043 0210 	orr.w	r2, r3, #16
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d005      	beq.n	800aec2 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeba:	f043 0208 	orr.w	r2, r3, #8
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800aeca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	6812      	ldr	r2, [r2, #0]
 800aed6:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800aeda:	f023 0302 	bic.w	r3, r3, #2
 800aede:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d036      	beq.n	800af5a <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d011      	beq.n	800af18 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef8:	4a20      	ldr	r2, [pc, #128]	; (800af7c <HAL_SD_IRQHandler+0x2c4>)
 800aefa:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af00:	4618      	mov	r0, r3
 800af02:	f7fc f8a3 	bl	800704c <HAL_DMA_Abort_IT>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d033      	beq.n	800af74 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af10:	4618      	mov	r0, r3
 800af12:	f000 fbc8 	bl	800b6a6 <SD_DMATxAbort>
}
 800af16:	e02d      	b.n	800af74 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d011      	beq.n	800af44 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af24:	4a16      	ldr	r2, [pc, #88]	; (800af80 <HAL_SD_IRQHandler+0x2c8>)
 800af26:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fc f88d 	bl	800704c <HAL_DMA_Abort_IT>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d01d      	beq.n	800af74 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 fbf0 	bl	800b722 <SD_DMARxAbort>
}
 800af42:	e017      	b.n	800af74 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f008 ff04 	bl	8013d60 <HAL_SD_AbortCallback>
}
 800af58:	e00c      	b.n	800af74 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5e:	f003 0308 	and.w	r3, r3, #8
 800af62:	2b00      	cmp	r3, #0
 800af64:	d006      	beq.n	800af74 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f808 	bl	800af84 <HAL_SD_ErrorCallback>
}
 800af74:	bf00      	nop
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	0800b6a7 	.word	0x0800b6a7
 800af80:	0800b723 	.word	0x0800b723

0800af84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afaa:	0e1b      	lsrs	r3, r3, #24
 800afac:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	099b      	lsrs	r3, r3, #6
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	f003 0303 	and.w	r3, r3, #3
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	089b      	lsrs	r3, r3, #2
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	f003 030f 	and.w	r3, r3, #15
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	f003 0303 	and.w	r3, r3, #3
 800afd6:	b2da      	uxtb	r2, r3
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afe0:	0c1b      	lsrs	r3, r3, #16
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aff2:	0a1b      	lsrs	r3, r3, #8
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	b2da      	uxtb	r2, r3
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b004:	b2db      	uxtb	r3, r3
 800b006:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b014:	0e1b      	lsrs	r3, r3, #24
 800b016:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	011b      	lsls	r3, r3, #4
 800b01e:	b29a      	uxth	r2, r3
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b028:	0c1b      	lsrs	r3, r3, #16
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	88db      	ldrh	r3, [r3, #6]
 800b032:	b29a      	uxth	r2, r3
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	091b      	lsrs	r3, r3, #4
 800b038:	b29b      	uxth	r3, r3
 800b03a:	f003 030f 	and.w	r3, r3, #15
 800b03e:	b29b      	uxth	r3, r3
 800b040:	4313      	orrs	r3, r2
 800b042:	b29a      	uxth	r2, r3
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	f003 030f 	and.w	r3, r3, #15
 800b050:	b2da      	uxtb	r2, r3
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b05a:	0a1b      	lsrs	r3, r3, #8
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	09db      	lsrs	r3, r3, #7
 800b064:	b2db      	uxtb	r3, r3
 800b066:	f003 0301 	and.w	r3, r3, #1
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	099b      	lsrs	r3, r3, #6
 800b074:	b2db      	uxtb	r3, r3
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	095b      	lsrs	r3, r3, #5
 800b084:	b2db      	uxtb	r3, r3
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	091b      	lsrs	r3, r3, #4
 800b094:	b2db      	uxtb	r3, r3
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f040 8087 	bne.w	800b1be <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	029b      	lsls	r3, r3, #10
 800b0b4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	691a      	ldr	r2, [r3, #16]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d6:	0e1b      	lsrs	r3, r3, #24
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	691a      	ldr	r2, [r3, #16]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	099b      	lsrs	r3, r3, #6
 800b0e4:	f003 0303 	and.w	r3, r3, #3
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	08db      	lsrs	r3, r3, #3
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	f003 0307 	and.w	r3, r3, #7
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	b2db      	uxtb	r3, r3
 800b102:	f003 0307 	and.w	r3, r3, #7
 800b106:	b2da      	uxtb	r2, r3
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b110:	0c1b      	lsrs	r3, r3, #16
 800b112:	b2db      	uxtb	r3, r3
 800b114:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	095b      	lsrs	r3, r3, #5
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	f003 0307 	and.w	r3, r3, #7
 800b120:	b2da      	uxtb	r2, r3
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	089b      	lsrs	r3, r3, #2
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	f003 0307 	and.w	r3, r3, #7
 800b130:	b2da      	uxtb	r2, r3
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	005b      	lsls	r3, r3, #1
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	f003 0306 	and.w	r3, r3, #6
 800b142:	b2da      	uxtb	r2, r3
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b14c:	0a1b      	lsrs	r3, r3, #8
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	7e1b      	ldrb	r3, [r3, #24]
 800b156:	b2da      	uxtb	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	09db      	lsrs	r3, r3, #7
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	b2db      	uxtb	r3, r3
 800b164:	4313      	orrs	r3, r2
 800b166:	b2da      	uxtb	r2, r3
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	691b      	ldr	r3, [r3, #16]
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	7e1b      	ldrb	r3, [r3, #24]
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	3302      	adds	r3, #2
 800b17e:	2201      	movs	r2, #1
 800b180:	fa02 f303 	lsl.w	r3, r2, r3
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b188:	fb02 f203 	mul.w	r2, r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	7a1b      	ldrb	r3, [r3, #8]
 800b194:	b2db      	uxtb	r3, r3
 800b196:	461a      	mov	r2, r3
 800b198:	2301      	movs	r3, #1
 800b19a:	fa03 f202 	lsl.w	r2, r3, r2
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b1aa:	0a52      	lsrs	r2, r2, #9
 800b1ac:	fb02 f203 	mul.w	r2, r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1ba:	661a      	str	r2, [r3, #96]	; 0x60
 800b1bc:	e04d      	b.n	800b25a <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d138      	bne.n	800b238 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	041b      	lsls	r3, r3, #16
 800b1d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1de:	0e1b      	lsrs	r3, r3, #24
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	691a      	ldr	r2, [r3, #16]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	021b      	lsls	r3, r3, #8
 800b1ec:	431a      	orrs	r2, r3
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1f6:	0c1b      	lsrs	r3, r3, #16
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	691a      	ldr	r2, [r3, #16]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	431a      	orrs	r2, r3
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b20c:	0a1b      	lsrs	r3, r3, #8
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	3301      	adds	r3, #1
 800b218:	029a      	lsls	r2, r3, #10
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	655a      	str	r2, [r3, #84]	; 0x54
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b22c:	659a      	str	r2, [r3, #88]	; 0x58
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	661a      	str	r2, [r3, #96]	; 0x60
 800b236:	e010      	b.n	800b25a <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b240:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b246:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e0c1      	b.n	800b3de <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	099b      	lsrs	r3, r3, #6
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	b2da      	uxtb	r2, r3
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	005b      	lsls	r3, r3, #1
 800b270:	b2db      	uxtb	r3, r3
 800b272:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b276:	b2da      	uxtb	r2, r3
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b280:	b2db      	uxtb	r3, r3
 800b282:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	7e9b      	ldrb	r3, [r3, #26]
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	09db      	lsrs	r3, r3, #7
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	b2db      	uxtb	r3, r3
 800b296:	4313      	orrs	r3, r2
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b0:	0e1b      	lsrs	r3, r3, #24
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	09db      	lsrs	r3, r3, #7
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	f003 0301 	and.w	r3, r3, #1
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	095b      	lsrs	r3, r3, #5
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	f003 0303 	and.w	r3, r3, #3
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	089b      	lsrs	r3, r3, #2
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	f003 0307 	and.w	r3, r3, #7
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	f003 030c 	and.w	r3, r3, #12
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fc:	0c1b      	lsrs	r3, r3, #16
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	7fdb      	ldrb	r3, [r3, #31]
 800b306:	b2da      	uxtb	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	099b      	lsrs	r3, r3, #6
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	b2db      	uxtb	r3, r3
 800b314:	4313      	orrs	r3, r2
 800b316:	b2da      	uxtb	r2, r3
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	095b      	lsrs	r3, r3, #5
 800b320:	b2db      	uxtb	r3, r3
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	b2da      	uxtb	r2, r3
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	f003 0301 	and.w	r3, r3, #1
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b34a:	0a1b      	lsrs	r3, r3, #8
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	09db      	lsrs	r3, r3, #7
 800b354:	b2db      	uxtb	r3, r3
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	099b      	lsrs	r3, r3, #6
 800b366:	b2db      	uxtb	r3, r3
 800b368:	f003 0301 	and.w	r3, r3, #1
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	095b      	lsrs	r3, r3, #5
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	091b      	lsrs	r3, r3, #4
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	f003 0301 	and.w	r3, r3, #1
 800b390:	b2da      	uxtb	r2, r3
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	089b      	lsrs	r3, r3, #2
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	f003 0303 	and.w	r3, r3, #3
 800b3a2:	b2da      	uxtb	r2, r3
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	f003 0303 	and.w	r3, r3, #3
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	085b      	lsrs	r3, r3, #1
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3cc:	b2da      	uxtb	r2, r3
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b442:	b5b0      	push	{r4, r5, r7, lr}
 800b444:	b08e      	sub	sp, #56	; 0x38
 800b446:	af04      	add	r7, sp, #16
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b44c:	2300      	movs	r3, #0
 800b44e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2203      	movs	r2, #3
 800b454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d02e      	beq.n	800b4be <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b466:	d106      	bne.n	800b476 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	639a      	str	r2, [r3, #56]	; 0x38
 800b474:	e029      	b.n	800b4ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b47c:	d10a      	bne.n	800b494 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fb28 	bl	800bad4 <SD_WideBus_Enable>
 800b484:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	431a      	orrs	r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	639a      	str	r2, [r3, #56]	; 0x38
 800b492:	e01a      	b.n	800b4ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10a      	bne.n	800b4b0 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fb67 	bl	800bb6e <SD_WideBus_Disable>
 800b4a0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a8:	431a      	orrs	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	639a      	str	r2, [r3, #56]	; 0x38
 800b4ae:	e00c      	b.n	800b4ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	639a      	str	r2, [r3, #56]	; 0x38
 800b4bc:	e005      	b.n	800b4ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00a      	beq.n	800b4e8 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b4da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e024      	b.n	800b532 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	699b      	ldr	r3, [r3, #24]
 800b508:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681d      	ldr	r5, [r3, #0]
 800b50e:	466c      	mov	r4, sp
 800b510:	f107 0318 	add.w	r3, r7, #24
 800b514:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b518:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b51c:	f107 030c 	add.w	r3, r7, #12
 800b520:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b522:	4628      	mov	r0, r5
 800b524:	f002 fc48 	bl	800ddb8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3728      	adds	r7, #40	; 0x28
 800b536:	46bd      	mov	sp, r7
 800b538:	bdb0      	pop	{r4, r5, r7, pc}

0800b53a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b086      	sub	sp, #24
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800b542:	2304      	movs	r3, #4
 800b544:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b546:	2300      	movs	r3, #0
 800b548:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800b54e:	f107 030c 	add.w	r3, r7, #12
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fa93 	bl	800ba80 <SD_SendStatus>
 800b55a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d005      	beq.n	800b56e <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	431a      	orrs	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	0a5b      	lsrs	r3, r3, #9
 800b572:	b2db      	uxtb	r3, r3
 800b574:	f003 030f 	and.w	r3, r3, #15
 800b578:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b5a2:	bf00      	nop
 800b5a4:	3714      	adds	r7, #20
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c4:	2b82      	cmp	r3, #130	; 0x82
 800b5c6:	d111      	bne.n	800b5ec <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f002 fd85 	bl	800e0dc <SDMMC_CmdStopTransfer>
 800b5d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d008      	beq.n	800b5ec <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	431a      	orrs	r2, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f7ff fccc 	bl	800af84 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f022 0208 	bic.w	r2, r2, #8
 800b5fa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b604:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2201      	movs	r2, #1
 800b60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f008 fbba 	bl	8013d88 <HAL_SD_RxCpltCallback>
#endif
}
 800b614:	bf00      	nop
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b628:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b630:	2b01      	cmp	r3, #1
 800b632:	d004      	beq.n	800b63e <SD_DMAError+0x22>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d12c      	bne.n	800b698 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b646:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b656:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b65c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7ff ff68 	bl	800b53a <HAL_SD_GetCardState>
 800b66a:	4603      	mov	r3, r0
 800b66c:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b66e:	7afb      	ldrb	r3, [r7, #11]
 800b670:	2b06      	cmp	r3, #6
 800b672:	d002      	beq.n	800b67a <SD_DMAError+0x5e>
 800b674:	7afb      	ldrb	r3, [r7, #11]
 800b676:	2b05      	cmp	r3, #5
 800b678:	d10a      	bne.n	800b690 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4618      	mov	r0, r3
 800b680:	f002 fd2c 	bl	800e0dc <SDMMC_CmdStopTransfer>
 800b684:	4602      	mov	r2, r0
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68a:	431a      	orrs	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f7ff fc73 	bl	800af84 <HAL_SD_ErrorCallback>
#endif
}
 800b69e:	bf00      	nop
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d002      	beq.n	800b6c2 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d127      	bne.n	800b71a <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f7ff ff35 	bl	800b53a <HAL_SD_GetCardState>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	2b06      	cmp	r3, #6
 800b6e6:	d002      	beq.n	800b6ee <SD_DMATxAbort+0x48>
 800b6e8:	7afb      	ldrb	r3, [r7, #11]
 800b6ea:	2b05      	cmp	r3, #5
 800b6ec:	d115      	bne.n	800b71a <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f002 fcf2 	bl	800e0dc <SDMMC_CmdStopTransfer>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	431a      	orrs	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d003      	beq.n	800b714 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f008 fb27 	bl	8013d60 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800b712:	e002      	b.n	800b71a <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f7ff fc35 	bl	800af84 <HAL_SD_ErrorCallback>
}
 800b71a:	bf00      	nop
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b742:	2b00      	cmp	r3, #0
 800b744:	d127      	bne.n	800b796 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f7ff fef7 	bl	800b53a <HAL_SD_GetCardState>
 800b74c:	4603      	mov	r3, r0
 800b74e:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b75e:	7afb      	ldrb	r3, [r7, #11]
 800b760:	2b06      	cmp	r3, #6
 800b762:	d002      	beq.n	800b76a <SD_DMARxAbort+0x48>
 800b764:	7afb      	ldrb	r3, [r7, #11]
 800b766:	2b05      	cmp	r3, #5
 800b768:	d115      	bne.n	800b796 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4618      	mov	r0, r3
 800b770:	f002 fcb4 	bl	800e0dc <SDMMC_CmdStopTransfer>
 800b774:	4602      	mov	r2, r0
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77a:	431a      	orrs	r2, r3
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b784:	2b00      	cmp	r3, #0
 800b786:	d003      	beq.n	800b790 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f008 fae9 	bl	8013d60 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800b78e:	e002      	b.n	800b796 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f7ff fbf7 	bl	800af84 <HAL_SD_ErrorCallback>
}
 800b796:	bf00      	nop
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b79e:	b5b0      	push	{r4, r5, r7, lr}
 800b7a0:	b094      	sub	sp, #80	; 0x50
 800b7a2:	af04      	add	r7, sp, #16
 800b7a4:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f002 fb57 	bl	800de66 <SDIO_GetPowerState>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d102      	bne.n	800b7c4 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b7be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b7c2:	e0b1      	b.n	800b928 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d02f      	beq.n	800b82c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f002 fd9d 	bl	800e310 <SDMMC_CmdSendCID>
 800b7d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <SD_InitCard+0x44>
    {
      return errorstate;
 800b7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e0:	e0a2      	b.n	800b928 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f002 fb81 	bl	800def0 <SDIO_GetResponse>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2104      	movs	r1, #4
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f002 fb78 	bl	800def0 <SDIO_GetResponse>
 800b800:	4602      	mov	r2, r0
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2108      	movs	r1, #8
 800b80c:	4618      	mov	r0, r3
 800b80e:	f002 fb6f 	bl	800def0 <SDIO_GetResponse>
 800b812:	4602      	mov	r2, r0
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	210c      	movs	r1, #12
 800b81e:	4618      	mov	r0, r3
 800b820:	f002 fb66 	bl	800def0 <SDIO_GetResponse>
 800b824:	4602      	mov	r2, r0
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b830:	2b03      	cmp	r3, #3
 800b832:	d00d      	beq.n	800b850 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f107 020e 	add.w	r2, r7, #14
 800b83c:	4611      	mov	r1, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	f002 fda7 	bl	800e392 <SDMMC_CmdSetRelAdd>
 800b844:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <SD_InitCard+0xb2>
    {
      return errorstate;
 800b84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b84e:	e06b      	b.n	800b928 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b854:	2b03      	cmp	r3, #3
 800b856:	d036      	beq.n	800b8c6 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b858:	89fb      	ldrh	r3, [r7, #14]
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b868:	041b      	lsls	r3, r3, #16
 800b86a:	4619      	mov	r1, r3
 800b86c:	4610      	mov	r0, r2
 800b86e:	f002 fd6f 	bl	800e350 <SDMMC_CmdSendCSD>
 800b872:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <SD_InitCard+0xe0>
    {
      return errorstate;
 800b87a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b87c:	e054      	b.n	800b928 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2100      	movs	r1, #0
 800b884:	4618      	mov	r0, r3
 800b886:	f002 fb33 	bl	800def0 <SDIO_GetResponse>
 800b88a:	4602      	mov	r2, r0
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2104      	movs	r1, #4
 800b896:	4618      	mov	r0, r3
 800b898:	f002 fb2a 	bl	800def0 <SDIO_GetResponse>
 800b89c:	4602      	mov	r2, r0
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2108      	movs	r1, #8
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f002 fb21 	bl	800def0 <SDIO_GetResponse>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	210c      	movs	r1, #12
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f002 fb18 	bl	800def0 <SDIO_GetResponse>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2104      	movs	r1, #4
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f002 fb0f 	bl	800def0 <SDIO_GetResponse>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	0d1a      	lsrs	r2, r3, #20
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800b8da:	f107 0310 	add.w	r3, r7, #16
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7ff fb59 	bl	800af98 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6819      	ldr	r1, [r3, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ee:	041b      	lsls	r3, r3, #16
 800b8f0:	f04f 0400 	mov.w	r4, #0
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	4623      	mov	r3, r4
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	f002 fc13 	bl	800e124 <SDMMC_CmdSelDesel>
 800b8fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b902:	2b00      	cmp	r3, #0
 800b904:	d001      	beq.n	800b90a <SD_InitCard+0x16c>
  {
    return errorstate;
 800b906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b908:	e00e      	b.n	800b928 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681d      	ldr	r5, [r3, #0]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	466c      	mov	r4, sp
 800b912:	f103 0210 	add.w	r2, r3, #16
 800b916:	ca07      	ldmia	r2, {r0, r1, r2}
 800b918:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b91c:	3304      	adds	r3, #4
 800b91e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b920:	4628      	mov	r0, r5
 800b922:	f002 fa49 	bl	800ddb8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3740      	adds	r7, #64	; 0x40
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bdb0      	pop	{r4, r5, r7, pc}

0800b930 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b938:	2300      	movs	r3, #0
 800b93a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b93c:	2300      	movs	r3, #0
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	2300      	movs	r3, #0
 800b942:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b944:	2300      	movs	r3, #0
 800b946:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f002 fc0e 	bl	800e16e <SDMMC_CmdGoIdleState>
 800b952:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <SD_PowerON+0x2e>
  {
    return errorstate;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	e08c      	b.n	800ba78 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4618      	mov	r0, r3
 800b964:	f002 fc23 	bl	800e1ae <SDMMC_CmdOperCond>
 800b968:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d03d      	beq.n	800b9ec <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800b976:	e032      	b.n	800b9de <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	60ba      	str	r2, [r7, #8]
 800b97e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b982:	4293      	cmp	r3, r2
 800b984:	d102      	bne.n	800b98c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b98a:	e075      	b.n	800ba78 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2100      	movs	r1, #0
 800b992:	4618      	mov	r0, r3
 800b994:	f002 fc2c 	bl	800e1f0 <SDMMC_CmdAppCommand>
 800b998:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b9a4:	e068      	b.n	800ba78 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f002 fc43 	bl	800e238 <SDMMC_CmdAppOperCommand>
 800b9b2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d002      	beq.n	800b9c0 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b9be:	e05b      	b.n	800ba78 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f002 fa92 	bl	800def0 <SDIO_GetResponse>
 800b9cc:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	0fdb      	lsrs	r3, r3, #31
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d101      	bne.n	800b9da <SD_PowerON+0xaa>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e000      	b.n	800b9dc <SD_PowerON+0xac>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d0c9      	beq.n	800b978 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	645a      	str	r2, [r3, #68]	; 0x44
 800b9ea:	e044      	b.n	800ba76 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800b9f2:	e031      	b.n	800ba58 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	1c5a      	adds	r2, r3, #1
 800b9f8:	60ba      	str	r2, [r7, #8]
 800b9fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d102      	bne.n	800ba08 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ba02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba06:	e037      	b.n	800ba78 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f002 fbee 	bl	800e1f0 <SDMMC_CmdAppCommand>
 800ba14:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <SD_PowerON+0xf0>
      {
        return errorstate;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	e02b      	b.n	800ba78 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f002 fc05 	bl	800e238 <SDMMC_CmdAppOperCommand>
 800ba2e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <SD_PowerON+0x10a>
      {
        return errorstate;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	e01e      	b.n	800ba78 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2100      	movs	r1, #0
 800ba40:	4618      	mov	r0, r3
 800ba42:	f002 fa55 	bl	800def0 <SDIO_GetResponse>
 800ba46:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	0fdb      	lsrs	r3, r3, #31
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <SD_PowerON+0x124>
 800ba50:	2301      	movs	r3, #1
 800ba52:	e000      	b.n	800ba56 <SD_PowerON+0x126>
 800ba54:	2300      	movs	r3, #0
 800ba56:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d0ca      	beq.n	800b9f4 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d003      	beq.n	800ba70 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	645a      	str	r2, [r3, #68]	; 0x44
 800ba6e:	e002      	b.n	800ba76 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3718      	adds	r7, #24
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d102      	bne.n	800ba9a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800ba94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba98:	e018      	b.n	800bacc <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baa2:	041b      	lsls	r3, r3, #16
 800baa4:	4619      	mov	r1, r3
 800baa6:	4610      	mov	r0, r2
 800baa8:	f002 fc96 	bl	800e3d8 <SDMMC_CmdSendStatus>
 800baac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <SD_SendStatus+0x38>
  {
    return errorstate;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	e009      	b.n	800bacc <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2100      	movs	r1, #0
 800babe:	4618      	mov	r0, r3
 800bac0:	f002 fa16 	bl	800def0 <SDIO_GetResponse>
 800bac4:	4602      	mov	r2, r0
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800badc:	2300      	movs	r3, #0
 800bade:	60fb      	str	r3, [r7, #12]
 800bae0:	2300      	movs	r3, #0
 800bae2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800bae4:	2300      	movs	r3, #0
 800bae6:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2100      	movs	r1, #0
 800baee:	4618      	mov	r0, r3
 800baf0:	f002 f9fe 	bl	800def0 <SDIO_GetResponse>
 800baf4:	4603      	mov	r3, r0
 800baf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bafa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bafe:	d102      	bne.n	800bb06 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bb00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb04:	e02f      	b.n	800bb66 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bb06:	f107 030c 	add.w	r3, r7, #12
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 f87b 	bl	800bc08 <SD_FindSCR>
 800bb12:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	e023      	b.n	800bb66 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d01c      	beq.n	800bb62 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb30:	041b      	lsls	r3, r3, #16
 800bb32:	4619      	mov	r1, r3
 800bb34:	4610      	mov	r0, r2
 800bb36:	f002 fb5b 	bl	800e1f0 <SDMMC_CmdAppCommand>
 800bb3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d001      	beq.n	800bb46 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	e00f      	b.n	800bb66 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2102      	movs	r1, #2
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f002 fb98 	bl	800e282 <SDMMC_CmdBusWidth>
 800bb52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	e003      	b.n	800bb66 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	e001      	b.n	800bb66 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b086      	sub	sp, #24
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bb76:	2300      	movs	r3, #0
 800bb78:	60fb      	str	r3, [r7, #12]
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2100      	movs	r1, #0
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f002 f9b1 	bl	800def0 <SDIO_GetResponse>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb98:	d102      	bne.n	800bba0 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bb9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb9e:	e02f      	b.n	800bc00 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bba0:	f107 030c 	add.w	r3, r7, #12
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f82e 	bl	800bc08 <SD_FindSCR>
 800bbac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	e023      	b.n	800bc00 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d01c      	beq.n	800bbfc <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbca:	041b      	lsls	r3, r3, #16
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4610      	mov	r0, r2
 800bbd0:	f002 fb0e 	bl	800e1f0 <SDMMC_CmdAppCommand>
 800bbd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	e00f      	b.n	800bc00 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f002 fb4b 	bl	800e282 <SDMMC_CmdBusWidth>
 800bbec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d001      	beq.n	800bbf8 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	e003      	b.n	800bc00 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e001      	b.n	800bc00 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bbfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3718      	adds	r7, #24
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bc08:	b590      	push	{r4, r7, lr}
 800bc0a:	b08f      	sub	sp, #60	; 0x3c
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800bc12:	2300      	movs	r3, #0
 800bc14:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800bc16:	f7fa ffcb 	bl	8006bb0 <HAL_GetTick>
 800bc1a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bc20:	2300      	movs	r3, #0
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	2300      	movs	r3, #0
 800bc26:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2108      	movs	r1, #8
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f002 f99f 	bl	800df72 <SDMMC_CmdBlockLength>
 800bc34:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d001      	beq.n	800bc40 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3e:	e0a8      	b.n	800bd92 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc48:	041b      	lsls	r3, r3, #16
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	f002 facf 	bl	800e1f0 <SDMMC_CmdAppCommand>
 800bc52:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800bc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <SD_FindSCR+0x56>
  {
    return errorstate;
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	e099      	b.n	800bd92 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc62:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800bc64:	2308      	movs	r3, #8
 800bc66:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bc68:	2330      	movs	r3, #48	; 0x30
 800bc6a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bc74:	2301      	movs	r3, #1
 800bc76:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f107 0214 	add.w	r2, r7, #20
 800bc80:	4611      	mov	r1, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f002 f949 	bl	800df1a <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f002 fb1c 	bl	800e2ca <SDMMC_CmdSendSCR>
 800bc92:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800bc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d022      	beq.n	800bce0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9c:	e079      	b.n	800bd92 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00e      	beq.n	800bcca <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6819      	ldr	r1, [r3, #0]
 800bcb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	f107 020c 	add.w	r2, r7, #12
 800bcb8:	18d4      	adds	r4, r2, r3
 800bcba:	4608      	mov	r0, r1
 800bcbc:	f002 f8a7 	bl	800de0e <SDIO_ReadFIFO>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	6023      	str	r3, [r4, #0]
      index++;
 800bcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bcca:	f7fa ff71 	bl	8006bb0 <HAL_GetTick>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd8:	d102      	bne.n	800bce0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bcda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcde:	e058      	b.n	800bd92 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bce6:	f240 432a 	movw	r3, #1066	; 0x42a
 800bcea:	4013      	ands	r3, r2
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d0d6      	beq.n	800bc9e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf6:	f003 0308 	and.w	r3, r3, #8
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d005      	beq.n	800bd0a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2208      	movs	r2, #8
 800bd04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bd06:	2308      	movs	r3, #8
 800bd08:	e043      	b.n	800bd92 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd10:	f003 0302 	and.w	r3, r3, #2
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d005      	beq.n	800bd24 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bd20:	2302      	movs	r3, #2
 800bd22:	e036      	b.n	800bd92 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2a:	f003 0320 	and.w	r3, r3, #32
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d005      	beq.n	800bd3e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2220      	movs	r2, #32
 800bd38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800bd3a:	2320      	movs	r3, #32
 800bd3c:	e029      	b.n	800bd92 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800bd46:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	061a      	lsls	r2, r3, #24
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	021b      	lsls	r3, r3, #8
 800bd50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd54:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	0a1b      	lsrs	r3, r3, #8
 800bd5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bd5e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800bd6a:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bd6c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	061a      	lsls	r2, r3, #24
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	021b      	lsls	r3, r3, #8
 800bd76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd7a:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	0a1b      	lsrs	r3, r3, #8
 800bd80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800bd84:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	0e1b      	lsrs	r3, r3, #24
 800bd8a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	373c      	adds	r7, #60	; 0x3c
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd90      	pop	{r4, r7, pc}

0800bd9a <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bd9a:	b590      	push	{r4, r7, lr}
 800bd9c:	b085      	sub	sp, #20
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bda2:	2300      	movs	r3, #0
 800bda4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdaa:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800bdac:	2300      	movs	r3, #0
 800bdae:	60fb      	str	r3, [r7, #12]
 800bdb0:	e00d      	b.n	800bdce <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6819      	ldr	r1, [r3, #0]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	18d4      	adds	r4, r2, r3
 800bdbe:	4608      	mov	r0, r1
 800bdc0:	f002 f825 	bl	800de0e <SDIO_ReadFIFO>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	60fb      	str	r3, [r7, #12]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2b07      	cmp	r3, #7
 800bdd2:	d9ee      	bls.n	800bdb2 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd8:	f103 0220 	add.w	r2, r3, #32
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3714      	adds	r7, #20
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd90      	pop	{r4, r7, pc}

0800bdea <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b084      	sub	sp, #16
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	60fb      	str	r3, [r7, #12]
 800be00:	e00b      	b.n	800be1a <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6818      	ldr	r0, [r3, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	4413      	add	r3, r2
 800be0e:	4619      	mov	r1, r3
 800be10:	f002 f80a 	bl	800de28 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	3301      	adds	r3, #1
 800be18:	60fb      	str	r3, [r7, #12]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2b07      	cmp	r3, #7
 800be1e:	d9f0      	bls.n	800be02 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	f103 0220 	add.w	r2, r3, #32
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d101      	bne.n	800be48 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e056      	b.n	800bef6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d106      	bne.n	800be68 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f00a fa84 	bl	8016370 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2202      	movs	r2, #2
 800be6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	431a      	orrs	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	431a      	orrs	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	691b      	ldr	r3, [r3, #16]
 800be94:	431a      	orrs	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	695b      	ldr	r3, [r3, #20]
 800be9a:	431a      	orrs	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bea4:	431a      	orrs	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	69db      	ldr	r3, [r3, #28]
 800beaa:	431a      	orrs	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6a1b      	ldr	r3, [r3, #32]
 800beb0:	ea42 0103 	orr.w	r1, r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	430a      	orrs	r2, r1
 800bebe:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	699b      	ldr	r3, [r3, #24]
 800bec4:	0c1b      	lsrs	r3, r3, #16
 800bec6:	f003 0104 	and.w	r1, r3, #4
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	430a      	orrs	r2, r1
 800bed4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	69da      	ldr	r2, [r3, #28]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bee4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b088      	sub	sp, #32
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	603b      	str	r3, [r7, #0]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d101      	bne.n	800bf20 <HAL_SPI_Transmit+0x22>
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	e11e      	b.n	800c15e <HAL_SPI_Transmit+0x260>
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf28:	f7fa fe42 	bl	8006bb0 <HAL_GetTick>
 800bf2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bf2e:	88fb      	ldrh	r3, [r7, #6]
 800bf30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d002      	beq.n	800bf44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bf3e:	2302      	movs	r3, #2
 800bf40:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf42:	e103      	b.n	800c14c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d002      	beq.n	800bf50 <HAL_SPI_Transmit+0x52>
 800bf4a:	88fb      	ldrh	r3, [r7, #6]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d102      	bne.n	800bf56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf54:	e0fa      	b.n	800c14c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2203      	movs	r2, #3
 800bf5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	88fa      	ldrh	r2, [r7, #6]
 800bf6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	88fa      	ldrh	r2, [r7, #6]
 800bf74:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf9c:	d107      	bne.n	800bfae <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb8:	2b40      	cmp	r3, #64	; 0x40
 800bfba:	d007      	beq.n	800bfcc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfd4:	d14b      	bne.n	800c06e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d002      	beq.n	800bfe4 <HAL_SPI_Transmit+0xe6>
 800bfde:	8afb      	ldrh	r3, [r7, #22]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d13e      	bne.n	800c062 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe8:	881a      	ldrh	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff4:	1c9a      	adds	r2, r3, #2
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bffe:	b29b      	uxth	r3, r3
 800c000:	3b01      	subs	r3, #1
 800c002:	b29a      	uxth	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c008:	e02b      	b.n	800c062 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	f003 0302 	and.w	r3, r3, #2
 800c014:	2b02      	cmp	r3, #2
 800c016:	d112      	bne.n	800c03e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01c:	881a      	ldrh	r2, [r3, #0]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c028:	1c9a      	adds	r2, r3, #2
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c032:	b29b      	uxth	r3, r3
 800c034:	3b01      	subs	r3, #1
 800c036:	b29a      	uxth	r2, r3
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	86da      	strh	r2, [r3, #54]	; 0x36
 800c03c:	e011      	b.n	800c062 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c03e:	f7fa fdb7 	bl	8006bb0 <HAL_GetTick>
 800c042:	4602      	mov	r2, r0
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d803      	bhi.n	800c056 <HAL_SPI_Transmit+0x158>
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c054:	d102      	bne.n	800c05c <HAL_SPI_Transmit+0x15e>
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d102      	bne.n	800c062 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c060:	e074      	b.n	800c14c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c066:	b29b      	uxth	r3, r3
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1ce      	bne.n	800c00a <HAL_SPI_Transmit+0x10c>
 800c06c:	e04c      	b.n	800c108 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d002      	beq.n	800c07c <HAL_SPI_Transmit+0x17e>
 800c076:	8afb      	ldrh	r3, [r7, #22]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d140      	bne.n	800c0fe <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	330c      	adds	r3, #12
 800c086:	7812      	ldrb	r2, [r2, #0]
 800c088:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c098:	b29b      	uxth	r3, r3
 800c09a:	3b01      	subs	r3, #1
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c0a2:	e02c      	b.n	800c0fe <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	f003 0302 	and.w	r3, r3, #2
 800c0ae:	2b02      	cmp	r3, #2
 800c0b0:	d113      	bne.n	800c0da <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	330c      	adds	r3, #12
 800c0bc:	7812      	ldrb	r2, [r2, #0]
 800c0be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	86da      	strh	r2, [r3, #54]	; 0x36
 800c0d8:	e011      	b.n	800c0fe <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0da:	f7fa fd69 	bl	8006bb0 <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d803      	bhi.n	800c0f2 <HAL_SPI_Transmit+0x1f4>
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f0:	d102      	bne.n	800c0f8 <HAL_SPI_Transmit+0x1fa>
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d102      	bne.n	800c0fe <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c0fc:	e026      	b.n	800c14c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c102:	b29b      	uxth	r3, r3
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1cd      	bne.n	800c0a4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c108:	69ba      	ldr	r2, [r7, #24]
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f000 fa45 	bl	800c59c <SPI_EndRxTxTransaction>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2220      	movs	r2, #32
 800c11c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10a      	bne.n	800c13c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c126:	2300      	movs	r3, #0
 800c128:	613b      	str	r3, [r7, #16]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	613b      	str	r3, [r7, #16]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	613b      	str	r3, [r7, #16]
 800c13a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c144:	2301      	movs	r3, #1
 800c146:	77fb      	strb	r3, [r7, #31]
 800c148:	e000      	b.n	800c14c <HAL_SPI_Transmit+0x24e>
  }

error:
 800c14a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2201      	movs	r2, #1
 800c150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c15c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3720      	adds	r7, #32
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b08c      	sub	sp, #48	; 0x30
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	607a      	str	r2, [r7, #4]
 800c172:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c174:	2301      	movs	r3, #1
 800c176:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c184:	2b01      	cmp	r3, #1
 800c186:	d101      	bne.n	800c18c <HAL_SPI_TransmitReceive+0x26>
 800c188:	2302      	movs	r3, #2
 800c18a:	e18a      	b.n	800c4a2 <HAL_SPI_TransmitReceive+0x33c>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c194:	f7fa fd0c 	bl	8006bb0 <HAL_GetTick>
 800c198:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c1aa:	887b      	ldrh	r3, [r7, #2]
 800c1ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c1ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d00f      	beq.n	800c1d6 <HAL_SPI_TransmitReceive+0x70>
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1bc:	d107      	bne.n	800c1ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d103      	bne.n	800c1ce <HAL_SPI_TransmitReceive+0x68>
 800c1c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1ca:	2b04      	cmp	r3, #4
 800c1cc:	d003      	beq.n	800c1d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c1ce:	2302      	movs	r3, #2
 800c1d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c1d4:	e15b      	b.n	800c48e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d005      	beq.n	800c1e8 <HAL_SPI_TransmitReceive+0x82>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d002      	beq.n	800c1e8 <HAL_SPI_TransmitReceive+0x82>
 800c1e2:	887b      	ldrh	r3, [r7, #2]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d103      	bne.n	800c1f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c1ee:	e14e      	b.n	800c48e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	d003      	beq.n	800c204 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2205      	movs	r2, #5
 800c200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2200      	movs	r2, #0
 800c208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	887a      	ldrh	r2, [r7, #2]
 800c214:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	887a      	ldrh	r2, [r7, #2]
 800c21a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	887a      	ldrh	r2, [r7, #2]
 800c226:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	887a      	ldrh	r2, [r7, #2]
 800c22c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c244:	2b40      	cmp	r3, #64	; 0x40
 800c246:	d007      	beq.n	800c258 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c256:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c260:	d178      	bne.n	800c354 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d002      	beq.n	800c270 <HAL_SPI_TransmitReceive+0x10a>
 800c26a:	8b7b      	ldrh	r3, [r7, #26]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d166      	bne.n	800c33e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c274:	881a      	ldrh	r2, [r3, #0]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c280:	1c9a      	adds	r2, r3, #2
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	3b01      	subs	r3, #1
 800c28e:	b29a      	uxth	r2, r3
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c294:	e053      	b.n	800c33e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	f003 0302 	and.w	r3, r3, #2
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d11b      	bne.n	800c2dc <HAL_SPI_TransmitReceive+0x176>
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d016      	beq.n	800c2dc <HAL_SPI_TransmitReceive+0x176>
 800c2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d113      	bne.n	800c2dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b8:	881a      	ldrh	r2, [r3, #0]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c4:	1c9a      	adds	r2, r3, #2
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d119      	bne.n	800c31e <HAL_SPI_TransmitReceive+0x1b8>
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d014      	beq.n	800c31e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68da      	ldr	r2, [r3, #12]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fe:	b292      	uxth	r2, r2
 800c300:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c306:	1c9a      	adds	r2, r3, #2
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c310:	b29b      	uxth	r3, r3
 800c312:	3b01      	subs	r3, #1
 800c314:	b29a      	uxth	r2, r3
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c31a:	2301      	movs	r3, #1
 800c31c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c31e:	f7fa fc47 	bl	8006bb0 <HAL_GetTick>
 800c322:	4602      	mov	r2, r0
 800c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d807      	bhi.n	800c33e <HAL_SPI_TransmitReceive+0x1d8>
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c334:	d003      	beq.n	800c33e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c336:	2303      	movs	r3, #3
 800c338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c33c:	e0a7      	b.n	800c48e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c342:	b29b      	uxth	r3, r3
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1a6      	bne.n	800c296 <HAL_SPI_TransmitReceive+0x130>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1a1      	bne.n	800c296 <HAL_SPI_TransmitReceive+0x130>
 800c352:	e07c      	b.n	800c44e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <HAL_SPI_TransmitReceive+0x1fc>
 800c35c:	8b7b      	ldrh	r3, [r7, #26]
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d16b      	bne.n	800c43a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	330c      	adds	r3, #12
 800c36c:	7812      	ldrb	r2, [r2, #0]
 800c36e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c374:	1c5a      	adds	r2, r3, #1
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c37e:	b29b      	uxth	r3, r3
 800c380:	3b01      	subs	r3, #1
 800c382:	b29a      	uxth	r2, r3
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c388:	e057      	b.n	800c43a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	f003 0302 	and.w	r3, r3, #2
 800c394:	2b02      	cmp	r3, #2
 800c396:	d11c      	bne.n	800c3d2 <HAL_SPI_TransmitReceive+0x26c>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d017      	beq.n	800c3d2 <HAL_SPI_TransmitReceive+0x26c>
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d114      	bne.n	800c3d2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	330c      	adds	r3, #12
 800c3b2:	7812      	ldrb	r2, [r2, #0]
 800c3b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ba:	1c5a      	adds	r2, r3, #1
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	f003 0301 	and.w	r3, r3, #1
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d119      	bne.n	800c414 <HAL_SPI_TransmitReceive+0x2ae>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d014      	beq.n	800c414 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68da      	ldr	r2, [r3, #12]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f4:	b2d2      	uxtb	r2, r2
 800c3f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fc:	1c5a      	adds	r2, r3, #1
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c406:	b29b      	uxth	r3, r3
 800c408:	3b01      	subs	r3, #1
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c410:	2301      	movs	r3, #1
 800c412:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c414:	f7fa fbcc 	bl	8006bb0 <HAL_GetTick>
 800c418:	4602      	mov	r2, r0
 800c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c420:	429a      	cmp	r2, r3
 800c422:	d803      	bhi.n	800c42c <HAL_SPI_TransmitReceive+0x2c6>
 800c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42a:	d102      	bne.n	800c432 <HAL_SPI_TransmitReceive+0x2cc>
 800c42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d103      	bne.n	800c43a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c432:	2303      	movs	r3, #3
 800c434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c438:	e029      	b.n	800c48e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c43e:	b29b      	uxth	r3, r3
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1a2      	bne.n	800c38a <HAL_SPI_TransmitReceive+0x224>
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c448:	b29b      	uxth	r3, r3
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d19d      	bne.n	800c38a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c44e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c450:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c452:	68f8      	ldr	r0, [r7, #12]
 800c454:	f000 f8a2 	bl	800c59c <SPI_EndRxTxTransaction>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d006      	beq.n	800c46c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2220      	movs	r2, #32
 800c468:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c46a:	e010      	b.n	800c48e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10b      	bne.n	800c48c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c474:	2300      	movs	r3, #0
 800c476:	617b      	str	r3, [r7, #20]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	617b      	str	r3, [r7, #20]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	617b      	str	r3, [r7, #20]
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	e000      	b.n	800c48e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c48c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2201      	movs	r2, #1
 800c492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c49e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3730      	adds	r7, #48	; 0x30
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c4aa:	b480      	push	{r7}
 800c4ac:	b083      	sub	sp, #12
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4b8:	b2db      	uxtb	r3, r3
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	370c      	adds	r7, #12
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b084      	sub	sp, #16
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	60f8      	str	r0, [r7, #12]
 800c4ce:	60b9      	str	r1, [r7, #8]
 800c4d0:	603b      	str	r3, [r7, #0]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c4d6:	e04c      	b.n	800c572 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4de:	d048      	beq.n	800c572 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c4e0:	f7fa fb66 	bl	8006bb0 <HAL_GetTick>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	683a      	ldr	r2, [r7, #0]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d902      	bls.n	800c4f6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d13d      	bne.n	800c572 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	685a      	ldr	r2, [r3, #4]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c504:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c50e:	d111      	bne.n	800c534 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c518:	d004      	beq.n	800c524 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c522:	d107      	bne.n	800c534 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c532:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c53c:	d10f      	bne.n	800c55e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c54c:	601a      	str	r2, [r3, #0]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c55c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c56e:	2303      	movs	r3, #3
 800c570:	e00f      	b.n	800c592 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	689a      	ldr	r2, [r3, #8]
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	4013      	ands	r3, r2
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	429a      	cmp	r2, r3
 800c580:	bf0c      	ite	eq
 800c582:	2301      	moveq	r3, #1
 800c584:	2300      	movne	r3, #0
 800c586:	b2db      	uxtb	r3, r3
 800c588:	461a      	mov	r2, r3
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d1a3      	bne.n	800c4d8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b088      	sub	sp, #32
 800c5a0:	af02      	add	r7, sp, #8
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c5a8:	4b1b      	ldr	r3, [pc, #108]	; (800c618 <SPI_EndRxTxTransaction+0x7c>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a1b      	ldr	r2, [pc, #108]	; (800c61c <SPI_EndRxTxTransaction+0x80>)
 800c5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c5b2:	0d5b      	lsrs	r3, r3, #21
 800c5b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c5b8:	fb02 f303 	mul.w	r3, r2, r3
 800c5bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5c6:	d112      	bne.n	800c5ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	2180      	movs	r1, #128	; 0x80
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f7ff ff77 	bl	800c4c6 <SPI_WaitFlagStateUntilTimeout>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d016      	beq.n	800c60c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5e2:	f043 0220 	orr.w	r2, r3, #32
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c5ea:	2303      	movs	r3, #3
 800c5ec:	e00f      	b.n	800c60e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00a      	beq.n	800c60a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c604:	2b80      	cmp	r3, #128	; 0x80
 800c606:	d0f2      	beq.n	800c5ee <SPI_EndRxTxTransaction+0x52>
 800c608:	e000      	b.n	800c60c <SPI_EndRxTxTransaction+0x70>
        break;
 800c60a:	bf00      	nop
  }

  return HAL_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3718      	adds	r7, #24
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	20000170 	.word	0x20000170
 800c61c:	165e9f81 	.word	0x165e9f81

0800c620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e01d      	b.n	800c66e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d106      	bne.n	800c64c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f009 feda 	bl	8016400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2202      	movs	r2, #2
 800c650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3304      	adds	r3, #4
 800c65c:	4619      	mov	r1, r3
 800c65e:	4610      	mov	r0, r2
 800c660:	f000 fa76 	bl	800cb50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c676:	b480      	push	{r7}
 800c678:	b085      	sub	sp, #20
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2202      	movs	r2, #2
 800c682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	f003 0307 	and.w	r3, r3, #7
 800c690:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2b06      	cmp	r3, #6
 800c696:	d007      	beq.n	800c6a8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f042 0201 	orr.w	r2, r2, #1
 800c6a6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b082      	sub	sp, #8
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d101      	bne.n	800c6d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e01d      	b.n	800c70c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d106      	bne.n	800c6ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f815 	bl	800c714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2202      	movs	r2, #2
 800c6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	f000 fa27 	bl	800cb50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2201      	movs	r2, #1
 800c706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2201      	movs	r2, #1
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 fcf2 	bl	800d124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a15      	ldr	r2, [pc, #84]	; (800c79c <HAL_TIM_PWM_Start+0x74>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d004      	beq.n	800c754 <HAL_TIM_PWM_Start+0x2c>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a14      	ldr	r2, [pc, #80]	; (800c7a0 <HAL_TIM_PWM_Start+0x78>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d101      	bne.n	800c758 <HAL_TIM_PWM_Start+0x30>
 800c754:	2301      	movs	r3, #1
 800c756:	e000      	b.n	800c75a <HAL_TIM_PWM_Start+0x32>
 800c758:	2300      	movs	r3, #0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d007      	beq.n	800c76e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c76c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	f003 0307 	and.w	r3, r3, #7
 800c778:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2b06      	cmp	r3, #6
 800c77e:	d007      	beq.n	800c790 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f042 0201 	orr.w	r2, r2, #1
 800c78e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	40010000 	.word	0x40010000
 800c7a0:	40010400 	.word	0x40010400

0800c7a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	6839      	ldr	r1, [r7, #0]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 fcb4 	bl	800d124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a22      	ldr	r2, [pc, #136]	; (800c84c <HAL_TIM_PWM_Stop+0xa8>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d004      	beq.n	800c7d0 <HAL_TIM_PWM_Stop+0x2c>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a21      	ldr	r2, [pc, #132]	; (800c850 <HAL_TIM_PWM_Stop+0xac>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d101      	bne.n	800c7d4 <HAL_TIM_PWM_Stop+0x30>
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e000      	b.n	800c7d6 <HAL_TIM_PWM_Stop+0x32>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d017      	beq.n	800c80a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	6a1a      	ldr	r2, [r3, #32]
 800c7e0:	f241 1311 	movw	r3, #4369	; 0x1111
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10f      	bne.n	800c80a <HAL_TIM_PWM_Stop+0x66>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6a1a      	ldr	r2, [r3, #32]
 800c7f0:	f240 4344 	movw	r3, #1092	; 0x444
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d107      	bne.n	800c80a <HAL_TIM_PWM_Stop+0x66>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c808:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	6a1a      	ldr	r2, [r3, #32]
 800c810:	f241 1311 	movw	r3, #4369	; 0x1111
 800c814:	4013      	ands	r3, r2
 800c816:	2b00      	cmp	r3, #0
 800c818:	d10f      	bne.n	800c83a <HAL_TIM_PWM_Stop+0x96>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	6a1a      	ldr	r2, [r3, #32]
 800c820:	f240 4344 	movw	r3, #1092	; 0x444
 800c824:	4013      	ands	r3, r2
 800c826:	2b00      	cmp	r3, #0
 800c828:	d107      	bne.n	800c83a <HAL_TIM_PWM_Stop+0x96>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f022 0201 	bic.w	r2, r2, #1
 800c838:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	40010000 	.word	0x40010000
 800c850:	40010400 	.word	0x40010400

0800c854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c866:	2b01      	cmp	r3, #1
 800c868:	d101      	bne.n	800c86e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c86a:	2302      	movs	r3, #2
 800c86c:	e0b4      	b.n	800c9d8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2202      	movs	r2, #2
 800c87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2b0c      	cmp	r3, #12
 800c882:	f200 809f 	bhi.w	800c9c4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c886:	a201      	add	r2, pc, #4	; (adr r2, 800c88c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88c:	0800c8c1 	.word	0x0800c8c1
 800c890:	0800c9c5 	.word	0x0800c9c5
 800c894:	0800c9c5 	.word	0x0800c9c5
 800c898:	0800c9c5 	.word	0x0800c9c5
 800c89c:	0800c901 	.word	0x0800c901
 800c8a0:	0800c9c5 	.word	0x0800c9c5
 800c8a4:	0800c9c5 	.word	0x0800c9c5
 800c8a8:	0800c9c5 	.word	0x0800c9c5
 800c8ac:	0800c943 	.word	0x0800c943
 800c8b0:	0800c9c5 	.word	0x0800c9c5
 800c8b4:	0800c9c5 	.word	0x0800c9c5
 800c8b8:	0800c9c5 	.word	0x0800c9c5
 800c8bc:	0800c983 	.word	0x0800c983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	68b9      	ldr	r1, [r7, #8]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 f9e2 	bl	800cc90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	699a      	ldr	r2, [r3, #24]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f042 0208 	orr.w	r2, r2, #8
 800c8da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	699a      	ldr	r2, [r3, #24]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f022 0204 	bic.w	r2, r2, #4
 800c8ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6999      	ldr	r1, [r3, #24]
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	691a      	ldr	r2, [r3, #16]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	430a      	orrs	r2, r1
 800c8fc:	619a      	str	r2, [r3, #24]
      break;
 800c8fe:	e062      	b.n	800c9c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68b9      	ldr	r1, [r7, #8]
 800c906:	4618      	mov	r0, r3
 800c908:	f000 fa32 	bl	800cd70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	699a      	ldr	r2, [r3, #24]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c91a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	699a      	ldr	r2, [r3, #24]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c92a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6999      	ldr	r1, [r3, #24]
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	021a      	lsls	r2, r3, #8
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	430a      	orrs	r2, r1
 800c93e:	619a      	str	r2, [r3, #24]
      break;
 800c940:	e041      	b.n	800c9c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68b9      	ldr	r1, [r7, #8]
 800c948:	4618      	mov	r0, r3
 800c94a:	f000 fa87 	bl	800ce5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	69da      	ldr	r2, [r3, #28]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f042 0208 	orr.w	r2, r2, #8
 800c95c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	69da      	ldr	r2, [r3, #28]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f022 0204 	bic.w	r2, r2, #4
 800c96c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	69d9      	ldr	r1, [r3, #28]
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	691a      	ldr	r2, [r3, #16]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	430a      	orrs	r2, r1
 800c97e:	61da      	str	r2, [r3, #28]
      break;
 800c980:	e021      	b.n	800c9c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68b9      	ldr	r1, [r7, #8]
 800c988:	4618      	mov	r0, r3
 800c98a:	f000 fadb 	bl	800cf44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	69da      	ldr	r2, [r3, #28]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c99c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	69da      	ldr	r2, [r3, #28]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	69d9      	ldr	r1, [r3, #28]
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	691b      	ldr	r3, [r3, #16]
 800c9b8:	021a      	lsls	r2, r3, #8
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	61da      	str	r2, [r3, #28]
      break;
 800c9c2:	e000      	b.n	800c9c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c9c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d101      	bne.n	800c9f8 <HAL_TIM_ConfigClockSource+0x18>
 800c9f4:	2302      	movs	r3, #2
 800c9f6:	e0a6      	b.n	800cb46 <HAL_TIM_ConfigClockSource+0x166>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2202      	movs	r2, #2
 800ca04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ca16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b40      	cmp	r3, #64	; 0x40
 800ca2e:	d067      	beq.n	800cb00 <HAL_TIM_ConfigClockSource+0x120>
 800ca30:	2b40      	cmp	r3, #64	; 0x40
 800ca32:	d80b      	bhi.n	800ca4c <HAL_TIM_ConfigClockSource+0x6c>
 800ca34:	2b10      	cmp	r3, #16
 800ca36:	d073      	beq.n	800cb20 <HAL_TIM_ConfigClockSource+0x140>
 800ca38:	2b10      	cmp	r3, #16
 800ca3a:	d802      	bhi.n	800ca42 <HAL_TIM_ConfigClockSource+0x62>
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d06f      	beq.n	800cb20 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ca40:	e078      	b.n	800cb34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ca42:	2b20      	cmp	r3, #32
 800ca44:	d06c      	beq.n	800cb20 <HAL_TIM_ConfigClockSource+0x140>
 800ca46:	2b30      	cmp	r3, #48	; 0x30
 800ca48:	d06a      	beq.n	800cb20 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ca4a:	e073      	b.n	800cb34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ca4c:	2b70      	cmp	r3, #112	; 0x70
 800ca4e:	d00d      	beq.n	800ca6c <HAL_TIM_ConfigClockSource+0x8c>
 800ca50:	2b70      	cmp	r3, #112	; 0x70
 800ca52:	d804      	bhi.n	800ca5e <HAL_TIM_ConfigClockSource+0x7e>
 800ca54:	2b50      	cmp	r3, #80	; 0x50
 800ca56:	d033      	beq.n	800cac0 <HAL_TIM_ConfigClockSource+0xe0>
 800ca58:	2b60      	cmp	r3, #96	; 0x60
 800ca5a:	d041      	beq.n	800cae0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ca5c:	e06a      	b.n	800cb34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ca5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca62:	d066      	beq.n	800cb32 <HAL_TIM_ConfigClockSource+0x152>
 800ca64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca68:	d017      	beq.n	800ca9a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ca6a:	e063      	b.n	800cb34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6818      	ldr	r0, [r3, #0]
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	6899      	ldr	r1, [r3, #8]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	685a      	ldr	r2, [r3, #4]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	f000 fb32 	bl	800d0e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	609a      	str	r2, [r3, #8]
      break;
 800ca98:	e04c      	b.n	800cb34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6818      	ldr	r0, [r3, #0]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	6899      	ldr	r1, [r3, #8]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	685a      	ldr	r2, [r3, #4]
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	f000 fb1b 	bl	800d0e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	689a      	ldr	r2, [r3, #8]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cabc:	609a      	str	r2, [r3, #8]
      break;
 800cabe:	e039      	b.n	800cb34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6818      	ldr	r0, [r3, #0]
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	6859      	ldr	r1, [r3, #4]
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	461a      	mov	r2, r3
 800cace:	f000 fa8f 	bl	800cff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2150      	movs	r1, #80	; 0x50
 800cad8:	4618      	mov	r0, r3
 800cada:	f000 fae8 	bl	800d0ae <TIM_ITRx_SetConfig>
      break;
 800cade:	e029      	b.n	800cb34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6818      	ldr	r0, [r3, #0]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	6859      	ldr	r1, [r3, #4]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	461a      	mov	r2, r3
 800caee:	f000 faae 	bl	800d04e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2160      	movs	r1, #96	; 0x60
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 fad8 	bl	800d0ae <TIM_ITRx_SetConfig>
      break;
 800cafe:	e019      	b.n	800cb34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6818      	ldr	r0, [r3, #0]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	6859      	ldr	r1, [r3, #4]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	f000 fa6f 	bl	800cff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2140      	movs	r1, #64	; 0x40
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f000 fac8 	bl	800d0ae <TIM_ITRx_SetConfig>
      break;
 800cb1e:	e009      	b.n	800cb34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4619      	mov	r1, r3
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	f000 fabf 	bl	800d0ae <TIM_ITRx_SetConfig>
      break;
 800cb30:	e000      	b.n	800cb34 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800cb32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2201      	movs	r2, #1
 800cb38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
	...

0800cb50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a40      	ldr	r2, [pc, #256]	; (800cc64 <TIM_Base_SetConfig+0x114>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d013      	beq.n	800cb90 <TIM_Base_SetConfig+0x40>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb6e:	d00f      	beq.n	800cb90 <TIM_Base_SetConfig+0x40>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4a3d      	ldr	r2, [pc, #244]	; (800cc68 <TIM_Base_SetConfig+0x118>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d00b      	beq.n	800cb90 <TIM_Base_SetConfig+0x40>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a3c      	ldr	r2, [pc, #240]	; (800cc6c <TIM_Base_SetConfig+0x11c>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d007      	beq.n	800cb90 <TIM_Base_SetConfig+0x40>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a3b      	ldr	r2, [pc, #236]	; (800cc70 <TIM_Base_SetConfig+0x120>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d003      	beq.n	800cb90 <TIM_Base_SetConfig+0x40>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a3a      	ldr	r2, [pc, #232]	; (800cc74 <TIM_Base_SetConfig+0x124>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d108      	bne.n	800cba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a2f      	ldr	r2, [pc, #188]	; (800cc64 <TIM_Base_SetConfig+0x114>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d02b      	beq.n	800cc02 <TIM_Base_SetConfig+0xb2>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbb0:	d027      	beq.n	800cc02 <TIM_Base_SetConfig+0xb2>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a2c      	ldr	r2, [pc, #176]	; (800cc68 <TIM_Base_SetConfig+0x118>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d023      	beq.n	800cc02 <TIM_Base_SetConfig+0xb2>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a2b      	ldr	r2, [pc, #172]	; (800cc6c <TIM_Base_SetConfig+0x11c>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d01f      	beq.n	800cc02 <TIM_Base_SetConfig+0xb2>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a2a      	ldr	r2, [pc, #168]	; (800cc70 <TIM_Base_SetConfig+0x120>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d01b      	beq.n	800cc02 <TIM_Base_SetConfig+0xb2>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a29      	ldr	r2, [pc, #164]	; (800cc74 <TIM_Base_SetConfig+0x124>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d017      	beq.n	800cc02 <TIM_Base_SetConfig+0xb2>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a28      	ldr	r2, [pc, #160]	; (800cc78 <TIM_Base_SetConfig+0x128>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d013      	beq.n	800cc02 <TIM_Base_SetConfig+0xb2>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4a27      	ldr	r2, [pc, #156]	; (800cc7c <TIM_Base_SetConfig+0x12c>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d00f      	beq.n	800cc02 <TIM_Base_SetConfig+0xb2>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a26      	ldr	r2, [pc, #152]	; (800cc80 <TIM_Base_SetConfig+0x130>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d00b      	beq.n	800cc02 <TIM_Base_SetConfig+0xb2>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a25      	ldr	r2, [pc, #148]	; (800cc84 <TIM_Base_SetConfig+0x134>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d007      	beq.n	800cc02 <TIM_Base_SetConfig+0xb2>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a24      	ldr	r2, [pc, #144]	; (800cc88 <TIM_Base_SetConfig+0x138>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d003      	beq.n	800cc02 <TIM_Base_SetConfig+0xb2>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a23      	ldr	r2, [pc, #140]	; (800cc8c <TIM_Base_SetConfig+0x13c>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d108      	bne.n	800cc14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	695b      	ldr	r3, [r3, #20]
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	689a      	ldr	r2, [r3, #8]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4a0a      	ldr	r2, [pc, #40]	; (800cc64 <TIM_Base_SetConfig+0x114>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d003      	beq.n	800cc48 <TIM_Base_SetConfig+0xf8>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a0c      	ldr	r2, [pc, #48]	; (800cc74 <TIM_Base_SetConfig+0x124>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d103      	bne.n	800cc50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	691a      	ldr	r2, [r3, #16]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	615a      	str	r2, [r3, #20]
}
 800cc56:	bf00      	nop
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	40010000 	.word	0x40010000
 800cc68:	40000400 	.word	0x40000400
 800cc6c:	40000800 	.word	0x40000800
 800cc70:	40000c00 	.word	0x40000c00
 800cc74:	40010400 	.word	0x40010400
 800cc78:	40014000 	.word	0x40014000
 800cc7c:	40014400 	.word	0x40014400
 800cc80:	40014800 	.word	0x40014800
 800cc84:	40001800 	.word	0x40001800
 800cc88:	40001c00 	.word	0x40001c00
 800cc8c:	40002000 	.word	0x40002000

0800cc90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b087      	sub	sp, #28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6a1b      	ldr	r3, [r3, #32]
 800cc9e:	f023 0201 	bic.w	r2, r3, #1
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f023 0303 	bic.w	r3, r3, #3
 800ccc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	f023 0302 	bic.w	r3, r3, #2
 800ccd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	697a      	ldr	r2, [r7, #20]
 800cce0:	4313      	orrs	r3, r2
 800cce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a20      	ldr	r2, [pc, #128]	; (800cd68 <TIM_OC1_SetConfig+0xd8>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d003      	beq.n	800ccf4 <TIM_OC1_SetConfig+0x64>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4a1f      	ldr	r2, [pc, #124]	; (800cd6c <TIM_OC1_SetConfig+0xdc>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d10c      	bne.n	800cd0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	f023 0308 	bic.w	r3, r3, #8
 800ccfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	697a      	ldr	r2, [r7, #20]
 800cd02:	4313      	orrs	r3, r2
 800cd04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	f023 0304 	bic.w	r3, r3, #4
 800cd0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	4a15      	ldr	r2, [pc, #84]	; (800cd68 <TIM_OC1_SetConfig+0xd8>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d003      	beq.n	800cd1e <TIM_OC1_SetConfig+0x8e>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	4a14      	ldr	r2, [pc, #80]	; (800cd6c <TIM_OC1_SetConfig+0xdc>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d111      	bne.n	800cd42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	695b      	ldr	r3, [r3, #20]
 800cd32:	693a      	ldr	r2, [r7, #16]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	699b      	ldr	r3, [r3, #24]
 800cd3c:	693a      	ldr	r2, [r7, #16]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	68fa      	ldr	r2, [r7, #12]
 800cd4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	685a      	ldr	r2, [r3, #4]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	697a      	ldr	r2, [r7, #20]
 800cd5a:	621a      	str	r2, [r3, #32]
}
 800cd5c:	bf00      	nop
 800cd5e:	371c      	adds	r7, #28
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr
 800cd68:	40010000 	.word	0x40010000
 800cd6c:	40010400 	.word	0x40010400

0800cd70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b087      	sub	sp, #28
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	f023 0210 	bic.w	r2, r3, #16
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a1b      	ldr	r3, [r3, #32]
 800cd8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cda6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	021b      	lsls	r3, r3, #8
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	f023 0320 	bic.w	r3, r3, #32
 800cdba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	011b      	lsls	r3, r3, #4
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4a22      	ldr	r2, [pc, #136]	; (800ce54 <TIM_OC2_SetConfig+0xe4>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d003      	beq.n	800cdd8 <TIM_OC2_SetConfig+0x68>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	4a21      	ldr	r2, [pc, #132]	; (800ce58 <TIM_OC2_SetConfig+0xe8>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d10d      	bne.n	800cdf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	011b      	lsls	r3, r3, #4
 800cde6:	697a      	ldr	r2, [r7, #20]
 800cde8:	4313      	orrs	r3, r2
 800cdea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4a17      	ldr	r2, [pc, #92]	; (800ce54 <TIM_OC2_SetConfig+0xe4>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d003      	beq.n	800ce04 <TIM_OC2_SetConfig+0x94>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4a16      	ldr	r2, [pc, #88]	; (800ce58 <TIM_OC2_SetConfig+0xe8>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d113      	bne.n	800ce2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	695b      	ldr	r3, [r3, #20]
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	699b      	ldr	r3, [r3, #24]
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	697a      	ldr	r2, [r7, #20]
 800ce44:	621a      	str	r2, [r3, #32]
}
 800ce46:	bf00      	nop
 800ce48:	371c      	adds	r7, #28
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	40010000 	.word	0x40010000
 800ce58:	40010400 	.word	0x40010400

0800ce5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b087      	sub	sp, #28
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a1b      	ldr	r3, [r3, #32]
 800ce76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	69db      	ldr	r3, [r3, #28]
 800ce82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f023 0303 	bic.w	r3, r3, #3
 800ce92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	021b      	lsls	r3, r3, #8
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4a21      	ldr	r2, [pc, #132]	; (800cf3c <TIM_OC3_SetConfig+0xe0>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d003      	beq.n	800cec2 <TIM_OC3_SetConfig+0x66>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4a20      	ldr	r2, [pc, #128]	; (800cf40 <TIM_OC3_SetConfig+0xe4>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d10d      	bne.n	800cede <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	021b      	lsls	r3, r3, #8
 800ced0:	697a      	ldr	r2, [r7, #20]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cedc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4a16      	ldr	r2, [pc, #88]	; (800cf3c <TIM_OC3_SetConfig+0xe0>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d003      	beq.n	800ceee <TIM_OC3_SetConfig+0x92>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4a15      	ldr	r2, [pc, #84]	; (800cf40 <TIM_OC3_SetConfig+0xe4>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d113      	bne.n	800cf16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cefc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	695b      	ldr	r3, [r3, #20]
 800cf02:	011b      	lsls	r3, r3, #4
 800cf04:	693a      	ldr	r2, [r7, #16]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	699b      	ldr	r3, [r3, #24]
 800cf0e:	011b      	lsls	r3, r3, #4
 800cf10:	693a      	ldr	r2, [r7, #16]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	685a      	ldr	r2, [r3, #4]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	621a      	str	r2, [r3, #32]
}
 800cf30:	bf00      	nop
 800cf32:	371c      	adds	r7, #28
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr
 800cf3c:	40010000 	.word	0x40010000
 800cf40:	40010400 	.word	0x40010400

0800cf44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
 800cf5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	69db      	ldr	r3, [r3, #28]
 800cf6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	021b      	lsls	r3, r3, #8
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	031b      	lsls	r3, r3, #12
 800cf96:	693a      	ldr	r2, [r7, #16]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	4a12      	ldr	r2, [pc, #72]	; (800cfe8 <TIM_OC4_SetConfig+0xa4>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d003      	beq.n	800cfac <TIM_OC4_SetConfig+0x68>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	4a11      	ldr	r2, [pc, #68]	; (800cfec <TIM_OC4_SetConfig+0xa8>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d109      	bne.n	800cfc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cfb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	695b      	ldr	r3, [r3, #20]
 800cfb8:	019b      	lsls	r3, r3, #6
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	697a      	ldr	r2, [r7, #20]
 800cfc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	685a      	ldr	r2, [r3, #4]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	693a      	ldr	r2, [r7, #16]
 800cfd8:	621a      	str	r2, [r3, #32]
}
 800cfda:	bf00      	nop
 800cfdc:	371c      	adds	r7, #28
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	40010000 	.word	0x40010000
 800cfec:	40010400 	.word	0x40010400

0800cff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b087      	sub	sp, #28
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	6a1b      	ldr	r3, [r3, #32]
 800d000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	6a1b      	ldr	r3, [r3, #32]
 800d006:	f023 0201 	bic.w	r2, r3, #1
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	699b      	ldr	r3, [r3, #24]
 800d012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d01a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	011b      	lsls	r3, r3, #4
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	4313      	orrs	r3, r2
 800d024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	f023 030a 	bic.w	r3, r3, #10
 800d02c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	4313      	orrs	r3, r2
 800d034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	693a      	ldr	r2, [r7, #16]
 800d03a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	697a      	ldr	r2, [r7, #20]
 800d040:	621a      	str	r2, [r3, #32]
}
 800d042:	bf00      	nop
 800d044:	371c      	adds	r7, #28
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d04e:	b480      	push	{r7}
 800d050:	b087      	sub	sp, #28
 800d052:	af00      	add	r7, sp, #0
 800d054:	60f8      	str	r0, [r7, #12]
 800d056:	60b9      	str	r1, [r7, #8]
 800d058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6a1b      	ldr	r3, [r3, #32]
 800d05e:	f023 0210 	bic.w	r2, r3, #16
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6a1b      	ldr	r3, [r3, #32]
 800d070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	031b      	lsls	r3, r3, #12
 800d07e:	697a      	ldr	r2, [r7, #20]
 800d080:	4313      	orrs	r3, r2
 800d082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d08a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	011b      	lsls	r3, r3, #4
 800d090:	693a      	ldr	r2, [r7, #16]
 800d092:	4313      	orrs	r3, r2
 800d094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	697a      	ldr	r2, [r7, #20]
 800d09a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	693a      	ldr	r2, [r7, #16]
 800d0a0:	621a      	str	r2, [r3, #32]
}
 800d0a2:	bf00      	nop
 800d0a4:	371c      	adds	r7, #28
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr

0800d0ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	b085      	sub	sp, #20
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	f043 0307 	orr.w	r3, r3, #7
 800d0d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	609a      	str	r2, [r3, #8]
}
 800d0d8:	bf00      	nop
 800d0da:	3714      	adds	r7, #20
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b087      	sub	sp, #28
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	021a      	lsls	r2, r3, #8
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	431a      	orrs	r2, r3
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	4313      	orrs	r3, r2
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	4313      	orrs	r3, r2
 800d110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	609a      	str	r2, [r3, #8]
}
 800d118:	bf00      	nop
 800d11a:	371c      	adds	r7, #28
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d124:	b480      	push	{r7}
 800d126:	b087      	sub	sp, #28
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	f003 031f 	and.w	r3, r3, #31
 800d136:	2201      	movs	r2, #1
 800d138:	fa02 f303 	lsl.w	r3, r2, r3
 800d13c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6a1a      	ldr	r2, [r3, #32]
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	43db      	mvns	r3, r3
 800d146:	401a      	ands	r2, r3
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6a1a      	ldr	r2, [r3, #32]
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	f003 031f 	and.w	r3, r3, #31
 800d156:	6879      	ldr	r1, [r7, #4]
 800d158:	fa01 f303 	lsl.w	r3, r1, r3
 800d15c:	431a      	orrs	r2, r3
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	621a      	str	r2, [r3, #32]
}
 800d162:	bf00      	nop
 800d164:	371c      	adds	r7, #28
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr

0800d16e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d16e:	b480      	push	{r7}
 800d170:	b085      	sub	sp, #20
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d101      	bne.n	800d186 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d182:	2302      	movs	r3, #2
 800d184:	e032      	b.n	800d1ec <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2201      	movs	r2, #1
 800d18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2202      	movs	r2, #2
 800d192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	689b      	ldr	r3, [r3, #8]
 800d1a4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1be:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	68ba      	ldr	r2, [r7, #8]
 800d1d8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3714      	adds	r7, #20
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d101      	bne.n	800d20a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	e03f      	b.n	800d28a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d210:	b2db      	uxtb	r3, r3
 800d212:	2b00      	cmp	r3, #0
 800d214:	d106      	bne.n	800d224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f009 f99c 	bl	801655c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2224      	movs	r2, #36	; 0x24
 800d228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	68da      	ldr	r2, [r3, #12]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d23a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fbb1 	bl	800d9a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	691a      	ldr	r2, [r3, #16]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	695a      	ldr	r2, [r3, #20]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	68da      	ldr	r2, [r3, #12]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2220      	movs	r2, #32
 800d27c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2220      	movs	r2, #32
 800d284:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d288:	2300      	movs	r3, #0
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b088      	sub	sp, #32
 800d296:	af02      	add	r7, sp, #8
 800d298:	60f8      	str	r0, [r7, #12]
 800d29a:	60b9      	str	r1, [r7, #8]
 800d29c:	603b      	str	r3, [r7, #0]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2b20      	cmp	r3, #32
 800d2b0:	f040 8083 	bne.w	800d3ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <HAL_UART_Transmit+0x2e>
 800d2ba:	88fb      	ldrh	r3, [r7, #6]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d101      	bne.n	800d2c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e07b      	b.n	800d3bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d101      	bne.n	800d2d2 <HAL_UART_Transmit+0x40>
 800d2ce:	2302      	movs	r3, #2
 800d2d0:	e074      	b.n	800d3bc <HAL_UART_Transmit+0x12a>
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2221      	movs	r2, #33	; 0x21
 800d2e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800d2e8:	f7f9 fc62 	bl	8006bb0 <HAL_GetTick>
 800d2ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	88fa      	ldrh	r2, [r7, #6]
 800d2f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	88fa      	ldrh	r2, [r7, #6]
 800d2f8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d2fa:	e042      	b.n	800d382 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d300:	b29b      	uxth	r3, r3
 800d302:	3b01      	subs	r3, #1
 800d304:	b29a      	uxth	r2, r3
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d312:	d122      	bne.n	800d35a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	9300      	str	r3, [sp, #0]
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	2200      	movs	r2, #0
 800d31c:	2180      	movs	r1, #128	; 0x80
 800d31e:	68f8      	ldr	r0, [r7, #12]
 800d320:	f000 f9d4 	bl	800d6cc <UART_WaitOnFlagUntilTimeout>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d001      	beq.n	800d32e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800d32a:	2303      	movs	r3, #3
 800d32c:	e046      	b.n	800d3bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	461a      	mov	r2, r3
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d340:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d103      	bne.n	800d352 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	3302      	adds	r3, #2
 800d34e:	60bb      	str	r3, [r7, #8]
 800d350:	e017      	b.n	800d382 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	3301      	adds	r3, #1
 800d356:	60bb      	str	r3, [r7, #8]
 800d358:	e013      	b.n	800d382 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2200      	movs	r2, #0
 800d362:	2180      	movs	r1, #128	; 0x80
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	f000 f9b1 	bl	800d6cc <UART_WaitOnFlagUntilTimeout>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800d370:	2303      	movs	r3, #3
 800d372:	e023      	b.n	800d3bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	60ba      	str	r2, [r7, #8]
 800d37a:	781a      	ldrb	r2, [r3, #0]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d386:	b29b      	uxth	r3, r3
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1b7      	bne.n	800d2fc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	2200      	movs	r2, #0
 800d394:	2140      	movs	r1, #64	; 0x40
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f000 f998 	bl	800d6cc <UART_WaitOnFlagUntilTimeout>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	e00a      	b.n	800d3bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2220      	movs	r2, #32
 800d3aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	e000      	b.n	800d3bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800d3ba:	2302      	movs	r3, #2
  }
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3718      	adds	r7, #24
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	2b20      	cmp	r3, #32
 800d3dc:	d140      	bne.n	800d460 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d002      	beq.n	800d3ea <HAL_UART_Receive_IT+0x26>
 800d3e4:	88fb      	ldrh	r3, [r7, #6]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d101      	bne.n	800d3ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e039      	b.n	800d462 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d101      	bne.n	800d3fc <HAL_UART_Receive_IT+0x38>
 800d3f8:	2302      	movs	r3, #2
 800d3fa:	e032      	b.n	800d462 <HAL_UART_Receive_IT+0x9e>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	68ba      	ldr	r2, [r7, #8]
 800d408:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	88fa      	ldrh	r2, [r7, #6]
 800d40e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	88fa      	ldrh	r2, [r7, #6]
 800d414:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2200      	movs	r2, #0
 800d41a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2222      	movs	r2, #34	; 0x22
 800d420:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2200      	movs	r2, #0
 800d428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68da      	ldr	r2, [r3, #12]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d43a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	695a      	ldr	r2, [r3, #20]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f042 0201 	orr.w	r2, r2, #1
 800d44a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	68da      	ldr	r2, [r3, #12]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f042 0220 	orr.w	r2, r2, #32
 800d45a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	e000      	b.n	800d462 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d460:	2302      	movs	r3, #2
  }
}
 800d462:	4618      	mov	r0, r3
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
	...

0800d470 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	695b      	ldr	r3, [r3, #20]
 800d48e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d490:	2300      	movs	r3, #0
 800d492:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d494:	2300      	movs	r3, #0
 800d496:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	f003 030f 	and.w	r3, r3, #15
 800d49e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10d      	bne.n	800d4c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	f003 0320 	and.w	r3, r3, #32
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d008      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x52>
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	f003 0320 	and.w	r3, r3, #32
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 f9f0 	bl	800d8a0 <UART_Receive_IT>
      return;
 800d4c0:	e0cc      	b.n	800d65c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 80ab 	beq.w	800d620 <HAL_UART_IRQHandler+0x1b0>
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	f003 0301 	and.w	r3, r3, #1
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d105      	bne.n	800d4e0 <HAL_UART_IRQHandler+0x70>
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f000 80a0 	beq.w	800d620 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	f003 0301 	and.w	r3, r3, #1
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00a      	beq.n	800d500 <HAL_UART_IRQHandler+0x90>
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d005      	beq.n	800d500 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f8:	f043 0201 	orr.w	r2, r3, #1
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	f003 0304 	and.w	r3, r3, #4
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00a      	beq.n	800d520 <HAL_UART_IRQHandler+0xb0>
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	d005      	beq.n	800d520 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d518:	f043 0202 	orr.w	r2, r3, #2
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	f003 0302 	and.w	r3, r3, #2
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00a      	beq.n	800d540 <HAL_UART_IRQHandler+0xd0>
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	f003 0301 	and.w	r3, r3, #1
 800d530:	2b00      	cmp	r3, #0
 800d532:	d005      	beq.n	800d540 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d538:	f043 0204 	orr.w	r2, r3, #4
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	f003 0308 	and.w	r3, r3, #8
 800d546:	2b00      	cmp	r3, #0
 800d548:	d00a      	beq.n	800d560 <HAL_UART_IRQHandler+0xf0>
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	f003 0301 	and.w	r3, r3, #1
 800d550:	2b00      	cmp	r3, #0
 800d552:	d005      	beq.n	800d560 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d558:	f043 0208 	orr.w	r2, r3, #8
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d564:	2b00      	cmp	r3, #0
 800d566:	d078      	beq.n	800d65a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	f003 0320 	and.w	r3, r3, #32
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d007      	beq.n	800d582 <HAL_UART_IRQHandler+0x112>
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	f003 0320 	and.w	r3, r3, #32
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d002      	beq.n	800d582 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 f98f 	bl	800d8a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	695b      	ldr	r3, [r3, #20]
 800d588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d58c:	2b40      	cmp	r3, #64	; 0x40
 800d58e:	bf0c      	ite	eq
 800d590:	2301      	moveq	r3, #1
 800d592:	2300      	movne	r3, #0
 800d594:	b2db      	uxtb	r3, r3
 800d596:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59c:	f003 0308 	and.w	r3, r3, #8
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <HAL_UART_IRQHandler+0x13a>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d031      	beq.n	800d60e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 f8d8 	bl	800d760 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	695b      	ldr	r3, [r3, #20]
 800d5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ba:	2b40      	cmp	r3, #64	; 0x40
 800d5bc:	d123      	bne.n	800d606 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	695a      	ldr	r2, [r3, #20]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d013      	beq.n	800d5fe <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5da:	4a22      	ldr	r2, [pc, #136]	; (800d664 <HAL_UART_IRQHandler+0x1f4>)
 800d5dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7f9 fd32 	bl	800704c <HAL_DMA_Abort_IT>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d016      	beq.n	800d61c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5fc:	e00e      	b.n	800d61c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 f83c 	bl	800d67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d604:	e00a      	b.n	800d61c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 f838 	bl	800d67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d60c:	e006      	b.n	800d61c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 f834 	bl	800d67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800d61a:	e01e      	b.n	800d65a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d61c:	bf00      	nop
    return;
 800d61e:	e01c      	b.n	800d65a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d626:	2b00      	cmp	r3, #0
 800d628:	d008      	beq.n	800d63c <HAL_UART_IRQHandler+0x1cc>
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d630:	2b00      	cmp	r3, #0
 800d632:	d003      	beq.n	800d63c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f000 f8c5 	bl	800d7c4 <UART_Transmit_IT>
    return;
 800d63a:	e00f      	b.n	800d65c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00a      	beq.n	800d65c <HAL_UART_IRQHandler+0x1ec>
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d005      	beq.n	800d65c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 f90d 	bl	800d870 <UART_EndTransmit_IT>
    return;
 800d656:	bf00      	nop
 800d658:	e000      	b.n	800d65c <HAL_UART_IRQHandler+0x1ec>
    return;
 800d65a:	bf00      	nop
  }
}
 800d65c:	3720      	adds	r7, #32
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	0800d79d 	.word	0x0800d79d

0800d668 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800d698:	2300      	movs	r3, #0
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	2300      	movs	r3, #0
 800d69e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	b2db      	uxtb	r3, r3
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3714      	adds	r7, #20
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	603b      	str	r3, [r7, #0]
 800d6d8:	4613      	mov	r3, r2
 800d6da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6dc:	e02c      	b.n	800d738 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e4:	d028      	beq.n	800d738 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d007      	beq.n	800d6fc <UART_WaitOnFlagUntilTimeout+0x30>
 800d6ec:	f7f9 fa60 	bl	8006bb0 <HAL_GetTick>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	1ad3      	subs	r3, r2, r3
 800d6f6:	69ba      	ldr	r2, [r7, #24]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d21d      	bcs.n	800d738 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68da      	ldr	r2, [r3, #12]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d70a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	695a      	ldr	r2, [r3, #20]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f022 0201 	bic.w	r2, r2, #1
 800d71a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2220      	movs	r2, #32
 800d720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2220      	movs	r2, #32
 800d728:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800d734:	2303      	movs	r3, #3
 800d736:	e00f      	b.n	800d758 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	4013      	ands	r3, r2
 800d742:	68ba      	ldr	r2, [r7, #8]
 800d744:	429a      	cmp	r2, r3
 800d746:	bf0c      	ite	eq
 800d748:	2301      	moveq	r3, #1
 800d74a:	2300      	movne	r3, #0
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	461a      	mov	r2, r3
 800d750:	79fb      	ldrb	r3, [r7, #7]
 800d752:	429a      	cmp	r2, r3
 800d754:	d0c3      	beq.n	800d6de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d756:	2300      	movs	r3, #0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68da      	ldr	r2, [r3, #12]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d776:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	695a      	ldr	r2, [r3, #20]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f022 0201 	bic.w	r2, r2, #1
 800d786:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2220      	movs	r2, #32
 800d78c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800d790:	bf00      	nop
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7ff ff60 	bl	800d67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7bc:	bf00      	nop
 800d7be:	3710      	adds	r7, #16
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	2b21      	cmp	r3, #33	; 0x21
 800d7d6:	d144      	bne.n	800d862 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7e0:	d11a      	bne.n	800d818 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6a1b      	ldr	r3, [r3, #32]
 800d7e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	881b      	ldrh	r3, [r3, #0]
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d7f6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	691b      	ldr	r3, [r3, #16]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d105      	bne.n	800d80c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	1c9a      	adds	r2, r3, #2
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	621a      	str	r2, [r3, #32]
 800d80a:	e00e      	b.n	800d82a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a1b      	ldr	r3, [r3, #32]
 800d810:	1c5a      	adds	r2, r3, #1
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	621a      	str	r2, [r3, #32]
 800d816:	e008      	b.n	800d82a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6a1b      	ldr	r3, [r3, #32]
 800d81c:	1c59      	adds	r1, r3, #1
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	6211      	str	r1, [r2, #32]
 800d822:	781a      	ldrb	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d82e:	b29b      	uxth	r3, r3
 800d830:	3b01      	subs	r3, #1
 800d832:	b29b      	uxth	r3, r3
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	4619      	mov	r1, r3
 800d838:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10f      	bne.n	800d85e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68da      	ldr	r2, [r3, #12]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d84c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d85c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	e000      	b.n	800d864 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d862:	2302      	movs	r3, #2
  }
}
 800d864:	4618      	mov	r0, r3
 800d866:	3714      	adds	r7, #20
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68da      	ldr	r2, [r3, #12]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d886:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2220      	movs	r2, #32
 800d88c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff fee9 	bl	800d668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d896:	2300      	movs	r3, #0
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	2b22      	cmp	r3, #34	; 0x22
 800d8b2:	d171      	bne.n	800d998 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8bc:	d123      	bne.n	800d906 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8c2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10e      	bne.n	800d8ea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8e2:	1c9a      	adds	r2, r3, #2
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	629a      	str	r2, [r3, #40]	; 0x28
 800d8e8:	e029      	b.n	800d93e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8fe:	1c5a      	adds	r2, r3, #1
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	629a      	str	r2, [r3, #40]	; 0x28
 800d904:	e01b      	b.n	800d93e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d10a      	bne.n	800d924 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	6858      	ldr	r0, [r3, #4]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d918:	1c59      	adds	r1, r3, #1
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	6291      	str	r1, [r2, #40]	; 0x28
 800d91e:	b2c2      	uxtb	r2, r0
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	e00c      	b.n	800d93e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	b2da      	uxtb	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d930:	1c58      	adds	r0, r3, #1
 800d932:	6879      	ldr	r1, [r7, #4]
 800d934:	6288      	str	r0, [r1, #40]	; 0x28
 800d936:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d93a:	b2d2      	uxtb	r2, r2
 800d93c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d942:	b29b      	uxth	r3, r3
 800d944:	3b01      	subs	r3, #1
 800d946:	b29b      	uxth	r3, r3
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	4619      	mov	r1, r3
 800d94c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d120      	bne.n	800d994 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68da      	ldr	r2, [r3, #12]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f022 0220 	bic.w	r2, r2, #32
 800d960:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	68da      	ldr	r2, [r3, #12]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d970:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	695a      	ldr	r2, [r3, #20]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f022 0201 	bic.w	r2, r2, #1
 800d980:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2220      	movs	r2, #32
 800d986:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f007 fcd6 	bl	801533c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	e002      	b.n	800d99a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d994:	2300      	movs	r3, #0
 800d996:	e000      	b.n	800d99a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d998:	2302      	movs	r3, #2
  }
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
	...

0800d9a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9a4:	b5b0      	push	{r4, r5, r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	68da      	ldr	r2, [r3, #12]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	689a      	ldr	r2, [r3, #8]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	691b      	ldr	r3, [r3, #16]
 800d9ca:	431a      	orrs	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	695b      	ldr	r3, [r3, #20]
 800d9d0:	431a      	orrs	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	69db      	ldr	r3, [r3, #28]
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d9e4:	f023 030c 	bic.w	r3, r3, #12
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	6812      	ldr	r2, [r2, #0]
 800d9ec:	68f9      	ldr	r1, [r7, #12]
 800d9ee:	430b      	orrs	r3, r1
 800d9f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	699a      	ldr	r2, [r3, #24]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	430a      	orrs	r2, r1
 800da06:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	69db      	ldr	r3, [r3, #28]
 800da0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da10:	f040 80e4 	bne.w	800dbdc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4aab      	ldr	r2, [pc, #684]	; (800dcc8 <UART_SetConfig+0x324>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d004      	beq.n	800da28 <UART_SetConfig+0x84>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4aaa      	ldr	r2, [pc, #680]	; (800dccc <UART_SetConfig+0x328>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d16c      	bne.n	800db02 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800da28:	f7fc fc80 	bl	800a32c <HAL_RCC_GetPCLK2Freq>
 800da2c:	4602      	mov	r2, r0
 800da2e:	4613      	mov	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	4413      	add	r3, r2
 800da34:	009a      	lsls	r2, r3, #2
 800da36:	441a      	add	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da42:	4aa3      	ldr	r2, [pc, #652]	; (800dcd0 <UART_SetConfig+0x32c>)
 800da44:	fba2 2303 	umull	r2, r3, r2, r3
 800da48:	095b      	lsrs	r3, r3, #5
 800da4a:	011c      	lsls	r4, r3, #4
 800da4c:	f7fc fc6e 	bl	800a32c <HAL_RCC_GetPCLK2Freq>
 800da50:	4602      	mov	r2, r0
 800da52:	4613      	mov	r3, r2
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	4413      	add	r3, r2
 800da58:	009a      	lsls	r2, r3, #2
 800da5a:	441a      	add	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	005b      	lsls	r3, r3, #1
 800da62:	fbb2 f5f3 	udiv	r5, r2, r3
 800da66:	f7fc fc61 	bl	800a32c <HAL_RCC_GetPCLK2Freq>
 800da6a:	4602      	mov	r2, r0
 800da6c:	4613      	mov	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4413      	add	r3, r2
 800da72:	009a      	lsls	r2, r3, #2
 800da74:	441a      	add	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	005b      	lsls	r3, r3, #1
 800da7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da80:	4a93      	ldr	r2, [pc, #588]	; (800dcd0 <UART_SetConfig+0x32c>)
 800da82:	fba2 2303 	umull	r2, r3, r2, r3
 800da86:	095b      	lsrs	r3, r3, #5
 800da88:	2264      	movs	r2, #100	; 0x64
 800da8a:	fb02 f303 	mul.w	r3, r2, r3
 800da8e:	1aeb      	subs	r3, r5, r3
 800da90:	00db      	lsls	r3, r3, #3
 800da92:	3332      	adds	r3, #50	; 0x32
 800da94:	4a8e      	ldr	r2, [pc, #568]	; (800dcd0 <UART_SetConfig+0x32c>)
 800da96:	fba2 2303 	umull	r2, r3, r2, r3
 800da9a:	095b      	lsrs	r3, r3, #5
 800da9c:	005b      	lsls	r3, r3, #1
 800da9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800daa2:	441c      	add	r4, r3
 800daa4:	f7fc fc42 	bl	800a32c <HAL_RCC_GetPCLK2Freq>
 800daa8:	4602      	mov	r2, r0
 800daaa:	4613      	mov	r3, r2
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	4413      	add	r3, r2
 800dab0:	009a      	lsls	r2, r3, #2
 800dab2:	441a      	add	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	005b      	lsls	r3, r3, #1
 800daba:	fbb2 f5f3 	udiv	r5, r2, r3
 800dabe:	f7fc fc35 	bl	800a32c <HAL_RCC_GetPCLK2Freq>
 800dac2:	4602      	mov	r2, r0
 800dac4:	4613      	mov	r3, r2
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	009a      	lsls	r2, r3, #2
 800dacc:	441a      	add	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dad8:	4a7d      	ldr	r2, [pc, #500]	; (800dcd0 <UART_SetConfig+0x32c>)
 800dada:	fba2 2303 	umull	r2, r3, r2, r3
 800dade:	095b      	lsrs	r3, r3, #5
 800dae0:	2264      	movs	r2, #100	; 0x64
 800dae2:	fb02 f303 	mul.w	r3, r2, r3
 800dae6:	1aeb      	subs	r3, r5, r3
 800dae8:	00db      	lsls	r3, r3, #3
 800daea:	3332      	adds	r3, #50	; 0x32
 800daec:	4a78      	ldr	r2, [pc, #480]	; (800dcd0 <UART_SetConfig+0x32c>)
 800daee:	fba2 2303 	umull	r2, r3, r2, r3
 800daf2:	095b      	lsrs	r3, r3, #5
 800daf4:	f003 0207 	and.w	r2, r3, #7
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4422      	add	r2, r4
 800dafe:	609a      	str	r2, [r3, #8]
 800db00:	e154      	b.n	800ddac <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800db02:	f7fc fbff 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 800db06:	4602      	mov	r2, r0
 800db08:	4613      	mov	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	4413      	add	r3, r2
 800db0e:	009a      	lsls	r2, r3, #2
 800db10:	441a      	add	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	005b      	lsls	r3, r3, #1
 800db18:	fbb2 f3f3 	udiv	r3, r2, r3
 800db1c:	4a6c      	ldr	r2, [pc, #432]	; (800dcd0 <UART_SetConfig+0x32c>)
 800db1e:	fba2 2303 	umull	r2, r3, r2, r3
 800db22:	095b      	lsrs	r3, r3, #5
 800db24:	011c      	lsls	r4, r3, #4
 800db26:	f7fc fbed 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 800db2a:	4602      	mov	r2, r0
 800db2c:	4613      	mov	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4413      	add	r3, r2
 800db32:	009a      	lsls	r2, r3, #2
 800db34:	441a      	add	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	005b      	lsls	r3, r3, #1
 800db3c:	fbb2 f5f3 	udiv	r5, r2, r3
 800db40:	f7fc fbe0 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 800db44:	4602      	mov	r2, r0
 800db46:	4613      	mov	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	4413      	add	r3, r2
 800db4c:	009a      	lsls	r2, r3, #2
 800db4e:	441a      	add	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	005b      	lsls	r3, r3, #1
 800db56:	fbb2 f3f3 	udiv	r3, r2, r3
 800db5a:	4a5d      	ldr	r2, [pc, #372]	; (800dcd0 <UART_SetConfig+0x32c>)
 800db5c:	fba2 2303 	umull	r2, r3, r2, r3
 800db60:	095b      	lsrs	r3, r3, #5
 800db62:	2264      	movs	r2, #100	; 0x64
 800db64:	fb02 f303 	mul.w	r3, r2, r3
 800db68:	1aeb      	subs	r3, r5, r3
 800db6a:	00db      	lsls	r3, r3, #3
 800db6c:	3332      	adds	r3, #50	; 0x32
 800db6e:	4a58      	ldr	r2, [pc, #352]	; (800dcd0 <UART_SetConfig+0x32c>)
 800db70:	fba2 2303 	umull	r2, r3, r2, r3
 800db74:	095b      	lsrs	r3, r3, #5
 800db76:	005b      	lsls	r3, r3, #1
 800db78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800db7c:	441c      	add	r4, r3
 800db7e:	f7fc fbc1 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 800db82:	4602      	mov	r2, r0
 800db84:	4613      	mov	r3, r2
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	4413      	add	r3, r2
 800db8a:	009a      	lsls	r2, r3, #2
 800db8c:	441a      	add	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	005b      	lsls	r3, r3, #1
 800db94:	fbb2 f5f3 	udiv	r5, r2, r3
 800db98:	f7fc fbb4 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 800db9c:	4602      	mov	r2, r0
 800db9e:	4613      	mov	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	009a      	lsls	r2, r3, #2
 800dba6:	441a      	add	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	005b      	lsls	r3, r3, #1
 800dbae:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbb2:	4a47      	ldr	r2, [pc, #284]	; (800dcd0 <UART_SetConfig+0x32c>)
 800dbb4:	fba2 2303 	umull	r2, r3, r2, r3
 800dbb8:	095b      	lsrs	r3, r3, #5
 800dbba:	2264      	movs	r2, #100	; 0x64
 800dbbc:	fb02 f303 	mul.w	r3, r2, r3
 800dbc0:	1aeb      	subs	r3, r5, r3
 800dbc2:	00db      	lsls	r3, r3, #3
 800dbc4:	3332      	adds	r3, #50	; 0x32
 800dbc6:	4a42      	ldr	r2, [pc, #264]	; (800dcd0 <UART_SetConfig+0x32c>)
 800dbc8:	fba2 2303 	umull	r2, r3, r2, r3
 800dbcc:	095b      	lsrs	r3, r3, #5
 800dbce:	f003 0207 	and.w	r2, r3, #7
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4422      	add	r2, r4
 800dbd8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800dbda:	e0e7      	b.n	800ddac <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a39      	ldr	r2, [pc, #228]	; (800dcc8 <UART_SetConfig+0x324>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d004      	beq.n	800dbf0 <UART_SetConfig+0x24c>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a38      	ldr	r2, [pc, #224]	; (800dccc <UART_SetConfig+0x328>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d171      	bne.n	800dcd4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800dbf0:	f7fc fb9c 	bl	800a32c <HAL_RCC_GetPCLK2Freq>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	4413      	add	r3, r2
 800dbfc:	009a      	lsls	r2, r3, #2
 800dbfe:	441a      	add	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc0a:	4a31      	ldr	r2, [pc, #196]	; (800dcd0 <UART_SetConfig+0x32c>)
 800dc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc10:	095b      	lsrs	r3, r3, #5
 800dc12:	011c      	lsls	r4, r3, #4
 800dc14:	f7fc fb8a 	bl	800a32c <HAL_RCC_GetPCLK2Freq>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4413      	add	r3, r2
 800dc20:	009a      	lsls	r2, r3, #2
 800dc22:	441a      	add	r2, r3
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	fbb2 f5f3 	udiv	r5, r2, r3
 800dc2e:	f7fc fb7d 	bl	800a32c <HAL_RCC_GetPCLK2Freq>
 800dc32:	4602      	mov	r2, r0
 800dc34:	4613      	mov	r3, r2
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	4413      	add	r3, r2
 800dc3a:	009a      	lsls	r2, r3, #2
 800dc3c:	441a      	add	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc48:	4a21      	ldr	r2, [pc, #132]	; (800dcd0 <UART_SetConfig+0x32c>)
 800dc4a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc4e:	095b      	lsrs	r3, r3, #5
 800dc50:	2264      	movs	r2, #100	; 0x64
 800dc52:	fb02 f303 	mul.w	r3, r2, r3
 800dc56:	1aeb      	subs	r3, r5, r3
 800dc58:	011b      	lsls	r3, r3, #4
 800dc5a:	3332      	adds	r3, #50	; 0x32
 800dc5c:	4a1c      	ldr	r2, [pc, #112]	; (800dcd0 <UART_SetConfig+0x32c>)
 800dc5e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc62:	095b      	lsrs	r3, r3, #5
 800dc64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc68:	441c      	add	r4, r3
 800dc6a:	f7fc fb5f 	bl	800a32c <HAL_RCC_GetPCLK2Freq>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	4613      	mov	r3, r2
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	4413      	add	r3, r2
 800dc76:	009a      	lsls	r2, r3, #2
 800dc78:	441a      	add	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	fbb2 f5f3 	udiv	r5, r2, r3
 800dc84:	f7fc fb52 	bl	800a32c <HAL_RCC_GetPCLK2Freq>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	4613      	mov	r3, r2
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	4413      	add	r3, r2
 800dc90:	009a      	lsls	r2, r3, #2
 800dc92:	441a      	add	r2, r3
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc9e:	4a0c      	ldr	r2, [pc, #48]	; (800dcd0 <UART_SetConfig+0x32c>)
 800dca0:	fba2 2303 	umull	r2, r3, r2, r3
 800dca4:	095b      	lsrs	r3, r3, #5
 800dca6:	2264      	movs	r2, #100	; 0x64
 800dca8:	fb02 f303 	mul.w	r3, r2, r3
 800dcac:	1aeb      	subs	r3, r5, r3
 800dcae:	011b      	lsls	r3, r3, #4
 800dcb0:	3332      	adds	r3, #50	; 0x32
 800dcb2:	4a07      	ldr	r2, [pc, #28]	; (800dcd0 <UART_SetConfig+0x32c>)
 800dcb4:	fba2 2303 	umull	r2, r3, r2, r3
 800dcb8:	095b      	lsrs	r3, r3, #5
 800dcba:	f003 020f 	and.w	r2, r3, #15
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4422      	add	r2, r4
 800dcc4:	609a      	str	r2, [r3, #8]
 800dcc6:	e071      	b.n	800ddac <UART_SetConfig+0x408>
 800dcc8:	40011000 	.word	0x40011000
 800dccc:	40011400 	.word	0x40011400
 800dcd0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800dcd4:	f7fc fb16 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	4613      	mov	r3, r2
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	4413      	add	r3, r2
 800dce0:	009a      	lsls	r2, r3, #2
 800dce2:	441a      	add	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcee:	4a31      	ldr	r2, [pc, #196]	; (800ddb4 <UART_SetConfig+0x410>)
 800dcf0:	fba2 2303 	umull	r2, r3, r2, r3
 800dcf4:	095b      	lsrs	r3, r3, #5
 800dcf6:	011c      	lsls	r4, r3, #4
 800dcf8:	f7fc fb04 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	4613      	mov	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4413      	add	r3, r2
 800dd04:	009a      	lsls	r2, r3, #2
 800dd06:	441a      	add	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	fbb2 f5f3 	udiv	r5, r2, r3
 800dd12:	f7fc faf7 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 800dd16:	4602      	mov	r2, r0
 800dd18:	4613      	mov	r3, r2
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4413      	add	r3, r2
 800dd1e:	009a      	lsls	r2, r3, #2
 800dd20:	441a      	add	r2, r3
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd2c:	4a21      	ldr	r2, [pc, #132]	; (800ddb4 <UART_SetConfig+0x410>)
 800dd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd32:	095b      	lsrs	r3, r3, #5
 800dd34:	2264      	movs	r2, #100	; 0x64
 800dd36:	fb02 f303 	mul.w	r3, r2, r3
 800dd3a:	1aeb      	subs	r3, r5, r3
 800dd3c:	011b      	lsls	r3, r3, #4
 800dd3e:	3332      	adds	r3, #50	; 0x32
 800dd40:	4a1c      	ldr	r2, [pc, #112]	; (800ddb4 <UART_SetConfig+0x410>)
 800dd42:	fba2 2303 	umull	r2, r3, r2, r3
 800dd46:	095b      	lsrs	r3, r3, #5
 800dd48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd4c:	441c      	add	r4, r3
 800dd4e:	f7fc fad9 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 800dd52:	4602      	mov	r2, r0
 800dd54:	4613      	mov	r3, r2
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4413      	add	r3, r2
 800dd5a:	009a      	lsls	r2, r3, #2
 800dd5c:	441a      	add	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	fbb2 f5f3 	udiv	r5, r2, r3
 800dd68:	f7fc facc 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	4613      	mov	r3, r2
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	4413      	add	r3, r2
 800dd74:	009a      	lsls	r2, r3, #2
 800dd76:	441a      	add	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd82:	4a0c      	ldr	r2, [pc, #48]	; (800ddb4 <UART_SetConfig+0x410>)
 800dd84:	fba2 2303 	umull	r2, r3, r2, r3
 800dd88:	095b      	lsrs	r3, r3, #5
 800dd8a:	2264      	movs	r2, #100	; 0x64
 800dd8c:	fb02 f303 	mul.w	r3, r2, r3
 800dd90:	1aeb      	subs	r3, r5, r3
 800dd92:	011b      	lsls	r3, r3, #4
 800dd94:	3332      	adds	r3, #50	; 0x32
 800dd96:	4a07      	ldr	r2, [pc, #28]	; (800ddb4 <UART_SetConfig+0x410>)
 800dd98:	fba2 2303 	umull	r2, r3, r2, r3
 800dd9c:	095b      	lsrs	r3, r3, #5
 800dd9e:	f003 020f 	and.w	r2, r3, #15
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4422      	add	r2, r4
 800dda8:	609a      	str	r2, [r3, #8]
}
 800ddaa:	e7ff      	b.n	800ddac <UART_SetConfig+0x408>
 800ddac:	bf00      	nop
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bdb0      	pop	{r4, r5, r7, pc}
 800ddb4:	51eb851f 	.word	0x51eb851f

0800ddb8 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ddb8:	b084      	sub	sp, #16
 800ddba:	b480      	push	{r7}
 800ddbc:	b085      	sub	sp, #20
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	f107 001c 	add.w	r0, r7, #28
 800ddc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ddce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ddd2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ddd6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ddd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ddda:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800dddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ddde:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800dde2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	4313      	orrs	r3, r2
 800dde8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ddf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	431a      	orrs	r2, r3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3714      	adds	r7, #20
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	b004      	add	sp, #16
 800de0c:	4770      	bx	lr

0800de0e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800de0e:	b480      	push	{r7}
 800de10:	b083      	sub	sp, #12
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	370c      	adds	r7, #12
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800de4a:	b480      	push	{r7}
 800de4c:	b083      	sub	sp, #12
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2203      	movs	r2, #3
 800de56:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800de58:	2300      	movs	r3, #0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	370c      	adds	r7, #12
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr

0800de66 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800de66:	b480      	push	{r7}
 800de68:	b083      	sub	sp, #12
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f003 0303 	and.w	r3, r3, #3
}
 800de76:	4618      	mov	r0, r3
 800de78:	370c      	adds	r7, #12
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr

0800de82 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800de82:	b480      	push	{r7}
 800de84:	b085      	sub	sp, #20
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
 800de8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800de8c:	2300      	movs	r3, #0
 800de8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dea0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800dea6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800deac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	4313      	orrs	r3, r2
 800deb2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800debc:	f023 030f 	bic.w	r3, r3, #15
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	431a      	orrs	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800dec8:	2300      	movs	r3, #0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3714      	adds	r7, #20
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr

0800ded6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ded6:	b480      	push	{r7}
 800ded8:	b083      	sub	sp, #12
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	691b      	ldr	r3, [r3, #16]
 800dee2:	b2db      	uxtb	r3, r3
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800defa:	2300      	movs	r3, #0
 800defc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	3314      	adds	r3, #20
 800df02:	461a      	mov	r2, r3
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	4413      	add	r3, r2
 800df08:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
}  
 800df0e:	4618      	mov	r0, r3
 800df10:	3714      	adds	r7, #20
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr

0800df1a <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b085      	sub	sp, #20
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800df24:	2300      	movs	r3, #0
 800df26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	685a      	ldr	r2, [r3, #4]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df40:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800df46:	431a      	orrs	r2, r3
                       Data->DPSM);
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800df4c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	4313      	orrs	r3, r2
 800df52:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df58:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	431a      	orrs	r2, r3
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800df64:	2300      	movs	r3, #0

}
 800df66:	4618      	mov	r0, r3
 800df68:	3714      	adds	r7, #20
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr

0800df72 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800df72:	b580      	push	{r7, lr}
 800df74:	b088      	sub	sp, #32
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
 800df7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800df7c:	2300      	movs	r3, #0
 800df7e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800df84:	2310      	movs	r3, #16
 800df86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df88:	2340      	movs	r3, #64	; 0x40
 800df8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df8c:	2300      	movs	r3, #0
 800df8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df94:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df96:	f107 0308 	add.w	r3, r7, #8
 800df9a:	4619      	mov	r1, r3
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff ff70 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800dfa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfa6:	2110      	movs	r1, #16
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 fa63 	bl	800e474 <SDMMC_GetCmdResp1>
 800dfae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfb0:	69fb      	ldr	r3, [r7, #28]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3720      	adds	r7, #32
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b088      	sub	sp, #32
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
 800dfc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dfcc:	2311      	movs	r3, #17
 800dfce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfd0:	2340      	movs	r3, #64	; 0x40
 800dfd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfdc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfde:	f107 0308 	add.w	r3, r7, #8
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f7ff ff4c 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dfea:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfee:	2111      	movs	r1, #17
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 fa3f 	bl	800e474 <SDMMC_GetCmdResp1>
 800dff6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dff8:	69fb      	ldr	r3, [r7, #28]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3720      	adds	r7, #32
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b088      	sub	sp, #32
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e00c:	2300      	movs	r3, #0
 800e00e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e014:	2312      	movs	r3, #18
 800e016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e018:	2340      	movs	r3, #64	; 0x40
 800e01a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e01c:	2300      	movs	r3, #0
 800e01e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e024:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e026:	f107 0308 	add.w	r3, r7, #8
 800e02a:	4619      	mov	r1, r3
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f7ff ff28 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e032:	f241 3288 	movw	r2, #5000	; 0x1388
 800e036:	2112      	movs	r1, #18
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 fa1b 	bl	800e474 <SDMMC_GetCmdResp1>
 800e03e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e040:	69fb      	ldr	r3, [r7, #28]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3720      	adds	r7, #32
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b088      	sub	sp, #32
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
 800e052:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e054:	2300      	movs	r3, #0
 800e056:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e05c:	2318      	movs	r3, #24
 800e05e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e060:	2340      	movs	r3, #64	; 0x40
 800e062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e064:	2300      	movs	r3, #0
 800e066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e06c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e06e:	f107 0308 	add.w	r3, r7, #8
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7ff ff04 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e07a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e07e:	2118      	movs	r1, #24
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f000 f9f7 	bl	800e474 <SDMMC_GetCmdResp1>
 800e086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e088:	69fb      	ldr	r3, [r7, #28]
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3720      	adds	r7, #32
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}

0800e092 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b088      	sub	sp, #32
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e09c:	2300      	movs	r3, #0
 800e09e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e0a4:	2319      	movs	r3, #25
 800e0a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0a8:	2340      	movs	r3, #64	; 0x40
 800e0aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0b4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0b6:	f107 0308 	add.w	r3, r7, #8
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7ff fee0 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e0c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0c6:	2119      	movs	r1, #25
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 f9d3 	bl	800e474 <SDMMC_GetCmdResp1>
 800e0ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0d0:	69fb      	ldr	r3, [r7, #28]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3720      	adds	r7, #32
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
	...

0800e0dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b088      	sub	sp, #32
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e0ec:	230c      	movs	r3, #12
 800e0ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0f0:	2340      	movs	r3, #64	; 0x40
 800e0f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0fc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0fe:	f107 0308 	add.w	r3, r7, #8
 800e102:	4619      	mov	r1, r3
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7ff febc 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800e10a:	4a05      	ldr	r2, [pc, #20]	; (800e120 <SDMMC_CmdStopTransfer+0x44>)
 800e10c:	210c      	movs	r1, #12
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 f9b0 	bl	800e474 <SDMMC_GetCmdResp1>
 800e114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e116:	69fb      	ldr	r3, [r7, #28]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3720      	adds	r7, #32
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	05f5e100 	.word	0x05f5e100

0800e124 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b08a      	sub	sp, #40	; 0x28
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e130:	2300      	movs	r3, #0
 800e132:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e138:	2307      	movs	r3, #7
 800e13a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e13c:	2340      	movs	r3, #64	; 0x40
 800e13e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e140:	2300      	movs	r3, #0
 800e142:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e148:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e14a:	f107 0310 	add.w	r3, r7, #16
 800e14e:	4619      	mov	r1, r3
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f7ff fe96 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e156:	f241 3288 	movw	r2, #5000	; 0x1388
 800e15a:	2107      	movs	r1, #7
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f000 f989 	bl	800e474 <SDMMC_GetCmdResp1>
 800e162:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e166:	4618      	mov	r0, r3
 800e168:	3728      	adds	r7, #40	; 0x28
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b088      	sub	sp, #32
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e176:	2300      	movs	r3, #0
 800e178:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800e17a:	2300      	movs	r3, #0
 800e17c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e17e:	2300      	movs	r3, #0
 800e180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e182:	2300      	movs	r3, #0
 800e184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e186:	2300      	movs	r3, #0
 800e188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e18a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e18e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e190:	f107 0308 	add.w	r3, r7, #8
 800e194:	4619      	mov	r1, r3
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7ff fe73 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 f93f 	bl	800e420 <SDMMC_GetCmdError>
 800e1a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1a4:	69fb      	ldr	r3, [r7, #28]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3720      	adds	r7, #32
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b088      	sub	sp, #32
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e1ba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e1be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e1c0:	2308      	movs	r3, #8
 800e1c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1c4:	2340      	movs	r3, #64	; 0x40
 800e1c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1d0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1d2:	f107 0308 	add.w	r3, r7, #8
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7ff fe52 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 fb10 	bl	800e804 <SDMMC_GetCmdResp7>
 800e1e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1e6:	69fb      	ldr	r3, [r7, #28]
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3720      	adds	r7, #32
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b088      	sub	sp, #32
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e202:	2337      	movs	r3, #55	; 0x37
 800e204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e206:	2340      	movs	r3, #64	; 0x40
 800e208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e20a:	2300      	movs	r3, #0
 800e20c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e20e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e212:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e214:	f107 0308 	add.w	r3, r7, #8
 800e218:	4619      	mov	r1, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7ff fe31 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e220:	f241 3288 	movw	r2, #5000	; 0x1388
 800e224:	2137      	movs	r1, #55	; 0x37
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 f924 	bl	800e474 <SDMMC_GetCmdResp1>
 800e22c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e22e:	69fb      	ldr	r3, [r7, #28]
}
 800e230:	4618      	mov	r0, r3
 800e232:	3720      	adds	r7, #32
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b088      	sub	sp, #32
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e242:	2300      	movs	r3, #0
 800e244:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e24c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e252:	2329      	movs	r3, #41	; 0x29
 800e254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e256:	2340      	movs	r3, #64	; 0x40
 800e258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e25a:	2300      	movs	r3, #0
 800e25c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e25e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e262:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e264:	f107 0308 	add.w	r3, r7, #8
 800e268:	4619      	mov	r1, r3
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7ff fe09 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f000 fa25 	bl	800e6c0 <SDMMC_GetCmdResp3>
 800e276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e278:	69fb      	ldr	r3, [r7, #28]
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3720      	adds	r7, #32
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}

0800e282 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e282:	b580      	push	{r7, lr}
 800e284:	b088      	sub	sp, #32
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
 800e28a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e28c:	2300      	movs	r3, #0
 800e28e:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e294:	2306      	movs	r3, #6
 800e296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e298:	2340      	movs	r3, #64	; 0x40
 800e29a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e29c:	2300      	movs	r3, #0
 800e29e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2a4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2a6:	f107 0308 	add.w	r3, r7, #8
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7ff fde8 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e2b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2b6:	2106      	movs	r1, #6
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f8db 	bl	800e474 <SDMMC_GetCmdResp1>
 800e2be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2c0:	69fb      	ldr	r3, [r7, #28]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3720      	adds	r7, #32
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b088      	sub	sp, #32
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e2da:	2333      	movs	r3, #51	; 0x33
 800e2dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2de:	2340      	movs	r3, #64	; 0x40
 800e2e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2ea:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2ec:	f107 0308 	add.w	r3, r7, #8
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f7ff fdc5 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2fc:	2133      	movs	r1, #51	; 0x33
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 f8b8 	bl	800e474 <SDMMC_GetCmdResp1>
 800e304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e306:	69fb      	ldr	r3, [r7, #28]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3720      	adds	r7, #32
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b088      	sub	sp, #32
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e318:	2300      	movs	r3, #0
 800e31a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e31c:	2300      	movs	r3, #0
 800e31e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e320:	2302      	movs	r3, #2
 800e322:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e324:	23c0      	movs	r3, #192	; 0xc0
 800e326:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e328:	2300      	movs	r3, #0
 800e32a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e32c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e330:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e332:	f107 0308 	add.w	r3, r7, #8
 800e336:	4619      	mov	r1, r3
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f7ff fda2 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 f97e 	bl	800e640 <SDMMC_GetCmdResp2>
 800e344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e346:	69fb      	ldr	r3, [r7, #28]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3720      	adds	r7, #32
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b088      	sub	sp, #32
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e35a:	2300      	movs	r3, #0
 800e35c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e362:	2309      	movs	r3, #9
 800e364:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e366:	23c0      	movs	r3, #192	; 0xc0
 800e368:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e36a:	2300      	movs	r3, #0
 800e36c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e36e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e372:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e374:	f107 0308 	add.w	r3, r7, #8
 800e378:	4619      	mov	r1, r3
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7ff fd81 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 f95d 	bl	800e640 <SDMMC_GetCmdResp2>
 800e386:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e388:	69fb      	ldr	r3, [r7, #28]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3720      	adds	r7, #32
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b088      	sub	sp, #32
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e39c:	2300      	movs	r3, #0
 800e39e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e3a4:	2303      	movs	r3, #3
 800e3a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3a8:	2340      	movs	r3, #64	; 0x40
 800e3aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3b4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3b6:	f107 0308 	add.w	r3, r7, #8
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7ff fd60 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e3c2:	683a      	ldr	r2, [r7, #0]
 800e3c4:	2103      	movs	r1, #3
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 f9ae 	bl	800e728 <SDMMC_GetCmdResp6>
 800e3cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3ce:	69fb      	ldr	r3, [r7, #28]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3720      	adds	r7, #32
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b088      	sub	sp, #32
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e3ea:	230d      	movs	r3, #13
 800e3ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3ee:	2340      	movs	r3, #64	; 0x40
 800e3f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3fa:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3fc:	f107 0308 	add.w	r3, r7, #8
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7ff fd3d 	bl	800de82 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e408:	f241 3288 	movw	r2, #5000	; 0x1388
 800e40c:	210d      	movs	r1, #13
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 f830 	bl	800e474 <SDMMC_GetCmdResp1>
 800e414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e416:	69fb      	ldr	r3, [r7, #28]
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3720      	adds	r7, #32
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e420:	b490      	push	{r4, r7}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e428:	4b10      	ldr	r3, [pc, #64]	; (800e46c <SDMMC_GetCmdError+0x4c>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a10      	ldr	r2, [pc, #64]	; (800e470 <SDMMC_GetCmdError+0x50>)
 800e42e:	fba2 2303 	umull	r2, r3, r2, r3
 800e432:	0a5b      	lsrs	r3, r3, #9
 800e434:	f241 3288 	movw	r2, #5000	; 0x1388
 800e438:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e43c:	4623      	mov	r3, r4
 800e43e:	1e5c      	subs	r4, r3, #1
 800e440:	2b00      	cmp	r3, #0
 800e442:	d102      	bne.n	800e44a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e448:	e00a      	b.n	800e460 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e452:	2b00      	cmp	r3, #0
 800e454:	d0f2      	beq.n	800e43c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e45c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e45e:	2300      	movs	r3, #0
}
 800e460:	4618      	mov	r0, r3
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bc90      	pop	{r4, r7}
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	20000170 	.word	0x20000170
 800e470:	10624dd3 	.word	0x10624dd3

0800e474 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e474:	b590      	push	{r4, r7, lr}
 800e476:	b087      	sub	sp, #28
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	460b      	mov	r3, r1
 800e47e:	607a      	str	r2, [r7, #4]
 800e480:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e482:	4b6c      	ldr	r3, [pc, #432]	; (800e634 <SDMMC_GetCmdResp1+0x1c0>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	4a6c      	ldr	r2, [pc, #432]	; (800e638 <SDMMC_GetCmdResp1+0x1c4>)
 800e488:	fba2 2303 	umull	r2, r3, r2, r3
 800e48c:	0a5b      	lsrs	r3, r3, #9
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e494:	4623      	mov	r3, r4
 800e496:	1e5c      	subs	r4, r3, #1
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d102      	bne.n	800e4a2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e49c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4a0:	e0c3      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d0f2      	beq.n	800e494 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4b2:	f003 0304 	and.w	r3, r3, #4
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d004      	beq.n	800e4c4 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2204      	movs	r2, #4
 800e4be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4c0:	2304      	movs	r3, #4
 800e4c2:	e0b2      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c8:	f003 0301 	and.w	r3, r3, #1
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d004      	beq.n	800e4da <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e0a7      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f7ff fcfb 	bl	800ded6 <SDIO_GetCommandResponse>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	7afb      	ldrb	r3, [r7, #11]
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d001      	beq.n	800e4ee <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e09d      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e4f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f7ff fcf9 	bl	800def0 <SDIO_GetResponse>
 800e4fe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	4b4e      	ldr	r3, [pc, #312]	; (800e63c <SDMMC_GetCmdResp1+0x1c8>)
 800e504:	4013      	ands	r3, r2
 800e506:	2b00      	cmp	r3, #0
 800e508:	d101      	bne.n	800e50e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800e50a:	2300      	movs	r3, #0
 800e50c:	e08d      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	2b00      	cmp	r3, #0
 800e512:	da02      	bge.n	800e51a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e514:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e518:	e087      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e520:	2b00      	cmp	r3, #0
 800e522:	d001      	beq.n	800e528 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e524:	2340      	movs	r3, #64	; 0x40
 800e526:	e080      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d001      	beq.n	800e536 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e532:	2380      	movs	r3, #128	; 0x80
 800e534:	e079      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d002      	beq.n	800e546 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e540:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e544:	e071      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e550:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e554:	e069      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e564:	e061      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d002      	beq.n	800e576 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e574:	e059      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d002      	beq.n	800e586 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e584:	e051      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d002      	beq.n	800e596 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e594:	e049      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d002      	beq.n	800e5a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e5a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e5a4:	e041      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d002      	beq.n	800e5b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800e5b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5b4:	e039      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d002      	beq.n	800e5c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e5c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e5c4:	e031      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d002      	beq.n	800e5d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e5d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e5d4:	e029      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d002      	beq.n	800e5e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e5e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e5e4:	e021      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d002      	beq.n	800e5f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e5f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e5f4:	e019      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e600:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e604:	e011      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d002      	beq.n	800e616 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e610:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e614:	e009      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	f003 0308 	and.w	r3, r3, #8
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d002      	beq.n	800e626 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e620:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e624:	e001      	b.n	800e62a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	371c      	adds	r7, #28
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd90      	pop	{r4, r7, pc}
 800e632:	bf00      	nop
 800e634:	20000170 	.word	0x20000170
 800e638:	10624dd3 	.word	0x10624dd3
 800e63c:	fdffe008 	.word	0xfdffe008

0800e640 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e640:	b490      	push	{r4, r7}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e648:	4b1b      	ldr	r3, [pc, #108]	; (800e6b8 <SDMMC_GetCmdResp2+0x78>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4a1b      	ldr	r2, [pc, #108]	; (800e6bc <SDMMC_GetCmdResp2+0x7c>)
 800e64e:	fba2 2303 	umull	r2, r3, r2, r3
 800e652:	0a5b      	lsrs	r3, r3, #9
 800e654:	f241 3288 	movw	r2, #5000	; 0x1388
 800e658:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e65c:	4623      	mov	r3, r4
 800e65e:	1e5c      	subs	r4, r3, #1
 800e660:	2b00      	cmp	r3, #0
 800e662:	d102      	bne.n	800e66a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e664:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e668:	e020      	b.n	800e6ac <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e66e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e672:	2b00      	cmp	r3, #0
 800e674:	d0f2      	beq.n	800e65c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e67a:	f003 0304 	and.w	r3, r3, #4
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d004      	beq.n	800e68c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2204      	movs	r2, #4
 800e686:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e688:	2304      	movs	r3, #4
 800e68a:	e00f      	b.n	800e6ac <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e690:	f003 0301 	and.w	r3, r3, #1
 800e694:	2b00      	cmp	r3, #0
 800e696:	d004      	beq.n	800e6a2 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2201      	movs	r2, #1
 800e69c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e004      	b.n	800e6ac <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e6a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bc90      	pop	{r4, r7}
 800e6b4:	4770      	bx	lr
 800e6b6:	bf00      	nop
 800e6b8:	20000170 	.word	0x20000170
 800e6bc:	10624dd3 	.word	0x10624dd3

0800e6c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e6c0:	b490      	push	{r4, r7}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e6c8:	4b15      	ldr	r3, [pc, #84]	; (800e720 <SDMMC_GetCmdResp3+0x60>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a15      	ldr	r2, [pc, #84]	; (800e724 <SDMMC_GetCmdResp3+0x64>)
 800e6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e6d2:	0a5b      	lsrs	r3, r3, #9
 800e6d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e6dc:	4623      	mov	r3, r4
 800e6de:	1e5c      	subs	r4, r3, #1
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d102      	bne.n	800e6ea <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e6e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6e8:	e015      	b.n	800e716 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d0f2      	beq.n	800e6dc <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6fa:	f003 0304 	and.w	r3, r3, #4
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d004      	beq.n	800e70c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2204      	movs	r2, #4
 800e706:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e708:	2304      	movs	r3, #4
 800e70a:	e004      	b.n	800e716 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e712:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e714:	2300      	movs	r3, #0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bc90      	pop	{r4, r7}
 800e71e:	4770      	bx	lr
 800e720:	20000170 	.word	0x20000170
 800e724:	10624dd3 	.word	0x10624dd3

0800e728 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e728:	b590      	push	{r4, r7, lr}
 800e72a:	b087      	sub	sp, #28
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	460b      	mov	r3, r1
 800e732:	607a      	str	r2, [r7, #4]
 800e734:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e736:	4b31      	ldr	r3, [pc, #196]	; (800e7fc <SDMMC_GetCmdResp6+0xd4>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a31      	ldr	r2, [pc, #196]	; (800e800 <SDMMC_GetCmdResp6+0xd8>)
 800e73c:	fba2 2303 	umull	r2, r3, r2, r3
 800e740:	0a5b      	lsrs	r3, r3, #9
 800e742:	f241 3288 	movw	r2, #5000	; 0x1388
 800e746:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e74a:	4623      	mov	r3, r4
 800e74c:	1e5c      	subs	r4, r3, #1
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d102      	bne.n	800e758 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e752:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e756:	e04c      	b.n	800e7f2 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e75c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e760:	2b00      	cmp	r3, #0
 800e762:	d0f2      	beq.n	800e74a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e768:	f003 0304 	and.w	r3, r3, #4
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d004      	beq.n	800e77a <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2204      	movs	r2, #4
 800e774:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e776:	2304      	movs	r3, #4
 800e778:	e03b      	b.n	800e7f2 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e77e:	f003 0301 	and.w	r3, r3, #1
 800e782:	2b00      	cmp	r3, #0
 800e784:	d004      	beq.n	800e790 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2201      	movs	r2, #1
 800e78a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e78c:	2301      	movs	r3, #1
 800e78e:	e030      	b.n	800e7f2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f7ff fba0 	bl	800ded6 <SDIO_GetCommandResponse>
 800e796:	4603      	mov	r3, r0
 800e798:	461a      	mov	r2, r3
 800e79a:	7afb      	ldrb	r3, [r7, #11]
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d001      	beq.n	800e7a4 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	e026      	b.n	800e7f2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e7aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f7ff fb9e 	bl	800def0 <SDIO_GetResponse>
 800e7b4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d106      	bne.n	800e7ce <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	0c1b      	lsrs	r3, r3, #16
 800e7c4:	b29a      	uxth	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	e011      	b.n	800e7f2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d002      	beq.n	800e7de <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e7d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7dc:	e009      	b.n	800e7f2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d002      	beq.n	800e7ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e7e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e7ec:	e001      	b.n	800e7f2 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e7ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	371c      	adds	r7, #28
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd90      	pop	{r4, r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	20000170 	.word	0x20000170
 800e800:	10624dd3 	.word	0x10624dd3

0800e804 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e804:	b490      	push	{r4, r7}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e80c:	4b18      	ldr	r3, [pc, #96]	; (800e870 <SDMMC_GetCmdResp7+0x6c>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a18      	ldr	r2, [pc, #96]	; (800e874 <SDMMC_GetCmdResp7+0x70>)
 800e812:	fba2 2303 	umull	r2, r3, r2, r3
 800e816:	0a5b      	lsrs	r3, r3, #9
 800e818:	f241 3288 	movw	r2, #5000	; 0x1388
 800e81c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e820:	4623      	mov	r3, r4
 800e822:	1e5c      	subs	r4, r3, #1
 800e824:	2b00      	cmp	r3, #0
 800e826:	d102      	bne.n	800e82e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e82c:	e01a      	b.n	800e864 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e832:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e836:	2b00      	cmp	r3, #0
 800e838:	d0f2      	beq.n	800e820 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e83e:	f003 0304 	and.w	r3, r3, #4
 800e842:	2b00      	cmp	r3, #0
 800e844:	d004      	beq.n	800e850 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2240      	movs	r2, #64	; 0x40
 800e84a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e84c:	2304      	movs	r3, #4
 800e84e:	e009      	b.n	800e864 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d002      	beq.n	800e862 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2240      	movs	r2, #64	; 0x40
 800e860:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e862:	2300      	movs	r3, #0
  
}
 800e864:	4618      	mov	r0, r3
 800e866:	3708      	adds	r7, #8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bc90      	pop	{r4, r7}
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20000170 	.word	0x20000170
 800e874:	10624dd3 	.word	0x10624dd3

0800e878 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e878:	b084      	sub	sp, #16
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b084      	sub	sp, #16
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
 800e882:	f107 001c 	add.w	r0, r7, #28
 800e886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d122      	bne.n	800e8d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e8a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	d105      	bne.n	800e8ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f001 fa7c 	bl	800fdc8 <USB_CoreReset>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	73fb      	strb	r3, [r7, #15]
 800e8d4:	e01a      	b.n	800e90c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	68db      	ldr	r3, [r3, #12]
 800e8da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f001 fa70 	bl	800fdc8 <USB_CoreReset>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d106      	bne.n	800e900 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	639a      	str	r2, [r3, #56]	; 0x38
 800e8fe:	e005      	b.n	800e90c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d10b      	bne.n	800e92a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	689b      	ldr	r3, [r3, #8]
 800e916:	f043 0206 	orr.w	r2, r3, #6
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	f043 0220 	orr.w	r2, r3, #32
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3710      	adds	r7, #16
 800e930:	46bd      	mov	sp, r7
 800e932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e936:	b004      	add	sp, #16
 800e938:	4770      	bx	lr
	...

0800e93c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b087      	sub	sp, #28
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	4613      	mov	r3, r2
 800e948:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e94a:	79fb      	ldrb	r3, [r7, #7]
 800e94c:	2b02      	cmp	r3, #2
 800e94e:	d165      	bne.n	800ea1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	4a41      	ldr	r2, [pc, #260]	; (800ea58 <USB_SetTurnaroundTime+0x11c>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d906      	bls.n	800e966 <USB_SetTurnaroundTime+0x2a>
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	4a40      	ldr	r2, [pc, #256]	; (800ea5c <USB_SetTurnaroundTime+0x120>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d802      	bhi.n	800e966 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e960:	230f      	movs	r3, #15
 800e962:	617b      	str	r3, [r7, #20]
 800e964:	e062      	b.n	800ea2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	4a3c      	ldr	r2, [pc, #240]	; (800ea5c <USB_SetTurnaroundTime+0x120>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d906      	bls.n	800e97c <USB_SetTurnaroundTime+0x40>
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	4a3b      	ldr	r2, [pc, #236]	; (800ea60 <USB_SetTurnaroundTime+0x124>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d802      	bhi.n	800e97c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e976:	230e      	movs	r3, #14
 800e978:	617b      	str	r3, [r7, #20]
 800e97a:	e057      	b.n	800ea2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	4a38      	ldr	r2, [pc, #224]	; (800ea60 <USB_SetTurnaroundTime+0x124>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d906      	bls.n	800e992 <USB_SetTurnaroundTime+0x56>
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	4a37      	ldr	r2, [pc, #220]	; (800ea64 <USB_SetTurnaroundTime+0x128>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d802      	bhi.n	800e992 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e98c:	230d      	movs	r3, #13
 800e98e:	617b      	str	r3, [r7, #20]
 800e990:	e04c      	b.n	800ea2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	4a33      	ldr	r2, [pc, #204]	; (800ea64 <USB_SetTurnaroundTime+0x128>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d906      	bls.n	800e9a8 <USB_SetTurnaroundTime+0x6c>
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	4a32      	ldr	r2, [pc, #200]	; (800ea68 <USB_SetTurnaroundTime+0x12c>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d802      	bhi.n	800e9a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e9a2:	230c      	movs	r3, #12
 800e9a4:	617b      	str	r3, [r7, #20]
 800e9a6:	e041      	b.n	800ea2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	4a2f      	ldr	r2, [pc, #188]	; (800ea68 <USB_SetTurnaroundTime+0x12c>)
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d906      	bls.n	800e9be <USB_SetTurnaroundTime+0x82>
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	4a2e      	ldr	r2, [pc, #184]	; (800ea6c <USB_SetTurnaroundTime+0x130>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d802      	bhi.n	800e9be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e9b8:	230b      	movs	r3, #11
 800e9ba:	617b      	str	r3, [r7, #20]
 800e9bc:	e036      	b.n	800ea2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	4a2a      	ldr	r2, [pc, #168]	; (800ea6c <USB_SetTurnaroundTime+0x130>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d906      	bls.n	800e9d4 <USB_SetTurnaroundTime+0x98>
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	4a29      	ldr	r2, [pc, #164]	; (800ea70 <USB_SetTurnaroundTime+0x134>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d802      	bhi.n	800e9d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e9ce:	230a      	movs	r3, #10
 800e9d0:	617b      	str	r3, [r7, #20]
 800e9d2:	e02b      	b.n	800ea2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	4a26      	ldr	r2, [pc, #152]	; (800ea70 <USB_SetTurnaroundTime+0x134>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d906      	bls.n	800e9ea <USB_SetTurnaroundTime+0xae>
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	4a25      	ldr	r2, [pc, #148]	; (800ea74 <USB_SetTurnaroundTime+0x138>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d802      	bhi.n	800e9ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e9e4:	2309      	movs	r3, #9
 800e9e6:	617b      	str	r3, [r7, #20]
 800e9e8:	e020      	b.n	800ea2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	4a21      	ldr	r2, [pc, #132]	; (800ea74 <USB_SetTurnaroundTime+0x138>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d906      	bls.n	800ea00 <USB_SetTurnaroundTime+0xc4>
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	4a20      	ldr	r2, [pc, #128]	; (800ea78 <USB_SetTurnaroundTime+0x13c>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d802      	bhi.n	800ea00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e9fa:	2308      	movs	r3, #8
 800e9fc:	617b      	str	r3, [r7, #20]
 800e9fe:	e015      	b.n	800ea2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	4a1d      	ldr	r2, [pc, #116]	; (800ea78 <USB_SetTurnaroundTime+0x13c>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d906      	bls.n	800ea16 <USB_SetTurnaroundTime+0xda>
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	4a1c      	ldr	r2, [pc, #112]	; (800ea7c <USB_SetTurnaroundTime+0x140>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d802      	bhi.n	800ea16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ea10:	2307      	movs	r3, #7
 800ea12:	617b      	str	r3, [r7, #20]
 800ea14:	e00a      	b.n	800ea2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ea16:	2306      	movs	r3, #6
 800ea18:	617b      	str	r3, [r7, #20]
 800ea1a:	e007      	b.n	800ea2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d102      	bne.n	800ea28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ea22:	2309      	movs	r3, #9
 800ea24:	617b      	str	r3, [r7, #20]
 800ea26:	e001      	b.n	800ea2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ea28:	2309      	movs	r3, #9
 800ea2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	68db      	ldr	r3, [r3, #12]
 800ea30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	68da      	ldr	r2, [r3, #12]
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	029b      	lsls	r3, r3, #10
 800ea40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ea44:	431a      	orrs	r2, r3
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ea4a:	2300      	movs	r3, #0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	371c      	adds	r7, #28
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	00d8acbf 	.word	0x00d8acbf
 800ea5c:	00e4e1bf 	.word	0x00e4e1bf
 800ea60:	00f423ff 	.word	0x00f423ff
 800ea64:	0106737f 	.word	0x0106737f
 800ea68:	011a499f 	.word	0x011a499f
 800ea6c:	01312cff 	.word	0x01312cff
 800ea70:	014ca43f 	.word	0x014ca43f
 800ea74:	016e35ff 	.word	0x016e35ff
 800ea78:	01a6ab1f 	.word	0x01a6ab1f
 800ea7c:	01e847ff 	.word	0x01e847ff

0800ea80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	689b      	ldr	r3, [r3, #8]
 800ea8c:	f043 0201 	orr.w	r2, r3, #1
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b083      	sub	sp, #12
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	f023 0201 	bic.w	r2, r3, #1
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eab6:	2300      	movs	r3, #0
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	460b      	mov	r3, r1
 800eace:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800eadc:	78fb      	ldrb	r3, [r7, #3]
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d106      	bne.n	800eaf0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	60da      	str	r2, [r3, #12]
 800eaee:	e00b      	b.n	800eb08 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800eaf0:	78fb      	ldrb	r3, [r7, #3]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d106      	bne.n	800eb04 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	60da      	str	r2, [r3, #12]
 800eb02:	e001      	b.n	800eb08 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	e003      	b.n	800eb10 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800eb08:	2032      	movs	r0, #50	; 0x32
 800eb0a:	f7f8 f85d 	bl	8006bc8 <HAL_Delay>

  return HAL_OK;
 800eb0e:	2300      	movs	r3, #0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3708      	adds	r7, #8
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb18:	b084      	sub	sp, #16
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b086      	sub	sp, #24
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
 800eb22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800eb26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800eb32:	2300      	movs	r3, #0
 800eb34:	613b      	str	r3, [r7, #16]
 800eb36:	e009      	b.n	800eb4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	3340      	adds	r3, #64	; 0x40
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	2200      	movs	r2, #0
 800eb44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	3301      	adds	r3, #1
 800eb4a:	613b      	str	r3, [r7, #16]
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	2b0e      	cmp	r3, #14
 800eb50:	d9f2      	bls.n	800eb38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800eb52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d112      	bne.n	800eb7e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	639a      	str	r2, [r3, #56]	; 0x38
 800eb7c:	e00b      	b.n	800eb96 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	2300      	movs	r3, #0
 800eba0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eba8:	4619      	mov	r1, r3
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	680b      	ldr	r3, [r1, #0]
 800ebb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d10c      	bne.n	800ebd6 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ebbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d104      	bne.n	800ebcc <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 f961 	bl	800ee8c <USB_SetDevSpeed>
 800ebca:	e008      	b.n	800ebde <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ebcc:	2101      	movs	r1, #1
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 f95c 	bl	800ee8c <USB_SetDevSpeed>
 800ebd4:	e003      	b.n	800ebde <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ebd6:	2103      	movs	r1, #3
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 f957 	bl	800ee8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ebde:	2110      	movs	r1, #16
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f000 f90b 	bl	800edfc <USB_FlushTxFifo>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800ebec:	2301      	movs	r3, #1
 800ebee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 f929 	bl	800ee48 <USB_FlushRxFifo>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec06:	461a      	mov	r2, r3
 800ec08:	2300      	movs	r3, #0
 800ec0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec12:	461a      	mov	r2, r3
 800ec14:	2300      	movs	r3, #0
 800ec16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec1e:	461a      	mov	r2, r3
 800ec20:	2300      	movs	r3, #0
 800ec22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec24:	2300      	movs	r3, #0
 800ec26:	613b      	str	r3, [r7, #16]
 800ec28:	e043      	b.n	800ecb2 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	015a      	lsls	r2, r3, #5
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	4413      	add	r3, r2
 800ec32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec40:	d118      	bne.n	800ec74 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d10a      	bne.n	800ec5e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	015a      	lsls	r2, r3, #5
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	4413      	add	r3, r2
 800ec50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec54:	461a      	mov	r2, r3
 800ec56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec5a:	6013      	str	r3, [r2, #0]
 800ec5c:	e013      	b.n	800ec86 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	015a      	lsls	r2, r3, #5
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	4413      	add	r3, r2
 800ec66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ec70:	6013      	str	r3, [r2, #0]
 800ec72:	e008      	b.n	800ec86 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	015a      	lsls	r2, r3, #5
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec80:	461a      	mov	r2, r3
 800ec82:	2300      	movs	r3, #0
 800ec84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	015a      	lsls	r2, r3, #5
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec92:	461a      	mov	r2, r3
 800ec94:	2300      	movs	r3, #0
 800ec96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	015a      	lsls	r2, r3, #5
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	4413      	add	r3, r2
 800eca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eca4:	461a      	mov	r2, r3
 800eca6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ecaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	613b      	str	r3, [r7, #16]
 800ecb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb4:	693a      	ldr	r2, [r7, #16]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d3b7      	bcc.n	800ec2a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ecba:	2300      	movs	r3, #0
 800ecbc:	613b      	str	r3, [r7, #16]
 800ecbe:	e043      	b.n	800ed48 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	015a      	lsls	r2, r3, #5
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ecd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ecd6:	d118      	bne.n	800ed0a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d10a      	bne.n	800ecf4 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	015a      	lsls	r2, r3, #5
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	4413      	add	r3, r2
 800ece6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecea:	461a      	mov	r2, r3
 800ecec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ecf0:	6013      	str	r3, [r2, #0]
 800ecf2:	e013      	b.n	800ed1c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	015a      	lsls	r2, r3, #5
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed00:	461a      	mov	r2, r3
 800ed02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ed06:	6013      	str	r3, [r2, #0]
 800ed08:	e008      	b.n	800ed1c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	015a      	lsls	r2, r3, #5
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	4413      	add	r3, r2
 800ed12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed16:	461a      	mov	r2, r3
 800ed18:	2300      	movs	r3, #0
 800ed1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	015a      	lsls	r2, r3, #5
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	4413      	add	r3, r2
 800ed24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed28:	461a      	mov	r2, r3
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	015a      	lsls	r2, r3, #5
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	4413      	add	r3, r2
 800ed36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ed40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	3301      	adds	r3, #1
 800ed46:	613b      	str	r3, [r7, #16]
 800ed48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4a:	693a      	ldr	r2, [r7, #16]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d3b7      	bcc.n	800ecc0 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed62:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d111      	bne.n	800ed8e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed70:	461a      	mov	r2, r3
 800ed72:	4b20      	ldr	r3, [pc, #128]	; (800edf4 <USB_DevInit+0x2dc>)
 800ed74:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ed88:	f043 0303 	orr.w	r3, r3, #3
 800ed8c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ed9a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ed9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d105      	bne.n	800edae <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	699b      	ldr	r3, [r3, #24]
 800eda6:	f043 0210 	orr.w	r2, r3, #16
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	699a      	ldr	r2, [r3, #24]
 800edb2:	4b11      	ldr	r3, [pc, #68]	; (800edf8 <USB_DevInit+0x2e0>)
 800edb4:	4313      	orrs	r3, r2
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800edba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d005      	beq.n	800edcc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	699b      	ldr	r3, [r3, #24]
 800edc4:	f043 0208 	orr.w	r2, r3, #8
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800edcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d107      	bne.n	800ede2 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	699b      	ldr	r3, [r3, #24]
 800edd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800edda:	f043 0304 	orr.w	r3, r3, #4
 800edde:	687a      	ldr	r2, [r7, #4]
 800ede0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ede2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3718      	adds	r7, #24
 800ede8:	46bd      	mov	sp, r7
 800edea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800edee:	b004      	add	sp, #16
 800edf0:	4770      	bx	lr
 800edf2:	bf00      	nop
 800edf4:	00800100 	.word	0x00800100
 800edf8:	803c3800 	.word	0x803c3800

0800edfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ee06:	2300      	movs	r3, #0
 800ee08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	019b      	lsls	r3, r3, #6
 800ee0e:	f043 0220 	orr.w	r2, r3, #32
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	4a09      	ldr	r2, [pc, #36]	; (800ee44 <USB_FlushTxFifo+0x48>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d901      	bls.n	800ee28 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ee24:	2303      	movs	r3, #3
 800ee26:	e006      	b.n	800ee36 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	691b      	ldr	r3, [r3, #16]
 800ee2c:	f003 0320 	and.w	r3, r3, #32
 800ee30:	2b20      	cmp	r3, #32
 800ee32:	d0f0      	beq.n	800ee16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ee34:	2300      	movs	r3, #0
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3714      	adds	r7, #20
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop
 800ee44:	00030d40 	.word	0x00030d40

0800ee48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ee50:	2300      	movs	r3, #0
 800ee52:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2210      	movs	r2, #16
 800ee58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	60fb      	str	r3, [r7, #12]
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	4a09      	ldr	r2, [pc, #36]	; (800ee88 <USB_FlushRxFifo+0x40>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d901      	bls.n	800ee6c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ee68:	2303      	movs	r3, #3
 800ee6a:	e006      	b.n	800ee7a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	f003 0310 	and.w	r3, r3, #16
 800ee74:	2b10      	cmp	r3, #16
 800ee76:	d0f0      	beq.n	800ee5a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ee78:	2300      	movs	r3, #0
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3714      	adds	r7, #20
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	00030d40 	.word	0x00030d40

0800ee8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b085      	sub	sp, #20
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	460b      	mov	r3, r1
 800ee96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	78fb      	ldrb	r3, [r7, #3]
 800eea6:	68f9      	ldr	r1, [r7, #12]
 800eea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eeac:	4313      	orrs	r3, r2
 800eeae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800eebe:	b480      	push	{r7}
 800eec0:	b087      	sub	sp, #28
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	f003 0306 	and.w	r3, r3, #6
 800eed6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d102      	bne.n	800eee4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800eede:	2300      	movs	r3, #0
 800eee0:	75fb      	strb	r3, [r7, #23]
 800eee2:	e00a      	b.n	800eefa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2b02      	cmp	r3, #2
 800eee8:	d002      	beq.n	800eef0 <USB_GetDevSpeed+0x32>
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2b06      	cmp	r3, #6
 800eeee:	d102      	bne.n	800eef6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800eef0:	2302      	movs	r3, #2
 800eef2:	75fb      	strb	r3, [r7, #23]
 800eef4:	e001      	b.n	800eefa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800eef6:	230f      	movs	r3, #15
 800eef8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800eefa:	7dfb      	ldrb	r3, [r7, #23]
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	371c      	adds	r7, #28
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	785b      	ldrb	r3, [r3, #1]
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d13a      	bne.n	800ef9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef2a:	69da      	ldr	r2, [r3, #28]
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	f003 030f 	and.w	r3, r3, #15
 800ef34:	2101      	movs	r1, #1
 800ef36:	fa01 f303 	lsl.w	r3, r1, r3
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	68f9      	ldr	r1, [r7, #12]
 800ef3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef42:	4313      	orrs	r3, r2
 800ef44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	015a      	lsls	r2, r3, #5
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d155      	bne.n	800f008 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	015a      	lsls	r2, r3, #5
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	4413      	add	r3, r2
 800ef64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	78db      	ldrb	r3, [r3, #3]
 800ef76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	059b      	lsls	r3, r3, #22
 800ef7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ef80:	4313      	orrs	r3, r2
 800ef82:	68ba      	ldr	r2, [r7, #8]
 800ef84:	0151      	lsls	r1, r2, #5
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	440a      	add	r2, r1
 800ef8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef96:	6013      	str	r3, [r2, #0]
 800ef98:	e036      	b.n	800f008 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efa0:	69da      	ldr	r2, [r3, #28]
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	f003 030f 	and.w	r3, r3, #15
 800efaa:	2101      	movs	r1, #1
 800efac:	fa01 f303 	lsl.w	r3, r1, r3
 800efb0:	041b      	lsls	r3, r3, #16
 800efb2:	68f9      	ldr	r1, [r7, #12]
 800efb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efb8:	4313      	orrs	r3, r2
 800efba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	015a      	lsls	r2, r3, #5
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	4413      	add	r3, r2
 800efc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d11a      	bne.n	800f008 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	015a      	lsls	r2, r3, #5
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	4413      	add	r3, r2
 800efda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	78db      	ldrb	r3, [r3, #3]
 800efec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800efee:	430b      	orrs	r3, r1
 800eff0:	4313      	orrs	r3, r2
 800eff2:	68ba      	ldr	r2, [r7, #8]
 800eff4:	0151      	lsls	r1, r2, #5
 800eff6:	68fa      	ldr	r2, [r7, #12]
 800eff8:	440a      	add	r2, r1
 800effa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800effe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f006:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f008:	2300      	movs	r3, #0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3714      	adds	r7, #20
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr
	...

0800f018 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f018:	b480      	push	{r7}
 800f01a:	b085      	sub	sp, #20
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	785b      	ldrb	r3, [r3, #1]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d135      	bne.n	800f0a0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f03a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	f003 030f 	and.w	r3, r3, #15
 800f044:	2101      	movs	r1, #1
 800f046:	fa01 f303 	lsl.w	r3, r1, r3
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	43db      	mvns	r3, r3
 800f04e:	68f9      	ldr	r1, [r7, #12]
 800f050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f054:	4013      	ands	r3, r2
 800f056:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f05e:	69da      	ldr	r2, [r3, #28]
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	f003 030f 	and.w	r3, r3, #15
 800f068:	2101      	movs	r1, #1
 800f06a:	fa01 f303 	lsl.w	r3, r1, r3
 800f06e:	b29b      	uxth	r3, r3
 800f070:	43db      	mvns	r3, r3
 800f072:	68f9      	ldr	r1, [r7, #12]
 800f074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f078:	4013      	ands	r3, r2
 800f07a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	015a      	lsls	r2, r3, #5
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	4413      	add	r3, r2
 800f084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	0159      	lsls	r1, r3, #5
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	440b      	add	r3, r1
 800f092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f096:	4619      	mov	r1, r3
 800f098:	4b1f      	ldr	r3, [pc, #124]	; (800f118 <USB_DeactivateEndpoint+0x100>)
 800f09a:	4013      	ands	r3, r2
 800f09c:	600b      	str	r3, [r1, #0]
 800f09e:	e034      	b.n	800f10a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	f003 030f 	and.w	r3, r3, #15
 800f0b0:	2101      	movs	r1, #1
 800f0b2:	fa01 f303 	lsl.w	r3, r1, r3
 800f0b6:	041b      	lsls	r3, r3, #16
 800f0b8:	43db      	mvns	r3, r3
 800f0ba:	68f9      	ldr	r1, [r7, #12]
 800f0bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f0c0:	4013      	ands	r3, r2
 800f0c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0ca:	69da      	ldr	r2, [r3, #28]
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	f003 030f 	and.w	r3, r3, #15
 800f0d4:	2101      	movs	r1, #1
 800f0d6:	fa01 f303 	lsl.w	r3, r1, r3
 800f0da:	041b      	lsls	r3, r3, #16
 800f0dc:	43db      	mvns	r3, r3
 800f0de:	68f9      	ldr	r1, [r7, #12]
 800f0e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f0e4:	4013      	ands	r3, r2
 800f0e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	015a      	lsls	r2, r3, #5
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	0159      	lsls	r1, r3, #5
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	440b      	add	r3, r1
 800f0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f102:	4619      	mov	r1, r3
 800f104:	4b05      	ldr	r3, [pc, #20]	; (800f11c <USB_DeactivateEndpoint+0x104>)
 800f106:	4013      	ands	r3, r2
 800f108:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f10a:	2300      	movs	r3, #0
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3714      	adds	r7, #20
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr
 800f118:	ec337800 	.word	0xec337800
 800f11c:	eff37800 	.word	0xeff37800

0800f120 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b08a      	sub	sp, #40	; 0x28
 800f124:	af02      	add	r7, sp, #8
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	4613      	mov	r3, r2
 800f12c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	785b      	ldrb	r3, [r3, #1]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	f040 815c 	bne.w	800f3fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	695b      	ldr	r3, [r3, #20]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d132      	bne.n	800f1b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f14a:	69bb      	ldr	r3, [r7, #24]
 800f14c:	015a      	lsls	r2, r3, #5
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	4413      	add	r3, r2
 800f152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	69ba      	ldr	r2, [r7, #24]
 800f15a:	0151      	lsls	r1, r2, #5
 800f15c:	69fa      	ldr	r2, [r7, #28]
 800f15e:	440a      	add	r2, r1
 800f160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f164:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f168:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f16c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	015a      	lsls	r2, r3, #5
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	4413      	add	r3, r2
 800f176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f17a:	691b      	ldr	r3, [r3, #16]
 800f17c:	69ba      	ldr	r2, [r7, #24]
 800f17e:	0151      	lsls	r1, r2, #5
 800f180:	69fa      	ldr	r2, [r7, #28]
 800f182:	440a      	add	r2, r1
 800f184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f18c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f18e:	69bb      	ldr	r3, [r7, #24]
 800f190:	015a      	lsls	r2, r3, #5
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	4413      	add	r3, r2
 800f196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f19a:	691b      	ldr	r3, [r3, #16]
 800f19c:	69ba      	ldr	r2, [r7, #24]
 800f19e:	0151      	lsls	r1, r2, #5
 800f1a0:	69fa      	ldr	r2, [r7, #28]
 800f1a2:	440a      	add	r2, r1
 800f1a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1a8:	0cdb      	lsrs	r3, r3, #19
 800f1aa:	04db      	lsls	r3, r3, #19
 800f1ac:	6113      	str	r3, [r2, #16]
 800f1ae:	e074      	b.n	800f29a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	015a      	lsls	r2, r3, #5
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	4413      	add	r3, r2
 800f1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1bc:	691b      	ldr	r3, [r3, #16]
 800f1be:	69ba      	ldr	r2, [r7, #24]
 800f1c0:	0151      	lsls	r1, r2, #5
 800f1c2:	69fa      	ldr	r2, [r7, #28]
 800f1c4:	440a      	add	r2, r1
 800f1c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1ca:	0cdb      	lsrs	r3, r3, #19
 800f1cc:	04db      	lsls	r3, r3, #19
 800f1ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1dc:	691b      	ldr	r3, [r3, #16]
 800f1de:	69ba      	ldr	r2, [r7, #24]
 800f1e0:	0151      	lsls	r1, r2, #5
 800f1e2:	69fa      	ldr	r2, [r7, #28]
 800f1e4:	440a      	add	r2, r1
 800f1e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f1ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f1f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	015a      	lsls	r2, r3, #5
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	4413      	add	r3, r2
 800f1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f200:	691a      	ldr	r2, [r3, #16]
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	6959      	ldr	r1, [r3, #20]
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	689b      	ldr	r3, [r3, #8]
 800f20a:	440b      	add	r3, r1
 800f20c:	1e59      	subs	r1, r3, #1
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	689b      	ldr	r3, [r3, #8]
 800f212:	fbb1 f3f3 	udiv	r3, r1, r3
 800f216:	04d9      	lsls	r1, r3, #19
 800f218:	4b9d      	ldr	r3, [pc, #628]	; (800f490 <USB_EPStartXfer+0x370>)
 800f21a:	400b      	ands	r3, r1
 800f21c:	69b9      	ldr	r1, [r7, #24]
 800f21e:	0148      	lsls	r0, r1, #5
 800f220:	69f9      	ldr	r1, [r7, #28]
 800f222:	4401      	add	r1, r0
 800f224:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f228:	4313      	orrs	r3, r2
 800f22a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	015a      	lsls	r2, r3, #5
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	4413      	add	r3, r2
 800f234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f238:	691a      	ldr	r2, [r3, #16]
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	695b      	ldr	r3, [r3, #20]
 800f23e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f242:	69b9      	ldr	r1, [r7, #24]
 800f244:	0148      	lsls	r0, r1, #5
 800f246:	69f9      	ldr	r1, [r7, #28]
 800f248:	4401      	add	r1, r0
 800f24a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f24e:	4313      	orrs	r3, r2
 800f250:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	78db      	ldrb	r3, [r3, #3]
 800f256:	2b01      	cmp	r3, #1
 800f258:	d11f      	bne.n	800f29a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	015a      	lsls	r2, r3, #5
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	4413      	add	r3, r2
 800f262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f266:	691b      	ldr	r3, [r3, #16]
 800f268:	69ba      	ldr	r2, [r7, #24]
 800f26a:	0151      	lsls	r1, r2, #5
 800f26c:	69fa      	ldr	r2, [r7, #28]
 800f26e:	440a      	add	r2, r1
 800f270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f274:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f278:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	015a      	lsls	r2, r3, #5
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	4413      	add	r3, r2
 800f282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f286:	691b      	ldr	r3, [r3, #16]
 800f288:	69ba      	ldr	r2, [r7, #24]
 800f28a:	0151      	lsls	r1, r2, #5
 800f28c:	69fa      	ldr	r2, [r7, #28]
 800f28e:	440a      	add	r2, r1
 800f290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f294:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f298:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f29a:	79fb      	ldrb	r3, [r7, #7]
 800f29c:	2b01      	cmp	r3, #1
 800f29e:	d14b      	bne.n	800f338 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	691b      	ldr	r3, [r3, #16]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d009      	beq.n	800f2bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f2a8:	69bb      	ldr	r3, [r7, #24]
 800f2aa:	015a      	lsls	r2, r3, #5
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	78db      	ldrb	r3, [r3, #3]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d128      	bne.n	800f316 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d110      	bne.n	800f2f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	015a      	lsls	r2, r3, #5
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	4413      	add	r3, r2
 800f2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	69ba      	ldr	r2, [r7, #24]
 800f2e4:	0151      	lsls	r1, r2, #5
 800f2e6:	69fa      	ldr	r2, [r7, #28]
 800f2e8:	440a      	add	r2, r1
 800f2ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f2f2:	6013      	str	r3, [r2, #0]
 800f2f4:	e00f      	b.n	800f316 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f2f6:	69bb      	ldr	r3, [r7, #24]
 800f2f8:	015a      	lsls	r2, r3, #5
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	69ba      	ldr	r2, [r7, #24]
 800f306:	0151      	lsls	r1, r2, #5
 800f308:	69fa      	ldr	r2, [r7, #28]
 800f30a:	440a      	add	r2, r1
 800f30c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f314:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	015a      	lsls	r2, r3, #5
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	4413      	add	r3, r2
 800f31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	69ba      	ldr	r2, [r7, #24]
 800f326:	0151      	lsls	r1, r2, #5
 800f328:	69fa      	ldr	r2, [r7, #28]
 800f32a:	440a      	add	r2, r1
 800f32c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f330:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f334:	6013      	str	r3, [r2, #0]
 800f336:	e12f      	b.n	800f598 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f338:	69bb      	ldr	r3, [r7, #24]
 800f33a:	015a      	lsls	r2, r3, #5
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	4413      	add	r3, r2
 800f340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	69ba      	ldr	r2, [r7, #24]
 800f348:	0151      	lsls	r1, r2, #5
 800f34a:	69fa      	ldr	r2, [r7, #28]
 800f34c:	440a      	add	r2, r1
 800f34e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f352:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f356:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	78db      	ldrb	r3, [r3, #3]
 800f35c:	2b01      	cmp	r3, #1
 800f35e:	d015      	beq.n	800f38c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	695b      	ldr	r3, [r3, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	f000 8117 	beq.w	800f598 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	f003 030f 	and.w	r3, r3, #15
 800f37a:	2101      	movs	r1, #1
 800f37c:	fa01 f303 	lsl.w	r3, r1, r3
 800f380:	69f9      	ldr	r1, [r7, #28]
 800f382:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f386:	4313      	orrs	r3, r2
 800f388:	634b      	str	r3, [r1, #52]	; 0x34
 800f38a:	e105      	b.n	800f598 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d110      	bne.n	800f3be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	015a      	lsls	r2, r3, #5
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	69ba      	ldr	r2, [r7, #24]
 800f3ac:	0151      	lsls	r1, r2, #5
 800f3ae:	69fa      	ldr	r2, [r7, #28]
 800f3b0:	440a      	add	r2, r1
 800f3b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3ba:	6013      	str	r3, [r2, #0]
 800f3bc:	e00f      	b.n	800f3de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f3be:	69bb      	ldr	r3, [r7, #24]
 800f3c0:	015a      	lsls	r2, r3, #5
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	4413      	add	r3, r2
 800f3c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	69ba      	ldr	r2, [r7, #24]
 800f3ce:	0151      	lsls	r1, r2, #5
 800f3d0:	69fa      	ldr	r2, [r7, #28]
 800f3d2:	440a      	add	r2, r1
 800f3d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	68d9      	ldr	r1, [r3, #12]
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	781a      	ldrb	r2, [r3, #0]
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	695b      	ldr	r3, [r3, #20]
 800f3ea:	b298      	uxth	r0, r3
 800f3ec:	79fb      	ldrb	r3, [r7, #7]
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	68f8      	ldr	r0, [r7, #12]
 800f3f4:	f000 fa2b 	bl	800f84e <USB_WritePacket>
 800f3f8:	e0ce      	b.n	800f598 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	015a      	lsls	r2, r3, #5
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	4413      	add	r3, r2
 800f402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	69ba      	ldr	r2, [r7, #24]
 800f40a:	0151      	lsls	r1, r2, #5
 800f40c:	69fa      	ldr	r2, [r7, #28]
 800f40e:	440a      	add	r2, r1
 800f410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f414:	0cdb      	lsrs	r3, r3, #19
 800f416:	04db      	lsls	r3, r3, #19
 800f418:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f41a:	69bb      	ldr	r3, [r7, #24]
 800f41c:	015a      	lsls	r2, r3, #5
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	4413      	add	r3, r2
 800f422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f426:	691b      	ldr	r3, [r3, #16]
 800f428:	69ba      	ldr	r2, [r7, #24]
 800f42a:	0151      	lsls	r1, r2, #5
 800f42c:	69fa      	ldr	r2, [r7, #28]
 800f42e:	440a      	add	r2, r1
 800f430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f434:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f438:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f43c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	695b      	ldr	r3, [r3, #20]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d126      	bne.n	800f494 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	015a      	lsls	r2, r3, #5
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	4413      	add	r3, r2
 800f44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f452:	691a      	ldr	r2, [r3, #16]
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f45c:	69b9      	ldr	r1, [r7, #24]
 800f45e:	0148      	lsls	r0, r1, #5
 800f460:	69f9      	ldr	r1, [r7, #28]
 800f462:	4401      	add	r1, r0
 800f464:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f468:	4313      	orrs	r3, r2
 800f46a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	015a      	lsls	r2, r3, #5
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	4413      	add	r3, r2
 800f474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f478:	691b      	ldr	r3, [r3, #16]
 800f47a:	69ba      	ldr	r2, [r7, #24]
 800f47c:	0151      	lsls	r1, r2, #5
 800f47e:	69fa      	ldr	r2, [r7, #28]
 800f480:	440a      	add	r2, r1
 800f482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f486:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f48a:	6113      	str	r3, [r2, #16]
 800f48c:	e036      	b.n	800f4fc <USB_EPStartXfer+0x3dc>
 800f48e:	bf00      	nop
 800f490:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	695a      	ldr	r2, [r3, #20]
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	4413      	add	r3, r2
 800f49e:	1e5a      	subs	r2, r3, #1
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	689b      	ldr	r3, [r3, #8]
 800f4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4a8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	015a      	lsls	r2, r3, #5
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b6:	691a      	ldr	r2, [r3, #16]
 800f4b8:	8afb      	ldrh	r3, [r7, #22]
 800f4ba:	04d9      	lsls	r1, r3, #19
 800f4bc:	4b39      	ldr	r3, [pc, #228]	; (800f5a4 <USB_EPStartXfer+0x484>)
 800f4be:	400b      	ands	r3, r1
 800f4c0:	69b9      	ldr	r1, [r7, #24]
 800f4c2:	0148      	lsls	r0, r1, #5
 800f4c4:	69f9      	ldr	r1, [r7, #28]
 800f4c6:	4401      	add	r1, r0
 800f4c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	015a      	lsls	r2, r3, #5
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4dc:	691a      	ldr	r2, [r3, #16]
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	689b      	ldr	r3, [r3, #8]
 800f4e2:	8af9      	ldrh	r1, [r7, #22]
 800f4e4:	fb01 f303 	mul.w	r3, r1, r3
 800f4e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f4ec:	69b9      	ldr	r1, [r7, #24]
 800f4ee:	0148      	lsls	r0, r1, #5
 800f4f0:	69f9      	ldr	r1, [r7, #28]
 800f4f2:	4401      	add	r1, r0
 800f4f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f4f8:	4313      	orrs	r3, r2
 800f4fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f4fc:	79fb      	ldrb	r3, [r7, #7]
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d10d      	bne.n	800f51e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d009      	beq.n	800f51e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	68d9      	ldr	r1, [r3, #12]
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	015a      	lsls	r2, r3, #5
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	4413      	add	r3, r2
 800f516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f51a:	460a      	mov	r2, r1
 800f51c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	78db      	ldrb	r3, [r3, #3]
 800f522:	2b01      	cmp	r3, #1
 800f524:	d128      	bne.n	800f578 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f526:	69fb      	ldr	r3, [r7, #28]
 800f528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f52c:	689b      	ldr	r3, [r3, #8]
 800f52e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f532:	2b00      	cmp	r3, #0
 800f534:	d110      	bne.n	800f558 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	015a      	lsls	r2, r3, #5
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	4413      	add	r3, r2
 800f53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	69ba      	ldr	r2, [r7, #24]
 800f546:	0151      	lsls	r1, r2, #5
 800f548:	69fa      	ldr	r2, [r7, #28]
 800f54a:	440a      	add	r2, r1
 800f54c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f550:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f554:	6013      	str	r3, [r2, #0]
 800f556:	e00f      	b.n	800f578 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	015a      	lsls	r2, r3, #5
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	4413      	add	r3, r2
 800f560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	69ba      	ldr	r2, [r7, #24]
 800f568:	0151      	lsls	r1, r2, #5
 800f56a:	69fa      	ldr	r2, [r7, #28]
 800f56c:	440a      	add	r2, r1
 800f56e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f576:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f578:	69bb      	ldr	r3, [r7, #24]
 800f57a:	015a      	lsls	r2, r3, #5
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	4413      	add	r3, r2
 800f580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	69ba      	ldr	r2, [r7, #24]
 800f588:	0151      	lsls	r1, r2, #5
 800f58a:	69fa      	ldr	r2, [r7, #28]
 800f58c:	440a      	add	r2, r1
 800f58e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f596:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f598:	2300      	movs	r3, #0
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3720      	adds	r7, #32
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	1ff80000 	.word	0x1ff80000

0800f5a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b087      	sub	sp, #28
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	60f8      	str	r0, [r7, #12]
 800f5b0:	60b9      	str	r1, [r7, #8]
 800f5b2:	4613      	mov	r3, r2
 800f5b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	785b      	ldrb	r3, [r3, #1]
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	f040 80cd 	bne.w	800f764 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	695b      	ldr	r3, [r3, #20]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d132      	bne.n	800f638 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	015a      	lsls	r2, r3, #5
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	4413      	add	r3, r2
 800f5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5de:	691b      	ldr	r3, [r3, #16]
 800f5e0:	693a      	ldr	r2, [r7, #16]
 800f5e2:	0151      	lsls	r1, r2, #5
 800f5e4:	697a      	ldr	r2, [r7, #20]
 800f5e6:	440a      	add	r2, r1
 800f5e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f5f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f5f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	015a      	lsls	r2, r3, #5
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f602:	691b      	ldr	r3, [r3, #16]
 800f604:	693a      	ldr	r2, [r7, #16]
 800f606:	0151      	lsls	r1, r2, #5
 800f608:	697a      	ldr	r2, [r7, #20]
 800f60a:	440a      	add	r2, r1
 800f60c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f610:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f614:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	015a      	lsls	r2, r3, #5
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	4413      	add	r3, r2
 800f61e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f622:	691b      	ldr	r3, [r3, #16]
 800f624:	693a      	ldr	r2, [r7, #16]
 800f626:	0151      	lsls	r1, r2, #5
 800f628:	697a      	ldr	r2, [r7, #20]
 800f62a:	440a      	add	r2, r1
 800f62c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f630:	0cdb      	lsrs	r3, r3, #19
 800f632:	04db      	lsls	r3, r3, #19
 800f634:	6113      	str	r3, [r2, #16]
 800f636:	e04e      	b.n	800f6d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	015a      	lsls	r2, r3, #5
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	4413      	add	r3, r2
 800f640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	693a      	ldr	r2, [r7, #16]
 800f648:	0151      	lsls	r1, r2, #5
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	440a      	add	r2, r1
 800f64e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f652:	0cdb      	lsrs	r3, r3, #19
 800f654:	04db      	lsls	r3, r3, #19
 800f656:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	015a      	lsls	r2, r3, #5
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	4413      	add	r3, r2
 800f660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f664:	691b      	ldr	r3, [r3, #16]
 800f666:	693a      	ldr	r2, [r7, #16]
 800f668:	0151      	lsls	r1, r2, #5
 800f66a:	697a      	ldr	r2, [r7, #20]
 800f66c:	440a      	add	r2, r1
 800f66e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f672:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f676:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f67a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	695a      	ldr	r2, [r3, #20]
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	429a      	cmp	r2, r3
 800f686:	d903      	bls.n	800f690 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	689a      	ldr	r2, [r3, #8]
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	015a      	lsls	r2, r3, #5
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	4413      	add	r3, r2
 800f698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f69c:	691b      	ldr	r3, [r3, #16]
 800f69e:	693a      	ldr	r2, [r7, #16]
 800f6a0:	0151      	lsls	r1, r2, #5
 800f6a2:	697a      	ldr	r2, [r7, #20]
 800f6a4:	440a      	add	r2, r1
 800f6a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f6ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	015a      	lsls	r2, r3, #5
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6bc:	691a      	ldr	r2, [r3, #16]
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	695b      	ldr	r3, [r3, #20]
 800f6c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f6c6:	6939      	ldr	r1, [r7, #16]
 800f6c8:	0148      	lsls	r0, r1, #5
 800f6ca:	6979      	ldr	r1, [r7, #20]
 800f6cc:	4401      	add	r1, r0
 800f6ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f6d6:	79fb      	ldrb	r3, [r7, #7]
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d11e      	bne.n	800f71a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	691b      	ldr	r3, [r3, #16]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d009      	beq.n	800f6f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	015a      	lsls	r2, r3, #5
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6f0:	461a      	mov	r2, r3
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	691b      	ldr	r3, [r3, #16]
 800f6f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	015a      	lsls	r2, r3, #5
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	4413      	add	r3, r2
 800f700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	693a      	ldr	r2, [r7, #16]
 800f708:	0151      	lsls	r1, r2, #5
 800f70a:	697a      	ldr	r2, [r7, #20]
 800f70c:	440a      	add	r2, r1
 800f70e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f712:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f716:	6013      	str	r3, [r2, #0]
 800f718:	e092      	b.n	800f840 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	015a      	lsls	r2, r3, #5
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	4413      	add	r3, r2
 800f722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	693a      	ldr	r2, [r7, #16]
 800f72a:	0151      	lsls	r1, r2, #5
 800f72c:	697a      	ldr	r2, [r7, #20]
 800f72e:	440a      	add	r2, r1
 800f730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f734:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f738:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	695b      	ldr	r3, [r3, #20]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d07e      	beq.n	800f840 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	f003 030f 	and.w	r3, r3, #15
 800f752:	2101      	movs	r1, #1
 800f754:	fa01 f303 	lsl.w	r3, r1, r3
 800f758:	6979      	ldr	r1, [r7, #20]
 800f75a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f75e:	4313      	orrs	r3, r2
 800f760:	634b      	str	r3, [r1, #52]	; 0x34
 800f762:	e06d      	b.n	800f840 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	015a      	lsls	r2, r3, #5
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	4413      	add	r3, r2
 800f76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f770:	691b      	ldr	r3, [r3, #16]
 800f772:	693a      	ldr	r2, [r7, #16]
 800f774:	0151      	lsls	r1, r2, #5
 800f776:	697a      	ldr	r2, [r7, #20]
 800f778:	440a      	add	r2, r1
 800f77a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f77e:	0cdb      	lsrs	r3, r3, #19
 800f780:	04db      	lsls	r3, r3, #19
 800f782:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	015a      	lsls	r2, r3, #5
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	4413      	add	r3, r2
 800f78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f790:	691b      	ldr	r3, [r3, #16]
 800f792:	693a      	ldr	r2, [r7, #16]
 800f794:	0151      	lsls	r1, r2, #5
 800f796:	697a      	ldr	r2, [r7, #20]
 800f798:	440a      	add	r2, r1
 800f79a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f79e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f7a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f7a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	695b      	ldr	r3, [r3, #20]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d003      	beq.n	800f7b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	689a      	ldr	r2, [r3, #8]
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	015a      	lsls	r2, r3, #5
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	4413      	add	r3, r2
 800f7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7c4:	691b      	ldr	r3, [r3, #16]
 800f7c6:	693a      	ldr	r2, [r7, #16]
 800f7c8:	0151      	lsls	r1, r2, #5
 800f7ca:	697a      	ldr	r2, [r7, #20]
 800f7cc:	440a      	add	r2, r1
 800f7ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	015a      	lsls	r2, r3, #5
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	4413      	add	r3, r2
 800f7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7e4:	691a      	ldr	r2, [r3, #16]
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	689b      	ldr	r3, [r3, #8]
 800f7ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7ee:	6939      	ldr	r1, [r7, #16]
 800f7f0:	0148      	lsls	r0, r1, #5
 800f7f2:	6979      	ldr	r1, [r7, #20]
 800f7f4:	4401      	add	r1, r0
 800f7f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f7fe:	79fb      	ldrb	r3, [r7, #7]
 800f800:	2b01      	cmp	r3, #1
 800f802:	d10d      	bne.n	800f820 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d009      	beq.n	800f820 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	68d9      	ldr	r1, [r3, #12]
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	015a      	lsls	r2, r3, #5
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	4413      	add	r3, r2
 800f818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f81c:	460a      	mov	r2, r1
 800f81e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	015a      	lsls	r2, r3, #5
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	4413      	add	r3, r2
 800f828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	693a      	ldr	r2, [r7, #16]
 800f830:	0151      	lsls	r1, r2, #5
 800f832:	697a      	ldr	r2, [r7, #20]
 800f834:	440a      	add	r2, r1
 800f836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f83a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f83e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f840:	2300      	movs	r3, #0
}
 800f842:	4618      	mov	r0, r3
 800f844:	371c      	adds	r7, #28
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr

0800f84e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f84e:	b480      	push	{r7}
 800f850:	b089      	sub	sp, #36	; 0x24
 800f852:	af00      	add	r7, sp, #0
 800f854:	60f8      	str	r0, [r7, #12]
 800f856:	60b9      	str	r1, [r7, #8]
 800f858:	4611      	mov	r1, r2
 800f85a:	461a      	mov	r2, r3
 800f85c:	460b      	mov	r3, r1
 800f85e:	71fb      	strb	r3, [r7, #7]
 800f860:	4613      	mov	r3, r2
 800f862:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f86c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f870:	2b00      	cmp	r3, #0
 800f872:	d11a      	bne.n	800f8aa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f874:	88bb      	ldrh	r3, [r7, #4]
 800f876:	3303      	adds	r3, #3
 800f878:	089b      	lsrs	r3, r3, #2
 800f87a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f87c:	2300      	movs	r3, #0
 800f87e:	61bb      	str	r3, [r7, #24]
 800f880:	e00f      	b.n	800f8a2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f882:	79fb      	ldrb	r3, [r7, #7]
 800f884:	031a      	lsls	r2, r3, #12
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	4413      	add	r3, r2
 800f88a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f88e:	461a      	mov	r2, r3
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	3304      	adds	r3, #4
 800f89a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	61bb      	str	r3, [r7, #24]
 800f8a2:	69ba      	ldr	r2, [r7, #24]
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d3eb      	bcc.n	800f882 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f8aa:	2300      	movs	r3, #0
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3724      	adds	r7, #36	; 0x24
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr

0800f8b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b089      	sub	sp, #36	; 0x24
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f8ce:	88fb      	ldrh	r3, [r7, #6]
 800f8d0:	3303      	adds	r3, #3
 800f8d2:	089b      	lsrs	r3, r3, #2
 800f8d4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	61bb      	str	r3, [r7, #24]
 800f8da:	e00b      	b.n	800f8f4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	601a      	str	r2, [r3, #0]
    pDest++;
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	3304      	adds	r3, #4
 800f8ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f8ee:	69bb      	ldr	r3, [r7, #24]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	61bb      	str	r3, [r7, #24]
 800f8f4:	69ba      	ldr	r2, [r7, #24]
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d3ef      	bcc.n	800f8dc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f8fc:	69fb      	ldr	r3, [r7, #28]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3724      	adds	r7, #36	; 0x24
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr

0800f90a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f90a:	b480      	push	{r7}
 800f90c:	b085      	sub	sp, #20
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
 800f912:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	785b      	ldrb	r3, [r3, #1]
 800f922:	2b01      	cmp	r3, #1
 800f924:	d12c      	bne.n	800f980 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	015a      	lsls	r2, r3, #5
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	4413      	add	r3, r2
 800f92e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	db12      	blt.n	800f95e <USB_EPSetStall+0x54>
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d00f      	beq.n	800f95e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	015a      	lsls	r2, r3, #5
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	4413      	add	r3, r2
 800f946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	68ba      	ldr	r2, [r7, #8]
 800f94e:	0151      	lsls	r1, r2, #5
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	440a      	add	r2, r1
 800f954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f958:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f95c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	015a      	lsls	r2, r3, #5
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	4413      	add	r3, r2
 800f966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	0151      	lsls	r1, r2, #5
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	440a      	add	r2, r1
 800f974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f97c:	6013      	str	r3, [r2, #0]
 800f97e:	e02b      	b.n	800f9d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	015a      	lsls	r2, r3, #5
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	4413      	add	r3, r2
 800f988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	db12      	blt.n	800f9b8 <USB_EPSetStall+0xae>
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d00f      	beq.n	800f9b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	015a      	lsls	r2, r3, #5
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	4413      	add	r3, r2
 800f9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	68ba      	ldr	r2, [r7, #8]
 800f9a8:	0151      	lsls	r1, r2, #5
 800f9aa:	68fa      	ldr	r2, [r7, #12]
 800f9ac:	440a      	add	r2, r1
 800f9ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f9b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	015a      	lsls	r2, r3, #5
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	4413      	add	r3, r2
 800f9c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	68ba      	ldr	r2, [r7, #8]
 800f9c8:	0151      	lsls	r1, r2, #5
 800f9ca:	68fa      	ldr	r2, [r7, #12]
 800f9cc:	440a      	add	r2, r1
 800f9ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f9d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f9d8:	2300      	movs	r3, #0
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3714      	adds	r7, #20
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr

0800f9e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f9e6:	b480      	push	{r7}
 800f9e8:	b085      	sub	sp, #20
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
 800f9ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	785b      	ldrb	r3, [r3, #1]
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d128      	bne.n	800fa54 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	015a      	lsls	r2, r3, #5
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	4413      	add	r3, r2
 800fa0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	68ba      	ldr	r2, [r7, #8]
 800fa12:	0151      	lsls	r1, r2, #5
 800fa14:	68fa      	ldr	r2, [r7, #12]
 800fa16:	440a      	add	r2, r1
 800fa18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	78db      	ldrb	r3, [r3, #3]
 800fa26:	2b03      	cmp	r3, #3
 800fa28:	d003      	beq.n	800fa32 <USB_EPClearStall+0x4c>
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	78db      	ldrb	r3, [r3, #3]
 800fa2e:	2b02      	cmp	r3, #2
 800fa30:	d138      	bne.n	800faa4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	015a      	lsls	r2, r3, #5
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	4413      	add	r3, r2
 800fa3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	68ba      	ldr	r2, [r7, #8]
 800fa42:	0151      	lsls	r1, r2, #5
 800fa44:	68fa      	ldr	r2, [r7, #12]
 800fa46:	440a      	add	r2, r1
 800fa48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa50:	6013      	str	r3, [r2, #0]
 800fa52:	e027      	b.n	800faa4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	015a      	lsls	r2, r3, #5
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	68ba      	ldr	r2, [r7, #8]
 800fa64:	0151      	lsls	r1, r2, #5
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	440a      	add	r2, r1
 800fa6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	78db      	ldrb	r3, [r3, #3]
 800fa78:	2b03      	cmp	r3, #3
 800fa7a:	d003      	beq.n	800fa84 <USB_EPClearStall+0x9e>
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	78db      	ldrb	r3, [r3, #3]
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	d10f      	bne.n	800faa4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	015a      	lsls	r2, r3, #5
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	68ba      	ldr	r2, [r7, #8]
 800fa94:	0151      	lsls	r1, r2, #5
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	440a      	add	r2, r1
 800fa9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800faa2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800faa4:	2300      	movs	r3, #0
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3714      	adds	r7, #20
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fab2:	b480      	push	{r7}
 800fab4:	b085      	sub	sp, #20
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	460b      	mov	r3, r1
 800fabc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fad0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fad4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	78fb      	ldrb	r3, [r7, #3]
 800fae0:	011b      	lsls	r3, r3, #4
 800fae2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fae6:	68f9      	ldr	r1, [r7, #12]
 800fae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800faec:	4313      	orrs	r3, r2
 800faee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800faf0:	2300      	movs	r3, #0
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3714      	adds	r7, #20
 800faf6:	46bd      	mov	sp, r7
 800faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafc:	4770      	bx	lr

0800fafe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b084      	sub	sp, #16
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	68fa      	ldr	r2, [r7, #12]
 800fb14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb18:	f023 0302 	bic.w	r3, r3, #2
 800fb1c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fb1e:	2003      	movs	r0, #3
 800fb20:	f7f7 f852 	bl	8006bc8 <HAL_Delay>

  return HAL_OK;
 800fb24:	2300      	movs	r3, #0
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b084      	sub	sp, #16
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb48:	f043 0302 	orr.w	r3, r3, #2
 800fb4c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fb4e:	2003      	movs	r0, #3
 800fb50:	f7f7 f83a 	bl	8006bc8 <HAL_Delay>

  return HAL_OK;
 800fb54:	2300      	movs	r3, #0
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3710      	adds	r7, #16
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}

0800fb5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fb5e:	b480      	push	{r7}
 800fb60:	b085      	sub	sp, #20
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	695b      	ldr	r3, [r3, #20]
 800fb6a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	699b      	ldr	r3, [r3, #24]
 800fb70:	68fa      	ldr	r2, [r7, #12]
 800fb72:	4013      	ands	r3, r2
 800fb74:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fb76:	68fb      	ldr	r3, [r7, #12]
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3714      	adds	r7, #20
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr

0800fb84 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb96:	699b      	ldr	r3, [r3, #24]
 800fb98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fba0:	69db      	ldr	r3, [r3, #28]
 800fba2:	68ba      	ldr	r2, [r7, #8]
 800fba4:	4013      	ands	r3, r2
 800fba6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	0c1b      	lsrs	r3, r3, #16
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3714      	adds	r7, #20
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr

0800fbb8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b085      	sub	sp, #20
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbca:	699b      	ldr	r3, [r3, #24]
 800fbcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbd4:	69db      	ldr	r3, [r3, #28]
 800fbd6:	68ba      	ldr	r2, [r7, #8]
 800fbd8:	4013      	ands	r3, r2
 800fbda:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	b29b      	uxth	r3, r3
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3714      	adds	r7, #20
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr

0800fbec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fbfc:	78fb      	ldrb	r3, [r7, #3]
 800fbfe:	015a      	lsls	r2, r3, #5
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	4413      	add	r3, r2
 800fc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc12:	695b      	ldr	r3, [r3, #20]
 800fc14:	68ba      	ldr	r2, [r7, #8]
 800fc16:	4013      	ands	r3, r2
 800fc18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fc1a:	68bb      	ldr	r3, [r7, #8]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3714      	adds	r7, #20
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b087      	sub	sp, #28
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	460b      	mov	r3, r1
 800fc32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc3e:	691b      	ldr	r3, [r3, #16]
 800fc40:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc4a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fc4c:	78fb      	ldrb	r3, [r7, #3]
 800fc4e:	f003 030f 	and.w	r3, r3, #15
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	fa22 f303 	lsr.w	r3, r2, r3
 800fc58:	01db      	lsls	r3, r3, #7
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	693a      	ldr	r2, [r7, #16]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fc62:	78fb      	ldrb	r3, [r7, #3]
 800fc64:	015a      	lsls	r2, r3, #5
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	4413      	add	r3, r2
 800fc6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	693a      	ldr	r2, [r7, #16]
 800fc72:	4013      	ands	r3, r2
 800fc74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fc76:	68bb      	ldr	r3, [r7, #8]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	371c      	adds	r7, #28
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b083      	sub	sp, #12
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	695b      	ldr	r3, [r3, #20]
 800fc90:	f003 0301 	and.w	r3, r3, #1
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	370c      	adds	r7, #12
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr

0800fca0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fcbe:	f023 0307 	bic.w	r3, r3, #7
 800fcc2:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	f003 0306 	and.w	r3, r3, #6
 800fcd0:	2b04      	cmp	r3, #4
 800fcd2:	d109      	bne.n	800fce8 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fce2:	f043 0303 	orr.w	r3, r3, #3
 800fce6:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fcfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fcfc:	2300      	movs	r3, #0
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3714      	adds	r7, #20
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
	...

0800fd0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b087      	sub	sp, #28
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	60f8      	str	r0, [r7, #12]
 800fd14:	460b      	mov	r3, r1
 800fd16:	607a      	str	r2, [r7, #4]
 800fd18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	333c      	adds	r3, #60	; 0x3c
 800fd22:	3304      	adds	r3, #4
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	4a26      	ldr	r2, [pc, #152]	; (800fdc4 <USB_EP0_OutStart+0xb8>)
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d90a      	bls.n	800fd46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd40:	d101      	bne.n	800fd46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fd42:	2300      	movs	r3, #0
 800fd44:	e037      	b.n	800fdb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	2300      	movs	r3, #0
 800fd50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd58:	691b      	ldr	r3, [r3, #16]
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fd64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	697a      	ldr	r2, [r7, #20]
 800fd70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd74:	f043 0318 	orr.w	r3, r3, #24
 800fd78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	697a      	ldr	r2, [r7, #20]
 800fd84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fd8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fd8e:	7afb      	ldrb	r3, [r7, #11]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d10f      	bne.n	800fdb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	697a      	ldr	r2, [r7, #20]
 800fdaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fdb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fdb4:	2300      	movs	r3, #0
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	371c      	adds	r7, #28
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	4f54300a 	.word	0x4f54300a

0800fdc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	60fb      	str	r3, [r7, #12]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	4a13      	ldr	r2, [pc, #76]	; (800fe2c <USB_CoreReset+0x64>)
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d901      	bls.n	800fde6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fde2:	2303      	movs	r3, #3
 800fde4:	e01b      	b.n	800fe1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	691b      	ldr	r3, [r3, #16]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	daf2      	bge.n	800fdd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	691b      	ldr	r3, [r3, #16]
 800fdf6:	f043 0201 	orr.w	r2, r3, #1
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	3301      	adds	r3, #1
 800fe02:	60fb      	str	r3, [r7, #12]
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	4a09      	ldr	r2, [pc, #36]	; (800fe2c <USB_CoreReset+0x64>)
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d901      	bls.n	800fe10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fe0c:	2303      	movs	r3, #3
 800fe0e:	e006      	b.n	800fe1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	f003 0301 	and.w	r3, r3, #1
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d0f0      	beq.n	800fdfe <USB_CoreReset+0x36>

  return HAL_OK;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3714      	adds	r7, #20
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	00030d40 	.word	0x00030d40

0800fe30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	460b      	mov	r3, r1
 800fe3a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	7c1b      	ldrb	r3, [r3, #16]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d115      	bne.n	800fe74 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fe48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe4c:	2202      	movs	r2, #2
 800fe4e:	2181      	movs	r1, #129	; 0x81
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f006 ff5e 	bl	8016d12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2201      	movs	r2, #1
 800fe5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fe5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe60:	2202      	movs	r2, #2
 800fe62:	2101      	movs	r1, #1
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f006 ff54 	bl	8016d12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800fe72:	e012      	b.n	800fe9a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fe74:	2340      	movs	r3, #64	; 0x40
 800fe76:	2202      	movs	r2, #2
 800fe78:	2181      	movs	r1, #129	; 0x81
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f006 ff49 	bl	8016d12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2201      	movs	r2, #1
 800fe84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fe86:	2340      	movs	r3, #64	; 0x40
 800fe88:	2202      	movs	r2, #2
 800fe8a:	2101      	movs	r1, #1
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f006 ff40 	bl	8016d12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2201      	movs	r2, #1
 800fe96:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fe9a:	2308      	movs	r3, #8
 800fe9c:	2203      	movs	r2, #3
 800fe9e:	2182      	movs	r1, #130	; 0x82
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f006 ff36 	bl	8016d12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2201      	movs	r2, #1
 800feaa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800feac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800feb0:	f007 f9ee 	bl	8017290 <malloc>
 800feb4:	4603      	mov	r3, r0
 800feb6:	461a      	mov	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d102      	bne.n	800fece <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800fec8:	2301      	movs	r3, #1
 800feca:	73fb      	strb	r3, [r7, #15]
 800fecc:	e026      	b.n	800ff1c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fed4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	2200      	movs	r2, #0
 800fee4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	2200      	movs	r2, #0
 800feec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	7c1b      	ldrb	r3, [r3, #16]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d109      	bne.n	800ff0c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fefe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff02:	2101      	movs	r1, #1
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f006 fff5 	bl	8016ef4 <USBD_LL_PrepareReceive>
 800ff0a:	e007      	b.n	800ff1c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ff12:	2340      	movs	r3, #64	; 0x40
 800ff14:	2101      	movs	r1, #1
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f006 ffec 	bl	8016ef4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ff1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b084      	sub	sp, #16
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
 800ff2e:	460b      	mov	r3, r1
 800ff30:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ff32:	2300      	movs	r3, #0
 800ff34:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ff36:	2181      	movs	r1, #129	; 0x81
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f006 ff10 	bl	8016d5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ff44:	2101      	movs	r1, #1
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f006 ff09 	bl	8016d5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ff54:	2182      	movs	r1, #130	; 0x82
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f006 ff01 	bl	8016d5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d00e      	beq.n	800ff8a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f007 f98f 	bl	80172a0 <free>
    pdev->pClassData = NULL;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2200      	movs	r2, #0
 800ff86:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800ff8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ffa4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d039      	beq.n	8010032 <USBD_CDC_Setup+0x9e>
 800ffbe:	2b20      	cmp	r3, #32
 800ffc0:	d17c      	bne.n	80100bc <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	88db      	ldrh	r3, [r3, #6]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d029      	beq.n	801001e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	b25b      	sxtb	r3, r3
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	da11      	bge.n	800fff8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	683a      	ldr	r2, [r7, #0]
 800ffde:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800ffe0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ffe2:	683a      	ldr	r2, [r7, #0]
 800ffe4:	88d2      	ldrh	r2, [r2, #6]
 800ffe6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ffe8:	6939      	ldr	r1, [r7, #16]
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	88db      	ldrh	r3, [r3, #6]
 800ffee:	461a      	mov	r2, r3
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f001 f9c9 	bl	8011388 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800fff6:	e068      	b.n	80100ca <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	785a      	ldrb	r2, [r3, #1]
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	88db      	ldrh	r3, [r3, #6]
 8010006:	b2da      	uxtb	r2, r3
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801000e:	6939      	ldr	r1, [r7, #16]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	88db      	ldrh	r3, [r3, #6]
 8010014:	461a      	mov	r2, r3
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f001 f9e4 	bl	80113e4 <USBD_CtlPrepareRx>
    break;
 801001c:	e055      	b.n	80100ca <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010024:	689b      	ldr	r3, [r3, #8]
 8010026:	683a      	ldr	r2, [r7, #0]
 8010028:	7850      	ldrb	r0, [r2, #1]
 801002a:	2200      	movs	r2, #0
 801002c:	6839      	ldr	r1, [r7, #0]
 801002e:	4798      	blx	r3
    break;
 8010030:	e04b      	b.n	80100ca <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	785b      	ldrb	r3, [r3, #1]
 8010036:	2b0a      	cmp	r3, #10
 8010038:	d017      	beq.n	801006a <USBD_CDC_Setup+0xd6>
 801003a:	2b0b      	cmp	r3, #11
 801003c:	d029      	beq.n	8010092 <USBD_CDC_Setup+0xfe>
 801003e:	2b00      	cmp	r3, #0
 8010040:	d133      	bne.n	80100aa <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010048:	2b03      	cmp	r3, #3
 801004a:	d107      	bne.n	801005c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 801004c:	f107 030c 	add.w	r3, r7, #12
 8010050:	2202      	movs	r2, #2
 8010052:	4619      	mov	r1, r3
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f001 f997 	bl	8011388 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 801005a:	e02e      	b.n	80100ba <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 801005c:	6839      	ldr	r1, [r7, #0]
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f001 f927 	bl	80112b2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8010064:	2302      	movs	r3, #2
 8010066:	75fb      	strb	r3, [r7, #23]
      break;
 8010068:	e027      	b.n	80100ba <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010070:	2b03      	cmp	r3, #3
 8010072:	d107      	bne.n	8010084 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8010074:	f107 030f 	add.w	r3, r7, #15
 8010078:	2201      	movs	r2, #1
 801007a:	4619      	mov	r1, r3
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f001 f983 	bl	8011388 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8010082:	e01a      	b.n	80100ba <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8010084:	6839      	ldr	r1, [r7, #0]
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f001 f913 	bl	80112b2 <USBD_CtlError>
			  ret = USBD_FAIL;
 801008c:	2302      	movs	r3, #2
 801008e:	75fb      	strb	r3, [r7, #23]
      break;
 8010090:	e013      	b.n	80100ba <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010098:	2b03      	cmp	r3, #3
 801009a:	d00d      	beq.n	80100b8 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 801009c:	6839      	ldr	r1, [r7, #0]
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f001 f907 	bl	80112b2 <USBD_CtlError>
			  ret = USBD_FAIL;
 80100a4:	2302      	movs	r3, #2
 80100a6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80100a8:	e006      	b.n	80100b8 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80100aa:	6839      	ldr	r1, [r7, #0]
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f001 f900 	bl	80112b2 <USBD_CtlError>
      ret = USBD_FAIL;
 80100b2:	2302      	movs	r3, #2
 80100b4:	75fb      	strb	r3, [r7, #23]
      break;
 80100b6:	e000      	b.n	80100ba <USBD_CDC_Setup+0x126>
      break;
 80100b8:	bf00      	nop
    }
    break;
 80100ba:	e006      	b.n	80100ca <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80100bc:	6839      	ldr	r1, [r7, #0]
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f001 f8f7 	bl	80112b2 <USBD_CtlError>
    ret = USBD_FAIL;
 80100c4:	2302      	movs	r3, #2
 80100c6:	75fb      	strb	r3, [r7, #23]
    break;
 80100c8:	bf00      	nop
  }

  return ret;
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3718      	adds	r7, #24
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	460b      	mov	r3, r1
 80100de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80100e6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80100ee:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d03a      	beq.n	8010170 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80100fa:	78fa      	ldrb	r2, [r7, #3]
 80100fc:	6879      	ldr	r1, [r7, #4]
 80100fe:	4613      	mov	r3, r2
 8010100:	009b      	lsls	r3, r3, #2
 8010102:	4413      	add	r3, r2
 8010104:	009b      	lsls	r3, r3, #2
 8010106:	440b      	add	r3, r1
 8010108:	331c      	adds	r3, #28
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d029      	beq.n	8010164 <USBD_CDC_DataIn+0x90>
 8010110:	78fa      	ldrb	r2, [r7, #3]
 8010112:	6879      	ldr	r1, [r7, #4]
 8010114:	4613      	mov	r3, r2
 8010116:	009b      	lsls	r3, r3, #2
 8010118:	4413      	add	r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	440b      	add	r3, r1
 801011e:	331c      	adds	r3, #28
 8010120:	681a      	ldr	r2, [r3, #0]
 8010122:	78f9      	ldrb	r1, [r7, #3]
 8010124:	68b8      	ldr	r0, [r7, #8]
 8010126:	460b      	mov	r3, r1
 8010128:	00db      	lsls	r3, r3, #3
 801012a:	1a5b      	subs	r3, r3, r1
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	4403      	add	r3, r0
 8010130:	3344      	adds	r3, #68	; 0x44
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	fbb2 f1f3 	udiv	r1, r2, r3
 8010138:	fb03 f301 	mul.w	r3, r3, r1
 801013c:	1ad3      	subs	r3, r2, r3
 801013e:	2b00      	cmp	r3, #0
 8010140:	d110      	bne.n	8010164 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8010142:	78fa      	ldrb	r2, [r7, #3]
 8010144:	6879      	ldr	r1, [r7, #4]
 8010146:	4613      	mov	r3, r2
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	4413      	add	r3, r2
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	440b      	add	r3, r1
 8010150:	331c      	adds	r3, #28
 8010152:	2200      	movs	r2, #0
 8010154:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8010156:	78f9      	ldrb	r1, [r7, #3]
 8010158:	2300      	movs	r3, #0
 801015a:	2200      	movs	r2, #0
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f006 fea6 	bl	8016eae <USBD_LL_Transmit>
 8010162:	e003      	b.n	801016c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2200      	movs	r2, #0
 8010168:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 801016c:	2300      	movs	r3, #0
 801016e:	e000      	b.n	8010172 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8010170:	2302      	movs	r3, #2
  }
}
 8010172:	4618      	mov	r0, r3
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801017a:	b580      	push	{r7, lr}
 801017c:	b084      	sub	sp, #16
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
 8010182:	460b      	mov	r3, r1
 8010184:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801018c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 801018e:	78fb      	ldrb	r3, [r7, #3]
 8010190:	4619      	mov	r1, r3
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f006 fed1 	bl	8016f3a <USBD_LL_GetRxDataSize>
 8010198:	4602      	mov	r2, r0
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d00d      	beq.n	80101c6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80101b0:	68db      	ldr	r3, [r3, #12]
 80101b2:	68fa      	ldr	r2, [r7, #12]
 80101b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80101b8:	68fa      	ldr	r2, [r7, #12]
 80101ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80101be:	4611      	mov	r1, r2
 80101c0:	4798      	blx	r3

    return USBD_OK;
 80101c2:	2300      	movs	r3, #0
 80101c4:	e000      	b.n	80101c8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80101c6:	2302      	movs	r3, #2
  }
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3710      	adds	r7, #16
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80101de:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d015      	beq.n	8010216 <USBD_CDC_EP0_RxReady+0x46>
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80101f0:	2bff      	cmp	r3, #255	; 0xff
 80101f2:	d010      	beq.n	8010216 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80101fa:	689b      	ldr	r3, [r3, #8]
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8010202:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010204:	68fa      	ldr	r2, [r7, #12]
 8010206:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801020a:	b292      	uxth	r2, r2
 801020c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	22ff      	movs	r2, #255	; 0xff
 8010212:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8010216:	2300      	movs	r3, #0
}
 8010218:	4618      	mov	r0, r3
 801021a:	3710      	adds	r7, #16
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2243      	movs	r2, #67	; 0x43
 801022c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801022e:	4b03      	ldr	r3, [pc, #12]	; (801023c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010230:	4618      	mov	r0, r3
 8010232:	370c      	adds	r7, #12
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr
 801023c:	20000094 	.word	0x20000094

08010240 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8010240:	b480      	push	{r7}
 8010242:	b083      	sub	sp, #12
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2243      	movs	r2, #67	; 0x43
 801024c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801024e:	4b03      	ldr	r3, [pc, #12]	; (801025c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010250:	4618      	mov	r0, r3
 8010252:	370c      	adds	r7, #12
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr
 801025c:	20000050 	.word	0x20000050

08010260 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2243      	movs	r2, #67	; 0x43
 801026c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801026e:	4b03      	ldr	r3, [pc, #12]	; (801027c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010270:	4618      	mov	r0, r3
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr
 801027c:	200000d8 	.word	0x200000d8

08010280 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	220a      	movs	r2, #10
 801028c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801028e:	4b03      	ldr	r3, [pc, #12]	; (801029c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010290:	4618      	mov	r0, r3
 8010292:	370c      	adds	r7, #12
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr
 801029c:	2000000c 	.word	0x2000000c

080102a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b085      	sub	sp, #20
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80102aa:	2302      	movs	r3, #2
 80102ac:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d005      	beq.n	80102c0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	683a      	ldr	r2, [r7, #0]
 80102b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80102bc:	2300      	movs	r3, #0
 80102be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80102c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3714      	adds	r7, #20
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr

080102ce <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80102ce:	b480      	push	{r7}
 80102d0:	b087      	sub	sp, #28
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	60f8      	str	r0, [r7, #12]
 80102d6:	60b9      	str	r1, [r7, #8]
 80102d8:	4613      	mov	r3, r2
 80102da:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80102e2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80102ec:	88fa      	ldrh	r2, [r7, #6]
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	371c      	adds	r7, #28
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr

08010302 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8010302:	b480      	push	{r7}
 8010304:	b085      	sub	sp, #20
 8010306:	af00      	add	r7, sp, #0
 8010308:	6078      	str	r0, [r7, #4]
 801030a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010312:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	683a      	ldr	r2, [r7, #0]
 8010318:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 801031c:	2300      	movs	r3, #0
}
 801031e:	4618      	mov	r0, r3
 8010320:	3714      	adds	r7, #20
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr

0801032a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b084      	sub	sp, #16
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010338:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010340:	2b00      	cmp	r3, #0
 8010342:	d01c      	beq.n	801037e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801034a:	2b00      	cmp	r3, #0
 801034c:	d115      	bne.n	801037a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2201      	movs	r2, #1
 8010352:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801036c:	b29b      	uxth	r3, r3
 801036e:	2181      	movs	r1, #129	; 0x81
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f006 fd9c 	bl	8016eae <USBD_LL_Transmit>

      return USBD_OK;
 8010376:	2300      	movs	r3, #0
 8010378:	e002      	b.n	8010380 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 801037a:	2301      	movs	r3, #1
 801037c:	e000      	b.n	8010380 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 801037e:	2302      	movs	r3, #2
  }
}
 8010380:	4618      	mov	r0, r3
 8010382:	3710      	adds	r7, #16
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010396:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d017      	beq.n	80103d2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	7c1b      	ldrb	r3, [r3, #16]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d109      	bne.n	80103be <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80103b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103b4:	2101      	movs	r1, #1
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f006 fd9c 	bl	8016ef4 <USBD_LL_PrepareReceive>
 80103bc:	e007      	b.n	80103ce <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80103c4:	2340      	movs	r3, #64	; 0x40
 80103c6:	2101      	movs	r1, #1
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f006 fd93 	bl	8016ef4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80103ce:	2300      	movs	r3, #0
 80103d0:	e000      	b.n	80103d4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80103d2:	2302      	movs	r3, #2
  }
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3710      	adds	r7, #16
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	4613      	mov	r3, r2
 80103e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d101      	bne.n	80103f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80103f0:	2302      	movs	r3, #2
 80103f2:	e01a      	b.n	801042a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d003      	beq.n	8010406 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2200      	movs	r2, #0
 8010402:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d003      	beq.n	8010414 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	68ba      	ldr	r2, [r7, #8]
 8010410:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2201      	movs	r2, #1
 8010418:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	79fa      	ldrb	r2, [r7, #7]
 8010420:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	f006 fc0e 	bl	8016c44 <USBD_LL_Init>

  return USBD_OK;
 8010428:	2300      	movs	r3, #0
}
 801042a:	4618      	mov	r0, r3
 801042c:	3710      	adds	r7, #16
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}

08010432 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010432:	b480      	push	{r7}
 8010434:	b085      	sub	sp, #20
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
 801043a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 801043c:	2300      	movs	r3, #0
 801043e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d006      	beq.n	8010454 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	683a      	ldr	r2, [r7, #0]
 801044a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 801044e:	2300      	movs	r3, #0
 8010450:	73fb      	strb	r3, [r7, #15]
 8010452:	e001      	b.n	8010458 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010454:	2302      	movs	r3, #2
 8010456:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010458:	7bfb      	ldrb	r3, [r7, #15]
}
 801045a:	4618      	mov	r0, r3
 801045c:	3714      	adds	r7, #20
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr

08010466 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b082      	sub	sp, #8
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f006 fc34 	bl	8016cdc <USBD_LL_Start>

  return USBD_OK;
 8010474:	2300      	movs	r3, #0
}
 8010476:	4618      	mov	r0, r3
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 801047e:	b480      	push	{r7}
 8010480:	b083      	sub	sp, #12
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010486:	2300      	movs	r3, #0
}
 8010488:	4618      	mov	r0, r3
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr

08010494 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b084      	sub	sp, #16
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	460b      	mov	r3, r1
 801049e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80104a0:	2302      	movs	r3, #2
 80104a2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d00c      	beq.n	80104c8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	78fa      	ldrb	r2, [r7, #3]
 80104b8:	4611      	mov	r1, r2
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	4798      	blx	r3
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d101      	bne.n	80104c8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80104c4:	2300      	movs	r3, #0
 80104c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80104c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3710      	adds	r7, #16
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80104d2:	b580      	push	{r7, lr}
 80104d4:	b082      	sub	sp, #8
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	460b      	mov	r3, r1
 80104dc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	78fa      	ldrb	r2, [r7, #3]
 80104e8:	4611      	mov	r1, r2
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	4798      	blx	r3
  return USBD_OK;
 80104ee:	2300      	movs	r3, #0
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3708      	adds	r7, #8
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}

080104f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010508:	6839      	ldr	r1, [r7, #0]
 801050a:	4618      	mov	r0, r3
 801050c:	f000 fe94 	bl	8011238 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2201      	movs	r2, #1
 8010514:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 801051e:	461a      	mov	r2, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 801052c:	f003 031f 	and.w	r3, r3, #31
 8010530:	2b01      	cmp	r3, #1
 8010532:	d00c      	beq.n	801054e <USBD_LL_SetupStage+0x56>
 8010534:	2b01      	cmp	r3, #1
 8010536:	d302      	bcc.n	801053e <USBD_LL_SetupStage+0x46>
 8010538:	2b02      	cmp	r3, #2
 801053a:	d010      	beq.n	801055e <USBD_LL_SetupStage+0x66>
 801053c:	e017      	b.n	801056e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010544:	4619      	mov	r1, r3
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 fa04 	bl	8010954 <USBD_StdDevReq>
    break;
 801054c:	e01a      	b.n	8010584 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010554:	4619      	mov	r1, r3
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f000 fa66 	bl	8010a28 <USBD_StdItfReq>
    break;
 801055c:	e012      	b.n	8010584 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010564:	4619      	mov	r1, r3
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 faa4 	bl	8010ab4 <USBD_StdEPReq>
    break;
 801056c:	e00a      	b.n	8010584 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010574:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010578:	b2db      	uxtb	r3, r3
 801057a:	4619      	mov	r1, r3
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f006 fc0d 	bl	8016d9c <USBD_LL_StallEP>
    break;
 8010582:	bf00      	nop
  }

  return USBD_OK;
 8010584:	2300      	movs	r3, #0
}
 8010586:	4618      	mov	r0, r3
 8010588:	3708      	adds	r7, #8
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801058e:	b580      	push	{r7, lr}
 8010590:	b086      	sub	sp, #24
 8010592:	af00      	add	r7, sp, #0
 8010594:	60f8      	str	r0, [r7, #12]
 8010596:	460b      	mov	r3, r1
 8010598:	607a      	str	r2, [r7, #4]
 801059a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 801059c:	7afb      	ldrb	r3, [r7, #11]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d14b      	bne.n	801063a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80105a8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80105b0:	2b03      	cmp	r3, #3
 80105b2:	d134      	bne.n	801061e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	68da      	ldr	r2, [r3, #12]
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	691b      	ldr	r3, [r3, #16]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d919      	bls.n	80105f4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	68da      	ldr	r2, [r3, #12]
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	691b      	ldr	r3, [r3, #16]
 80105c8:	1ad2      	subs	r2, r2, r3
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	68da      	ldr	r2, [r3, #12]
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d203      	bcs.n	80105e2 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80105de:	b29b      	uxth	r3, r3
 80105e0:	e002      	b.n	80105e8 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	461a      	mov	r2, r3
 80105ea:	6879      	ldr	r1, [r7, #4]
 80105ec:	68f8      	ldr	r0, [r7, #12]
 80105ee:	f000 ff17 	bl	8011420 <USBD_CtlContinueRx>
 80105f2:	e038      	b.n	8010666 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00a      	beq.n	8010616 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010606:	2b03      	cmp	r3, #3
 8010608:	d105      	bne.n	8010616 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010610:	691b      	ldr	r3, [r3, #16]
 8010612:	68f8      	ldr	r0, [r7, #12]
 8010614:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010616:	68f8      	ldr	r0, [r7, #12]
 8010618:	f000 ff14 	bl	8011444 <USBD_CtlSendStatus>
 801061c:	e023      	b.n	8010666 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010624:	2b05      	cmp	r3, #5
 8010626:	d11e      	bne.n	8010666 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2200      	movs	r2, #0
 801062c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8010630:	2100      	movs	r1, #0
 8010632:	68f8      	ldr	r0, [r7, #12]
 8010634:	f006 fbb2 	bl	8016d9c <USBD_LL_StallEP>
 8010638:	e015      	b.n	8010666 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010640:	699b      	ldr	r3, [r3, #24]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d00d      	beq.n	8010662 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 801064c:	2b03      	cmp	r3, #3
 801064e:	d108      	bne.n	8010662 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010656:	699b      	ldr	r3, [r3, #24]
 8010658:	7afa      	ldrb	r2, [r7, #11]
 801065a:	4611      	mov	r1, r2
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	4798      	blx	r3
 8010660:	e001      	b.n	8010666 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010662:	2302      	movs	r3, #2
 8010664:	e000      	b.n	8010668 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8010666:	2300      	movs	r3, #0
}
 8010668:	4618      	mov	r0, r3
 801066a:	3718      	adds	r7, #24
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b086      	sub	sp, #24
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	460b      	mov	r3, r1
 801067a:	607a      	str	r2, [r7, #4]
 801067c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 801067e:	7afb      	ldrb	r3, [r7, #11]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d17f      	bne.n	8010784 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	3314      	adds	r3, #20
 8010688:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010690:	2b02      	cmp	r3, #2
 8010692:	d15c      	bne.n	801074e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	68da      	ldr	r2, [r3, #12]
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	429a      	cmp	r2, r3
 801069e:	d915      	bls.n	80106cc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	68da      	ldr	r2, [r3, #12]
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	691b      	ldr	r3, [r3, #16]
 80106a8:	1ad2      	subs	r2, r2, r3
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	b29b      	uxth	r3, r3
 80106b4:	461a      	mov	r2, r3
 80106b6:	6879      	ldr	r1, [r7, #4]
 80106b8:	68f8      	ldr	r0, [r7, #12]
 80106ba:	f000 fe81 	bl	80113c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80106be:	2300      	movs	r3, #0
 80106c0:	2200      	movs	r2, #0
 80106c2:	2100      	movs	r1, #0
 80106c4:	68f8      	ldr	r0, [r7, #12]
 80106c6:	f006 fc15 	bl	8016ef4 <USBD_LL_PrepareReceive>
 80106ca:	e04e      	b.n	801076a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	689b      	ldr	r3, [r3, #8]
 80106d0:	697a      	ldr	r2, [r7, #20]
 80106d2:	6912      	ldr	r2, [r2, #16]
 80106d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80106d8:	fb02 f201 	mul.w	r2, r2, r1
 80106dc:	1a9b      	subs	r3, r3, r2
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d11c      	bne.n	801071c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	689a      	ldr	r2, [r3, #8]
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d316      	bcc.n	801071c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	689a      	ldr	r2, [r3, #8]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d20f      	bcs.n	801071c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80106fc:	2200      	movs	r2, #0
 80106fe:	2100      	movs	r1, #0
 8010700:	68f8      	ldr	r0, [r7, #12]
 8010702:	f000 fe5d 	bl	80113c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2200      	movs	r2, #0
 801070a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801070e:	2300      	movs	r3, #0
 8010710:	2200      	movs	r2, #0
 8010712:	2100      	movs	r1, #0
 8010714:	68f8      	ldr	r0, [r7, #12]
 8010716:	f006 fbed 	bl	8016ef4 <USBD_LL_PrepareReceive>
 801071a:	e026      	b.n	801076a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d00a      	beq.n	801073e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 801072e:	2b03      	cmp	r3, #3
 8010730:	d105      	bne.n	801073e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801073e:	2180      	movs	r1, #128	; 0x80
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f006 fb2b 	bl	8016d9c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f000 fe8f 	bl	801146a <USBD_CtlReceiveStatus>
 801074c:	e00d      	b.n	801076a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010754:	2b04      	cmp	r3, #4
 8010756:	d004      	beq.n	8010762 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801075e:	2b00      	cmp	r3, #0
 8010760:	d103      	bne.n	801076a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8010762:	2180      	movs	r1, #128	; 0x80
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	f006 fb19 	bl	8016d9c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8010770:	2b01      	cmp	r3, #1
 8010772:	d11d      	bne.n	80107b0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8010774:	68f8      	ldr	r0, [r7, #12]
 8010776:	f7ff fe82 	bl	801047e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2200      	movs	r2, #0
 801077e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8010782:	e015      	b.n	80107b0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801078a:	695b      	ldr	r3, [r3, #20]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d00d      	beq.n	80107ac <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8010796:	2b03      	cmp	r3, #3
 8010798:	d108      	bne.n	80107ac <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80107a0:	695b      	ldr	r3, [r3, #20]
 80107a2:	7afa      	ldrb	r2, [r7, #11]
 80107a4:	4611      	mov	r1, r2
 80107a6:	68f8      	ldr	r0, [r7, #12]
 80107a8:	4798      	blx	r3
 80107aa:	e001      	b.n	80107b0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80107ac:	2302      	movs	r3, #2
 80107ae:	e000      	b.n	80107b2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80107b0:	2300      	movs	r3, #0
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3718      	adds	r7, #24
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b082      	sub	sp, #8
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107c2:	2340      	movs	r3, #64	; 0x40
 80107c4:	2200      	movs	r2, #0
 80107c6:	2100      	movs	r1, #0
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f006 faa2 	bl	8016d12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2201      	movs	r2, #1
 80107d2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2240      	movs	r2, #64	; 0x40
 80107da:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80107de:	2340      	movs	r3, #64	; 0x40
 80107e0:	2200      	movs	r2, #0
 80107e2:	2180      	movs	r1, #128	; 0x80
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f006 fa94 	bl	8016d12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2240      	movs	r2, #64	; 0x40
 80107f4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2201      	movs	r2, #1
 80107fa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2200      	movs	r2, #0
 8010802:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2200      	movs	r2, #0
 801080a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2200      	movs	r2, #0
 8010810:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801081a:	2b00      	cmp	r3, #0
 801081c:	d009      	beq.n	8010832 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	687a      	ldr	r2, [r7, #4]
 8010828:	6852      	ldr	r2, [r2, #4]
 801082a:	b2d2      	uxtb	r2, r2
 801082c:	4611      	mov	r1, r2
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	4798      	blx	r3
  }

  return USBD_OK;
 8010832:	2300      	movs	r3, #0
}
 8010834:	4618      	mov	r0, r3
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	460b      	mov	r3, r1
 8010846:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	78fa      	ldrb	r2, [r7, #3]
 801084c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 801084e:	2300      	movs	r3, #0
}
 8010850:	4618      	mov	r0, r3
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr

0801085c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2204      	movs	r2, #4
 8010874:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010878:	2300      	movs	r3, #0
}
 801087a:	4618      	mov	r0, r3
 801087c:	370c      	adds	r7, #12
 801087e:	46bd      	mov	sp, r7
 8010880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010884:	4770      	bx	lr

08010886 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8010886:	b480      	push	{r7}
 8010888:	b083      	sub	sp, #12
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80108b6:	2b03      	cmp	r3, #3
 80108b8:	d10b      	bne.n	80108d2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80108c0:	69db      	ldr	r3, [r3, #28]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d005      	beq.n	80108d2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80108cc:	69db      	ldr	r3, [r3, #28]
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80108d2:	2300      	movs	r3, #0
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3708      	adds	r7, #8
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	460b      	mov	r3, r1
 80108e6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80108e8:	2300      	movs	r3, #0
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	370c      	adds	r7, #12
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr

080108f6 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80108f6:	b480      	push	{r7}
 80108f8:	b083      	sub	sp, #12
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	460b      	mov	r3, r1
 8010900:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010902:	2300      	movs	r3, #0
}
 8010904:	4618      	mov	r0, r3
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010918:	2300      	movs	r3, #0
}
 801091a:	4618      	mov	r0, r3
 801091c:	370c      	adds	r7, #12
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr

08010926 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8010926:	b580      	push	{r7, lr}
 8010928:	b082      	sub	sp, #8
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2201      	movs	r2, #1
 8010932:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	6852      	ldr	r2, [r2, #4]
 8010942:	b2d2      	uxtb	r2, r2
 8010944:	4611      	mov	r1, r2
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	4798      	blx	r3

  return USBD_OK;
 801094a:	2300      	movs	r3, #0
}
 801094c:	4618      	mov	r0, r3
 801094e:	3708      	adds	r7, #8
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}

08010954 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801095e:	2300      	movs	r3, #0
 8010960:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801096a:	2b20      	cmp	r3, #32
 801096c:	d004      	beq.n	8010978 <USBD_StdDevReq+0x24>
 801096e:	2b40      	cmp	r3, #64	; 0x40
 8010970:	d002      	beq.n	8010978 <USBD_StdDevReq+0x24>
 8010972:	2b00      	cmp	r3, #0
 8010974:	d008      	beq.n	8010988 <USBD_StdDevReq+0x34>
 8010976:	e04c      	b.n	8010a12 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801097e:	689b      	ldr	r3, [r3, #8]
 8010980:	6839      	ldr	r1, [r7, #0]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	4798      	blx	r3
    break;
 8010986:	e049      	b.n	8010a1c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	785b      	ldrb	r3, [r3, #1]
 801098c:	2b09      	cmp	r3, #9
 801098e:	d83a      	bhi.n	8010a06 <USBD_StdDevReq+0xb2>
 8010990:	a201      	add	r2, pc, #4	; (adr r2, 8010998 <USBD_StdDevReq+0x44>)
 8010992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010996:	bf00      	nop
 8010998:	080109e9 	.word	0x080109e9
 801099c:	080109fd 	.word	0x080109fd
 80109a0:	08010a07 	.word	0x08010a07
 80109a4:	080109f3 	.word	0x080109f3
 80109a8:	08010a07 	.word	0x08010a07
 80109ac:	080109cb 	.word	0x080109cb
 80109b0:	080109c1 	.word	0x080109c1
 80109b4:	08010a07 	.word	0x08010a07
 80109b8:	080109df 	.word	0x080109df
 80109bc:	080109d5 	.word	0x080109d5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80109c0:	6839      	ldr	r1, [r7, #0]
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 f9d2 	bl	8010d6c <USBD_GetDescriptor>
      break;
 80109c8:	e022      	b.n	8010a10 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80109ca:	6839      	ldr	r1, [r7, #0]
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f000 fac7 	bl	8010f60 <USBD_SetAddress>
      break;
 80109d2:	e01d      	b.n	8010a10 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80109d4:	6839      	ldr	r1, [r7, #0]
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 fb04 	bl	8010fe4 <USBD_SetConfig>
      break;
 80109dc:	e018      	b.n	8010a10 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80109de:	6839      	ldr	r1, [r7, #0]
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 fb8d 	bl	8011100 <USBD_GetConfig>
      break;
 80109e6:	e013      	b.n	8010a10 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80109e8:	6839      	ldr	r1, [r7, #0]
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f000 fbbc 	bl	8011168 <USBD_GetStatus>
      break;
 80109f0:	e00e      	b.n	8010a10 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80109f2:	6839      	ldr	r1, [r7, #0]
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 fbea 	bl	80111ce <USBD_SetFeature>
      break;
 80109fa:	e009      	b.n	8010a10 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80109fc:	6839      	ldr	r1, [r7, #0]
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 fbf9 	bl	80111f6 <USBD_ClrFeature>
      break;
 8010a04:	e004      	b.n	8010a10 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8010a06:	6839      	ldr	r1, [r7, #0]
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f000 fc52 	bl	80112b2 <USBD_CtlError>
      break;
 8010a0e:	bf00      	nop
    }
    break;
 8010a10:	e004      	b.n	8010a1c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8010a12:	6839      	ldr	r1, [r7, #0]
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f000 fc4c 	bl	80112b2 <USBD_CtlError>
    break;
 8010a1a:	bf00      	nop
  }

  return ret;
 8010a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3710      	adds	r7, #16
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop

08010a28 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b084      	sub	sp, #16
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a32:	2300      	movs	r3, #0
 8010a34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a3e:	2b20      	cmp	r3, #32
 8010a40:	d003      	beq.n	8010a4a <USBD_StdItfReq+0x22>
 8010a42:	2b40      	cmp	r3, #64	; 0x40
 8010a44:	d001      	beq.n	8010a4a <USBD_StdItfReq+0x22>
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d12a      	bne.n	8010aa0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010a50:	3b01      	subs	r3, #1
 8010a52:	2b02      	cmp	r3, #2
 8010a54:	d81d      	bhi.n	8010a92 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	889b      	ldrh	r3, [r3, #4]
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	2b01      	cmp	r3, #1
 8010a5e:	d813      	bhi.n	8010a88 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010a66:	689b      	ldr	r3, [r3, #8]
 8010a68:	6839      	ldr	r1, [r7, #0]
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	4798      	blx	r3
 8010a6e:	4603      	mov	r3, r0
 8010a70:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	88db      	ldrh	r3, [r3, #6]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d110      	bne.n	8010a9c <USBD_StdItfReq+0x74>
 8010a7a:	7bfb      	ldrb	r3, [r7, #15]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d10d      	bne.n	8010a9c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 fcdf 	bl	8011444 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010a86:	e009      	b.n	8010a9c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010a88:	6839      	ldr	r1, [r7, #0]
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 fc11 	bl	80112b2 <USBD_CtlError>
      break;
 8010a90:	e004      	b.n	8010a9c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010a92:	6839      	ldr	r1, [r7, #0]
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 fc0c 	bl	80112b2 <USBD_CtlError>
      break;
 8010a9a:	e000      	b.n	8010a9e <USBD_StdItfReq+0x76>
      break;
 8010a9c:	bf00      	nop
    }
    break;
 8010a9e:	e004      	b.n	8010aaa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010aa0:	6839      	ldr	r1, [r7, #0]
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f000 fc05 	bl	80112b2 <USBD_CtlError>
    break;
 8010aa8:	bf00      	nop
  }

  return USBD_OK;
 8010aaa:	2300      	movs	r3, #0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3710      	adds	r7, #16
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	889b      	ldrh	r3, [r3, #4]
 8010ac6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ad0:	2b20      	cmp	r3, #32
 8010ad2:	d004      	beq.n	8010ade <USBD_StdEPReq+0x2a>
 8010ad4:	2b40      	cmp	r3, #64	; 0x40
 8010ad6:	d002      	beq.n	8010ade <USBD_StdEPReq+0x2a>
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d008      	beq.n	8010aee <USBD_StdEPReq+0x3a>
 8010adc:	e13b      	b.n	8010d56 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ae4:	689b      	ldr	r3, [r3, #8]
 8010ae6:	6839      	ldr	r1, [r7, #0]
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	4798      	blx	r3
    break;
 8010aec:	e138      	b.n	8010d60 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010af6:	2b20      	cmp	r3, #32
 8010af8:	d10a      	bne.n	8010b10 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b00:	689b      	ldr	r3, [r3, #8]
 8010b02:	6839      	ldr	r1, [r7, #0]
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	4798      	blx	r3
 8010b08:	4603      	mov	r3, r0
 8010b0a:	73fb      	strb	r3, [r7, #15]

      return ret;
 8010b0c:	7bfb      	ldrb	r3, [r7, #15]
 8010b0e:	e128      	b.n	8010d62 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	785b      	ldrb	r3, [r3, #1]
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d03e      	beq.n	8010b96 <USBD_StdEPReq+0xe2>
 8010b18:	2b03      	cmp	r3, #3
 8010b1a:	d002      	beq.n	8010b22 <USBD_StdEPReq+0x6e>
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d070      	beq.n	8010c02 <USBD_StdEPReq+0x14e>
 8010b20:	e113      	b.n	8010d4a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010b28:	2b02      	cmp	r3, #2
 8010b2a:	d002      	beq.n	8010b32 <USBD_StdEPReq+0x7e>
 8010b2c:	2b03      	cmp	r3, #3
 8010b2e:	d015      	beq.n	8010b5c <USBD_StdEPReq+0xa8>
 8010b30:	e02b      	b.n	8010b8a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b32:	7bbb      	ldrb	r3, [r7, #14]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d00c      	beq.n	8010b52 <USBD_StdEPReq+0x9e>
 8010b38:	7bbb      	ldrb	r3, [r7, #14]
 8010b3a:	2b80      	cmp	r3, #128	; 0x80
 8010b3c:	d009      	beq.n	8010b52 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010b3e:	7bbb      	ldrb	r3, [r7, #14]
 8010b40:	4619      	mov	r1, r3
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f006 f92a 	bl	8016d9c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010b48:	2180      	movs	r1, #128	; 0x80
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f006 f926 	bl	8016d9c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010b50:	e020      	b.n	8010b94 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8010b52:	6839      	ldr	r1, [r7, #0]
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 fbac 	bl	80112b2 <USBD_CtlError>
        break;
 8010b5a:	e01b      	b.n	8010b94 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	885b      	ldrh	r3, [r3, #2]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d10e      	bne.n	8010b82 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010b64:	7bbb      	ldrb	r3, [r7, #14]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d00b      	beq.n	8010b82 <USBD_StdEPReq+0xce>
 8010b6a:	7bbb      	ldrb	r3, [r7, #14]
 8010b6c:	2b80      	cmp	r3, #128	; 0x80
 8010b6e:	d008      	beq.n	8010b82 <USBD_StdEPReq+0xce>
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	88db      	ldrh	r3, [r3, #6]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d104      	bne.n	8010b82 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8010b78:	7bbb      	ldrb	r3, [r7, #14]
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f006 f90d 	bl	8016d9c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f000 fc5e 	bl	8011444 <USBD_CtlSendStatus>

        break;
 8010b88:	e004      	b.n	8010b94 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8010b8a:	6839      	ldr	r1, [r7, #0]
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f000 fb90 	bl	80112b2 <USBD_CtlError>
        break;
 8010b92:	bf00      	nop
      }
      break;
 8010b94:	e0de      	b.n	8010d54 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010b9c:	2b02      	cmp	r3, #2
 8010b9e:	d002      	beq.n	8010ba6 <USBD_StdEPReq+0xf2>
 8010ba0:	2b03      	cmp	r3, #3
 8010ba2:	d015      	beq.n	8010bd0 <USBD_StdEPReq+0x11c>
 8010ba4:	e026      	b.n	8010bf4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010ba6:	7bbb      	ldrb	r3, [r7, #14]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00c      	beq.n	8010bc6 <USBD_StdEPReq+0x112>
 8010bac:	7bbb      	ldrb	r3, [r7, #14]
 8010bae:	2b80      	cmp	r3, #128	; 0x80
 8010bb0:	d009      	beq.n	8010bc6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010bb2:	7bbb      	ldrb	r3, [r7, #14]
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f006 f8f0 	bl	8016d9c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010bbc:	2180      	movs	r1, #128	; 0x80
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f006 f8ec 	bl	8016d9c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010bc4:	e01c      	b.n	8010c00 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8010bc6:	6839      	ldr	r1, [r7, #0]
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 fb72 	bl	80112b2 <USBD_CtlError>
        break;
 8010bce:	e017      	b.n	8010c00 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	885b      	ldrh	r3, [r3, #2]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d112      	bne.n	8010bfe <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010bd8:	7bbb      	ldrb	r3, [r7, #14]
 8010bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d004      	beq.n	8010bec <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8010be2:	7bbb      	ldrb	r3, [r7, #14]
 8010be4:	4619      	mov	r1, r3
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f006 f8f7 	bl	8016dda <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f000 fc29 	bl	8011444 <USBD_CtlSendStatus>
        }
        break;
 8010bf2:	e004      	b.n	8010bfe <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8010bf4:	6839      	ldr	r1, [r7, #0]
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 fb5b 	bl	80112b2 <USBD_CtlError>
        break;
 8010bfc:	e000      	b.n	8010c00 <USBD_StdEPReq+0x14c>
        break;
 8010bfe:	bf00      	nop
      }
      break;
 8010c00:	e0a8      	b.n	8010d54 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010c08:	2b02      	cmp	r3, #2
 8010c0a:	d002      	beq.n	8010c12 <USBD_StdEPReq+0x15e>
 8010c0c:	2b03      	cmp	r3, #3
 8010c0e:	d031      	beq.n	8010c74 <USBD_StdEPReq+0x1c0>
 8010c10:	e095      	b.n	8010d3e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c12:	7bbb      	ldrb	r3, [r7, #14]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d007      	beq.n	8010c28 <USBD_StdEPReq+0x174>
 8010c18:	7bbb      	ldrb	r3, [r7, #14]
 8010c1a:	2b80      	cmp	r3, #128	; 0x80
 8010c1c:	d004      	beq.n	8010c28 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8010c1e:	6839      	ldr	r1, [r7, #0]
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f000 fb46 	bl	80112b2 <USBD_CtlError>
          break;
 8010c26:	e08f      	b.n	8010d48 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	da0b      	bge.n	8010c48 <USBD_StdEPReq+0x194>
 8010c30:	7bbb      	ldrb	r3, [r7, #14]
 8010c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c36:	4613      	mov	r3, r2
 8010c38:	009b      	lsls	r3, r3, #2
 8010c3a:	4413      	add	r3, r2
 8010c3c:	009b      	lsls	r3, r3, #2
 8010c3e:	3310      	adds	r3, #16
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	4413      	add	r3, r2
 8010c44:	3304      	adds	r3, #4
 8010c46:	e00a      	b.n	8010c5e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010c48:	7bbb      	ldrb	r3, [r7, #14]
 8010c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010c4e:	4613      	mov	r3, r2
 8010c50:	009b      	lsls	r3, r3, #2
 8010c52:	4413      	add	r3, r2
 8010c54:	009b      	lsls	r3, r3, #2
 8010c56:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	2200      	movs	r2, #0
 8010c64:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	2202      	movs	r2, #2
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f000 fb8b 	bl	8011388 <USBD_CtlSendData>
          break;
 8010c72:	e069      	b.n	8010d48 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8010c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	da11      	bge.n	8010ca0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010c7c:	7bbb      	ldrb	r3, [r7, #14]
 8010c7e:	f003 020f 	and.w	r2, r3, #15
 8010c82:	6879      	ldr	r1, [r7, #4]
 8010c84:	4613      	mov	r3, r2
 8010c86:	009b      	lsls	r3, r3, #2
 8010c88:	4413      	add	r3, r2
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	440b      	add	r3, r1
 8010c8e:	3318      	adds	r3, #24
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d117      	bne.n	8010cc6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8010c96:	6839      	ldr	r1, [r7, #0]
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f000 fb0a 	bl	80112b2 <USBD_CtlError>
            break;
 8010c9e:	e053      	b.n	8010d48 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010ca0:	7bbb      	ldrb	r3, [r7, #14]
 8010ca2:	f003 020f 	and.w	r2, r3, #15
 8010ca6:	6879      	ldr	r1, [r7, #4]
 8010ca8:	4613      	mov	r3, r2
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	4413      	add	r3, r2
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	440b      	add	r3, r1
 8010cb2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d104      	bne.n	8010cc6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8010cbc:	6839      	ldr	r1, [r7, #0]
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 faf7 	bl	80112b2 <USBD_CtlError>
            break;
 8010cc4:	e040      	b.n	8010d48 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010cc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	da0b      	bge.n	8010ce6 <USBD_StdEPReq+0x232>
 8010cce:	7bbb      	ldrb	r3, [r7, #14]
 8010cd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	4413      	add	r3, r2
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	3310      	adds	r3, #16
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	3304      	adds	r3, #4
 8010ce4:	e00a      	b.n	8010cfc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010ce6:	7bbb      	ldrb	r3, [r7, #14]
 8010ce8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010cec:	4613      	mov	r3, r2
 8010cee:	009b      	lsls	r3, r3, #2
 8010cf0:	4413      	add	r3, r2
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	4413      	add	r3, r2
 8010cfc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010cfe:	7bbb      	ldrb	r3, [r7, #14]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d002      	beq.n	8010d0a <USBD_StdEPReq+0x256>
 8010d04:	7bbb      	ldrb	r3, [r7, #14]
 8010d06:	2b80      	cmp	r3, #128	; 0x80
 8010d08:	d103      	bne.n	8010d12 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	601a      	str	r2, [r3, #0]
 8010d10:	e00e      	b.n	8010d30 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8010d12:	7bbb      	ldrb	r3, [r7, #14]
 8010d14:	4619      	mov	r1, r3
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f006 f87e 	bl	8016e18 <USBD_LL_IsStallEP>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d003      	beq.n	8010d2a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	2201      	movs	r2, #1
 8010d26:	601a      	str	r2, [r3, #0]
 8010d28:	e002      	b.n	8010d30 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	2202      	movs	r2, #2
 8010d34:	4619      	mov	r1, r3
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f000 fb26 	bl	8011388 <USBD_CtlSendData>
          break;
 8010d3c:	e004      	b.n	8010d48 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8010d3e:	6839      	ldr	r1, [r7, #0]
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f000 fab6 	bl	80112b2 <USBD_CtlError>
        break;
 8010d46:	bf00      	nop
      }
      break;
 8010d48:	e004      	b.n	8010d54 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8010d4a:	6839      	ldr	r1, [r7, #0]
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 fab0 	bl	80112b2 <USBD_CtlError>
      break;
 8010d52:	bf00      	nop
    }
    break;
 8010d54:	e004      	b.n	8010d60 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8010d56:	6839      	ldr	r1, [r7, #0]
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f000 faaa 	bl	80112b2 <USBD_CtlError>
    break;
 8010d5e:	bf00      	nop
  }

  return ret;
 8010d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}
	...

08010d6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	885b      	ldrh	r3, [r3, #2]
 8010d7a:	0a1b      	lsrs	r3, r3, #8
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	3b01      	subs	r3, #1
 8010d80:	2b06      	cmp	r3, #6
 8010d82:	f200 80c9 	bhi.w	8010f18 <USBD_GetDescriptor+0x1ac>
 8010d86:	a201      	add	r2, pc, #4	; (adr r2, 8010d8c <USBD_GetDescriptor+0x20>)
 8010d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d8c:	08010da9 	.word	0x08010da9
 8010d90:	08010dc1 	.word	0x08010dc1
 8010d94:	08010e01 	.word	0x08010e01
 8010d98:	08010f19 	.word	0x08010f19
 8010d9c:	08010f19 	.word	0x08010f19
 8010da0:	08010ec5 	.word	0x08010ec5
 8010da4:	08010eeb 	.word	0x08010eeb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	687a      	ldr	r2, [r7, #4]
 8010db2:	7c12      	ldrb	r2, [r2, #16]
 8010db4:	f107 010a 	add.w	r1, r7, #10
 8010db8:	4610      	mov	r0, r2
 8010dba:	4798      	blx	r3
 8010dbc:	60f8      	str	r0, [r7, #12]
    break;
 8010dbe:	e0b0      	b.n	8010f22 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	7c1b      	ldrb	r3, [r3, #16]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d10d      	bne.n	8010de4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dd0:	f107 020a 	add.w	r2, r7, #10
 8010dd4:	4610      	mov	r0, r2
 8010dd6:	4798      	blx	r3
 8010dd8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	3301      	adds	r3, #1
 8010dde:	2202      	movs	r2, #2
 8010de0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8010de2:	e09e      	b.n	8010f22 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dec:	f107 020a 	add.w	r2, r7, #10
 8010df0:	4610      	mov	r0, r2
 8010df2:	4798      	blx	r3
 8010df4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	701a      	strb	r2, [r3, #0]
    break;
 8010dfe:	e090      	b.n	8010f22 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	885b      	ldrh	r3, [r3, #2]
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	2b05      	cmp	r3, #5
 8010e08:	d856      	bhi.n	8010eb8 <USBD_GetDescriptor+0x14c>
 8010e0a:	a201      	add	r2, pc, #4	; (adr r2, 8010e10 <USBD_GetDescriptor+0xa4>)
 8010e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e10:	08010e29 	.word	0x08010e29
 8010e14:	08010e41 	.word	0x08010e41
 8010e18:	08010e59 	.word	0x08010e59
 8010e1c:	08010e71 	.word	0x08010e71
 8010e20:	08010e89 	.word	0x08010e89
 8010e24:	08010ea1 	.word	0x08010ea1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	7c12      	ldrb	r2, [r2, #16]
 8010e34:	f107 010a 	add.w	r1, r7, #10
 8010e38:	4610      	mov	r0, r2
 8010e3a:	4798      	blx	r3
 8010e3c:	60f8      	str	r0, [r7, #12]
      break;
 8010e3e:	e040      	b.n	8010ec2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010e46:	689b      	ldr	r3, [r3, #8]
 8010e48:	687a      	ldr	r2, [r7, #4]
 8010e4a:	7c12      	ldrb	r2, [r2, #16]
 8010e4c:	f107 010a 	add.w	r1, r7, #10
 8010e50:	4610      	mov	r0, r2
 8010e52:	4798      	blx	r3
 8010e54:	60f8      	str	r0, [r7, #12]
      break;
 8010e56:	e034      	b.n	8010ec2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	7c12      	ldrb	r2, [r2, #16]
 8010e64:	f107 010a 	add.w	r1, r7, #10
 8010e68:	4610      	mov	r0, r2
 8010e6a:	4798      	blx	r3
 8010e6c:	60f8      	str	r0, [r7, #12]
      break;
 8010e6e:	e028      	b.n	8010ec2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010e76:	691b      	ldr	r3, [r3, #16]
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	7c12      	ldrb	r2, [r2, #16]
 8010e7c:	f107 010a 	add.w	r1, r7, #10
 8010e80:	4610      	mov	r0, r2
 8010e82:	4798      	blx	r3
 8010e84:	60f8      	str	r0, [r7, #12]
      break;
 8010e86:	e01c      	b.n	8010ec2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010e8e:	695b      	ldr	r3, [r3, #20]
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	7c12      	ldrb	r2, [r2, #16]
 8010e94:	f107 010a 	add.w	r1, r7, #10
 8010e98:	4610      	mov	r0, r2
 8010e9a:	4798      	blx	r3
 8010e9c:	60f8      	str	r0, [r7, #12]
      break;
 8010e9e:	e010      	b.n	8010ec2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010ea6:	699b      	ldr	r3, [r3, #24]
 8010ea8:	687a      	ldr	r2, [r7, #4]
 8010eaa:	7c12      	ldrb	r2, [r2, #16]
 8010eac:	f107 010a 	add.w	r1, r7, #10
 8010eb0:	4610      	mov	r0, r2
 8010eb2:	4798      	blx	r3
 8010eb4:	60f8      	str	r0, [r7, #12]
      break;
 8010eb6:	e004      	b.n	8010ec2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8010eb8:	6839      	ldr	r1, [r7, #0]
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f000 f9f9 	bl	80112b2 <USBD_CtlError>
      return;
 8010ec0:	e04b      	b.n	8010f5a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8010ec2:	e02e      	b.n	8010f22 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	7c1b      	ldrb	r3, [r3, #16]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d109      	bne.n	8010ee0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ed4:	f107 020a 	add.w	r2, r7, #10
 8010ed8:	4610      	mov	r0, r2
 8010eda:	4798      	blx	r3
 8010edc:	60f8      	str	r0, [r7, #12]
      break;
 8010ede:	e020      	b.n	8010f22 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010ee0:	6839      	ldr	r1, [r7, #0]
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 f9e5 	bl	80112b2 <USBD_CtlError>
      return;
 8010ee8:	e037      	b.n	8010f5a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	7c1b      	ldrb	r3, [r3, #16]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d10d      	bne.n	8010f0e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010efa:	f107 020a 	add.w	r2, r7, #10
 8010efe:	4610      	mov	r0, r2
 8010f00:	4798      	blx	r3
 8010f02:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	3301      	adds	r3, #1
 8010f08:	2207      	movs	r2, #7
 8010f0a:	701a      	strb	r2, [r3, #0]
      break;
 8010f0c:	e009      	b.n	8010f22 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010f0e:	6839      	ldr	r1, [r7, #0]
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f000 f9ce 	bl	80112b2 <USBD_CtlError>
      return;
 8010f16:	e020      	b.n	8010f5a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8010f18:	6839      	ldr	r1, [r7, #0]
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 f9c9 	bl	80112b2 <USBD_CtlError>
    return;
 8010f20:	e01b      	b.n	8010f5a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8010f22:	897b      	ldrh	r3, [r7, #10]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d011      	beq.n	8010f4c <USBD_GetDescriptor+0x1e0>
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	88db      	ldrh	r3, [r3, #6]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00d      	beq.n	8010f4c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	88da      	ldrh	r2, [r3, #6]
 8010f34:	897b      	ldrh	r3, [r7, #10]
 8010f36:	4293      	cmp	r3, r2
 8010f38:	bf28      	it	cs
 8010f3a:	4613      	movcs	r3, r2
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8010f40:	897b      	ldrh	r3, [r7, #10]
 8010f42:	461a      	mov	r2, r3
 8010f44:	68f9      	ldr	r1, [r7, #12]
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f000 fa1e 	bl	8011388 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	88db      	ldrh	r3, [r3, #6]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d102      	bne.n	8010f5a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 fa75 	bl	8011444 <USBD_CtlSendStatus>
  }
}
 8010f5a:	3710      	adds	r7, #16
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b084      	sub	sp, #16
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	889b      	ldrh	r3, [r3, #4]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d130      	bne.n	8010fd4 <USBD_SetAddress+0x74>
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	88db      	ldrh	r3, [r3, #6]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d12c      	bne.n	8010fd4 <USBD_SetAddress+0x74>
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	885b      	ldrh	r3, [r3, #2]
 8010f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8010f80:	d828      	bhi.n	8010fd4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	885b      	ldrh	r3, [r3, #2]
 8010f86:	b2db      	uxtb	r3, r3
 8010f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010f94:	2b03      	cmp	r3, #3
 8010f96:	d104      	bne.n	8010fa2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8010f98:	6839      	ldr	r1, [r7, #0]
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f000 f989 	bl	80112b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fa0:	e01c      	b.n	8010fdc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	7bfa      	ldrb	r2, [r7, #15]
 8010fa6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
 8010fac:	4619      	mov	r1, r3
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f005 ff5e 	bl	8016e70 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f000 fa45 	bl	8011444 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010fba:	7bfb      	ldrb	r3, [r7, #15]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d004      	beq.n	8010fca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2202      	movs	r2, #2
 8010fc4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fc8:	e008      	b.n	8010fdc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fd2:	e003      	b.n	8010fdc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010fd4:	6839      	ldr	r1, [r7, #0]
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 f96b 	bl	80112b2 <USBD_CtlError>
  }
}
 8010fdc:	bf00      	nop
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	885b      	ldrh	r3, [r3, #2]
 8010ff2:	b2da      	uxtb	r2, r3
 8010ff4:	4b41      	ldr	r3, [pc, #260]	; (80110fc <USBD_SetConfig+0x118>)
 8010ff6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010ff8:	4b40      	ldr	r3, [pc, #256]	; (80110fc <USBD_SetConfig+0x118>)
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d904      	bls.n	801100a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8011000:	6839      	ldr	r1, [r7, #0]
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 f955 	bl	80112b2 <USBD_CtlError>
 8011008:	e075      	b.n	80110f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011010:	2b02      	cmp	r3, #2
 8011012:	d002      	beq.n	801101a <USBD_SetConfig+0x36>
 8011014:	2b03      	cmp	r3, #3
 8011016:	d023      	beq.n	8011060 <USBD_SetConfig+0x7c>
 8011018:	e062      	b.n	80110e0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 801101a:	4b38      	ldr	r3, [pc, #224]	; (80110fc <USBD_SetConfig+0x118>)
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d01a      	beq.n	8011058 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8011022:	4b36      	ldr	r3, [pc, #216]	; (80110fc <USBD_SetConfig+0x118>)
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	461a      	mov	r2, r3
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2203      	movs	r2, #3
 8011030:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011034:	4b31      	ldr	r3, [pc, #196]	; (80110fc <USBD_SetConfig+0x118>)
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	4619      	mov	r1, r3
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7ff fa2a 	bl	8010494 <USBD_SetClassConfig>
 8011040:	4603      	mov	r3, r0
 8011042:	2b02      	cmp	r3, #2
 8011044:	d104      	bne.n	8011050 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8011046:	6839      	ldr	r1, [r7, #0]
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f000 f932 	bl	80112b2 <USBD_CtlError>
          return;
 801104e:	e052      	b.n	80110f6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f000 f9f7 	bl	8011444 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8011056:	e04e      	b.n	80110f6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 f9f3 	bl	8011444 <USBD_CtlSendStatus>
      break;
 801105e:	e04a      	b.n	80110f6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011060:	4b26      	ldr	r3, [pc, #152]	; (80110fc <USBD_SetConfig+0x118>)
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d112      	bne.n	801108e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2202      	movs	r2, #2
 801106c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8011070:	4b22      	ldr	r3, [pc, #136]	; (80110fc <USBD_SetConfig+0x118>)
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	461a      	mov	r2, r3
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 801107a:	4b20      	ldr	r3, [pc, #128]	; (80110fc <USBD_SetConfig+0x118>)
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	4619      	mov	r1, r3
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f7ff fa26 	bl	80104d2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 f9dc 	bl	8011444 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 801108c:	e033      	b.n	80110f6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 801108e:	4b1b      	ldr	r3, [pc, #108]	; (80110fc <USBD_SetConfig+0x118>)
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	461a      	mov	r2, r3
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	685b      	ldr	r3, [r3, #4]
 8011098:	429a      	cmp	r2, r3
 801109a:	d01d      	beq.n	80110d8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	4619      	mov	r1, r3
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f7ff fa14 	bl	80104d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80110aa:	4b14      	ldr	r3, [pc, #80]	; (80110fc <USBD_SetConfig+0x118>)
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	461a      	mov	r2, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80110b4:	4b11      	ldr	r3, [pc, #68]	; (80110fc <USBD_SetConfig+0x118>)
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	4619      	mov	r1, r3
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f7ff f9ea 	bl	8010494 <USBD_SetClassConfig>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b02      	cmp	r3, #2
 80110c4:	d104      	bne.n	80110d0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80110c6:	6839      	ldr	r1, [r7, #0]
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f000 f8f2 	bl	80112b2 <USBD_CtlError>
          return;
 80110ce:	e012      	b.n	80110f6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f000 f9b7 	bl	8011444 <USBD_CtlSendStatus>
      break;
 80110d6:	e00e      	b.n	80110f6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 f9b3 	bl	8011444 <USBD_CtlSendStatus>
      break;
 80110de:	e00a      	b.n	80110f6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80110e0:	6839      	ldr	r1, [r7, #0]
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 f8e5 	bl	80112b2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80110e8:	4b04      	ldr	r3, [pc, #16]	; (80110fc <USBD_SetConfig+0x118>)
 80110ea:	781b      	ldrb	r3, [r3, #0]
 80110ec:	4619      	mov	r1, r3
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f7ff f9ef 	bl	80104d2 <USBD_ClrClassConfig>
      break;
 80110f4:	bf00      	nop
    }
  }
}
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	200009ec 	.word	0x200009ec

08011100 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	88db      	ldrh	r3, [r3, #6]
 801110e:	2b01      	cmp	r3, #1
 8011110:	d004      	beq.n	801111c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8011112:	6839      	ldr	r1, [r7, #0]
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f000 f8cc 	bl	80112b2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 801111a:	e021      	b.n	8011160 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011122:	2b01      	cmp	r3, #1
 8011124:	db17      	blt.n	8011156 <USBD_GetConfig+0x56>
 8011126:	2b02      	cmp	r3, #2
 8011128:	dd02      	ble.n	8011130 <USBD_GetConfig+0x30>
 801112a:	2b03      	cmp	r3, #3
 801112c:	d00b      	beq.n	8011146 <USBD_GetConfig+0x46>
 801112e:	e012      	b.n	8011156 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2200      	movs	r2, #0
 8011134:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	3308      	adds	r3, #8
 801113a:	2201      	movs	r2, #1
 801113c:	4619      	mov	r1, r3
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f000 f922 	bl	8011388 <USBD_CtlSendData>
      break;
 8011144:	e00c      	b.n	8011160 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	3304      	adds	r3, #4
 801114a:	2201      	movs	r2, #1
 801114c:	4619      	mov	r1, r3
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f000 f91a 	bl	8011388 <USBD_CtlSendData>
      break;
 8011154:	e004      	b.n	8011160 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8011156:	6839      	ldr	r1, [r7, #0]
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f000 f8aa 	bl	80112b2 <USBD_CtlError>
      break;
 801115e:	bf00      	nop
}
 8011160:	bf00      	nop
 8011162:	3708      	adds	r7, #8
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011178:	3b01      	subs	r3, #1
 801117a:	2b02      	cmp	r3, #2
 801117c:	d81e      	bhi.n	80111bc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	88db      	ldrh	r3, [r3, #6]
 8011182:	2b02      	cmp	r3, #2
 8011184:	d004      	beq.n	8011190 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8011186:	6839      	ldr	r1, [r7, #0]
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f000 f892 	bl	80112b2 <USBD_CtlError>
      break;
 801118e:	e01a      	b.n	80111c6 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2201      	movs	r2, #1
 8011194:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 801119c:	2b00      	cmp	r3, #0
 801119e:	d005      	beq.n	80111ac <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	f043 0202 	orr.w	r2, r3, #2
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	330c      	adds	r3, #12
 80111b0:	2202      	movs	r2, #2
 80111b2:	4619      	mov	r1, r3
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f000 f8e7 	bl	8011388 <USBD_CtlSendData>
    break;
 80111ba:	e004      	b.n	80111c6 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80111bc:	6839      	ldr	r1, [r7, #0]
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f000 f877 	bl	80112b2 <USBD_CtlError>
    break;
 80111c4:	bf00      	nop
  }
}
 80111c6:	bf00      	nop
 80111c8:	3708      	adds	r7, #8
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}

080111ce <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80111ce:	b580      	push	{r7, lr}
 80111d0:	b082      	sub	sp, #8
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	6078      	str	r0, [r7, #4]
 80111d6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	885b      	ldrh	r3, [r3, #2]
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d106      	bne.n	80111ee <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2201      	movs	r2, #1
 80111e4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f000 f92b 	bl	8011444 <USBD_CtlSendStatus>
  }

}
 80111ee:	bf00      	nop
 80111f0:	3708      	adds	r7, #8
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}

080111f6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80111f6:	b580      	push	{r7, lr}
 80111f8:	b082      	sub	sp, #8
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	6078      	str	r0, [r7, #4]
 80111fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011206:	3b01      	subs	r3, #1
 8011208:	2b02      	cmp	r3, #2
 801120a:	d80b      	bhi.n	8011224 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	885b      	ldrh	r3, [r3, #2]
 8011210:	2b01      	cmp	r3, #1
 8011212:	d10c      	bne.n	801122e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2200      	movs	r2, #0
 8011218:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f000 f911 	bl	8011444 <USBD_CtlSendStatus>
    }
    break;
 8011222:	e004      	b.n	801122e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8011224:	6839      	ldr	r1, [r7, #0]
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f000 f843 	bl	80112b2 <USBD_CtlError>
    break;
 801122c:	e000      	b.n	8011230 <USBD_ClrFeature+0x3a>
    break;
 801122e:	bf00      	nop
  }
}
 8011230:	bf00      	nop
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	781a      	ldrb	r2, [r3, #0]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	785a      	ldrb	r2, [r3, #1]
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	3302      	adds	r3, #2
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	b29a      	uxth	r2, r3
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	3303      	adds	r3, #3
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	b29b      	uxth	r3, r3
 8011262:	021b      	lsls	r3, r3, #8
 8011264:	b29b      	uxth	r3, r3
 8011266:	4413      	add	r3, r2
 8011268:	b29a      	uxth	r2, r3
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	3304      	adds	r3, #4
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	b29a      	uxth	r2, r3
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	3305      	adds	r3, #5
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	b29b      	uxth	r3, r3
 801127e:	021b      	lsls	r3, r3, #8
 8011280:	b29b      	uxth	r3, r3
 8011282:	4413      	add	r3, r2
 8011284:	b29a      	uxth	r2, r3
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	3306      	adds	r3, #6
 801128e:	781b      	ldrb	r3, [r3, #0]
 8011290:	b29a      	uxth	r2, r3
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	3307      	adds	r3, #7
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	b29b      	uxth	r3, r3
 801129a:	021b      	lsls	r3, r3, #8
 801129c:	b29b      	uxth	r3, r3
 801129e:	4413      	add	r3, r2
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	80da      	strh	r2, [r3, #6]

}
 80112a6:	bf00      	nop
 80112a8:	370c      	adds	r7, #12
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr

080112b2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80112b2:	b580      	push	{r7, lr}
 80112b4:	b082      	sub	sp, #8
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	6078      	str	r0, [r7, #4]
 80112ba:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80112bc:	2180      	movs	r1, #128	; 0x80
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f005 fd6c 	bl	8016d9c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80112c4:	2100      	movs	r1, #0
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f005 fd68 	bl	8016d9c <USBD_LL_StallEP>
}
 80112cc:	bf00      	nop
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b086      	sub	sp, #24
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80112e0:	2300      	movs	r3, #0
 80112e2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d032      	beq.n	8011350 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80112ea:	68f8      	ldr	r0, [r7, #12]
 80112ec:	f000 f834 	bl	8011358 <USBD_GetLen>
 80112f0:	4603      	mov	r3, r0
 80112f2:	3301      	adds	r3, #1
 80112f4:	b29b      	uxth	r3, r3
 80112f6:	005b      	lsls	r3, r3, #1
 80112f8:	b29a      	uxth	r2, r3
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80112fe:	7dfb      	ldrb	r3, [r7, #23]
 8011300:	1c5a      	adds	r2, r3, #1
 8011302:	75fa      	strb	r2, [r7, #23]
 8011304:	461a      	mov	r2, r3
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	4413      	add	r3, r2
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	7812      	ldrb	r2, [r2, #0]
 801130e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8011310:	7dfb      	ldrb	r3, [r7, #23]
 8011312:	1c5a      	adds	r2, r3, #1
 8011314:	75fa      	strb	r2, [r7, #23]
 8011316:	461a      	mov	r2, r3
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	4413      	add	r3, r2
 801131c:	2203      	movs	r2, #3
 801131e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8011320:	e012      	b.n	8011348 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	1c5a      	adds	r2, r3, #1
 8011326:	60fa      	str	r2, [r7, #12]
 8011328:	7dfa      	ldrb	r2, [r7, #23]
 801132a:	1c51      	adds	r1, r2, #1
 801132c:	75f9      	strb	r1, [r7, #23]
 801132e:	4611      	mov	r1, r2
 8011330:	68ba      	ldr	r2, [r7, #8]
 8011332:	440a      	add	r2, r1
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8011338:	7dfb      	ldrb	r3, [r7, #23]
 801133a:	1c5a      	adds	r2, r3, #1
 801133c:	75fa      	strb	r2, [r7, #23]
 801133e:	461a      	mov	r2, r3
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	4413      	add	r3, r2
 8011344:	2200      	movs	r2, #0
 8011346:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d1e8      	bne.n	8011322 <USBD_GetString+0x4e>
    }
  }
}
 8011350:	bf00      	nop
 8011352:	3718      	adds	r7, #24
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011358:	b480      	push	{r7}
 801135a:	b085      	sub	sp, #20
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8011360:	2300      	movs	r3, #0
 8011362:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8011364:	e005      	b.n	8011372 <USBD_GetLen+0x1a>
    {
        len++;
 8011366:	7bfb      	ldrb	r3, [r7, #15]
 8011368:	3301      	adds	r3, #1
 801136a:	73fb      	strb	r3, [r7, #15]
        buf++;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	3301      	adds	r3, #1
 8011370:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d1f5      	bne.n	8011366 <USBD_GetLen+0xe>
    }

    return len;
 801137a:	7bfb      	ldrb	r3, [r7, #15]
}
 801137c:	4618      	mov	r0, r3
 801137e:	3714      	adds	r7, #20
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr

08011388 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	4613      	mov	r3, r2
 8011394:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2202      	movs	r2, #2
 801139a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 801139e:	88fa      	ldrh	r2, [r7, #6]
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80113a4:	88fa      	ldrh	r2, [r7, #6]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80113aa:	88fb      	ldrh	r3, [r7, #6]
 80113ac:	68ba      	ldr	r2, [r7, #8]
 80113ae:	2100      	movs	r1, #0
 80113b0:	68f8      	ldr	r0, [r7, #12]
 80113b2:	f005 fd7c 	bl	8016eae <USBD_LL_Transmit>

  return USBD_OK;
 80113b6:	2300      	movs	r3, #0
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3710      	adds	r7, #16
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	4613      	mov	r3, r2
 80113cc:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80113ce:	88fb      	ldrh	r3, [r7, #6]
 80113d0:	68ba      	ldr	r2, [r7, #8]
 80113d2:	2100      	movs	r1, #0
 80113d4:	68f8      	ldr	r0, [r7, #12]
 80113d6:	f005 fd6a 	bl	8016eae <USBD_LL_Transmit>

  return USBD_OK;
 80113da:	2300      	movs	r3, #0
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3710      	adds	r7, #16
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}

080113e4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	4613      	mov	r3, r2
 80113f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2203      	movs	r2, #3
 80113f6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80113fa:	88fa      	ldrh	r2, [r7, #6]
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8011402:	88fa      	ldrh	r2, [r7, #6]
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 801140a:	88fb      	ldrh	r3, [r7, #6]
 801140c:	68ba      	ldr	r2, [r7, #8]
 801140e:	2100      	movs	r1, #0
 8011410:	68f8      	ldr	r0, [r7, #12]
 8011412:	f005 fd6f 	bl	8016ef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011416:	2300      	movs	r3, #0
}
 8011418:	4618      	mov	r0, r3
 801141a:	3710      	adds	r7, #16
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	4613      	mov	r3, r2
 801142c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801142e:	88fb      	ldrh	r3, [r7, #6]
 8011430:	68ba      	ldr	r2, [r7, #8]
 8011432:	2100      	movs	r1, #0
 8011434:	68f8      	ldr	r0, [r7, #12]
 8011436:	f005 fd5d 	bl	8016ef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801143a:	2300      	movs	r3, #0
}
 801143c:	4618      	mov	r0, r3
 801143e:	3710      	adds	r7, #16
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2204      	movs	r2, #4
 8011450:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011454:	2300      	movs	r3, #0
 8011456:	2200      	movs	r2, #0
 8011458:	2100      	movs	r1, #0
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f005 fd27 	bl	8016eae <USBD_LL_Transmit>

  return USBD_OK;
 8011460:	2300      	movs	r3, #0
}
 8011462:	4618      	mov	r0, r3
 8011464:	3708      	adds	r7, #8
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 801146a:	b580      	push	{r7, lr}
 801146c:	b082      	sub	sp, #8
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2205      	movs	r2, #5
 8011476:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801147a:	2300      	movs	r3, #0
 801147c:	2200      	movs	r2, #0
 801147e:	2100      	movs	r1, #0
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f005 fd37 	bl	8016ef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011486:	2300      	movs	r3, #0
}
 8011488:	4618      	mov	r0, r3
 801148a:	3708      	adds	r7, #8
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	4603      	mov	r3, r0
 8011498:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801149a:	79fb      	ldrb	r3, [r7, #7]
 801149c:	4a08      	ldr	r2, [pc, #32]	; (80114c0 <disk_status+0x30>)
 801149e:	009b      	lsls	r3, r3, #2
 80114a0:	4413      	add	r3, r2
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	79fa      	ldrb	r2, [r7, #7]
 80114a8:	4905      	ldr	r1, [pc, #20]	; (80114c0 <disk_status+0x30>)
 80114aa:	440a      	add	r2, r1
 80114ac:	7a12      	ldrb	r2, [r2, #8]
 80114ae:	4610      	mov	r0, r2
 80114b0:	4798      	blx	r3
 80114b2:	4603      	mov	r3, r0
 80114b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80114b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3710      	adds	r7, #16
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	20000a18 	.word	0x20000a18

080114c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	4603      	mov	r3, r0
 80114cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80114ce:	2300      	movs	r3, #0
 80114d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80114d2:	79fb      	ldrb	r3, [r7, #7]
 80114d4:	4a0d      	ldr	r2, [pc, #52]	; (801150c <disk_initialize+0x48>)
 80114d6:	5cd3      	ldrb	r3, [r2, r3]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d111      	bne.n	8011500 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80114dc:	79fb      	ldrb	r3, [r7, #7]
 80114de:	4a0b      	ldr	r2, [pc, #44]	; (801150c <disk_initialize+0x48>)
 80114e0:	2101      	movs	r1, #1
 80114e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80114e4:	79fb      	ldrb	r3, [r7, #7]
 80114e6:	4a09      	ldr	r2, [pc, #36]	; (801150c <disk_initialize+0x48>)
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	4413      	add	r3, r2
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	79fa      	ldrb	r2, [r7, #7]
 80114f2:	4906      	ldr	r1, [pc, #24]	; (801150c <disk_initialize+0x48>)
 80114f4:	440a      	add	r2, r1
 80114f6:	7a12      	ldrb	r2, [r2, #8]
 80114f8:	4610      	mov	r0, r2
 80114fa:	4798      	blx	r3
 80114fc:	4603      	mov	r3, r0
 80114fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011500:	7bfb      	ldrb	r3, [r7, #15]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	20000a18 	.word	0x20000a18

08011510 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011510:	b590      	push	{r4, r7, lr}
 8011512:	b087      	sub	sp, #28
 8011514:	af00      	add	r7, sp, #0
 8011516:	60b9      	str	r1, [r7, #8]
 8011518:	607a      	str	r2, [r7, #4]
 801151a:	603b      	str	r3, [r7, #0]
 801151c:	4603      	mov	r3, r0
 801151e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011520:	7bfb      	ldrb	r3, [r7, #15]
 8011522:	4a0a      	ldr	r2, [pc, #40]	; (801154c <disk_read+0x3c>)
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	4413      	add	r3, r2
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	689c      	ldr	r4, [r3, #8]
 801152c:	7bfb      	ldrb	r3, [r7, #15]
 801152e:	4a07      	ldr	r2, [pc, #28]	; (801154c <disk_read+0x3c>)
 8011530:	4413      	add	r3, r2
 8011532:	7a18      	ldrb	r0, [r3, #8]
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	68b9      	ldr	r1, [r7, #8]
 801153a:	47a0      	blx	r4
 801153c:	4603      	mov	r3, r0
 801153e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011540:	7dfb      	ldrb	r3, [r7, #23]
}
 8011542:	4618      	mov	r0, r3
 8011544:	371c      	adds	r7, #28
 8011546:	46bd      	mov	sp, r7
 8011548:	bd90      	pop	{r4, r7, pc}
 801154a:	bf00      	nop
 801154c:	20000a18 	.word	0x20000a18

08011550 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011550:	b590      	push	{r4, r7, lr}
 8011552:	b087      	sub	sp, #28
 8011554:	af00      	add	r7, sp, #0
 8011556:	60b9      	str	r1, [r7, #8]
 8011558:	607a      	str	r2, [r7, #4]
 801155a:	603b      	str	r3, [r7, #0]
 801155c:	4603      	mov	r3, r0
 801155e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011560:	7bfb      	ldrb	r3, [r7, #15]
 8011562:	4a0a      	ldr	r2, [pc, #40]	; (801158c <disk_write+0x3c>)
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	4413      	add	r3, r2
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	68dc      	ldr	r4, [r3, #12]
 801156c:	7bfb      	ldrb	r3, [r7, #15]
 801156e:	4a07      	ldr	r2, [pc, #28]	; (801158c <disk_write+0x3c>)
 8011570:	4413      	add	r3, r2
 8011572:	7a18      	ldrb	r0, [r3, #8]
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	68b9      	ldr	r1, [r7, #8]
 801157a:	47a0      	blx	r4
 801157c:	4603      	mov	r3, r0
 801157e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011580:	7dfb      	ldrb	r3, [r7, #23]
}
 8011582:	4618      	mov	r0, r3
 8011584:	371c      	adds	r7, #28
 8011586:	46bd      	mov	sp, r7
 8011588:	bd90      	pop	{r4, r7, pc}
 801158a:	bf00      	nop
 801158c:	20000a18 	.word	0x20000a18

08011590 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	4603      	mov	r3, r0
 8011598:	603a      	str	r2, [r7, #0]
 801159a:	71fb      	strb	r3, [r7, #7]
 801159c:	460b      	mov	r3, r1
 801159e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80115a0:	79fb      	ldrb	r3, [r7, #7]
 80115a2:	4a09      	ldr	r2, [pc, #36]	; (80115c8 <disk_ioctl+0x38>)
 80115a4:	009b      	lsls	r3, r3, #2
 80115a6:	4413      	add	r3, r2
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	691b      	ldr	r3, [r3, #16]
 80115ac:	79fa      	ldrb	r2, [r7, #7]
 80115ae:	4906      	ldr	r1, [pc, #24]	; (80115c8 <disk_ioctl+0x38>)
 80115b0:	440a      	add	r2, r1
 80115b2:	7a10      	ldrb	r0, [r2, #8]
 80115b4:	79b9      	ldrb	r1, [r7, #6]
 80115b6:	683a      	ldr	r2, [r7, #0]
 80115b8:	4798      	blx	r3
 80115ba:	4603      	mov	r3, r0
 80115bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80115be:	7bfb      	ldrb	r3, [r7, #15]
}
 80115c0:	4618      	mov	r0, r3
 80115c2:	3710      	adds	r7, #16
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}
 80115c8:	20000a18 	.word	0x20000a18

080115cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80115cc:	b480      	push	{r7}
 80115ce:	b085      	sub	sp, #20
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	3301      	adds	r3, #1
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80115dc:	89fb      	ldrh	r3, [r7, #14]
 80115de:	021b      	lsls	r3, r3, #8
 80115e0:	b21a      	sxth	r2, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	b21b      	sxth	r3, r3
 80115e8:	4313      	orrs	r3, r2
 80115ea:	b21b      	sxth	r3, r3
 80115ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80115ee:	89fb      	ldrh	r3, [r7, #14]
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3714      	adds	r7, #20
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr

080115fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80115fc:	b480      	push	{r7}
 80115fe:	b085      	sub	sp, #20
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	3303      	adds	r3, #3
 8011608:	781b      	ldrb	r3, [r3, #0]
 801160a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	021b      	lsls	r3, r3, #8
 8011610:	687a      	ldr	r2, [r7, #4]
 8011612:	3202      	adds	r2, #2
 8011614:	7812      	ldrb	r2, [r2, #0]
 8011616:	4313      	orrs	r3, r2
 8011618:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	021b      	lsls	r3, r3, #8
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	3201      	adds	r2, #1
 8011622:	7812      	ldrb	r2, [r2, #0]
 8011624:	4313      	orrs	r3, r2
 8011626:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	021b      	lsls	r3, r3, #8
 801162c:	687a      	ldr	r2, [r7, #4]
 801162e:	7812      	ldrb	r2, [r2, #0]
 8011630:	4313      	orrs	r3, r2
 8011632:	60fb      	str	r3, [r7, #12]
	return rv;
 8011634:	68fb      	ldr	r3, [r7, #12]
}
 8011636:	4618      	mov	r0, r3
 8011638:	3714      	adds	r7, #20
 801163a:	46bd      	mov	sp, r7
 801163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011640:	4770      	bx	lr

08011642 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011642:	b480      	push	{r7}
 8011644:	b083      	sub	sp, #12
 8011646:	af00      	add	r7, sp, #0
 8011648:	6078      	str	r0, [r7, #4]
 801164a:	460b      	mov	r3, r1
 801164c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	1c5a      	adds	r2, r3, #1
 8011652:	607a      	str	r2, [r7, #4]
 8011654:	887a      	ldrh	r2, [r7, #2]
 8011656:	b2d2      	uxtb	r2, r2
 8011658:	701a      	strb	r2, [r3, #0]
 801165a:	887b      	ldrh	r3, [r7, #2]
 801165c:	0a1b      	lsrs	r3, r3, #8
 801165e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	1c5a      	adds	r2, r3, #1
 8011664:	607a      	str	r2, [r7, #4]
 8011666:	887a      	ldrh	r2, [r7, #2]
 8011668:	b2d2      	uxtb	r2, r2
 801166a:	701a      	strb	r2, [r3, #0]
}
 801166c:	bf00      	nop
 801166e:	370c      	adds	r7, #12
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr

08011678 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011678:	b480      	push	{r7}
 801167a:	b083      	sub	sp, #12
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
 8011680:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	1c5a      	adds	r2, r3, #1
 8011686:	607a      	str	r2, [r7, #4]
 8011688:	683a      	ldr	r2, [r7, #0]
 801168a:	b2d2      	uxtb	r2, r2
 801168c:	701a      	strb	r2, [r3, #0]
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	0a1b      	lsrs	r3, r3, #8
 8011692:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	1c5a      	adds	r2, r3, #1
 8011698:	607a      	str	r2, [r7, #4]
 801169a:	683a      	ldr	r2, [r7, #0]
 801169c:	b2d2      	uxtb	r2, r2
 801169e:	701a      	strb	r2, [r3, #0]
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	0a1b      	lsrs	r3, r3, #8
 80116a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	1c5a      	adds	r2, r3, #1
 80116aa:	607a      	str	r2, [r7, #4]
 80116ac:	683a      	ldr	r2, [r7, #0]
 80116ae:	b2d2      	uxtb	r2, r2
 80116b0:	701a      	strb	r2, [r3, #0]
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	0a1b      	lsrs	r3, r3, #8
 80116b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	1c5a      	adds	r2, r3, #1
 80116bc:	607a      	str	r2, [r7, #4]
 80116be:	683a      	ldr	r2, [r7, #0]
 80116c0:	b2d2      	uxtb	r2, r2
 80116c2:	701a      	strb	r2, [r3, #0]
}
 80116c4:	bf00      	nop
 80116c6:	370c      	adds	r7, #12
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr

080116d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80116d0:	b480      	push	{r7}
 80116d2:	b087      	sub	sp, #28
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d00d      	beq.n	8011706 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80116ea:	693a      	ldr	r2, [r7, #16]
 80116ec:	1c53      	adds	r3, r2, #1
 80116ee:	613b      	str	r3, [r7, #16]
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	1c59      	adds	r1, r3, #1
 80116f4:	6179      	str	r1, [r7, #20]
 80116f6:	7812      	ldrb	r2, [r2, #0]
 80116f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	3b01      	subs	r3, #1
 80116fe:	607b      	str	r3, [r7, #4]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d1f1      	bne.n	80116ea <mem_cpy+0x1a>
	}
}
 8011706:	bf00      	nop
 8011708:	371c      	adds	r7, #28
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr

08011712 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011712:	b480      	push	{r7}
 8011714:	b087      	sub	sp, #28
 8011716:	af00      	add	r7, sp, #0
 8011718:	60f8      	str	r0, [r7, #12]
 801171a:	60b9      	str	r1, [r7, #8]
 801171c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	1c5a      	adds	r2, r3, #1
 8011726:	617a      	str	r2, [r7, #20]
 8011728:	68ba      	ldr	r2, [r7, #8]
 801172a:	b2d2      	uxtb	r2, r2
 801172c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	3b01      	subs	r3, #1
 8011732:	607b      	str	r3, [r7, #4]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d1f3      	bne.n	8011722 <mem_set+0x10>
}
 801173a:	bf00      	nop
 801173c:	371c      	adds	r7, #28
 801173e:	46bd      	mov	sp, r7
 8011740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011744:	4770      	bx	lr

08011746 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011746:	b480      	push	{r7}
 8011748:	b089      	sub	sp, #36	; 0x24
 801174a:	af00      	add	r7, sp, #0
 801174c:	60f8      	str	r0, [r7, #12]
 801174e:	60b9      	str	r1, [r7, #8]
 8011750:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	61fb      	str	r3, [r7, #28]
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801175a:	2300      	movs	r3, #0
 801175c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801175e:	69fb      	ldr	r3, [r7, #28]
 8011760:	1c5a      	adds	r2, r3, #1
 8011762:	61fa      	str	r2, [r7, #28]
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	4619      	mov	r1, r3
 8011768:	69bb      	ldr	r3, [r7, #24]
 801176a:	1c5a      	adds	r2, r3, #1
 801176c:	61ba      	str	r2, [r7, #24]
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	1acb      	subs	r3, r1, r3
 8011772:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	3b01      	subs	r3, #1
 8011778:	607b      	str	r3, [r7, #4]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d002      	beq.n	8011786 <mem_cmp+0x40>
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d0eb      	beq.n	801175e <mem_cmp+0x18>

	return r;
 8011786:	697b      	ldr	r3, [r7, #20]
}
 8011788:	4618      	mov	r0, r3
 801178a:	3724      	adds	r7, #36	; 0x24
 801178c:	46bd      	mov	sp, r7
 801178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011792:	4770      	bx	lr

08011794 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011794:	b480      	push	{r7}
 8011796:	b083      	sub	sp, #12
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801179e:	e002      	b.n	80117a6 <chk_chr+0x12>
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3301      	adds	r3, #1
 80117a4:	607b      	str	r3, [r7, #4]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d005      	beq.n	80117ba <chk_chr+0x26>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	461a      	mov	r2, r3
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d1f2      	bne.n	80117a0 <chk_chr+0xc>
	return *str;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	781b      	ldrb	r3, [r3, #0]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	370c      	adds	r7, #12
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr
	...

080117cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80117cc:	b480      	push	{r7}
 80117ce:	b085      	sub	sp, #20
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80117d6:	2300      	movs	r3, #0
 80117d8:	60bb      	str	r3, [r7, #8]
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	60fb      	str	r3, [r7, #12]
 80117de:	e029      	b.n	8011834 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80117e0:	4a27      	ldr	r2, [pc, #156]	; (8011880 <chk_lock+0xb4>)
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	011b      	lsls	r3, r3, #4
 80117e6:	4413      	add	r3, r2
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d01d      	beq.n	801182a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80117ee:	4a24      	ldr	r2, [pc, #144]	; (8011880 <chk_lock+0xb4>)
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	011b      	lsls	r3, r3, #4
 80117f4:	4413      	add	r3, r2
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d116      	bne.n	801182e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011800:	4a1f      	ldr	r2, [pc, #124]	; (8011880 <chk_lock+0xb4>)
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	011b      	lsls	r3, r3, #4
 8011806:	4413      	add	r3, r2
 8011808:	3304      	adds	r3, #4
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011810:	429a      	cmp	r2, r3
 8011812:	d10c      	bne.n	801182e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011814:	4a1a      	ldr	r2, [pc, #104]	; (8011880 <chk_lock+0xb4>)
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	011b      	lsls	r3, r3, #4
 801181a:	4413      	add	r3, r2
 801181c:	3308      	adds	r3, #8
 801181e:	681a      	ldr	r2, [r3, #0]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011824:	429a      	cmp	r2, r3
 8011826:	d102      	bne.n	801182e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011828:	e007      	b.n	801183a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801182a:	2301      	movs	r3, #1
 801182c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	3301      	adds	r3, #1
 8011832:	60fb      	str	r3, [r7, #12]
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	2b01      	cmp	r3, #1
 8011838:	d9d2      	bls.n	80117e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2b02      	cmp	r3, #2
 801183e:	d109      	bne.n	8011854 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d102      	bne.n	801184c <chk_lock+0x80>
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	2b02      	cmp	r3, #2
 801184a:	d101      	bne.n	8011850 <chk_lock+0x84>
 801184c:	2300      	movs	r3, #0
 801184e:	e010      	b.n	8011872 <chk_lock+0xa6>
 8011850:	2312      	movs	r3, #18
 8011852:	e00e      	b.n	8011872 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d108      	bne.n	801186c <chk_lock+0xa0>
 801185a:	4a09      	ldr	r2, [pc, #36]	; (8011880 <chk_lock+0xb4>)
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	011b      	lsls	r3, r3, #4
 8011860:	4413      	add	r3, r2
 8011862:	330c      	adds	r3, #12
 8011864:	881b      	ldrh	r3, [r3, #0]
 8011866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801186a:	d101      	bne.n	8011870 <chk_lock+0xa4>
 801186c:	2310      	movs	r3, #16
 801186e:	e000      	b.n	8011872 <chk_lock+0xa6>
 8011870:	2300      	movs	r3, #0
}
 8011872:	4618      	mov	r0, r3
 8011874:	3714      	adds	r7, #20
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	200009f8 	.word	0x200009f8

08011884 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011884:	b480      	push	{r7}
 8011886:	b083      	sub	sp, #12
 8011888:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801188a:	2300      	movs	r3, #0
 801188c:	607b      	str	r3, [r7, #4]
 801188e:	e002      	b.n	8011896 <enq_lock+0x12>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	3301      	adds	r3, #1
 8011894:	607b      	str	r3, [r7, #4]
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2b01      	cmp	r3, #1
 801189a:	d806      	bhi.n	80118aa <enq_lock+0x26>
 801189c:	4a09      	ldr	r2, [pc, #36]	; (80118c4 <enq_lock+0x40>)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	011b      	lsls	r3, r3, #4
 80118a2:	4413      	add	r3, r2
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1f2      	bne.n	8011890 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2b02      	cmp	r3, #2
 80118ae:	bf14      	ite	ne
 80118b0:	2301      	movne	r3, #1
 80118b2:	2300      	moveq	r3, #0
 80118b4:	b2db      	uxtb	r3, r3
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	370c      	adds	r7, #12
 80118ba:	46bd      	mov	sp, r7
 80118bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c0:	4770      	bx	lr
 80118c2:	bf00      	nop
 80118c4:	200009f8 	.word	0x200009f8

080118c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80118c8:	b480      	push	{r7}
 80118ca:	b085      	sub	sp, #20
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80118d2:	2300      	movs	r3, #0
 80118d4:	60fb      	str	r3, [r7, #12]
 80118d6:	e01f      	b.n	8011918 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80118d8:	4a41      	ldr	r2, [pc, #260]	; (80119e0 <inc_lock+0x118>)
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	011b      	lsls	r3, r3, #4
 80118de:	4413      	add	r3, r2
 80118e0:	681a      	ldr	r2, [r3, #0]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d113      	bne.n	8011912 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80118ea:	4a3d      	ldr	r2, [pc, #244]	; (80119e0 <inc_lock+0x118>)
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	011b      	lsls	r3, r3, #4
 80118f0:	4413      	add	r3, r2
 80118f2:	3304      	adds	r3, #4
 80118f4:	681a      	ldr	r2, [r3, #0]
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d109      	bne.n	8011912 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80118fe:	4a38      	ldr	r2, [pc, #224]	; (80119e0 <inc_lock+0x118>)
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	011b      	lsls	r3, r3, #4
 8011904:	4413      	add	r3, r2
 8011906:	3308      	adds	r3, #8
 8011908:	681a      	ldr	r2, [r3, #0]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801190e:	429a      	cmp	r2, r3
 8011910:	d006      	beq.n	8011920 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	3301      	adds	r3, #1
 8011916:	60fb      	str	r3, [r7, #12]
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	2b01      	cmp	r3, #1
 801191c:	d9dc      	bls.n	80118d8 <inc_lock+0x10>
 801191e:	e000      	b.n	8011922 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011920:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2b02      	cmp	r3, #2
 8011926:	d132      	bne.n	801198e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011928:	2300      	movs	r3, #0
 801192a:	60fb      	str	r3, [r7, #12]
 801192c:	e002      	b.n	8011934 <inc_lock+0x6c>
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	3301      	adds	r3, #1
 8011932:	60fb      	str	r3, [r7, #12]
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	2b01      	cmp	r3, #1
 8011938:	d806      	bhi.n	8011948 <inc_lock+0x80>
 801193a:	4a29      	ldr	r2, [pc, #164]	; (80119e0 <inc_lock+0x118>)
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	011b      	lsls	r3, r3, #4
 8011940:	4413      	add	r3, r2
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d1f2      	bne.n	801192e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	2b02      	cmp	r3, #2
 801194c:	d101      	bne.n	8011952 <inc_lock+0x8a>
 801194e:	2300      	movs	r3, #0
 8011950:	e040      	b.n	80119d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681a      	ldr	r2, [r3, #0]
 8011956:	4922      	ldr	r1, [pc, #136]	; (80119e0 <inc_lock+0x118>)
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	011b      	lsls	r3, r3, #4
 801195c:	440b      	add	r3, r1
 801195e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	689a      	ldr	r2, [r3, #8]
 8011964:	491e      	ldr	r1, [pc, #120]	; (80119e0 <inc_lock+0x118>)
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	011b      	lsls	r3, r3, #4
 801196a:	440b      	add	r3, r1
 801196c:	3304      	adds	r3, #4
 801196e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	695a      	ldr	r2, [r3, #20]
 8011974:	491a      	ldr	r1, [pc, #104]	; (80119e0 <inc_lock+0x118>)
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	011b      	lsls	r3, r3, #4
 801197a:	440b      	add	r3, r1
 801197c:	3308      	adds	r3, #8
 801197e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011980:	4a17      	ldr	r2, [pc, #92]	; (80119e0 <inc_lock+0x118>)
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	011b      	lsls	r3, r3, #4
 8011986:	4413      	add	r3, r2
 8011988:	330c      	adds	r3, #12
 801198a:	2200      	movs	r2, #0
 801198c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d009      	beq.n	80119a8 <inc_lock+0xe0>
 8011994:	4a12      	ldr	r2, [pc, #72]	; (80119e0 <inc_lock+0x118>)
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	011b      	lsls	r3, r3, #4
 801199a:	4413      	add	r3, r2
 801199c:	330c      	adds	r3, #12
 801199e:	881b      	ldrh	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d001      	beq.n	80119a8 <inc_lock+0xe0>
 80119a4:	2300      	movs	r3, #0
 80119a6:	e015      	b.n	80119d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d108      	bne.n	80119c0 <inc_lock+0xf8>
 80119ae:	4a0c      	ldr	r2, [pc, #48]	; (80119e0 <inc_lock+0x118>)
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	011b      	lsls	r3, r3, #4
 80119b4:	4413      	add	r3, r2
 80119b6:	330c      	adds	r3, #12
 80119b8:	881b      	ldrh	r3, [r3, #0]
 80119ba:	3301      	adds	r3, #1
 80119bc:	b29a      	uxth	r2, r3
 80119be:	e001      	b.n	80119c4 <inc_lock+0xfc>
 80119c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80119c4:	4906      	ldr	r1, [pc, #24]	; (80119e0 <inc_lock+0x118>)
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	011b      	lsls	r3, r3, #4
 80119ca:	440b      	add	r3, r1
 80119cc:	330c      	adds	r3, #12
 80119ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	3301      	adds	r3, #1
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3714      	adds	r7, #20
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr
 80119e0:	200009f8 	.word	0x200009f8

080119e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80119e4:	b480      	push	{r7}
 80119e6:	b085      	sub	sp, #20
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	3b01      	subs	r3, #1
 80119f0:	607b      	str	r3, [r7, #4]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	d825      	bhi.n	8011a44 <dec_lock+0x60>
		n = Files[i].ctr;
 80119f8:	4a17      	ldr	r2, [pc, #92]	; (8011a58 <dec_lock+0x74>)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	011b      	lsls	r3, r3, #4
 80119fe:	4413      	add	r3, r2
 8011a00:	330c      	adds	r3, #12
 8011a02:	881b      	ldrh	r3, [r3, #0]
 8011a04:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011a06:	89fb      	ldrh	r3, [r7, #14]
 8011a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a0c:	d101      	bne.n	8011a12 <dec_lock+0x2e>
 8011a0e:	2300      	movs	r3, #0
 8011a10:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011a12:	89fb      	ldrh	r3, [r7, #14]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d002      	beq.n	8011a1e <dec_lock+0x3a>
 8011a18:	89fb      	ldrh	r3, [r7, #14]
 8011a1a:	3b01      	subs	r3, #1
 8011a1c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011a1e:	4a0e      	ldr	r2, [pc, #56]	; (8011a58 <dec_lock+0x74>)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	011b      	lsls	r3, r3, #4
 8011a24:	4413      	add	r3, r2
 8011a26:	330c      	adds	r3, #12
 8011a28:	89fa      	ldrh	r2, [r7, #14]
 8011a2a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011a2c:	89fb      	ldrh	r3, [r7, #14]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d105      	bne.n	8011a3e <dec_lock+0x5a>
 8011a32:	4a09      	ldr	r2, [pc, #36]	; (8011a58 <dec_lock+0x74>)
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	011b      	lsls	r3, r3, #4
 8011a38:	4413      	add	r3, r2
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	737b      	strb	r3, [r7, #13]
 8011a42:	e001      	b.n	8011a48 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011a44:	2302      	movs	r3, #2
 8011a46:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011a48:	7b7b      	ldrb	r3, [r7, #13]
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3714      	adds	r7, #20
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop
 8011a58:	200009f8 	.word	0x200009f8

08011a5c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b085      	sub	sp, #20
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011a64:	2300      	movs	r3, #0
 8011a66:	60fb      	str	r3, [r7, #12]
 8011a68:	e010      	b.n	8011a8c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011a6a:	4a0d      	ldr	r2, [pc, #52]	; (8011aa0 <clear_lock+0x44>)
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	011b      	lsls	r3, r3, #4
 8011a70:	4413      	add	r3, r2
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	687a      	ldr	r2, [r7, #4]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d105      	bne.n	8011a86 <clear_lock+0x2a>
 8011a7a:	4a09      	ldr	r2, [pc, #36]	; (8011aa0 <clear_lock+0x44>)
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	011b      	lsls	r3, r3, #4
 8011a80:	4413      	add	r3, r2
 8011a82:	2200      	movs	r2, #0
 8011a84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	3301      	adds	r3, #1
 8011a8a:	60fb      	str	r3, [r7, #12]
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2b01      	cmp	r3, #1
 8011a90:	d9eb      	bls.n	8011a6a <clear_lock+0xe>
	}
}
 8011a92:	bf00      	nop
 8011a94:	3714      	adds	r7, #20
 8011a96:	46bd      	mov	sp, r7
 8011a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop
 8011aa0:	200009f8 	.word	0x200009f8

08011aa4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b086      	sub	sp, #24
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011aac:	2300      	movs	r3, #0
 8011aae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	78db      	ldrb	r3, [r3, #3]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d034      	beq.n	8011b22 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011abc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	7858      	ldrb	r0, [r3, #1]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011ac8:	2301      	movs	r3, #1
 8011aca:	697a      	ldr	r2, [r7, #20]
 8011acc:	f7ff fd40 	bl	8011550 <disk_write>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d002      	beq.n	8011adc <sync_window+0x38>
			res = FR_DISK_ERR;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	73fb      	strb	r3, [r7, #15]
 8011ada:	e022      	b.n	8011b22 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ae6:	697a      	ldr	r2, [r7, #20]
 8011ae8:	1ad2      	subs	r2, r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	69db      	ldr	r3, [r3, #28]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d217      	bcs.n	8011b22 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	789b      	ldrb	r3, [r3, #2]
 8011af6:	613b      	str	r3, [r7, #16]
 8011af8:	e010      	b.n	8011b1c <sync_window+0x78>
					wsect += fs->fsize;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	69db      	ldr	r3, [r3, #28]
 8011afe:	697a      	ldr	r2, [r7, #20]
 8011b00:	4413      	add	r3, r2
 8011b02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	7858      	ldrb	r0, [r3, #1]
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011b0e:	2301      	movs	r3, #1
 8011b10:	697a      	ldr	r2, [r7, #20]
 8011b12:	f7ff fd1d 	bl	8011550 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	613b      	str	r3, [r7, #16]
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	d8eb      	bhi.n	8011afa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	3718      	adds	r7, #24
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b084      	sub	sp, #16
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011b36:	2300      	movs	r3, #0
 8011b38:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b3e:	683a      	ldr	r2, [r7, #0]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d01b      	beq.n	8011b7c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7ff ffad 	bl	8011aa4 <sync_window>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011b4e:	7bfb      	ldrb	r3, [r7, #15]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d113      	bne.n	8011b7c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	7858      	ldrb	r0, [r3, #1]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011b5e:	2301      	movs	r3, #1
 8011b60:	683a      	ldr	r2, [r7, #0]
 8011b62:	f7ff fcd5 	bl	8011510 <disk_read>
 8011b66:	4603      	mov	r3, r0
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d004      	beq.n	8011b76 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b70:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011b72:	2301      	movs	r3, #1
 8011b74:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	683a      	ldr	r2, [r7, #0]
 8011b7a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3710      	adds	r7, #16
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
	...

08011b88 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7ff ff87 	bl	8011aa4 <sync_window>
 8011b96:	4603      	mov	r3, r0
 8011b98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011b9a:	7bfb      	ldrb	r3, [r7, #15]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d159      	bne.n	8011c54 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	2b03      	cmp	r3, #3
 8011ba6:	d149      	bne.n	8011c3c <sync_fs+0xb4>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	791b      	ldrb	r3, [r3, #4]
 8011bac:	2b01      	cmp	r3, #1
 8011bae:	d145      	bne.n	8011c3c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	899b      	ldrh	r3, [r3, #12]
 8011bba:	461a      	mov	r2, r3
 8011bbc:	2100      	movs	r1, #0
 8011bbe:	f7ff fda8 	bl	8011712 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	3334      	adds	r3, #52	; 0x34
 8011bc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011bca:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7ff fd37 	bl	8011642 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	3334      	adds	r3, #52	; 0x34
 8011bd8:	4921      	ldr	r1, [pc, #132]	; (8011c60 <sync_fs+0xd8>)
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7ff fd4c 	bl	8011678 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	3334      	adds	r3, #52	; 0x34
 8011be4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011be8:	491e      	ldr	r1, [pc, #120]	; (8011c64 <sync_fs+0xdc>)
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7ff fd44 	bl	8011678 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	3334      	adds	r3, #52	; 0x34
 8011bf4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	695b      	ldr	r3, [r3, #20]
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	4610      	mov	r0, r2
 8011c00:	f7ff fd3a 	bl	8011678 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	3334      	adds	r3, #52	; 0x34
 8011c08:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	691b      	ldr	r3, [r3, #16]
 8011c10:	4619      	mov	r1, r3
 8011c12:	4610      	mov	r0, r2
 8011c14:	f7ff fd30 	bl	8011678 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6a1b      	ldr	r3, [r3, #32]
 8011c1c:	1c5a      	adds	r2, r3, #1
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	7858      	ldrb	r0, [r3, #1]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c30:	2301      	movs	r3, #1
 8011c32:	f7ff fc8d 	bl	8011550 <disk_write>
			fs->fsi_flag = 0;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	785b      	ldrb	r3, [r3, #1]
 8011c40:	2200      	movs	r2, #0
 8011c42:	2100      	movs	r1, #0
 8011c44:	4618      	mov	r0, r3
 8011c46:	f7ff fca3 	bl	8011590 <disk_ioctl>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d001      	beq.n	8011c54 <sync_fs+0xcc>
 8011c50:	2301      	movs	r3, #1
 8011c52:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3710      	adds	r7, #16
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
 8011c5e:	bf00      	nop
 8011c60:	41615252 	.word	0x41615252
 8011c64:	61417272 	.word	0x61417272

08011c68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b083      	sub	sp, #12
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	3b02      	subs	r3, #2
 8011c76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	699b      	ldr	r3, [r3, #24]
 8011c7c:	3b02      	subs	r3, #2
 8011c7e:	683a      	ldr	r2, [r7, #0]
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d301      	bcc.n	8011c88 <clust2sect+0x20>
 8011c84:	2300      	movs	r3, #0
 8011c86:	e008      	b.n	8011c9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	895b      	ldrh	r3, [r3, #10]
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	fb03 f202 	mul.w	r2, r3, r2
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c98:	4413      	add	r3, r2
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	370c      	adds	r7, #12
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca4:	4770      	bx	lr

08011ca6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011ca6:	b580      	push	{r7, lr}
 8011ca8:	b086      	sub	sp, #24
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
 8011cae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	2b01      	cmp	r3, #1
 8011cba:	d904      	bls.n	8011cc6 <get_fat+0x20>
 8011cbc:	693b      	ldr	r3, [r7, #16]
 8011cbe:	699b      	ldr	r3, [r3, #24]
 8011cc0:	683a      	ldr	r2, [r7, #0]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d302      	bcc.n	8011ccc <get_fat+0x26>
		val = 1;	/* Internal error */
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	617b      	str	r3, [r7, #20]
 8011cca:	e0b7      	b.n	8011e3c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8011cd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	781b      	ldrb	r3, [r3, #0]
 8011cd6:	2b02      	cmp	r3, #2
 8011cd8:	d05a      	beq.n	8011d90 <get_fat+0xea>
 8011cda:	2b03      	cmp	r3, #3
 8011cdc:	d07d      	beq.n	8011dda <get_fat+0x134>
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	f040 80a2 	bne.w	8011e28 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	60fb      	str	r3, [r7, #12]
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	085b      	lsrs	r3, r3, #1
 8011cec:	68fa      	ldr	r2, [r7, #12]
 8011cee:	4413      	add	r3, r2
 8011cf0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	899b      	ldrh	r3, [r3, #12]
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d02:	4413      	add	r3, r2
 8011d04:	4619      	mov	r1, r3
 8011d06:	6938      	ldr	r0, [r7, #16]
 8011d08:	f7ff ff10 	bl	8011b2c <move_window>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	f040 808d 	bne.w	8011e2e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	1c5a      	adds	r2, r3, #1
 8011d18:	60fa      	str	r2, [r7, #12]
 8011d1a:	693a      	ldr	r2, [r7, #16]
 8011d1c:	8992      	ldrh	r2, [r2, #12]
 8011d1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d22:	fb02 f201 	mul.w	r2, r2, r1
 8011d26:	1a9b      	subs	r3, r3, r2
 8011d28:	693a      	ldr	r2, [r7, #16]
 8011d2a:	4413      	add	r3, r2
 8011d2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011d30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	899b      	ldrh	r3, [r3, #12]
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d42:	4413      	add	r3, r2
 8011d44:	4619      	mov	r1, r3
 8011d46:	6938      	ldr	r0, [r7, #16]
 8011d48:	f7ff fef0 	bl	8011b2c <move_window>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d16f      	bne.n	8011e32 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	899b      	ldrh	r3, [r3, #12]
 8011d56:	461a      	mov	r2, r3
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d5e:	fb02 f201 	mul.w	r2, r2, r1
 8011d62:	1a9b      	subs	r3, r3, r2
 8011d64:	693a      	ldr	r2, [r7, #16]
 8011d66:	4413      	add	r3, r2
 8011d68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011d6c:	021b      	lsls	r3, r3, #8
 8011d6e:	461a      	mov	r2, r3
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	4313      	orrs	r3, r2
 8011d74:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	f003 0301 	and.w	r3, r3, #1
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d002      	beq.n	8011d86 <get_fat+0xe0>
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	091b      	lsrs	r3, r3, #4
 8011d84:	e002      	b.n	8011d8c <get_fat+0xe6>
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011d8c:	617b      	str	r3, [r7, #20]
			break;
 8011d8e:	e055      	b.n	8011e3c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	899b      	ldrh	r3, [r3, #12]
 8011d98:	085b      	lsrs	r3, r3, #1
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	fbb3 f3f1 	udiv	r3, r3, r1
 8011da4:	4413      	add	r3, r2
 8011da6:	4619      	mov	r1, r3
 8011da8:	6938      	ldr	r0, [r7, #16]
 8011daa:	f7ff febf 	bl	8011b2c <move_window>
 8011dae:	4603      	mov	r3, r0
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d140      	bne.n	8011e36 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011db4:	693b      	ldr	r3, [r7, #16]
 8011db6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	005b      	lsls	r3, r3, #1
 8011dbe:	693a      	ldr	r2, [r7, #16]
 8011dc0:	8992      	ldrh	r2, [r2, #12]
 8011dc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8011dc6:	fb02 f200 	mul.w	r2, r2, r0
 8011dca:	1a9b      	subs	r3, r3, r2
 8011dcc:	440b      	add	r3, r1
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7ff fbfc 	bl	80115cc <ld_word>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	617b      	str	r3, [r7, #20]
			break;
 8011dd8:	e030      	b.n	8011e3c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	899b      	ldrh	r3, [r3, #12]
 8011de2:	089b      	lsrs	r3, r3, #2
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	4619      	mov	r1, r3
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dee:	4413      	add	r3, r2
 8011df0:	4619      	mov	r1, r3
 8011df2:	6938      	ldr	r0, [r7, #16]
 8011df4:	f7ff fe9a 	bl	8011b2c <move_window>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d11d      	bne.n	8011e3a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	009b      	lsls	r3, r3, #2
 8011e08:	693a      	ldr	r2, [r7, #16]
 8011e0a:	8992      	ldrh	r2, [r2, #12]
 8011e0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e10:	fb02 f200 	mul.w	r2, r2, r0
 8011e14:	1a9b      	subs	r3, r3, r2
 8011e16:	440b      	add	r3, r1
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7ff fbef 	bl	80115fc <ld_dword>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011e24:	617b      	str	r3, [r7, #20]
			break;
 8011e26:	e009      	b.n	8011e3c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011e28:	2301      	movs	r3, #1
 8011e2a:	617b      	str	r3, [r7, #20]
 8011e2c:	e006      	b.n	8011e3c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e2e:	bf00      	nop
 8011e30:	e004      	b.n	8011e3c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e32:	bf00      	nop
 8011e34:	e002      	b.n	8011e3c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e36:	bf00      	nop
 8011e38:	e000      	b.n	8011e3c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e3a:	bf00      	nop
		}
	}

	return val;
 8011e3c:	697b      	ldr	r3, [r7, #20]
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3718      	adds	r7, #24
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011e46:	b590      	push	{r4, r7, lr}
 8011e48:	b089      	sub	sp, #36	; 0x24
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	60f8      	str	r0, [r7, #12]
 8011e4e:	60b9      	str	r1, [r7, #8]
 8011e50:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011e52:	2302      	movs	r3, #2
 8011e54:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	2b01      	cmp	r3, #1
 8011e5a:	f240 8106 	bls.w	801206a <put_fat+0x224>
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	699b      	ldr	r3, [r3, #24]
 8011e62:	68ba      	ldr	r2, [r7, #8]
 8011e64:	429a      	cmp	r2, r3
 8011e66:	f080 8100 	bcs.w	801206a <put_fat+0x224>
		switch (fs->fs_type) {
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	2b02      	cmp	r3, #2
 8011e70:	f000 8088 	beq.w	8011f84 <put_fat+0x13e>
 8011e74:	2b03      	cmp	r3, #3
 8011e76:	f000 80b0 	beq.w	8011fda <put_fat+0x194>
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	f040 80f5 	bne.w	801206a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	61bb      	str	r3, [r7, #24]
 8011e84:	69bb      	ldr	r3, [r7, #24]
 8011e86:	085b      	lsrs	r3, r3, #1
 8011e88:	69ba      	ldr	r2, [r7, #24]
 8011e8a:	4413      	add	r3, r2
 8011e8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	899b      	ldrh	r3, [r3, #12]
 8011e96:	4619      	mov	r1, r3
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e9e:	4413      	add	r3, r2
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	68f8      	ldr	r0, [r7, #12]
 8011ea4:	f7ff fe42 	bl	8011b2c <move_window>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011eac:	7ffb      	ldrb	r3, [r7, #31]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	f040 80d4 	bne.w	801205c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	1c5a      	adds	r2, r3, #1
 8011ebe:	61ba      	str	r2, [r7, #24]
 8011ec0:	68fa      	ldr	r2, [r7, #12]
 8011ec2:	8992      	ldrh	r2, [r2, #12]
 8011ec4:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ec8:	fb02 f200 	mul.w	r2, r2, r0
 8011ecc:	1a9b      	subs	r3, r3, r2
 8011ece:	440b      	add	r3, r1
 8011ed0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	f003 0301 	and.w	r3, r3, #1
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d00d      	beq.n	8011ef8 <put_fat+0xb2>
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	781b      	ldrb	r3, [r3, #0]
 8011ee0:	b25b      	sxtb	r3, r3
 8011ee2:	f003 030f 	and.w	r3, r3, #15
 8011ee6:	b25a      	sxtb	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	011b      	lsls	r3, r3, #4
 8011eee:	b25b      	sxtb	r3, r3
 8011ef0:	4313      	orrs	r3, r2
 8011ef2:	b25b      	sxtb	r3, r3
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	e001      	b.n	8011efc <put_fat+0xb6>
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	697a      	ldr	r2, [r7, #20]
 8011efe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	2201      	movs	r2, #1
 8011f04:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	899b      	ldrh	r3, [r3, #12]
 8011f0e:	4619      	mov	r1, r3
 8011f10:	69bb      	ldr	r3, [r7, #24]
 8011f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f16:	4413      	add	r3, r2
 8011f18:	4619      	mov	r1, r3
 8011f1a:	68f8      	ldr	r0, [r7, #12]
 8011f1c:	f7ff fe06 	bl	8011b2c <move_window>
 8011f20:	4603      	mov	r3, r0
 8011f22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f24:	7ffb      	ldrb	r3, [r7, #31]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	f040 809a 	bne.w	8012060 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	899b      	ldrh	r3, [r3, #12]
 8011f36:	461a      	mov	r2, r3
 8011f38:	69bb      	ldr	r3, [r7, #24]
 8011f3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f3e:	fb02 f200 	mul.w	r2, r2, r0
 8011f42:	1a9b      	subs	r3, r3, r2
 8011f44:	440b      	add	r3, r1
 8011f46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	f003 0301 	and.w	r3, r3, #1
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d003      	beq.n	8011f5a <put_fat+0x114>
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	091b      	lsrs	r3, r3, #4
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	e00e      	b.n	8011f78 <put_fat+0x132>
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	b25b      	sxtb	r3, r3
 8011f60:	f023 030f 	bic.w	r3, r3, #15
 8011f64:	b25a      	sxtb	r2, r3
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	0a1b      	lsrs	r3, r3, #8
 8011f6a:	b25b      	sxtb	r3, r3
 8011f6c:	f003 030f 	and.w	r3, r3, #15
 8011f70:	b25b      	sxtb	r3, r3
 8011f72:	4313      	orrs	r3, r2
 8011f74:	b25b      	sxtb	r3, r3
 8011f76:	b2db      	uxtb	r3, r3
 8011f78:	697a      	ldr	r2, [r7, #20]
 8011f7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	2201      	movs	r2, #1
 8011f80:	70da      	strb	r2, [r3, #3]
			break;
 8011f82:	e072      	b.n	801206a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	899b      	ldrh	r3, [r3, #12]
 8011f8c:	085b      	lsrs	r3, r3, #1
 8011f8e:	b29b      	uxth	r3, r3
 8011f90:	4619      	mov	r1, r3
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f98:	4413      	add	r3, r2
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	68f8      	ldr	r0, [r7, #12]
 8011f9e:	f7ff fdc5 	bl	8011b2c <move_window>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fa6:	7ffb      	ldrb	r3, [r7, #31]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d15b      	bne.n	8012064 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	005b      	lsls	r3, r3, #1
 8011fb6:	68fa      	ldr	r2, [r7, #12]
 8011fb8:	8992      	ldrh	r2, [r2, #12]
 8011fba:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fbe:	fb02 f200 	mul.w	r2, r2, r0
 8011fc2:	1a9b      	subs	r3, r3, r2
 8011fc4:	440b      	add	r3, r1
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	b292      	uxth	r2, r2
 8011fca:	4611      	mov	r1, r2
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7ff fb38 	bl	8011642 <st_word>
			fs->wflag = 1;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2201      	movs	r2, #1
 8011fd6:	70da      	strb	r2, [r3, #3]
			break;
 8011fd8:	e047      	b.n	801206a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	899b      	ldrh	r3, [r3, #12]
 8011fe2:	089b      	lsrs	r3, r3, #2
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fee:	4413      	add	r3, r2
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	f7ff fd9a 	bl	8011b2c <move_window>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ffc:	7ffb      	ldrb	r3, [r7, #31]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d132      	bne.n	8012068 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	009b      	lsls	r3, r3, #2
 8012012:	68fa      	ldr	r2, [r7, #12]
 8012014:	8992      	ldrh	r2, [r2, #12]
 8012016:	fbb3 f0f2 	udiv	r0, r3, r2
 801201a:	fb02 f200 	mul.w	r2, r2, r0
 801201e:	1a9b      	subs	r3, r3, r2
 8012020:	440b      	add	r3, r1
 8012022:	4618      	mov	r0, r3
 8012024:	f7ff faea 	bl	80115fc <ld_dword>
 8012028:	4603      	mov	r3, r0
 801202a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801202e:	4323      	orrs	r3, r4
 8012030:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	8992      	ldrh	r2, [r2, #12]
 8012040:	fbb3 f0f2 	udiv	r0, r3, r2
 8012044:	fb02 f200 	mul.w	r2, r2, r0
 8012048:	1a9b      	subs	r3, r3, r2
 801204a:	440b      	add	r3, r1
 801204c:	6879      	ldr	r1, [r7, #4]
 801204e:	4618      	mov	r0, r3
 8012050:	f7ff fb12 	bl	8011678 <st_dword>
			fs->wflag = 1;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	2201      	movs	r2, #1
 8012058:	70da      	strb	r2, [r3, #3]
			break;
 801205a:	e006      	b.n	801206a <put_fat+0x224>
			if (res != FR_OK) break;
 801205c:	bf00      	nop
 801205e:	e004      	b.n	801206a <put_fat+0x224>
			if (res != FR_OK) break;
 8012060:	bf00      	nop
 8012062:	e002      	b.n	801206a <put_fat+0x224>
			if (res != FR_OK) break;
 8012064:	bf00      	nop
 8012066:	e000      	b.n	801206a <put_fat+0x224>
			if (res != FR_OK) break;
 8012068:	bf00      	nop
		}
	}
	return res;
 801206a:	7ffb      	ldrb	r3, [r7, #31]
}
 801206c:	4618      	mov	r0, r3
 801206e:	3724      	adds	r7, #36	; 0x24
 8012070:	46bd      	mov	sp, r7
 8012072:	bd90      	pop	{r4, r7, pc}

08012074 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b088      	sub	sp, #32
 8012078:	af00      	add	r7, sp, #0
 801207a:	60f8      	str	r0, [r7, #12]
 801207c:	60b9      	str	r1, [r7, #8]
 801207e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012080:	2300      	movs	r3, #0
 8012082:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	2b01      	cmp	r3, #1
 801208e:	d904      	bls.n	801209a <remove_chain+0x26>
 8012090:	69bb      	ldr	r3, [r7, #24]
 8012092:	699b      	ldr	r3, [r3, #24]
 8012094:	68ba      	ldr	r2, [r7, #8]
 8012096:	429a      	cmp	r2, r3
 8012098:	d301      	bcc.n	801209e <remove_chain+0x2a>
 801209a:	2302      	movs	r3, #2
 801209c:	e04b      	b.n	8012136 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d00c      	beq.n	80120be <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80120a4:	f04f 32ff 	mov.w	r2, #4294967295
 80120a8:	6879      	ldr	r1, [r7, #4]
 80120aa:	69b8      	ldr	r0, [r7, #24]
 80120ac:	f7ff fecb 	bl	8011e46 <put_fat>
 80120b0:	4603      	mov	r3, r0
 80120b2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80120b4:	7ffb      	ldrb	r3, [r7, #31]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d001      	beq.n	80120be <remove_chain+0x4a>
 80120ba:	7ffb      	ldrb	r3, [r7, #31]
 80120bc:	e03b      	b.n	8012136 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80120be:	68b9      	ldr	r1, [r7, #8]
 80120c0:	68f8      	ldr	r0, [r7, #12]
 80120c2:	f7ff fdf0 	bl	8011ca6 <get_fat>
 80120c6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d031      	beq.n	8012132 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	d101      	bne.n	80120d8 <remove_chain+0x64>
 80120d4:	2302      	movs	r3, #2
 80120d6:	e02e      	b.n	8012136 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120de:	d101      	bne.n	80120e4 <remove_chain+0x70>
 80120e0:	2301      	movs	r3, #1
 80120e2:	e028      	b.n	8012136 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80120e4:	2200      	movs	r2, #0
 80120e6:	68b9      	ldr	r1, [r7, #8]
 80120e8:	69b8      	ldr	r0, [r7, #24]
 80120ea:	f7ff feac 	bl	8011e46 <put_fat>
 80120ee:	4603      	mov	r3, r0
 80120f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80120f2:	7ffb      	ldrb	r3, [r7, #31]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d001      	beq.n	80120fc <remove_chain+0x88>
 80120f8:	7ffb      	ldrb	r3, [r7, #31]
 80120fa:	e01c      	b.n	8012136 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80120fc:	69bb      	ldr	r3, [r7, #24]
 80120fe:	695a      	ldr	r2, [r3, #20]
 8012100:	69bb      	ldr	r3, [r7, #24]
 8012102:	699b      	ldr	r3, [r3, #24]
 8012104:	3b02      	subs	r3, #2
 8012106:	429a      	cmp	r2, r3
 8012108:	d20b      	bcs.n	8012122 <remove_chain+0xae>
			fs->free_clst++;
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	695b      	ldr	r3, [r3, #20]
 801210e:	1c5a      	adds	r2, r3, #1
 8012110:	69bb      	ldr	r3, [r7, #24]
 8012112:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	791b      	ldrb	r3, [r3, #4]
 8012118:	f043 0301 	orr.w	r3, r3, #1
 801211c:	b2da      	uxtb	r2, r3
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012126:	69bb      	ldr	r3, [r7, #24]
 8012128:	699b      	ldr	r3, [r3, #24]
 801212a:	68ba      	ldr	r2, [r7, #8]
 801212c:	429a      	cmp	r2, r3
 801212e:	d3c6      	bcc.n	80120be <remove_chain+0x4a>
 8012130:	e000      	b.n	8012134 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012132:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012134:	2300      	movs	r3, #0
}
 8012136:	4618      	mov	r0, r3
 8012138:	3720      	adds	r7, #32
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}

0801213e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801213e:	b580      	push	{r7, lr}
 8012140:	b088      	sub	sp, #32
 8012142:	af00      	add	r7, sp, #0
 8012144:	6078      	str	r0, [r7, #4]
 8012146:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d10d      	bne.n	8012170 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	691b      	ldr	r3, [r3, #16]
 8012158:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801215a:	69bb      	ldr	r3, [r7, #24]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d004      	beq.n	801216a <create_chain+0x2c>
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	699b      	ldr	r3, [r3, #24]
 8012164:	69ba      	ldr	r2, [r7, #24]
 8012166:	429a      	cmp	r2, r3
 8012168:	d31b      	bcc.n	80121a2 <create_chain+0x64>
 801216a:	2301      	movs	r3, #1
 801216c:	61bb      	str	r3, [r7, #24]
 801216e:	e018      	b.n	80121a2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012170:	6839      	ldr	r1, [r7, #0]
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f7ff fd97 	bl	8011ca6 <get_fat>
 8012178:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2b01      	cmp	r3, #1
 801217e:	d801      	bhi.n	8012184 <create_chain+0x46>
 8012180:	2301      	movs	r3, #1
 8012182:	e070      	b.n	8012266 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801218a:	d101      	bne.n	8012190 <create_chain+0x52>
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	e06a      	b.n	8012266 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	699b      	ldr	r3, [r3, #24]
 8012194:	68fa      	ldr	r2, [r7, #12]
 8012196:	429a      	cmp	r2, r3
 8012198:	d201      	bcs.n	801219e <create_chain+0x60>
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	e063      	b.n	8012266 <create_chain+0x128>
		scl = clst;
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80121a2:	69bb      	ldr	r3, [r7, #24]
 80121a4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80121a6:	69fb      	ldr	r3, [r7, #28]
 80121a8:	3301      	adds	r3, #1
 80121aa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80121ac:	693b      	ldr	r3, [r7, #16]
 80121ae:	699b      	ldr	r3, [r3, #24]
 80121b0:	69fa      	ldr	r2, [r7, #28]
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d307      	bcc.n	80121c6 <create_chain+0x88>
				ncl = 2;
 80121b6:	2302      	movs	r3, #2
 80121b8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80121ba:	69fa      	ldr	r2, [r7, #28]
 80121bc:	69bb      	ldr	r3, [r7, #24]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d901      	bls.n	80121c6 <create_chain+0x88>
 80121c2:	2300      	movs	r3, #0
 80121c4:	e04f      	b.n	8012266 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80121c6:	69f9      	ldr	r1, [r7, #28]
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f7ff fd6c 	bl	8011ca6 <get_fat>
 80121ce:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d00e      	beq.n	80121f4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2b01      	cmp	r3, #1
 80121da:	d003      	beq.n	80121e4 <create_chain+0xa6>
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121e2:	d101      	bne.n	80121e8 <create_chain+0xaa>
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	e03e      	b.n	8012266 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80121e8:	69fa      	ldr	r2, [r7, #28]
 80121ea:	69bb      	ldr	r3, [r7, #24]
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d1da      	bne.n	80121a6 <create_chain+0x68>
 80121f0:	2300      	movs	r3, #0
 80121f2:	e038      	b.n	8012266 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80121f4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80121f6:	f04f 32ff 	mov.w	r2, #4294967295
 80121fa:	69f9      	ldr	r1, [r7, #28]
 80121fc:	6938      	ldr	r0, [r7, #16]
 80121fe:	f7ff fe22 	bl	8011e46 <put_fat>
 8012202:	4603      	mov	r3, r0
 8012204:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012206:	7dfb      	ldrb	r3, [r7, #23]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d109      	bne.n	8012220 <create_chain+0xe2>
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d006      	beq.n	8012220 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012212:	69fa      	ldr	r2, [r7, #28]
 8012214:	6839      	ldr	r1, [r7, #0]
 8012216:	6938      	ldr	r0, [r7, #16]
 8012218:	f7ff fe15 	bl	8011e46 <put_fat>
 801221c:	4603      	mov	r3, r0
 801221e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012220:	7dfb      	ldrb	r3, [r7, #23]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d116      	bne.n	8012254 <create_chain+0x116>
		fs->last_clst = ncl;
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	69fa      	ldr	r2, [r7, #28]
 801222a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	695a      	ldr	r2, [r3, #20]
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	699b      	ldr	r3, [r3, #24]
 8012234:	3b02      	subs	r3, #2
 8012236:	429a      	cmp	r2, r3
 8012238:	d804      	bhi.n	8012244 <create_chain+0x106>
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	695b      	ldr	r3, [r3, #20]
 801223e:	1e5a      	subs	r2, r3, #1
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	791b      	ldrb	r3, [r3, #4]
 8012248:	f043 0301 	orr.w	r3, r3, #1
 801224c:	b2da      	uxtb	r2, r3
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	711a      	strb	r2, [r3, #4]
 8012252:	e007      	b.n	8012264 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012254:	7dfb      	ldrb	r3, [r7, #23]
 8012256:	2b01      	cmp	r3, #1
 8012258:	d102      	bne.n	8012260 <create_chain+0x122>
 801225a:	f04f 33ff 	mov.w	r3, #4294967295
 801225e:	e000      	b.n	8012262 <create_chain+0x124>
 8012260:	2301      	movs	r3, #1
 8012262:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012264:	69fb      	ldr	r3, [r7, #28]
}
 8012266:	4618      	mov	r0, r3
 8012268:	3720      	adds	r7, #32
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}

0801226e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801226e:	b480      	push	{r7}
 8012270:	b087      	sub	sp, #28
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]
 8012276:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012282:	3304      	adds	r3, #4
 8012284:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	899b      	ldrh	r3, [r3, #12]
 801228a:	461a      	mov	r2, r3
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012292:	68fa      	ldr	r2, [r7, #12]
 8012294:	8952      	ldrh	r2, [r2, #10]
 8012296:	fbb3 f3f2 	udiv	r3, r3, r2
 801229a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	1d1a      	adds	r2, r3, #4
 80122a0:	613a      	str	r2, [r7, #16]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d101      	bne.n	80122b0 <clmt_clust+0x42>
 80122ac:	2300      	movs	r3, #0
 80122ae:	e010      	b.n	80122d2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80122b0:	697a      	ldr	r2, [r7, #20]
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d307      	bcc.n	80122c8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80122b8:	697a      	ldr	r2, [r7, #20]
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	1ad3      	subs	r3, r2, r3
 80122be:	617b      	str	r3, [r7, #20]
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	3304      	adds	r3, #4
 80122c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80122c6:	e7e9      	b.n	801229c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80122c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	681a      	ldr	r2, [r3, #0]
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	4413      	add	r3, r2
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	371c      	adds	r7, #28
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr

080122de <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80122de:	b580      	push	{r7, lr}
 80122e0:	b086      	sub	sp, #24
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
 80122e6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80122f4:	d204      	bcs.n	8012300 <dir_sdi+0x22>
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	f003 031f 	and.w	r3, r3, #31
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d001      	beq.n	8012304 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012300:	2302      	movs	r3, #2
 8012302:	e071      	b.n	80123e8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	683a      	ldr	r2, [r7, #0]
 8012308:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	689b      	ldr	r3, [r3, #8]
 801230e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d106      	bne.n	8012324 <dir_sdi+0x46>
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	2b02      	cmp	r3, #2
 801231c:	d902      	bls.n	8012324 <dir_sdi+0x46>
		clst = fs->dirbase;
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012322:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d10c      	bne.n	8012344 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	095b      	lsrs	r3, r3, #5
 801232e:	693a      	ldr	r2, [r7, #16]
 8012330:	8912      	ldrh	r2, [r2, #8]
 8012332:	4293      	cmp	r3, r2
 8012334:	d301      	bcc.n	801233a <dir_sdi+0x5c>
 8012336:	2302      	movs	r3, #2
 8012338:	e056      	b.n	80123e8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	61da      	str	r2, [r3, #28]
 8012342:	e02d      	b.n	80123a0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	895b      	ldrh	r3, [r3, #10]
 8012348:	461a      	mov	r2, r3
 801234a:	693b      	ldr	r3, [r7, #16]
 801234c:	899b      	ldrh	r3, [r3, #12]
 801234e:	fb03 f302 	mul.w	r3, r3, r2
 8012352:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012354:	e019      	b.n	801238a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6979      	ldr	r1, [r7, #20]
 801235a:	4618      	mov	r0, r3
 801235c:	f7ff fca3 	bl	8011ca6 <get_fat>
 8012360:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012368:	d101      	bne.n	801236e <dir_sdi+0x90>
 801236a:	2301      	movs	r3, #1
 801236c:	e03c      	b.n	80123e8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	2b01      	cmp	r3, #1
 8012372:	d904      	bls.n	801237e <dir_sdi+0xa0>
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	699b      	ldr	r3, [r3, #24]
 8012378:	697a      	ldr	r2, [r7, #20]
 801237a:	429a      	cmp	r2, r3
 801237c:	d301      	bcc.n	8012382 <dir_sdi+0xa4>
 801237e:	2302      	movs	r3, #2
 8012380:	e032      	b.n	80123e8 <dir_sdi+0x10a>
			ofs -= csz;
 8012382:	683a      	ldr	r2, [r7, #0]
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801238a:	683a      	ldr	r2, [r7, #0]
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	429a      	cmp	r2, r3
 8012390:	d2e1      	bcs.n	8012356 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012392:	6979      	ldr	r1, [r7, #20]
 8012394:	6938      	ldr	r0, [r7, #16]
 8012396:	f7ff fc67 	bl	8011c68 <clust2sect>
 801239a:	4602      	mov	r2, r0
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	697a      	ldr	r2, [r7, #20]
 80123a4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	69db      	ldr	r3, [r3, #28]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d101      	bne.n	80123b2 <dir_sdi+0xd4>
 80123ae:	2302      	movs	r3, #2
 80123b0:	e01a      	b.n	80123e8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	69da      	ldr	r2, [r3, #28]
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	899b      	ldrh	r3, [r3, #12]
 80123ba:	4619      	mov	r1, r3
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	fbb3 f3f1 	udiv	r3, r3, r1
 80123c2:	441a      	add	r2, r3
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80123c8:	693b      	ldr	r3, [r7, #16]
 80123ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	899b      	ldrh	r3, [r3, #12]
 80123d2:	461a      	mov	r2, r3
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80123da:	fb02 f200 	mul.w	r2, r2, r0
 80123de:	1a9b      	subs	r3, r3, r2
 80123e0:	18ca      	adds	r2, r1, r3
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80123e6:	2300      	movs	r3, #0
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3718      	adds	r7, #24
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b086      	sub	sp, #24
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	695b      	ldr	r3, [r3, #20]
 8012404:	3320      	adds	r3, #32
 8012406:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	69db      	ldr	r3, [r3, #28]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d003      	beq.n	8012418 <dir_next+0x28>
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012416:	d301      	bcc.n	801241c <dir_next+0x2c>
 8012418:	2304      	movs	r3, #4
 801241a:	e0bb      	b.n	8012594 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	899b      	ldrh	r3, [r3, #12]
 8012420:	461a      	mov	r2, r3
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	fbb3 f1f2 	udiv	r1, r3, r2
 8012428:	fb02 f201 	mul.w	r2, r2, r1
 801242c:	1a9b      	subs	r3, r3, r2
 801242e:	2b00      	cmp	r3, #0
 8012430:	f040 809d 	bne.w	801256e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	69db      	ldr	r3, [r3, #28]
 8012438:	1c5a      	adds	r2, r3, #1
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	699b      	ldr	r3, [r3, #24]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d10b      	bne.n	801245e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	095b      	lsrs	r3, r3, #5
 801244a:	68fa      	ldr	r2, [r7, #12]
 801244c:	8912      	ldrh	r2, [r2, #8]
 801244e:	4293      	cmp	r3, r2
 8012450:	f0c0 808d 	bcc.w	801256e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2200      	movs	r2, #0
 8012458:	61da      	str	r2, [r3, #28]
 801245a:	2304      	movs	r3, #4
 801245c:	e09a      	b.n	8012594 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	899b      	ldrh	r3, [r3, #12]
 8012462:	461a      	mov	r2, r3
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	fbb3 f3f2 	udiv	r3, r3, r2
 801246a:	68fa      	ldr	r2, [r7, #12]
 801246c:	8952      	ldrh	r2, [r2, #10]
 801246e:	3a01      	subs	r2, #1
 8012470:	4013      	ands	r3, r2
 8012472:	2b00      	cmp	r3, #0
 8012474:	d17b      	bne.n	801256e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012476:	687a      	ldr	r2, [r7, #4]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	699b      	ldr	r3, [r3, #24]
 801247c:	4619      	mov	r1, r3
 801247e:	4610      	mov	r0, r2
 8012480:	f7ff fc11 	bl	8011ca6 <get_fat>
 8012484:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	2b01      	cmp	r3, #1
 801248a:	d801      	bhi.n	8012490 <dir_next+0xa0>
 801248c:	2302      	movs	r3, #2
 801248e:	e081      	b.n	8012594 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012496:	d101      	bne.n	801249c <dir_next+0xac>
 8012498:	2301      	movs	r3, #1
 801249a:	e07b      	b.n	8012594 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	699b      	ldr	r3, [r3, #24]
 80124a0:	697a      	ldr	r2, [r7, #20]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d359      	bcc.n	801255a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d104      	bne.n	80124b6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2200      	movs	r2, #0
 80124b0:	61da      	str	r2, [r3, #28]
 80124b2:	2304      	movs	r3, #4
 80124b4:	e06e      	b.n	8012594 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	699b      	ldr	r3, [r3, #24]
 80124bc:	4619      	mov	r1, r3
 80124be:	4610      	mov	r0, r2
 80124c0:	f7ff fe3d 	bl	801213e <create_chain>
 80124c4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d101      	bne.n	80124d0 <dir_next+0xe0>
 80124cc:	2307      	movs	r3, #7
 80124ce:	e061      	b.n	8012594 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	2b01      	cmp	r3, #1
 80124d4:	d101      	bne.n	80124da <dir_next+0xea>
 80124d6:	2302      	movs	r3, #2
 80124d8:	e05c      	b.n	8012594 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124e0:	d101      	bne.n	80124e6 <dir_next+0xf6>
 80124e2:	2301      	movs	r3, #1
 80124e4:	e056      	b.n	8012594 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80124e6:	68f8      	ldr	r0, [r7, #12]
 80124e8:	f7ff fadc 	bl	8011aa4 <sync_window>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d001      	beq.n	80124f6 <dir_next+0x106>
 80124f2:	2301      	movs	r3, #1
 80124f4:	e04e      	b.n	8012594 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	899b      	ldrh	r3, [r3, #12]
 8012500:	461a      	mov	r2, r3
 8012502:	2100      	movs	r1, #0
 8012504:	f7ff f905 	bl	8011712 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012508:	2300      	movs	r3, #0
 801250a:	613b      	str	r3, [r7, #16]
 801250c:	6979      	ldr	r1, [r7, #20]
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	f7ff fbaa 	bl	8011c68 <clust2sect>
 8012514:	4602      	mov	r2, r0
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	631a      	str	r2, [r3, #48]	; 0x30
 801251a:	e012      	b.n	8012542 <dir_next+0x152>
						fs->wflag = 1;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	2201      	movs	r2, #1
 8012520:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	f7ff fabe 	bl	8011aa4 <sync_window>
 8012528:	4603      	mov	r3, r0
 801252a:	2b00      	cmp	r3, #0
 801252c:	d001      	beq.n	8012532 <dir_next+0x142>
 801252e:	2301      	movs	r3, #1
 8012530:	e030      	b.n	8012594 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	3301      	adds	r3, #1
 8012536:	613b      	str	r3, [r7, #16]
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801253c:	1c5a      	adds	r2, r3, #1
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	631a      	str	r2, [r3, #48]	; 0x30
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	895b      	ldrh	r3, [r3, #10]
 8012546:	461a      	mov	r2, r3
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	4293      	cmp	r3, r2
 801254c:	d3e6      	bcc.n	801251c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	1ad2      	subs	r2, r2, r3
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	697a      	ldr	r2, [r7, #20]
 801255e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012560:	6979      	ldr	r1, [r7, #20]
 8012562:	68f8      	ldr	r0, [r7, #12]
 8012564:	f7ff fb80 	bl	8011c68 <clust2sect>
 8012568:	4602      	mov	r2, r0
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	68ba      	ldr	r2, [r7, #8]
 8012572:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	899b      	ldrh	r3, [r3, #12]
 801257e:	461a      	mov	r2, r3
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	fbb3 f0f2 	udiv	r0, r3, r2
 8012586:	fb02 f200 	mul.w	r2, r2, r0
 801258a:	1a9b      	subs	r3, r3, r2
 801258c:	18ca      	adds	r2, r1, r3
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012592:	2300      	movs	r3, #0
}
 8012594:	4618      	mov	r0, r3
 8012596:	3718      	adds	r7, #24
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b086      	sub	sp, #24
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80125ac:	2100      	movs	r1, #0
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f7ff fe95 	bl	80122de <dir_sdi>
 80125b4:	4603      	mov	r3, r0
 80125b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80125b8:	7dfb      	ldrb	r3, [r7, #23]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d12b      	bne.n	8012616 <dir_alloc+0x7a>
		n = 0;
 80125be:	2300      	movs	r3, #0
 80125c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	69db      	ldr	r3, [r3, #28]
 80125c6:	4619      	mov	r1, r3
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f7ff faaf 	bl	8011b2c <move_window>
 80125ce:	4603      	mov	r3, r0
 80125d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80125d2:	7dfb      	ldrb	r3, [r7, #23]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d11d      	bne.n	8012614 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	6a1b      	ldr	r3, [r3, #32]
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	2be5      	cmp	r3, #229	; 0xe5
 80125e0:	d004      	beq.n	80125ec <dir_alloc+0x50>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	6a1b      	ldr	r3, [r3, #32]
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d107      	bne.n	80125fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	3301      	adds	r3, #1
 80125f0:	613b      	str	r3, [r7, #16]
 80125f2:	693a      	ldr	r2, [r7, #16]
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d102      	bne.n	8012600 <dir_alloc+0x64>
 80125fa:	e00c      	b.n	8012616 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80125fc:	2300      	movs	r3, #0
 80125fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012600:	2101      	movs	r1, #1
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f7ff fef4 	bl	80123f0 <dir_next>
 8012608:	4603      	mov	r3, r0
 801260a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801260c:	7dfb      	ldrb	r3, [r7, #23]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d0d7      	beq.n	80125c2 <dir_alloc+0x26>
 8012612:	e000      	b.n	8012616 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012614:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012616:	7dfb      	ldrb	r3, [r7, #23]
 8012618:	2b04      	cmp	r3, #4
 801261a:	d101      	bne.n	8012620 <dir_alloc+0x84>
 801261c:	2307      	movs	r3, #7
 801261e:	75fb      	strb	r3, [r7, #23]
	return res;
 8012620:	7dfb      	ldrb	r3, [r7, #23]
}
 8012622:	4618      	mov	r0, r3
 8012624:	3718      	adds	r7, #24
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}

0801262a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801262a:	b580      	push	{r7, lr}
 801262c:	b084      	sub	sp, #16
 801262e:	af00      	add	r7, sp, #0
 8012630:	6078      	str	r0, [r7, #4]
 8012632:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	331a      	adds	r3, #26
 8012638:	4618      	mov	r0, r3
 801263a:	f7fe ffc7 	bl	80115cc <ld_word>
 801263e:	4603      	mov	r3, r0
 8012640:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	2b03      	cmp	r3, #3
 8012648:	d109      	bne.n	801265e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	3314      	adds	r3, #20
 801264e:	4618      	mov	r0, r3
 8012650:	f7fe ffbc 	bl	80115cc <ld_word>
 8012654:	4603      	mov	r3, r0
 8012656:	041b      	lsls	r3, r3, #16
 8012658:	68fa      	ldr	r2, [r7, #12]
 801265a:	4313      	orrs	r3, r2
 801265c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801265e:	68fb      	ldr	r3, [r7, #12]
}
 8012660:	4618      	mov	r0, r3
 8012662:	3710      	adds	r7, #16
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	60f8      	str	r0, [r7, #12]
 8012670:	60b9      	str	r1, [r7, #8]
 8012672:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	331a      	adds	r3, #26
 8012678:	687a      	ldr	r2, [r7, #4]
 801267a:	b292      	uxth	r2, r2
 801267c:	4611      	mov	r1, r2
 801267e:	4618      	mov	r0, r3
 8012680:	f7fe ffdf 	bl	8011642 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	2b03      	cmp	r3, #3
 801268a:	d109      	bne.n	80126a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	f103 0214 	add.w	r2, r3, #20
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	0c1b      	lsrs	r3, r3, #16
 8012696:	b29b      	uxth	r3, r3
 8012698:	4619      	mov	r1, r3
 801269a:	4610      	mov	r0, r2
 801269c:	f7fe ffd1 	bl	8011642 <st_word>
	}
}
 80126a0:	bf00      	nop
 80126a2:	3710      	adds	r7, #16
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}

080126a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b086      	sub	sp, #24
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80126b6:	2100      	movs	r1, #0
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7ff fe10 	bl	80122de <dir_sdi>
 80126be:	4603      	mov	r3, r0
 80126c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80126c2:	7dfb      	ldrb	r3, [r7, #23]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d001      	beq.n	80126cc <dir_find+0x24>
 80126c8:	7dfb      	ldrb	r3, [r7, #23]
 80126ca:	e03e      	b.n	801274a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	69db      	ldr	r3, [r3, #28]
 80126d0:	4619      	mov	r1, r3
 80126d2:	6938      	ldr	r0, [r7, #16]
 80126d4:	f7ff fa2a 	bl	8011b2c <move_window>
 80126d8:	4603      	mov	r3, r0
 80126da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80126dc:	7dfb      	ldrb	r3, [r7, #23]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d12f      	bne.n	8012742 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6a1b      	ldr	r3, [r3, #32]
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80126ea:	7bfb      	ldrb	r3, [r7, #15]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d102      	bne.n	80126f6 <dir_find+0x4e>
 80126f0:	2304      	movs	r3, #4
 80126f2:	75fb      	strb	r3, [r7, #23]
 80126f4:	e028      	b.n	8012748 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6a1b      	ldr	r3, [r3, #32]
 80126fa:	330b      	adds	r3, #11
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012702:	b2da      	uxtb	r2, r3
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6a1b      	ldr	r3, [r3, #32]
 801270c:	330b      	adds	r3, #11
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	f003 0308 	and.w	r3, r3, #8
 8012714:	2b00      	cmp	r3, #0
 8012716:	d10a      	bne.n	801272e <dir_find+0x86>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6a18      	ldr	r0, [r3, #32]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	3324      	adds	r3, #36	; 0x24
 8012720:	220b      	movs	r2, #11
 8012722:	4619      	mov	r1, r3
 8012724:	f7ff f80f 	bl	8011746 <mem_cmp>
 8012728:	4603      	mov	r3, r0
 801272a:	2b00      	cmp	r3, #0
 801272c:	d00b      	beq.n	8012746 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801272e:	2100      	movs	r1, #0
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f7ff fe5d 	bl	80123f0 <dir_next>
 8012736:	4603      	mov	r3, r0
 8012738:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801273a:	7dfb      	ldrb	r3, [r7, #23]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d0c5      	beq.n	80126cc <dir_find+0x24>
 8012740:	e002      	b.n	8012748 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012742:	bf00      	nop
 8012744:	e000      	b.n	8012748 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012746:	bf00      	nop

	return res;
 8012748:	7dfb      	ldrb	r3, [r7, #23]
}
 801274a:	4618      	mov	r0, r3
 801274c:	3718      	adds	r7, #24
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}

08012752 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012752:	b580      	push	{r7, lr}
 8012754:	b084      	sub	sp, #16
 8012756:	af00      	add	r7, sp, #0
 8012758:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012760:	2101      	movs	r1, #1
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f7ff ff1a 	bl	801259c <dir_alloc>
 8012768:	4603      	mov	r3, r0
 801276a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801276c:	7bfb      	ldrb	r3, [r7, #15]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d11c      	bne.n	80127ac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	69db      	ldr	r3, [r3, #28]
 8012776:	4619      	mov	r1, r3
 8012778:	68b8      	ldr	r0, [r7, #8]
 801277a:	f7ff f9d7 	bl	8011b2c <move_window>
 801277e:	4603      	mov	r3, r0
 8012780:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012782:	7bfb      	ldrb	r3, [r7, #15]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d111      	bne.n	80127ac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6a1b      	ldr	r3, [r3, #32]
 801278c:	2220      	movs	r2, #32
 801278e:	2100      	movs	r1, #0
 8012790:	4618      	mov	r0, r3
 8012792:	f7fe ffbe 	bl	8011712 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6a18      	ldr	r0, [r3, #32]
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	3324      	adds	r3, #36	; 0x24
 801279e:	220b      	movs	r2, #11
 80127a0:	4619      	mov	r1, r3
 80127a2:	f7fe ff95 	bl	80116d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	2201      	movs	r2, #1
 80127aa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80127ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
	...

080127b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b088      	sub	sp, #32
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	60fb      	str	r3, [r7, #12]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	3324      	adds	r3, #36	; 0x24
 80127cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80127ce:	220b      	movs	r2, #11
 80127d0:	2120      	movs	r1, #32
 80127d2:	68b8      	ldr	r0, [r7, #8]
 80127d4:	f7fe ff9d 	bl	8011712 <mem_set>
	si = i = 0; ni = 8;
 80127d8:	2300      	movs	r3, #0
 80127da:	613b      	str	r3, [r7, #16]
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	617b      	str	r3, [r7, #20]
 80127e0:	2308      	movs	r3, #8
 80127e2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	1c5a      	adds	r2, r3, #1
 80127e8:	617a      	str	r2, [r7, #20]
 80127ea:	68fa      	ldr	r2, [r7, #12]
 80127ec:	4413      	add	r3, r2
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80127f2:	7ffb      	ldrb	r3, [r7, #31]
 80127f4:	2b20      	cmp	r3, #32
 80127f6:	d94e      	bls.n	8012896 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80127f8:	7ffb      	ldrb	r3, [r7, #31]
 80127fa:	2b2f      	cmp	r3, #47	; 0x2f
 80127fc:	d006      	beq.n	801280c <create_name+0x54>
 80127fe:	7ffb      	ldrb	r3, [r7, #31]
 8012800:	2b5c      	cmp	r3, #92	; 0x5c
 8012802:	d110      	bne.n	8012826 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012804:	e002      	b.n	801280c <create_name+0x54>
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	3301      	adds	r3, #1
 801280a:	617b      	str	r3, [r7, #20]
 801280c:	68fa      	ldr	r2, [r7, #12]
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	4413      	add	r3, r2
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	2b2f      	cmp	r3, #47	; 0x2f
 8012816:	d0f6      	beq.n	8012806 <create_name+0x4e>
 8012818:	68fa      	ldr	r2, [r7, #12]
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	4413      	add	r3, r2
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	2b5c      	cmp	r3, #92	; 0x5c
 8012822:	d0f0      	beq.n	8012806 <create_name+0x4e>
			break;
 8012824:	e038      	b.n	8012898 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012826:	7ffb      	ldrb	r3, [r7, #31]
 8012828:	2b2e      	cmp	r3, #46	; 0x2e
 801282a:	d003      	beq.n	8012834 <create_name+0x7c>
 801282c:	693a      	ldr	r2, [r7, #16]
 801282e:	69bb      	ldr	r3, [r7, #24]
 8012830:	429a      	cmp	r2, r3
 8012832:	d30c      	bcc.n	801284e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	2b0b      	cmp	r3, #11
 8012838:	d002      	beq.n	8012840 <create_name+0x88>
 801283a:	7ffb      	ldrb	r3, [r7, #31]
 801283c:	2b2e      	cmp	r3, #46	; 0x2e
 801283e:	d001      	beq.n	8012844 <create_name+0x8c>
 8012840:	2306      	movs	r3, #6
 8012842:	e044      	b.n	80128ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012844:	2308      	movs	r3, #8
 8012846:	613b      	str	r3, [r7, #16]
 8012848:	230b      	movs	r3, #11
 801284a:	61bb      	str	r3, [r7, #24]
			continue;
 801284c:	e022      	b.n	8012894 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801284e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012852:	2b00      	cmp	r3, #0
 8012854:	da04      	bge.n	8012860 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012856:	7ffb      	ldrb	r3, [r7, #31]
 8012858:	3b80      	subs	r3, #128	; 0x80
 801285a:	4a1f      	ldr	r2, [pc, #124]	; (80128d8 <create_name+0x120>)
 801285c:	5cd3      	ldrb	r3, [r2, r3]
 801285e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012860:	7ffb      	ldrb	r3, [r7, #31]
 8012862:	4619      	mov	r1, r3
 8012864:	481d      	ldr	r0, [pc, #116]	; (80128dc <create_name+0x124>)
 8012866:	f7fe ff95 	bl	8011794 <chk_chr>
 801286a:	4603      	mov	r3, r0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d001      	beq.n	8012874 <create_name+0xbc>
 8012870:	2306      	movs	r3, #6
 8012872:	e02c      	b.n	80128ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012874:	7ffb      	ldrb	r3, [r7, #31]
 8012876:	2b60      	cmp	r3, #96	; 0x60
 8012878:	d905      	bls.n	8012886 <create_name+0xce>
 801287a:	7ffb      	ldrb	r3, [r7, #31]
 801287c:	2b7a      	cmp	r3, #122	; 0x7a
 801287e:	d802      	bhi.n	8012886 <create_name+0xce>
 8012880:	7ffb      	ldrb	r3, [r7, #31]
 8012882:	3b20      	subs	r3, #32
 8012884:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	1c5a      	adds	r2, r3, #1
 801288a:	613a      	str	r2, [r7, #16]
 801288c:	68ba      	ldr	r2, [r7, #8]
 801288e:	4413      	add	r3, r2
 8012890:	7ffa      	ldrb	r2, [r7, #31]
 8012892:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012894:	e7a6      	b.n	80127e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012896:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012898:	68fa      	ldr	r2, [r7, #12]
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	441a      	add	r2, r3
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d101      	bne.n	80128ac <create_name+0xf4>
 80128a8:	2306      	movs	r3, #6
 80128aa:	e010      	b.n	80128ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	2be5      	cmp	r3, #229	; 0xe5
 80128b2:	d102      	bne.n	80128ba <create_name+0x102>
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	2205      	movs	r2, #5
 80128b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80128ba:	7ffb      	ldrb	r3, [r7, #31]
 80128bc:	2b20      	cmp	r3, #32
 80128be:	d801      	bhi.n	80128c4 <create_name+0x10c>
 80128c0:	2204      	movs	r2, #4
 80128c2:	e000      	b.n	80128c6 <create_name+0x10e>
 80128c4:	2200      	movs	r2, #0
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	330b      	adds	r3, #11
 80128ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80128cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3720      	adds	r7, #32
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	0801e384 	.word	0x0801e384
 80128dc:	0801df70 	.word	0x0801df70

080128e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b086      	sub	sp, #24
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80128ee:	693b      	ldr	r3, [r7, #16]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80128f4:	e002      	b.n	80128fc <follow_path+0x1c>
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	3301      	adds	r3, #1
 80128fa:	603b      	str	r3, [r7, #0]
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	2b2f      	cmp	r3, #47	; 0x2f
 8012902:	d0f8      	beq.n	80128f6 <follow_path+0x16>
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	2b5c      	cmp	r3, #92	; 0x5c
 801290a:	d0f4      	beq.n	80128f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	2200      	movs	r2, #0
 8012910:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	2b1f      	cmp	r3, #31
 8012918:	d80a      	bhi.n	8012930 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2280      	movs	r2, #128	; 0x80
 801291e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012922:	2100      	movs	r1, #0
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f7ff fcda 	bl	80122de <dir_sdi>
 801292a:	4603      	mov	r3, r0
 801292c:	75fb      	strb	r3, [r7, #23]
 801292e:	e048      	b.n	80129c2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012930:	463b      	mov	r3, r7
 8012932:	4619      	mov	r1, r3
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7ff ff3f 	bl	80127b8 <create_name>
 801293a:	4603      	mov	r3, r0
 801293c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801293e:	7dfb      	ldrb	r3, [r7, #23]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d139      	bne.n	80129b8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f7ff feaf 	bl	80126a8 <dir_find>
 801294a:	4603      	mov	r3, r0
 801294c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012954:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012956:	7dfb      	ldrb	r3, [r7, #23]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d00a      	beq.n	8012972 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801295c:	7dfb      	ldrb	r3, [r7, #23]
 801295e:	2b04      	cmp	r3, #4
 8012960:	d12c      	bne.n	80129bc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012962:	7afb      	ldrb	r3, [r7, #11]
 8012964:	f003 0304 	and.w	r3, r3, #4
 8012968:	2b00      	cmp	r3, #0
 801296a:	d127      	bne.n	80129bc <follow_path+0xdc>
 801296c:	2305      	movs	r3, #5
 801296e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012970:	e024      	b.n	80129bc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012972:	7afb      	ldrb	r3, [r7, #11]
 8012974:	f003 0304 	and.w	r3, r3, #4
 8012978:	2b00      	cmp	r3, #0
 801297a:	d121      	bne.n	80129c0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	799b      	ldrb	r3, [r3, #6]
 8012980:	f003 0310 	and.w	r3, r3, #16
 8012984:	2b00      	cmp	r3, #0
 8012986:	d102      	bne.n	801298e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012988:	2305      	movs	r3, #5
 801298a:	75fb      	strb	r3, [r7, #23]
 801298c:	e019      	b.n	80129c2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	695b      	ldr	r3, [r3, #20]
 8012998:	68fa      	ldr	r2, [r7, #12]
 801299a:	8992      	ldrh	r2, [r2, #12]
 801299c:	fbb3 f0f2 	udiv	r0, r3, r2
 80129a0:	fb02 f200 	mul.w	r2, r2, r0
 80129a4:	1a9b      	subs	r3, r3, r2
 80129a6:	440b      	add	r3, r1
 80129a8:	4619      	mov	r1, r3
 80129aa:	68f8      	ldr	r0, [r7, #12]
 80129ac:	f7ff fe3d 	bl	801262a <ld_clust>
 80129b0:	4602      	mov	r2, r0
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80129b6:	e7bb      	b.n	8012930 <follow_path+0x50>
			if (res != FR_OK) break;
 80129b8:	bf00      	nop
 80129ba:	e002      	b.n	80129c2 <follow_path+0xe2>
				break;
 80129bc:	bf00      	nop
 80129be:	e000      	b.n	80129c2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80129c0:	bf00      	nop
			}
		}
	}

	return res;
 80129c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3718      	adds	r7, #24
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}

080129cc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80129cc:	b480      	push	{r7}
 80129ce:	b087      	sub	sp, #28
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80129d4:	f04f 33ff 	mov.w	r3, #4294967295
 80129d8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d031      	beq.n	8012a46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	617b      	str	r3, [r7, #20]
 80129e8:	e002      	b.n	80129f0 <get_ldnumber+0x24>
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	3301      	adds	r3, #1
 80129ee:	617b      	str	r3, [r7, #20]
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	2b20      	cmp	r3, #32
 80129f6:	d903      	bls.n	8012a00 <get_ldnumber+0x34>
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	2b3a      	cmp	r3, #58	; 0x3a
 80129fe:	d1f4      	bne.n	80129ea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	2b3a      	cmp	r3, #58	; 0x3a
 8012a06:	d11c      	bne.n	8012a42 <get_ldnumber+0x76>
			tp = *path;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	1c5a      	adds	r2, r3, #1
 8012a12:	60fa      	str	r2, [r7, #12]
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	3b30      	subs	r3, #48	; 0x30
 8012a18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	2b09      	cmp	r3, #9
 8012a1e:	d80e      	bhi.n	8012a3e <get_ldnumber+0x72>
 8012a20:	68fa      	ldr	r2, [r7, #12]
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d10a      	bne.n	8012a3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d107      	bne.n	8012a3e <get_ldnumber+0x72>
					vol = (int)i;
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	3301      	adds	r3, #1
 8012a36:	617b      	str	r3, [r7, #20]
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	697a      	ldr	r2, [r7, #20]
 8012a3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	e002      	b.n	8012a48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012a42:	2300      	movs	r3, #0
 8012a44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012a46:	693b      	ldr	r3, [r7, #16]
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	371c      	adds	r7, #28
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a52:	4770      	bx	lr

08012a54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2200      	movs	r2, #0
 8012a62:	70da      	strb	r2, [r3, #3]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f04f 32ff 	mov.w	r2, #4294967295
 8012a6a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012a6c:	6839      	ldr	r1, [r7, #0]
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7ff f85c 	bl	8011b2c <move_window>
 8012a74:	4603      	mov	r3, r0
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d001      	beq.n	8012a7e <check_fs+0x2a>
 8012a7a:	2304      	movs	r3, #4
 8012a7c:	e038      	b.n	8012af0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	3334      	adds	r3, #52	; 0x34
 8012a82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fe fda0 	bl	80115cc <ld_word>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	461a      	mov	r2, r3
 8012a90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d001      	beq.n	8012a9c <check_fs+0x48>
 8012a98:	2303      	movs	r3, #3
 8012a9a:	e029      	b.n	8012af0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012aa2:	2be9      	cmp	r3, #233	; 0xe9
 8012aa4:	d009      	beq.n	8012aba <check_fs+0x66>
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012aac:	2beb      	cmp	r3, #235	; 0xeb
 8012aae:	d11e      	bne.n	8012aee <check_fs+0x9a>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012ab6:	2b90      	cmp	r3, #144	; 0x90
 8012ab8:	d119      	bne.n	8012aee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	3334      	adds	r3, #52	; 0x34
 8012abe:	3336      	adds	r3, #54	; 0x36
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7fe fd9b 	bl	80115fc <ld_dword>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012acc:	4a0a      	ldr	r2, [pc, #40]	; (8012af8 <check_fs+0xa4>)
 8012ace:	4293      	cmp	r3, r2
 8012ad0:	d101      	bne.n	8012ad6 <check_fs+0x82>
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	e00c      	b.n	8012af0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	3334      	adds	r3, #52	; 0x34
 8012ada:	3352      	adds	r3, #82	; 0x52
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7fe fd8d 	bl	80115fc <ld_dword>
 8012ae2:	4602      	mov	r2, r0
 8012ae4:	4b05      	ldr	r3, [pc, #20]	; (8012afc <check_fs+0xa8>)
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d101      	bne.n	8012aee <check_fs+0x9a>
 8012aea:	2300      	movs	r3, #0
 8012aec:	e000      	b.n	8012af0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012aee:	2302      	movs	r3, #2
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	00544146 	.word	0x00544146
 8012afc:	33544146 	.word	0x33544146

08012b00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b096      	sub	sp, #88	; 0x58
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	60f8      	str	r0, [r7, #12]
 8012b08:	60b9      	str	r1, [r7, #8]
 8012b0a:	4613      	mov	r3, r2
 8012b0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	2200      	movs	r2, #0
 8012b12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012b14:	68f8      	ldr	r0, [r7, #12]
 8012b16:	f7ff ff59 	bl	80129cc <get_ldnumber>
 8012b1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	da01      	bge.n	8012b26 <find_volume+0x26>
 8012b22:	230b      	movs	r3, #11
 8012b24:	e265      	b.n	8012ff2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012b26:	4ab0      	ldr	r2, [pc, #704]	; (8012de8 <find_volume+0x2e8>)
 8012b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d101      	bne.n	8012b3a <find_volume+0x3a>
 8012b36:	230c      	movs	r3, #12
 8012b38:	e25b      	b.n	8012ff2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b3e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012b40:	79fb      	ldrb	r3, [r7, #7]
 8012b42:	f023 0301 	bic.w	r3, r3, #1
 8012b46:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d01a      	beq.n	8012b86 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b52:	785b      	ldrb	r3, [r3, #1]
 8012b54:	4618      	mov	r0, r3
 8012b56:	f7fe fc9b 	bl	8011490 <disk_status>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012b60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b64:	f003 0301 	and.w	r3, r3, #1
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d10c      	bne.n	8012b86 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012b6c:	79fb      	ldrb	r3, [r7, #7]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d007      	beq.n	8012b82 <find_volume+0x82>
 8012b72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b76:	f003 0304 	and.w	r3, r3, #4
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d001      	beq.n	8012b82 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012b7e:	230a      	movs	r3, #10
 8012b80:	e237      	b.n	8012ff2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8012b82:	2300      	movs	r3, #0
 8012b84:	e235      	b.n	8012ff2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b88:	2200      	movs	r2, #0
 8012b8a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b8e:	b2da      	uxtb	r2, r3
 8012b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b96:	785b      	ldrb	r3, [r3, #1]
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7fe fc93 	bl	80114c4 <disk_initialize>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ba8:	f003 0301 	and.w	r3, r3, #1
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d001      	beq.n	8012bb4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012bb0:	2303      	movs	r3, #3
 8012bb2:	e21e      	b.n	8012ff2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012bb4:	79fb      	ldrb	r3, [r7, #7]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d007      	beq.n	8012bca <find_volume+0xca>
 8012bba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bbe:	f003 0304 	and.w	r3, r3, #4
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d001      	beq.n	8012bca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012bc6:	230a      	movs	r3, #10
 8012bc8:	e213      	b.n	8012ff2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bcc:	7858      	ldrb	r0, [r3, #1]
 8012bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd0:	330c      	adds	r3, #12
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	2102      	movs	r1, #2
 8012bd6:	f7fe fcdb 	bl	8011590 <disk_ioctl>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d001      	beq.n	8012be4 <find_volume+0xe4>
 8012be0:	2301      	movs	r3, #1
 8012be2:	e206      	b.n	8012ff2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be6:	899b      	ldrh	r3, [r3, #12]
 8012be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012bec:	d80d      	bhi.n	8012c0a <find_volume+0x10a>
 8012bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf0:	899b      	ldrh	r3, [r3, #12]
 8012bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012bf6:	d308      	bcc.n	8012c0a <find_volume+0x10a>
 8012bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bfa:	899b      	ldrh	r3, [r3, #12]
 8012bfc:	461a      	mov	r2, r3
 8012bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c00:	899b      	ldrh	r3, [r3, #12]
 8012c02:	3b01      	subs	r3, #1
 8012c04:	4013      	ands	r3, r2
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d001      	beq.n	8012c0e <find_volume+0x10e>
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	e1f1      	b.n	8012ff2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012c12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c16:	f7ff ff1d 	bl	8012a54 <check_fs>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012c20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c24:	2b02      	cmp	r3, #2
 8012c26:	d14b      	bne.n	8012cc0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012c28:	2300      	movs	r3, #0
 8012c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8012c2c:	e01f      	b.n	8012c6e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c36:	011b      	lsls	r3, r3, #4
 8012c38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012c3c:	4413      	add	r3, r2
 8012c3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c42:	3304      	adds	r3, #4
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d006      	beq.n	8012c58 <find_volume+0x158>
 8012c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4c:	3308      	adds	r3, #8
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7fe fcd4 	bl	80115fc <ld_dword>
 8012c54:	4602      	mov	r2, r0
 8012c56:	e000      	b.n	8012c5a <find_volume+0x15a>
 8012c58:	2200      	movs	r2, #0
 8012c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c5c:	009b      	lsls	r3, r3, #2
 8012c5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012c62:	440b      	add	r3, r1
 8012c64:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	643b      	str	r3, [r7, #64]	; 0x40
 8012c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c70:	2b03      	cmp	r3, #3
 8012c72:	d9dc      	bls.n	8012c2e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012c74:	2300      	movs	r3, #0
 8012c76:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d002      	beq.n	8012c84 <find_volume+0x184>
 8012c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c80:	3b01      	subs	r3, #1
 8012c82:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c86:	009b      	lsls	r3, r3, #2
 8012c88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012c8c:	4413      	add	r3, r2
 8012c8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012c92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d005      	beq.n	8012ca6 <find_volume+0x1a6>
 8012c9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c9e:	f7ff fed9 	bl	8012a54 <check_fs>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	e000      	b.n	8012ca8 <find_volume+0x1a8>
 8012ca6:	2303      	movs	r3, #3
 8012ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012cac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d905      	bls.n	8012cc0 <find_volume+0x1c0>
 8012cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8012cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cbc:	2b03      	cmp	r3, #3
 8012cbe:	d9e1      	bls.n	8012c84 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012cc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cc4:	2b04      	cmp	r3, #4
 8012cc6:	d101      	bne.n	8012ccc <find_volume+0x1cc>
 8012cc8:	2301      	movs	r3, #1
 8012cca:	e192      	b.n	8012ff2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cd0:	2b01      	cmp	r3, #1
 8012cd2:	d901      	bls.n	8012cd8 <find_volume+0x1d8>
 8012cd4:	230d      	movs	r3, #13
 8012cd6:	e18c      	b.n	8012ff2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cda:	3334      	adds	r3, #52	; 0x34
 8012cdc:	330b      	adds	r3, #11
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7fe fc74 	bl	80115cc <ld_word>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cea:	899b      	ldrh	r3, [r3, #12]
 8012cec:	429a      	cmp	r2, r3
 8012cee:	d001      	beq.n	8012cf4 <find_volume+0x1f4>
 8012cf0:	230d      	movs	r3, #13
 8012cf2:	e17e      	b.n	8012ff2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf6:	3334      	adds	r3, #52	; 0x34
 8012cf8:	3316      	adds	r3, #22
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fe fc66 	bl	80115cc <ld_word>
 8012d00:	4603      	mov	r3, r0
 8012d02:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d106      	bne.n	8012d18 <find_volume+0x218>
 8012d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0c:	3334      	adds	r3, #52	; 0x34
 8012d0e:	3324      	adds	r3, #36	; 0x24
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7fe fc73 	bl	80115fc <ld_dword>
 8012d16:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d1c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d20:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2a:	789b      	ldrb	r3, [r3, #2]
 8012d2c:	2b01      	cmp	r3, #1
 8012d2e:	d005      	beq.n	8012d3c <find_volume+0x23c>
 8012d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d32:	789b      	ldrb	r3, [r3, #2]
 8012d34:	2b02      	cmp	r3, #2
 8012d36:	d001      	beq.n	8012d3c <find_volume+0x23c>
 8012d38:	230d      	movs	r3, #13
 8012d3a:	e15a      	b.n	8012ff2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3e:	789b      	ldrb	r3, [r3, #2]
 8012d40:	461a      	mov	r2, r3
 8012d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d44:	fb02 f303 	mul.w	r3, r2, r3
 8012d48:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012d50:	b29a      	uxth	r2, r3
 8012d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d58:	895b      	ldrh	r3, [r3, #10]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d008      	beq.n	8012d70 <find_volume+0x270>
 8012d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d60:	895b      	ldrh	r3, [r3, #10]
 8012d62:	461a      	mov	r2, r3
 8012d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d66:	895b      	ldrh	r3, [r3, #10]
 8012d68:	3b01      	subs	r3, #1
 8012d6a:	4013      	ands	r3, r2
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d001      	beq.n	8012d74 <find_volume+0x274>
 8012d70:	230d      	movs	r3, #13
 8012d72:	e13e      	b.n	8012ff2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d76:	3334      	adds	r3, #52	; 0x34
 8012d78:	3311      	adds	r3, #17
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7fe fc26 	bl	80115cc <ld_word>
 8012d80:	4603      	mov	r3, r0
 8012d82:	461a      	mov	r2, r3
 8012d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8a:	891b      	ldrh	r3, [r3, #8]
 8012d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d8e:	8992      	ldrh	r2, [r2, #12]
 8012d90:	0952      	lsrs	r2, r2, #5
 8012d92:	b292      	uxth	r2, r2
 8012d94:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d98:	fb02 f201 	mul.w	r2, r2, r1
 8012d9c:	1a9b      	subs	r3, r3, r2
 8012d9e:	b29b      	uxth	r3, r3
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d001      	beq.n	8012da8 <find_volume+0x2a8>
 8012da4:	230d      	movs	r3, #13
 8012da6:	e124      	b.n	8012ff2 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012daa:	3334      	adds	r3, #52	; 0x34
 8012dac:	3313      	adds	r3, #19
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7fe fc0c 	bl	80115cc <ld_word>
 8012db4:	4603      	mov	r3, r0
 8012db6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d106      	bne.n	8012dcc <find_volume+0x2cc>
 8012dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc0:	3334      	adds	r3, #52	; 0x34
 8012dc2:	3320      	adds	r3, #32
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7fe fc19 	bl	80115fc <ld_dword>
 8012dca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dce:	3334      	adds	r3, #52	; 0x34
 8012dd0:	330e      	adds	r3, #14
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7fe fbfa 	bl	80115cc <ld_word>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012ddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d104      	bne.n	8012dec <find_volume+0x2ec>
 8012de2:	230d      	movs	r3, #13
 8012de4:	e105      	b.n	8012ff2 <find_volume+0x4f2>
 8012de6:	bf00      	nop
 8012de8:	200009f0 	.word	0x200009f0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012dec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012df0:	4413      	add	r3, r2
 8012df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012df4:	8911      	ldrh	r1, [r2, #8]
 8012df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012df8:	8992      	ldrh	r2, [r2, #12]
 8012dfa:	0952      	lsrs	r2, r2, #5
 8012dfc:	b292      	uxth	r2, r2
 8012dfe:	fbb1 f2f2 	udiv	r2, r1, r2
 8012e02:	b292      	uxth	r2, r2
 8012e04:	4413      	add	r3, r2
 8012e06:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e0c:	429a      	cmp	r2, r3
 8012e0e:	d201      	bcs.n	8012e14 <find_volume+0x314>
 8012e10:	230d      	movs	r3, #13
 8012e12:	e0ee      	b.n	8012ff2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e18:	1ad3      	subs	r3, r2, r3
 8012e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e1c:	8952      	ldrh	r2, [r2, #10]
 8012e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e22:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d101      	bne.n	8012e2e <find_volume+0x32e>
 8012e2a:	230d      	movs	r3, #13
 8012e2c:	e0e1      	b.n	8012ff2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8012e2e:	2303      	movs	r3, #3
 8012e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e36:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d802      	bhi.n	8012e44 <find_volume+0x344>
 8012e3e:	2302      	movs	r3, #2
 8012e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e46:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012e4a:	4293      	cmp	r3, r2
 8012e4c:	d802      	bhi.n	8012e54 <find_volume+0x354>
 8012e4e:	2301      	movs	r3, #1
 8012e50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e56:	1c9a      	adds	r2, r3, #2
 8012e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e60:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012e62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e66:	441a      	add	r2, r3
 8012e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012e6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e70:	441a      	add	r2, r3
 8012e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e74:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012e76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e7a:	2b03      	cmp	r3, #3
 8012e7c:	d11e      	bne.n	8012ebc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e80:	3334      	adds	r3, #52	; 0x34
 8012e82:	332a      	adds	r3, #42	; 0x2a
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7fe fba1 	bl	80115cc <ld_word>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d001      	beq.n	8012e94 <find_volume+0x394>
 8012e90:	230d      	movs	r3, #13
 8012e92:	e0ae      	b.n	8012ff2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e96:	891b      	ldrh	r3, [r3, #8]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d001      	beq.n	8012ea0 <find_volume+0x3a0>
 8012e9c:	230d      	movs	r3, #13
 8012e9e:	e0a8      	b.n	8012ff2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea2:	3334      	adds	r3, #52	; 0x34
 8012ea4:	332c      	adds	r3, #44	; 0x2c
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7fe fba8 	bl	80115fc <ld_dword>
 8012eac:	4602      	mov	r2, r0
 8012eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb4:	699b      	ldr	r3, [r3, #24]
 8012eb6:	009b      	lsls	r3, r3, #2
 8012eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8012eba:	e01f      	b.n	8012efc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebe:	891b      	ldrh	r3, [r3, #8]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d101      	bne.n	8012ec8 <find_volume+0x3c8>
 8012ec4:	230d      	movs	r3, #13
 8012ec6:	e094      	b.n	8012ff2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ece:	441a      	add	r2, r3
 8012ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ed8:	2b02      	cmp	r3, #2
 8012eda:	d103      	bne.n	8012ee4 <find_volume+0x3e4>
 8012edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ede:	699b      	ldr	r3, [r3, #24]
 8012ee0:	005b      	lsls	r3, r3, #1
 8012ee2:	e00a      	b.n	8012efa <find_volume+0x3fa>
 8012ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee6:	699a      	ldr	r2, [r3, #24]
 8012ee8:	4613      	mov	r3, r2
 8012eea:	005b      	lsls	r3, r3, #1
 8012eec:	4413      	add	r3, r2
 8012eee:	085a      	lsrs	r2, r3, #1
 8012ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef2:	699b      	ldr	r3, [r3, #24]
 8012ef4:	f003 0301 	and.w	r3, r3, #1
 8012ef8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012efa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efe:	69da      	ldr	r2, [r3, #28]
 8012f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f02:	899b      	ldrh	r3, [r3, #12]
 8012f04:	4619      	mov	r1, r3
 8012f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f08:	440b      	add	r3, r1
 8012f0a:	3b01      	subs	r3, #1
 8012f0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012f0e:	8989      	ldrh	r1, [r1, #12]
 8012f10:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d201      	bcs.n	8012f1c <find_volume+0x41c>
 8012f18:	230d      	movs	r3, #13
 8012f1a:	e06a      	b.n	8012ff2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f22:	615a      	str	r2, [r3, #20]
 8012f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f26:	695a      	ldr	r2, [r3, #20]
 8012f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2e:	2280      	movs	r2, #128	; 0x80
 8012f30:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012f32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f36:	2b03      	cmp	r3, #3
 8012f38:	d149      	bne.n	8012fce <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3c:	3334      	adds	r3, #52	; 0x34
 8012f3e:	3330      	adds	r3, #48	; 0x30
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7fe fb43 	bl	80115cc <ld_word>
 8012f46:	4603      	mov	r3, r0
 8012f48:	2b01      	cmp	r3, #1
 8012f4a:	d140      	bne.n	8012fce <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f4e:	3301      	adds	r3, #1
 8012f50:	4619      	mov	r1, r3
 8012f52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f54:	f7fe fdea 	bl	8011b2c <move_window>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d137      	bne.n	8012fce <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f60:	2200      	movs	r2, #0
 8012f62:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f66:	3334      	adds	r3, #52	; 0x34
 8012f68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7fe fb2d 	bl	80115cc <ld_word>
 8012f72:	4603      	mov	r3, r0
 8012f74:	461a      	mov	r2, r3
 8012f76:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d127      	bne.n	8012fce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f80:	3334      	adds	r3, #52	; 0x34
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7fe fb3a 	bl	80115fc <ld_dword>
 8012f88:	4602      	mov	r2, r0
 8012f8a:	4b1c      	ldr	r3, [pc, #112]	; (8012ffc <find_volume+0x4fc>)
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d11e      	bne.n	8012fce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f92:	3334      	adds	r3, #52	; 0x34
 8012f94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f7fe fb2f 	bl	80115fc <ld_dword>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	4b17      	ldr	r3, [pc, #92]	; (8013000 <find_volume+0x500>)
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d113      	bne.n	8012fce <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa8:	3334      	adds	r3, #52	; 0x34
 8012faa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7fe fb24 	bl	80115fc <ld_dword>
 8012fb4:	4602      	mov	r2, r0
 8012fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fbc:	3334      	adds	r3, #52	; 0x34
 8012fbe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7fe fb1a 	bl	80115fc <ld_dword>
 8012fc8:	4602      	mov	r2, r0
 8012fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fcc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012fd4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012fd6:	4b0b      	ldr	r3, [pc, #44]	; (8013004 <find_volume+0x504>)
 8012fd8:	881b      	ldrh	r3, [r3, #0]
 8012fda:	3301      	adds	r3, #1
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	4b09      	ldr	r3, [pc, #36]	; (8013004 <find_volume+0x504>)
 8012fe0:	801a      	strh	r2, [r3, #0]
 8012fe2:	4b08      	ldr	r3, [pc, #32]	; (8013004 <find_volume+0x504>)
 8012fe4:	881a      	ldrh	r2, [r3, #0]
 8012fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012fea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012fec:	f7fe fd36 	bl	8011a5c <clear_lock>
#endif
	return FR_OK;
 8012ff0:	2300      	movs	r3, #0
}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3758      	adds	r7, #88	; 0x58
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	41615252 	.word	0x41615252
 8013000:	61417272 	.word	0x61417272
 8013004:	200009f4 	.word	0x200009f4

08013008 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013012:	2309      	movs	r3, #9
 8013014:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d01c      	beq.n	8013056 <validate+0x4e>
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d018      	beq.n	8013056 <validate+0x4e>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d013      	beq.n	8013056 <validate+0x4e>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	889a      	ldrh	r2, [r3, #4]
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	88db      	ldrh	r3, [r3, #6]
 8013038:	429a      	cmp	r2, r3
 801303a:	d10c      	bne.n	8013056 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	785b      	ldrb	r3, [r3, #1]
 8013042:	4618      	mov	r0, r3
 8013044:	f7fe fa24 	bl	8011490 <disk_status>
 8013048:	4603      	mov	r3, r0
 801304a:	f003 0301 	and.w	r3, r3, #1
 801304e:	2b00      	cmp	r3, #0
 8013050:	d101      	bne.n	8013056 <validate+0x4e>
			res = FR_OK;
 8013052:	2300      	movs	r3, #0
 8013054:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013056:	7bfb      	ldrb	r3, [r7, #15]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d102      	bne.n	8013062 <validate+0x5a>
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	e000      	b.n	8013064 <validate+0x5c>
 8013062:	2300      	movs	r3, #0
 8013064:	683a      	ldr	r2, [r7, #0]
 8013066:	6013      	str	r3, [r2, #0]
	return res;
 8013068:	7bfb      	ldrb	r3, [r7, #15]
}
 801306a:	4618      	mov	r0, r3
 801306c:	3710      	adds	r7, #16
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
	...

08013074 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b088      	sub	sp, #32
 8013078:	af00      	add	r7, sp, #0
 801307a:	60f8      	str	r0, [r7, #12]
 801307c:	60b9      	str	r1, [r7, #8]
 801307e:	4613      	mov	r3, r2
 8013080:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013086:	f107 0310 	add.w	r3, r7, #16
 801308a:	4618      	mov	r0, r3
 801308c:	f7ff fc9e 	bl	80129cc <get_ldnumber>
 8013090:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013092:	69fb      	ldr	r3, [r7, #28]
 8013094:	2b00      	cmp	r3, #0
 8013096:	da01      	bge.n	801309c <f_mount+0x28>
 8013098:	230b      	movs	r3, #11
 801309a:	e02b      	b.n	80130f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801309c:	4a17      	ldr	r2, [pc, #92]	; (80130fc <f_mount+0x88>)
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80130a6:	69bb      	ldr	r3, [r7, #24]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d005      	beq.n	80130b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80130ac:	69b8      	ldr	r0, [r7, #24]
 80130ae:	f7fe fcd5 	bl	8011a5c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80130b2:	69bb      	ldr	r3, [r7, #24]
 80130b4:	2200      	movs	r2, #0
 80130b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d002      	beq.n	80130c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	2200      	movs	r2, #0
 80130c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80130c4:	68fa      	ldr	r2, [r7, #12]
 80130c6:	490d      	ldr	r1, [pc, #52]	; (80130fc <f_mount+0x88>)
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d002      	beq.n	80130da <f_mount+0x66>
 80130d4:	79fb      	ldrb	r3, [r7, #7]
 80130d6:	2b01      	cmp	r3, #1
 80130d8:	d001      	beq.n	80130de <f_mount+0x6a>
 80130da:	2300      	movs	r3, #0
 80130dc:	e00a      	b.n	80130f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80130de:	f107 010c 	add.w	r1, r7, #12
 80130e2:	f107 0308 	add.w	r3, r7, #8
 80130e6:	2200      	movs	r2, #0
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7ff fd09 	bl	8012b00 <find_volume>
 80130ee:	4603      	mov	r3, r0
 80130f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80130f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	3720      	adds	r7, #32
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}
 80130fc:	200009f0 	.word	0x200009f0

08013100 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b098      	sub	sp, #96	; 0x60
 8013104:	af00      	add	r7, sp, #0
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	4613      	mov	r3, r2
 801310c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d101      	bne.n	8013118 <f_open+0x18>
 8013114:	2309      	movs	r3, #9
 8013116:	e1bb      	b.n	8013490 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013118:	79fb      	ldrb	r3, [r7, #7]
 801311a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801311e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013120:	79fa      	ldrb	r2, [r7, #7]
 8013122:	f107 0110 	add.w	r1, r7, #16
 8013126:	f107 0308 	add.w	r3, r7, #8
 801312a:	4618      	mov	r0, r3
 801312c:	f7ff fce8 	bl	8012b00 <find_volume>
 8013130:	4603      	mov	r3, r0
 8013132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801313a:	2b00      	cmp	r3, #0
 801313c:	f040 819f 	bne.w	801347e <f_open+0x37e>
		dj.obj.fs = fs;
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013144:	68ba      	ldr	r2, [r7, #8]
 8013146:	f107 0314 	add.w	r3, r7, #20
 801314a:	4611      	mov	r1, r2
 801314c:	4618      	mov	r0, r3
 801314e:	f7ff fbc7 	bl	80128e0 <follow_path>
 8013152:	4603      	mov	r3, r0
 8013154:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801315c:	2b00      	cmp	r3, #0
 801315e:	d11a      	bne.n	8013196 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013160:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013164:	b25b      	sxtb	r3, r3
 8013166:	2b00      	cmp	r3, #0
 8013168:	da03      	bge.n	8013172 <f_open+0x72>
				res = FR_INVALID_NAME;
 801316a:	2306      	movs	r3, #6
 801316c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013170:	e011      	b.n	8013196 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013172:	79fb      	ldrb	r3, [r7, #7]
 8013174:	f023 0301 	bic.w	r3, r3, #1
 8013178:	2b00      	cmp	r3, #0
 801317a:	bf14      	ite	ne
 801317c:	2301      	movne	r3, #1
 801317e:	2300      	moveq	r3, #0
 8013180:	b2db      	uxtb	r3, r3
 8013182:	461a      	mov	r2, r3
 8013184:	f107 0314 	add.w	r3, r7, #20
 8013188:	4611      	mov	r1, r2
 801318a:	4618      	mov	r0, r3
 801318c:	f7fe fb1e 	bl	80117cc <chk_lock>
 8013190:	4603      	mov	r3, r0
 8013192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013196:	79fb      	ldrb	r3, [r7, #7]
 8013198:	f003 031c 	and.w	r3, r3, #28
 801319c:	2b00      	cmp	r3, #0
 801319e:	d07f      	beq.n	80132a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80131a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d017      	beq.n	80131d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80131a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131ac:	2b04      	cmp	r3, #4
 80131ae:	d10e      	bne.n	80131ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80131b0:	f7fe fb68 	bl	8011884 <enq_lock>
 80131b4:	4603      	mov	r3, r0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d006      	beq.n	80131c8 <f_open+0xc8>
 80131ba:	f107 0314 	add.w	r3, r7, #20
 80131be:	4618      	mov	r0, r3
 80131c0:	f7ff fac7 	bl	8012752 <dir_register>
 80131c4:	4603      	mov	r3, r0
 80131c6:	e000      	b.n	80131ca <f_open+0xca>
 80131c8:	2312      	movs	r3, #18
 80131ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80131ce:	79fb      	ldrb	r3, [r7, #7]
 80131d0:	f043 0308 	orr.w	r3, r3, #8
 80131d4:	71fb      	strb	r3, [r7, #7]
 80131d6:	e010      	b.n	80131fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80131d8:	7ebb      	ldrb	r3, [r7, #26]
 80131da:	f003 0311 	and.w	r3, r3, #17
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d003      	beq.n	80131ea <f_open+0xea>
					res = FR_DENIED;
 80131e2:	2307      	movs	r3, #7
 80131e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80131e8:	e007      	b.n	80131fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80131ea:	79fb      	ldrb	r3, [r7, #7]
 80131ec:	f003 0304 	and.w	r3, r3, #4
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d002      	beq.n	80131fa <f_open+0xfa>
 80131f4:	2308      	movs	r3, #8
 80131f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80131fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d168      	bne.n	80132d4 <f_open+0x1d4>
 8013202:	79fb      	ldrb	r3, [r7, #7]
 8013204:	f003 0308 	and.w	r3, r3, #8
 8013208:	2b00      	cmp	r3, #0
 801320a:	d063      	beq.n	80132d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 801320c:	f000 fdf2 	bl	8013df4 <get_fattime>
 8013210:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013214:	330e      	adds	r3, #14
 8013216:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013218:	4618      	mov	r0, r3
 801321a:	f7fe fa2d 	bl	8011678 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013220:	3316      	adds	r3, #22
 8013222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013224:	4618      	mov	r0, r3
 8013226:	f7fe fa27 	bl	8011678 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801322a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801322c:	330b      	adds	r3, #11
 801322e:	2220      	movs	r2, #32
 8013230:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013232:	693b      	ldr	r3, [r7, #16]
 8013234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013236:	4611      	mov	r1, r2
 8013238:	4618      	mov	r0, r3
 801323a:	f7ff f9f6 	bl	801262a <ld_clust>
 801323e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013244:	2200      	movs	r2, #0
 8013246:	4618      	mov	r0, r3
 8013248:	f7ff fa0e 	bl	8012668 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801324e:	331c      	adds	r3, #28
 8013250:	2100      	movs	r1, #0
 8013252:	4618      	mov	r0, r3
 8013254:	f7fe fa10 	bl	8011678 <st_dword>
					fs->wflag = 1;
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	2201      	movs	r2, #1
 801325c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801325e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013260:	2b00      	cmp	r3, #0
 8013262:	d037      	beq.n	80132d4 <f_open+0x1d4>
						dw = fs->winsect;
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013268:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801326a:	f107 0314 	add.w	r3, r7, #20
 801326e:	2200      	movs	r2, #0
 8013270:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013272:	4618      	mov	r0, r3
 8013274:	f7fe fefe 	bl	8012074 <remove_chain>
 8013278:	4603      	mov	r3, r0
 801327a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801327e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013282:	2b00      	cmp	r3, #0
 8013284:	d126      	bne.n	80132d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801328a:	4618      	mov	r0, r3
 801328c:	f7fe fc4e 	bl	8011b2c <move_window>
 8013290:	4603      	mov	r3, r0
 8013292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801329a:	3a01      	subs	r2, #1
 801329c:	611a      	str	r2, [r3, #16]
 801329e:	e019      	b.n	80132d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80132a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d115      	bne.n	80132d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80132a8:	7ebb      	ldrb	r3, [r7, #26]
 80132aa:	f003 0310 	and.w	r3, r3, #16
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d003      	beq.n	80132ba <f_open+0x1ba>
					res = FR_NO_FILE;
 80132b2:	2304      	movs	r3, #4
 80132b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80132b8:	e00c      	b.n	80132d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80132ba:	79fb      	ldrb	r3, [r7, #7]
 80132bc:	f003 0302 	and.w	r3, r3, #2
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d007      	beq.n	80132d4 <f_open+0x1d4>
 80132c4:	7ebb      	ldrb	r3, [r7, #26]
 80132c6:	f003 0301 	and.w	r3, r3, #1
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d002      	beq.n	80132d4 <f_open+0x1d4>
						res = FR_DENIED;
 80132ce:	2307      	movs	r3, #7
 80132d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80132d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d128      	bne.n	801332e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80132dc:	79fb      	ldrb	r3, [r7, #7]
 80132de:	f003 0308 	and.w	r3, r3, #8
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d003      	beq.n	80132ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80132e6:	79fb      	ldrb	r3, [r7, #7]
 80132e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80132f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80132fc:	79fb      	ldrb	r3, [r7, #7]
 80132fe:	f023 0301 	bic.w	r3, r3, #1
 8013302:	2b00      	cmp	r3, #0
 8013304:	bf14      	ite	ne
 8013306:	2301      	movne	r3, #1
 8013308:	2300      	moveq	r3, #0
 801330a:	b2db      	uxtb	r3, r3
 801330c:	461a      	mov	r2, r3
 801330e:	f107 0314 	add.w	r3, r7, #20
 8013312:	4611      	mov	r1, r2
 8013314:	4618      	mov	r0, r3
 8013316:	f7fe fad7 	bl	80118c8 <inc_lock>
 801331a:	4602      	mov	r2, r0
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	691b      	ldr	r3, [r3, #16]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d102      	bne.n	801332e <f_open+0x22e>
 8013328:	2302      	movs	r3, #2
 801332a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801332e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013332:	2b00      	cmp	r3, #0
 8013334:	f040 80a3 	bne.w	801347e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801333c:	4611      	mov	r1, r2
 801333e:	4618      	mov	r0, r3
 8013340:	f7ff f973 	bl	801262a <ld_clust>
 8013344:	4602      	mov	r2, r0
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801334a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801334c:	331c      	adds	r3, #28
 801334e:	4618      	mov	r0, r3
 8013350:	f7fe f954 	bl	80115fc <ld_dword>
 8013354:	4602      	mov	r2, r0
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	2200      	movs	r2, #0
 801335e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013360:	693a      	ldr	r2, [r7, #16]
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	88da      	ldrh	r2, [r3, #6]
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	79fa      	ldrb	r2, [r7, #7]
 8013372:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	2200      	movs	r2, #0
 8013378:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	2200      	movs	r2, #0
 801337e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2200      	movs	r2, #0
 8013384:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	3330      	adds	r3, #48	; 0x30
 801338a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801338e:	2100      	movs	r1, #0
 8013390:	4618      	mov	r0, r3
 8013392:	f7fe f9be 	bl	8011712 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013396:	79fb      	ldrb	r3, [r7, #7]
 8013398:	f003 0320 	and.w	r3, r3, #32
 801339c:	2b00      	cmp	r3, #0
 801339e:	d06e      	beq.n	801347e <f_open+0x37e>
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	68db      	ldr	r3, [r3, #12]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d06a      	beq.n	801347e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	68da      	ldr	r2, [r3, #12]
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	895b      	ldrh	r3, [r3, #10]
 80133b4:	461a      	mov	r2, r3
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	899b      	ldrh	r3, [r3, #12]
 80133ba:	fb03 f302 	mul.w	r3, r3, r2
 80133be:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	689b      	ldr	r3, [r3, #8]
 80133c4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	657b      	str	r3, [r7, #84]	; 0x54
 80133cc:	e016      	b.n	80133fc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7fe fc67 	bl	8011ca6 <get_fat>
 80133d8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80133da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80133dc:	2b01      	cmp	r3, #1
 80133de:	d802      	bhi.n	80133e6 <f_open+0x2e6>
 80133e0:	2302      	movs	r3, #2
 80133e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80133e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80133e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ec:	d102      	bne.n	80133f4 <f_open+0x2f4>
 80133ee:	2301      	movs	r3, #1
 80133f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80133f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80133f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133f8:	1ad3      	subs	r3, r2, r3
 80133fa:	657b      	str	r3, [r7, #84]	; 0x54
 80133fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013400:	2b00      	cmp	r3, #0
 8013402:	d103      	bne.n	801340c <f_open+0x30c>
 8013404:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013408:	429a      	cmp	r2, r3
 801340a:	d8e0      	bhi.n	80133ce <f_open+0x2ce>
				}
				fp->clust = clst;
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013410:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013416:	2b00      	cmp	r3, #0
 8013418:	d131      	bne.n	801347e <f_open+0x37e>
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	899b      	ldrh	r3, [r3, #12]
 801341e:	461a      	mov	r2, r3
 8013420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013422:	fbb3 f1f2 	udiv	r1, r3, r2
 8013426:	fb02 f201 	mul.w	r2, r2, r1
 801342a:	1a9b      	subs	r3, r3, r2
 801342c:	2b00      	cmp	r3, #0
 801342e:	d026      	beq.n	801347e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013434:	4618      	mov	r0, r3
 8013436:	f7fe fc17 	bl	8011c68 <clust2sect>
 801343a:	6478      	str	r0, [r7, #68]	; 0x44
 801343c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801343e:	2b00      	cmp	r3, #0
 8013440:	d103      	bne.n	801344a <f_open+0x34a>
						res = FR_INT_ERR;
 8013442:	2302      	movs	r3, #2
 8013444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013448:	e019      	b.n	801347e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	899b      	ldrh	r3, [r3, #12]
 801344e:	461a      	mov	r2, r3
 8013450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013452:	fbb3 f2f2 	udiv	r2, r3, r2
 8013456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013458:	441a      	add	r2, r3
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	7858      	ldrb	r0, [r3, #1]
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	6a1a      	ldr	r2, [r3, #32]
 801346c:	2301      	movs	r3, #1
 801346e:	f7fe f84f 	bl	8011510 <disk_read>
 8013472:	4603      	mov	r3, r0
 8013474:	2b00      	cmp	r3, #0
 8013476:	d002      	beq.n	801347e <f_open+0x37e>
 8013478:	2301      	movs	r3, #1
 801347a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801347e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013482:	2b00      	cmp	r3, #0
 8013484:	d002      	beq.n	801348c <f_open+0x38c>
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	2200      	movs	r2, #0
 801348a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801348c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013490:	4618      	mov	r0, r3
 8013492:	3760      	adds	r7, #96	; 0x60
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}

08013498 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b08c      	sub	sp, #48	; 0x30
 801349c:	af00      	add	r7, sp, #0
 801349e:	60f8      	str	r0, [r7, #12]
 80134a0:	60b9      	str	r1, [r7, #8]
 80134a2:	607a      	str	r2, [r7, #4]
 80134a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	2200      	movs	r2, #0
 80134ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	f107 0210 	add.w	r2, r7, #16
 80134b6:	4611      	mov	r1, r2
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7ff fda5 	bl	8013008 <validate>
 80134be:	4603      	mov	r3, r0
 80134c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80134c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d107      	bne.n	80134dc <f_write+0x44>
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	7d5b      	ldrb	r3, [r3, #21]
 80134d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80134d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d002      	beq.n	80134e2 <f_write+0x4a>
 80134dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134e0:	e16a      	b.n	80137b8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	7d1b      	ldrb	r3, [r3, #20]
 80134e6:	f003 0302 	and.w	r3, r3, #2
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d101      	bne.n	80134f2 <f_write+0x5a>
 80134ee:	2307      	movs	r3, #7
 80134f0:	e162      	b.n	80137b8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	699a      	ldr	r2, [r3, #24]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	441a      	add	r2, r3
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	699b      	ldr	r3, [r3, #24]
 80134fe:	429a      	cmp	r2, r3
 8013500:	f080 814c 	bcs.w	801379c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	699b      	ldr	r3, [r3, #24]
 8013508:	43db      	mvns	r3, r3
 801350a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801350c:	e146      	b.n	801379c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	699b      	ldr	r3, [r3, #24]
 8013512:	693a      	ldr	r2, [r7, #16]
 8013514:	8992      	ldrh	r2, [r2, #12]
 8013516:	fbb3 f1f2 	udiv	r1, r3, r2
 801351a:	fb02 f201 	mul.w	r2, r2, r1
 801351e:	1a9b      	subs	r3, r3, r2
 8013520:	2b00      	cmp	r3, #0
 8013522:	f040 80f1 	bne.w	8013708 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	699b      	ldr	r3, [r3, #24]
 801352a:	693a      	ldr	r2, [r7, #16]
 801352c:	8992      	ldrh	r2, [r2, #12]
 801352e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013532:	693a      	ldr	r2, [r7, #16]
 8013534:	8952      	ldrh	r2, [r2, #10]
 8013536:	3a01      	subs	r2, #1
 8013538:	4013      	ands	r3, r2
 801353a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d143      	bne.n	80135ca <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	699b      	ldr	r3, [r3, #24]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d10c      	bne.n	8013564 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	689b      	ldr	r3, [r3, #8]
 801354e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013552:	2b00      	cmp	r3, #0
 8013554:	d11a      	bne.n	801358c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2100      	movs	r1, #0
 801355a:	4618      	mov	r0, r3
 801355c:	f7fe fdef 	bl	801213e <create_chain>
 8013560:	62b8      	str	r0, [r7, #40]	; 0x28
 8013562:	e013      	b.n	801358c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013568:	2b00      	cmp	r3, #0
 801356a:	d007      	beq.n	801357c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	699b      	ldr	r3, [r3, #24]
 8013570:	4619      	mov	r1, r3
 8013572:	68f8      	ldr	r0, [r7, #12]
 8013574:	f7fe fe7b 	bl	801226e <clmt_clust>
 8013578:	62b8      	str	r0, [r7, #40]	; 0x28
 801357a:	e007      	b.n	801358c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801357c:	68fa      	ldr	r2, [r7, #12]
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	69db      	ldr	r3, [r3, #28]
 8013582:	4619      	mov	r1, r3
 8013584:	4610      	mov	r0, r2
 8013586:	f7fe fdda 	bl	801213e <create_chain>
 801358a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801358e:	2b00      	cmp	r3, #0
 8013590:	f000 8109 	beq.w	80137a6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013596:	2b01      	cmp	r3, #1
 8013598:	d104      	bne.n	80135a4 <f_write+0x10c>
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	2202      	movs	r2, #2
 801359e:	755a      	strb	r2, [r3, #21]
 80135a0:	2302      	movs	r3, #2
 80135a2:	e109      	b.n	80137b8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80135a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135aa:	d104      	bne.n	80135b6 <f_write+0x11e>
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2201      	movs	r2, #1
 80135b0:	755a      	strb	r2, [r3, #21]
 80135b2:	2301      	movs	r3, #1
 80135b4:	e100      	b.n	80137b8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80135ba:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	689b      	ldr	r3, [r3, #8]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d102      	bne.n	80135ca <f_write+0x132>
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80135c8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	7d1b      	ldrb	r3, [r3, #20]
 80135ce:	b25b      	sxtb	r3, r3
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	da18      	bge.n	8013606 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	7858      	ldrb	r0, [r3, #1]
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	6a1a      	ldr	r2, [r3, #32]
 80135e2:	2301      	movs	r3, #1
 80135e4:	f7fd ffb4 	bl	8011550 <disk_write>
 80135e8:	4603      	mov	r3, r0
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d004      	beq.n	80135f8 <f_write+0x160>
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2201      	movs	r2, #1
 80135f2:	755a      	strb	r2, [r3, #21]
 80135f4:	2301      	movs	r3, #1
 80135f6:	e0df      	b.n	80137b8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	7d1b      	ldrb	r3, [r3, #20]
 80135fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013600:	b2da      	uxtb	r2, r3
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013606:	693a      	ldr	r2, [r7, #16]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	69db      	ldr	r3, [r3, #28]
 801360c:	4619      	mov	r1, r3
 801360e:	4610      	mov	r0, r2
 8013610:	f7fe fb2a 	bl	8011c68 <clust2sect>
 8013614:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d104      	bne.n	8013626 <f_write+0x18e>
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2202      	movs	r2, #2
 8013620:	755a      	strb	r2, [r3, #21]
 8013622:	2302      	movs	r3, #2
 8013624:	e0c8      	b.n	80137b8 <f_write+0x320>
			sect += csect;
 8013626:	697a      	ldr	r2, [r7, #20]
 8013628:	69bb      	ldr	r3, [r7, #24]
 801362a:	4413      	add	r3, r2
 801362c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	899b      	ldrh	r3, [r3, #12]
 8013632:	461a      	mov	r2, r3
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	fbb3 f3f2 	udiv	r3, r3, r2
 801363a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801363c:	6a3b      	ldr	r3, [r7, #32]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d043      	beq.n	80136ca <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013642:	69ba      	ldr	r2, [r7, #24]
 8013644:	6a3b      	ldr	r3, [r7, #32]
 8013646:	4413      	add	r3, r2
 8013648:	693a      	ldr	r2, [r7, #16]
 801364a:	8952      	ldrh	r2, [r2, #10]
 801364c:	4293      	cmp	r3, r2
 801364e:	d905      	bls.n	801365c <f_write+0x1c4>
					cc = fs->csize - csect;
 8013650:	693b      	ldr	r3, [r7, #16]
 8013652:	895b      	ldrh	r3, [r3, #10]
 8013654:	461a      	mov	r2, r3
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	1ad3      	subs	r3, r2, r3
 801365a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	7858      	ldrb	r0, [r3, #1]
 8013660:	6a3b      	ldr	r3, [r7, #32]
 8013662:	697a      	ldr	r2, [r7, #20]
 8013664:	69f9      	ldr	r1, [r7, #28]
 8013666:	f7fd ff73 	bl	8011550 <disk_write>
 801366a:	4603      	mov	r3, r0
 801366c:	2b00      	cmp	r3, #0
 801366e:	d004      	beq.n	801367a <f_write+0x1e2>
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2201      	movs	r2, #1
 8013674:	755a      	strb	r2, [r3, #21]
 8013676:	2301      	movs	r3, #1
 8013678:	e09e      	b.n	80137b8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	6a1a      	ldr	r2, [r3, #32]
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	1ad3      	subs	r3, r2, r3
 8013682:	6a3a      	ldr	r2, [r7, #32]
 8013684:	429a      	cmp	r2, r3
 8013686:	d918      	bls.n	80136ba <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	6a1a      	ldr	r2, [r3, #32]
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	1ad3      	subs	r3, r2, r3
 8013696:	693a      	ldr	r2, [r7, #16]
 8013698:	8992      	ldrh	r2, [r2, #12]
 801369a:	fb02 f303 	mul.w	r3, r2, r3
 801369e:	69fa      	ldr	r2, [r7, #28]
 80136a0:	18d1      	adds	r1, r2, r3
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	899b      	ldrh	r3, [r3, #12]
 80136a6:	461a      	mov	r2, r3
 80136a8:	f7fe f812 	bl	80116d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	7d1b      	ldrb	r3, [r3, #20]
 80136b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80136b4:	b2da      	uxtb	r2, r3
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80136ba:	693b      	ldr	r3, [r7, #16]
 80136bc:	899b      	ldrh	r3, [r3, #12]
 80136be:	461a      	mov	r2, r3
 80136c0:	6a3b      	ldr	r3, [r7, #32]
 80136c2:	fb02 f303 	mul.w	r3, r2, r3
 80136c6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80136c8:	e04b      	b.n	8013762 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	6a1b      	ldr	r3, [r3, #32]
 80136ce:	697a      	ldr	r2, [r7, #20]
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d016      	beq.n	8013702 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	699a      	ldr	r2, [r3, #24]
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80136dc:	429a      	cmp	r2, r3
 80136de:	d210      	bcs.n	8013702 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80136e0:	693b      	ldr	r3, [r7, #16]
 80136e2:	7858      	ldrb	r0, [r3, #1]
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136ea:	2301      	movs	r3, #1
 80136ec:	697a      	ldr	r2, [r7, #20]
 80136ee:	f7fd ff0f 	bl	8011510 <disk_read>
 80136f2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d004      	beq.n	8013702 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	2201      	movs	r2, #1
 80136fc:	755a      	strb	r2, [r3, #21]
 80136fe:	2301      	movs	r3, #1
 8013700:	e05a      	b.n	80137b8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	697a      	ldr	r2, [r7, #20]
 8013706:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	899b      	ldrh	r3, [r3, #12]
 801370c:	4618      	mov	r0, r3
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	699b      	ldr	r3, [r3, #24]
 8013712:	693a      	ldr	r2, [r7, #16]
 8013714:	8992      	ldrh	r2, [r2, #12]
 8013716:	fbb3 f1f2 	udiv	r1, r3, r2
 801371a:	fb02 f201 	mul.w	r2, r2, r1
 801371e:	1a9b      	subs	r3, r3, r2
 8013720:	1ac3      	subs	r3, r0, r3
 8013722:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	429a      	cmp	r2, r3
 801372a:	d901      	bls.n	8013730 <f_write+0x298>
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	699b      	ldr	r3, [r3, #24]
 801373a:	693a      	ldr	r2, [r7, #16]
 801373c:	8992      	ldrh	r2, [r2, #12]
 801373e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013742:	fb02 f200 	mul.w	r2, r2, r0
 8013746:	1a9b      	subs	r3, r3, r2
 8013748:	440b      	add	r3, r1
 801374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801374c:	69f9      	ldr	r1, [r7, #28]
 801374e:	4618      	mov	r0, r3
 8013750:	f7fd ffbe 	bl	80116d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	7d1b      	ldrb	r3, [r3, #20]
 8013758:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801375c:	b2da      	uxtb	r2, r3
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013762:	69fa      	ldr	r2, [r7, #28]
 8013764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013766:	4413      	add	r3, r2
 8013768:	61fb      	str	r3, [r7, #28]
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	699a      	ldr	r2, [r3, #24]
 801376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013770:	441a      	add	r2, r3
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	619a      	str	r2, [r3, #24]
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	68da      	ldr	r2, [r3, #12]
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	699b      	ldr	r3, [r3, #24]
 801377e:	429a      	cmp	r2, r3
 8013780:	bf38      	it	cc
 8013782:	461a      	movcc	r2, r3
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	60da      	str	r2, [r3, #12]
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	681a      	ldr	r2, [r3, #0]
 801378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378e:	441a      	add	r2, r3
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	601a      	str	r2, [r3, #0]
 8013794:	687a      	ldr	r2, [r7, #4]
 8013796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013798:	1ad3      	subs	r3, r2, r3
 801379a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	f47f aeb5 	bne.w	801350e <f_write+0x76>
 80137a4:	e000      	b.n	80137a8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80137a6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	7d1b      	ldrb	r3, [r3, #20]
 80137ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137b0:	b2da      	uxtb	r2, r3
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80137b6:	2300      	movs	r3, #0
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3730      	adds	r7, #48	; 0x30
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}

080137c0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b086      	sub	sp, #24
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f107 0208 	add.w	r2, r7, #8
 80137ce:	4611      	mov	r1, r2
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7ff fc19 	bl	8013008 <validate>
 80137d6:	4603      	mov	r3, r0
 80137d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80137da:	7dfb      	ldrb	r3, [r7, #23]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d168      	bne.n	80138b2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	7d1b      	ldrb	r3, [r3, #20]
 80137e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d062      	beq.n	80138b2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	7d1b      	ldrb	r3, [r3, #20]
 80137f0:	b25b      	sxtb	r3, r3
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	da15      	bge.n	8013822 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	7858      	ldrb	r0, [r3, #1]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6a1a      	ldr	r2, [r3, #32]
 8013804:	2301      	movs	r3, #1
 8013806:	f7fd fea3 	bl	8011550 <disk_write>
 801380a:	4603      	mov	r3, r0
 801380c:	2b00      	cmp	r3, #0
 801380e:	d001      	beq.n	8013814 <f_sync+0x54>
 8013810:	2301      	movs	r3, #1
 8013812:	e04f      	b.n	80138b4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	7d1b      	ldrb	r3, [r3, #20]
 8013818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801381c:	b2da      	uxtb	r2, r3
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013822:	f000 fae7 	bl	8013df4 <get_fattime>
 8013826:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013828:	68ba      	ldr	r2, [r7, #8]
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801382e:	4619      	mov	r1, r3
 8013830:	4610      	mov	r0, r2
 8013832:	f7fe f97b 	bl	8011b2c <move_window>
 8013836:	4603      	mov	r3, r0
 8013838:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801383a:	7dfb      	ldrb	r3, [r7, #23]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d138      	bne.n	80138b2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013844:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	330b      	adds	r3, #11
 801384a:	781a      	ldrb	r2, [r3, #0]
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	330b      	adds	r3, #11
 8013850:	f042 0220 	orr.w	r2, r2, #32
 8013854:	b2d2      	uxtb	r2, r2
 8013856:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6818      	ldr	r0, [r3, #0]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	689b      	ldr	r3, [r3, #8]
 8013860:	461a      	mov	r2, r3
 8013862:	68f9      	ldr	r1, [r7, #12]
 8013864:	f7fe ff00 	bl	8012668 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	f103 021c 	add.w	r2, r3, #28
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	68db      	ldr	r3, [r3, #12]
 8013872:	4619      	mov	r1, r3
 8013874:	4610      	mov	r0, r2
 8013876:	f7fd feff 	bl	8011678 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	3316      	adds	r3, #22
 801387e:	6939      	ldr	r1, [r7, #16]
 8013880:	4618      	mov	r0, r3
 8013882:	f7fd fef9 	bl	8011678 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	3312      	adds	r3, #18
 801388a:	2100      	movs	r1, #0
 801388c:	4618      	mov	r0, r3
 801388e:	f7fd fed8 	bl	8011642 <st_word>
					fs->wflag = 1;
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	2201      	movs	r2, #1
 8013896:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	4618      	mov	r0, r3
 801389c:	f7fe f974 	bl	8011b88 <sync_fs>
 80138a0:	4603      	mov	r3, r0
 80138a2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	7d1b      	ldrb	r3, [r3, #20]
 80138a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80138ac:	b2da      	uxtb	r2, r3
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80138b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3718      	adds	r7, #24
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}

080138bc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b084      	sub	sp, #16
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f7ff ff7b 	bl	80137c0 <f_sync>
 80138ca:	4603      	mov	r3, r0
 80138cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80138ce:	7bfb      	ldrb	r3, [r7, #15]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d118      	bne.n	8013906 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f107 0208 	add.w	r2, r7, #8
 80138da:	4611      	mov	r1, r2
 80138dc:	4618      	mov	r0, r3
 80138de:	f7ff fb93 	bl	8013008 <validate>
 80138e2:	4603      	mov	r3, r0
 80138e4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80138e6:	7bfb      	ldrb	r3, [r7, #15]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d10c      	bne.n	8013906 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	691b      	ldr	r3, [r3, #16]
 80138f0:	4618      	mov	r0, r3
 80138f2:	f7fe f877 	bl	80119e4 <dec_lock>
 80138f6:	4603      	mov	r3, r0
 80138f8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80138fa:	7bfb      	ldrb	r3, [r7, #15]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d102      	bne.n	8013906 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2200      	movs	r2, #0
 8013904:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013906:	7bfb      	ldrb	r3, [r7, #15]
}
 8013908:	4618      	mov	r0, r3
 801390a:	3710      	adds	r7, #16
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b096      	sub	sp, #88	; 0x58
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013918:	f107 0108 	add.w	r1, r7, #8
 801391c:	1d3b      	adds	r3, r7, #4
 801391e:	2202      	movs	r2, #2
 8013920:	4618      	mov	r0, r3
 8013922:	f7ff f8ed 	bl	8012b00 <find_volume>
 8013926:	4603      	mov	r3, r0
 8013928:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013930:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013934:	2b00      	cmp	r3, #0
 8013936:	f040 80f2 	bne.w	8013b1e <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801393a:	687a      	ldr	r2, [r7, #4]
 801393c:	f107 030c 	add.w	r3, r7, #12
 8013940:	4611      	mov	r1, r2
 8013942:	4618      	mov	r0, r3
 8013944:	f7fe ffcc 	bl	80128e0 <follow_path>
 8013948:	4603      	mov	r3, r0
 801394a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801394e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013952:	2b00      	cmp	r3, #0
 8013954:	d102      	bne.n	801395c <f_mkdir+0x4c>
 8013956:	2308      	movs	r3, #8
 8013958:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801395c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013960:	2b04      	cmp	r3, #4
 8013962:	f040 80dc 	bne.w	8013b1e <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013966:	f107 030c 	add.w	r3, r7, #12
 801396a:	2100      	movs	r1, #0
 801396c:	4618      	mov	r0, r3
 801396e:	f7fe fbe6 	bl	801213e <create_chain>
 8013972:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	895b      	ldrh	r3, [r3, #10]
 8013978:	461a      	mov	r2, r3
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	899b      	ldrh	r3, [r3, #12]
 801397e:	fb03 f302 	mul.w	r3, r3, r2
 8013982:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013984:	2300      	movs	r3, #0
 8013986:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801398a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801398c:	2b00      	cmp	r3, #0
 801398e:	d102      	bne.n	8013996 <f_mkdir+0x86>
 8013990:	2307      	movs	r3, #7
 8013992:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013998:	2b01      	cmp	r3, #1
 801399a:	d102      	bne.n	80139a2 <f_mkdir+0x92>
 801399c:	2302      	movs	r3, #2
 801399e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80139a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139a8:	d102      	bne.n	80139b0 <f_mkdir+0xa0>
 80139aa:	2301      	movs	r3, #1
 80139ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80139b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d106      	bne.n	80139c6 <f_mkdir+0xb6>
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7fe f872 	bl	8011aa4 <sync_window>
 80139c0:	4603      	mov	r3, r0
 80139c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80139c6:	f000 fa15 	bl	8013df4 <get_fattime>
 80139ca:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80139cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d16c      	bne.n	8013aae <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80139d8:	4618      	mov	r0, r3
 80139da:	f7fe f945 	bl	8011c68 <clust2sect>
 80139de:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	3334      	adds	r3, #52	; 0x34
 80139e4:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	899b      	ldrh	r3, [r3, #12]
 80139ea:	461a      	mov	r2, r3
 80139ec:	2100      	movs	r1, #0
 80139ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80139f0:	f7fd fe8f 	bl	8011712 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80139f4:	220b      	movs	r2, #11
 80139f6:	2120      	movs	r1, #32
 80139f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80139fa:	f7fd fe8a 	bl	8011712 <mem_set>
					dir[DIR_Name] = '.';
 80139fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a00:	222e      	movs	r2, #46	; 0x2e
 8013a02:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a06:	330b      	adds	r3, #11
 8013a08:	2210      	movs	r2, #16
 8013a0a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a0e:	3316      	adds	r3, #22
 8013a10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7fd fe30 	bl	8011678 <st_dword>
					st_clust(fs, dir, dcl);
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7fe fe22 	bl	8012668 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a26:	3320      	adds	r3, #32
 8013a28:	2220      	movs	r2, #32
 8013a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7fd fe4f 	bl	80116d0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a34:	3321      	adds	r3, #33	; 0x21
 8013a36:	222e      	movs	r2, #46	; 0x2e
 8013a38:	701a      	strb	r2, [r3, #0]
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	781b      	ldrb	r3, [r3, #0]
 8013a42:	2b03      	cmp	r3, #3
 8013a44:	d106      	bne.n	8013a54 <f_mkdir+0x144>
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d101      	bne.n	8013a54 <f_mkdir+0x144>
 8013a50:	2300      	movs	r3, #0
 8013a52:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013a54:	68b8      	ldr	r0, [r7, #8]
 8013a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a58:	3320      	adds	r3, #32
 8013a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	f7fe fe03 	bl	8012668 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	895b      	ldrh	r3, [r3, #10]
 8013a66:	653b      	str	r3, [r7, #80]	; 0x50
 8013a68:	e01c      	b.n	8013aa4 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8013a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a6c:	1c5a      	adds	r2, r3, #1
 8013a6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013a70:	68ba      	ldr	r2, [r7, #8]
 8013a72:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	2201      	movs	r2, #1
 8013a78:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013a7a:	68bb      	ldr	r3, [r7, #8]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fe f811 	bl	8011aa4 <sync_window>
 8013a82:	4603      	mov	r3, r0
 8013a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013a88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d10d      	bne.n	8013aac <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	899b      	ldrh	r3, [r3, #12]
 8013a94:	461a      	mov	r2, r3
 8013a96:	2100      	movs	r1, #0
 8013a98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a9a:	f7fd fe3a 	bl	8011712 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aa0:	3b01      	subs	r3, #1
 8013aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8013aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d1df      	bne.n	8013a6a <f_mkdir+0x15a>
 8013aaa:	e000      	b.n	8013aae <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8013aac:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013aae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d107      	bne.n	8013ac6 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013ab6:	f107 030c 	add.w	r3, r7, #12
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7fe fe49 	bl	8012752 <dir_register>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013ac6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d120      	bne.n	8013b10 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ad4:	3316      	adds	r3, #22
 8013ad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7fd fdcd 	bl	8011678 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ae2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7fe fdbf 	bl	8012668 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aec:	330b      	adds	r3, #11
 8013aee:	2210      	movs	r2, #16
 8013af0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	2201      	movs	r2, #1
 8013af6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013af8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d10e      	bne.n	8013b1e <f_mkdir+0x20e>
					res = sync_fs(fs);
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7fe f840 	bl	8011b88 <sync_fs>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013b0e:	e006      	b.n	8013b1e <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013b10:	f107 030c 	add.w	r3, r7, #12
 8013b14:	2200      	movs	r2, #0
 8013b16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7fe faab 	bl	8012074 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3758      	adds	r7, #88	; 0x58
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
	...

08013b2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	b087      	sub	sp, #28
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	60f8      	str	r0, [r7, #12]
 8013b34:	60b9      	str	r1, [r7, #8]
 8013b36:	4613      	mov	r3, r2
 8013b38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013b42:	4b1f      	ldr	r3, [pc, #124]	; (8013bc0 <FATFS_LinkDriverEx+0x94>)
 8013b44:	7a5b      	ldrb	r3, [r3, #9]
 8013b46:	b2db      	uxtb	r3, r3
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d131      	bne.n	8013bb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013b4c:	4b1c      	ldr	r3, [pc, #112]	; (8013bc0 <FATFS_LinkDriverEx+0x94>)
 8013b4e:	7a5b      	ldrb	r3, [r3, #9]
 8013b50:	b2db      	uxtb	r3, r3
 8013b52:	461a      	mov	r2, r3
 8013b54:	4b1a      	ldr	r3, [pc, #104]	; (8013bc0 <FATFS_LinkDriverEx+0x94>)
 8013b56:	2100      	movs	r1, #0
 8013b58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013b5a:	4b19      	ldr	r3, [pc, #100]	; (8013bc0 <FATFS_LinkDriverEx+0x94>)
 8013b5c:	7a5b      	ldrb	r3, [r3, #9]
 8013b5e:	b2db      	uxtb	r3, r3
 8013b60:	4a17      	ldr	r2, [pc, #92]	; (8013bc0 <FATFS_LinkDriverEx+0x94>)
 8013b62:	009b      	lsls	r3, r3, #2
 8013b64:	4413      	add	r3, r2
 8013b66:	68fa      	ldr	r2, [r7, #12]
 8013b68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013b6a:	4b15      	ldr	r3, [pc, #84]	; (8013bc0 <FATFS_LinkDriverEx+0x94>)
 8013b6c:	7a5b      	ldrb	r3, [r3, #9]
 8013b6e:	b2db      	uxtb	r3, r3
 8013b70:	461a      	mov	r2, r3
 8013b72:	4b13      	ldr	r3, [pc, #76]	; (8013bc0 <FATFS_LinkDriverEx+0x94>)
 8013b74:	4413      	add	r3, r2
 8013b76:	79fa      	ldrb	r2, [r7, #7]
 8013b78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013b7a:	4b11      	ldr	r3, [pc, #68]	; (8013bc0 <FATFS_LinkDriverEx+0x94>)
 8013b7c:	7a5b      	ldrb	r3, [r3, #9]
 8013b7e:	b2db      	uxtb	r3, r3
 8013b80:	1c5a      	adds	r2, r3, #1
 8013b82:	b2d1      	uxtb	r1, r2
 8013b84:	4a0e      	ldr	r2, [pc, #56]	; (8013bc0 <FATFS_LinkDriverEx+0x94>)
 8013b86:	7251      	strb	r1, [r2, #9]
 8013b88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013b8a:	7dbb      	ldrb	r3, [r7, #22]
 8013b8c:	3330      	adds	r3, #48	; 0x30
 8013b8e:	b2da      	uxtb	r2, r3
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	3301      	adds	r3, #1
 8013b98:	223a      	movs	r2, #58	; 0x3a
 8013b9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	3302      	adds	r3, #2
 8013ba0:	222f      	movs	r2, #47	; 0x2f
 8013ba2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	3303      	adds	r3, #3
 8013ba8:	2200      	movs	r2, #0
 8013baa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013bac:	2300      	movs	r3, #0
 8013bae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	371c      	adds	r7, #28
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bbc:	4770      	bx	lr
 8013bbe:	bf00      	nop
 8013bc0:	20000a18 	.word	0x20000a18

08013bc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b082      	sub	sp, #8
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013bce:	2200      	movs	r2, #0
 8013bd0:	6839      	ldr	r1, [r7, #0]
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f7ff ffaa 	bl	8013b2c <FATFS_LinkDriverEx>
 8013bd8:	4603      	mov	r3, r0
}
 8013bda:	4618      	mov	r0, r3
 8013bdc:	3708      	adds	r7, #8
 8013bde:	46bd      	mov	sp, r7
 8013be0:	bd80      	pop	{r7, pc}
	...

08013be4 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8013be4:	b480      	push	{r7}
 8013be6:	b085      	sub	sp, #20
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	460b      	mov	r3, r1
 8013bee:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8013bf8:	4b15      	ldr	r3, [pc, #84]	; (8013c50 <FATFS_UnLinkDriverEx+0x6c>)
 8013bfa:	7a5b      	ldrb	r3, [r3, #9]
 8013bfc:	b2db      	uxtb	r3, r3
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d01e      	beq.n	8013c40 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	3b30      	subs	r3, #48	; 0x30
 8013c08:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8013c0a:	7bbb      	ldrb	r3, [r7, #14]
 8013c0c:	4a10      	ldr	r2, [pc, #64]	; (8013c50 <FATFS_UnLinkDriverEx+0x6c>)
 8013c0e:	009b      	lsls	r3, r3, #2
 8013c10:	4413      	add	r3, r2
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d013      	beq.n	8013c40 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8013c18:	7bbb      	ldrb	r3, [r7, #14]
 8013c1a:	4a0d      	ldr	r2, [pc, #52]	; (8013c50 <FATFS_UnLinkDriverEx+0x6c>)
 8013c1c:	009b      	lsls	r3, r3, #2
 8013c1e:	4413      	add	r3, r2
 8013c20:	2200      	movs	r2, #0
 8013c22:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8013c24:	7bbb      	ldrb	r3, [r7, #14]
 8013c26:	4a0a      	ldr	r2, [pc, #40]	; (8013c50 <FATFS_UnLinkDriverEx+0x6c>)
 8013c28:	4413      	add	r3, r2
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8013c2e:	4b08      	ldr	r3, [pc, #32]	; (8013c50 <FATFS_UnLinkDriverEx+0x6c>)
 8013c30:	7a5b      	ldrb	r3, [r3, #9]
 8013c32:	b2db      	uxtb	r3, r3
 8013c34:	3b01      	subs	r3, #1
 8013c36:	b2da      	uxtb	r2, r3
 8013c38:	4b05      	ldr	r3, [pc, #20]	; (8013c50 <FATFS_UnLinkDriverEx+0x6c>)
 8013c3a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3714      	adds	r7, #20
 8013c46:	46bd      	mov	sp, r7
 8013c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4c:	4770      	bx	lr
 8013c4e:	bf00      	nop
 8013c50:	20000a18 	.word	0x20000a18

08013c54 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8013c5c:	2100      	movs	r1, #0
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f7ff ffc0 	bl	8013be4 <FATFS_UnLinkDriverEx>
 8013c64:	4603      	mov	r3, r0
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3708      	adds	r7, #8
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
	...

08013c70 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b082      	sub	sp, #8
 8013c74:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013c76:	2300      	movs	r3, #0
 8013c78:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013c7a:	f000 f896 	bl	8013daa <BSP_SD_IsDetected>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2b01      	cmp	r3, #1
 8013c82:	d001      	beq.n	8013c88 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8013c84:	2301      	movs	r3, #1
 8013c86:	e012      	b.n	8013cae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8013c88:	480b      	ldr	r0, [pc, #44]	; (8013cb8 <BSP_SD_Init+0x48>)
 8013c8a:	f7f6 fdf5 	bl	800a878 <HAL_SD_Init>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013c92:	79fb      	ldrb	r3, [r7, #7]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d109      	bne.n	8013cac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8013c98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013c9c:	4806      	ldr	r0, [pc, #24]	; (8013cb8 <BSP_SD_Init+0x48>)
 8013c9e:	f7f7 fbd0 	bl	800b442 <HAL_SD_ConfigWideBusOperation>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d001      	beq.n	8013cac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013ca8:	2301      	movs	r3, #1
 8013caa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013cac:	79fb      	ldrb	r3, [r7, #7]
}
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3708      	adds	r7, #8
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}
 8013cb6:	bf00      	nop
 8013cb8:	20008e8c 	.word	0x20008e8c

08013cbc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b086      	sub	sp, #24
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	60f8      	str	r0, [r7, #12]
 8013cc4:	60b9      	str	r1, [r7, #8]
 8013cc6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013cc8:	2300      	movs	r3, #0
 8013cca:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	68ba      	ldr	r2, [r7, #8]
 8013cd0:	68f9      	ldr	r1, [r7, #12]
 8013cd2:	4806      	ldr	r0, [pc, #24]	; (8013cec <BSP_SD_ReadBlocks_DMA+0x30>)
 8013cd4:	f7f6 fe58 	bl	800a988 <HAL_SD_ReadBlocks_DMA>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d001      	beq.n	8013ce2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013cde:	2301      	movs	r3, #1
 8013ce0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8013ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3718      	adds	r7, #24
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}
 8013cec:	20008e8c 	.word	0x20008e8c

08013cf0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b086      	sub	sp, #24
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	60f8      	str	r0, [r7, #12]
 8013cf8:	60b9      	str	r1, [r7, #8]
 8013cfa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	68ba      	ldr	r2, [r7, #8]
 8013d04:	68f9      	ldr	r1, [r7, #12]
 8013d06:	4806      	ldr	r0, [pc, #24]	; (8013d20 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013d08:	f7f6 ff0a 	bl	800ab20 <HAL_SD_WriteBlocks_DMA>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d001      	beq.n	8013d16 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013d12:	2301      	movs	r3, #1
 8013d14:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8013d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3718      	adds	r7, #24
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	20008e8c 	.word	0x20008e8c

08013d24 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013d28:	4805      	ldr	r0, [pc, #20]	; (8013d40 <BSP_SD_GetCardState+0x1c>)
 8013d2a:	f7f7 fc06 	bl	800b53a <HAL_SD_GetCardState>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	2b04      	cmp	r3, #4
 8013d32:	bf14      	ite	ne
 8013d34:	2301      	movne	r3, #1
 8013d36:	2300      	moveq	r3, #0
 8013d38:	b2db      	uxtb	r3, r3
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	bd80      	pop	{r7, pc}
 8013d3e:	bf00      	nop
 8013d40:	20008e8c 	.word	0x20008e8c

08013d44 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8013d4c:	6879      	ldr	r1, [r7, #4]
 8013d4e:	4803      	ldr	r0, [pc, #12]	; (8013d5c <BSP_SD_GetCardInfo+0x18>)
 8013d50:	f7f7 fb4b 	bl	800b3ea <HAL_SD_GetCardInfo>
}
 8013d54:	bf00      	nop
 8013d56:	3708      	adds	r7, #8
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	20008e8c 	.word	0x20008e8c

08013d60 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8013d68:	f000 f818 	bl	8013d9c <BSP_SD_AbortCallback>
}
 8013d6c:	bf00      	nop
 8013d6e:	3708      	adds	r7, #8
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}

08013d74 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b082      	sub	sp, #8
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013d7c:	f002 f95a 	bl	8016034 <BSP_SD_WriteCpltCallback>
}
 8013d80:	bf00      	nop
 8013d82:	3708      	adds	r7, #8
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013d90:	f002 f95c 	bl	801604c <BSP_SD_ReadCpltCallback>
}
 8013d94:	bf00      	nop
 8013d96:	3708      	adds	r7, #8
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8013d9c:	b480      	push	{r7}
 8013d9e:	af00      	add	r7, sp, #0

}
 8013da0:	bf00      	nop
 8013da2:	46bd      	mov	sp, r7
 8013da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da8:	4770      	bx	lr

08013daa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8013daa:	b580      	push	{r7, lr}
 8013dac:	b082      	sub	sp, #8
 8013dae:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013db0:	2301      	movs	r3, #1
 8013db2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8013db4:	f000 f826 	bl	8013e04 <BSP_PlatformIsDetected>
 8013db8:	4603      	mov	r3, r0
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d101      	bne.n	8013dc2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013dc2:	79fb      	ldrb	r3, [r7, #7]
 8013dc4:	b2db      	uxtb	r3, r3
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3708      	adds	r7, #8
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
	...

08013dd0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013dd4:	4904      	ldr	r1, [pc, #16]	; (8013de8 <MX_FATFS_Init+0x18>)
 8013dd6:	4805      	ldr	r0, [pc, #20]	; (8013dec <MX_FATFS_Init+0x1c>)
 8013dd8:	f7ff fef4 	bl	8013bc4 <FATFS_LinkDriver>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	461a      	mov	r2, r3
 8013de0:	4b03      	ldr	r3, [pc, #12]	; (8013df0 <MX_FATFS_Init+0x20>)
 8013de2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8013de4:	bf00      	nop
 8013de6:	bd80      	pop	{r7, pc}
 8013de8:	20006c30 	.word	0x20006c30
 8013dec:	0801e404 	.word	0x0801e404
 8013df0:	20006c2c 	.word	0x20006c2c

08013df4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013df4:	b480      	push	{r7}
 8013df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013df8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e02:	4770      	bx	lr

08013e04 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b082      	sub	sp, #8
 8013e08:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013e12:	4806      	ldr	r0, [pc, #24]	; (8013e2c <BSP_PlatformIsDetected+0x28>)
 8013e14:	f7f3 fd3e 	bl	8007894 <HAL_GPIO_ReadPin>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d001      	beq.n	8013e22 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8013e22:	79fb      	ldrb	r3, [r7, #7]
}  
 8013e24:	4618      	mov	r0, r3
 8013e26:	3708      	adds	r7, #8
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	40020000 	.word	0x40020000

08013e30 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8013e30:	b480      	push	{r7}
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e42:	4770      	bx	lr

08013e44 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8013e44:	b480      	push	{r7}
 8013e46:	af00      	add	r7, sp, #0
 8013e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e4e:	4a04      	ldr	r2, [pc, #16]	; (8013e60 <millis+0x1c>)
 8013e50:	fba2 2303 	umull	r2, r3, r2, r3
 8013e54:	099b      	lsrs	r3, r3, #6
 8013e56:	4618      	mov	r0, r3
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr
 8013e60:	10624dd3 	.word	0x10624dd3

08013e64 <getTime>:
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b08c      	sub	sp, #48	; 0x30
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8013e6c:	f107 031c 	add.w	r3, r7, #28
 8013e70:	2200      	movs	r2, #0
 8013e72:	601a      	str	r2, [r3, #0]
 8013e74:	605a      	str	r2, [r3, #4]
 8013e76:	609a      	str	r2, [r3, #8]
 8013e78:	60da      	str	r2, [r3, #12]
 8013e7a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8013e80:	f107 030c 	add.w	r3, r7, #12
 8013e84:	2200      	movs	r2, #0
 8013e86:	601a      	str	r2, [r3, #0]
 8013e88:	605a      	str	r2, [r3, #4]
 8013e8a:	811a      	strh	r2, [r3, #8]
	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8013e8c:	f001 fea0 	bl	8015bd0 <Get_RTC_Instance>
 8013e90:	f107 031c 	add.w	r3, r7, #28
 8013e94:	2200      	movs	r2, #0
 8013e96:	4619      	mov	r1, r3
 8013e98:	f7f6 fbcf 	bl	800a63a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8013e9c:	f001 fe98 	bl	8015bd0 <Get_RTC_Instance>
 8013ea0:	f107 0318 	add.w	r3, r7, #24
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	f7f6 fc25 	bl	800a6f6 <HAL_RTC_GetDate>
	toReturn.year = rtc_date.Year;
 8013eac:	7efb      	ldrb	r3, [r7, #27]
 8013eae:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8013eb0:	7e7b      	ldrb	r3, [r7, #25]
 8013eb2:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 8013eb4:	7ebb      	ldrb	r3, [r7, #26]
 8013eb6:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8013eb8:	7e3b      	ldrb	r3, [r7, #24]
 8013eba:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8013ebc:	7f3b      	ldrb	r3, [r7, #28]
 8013ebe:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8013ec0:	7f7b      	ldrb	r3, [r7, #29]
 8013ec2:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8013ec4:	7fbb      	ldrb	r3, [r7, #30]
 8013ec6:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8013ec8:	f7ff ffbc 	bl	8013e44 <millis>
 8013ecc:	4602      	mov	r2, r0
 8013ece:	4b0c      	ldr	r3, [pc, #48]	; (8013f00 <getTime+0x9c>)
 8013ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8013ed4:	099b      	lsrs	r3, r3, #6
 8013ed6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013eda:	fb01 f303 	mul.w	r3, r1, r3
 8013ede:	1ad3      	subs	r3, r2, r3
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	82bb      	strh	r3, [r7, #20]
	return toReturn;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	461a      	mov	r2, r3
 8013ee8:	f107 030c 	add.w	r3, r7, #12
 8013eec:	cb03      	ldmia	r3!, {r0, r1}
 8013eee:	6010      	str	r0, [r2, #0]
 8013ef0:	6051      	str	r1, [r2, #4]
 8013ef2:	881b      	ldrh	r3, [r3, #0]
 8013ef4:	8113      	strh	r3, [r2, #8]
}
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	3730      	adds	r7, #48	; 0x30
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}
 8013efe:	bf00      	nop
 8013f00:	10624dd3 	.word	0x10624dd3

08013f04 <print>:
{
 8013f04:	b40f      	push	{r0, r1, r2, r3}
 8013f06:	b580      	push	{r7, lr}
 8013f08:	b084      	sub	sp, #16
 8013f0a:	af00      	add	r7, sp, #0
	if (usbPresent)
 8013f0c:	4b1f      	ldr	r3, [pc, #124]	; (8013f8c <print+0x88>)
 8013f0e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8013f12:	2b03      	cmp	r3, #3
 8013f14:	d131      	bne.n	8013f7a <print+0x76>
		writePin(LEDD, HIGH);
 8013f16:	2201      	movs	r2, #1
 8013f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013f1c:	481c      	ldr	r0, [pc, #112]	; (8013f90 <print+0x8c>)
 8013f1e:	f7f3 fcd1 	bl	80078c4 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 8013f22:	f107 031c 	add.w	r3, r7, #28
 8013f26:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	69b9      	ldr	r1, [r7, #24]
 8013f2c:	4819      	ldr	r0, [pc, #100]	; (8013f94 <print+0x90>)
 8013f2e:	f005 f829 	bl	8018f84 <vsiprintf>
 8013f32:	4603      	mov	r3, r0
 8013f34:	461a      	mov	r2, r3
 8013f36:	4b18      	ldr	r3, [pc, #96]	; (8013f98 <print+0x94>)
 8013f38:	601a      	str	r2, [r3, #0]
		uint32_t printStart = micros();
 8013f3a:	f7ff ff79 	bl	8013e30 <micros>
 8013f3e:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8013f40:	4b15      	ldr	r3, [pc, #84]	; (8013f98 <print+0x94>)
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	4613      	mov	r3, r2
 8013f46:	009b      	lsls	r3, r3, #2
 8013f48:	4413      	add	r3, r2
 8013f4a:	005b      	lsls	r3, r3, #1
 8013f4c:	3346      	adds	r3, #70	; 0x46
 8013f4e:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8013f50:	e001      	b.n	8013f56 <print+0x52>
			if (micros() - printStart > timeout && false)
 8013f52:	f7ff ff6d 	bl	8013e30 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8013f56:	4b10      	ldr	r3, [pc, #64]	; (8013f98 <print+0x94>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	4619      	mov	r1, r3
 8013f5e:	480d      	ldr	r0, [pc, #52]	; (8013f94 <print+0x90>)
 8013f60:	f002 fd04 	bl	801696c <CDC_Transmit_FS>
 8013f64:	4603      	mov	r3, r0
 8013f66:	2b01      	cmp	r3, #1
 8013f68:	d0f3      	beq.n	8013f52 <print+0x4e>
		writePin(LEDD, LOW);
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013f70:	4807      	ldr	r0, [pc, #28]	; (8013f90 <print+0x8c>)
 8013f72:	f7f3 fca7 	bl	80078c4 <HAL_GPIO_WritePin>
		return true;
 8013f76:	2301      	movs	r3, #1
 8013f78:	e000      	b.n	8013f7c <print+0x78>
	return false;
 8013f7a:	2300      	movs	r3, #0
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	3710      	adds	r7, #16
 8013f80:	46bd      	mov	sp, r7
 8013f82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013f86:	b004      	add	sp, #16
 8013f88:	4770      	bx	lr
 8013f8a:	bf00      	nop
 8013f8c:	20000e3c 	.word	0x20000e3c
 8013f90:	40020400 	.word	0x40020400
 8013f94:	20000a28 	.word	0x20000a28
 8013f98:	20000a24 	.word	0x20000a24

08013f9c <println>:
{
 8013f9c:	b40f      	push	{r0, r1, r2, r3}
 8013f9e:	b580      	push	{r7, lr}
 8013fa0:	b084      	sub	sp, #16
 8013fa2:	af00      	add	r7, sp, #0
	if (usbPresent)
 8013fa4:	4b2a      	ldr	r3, [pc, #168]	; (8014050 <println+0xb4>)
 8013fa6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8013faa:	2b03      	cmp	r3, #3
 8013fac:	d147      	bne.n	801403e <println+0xa2>
		writePin(LEDD, HIGH);
 8013fae:	2201      	movs	r2, #1
 8013fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013fb4:	4827      	ldr	r0, [pc, #156]	; (8014054 <println+0xb8>)
 8013fb6:	f7f3 fc85 	bl	80078c4 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 8013fba:	f107 031c 	add.w	r3, r7, #28
 8013fbe:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8013fc0:	687a      	ldr	r2, [r7, #4]
 8013fc2:	69b9      	ldr	r1, [r7, #24]
 8013fc4:	4824      	ldr	r0, [pc, #144]	; (8014058 <println+0xbc>)
 8013fc6:	f004 ffdd 	bl	8018f84 <vsiprintf>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	461a      	mov	r2, r3
 8013fce:	4b23      	ldr	r3, [pc, #140]	; (801405c <println+0xc0>)
 8013fd0:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 8013fd2:	4b22      	ldr	r3, [pc, #136]	; (801405c <println+0xc0>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	4a20      	ldr	r2, [pc, #128]	; (8014058 <println+0xbc>)
 8013fd8:	210d      	movs	r1, #13
 8013fda:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 8013fdc:	4b1f      	ldr	r3, [pc, #124]	; (801405c <println+0xc0>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	3301      	adds	r3, #1
 8013fe2:	4a1d      	ldr	r2, [pc, #116]	; (8014058 <println+0xbc>)
 8013fe4:	210a      	movs	r1, #10
 8013fe6:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8013fe8:	4b1c      	ldr	r3, [pc, #112]	; (801405c <println+0xc0>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	3302      	adds	r3, #2
 8013fee:	4a1a      	ldr	r2, [pc, #104]	; (8014058 <println+0xbc>)
 8013ff0:	2100      	movs	r1, #0
 8013ff2:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8013ff4:	4b19      	ldr	r3, [pc, #100]	; (801405c <println+0xc0>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	3303      	adds	r3, #3
 8013ffa:	4a18      	ldr	r2, [pc, #96]	; (801405c <println+0xc0>)
 8013ffc:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 8013ffe:	f7ff ff17 	bl	8013e30 <micros>
 8014002:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8014004:	4b15      	ldr	r3, [pc, #84]	; (801405c <println+0xc0>)
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	4613      	mov	r3, r2
 801400a:	009b      	lsls	r3, r3, #2
 801400c:	4413      	add	r3, r2
 801400e:	005b      	lsls	r3, r3, #1
 8014010:	3346      	adds	r3, #70	; 0x46
 8014012:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8014014:	e001      	b.n	801401a <println+0x7e>
			if (micros() - printStart > timeout && false)
 8014016:	f7ff ff0b 	bl	8013e30 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 801401a:	4b10      	ldr	r3, [pc, #64]	; (801405c <println+0xc0>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	b29b      	uxth	r3, r3
 8014020:	4619      	mov	r1, r3
 8014022:	480d      	ldr	r0, [pc, #52]	; (8014058 <println+0xbc>)
 8014024:	f002 fca2 	bl	801696c <CDC_Transmit_FS>
 8014028:	4603      	mov	r3, r0
 801402a:	2b01      	cmp	r3, #1
 801402c:	d0f3      	beq.n	8014016 <println+0x7a>
		writePin(LEDD, LOW);
 801402e:	2200      	movs	r2, #0
 8014030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014034:	4807      	ldr	r0, [pc, #28]	; (8014054 <println+0xb8>)
 8014036:	f7f3 fc45 	bl	80078c4 <HAL_GPIO_WritePin>
		return true;
 801403a:	2301      	movs	r3, #1
 801403c:	e000      	b.n	8014040 <println+0xa4>
	return false;
 801403e:	2300      	movs	r3, #0
}
 8014040:	4618      	mov	r0, r3
 8014042:	3710      	adds	r7, #16
 8014044:	46bd      	mov	sp, r7
 8014046:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801404a:	b004      	add	sp, #16
 801404c:	4770      	bx	lr
 801404e:	bf00      	nop
 8014050:	20000e3c 	.word	0x20000e3c
 8014054:	40020400 	.word	0x40020400
 8014058:	20000a28 	.word	0x20000a28
 801405c:	20000a24 	.word	0x20000a24

08014060 <sdTest_begin>:
#include "sd.h"

bool sdActive;

static bool sdTest_begin(void)
{
 8014060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014062:	b091      	sub	sp, #68	; 0x44
 8014064:	af06      	add	r7, sp, #24
	if (SD_init() == FR_OK)
 8014066:	f7ed f925 	bl	80012b4 <SD_init>
 801406a:	4603      	mov	r3, r0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d172      	bne.n	8014156 <sdTest_begin+0xf6>
	{
		println("[SD] Detected");
 8014070:	4841      	ldr	r0, [pc, #260]	; (8014178 <sdTest_begin+0x118>)
 8014072:	f7ff ff93 	bl	8013f9c <println>
		print("[SD] Creating test file...");
 8014076:	4841      	ldr	r0, [pc, #260]	; (801417c <sdTest_begin+0x11c>)
 8014078:	f7ff ff44 	bl	8013f04 <print>
		if (SD_newFile("/TEST.TXT") == FR_OK)
 801407c:	4840      	ldr	r0, [pc, #256]	; (8014180 <sdTest_begin+0x120>)
 801407e:	f7ed f955 	bl	800132c <SD_newFile>
 8014082:	4603      	mov	r3, r0
 8014084:	2b00      	cmp	r3, #0
 8014086:	d161      	bne.n	801414c <sdTest_begin+0xec>
		{
			println("successful.");
 8014088:	483e      	ldr	r0, [pc, #248]	; (8014184 <sdTest_begin+0x124>)
 801408a:	f7ff ff87 	bl	8013f9c <println>
			bool status = true;
 801408e:	2301      	movs	r3, #1
 8014090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status |= (SD_writeToFile("/TEST.TXT", "Created on: ") == FR_OK);
 8014094:	493c      	ldr	r1, [pc, #240]	; (8014188 <sdTest_begin+0x128>)
 8014096:	483a      	ldr	r0, [pc, #232]	; (8014180 <sdTest_begin+0x120>)
 8014098:	f7ed f970 	bl	800137c <SD_writeToFile>
 801409c:	4603      	mov	r3, r0
 801409e:	2b00      	cmp	r3, #0
 80140a0:	bf0c      	ite	eq
 80140a2:	2301      	moveq	r3, #1
 80140a4:	2300      	movne	r3, #0
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	461a      	mov	r2, r3
 80140aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140ae:	4313      	orrs	r3, r2
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	bf14      	ite	ne
 80140b4:	2301      	movne	r3, #1
 80140b6:	2300      	moveq	r3, #0
 80140b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			DateTime fileCreated = getTime();
 80140bc:	f107 031c 	add.w	r3, r7, #28
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7ff fecf 	bl	8013e64 <getTime>
			char dateStr[26] = {0};
 80140c6:	463b      	mov	r3, r7
 80140c8:	2200      	movs	r2, #0
 80140ca:	601a      	str	r2, [r3, #0]
 80140cc:	605a      	str	r2, [r3, #4]
 80140ce:	609a      	str	r2, [r3, #8]
 80140d0:	60da      	str	r2, [r3, #12]
 80140d2:	611a      	str	r2, [r3, #16]
 80140d4:	615a      	str	r2, [r3, #20]
 80140d6:	831a      	strh	r2, [r3, #24]
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 80140d8:	7fbb      	ldrb	r3, [r7, #30]
 80140da:	461e      	mov	r6, r3
 80140dc:	7f7b      	ldrb	r3, [r7, #29]
 80140de:	469c      	mov	ip, r3
 80140e0:	7f3b      	ldrb	r3, [r7, #28]
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 80140e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80140e6:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80140ea:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 80140ee:	4604      	mov	r4, r0
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 80140f0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 80140f2:	4605      	mov	r5, r0
 80140f4:	4638      	mov	r0, r7
 80140f6:	9504      	str	r5, [sp, #16]
 80140f8:	9403      	str	r4, [sp, #12]
 80140fa:	9102      	str	r1, [sp, #8]
 80140fc:	9201      	str	r2, [sp, #4]
 80140fe:	9300      	str	r3, [sp, #0]
 8014100:	4663      	mov	r3, ip
 8014102:	4632      	mov	r2, r6
 8014104:	4921      	ldr	r1, [pc, #132]	; (801418c <sdTest_begin+0x12c>)
 8014106:	f003 ffe3 	bl	80180d0 <siprintf>

			status |= (SD_writeToFile("/TEST.TXT", dateStr) == FR_OK);
 801410a:	463b      	mov	r3, r7
 801410c:	4619      	mov	r1, r3
 801410e:	481c      	ldr	r0, [pc, #112]	; (8014180 <sdTest_begin+0x120>)
 8014110:	f7ed f934 	bl	800137c <SD_writeToFile>
 8014114:	4603      	mov	r3, r0
 8014116:	2b00      	cmp	r3, #0
 8014118:	bf0c      	ite	eq
 801411a:	2301      	moveq	r3, #1
 801411c:	2300      	movne	r3, #0
 801411e:	b2db      	uxtb	r3, r3
 8014120:	461a      	mov	r2, r3
 8014122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014126:	4313      	orrs	r3, r2
 8014128:	2b00      	cmp	r3, #0
 801412a:	bf14      	ite	ne
 801412c:	2301      	movne	r3, #1
 801412e:	2300      	moveq	r3, #0
 8014130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (status) println("[SD] Content writing successful!");
 8014134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014138:	2b00      	cmp	r3, #0
 801413a:	d003      	beq.n	8014144 <sdTest_begin+0xe4>
 801413c:	4814      	ldr	r0, [pc, #80]	; (8014190 <sdTest_begin+0x130>)
 801413e:	f7ff ff2d 	bl	8013f9c <println>
 8014142:	e010      	b.n	8014166 <sdTest_begin+0x106>
			else println("[SD] Content writing unsuccessful!");
 8014144:	4813      	ldr	r0, [pc, #76]	; (8014194 <sdTest_begin+0x134>)
 8014146:	f7ff ff29 	bl	8013f9c <println>
 801414a:	e00c      	b.n	8014166 <sdTest_begin+0x106>
		}
		else
		{
			println("unsuccessful :(");
 801414c:	4812      	ldr	r0, [pc, #72]	; (8014198 <sdTest_begin+0x138>)
 801414e:	f7ff ff25 	bl	8013f9c <println>
			return false;
 8014152:	2300      	movs	r3, #0
 8014154:	e00b      	b.n	801416e <sdTest_begin+0x10e>
		}
	}
	else
	{
		println("[SD] Init fail!");
 8014156:	4811      	ldr	r0, [pc, #68]	; (801419c <sdTest_begin+0x13c>)
 8014158:	f7ff ff20 	bl	8013f9c <println>
		sdActive = false;
 801415c:	4b10      	ldr	r3, [pc, #64]	; (80141a0 <sdTest_begin+0x140>)
 801415e:	2200      	movs	r2, #0
 8014160:	701a      	strb	r2, [r3, #0]
		return false;
 8014162:	2300      	movs	r3, #0
 8014164:	e003      	b.n	801416e <sdTest_begin+0x10e>
	}

	sdActive = true;
 8014166:	4b0e      	ldr	r3, [pc, #56]	; (80141a0 <sdTest_begin+0x140>)
 8014168:	2201      	movs	r2, #1
 801416a:	701a      	strb	r2, [r3, #0]
	return true;
 801416c:	2301      	movs	r3, #1
}
 801416e:	4618      	mov	r0, r3
 8014170:	372c      	adds	r7, #44	; 0x2c
 8014172:	46bd      	mov	sp, r7
 8014174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014176:	bf00      	nop
 8014178:	0801dfb4 	.word	0x0801dfb4
 801417c:	0801dfc4 	.word	0x0801dfc4
 8014180:	0801dfe0 	.word	0x0801dfe0
 8014184:	0801dfec 	.word	0x0801dfec
 8014188:	0801dff8 	.word	0x0801dff8
 801418c:	0801e008 	.word	0x0801e008
 8014190:	0801e020 	.word	0x0801e020
 8014194:	0801e044 	.word	0x0801e044
 8014198:	0801e068 	.word	0x0801e068
 801419c:	0801e078 	.word	0x0801e078
 80141a0:	20006800 	.word	0x20006800

080141a4 <duplex_begin>:
bool isReceiving;
bool firstTransmission;
uint8_t packetNumber;

static bool duplex_begin(void)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b082      	sub	sp, #8
 80141a8:	af00      	add	r7, sp, #0
	radio.reset = LR_RESET_Pin;
 80141aa:	4b26      	ldr	r3, [pc, #152]	; (8014244 <duplex_begin+0xa0>)
 80141ac:	2220      	movs	r2, #32
 80141ae:	81da      	strh	r2, [r3, #14]
	radio.dio0 = LR_DIO0_Pin;
 80141b0:	4b24      	ldr	r3, [pc, #144]	; (8014244 <duplex_begin+0xa0>)
 80141b2:	2240      	movs	r2, #64	; 0x40
 80141b4:	821a      	strh	r2, [r3, #16]
	radio.nss = LR_NSS_Pin;
 80141b6:	4b23      	ldr	r3, [pc, #140]	; (8014244 <duplex_begin+0xa0>)
 80141b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141bc:	825a      	strh	r2, [r3, #18]
	radio.rxtim = LR_TIM_Pin;
 80141be:	4b21      	ldr	r3, [pc, #132]	; (8014244 <duplex_begin+0xa0>)
 80141c0:	2280      	movs	r2, #128	; 0x80
 80141c2:	829a      	strh	r2, [r3, #20]
	radio.reset_port = LR_RESET_GPIO_Port;
 80141c4:	4b1f      	ldr	r3, [pc, #124]	; (8014244 <duplex_begin+0xa0>)
 80141c6:	4a20      	ldr	r2, [pc, #128]	; (8014248 <duplex_begin+0xa4>)
 80141c8:	619a      	str	r2, [r3, #24]
	radio.dio0_port = LR_DIO0_GPIO_Port;
 80141ca:	4b1e      	ldr	r3, [pc, #120]	; (8014244 <duplex_begin+0xa0>)
 80141cc:	4a1f      	ldr	r2, [pc, #124]	; (801424c <duplex_begin+0xa8>)
 80141ce:	61da      	str	r2, [r3, #28]
	radio.nss_port = LR_NSS_GPIO_Port;
 80141d0:	4b1c      	ldr	r3, [pc, #112]	; (8014244 <duplex_begin+0xa0>)
 80141d2:	4a1f      	ldr	r2, [pc, #124]	; (8014250 <duplex_begin+0xac>)
 80141d4:	621a      	str	r2, [r3, #32]
	radio.rxtim_port = LR_TIM_GPIO_Port;
 80141d6:	4b1b      	ldr	r3, [pc, #108]	; (8014244 <duplex_begin+0xa0>)
 80141d8:	4a1c      	ldr	r2, [pc, #112]	; (801424c <duplex_begin+0xa8>)
 80141da:	625a      	str	r2, [r3, #36]	; 0x24
	radio.spi = Get_SPI1_Instance();
 80141dc:	f001 fce4 	bl	8015ba8 <Get_SPI1_Instance>
 80141e0:	4602      	mov	r2, r0
 80141e2:	4b18      	ldr	r3, [pc, #96]	; (8014244 <duplex_begin+0xa0>)
 80141e4:	629a      	str	r2, [r3, #40]	; 0x28
	radio.config = sx1278_default_config;
 80141e6:	4b17      	ldr	r3, [pc, #92]	; (8014244 <duplex_begin+0xa0>)
 80141e8:	4a1a      	ldr	r2, [pc, #104]	; (8014254 <duplex_begin+0xb0>)
 80141ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80141ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	radio.useDio0IRQ = true;
 80141f0:	4b14      	ldr	r3, [pc, #80]	; (8014244 <duplex_begin+0xa0>)
 80141f2:	2201      	movs	r2, #1
 80141f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	uint8_t attempts = 0;
 80141f8:	2300      	movs	r3, #0
 80141fa:	71fb      	strb	r3, [r7, #7]

	while (!SX1278_init(&radio))
 80141fc:	e00b      	b.n	8014216 <duplex_begin+0x72>
	{
		HAL_Delay(500);
 80141fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014202:	f7f2 fce1 	bl	8006bc8 <HAL_Delay>
		if (DUPLEX_DEBUG) println("[LoRa] Init unsuccessful, retrying...");
		attempts++;
 8014206:	79fb      	ldrb	r3, [r7, #7]
 8014208:	3301      	adds	r3, #1
 801420a:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 801420c:	79fb      	ldrb	r3, [r7, #7]
 801420e:	2b04      	cmp	r3, #4
 8014210:	d901      	bls.n	8014216 <duplex_begin+0x72>
		{
			if (DUPLEX_DEBUG) println("[LoRa] Too many attempts, Radio is not active!");
			return false;
 8014212:	2300      	movs	r3, #0
 8014214:	e011      	b.n	801423a <duplex_begin+0x96>
	while (!SX1278_init(&radio))
 8014216:	480b      	ldr	r0, [pc, #44]	; (8014244 <duplex_begin+0xa0>)
 8014218:	f7ed fa0e 	bl	8001638 <SX1278_init>
 801421c:	4603      	mov	r3, r0
 801421e:	f083 0301 	eor.w	r3, r3, #1
 8014222:	b2db      	uxtb	r3, r3
 8014224:	2b00      	cmp	r3, #0
 8014226:	d1ea      	bne.n	80141fe <duplex_begin+0x5a>
		}
	}
	if (DUPLEX_DEBUG) println("[LoRa] Radio successful init!");
	packetNumber = 1;
 8014228:	4b0b      	ldr	r3, [pc, #44]	; (8014258 <duplex_begin+0xb4>)
 801422a:	2201      	movs	r2, #1
 801422c:	701a      	strb	r2, [r3, #0]
	firstTransmission = true;
 801422e:	4b0b      	ldr	r3, [pc, #44]	; (801425c <duplex_begin+0xb8>)
 8014230:	2201      	movs	r2, #1
 8014232:	701a      	strb	r2, [r3, #0]
	isReceiving = false;
 8014234:	4b0a      	ldr	r3, [pc, #40]	; (8014260 <duplex_begin+0xbc>)
 8014236:	2200      	movs	r2, #0
 8014238:	701a      	strb	r2, [r3, #0]
}
 801423a:	4618      	mov	r0, r3
 801423c:	3708      	adds	r7, #8
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}
 8014242:	bf00      	nop
 8014244:	2000314c 	.word	0x2000314c
 8014248:	40020800 	.word	0x40020800
 801424c:	40020000 	.word	0x40020000
 8014250:	40020400 	.word	0x40020400
 8014254:	2000011c 	.word	0x2000011c
 8014258:	200067f8 	.word	0x200067f8
 801425c:	200049d4 	.word	0x200049d4
 8014260:	20006c20 	.word	0x20006c20

08014264 <duplex_checkINT>:

static bool duplex_checkINT()
{
 8014264:	b580      	push	{r7, lr}
 8014266:	af00      	add	r7, sp, #0
	return (firstTransmission || (radio.pendingIRQ && HAL_GPIO_ReadPin(radio.dio0_port, radio.dio0) == GPIO_PIN_SET) || SX1278_intTimeout(&radio));
 8014268:	4b10      	ldr	r3, [pc, #64]	; (80142ac <duplex_checkINT+0x48>)
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d115      	bne.n	801429c <duplex_checkINT+0x38>
 8014270:	4b0f      	ldr	r3, [pc, #60]	; (80142b0 <duplex_checkINT+0x4c>)
 8014272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014276:	2b00      	cmp	r3, #0
 8014278:	d00a      	beq.n	8014290 <duplex_checkINT+0x2c>
 801427a:	4b0d      	ldr	r3, [pc, #52]	; (80142b0 <duplex_checkINT+0x4c>)
 801427c:	69da      	ldr	r2, [r3, #28]
 801427e:	4b0c      	ldr	r3, [pc, #48]	; (80142b0 <duplex_checkINT+0x4c>)
 8014280:	8a1b      	ldrh	r3, [r3, #16]
 8014282:	4619      	mov	r1, r3
 8014284:	4610      	mov	r0, r2
 8014286:	f7f3 fb05 	bl	8007894 <HAL_GPIO_ReadPin>
 801428a:	4603      	mov	r3, r0
 801428c:	2b01      	cmp	r3, #1
 801428e:	d005      	beq.n	801429c <duplex_checkINT+0x38>
 8014290:	4807      	ldr	r0, [pc, #28]	; (80142b0 <duplex_checkINT+0x4c>)
 8014292:	f7ed fd0e 	bl	8001cb2 <SX1278_intTimeout>
 8014296:	4603      	mov	r3, r0
 8014298:	2b00      	cmp	r3, #0
 801429a:	d001      	beq.n	80142a0 <duplex_checkINT+0x3c>
 801429c:	2301      	movs	r3, #1
 801429e:	e000      	b.n	80142a2 <duplex_checkINT+0x3e>
 80142a0:	2300      	movs	r3, #0
 80142a2:	f003 0301 	and.w	r3, r3, #1
 80142a6:	b2db      	uxtb	r3, r3
}
 80142a8:	4618      	mov	r0, r3
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	200049d4 	.word	0x200049d4
 80142b0:	2000314c 	.word	0x2000314c

080142b4 <duplex_loop>:

static bool duplex_loop(uint8_t* buf, uint8_t len, bool externallyInvoked)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
 80142bc:	460b      	mov	r3, r1
 80142be:	70fb      	strb	r3, [r7, #3]
 80142c0:	4613      	mov	r3, r2
 80142c2:	70bb      	strb	r3, [r7, #2]
	if (radio.active)
 80142c4:	4b45      	ldr	r3, [pc, #276]	; (80143dc <duplex_loop+0x128>)
 80142c6:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	f000 8081 	beq.w	80143d2 <duplex_loop+0x11e>
	{
		if (radio.useDio0IRQ)
 80142d0:	4b42      	ldr	r3, [pc, #264]	; (80143dc <duplex_loop+0x128>)
 80142d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d073      	beq.n	80143c2 <duplex_loop+0x10e>
		{
			// manually check for interrupt
			if (externallyInvoked || duplex_checkINT())
 80142da:	78bb      	ldrb	r3, [r7, #2]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d104      	bne.n	80142ea <duplex_loop+0x36>
 80142e0:	f7ff ffc0 	bl	8014264 <duplex_checkINT>
 80142e4:	4603      	mov	r3, r0
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d069      	beq.n	80143be <duplex_loop+0x10a>
			{
				if (!firstTransmission) SX1278_dio0_IRQ(&radio);
 80142ea:	4b3d      	ldr	r3, [pc, #244]	; (80143e0 <duplex_loop+0x12c>)
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	f083 0301 	eor.w	r3, r3, #1
 80142f2:	b2db      	uxtb	r3, r3
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d002      	beq.n	80142fe <duplex_loop+0x4a>
 80142f8:	4838      	ldr	r0, [pc, #224]	; (80143dc <duplex_loop+0x128>)
 80142fa:	f7ed fcad 	bl	8001c58 <SX1278_dio0_IRQ>
				if (packetNumber == 0)
 80142fe:	4b39      	ldr	r3, [pc, #228]	; (80143e4 <duplex_loop+0x130>)
 8014300:	781b      	ldrb	r3, [r3, #0]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d112      	bne.n	801432c <duplex_loop+0x78>
				{
					if (DUPLEX_DEBUG) println("[LoRa] Packet received!");
					if (radio.newPacket)
 8014306:	4b35      	ldr	r3, [pc, #212]	; (80143dc <duplex_loop+0x128>)
 8014308:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801430c:	2b00      	cmp	r3, #0
 801430e:	d003      	beq.n	8014318 <duplex_loop+0x64>
					{
						log_radio(&radio, false);
 8014310:	2100      	movs	r1, #0
 8014312:	4832      	ldr	r0, [pc, #200]	; (80143dc <duplex_loop+0x128>)
 8014314:	f7f2 fb8c 	bl	8006a30 <log_radio>
					}
					else if (radio.rxTimeout)
					{
						if (DUPLEX_DEBUG) println("[LoRa] Receive timeout.");
					}
					HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8014318:	2200      	movs	r2, #0
 801431a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801431e:	4832      	ldr	r0, [pc, #200]	; (80143e8 <duplex_loop+0x134>)
 8014320:	f7f3 fad0 	bl	80078c4 <HAL_GPIO_WritePin>
					isReceiving = false;
 8014324:	4b31      	ldr	r3, [pc, #196]	; (80143ec <duplex_loop+0x138>)
 8014326:	2200      	movs	r2, #0
 8014328:	701a      	strb	r2, [r3, #0]
 801432a:	e003      	b.n	8014334 <duplex_loop+0x80>
						printLen = sprintf(printBuffer, "[LoRa] Input packet length: %d, content: [", len);
						printv(printBuffer, printLen);
						printv(buf, len);
						println("]");
					}
					log_radio(&radio, true);
 801432c:	2101      	movs	r1, #1
 801432e:	482b      	ldr	r0, [pc, #172]	; (80143dc <duplex_loop+0x128>)
 8014330:	f7f2 fb7e 	bl	8006a30 <log_radio>
				}

				if (packetNumber == DUPLEX_TX_COUNT - 1)
 8014334:	4b2b      	ldr	r3, [pc, #172]	; (80143e4 <duplex_loop+0x130>)
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	2b06      	cmp	r3, #6
 801433a:	d10f      	bne.n	801435c <duplex_loop+0xa8>
				{
					SX1278_receive(&radio);
 801433c:	4827      	ldr	r0, [pc, #156]	; (80143dc <duplex_loop+0x128>)
 801433e:	f7ed faaf 	bl	80018a0 <SX1278_receive>
					packetNumber = -1;
 8014342:	4b28      	ldr	r3, [pc, #160]	; (80143e4 <duplex_loop+0x130>)
 8014344:	22ff      	movs	r2, #255	; 0xff
 8014346:	701a      	strb	r2, [r3, #0]
					isReceiving = true;
 8014348:	4b28      	ldr	r3, [pc, #160]	; (80143ec <duplex_loop+0x138>)
 801434a:	2201      	movs	r2, #1
 801434c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_SET);
 801434e:	2201      	movs	r2, #1
 8014350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8014354:	4824      	ldr	r0, [pc, #144]	; (80143e8 <duplex_loop+0x134>)
 8014356:	f7f3 fab5 	bl	80078c4 <HAL_GPIO_WritePin>
 801435a:	e00c      	b.n	8014376 <duplex_loop+0xc2>
				}
				else
				{
					buf[len - 1] = packetNumber;
 801435c:	78fb      	ldrb	r3, [r7, #3]
 801435e:	3b01      	subs	r3, #1
 8014360:	687a      	ldr	r2, [r7, #4]
 8014362:	4413      	add	r3, r2
 8014364:	4a1f      	ldr	r2, [pc, #124]	; (80143e4 <duplex_loop+0x130>)
 8014366:	7812      	ldrb	r2, [r2, #0]
 8014368:	701a      	strb	r2, [r3, #0]
					SX1278_transmit(&radio, buf, len);
 801436a:	78fb      	ldrb	r3, [r7, #3]
 801436c:	461a      	mov	r2, r3
 801436e:	6879      	ldr	r1, [r7, #4]
 8014370:	481a      	ldr	r0, [pc, #104]	; (80143dc <duplex_loop+0x128>)
 8014372:	f7ed fa59 	bl	8001828 <SX1278_transmit>
					if (DUPLEX_DEBUG) println("[LoRa] Packet pushed!");
				}
				firstTransmission = false;
 8014376:	4b1a      	ldr	r3, [pc, #104]	; (80143e0 <duplex_loop+0x12c>)
 8014378:	2200      	movs	r2, #0
 801437a:	701a      	strb	r2, [r3, #0]
				packetNumber++;
 801437c:	4b19      	ldr	r3, [pc, #100]	; (80143e4 <duplex_loop+0x130>)
 801437e:	781b      	ldrb	r3, [r3, #0]
 8014380:	3301      	adds	r3, #1
 8014382:	b2da      	uxtb	r2, r3
 8014384:	4b17      	ldr	r3, [pc, #92]	; (80143e4 <duplex_loop+0x130>)
 8014386:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LEDD_GPIO_Port, LEDD_Pin);
 8014388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801438c:	4816      	ldr	r0, [pc, #88]	; (80143e8 <duplex_loop+0x134>)
 801438e:	f7f3 fab2 	bl	80078f6 <HAL_GPIO_TogglePin>
				return true && !(radio.rxTimeout && isReceiving);
 8014392:	4b12      	ldr	r3, [pc, #72]	; (80143dc <duplex_loop+0x128>)
 8014394:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8014398:	f083 0301 	eor.w	r3, r3, #1
 801439c:	b2db      	uxtb	r3, r3
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d106      	bne.n	80143b0 <duplex_loop+0xfc>
 80143a2:	4b12      	ldr	r3, [pc, #72]	; (80143ec <duplex_loop+0x138>)
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	f083 0301 	eor.w	r3, r3, #1
 80143aa:	b2db      	uxtb	r3, r3
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d001      	beq.n	80143b4 <duplex_loop+0x100>
 80143b0:	2301      	movs	r3, #1
 80143b2:	e000      	b.n	80143b6 <duplex_loop+0x102>
 80143b4:	2300      	movs	r3, #0
 80143b6:	f003 0301 	and.w	r3, r3, #1
 80143ba:	b2db      	uxtb	r3, r3
 80143bc:	e00a      	b.n	80143d4 <duplex_loop+0x120>
			}
			else return false;
 80143be:	2300      	movs	r3, #0
 80143c0:	e008      	b.n	80143d4 <duplex_loop+0x120>
		}
		else
		{
			SX1278_transmit(&radio, buf, len);
 80143c2:	78fb      	ldrb	r3, [r7, #3]
 80143c4:	461a      	mov	r2, r3
 80143c6:	6879      	ldr	r1, [r7, #4]
 80143c8:	4804      	ldr	r0, [pc, #16]	; (80143dc <duplex_loop+0x128>)
 80143ca:	f7ed fa2d 	bl	8001828 <SX1278_transmit>
			if (DUPLEX_DEBUG) println("[LoRa] Transmission finished.");
			return true;
 80143ce:	2301      	movs	r3, #1
 80143d0:	e000      	b.n	80143d4 <duplex_loop+0x120>
		}
	}
	return false;
 80143d2:	2300      	movs	r3, #0
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3708      	adds	r7, #8
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}
 80143dc:	2000314c 	.word	0x2000314c
 80143e0:	200049d4 	.word	0x200049d4
 80143e4:	200067f8 	.word	0x200067f8
 80143e8:	40020400 	.word	0x40020400
 80143ec:	20006c20 	.word	0x20006c20

080143f0 <imuTest_printData>:

MPU9250 mpu;
uint32_t lastPrint;

static void imuTest_printData(void)
{
 80143f0:	b480      	push	{r7}
 80143f2:	af00      	add	r7, sp, #0
	#endif

	#if IMUTEST_PRINT_3DPLOT
	println("w%fwa%fab%fbc%fc%f", mpu.q[0], mpu.q[1], mpu.q[2], mpu.q[3], mpu.alg_deltat);
	#endif
}
 80143f4:	bf00      	nop
 80143f6:	46bd      	mov	sp, r7
 80143f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fc:	4770      	bx	lr
	...

08014400 <imuTest_printBiases>:


static void imuTest_printBiases(void)
{
 8014400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014404:	b084      	sub	sp, #16
 8014406:	af04      	add	r7, sp, #16
	println("accel biases [ms]:\t%f\t%f\t%f", 1000.0 * mpu.accelBias[0], 1000.0 * mpu.accelBias[1], 1000.0 * mpu.accelBias[2]);
 8014408:	4b3a      	ldr	r3, [pc, #232]	; (80144f4 <imuTest_printBiases+0xf4>)
 801440a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801440c:	4618      	mov	r0, r3
 801440e:	f7ec f8ab 	bl	8000568 <__aeabi_f2d>
 8014412:	f04f 0200 	mov.w	r2, #0
 8014416:	4b38      	ldr	r3, [pc, #224]	; (80144f8 <imuTest_printBiases+0xf8>)
 8014418:	f7ec f8fe 	bl	8000618 <__aeabi_dmul>
 801441c:	4603      	mov	r3, r0
 801441e:	460c      	mov	r4, r1
 8014420:	4698      	mov	r8, r3
 8014422:	46a1      	mov	r9, r4
 8014424:	4b33      	ldr	r3, [pc, #204]	; (80144f4 <imuTest_printBiases+0xf4>)
 8014426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014428:	4618      	mov	r0, r3
 801442a:	f7ec f89d 	bl	8000568 <__aeabi_f2d>
 801442e:	f04f 0200 	mov.w	r2, #0
 8014432:	4b31      	ldr	r3, [pc, #196]	; (80144f8 <imuTest_printBiases+0xf8>)
 8014434:	f7ec f8f0 	bl	8000618 <__aeabi_dmul>
 8014438:	4603      	mov	r3, r0
 801443a:	460c      	mov	r4, r1
 801443c:	4625      	mov	r5, r4
 801443e:	461c      	mov	r4, r3
 8014440:	4b2c      	ldr	r3, [pc, #176]	; (80144f4 <imuTest_printBiases+0xf4>)
 8014442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014444:	4618      	mov	r0, r3
 8014446:	f7ec f88f 	bl	8000568 <__aeabi_f2d>
 801444a:	f04f 0200 	mov.w	r2, #0
 801444e:	4b2a      	ldr	r3, [pc, #168]	; (80144f8 <imuTest_printBiases+0xf8>)
 8014450:	f7ec f8e2 	bl	8000618 <__aeabi_dmul>
 8014454:	4602      	mov	r2, r0
 8014456:	460b      	mov	r3, r1
 8014458:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801445c:	e9cd 4500 	strd	r4, r5, [sp]
 8014460:	4642      	mov	r2, r8
 8014462:	464b      	mov	r3, r9
 8014464:	4825      	ldr	r0, [pc, #148]	; (80144fc <imuTest_printBiases+0xfc>)
 8014466:	f7ff fd99 	bl	8013f9c <println>
	println("gyro biases [dps]:\t%f\t%f\t%f", mpu.gyroBias[0], mpu.gyroBias[1], mpu.gyroBias[2]);
 801446a:	4b22      	ldr	r3, [pc, #136]	; (80144f4 <imuTest_printBiases+0xf4>)
 801446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801446e:	4618      	mov	r0, r3
 8014470:	f7ec f87a 	bl	8000568 <__aeabi_f2d>
 8014474:	4680      	mov	r8, r0
 8014476:	4689      	mov	r9, r1
 8014478:	4b1e      	ldr	r3, [pc, #120]	; (80144f4 <imuTest_printBiases+0xf4>)
 801447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801447c:	4618      	mov	r0, r3
 801447e:	f7ec f873 	bl	8000568 <__aeabi_f2d>
 8014482:	4604      	mov	r4, r0
 8014484:	460d      	mov	r5, r1
 8014486:	4b1b      	ldr	r3, [pc, #108]	; (80144f4 <imuTest_printBiases+0xf4>)
 8014488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801448a:	4618      	mov	r0, r3
 801448c:	f7ec f86c 	bl	8000568 <__aeabi_f2d>
 8014490:	4602      	mov	r2, r0
 8014492:	460b      	mov	r3, r1
 8014494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014498:	e9cd 4500 	strd	r4, r5, [sp]
 801449c:	4642      	mov	r2, r8
 801449e:	464b      	mov	r3, r9
 80144a0:	4817      	ldr	r0, [pc, #92]	; (8014500 <imuTest_printBiases+0x100>)
 80144a2:	f7ff fd7b 	bl	8013f9c <println>
	println("mag biases [mG]:\t%f\t%f\t%f", mpu.magBias[0], mpu.magBias[1], mpu.magBias[2]);
 80144a6:	4b13      	ldr	r3, [pc, #76]	; (80144f4 <imuTest_printBiases+0xf4>)
 80144a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7ec f85c 	bl	8000568 <__aeabi_f2d>
 80144b0:	4680      	mov	r8, r0
 80144b2:	4689      	mov	r9, r1
 80144b4:	4b0f      	ldr	r3, [pc, #60]	; (80144f4 <imuTest_printBiases+0xf4>)
 80144b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7ec f855 	bl	8000568 <__aeabi_f2d>
 80144be:	4604      	mov	r4, r0
 80144c0:	460d      	mov	r5, r1
 80144c2:	4b0c      	ldr	r3, [pc, #48]	; (80144f4 <imuTest_printBiases+0xf4>)
 80144c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80144c6:	4618      	mov	r0, r3
 80144c8:	f7ec f84e 	bl	8000568 <__aeabi_f2d>
 80144cc:	4602      	mov	r2, r0
 80144ce:	460b      	mov	r3, r1
 80144d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80144d4:	e9cd 4500 	strd	r4, r5, [sp]
 80144d8:	4642      	mov	r2, r8
 80144da:	464b      	mov	r3, r9
 80144dc:	4809      	ldr	r0, [pc, #36]	; (8014504 <imuTest_printBiases+0x104>)
 80144de:	f7ff fd5d 	bl	8013f9c <println>
	delay(2000);
 80144e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80144e6:	f7f2 fb6f 	bl	8006bc8 <HAL_Delay>
}
 80144ea:	bf00      	nop
 80144ec:	46bd      	mov	sp, r7
 80144ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80144f2:	bf00      	nop
 80144f4:	20006740 	.word	0x20006740
 80144f8:	408f4000 	.word	0x408f4000
 80144fc:	0801e0c8 	.word	0x0801e0c8
 8014500:	0801e0e4 	.word	0x0801e0e4
 8014504:	0801e100 	.word	0x0801e100

08014508 <imuTest_begin>:

static bool imuTest_begin(void)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	af00      	add	r7, sp, #0
	mpu.i2c = Get_I2C1_Instance();
 801450c:	f001 fb42 	bl	8015b94 <Get_I2C1_Instance>
 8014510:	4602      	mov	r2, r0
 8014512:	4b25      	ldr	r3, [pc, #148]	; (80145a8 <imuTest_begin+0xa0>)
 8014514:	601a      	str	r2, [r3, #0]
	mpu.i2c_addr = MPU9250_I2C_ADDRESS;
 8014516:	4b24      	ldr	r3, [pc, #144]	; (80145a8 <imuTest_begin+0xa0>)
 8014518:	22d2      	movs	r2, #210	; 0xd2
 801451a:	711a      	strb	r2, [r3, #4]
	mpu.i2c_addr_ak = AK8963_I2C_ADDRESS;
 801451c:	4b22      	ldr	r3, [pc, #136]	; (80145a8 <imuTest_begin+0xa0>)
 801451e:	2218      	movs	r2, #24
 8014520:	715a      	strb	r2, [r3, #5]

	writePin(LEDB, HIGH);
 8014522:	2201      	movs	r2, #1
 8014524:	2140      	movs	r1, #64	; 0x40
 8014526:	4821      	ldr	r0, [pc, #132]	; (80145ac <imuTest_begin+0xa4>)
 8014528:	f7f3 f9cc 	bl	80078c4 <HAL_GPIO_WritePin>
	MPU9250_init(&mpu, &mpu9250_default_config);
 801452c:	4920      	ldr	r1, [pc, #128]	; (80145b0 <imuTest_begin+0xa8>)
 801452e:	481e      	ldr	r0, [pc, #120]	; (80145a8 <imuTest_begin+0xa0>)
 8014530:	f7ef fd6e 	bl	8004010 <MPU9250_init>
	writePin(LEDB, LOW);
 8014534:	2200      	movs	r2, #0
 8014536:	2140      	movs	r1, #64	; 0x40
 8014538:	481c      	ldr	r0, [pc, #112]	; (80145ac <imuTest_begin+0xa4>)
 801453a:	f7f3 f9c3 	bl	80078c4 <HAL_GPIO_WritePin>

	writePin(LEDA, HIGH);
 801453e:	2201      	movs	r2, #1
 8014540:	2180      	movs	r1, #128	; 0x80
 8014542:	481a      	ldr	r0, [pc, #104]	; (80145ac <imuTest_begin+0xa4>)
 8014544:	f7f3 f9be 	bl	80078c4 <HAL_GPIO_WritePin>
	writePin(LEDB, HIGH);
 8014548:	2201      	movs	r2, #1
 801454a:	2140      	movs	r1, #64	; 0x40
 801454c:	4817      	ldr	r0, [pc, #92]	; (80145ac <imuTest_begin+0xa4>)
 801454e:	f7f3 f9b9 	bl	80078c4 <HAL_GPIO_WritePin>
	writePin(LEDC, HIGH);
 8014552:	2201      	movs	r2, #1
 8014554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8014558:	4816      	ldr	r0, [pc, #88]	; (80145b4 <imuTest_begin+0xac>)
 801455a:	f7f3 f9b3 	bl	80078c4 <HAL_GPIO_WritePin>
	writePin(LEDD, HIGH);
 801455e:	2201      	movs	r2, #1
 8014560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014564:	4813      	ldr	r0, [pc, #76]	; (80145b4 <imuTest_begin+0xac>)
 8014566:	f7f3 f9ad 	bl	80078c4 <HAL_GPIO_WritePin>
	AK8963_init(&mpu, &mpu9250_default_config);
 801456a:	4911      	ldr	r1, [pc, #68]	; (80145b0 <imuTest_begin+0xa8>)
 801456c:	480e      	ldr	r0, [pc, #56]	; (80145a8 <imuTest_begin+0xa0>)
 801456e:	f7ef fe87 	bl	8004280 <AK8963_init>
	writePin(LEDA, LOW);
 8014572:	2200      	movs	r2, #0
 8014574:	2180      	movs	r1, #128	; 0x80
 8014576:	480d      	ldr	r0, [pc, #52]	; (80145ac <imuTest_begin+0xa4>)
 8014578:	f7f3 f9a4 	bl	80078c4 <HAL_GPIO_WritePin>
	writePin(LEDB, LOW);
 801457c:	2200      	movs	r2, #0
 801457e:	2140      	movs	r1, #64	; 0x40
 8014580:	480a      	ldr	r0, [pc, #40]	; (80145ac <imuTest_begin+0xa4>)
 8014582:	f7f3 f99f 	bl	80078c4 <HAL_GPIO_WritePin>
	writePin(LEDC, LOW);
 8014586:	2200      	movs	r2, #0
 8014588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801458c:	4809      	ldr	r0, [pc, #36]	; (80145b4 <imuTest_begin+0xac>)
 801458e:	f7f3 f999 	bl	80078c4 <HAL_GPIO_WritePin>
	writePin(LEDD, LOW);
 8014592:	2200      	movs	r2, #0
 8014594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014598:	4806      	ldr	r0, [pc, #24]	; (80145b4 <imuTest_begin+0xac>)
 801459a:	f7f3 f993 	bl	80078c4 <HAL_GPIO_WritePin>

	imuTest_printBiases();
 801459e:	f7ff ff2f 	bl	8014400 <imuTest_printBiases>
	return false;
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	20006740 	.word	0x20006740
 80145ac:	40020800 	.word	0x40020800
 80145b0:	20000128 	.word	0x20000128
 80145b4:	40020400 	.word	0x40020400

080145b8 <sensing_begin>:
uint32_t lastBmpRead;
uint32_t lastGpsRead;
// (SPS)

static bool sensing_begin(void)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0

	uint8_t attempts = 0;
 80145be:	2300      	movs	r3, #0
 80145c0:	71fb      	strb	r3, [r7, #7]


	attempts = 0;
 80145c2:	2300      	movs	r3, #0
 80145c4:	71fb      	strb	r3, [r7, #7]
	bmp.params = bmp280_default_config;
 80145c6:	4b45      	ldr	r3, [pc, #276]	; (80146dc <sensing_begin+0x124>)
 80145c8:	4a45      	ldr	r2, [pc, #276]	; (80146e0 <sensing_begin+0x128>)
 80145ca:	3306      	adds	r3, #6
 80145cc:	6810      	ldr	r0, [r2, #0]
 80145ce:	6018      	str	r0, [r3, #0]
 80145d0:	7912      	ldrb	r2, [r2, #4]
 80145d2:	711a      	strb	r2, [r3, #4]
	bmp.i2c_addr = BMP280_I2C_ADDRESS;
 80145d4:	4b41      	ldr	r3, [pc, #260]	; (80146dc <sensing_begin+0x124>)
 80145d6:	22ec      	movs	r2, #236	; 0xec
 80145d8:	809a      	strh	r2, [r3, #4]
	bmp.i2c = Get_I2C1_Instance();
 80145da:	f001 fadb 	bl	8015b94 <Get_I2C1_Instance>
 80145de:	4602      	mov	r2, r0
 80145e0:	4b3e      	ldr	r3, [pc, #248]	; (80146dc <sensing_begin+0x124>)
 80145e2:	601a      	str	r2, [r3, #0]
	//unneccessary, to change
	while (!bmp280_init(&bmp, &bmp.params))
 80145e4:	e010      	b.n	8014608 <sensing_begin+0x50>
	{
		HAL_Delay(500);
 80145e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80145ea:	f7f2 faed 	bl	8006bc8 <HAL_Delay>
		if (SENSING_DEBUG) println("[BMP] Init unsuccesfull, retrying...");
 80145ee:	483d      	ldr	r0, [pc, #244]	; (80146e4 <sensing_begin+0x12c>)
 80145f0:	f7ff fcd4 	bl	8013f9c <println>
		attempts++;
 80145f4:	79fb      	ldrb	r3, [r7, #7]
 80145f6:	3301      	adds	r3, #1
 80145f8:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 80145fa:	79fb      	ldrb	r3, [r7, #7]
 80145fc:	2b04      	cmp	r3, #4
 80145fe:	d903      	bls.n	8014608 <sensing_begin+0x50>
		{
			if (SENSING_DEBUG) println("[BMP] Too many attempts, BMP is not active!");
 8014600:	4839      	ldr	r0, [pc, #228]	; (80146e8 <sensing_begin+0x130>)
 8014602:	f7ff fccb 	bl	8013f9c <println>
			//log_print("Unable to init BMP");
			break;
 8014606:	e009      	b.n	801461c <sensing_begin+0x64>
	while (!bmp280_init(&bmp, &bmp.params))
 8014608:	4938      	ldr	r1, [pc, #224]	; (80146ec <sensing_begin+0x134>)
 801460a:	4834      	ldr	r0, [pc, #208]	; (80146dc <sensing_begin+0x124>)
 801460c:	f7ed feef 	bl	80023ee <bmp280_init>
 8014610:	4603      	mov	r3, r0
 8014612:	f083 0301 	eor.w	r3, r3, #1
 8014616:	b2db      	uxtb	r3, r3
 8014618:	2b00      	cmp	r3, #0
 801461a:	d1e4      	bne.n	80145e6 <sensing_begin+0x2e>

	//if (imuTest_begin()) { println("[IMU] Init successful!"); log_print("IMU init success"); }
	//	else { log_print("Unable to init IMU"); }


	attempts = 0;
 801461c:	2300      	movs	r3, #0
 801461e:	71fb      	strb	r3, [r7, #7]
	gps.uart = Get_UART3_Instance();
 8014620:	f001 facc 	bl	8015bbc <Get_UART3_Instance>
 8014624:	4602      	mov	r2, r0
 8014626:	4b32      	ldr	r3, [pc, #200]	; (80146f0 <sensing_begin+0x138>)
 8014628:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	while (!GPS_init(&gps))
 801462c:	e010      	b.n	8014650 <sensing_begin+0x98>
	{
		HAL_Delay(500);
 801462e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014632:	f7f2 fac9 	bl	8006bc8 <HAL_Delay>
		if (SENSING_DEBUG) println("[GPS] Init unsuccessful, retrying...");
 8014636:	482f      	ldr	r0, [pc, #188]	; (80146f4 <sensing_begin+0x13c>)
 8014638:	f7ff fcb0 	bl	8013f9c <println>
		attempts++;
 801463c:	79fb      	ldrb	r3, [r7, #7]
 801463e:	3301      	adds	r3, #1
 8014640:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 8014642:	79fb      	ldrb	r3, [r7, #7]
 8014644:	2b04      	cmp	r3, #4
 8014646:	d903      	bls.n	8014650 <sensing_begin+0x98>
		{
			if (SENSING_DEBUG) println("[GPS] Too many attempts, GPS is not active!");
 8014648:	482b      	ldr	r0, [pc, #172]	; (80146f8 <sensing_begin+0x140>)
 801464a:	f7ff fca7 	bl	8013f9c <println>
			//log_print("Unable to init GPS");
			break;
 801464e:	e008      	b.n	8014662 <sensing_begin+0xaa>
	while (!GPS_init(&gps))
 8014650:	4827      	ldr	r0, [pc, #156]	; (80146f0 <sensing_begin+0x138>)
 8014652:	f7ee f8d5 	bl	8002800 <GPS_init>
 8014656:	4603      	mov	r3, r0
 8014658:	f083 0301 	eor.w	r3, r3, #1
 801465c:	b2db      	uxtb	r3, r3
 801465e:	2b00      	cmp	r3, #0
 8014660:	d1e5      	bne.n	801462e <sensing_begin+0x76>
		}
	}
	gps.active = true;
 8014662:	4b23      	ldr	r3, [pc, #140]	; (80146f0 <sensing_begin+0x138>)
 8014664:	2201      	movs	r2, #1
 8014666:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	mpu.active = true;
 801466a:	4b24      	ldr	r3, [pc, #144]	; (80146fc <sensing_begin+0x144>)
 801466c:	2201      	movs	r2, #1
 801466e:	721a      	strb	r2, [r3, #8]

	imuTest_begin();
 8014670:	f7ff ff4a 	bl	8014508 <imuTest_begin>

	if (SENSING_DEBUG)
	{
		println("Sensor init summary:");
 8014674:	4822      	ldr	r0, [pc, #136]	; (8014700 <sensing_begin+0x148>)
 8014676:	f7ff fc91 	bl	8013f9c <println>
		print("GPS - "); gps.active ? println("active") : println("not active");
 801467a:	4822      	ldr	r0, [pc, #136]	; (8014704 <sensing_begin+0x14c>)
 801467c:	f7ff fc42 	bl	8013f04 <print>
 8014680:	4b1b      	ldr	r3, [pc, #108]	; (80146f0 <sensing_begin+0x138>)
 8014682:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8014686:	2b00      	cmp	r3, #0
 8014688:	d003      	beq.n	8014692 <sensing_begin+0xda>
 801468a:	481f      	ldr	r0, [pc, #124]	; (8014708 <sensing_begin+0x150>)
 801468c:	f7ff fc86 	bl	8013f9c <println>
 8014690:	e002      	b.n	8014698 <sensing_begin+0xe0>
 8014692:	481e      	ldr	r0, [pc, #120]	; (801470c <sensing_begin+0x154>)
 8014694:	f7ff fc82 	bl	8013f9c <println>
		print("BMP - "); bmp.active ? println("active") : println("not active");
 8014698:	481d      	ldr	r0, [pc, #116]	; (8014710 <sensing_begin+0x158>)
 801469a:	f7ff fc33 	bl	8013f04 <print>
 801469e:	4b0f      	ldr	r3, [pc, #60]	; (80146dc <sensing_begin+0x124>)
 80146a0:	7e1b      	ldrb	r3, [r3, #24]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d003      	beq.n	80146ae <sensing_begin+0xf6>
 80146a6:	4818      	ldr	r0, [pc, #96]	; (8014708 <sensing_begin+0x150>)
 80146a8:	f7ff fc78 	bl	8013f9c <println>
 80146ac:	e002      	b.n	80146b4 <sensing_begin+0xfc>
 80146ae:	4817      	ldr	r0, [pc, #92]	; (801470c <sensing_begin+0x154>)
 80146b0:	f7ff fc74 	bl	8013f9c <println>
		print("IMU - "); imu.active ? println("active") : println("not active");
 80146b4:	4817      	ldr	r0, [pc, #92]	; (8014714 <sensing_begin+0x15c>)
 80146b6:	f7ff fc25 	bl	8013f04 <print>
 80146ba:	4b17      	ldr	r3, [pc, #92]	; (8014718 <sensing_begin+0x160>)
 80146bc:	7a1b      	ldrb	r3, [r3, #8]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d003      	beq.n	80146ca <sensing_begin+0x112>
 80146c2:	4811      	ldr	r0, [pc, #68]	; (8014708 <sensing_begin+0x150>)
 80146c4:	f7ff fc6a 	bl	8013f9c <println>
 80146c8:	e002      	b.n	80146d0 <sensing_begin+0x118>
 80146ca:	4810      	ldr	r0, [pc, #64]	; (801470c <sensing_begin+0x154>)
 80146cc:	f7ff fc66 	bl	8013f9c <println>
	}
}
 80146d0:	bf00      	nop
 80146d2:	4618      	mov	r0, r3
 80146d4:	3708      	adds	r7, #8
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}
 80146da:	bf00      	nop
 80146dc:	200049fc 	.word	0x200049fc
 80146e0:	20000168 	.word	0x20000168
 80146e4:	0801e19c 	.word	0x0801e19c
 80146e8:	0801e1c4 	.word	0x0801e1c4
 80146ec:	20004a02 	.word	0x20004a02
 80146f0:	200043b4 	.word	0x200043b4
 80146f4:	0801e1f0 	.word	0x0801e1f0
 80146f8:	0801e218 	.word	0x0801e218
 80146fc:	20006740 	.word	0x20006740
 8014700:	0801e244 	.word	0x0801e244
 8014704:	0801e25c 	.word	0x0801e25c
 8014708:	0801e264 	.word	0x0801e264
 801470c:	0801e26c 	.word	0x0801e26c
 8014710:	0801e278 	.word	0x0801e278
 8014714:	0801e280 	.word	0x0801e280
 8014718:	20004a30 	.word	0x20004a30

0801471c <sensing_loop>:

static void sensing_loop(void)
{
 801471c:	b598      	push	{r3, r4, r7, lr}
 801471e:	af00      	add	r7, sp, #0

	if (gps.active)
 8014720:	4b73      	ldr	r3, [pc, #460]	; (80148f0 <sensing_loop+0x1d4>)
 8014722:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8014726:	2b00      	cmp	r3, #0
 8014728:	d02b      	beq.n	8014782 <sensing_loop+0x66>
	{
		//while (GPS_read(&gps));
		if (GPS_newNMEAreceived(&gps))
 801472a:	4871      	ldr	r0, [pc, #452]	; (80148f0 <sensing_loop+0x1d4>)
 801472c:	f7ef f955 	bl	80039da <GPS_newNMEAreceived>
 8014730:	4603      	mov	r3, r0
 8014732:	2b00      	cmp	r3, #0
 8014734:	d020      	beq.n	8014778 <sensing_loop+0x5c>
		{
			println(GPS_lastNMEA(&gps));
 8014736:	486e      	ldr	r0, [pc, #440]	; (80148f0 <sensing_loop+0x1d4>)
 8014738:	f7ef f95d 	bl	80039f6 <GPS_lastNMEA>
 801473c:	4603      	mov	r3, r0
 801473e:	4618      	mov	r0, r3
 8014740:	f7ff fc2c 	bl	8013f9c <println>
			GPS_parse(&gps, GPS_lastNMEA(&gps));
 8014744:	486a      	ldr	r0, [pc, #424]	; (80148f0 <sensing_loop+0x1d4>)
 8014746:	f7ef f956 	bl	80039f6 <GPS_lastNMEA>
 801474a:	4603      	mov	r3, r0
 801474c:	4619      	mov	r1, r3
 801474e:	4868      	ldr	r0, [pc, #416]	; (80148f0 <sensing_loop+0x1d4>)
 8014750:	f7ee f9fa 	bl	8002b48 <GPS_parse>
			//if (gps.fix) log_gps(&gps);
			if (gps.fix) HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, 1);
 8014754:	4b66      	ldr	r3, [pc, #408]	; (80148f0 <sensing_loop+0x1d4>)
 8014756:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801475a:	2b00      	cmp	r3, #0
 801475c:	d006      	beq.n	801476c <sensing_loop+0x50>
 801475e:	2201      	movs	r2, #1
 8014760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014764:	4863      	ldr	r0, [pc, #396]	; (80148f4 <sensing_loop+0x1d8>)
 8014766:	f7f3 f8ad 	bl	80078c4 <HAL_GPIO_WritePin>
 801476a:	e005      	b.n	8014778 <sensing_loop+0x5c>
			else HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, 0);
 801476c:	2200      	movs	r2, #0
 801476e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014772:	4860      	ldr	r0, [pc, #384]	; (80148f4 <sensing_loop+0x1d8>)
 8014774:	f7f3 f8a6 	bl	80078c4 <HAL_GPIO_WritePin>
		}
		lastGpsRead = millis();
 8014778:	f7ff fb64 	bl	8013e44 <millis>
 801477c:	4602      	mov	r2, r0
 801477e:	4b5e      	ldr	r3, [pc, #376]	; (80148f8 <sensing_loop+0x1dc>)
 8014780:	601a      	str	r2, [r3, #0]
	}


	if (bmp.active && millis() - lastBmpRead >= 50)
 8014782:	4b5e      	ldr	r3, [pc, #376]	; (80148fc <sensing_loop+0x1e0>)
 8014784:	7e1b      	ldrb	r3, [r3, #24]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d01f      	beq.n	80147ca <sensing_loop+0xae>
 801478a:	f7ff fb5b 	bl	8013e44 <millis>
 801478e:	4602      	mov	r2, r0
 8014790:	4b5b      	ldr	r3, [pc, #364]	; (8014900 <sensing_loop+0x1e4>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	1ad3      	subs	r3, r2, r3
 8014796:	2b31      	cmp	r3, #49	; 0x31
 8014798:	d917      	bls.n	80147ca <sensing_loop+0xae>
	{

		//bmp280_read_float(&bmp, tee, pee);
		bmp280_update(&bmp);
 801479a:	4858      	ldr	r0, [pc, #352]	; (80148fc <sensing_loop+0x1e0>)
 801479c:	f7ed fea4 	bl	80024e8 <bmp280_update>
		lastBmpRead = millis();
 80147a0:	f7ff fb50 	bl	8013e44 <millis>
 80147a4:	4602      	mov	r2, r0
 80147a6:	4b56      	ldr	r3, [pc, #344]	; (8014900 <sensing_loop+0x1e4>)
 80147a8:	601a      	str	r2, [r3, #0]
		if (millis() - lastBmpLog >= 100)
 80147aa:	f7ff fb4b 	bl	8013e44 <millis>
 80147ae:	4602      	mov	r2, r0
 80147b0:	4b54      	ldr	r3, [pc, #336]	; (8014904 <sensing_loop+0x1e8>)
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	1ad3      	subs	r3, r2, r3
 80147b6:	2b63      	cmp	r3, #99	; 0x63
 80147b8:	d907      	bls.n	80147ca <sensing_loop+0xae>
		{
			log_bmp(&bmp);
 80147ba:	4850      	ldr	r0, [pc, #320]	; (80148fc <sensing_loop+0x1e0>)
 80147bc:	f7f2 f892 	bl	80068e4 <log_bmp>
			lastBmpLog = millis();
 80147c0:	f7ff fb40 	bl	8013e44 <millis>
 80147c4:	4602      	mov	r2, r0
 80147c6:	4b4f      	ldr	r3, [pc, #316]	; (8014904 <sensing_loop+0x1e8>)
 80147c8:	601a      	str	r2, [r3, #0]
		}
	}


	if (mpu.active)
 80147ca:	4b4f      	ldr	r3, [pc, #316]	; (8014908 <sensing_loop+0x1ec>)
 80147cc:	7a1b      	ldrb	r3, [r3, #8]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d036      	beq.n	8014840 <sensing_loop+0x124>
	{
		if (MPU9250_update(&mpu))
 80147d2:	484d      	ldr	r0, [pc, #308]	; (8014908 <sensing_loop+0x1ec>)
 80147d4:	f7ef fe30 	bl	8004438 <MPU9250_update>
 80147d8:	4603      	mov	r3, r0
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d030      	beq.n	8014840 <sensing_loop+0x124>
		{
			imuTest_printData();
 80147de:	f7ff fe07 	bl	80143f0 <imuTest_printData>
			if (mpu.yaw >= 178.0 && mpu.yaw <= 182.0) writePin(LEDA, HIGH);
 80147e2:	4b49      	ldr	r3, [pc, #292]	; (8014908 <sensing_loop+0x1ec>)
 80147e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80147e8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801490c <sensing_loop+0x1f0>
 80147ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80147f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f4:	db0f      	blt.n	8014816 <sensing_loop+0xfa>
 80147f6:	4b44      	ldr	r3, [pc, #272]	; (8014908 <sensing_loop+0x1ec>)
 80147f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80147fc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8014910 <sensing_loop+0x1f4>
 8014800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014808:	d805      	bhi.n	8014816 <sensing_loop+0xfa>
 801480a:	2201      	movs	r2, #1
 801480c:	2180      	movs	r1, #128	; 0x80
 801480e:	4841      	ldr	r0, [pc, #260]	; (8014914 <sensing_loop+0x1f8>)
 8014810:	f7f3 f858 	bl	80078c4 <HAL_GPIO_WritePin>
 8014814:	e004      	b.n	8014820 <sensing_loop+0x104>
			else writePin(LEDA, LOW);
 8014816:	2200      	movs	r2, #0
 8014818:	2180      	movs	r1, #128	; 0x80
 801481a:	483e      	ldr	r0, [pc, #248]	; (8014914 <sensing_loop+0x1f8>)
 801481c:	f7f3 f852 	bl	80078c4 <HAL_GPIO_WritePin>

			if (millis() - lastImuLog >= 100)
 8014820:	f7ff fb10 	bl	8013e44 <millis>
 8014824:	4602      	mov	r2, r0
 8014826:	4b3c      	ldr	r3, [pc, #240]	; (8014918 <sensing_loop+0x1fc>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	1ad3      	subs	r3, r2, r3
 801482c:	2b63      	cmp	r3, #99	; 0x63
 801482e:	d907      	bls.n	8014840 <sensing_loop+0x124>
			{
				log_imu(&mpu);
 8014830:	4835      	ldr	r0, [pc, #212]	; (8014908 <sensing_loop+0x1ec>)
 8014832:	f7f2 f8a5 	bl	8006980 <log_imu>
				lastImuLog = millis();
 8014836:	f7ff fb05 	bl	8013e44 <millis>
 801483a:	4602      	mov	r2, r0
 801483c:	4b36      	ldr	r3, [pc, #216]	; (8014918 <sensing_loop+0x1fc>)
 801483e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if (millis() - lastDataPrint >= 1000 && SENSING_PRINT_DATA)
 8014840:	f7ff fb00 	bl	8013e44 <millis>
 8014844:	4602      	mov	r2, r0
 8014846:	4b35      	ldr	r3, [pc, #212]	; (801491c <sensing_loop+0x200>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	1ad3      	subs	r3, r2, r3
 801484c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014850:	d34b      	bcc.n	80148ea <sensing_loop+0x1ce>
	{
		if (bmp.active)
 8014852:	4b2a      	ldr	r3, [pc, #168]	; (80148fc <sensing_loop+0x1e0>)
 8014854:	7e1b      	ldrb	r3, [r3, #24]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d017      	beq.n	801488a <sensing_loop+0x16e>
		{
			println("Pressure: %f", bmp.pressure);
 801485a:	4b28      	ldr	r3, [pc, #160]	; (80148fc <sensing_loop+0x1e0>)
 801485c:	68db      	ldr	r3, [r3, #12]
 801485e:	4618      	mov	r0, r3
 8014860:	f7eb fe82 	bl	8000568 <__aeabi_f2d>
 8014864:	4603      	mov	r3, r0
 8014866:	460c      	mov	r4, r1
 8014868:	461a      	mov	r2, r3
 801486a:	4623      	mov	r3, r4
 801486c:	482c      	ldr	r0, [pc, #176]	; (8014920 <sensing_loop+0x204>)
 801486e:	f7ff fb95 	bl	8013f9c <println>
			println("Temperature: %f", bmp.temperature);
 8014872:	4b22      	ldr	r3, [pc, #136]	; (80148fc <sensing_loop+0x1e0>)
 8014874:	691b      	ldr	r3, [r3, #16]
 8014876:	4618      	mov	r0, r3
 8014878:	f7eb fe76 	bl	8000568 <__aeabi_f2d>
 801487c:	4603      	mov	r3, r0
 801487e:	460c      	mov	r4, r1
 8014880:	461a      	mov	r2, r3
 8014882:	4623      	mov	r3, r4
 8014884:	4827      	ldr	r0, [pc, #156]	; (8014924 <sensing_loop+0x208>)
 8014886:	f7ff fb89 	bl	8013f9c <println>
		}
		if (gps.active)
 801488a:	4b19      	ldr	r3, [pc, #100]	; (80148f0 <sensing_loop+0x1d4>)
 801488c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8014890:	2b00      	cmp	r3, #0
 8014892:	d025      	beq.n	80148e0 <sensing_loop+0x1c4>
		{
			if (gps.fix)
 8014894:	4b16      	ldr	r3, [pc, #88]	; (80148f0 <sensing_loop+0x1d4>)
 8014896:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801489a:	2b00      	cmp	r3, #0
 801489c:	d018      	beq.n	80148d0 <sensing_loop+0x1b4>
			{
				println("Latitude: %f", gps.latitudeDegrees);
 801489e:	4b14      	ldr	r3, [pc, #80]	; (80148f0 <sensing_loop+0x1d4>)
 80148a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148a2:	4618      	mov	r0, r3
 80148a4:	f7eb fe60 	bl	8000568 <__aeabi_f2d>
 80148a8:	4603      	mov	r3, r0
 80148aa:	460c      	mov	r4, r1
 80148ac:	461a      	mov	r2, r3
 80148ae:	4623      	mov	r3, r4
 80148b0:	481d      	ldr	r0, [pc, #116]	; (8014928 <sensing_loop+0x20c>)
 80148b2:	f7ff fb73 	bl	8013f9c <println>
				println("Longitude: %f", gps.longitudeDegrees);
 80148b6:	4b0e      	ldr	r3, [pc, #56]	; (80148f0 <sensing_loop+0x1d4>)
 80148b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7eb fe54 	bl	8000568 <__aeabi_f2d>
 80148c0:	4603      	mov	r3, r0
 80148c2:	460c      	mov	r4, r1
 80148c4:	461a      	mov	r2, r3
 80148c6:	4623      	mov	r3, r4
 80148c8:	4818      	ldr	r0, [pc, #96]	; (801492c <sensing_loop+0x210>)
 80148ca:	f7ff fb67 	bl	8013f9c <println>
 80148ce:	e007      	b.n	80148e0 <sensing_loop+0x1c4>
			}
			else
			{
				HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80148d0:	2200      	movs	r2, #0
 80148d2:	2140      	movs	r1, #64	; 0x40
 80148d4:	480f      	ldr	r0, [pc, #60]	; (8014914 <sensing_loop+0x1f8>)
 80148d6:	f7f2 fff5 	bl	80078c4 <HAL_GPIO_WritePin>
				println("GPS has no fix!");
 80148da:	4815      	ldr	r0, [pc, #84]	; (8014930 <sensing_loop+0x214>)
 80148dc:	f7ff fb5e 	bl	8013f9c <println>
			}
		}
		lastDataPrint = millis();
 80148e0:	f7ff fab0 	bl	8013e44 <millis>
 80148e4:	4602      	mov	r2, r0
 80148e6:	4b0d      	ldr	r3, [pc, #52]	; (801491c <sensing_loop+0x200>)
 80148e8:	601a      	str	r2, [r3, #0]
	}
}
 80148ea:	bf00      	nop
 80148ec:	bd98      	pop	{r3, r4, r7, pc}
 80148ee:	bf00      	nop
 80148f0:	200043b4 	.word	0x200043b4
 80148f4:	40020400 	.word	0x40020400
 80148f8:	20004f14 	.word	0x20004f14
 80148fc:	200049fc 	.word	0x200049fc
 8014900:	2000631c 	.word	0x2000631c
 8014904:	20006c24 	.word	0x20006c24
 8014908:	20006740 	.word	0x20006740
 801490c:	43320000 	.word	0x43320000
 8014910:	43360000 	.word	0x43360000
 8014914:	40020800 	.word	0x40020800
 8014918:	20004eec 	.word	0x20004eec
 801491c:	20006818 	.word	0x20006818
 8014920:	0801e288 	.word	0x0801e288
 8014924:	0801e298 	.word	0x0801e298
 8014928:	0801e2a8 	.word	0x0801e2a8
 801492c:	0801e2b8 	.word	0x0801e2b8
 8014930:	0801e2c8 	.word	0x0801e2c8
 8014934:	00000000 	.word	0x00000000

08014938 <algoGalgo>:

uint32_t lastAlgo;
float yaw_last_error;

static void algoGalgo(float yaw, float target_yaw)
{
 8014938:	b5b0      	push	{r4, r5, r7, lr}
 801493a:	ed2d 8b02 	vpush	{d8}
 801493e:	b08c      	sub	sp, #48	; 0x30
 8014940:	af00      	add	r7, sp, #0
 8014942:	ed87 0a01 	vstr	s0, [r7, #4]
 8014946:	edc7 0a00 	vstr	s1, [r7]
	float maxPower = 0.6;	// scale of motor power
 801494a:	4b9f      	ldr	r3, [pc, #636]	; (8014bc8 <algoGalgo+0x290>)
 801494c:	623b      	str	r3, [r7, #32]
	float TurboMode= 50.0;
 801494e:	4b9f      	ldr	r3, [pc, #636]	; (8014bcc <algoGalgo+0x294>)
 8014950:	61fb      	str	r3, [r7, #28]
	// Aim center: yaw = 180*
//	float target_yaw = 180.0;
	float error=target_yaw-yaw;
 8014952:	ed97 7a00 	vldr	s14, [r7]
 8014956:	edd7 7a01 	vldr	s15, [r7, #4]
 801495a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801495e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float thrust;

	if (error<-180.0) //ulomne modulo
 8014962:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014966:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8014bd0 <algoGalgo+0x298>
 801496a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801496e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014972:	d50c      	bpl.n	801498e <algoGalgo+0x56>
		error = target_yaw-yaw+360.0;
 8014974:	ed97 7a00 	vldr	s14, [r7]
 8014978:	edd7 7a01 	vldr	s15, [r7, #4]
 801497c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014980:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8014bd4 <algoGalgo+0x29c>
 8014984:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014988:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801498c:	e014      	b.n	80149b8 <algoGalgo+0x80>
	else if (error>180.0)
 801498e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014992:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8014bd8 <algoGalgo+0x2a0>
 8014996:	eef4 7ac7 	vcmpe.f32	s15, s14
 801499a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801499e:	dd0b      	ble.n	80149b8 <algoGalgo+0x80>
		error = target_yaw-yaw-360.0;
 80149a0:	ed97 7a00 	vldr	s14, [r7]
 80149a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80149a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149ac:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8014bd4 <algoGalgo+0x29c>
 80149b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80149b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	if (error>-10 && error<10)
 80149b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80149bc:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80149c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80149c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c8:	dd0b      	ble.n	80149e2 <algoGalgo+0xaa>
 80149ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80149ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80149d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80149d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149da:	d502      	bpl.n	80149e2 <algoGalgo+0xaa>
		thrust = 340.0;
 80149dc:	4b7f      	ldr	r3, [pc, #508]	; (8014bdc <algoGalgo+0x2a4>)
 80149de:	62bb      	str	r3, [r7, #40]	; 0x28
 80149e0:	e007      	b.n	80149f2 <algoGalgo+0xba>
	else
		thrust = 180.0+TurboMode;
 80149e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80149e6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8014bd8 <algoGalgo+0x2a0>
 80149ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80149ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
//	print("yaw: "); print_float(yaw); println("");

//	print("error: "); print_float(error); println("");
	//print("yaw_last_error: "); print_float(yaw_last_error); println("");

	float kp=1.0; //dobrany
 80149f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80149f6:	61bb      	str	r3, [r7, #24]
//	float ki=0.5;
	float kd=500.0; //dobrany 500 ok - 100ms
 80149f8:	4b79      	ldr	r3, [pc, #484]	; (8014be0 <algoGalgo+0x2a8>)
 80149fa:	617b      	str	r3, [r7, #20]

	float pid_p, pid_i, pid_d;

	pid_p=kp*error;
 80149fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8014a00:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a08:	edc7 7a04 	vstr	s15, [r7, #16]
	pid_d=kd*((error-yaw_last_error)/(millis() - lastAlgo));
 8014a0c:	4b75      	ldr	r3, [pc, #468]	; (8014be4 <algoGalgo+0x2ac>)
 8014a0e:	edd3 7a00 	vldr	s15, [r3]
 8014a12:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014a16:	ee37 8a67 	vsub.f32	s16, s14, s15
 8014a1a:	f7ff fa13 	bl	8013e44 <millis>
 8014a1e:	4602      	mov	r2, r0
 8014a20:	4b71      	ldr	r3, [pc, #452]	; (8014be8 <algoGalgo+0x2b0>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	1ad3      	subs	r3, r2, r3
 8014a26:	ee07 3a90 	vmov	s15, r3
 8014a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014a2e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8014a32:	ed97 7a05 	vldr	s14, [r7, #20]
 8014a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a3a:	edc7 7a03 	vstr	s15, [r7, #12]

	float PID;
//	if (error>-15 && error <15)
//		PID=pid_p+pid_d+pid_i;
//	else
		PID=pid_p+pid_d;
 8014a3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8014a42:	edd7 7a03 	vldr	s15, [r7, #12]
 8014a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if (PID>180.0-TurboMode)
 8014a4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a50:	f7eb fd8a 	bl	8000568 <__aeabi_f2d>
 8014a54:	4604      	mov	r4, r0
 8014a56:	460d      	mov	r5, r1
 8014a58:	69f8      	ldr	r0, [r7, #28]
 8014a5a:	f7eb fd85 	bl	8000568 <__aeabi_f2d>
 8014a5e:	4602      	mov	r2, r0
 8014a60:	460b      	mov	r3, r1
 8014a62:	f04f 0000 	mov.w	r0, #0
 8014a66:	4961      	ldr	r1, [pc, #388]	; (8014bec <algoGalgo+0x2b4>)
 8014a68:	f7eb fc1e 	bl	80002a8 <__aeabi_dsub>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	460b      	mov	r3, r1
 8014a70:	4620      	mov	r0, r4
 8014a72:	4629      	mov	r1, r5
 8014a74:	f7ec f860 	bl	8000b38 <__aeabi_dcmpgt>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d008      	beq.n	8014a90 <algoGalgo+0x158>
			PID=180.0-TurboMode;
 8014a7e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8014bd8 <algoGalgo+0x2a0>
 8014a82:	edd7 7a07 	vldr	s15, [r7, #28]
 8014a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a8a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8014a8e:	e01d      	b.n	8014acc <algoGalgo+0x194>
		else if (PID<-180.0+TurboMode)
 8014a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a92:	f7eb fd69 	bl	8000568 <__aeabi_f2d>
 8014a96:	4604      	mov	r4, r0
 8014a98:	460d      	mov	r5, r1
 8014a9a:	69f8      	ldr	r0, [r7, #28]
 8014a9c:	f7eb fd64 	bl	8000568 <__aeabi_f2d>
 8014aa0:	f04f 0200 	mov.w	r2, #0
 8014aa4:	4b51      	ldr	r3, [pc, #324]	; (8014bec <algoGalgo+0x2b4>)
 8014aa6:	f7eb fbff 	bl	80002a8 <__aeabi_dsub>
 8014aaa:	4602      	mov	r2, r0
 8014aac:	460b      	mov	r3, r1
 8014aae:	4620      	mov	r0, r4
 8014ab0:	4629      	mov	r1, r5
 8014ab2:	f7ec f823 	bl	8000afc <__aeabi_dcmplt>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d007      	beq.n	8014acc <algoGalgo+0x194>
			PID=-180.0+TurboMode;
 8014abc:	edd7 7a07 	vldr	s15, [r7, #28]
 8014ac0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8014bd8 <algoGalgo+0x2a0>
 8014ac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ac8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

//	print("PID: "); print_float(PID); println("");


	setMotors((thrust - PID) * maxPower * (1.0 / 360.0), (thrust + PID) * maxPower * (1.0 / 360.0) * 0.92);
 8014acc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014ad0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014ad4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014ad8:	edd7 7a08 	vldr	s15, [r7, #32]
 8014adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ae0:	ee17 0a90 	vmov	r0, s15
 8014ae4:	f7eb fd40 	bl	8000568 <__aeabi_f2d>
 8014ae8:	a333      	add	r3, pc, #204	; (adr r3, 8014bb8 <algoGalgo+0x280>)
 8014aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aee:	f7eb fd93 	bl	8000618 <__aeabi_dmul>
 8014af2:	4603      	mov	r3, r0
 8014af4:	460c      	mov	r4, r1
 8014af6:	4618      	mov	r0, r3
 8014af8:	4621      	mov	r1, r4
 8014afa:	f7ec f885 	bl	8000c08 <__aeabi_d2f>
 8014afe:	4605      	mov	r5, r0
 8014b00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014b04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014b0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8014b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b14:	ee17 0a90 	vmov	r0, s15
 8014b18:	f7eb fd26 	bl	8000568 <__aeabi_f2d>
 8014b1c:	a326      	add	r3, pc, #152	; (adr r3, 8014bb8 <algoGalgo+0x280>)
 8014b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b22:	f7eb fd79 	bl	8000618 <__aeabi_dmul>
 8014b26:	4603      	mov	r3, r0
 8014b28:	460c      	mov	r4, r1
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	4621      	mov	r1, r4
 8014b2e:	a324      	add	r3, pc, #144	; (adr r3, 8014bc0 <algoGalgo+0x288>)
 8014b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b34:	f7eb fd70 	bl	8000618 <__aeabi_dmul>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	460c      	mov	r4, r1
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	4621      	mov	r1, r4
 8014b40:	f7ec f862 	bl	8000c08 <__aeabi_d2f>
 8014b44:	4603      	mov	r3, r0
 8014b46:	ee00 3a90 	vmov	s1, r3
 8014b4a:	ee00 5a10 	vmov	s0, r5
 8014b4e:	f7ec fae7 	bl	8001120 <setMotors>


//	setMotors((thrust - error) * maxPower * (1.0 / 360.0), (thrust + error) * maxPower * (1.0 / 360.0));

	// Shines purple LED if centered
	if (yaw >= target_yaw-2 && yaw <= target_yaw+2) HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8014b52:	edd7 7a00 	vldr	s15, [r7]
 8014b56:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8014b62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b6a:	db12      	blt.n	8014b92 <algoGalgo+0x25a>
 8014b6c:	edd7 7a00 	vldr	s15, [r7]
 8014b70:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014b74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b78:	ed97 7a01 	vldr	s14, [r7, #4]
 8014b7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b84:	d805      	bhi.n	8014b92 <algoGalgo+0x25a>
 8014b86:	2201      	movs	r2, #1
 8014b88:	2180      	movs	r1, #128	; 0x80
 8014b8a:	4819      	ldr	r0, [pc, #100]	; (8014bf0 <algoGalgo+0x2b8>)
 8014b8c:	f7f2 fe9a 	bl	80078c4 <HAL_GPIO_WritePin>
 8014b90:	e004      	b.n	8014b9c <algoGalgo+0x264>
	else HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8014b92:	2200      	movs	r2, #0
 8014b94:	2180      	movs	r1, #128	; 0x80
 8014b96:	4816      	ldr	r0, [pc, #88]	; (8014bf0 <algoGalgo+0x2b8>)
 8014b98:	f7f2 fe94 	bl	80078c4 <HAL_GPIO_WritePin>

	yaw_last_error=error;
 8014b9c:	4a11      	ldr	r2, [pc, #68]	; (8014be4 <algoGalgo+0x2ac>)
 8014b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ba0:	6013      	str	r3, [r2, #0]
	lastAlgo = millis();
 8014ba2:	f7ff f94f 	bl	8013e44 <millis>
 8014ba6:	4602      	mov	r2, r0
 8014ba8:	4b0f      	ldr	r3, [pc, #60]	; (8014be8 <algoGalgo+0x2b0>)
 8014baa:	601a      	str	r2, [r3, #0]
}
 8014bac:	bf00      	nop
 8014bae:	3730      	adds	r7, #48	; 0x30
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	ecbd 8b02 	vpop	{d8}
 8014bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8014bb8:	16c16c17 	.word	0x16c16c17
 8014bbc:	3f66c16c 	.word	0x3f66c16c
 8014bc0:	d70a3d71 	.word	0xd70a3d71
 8014bc4:	3fed70a3 	.word	0x3fed70a3
 8014bc8:	3f19999a 	.word	0x3f19999a
 8014bcc:	42480000 	.word	0x42480000
 8014bd0:	c3340000 	.word	0xc3340000
 8014bd4:	43b40000 	.word	0x43b40000
 8014bd8:	43340000 	.word	0x43340000
 8014bdc:	43aa0000 	.word	0x43aa0000
 8014be0:	43fa0000 	.word	0x43fa0000
 8014be4:	20003148 	.word	0x20003148
 8014be8:	20003144 	.word	0x20003144
 8014bec:	40668000 	.word	0x40668000
 8014bf0:	40020800 	.word	0x40020800
 8014bf4:	00000000 	.word	0x00000000

08014bf8 <bearing>:

static float bearing(float lat,float lon,float lat2,float lon2){
 8014bf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014bfc:	b08c      	sub	sp, #48	; 0x30
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	ed87 0a03 	vstr	s0, [r7, #12]
 8014c04:	edc7 0a02 	vstr	s1, [r7, #8]
 8014c08:	ed87 1a01 	vstr	s2, [r7, #4]
 8014c0c:	edc7 1a00 	vstr	s3, [r7]
	//lat = your current gps latitude.
	//lon = your current gps longitude.
	//lat2 = your destiny gps latitude.
	//lon2 = your destiny gps longitude.

    float teta1 = lat*M_PI/180;
 8014c10:	68f8      	ldr	r0, [r7, #12]
 8014c12:	f7eb fca9 	bl	8000568 <__aeabi_f2d>
 8014c16:	a39e      	add	r3, pc, #632	; (adr r3, 8014e90 <bearing+0x298>)
 8014c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c1c:	f7eb fcfc 	bl	8000618 <__aeabi_dmul>
 8014c20:	4603      	mov	r3, r0
 8014c22:	460c      	mov	r4, r1
 8014c24:	4618      	mov	r0, r3
 8014c26:	4621      	mov	r1, r4
 8014c28:	f04f 0200 	mov.w	r2, #0
 8014c2c:	4b9c      	ldr	r3, [pc, #624]	; (8014ea0 <bearing+0x2a8>)
 8014c2e:	f7eb fe1d 	bl	800086c <__aeabi_ddiv>
 8014c32:	4603      	mov	r3, r0
 8014c34:	460c      	mov	r4, r1
 8014c36:	4618      	mov	r0, r3
 8014c38:	4621      	mov	r1, r4
 8014c3a:	f7eb ffe5 	bl	8000c08 <__aeabi_d2f>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    float teta2 = lat2*M_PI/180;
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f7eb fc90 	bl	8000568 <__aeabi_f2d>
 8014c48:	a391      	add	r3, pc, #580	; (adr r3, 8014e90 <bearing+0x298>)
 8014c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4e:	f7eb fce3 	bl	8000618 <__aeabi_dmul>
 8014c52:	4603      	mov	r3, r0
 8014c54:	460c      	mov	r4, r1
 8014c56:	4618      	mov	r0, r3
 8014c58:	4621      	mov	r1, r4
 8014c5a:	f04f 0200 	mov.w	r2, #0
 8014c5e:	4b90      	ldr	r3, [pc, #576]	; (8014ea0 <bearing+0x2a8>)
 8014c60:	f7eb fe04 	bl	800086c <__aeabi_ddiv>
 8014c64:	4603      	mov	r3, r0
 8014c66:	460c      	mov	r4, r1
 8014c68:	4618      	mov	r0, r3
 8014c6a:	4621      	mov	r1, r4
 8014c6c:	f7eb ffcc 	bl	8000c08 <__aeabi_d2f>
 8014c70:	4603      	mov	r3, r0
 8014c72:	62bb      	str	r3, [r7, #40]	; 0x28
    float delta1 = (lat2-lat)*M_PI/180;
 8014c74:	ed97 7a01 	vldr	s14, [r7, #4]
 8014c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8014c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c80:	ee17 0a90 	vmov	r0, s15
 8014c84:	f7eb fc70 	bl	8000568 <__aeabi_f2d>
 8014c88:	a381      	add	r3, pc, #516	; (adr r3, 8014e90 <bearing+0x298>)
 8014c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8e:	f7eb fcc3 	bl	8000618 <__aeabi_dmul>
 8014c92:	4603      	mov	r3, r0
 8014c94:	460c      	mov	r4, r1
 8014c96:	4618      	mov	r0, r3
 8014c98:	4621      	mov	r1, r4
 8014c9a:	f04f 0200 	mov.w	r2, #0
 8014c9e:	4b80      	ldr	r3, [pc, #512]	; (8014ea0 <bearing+0x2a8>)
 8014ca0:	f7eb fde4 	bl	800086c <__aeabi_ddiv>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	460c      	mov	r4, r1
 8014ca8:	4618      	mov	r0, r3
 8014caa:	4621      	mov	r1, r4
 8014cac:	f7eb ffac 	bl	8000c08 <__aeabi_d2f>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	627b      	str	r3, [r7, #36]	; 0x24
    float delta2 = (lon2-lon)*M_PI/180;
 8014cb4:	ed97 7a00 	vldr	s14, [r7]
 8014cb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8014cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014cc0:	ee17 0a90 	vmov	r0, s15
 8014cc4:	f7eb fc50 	bl	8000568 <__aeabi_f2d>
 8014cc8:	a371      	add	r3, pc, #452	; (adr r3, 8014e90 <bearing+0x298>)
 8014cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cce:	f7eb fca3 	bl	8000618 <__aeabi_dmul>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	460c      	mov	r4, r1
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	4621      	mov	r1, r4
 8014cda:	f04f 0200 	mov.w	r2, #0
 8014cde:	4b70      	ldr	r3, [pc, #448]	; (8014ea0 <bearing+0x2a8>)
 8014ce0:	f7eb fdc4 	bl	800086c <__aeabi_ddiv>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	460c      	mov	r4, r1
 8014ce8:	4618      	mov	r0, r3
 8014cea:	4621      	mov	r1, r4
 8014cec:	f7eb ff8c 	bl	8000c08 <__aeabi_d2f>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	623b      	str	r3, [r7, #32]

    //==================Heading Formula Calculation================//

    float y = sin(delta2) * cos(teta2);
 8014cf4:	6a38      	ldr	r0, [r7, #32]
 8014cf6:	f7eb fc37 	bl	8000568 <__aeabi_f2d>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	460c      	mov	r4, r1
 8014cfe:	ec44 3b10 	vmov	d0, r3, r4
 8014d02:	f006 f8d5 	bl	801aeb0 <sin>
 8014d06:	ec55 4b10 	vmov	r4, r5, d0
 8014d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d0c:	f7eb fc2c 	bl	8000568 <__aeabi_f2d>
 8014d10:	4602      	mov	r2, r0
 8014d12:	460b      	mov	r3, r1
 8014d14:	ec43 2b10 	vmov	d0, r2, r3
 8014d18:	f006 f886 	bl	801ae28 <cos>
 8014d1c:	ec53 2b10 	vmov	r2, r3, d0
 8014d20:	4620      	mov	r0, r4
 8014d22:	4629      	mov	r1, r5
 8014d24:	f7eb fc78 	bl	8000618 <__aeabi_dmul>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	460c      	mov	r4, r1
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	4621      	mov	r1, r4
 8014d30:	f7eb ff6a 	bl	8000c08 <__aeabi_d2f>
 8014d34:	4603      	mov	r3, r0
 8014d36:	61fb      	str	r3, [r7, #28]
    float x = cos(teta1)*sin(teta2) - sin(teta1)*cos(teta2)*cos(delta2);
 8014d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d3a:	f7eb fc15 	bl	8000568 <__aeabi_f2d>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	460c      	mov	r4, r1
 8014d42:	ec44 3b10 	vmov	d0, r3, r4
 8014d46:	f006 f86f 	bl	801ae28 <cos>
 8014d4a:	ec55 4b10 	vmov	r4, r5, d0
 8014d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d50:	f7eb fc0a 	bl	8000568 <__aeabi_f2d>
 8014d54:	4602      	mov	r2, r0
 8014d56:	460b      	mov	r3, r1
 8014d58:	ec43 2b10 	vmov	d0, r2, r3
 8014d5c:	f006 f8a8 	bl	801aeb0 <sin>
 8014d60:	ec53 2b10 	vmov	r2, r3, d0
 8014d64:	4620      	mov	r0, r4
 8014d66:	4629      	mov	r1, r5
 8014d68:	f7eb fc56 	bl	8000618 <__aeabi_dmul>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	460c      	mov	r4, r1
 8014d70:	4625      	mov	r5, r4
 8014d72:	461c      	mov	r4, r3
 8014d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d76:	f7eb fbf7 	bl	8000568 <__aeabi_f2d>
 8014d7a:	4602      	mov	r2, r0
 8014d7c:	460b      	mov	r3, r1
 8014d7e:	ec43 2b10 	vmov	d0, r2, r3
 8014d82:	f006 f895 	bl	801aeb0 <sin>
 8014d86:	ec59 8b10 	vmov	r8, r9, d0
 8014d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d8c:	f7eb fbec 	bl	8000568 <__aeabi_f2d>
 8014d90:	4602      	mov	r2, r0
 8014d92:	460b      	mov	r3, r1
 8014d94:	ec43 2b10 	vmov	d0, r2, r3
 8014d98:	f006 f846 	bl	801ae28 <cos>
 8014d9c:	ec53 2b10 	vmov	r2, r3, d0
 8014da0:	4640      	mov	r0, r8
 8014da2:	4649      	mov	r1, r9
 8014da4:	f7eb fc38 	bl	8000618 <__aeabi_dmul>
 8014da8:	4602      	mov	r2, r0
 8014daa:	460b      	mov	r3, r1
 8014dac:	4690      	mov	r8, r2
 8014dae:	4699      	mov	r9, r3
 8014db0:	6a38      	ldr	r0, [r7, #32]
 8014db2:	f7eb fbd9 	bl	8000568 <__aeabi_f2d>
 8014db6:	4602      	mov	r2, r0
 8014db8:	460b      	mov	r3, r1
 8014dba:	ec43 2b10 	vmov	d0, r2, r3
 8014dbe:	f006 f833 	bl	801ae28 <cos>
 8014dc2:	ec53 2b10 	vmov	r2, r3, d0
 8014dc6:	4640      	mov	r0, r8
 8014dc8:	4649      	mov	r1, r9
 8014dca:	f7eb fc25 	bl	8000618 <__aeabi_dmul>
 8014dce:	4602      	mov	r2, r0
 8014dd0:	460b      	mov	r3, r1
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	4629      	mov	r1, r5
 8014dd6:	f7eb fa67 	bl	80002a8 <__aeabi_dsub>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	460c      	mov	r4, r1
 8014dde:	4618      	mov	r0, r3
 8014de0:	4621      	mov	r1, r4
 8014de2:	f7eb ff11 	bl	8000c08 <__aeabi_d2f>
 8014de6:	4603      	mov	r3, r0
 8014de8:	61bb      	str	r3, [r7, #24]
    float brng = atan2(y,x);
 8014dea:	69f8      	ldr	r0, [r7, #28]
 8014dec:	f7eb fbbc 	bl	8000568 <__aeabi_f2d>
 8014df0:	4604      	mov	r4, r0
 8014df2:	460d      	mov	r5, r1
 8014df4:	69b8      	ldr	r0, [r7, #24]
 8014df6:	f7eb fbb7 	bl	8000568 <__aeabi_f2d>
 8014dfa:	4602      	mov	r2, r0
 8014dfc:	460b      	mov	r3, r1
 8014dfe:	ec43 2b11 	vmov	d1, r2, r3
 8014e02:	ec45 4b10 	vmov	d0, r4, r5
 8014e06:	f006 f8f3 	bl	801aff0 <atan2>
 8014e0a:	ec54 3b10 	vmov	r3, r4, d0
 8014e0e:	4618      	mov	r0, r3
 8014e10:	4621      	mov	r1, r4
 8014e12:	f7eb fef9 	bl	8000c08 <__aeabi_d2f>
 8014e16:	4603      	mov	r3, r0
 8014e18:	617b      	str	r3, [r7, #20]
    brng = brng*180/M_PI;// radians to degrees
 8014e1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8014e1e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014ea4 <bearing+0x2ac>
 8014e22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e26:	ee17 0a90 	vmov	r0, s15
 8014e2a:	f7eb fb9d 	bl	8000568 <__aeabi_f2d>
 8014e2e:	a318      	add	r3, pc, #96	; (adr r3, 8014e90 <bearing+0x298>)
 8014e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e34:	f7eb fd1a 	bl	800086c <__aeabi_ddiv>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	460c      	mov	r4, r1
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	4621      	mov	r1, r4
 8014e40:	f7eb fee2 	bl	8000c08 <__aeabi_d2f>
 8014e44:	4603      	mov	r3, r0
 8014e46:	617b      	str	r3, [r7, #20]
    brng = fmod((brng + 360), 360);
 8014e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8014e4c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8014ea8 <bearing+0x2b0>
 8014e50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e54:	ee17 0a90 	vmov	r0, s15
 8014e58:	f7eb fb86 	bl	8000568 <__aeabi_f2d>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	460c      	mov	r4, r1
 8014e60:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8014e98 <bearing+0x2a0>
 8014e64:	ec44 3b10 	vmov	d0, r3, r4
 8014e68:	f006 f8c4 	bl	801aff4 <fmod>
 8014e6c:	ec54 3b10 	vmov	r3, r4, d0
 8014e70:	4618      	mov	r0, r3
 8014e72:	4621      	mov	r1, r4
 8014e74:	f7eb fec8 	bl	8000c08 <__aeabi_d2f>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	617b      	str	r3, [r7, #20]
   // std::cout<< brng;
    return brng;
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	ee07 3a90 	vmov	s15, r3
    }
 8014e82:	eeb0 0a67 	vmov.f32	s0, s15
 8014e86:	3730      	adds	r7, #48	; 0x30
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014e8e:	bf00      	nop
 8014e90:	54442d18 	.word	0x54442d18
 8014e94:	400921fb 	.word	0x400921fb
 8014e98:	00000000 	.word	0x00000000
 8014e9c:	40768000 	.word	0x40768000
 8014ea0:	40668000 	.word	0x40668000
 8014ea4:	43340000 	.word	0x43340000
 8014ea8:	43b40000 	.word	0x43b40000

08014eac <fdr_setup>:
float target_lat;
float target_lon;
uint8_t servoState;

static void fdr_setup(void)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8014eb0:	f000 fe98 	bl	8015be4 <Get_TIM3_Instance>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	2108      	movs	r1, #8
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f7f7 fc35 	bl	800c728 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = 990;
 8014ebe:	4b26      	ldr	r3, [pc, #152]	; (8014f58 <fdr_setup+0xac>)
 8014ec0:	f240 32de 	movw	r2, #990	; 0x3de
 8014ec4:	63da      	str	r2, [r3, #60]	; 0x3c

	// wait for USR button press
	//while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);
	// begin the program
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8014ec6:	2201      	movs	r2, #1
 8014ec8:	2140      	movs	r1, #64	; 0x40
 8014eca:	4824      	ldr	r0, [pc, #144]	; (8014f5c <fdr_setup+0xb0>)
 8014ecc:	f7f2 fcfa 	bl	80078c4 <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 8014ed0:	4823      	ldr	r0, [pc, #140]	; (8014f60 <fdr_setup+0xb4>)
 8014ed2:	f7ff f863 	bl	8013f9c <println>
 8014ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014eda:	f7f1 fe75 	bl	8006bc8 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8014ede:	2200      	movs	r2, #0
 8014ee0:	2140      	movs	r1, #64	; 0x40
 8014ee2:	481e      	ldr	r0, [pc, #120]	; (8014f5c <fdr_setup+0xb0>)
 8014ee4:	f7f2 fcee 	bl	80078c4 <HAL_GPIO_WritePin>

	TIM3->CCR3 = 600;
 8014ee8:	4b1b      	ldr	r3, [pc, #108]	; (8014f58 <fdr_setup+0xac>)
 8014eea:	f44f 7216 	mov.w	r2, #600	; 0x258
 8014eee:	63da      	str	r2, [r3, #60]	; 0x3c

	if (sdTest_begin()) { println("SD card is working!");}
 8014ef0:	f7ff f8b6 	bl	8014060 <sdTest_begin>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d002      	beq.n	8014f00 <fdr_setup+0x54>
 8014efa:	481a      	ldr	r0, [pc, #104]	; (8014f64 <fdr_setup+0xb8>)
 8014efc:	f7ff f84e 	bl	8013f9c <println>
	log_new();
 8014f00:	f7f1 fabe 	bl	8006480 <log_new>
	SD_init();
 8014f04:	f7ec f9d6 	bl	80012b4 <SD_init>
	if (duplex_begin()) { println("Radio is working");}
 8014f08:	f7ff f94c 	bl	80141a4 <duplex_begin>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d002      	beq.n	8014f18 <fdr_setup+0x6c>
 8014f12:	4815      	ldr	r0, [pc, #84]	; (8014f68 <fdr_setup+0xbc>)
 8014f14:	f7ff f842 	bl	8013f9c <println>

	sensing_begin();
 8014f18:	f7ff fb4e 	bl	80145b8 <sensing_begin>

	target_lat = 20.0;
 8014f1c:	4b13      	ldr	r3, [pc, #76]	; (8014f6c <fdr_setup+0xc0>)
 8014f1e:	4a14      	ldr	r2, [pc, #80]	; (8014f70 <fdr_setup+0xc4>)
 8014f20:	601a      	str	r2, [r3, #0]
	target_lon = 30.0;
 8014f22:	4b14      	ldr	r3, [pc, #80]	; (8014f74 <fdr_setup+0xc8>)
 8014f24:	4a14      	ldr	r2, [pc, #80]	; (8014f78 <fdr_setup+0xcc>)
 8014f26:	601a      	str	r2, [r3, #0]
	target_yaw = 180.0; //statyczne 180.0
 8014f28:	4b14      	ldr	r3, [pc, #80]	; (8014f7c <fdr_setup+0xd0>)
 8014f2a:	4a15      	ldr	r2, [pc, #84]	; (8014f80 <fdr_setup+0xd4>)
 8014f2c:	601a      	str	r2, [r3, #0]

	//while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);

	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8014f2e:	2200      	movs	r2, #0
 8014f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014f34:	4813      	ldr	r0, [pc, #76]	; (8014f84 <fdr_setup+0xd8>)
 8014f36:	f7f2 fcc5 	bl	80078c4 <HAL_GPIO_WritePin>
	//HAL_Delay(1000);

	duplex_loop("new transmit", 14, true);
 8014f3a:	2201      	movs	r2, #1
 8014f3c:	210e      	movs	r1, #14
 8014f3e:	4812      	ldr	r0, [pc, #72]	; (8014f88 <fdr_setup+0xdc>)
 8014f40:	f7ff f9b8 	bl	80142b4 <duplex_loop>
	lastSave = millis();
 8014f44:	f7fe ff7e 	bl	8013e44 <millis>
 8014f48:	4602      	mov	r2, r0
 8014f4a:	4b10      	ldr	r3, [pc, #64]	; (8014f8c <fdr_setup+0xe0>)
 8014f4c:	601a      	str	r2, [r3, #0]
	servoState = 0;
 8014f4e:	4b10      	ldr	r3, [pc, #64]	; (8014f90 <fdr_setup+0xe4>)
 8014f50:	2200      	movs	r2, #0
 8014f52:	701a      	strb	r2, [r3, #0]
}
 8014f54:	bf00      	nop
 8014f56:	bd80      	pop	{r7, pc}
 8014f58:	40000400 	.word	0x40000400
 8014f5c:	40020800 	.word	0x40020800
 8014f60:	0801e2ec 	.word	0x0801e2ec
 8014f64:	0801e2fc 	.word	0x0801e2fc
 8014f68:	0801e310 	.word	0x0801e310
 8014f6c:	20006804 	.word	0x20006804
 8014f70:	41a00000 	.word	0x41a00000
 8014f74:	20006808 	.word	0x20006808
 8014f78:	41f00000 	.word	0x41f00000
 8014f7c:	2000680c 	.word	0x2000680c
 8014f80:	43340000 	.word	0x43340000
 8014f84:	40020400 	.word	0x40020400
 8014f88:	0801e324 	.word	0x0801e324
 8014f8c:	2000681c 	.word	0x2000681c
 8014f90:	200067fc 	.word	0x200067fc
 8014f94:	00000000 	.word	0x00000000

08014f98 <preparePacket>:

static void preparePacket()
{
 8014f98:	b590      	push	{r4, r7, lr}
 8014f9a:	b083      	sub	sp, #12
 8014f9c:	af00      	add	r7, sp, #0
	uint32_t temv = 0;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	607b      	str	r3, [r7, #4]
	temv = (uint32_t)(bmp.pressure * 10);
 8014fa2:	4b6d      	ldr	r3, [pc, #436]	; (8015158 <preparePacket+0x1c0>)
 8014fa4:	edd3 7a03 	vldr	s15, [r3, #12]
 8014fa8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8014fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014fb4:	ee17 3a90 	vmov	r3, s15
 8014fb8:	607b      	str	r3, [r7, #4]
	radio.txBuffer[0] = (uint8_t)(temv >> 0) & 0xFF;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	b2da      	uxtb	r2, r3
 8014fbe:	4b67      	ldr	r3, [pc, #412]	; (801515c <preparePacket+0x1c4>)
 8014fc0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	radio.txBuffer[1] = (uint8_t)(temv >> 8) & 0xFF;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	0a1b      	lsrs	r3, r3, #8
 8014fc8:	b2da      	uxtb	r2, r3
 8014fca:	4b64      	ldr	r3, [pc, #400]	; (801515c <preparePacket+0x1c4>)
 8014fcc:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	radio.txBuffer[2] = (uint8_t)(temv >> 16) & 0xFF;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	0c1b      	lsrs	r3, r3, #16
 8014fd4:	b2da      	uxtb	r2, r3
 8014fd6:	4b61      	ldr	r3, [pc, #388]	; (801515c <preparePacket+0x1c4>)
 8014fd8:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	radio.txBuffer[3] = (uint8_t)(temv >> 24) & 0xFF;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	0e1b      	lsrs	r3, r3, #24
 8014fe0:	b2da      	uxtb	r2, r3
 8014fe2:	4b5e      	ldr	r3, [pc, #376]	; (801515c <preparePacket+0x1c4>)
 8014fe4:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

	temv = (uint32_t)(bmp.temperature * 10);
 8014fe8:	4b5b      	ldr	r3, [pc, #364]	; (8015158 <preparePacket+0x1c0>)
 8014fea:	edd3 7a04 	vldr	s15, [r3, #16]
 8014fee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8014ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014ffa:	ee17 3a90 	vmov	r3, s15
 8014ffe:	607b      	str	r3, [r7, #4]
	radio.txBuffer[4] = (uint8_t)(temv >> 0) & 0xFF;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	b2da      	uxtb	r2, r3
 8015004:	4b55      	ldr	r3, [pc, #340]	; (801515c <preparePacket+0x1c4>)
 8015006:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	radio.txBuffer[5] = (uint8_t)(temv >> 8) & 0xFF;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	0a1b      	lsrs	r3, r3, #8
 801500e:	b2da      	uxtb	r2, r3
 8015010:	4b52      	ldr	r3, [pc, #328]	; (801515c <preparePacket+0x1c4>)
 8015012:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	radio.txBuffer[6] = (uint8_t)(temv >> 16) & 0xFF;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	0c1b      	lsrs	r3, r3, #16
 801501a:	b2da      	uxtb	r2, r3
 801501c:	4b4f      	ldr	r3, [pc, #316]	; (801515c <preparePacket+0x1c4>)
 801501e:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	radio.txBuffer[7] = (uint8_t)(temv >> 24) & 0xFF;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	0e1b      	lsrs	r3, r3, #24
 8015026:	b2da      	uxtb	r2, r3
 8015028:	4b4c      	ldr	r3, [pc, #304]	; (801515c <preparePacket+0x1c4>)
 801502a:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

	temv = (uint32_t)(gps.latitudeDegrees * 10000000);
 801502e:	4b4c      	ldr	r3, [pc, #304]	; (8015160 <preparePacket+0x1c8>)
 8015030:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8015034:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8015164 <preparePacket+0x1cc>
 8015038:	ee67 7a87 	vmul.f32	s15, s15, s14
 801503c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015040:	ee17 3a90 	vmov	r3, s15
 8015044:	607b      	str	r3, [r7, #4]
	radio.txBuffer[8] = (uint8_t)(temv >> 0) & 0xFF;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	b2da      	uxtb	r2, r3
 801504a:	4b44      	ldr	r3, [pc, #272]	; (801515c <preparePacket+0x1c4>)
 801504c:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	radio.txBuffer[9] = (uint8_t)(temv >> 8) & 0xFF;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	0a1b      	lsrs	r3, r3, #8
 8015054:	b2da      	uxtb	r2, r3
 8015056:	4b41      	ldr	r3, [pc, #260]	; (801515c <preparePacket+0x1c4>)
 8015058:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	radio.txBuffer[10] = (uint8_t)(temv >> 16) & 0xFF;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	0c1b      	lsrs	r3, r3, #16
 8015060:	b2da      	uxtb	r2, r3
 8015062:	4b3e      	ldr	r3, [pc, #248]	; (801515c <preparePacket+0x1c4>)
 8015064:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	radio.txBuffer[11] = (uint8_t)(temv >> 24) & 0xFF;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	0e1b      	lsrs	r3, r3, #24
 801506c:	b2da      	uxtb	r2, r3
 801506e:	4b3b      	ldr	r3, [pc, #236]	; (801515c <preparePacket+0x1c4>)
 8015070:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f

	temv = (uint32_t)(gps.longitudeDegrees * 10000000);
 8015074:	4b3a      	ldr	r3, [pc, #232]	; (8015160 <preparePacket+0x1c8>)
 8015076:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 801507a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8015164 <preparePacket+0x1cc>
 801507e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015086:	ee17 3a90 	vmov	r3, s15
 801508a:	607b      	str	r3, [r7, #4]
	radio.txBuffer[12] = (uint8_t)(temv >> 0) & 0xFF;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	b2da      	uxtb	r2, r3
 8015090:	4b32      	ldr	r3, [pc, #200]	; (801515c <preparePacket+0x1c4>)
 8015092:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	radio.txBuffer[13] = (uint8_t)(temv >> 8) & 0xFF;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	0a1b      	lsrs	r3, r3, #8
 801509a:	b2da      	uxtb	r2, r3
 801509c:	4b2f      	ldr	r3, [pc, #188]	; (801515c <preparePacket+0x1c4>)
 801509e:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	radio.txBuffer[14] = (uint8_t)(temv >> 16) & 0xFF;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	0c1b      	lsrs	r3, r3, #16
 80150a6:	b2da      	uxtb	r2, r3
 80150a8:	4b2c      	ldr	r3, [pc, #176]	; (801515c <preparePacket+0x1c4>)
 80150aa:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	radio.txBuffer[15] = (uint8_t)(temv >> 24) & 0xFF;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	0e1b      	lsrs	r3, r3, #24
 80150b2:	b2da      	uxtb	r2, r3
 80150b4:	4b29      	ldr	r3, [pc, #164]	; (801515c <preparePacket+0x1c4>)
 80150b6:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153


	radio.txBuffer[16] = (uint8_t)(mpu.yaw * (255.0 / 360.0));
 80150ba:	4b2b      	ldr	r3, [pc, #172]	; (8015168 <preparePacket+0x1d0>)
 80150bc:	68db      	ldr	r3, [r3, #12]
 80150be:	4618      	mov	r0, r3
 80150c0:	f7eb fa52 	bl	8000568 <__aeabi_f2d>
 80150c4:	a322      	add	r3, pc, #136	; (adr r3, 8015150 <preparePacket+0x1b8>)
 80150c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ca:	f7eb faa5 	bl	8000618 <__aeabi_dmul>
 80150ce:	4603      	mov	r3, r0
 80150d0:	460c      	mov	r4, r1
 80150d2:	4618      	mov	r0, r3
 80150d4:	4621      	mov	r1, r4
 80150d6:	f7eb fd77 	bl	8000bc8 <__aeabi_d2uiz>
 80150da:	4603      	mov	r3, r0
 80150dc:	b2da      	uxtb	r2, r3
 80150de:	4b1f      	ldr	r3, [pc, #124]	; (801515c <preparePacket+0x1c4>)
 80150e0:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	radio.txBuffer[17] = (uint8_t)(mpu.pitch * (255.0 / 360.0));
 80150e4:	4b20      	ldr	r3, [pc, #128]	; (8015168 <preparePacket+0x1d0>)
 80150e6:	691b      	ldr	r3, [r3, #16]
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7eb fa3d 	bl	8000568 <__aeabi_f2d>
 80150ee:	a318      	add	r3, pc, #96	; (adr r3, 8015150 <preparePacket+0x1b8>)
 80150f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150f4:	f7eb fa90 	bl	8000618 <__aeabi_dmul>
 80150f8:	4603      	mov	r3, r0
 80150fa:	460c      	mov	r4, r1
 80150fc:	4618      	mov	r0, r3
 80150fe:	4621      	mov	r1, r4
 8015100:	f7eb fd62 	bl	8000bc8 <__aeabi_d2uiz>
 8015104:	4603      	mov	r3, r0
 8015106:	b2da      	uxtb	r2, r3
 8015108:	4b14      	ldr	r3, [pc, #80]	; (801515c <preparePacket+0x1c4>)
 801510a:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	radio.txBuffer[18] = (uint8_t)(mpu.roll * (255.0 / 360.0));
 801510e:	4b16      	ldr	r3, [pc, #88]	; (8015168 <preparePacket+0x1d0>)
 8015110:	695b      	ldr	r3, [r3, #20]
 8015112:	4618      	mov	r0, r3
 8015114:	f7eb fa28 	bl	8000568 <__aeabi_f2d>
 8015118:	a30d      	add	r3, pc, #52	; (adr r3, 8015150 <preparePacket+0x1b8>)
 801511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801511e:	f7eb fa7b 	bl	8000618 <__aeabi_dmul>
 8015122:	4603      	mov	r3, r0
 8015124:	460c      	mov	r4, r1
 8015126:	4618      	mov	r0, r3
 8015128:	4621      	mov	r1, r4
 801512a:	f7eb fd4d 	bl	8000bc8 <__aeabi_d2uiz>
 801512e:	4603      	mov	r3, r0
 8015130:	b2da      	uxtb	r2, r3
 8015132:	4b0a      	ldr	r3, [pc, #40]	; (801515c <preparePacket+0x1c4>)
 8015134:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156

	radio.txBuffer[19] = 0x00;
 8015138:	4b08      	ldr	r3, [pc, #32]	; (801515c <preparePacket+0x1c4>)
 801513a:	2200      	movs	r2, #0
 801513c:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	radio.txLen = 20;
 8015140:	4b06      	ldr	r3, [pc, #24]	; (801515c <preparePacket+0x1c4>)
 8015142:	2214      	movs	r2, #20
 8015144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8015148:	bf00      	nop
 801514a:	370c      	adds	r7, #12
 801514c:	46bd      	mov	sp, r7
 801514e:	bd90      	pop	{r4, r7, pc}
 8015150:	aaaaaaab 	.word	0xaaaaaaab
 8015154:	3fe6aaaa 	.word	0x3fe6aaaa
 8015158:	200049fc 	.word	0x200049fc
 801515c:	2000314c 	.word	0x2000314c
 8015160:	200043b4 	.word	0x200043b4
 8015164:	4b189680 	.word	0x4b189680
 8015168:	20006740 	.word	0x20006740
 801516c:	00000000 	.word	0x00000000

08015170 <fdr_loop>:


static void fdr_loop(void)
{
 8015170:	b590      	push	{r4, r7, lr}
 8015172:	b083      	sub	sp, #12
 8015174:	af00      	add	r7, sp, #0
	sensing_loop();
 8015176:	f7ff fad1 	bl	801471c <sensing_loop>


	if (millis() - lastSave >= 1137)	// save SD buffers while waiting for packet but no frequent than 1Hz
 801517a:	f7fe fe63 	bl	8013e44 <millis>
 801517e:	4602      	mov	r2, r0
 8015180:	4b5d      	ldr	r3, [pc, #372]	; (80152f8 <fdr_loop+0x188>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	1ad3      	subs	r3, r2, r3
 8015186:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 801518a:	d909      	bls.n	80151a0 <fdr_loop+0x30>
	{
		log_print("yo helo!\n\r");
 801518c:	485b      	ldr	r0, [pc, #364]	; (80152fc <fdr_loop+0x18c>)
 801518e:	f7f1 fb7b 	bl	8006888 <log_print>
		log_save();
 8015192:	f7f1 fa53 	bl	800663c <log_save>
		lastSave = millis();
 8015196:	f7fe fe55 	bl	8013e44 <millis>
 801519a:	4602      	mov	r2, r0
 801519c:	4b56      	ldr	r3, [pc, #344]	; (80152f8 <fdr_loop+0x188>)
 801519e:	601a      	str	r2, [r3, #0]
	}



	if (duplex_checkINT())
 80151a0:	f7ff f860 	bl	8014264 <duplex_checkINT>
 80151a4:	4603      	mov	r3, r0
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d06b      	beq.n	8015282 <fdr_loop+0x112>
	{
		//radio.txLen = sprintf(radio.txBuffer, "%.01f_%.01f_%.07f_%.07f ", bmp.pressure, bmp.temperature, gps.latitudeDegrees, gps.longitudeDegrees); //imortant to leave last byte
		preparePacket();
 80151aa:	f7ff fef5 	bl	8014f98 <preparePacket>
		duplex_loop(radio.txBuffer, radio.txLen, true);
 80151ae:	4b54      	ldr	r3, [pc, #336]	; (8015300 <fdr_loop+0x190>)
 80151b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80151b4:	2201      	movs	r2, #1
 80151b6:	4619      	mov	r1, r3
 80151b8:	4852      	ldr	r0, [pc, #328]	; (8015304 <fdr_loop+0x194>)
 80151ba:	f7ff f87b 	bl	80142b4 <duplex_loop>

		if ((float)radio.rxBuffer[radio.rxLen - 1] * (360.0 / 255.0))
 80151be:	4b50      	ldr	r3, [pc, #320]	; (8015300 <fdr_loop+0x190>)
 80151c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80151c4:	3b01      	subs	r3, #1
 80151c6:	4a4e      	ldr	r2, [pc, #312]	; (8015300 <fdr_loop+0x190>)
 80151c8:	4413      	add	r3, r2
 80151ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80151ce:	ee07 3a90 	vmov	s15, r3
 80151d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80151d6:	ee17 0a90 	vmov	r0, s15
 80151da:	f7eb f9c5 	bl	8000568 <__aeabi_f2d>
 80151de:	a344      	add	r3, pc, #272	; (adr r3, 80152f0 <fdr_loop+0x180>)
 80151e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e4:	f7eb fa18 	bl	8000618 <__aeabi_dmul>
 80151e8:	4603      	mov	r3, r0
 80151ea:	460c      	mov	r4, r1
 80151ec:	4618      	mov	r0, r3
 80151ee:	4621      	mov	r1, r4
 80151f0:	f04f 0200 	mov.w	r2, #0
 80151f4:	f04f 0300 	mov.w	r3, #0
 80151f8:	f7eb fc76 	bl	8000ae8 <__aeabi_dcmpeq>
 80151fc:	4603      	mov	r3, r0
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d11d      	bne.n	801523e <fdr_loop+0xce>
		{
			target_yaw = (float)radio.rxBuffer[radio.rxLen - 1] * (360.0 / 255.0);
 8015202:	4b3f      	ldr	r3, [pc, #252]	; (8015300 <fdr_loop+0x190>)
 8015204:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015208:	3b01      	subs	r3, #1
 801520a:	4a3d      	ldr	r2, [pc, #244]	; (8015300 <fdr_loop+0x190>)
 801520c:	4413      	add	r3, r2
 801520e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015212:	ee07 3a90 	vmov	s15, r3
 8015216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801521a:	ee17 0a90 	vmov	r0, s15
 801521e:	f7eb f9a3 	bl	8000568 <__aeabi_f2d>
 8015222:	a333      	add	r3, pc, #204	; (adr r3, 80152f0 <fdr_loop+0x180>)
 8015224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015228:	f7eb f9f6 	bl	8000618 <__aeabi_dmul>
 801522c:	4603      	mov	r3, r0
 801522e:	460c      	mov	r4, r1
 8015230:	4618      	mov	r0, r3
 8015232:	4621      	mov	r1, r4
 8015234:	f7eb fce8 	bl	8000c08 <__aeabi_d2f>
 8015238:	4602      	mov	r2, r0
 801523a:	4b33      	ldr	r3, [pc, #204]	; (8015308 <fdr_loop+0x198>)
 801523c:	601a      	str	r2, [r3, #0]
		}

		//print_float(target_yaw); println("<< YAW << YAW");
		//print_int(radio.rxBuffer[0]); println("<< SERVO");
		if (radio.rxBuffer[0] == 1 || radio.rxBuffer[0] == 3) TIM3->CCR3 = 600;
 801523e:	4b30      	ldr	r3, [pc, #192]	; (8015300 <fdr_loop+0x190>)
 8015240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015244:	2b01      	cmp	r3, #1
 8015246:	d004      	beq.n	8015252 <fdr_loop+0xe2>
 8015248:	4b2d      	ldr	r3, [pc, #180]	; (8015300 <fdr_loop+0x190>)
 801524a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801524e:	2b03      	cmp	r3, #3
 8015250:	d104      	bne.n	801525c <fdr_loop+0xec>
 8015252:	4b2e      	ldr	r3, [pc, #184]	; (801530c <fdr_loop+0x19c>)
 8015254:	f44f 7216 	mov.w	r2, #600	; 0x258
 8015258:	63da      	str	r2, [r3, #60]	; 0x3c
 801525a:	e003      	b.n	8015264 <fdr_loop+0xf4>
		else TIM3->CCR3 = 900;
 801525c:	4b2b      	ldr	r3, [pc, #172]	; (801530c <fdr_loop+0x19c>)
 801525e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8015262:	63da      	str	r2, [r3, #60]	; 0x3c
		if (radio.rxBuffer[0] == 2 || radio.rxBuffer[0] == 3) enableMotors();
 8015264:	4b26      	ldr	r3, [pc, #152]	; (8015300 <fdr_loop+0x190>)
 8015266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801526a:	2b02      	cmp	r3, #2
 801526c:	d004      	beq.n	8015278 <fdr_loop+0x108>
 801526e:	4b24      	ldr	r3, [pc, #144]	; (8015300 <fdr_loop+0x190>)
 8015270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015274:	2b03      	cmp	r3, #3
 8015276:	d102      	bne.n	801527e <fdr_loop+0x10e>
 8015278:	f7eb ffb8 	bl	80011ec <enableMotors>
 801527c:	e001      	b.n	8015282 <fdr_loop+0x112>
		else disableMotors();
 801527e:	f7eb fff7 	bl	8001270 <disableMotors>
	}


	if (millis() - lastMotUpdate >= 10)	// every 10ms get Euler angles and run motor alogrithm
 8015282:	f7fe fddf 	bl	8013e44 <millis>
 8015286:	4602      	mov	r2, r0
 8015288:	4b21      	ldr	r3, [pc, #132]	; (8015310 <fdr_loop+0x1a0>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	1ad3      	subs	r3, r2, r3
 801528e:	2b09      	cmp	r3, #9
 8015290:	d928      	bls.n	80152e4 <fdr_loop+0x174>
	{

		//imuTest_getEuler();
		float brng = bearing(gps.latitudeDegrees, gps.longitudeDegrees, target_lat, target_lon);
 8015292:	4b20      	ldr	r3, [pc, #128]	; (8015314 <fdr_loop+0x1a4>)
 8015294:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8015298:	4b1e      	ldr	r3, [pc, #120]	; (8015314 <fdr_loop+0x1a4>)
 801529a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801529e:	4b1e      	ldr	r3, [pc, #120]	; (8015318 <fdr_loop+0x1a8>)
 80152a0:	edd3 6a00 	vldr	s13, [r3]
 80152a4:	4b1d      	ldr	r3, [pc, #116]	; (801531c <fdr_loop+0x1ac>)
 80152a6:	ed93 6a00 	vldr	s12, [r3]
 80152aa:	eef0 1a46 	vmov.f32	s3, s12
 80152ae:	eeb0 1a66 	vmov.f32	s2, s13
 80152b2:	eef0 0a47 	vmov.f32	s1, s14
 80152b6:	eeb0 0a67 	vmov.f32	s0, s15
 80152ba:	f7ff fc9d 	bl	8014bf8 <bearing>
 80152be:	ed87 0a01 	vstr	s0, [r7, #4]
	    //algoGalgo(yaw, brng); // target_yaw wyliczane z pozycji anteny;

		algoGalgo(mpu.yaw, target_yaw); //statyczny target_yaw
 80152c2:	4b17      	ldr	r3, [pc, #92]	; (8015320 <fdr_loop+0x1b0>)
 80152c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80152c8:	4b0f      	ldr	r3, [pc, #60]	; (8015308 <fdr_loop+0x198>)
 80152ca:	ed93 7a00 	vldr	s14, [r3]
 80152ce:	eef0 0a47 	vmov.f32	s1, s14
 80152d2:	eeb0 0a67 	vmov.f32	s0, s15
 80152d6:	f7ff fb2f 	bl	8014938 <algoGalgo>

		//print_float(yaw); println("");
		lastMotUpdate = millis();
 80152da:	f7fe fdb3 	bl	8013e44 <millis>
 80152de:	4602      	mov	r2, r0
 80152e0:	4b0b      	ldr	r3, [pc, #44]	; (8015310 <fdr_loop+0x1a0>)
 80152e2:	601a      	str	r2, [r3, #0]
	}
}
 80152e4:	bf00      	nop
 80152e6:	370c      	adds	r7, #12
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd90      	pop	{r4, r7, pc}
 80152ec:	f3af 8000 	nop.w
 80152f0:	96969697 	.word	0x96969697
 80152f4:	3ff69696 	.word	0x3ff69696
 80152f8:	2000681c 	.word	0x2000681c
 80152fc:	0801e334 	.word	0x0801e334
 8015300:	2000314c 	.word	0x2000314c
 8015304:	20003290 	.word	0x20003290
 8015308:	2000680c 	.word	0x2000680c
 801530c:	40000400 	.word	0x40000400
 8015310:	200049d8 	.word	0x200049d8
 8015314:	200043b4 	.word	0x200043b4
 8015318:	20006804 	.word	0x20006804
 801531c:	20006808 	.word	0x20006808
 8015320:	20006740 	.word	0x20006740

08015324 <setup>:
 */

#include "Scripts/FunctionalTests/fdr_tests.c"

static void setup(void)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	af00      	add	r7, sp, #0
	

	//gps.uart = Get_UART3_Instance();
	//GPS_init(&gps);

	fdr_setup();
 8015328:	f7ff fdc0 	bl	8014eac <fdr_setup>
}
 801532c:	bf00      	nop
 801532e:	bd80      	pop	{r7, pc}

08015330 <loop>:

static void loop(void)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	af00      	add	r7, sp, #0
	{
		char toPrint[2] = {gps.uartBuffer[0], '\0'};
		print(toPrint);
	}
	*/
	fdr_loop();
 8015334:	f7ff ff1c 	bl	8015170 <fdr_loop>
}
 8015338:	bf00      	nop
 801533a:	bd80      	pop	{r7, pc}

0801533c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b082      	sub	sp, #8
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, gps.uartBuffer, 1);
 8015344:	2201      	movs	r2, #1
 8015346:	4905      	ldr	r1, [pc, #20]	; (801535c <HAL_UART_RxCpltCallback+0x20>)
 8015348:	6878      	ldr	r0, [r7, #4]
 801534a:	f7f8 f83b 	bl	800d3c4 <HAL_UART_Receive_IT>
	GPS_read(&gps);
 801534e:	4804      	ldr	r0, [pc, #16]	; (8015360 <HAL_UART_RxCpltCallback+0x24>)
 8015350:	f7ed f9d6 	bl	8002700 <GPS_read>
}
 8015354:	bf00      	nop
 8015356:	3708      	adds	r7, #8
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}
 801535c:	200045d2 	.word	0x200045d2
 8015360:	200043b4 	.word	0x200043b4

08015364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8015368:	f7f1 fbbc 	bl	8006ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801536c:	f000 f862 	bl	8015434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8015370:	f000 fb32 	bl	80159d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8015374:	f000 fb08 	bl	8015988 <MX_DMA_Init>
  MX_I2C1_Init();
 8015378:	f000 f8de 	bl	8015538 <MX_I2C1_Init>
  MX_RTC_Init();
 801537c:	f000 f90a 	bl	8015594 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8015380:	f000 f92e 	bl	80155e0 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8015384:	f000 f94c 	bl	8015620 <MX_SPI1_Init>
  MX_TIM2_Init();
 8015388:	f000 f980 	bl	801568c <MX_TIM2_Init>
  MX_TIM3_Init();
 801538c:	f000 f9cc 	bl	8015728 <MX_TIM3_Init>
  MX_TIM5_Init();
 8015390:	f000 fa4c 	bl	801582c <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8015394:	f000 face 	bl	8015934 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8015398:	f7fe fd1a 	bl	8013dd0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 801539c:	f001 f9f0 	bl	8016780 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 80153a0:	4820      	ldr	r0, [pc, #128]	; (8015424 <main+0xc0>)
 80153a2:	f7f7 f968 	bl	800c676 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 80153a6:	2200      	movs	r2, #0
 80153a8:	2180      	movs	r1, #128	; 0x80
 80153aa:	481f      	ldr	r0, [pc, #124]	; (8015428 <main+0xc4>)
 80153ac:	f7f2 fa8a 	bl	80078c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80153b0:	2200      	movs	r2, #0
 80153b2:	2140      	movs	r1, #64	; 0x40
 80153b4:	481c      	ldr	r0, [pc, #112]	; (8015428 <main+0xc4>)
 80153b6:	f7f2 fa85 	bl	80078c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 80153ba:	2200      	movs	r2, #0
 80153bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80153c0:	481a      	ldr	r0, [pc, #104]	; (801542c <main+0xc8>)
 80153c2:	f7f2 fa7f 	bl	80078c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 80153c6:	2200      	movs	r2, #0
 80153c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80153cc:	4817      	ldr	r0, [pc, #92]	; (801542c <main+0xc8>)
 80153ce:	f7f2 fa79 	bl	80078c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 80153d2:	2200      	movs	r2, #0
 80153d4:	2101      	movs	r1, #1
 80153d6:	4816      	ldr	r0, [pc, #88]	; (8015430 <main+0xcc>)
 80153d8:	f7f2 fa74 	bl	80078c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 80153dc:	2200      	movs	r2, #0
 80153de:	2104      	movs	r1, #4
 80153e0:	4813      	ldr	r0, [pc, #76]	; (8015430 <main+0xcc>)
 80153e2:	f7f2 fa6f 	bl	80078c4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 80153e6:	2200      	movs	r2, #0
 80153e8:	2101      	movs	r1, #1
 80153ea:	480f      	ldr	r0, [pc, #60]	; (8015428 <main+0xc4>)
 80153ec:	f7f2 fa6a 	bl	80078c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 80153f0:	2200      	movs	r2, #0
 80153f2:	2104      	movs	r1, #4
 80153f4:	480c      	ldr	r0, [pc, #48]	; (8015428 <main+0xc4>)
 80153f6:	f7f2 fa65 	bl	80078c4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 80153fa:	2200      	movs	r2, #0
 80153fc:	2102      	movs	r1, #2
 80153fe:	480a      	ldr	r0, [pc, #40]	; (8015428 <main+0xc4>)
 8015400:	f7f2 fa60 	bl	80078c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 8015404:	2201      	movs	r2, #1
 8015406:	2108      	movs	r1, #8
 8015408:	4807      	ldr	r0, [pc, #28]	; (8015428 <main+0xc4>)
 801540a:	f7f2 fa5b 	bl	80078c4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 801540e:	2200      	movs	r2, #0
 8015410:	2110      	movs	r1, #16
 8015412:	4807      	ldr	r0, [pc, #28]	; (8015430 <main+0xcc>)
 8015414:	f7f2 fa56 	bl	80078c4 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 8015418:	f7ff ff84 	bl	8015324 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 801541c:	f7ff ff88 	bl	8015330 <loop>
 8015420:	e7fc      	b.n	801541c <main+0xb8>
 8015422:	bf00      	nop
 8015424:	20008f68 	.word	0x20008f68
 8015428:	40020800 	.word	0x40020800
 801542c:	40020400 	.word	0x40020400
 8015430:	40020000 	.word	0x40020000

08015434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b098      	sub	sp, #96	; 0x60
 8015438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801543a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801543e:	2230      	movs	r2, #48	; 0x30
 8015440:	2100      	movs	r1, #0
 8015442:	4618      	mov	r0, r3
 8015444:	f001 ff3f 	bl	80172c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8015448:	f107 031c 	add.w	r3, r7, #28
 801544c:	2200      	movs	r2, #0
 801544e:	601a      	str	r2, [r3, #0]
 8015450:	605a      	str	r2, [r3, #4]
 8015452:	609a      	str	r2, [r3, #8]
 8015454:	60da      	str	r2, [r3, #12]
 8015456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015458:	f107 030c 	add.w	r3, r7, #12
 801545c:	2200      	movs	r2, #0
 801545e:	601a      	str	r2, [r3, #0]
 8015460:	605a      	str	r2, [r3, #4]
 8015462:	609a      	str	r2, [r3, #8]
 8015464:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8015466:	2300      	movs	r3, #0
 8015468:	60bb      	str	r3, [r7, #8]
 801546a:	4b31      	ldr	r3, [pc, #196]	; (8015530 <SystemClock_Config+0xfc>)
 801546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801546e:	4a30      	ldr	r2, [pc, #192]	; (8015530 <SystemClock_Config+0xfc>)
 8015470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015474:	6413      	str	r3, [r2, #64]	; 0x40
 8015476:	4b2e      	ldr	r3, [pc, #184]	; (8015530 <SystemClock_Config+0xfc>)
 8015478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801547a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801547e:	60bb      	str	r3, [r7, #8]
 8015480:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8015482:	2300      	movs	r3, #0
 8015484:	607b      	str	r3, [r7, #4]
 8015486:	4b2b      	ldr	r3, [pc, #172]	; (8015534 <SystemClock_Config+0x100>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	4a2a      	ldr	r2, [pc, #168]	; (8015534 <SystemClock_Config+0x100>)
 801548c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015490:	6013      	str	r3, [r2, #0]
 8015492:	4b28      	ldr	r3, [pc, #160]	; (8015534 <SystemClock_Config+0x100>)
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801549a:	607b      	str	r3, [r7, #4]
 801549c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 801549e:	2305      	movs	r3, #5
 80154a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80154a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80154a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80154a8:	2301      	movs	r3, #1
 80154aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80154ac:	2302      	movs	r3, #2
 80154ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80154b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80154b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80154b6:	2306      	movs	r3, #6
 80154b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80154ba:	23a8      	movs	r3, #168	; 0xa8
 80154bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80154be:	2302      	movs	r3, #2
 80154c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80154c2:	2307      	movs	r3, #7
 80154c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80154c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80154ca:	4618      	mov	r0, r3
 80154cc:	f7f4 fb38 	bl	8009b40 <HAL_RCC_OscConfig>
 80154d0:	4603      	mov	r3, r0
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d001      	beq.n	80154da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80154d6:	f000 fb99 	bl	8015c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80154da:	230f      	movs	r3, #15
 80154dc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80154de:	2302      	movs	r3, #2
 80154e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80154e2:	2300      	movs	r3, #0
 80154e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80154e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80154ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80154ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80154f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80154f2:	f107 031c 	add.w	r3, r7, #28
 80154f6:	2105      	movs	r1, #5
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7f4 fd63 	bl	8009fc4 <HAL_RCC_ClockConfig>
 80154fe:	4603      	mov	r3, r0
 8015500:	2b00      	cmp	r3, #0
 8015502:	d001      	beq.n	8015508 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8015504:	f000 fb82 	bl	8015c0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8015508:	2302      	movs	r3, #2
 801550a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 801550c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015510:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015512:	f107 030c 	add.w	r3, r7, #12
 8015516:	4618      	mov	r0, r3
 8015518:	f7f4 ff1c 	bl	800a354 <HAL_RCCEx_PeriphCLKConfig>
 801551c:	4603      	mov	r3, r0
 801551e:	2b00      	cmp	r3, #0
 8015520:	d001      	beq.n	8015526 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8015522:	f000 fb73 	bl	8015c0c <Error_Handler>
  }
}
 8015526:	bf00      	nop
 8015528:	3760      	adds	r7, #96	; 0x60
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}
 801552e:	bf00      	nop
 8015530:	40023800 	.word	0x40023800
 8015534:	40007000 	.word	0x40007000

08015538 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801553c:	4b12      	ldr	r3, [pc, #72]	; (8015588 <MX_I2C1_Init+0x50>)
 801553e:	4a13      	ldr	r2, [pc, #76]	; (801558c <MX_I2C1_Init+0x54>)
 8015540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8015542:	4b11      	ldr	r3, [pc, #68]	; (8015588 <MX_I2C1_Init+0x50>)
 8015544:	4a12      	ldr	r2, [pc, #72]	; (8015590 <MX_I2C1_Init+0x58>)
 8015546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8015548:	4b0f      	ldr	r3, [pc, #60]	; (8015588 <MX_I2C1_Init+0x50>)
 801554a:	2200      	movs	r2, #0
 801554c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801554e:	4b0e      	ldr	r3, [pc, #56]	; (8015588 <MX_I2C1_Init+0x50>)
 8015550:	2200      	movs	r2, #0
 8015552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8015554:	4b0c      	ldr	r3, [pc, #48]	; (8015588 <MX_I2C1_Init+0x50>)
 8015556:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801555a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801555c:	4b0a      	ldr	r3, [pc, #40]	; (8015588 <MX_I2C1_Init+0x50>)
 801555e:	2200      	movs	r2, #0
 8015560:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8015562:	4b09      	ldr	r3, [pc, #36]	; (8015588 <MX_I2C1_Init+0x50>)
 8015564:	2200      	movs	r2, #0
 8015566:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015568:	4b07      	ldr	r3, [pc, #28]	; (8015588 <MX_I2C1_Init+0x50>)
 801556a:	2200      	movs	r2, #0
 801556c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801556e:	4b06      	ldr	r3, [pc, #24]	; (8015588 <MX_I2C1_Init+0x50>)
 8015570:	2200      	movs	r2, #0
 8015572:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8015574:	4804      	ldr	r0, [pc, #16]	; (8015588 <MX_I2C1_Init+0x50>)
 8015576:	f7f2 f9d9 	bl	800792c <HAL_I2C_Init>
 801557a:	4603      	mov	r3, r0
 801557c:	2b00      	cmp	r3, #0
 801557e:	d001      	beq.n	8015584 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8015580:	f000 fb44 	bl	8015c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8015584:	bf00      	nop
 8015586:	bd80      	pop	{r7, pc}
 8015588:	20008d38 	.word	0x20008d38
 801558c:	40005400 	.word	0x40005400
 8015590:	00061a80 	.word	0x00061a80

08015594 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8015598:	4b0f      	ldr	r3, [pc, #60]	; (80155d8 <MX_RTC_Init+0x44>)
 801559a:	4a10      	ldr	r2, [pc, #64]	; (80155dc <MX_RTC_Init+0x48>)
 801559c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801559e:	4b0e      	ldr	r3, [pc, #56]	; (80155d8 <MX_RTC_Init+0x44>)
 80155a0:	2200      	movs	r2, #0
 80155a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80155a4:	4b0c      	ldr	r3, [pc, #48]	; (80155d8 <MX_RTC_Init+0x44>)
 80155a6:	227f      	movs	r2, #127	; 0x7f
 80155a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80155aa:	4b0b      	ldr	r3, [pc, #44]	; (80155d8 <MX_RTC_Init+0x44>)
 80155ac:	22ff      	movs	r2, #255	; 0xff
 80155ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80155b0:	4b09      	ldr	r3, [pc, #36]	; (80155d8 <MX_RTC_Init+0x44>)
 80155b2:	2200      	movs	r2, #0
 80155b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80155b6:	4b08      	ldr	r3, [pc, #32]	; (80155d8 <MX_RTC_Init+0x44>)
 80155b8:	2200      	movs	r2, #0
 80155ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80155bc:	4b06      	ldr	r3, [pc, #24]	; (80155d8 <MX_RTC_Init+0x44>)
 80155be:	2200      	movs	r2, #0
 80155c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80155c2:	4805      	ldr	r0, [pc, #20]	; (80155d8 <MX_RTC_Init+0x44>)
 80155c4:	f7f4 ffa8 	bl	800a518 <HAL_RTC_Init>
 80155c8:	4603      	mov	r3, r0
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d001      	beq.n	80155d2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80155ce:	f000 fb1d 	bl	8015c0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80155d2:	bf00      	nop
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop
 80155d8:	20008e0c 	.word	0x20008e0c
 80155dc:	40002800 	.word	0x40002800

080155e0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80155e0:	b480      	push	{r7}
 80155e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80155e4:	4b0c      	ldr	r3, [pc, #48]	; (8015618 <MX_SDIO_SD_Init+0x38>)
 80155e6:	4a0d      	ldr	r2, [pc, #52]	; (801561c <MX_SDIO_SD_Init+0x3c>)
 80155e8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80155ea:	4b0b      	ldr	r3, [pc, #44]	; (8015618 <MX_SDIO_SD_Init+0x38>)
 80155ec:	2200      	movs	r2, #0
 80155ee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80155f0:	4b09      	ldr	r3, [pc, #36]	; (8015618 <MX_SDIO_SD_Init+0x38>)
 80155f2:	2200      	movs	r2, #0
 80155f4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80155f6:	4b08      	ldr	r3, [pc, #32]	; (8015618 <MX_SDIO_SD_Init+0x38>)
 80155f8:	2200      	movs	r2, #0
 80155fa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80155fc:	4b06      	ldr	r3, [pc, #24]	; (8015618 <MX_SDIO_SD_Init+0x38>)
 80155fe:	2200      	movs	r2, #0
 8015600:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8015602:	4b05      	ldr	r3, [pc, #20]	; (8015618 <MX_SDIO_SD_Init+0x38>)
 8015604:	2200      	movs	r2, #0
 8015606:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8015608:	4b03      	ldr	r3, [pc, #12]	; (8015618 <MX_SDIO_SD_Init+0x38>)
 801560a:	2200      	movs	r2, #0
 801560c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 801560e:	bf00      	nop
 8015610:	46bd      	mov	sp, r7
 8015612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015616:	4770      	bx	lr
 8015618:	20008e8c 	.word	0x20008e8c
 801561c:	40012c00 	.word	0x40012c00

08015620 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8015624:	4b17      	ldr	r3, [pc, #92]	; (8015684 <MX_SPI1_Init+0x64>)
 8015626:	4a18      	ldr	r2, [pc, #96]	; (8015688 <MX_SPI1_Init+0x68>)
 8015628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801562a:	4b16      	ldr	r3, [pc, #88]	; (8015684 <MX_SPI1_Init+0x64>)
 801562c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8015630:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8015632:	4b14      	ldr	r3, [pc, #80]	; (8015684 <MX_SPI1_Init+0x64>)
 8015634:	2200      	movs	r2, #0
 8015636:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8015638:	4b12      	ldr	r3, [pc, #72]	; (8015684 <MX_SPI1_Init+0x64>)
 801563a:	2200      	movs	r2, #0
 801563c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801563e:	4b11      	ldr	r3, [pc, #68]	; (8015684 <MX_SPI1_Init+0x64>)
 8015640:	2200      	movs	r2, #0
 8015642:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8015644:	4b0f      	ldr	r3, [pc, #60]	; (8015684 <MX_SPI1_Init+0x64>)
 8015646:	2200      	movs	r2, #0
 8015648:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801564a:	4b0e      	ldr	r3, [pc, #56]	; (8015684 <MX_SPI1_Init+0x64>)
 801564c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015650:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8015652:	4b0c      	ldr	r3, [pc, #48]	; (8015684 <MX_SPI1_Init+0x64>)
 8015654:	2218      	movs	r2, #24
 8015656:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8015658:	4b0a      	ldr	r3, [pc, #40]	; (8015684 <MX_SPI1_Init+0x64>)
 801565a:	2200      	movs	r2, #0
 801565c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801565e:	4b09      	ldr	r3, [pc, #36]	; (8015684 <MX_SPI1_Init+0x64>)
 8015660:	2200      	movs	r2, #0
 8015662:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015664:	4b07      	ldr	r3, [pc, #28]	; (8015684 <MX_SPI1_Init+0x64>)
 8015666:	2200      	movs	r2, #0
 8015668:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 801566a:	4b06      	ldr	r3, [pc, #24]	; (8015684 <MX_SPI1_Init+0x64>)
 801566c:	220a      	movs	r2, #10
 801566e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8015670:	4804      	ldr	r0, [pc, #16]	; (8015684 <MX_SPI1_Init+0x64>)
 8015672:	f7f6 fbe0 	bl	800be36 <HAL_SPI_Init>
 8015676:	4603      	mov	r3, r0
 8015678:	2b00      	cmp	r3, #0
 801567a:	d001      	beq.n	8015680 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 801567c:	f000 fac6 	bl	8015c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8015680:	bf00      	nop
 8015682:	bd80      	pop	{r7, pc}
 8015684:	20008f10 	.word	0x20008f10
 8015688:	40013000 	.word	0x40013000

0801568c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b086      	sub	sp, #24
 8015690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8015692:	f107 0308 	add.w	r3, r7, #8
 8015696:	2200      	movs	r2, #0
 8015698:	601a      	str	r2, [r3, #0]
 801569a:	605a      	str	r2, [r3, #4]
 801569c:	609a      	str	r2, [r3, #8]
 801569e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80156a0:	463b      	mov	r3, r7
 80156a2:	2200      	movs	r2, #0
 80156a4:	601a      	str	r2, [r3, #0]
 80156a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80156a8:	4b1d      	ldr	r3, [pc, #116]	; (8015720 <MX_TIM2_Init+0x94>)
 80156aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80156ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80156b0:	4b1b      	ldr	r3, [pc, #108]	; (8015720 <MX_TIM2_Init+0x94>)
 80156b2:	2253      	movs	r2, #83	; 0x53
 80156b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80156b6:	4b1a      	ldr	r3, [pc, #104]	; (8015720 <MX_TIM2_Init+0x94>)
 80156b8:	2200      	movs	r2, #0
 80156ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 80156bc:	4b18      	ldr	r3, [pc, #96]	; (8015720 <MX_TIM2_Init+0x94>)
 80156be:	4a19      	ldr	r2, [pc, #100]	; (8015724 <MX_TIM2_Init+0x98>)
 80156c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80156c2:	4b17      	ldr	r3, [pc, #92]	; (8015720 <MX_TIM2_Init+0x94>)
 80156c4:	2200      	movs	r2, #0
 80156c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80156c8:	4b15      	ldr	r3, [pc, #84]	; (8015720 <MX_TIM2_Init+0x94>)
 80156ca:	2200      	movs	r2, #0
 80156cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80156ce:	4814      	ldr	r0, [pc, #80]	; (8015720 <MX_TIM2_Init+0x94>)
 80156d0:	f7f6 ffa6 	bl	800c620 <HAL_TIM_Base_Init>
 80156d4:	4603      	mov	r3, r0
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d001      	beq.n	80156de <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80156da:	f000 fa97 	bl	8015c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80156de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80156e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80156e4:	f107 0308 	add.w	r3, r7, #8
 80156e8:	4619      	mov	r1, r3
 80156ea:	480d      	ldr	r0, [pc, #52]	; (8015720 <MX_TIM2_Init+0x94>)
 80156ec:	f7f7 f978 	bl	800c9e0 <HAL_TIM_ConfigClockSource>
 80156f0:	4603      	mov	r3, r0
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d001      	beq.n	80156fa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80156f6:	f000 fa89 	bl	8015c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80156fa:	2300      	movs	r3, #0
 80156fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80156fe:	2300      	movs	r3, #0
 8015700:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8015702:	463b      	mov	r3, r7
 8015704:	4619      	mov	r1, r3
 8015706:	4806      	ldr	r0, [pc, #24]	; (8015720 <MX_TIM2_Init+0x94>)
 8015708:	f7f7 fd31 	bl	800d16e <HAL_TIMEx_MasterConfigSynchronization>
 801570c:	4603      	mov	r3, r0
 801570e:	2b00      	cmp	r3, #0
 8015710:	d001      	beq.n	8015716 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8015712:	f000 fa7b 	bl	8015c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8015716:	bf00      	nop
 8015718:	3718      	adds	r7, #24
 801571a:	46bd      	mov	sp, r7
 801571c:	bd80      	pop	{r7, pc}
 801571e:	bf00      	nop
 8015720:	20008f68 	.word	0x20008f68
 8015724:	fa56ea00 	.word	0xfa56ea00

08015728 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b08e      	sub	sp, #56	; 0x38
 801572c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801572e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015732:	2200      	movs	r2, #0
 8015734:	601a      	str	r2, [r3, #0]
 8015736:	605a      	str	r2, [r3, #4]
 8015738:	609a      	str	r2, [r3, #8]
 801573a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801573c:	f107 0320 	add.w	r3, r7, #32
 8015740:	2200      	movs	r2, #0
 8015742:	601a      	str	r2, [r3, #0]
 8015744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8015746:	1d3b      	adds	r3, r7, #4
 8015748:	2200      	movs	r2, #0
 801574a:	601a      	str	r2, [r3, #0]
 801574c:	605a      	str	r2, [r3, #4]
 801574e:	609a      	str	r2, [r3, #8]
 8015750:	60da      	str	r2, [r3, #12]
 8015752:	611a      	str	r2, [r3, #16]
 8015754:	615a      	str	r2, [r3, #20]
 8015756:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8015758:	4b32      	ldr	r3, [pc, #200]	; (8015824 <MX_TIM3_Init+0xfc>)
 801575a:	4a33      	ldr	r2, [pc, #204]	; (8015828 <MX_TIM3_Init+0x100>)
 801575c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 801575e:	4b31      	ldr	r3, [pc, #196]	; (8015824 <MX_TIM3_Init+0xfc>)
 8015760:	22a7      	movs	r2, #167	; 0xa7
 8015762:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015764:	4b2f      	ldr	r3, [pc, #188]	; (8015824 <MX_TIM3_Init+0xfc>)
 8015766:	2200      	movs	r2, #0
 8015768:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 801576a:	4b2e      	ldr	r3, [pc, #184]	; (8015824 <MX_TIM3_Init+0xfc>)
 801576c:	f242 7210 	movw	r2, #10000	; 0x2710
 8015770:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015772:	4b2c      	ldr	r3, [pc, #176]	; (8015824 <MX_TIM3_Init+0xfc>)
 8015774:	2200      	movs	r2, #0
 8015776:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015778:	4b2a      	ldr	r3, [pc, #168]	; (8015824 <MX_TIM3_Init+0xfc>)
 801577a:	2200      	movs	r2, #0
 801577c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801577e:	4829      	ldr	r0, [pc, #164]	; (8015824 <MX_TIM3_Init+0xfc>)
 8015780:	f7f6 ff4e 	bl	800c620 <HAL_TIM_Base_Init>
 8015784:	4603      	mov	r3, r0
 8015786:	2b00      	cmp	r3, #0
 8015788:	d001      	beq.n	801578e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 801578a:	f000 fa3f 	bl	8015c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801578e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015792:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8015794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015798:	4619      	mov	r1, r3
 801579a:	4822      	ldr	r0, [pc, #136]	; (8015824 <MX_TIM3_Init+0xfc>)
 801579c:	f7f7 f920 	bl	800c9e0 <HAL_TIM_ConfigClockSource>
 80157a0:	4603      	mov	r3, r0
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d001      	beq.n	80157aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80157a6:	f000 fa31 	bl	8015c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80157aa:	481e      	ldr	r0, [pc, #120]	; (8015824 <MX_TIM3_Init+0xfc>)
 80157ac:	f7f6 ff87 	bl	800c6be <HAL_TIM_PWM_Init>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d001      	beq.n	80157ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80157b6:	f000 fa29 	bl	8015c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80157ba:	2300      	movs	r3, #0
 80157bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80157be:	2300      	movs	r3, #0
 80157c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80157c2:	f107 0320 	add.w	r3, r7, #32
 80157c6:	4619      	mov	r1, r3
 80157c8:	4816      	ldr	r0, [pc, #88]	; (8015824 <MX_TIM3_Init+0xfc>)
 80157ca:	f7f7 fcd0 	bl	800d16e <HAL_TIMEx_MasterConfigSynchronization>
 80157ce:	4603      	mov	r3, r0
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d001      	beq.n	80157d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80157d4:	f000 fa1a 	bl	8015c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80157d8:	2360      	movs	r3, #96	; 0x60
 80157da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80157dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80157e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80157e2:	2300      	movs	r3, #0
 80157e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80157e6:	2300      	movs	r3, #0
 80157e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80157ea:	1d3b      	adds	r3, r7, #4
 80157ec:	2208      	movs	r2, #8
 80157ee:	4619      	mov	r1, r3
 80157f0:	480c      	ldr	r0, [pc, #48]	; (8015824 <MX_TIM3_Init+0xfc>)
 80157f2:	f7f7 f82f 	bl	800c854 <HAL_TIM_PWM_ConfigChannel>
 80157f6:	4603      	mov	r3, r0
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d001      	beq.n	8015800 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80157fc:	f000 fa06 	bl	8015c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8015800:	1d3b      	adds	r3, r7, #4
 8015802:	220c      	movs	r2, #12
 8015804:	4619      	mov	r1, r3
 8015806:	4807      	ldr	r0, [pc, #28]	; (8015824 <MX_TIM3_Init+0xfc>)
 8015808:	f7f7 f824 	bl	800c854 <HAL_TIM_PWM_ConfigChannel>
 801580c:	4603      	mov	r3, r0
 801580e:	2b00      	cmp	r3, #0
 8015810:	d001      	beq.n	8015816 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8015812:	f000 f9fb 	bl	8015c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8015816:	4803      	ldr	r0, [pc, #12]	; (8015824 <MX_TIM3_Init+0xfc>)
 8015818:	f000 fe3e 	bl	8016498 <HAL_TIM_MspPostInit>

}
 801581c:	bf00      	nop
 801581e:	3738      	adds	r7, #56	; 0x38
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}
 8015824:	20008dcc 	.word	0x20008dcc
 8015828:	40000400 	.word	0x40000400

0801582c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b08e      	sub	sp, #56	; 0x38
 8015830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8015832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015836:	2200      	movs	r2, #0
 8015838:	601a      	str	r2, [r3, #0]
 801583a:	605a      	str	r2, [r3, #4]
 801583c:	609a      	str	r2, [r3, #8]
 801583e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015840:	f107 0320 	add.w	r3, r7, #32
 8015844:	2200      	movs	r2, #0
 8015846:	601a      	str	r2, [r3, #0]
 8015848:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801584a:	1d3b      	adds	r3, r7, #4
 801584c:	2200      	movs	r2, #0
 801584e:	601a      	str	r2, [r3, #0]
 8015850:	605a      	str	r2, [r3, #4]
 8015852:	609a      	str	r2, [r3, #8]
 8015854:	60da      	str	r2, [r3, #12]
 8015856:	611a      	str	r2, [r3, #16]
 8015858:	615a      	str	r2, [r3, #20]
 801585a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 801585c:	4b33      	ldr	r3, [pc, #204]	; (801592c <MX_TIM5_Init+0x100>)
 801585e:	4a34      	ldr	r2, [pc, #208]	; (8015930 <MX_TIM5_Init+0x104>)
 8015860:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 8015862:	4b32      	ldr	r3, [pc, #200]	; (801592c <MX_TIM5_Init+0x100>)
 8015864:	2201      	movs	r2, #1
 8015866:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015868:	4b30      	ldr	r3, [pc, #192]	; (801592c <MX_TIM5_Init+0x100>)
 801586a:	2200      	movs	r2, #0
 801586c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 801586e:	4b2f      	ldr	r3, [pc, #188]	; (801592c <MX_TIM5_Init+0x100>)
 8015870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015874:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015876:	4b2d      	ldr	r3, [pc, #180]	; (801592c <MX_TIM5_Init+0x100>)
 8015878:	2200      	movs	r2, #0
 801587a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801587c:	4b2b      	ldr	r3, [pc, #172]	; (801592c <MX_TIM5_Init+0x100>)
 801587e:	2200      	movs	r2, #0
 8015880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8015882:	482a      	ldr	r0, [pc, #168]	; (801592c <MX_TIM5_Init+0x100>)
 8015884:	f7f6 fecc 	bl	800c620 <HAL_TIM_Base_Init>
 8015888:	4603      	mov	r3, r0
 801588a:	2b00      	cmp	r3, #0
 801588c:	d001      	beq.n	8015892 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 801588e:	f000 f9bd 	bl	8015c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8015892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015896:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8015898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801589c:	4619      	mov	r1, r3
 801589e:	4823      	ldr	r0, [pc, #140]	; (801592c <MX_TIM5_Init+0x100>)
 80158a0:	f7f7 f89e 	bl	800c9e0 <HAL_TIM_ConfigClockSource>
 80158a4:	4603      	mov	r3, r0
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d001      	beq.n	80158ae <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80158aa:	f000 f9af 	bl	8015c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80158ae:	481f      	ldr	r0, [pc, #124]	; (801592c <MX_TIM5_Init+0x100>)
 80158b0:	f7f6 ff05 	bl	800c6be <HAL_TIM_PWM_Init>
 80158b4:	4603      	mov	r3, r0
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d001      	beq.n	80158be <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80158ba:	f000 f9a7 	bl	8015c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80158be:	2300      	movs	r3, #0
 80158c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80158c2:	2300      	movs	r3, #0
 80158c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80158c6:	f107 0320 	add.w	r3, r7, #32
 80158ca:	4619      	mov	r1, r3
 80158cc:	4817      	ldr	r0, [pc, #92]	; (801592c <MX_TIM5_Init+0x100>)
 80158ce:	f7f7 fc4e 	bl	800d16e <HAL_TIMEx_MasterConfigSynchronization>
 80158d2:	4603      	mov	r3, r0
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d001      	beq.n	80158dc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80158d8:	f000 f998 	bl	8015c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80158dc:	2370      	movs	r3, #112	; 0x70
 80158de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80158e0:	2364      	movs	r3, #100	; 0x64
 80158e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80158e4:	2300      	movs	r3, #0
 80158e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80158e8:	2300      	movs	r3, #0
 80158ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80158ec:	1d3b      	adds	r3, r7, #4
 80158ee:	2204      	movs	r2, #4
 80158f0:	4619      	mov	r1, r3
 80158f2:	480e      	ldr	r0, [pc, #56]	; (801592c <MX_TIM5_Init+0x100>)
 80158f4:	f7f6 ffae 	bl	800c854 <HAL_TIM_PWM_ConfigChannel>
 80158f8:	4603      	mov	r3, r0
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d001      	beq.n	8015902 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80158fe:	f000 f985 	bl	8015c0c <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8015902:	2304      	movs	r3, #4
 8015904:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8015906:	1d3b      	adds	r3, r7, #4
 8015908:	220c      	movs	r2, #12
 801590a:	4619      	mov	r1, r3
 801590c:	4807      	ldr	r0, [pc, #28]	; (801592c <MX_TIM5_Init+0x100>)
 801590e:	f7f6 ffa1 	bl	800c854 <HAL_TIM_PWM_ConfigChannel>
 8015912:	4603      	mov	r3, r0
 8015914:	2b00      	cmp	r3, #0
 8015916:	d001      	beq.n	801591c <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8015918:	f000 f978 	bl	8015c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 801591c:	4803      	ldr	r0, [pc, #12]	; (801592c <MX_TIM5_Init+0x100>)
 801591e:	f000 fdbb 	bl	8016498 <HAL_TIM_MspPostInit>

}
 8015922:	bf00      	nop
 8015924:	3738      	adds	r7, #56	; 0x38
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
 801592a:	bf00      	nop
 801592c:	20008d8c 	.word	0x20008d8c
 8015930:	40000c00 	.word	0x40000c00

08015934 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8015938:	4b11      	ldr	r3, [pc, #68]	; (8015980 <MX_USART3_UART_Init+0x4c>)
 801593a:	4a12      	ldr	r2, [pc, #72]	; (8015984 <MX_USART3_UART_Init+0x50>)
 801593c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 801593e:	4b10      	ldr	r3, [pc, #64]	; (8015980 <MX_USART3_UART_Init+0x4c>)
 8015940:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8015944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8015946:	4b0e      	ldr	r3, [pc, #56]	; (8015980 <MX_USART3_UART_Init+0x4c>)
 8015948:	2200      	movs	r2, #0
 801594a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 801594c:	4b0c      	ldr	r3, [pc, #48]	; (8015980 <MX_USART3_UART_Init+0x4c>)
 801594e:	2200      	movs	r2, #0
 8015950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8015952:	4b0b      	ldr	r3, [pc, #44]	; (8015980 <MX_USART3_UART_Init+0x4c>)
 8015954:	2200      	movs	r2, #0
 8015956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8015958:	4b09      	ldr	r3, [pc, #36]	; (8015980 <MX_USART3_UART_Init+0x4c>)
 801595a:	220c      	movs	r2, #12
 801595c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801595e:	4b08      	ldr	r3, [pc, #32]	; (8015980 <MX_USART3_UART_Init+0x4c>)
 8015960:	2200      	movs	r2, #0
 8015962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8015964:	4b06      	ldr	r3, [pc, #24]	; (8015980 <MX_USART3_UART_Init+0x4c>)
 8015966:	2200      	movs	r2, #0
 8015968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801596a:	4805      	ldr	r0, [pc, #20]	; (8015980 <MX_USART3_UART_Init+0x4c>)
 801596c:	f7f7 fc44 	bl	800d1f8 <HAL_UART_Init>
 8015970:	4603      	mov	r3, r0
 8015972:	2b00      	cmp	r3, #0
 8015974:	d001      	beq.n	801597a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8015976:	f000 f949 	bl	8015c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 801597a:	bf00      	nop
 801597c:	bd80      	pop	{r7, pc}
 801597e:	bf00      	nop
 8015980:	20008cf8 	.word	0x20008cf8
 8015984:	40004800 	.word	0x40004800

08015988 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b082      	sub	sp, #8
 801598c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801598e:	2300      	movs	r3, #0
 8015990:	607b      	str	r3, [r7, #4]
 8015992:	4b10      	ldr	r3, [pc, #64]	; (80159d4 <MX_DMA_Init+0x4c>)
 8015994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015996:	4a0f      	ldr	r2, [pc, #60]	; (80159d4 <MX_DMA_Init+0x4c>)
 8015998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801599c:	6313      	str	r3, [r2, #48]	; 0x30
 801599e:	4b0d      	ldr	r3, [pc, #52]	; (80159d4 <MX_DMA_Init+0x4c>)
 80159a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80159a6:	607b      	str	r3, [r7, #4]
 80159a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80159aa:	2200      	movs	r2, #0
 80159ac:	2100      	movs	r1, #0
 80159ae:	203b      	movs	r0, #59	; 0x3b
 80159b0:	f7f1 fa07 	bl	8006dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80159b4:	203b      	movs	r0, #59	; 0x3b
 80159b6:	f7f1 fa20 	bl	8006dfa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80159ba:	2200      	movs	r2, #0
 80159bc:	2100      	movs	r1, #0
 80159be:	2045      	movs	r0, #69	; 0x45
 80159c0:	f7f1 f9ff 	bl	8006dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80159c4:	2045      	movs	r0, #69	; 0x45
 80159c6:	f7f1 fa18 	bl	8006dfa <HAL_NVIC_EnableIRQ>

}
 80159ca:	bf00      	nop
 80159cc:	3708      	adds	r7, #8
 80159ce:	46bd      	mov	sp, r7
 80159d0:	bd80      	pop	{r7, pc}
 80159d2:	bf00      	nop
 80159d4:	40023800 	.word	0x40023800

080159d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b08a      	sub	sp, #40	; 0x28
 80159dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80159de:	f107 0314 	add.w	r3, r7, #20
 80159e2:	2200      	movs	r2, #0
 80159e4:	601a      	str	r2, [r3, #0]
 80159e6:	605a      	str	r2, [r3, #4]
 80159e8:	609a      	str	r2, [r3, #8]
 80159ea:	60da      	str	r2, [r3, #12]
 80159ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80159ee:	2300      	movs	r3, #0
 80159f0:	613b      	str	r3, [r7, #16]
 80159f2:	4b63      	ldr	r3, [pc, #396]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 80159f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159f6:	4a62      	ldr	r2, [pc, #392]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 80159f8:	f043 0304 	orr.w	r3, r3, #4
 80159fc:	6313      	str	r3, [r2, #48]	; 0x30
 80159fe:	4b60      	ldr	r3, [pc, #384]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a02:	f003 0304 	and.w	r3, r3, #4
 8015a06:	613b      	str	r3, [r7, #16]
 8015a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	60fb      	str	r3, [r7, #12]
 8015a0e:	4b5c      	ldr	r3, [pc, #368]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a12:	4a5b      	ldr	r2, [pc, #364]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a18:	6313      	str	r3, [r2, #48]	; 0x30
 8015a1a:	4b59      	ldr	r3, [pc, #356]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a22:	60fb      	str	r3, [r7, #12]
 8015a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8015a26:	2300      	movs	r3, #0
 8015a28:	60bb      	str	r3, [r7, #8]
 8015a2a:	4b55      	ldr	r3, [pc, #340]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a2e:	4a54      	ldr	r2, [pc, #336]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a30:	f043 0301 	orr.w	r3, r3, #1
 8015a34:	6313      	str	r3, [r2, #48]	; 0x30
 8015a36:	4b52      	ldr	r3, [pc, #328]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a3a:	f003 0301 	and.w	r3, r3, #1
 8015a3e:	60bb      	str	r3, [r7, #8]
 8015a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8015a42:	2300      	movs	r3, #0
 8015a44:	607b      	str	r3, [r7, #4]
 8015a46:	4b4e      	ldr	r3, [pc, #312]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a4a:	4a4d      	ldr	r2, [pc, #308]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a4c:	f043 0302 	orr.w	r3, r3, #2
 8015a50:	6313      	str	r3, [r2, #48]	; 0x30
 8015a52:	4b4b      	ldr	r3, [pc, #300]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a56:	f003 0302 	and.w	r3, r3, #2
 8015a5a:	607b      	str	r3, [r7, #4]
 8015a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8015a5e:	2300      	movs	r3, #0
 8015a60:	603b      	str	r3, [r7, #0]
 8015a62:	4b47      	ldr	r3, [pc, #284]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a66:	4a46      	ldr	r2, [pc, #280]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a68:	f043 0308 	orr.w	r3, r3, #8
 8015a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8015a6e:	4b44      	ldr	r3, [pc, #272]	; (8015b80 <MX_GPIO_Init+0x1a8>)
 8015a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a72:	f003 0308 	and.w	r3, r3, #8
 8015a76:	603b      	str	r3, [r7, #0]
 8015a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	21ef      	movs	r1, #239	; 0xef
 8015a7e:	4841      	ldr	r0, [pc, #260]	; (8015b84 <MX_GPIO_Init+0x1ac>)
 8015a80:	f7f1 ff20 	bl	80078c4 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 8015a84:	2200      	movs	r2, #0
 8015a86:	2115      	movs	r1, #21
 8015a88:	483f      	ldr	r0, [pc, #252]	; (8015b88 <MX_GPIO_Init+0x1b0>)
 8015a8a:	f7f1 ff1b 	bl	80078c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 8015a8e:	2200      	movs	r2, #0
 8015a90:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 8015a94:	483d      	ldr	r0, [pc, #244]	; (8015b8c <MX_GPIO_Init+0x1b4>)
 8015a96:	f7f1 ff15 	bl	80078c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8015a9a:	23cf      	movs	r3, #207	; 0xcf
 8015a9c:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015a9e:	2301      	movs	r3, #1
 8015aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015aaa:	f107 0314 	add.w	r3, r7, #20
 8015aae:	4619      	mov	r1, r3
 8015ab0:	4834      	ldr	r0, [pc, #208]	; (8015b84 <MX_GPIO_Init+0x1ac>)
 8015ab2:	f7f1 fd55 	bl	8007560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 8015ab6:	2305      	movs	r3, #5
 8015ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015aba:	2301      	movs	r3, #1
 8015abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8015abe:	2302      	movs	r3, #2
 8015ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ac6:	f107 0314 	add.w	r3, r7, #20
 8015aca:	4619      	mov	r1, r3
 8015acc:	482e      	ldr	r0, [pc, #184]	; (8015b88 <MX_GPIO_Init+0x1b0>)
 8015ace:	f7f1 fd47 	bl	8007560 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 8015ad2:	2310      	movs	r3, #16
 8015ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ada:	2300      	movs	r3, #0
 8015adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 8015ae2:	f107 0314 	add.w	r3, r7, #20
 8015ae6:	4619      	mov	r1, r3
 8015ae8:	4827      	ldr	r0, [pc, #156]	; (8015b88 <MX_GPIO_Init+0x1b0>)
 8015aea:	f7f1 fd39 	bl	8007560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 8015aee:	23c0      	movs	r3, #192	; 0xc0
 8015af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8015af2:	4b27      	ldr	r3, [pc, #156]	; (8015b90 <MX_GPIO_Init+0x1b8>)
 8015af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015af6:	2300      	movs	r3, #0
 8015af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015afa:	f107 0314 	add.w	r3, r7, #20
 8015afe:	4619      	mov	r1, r3
 8015b00:	4821      	ldr	r0, [pc, #132]	; (8015b88 <MX_GPIO_Init+0x1b0>)
 8015b02:	f7f1 fd2d 	bl	8007560 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 8015b06:	2320      	movs	r3, #32
 8015b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8015b0e:	2302      	movs	r3, #2
 8015b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015b12:	2300      	movs	r3, #0
 8015b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 8015b16:	f107 0314 	add.w	r3, r7, #20
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	4819      	ldr	r0, [pc, #100]	; (8015b84 <MX_GPIO_Init+0x1ac>)
 8015b1e:	f7f1 fd1f 	bl	8007560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8015b22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8015b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015b28:	2301      	movs	r3, #1
 8015b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015b30:	2300      	movs	r3, #0
 8015b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015b34:	f107 0314 	add.w	r3, r7, #20
 8015b38:	4619      	mov	r1, r3
 8015b3a:	4814      	ldr	r0, [pc, #80]	; (8015b8c <MX_GPIO_Init+0x1b4>)
 8015b3c:	f7f1 fd10 	bl	8007560 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 8015b40:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8015b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015b46:	2300      	movs	r3, #0
 8015b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015b4e:	f107 0314 	add.w	r3, r7, #20
 8015b52:	4619      	mov	r1, r3
 8015b54:	480c      	ldr	r0, [pc, #48]	; (8015b88 <MX_GPIO_Init+0x1b0>)
 8015b56:	f7f1 fd03 	bl	8007560 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 8015b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015b60:	2301      	movs	r3, #1
 8015b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8015b64:	2302      	movs	r3, #2
 8015b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015b68:	2300      	movs	r3, #0
 8015b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 8015b6c:	f107 0314 	add.w	r3, r7, #20
 8015b70:	4619      	mov	r1, r3
 8015b72:	4806      	ldr	r0, [pc, #24]	; (8015b8c <MX_GPIO_Init+0x1b4>)
 8015b74:	f7f1 fcf4 	bl	8007560 <HAL_GPIO_Init>

}
 8015b78:	bf00      	nop
 8015b7a:	3728      	adds	r7, #40	; 0x28
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}
 8015b80:	40023800 	.word	0x40023800
 8015b84:	40020800 	.word	0x40020800
 8015b88:	40020000 	.word	0x40020000
 8015b8c:	40020400 	.word	0x40020400
 8015b90:	10110000 	.word	0x10110000

08015b94 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 8015b94:	b480      	push	{r7}
 8015b96:	af00      	add	r7, sp, #0
 8015b98:	4b02      	ldr	r3, [pc, #8]	; (8015ba4 <Get_I2C1_Instance+0x10>)
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba2:	4770      	bx	lr
 8015ba4:	20008d38 	.word	0x20008d38

08015ba8 <Get_SPI1_Instance>:
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
 8015ba8:	b480      	push	{r7}
 8015baa:	af00      	add	r7, sp, #0
 8015bac:	4b02      	ldr	r3, [pc, #8]	; (8015bb8 <Get_SPI1_Instance+0x10>)
 8015bae:	4618      	mov	r0, r3
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb6:	4770      	bx	lr
 8015bb8:	20008f10 	.word	0x20008f10

08015bbc <Get_UART3_Instance>:
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
 8015bbc:	b480      	push	{r7}
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	4b02      	ldr	r3, [pc, #8]	; (8015bcc <Get_UART3_Instance+0x10>)
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bca:	4770      	bx	lr
 8015bcc:	20008cf8 	.word	0x20008cf8

08015bd0 <Get_RTC_Instance>:
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
 8015bd0:	b480      	push	{r7}
 8015bd2:	af00      	add	r7, sp, #0
 8015bd4:	4b02      	ldr	r3, [pc, #8]	; (8015be0 <Get_RTC_Instance+0x10>)
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bde:	4770      	bx	lr
 8015be0:	20008e0c 	.word	0x20008e0c

08015be4 <Get_TIM3_Instance>:
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
 8015be4:	b480      	push	{r7}
 8015be6:	af00      	add	r7, sp, #0
 8015be8:	4b02      	ldr	r3, [pc, #8]	; (8015bf4 <Get_TIM3_Instance+0x10>)
 8015bea:	4618      	mov	r0, r3
 8015bec:	46bd      	mov	sp, r7
 8015bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf2:	4770      	bx	lr
 8015bf4:	20008dcc 	.word	0x20008dcc

08015bf8 <Get_TIM5_Instance>:
TIM_HandleTypeDef* Get_TIM5_Instance(void) { return &htim5; }
 8015bf8:	b480      	push	{r7}
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	4b02      	ldr	r3, [pc, #8]	; (8015c08 <Get_TIM5_Instance+0x10>)
 8015bfe:	4618      	mov	r0, r3
 8015c00:	46bd      	mov	sp, r7
 8015c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c06:	4770      	bx	lr
 8015c08:	20008d8c 	.word	0x20008d8c

08015c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8015c0c:	b480      	push	{r7}
 8015c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8015c10:	bf00      	nop
 8015c12:	46bd      	mov	sp, r7
 8015c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c18:	4770      	bx	lr

08015c1a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8015c1a:	b580      	push	{r7, lr}
 8015c1c:	b084      	sub	sp, #16
 8015c1e:	af00      	add	r7, sp, #0
 8015c20:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8015c22:	f7f0 ffc5 	bl	8006bb0 <HAL_GetTick>
 8015c26:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8015c28:	e006      	b.n	8015c38 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015c2a:	f7fe f87b 	bl	8013d24 <BSP_SD_GetCardState>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d101      	bne.n	8015c38 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015c34:	2300      	movs	r3, #0
 8015c36:	e009      	b.n	8015c4c <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015c38:	f7f0 ffba 	bl	8006bb0 <HAL_GetTick>
 8015c3c:	4602      	mov	r2, r0
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	1ad3      	subs	r3, r2, r3
 8015c42:	687a      	ldr	r2, [r7, #4]
 8015c44:	429a      	cmp	r2, r3
 8015c46:	d8f0      	bhi.n	8015c2a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	3710      	adds	r7, #16
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}

08015c54 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b082      	sub	sp, #8
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015c5e:	4b0b      	ldr	r3, [pc, #44]	; (8015c8c <SD_CheckStatus+0x38>)
 8015c60:	2201      	movs	r2, #1
 8015c62:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015c64:	f7fe f85e 	bl	8013d24 <BSP_SD_GetCardState>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d107      	bne.n	8015c7e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8015c6e:	4b07      	ldr	r3, [pc, #28]	; (8015c8c <SD_CheckStatus+0x38>)
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	b2db      	uxtb	r3, r3
 8015c74:	f023 0301 	bic.w	r3, r3, #1
 8015c78:	b2da      	uxtb	r2, r3
 8015c7a:	4b04      	ldr	r3, [pc, #16]	; (8015c8c <SD_CheckStatus+0x38>)
 8015c7c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8015c7e:	4b03      	ldr	r3, [pc, #12]	; (8015c8c <SD_CheckStatus+0x38>)
 8015c80:	781b      	ldrb	r3, [r3, #0]
 8015c82:	b2db      	uxtb	r3, r3
}
 8015c84:	4618      	mov	r0, r3
 8015c86:	3708      	adds	r7, #8
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	bd80      	pop	{r7, pc}
 8015c8c:	2000016d 	.word	0x2000016d

08015c90 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b082      	sub	sp, #8
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	4603      	mov	r3, r0
 8015c98:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015c9a:	f7fd ffe9 	bl	8013c70 <BSP_SD_Init>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d107      	bne.n	8015cb4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8015ca4:	79fb      	ldrb	r3, [r7, #7]
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7ff ffd4 	bl	8015c54 <SD_CheckStatus>
 8015cac:	4603      	mov	r3, r0
 8015cae:	461a      	mov	r2, r3
 8015cb0:	4b04      	ldr	r3, [pc, #16]	; (8015cc4 <SD_initialize+0x34>)
 8015cb2:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8015cb4:	4b03      	ldr	r3, [pc, #12]	; (8015cc4 <SD_initialize+0x34>)
 8015cb6:	781b      	ldrb	r3, [r3, #0]
 8015cb8:	b2db      	uxtb	r3, r3
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3708      	adds	r7, #8
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}
 8015cc2:	bf00      	nop
 8015cc4:	2000016d 	.word	0x2000016d

08015cc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b082      	sub	sp, #8
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	4603      	mov	r3, r0
 8015cd0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8015cd2:	79fb      	ldrb	r3, [r7, #7]
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7ff ffbd 	bl	8015c54 <SD_CheckStatus>
 8015cda:	4603      	mov	r3, r0
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3708      	adds	r7, #8
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b088      	sub	sp, #32
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	60b9      	str	r1, [r7, #8]
 8015cec:	607a      	str	r2, [r7, #4]
 8015cee:	603b      	str	r3, [r7, #0]
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015cf8:	f247 5030 	movw	r0, #30000	; 0x7530
 8015cfc:	f7ff ff8d 	bl	8015c1a <SD_CheckStatusWithTimeout>
 8015d00:	4603      	mov	r3, r0
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	da01      	bge.n	8015d0a <SD_read+0x26>
  {
    return res;
 8015d06:	7ffb      	ldrb	r3, [r7, #31]
 8015d08:	e08b      	b.n	8015e22 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	f003 0303 	and.w	r3, r3, #3
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	f040 8085 	bne.w	8015e20 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8015d16:	683a      	ldr	r2, [r7, #0]
 8015d18:	6879      	ldr	r1, [r7, #4]
 8015d1a:	68b8      	ldr	r0, [r7, #8]
 8015d1c:	f7fd ffce 	bl	8013cbc <BSP_SD_ReadBlocks_DMA>
 8015d20:	4603      	mov	r3, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d133      	bne.n	8015d8e <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8015d26:	4b41      	ldr	r3, [pc, #260]	; (8015e2c <SD_read+0x148>)
 8015d28:	2200      	movs	r2, #0
 8015d2a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8015d2c:	f7f0 ff40 	bl	8006bb0 <HAL_GetTick>
 8015d30:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015d32:	bf00      	nop
 8015d34:	4b3d      	ldr	r3, [pc, #244]	; (8015e2c <SD_read+0x148>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d108      	bne.n	8015d4e <SD_read+0x6a>
 8015d3c:	f7f0 ff38 	bl	8006bb0 <HAL_GetTick>
 8015d40:	4602      	mov	r2, r0
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	1ad3      	subs	r3, r2, r3
 8015d46:	f247 522f 	movw	r2, #29999	; 0x752f
 8015d4a:	4293      	cmp	r3, r2
 8015d4c:	d9f2      	bls.n	8015d34 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8015d4e:	4b37      	ldr	r3, [pc, #220]	; (8015e2c <SD_read+0x148>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d102      	bne.n	8015d5c <SD_read+0x78>
      {
        res = RES_ERROR;
 8015d56:	2301      	movs	r3, #1
 8015d58:	77fb      	strb	r3, [r7, #31]
 8015d5a:	e061      	b.n	8015e20 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8015d5c:	4b33      	ldr	r3, [pc, #204]	; (8015e2c <SD_read+0x148>)
 8015d5e:	2200      	movs	r2, #0
 8015d60:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015d62:	f7f0 ff25 	bl	8006bb0 <HAL_GetTick>
 8015d66:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015d68:	e007      	b.n	8015d7a <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015d6a:	f7fd ffdb 	bl	8013d24 <BSP_SD_GetCardState>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d102      	bne.n	8015d7a <SD_read+0x96>
          {
            res = RES_OK;
 8015d74:	2300      	movs	r3, #0
 8015d76:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015d78:	e052      	b.n	8015e20 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015d7a:	f7f0 ff19 	bl	8006bb0 <HAL_GetTick>
 8015d7e:	4602      	mov	r2, r0
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	1ad3      	subs	r3, r2, r3
 8015d84:	f247 522f 	movw	r2, #29999	; 0x752f
 8015d88:	4293      	cmp	r3, r2
 8015d8a:	d9ee      	bls.n	8015d6a <SD_read+0x86>
 8015d8c:	e048      	b.n	8015e20 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8015d8e:	2300      	movs	r3, #0
 8015d90:	61bb      	str	r3, [r7, #24]
 8015d92:	e034      	b.n	8015dfe <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	1c5a      	adds	r2, r3, #1
 8015d98:	607a      	str	r2, [r7, #4]
 8015d9a:	2201      	movs	r2, #1
 8015d9c:	4619      	mov	r1, r3
 8015d9e:	4824      	ldr	r0, [pc, #144]	; (8015e30 <SD_read+0x14c>)
 8015da0:	f7fd ff8c 	bl	8013cbc <BSP_SD_ReadBlocks_DMA>
 8015da4:	4603      	mov	r3, r0
 8015da6:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015da8:	7fbb      	ldrb	r3, [r7, #30]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d12c      	bne.n	8015e08 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8015dae:	4b1f      	ldr	r3, [pc, #124]	; (8015e2c <SD_read+0x148>)
 8015db0:	2200      	movs	r2, #0
 8015db2:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8015db4:	f7f0 fefc 	bl	8006bb0 <HAL_GetTick>
 8015db8:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015dba:	bf00      	nop
 8015dbc:	4b1b      	ldr	r3, [pc, #108]	; (8015e2c <SD_read+0x148>)
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d108      	bne.n	8015dd6 <SD_read+0xf2>
 8015dc4:	f7f0 fef4 	bl	8006bb0 <HAL_GetTick>
 8015dc8:	4602      	mov	r2, r0
 8015dca:	697b      	ldr	r3, [r7, #20]
 8015dcc:	1ad3      	subs	r3, r2, r3
 8015dce:	f247 522f 	movw	r2, #29999	; 0x752f
 8015dd2:	4293      	cmp	r3, r2
 8015dd4:	d9f2      	bls.n	8015dbc <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 8015dd6:	4b15      	ldr	r3, [pc, #84]	; (8015e2c <SD_read+0x148>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d016      	beq.n	8015e0c <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8015dde:	68bb      	ldr	r3, [r7, #8]
 8015de0:	4a13      	ldr	r2, [pc, #76]	; (8015e30 <SD_read+0x14c>)
 8015de2:	4618      	mov	r0, r3
 8015de4:	4611      	mov	r1, r2
 8015de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015dea:	461a      	mov	r2, r3
 8015dec:	f001 fa60 	bl	80172b0 <memcpy>
          buff += BLOCKSIZE;
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015df6:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8015df8:	69bb      	ldr	r3, [r7, #24]
 8015dfa:	3301      	adds	r3, #1
 8015dfc:	61bb      	str	r3, [r7, #24]
 8015dfe:	69bb      	ldr	r3, [r7, #24]
 8015e00:	683a      	ldr	r2, [r7, #0]
 8015e02:	429a      	cmp	r2, r3
 8015e04:	d8c6      	bhi.n	8015d94 <SD_read+0xb0>
 8015e06:	e002      	b.n	8015e0e <SD_read+0x12a>
        }
        else
        {
          break;
 8015e08:	bf00      	nop
 8015e0a:	e000      	b.n	8015e0e <SD_read+0x12a>
            break;
 8015e0c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8015e0e:	69bb      	ldr	r3, [r7, #24]
 8015e10:	683a      	ldr	r2, [r7, #0]
 8015e12:	429a      	cmp	r2, r3
 8015e14:	d104      	bne.n	8015e20 <SD_read+0x13c>
 8015e16:	7fbb      	ldrb	r3, [r7, #30]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d101      	bne.n	8015e20 <SD_read+0x13c>
        res = RES_OK;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8015e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3720      	adds	r7, #32
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	20000e2c 	.word	0x20000e2c
 8015e30:	20000c28 	.word	0x20000c28

08015e34 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b088      	sub	sp, #32
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	60b9      	str	r1, [r7, #8]
 8015e3c:	607a      	str	r2, [r7, #4]
 8015e3e:	603b      	str	r3, [r7, #0]
 8015e40:	4603      	mov	r3, r0
 8015e42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015e44:	2301      	movs	r3, #1
 8015e46:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 8015e48:	4b4c      	ldr	r3, [pc, #304]	; (8015f7c <SD_write+0x148>)
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015e4e:	f247 5030 	movw	r0, #30000	; 0x7530
 8015e52:	f7ff fee2 	bl	8015c1a <SD_CheckStatusWithTimeout>
 8015e56:	4603      	mov	r3, r0
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	da01      	bge.n	8015e60 <SD_write+0x2c>
  {
    return res;
 8015e5c:	7ffb      	ldrb	r3, [r7, #31]
 8015e5e:	e088      	b.n	8015f72 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8015e60:	68bb      	ldr	r3, [r7, #8]
 8015e62:	f003 0303 	and.w	r3, r3, #3
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	f040 8082 	bne.w	8015f70 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015e6c:	683a      	ldr	r2, [r7, #0]
 8015e6e:	6879      	ldr	r1, [r7, #4]
 8015e70:	68b8      	ldr	r0, [r7, #8]
 8015e72:	f7fd ff3d 	bl	8013cf0 <BSP_SD_WriteBlocks_DMA>
 8015e76:	4603      	mov	r3, r0
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d130      	bne.n	8015ede <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8015e7c:	f7f0 fe98 	bl	8006bb0 <HAL_GetTick>
 8015e80:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015e82:	bf00      	nop
 8015e84:	4b3d      	ldr	r3, [pc, #244]	; (8015f7c <SD_write+0x148>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d108      	bne.n	8015e9e <SD_write+0x6a>
 8015e8c:	f7f0 fe90 	bl	8006bb0 <HAL_GetTick>
 8015e90:	4602      	mov	r2, r0
 8015e92:	697b      	ldr	r3, [r7, #20]
 8015e94:	1ad3      	subs	r3, r2, r3
 8015e96:	f247 522f 	movw	r2, #29999	; 0x752f
 8015e9a:	4293      	cmp	r3, r2
 8015e9c:	d9f2      	bls.n	8015e84 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8015e9e:	4b37      	ldr	r3, [pc, #220]	; (8015f7c <SD_write+0x148>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d102      	bne.n	8015eac <SD_write+0x78>
      {
        res = RES_ERROR;
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	77fb      	strb	r3, [r7, #31]
 8015eaa:	e061      	b.n	8015f70 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8015eac:	4b33      	ldr	r3, [pc, #204]	; (8015f7c <SD_write+0x148>)
 8015eae:	2200      	movs	r2, #0
 8015eb0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015eb2:	f7f0 fe7d 	bl	8006bb0 <HAL_GetTick>
 8015eb6:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015eb8:	e007      	b.n	8015eca <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015eba:	f7fd ff33 	bl	8013d24 <BSP_SD_GetCardState>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d102      	bne.n	8015eca <SD_write+0x96>
          {
            res = RES_OK;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	77fb      	strb	r3, [r7, #31]
            break;
 8015ec8:	e052      	b.n	8015f70 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015eca:	f7f0 fe71 	bl	8006bb0 <HAL_GetTick>
 8015ece:	4602      	mov	r2, r0
 8015ed0:	697b      	ldr	r3, [r7, #20]
 8015ed2:	1ad3      	subs	r3, r2, r3
 8015ed4:	f247 522f 	movw	r2, #29999	; 0x752f
 8015ed8:	4293      	cmp	r3, r2
 8015eda:	d9ee      	bls.n	8015eba <SD_write+0x86>
 8015edc:	e048      	b.n	8015f70 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8015ede:	2300      	movs	r3, #0
 8015ee0:	61bb      	str	r3, [r7, #24]
 8015ee2:	e034      	b.n	8015f4e <SD_write+0x11a>
      {
        WriteStatus = 0;
 8015ee4:	4b25      	ldr	r3, [pc, #148]	; (8015f7c <SD_write+0x148>)
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	1c5a      	adds	r2, r3, #1
 8015eee:	607a      	str	r2, [r7, #4]
 8015ef0:	2201      	movs	r2, #1
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	4822      	ldr	r0, [pc, #136]	; (8015f80 <SD_write+0x14c>)
 8015ef6:	f7fd fefb 	bl	8013cf0 <BSP_SD_WriteBlocks_DMA>
 8015efa:	4603      	mov	r3, r0
 8015efc:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015efe:	7fbb      	ldrb	r3, [r7, #30]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d129      	bne.n	8015f58 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8015f04:	f7f0 fe54 	bl	8006bb0 <HAL_GetTick>
 8015f08:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015f0a:	bf00      	nop
 8015f0c:	4b1b      	ldr	r3, [pc, #108]	; (8015f7c <SD_write+0x148>)
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d108      	bne.n	8015f26 <SD_write+0xf2>
 8015f14:	f7f0 fe4c 	bl	8006bb0 <HAL_GetTick>
 8015f18:	4602      	mov	r2, r0
 8015f1a:	697b      	ldr	r3, [r7, #20]
 8015f1c:	1ad3      	subs	r3, r2, r3
 8015f1e:	f247 522f 	movw	r2, #29999	; 0x752f
 8015f22:	4293      	cmp	r3, r2
 8015f24:	d9f2      	bls.n	8015f0c <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 8015f26:	4b15      	ldr	r3, [pc, #84]	; (8015f7c <SD_write+0x148>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d016      	beq.n	8015f5c <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	4a13      	ldr	r2, [pc, #76]	; (8015f80 <SD_write+0x14c>)
 8015f32:	4618      	mov	r0, r3
 8015f34:	4611      	mov	r1, r2
 8015f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015f3a:	461a      	mov	r2, r3
 8015f3c:	f001 f9b8 	bl	80172b0 <memcpy>
          buff += BLOCKSIZE;
 8015f40:	68bb      	ldr	r3, [r7, #8]
 8015f42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015f46:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8015f48:	69bb      	ldr	r3, [r7, #24]
 8015f4a:	3301      	adds	r3, #1
 8015f4c:	61bb      	str	r3, [r7, #24]
 8015f4e:	69bb      	ldr	r3, [r7, #24]
 8015f50:	683a      	ldr	r2, [r7, #0]
 8015f52:	429a      	cmp	r2, r3
 8015f54:	d8c6      	bhi.n	8015ee4 <SD_write+0xb0>
 8015f56:	e002      	b.n	8015f5e <SD_write+0x12a>
        }
        else
        {
          break;
 8015f58:	bf00      	nop
 8015f5a:	e000      	b.n	8015f5e <SD_write+0x12a>
            break;
 8015f5c:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8015f5e:	69bb      	ldr	r3, [r7, #24]
 8015f60:	683a      	ldr	r2, [r7, #0]
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d104      	bne.n	8015f70 <SD_write+0x13c>
 8015f66:	7fbb      	ldrb	r3, [r7, #30]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d101      	bne.n	8015f70 <SD_write+0x13c>
        res = RES_OK;
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8015f70:	7ffb      	ldrb	r3, [r7, #31]
}
 8015f72:	4618      	mov	r0, r3
 8015f74:	3720      	adds	r7, #32
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	bf00      	nop
 8015f7c:	20000e28 	.word	0x20000e28
 8015f80:	20000c28 	.word	0x20000c28

08015f84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b08c      	sub	sp, #48	; 0x30
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	603a      	str	r2, [r7, #0]
 8015f8e:	71fb      	strb	r3, [r7, #7]
 8015f90:	460b      	mov	r3, r1
 8015f92:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015f94:	2301      	movs	r3, #1
 8015f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015f9a:	4b25      	ldr	r3, [pc, #148]	; (8016030 <SD_ioctl+0xac>)
 8015f9c:	781b      	ldrb	r3, [r3, #0]
 8015f9e:	b2db      	uxtb	r3, r3
 8015fa0:	f003 0301 	and.w	r3, r3, #1
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d001      	beq.n	8015fac <SD_ioctl+0x28>
 8015fa8:	2303      	movs	r3, #3
 8015faa:	e03c      	b.n	8016026 <SD_ioctl+0xa2>

  switch (cmd)
 8015fac:	79bb      	ldrb	r3, [r7, #6]
 8015fae:	2b03      	cmp	r3, #3
 8015fb0:	d834      	bhi.n	801601c <SD_ioctl+0x98>
 8015fb2:	a201      	add	r2, pc, #4	; (adr r2, 8015fb8 <SD_ioctl+0x34>)
 8015fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fb8:	08015fc9 	.word	0x08015fc9
 8015fbc:	08015fd1 	.word	0x08015fd1
 8015fc0:	08015fe9 	.word	0x08015fe9
 8015fc4:	08016003 	.word	0x08016003
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015fce:	e028      	b.n	8016022 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015fd0:	f107 030c 	add.w	r3, r7, #12
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7fd feb5 	bl	8013d44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fdc:	683b      	ldr	r3, [r7, #0]
 8015fde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015fe6:	e01c      	b.n	8016022 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015fe8:	f107 030c 	add.w	r3, r7, #12
 8015fec:	4618      	mov	r0, r3
 8015fee:	f7fd fea9 	bl	8013d44 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ff4:	b29a      	uxth	r2, r3
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016000:	e00f      	b.n	8016022 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016002:	f107 030c 	add.w	r3, r7, #12
 8016006:	4618      	mov	r0, r3
 8016008:	f7fd fe9c 	bl	8013d44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801600e:	0a5a      	lsrs	r2, r3, #9
 8016010:	683b      	ldr	r3, [r7, #0]
 8016012:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016014:	2300      	movs	r3, #0
 8016016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801601a:	e002      	b.n	8016022 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801601c:	2304      	movs	r3, #4
 801601e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8016022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016026:	4618      	mov	r0, r3
 8016028:	3730      	adds	r7, #48	; 0x30
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}
 801602e:	bf00      	nop
 8016030:	2000016d 	.word	0x2000016d

08016034 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8016034:	b480      	push	{r7}
 8016036:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8016038:	4b03      	ldr	r3, [pc, #12]	; (8016048 <BSP_SD_WriteCpltCallback+0x14>)
 801603a:	2201      	movs	r2, #1
 801603c:	601a      	str	r2, [r3, #0]
}
 801603e:	bf00      	nop
 8016040:	46bd      	mov	sp, r7
 8016042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016046:	4770      	bx	lr
 8016048:	20000e28 	.word	0x20000e28

0801604c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801604c:	b480      	push	{r7}
 801604e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8016050:	4b03      	ldr	r3, [pc, #12]	; (8016060 <BSP_SD_ReadCpltCallback+0x14>)
 8016052:	2201      	movs	r2, #1
 8016054:	601a      	str	r2, [r3, #0]
}
 8016056:	bf00      	nop
 8016058:	46bd      	mov	sp, r7
 801605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605e:	4770      	bx	lr
 8016060:	20000e2c 	.word	0x20000e2c

08016064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016064:	b480      	push	{r7}
 8016066:	b083      	sub	sp, #12
 8016068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801606a:	2300      	movs	r3, #0
 801606c:	607b      	str	r3, [r7, #4]
 801606e:	4b10      	ldr	r3, [pc, #64]	; (80160b0 <HAL_MspInit+0x4c>)
 8016070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016072:	4a0f      	ldr	r2, [pc, #60]	; (80160b0 <HAL_MspInit+0x4c>)
 8016074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016078:	6453      	str	r3, [r2, #68]	; 0x44
 801607a:	4b0d      	ldr	r3, [pc, #52]	; (80160b0 <HAL_MspInit+0x4c>)
 801607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801607e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016082:	607b      	str	r3, [r7, #4]
 8016084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8016086:	2300      	movs	r3, #0
 8016088:	603b      	str	r3, [r7, #0]
 801608a:	4b09      	ldr	r3, [pc, #36]	; (80160b0 <HAL_MspInit+0x4c>)
 801608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801608e:	4a08      	ldr	r2, [pc, #32]	; (80160b0 <HAL_MspInit+0x4c>)
 8016090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016094:	6413      	str	r3, [r2, #64]	; 0x40
 8016096:	4b06      	ldr	r3, [pc, #24]	; (80160b0 <HAL_MspInit+0x4c>)
 8016098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801609a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801609e:	603b      	str	r3, [r7, #0]
 80160a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80160a2:	bf00      	nop
 80160a4:	370c      	adds	r7, #12
 80160a6:	46bd      	mov	sp, r7
 80160a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ac:	4770      	bx	lr
 80160ae:	bf00      	nop
 80160b0:	40023800 	.word	0x40023800

080160b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b08a      	sub	sp, #40	; 0x28
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80160bc:	f107 0314 	add.w	r3, r7, #20
 80160c0:	2200      	movs	r2, #0
 80160c2:	601a      	str	r2, [r3, #0]
 80160c4:	605a      	str	r2, [r3, #4]
 80160c6:	609a      	str	r2, [r3, #8]
 80160c8:	60da      	str	r2, [r3, #12]
 80160ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	4a19      	ldr	r2, [pc, #100]	; (8016138 <HAL_I2C_MspInit+0x84>)
 80160d2:	4293      	cmp	r3, r2
 80160d4:	d12b      	bne.n	801612e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80160d6:	2300      	movs	r3, #0
 80160d8:	613b      	str	r3, [r7, #16]
 80160da:	4b18      	ldr	r3, [pc, #96]	; (801613c <HAL_I2C_MspInit+0x88>)
 80160dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160de:	4a17      	ldr	r2, [pc, #92]	; (801613c <HAL_I2C_MspInit+0x88>)
 80160e0:	f043 0302 	orr.w	r3, r3, #2
 80160e4:	6313      	str	r3, [r2, #48]	; 0x30
 80160e6:	4b15      	ldr	r3, [pc, #84]	; (801613c <HAL_I2C_MspInit+0x88>)
 80160e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160ea:	f003 0302 	and.w	r3, r3, #2
 80160ee:	613b      	str	r3, [r7, #16]
 80160f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80160f2:	23c0      	movs	r3, #192	; 0xc0
 80160f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80160f6:	2312      	movs	r3, #18
 80160f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80160fa:	2300      	movs	r3, #0
 80160fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80160fe:	2303      	movs	r3, #3
 8016100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8016102:	2304      	movs	r3, #4
 8016104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016106:	f107 0314 	add.w	r3, r7, #20
 801610a:	4619      	mov	r1, r3
 801610c:	480c      	ldr	r0, [pc, #48]	; (8016140 <HAL_I2C_MspInit+0x8c>)
 801610e:	f7f1 fa27 	bl	8007560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8016112:	2300      	movs	r3, #0
 8016114:	60fb      	str	r3, [r7, #12]
 8016116:	4b09      	ldr	r3, [pc, #36]	; (801613c <HAL_I2C_MspInit+0x88>)
 8016118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801611a:	4a08      	ldr	r2, [pc, #32]	; (801613c <HAL_I2C_MspInit+0x88>)
 801611c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016120:	6413      	str	r3, [r2, #64]	; 0x40
 8016122:	4b06      	ldr	r3, [pc, #24]	; (801613c <HAL_I2C_MspInit+0x88>)
 8016124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801612a:	60fb      	str	r3, [r7, #12]
 801612c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 801612e:	bf00      	nop
 8016130:	3728      	adds	r7, #40	; 0x28
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}
 8016136:	bf00      	nop
 8016138:	40005400 	.word	0x40005400
 801613c:	40023800 	.word	0x40023800
 8016140:	40020400 	.word	0x40020400

08016144 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8016144:	b480      	push	{r7}
 8016146:	b083      	sub	sp, #12
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	4a05      	ldr	r2, [pc, #20]	; (8016168 <HAL_RTC_MspInit+0x24>)
 8016152:	4293      	cmp	r3, r2
 8016154:	d102      	bne.n	801615c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8016156:	4b05      	ldr	r3, [pc, #20]	; (801616c <HAL_RTC_MspInit+0x28>)
 8016158:	2201      	movs	r2, #1
 801615a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 801615c:	bf00      	nop
 801615e:	370c      	adds	r7, #12
 8016160:	46bd      	mov	sp, r7
 8016162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016166:	4770      	bx	lr
 8016168:	40002800 	.word	0x40002800
 801616c:	42470e3c 	.word	0x42470e3c

08016170 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b08a      	sub	sp, #40	; 0x28
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016178:	f107 0314 	add.w	r3, r7, #20
 801617c:	2200      	movs	r2, #0
 801617e:	601a      	str	r2, [r3, #0]
 8016180:	605a      	str	r2, [r3, #4]
 8016182:	609a      	str	r2, [r3, #8]
 8016184:	60da      	str	r2, [r3, #12]
 8016186:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	4a70      	ldr	r2, [pc, #448]	; (8016350 <HAL_SD_MspInit+0x1e0>)
 801618e:	4293      	cmp	r3, r2
 8016190:	f040 80da 	bne.w	8016348 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8016194:	2300      	movs	r3, #0
 8016196:	613b      	str	r3, [r7, #16]
 8016198:	4b6e      	ldr	r3, [pc, #440]	; (8016354 <HAL_SD_MspInit+0x1e4>)
 801619a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801619c:	4a6d      	ldr	r2, [pc, #436]	; (8016354 <HAL_SD_MspInit+0x1e4>)
 801619e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80161a2:	6453      	str	r3, [r2, #68]	; 0x44
 80161a4:	4b6b      	ldr	r3, [pc, #428]	; (8016354 <HAL_SD_MspInit+0x1e4>)
 80161a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80161a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80161ac:	613b      	str	r3, [r7, #16]
 80161ae:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80161b0:	2300      	movs	r3, #0
 80161b2:	60fb      	str	r3, [r7, #12]
 80161b4:	4b67      	ldr	r3, [pc, #412]	; (8016354 <HAL_SD_MspInit+0x1e4>)
 80161b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161b8:	4a66      	ldr	r2, [pc, #408]	; (8016354 <HAL_SD_MspInit+0x1e4>)
 80161ba:	f043 0304 	orr.w	r3, r3, #4
 80161be:	6313      	str	r3, [r2, #48]	; 0x30
 80161c0:	4b64      	ldr	r3, [pc, #400]	; (8016354 <HAL_SD_MspInit+0x1e4>)
 80161c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161c4:	f003 0304 	and.w	r3, r3, #4
 80161c8:	60fb      	str	r3, [r7, #12]
 80161ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80161cc:	2300      	movs	r3, #0
 80161ce:	60bb      	str	r3, [r7, #8]
 80161d0:	4b60      	ldr	r3, [pc, #384]	; (8016354 <HAL_SD_MspInit+0x1e4>)
 80161d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161d4:	4a5f      	ldr	r2, [pc, #380]	; (8016354 <HAL_SD_MspInit+0x1e4>)
 80161d6:	f043 0308 	orr.w	r3, r3, #8
 80161da:	6313      	str	r3, [r2, #48]	; 0x30
 80161dc:	4b5d      	ldr	r3, [pc, #372]	; (8016354 <HAL_SD_MspInit+0x1e4>)
 80161de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161e0:	f003 0308 	and.w	r3, r3, #8
 80161e4:	60bb      	str	r3, [r7, #8]
 80161e6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80161e8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80161ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80161ee:	2302      	movs	r3, #2
 80161f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80161f2:	2301      	movs	r3, #1
 80161f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80161f6:	2303      	movs	r3, #3
 80161f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80161fa:	230c      	movs	r3, #12
 80161fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80161fe:	f107 0314 	add.w	r3, r7, #20
 8016202:	4619      	mov	r1, r3
 8016204:	4854      	ldr	r0, [pc, #336]	; (8016358 <HAL_SD_MspInit+0x1e8>)
 8016206:	f7f1 f9ab 	bl	8007560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801620a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801620e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016210:	2302      	movs	r3, #2
 8016212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016214:	2300      	movs	r3, #0
 8016216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016218:	2303      	movs	r3, #3
 801621a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 801621c:	230c      	movs	r3, #12
 801621e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016220:	f107 0314 	add.w	r3, r7, #20
 8016224:	4619      	mov	r1, r3
 8016226:	484c      	ldr	r0, [pc, #304]	; (8016358 <HAL_SD_MspInit+0x1e8>)
 8016228:	f7f1 f99a 	bl	8007560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801622c:	2304      	movs	r3, #4
 801622e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016230:	2302      	movs	r3, #2
 8016232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8016234:	2301      	movs	r3, #1
 8016236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016238:	2303      	movs	r3, #3
 801623a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 801623c:	230c      	movs	r3, #12
 801623e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8016240:	f107 0314 	add.w	r3, r7, #20
 8016244:	4619      	mov	r1, r3
 8016246:	4845      	ldr	r0, [pc, #276]	; (801635c <HAL_SD_MspInit+0x1ec>)
 8016248:	f7f1 f98a 	bl	8007560 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 801624c:	4b44      	ldr	r3, [pc, #272]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 801624e:	4a45      	ldr	r2, [pc, #276]	; (8016364 <HAL_SD_MspInit+0x1f4>)
 8016250:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8016252:	4b43      	ldr	r3, [pc, #268]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 8016254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016258:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801625a:	4b41      	ldr	r3, [pc, #260]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 801625c:	2200      	movs	r2, #0
 801625e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016260:	4b3f      	ldr	r3, [pc, #252]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 8016262:	2200      	movs	r2, #0
 8016264:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8016266:	4b3e      	ldr	r3, [pc, #248]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 8016268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801626c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801626e:	4b3c      	ldr	r3, [pc, #240]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 8016270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016274:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8016276:	4b3a      	ldr	r3, [pc, #232]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 8016278:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801627c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 801627e:	4b38      	ldr	r3, [pc, #224]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 8016280:	2220      	movs	r2, #32
 8016282:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8016284:	4b36      	ldr	r3, [pc, #216]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 8016286:	2200      	movs	r2, #0
 8016288:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 801628a:	4b35      	ldr	r3, [pc, #212]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 801628c:	2204      	movs	r2, #4
 801628e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8016290:	4b33      	ldr	r3, [pc, #204]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 8016292:	2203      	movs	r2, #3
 8016294:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8016296:	4b32      	ldr	r3, [pc, #200]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 8016298:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801629c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 801629e:	4b30      	ldr	r3, [pc, #192]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 80162a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80162a4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80162a6:	482e      	ldr	r0, [pc, #184]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 80162a8:	f7f0 fdc2 	bl	8006e30 <HAL_DMA_Init>
 80162ac:	4603      	mov	r3, r0
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d001      	beq.n	80162b6 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80162b2:	f7ff fcab 	bl	8015c0c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	4a29      	ldr	r2, [pc, #164]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 80162ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80162bc:	4a28      	ldr	r2, [pc, #160]	; (8016360 <HAL_SD_MspInit+0x1f0>)
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80162c2:	4b29      	ldr	r3, [pc, #164]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 80162c4:	4a29      	ldr	r2, [pc, #164]	; (801636c <HAL_SD_MspInit+0x1fc>)
 80162c6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80162c8:	4b27      	ldr	r3, [pc, #156]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 80162ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80162ce:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80162d0:	4b25      	ldr	r3, [pc, #148]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 80162d2:	2240      	movs	r2, #64	; 0x40
 80162d4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80162d6:	4b24      	ldr	r3, [pc, #144]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 80162d8:	2200      	movs	r2, #0
 80162da:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80162dc:	4b22      	ldr	r3, [pc, #136]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 80162de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80162e2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80162e4:	4b20      	ldr	r3, [pc, #128]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 80162e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80162ea:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80162ec:	4b1e      	ldr	r3, [pc, #120]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 80162ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80162f2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80162f4:	4b1c      	ldr	r3, [pc, #112]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 80162f6:	2220      	movs	r2, #32
 80162f8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80162fa:	4b1b      	ldr	r3, [pc, #108]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 80162fc:	2200      	movs	r2, #0
 80162fe:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8016300:	4b19      	ldr	r3, [pc, #100]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 8016302:	2204      	movs	r2, #4
 8016304:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8016306:	4b18      	ldr	r3, [pc, #96]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 8016308:	2203      	movs	r2, #3
 801630a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 801630c:	4b16      	ldr	r3, [pc, #88]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 801630e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8016312:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8016314:	4b14      	ldr	r3, [pc, #80]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 8016316:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801631a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 801631c:	4812      	ldr	r0, [pc, #72]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 801631e:	f7f0 fd87 	bl	8006e30 <HAL_DMA_Init>
 8016322:	4603      	mov	r3, r0
 8016324:	2b00      	cmp	r3, #0
 8016326:	d001      	beq.n	801632c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8016328:	f7ff fc70 	bl	8015c0c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	4a0e      	ldr	r2, [pc, #56]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 8016330:	641a      	str	r2, [r3, #64]	; 0x40
 8016332:	4a0d      	ldr	r2, [pc, #52]	; (8016368 <HAL_SD_MspInit+0x1f8>)
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8016338:	2200      	movs	r2, #0
 801633a:	2100      	movs	r1, #0
 801633c:	2031      	movs	r0, #49	; 0x31
 801633e:	f7f0 fd40 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8016342:	2031      	movs	r0, #49	; 0x31
 8016344:	f7f0 fd59 	bl	8006dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8016348:	bf00      	nop
 801634a:	3728      	adds	r7, #40	; 0x28
 801634c:	46bd      	mov	sp, r7
 801634e:	bd80      	pop	{r7, pc}
 8016350:	40012c00 	.word	0x40012c00
 8016354:	40023800 	.word	0x40023800
 8016358:	40020800 	.word	0x40020800
 801635c:	40020c00 	.word	0x40020c00
 8016360:	20008c98 	.word	0x20008c98
 8016364:	40026458 	.word	0x40026458
 8016368:	20008e2c 	.word	0x20008e2c
 801636c:	400264a0 	.word	0x400264a0

08016370 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b08a      	sub	sp, #40	; 0x28
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016378:	f107 0314 	add.w	r3, r7, #20
 801637c:	2200      	movs	r2, #0
 801637e:	601a      	str	r2, [r3, #0]
 8016380:	605a      	str	r2, [r3, #4]
 8016382:	609a      	str	r2, [r3, #8]
 8016384:	60da      	str	r2, [r3, #12]
 8016386:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	4a19      	ldr	r2, [pc, #100]	; (80163f4 <HAL_SPI_MspInit+0x84>)
 801638e:	4293      	cmp	r3, r2
 8016390:	d12b      	bne.n	80163ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8016392:	2300      	movs	r3, #0
 8016394:	613b      	str	r3, [r7, #16]
 8016396:	4b18      	ldr	r3, [pc, #96]	; (80163f8 <HAL_SPI_MspInit+0x88>)
 8016398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801639a:	4a17      	ldr	r2, [pc, #92]	; (80163f8 <HAL_SPI_MspInit+0x88>)
 801639c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80163a0:	6453      	str	r3, [r2, #68]	; 0x44
 80163a2:	4b15      	ldr	r3, [pc, #84]	; (80163f8 <HAL_SPI_MspInit+0x88>)
 80163a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80163aa:	613b      	str	r3, [r7, #16]
 80163ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80163ae:	2300      	movs	r3, #0
 80163b0:	60fb      	str	r3, [r7, #12]
 80163b2:	4b11      	ldr	r3, [pc, #68]	; (80163f8 <HAL_SPI_MspInit+0x88>)
 80163b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163b6:	4a10      	ldr	r2, [pc, #64]	; (80163f8 <HAL_SPI_MspInit+0x88>)
 80163b8:	f043 0302 	orr.w	r3, r3, #2
 80163bc:	6313      	str	r3, [r2, #48]	; 0x30
 80163be:	4b0e      	ldr	r3, [pc, #56]	; (80163f8 <HAL_SPI_MspInit+0x88>)
 80163c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163c2:	f003 0302 	and.w	r3, r3, #2
 80163c6:	60fb      	str	r3, [r7, #12]
 80163c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 80163ca:	2338      	movs	r3, #56	; 0x38
 80163cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80163ce:	2302      	movs	r3, #2
 80163d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163d2:	2300      	movs	r3, #0
 80163d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80163d6:	2303      	movs	r3, #3
 80163d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80163da:	2305      	movs	r3, #5
 80163dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80163de:	f107 0314 	add.w	r3, r7, #20
 80163e2:	4619      	mov	r1, r3
 80163e4:	4805      	ldr	r0, [pc, #20]	; (80163fc <HAL_SPI_MspInit+0x8c>)
 80163e6:	f7f1 f8bb 	bl	8007560 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80163ea:	bf00      	nop
 80163ec:	3728      	adds	r7, #40	; 0x28
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}
 80163f2:	bf00      	nop
 80163f4:	40013000 	.word	0x40013000
 80163f8:	40023800 	.word	0x40023800
 80163fc:	40020400 	.word	0x40020400

08016400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8016400:	b480      	push	{r7}
 8016402:	b087      	sub	sp, #28
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016410:	d10e      	bne.n	8016430 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8016412:	2300      	movs	r3, #0
 8016414:	617b      	str	r3, [r7, #20]
 8016416:	4b1d      	ldr	r3, [pc, #116]	; (801648c <HAL_TIM_Base_MspInit+0x8c>)
 8016418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801641a:	4a1c      	ldr	r2, [pc, #112]	; (801648c <HAL_TIM_Base_MspInit+0x8c>)
 801641c:	f043 0301 	orr.w	r3, r3, #1
 8016420:	6413      	str	r3, [r2, #64]	; 0x40
 8016422:	4b1a      	ldr	r3, [pc, #104]	; (801648c <HAL_TIM_Base_MspInit+0x8c>)
 8016424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016426:	f003 0301 	and.w	r3, r3, #1
 801642a:	617b      	str	r3, [r7, #20]
 801642c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 801642e:	e026      	b.n	801647e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	4a16      	ldr	r2, [pc, #88]	; (8016490 <HAL_TIM_Base_MspInit+0x90>)
 8016436:	4293      	cmp	r3, r2
 8016438:	d10e      	bne.n	8016458 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801643a:	2300      	movs	r3, #0
 801643c:	613b      	str	r3, [r7, #16]
 801643e:	4b13      	ldr	r3, [pc, #76]	; (801648c <HAL_TIM_Base_MspInit+0x8c>)
 8016440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016442:	4a12      	ldr	r2, [pc, #72]	; (801648c <HAL_TIM_Base_MspInit+0x8c>)
 8016444:	f043 0302 	orr.w	r3, r3, #2
 8016448:	6413      	str	r3, [r2, #64]	; 0x40
 801644a:	4b10      	ldr	r3, [pc, #64]	; (801648c <HAL_TIM_Base_MspInit+0x8c>)
 801644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801644e:	f003 0302 	and.w	r3, r3, #2
 8016452:	613b      	str	r3, [r7, #16]
 8016454:	693b      	ldr	r3, [r7, #16]
}
 8016456:	e012      	b.n	801647e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	4a0d      	ldr	r2, [pc, #52]	; (8016494 <HAL_TIM_Base_MspInit+0x94>)
 801645e:	4293      	cmp	r3, r2
 8016460:	d10d      	bne.n	801647e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8016462:	2300      	movs	r3, #0
 8016464:	60fb      	str	r3, [r7, #12]
 8016466:	4b09      	ldr	r3, [pc, #36]	; (801648c <HAL_TIM_Base_MspInit+0x8c>)
 8016468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801646a:	4a08      	ldr	r2, [pc, #32]	; (801648c <HAL_TIM_Base_MspInit+0x8c>)
 801646c:	f043 0308 	orr.w	r3, r3, #8
 8016470:	6413      	str	r3, [r2, #64]	; 0x40
 8016472:	4b06      	ldr	r3, [pc, #24]	; (801648c <HAL_TIM_Base_MspInit+0x8c>)
 8016474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016476:	f003 0308 	and.w	r3, r3, #8
 801647a:	60fb      	str	r3, [r7, #12]
 801647c:	68fb      	ldr	r3, [r7, #12]
}
 801647e:	bf00      	nop
 8016480:	371c      	adds	r7, #28
 8016482:	46bd      	mov	sp, r7
 8016484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016488:	4770      	bx	lr
 801648a:	bf00      	nop
 801648c:	40023800 	.word	0x40023800
 8016490:	40000400 	.word	0x40000400
 8016494:	40000c00 	.word	0x40000c00

08016498 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b08a      	sub	sp, #40	; 0x28
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80164a0:	f107 0314 	add.w	r3, r7, #20
 80164a4:	2200      	movs	r2, #0
 80164a6:	601a      	str	r2, [r3, #0]
 80164a8:	605a      	str	r2, [r3, #4]
 80164aa:	609a      	str	r2, [r3, #8]
 80164ac:	60da      	str	r2, [r3, #12]
 80164ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	4a24      	ldr	r2, [pc, #144]	; (8016548 <HAL_TIM_MspPostInit+0xb0>)
 80164b6:	4293      	cmp	r3, r2
 80164b8:	d11e      	bne.n	80164f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80164ba:	2300      	movs	r3, #0
 80164bc:	613b      	str	r3, [r7, #16]
 80164be:	4b23      	ldr	r3, [pc, #140]	; (801654c <HAL_TIM_MspPostInit+0xb4>)
 80164c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164c2:	4a22      	ldr	r2, [pc, #136]	; (801654c <HAL_TIM_MspPostInit+0xb4>)
 80164c4:	f043 0302 	orr.w	r3, r3, #2
 80164c8:	6313      	str	r3, [r2, #48]	; 0x30
 80164ca:	4b20      	ldr	r3, [pc, #128]	; (801654c <HAL_TIM_MspPostInit+0xb4>)
 80164cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164ce:	f003 0302 	and.w	r3, r3, #2
 80164d2:	613b      	str	r3, [r7, #16]
 80164d4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P3_Pin;
 80164d6:	2303      	movs	r3, #3
 80164d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80164da:	2302      	movs	r3, #2
 80164dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80164de:	2300      	movs	r3, #0
 80164e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80164e2:	2300      	movs	r3, #0
 80164e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80164e6:	2302      	movs	r3, #2
 80164e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80164ea:	f107 0314 	add.w	r3, r7, #20
 80164ee:	4619      	mov	r1, r3
 80164f0:	4817      	ldr	r0, [pc, #92]	; (8016550 <HAL_TIM_MspPostInit+0xb8>)
 80164f2:	f7f1 f835 	bl	8007560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80164f6:	e022      	b.n	801653e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	4a15      	ldr	r2, [pc, #84]	; (8016554 <HAL_TIM_MspPostInit+0xbc>)
 80164fe:	4293      	cmp	r3, r2
 8016500:	d11d      	bne.n	801653e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016502:	2300      	movs	r3, #0
 8016504:	60fb      	str	r3, [r7, #12]
 8016506:	4b11      	ldr	r3, [pc, #68]	; (801654c <HAL_TIM_MspPostInit+0xb4>)
 8016508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801650a:	4a10      	ldr	r2, [pc, #64]	; (801654c <HAL_TIM_MspPostInit+0xb4>)
 801650c:	f043 0301 	orr.w	r3, r3, #1
 8016510:	6313      	str	r3, [r2, #48]	; 0x30
 8016512:	4b0e      	ldr	r3, [pc, #56]	; (801654c <HAL_TIM_MspPostInit+0xb4>)
 8016514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016516:	f003 0301 	and.w	r3, r3, #1
 801651a:	60fb      	str	r3, [r7, #12]
 801651c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 801651e:	230a      	movs	r3, #10
 8016520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016522:	2302      	movs	r3, #2
 8016524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016526:	2300      	movs	r3, #0
 8016528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801652a:	2300      	movs	r3, #0
 801652c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801652e:	2302      	movs	r3, #2
 8016530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016532:	f107 0314 	add.w	r3, r7, #20
 8016536:	4619      	mov	r1, r3
 8016538:	4807      	ldr	r0, [pc, #28]	; (8016558 <HAL_TIM_MspPostInit+0xc0>)
 801653a:	f7f1 f811 	bl	8007560 <HAL_GPIO_Init>
}
 801653e:	bf00      	nop
 8016540:	3728      	adds	r7, #40	; 0x28
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}
 8016546:	bf00      	nop
 8016548:	40000400 	.word	0x40000400
 801654c:	40023800 	.word	0x40023800
 8016550:	40020400 	.word	0x40020400
 8016554:	40000c00 	.word	0x40000c00
 8016558:	40020000 	.word	0x40020000

0801655c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b08a      	sub	sp, #40	; 0x28
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016564:	f107 0314 	add.w	r3, r7, #20
 8016568:	2200      	movs	r2, #0
 801656a:	601a      	str	r2, [r3, #0]
 801656c:	605a      	str	r2, [r3, #4]
 801656e:	609a      	str	r2, [r3, #8]
 8016570:	60da      	str	r2, [r3, #12]
 8016572:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	4a1d      	ldr	r2, [pc, #116]	; (80165f0 <HAL_UART_MspInit+0x94>)
 801657a:	4293      	cmp	r3, r2
 801657c:	d134      	bne.n	80165e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 801657e:	2300      	movs	r3, #0
 8016580:	613b      	str	r3, [r7, #16]
 8016582:	4b1c      	ldr	r3, [pc, #112]	; (80165f4 <HAL_UART_MspInit+0x98>)
 8016584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016586:	4a1b      	ldr	r2, [pc, #108]	; (80165f4 <HAL_UART_MspInit+0x98>)
 8016588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801658c:	6413      	str	r3, [r2, #64]	; 0x40
 801658e:	4b19      	ldr	r3, [pc, #100]	; (80165f4 <HAL_UART_MspInit+0x98>)
 8016590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016596:	613b      	str	r3, [r7, #16]
 8016598:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801659a:	2300      	movs	r3, #0
 801659c:	60fb      	str	r3, [r7, #12]
 801659e:	4b15      	ldr	r3, [pc, #84]	; (80165f4 <HAL_UART_MspInit+0x98>)
 80165a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165a2:	4a14      	ldr	r2, [pc, #80]	; (80165f4 <HAL_UART_MspInit+0x98>)
 80165a4:	f043 0302 	orr.w	r3, r3, #2
 80165a8:	6313      	str	r3, [r2, #48]	; 0x30
 80165aa:	4b12      	ldr	r3, [pc, #72]	; (80165f4 <HAL_UART_MspInit+0x98>)
 80165ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ae:	f003 0302 	and.w	r3, r3, #2
 80165b2:	60fb      	str	r3, [r7, #12]
 80165b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 80165b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80165ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165bc:	2302      	movs	r3, #2
 80165be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80165c0:	2301      	movs	r3, #1
 80165c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80165c4:	2303      	movs	r3, #3
 80165c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80165c8:	2307      	movs	r3, #7
 80165ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80165cc:	f107 0314 	add.w	r3, r7, #20
 80165d0:	4619      	mov	r1, r3
 80165d2:	4809      	ldr	r0, [pc, #36]	; (80165f8 <HAL_UART_MspInit+0x9c>)
 80165d4:	f7f0 ffc4 	bl	8007560 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80165d8:	2200      	movs	r2, #0
 80165da:	2100      	movs	r1, #0
 80165dc:	2027      	movs	r0, #39	; 0x27
 80165de:	f7f0 fbf0 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80165e2:	2027      	movs	r0, #39	; 0x27
 80165e4:	f7f0 fc09 	bl	8006dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80165e8:	bf00      	nop
 80165ea:	3728      	adds	r7, #40	; 0x28
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd80      	pop	{r7, pc}
 80165f0:	40004800 	.word	0x40004800
 80165f4:	40023800 	.word	0x40023800
 80165f8:	40020400 	.word	0x40020400

080165fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80165fc:	b480      	push	{r7}
 80165fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8016600:	bf00      	nop
 8016602:	46bd      	mov	sp, r7
 8016604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016608:	4770      	bx	lr

0801660a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801660a:	b480      	push	{r7}
 801660c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801660e:	e7fe      	b.n	801660e <HardFault_Handler+0x4>

08016610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016610:	b480      	push	{r7}
 8016612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016614:	e7fe      	b.n	8016614 <MemManage_Handler+0x4>

08016616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016616:	b480      	push	{r7}
 8016618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801661a:	e7fe      	b.n	801661a <BusFault_Handler+0x4>

0801661c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801661c:	b480      	push	{r7}
 801661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016620:	e7fe      	b.n	8016620 <UsageFault_Handler+0x4>

08016622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8016622:	b480      	push	{r7}
 8016624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016626:	bf00      	nop
 8016628:	46bd      	mov	sp, r7
 801662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662e:	4770      	bx	lr

08016630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8016630:	b480      	push	{r7}
 8016632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016634:	bf00      	nop
 8016636:	46bd      	mov	sp, r7
 8016638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663c:	4770      	bx	lr

0801663e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801663e:	b480      	push	{r7}
 8016640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8016642:	bf00      	nop
 8016644:	46bd      	mov	sp, r7
 8016646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664a:	4770      	bx	lr

0801664c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8016650:	f7f0 fa9a 	bl	8006b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016654:	bf00      	nop
 8016656:	bd80      	pop	{r7, pc}

08016658 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8016658:	b580      	push	{r7, lr}
 801665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 801665c:	4802      	ldr	r0, [pc, #8]	; (8016668 <USART3_IRQHandler+0x10>)
 801665e:	f7f6 ff07 	bl	800d470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8016662:	bf00      	nop
 8016664:	bd80      	pop	{r7, pc}
 8016666:	bf00      	nop
 8016668:	20008cf8 	.word	0x20008cf8

0801666c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8016670:	4802      	ldr	r0, [pc, #8]	; (801667c <SDIO_IRQHandler+0x10>)
 8016672:	f7f4 fb21 	bl	800acb8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8016676:	bf00      	nop
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	20008e8c 	.word	0x20008e8c

08016680 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8016684:	4802      	ldr	r0, [pc, #8]	; (8016690 <DMA2_Stream3_IRQHandler+0x10>)
 8016686:	f7f0 fd03 	bl	8007090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 801668a:	bf00      	nop
 801668c:	bd80      	pop	{r7, pc}
 801668e:	bf00      	nop
 8016690:	20008c98 	.word	0x20008c98

08016694 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8016698:	4802      	ldr	r0, [pc, #8]	; (80166a4 <OTG_FS_IRQHandler+0x10>)
 801669a:	f7f2 fa16 	bl	8008aca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801669e:	bf00      	nop
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop
 80166a4:	20009fa8 	.word	0x20009fa8

080166a8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80166ac:	4802      	ldr	r0, [pc, #8]	; (80166b8 <DMA2_Stream6_IRQHandler+0x10>)
 80166ae:	f7f0 fcef 	bl	8007090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80166b2:	bf00      	nop
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	20008e2c 	.word	0x20008e2c

080166bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b084      	sub	sp, #16
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80166c4:	4b11      	ldr	r3, [pc, #68]	; (801670c <_sbrk+0x50>)
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d102      	bne.n	80166d2 <_sbrk+0x16>
		heap_end = &end;
 80166cc:	4b0f      	ldr	r3, [pc, #60]	; (801670c <_sbrk+0x50>)
 80166ce:	4a10      	ldr	r2, [pc, #64]	; (8016710 <_sbrk+0x54>)
 80166d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80166d2:	4b0e      	ldr	r3, [pc, #56]	; (801670c <_sbrk+0x50>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80166d8:	4b0c      	ldr	r3, [pc, #48]	; (801670c <_sbrk+0x50>)
 80166da:	681a      	ldr	r2, [r3, #0]
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	4413      	add	r3, r2
 80166e0:	466a      	mov	r2, sp
 80166e2:	4293      	cmp	r3, r2
 80166e4:	d907      	bls.n	80166f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80166e6:	f000 fda9 	bl	801723c <__errno>
 80166ea:	4602      	mov	r2, r0
 80166ec:	230c      	movs	r3, #12
 80166ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80166f0:	f04f 33ff 	mov.w	r3, #4294967295
 80166f4:	e006      	b.n	8016704 <_sbrk+0x48>
	}

	heap_end += incr;
 80166f6:	4b05      	ldr	r3, [pc, #20]	; (801670c <_sbrk+0x50>)
 80166f8:	681a      	ldr	r2, [r3, #0]
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	4413      	add	r3, r2
 80166fe:	4a03      	ldr	r2, [pc, #12]	; (801670c <_sbrk+0x50>)
 8016700:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8016702:	68fb      	ldr	r3, [r7, #12]
}
 8016704:	4618      	mov	r0, r3
 8016706:	3710      	adds	r7, #16
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}
 801670c:	20000e30 	.word	0x20000e30
 8016710:	2000a5b8 	.word	0x2000a5b8

08016714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016714:	b480      	push	{r7}
 8016716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8016718:	4b16      	ldr	r3, [pc, #88]	; (8016774 <SystemInit+0x60>)
 801671a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801671e:	4a15      	ldr	r2, [pc, #84]	; (8016774 <SystemInit+0x60>)
 8016720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8016728:	4b13      	ldr	r3, [pc, #76]	; (8016778 <SystemInit+0x64>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	4a12      	ldr	r2, [pc, #72]	; (8016778 <SystemInit+0x64>)
 801672e:	f043 0301 	orr.w	r3, r3, #1
 8016732:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8016734:	4b10      	ldr	r3, [pc, #64]	; (8016778 <SystemInit+0x64>)
 8016736:	2200      	movs	r2, #0
 8016738:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801673a:	4b0f      	ldr	r3, [pc, #60]	; (8016778 <SystemInit+0x64>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	4a0e      	ldr	r2, [pc, #56]	; (8016778 <SystemInit+0x64>)
 8016740:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8016744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016748:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801674a:	4b0b      	ldr	r3, [pc, #44]	; (8016778 <SystemInit+0x64>)
 801674c:	4a0b      	ldr	r2, [pc, #44]	; (801677c <SystemInit+0x68>)
 801674e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8016750:	4b09      	ldr	r3, [pc, #36]	; (8016778 <SystemInit+0x64>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	4a08      	ldr	r2, [pc, #32]	; (8016778 <SystemInit+0x64>)
 8016756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801675a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801675c:	4b06      	ldr	r3, [pc, #24]	; (8016778 <SystemInit+0x64>)
 801675e:	2200      	movs	r2, #0
 8016760:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8016762:	4b04      	ldr	r3, [pc, #16]	; (8016774 <SystemInit+0x60>)
 8016764:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016768:	609a      	str	r2, [r3, #8]
#endif
}
 801676a:	bf00      	nop
 801676c:	46bd      	mov	sp, r7
 801676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016772:	4770      	bx	lr
 8016774:	e000ed00 	.word	0xe000ed00
 8016778:	40023800 	.word	0x40023800
 801677c:	24003010 	.word	0x24003010

08016780 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016784:	2200      	movs	r2, #0
 8016786:	4912      	ldr	r1, [pc, #72]	; (80167d0 <MX_USB_DEVICE_Init+0x50>)
 8016788:	4812      	ldr	r0, [pc, #72]	; (80167d4 <MX_USB_DEVICE_Init+0x54>)
 801678a:	f7f9 fe27 	bl	80103dc <USBD_Init>
 801678e:	4603      	mov	r3, r0
 8016790:	2b00      	cmp	r3, #0
 8016792:	d001      	beq.n	8016798 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016794:	f7ff fa3a 	bl	8015c0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016798:	490f      	ldr	r1, [pc, #60]	; (80167d8 <MX_USB_DEVICE_Init+0x58>)
 801679a:	480e      	ldr	r0, [pc, #56]	; (80167d4 <MX_USB_DEVICE_Init+0x54>)
 801679c:	f7f9 fe49 	bl	8010432 <USBD_RegisterClass>
 80167a0:	4603      	mov	r3, r0
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d001      	beq.n	80167aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80167a6:	f7ff fa31 	bl	8015c0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80167aa:	490c      	ldr	r1, [pc, #48]	; (80167dc <MX_USB_DEVICE_Init+0x5c>)
 80167ac:	4809      	ldr	r0, [pc, #36]	; (80167d4 <MX_USB_DEVICE_Init+0x54>)
 80167ae:	f7f9 fd77 	bl	80102a0 <USBD_CDC_RegisterInterface>
 80167b2:	4603      	mov	r3, r0
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d001      	beq.n	80167bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80167b8:	f7ff fa28 	bl	8015c0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80167bc:	4805      	ldr	r0, [pc, #20]	; (80167d4 <MX_USB_DEVICE_Init+0x54>)
 80167be:	f7f9 fe52 	bl	8010466 <USBD_Start>
 80167c2:	4603      	mov	r3, r0
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d001      	beq.n	80167cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80167c8:	f7ff fa20 	bl	8015c0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80167cc:	bf00      	nop
 80167ce:	bd80      	pop	{r7, pc}
 80167d0:	20000184 	.word	0x20000184
 80167d4:	20000e3c 	.word	0x20000e3c
 80167d8:	20000018 	.word	0x20000018
 80167dc:	20000174 	.word	0x20000174

080167e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80167e4:	2200      	movs	r2, #0
 80167e6:	4905      	ldr	r1, [pc, #20]	; (80167fc <CDC_Init_FS+0x1c>)
 80167e8:	4805      	ldr	r0, [pc, #20]	; (8016800 <CDC_Init_FS+0x20>)
 80167ea:	f7f9 fd70 	bl	80102ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80167ee:	4905      	ldr	r1, [pc, #20]	; (8016804 <CDC_Init_FS+0x24>)
 80167f0:	4803      	ldr	r0, [pc, #12]	; (8016800 <CDC_Init_FS+0x20>)
 80167f2:	f7f9 fd86 	bl	8010302 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80167f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80167f8:	4618      	mov	r0, r3
 80167fa:	bd80      	pop	{r7, pc}
 80167fc:	200097a8 	.word	0x200097a8
 8016800:	20000e3c 	.word	0x20000e3c
 8016804:	20008fa8 	.word	0x20008fa8

08016808 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016808:	b480      	push	{r7}
 801680a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801680c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801680e:	4618      	mov	r0, r3
 8016810:	46bd      	mov	sp, r7
 8016812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016816:	4770      	bx	lr

08016818 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016818:	b480      	push	{r7}
 801681a:	b085      	sub	sp, #20
 801681c:	af00      	add	r7, sp, #0
 801681e:	4603      	mov	r3, r0
 8016820:	6039      	str	r1, [r7, #0]
 8016822:	71fb      	strb	r3, [r7, #7]
 8016824:	4613      	mov	r3, r2
 8016826:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 8016828:	f107 0308 	add.w	r3, r7, #8
 801682c:	2200      	movs	r2, #0
 801682e:	601a      	str	r2, [r3, #0]
 8016830:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 8016834:	79fb      	ldrb	r3, [r7, #7]
 8016836:	2b23      	cmp	r3, #35	; 0x23
 8016838:	d87c      	bhi.n	8016934 <CDC_Control_FS+0x11c>
 801683a:	a201      	add	r2, pc, #4	; (adr r2, 8016840 <CDC_Control_FS+0x28>)
 801683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016840:	08016935 	.word	0x08016935
 8016844:	08016935 	.word	0x08016935
 8016848:	08016935 	.word	0x08016935
 801684c:	08016935 	.word	0x08016935
 8016850:	08016935 	.word	0x08016935
 8016854:	08016935 	.word	0x08016935
 8016858:	08016935 	.word	0x08016935
 801685c:	08016935 	.word	0x08016935
 8016860:	08016935 	.word	0x08016935
 8016864:	08016935 	.word	0x08016935
 8016868:	08016935 	.word	0x08016935
 801686c:	08016935 	.word	0x08016935
 8016870:	08016935 	.word	0x08016935
 8016874:	08016935 	.word	0x08016935
 8016878:	08016935 	.word	0x08016935
 801687c:	08016935 	.word	0x08016935
 8016880:	08016935 	.word	0x08016935
 8016884:	08016935 	.word	0x08016935
 8016888:	08016935 	.word	0x08016935
 801688c:	08016935 	.word	0x08016935
 8016890:	08016935 	.word	0x08016935
 8016894:	08016935 	.word	0x08016935
 8016898:	08016935 	.word	0x08016935
 801689c:	08016935 	.word	0x08016935
 80168a0:	08016935 	.word	0x08016935
 80168a4:	08016935 	.word	0x08016935
 80168a8:	08016935 	.word	0x08016935
 80168ac:	08016935 	.word	0x08016935
 80168b0:	08016935 	.word	0x08016935
 80168b4:	08016935 	.word	0x08016935
 80168b8:	08016935 	.word	0x08016935
 80168bc:	08016935 	.word	0x08016935
 80168c0:	080168d1 	.word	0x080168d1
 80168c4:	080168fd 	.word	0x080168fd
 80168c8:	08016935 	.word	0x08016935
 80168cc:	08016935 	.word	0x08016935
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	781b      	ldrb	r3, [r3, #0]
 80168d4:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 80168d6:	683b      	ldr	r3, [r7, #0]
 80168d8:	785b      	ldrb	r3, [r3, #1]
 80168da:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	789b      	ldrb	r3, [r3, #2]
 80168e0:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	78db      	ldrb	r3, [r3, #3]
 80168e6:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	791b      	ldrb	r3, [r3, #4]
 80168ec:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 80168ee:	683b      	ldr	r3, [r7, #0]
 80168f0:	795b      	ldrb	r3, [r3, #5]
 80168f2:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	799b      	ldrb	r3, [r3, #6]
 80168f8:	73bb      	strb	r3, [r7, #14]
        	break;
 80168fa:	e01c      	b.n	8016936 <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 80168fc:	7a3a      	ldrb	r2, [r7, #8]
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 8016902:	683b      	ldr	r3, [r7, #0]
 8016904:	3301      	adds	r3, #1
 8016906:	7a7a      	ldrb	r2, [r7, #9]
 8016908:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	3302      	adds	r3, #2
 801690e:	7aba      	ldrb	r2, [r7, #10]
 8016910:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	3303      	adds	r3, #3
 8016916:	7afa      	ldrb	r2, [r7, #11]
 8016918:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 801691a:	683b      	ldr	r3, [r7, #0]
 801691c:	3304      	adds	r3, #4
 801691e:	7b3a      	ldrb	r2, [r7, #12]
 8016920:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	3305      	adds	r3, #5
 8016926:	7b7a      	ldrb	r2, [r7, #13]
 8016928:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 801692a:	683b      	ldr	r3, [r7, #0]
 801692c:	3306      	adds	r3, #6
 801692e:	7bba      	ldrb	r2, [r7, #14]
 8016930:	701a      	strb	r2, [r3, #0]
        	break;
 8016932:	e000      	b.n	8016936 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016934:	bf00      	nop
  }

  return (USBD_OK);
 8016936:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016938:	4618      	mov	r0, r3
 801693a:	3714      	adds	r7, #20
 801693c:	46bd      	mov	sp, r7
 801693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016942:	4770      	bx	lr

08016944 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b082      	sub	sp, #8
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
 801694c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801694e:	6879      	ldr	r1, [r7, #4]
 8016950:	4805      	ldr	r0, [pc, #20]	; (8016968 <CDC_Receive_FS+0x24>)
 8016952:	f7f9 fcd6 	bl	8010302 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016956:	4804      	ldr	r0, [pc, #16]	; (8016968 <CDC_Receive_FS+0x24>)
 8016958:	f7f9 fd16 	bl	8010388 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801695c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801695e:	4618      	mov	r0, r3
 8016960:	3708      	adds	r7, #8
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}
 8016966:	bf00      	nop
 8016968:	20000e3c 	.word	0x20000e3c

0801696c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b084      	sub	sp, #16
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
 8016974:	460b      	mov	r3, r1
 8016976:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016978:	2300      	movs	r3, #0
 801697a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801697c:	4b0d      	ldr	r3, [pc, #52]	; (80169b4 <CDC_Transmit_FS+0x48>)
 801697e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8016982:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016984:	68bb      	ldr	r3, [r7, #8]
 8016986:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801698a:	2b00      	cmp	r3, #0
 801698c:	d001      	beq.n	8016992 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801698e:	2301      	movs	r3, #1
 8016990:	e00b      	b.n	80169aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016992:	887b      	ldrh	r3, [r7, #2]
 8016994:	461a      	mov	r2, r3
 8016996:	6879      	ldr	r1, [r7, #4]
 8016998:	4806      	ldr	r0, [pc, #24]	; (80169b4 <CDC_Transmit_FS+0x48>)
 801699a:	f7f9 fc98 	bl	80102ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801699e:	4805      	ldr	r0, [pc, #20]	; (80169b4 <CDC_Transmit_FS+0x48>)
 80169a0:	f7f9 fcc3 	bl	801032a <USBD_CDC_TransmitPacket>
 80169a4:	4603      	mov	r3, r0
 80169a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80169a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	3710      	adds	r7, #16
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	20000e3c 	.word	0x20000e3c

080169b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b08a      	sub	sp, #40	; 0x28
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80169c0:	f107 0314 	add.w	r3, r7, #20
 80169c4:	2200      	movs	r2, #0
 80169c6:	601a      	str	r2, [r3, #0]
 80169c8:	605a      	str	r2, [r3, #4]
 80169ca:	609a      	str	r2, [r3, #8]
 80169cc:	60da      	str	r2, [r3, #12]
 80169ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80169d8:	d13a      	bne.n	8016a50 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80169da:	2300      	movs	r3, #0
 80169dc:	613b      	str	r3, [r7, #16]
 80169de:	4b1e      	ldr	r3, [pc, #120]	; (8016a58 <HAL_PCD_MspInit+0xa0>)
 80169e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169e2:	4a1d      	ldr	r2, [pc, #116]	; (8016a58 <HAL_PCD_MspInit+0xa0>)
 80169e4:	f043 0301 	orr.w	r3, r3, #1
 80169e8:	6313      	str	r3, [r2, #48]	; 0x30
 80169ea:	4b1b      	ldr	r3, [pc, #108]	; (8016a58 <HAL_PCD_MspInit+0xa0>)
 80169ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169ee:	f003 0301 	and.w	r3, r3, #1
 80169f2:	613b      	str	r3, [r7, #16]
 80169f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80169f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80169fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80169fc:	2302      	movs	r3, #2
 80169fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a00:	2300      	movs	r3, #0
 8016a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016a04:	2303      	movs	r3, #3
 8016a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016a08:	230a      	movs	r3, #10
 8016a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016a0c:	f107 0314 	add.w	r3, r7, #20
 8016a10:	4619      	mov	r1, r3
 8016a12:	4812      	ldr	r0, [pc, #72]	; (8016a5c <HAL_PCD_MspInit+0xa4>)
 8016a14:	f7f0 fda4 	bl	8007560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016a18:	4b0f      	ldr	r3, [pc, #60]	; (8016a58 <HAL_PCD_MspInit+0xa0>)
 8016a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a1c:	4a0e      	ldr	r2, [pc, #56]	; (8016a58 <HAL_PCD_MspInit+0xa0>)
 8016a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a22:	6353      	str	r3, [r2, #52]	; 0x34
 8016a24:	2300      	movs	r3, #0
 8016a26:	60fb      	str	r3, [r7, #12]
 8016a28:	4b0b      	ldr	r3, [pc, #44]	; (8016a58 <HAL_PCD_MspInit+0xa0>)
 8016a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a2c:	4a0a      	ldr	r2, [pc, #40]	; (8016a58 <HAL_PCD_MspInit+0xa0>)
 8016a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016a32:	6453      	str	r3, [r2, #68]	; 0x44
 8016a34:	4b08      	ldr	r3, [pc, #32]	; (8016a58 <HAL_PCD_MspInit+0xa0>)
 8016a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016a3c:	60fb      	str	r3, [r7, #12]
 8016a3e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016a40:	2200      	movs	r2, #0
 8016a42:	2100      	movs	r1, #0
 8016a44:	2043      	movs	r0, #67	; 0x43
 8016a46:	f7f0 f9bc 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016a4a:	2043      	movs	r0, #67	; 0x43
 8016a4c:	f7f0 f9d5 	bl	8006dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016a50:	bf00      	nop
 8016a52:	3728      	adds	r7, #40	; 0x28
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}
 8016a58:	40023800 	.word	0x40023800
 8016a5c:	40020000 	.word	0x40020000

08016a60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b082      	sub	sp, #8
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016a74:	4619      	mov	r1, r3
 8016a76:	4610      	mov	r0, r2
 8016a78:	f7f9 fd3e 	bl	80104f8 <USBD_LL_SetupStage>
}
 8016a7c:	bf00      	nop
 8016a7e:	3708      	adds	r7, #8
 8016a80:	46bd      	mov	sp, r7
 8016a82:	bd80      	pop	{r7, pc}

08016a84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b082      	sub	sp, #8
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]
 8016a8c:	460b      	mov	r3, r1
 8016a8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016a96:	78fa      	ldrb	r2, [r7, #3]
 8016a98:	6879      	ldr	r1, [r7, #4]
 8016a9a:	4613      	mov	r3, r2
 8016a9c:	00db      	lsls	r3, r3, #3
 8016a9e:	1a9b      	subs	r3, r3, r2
 8016aa0:	009b      	lsls	r3, r3, #2
 8016aa2:	440b      	add	r3, r1
 8016aa4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016aa8:	681a      	ldr	r2, [r3, #0]
 8016aaa:	78fb      	ldrb	r3, [r7, #3]
 8016aac:	4619      	mov	r1, r3
 8016aae:	f7f9 fd6e 	bl	801058e <USBD_LL_DataOutStage>
}
 8016ab2:	bf00      	nop
 8016ab4:	3708      	adds	r7, #8
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}

08016aba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aba:	b580      	push	{r7, lr}
 8016abc:	b082      	sub	sp, #8
 8016abe:	af00      	add	r7, sp, #0
 8016ac0:	6078      	str	r0, [r7, #4]
 8016ac2:	460b      	mov	r3, r1
 8016ac4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016acc:	78fa      	ldrb	r2, [r7, #3]
 8016ace:	6879      	ldr	r1, [r7, #4]
 8016ad0:	4613      	mov	r3, r2
 8016ad2:	00db      	lsls	r3, r3, #3
 8016ad4:	1a9b      	subs	r3, r3, r2
 8016ad6:	009b      	lsls	r3, r3, #2
 8016ad8:	440b      	add	r3, r1
 8016ada:	3348      	adds	r3, #72	; 0x48
 8016adc:	681a      	ldr	r2, [r3, #0]
 8016ade:	78fb      	ldrb	r3, [r7, #3]
 8016ae0:	4619      	mov	r1, r3
 8016ae2:	f7f9 fdc5 	bl	8010670 <USBD_LL_DataInStage>
}
 8016ae6:	bf00      	nop
 8016ae8:	3708      	adds	r7, #8
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aee:	b580      	push	{r7, lr}
 8016af0:	b082      	sub	sp, #8
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016afc:	4618      	mov	r0, r3
 8016afe:	f7f9 fed3 	bl	80108a8 <USBD_LL_SOF>
}
 8016b02:	bf00      	nop
 8016b04:	3708      	adds	r7, #8
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}

08016b0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8016b0a:	b580      	push	{r7, lr}
 8016b0c:	b084      	sub	sp, #16
 8016b0e:	af00      	add	r7, sp, #0
 8016b10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b12:	2301      	movs	r3, #1
 8016b14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	68db      	ldr	r3, [r3, #12]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d102      	bne.n	8016b24 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016b1e:	2300      	movs	r3, #0
 8016b20:	73fb      	strb	r3, [r7, #15]
 8016b22:	e008      	b.n	8016b36 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	68db      	ldr	r3, [r3, #12]
 8016b28:	2b02      	cmp	r3, #2
 8016b2a:	d102      	bne.n	8016b32 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016b2c:	2301      	movs	r3, #1
 8016b2e:	73fb      	strb	r3, [r7, #15]
 8016b30:	e001      	b.n	8016b36 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016b32:	f7ff f86b 	bl	8015c0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b3c:	7bfa      	ldrb	r2, [r7, #15]
 8016b3e:	4611      	mov	r1, r2
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7f9 fe7b 	bl	801083c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	f7f9 fe34 	bl	80107ba <USBD_LL_Reset>
}
 8016b52:	bf00      	nop
 8016b54:	3710      	adds	r7, #16
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}
	...

08016b5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b082      	sub	sp, #8
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f7f9 fe76 	bl	801085c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	687a      	ldr	r2, [r7, #4]
 8016b7c:	6812      	ldr	r2, [r2, #0]
 8016b7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b82:	f043 0301 	orr.w	r3, r3, #1
 8016b86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6a1b      	ldr	r3, [r3, #32]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d005      	beq.n	8016b9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b90:	4b04      	ldr	r3, [pc, #16]	; (8016ba4 <HAL_PCD_SuspendCallback+0x48>)
 8016b92:	691b      	ldr	r3, [r3, #16]
 8016b94:	4a03      	ldr	r2, [pc, #12]	; (8016ba4 <HAL_PCD_SuspendCallback+0x48>)
 8016b96:	f043 0306 	orr.w	r3, r3, #6
 8016b9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016b9c:	bf00      	nop
 8016b9e:	3708      	adds	r7, #8
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}
 8016ba4:	e000ed00 	.word	0xe000ed00

08016ba8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b082      	sub	sp, #8
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f7f9 fe65 	bl	8010886 <USBD_LL_Resume>
}
 8016bbc:	bf00      	nop
 8016bbe:	3708      	adds	r7, #8
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}

08016bc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b082      	sub	sp, #8
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
 8016bcc:	460b      	mov	r3, r1
 8016bce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016bd6:	78fa      	ldrb	r2, [r7, #3]
 8016bd8:	4611      	mov	r1, r2
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f7f9 fe8b 	bl	80108f6 <USBD_LL_IsoOUTIncomplete>
}
 8016be0:	bf00      	nop
 8016be2:	3708      	adds	r7, #8
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}

08016be8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b082      	sub	sp, #8
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
 8016bf0:	460b      	mov	r3, r1
 8016bf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016bfa:	78fa      	ldrb	r2, [r7, #3]
 8016bfc:	4611      	mov	r1, r2
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7f9 fe6c 	bl	80108dc <USBD_LL_IsoINIncomplete>
}
 8016c04:	bf00      	nop
 8016c06:	3708      	adds	r7, #8
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	bd80      	pop	{r7, pc}

08016c0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b082      	sub	sp, #8
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7f9 fe78 	bl	8010910 <USBD_LL_DevConnected>
}
 8016c20:	bf00      	nop
 8016c22:	3708      	adds	r7, #8
 8016c24:	46bd      	mov	sp, r7
 8016c26:	bd80      	pop	{r7, pc}

08016c28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b082      	sub	sp, #8
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016c36:	4618      	mov	r0, r3
 8016c38:	f7f9 fe75 	bl	8010926 <USBD_LL_DevDisconnected>
}
 8016c3c:	bf00      	nop
 8016c3e:	3708      	adds	r7, #8
 8016c40:	46bd      	mov	sp, r7
 8016c42:	bd80      	pop	{r7, pc}

08016c44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b082      	sub	sp, #8
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	781b      	ldrb	r3, [r3, #0]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d13c      	bne.n	8016cce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016c54:	4a20      	ldr	r2, [pc, #128]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	4a1e      	ldr	r2, [pc, #120]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016c64:	4b1c      	ldr	r3, [pc, #112]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016c6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016c6c:	4b1a      	ldr	r3, [pc, #104]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c6e:	2204      	movs	r2, #4
 8016c70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016c72:	4b19      	ldr	r3, [pc, #100]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c74:	2202      	movs	r2, #2
 8016c76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016c78:	4b17      	ldr	r3, [pc, #92]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016c7e:	4b16      	ldr	r3, [pc, #88]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c80:	2202      	movs	r2, #2
 8016c82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016c84:	4b14      	ldr	r3, [pc, #80]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c86:	2200      	movs	r2, #0
 8016c88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016c8a:	4b13      	ldr	r3, [pc, #76]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016c90:	4b11      	ldr	r3, [pc, #68]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c92:	2200      	movs	r2, #0
 8016c94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016c96:	4b10      	ldr	r3, [pc, #64]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c98:	2200      	movs	r2, #0
 8016c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016c9c:	4b0e      	ldr	r3, [pc, #56]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016c9e:	2200      	movs	r2, #0
 8016ca0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016ca2:	480d      	ldr	r0, [pc, #52]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016ca4:	f7f1 fdc1 	bl	800882a <HAL_PCD_Init>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d001      	beq.n	8016cb2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016cae:	f7fe ffad 	bl	8015c0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016cb2:	2180      	movs	r1, #128	; 0x80
 8016cb4:	4808      	ldr	r0, [pc, #32]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016cb6:	f7f2 ff26 	bl	8009b06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016cba:	2240      	movs	r2, #64	; 0x40
 8016cbc:	2100      	movs	r1, #0
 8016cbe:	4806      	ldr	r0, [pc, #24]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016cc0:	f7f2 feda 	bl	8009a78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016cc4:	2280      	movs	r2, #128	; 0x80
 8016cc6:	2101      	movs	r1, #1
 8016cc8:	4803      	ldr	r0, [pc, #12]	; (8016cd8 <USBD_LL_Init+0x94>)
 8016cca:	f7f2 fed5 	bl	8009a78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016cce:	2300      	movs	r3, #0
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3708      	adds	r7, #8
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}
 8016cd8:	20009fa8 	.word	0x20009fa8

08016cdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b084      	sub	sp, #16
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ce8:	2300      	movs	r3, #0
 8016cea:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f7f1 feb6 	bl	8008a64 <HAL_PCD_Start>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016cfc:	7bfb      	ldrb	r3, [r7, #15]
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f000 f92e 	bl	8016f60 <USBD_Get_USB_Status>
 8016d04:	4603      	mov	r3, r0
 8016d06:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	3710      	adds	r7, #16
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	bd80      	pop	{r7, pc}

08016d12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016d12:	b580      	push	{r7, lr}
 8016d14:	b084      	sub	sp, #16
 8016d16:	af00      	add	r7, sp, #0
 8016d18:	6078      	str	r0, [r7, #4]
 8016d1a:	4608      	mov	r0, r1
 8016d1c:	4611      	mov	r1, r2
 8016d1e:	461a      	mov	r2, r3
 8016d20:	4603      	mov	r3, r0
 8016d22:	70fb      	strb	r3, [r7, #3]
 8016d24:	460b      	mov	r3, r1
 8016d26:	70bb      	strb	r3, [r7, #2]
 8016d28:	4613      	mov	r3, r2
 8016d2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d30:	2300      	movs	r3, #0
 8016d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016d3a:	78bb      	ldrb	r3, [r7, #2]
 8016d3c:	883a      	ldrh	r2, [r7, #0]
 8016d3e:	78f9      	ldrb	r1, [r7, #3]
 8016d40:	f7f2 fa8b 	bl	800925a <HAL_PCD_EP_Open>
 8016d44:	4603      	mov	r3, r0
 8016d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d48:	7bfb      	ldrb	r3, [r7, #15]
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f000 f908 	bl	8016f60 <USBD_Get_USB_Status>
 8016d50:	4603      	mov	r3, r0
 8016d52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3710      	adds	r7, #16
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}

08016d5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d5e:	b580      	push	{r7, lr}
 8016d60:	b084      	sub	sp, #16
 8016d62:	af00      	add	r7, sp, #0
 8016d64:	6078      	str	r0, [r7, #4]
 8016d66:	460b      	mov	r3, r1
 8016d68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d6e:	2300      	movs	r3, #0
 8016d70:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016d78:	78fa      	ldrb	r2, [r7, #3]
 8016d7a:	4611      	mov	r1, r2
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f7f2 fad4 	bl	800932a <HAL_PCD_EP_Close>
 8016d82:	4603      	mov	r3, r0
 8016d84:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8016d86:	7bfb      	ldrb	r3, [r7, #15]
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f000 f8e9 	bl	8016f60 <USBD_Get_USB_Status>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016d92:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d94:	4618      	mov	r0, r3
 8016d96:	3710      	adds	r7, #16
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}

08016d9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b084      	sub	sp, #16
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
 8016da4:	460b      	mov	r3, r1
 8016da6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016da8:	2300      	movs	r3, #0
 8016daa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dac:	2300      	movs	r3, #0
 8016dae:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016db6:	78fa      	ldrb	r2, [r7, #3]
 8016db8:	4611      	mov	r1, r2
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7f2 fbac 	bl	8009518 <HAL_PCD_EP_SetStall>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dc4:	7bfb      	ldrb	r3, [r7, #15]
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f000 f8ca 	bl	8016f60 <USBD_Get_USB_Status>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	3710      	adds	r7, #16
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}

08016dda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dda:	b580      	push	{r7, lr}
 8016ddc:	b084      	sub	sp, #16
 8016dde:	af00      	add	r7, sp, #0
 8016de0:	6078      	str	r0, [r7, #4]
 8016de2:	460b      	mov	r3, r1
 8016de4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016de6:	2300      	movs	r3, #0
 8016de8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dea:	2300      	movs	r3, #0
 8016dec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016df4:	78fa      	ldrb	r2, [r7, #3]
 8016df6:	4611      	mov	r1, r2
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f7f2 fbf1 	bl	80095e0 <HAL_PCD_EP_ClrStall>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016e02:	7bfb      	ldrb	r3, [r7, #15]
 8016e04:	4618      	mov	r0, r3
 8016e06:	f000 f8ab 	bl	8016f60 <USBD_Get_USB_Status>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016e0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	3710      	adds	r7, #16
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e18:	b480      	push	{r7}
 8016e1a:	b085      	sub	sp, #20
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
 8016e20:	460b      	mov	r3, r1
 8016e22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016e2a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	da0b      	bge.n	8016e4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016e34:	78fb      	ldrb	r3, [r7, #3]
 8016e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e3a:	68f9      	ldr	r1, [r7, #12]
 8016e3c:	4613      	mov	r3, r2
 8016e3e:	00db      	lsls	r3, r3, #3
 8016e40:	1a9b      	subs	r3, r3, r2
 8016e42:	009b      	lsls	r3, r3, #2
 8016e44:	440b      	add	r3, r1
 8016e46:	333e      	adds	r3, #62	; 0x3e
 8016e48:	781b      	ldrb	r3, [r3, #0]
 8016e4a:	e00b      	b.n	8016e64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016e4c:	78fb      	ldrb	r3, [r7, #3]
 8016e4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e52:	68f9      	ldr	r1, [r7, #12]
 8016e54:	4613      	mov	r3, r2
 8016e56:	00db      	lsls	r3, r3, #3
 8016e58:	1a9b      	subs	r3, r3, r2
 8016e5a:	009b      	lsls	r3, r3, #2
 8016e5c:	440b      	add	r3, r1
 8016e5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016e62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016e64:	4618      	mov	r0, r3
 8016e66:	3714      	adds	r7, #20
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6e:	4770      	bx	lr

08016e70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b084      	sub	sp, #16
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
 8016e78:	460b      	mov	r3, r1
 8016e7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e80:	2300      	movs	r3, #0
 8016e82:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016e8a:	78fa      	ldrb	r2, [r7, #3]
 8016e8c:	4611      	mov	r1, r2
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7f2 f9be 	bl	8009210 <HAL_PCD_SetAddress>
 8016e94:	4603      	mov	r3, r0
 8016e96:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e98:	7bfb      	ldrb	r3, [r7, #15]
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f000 f860 	bl	8016f60 <USBD_Get_USB_Status>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016ea4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	3710      	adds	r7, #16
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}

08016eae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016eae:	b580      	push	{r7, lr}
 8016eb0:	b086      	sub	sp, #24
 8016eb2:	af00      	add	r7, sp, #0
 8016eb4:	60f8      	str	r0, [r7, #12]
 8016eb6:	607a      	str	r2, [r7, #4]
 8016eb8:	461a      	mov	r2, r3
 8016eba:	460b      	mov	r3, r1
 8016ebc:	72fb      	strb	r3, [r7, #11]
 8016ebe:	4613      	mov	r3, r2
 8016ec0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016ed0:	893b      	ldrh	r3, [r7, #8]
 8016ed2:	7af9      	ldrb	r1, [r7, #11]
 8016ed4:	687a      	ldr	r2, [r7, #4]
 8016ed6:	f7f2 fad5 	bl	8009484 <HAL_PCD_EP_Transmit>
 8016eda:	4603      	mov	r3, r0
 8016edc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016ede:	7dfb      	ldrb	r3, [r7, #23]
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f000 f83d 	bl	8016f60 <USBD_Get_USB_Status>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016eea:	7dbb      	ldrb	r3, [r7, #22]
}
 8016eec:	4618      	mov	r0, r3
 8016eee:	3718      	adds	r7, #24
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}

08016ef4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b086      	sub	sp, #24
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	60f8      	str	r0, [r7, #12]
 8016efc:	607a      	str	r2, [r7, #4]
 8016efe:	461a      	mov	r2, r3
 8016f00:	460b      	mov	r3, r1
 8016f02:	72fb      	strb	r3, [r7, #11]
 8016f04:	4613      	mov	r3, r2
 8016f06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f08:	2300      	movs	r3, #0
 8016f0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016f16:	893b      	ldrh	r3, [r7, #8]
 8016f18:	7af9      	ldrb	r1, [r7, #11]
 8016f1a:	687a      	ldr	r2, [r7, #4]
 8016f1c:	f7f2 fa4f 	bl	80093be <HAL_PCD_EP_Receive>
 8016f20:	4603      	mov	r3, r0
 8016f22:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016f24:	7dfb      	ldrb	r3, [r7, #23]
 8016f26:	4618      	mov	r0, r3
 8016f28:	f000 f81a 	bl	8016f60 <USBD_Get_USB_Status>
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016f30:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3718      	adds	r7, #24
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}

08016f3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f3a:	b580      	push	{r7, lr}
 8016f3c:	b082      	sub	sp, #8
 8016f3e:	af00      	add	r7, sp, #0
 8016f40:	6078      	str	r0, [r7, #4]
 8016f42:	460b      	mov	r3, r1
 8016f44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016f4c:	78fa      	ldrb	r2, [r7, #3]
 8016f4e:	4611      	mov	r1, r2
 8016f50:	4618      	mov	r0, r3
 8016f52:	f7f2 fa7f 	bl	8009454 <HAL_PCD_EP_GetRxCount>
 8016f56:	4603      	mov	r3, r0
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3708      	adds	r7, #8
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}

08016f60 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016f60:	b480      	push	{r7}
 8016f62:	b085      	sub	sp, #20
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	4603      	mov	r3, r0
 8016f68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016f6e:	79fb      	ldrb	r3, [r7, #7]
 8016f70:	2b03      	cmp	r3, #3
 8016f72:	d817      	bhi.n	8016fa4 <USBD_Get_USB_Status+0x44>
 8016f74:	a201      	add	r2, pc, #4	; (adr r2, 8016f7c <USBD_Get_USB_Status+0x1c>)
 8016f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f7a:	bf00      	nop
 8016f7c:	08016f8d 	.word	0x08016f8d
 8016f80:	08016f93 	.word	0x08016f93
 8016f84:	08016f99 	.word	0x08016f99
 8016f88:	08016f9f 	.word	0x08016f9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8016f90:	e00b      	b.n	8016faa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016f92:	2302      	movs	r3, #2
 8016f94:	73fb      	strb	r3, [r7, #15]
    break;
 8016f96:	e008      	b.n	8016faa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016f98:	2301      	movs	r3, #1
 8016f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8016f9c:	e005      	b.n	8016faa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016f9e:	2302      	movs	r3, #2
 8016fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8016fa2:	e002      	b.n	8016faa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016fa4:	2302      	movs	r3, #2
 8016fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8016fa8:	bf00      	nop
  }
  return usb_status;
 8016faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fac:	4618      	mov	r0, r3
 8016fae:	3714      	adds	r7, #20
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb6:	4770      	bx	lr

08016fb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fb8:	b480      	push	{r7}
 8016fba:	b083      	sub	sp, #12
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	6039      	str	r1, [r7, #0]
 8016fc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016fc4:	683b      	ldr	r3, [r7, #0]
 8016fc6:	2212      	movs	r2, #18
 8016fc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016fca:	4b03      	ldr	r3, [pc, #12]	; (8016fd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016fcc:	4618      	mov	r0, r3
 8016fce:	370c      	adds	r7, #12
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd6:	4770      	bx	lr
 8016fd8:	200001a0 	.word	0x200001a0

08016fdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fdc:	b480      	push	{r7}
 8016fde:	b083      	sub	sp, #12
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	6039      	str	r1, [r7, #0]
 8016fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016fe8:	683b      	ldr	r3, [r7, #0]
 8016fea:	2204      	movs	r2, #4
 8016fec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016fee:	4b03      	ldr	r3, [pc, #12]	; (8016ffc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	370c      	adds	r7, #12
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffa:	4770      	bx	lr
 8016ffc:	200001b4 	.word	0x200001b4

08017000 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b082      	sub	sp, #8
 8017004:	af00      	add	r7, sp, #0
 8017006:	4603      	mov	r3, r0
 8017008:	6039      	str	r1, [r7, #0]
 801700a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801700c:	79fb      	ldrb	r3, [r7, #7]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d105      	bne.n	801701e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017012:	683a      	ldr	r2, [r7, #0]
 8017014:	4907      	ldr	r1, [pc, #28]	; (8017034 <USBD_FS_ProductStrDescriptor+0x34>)
 8017016:	4808      	ldr	r0, [pc, #32]	; (8017038 <USBD_FS_ProductStrDescriptor+0x38>)
 8017018:	f7fa f95c 	bl	80112d4 <USBD_GetString>
 801701c:	e004      	b.n	8017028 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801701e:	683a      	ldr	r2, [r7, #0]
 8017020:	4904      	ldr	r1, [pc, #16]	; (8017034 <USBD_FS_ProductStrDescriptor+0x34>)
 8017022:	4805      	ldr	r0, [pc, #20]	; (8017038 <USBD_FS_ProductStrDescriptor+0x38>)
 8017024:	f7fa f956 	bl	80112d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017028:	4b02      	ldr	r3, [pc, #8]	; (8017034 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801702a:	4618      	mov	r0, r3
 801702c:	3708      	adds	r7, #8
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}
 8017032:	bf00      	nop
 8017034:	2000a3b0 	.word	0x2000a3b0
 8017038:	0801e340 	.word	0x0801e340

0801703c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b082      	sub	sp, #8
 8017040:	af00      	add	r7, sp, #0
 8017042:	4603      	mov	r3, r0
 8017044:	6039      	str	r1, [r7, #0]
 8017046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017048:	683a      	ldr	r2, [r7, #0]
 801704a:	4904      	ldr	r1, [pc, #16]	; (801705c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801704c:	4804      	ldr	r0, [pc, #16]	; (8017060 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801704e:	f7fa f941 	bl	80112d4 <USBD_GetString>
  return USBD_StrDesc;
 8017052:	4b02      	ldr	r3, [pc, #8]	; (801705c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017054:	4618      	mov	r0, r3
 8017056:	3708      	adds	r7, #8
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}
 801705c:	2000a3b0 	.word	0x2000a3b0
 8017060:	0801e34c 	.word	0x0801e34c

08017064 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b082      	sub	sp, #8
 8017068:	af00      	add	r7, sp, #0
 801706a:	4603      	mov	r3, r0
 801706c:	6039      	str	r1, [r7, #0]
 801706e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017070:	683b      	ldr	r3, [r7, #0]
 8017072:	221a      	movs	r2, #26
 8017074:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017076:	f000 f843 	bl	8017100 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 801707a:	4b02      	ldr	r3, [pc, #8]	; (8017084 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801707c:	4618      	mov	r0, r3
 801707e:	3708      	adds	r7, #8
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}
 8017084:	200001b8 	.word	0x200001b8

08017088 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b082      	sub	sp, #8
 801708c:	af00      	add	r7, sp, #0
 801708e:	4603      	mov	r3, r0
 8017090:	6039      	str	r1, [r7, #0]
 8017092:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017094:	79fb      	ldrb	r3, [r7, #7]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d105      	bne.n	80170a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801709a:	683a      	ldr	r2, [r7, #0]
 801709c:	4907      	ldr	r1, [pc, #28]	; (80170bc <USBD_FS_ConfigStrDescriptor+0x34>)
 801709e:	4808      	ldr	r0, [pc, #32]	; (80170c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80170a0:	f7fa f918 	bl	80112d4 <USBD_GetString>
 80170a4:	e004      	b.n	80170b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80170a6:	683a      	ldr	r2, [r7, #0]
 80170a8:	4904      	ldr	r1, [pc, #16]	; (80170bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80170aa:	4805      	ldr	r0, [pc, #20]	; (80170c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80170ac:	f7fa f912 	bl	80112d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80170b0:	4b02      	ldr	r3, [pc, #8]	; (80170bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80170b2:	4618      	mov	r0, r3
 80170b4:	3708      	adds	r7, #8
 80170b6:	46bd      	mov	sp, r7
 80170b8:	bd80      	pop	{r7, pc}
 80170ba:	bf00      	nop
 80170bc:	2000a3b0 	.word	0x2000a3b0
 80170c0:	0801e360 	.word	0x0801e360

080170c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b082      	sub	sp, #8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	4603      	mov	r3, r0
 80170cc:	6039      	str	r1, [r7, #0]
 80170ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80170d0:	79fb      	ldrb	r3, [r7, #7]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d105      	bne.n	80170e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80170d6:	683a      	ldr	r2, [r7, #0]
 80170d8:	4907      	ldr	r1, [pc, #28]	; (80170f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80170da:	4808      	ldr	r0, [pc, #32]	; (80170fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80170dc:	f7fa f8fa 	bl	80112d4 <USBD_GetString>
 80170e0:	e004      	b.n	80170ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80170e2:	683a      	ldr	r2, [r7, #0]
 80170e4:	4904      	ldr	r1, [pc, #16]	; (80170f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80170e6:	4805      	ldr	r0, [pc, #20]	; (80170fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80170e8:	f7fa f8f4 	bl	80112d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80170ec:	4b02      	ldr	r3, [pc, #8]	; (80170f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80170ee:	4618      	mov	r0, r3
 80170f0:	3708      	adds	r7, #8
 80170f2:	46bd      	mov	sp, r7
 80170f4:	bd80      	pop	{r7, pc}
 80170f6:	bf00      	nop
 80170f8:	2000a3b0 	.word	0x2000a3b0
 80170fc:	0801e36c 	.word	0x0801e36c

08017100 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b084      	sub	sp, #16
 8017104:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017106:	4b0f      	ldr	r3, [pc, #60]	; (8017144 <Get_SerialNum+0x44>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801710c:	4b0e      	ldr	r3, [pc, #56]	; (8017148 <Get_SerialNum+0x48>)
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017112:	4b0e      	ldr	r3, [pc, #56]	; (801714c <Get_SerialNum+0x4c>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017118:	68fa      	ldr	r2, [r7, #12]
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	4413      	add	r3, r2
 801711e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d009      	beq.n	801713a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017126:	2208      	movs	r2, #8
 8017128:	4909      	ldr	r1, [pc, #36]	; (8017150 <Get_SerialNum+0x50>)
 801712a:	68f8      	ldr	r0, [r7, #12]
 801712c:	f000 f814 	bl	8017158 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017130:	2204      	movs	r2, #4
 8017132:	4908      	ldr	r1, [pc, #32]	; (8017154 <Get_SerialNum+0x54>)
 8017134:	68b8      	ldr	r0, [r7, #8]
 8017136:	f000 f80f 	bl	8017158 <IntToUnicode>
  }
}
 801713a:	bf00      	nop
 801713c:	3710      	adds	r7, #16
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}
 8017142:	bf00      	nop
 8017144:	1fff7a10 	.word	0x1fff7a10
 8017148:	1fff7a14 	.word	0x1fff7a14
 801714c:	1fff7a18 	.word	0x1fff7a18
 8017150:	200001ba 	.word	0x200001ba
 8017154:	200001ca 	.word	0x200001ca

08017158 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017158:	b480      	push	{r7}
 801715a:	b087      	sub	sp, #28
 801715c:	af00      	add	r7, sp, #0
 801715e:	60f8      	str	r0, [r7, #12]
 8017160:	60b9      	str	r1, [r7, #8]
 8017162:	4613      	mov	r3, r2
 8017164:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017166:	2300      	movs	r3, #0
 8017168:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801716a:	2300      	movs	r3, #0
 801716c:	75fb      	strb	r3, [r7, #23]
 801716e:	e027      	b.n	80171c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	0f1b      	lsrs	r3, r3, #28
 8017174:	2b09      	cmp	r3, #9
 8017176:	d80b      	bhi.n	8017190 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	0f1b      	lsrs	r3, r3, #28
 801717c:	b2da      	uxtb	r2, r3
 801717e:	7dfb      	ldrb	r3, [r7, #23]
 8017180:	005b      	lsls	r3, r3, #1
 8017182:	4619      	mov	r1, r3
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	440b      	add	r3, r1
 8017188:	3230      	adds	r2, #48	; 0x30
 801718a:	b2d2      	uxtb	r2, r2
 801718c:	701a      	strb	r2, [r3, #0]
 801718e:	e00a      	b.n	80171a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	0f1b      	lsrs	r3, r3, #28
 8017194:	b2da      	uxtb	r2, r3
 8017196:	7dfb      	ldrb	r3, [r7, #23]
 8017198:	005b      	lsls	r3, r3, #1
 801719a:	4619      	mov	r1, r3
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	440b      	add	r3, r1
 80171a0:	3237      	adds	r2, #55	; 0x37
 80171a2:	b2d2      	uxtb	r2, r2
 80171a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	011b      	lsls	r3, r3, #4
 80171aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80171ac:	7dfb      	ldrb	r3, [r7, #23]
 80171ae:	005b      	lsls	r3, r3, #1
 80171b0:	3301      	adds	r3, #1
 80171b2:	68ba      	ldr	r2, [r7, #8]
 80171b4:	4413      	add	r3, r2
 80171b6:	2200      	movs	r2, #0
 80171b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80171ba:	7dfb      	ldrb	r3, [r7, #23]
 80171bc:	3301      	adds	r3, #1
 80171be:	75fb      	strb	r3, [r7, #23]
 80171c0:	7dfa      	ldrb	r2, [r7, #23]
 80171c2:	79fb      	ldrb	r3, [r7, #7]
 80171c4:	429a      	cmp	r2, r3
 80171c6:	d3d3      	bcc.n	8017170 <IntToUnicode+0x18>
  }
}
 80171c8:	bf00      	nop
 80171ca:	371c      	adds	r7, #28
 80171cc:	46bd      	mov	sp, r7
 80171ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d2:	4770      	bx	lr

080171d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80171d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801720c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80171d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80171da:	e003      	b.n	80171e4 <LoopCopyDataInit>

080171dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80171dc:	4b0c      	ldr	r3, [pc, #48]	; (8017210 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80171de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80171e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80171e2:	3104      	adds	r1, #4

080171e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80171e4:	480b      	ldr	r0, [pc, #44]	; (8017214 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80171e6:	4b0c      	ldr	r3, [pc, #48]	; (8017218 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80171e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80171ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80171ec:	d3f6      	bcc.n	80171dc <CopyDataInit>
  ldr  r2, =_sbss
 80171ee:	4a0b      	ldr	r2, [pc, #44]	; (801721c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80171f0:	e002      	b.n	80171f8 <LoopFillZerobss>

080171f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80171f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80171f4:	f842 3b04 	str.w	r3, [r2], #4

080171f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80171f8:	4b09      	ldr	r3, [pc, #36]	; (8017220 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80171fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80171fc:	d3f9      	bcc.n	80171f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80171fe:	f7ff fa89 	bl	8016714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017202:	f000 f821 	bl	8017248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8017206:	f7fe f8ad 	bl	8015364 <main>
  bx  lr    
 801720a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801720c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8017210:	0801e978 	.word	0x0801e978
  ldr  r0, =_sdata
 8017214:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8017218:	200003a8 	.word	0x200003a8
  ldr  r2, =_sbss
 801721c:	200003a8 	.word	0x200003a8
  ldr  r3, = _ebss
 8017220:	2000a5b4 	.word	0x2000a5b4

08017224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8017224:	e7fe      	b.n	8017224 <ADC_IRQHandler>

08017226 <atof>:
 8017226:	2100      	movs	r1, #0
 8017228:	f001 bdde 	b.w	8018de8 <strtod>

0801722c <atoi>:
 801722c:	220a      	movs	r2, #10
 801722e:	2100      	movs	r1, #0
 8017230:	f001 be7c 	b.w	8018f2c <strtol>

08017234 <atol>:
 8017234:	220a      	movs	r2, #10
 8017236:	2100      	movs	r1, #0
 8017238:	f001 be78 	b.w	8018f2c <strtol>

0801723c <__errno>:
 801723c:	4b01      	ldr	r3, [pc, #4]	; (8017244 <__errno+0x8>)
 801723e:	6818      	ldr	r0, [r3, #0]
 8017240:	4770      	bx	lr
 8017242:	bf00      	nop
 8017244:	200001d4 	.word	0x200001d4

08017248 <__libc_init_array>:
 8017248:	b570      	push	{r4, r5, r6, lr}
 801724a:	4e0d      	ldr	r6, [pc, #52]	; (8017280 <__libc_init_array+0x38>)
 801724c:	4c0d      	ldr	r4, [pc, #52]	; (8017284 <__libc_init_array+0x3c>)
 801724e:	1ba4      	subs	r4, r4, r6
 8017250:	10a4      	asrs	r4, r4, #2
 8017252:	2500      	movs	r5, #0
 8017254:	42a5      	cmp	r5, r4
 8017256:	d109      	bne.n	801726c <__libc_init_array+0x24>
 8017258:	4e0b      	ldr	r6, [pc, #44]	; (8017288 <__libc_init_array+0x40>)
 801725a:	4c0c      	ldr	r4, [pc, #48]	; (801728c <__libc_init_array+0x44>)
 801725c:	f006 fcba 	bl	801dbd4 <_init>
 8017260:	1ba4      	subs	r4, r4, r6
 8017262:	10a4      	asrs	r4, r4, #2
 8017264:	2500      	movs	r5, #0
 8017266:	42a5      	cmp	r5, r4
 8017268:	d105      	bne.n	8017276 <__libc_init_array+0x2e>
 801726a:	bd70      	pop	{r4, r5, r6, pc}
 801726c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017270:	4798      	blx	r3
 8017272:	3501      	adds	r5, #1
 8017274:	e7ee      	b.n	8017254 <__libc_init_array+0xc>
 8017276:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801727a:	4798      	blx	r3
 801727c:	3501      	adds	r5, #1
 801727e:	e7f2      	b.n	8017266 <__libc_init_array+0x1e>
 8017280:	0801e970 	.word	0x0801e970
 8017284:	0801e970 	.word	0x0801e970
 8017288:	0801e970 	.word	0x0801e970
 801728c:	0801e974 	.word	0x0801e974

08017290 <malloc>:
 8017290:	4b02      	ldr	r3, [pc, #8]	; (801729c <malloc+0xc>)
 8017292:	4601      	mov	r1, r0
 8017294:	6818      	ldr	r0, [r3, #0]
 8017296:	f000 b86d 	b.w	8017374 <_malloc_r>
 801729a:	bf00      	nop
 801729c:	200001d4 	.word	0x200001d4

080172a0 <free>:
 80172a0:	4b02      	ldr	r3, [pc, #8]	; (80172ac <free+0xc>)
 80172a2:	4601      	mov	r1, r0
 80172a4:	6818      	ldr	r0, [r3, #0]
 80172a6:	f000 b817 	b.w	80172d8 <_free_r>
 80172aa:	bf00      	nop
 80172ac:	200001d4 	.word	0x200001d4

080172b0 <memcpy>:
 80172b0:	b510      	push	{r4, lr}
 80172b2:	1e43      	subs	r3, r0, #1
 80172b4:	440a      	add	r2, r1
 80172b6:	4291      	cmp	r1, r2
 80172b8:	d100      	bne.n	80172bc <memcpy+0xc>
 80172ba:	bd10      	pop	{r4, pc}
 80172bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80172c4:	e7f7      	b.n	80172b6 <memcpy+0x6>

080172c6 <memset>:
 80172c6:	4402      	add	r2, r0
 80172c8:	4603      	mov	r3, r0
 80172ca:	4293      	cmp	r3, r2
 80172cc:	d100      	bne.n	80172d0 <memset+0xa>
 80172ce:	4770      	bx	lr
 80172d0:	f803 1b01 	strb.w	r1, [r3], #1
 80172d4:	e7f9      	b.n	80172ca <memset+0x4>
	...

080172d8 <_free_r>:
 80172d8:	b538      	push	{r3, r4, r5, lr}
 80172da:	4605      	mov	r5, r0
 80172dc:	2900      	cmp	r1, #0
 80172de:	d045      	beq.n	801736c <_free_r+0x94>
 80172e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172e4:	1f0c      	subs	r4, r1, #4
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	bfb8      	it	lt
 80172ea:	18e4      	addlt	r4, r4, r3
 80172ec:	f002 ffe4 	bl	801a2b8 <__malloc_lock>
 80172f0:	4a1f      	ldr	r2, [pc, #124]	; (8017370 <_free_r+0x98>)
 80172f2:	6813      	ldr	r3, [r2, #0]
 80172f4:	4610      	mov	r0, r2
 80172f6:	b933      	cbnz	r3, 8017306 <_free_r+0x2e>
 80172f8:	6063      	str	r3, [r4, #4]
 80172fa:	6014      	str	r4, [r2, #0]
 80172fc:	4628      	mov	r0, r5
 80172fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017302:	f002 bfda 	b.w	801a2ba <__malloc_unlock>
 8017306:	42a3      	cmp	r3, r4
 8017308:	d90c      	bls.n	8017324 <_free_r+0x4c>
 801730a:	6821      	ldr	r1, [r4, #0]
 801730c:	1862      	adds	r2, r4, r1
 801730e:	4293      	cmp	r3, r2
 8017310:	bf04      	itt	eq
 8017312:	681a      	ldreq	r2, [r3, #0]
 8017314:	685b      	ldreq	r3, [r3, #4]
 8017316:	6063      	str	r3, [r4, #4]
 8017318:	bf04      	itt	eq
 801731a:	1852      	addeq	r2, r2, r1
 801731c:	6022      	streq	r2, [r4, #0]
 801731e:	6004      	str	r4, [r0, #0]
 8017320:	e7ec      	b.n	80172fc <_free_r+0x24>
 8017322:	4613      	mov	r3, r2
 8017324:	685a      	ldr	r2, [r3, #4]
 8017326:	b10a      	cbz	r2, 801732c <_free_r+0x54>
 8017328:	42a2      	cmp	r2, r4
 801732a:	d9fa      	bls.n	8017322 <_free_r+0x4a>
 801732c:	6819      	ldr	r1, [r3, #0]
 801732e:	1858      	adds	r0, r3, r1
 8017330:	42a0      	cmp	r0, r4
 8017332:	d10b      	bne.n	801734c <_free_r+0x74>
 8017334:	6820      	ldr	r0, [r4, #0]
 8017336:	4401      	add	r1, r0
 8017338:	1858      	adds	r0, r3, r1
 801733a:	4282      	cmp	r2, r0
 801733c:	6019      	str	r1, [r3, #0]
 801733e:	d1dd      	bne.n	80172fc <_free_r+0x24>
 8017340:	6810      	ldr	r0, [r2, #0]
 8017342:	6852      	ldr	r2, [r2, #4]
 8017344:	605a      	str	r2, [r3, #4]
 8017346:	4401      	add	r1, r0
 8017348:	6019      	str	r1, [r3, #0]
 801734a:	e7d7      	b.n	80172fc <_free_r+0x24>
 801734c:	d902      	bls.n	8017354 <_free_r+0x7c>
 801734e:	230c      	movs	r3, #12
 8017350:	602b      	str	r3, [r5, #0]
 8017352:	e7d3      	b.n	80172fc <_free_r+0x24>
 8017354:	6820      	ldr	r0, [r4, #0]
 8017356:	1821      	adds	r1, r4, r0
 8017358:	428a      	cmp	r2, r1
 801735a:	bf04      	itt	eq
 801735c:	6811      	ldreq	r1, [r2, #0]
 801735e:	6852      	ldreq	r2, [r2, #4]
 8017360:	6062      	str	r2, [r4, #4]
 8017362:	bf04      	itt	eq
 8017364:	1809      	addeq	r1, r1, r0
 8017366:	6021      	streq	r1, [r4, #0]
 8017368:	605c      	str	r4, [r3, #4]
 801736a:	e7c7      	b.n	80172fc <_free_r+0x24>
 801736c:	bd38      	pop	{r3, r4, r5, pc}
 801736e:	bf00      	nop
 8017370:	20000e34 	.word	0x20000e34

08017374 <_malloc_r>:
 8017374:	b570      	push	{r4, r5, r6, lr}
 8017376:	1ccd      	adds	r5, r1, #3
 8017378:	f025 0503 	bic.w	r5, r5, #3
 801737c:	3508      	adds	r5, #8
 801737e:	2d0c      	cmp	r5, #12
 8017380:	bf38      	it	cc
 8017382:	250c      	movcc	r5, #12
 8017384:	2d00      	cmp	r5, #0
 8017386:	4606      	mov	r6, r0
 8017388:	db01      	blt.n	801738e <_malloc_r+0x1a>
 801738a:	42a9      	cmp	r1, r5
 801738c:	d903      	bls.n	8017396 <_malloc_r+0x22>
 801738e:	230c      	movs	r3, #12
 8017390:	6033      	str	r3, [r6, #0]
 8017392:	2000      	movs	r0, #0
 8017394:	bd70      	pop	{r4, r5, r6, pc}
 8017396:	f002 ff8f 	bl	801a2b8 <__malloc_lock>
 801739a:	4a21      	ldr	r2, [pc, #132]	; (8017420 <_malloc_r+0xac>)
 801739c:	6814      	ldr	r4, [r2, #0]
 801739e:	4621      	mov	r1, r4
 80173a0:	b991      	cbnz	r1, 80173c8 <_malloc_r+0x54>
 80173a2:	4c20      	ldr	r4, [pc, #128]	; (8017424 <_malloc_r+0xb0>)
 80173a4:	6823      	ldr	r3, [r4, #0]
 80173a6:	b91b      	cbnz	r3, 80173b0 <_malloc_r+0x3c>
 80173a8:	4630      	mov	r0, r6
 80173aa:	f000 fe7b 	bl	80180a4 <_sbrk_r>
 80173ae:	6020      	str	r0, [r4, #0]
 80173b0:	4629      	mov	r1, r5
 80173b2:	4630      	mov	r0, r6
 80173b4:	f000 fe76 	bl	80180a4 <_sbrk_r>
 80173b8:	1c43      	adds	r3, r0, #1
 80173ba:	d124      	bne.n	8017406 <_malloc_r+0x92>
 80173bc:	230c      	movs	r3, #12
 80173be:	6033      	str	r3, [r6, #0]
 80173c0:	4630      	mov	r0, r6
 80173c2:	f002 ff7a 	bl	801a2ba <__malloc_unlock>
 80173c6:	e7e4      	b.n	8017392 <_malloc_r+0x1e>
 80173c8:	680b      	ldr	r3, [r1, #0]
 80173ca:	1b5b      	subs	r3, r3, r5
 80173cc:	d418      	bmi.n	8017400 <_malloc_r+0x8c>
 80173ce:	2b0b      	cmp	r3, #11
 80173d0:	d90f      	bls.n	80173f2 <_malloc_r+0x7e>
 80173d2:	600b      	str	r3, [r1, #0]
 80173d4:	50cd      	str	r5, [r1, r3]
 80173d6:	18cc      	adds	r4, r1, r3
 80173d8:	4630      	mov	r0, r6
 80173da:	f002 ff6e 	bl	801a2ba <__malloc_unlock>
 80173de:	f104 000b 	add.w	r0, r4, #11
 80173e2:	1d23      	adds	r3, r4, #4
 80173e4:	f020 0007 	bic.w	r0, r0, #7
 80173e8:	1ac3      	subs	r3, r0, r3
 80173ea:	d0d3      	beq.n	8017394 <_malloc_r+0x20>
 80173ec:	425a      	negs	r2, r3
 80173ee:	50e2      	str	r2, [r4, r3]
 80173f0:	e7d0      	b.n	8017394 <_malloc_r+0x20>
 80173f2:	428c      	cmp	r4, r1
 80173f4:	684b      	ldr	r3, [r1, #4]
 80173f6:	bf16      	itet	ne
 80173f8:	6063      	strne	r3, [r4, #4]
 80173fa:	6013      	streq	r3, [r2, #0]
 80173fc:	460c      	movne	r4, r1
 80173fe:	e7eb      	b.n	80173d8 <_malloc_r+0x64>
 8017400:	460c      	mov	r4, r1
 8017402:	6849      	ldr	r1, [r1, #4]
 8017404:	e7cc      	b.n	80173a0 <_malloc_r+0x2c>
 8017406:	1cc4      	adds	r4, r0, #3
 8017408:	f024 0403 	bic.w	r4, r4, #3
 801740c:	42a0      	cmp	r0, r4
 801740e:	d005      	beq.n	801741c <_malloc_r+0xa8>
 8017410:	1a21      	subs	r1, r4, r0
 8017412:	4630      	mov	r0, r6
 8017414:	f000 fe46 	bl	80180a4 <_sbrk_r>
 8017418:	3001      	adds	r0, #1
 801741a:	d0cf      	beq.n	80173bc <_malloc_r+0x48>
 801741c:	6025      	str	r5, [r4, #0]
 801741e:	e7db      	b.n	80173d8 <_malloc_r+0x64>
 8017420:	20000e34 	.word	0x20000e34
 8017424:	20000e38 	.word	0x20000e38

08017428 <__cvt>:
 8017428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801742c:	ec55 4b10 	vmov	r4, r5, d0
 8017430:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8017432:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017436:	2d00      	cmp	r5, #0
 8017438:	460e      	mov	r6, r1
 801743a:	4691      	mov	r9, r2
 801743c:	4619      	mov	r1, r3
 801743e:	bfb8      	it	lt
 8017440:	4622      	movlt	r2, r4
 8017442:	462b      	mov	r3, r5
 8017444:	f027 0720 	bic.w	r7, r7, #32
 8017448:	bfbb      	ittet	lt
 801744a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801744e:	461d      	movlt	r5, r3
 8017450:	2300      	movge	r3, #0
 8017452:	232d      	movlt	r3, #45	; 0x2d
 8017454:	bfb8      	it	lt
 8017456:	4614      	movlt	r4, r2
 8017458:	2f46      	cmp	r7, #70	; 0x46
 801745a:	700b      	strb	r3, [r1, #0]
 801745c:	d004      	beq.n	8017468 <__cvt+0x40>
 801745e:	2f45      	cmp	r7, #69	; 0x45
 8017460:	d100      	bne.n	8017464 <__cvt+0x3c>
 8017462:	3601      	adds	r6, #1
 8017464:	2102      	movs	r1, #2
 8017466:	e000      	b.n	801746a <__cvt+0x42>
 8017468:	2103      	movs	r1, #3
 801746a:	ab03      	add	r3, sp, #12
 801746c:	9301      	str	r3, [sp, #4]
 801746e:	ab02      	add	r3, sp, #8
 8017470:	9300      	str	r3, [sp, #0]
 8017472:	4632      	mov	r2, r6
 8017474:	4653      	mov	r3, sl
 8017476:	ec45 4b10 	vmov	d0, r4, r5
 801747a:	f001 fe19 	bl	80190b0 <_dtoa_r>
 801747e:	2f47      	cmp	r7, #71	; 0x47
 8017480:	4680      	mov	r8, r0
 8017482:	d102      	bne.n	801748a <__cvt+0x62>
 8017484:	f019 0f01 	tst.w	r9, #1
 8017488:	d026      	beq.n	80174d8 <__cvt+0xb0>
 801748a:	2f46      	cmp	r7, #70	; 0x46
 801748c:	eb08 0906 	add.w	r9, r8, r6
 8017490:	d111      	bne.n	80174b6 <__cvt+0x8e>
 8017492:	f898 3000 	ldrb.w	r3, [r8]
 8017496:	2b30      	cmp	r3, #48	; 0x30
 8017498:	d10a      	bne.n	80174b0 <__cvt+0x88>
 801749a:	2200      	movs	r2, #0
 801749c:	2300      	movs	r3, #0
 801749e:	4620      	mov	r0, r4
 80174a0:	4629      	mov	r1, r5
 80174a2:	f7e9 fb21 	bl	8000ae8 <__aeabi_dcmpeq>
 80174a6:	b918      	cbnz	r0, 80174b0 <__cvt+0x88>
 80174a8:	f1c6 0601 	rsb	r6, r6, #1
 80174ac:	f8ca 6000 	str.w	r6, [sl]
 80174b0:	f8da 3000 	ldr.w	r3, [sl]
 80174b4:	4499      	add	r9, r3
 80174b6:	2200      	movs	r2, #0
 80174b8:	2300      	movs	r3, #0
 80174ba:	4620      	mov	r0, r4
 80174bc:	4629      	mov	r1, r5
 80174be:	f7e9 fb13 	bl	8000ae8 <__aeabi_dcmpeq>
 80174c2:	b938      	cbnz	r0, 80174d4 <__cvt+0xac>
 80174c4:	2230      	movs	r2, #48	; 0x30
 80174c6:	9b03      	ldr	r3, [sp, #12]
 80174c8:	454b      	cmp	r3, r9
 80174ca:	d205      	bcs.n	80174d8 <__cvt+0xb0>
 80174cc:	1c59      	adds	r1, r3, #1
 80174ce:	9103      	str	r1, [sp, #12]
 80174d0:	701a      	strb	r2, [r3, #0]
 80174d2:	e7f8      	b.n	80174c6 <__cvt+0x9e>
 80174d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80174d8:	9b03      	ldr	r3, [sp, #12]
 80174da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80174dc:	eba3 0308 	sub.w	r3, r3, r8
 80174e0:	4640      	mov	r0, r8
 80174e2:	6013      	str	r3, [r2, #0]
 80174e4:	b004      	add	sp, #16
 80174e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080174ea <__exponent>:
 80174ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174ec:	2900      	cmp	r1, #0
 80174ee:	4604      	mov	r4, r0
 80174f0:	bfba      	itte	lt
 80174f2:	4249      	neglt	r1, r1
 80174f4:	232d      	movlt	r3, #45	; 0x2d
 80174f6:	232b      	movge	r3, #43	; 0x2b
 80174f8:	2909      	cmp	r1, #9
 80174fa:	f804 2b02 	strb.w	r2, [r4], #2
 80174fe:	7043      	strb	r3, [r0, #1]
 8017500:	dd20      	ble.n	8017544 <__exponent+0x5a>
 8017502:	f10d 0307 	add.w	r3, sp, #7
 8017506:	461f      	mov	r7, r3
 8017508:	260a      	movs	r6, #10
 801750a:	fb91 f5f6 	sdiv	r5, r1, r6
 801750e:	fb06 1115 	mls	r1, r6, r5, r1
 8017512:	3130      	adds	r1, #48	; 0x30
 8017514:	2d09      	cmp	r5, #9
 8017516:	f803 1c01 	strb.w	r1, [r3, #-1]
 801751a:	f103 32ff 	add.w	r2, r3, #4294967295
 801751e:	4629      	mov	r1, r5
 8017520:	dc09      	bgt.n	8017536 <__exponent+0x4c>
 8017522:	3130      	adds	r1, #48	; 0x30
 8017524:	3b02      	subs	r3, #2
 8017526:	f802 1c01 	strb.w	r1, [r2, #-1]
 801752a:	42bb      	cmp	r3, r7
 801752c:	4622      	mov	r2, r4
 801752e:	d304      	bcc.n	801753a <__exponent+0x50>
 8017530:	1a10      	subs	r0, r2, r0
 8017532:	b003      	add	sp, #12
 8017534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017536:	4613      	mov	r3, r2
 8017538:	e7e7      	b.n	801750a <__exponent+0x20>
 801753a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801753e:	f804 2b01 	strb.w	r2, [r4], #1
 8017542:	e7f2      	b.n	801752a <__exponent+0x40>
 8017544:	2330      	movs	r3, #48	; 0x30
 8017546:	4419      	add	r1, r3
 8017548:	7083      	strb	r3, [r0, #2]
 801754a:	1d02      	adds	r2, r0, #4
 801754c:	70c1      	strb	r1, [r0, #3]
 801754e:	e7ef      	b.n	8017530 <__exponent+0x46>

08017550 <_printf_float>:
 8017550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017554:	b08d      	sub	sp, #52	; 0x34
 8017556:	460c      	mov	r4, r1
 8017558:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801755c:	4616      	mov	r6, r2
 801755e:	461f      	mov	r7, r3
 8017560:	4605      	mov	r5, r0
 8017562:	f002 fe89 	bl	801a278 <_localeconv_r>
 8017566:	6803      	ldr	r3, [r0, #0]
 8017568:	9304      	str	r3, [sp, #16]
 801756a:	4618      	mov	r0, r3
 801756c:	f7e8 fe3a 	bl	80001e4 <strlen>
 8017570:	2300      	movs	r3, #0
 8017572:	930a      	str	r3, [sp, #40]	; 0x28
 8017574:	f8d8 3000 	ldr.w	r3, [r8]
 8017578:	9005      	str	r0, [sp, #20]
 801757a:	3307      	adds	r3, #7
 801757c:	f023 0307 	bic.w	r3, r3, #7
 8017580:	f103 0208 	add.w	r2, r3, #8
 8017584:	f894 a018 	ldrb.w	sl, [r4, #24]
 8017588:	f8d4 b000 	ldr.w	fp, [r4]
 801758c:	f8c8 2000 	str.w	r2, [r8]
 8017590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017594:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017598:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801759c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80175a0:	9307      	str	r3, [sp, #28]
 80175a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80175a6:	f04f 32ff 	mov.w	r2, #4294967295
 80175aa:	4ba7      	ldr	r3, [pc, #668]	; (8017848 <_printf_float+0x2f8>)
 80175ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80175b0:	f7e9 facc 	bl	8000b4c <__aeabi_dcmpun>
 80175b4:	bb70      	cbnz	r0, 8017614 <_printf_float+0xc4>
 80175b6:	f04f 32ff 	mov.w	r2, #4294967295
 80175ba:	4ba3      	ldr	r3, [pc, #652]	; (8017848 <_printf_float+0x2f8>)
 80175bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80175c0:	f7e9 faa6 	bl	8000b10 <__aeabi_dcmple>
 80175c4:	bb30      	cbnz	r0, 8017614 <_printf_float+0xc4>
 80175c6:	2200      	movs	r2, #0
 80175c8:	2300      	movs	r3, #0
 80175ca:	4640      	mov	r0, r8
 80175cc:	4649      	mov	r1, r9
 80175ce:	f7e9 fa95 	bl	8000afc <__aeabi_dcmplt>
 80175d2:	b110      	cbz	r0, 80175da <_printf_float+0x8a>
 80175d4:	232d      	movs	r3, #45	; 0x2d
 80175d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80175da:	4a9c      	ldr	r2, [pc, #624]	; (801784c <_printf_float+0x2fc>)
 80175dc:	4b9c      	ldr	r3, [pc, #624]	; (8017850 <_printf_float+0x300>)
 80175de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80175e2:	bf8c      	ite	hi
 80175e4:	4690      	movhi	r8, r2
 80175e6:	4698      	movls	r8, r3
 80175e8:	2303      	movs	r3, #3
 80175ea:	f02b 0204 	bic.w	r2, fp, #4
 80175ee:	6123      	str	r3, [r4, #16]
 80175f0:	6022      	str	r2, [r4, #0]
 80175f2:	f04f 0900 	mov.w	r9, #0
 80175f6:	9700      	str	r7, [sp, #0]
 80175f8:	4633      	mov	r3, r6
 80175fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80175fc:	4621      	mov	r1, r4
 80175fe:	4628      	mov	r0, r5
 8017600:	f000 f9e6 	bl	80179d0 <_printf_common>
 8017604:	3001      	adds	r0, #1
 8017606:	f040 808d 	bne.w	8017724 <_printf_float+0x1d4>
 801760a:	f04f 30ff 	mov.w	r0, #4294967295
 801760e:	b00d      	add	sp, #52	; 0x34
 8017610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017614:	4642      	mov	r2, r8
 8017616:	464b      	mov	r3, r9
 8017618:	4640      	mov	r0, r8
 801761a:	4649      	mov	r1, r9
 801761c:	f7e9 fa96 	bl	8000b4c <__aeabi_dcmpun>
 8017620:	b110      	cbz	r0, 8017628 <_printf_float+0xd8>
 8017622:	4a8c      	ldr	r2, [pc, #560]	; (8017854 <_printf_float+0x304>)
 8017624:	4b8c      	ldr	r3, [pc, #560]	; (8017858 <_printf_float+0x308>)
 8017626:	e7da      	b.n	80175de <_printf_float+0x8e>
 8017628:	6861      	ldr	r1, [r4, #4]
 801762a:	1c4b      	adds	r3, r1, #1
 801762c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8017630:	a80a      	add	r0, sp, #40	; 0x28
 8017632:	d13e      	bne.n	80176b2 <_printf_float+0x162>
 8017634:	2306      	movs	r3, #6
 8017636:	6063      	str	r3, [r4, #4]
 8017638:	2300      	movs	r3, #0
 801763a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801763e:	ab09      	add	r3, sp, #36	; 0x24
 8017640:	9300      	str	r3, [sp, #0]
 8017642:	ec49 8b10 	vmov	d0, r8, r9
 8017646:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801764a:	6022      	str	r2, [r4, #0]
 801764c:	f8cd a004 	str.w	sl, [sp, #4]
 8017650:	6861      	ldr	r1, [r4, #4]
 8017652:	4628      	mov	r0, r5
 8017654:	f7ff fee8 	bl	8017428 <__cvt>
 8017658:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801765c:	2b47      	cmp	r3, #71	; 0x47
 801765e:	4680      	mov	r8, r0
 8017660:	d109      	bne.n	8017676 <_printf_float+0x126>
 8017662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017664:	1cd8      	adds	r0, r3, #3
 8017666:	db02      	blt.n	801766e <_printf_float+0x11e>
 8017668:	6862      	ldr	r2, [r4, #4]
 801766a:	4293      	cmp	r3, r2
 801766c:	dd47      	ble.n	80176fe <_printf_float+0x1ae>
 801766e:	f1aa 0a02 	sub.w	sl, sl, #2
 8017672:	fa5f fa8a 	uxtb.w	sl, sl
 8017676:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801767a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801767c:	d824      	bhi.n	80176c8 <_printf_float+0x178>
 801767e:	3901      	subs	r1, #1
 8017680:	4652      	mov	r2, sl
 8017682:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017686:	9109      	str	r1, [sp, #36]	; 0x24
 8017688:	f7ff ff2f 	bl	80174ea <__exponent>
 801768c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801768e:	1813      	adds	r3, r2, r0
 8017690:	2a01      	cmp	r2, #1
 8017692:	4681      	mov	r9, r0
 8017694:	6123      	str	r3, [r4, #16]
 8017696:	dc02      	bgt.n	801769e <_printf_float+0x14e>
 8017698:	6822      	ldr	r2, [r4, #0]
 801769a:	07d1      	lsls	r1, r2, #31
 801769c:	d501      	bpl.n	80176a2 <_printf_float+0x152>
 801769e:	3301      	adds	r3, #1
 80176a0:	6123      	str	r3, [r4, #16]
 80176a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d0a5      	beq.n	80175f6 <_printf_float+0xa6>
 80176aa:	232d      	movs	r3, #45	; 0x2d
 80176ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176b0:	e7a1      	b.n	80175f6 <_printf_float+0xa6>
 80176b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80176b6:	f000 8177 	beq.w	80179a8 <_printf_float+0x458>
 80176ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80176be:	d1bb      	bne.n	8017638 <_printf_float+0xe8>
 80176c0:	2900      	cmp	r1, #0
 80176c2:	d1b9      	bne.n	8017638 <_printf_float+0xe8>
 80176c4:	2301      	movs	r3, #1
 80176c6:	e7b6      	b.n	8017636 <_printf_float+0xe6>
 80176c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80176cc:	d119      	bne.n	8017702 <_printf_float+0x1b2>
 80176ce:	2900      	cmp	r1, #0
 80176d0:	6863      	ldr	r3, [r4, #4]
 80176d2:	dd0c      	ble.n	80176ee <_printf_float+0x19e>
 80176d4:	6121      	str	r1, [r4, #16]
 80176d6:	b913      	cbnz	r3, 80176de <_printf_float+0x18e>
 80176d8:	6822      	ldr	r2, [r4, #0]
 80176da:	07d2      	lsls	r2, r2, #31
 80176dc:	d502      	bpl.n	80176e4 <_printf_float+0x194>
 80176de:	3301      	adds	r3, #1
 80176e0:	440b      	add	r3, r1
 80176e2:	6123      	str	r3, [r4, #16]
 80176e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80176e8:	f04f 0900 	mov.w	r9, #0
 80176ec:	e7d9      	b.n	80176a2 <_printf_float+0x152>
 80176ee:	b913      	cbnz	r3, 80176f6 <_printf_float+0x1a6>
 80176f0:	6822      	ldr	r2, [r4, #0]
 80176f2:	07d0      	lsls	r0, r2, #31
 80176f4:	d501      	bpl.n	80176fa <_printf_float+0x1aa>
 80176f6:	3302      	adds	r3, #2
 80176f8:	e7f3      	b.n	80176e2 <_printf_float+0x192>
 80176fa:	2301      	movs	r3, #1
 80176fc:	e7f1      	b.n	80176e2 <_printf_float+0x192>
 80176fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8017702:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017706:	4293      	cmp	r3, r2
 8017708:	db05      	blt.n	8017716 <_printf_float+0x1c6>
 801770a:	6822      	ldr	r2, [r4, #0]
 801770c:	6123      	str	r3, [r4, #16]
 801770e:	07d1      	lsls	r1, r2, #31
 8017710:	d5e8      	bpl.n	80176e4 <_printf_float+0x194>
 8017712:	3301      	adds	r3, #1
 8017714:	e7e5      	b.n	80176e2 <_printf_float+0x192>
 8017716:	2b00      	cmp	r3, #0
 8017718:	bfd4      	ite	le
 801771a:	f1c3 0302 	rsble	r3, r3, #2
 801771e:	2301      	movgt	r3, #1
 8017720:	4413      	add	r3, r2
 8017722:	e7de      	b.n	80176e2 <_printf_float+0x192>
 8017724:	6823      	ldr	r3, [r4, #0]
 8017726:	055a      	lsls	r2, r3, #21
 8017728:	d407      	bmi.n	801773a <_printf_float+0x1ea>
 801772a:	6923      	ldr	r3, [r4, #16]
 801772c:	4642      	mov	r2, r8
 801772e:	4631      	mov	r1, r6
 8017730:	4628      	mov	r0, r5
 8017732:	47b8      	blx	r7
 8017734:	3001      	adds	r0, #1
 8017736:	d12b      	bne.n	8017790 <_printf_float+0x240>
 8017738:	e767      	b.n	801760a <_printf_float+0xba>
 801773a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801773e:	f240 80dc 	bls.w	80178fa <_printf_float+0x3aa>
 8017742:	2200      	movs	r2, #0
 8017744:	2300      	movs	r3, #0
 8017746:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801774a:	f7e9 f9cd 	bl	8000ae8 <__aeabi_dcmpeq>
 801774e:	2800      	cmp	r0, #0
 8017750:	d033      	beq.n	80177ba <_printf_float+0x26a>
 8017752:	2301      	movs	r3, #1
 8017754:	4a41      	ldr	r2, [pc, #260]	; (801785c <_printf_float+0x30c>)
 8017756:	4631      	mov	r1, r6
 8017758:	4628      	mov	r0, r5
 801775a:	47b8      	blx	r7
 801775c:	3001      	adds	r0, #1
 801775e:	f43f af54 	beq.w	801760a <_printf_float+0xba>
 8017762:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017766:	429a      	cmp	r2, r3
 8017768:	db02      	blt.n	8017770 <_printf_float+0x220>
 801776a:	6823      	ldr	r3, [r4, #0]
 801776c:	07d8      	lsls	r0, r3, #31
 801776e:	d50f      	bpl.n	8017790 <_printf_float+0x240>
 8017770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017774:	4631      	mov	r1, r6
 8017776:	4628      	mov	r0, r5
 8017778:	47b8      	blx	r7
 801777a:	3001      	adds	r0, #1
 801777c:	f43f af45 	beq.w	801760a <_printf_float+0xba>
 8017780:	f04f 0800 	mov.w	r8, #0
 8017784:	f104 091a 	add.w	r9, r4, #26
 8017788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801778a:	3b01      	subs	r3, #1
 801778c:	4543      	cmp	r3, r8
 801778e:	dc09      	bgt.n	80177a4 <_printf_float+0x254>
 8017790:	6823      	ldr	r3, [r4, #0]
 8017792:	079b      	lsls	r3, r3, #30
 8017794:	f100 8103 	bmi.w	801799e <_printf_float+0x44e>
 8017798:	68e0      	ldr	r0, [r4, #12]
 801779a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801779c:	4298      	cmp	r0, r3
 801779e:	bfb8      	it	lt
 80177a0:	4618      	movlt	r0, r3
 80177a2:	e734      	b.n	801760e <_printf_float+0xbe>
 80177a4:	2301      	movs	r3, #1
 80177a6:	464a      	mov	r2, r9
 80177a8:	4631      	mov	r1, r6
 80177aa:	4628      	mov	r0, r5
 80177ac:	47b8      	blx	r7
 80177ae:	3001      	adds	r0, #1
 80177b0:	f43f af2b 	beq.w	801760a <_printf_float+0xba>
 80177b4:	f108 0801 	add.w	r8, r8, #1
 80177b8:	e7e6      	b.n	8017788 <_printf_float+0x238>
 80177ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177bc:	2b00      	cmp	r3, #0
 80177be:	dc2b      	bgt.n	8017818 <_printf_float+0x2c8>
 80177c0:	2301      	movs	r3, #1
 80177c2:	4a26      	ldr	r2, [pc, #152]	; (801785c <_printf_float+0x30c>)
 80177c4:	4631      	mov	r1, r6
 80177c6:	4628      	mov	r0, r5
 80177c8:	47b8      	blx	r7
 80177ca:	3001      	adds	r0, #1
 80177cc:	f43f af1d 	beq.w	801760a <_printf_float+0xba>
 80177d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177d2:	b923      	cbnz	r3, 80177de <_printf_float+0x28e>
 80177d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177d6:	b913      	cbnz	r3, 80177de <_printf_float+0x28e>
 80177d8:	6823      	ldr	r3, [r4, #0]
 80177da:	07d9      	lsls	r1, r3, #31
 80177dc:	d5d8      	bpl.n	8017790 <_printf_float+0x240>
 80177de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80177e2:	4631      	mov	r1, r6
 80177e4:	4628      	mov	r0, r5
 80177e6:	47b8      	blx	r7
 80177e8:	3001      	adds	r0, #1
 80177ea:	f43f af0e 	beq.w	801760a <_printf_float+0xba>
 80177ee:	f04f 0900 	mov.w	r9, #0
 80177f2:	f104 0a1a 	add.w	sl, r4, #26
 80177f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177f8:	425b      	negs	r3, r3
 80177fa:	454b      	cmp	r3, r9
 80177fc:	dc01      	bgt.n	8017802 <_printf_float+0x2b2>
 80177fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017800:	e794      	b.n	801772c <_printf_float+0x1dc>
 8017802:	2301      	movs	r3, #1
 8017804:	4652      	mov	r2, sl
 8017806:	4631      	mov	r1, r6
 8017808:	4628      	mov	r0, r5
 801780a:	47b8      	blx	r7
 801780c:	3001      	adds	r0, #1
 801780e:	f43f aefc 	beq.w	801760a <_printf_float+0xba>
 8017812:	f109 0901 	add.w	r9, r9, #1
 8017816:	e7ee      	b.n	80177f6 <_printf_float+0x2a6>
 8017818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801781a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801781c:	429a      	cmp	r2, r3
 801781e:	bfa8      	it	ge
 8017820:	461a      	movge	r2, r3
 8017822:	2a00      	cmp	r2, #0
 8017824:	4691      	mov	r9, r2
 8017826:	dd07      	ble.n	8017838 <_printf_float+0x2e8>
 8017828:	4613      	mov	r3, r2
 801782a:	4631      	mov	r1, r6
 801782c:	4642      	mov	r2, r8
 801782e:	4628      	mov	r0, r5
 8017830:	47b8      	blx	r7
 8017832:	3001      	adds	r0, #1
 8017834:	f43f aee9 	beq.w	801760a <_printf_float+0xba>
 8017838:	f104 031a 	add.w	r3, r4, #26
 801783c:	f04f 0b00 	mov.w	fp, #0
 8017840:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017844:	9306      	str	r3, [sp, #24]
 8017846:	e015      	b.n	8017874 <_printf_float+0x324>
 8017848:	7fefffff 	.word	0x7fefffff
 801784c:	0801e434 	.word	0x0801e434
 8017850:	0801e430 	.word	0x0801e430
 8017854:	0801e43c 	.word	0x0801e43c
 8017858:	0801e438 	.word	0x0801e438
 801785c:	0801e440 	.word	0x0801e440
 8017860:	2301      	movs	r3, #1
 8017862:	9a06      	ldr	r2, [sp, #24]
 8017864:	4631      	mov	r1, r6
 8017866:	4628      	mov	r0, r5
 8017868:	47b8      	blx	r7
 801786a:	3001      	adds	r0, #1
 801786c:	f43f aecd 	beq.w	801760a <_printf_float+0xba>
 8017870:	f10b 0b01 	add.w	fp, fp, #1
 8017874:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8017878:	ebaa 0309 	sub.w	r3, sl, r9
 801787c:	455b      	cmp	r3, fp
 801787e:	dcef      	bgt.n	8017860 <_printf_float+0x310>
 8017880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017884:	429a      	cmp	r2, r3
 8017886:	44d0      	add	r8, sl
 8017888:	db15      	blt.n	80178b6 <_printf_float+0x366>
 801788a:	6823      	ldr	r3, [r4, #0]
 801788c:	07da      	lsls	r2, r3, #31
 801788e:	d412      	bmi.n	80178b6 <_printf_float+0x366>
 8017890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017894:	eba3 020a 	sub.w	r2, r3, sl
 8017898:	eba3 0a01 	sub.w	sl, r3, r1
 801789c:	4592      	cmp	sl, r2
 801789e:	bfa8      	it	ge
 80178a0:	4692      	movge	sl, r2
 80178a2:	f1ba 0f00 	cmp.w	sl, #0
 80178a6:	dc0e      	bgt.n	80178c6 <_printf_float+0x376>
 80178a8:	f04f 0800 	mov.w	r8, #0
 80178ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80178b0:	f104 091a 	add.w	r9, r4, #26
 80178b4:	e019      	b.n	80178ea <_printf_float+0x39a>
 80178b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80178ba:	4631      	mov	r1, r6
 80178bc:	4628      	mov	r0, r5
 80178be:	47b8      	blx	r7
 80178c0:	3001      	adds	r0, #1
 80178c2:	d1e5      	bne.n	8017890 <_printf_float+0x340>
 80178c4:	e6a1      	b.n	801760a <_printf_float+0xba>
 80178c6:	4653      	mov	r3, sl
 80178c8:	4642      	mov	r2, r8
 80178ca:	4631      	mov	r1, r6
 80178cc:	4628      	mov	r0, r5
 80178ce:	47b8      	blx	r7
 80178d0:	3001      	adds	r0, #1
 80178d2:	d1e9      	bne.n	80178a8 <_printf_float+0x358>
 80178d4:	e699      	b.n	801760a <_printf_float+0xba>
 80178d6:	2301      	movs	r3, #1
 80178d8:	464a      	mov	r2, r9
 80178da:	4631      	mov	r1, r6
 80178dc:	4628      	mov	r0, r5
 80178de:	47b8      	blx	r7
 80178e0:	3001      	adds	r0, #1
 80178e2:	f43f ae92 	beq.w	801760a <_printf_float+0xba>
 80178e6:	f108 0801 	add.w	r8, r8, #1
 80178ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80178ee:	1a9b      	subs	r3, r3, r2
 80178f0:	eba3 030a 	sub.w	r3, r3, sl
 80178f4:	4543      	cmp	r3, r8
 80178f6:	dcee      	bgt.n	80178d6 <_printf_float+0x386>
 80178f8:	e74a      	b.n	8017790 <_printf_float+0x240>
 80178fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80178fc:	2a01      	cmp	r2, #1
 80178fe:	dc01      	bgt.n	8017904 <_printf_float+0x3b4>
 8017900:	07db      	lsls	r3, r3, #31
 8017902:	d53a      	bpl.n	801797a <_printf_float+0x42a>
 8017904:	2301      	movs	r3, #1
 8017906:	4642      	mov	r2, r8
 8017908:	4631      	mov	r1, r6
 801790a:	4628      	mov	r0, r5
 801790c:	47b8      	blx	r7
 801790e:	3001      	adds	r0, #1
 8017910:	f43f ae7b 	beq.w	801760a <_printf_float+0xba>
 8017914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017918:	4631      	mov	r1, r6
 801791a:	4628      	mov	r0, r5
 801791c:	47b8      	blx	r7
 801791e:	3001      	adds	r0, #1
 8017920:	f108 0801 	add.w	r8, r8, #1
 8017924:	f43f ae71 	beq.w	801760a <_printf_float+0xba>
 8017928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801792a:	2200      	movs	r2, #0
 801792c:	f103 3aff 	add.w	sl, r3, #4294967295
 8017930:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017934:	2300      	movs	r3, #0
 8017936:	f7e9 f8d7 	bl	8000ae8 <__aeabi_dcmpeq>
 801793a:	b9c8      	cbnz	r0, 8017970 <_printf_float+0x420>
 801793c:	4653      	mov	r3, sl
 801793e:	4642      	mov	r2, r8
 8017940:	4631      	mov	r1, r6
 8017942:	4628      	mov	r0, r5
 8017944:	47b8      	blx	r7
 8017946:	3001      	adds	r0, #1
 8017948:	d10e      	bne.n	8017968 <_printf_float+0x418>
 801794a:	e65e      	b.n	801760a <_printf_float+0xba>
 801794c:	2301      	movs	r3, #1
 801794e:	4652      	mov	r2, sl
 8017950:	4631      	mov	r1, r6
 8017952:	4628      	mov	r0, r5
 8017954:	47b8      	blx	r7
 8017956:	3001      	adds	r0, #1
 8017958:	f43f ae57 	beq.w	801760a <_printf_float+0xba>
 801795c:	f108 0801 	add.w	r8, r8, #1
 8017960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017962:	3b01      	subs	r3, #1
 8017964:	4543      	cmp	r3, r8
 8017966:	dcf1      	bgt.n	801794c <_printf_float+0x3fc>
 8017968:	464b      	mov	r3, r9
 801796a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801796e:	e6de      	b.n	801772e <_printf_float+0x1de>
 8017970:	f04f 0800 	mov.w	r8, #0
 8017974:	f104 0a1a 	add.w	sl, r4, #26
 8017978:	e7f2      	b.n	8017960 <_printf_float+0x410>
 801797a:	2301      	movs	r3, #1
 801797c:	e7df      	b.n	801793e <_printf_float+0x3ee>
 801797e:	2301      	movs	r3, #1
 8017980:	464a      	mov	r2, r9
 8017982:	4631      	mov	r1, r6
 8017984:	4628      	mov	r0, r5
 8017986:	47b8      	blx	r7
 8017988:	3001      	adds	r0, #1
 801798a:	f43f ae3e 	beq.w	801760a <_printf_float+0xba>
 801798e:	f108 0801 	add.w	r8, r8, #1
 8017992:	68e3      	ldr	r3, [r4, #12]
 8017994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017996:	1a9b      	subs	r3, r3, r2
 8017998:	4543      	cmp	r3, r8
 801799a:	dcf0      	bgt.n	801797e <_printf_float+0x42e>
 801799c:	e6fc      	b.n	8017798 <_printf_float+0x248>
 801799e:	f04f 0800 	mov.w	r8, #0
 80179a2:	f104 0919 	add.w	r9, r4, #25
 80179a6:	e7f4      	b.n	8017992 <_printf_float+0x442>
 80179a8:	2900      	cmp	r1, #0
 80179aa:	f43f ae8b 	beq.w	80176c4 <_printf_float+0x174>
 80179ae:	2300      	movs	r3, #0
 80179b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80179b4:	ab09      	add	r3, sp, #36	; 0x24
 80179b6:	9300      	str	r3, [sp, #0]
 80179b8:	ec49 8b10 	vmov	d0, r8, r9
 80179bc:	6022      	str	r2, [r4, #0]
 80179be:	f8cd a004 	str.w	sl, [sp, #4]
 80179c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80179c6:	4628      	mov	r0, r5
 80179c8:	f7ff fd2e 	bl	8017428 <__cvt>
 80179cc:	4680      	mov	r8, r0
 80179ce:	e648      	b.n	8017662 <_printf_float+0x112>

080179d0 <_printf_common>:
 80179d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179d4:	4691      	mov	r9, r2
 80179d6:	461f      	mov	r7, r3
 80179d8:	688a      	ldr	r2, [r1, #8]
 80179da:	690b      	ldr	r3, [r1, #16]
 80179dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80179e0:	4293      	cmp	r3, r2
 80179e2:	bfb8      	it	lt
 80179e4:	4613      	movlt	r3, r2
 80179e6:	f8c9 3000 	str.w	r3, [r9]
 80179ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80179ee:	4606      	mov	r6, r0
 80179f0:	460c      	mov	r4, r1
 80179f2:	b112      	cbz	r2, 80179fa <_printf_common+0x2a>
 80179f4:	3301      	adds	r3, #1
 80179f6:	f8c9 3000 	str.w	r3, [r9]
 80179fa:	6823      	ldr	r3, [r4, #0]
 80179fc:	0699      	lsls	r1, r3, #26
 80179fe:	bf42      	ittt	mi
 8017a00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017a04:	3302      	addmi	r3, #2
 8017a06:	f8c9 3000 	strmi.w	r3, [r9]
 8017a0a:	6825      	ldr	r5, [r4, #0]
 8017a0c:	f015 0506 	ands.w	r5, r5, #6
 8017a10:	d107      	bne.n	8017a22 <_printf_common+0x52>
 8017a12:	f104 0a19 	add.w	sl, r4, #25
 8017a16:	68e3      	ldr	r3, [r4, #12]
 8017a18:	f8d9 2000 	ldr.w	r2, [r9]
 8017a1c:	1a9b      	subs	r3, r3, r2
 8017a1e:	42ab      	cmp	r3, r5
 8017a20:	dc28      	bgt.n	8017a74 <_printf_common+0xa4>
 8017a22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017a26:	6822      	ldr	r2, [r4, #0]
 8017a28:	3300      	adds	r3, #0
 8017a2a:	bf18      	it	ne
 8017a2c:	2301      	movne	r3, #1
 8017a2e:	0692      	lsls	r2, r2, #26
 8017a30:	d42d      	bmi.n	8017a8e <_printf_common+0xbe>
 8017a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017a36:	4639      	mov	r1, r7
 8017a38:	4630      	mov	r0, r6
 8017a3a:	47c0      	blx	r8
 8017a3c:	3001      	adds	r0, #1
 8017a3e:	d020      	beq.n	8017a82 <_printf_common+0xb2>
 8017a40:	6823      	ldr	r3, [r4, #0]
 8017a42:	68e5      	ldr	r5, [r4, #12]
 8017a44:	f8d9 2000 	ldr.w	r2, [r9]
 8017a48:	f003 0306 	and.w	r3, r3, #6
 8017a4c:	2b04      	cmp	r3, #4
 8017a4e:	bf08      	it	eq
 8017a50:	1aad      	subeq	r5, r5, r2
 8017a52:	68a3      	ldr	r3, [r4, #8]
 8017a54:	6922      	ldr	r2, [r4, #16]
 8017a56:	bf0c      	ite	eq
 8017a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a5c:	2500      	movne	r5, #0
 8017a5e:	4293      	cmp	r3, r2
 8017a60:	bfc4      	itt	gt
 8017a62:	1a9b      	subgt	r3, r3, r2
 8017a64:	18ed      	addgt	r5, r5, r3
 8017a66:	f04f 0900 	mov.w	r9, #0
 8017a6a:	341a      	adds	r4, #26
 8017a6c:	454d      	cmp	r5, r9
 8017a6e:	d11a      	bne.n	8017aa6 <_printf_common+0xd6>
 8017a70:	2000      	movs	r0, #0
 8017a72:	e008      	b.n	8017a86 <_printf_common+0xb6>
 8017a74:	2301      	movs	r3, #1
 8017a76:	4652      	mov	r2, sl
 8017a78:	4639      	mov	r1, r7
 8017a7a:	4630      	mov	r0, r6
 8017a7c:	47c0      	blx	r8
 8017a7e:	3001      	adds	r0, #1
 8017a80:	d103      	bne.n	8017a8a <_printf_common+0xba>
 8017a82:	f04f 30ff 	mov.w	r0, #4294967295
 8017a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a8a:	3501      	adds	r5, #1
 8017a8c:	e7c3      	b.n	8017a16 <_printf_common+0x46>
 8017a8e:	18e1      	adds	r1, r4, r3
 8017a90:	1c5a      	adds	r2, r3, #1
 8017a92:	2030      	movs	r0, #48	; 0x30
 8017a94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017a98:	4422      	add	r2, r4
 8017a9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017a9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017aa2:	3302      	adds	r3, #2
 8017aa4:	e7c5      	b.n	8017a32 <_printf_common+0x62>
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	4622      	mov	r2, r4
 8017aaa:	4639      	mov	r1, r7
 8017aac:	4630      	mov	r0, r6
 8017aae:	47c0      	blx	r8
 8017ab0:	3001      	adds	r0, #1
 8017ab2:	d0e6      	beq.n	8017a82 <_printf_common+0xb2>
 8017ab4:	f109 0901 	add.w	r9, r9, #1
 8017ab8:	e7d8      	b.n	8017a6c <_printf_common+0x9c>
	...

08017abc <_printf_i>:
 8017abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ac0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017ac4:	460c      	mov	r4, r1
 8017ac6:	7e09      	ldrb	r1, [r1, #24]
 8017ac8:	b085      	sub	sp, #20
 8017aca:	296e      	cmp	r1, #110	; 0x6e
 8017acc:	4617      	mov	r7, r2
 8017ace:	4606      	mov	r6, r0
 8017ad0:	4698      	mov	r8, r3
 8017ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ad4:	f000 80b3 	beq.w	8017c3e <_printf_i+0x182>
 8017ad8:	d822      	bhi.n	8017b20 <_printf_i+0x64>
 8017ada:	2963      	cmp	r1, #99	; 0x63
 8017adc:	d036      	beq.n	8017b4c <_printf_i+0x90>
 8017ade:	d80a      	bhi.n	8017af6 <_printf_i+0x3a>
 8017ae0:	2900      	cmp	r1, #0
 8017ae2:	f000 80b9 	beq.w	8017c58 <_printf_i+0x19c>
 8017ae6:	2958      	cmp	r1, #88	; 0x58
 8017ae8:	f000 8083 	beq.w	8017bf2 <_printf_i+0x136>
 8017aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017af0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017af4:	e032      	b.n	8017b5c <_printf_i+0xa0>
 8017af6:	2964      	cmp	r1, #100	; 0x64
 8017af8:	d001      	beq.n	8017afe <_printf_i+0x42>
 8017afa:	2969      	cmp	r1, #105	; 0x69
 8017afc:	d1f6      	bne.n	8017aec <_printf_i+0x30>
 8017afe:	6820      	ldr	r0, [r4, #0]
 8017b00:	6813      	ldr	r3, [r2, #0]
 8017b02:	0605      	lsls	r5, r0, #24
 8017b04:	f103 0104 	add.w	r1, r3, #4
 8017b08:	d52a      	bpl.n	8017b60 <_printf_i+0xa4>
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	6011      	str	r1, [r2, #0]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	da03      	bge.n	8017b1a <_printf_i+0x5e>
 8017b12:	222d      	movs	r2, #45	; 0x2d
 8017b14:	425b      	negs	r3, r3
 8017b16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017b1a:	486f      	ldr	r0, [pc, #444]	; (8017cd8 <_printf_i+0x21c>)
 8017b1c:	220a      	movs	r2, #10
 8017b1e:	e039      	b.n	8017b94 <_printf_i+0xd8>
 8017b20:	2973      	cmp	r1, #115	; 0x73
 8017b22:	f000 809d 	beq.w	8017c60 <_printf_i+0x1a4>
 8017b26:	d808      	bhi.n	8017b3a <_printf_i+0x7e>
 8017b28:	296f      	cmp	r1, #111	; 0x6f
 8017b2a:	d020      	beq.n	8017b6e <_printf_i+0xb2>
 8017b2c:	2970      	cmp	r1, #112	; 0x70
 8017b2e:	d1dd      	bne.n	8017aec <_printf_i+0x30>
 8017b30:	6823      	ldr	r3, [r4, #0]
 8017b32:	f043 0320 	orr.w	r3, r3, #32
 8017b36:	6023      	str	r3, [r4, #0]
 8017b38:	e003      	b.n	8017b42 <_printf_i+0x86>
 8017b3a:	2975      	cmp	r1, #117	; 0x75
 8017b3c:	d017      	beq.n	8017b6e <_printf_i+0xb2>
 8017b3e:	2978      	cmp	r1, #120	; 0x78
 8017b40:	d1d4      	bne.n	8017aec <_printf_i+0x30>
 8017b42:	2378      	movs	r3, #120	; 0x78
 8017b44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017b48:	4864      	ldr	r0, [pc, #400]	; (8017cdc <_printf_i+0x220>)
 8017b4a:	e055      	b.n	8017bf8 <_printf_i+0x13c>
 8017b4c:	6813      	ldr	r3, [r2, #0]
 8017b4e:	1d19      	adds	r1, r3, #4
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	6011      	str	r1, [r2, #0]
 8017b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017b5c:	2301      	movs	r3, #1
 8017b5e:	e08c      	b.n	8017c7a <_printf_i+0x1be>
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	6011      	str	r1, [r2, #0]
 8017b64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017b68:	bf18      	it	ne
 8017b6a:	b21b      	sxthne	r3, r3
 8017b6c:	e7cf      	b.n	8017b0e <_printf_i+0x52>
 8017b6e:	6813      	ldr	r3, [r2, #0]
 8017b70:	6825      	ldr	r5, [r4, #0]
 8017b72:	1d18      	adds	r0, r3, #4
 8017b74:	6010      	str	r0, [r2, #0]
 8017b76:	0628      	lsls	r0, r5, #24
 8017b78:	d501      	bpl.n	8017b7e <_printf_i+0xc2>
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	e002      	b.n	8017b84 <_printf_i+0xc8>
 8017b7e:	0668      	lsls	r0, r5, #25
 8017b80:	d5fb      	bpl.n	8017b7a <_printf_i+0xbe>
 8017b82:	881b      	ldrh	r3, [r3, #0]
 8017b84:	4854      	ldr	r0, [pc, #336]	; (8017cd8 <_printf_i+0x21c>)
 8017b86:	296f      	cmp	r1, #111	; 0x6f
 8017b88:	bf14      	ite	ne
 8017b8a:	220a      	movne	r2, #10
 8017b8c:	2208      	moveq	r2, #8
 8017b8e:	2100      	movs	r1, #0
 8017b90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017b94:	6865      	ldr	r5, [r4, #4]
 8017b96:	60a5      	str	r5, [r4, #8]
 8017b98:	2d00      	cmp	r5, #0
 8017b9a:	f2c0 8095 	blt.w	8017cc8 <_printf_i+0x20c>
 8017b9e:	6821      	ldr	r1, [r4, #0]
 8017ba0:	f021 0104 	bic.w	r1, r1, #4
 8017ba4:	6021      	str	r1, [r4, #0]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d13d      	bne.n	8017c26 <_printf_i+0x16a>
 8017baa:	2d00      	cmp	r5, #0
 8017bac:	f040 808e 	bne.w	8017ccc <_printf_i+0x210>
 8017bb0:	4665      	mov	r5, ip
 8017bb2:	2a08      	cmp	r2, #8
 8017bb4:	d10b      	bne.n	8017bce <_printf_i+0x112>
 8017bb6:	6823      	ldr	r3, [r4, #0]
 8017bb8:	07db      	lsls	r3, r3, #31
 8017bba:	d508      	bpl.n	8017bce <_printf_i+0x112>
 8017bbc:	6923      	ldr	r3, [r4, #16]
 8017bbe:	6862      	ldr	r2, [r4, #4]
 8017bc0:	429a      	cmp	r2, r3
 8017bc2:	bfde      	ittt	le
 8017bc4:	2330      	movle	r3, #48	; 0x30
 8017bc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017bca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017bce:	ebac 0305 	sub.w	r3, ip, r5
 8017bd2:	6123      	str	r3, [r4, #16]
 8017bd4:	f8cd 8000 	str.w	r8, [sp]
 8017bd8:	463b      	mov	r3, r7
 8017bda:	aa03      	add	r2, sp, #12
 8017bdc:	4621      	mov	r1, r4
 8017bde:	4630      	mov	r0, r6
 8017be0:	f7ff fef6 	bl	80179d0 <_printf_common>
 8017be4:	3001      	adds	r0, #1
 8017be6:	d14d      	bne.n	8017c84 <_printf_i+0x1c8>
 8017be8:	f04f 30ff 	mov.w	r0, #4294967295
 8017bec:	b005      	add	sp, #20
 8017bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bf2:	4839      	ldr	r0, [pc, #228]	; (8017cd8 <_printf_i+0x21c>)
 8017bf4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017bf8:	6813      	ldr	r3, [r2, #0]
 8017bfa:	6821      	ldr	r1, [r4, #0]
 8017bfc:	1d1d      	adds	r5, r3, #4
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	6015      	str	r5, [r2, #0]
 8017c02:	060a      	lsls	r2, r1, #24
 8017c04:	d50b      	bpl.n	8017c1e <_printf_i+0x162>
 8017c06:	07ca      	lsls	r2, r1, #31
 8017c08:	bf44      	itt	mi
 8017c0a:	f041 0120 	orrmi.w	r1, r1, #32
 8017c0e:	6021      	strmi	r1, [r4, #0]
 8017c10:	b91b      	cbnz	r3, 8017c1a <_printf_i+0x15e>
 8017c12:	6822      	ldr	r2, [r4, #0]
 8017c14:	f022 0220 	bic.w	r2, r2, #32
 8017c18:	6022      	str	r2, [r4, #0]
 8017c1a:	2210      	movs	r2, #16
 8017c1c:	e7b7      	b.n	8017b8e <_printf_i+0xd2>
 8017c1e:	064d      	lsls	r5, r1, #25
 8017c20:	bf48      	it	mi
 8017c22:	b29b      	uxthmi	r3, r3
 8017c24:	e7ef      	b.n	8017c06 <_printf_i+0x14a>
 8017c26:	4665      	mov	r5, ip
 8017c28:	fbb3 f1f2 	udiv	r1, r3, r2
 8017c2c:	fb02 3311 	mls	r3, r2, r1, r3
 8017c30:	5cc3      	ldrb	r3, [r0, r3]
 8017c32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017c36:	460b      	mov	r3, r1
 8017c38:	2900      	cmp	r1, #0
 8017c3a:	d1f5      	bne.n	8017c28 <_printf_i+0x16c>
 8017c3c:	e7b9      	b.n	8017bb2 <_printf_i+0xf6>
 8017c3e:	6813      	ldr	r3, [r2, #0]
 8017c40:	6825      	ldr	r5, [r4, #0]
 8017c42:	6961      	ldr	r1, [r4, #20]
 8017c44:	1d18      	adds	r0, r3, #4
 8017c46:	6010      	str	r0, [r2, #0]
 8017c48:	0628      	lsls	r0, r5, #24
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	d501      	bpl.n	8017c52 <_printf_i+0x196>
 8017c4e:	6019      	str	r1, [r3, #0]
 8017c50:	e002      	b.n	8017c58 <_printf_i+0x19c>
 8017c52:	066a      	lsls	r2, r5, #25
 8017c54:	d5fb      	bpl.n	8017c4e <_printf_i+0x192>
 8017c56:	8019      	strh	r1, [r3, #0]
 8017c58:	2300      	movs	r3, #0
 8017c5a:	6123      	str	r3, [r4, #16]
 8017c5c:	4665      	mov	r5, ip
 8017c5e:	e7b9      	b.n	8017bd4 <_printf_i+0x118>
 8017c60:	6813      	ldr	r3, [r2, #0]
 8017c62:	1d19      	adds	r1, r3, #4
 8017c64:	6011      	str	r1, [r2, #0]
 8017c66:	681d      	ldr	r5, [r3, #0]
 8017c68:	6862      	ldr	r2, [r4, #4]
 8017c6a:	2100      	movs	r1, #0
 8017c6c:	4628      	mov	r0, r5
 8017c6e:	f7e8 fac7 	bl	8000200 <memchr>
 8017c72:	b108      	cbz	r0, 8017c78 <_printf_i+0x1bc>
 8017c74:	1b40      	subs	r0, r0, r5
 8017c76:	6060      	str	r0, [r4, #4]
 8017c78:	6863      	ldr	r3, [r4, #4]
 8017c7a:	6123      	str	r3, [r4, #16]
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c82:	e7a7      	b.n	8017bd4 <_printf_i+0x118>
 8017c84:	6923      	ldr	r3, [r4, #16]
 8017c86:	462a      	mov	r2, r5
 8017c88:	4639      	mov	r1, r7
 8017c8a:	4630      	mov	r0, r6
 8017c8c:	47c0      	blx	r8
 8017c8e:	3001      	adds	r0, #1
 8017c90:	d0aa      	beq.n	8017be8 <_printf_i+0x12c>
 8017c92:	6823      	ldr	r3, [r4, #0]
 8017c94:	079b      	lsls	r3, r3, #30
 8017c96:	d413      	bmi.n	8017cc0 <_printf_i+0x204>
 8017c98:	68e0      	ldr	r0, [r4, #12]
 8017c9a:	9b03      	ldr	r3, [sp, #12]
 8017c9c:	4298      	cmp	r0, r3
 8017c9e:	bfb8      	it	lt
 8017ca0:	4618      	movlt	r0, r3
 8017ca2:	e7a3      	b.n	8017bec <_printf_i+0x130>
 8017ca4:	2301      	movs	r3, #1
 8017ca6:	464a      	mov	r2, r9
 8017ca8:	4639      	mov	r1, r7
 8017caa:	4630      	mov	r0, r6
 8017cac:	47c0      	blx	r8
 8017cae:	3001      	adds	r0, #1
 8017cb0:	d09a      	beq.n	8017be8 <_printf_i+0x12c>
 8017cb2:	3501      	adds	r5, #1
 8017cb4:	68e3      	ldr	r3, [r4, #12]
 8017cb6:	9a03      	ldr	r2, [sp, #12]
 8017cb8:	1a9b      	subs	r3, r3, r2
 8017cba:	42ab      	cmp	r3, r5
 8017cbc:	dcf2      	bgt.n	8017ca4 <_printf_i+0x1e8>
 8017cbe:	e7eb      	b.n	8017c98 <_printf_i+0x1dc>
 8017cc0:	2500      	movs	r5, #0
 8017cc2:	f104 0919 	add.w	r9, r4, #25
 8017cc6:	e7f5      	b.n	8017cb4 <_printf_i+0x1f8>
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d1ac      	bne.n	8017c26 <_printf_i+0x16a>
 8017ccc:	7803      	ldrb	r3, [r0, #0]
 8017cce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017cd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017cd6:	e76c      	b.n	8017bb2 <_printf_i+0xf6>
 8017cd8:	0801e442 	.word	0x0801e442
 8017cdc:	0801e453 	.word	0x0801e453

08017ce0 <_scanf_float>:
 8017ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ce4:	469a      	mov	sl, r3
 8017ce6:	688b      	ldr	r3, [r1, #8]
 8017ce8:	4616      	mov	r6, r2
 8017cea:	1e5a      	subs	r2, r3, #1
 8017cec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017cf0:	b087      	sub	sp, #28
 8017cf2:	bf83      	ittte	hi
 8017cf4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8017cf8:	189b      	addhi	r3, r3, r2
 8017cfa:	9301      	strhi	r3, [sp, #4]
 8017cfc:	2300      	movls	r3, #0
 8017cfe:	bf86      	itte	hi
 8017d00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017d04:	608b      	strhi	r3, [r1, #8]
 8017d06:	9301      	strls	r3, [sp, #4]
 8017d08:	680b      	ldr	r3, [r1, #0]
 8017d0a:	4688      	mov	r8, r1
 8017d0c:	f04f 0b00 	mov.w	fp, #0
 8017d10:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017d14:	f848 3b1c 	str.w	r3, [r8], #28
 8017d18:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8017d1c:	4607      	mov	r7, r0
 8017d1e:	460c      	mov	r4, r1
 8017d20:	4645      	mov	r5, r8
 8017d22:	465a      	mov	r2, fp
 8017d24:	46d9      	mov	r9, fp
 8017d26:	f8cd b008 	str.w	fp, [sp, #8]
 8017d2a:	68a1      	ldr	r1, [r4, #8]
 8017d2c:	b181      	cbz	r1, 8017d50 <_scanf_float+0x70>
 8017d2e:	6833      	ldr	r3, [r6, #0]
 8017d30:	781b      	ldrb	r3, [r3, #0]
 8017d32:	2b49      	cmp	r3, #73	; 0x49
 8017d34:	d071      	beq.n	8017e1a <_scanf_float+0x13a>
 8017d36:	d84d      	bhi.n	8017dd4 <_scanf_float+0xf4>
 8017d38:	2b39      	cmp	r3, #57	; 0x39
 8017d3a:	d840      	bhi.n	8017dbe <_scanf_float+0xde>
 8017d3c:	2b31      	cmp	r3, #49	; 0x31
 8017d3e:	f080 8088 	bcs.w	8017e52 <_scanf_float+0x172>
 8017d42:	2b2d      	cmp	r3, #45	; 0x2d
 8017d44:	f000 8090 	beq.w	8017e68 <_scanf_float+0x188>
 8017d48:	d815      	bhi.n	8017d76 <_scanf_float+0x96>
 8017d4a:	2b2b      	cmp	r3, #43	; 0x2b
 8017d4c:	f000 808c 	beq.w	8017e68 <_scanf_float+0x188>
 8017d50:	f1b9 0f00 	cmp.w	r9, #0
 8017d54:	d003      	beq.n	8017d5e <_scanf_float+0x7e>
 8017d56:	6823      	ldr	r3, [r4, #0]
 8017d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017d5c:	6023      	str	r3, [r4, #0]
 8017d5e:	3a01      	subs	r2, #1
 8017d60:	2a01      	cmp	r2, #1
 8017d62:	f200 80ea 	bhi.w	8017f3a <_scanf_float+0x25a>
 8017d66:	4545      	cmp	r5, r8
 8017d68:	f200 80dc 	bhi.w	8017f24 <_scanf_float+0x244>
 8017d6c:	2601      	movs	r6, #1
 8017d6e:	4630      	mov	r0, r6
 8017d70:	b007      	add	sp, #28
 8017d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d76:	2b2e      	cmp	r3, #46	; 0x2e
 8017d78:	f000 809f 	beq.w	8017eba <_scanf_float+0x1da>
 8017d7c:	2b30      	cmp	r3, #48	; 0x30
 8017d7e:	d1e7      	bne.n	8017d50 <_scanf_float+0x70>
 8017d80:	6820      	ldr	r0, [r4, #0]
 8017d82:	f410 7f80 	tst.w	r0, #256	; 0x100
 8017d86:	d064      	beq.n	8017e52 <_scanf_float+0x172>
 8017d88:	9b01      	ldr	r3, [sp, #4]
 8017d8a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8017d8e:	6020      	str	r0, [r4, #0]
 8017d90:	f109 0901 	add.w	r9, r9, #1
 8017d94:	b11b      	cbz	r3, 8017d9e <_scanf_float+0xbe>
 8017d96:	3b01      	subs	r3, #1
 8017d98:	3101      	adds	r1, #1
 8017d9a:	9301      	str	r3, [sp, #4]
 8017d9c:	60a1      	str	r1, [r4, #8]
 8017d9e:	68a3      	ldr	r3, [r4, #8]
 8017da0:	3b01      	subs	r3, #1
 8017da2:	60a3      	str	r3, [r4, #8]
 8017da4:	6923      	ldr	r3, [r4, #16]
 8017da6:	3301      	adds	r3, #1
 8017da8:	6123      	str	r3, [r4, #16]
 8017daa:	6873      	ldr	r3, [r6, #4]
 8017dac:	3b01      	subs	r3, #1
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	6073      	str	r3, [r6, #4]
 8017db2:	f340 80ac 	ble.w	8017f0e <_scanf_float+0x22e>
 8017db6:	6833      	ldr	r3, [r6, #0]
 8017db8:	3301      	adds	r3, #1
 8017dba:	6033      	str	r3, [r6, #0]
 8017dbc:	e7b5      	b.n	8017d2a <_scanf_float+0x4a>
 8017dbe:	2b45      	cmp	r3, #69	; 0x45
 8017dc0:	f000 8085 	beq.w	8017ece <_scanf_float+0x1ee>
 8017dc4:	2b46      	cmp	r3, #70	; 0x46
 8017dc6:	d06a      	beq.n	8017e9e <_scanf_float+0x1be>
 8017dc8:	2b41      	cmp	r3, #65	; 0x41
 8017dca:	d1c1      	bne.n	8017d50 <_scanf_float+0x70>
 8017dcc:	2a01      	cmp	r2, #1
 8017dce:	d1bf      	bne.n	8017d50 <_scanf_float+0x70>
 8017dd0:	2202      	movs	r2, #2
 8017dd2:	e046      	b.n	8017e62 <_scanf_float+0x182>
 8017dd4:	2b65      	cmp	r3, #101	; 0x65
 8017dd6:	d07a      	beq.n	8017ece <_scanf_float+0x1ee>
 8017dd8:	d818      	bhi.n	8017e0c <_scanf_float+0x12c>
 8017dda:	2b54      	cmp	r3, #84	; 0x54
 8017ddc:	d066      	beq.n	8017eac <_scanf_float+0x1cc>
 8017dde:	d811      	bhi.n	8017e04 <_scanf_float+0x124>
 8017de0:	2b4e      	cmp	r3, #78	; 0x4e
 8017de2:	d1b5      	bne.n	8017d50 <_scanf_float+0x70>
 8017de4:	2a00      	cmp	r2, #0
 8017de6:	d146      	bne.n	8017e76 <_scanf_float+0x196>
 8017de8:	f1b9 0f00 	cmp.w	r9, #0
 8017dec:	d145      	bne.n	8017e7a <_scanf_float+0x19a>
 8017dee:	6821      	ldr	r1, [r4, #0]
 8017df0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8017df4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8017df8:	d13f      	bne.n	8017e7a <_scanf_float+0x19a>
 8017dfa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017dfe:	6021      	str	r1, [r4, #0]
 8017e00:	2201      	movs	r2, #1
 8017e02:	e02e      	b.n	8017e62 <_scanf_float+0x182>
 8017e04:	2b59      	cmp	r3, #89	; 0x59
 8017e06:	d01e      	beq.n	8017e46 <_scanf_float+0x166>
 8017e08:	2b61      	cmp	r3, #97	; 0x61
 8017e0a:	e7de      	b.n	8017dca <_scanf_float+0xea>
 8017e0c:	2b6e      	cmp	r3, #110	; 0x6e
 8017e0e:	d0e9      	beq.n	8017de4 <_scanf_float+0x104>
 8017e10:	d815      	bhi.n	8017e3e <_scanf_float+0x15e>
 8017e12:	2b66      	cmp	r3, #102	; 0x66
 8017e14:	d043      	beq.n	8017e9e <_scanf_float+0x1be>
 8017e16:	2b69      	cmp	r3, #105	; 0x69
 8017e18:	d19a      	bne.n	8017d50 <_scanf_float+0x70>
 8017e1a:	f1bb 0f00 	cmp.w	fp, #0
 8017e1e:	d138      	bne.n	8017e92 <_scanf_float+0x1b2>
 8017e20:	f1b9 0f00 	cmp.w	r9, #0
 8017e24:	d197      	bne.n	8017d56 <_scanf_float+0x76>
 8017e26:	6821      	ldr	r1, [r4, #0]
 8017e28:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8017e2c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8017e30:	d195      	bne.n	8017d5e <_scanf_float+0x7e>
 8017e32:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017e36:	6021      	str	r1, [r4, #0]
 8017e38:	f04f 0b01 	mov.w	fp, #1
 8017e3c:	e011      	b.n	8017e62 <_scanf_float+0x182>
 8017e3e:	2b74      	cmp	r3, #116	; 0x74
 8017e40:	d034      	beq.n	8017eac <_scanf_float+0x1cc>
 8017e42:	2b79      	cmp	r3, #121	; 0x79
 8017e44:	d184      	bne.n	8017d50 <_scanf_float+0x70>
 8017e46:	f1bb 0f07 	cmp.w	fp, #7
 8017e4a:	d181      	bne.n	8017d50 <_scanf_float+0x70>
 8017e4c:	f04f 0b08 	mov.w	fp, #8
 8017e50:	e007      	b.n	8017e62 <_scanf_float+0x182>
 8017e52:	eb12 0f0b 	cmn.w	r2, fp
 8017e56:	f47f af7b 	bne.w	8017d50 <_scanf_float+0x70>
 8017e5a:	6821      	ldr	r1, [r4, #0]
 8017e5c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8017e60:	6021      	str	r1, [r4, #0]
 8017e62:	702b      	strb	r3, [r5, #0]
 8017e64:	3501      	adds	r5, #1
 8017e66:	e79a      	b.n	8017d9e <_scanf_float+0xbe>
 8017e68:	6821      	ldr	r1, [r4, #0]
 8017e6a:	0608      	lsls	r0, r1, #24
 8017e6c:	f57f af70 	bpl.w	8017d50 <_scanf_float+0x70>
 8017e70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017e74:	e7f4      	b.n	8017e60 <_scanf_float+0x180>
 8017e76:	2a02      	cmp	r2, #2
 8017e78:	d047      	beq.n	8017f0a <_scanf_float+0x22a>
 8017e7a:	f1bb 0f01 	cmp.w	fp, #1
 8017e7e:	d003      	beq.n	8017e88 <_scanf_float+0x1a8>
 8017e80:	f1bb 0f04 	cmp.w	fp, #4
 8017e84:	f47f af64 	bne.w	8017d50 <_scanf_float+0x70>
 8017e88:	f10b 0b01 	add.w	fp, fp, #1
 8017e8c:	fa5f fb8b 	uxtb.w	fp, fp
 8017e90:	e7e7      	b.n	8017e62 <_scanf_float+0x182>
 8017e92:	f1bb 0f03 	cmp.w	fp, #3
 8017e96:	d0f7      	beq.n	8017e88 <_scanf_float+0x1a8>
 8017e98:	f1bb 0f05 	cmp.w	fp, #5
 8017e9c:	e7f2      	b.n	8017e84 <_scanf_float+0x1a4>
 8017e9e:	f1bb 0f02 	cmp.w	fp, #2
 8017ea2:	f47f af55 	bne.w	8017d50 <_scanf_float+0x70>
 8017ea6:	f04f 0b03 	mov.w	fp, #3
 8017eaa:	e7da      	b.n	8017e62 <_scanf_float+0x182>
 8017eac:	f1bb 0f06 	cmp.w	fp, #6
 8017eb0:	f47f af4e 	bne.w	8017d50 <_scanf_float+0x70>
 8017eb4:	f04f 0b07 	mov.w	fp, #7
 8017eb8:	e7d3      	b.n	8017e62 <_scanf_float+0x182>
 8017eba:	6821      	ldr	r1, [r4, #0]
 8017ebc:	0588      	lsls	r0, r1, #22
 8017ebe:	f57f af47 	bpl.w	8017d50 <_scanf_float+0x70>
 8017ec2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8017ec6:	6021      	str	r1, [r4, #0]
 8017ec8:	f8cd 9008 	str.w	r9, [sp, #8]
 8017ecc:	e7c9      	b.n	8017e62 <_scanf_float+0x182>
 8017ece:	6821      	ldr	r1, [r4, #0]
 8017ed0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8017ed4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8017ed8:	d006      	beq.n	8017ee8 <_scanf_float+0x208>
 8017eda:	0548      	lsls	r0, r1, #21
 8017edc:	f57f af38 	bpl.w	8017d50 <_scanf_float+0x70>
 8017ee0:	f1b9 0f00 	cmp.w	r9, #0
 8017ee4:	f43f af3b 	beq.w	8017d5e <_scanf_float+0x7e>
 8017ee8:	0588      	lsls	r0, r1, #22
 8017eea:	bf58      	it	pl
 8017eec:	9802      	ldrpl	r0, [sp, #8]
 8017eee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017ef2:	bf58      	it	pl
 8017ef4:	eba9 0000 	subpl.w	r0, r9, r0
 8017ef8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8017efc:	bf58      	it	pl
 8017efe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8017f02:	6021      	str	r1, [r4, #0]
 8017f04:	f04f 0900 	mov.w	r9, #0
 8017f08:	e7ab      	b.n	8017e62 <_scanf_float+0x182>
 8017f0a:	2203      	movs	r2, #3
 8017f0c:	e7a9      	b.n	8017e62 <_scanf_float+0x182>
 8017f0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017f12:	9205      	str	r2, [sp, #20]
 8017f14:	4631      	mov	r1, r6
 8017f16:	4638      	mov	r0, r7
 8017f18:	4798      	blx	r3
 8017f1a:	9a05      	ldr	r2, [sp, #20]
 8017f1c:	2800      	cmp	r0, #0
 8017f1e:	f43f af04 	beq.w	8017d2a <_scanf_float+0x4a>
 8017f22:	e715      	b.n	8017d50 <_scanf_float+0x70>
 8017f24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f28:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017f2c:	4632      	mov	r2, r6
 8017f2e:	4638      	mov	r0, r7
 8017f30:	4798      	blx	r3
 8017f32:	6923      	ldr	r3, [r4, #16]
 8017f34:	3b01      	subs	r3, #1
 8017f36:	6123      	str	r3, [r4, #16]
 8017f38:	e715      	b.n	8017d66 <_scanf_float+0x86>
 8017f3a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8017f3e:	2b06      	cmp	r3, #6
 8017f40:	d80a      	bhi.n	8017f58 <_scanf_float+0x278>
 8017f42:	f1bb 0f02 	cmp.w	fp, #2
 8017f46:	d968      	bls.n	801801a <_scanf_float+0x33a>
 8017f48:	f1ab 0b03 	sub.w	fp, fp, #3
 8017f4c:	fa5f fb8b 	uxtb.w	fp, fp
 8017f50:	eba5 0b0b 	sub.w	fp, r5, fp
 8017f54:	455d      	cmp	r5, fp
 8017f56:	d14b      	bne.n	8017ff0 <_scanf_float+0x310>
 8017f58:	6823      	ldr	r3, [r4, #0]
 8017f5a:	05da      	lsls	r2, r3, #23
 8017f5c:	d51f      	bpl.n	8017f9e <_scanf_float+0x2be>
 8017f5e:	055b      	lsls	r3, r3, #21
 8017f60:	d468      	bmi.n	8018034 <_scanf_float+0x354>
 8017f62:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017f66:	6923      	ldr	r3, [r4, #16]
 8017f68:	2965      	cmp	r1, #101	; 0x65
 8017f6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8017f6e:	f105 3bff 	add.w	fp, r5, #4294967295
 8017f72:	6123      	str	r3, [r4, #16]
 8017f74:	d00d      	beq.n	8017f92 <_scanf_float+0x2b2>
 8017f76:	2945      	cmp	r1, #69	; 0x45
 8017f78:	d00b      	beq.n	8017f92 <_scanf_float+0x2b2>
 8017f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f7e:	4632      	mov	r2, r6
 8017f80:	4638      	mov	r0, r7
 8017f82:	4798      	blx	r3
 8017f84:	6923      	ldr	r3, [r4, #16]
 8017f86:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8017f8a:	3b01      	subs	r3, #1
 8017f8c:	f1a5 0b02 	sub.w	fp, r5, #2
 8017f90:	6123      	str	r3, [r4, #16]
 8017f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f96:	4632      	mov	r2, r6
 8017f98:	4638      	mov	r0, r7
 8017f9a:	4798      	blx	r3
 8017f9c:	465d      	mov	r5, fp
 8017f9e:	6826      	ldr	r6, [r4, #0]
 8017fa0:	f016 0610 	ands.w	r6, r6, #16
 8017fa4:	d17a      	bne.n	801809c <_scanf_float+0x3bc>
 8017fa6:	702e      	strb	r6, [r5, #0]
 8017fa8:	6823      	ldr	r3, [r4, #0]
 8017faa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017fb2:	d142      	bne.n	801803a <_scanf_float+0x35a>
 8017fb4:	9b02      	ldr	r3, [sp, #8]
 8017fb6:	eba9 0303 	sub.w	r3, r9, r3
 8017fba:	425a      	negs	r2, r3
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d149      	bne.n	8018054 <_scanf_float+0x374>
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	4641      	mov	r1, r8
 8017fc4:	4638      	mov	r0, r7
 8017fc6:	f000 feff 	bl	8018dc8 <_strtod_r>
 8017fca:	6825      	ldr	r5, [r4, #0]
 8017fcc:	f8da 3000 	ldr.w	r3, [sl]
 8017fd0:	f015 0f02 	tst.w	r5, #2
 8017fd4:	f103 0204 	add.w	r2, r3, #4
 8017fd8:	ec59 8b10 	vmov	r8, r9, d0
 8017fdc:	f8ca 2000 	str.w	r2, [sl]
 8017fe0:	d043      	beq.n	801806a <_scanf_float+0x38a>
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	e9c3 8900 	strd	r8, r9, [r3]
 8017fe8:	68e3      	ldr	r3, [r4, #12]
 8017fea:	3301      	adds	r3, #1
 8017fec:	60e3      	str	r3, [r4, #12]
 8017fee:	e6be      	b.n	8017d6e <_scanf_float+0x8e>
 8017ff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017ff4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017ff8:	4632      	mov	r2, r6
 8017ffa:	4638      	mov	r0, r7
 8017ffc:	4798      	blx	r3
 8017ffe:	6923      	ldr	r3, [r4, #16]
 8018000:	3b01      	subs	r3, #1
 8018002:	6123      	str	r3, [r4, #16]
 8018004:	e7a6      	b.n	8017f54 <_scanf_float+0x274>
 8018006:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801800a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801800e:	4632      	mov	r2, r6
 8018010:	4638      	mov	r0, r7
 8018012:	4798      	blx	r3
 8018014:	6923      	ldr	r3, [r4, #16]
 8018016:	3b01      	subs	r3, #1
 8018018:	6123      	str	r3, [r4, #16]
 801801a:	4545      	cmp	r5, r8
 801801c:	d8f3      	bhi.n	8018006 <_scanf_float+0x326>
 801801e:	e6a5      	b.n	8017d6c <_scanf_float+0x8c>
 8018020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018024:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8018028:	4632      	mov	r2, r6
 801802a:	4638      	mov	r0, r7
 801802c:	4798      	blx	r3
 801802e:	6923      	ldr	r3, [r4, #16]
 8018030:	3b01      	subs	r3, #1
 8018032:	6123      	str	r3, [r4, #16]
 8018034:	4545      	cmp	r5, r8
 8018036:	d8f3      	bhi.n	8018020 <_scanf_float+0x340>
 8018038:	e698      	b.n	8017d6c <_scanf_float+0x8c>
 801803a:	9b03      	ldr	r3, [sp, #12]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d0bf      	beq.n	8017fc0 <_scanf_float+0x2e0>
 8018040:	9904      	ldr	r1, [sp, #16]
 8018042:	230a      	movs	r3, #10
 8018044:	4632      	mov	r2, r6
 8018046:	3101      	adds	r1, #1
 8018048:	4638      	mov	r0, r7
 801804a:	f000 ff5d 	bl	8018f08 <_strtol_r>
 801804e:	9b03      	ldr	r3, [sp, #12]
 8018050:	9d04      	ldr	r5, [sp, #16]
 8018052:	1ac2      	subs	r2, r0, r3
 8018054:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8018058:	429d      	cmp	r5, r3
 801805a:	bf28      	it	cs
 801805c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8018060:	490f      	ldr	r1, [pc, #60]	; (80180a0 <_scanf_float+0x3c0>)
 8018062:	4628      	mov	r0, r5
 8018064:	f000 f834 	bl	80180d0 <siprintf>
 8018068:	e7aa      	b.n	8017fc0 <_scanf_float+0x2e0>
 801806a:	f015 0504 	ands.w	r5, r5, #4
 801806e:	d1b8      	bne.n	8017fe2 <_scanf_float+0x302>
 8018070:	681f      	ldr	r7, [r3, #0]
 8018072:	ee10 2a10 	vmov	r2, s0
 8018076:	464b      	mov	r3, r9
 8018078:	ee10 0a10 	vmov	r0, s0
 801807c:	4649      	mov	r1, r9
 801807e:	f7e8 fd65 	bl	8000b4c <__aeabi_dcmpun>
 8018082:	b128      	cbz	r0, 8018090 <_scanf_float+0x3b0>
 8018084:	4628      	mov	r0, r5
 8018086:	f000 f81d 	bl	80180c4 <nanf>
 801808a:	ed87 0a00 	vstr	s0, [r7]
 801808e:	e7ab      	b.n	8017fe8 <_scanf_float+0x308>
 8018090:	4640      	mov	r0, r8
 8018092:	4649      	mov	r1, r9
 8018094:	f7e8 fdb8 	bl	8000c08 <__aeabi_d2f>
 8018098:	6038      	str	r0, [r7, #0]
 801809a:	e7a5      	b.n	8017fe8 <_scanf_float+0x308>
 801809c:	2600      	movs	r6, #0
 801809e:	e666      	b.n	8017d6e <_scanf_float+0x8e>
 80180a0:	0801e464 	.word	0x0801e464

080180a4 <_sbrk_r>:
 80180a4:	b538      	push	{r3, r4, r5, lr}
 80180a6:	4c06      	ldr	r4, [pc, #24]	; (80180c0 <_sbrk_r+0x1c>)
 80180a8:	2300      	movs	r3, #0
 80180aa:	4605      	mov	r5, r0
 80180ac:	4608      	mov	r0, r1
 80180ae:	6023      	str	r3, [r4, #0]
 80180b0:	f7fe fb04 	bl	80166bc <_sbrk>
 80180b4:	1c43      	adds	r3, r0, #1
 80180b6:	d102      	bne.n	80180be <_sbrk_r+0x1a>
 80180b8:	6823      	ldr	r3, [r4, #0]
 80180ba:	b103      	cbz	r3, 80180be <_sbrk_r+0x1a>
 80180bc:	602b      	str	r3, [r5, #0]
 80180be:	bd38      	pop	{r3, r4, r5, pc}
 80180c0:	2000a5b0 	.word	0x2000a5b0

080180c4 <nanf>:
 80180c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80180cc <nanf+0x8>
 80180c8:	4770      	bx	lr
 80180ca:	bf00      	nop
 80180cc:	7fc00000 	.word	0x7fc00000

080180d0 <siprintf>:
 80180d0:	b40e      	push	{r1, r2, r3}
 80180d2:	b500      	push	{lr}
 80180d4:	b09c      	sub	sp, #112	; 0x70
 80180d6:	ab1d      	add	r3, sp, #116	; 0x74
 80180d8:	9002      	str	r0, [sp, #8]
 80180da:	9006      	str	r0, [sp, #24]
 80180dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80180e0:	4809      	ldr	r0, [pc, #36]	; (8018108 <siprintf+0x38>)
 80180e2:	9107      	str	r1, [sp, #28]
 80180e4:	9104      	str	r1, [sp, #16]
 80180e6:	4909      	ldr	r1, [pc, #36]	; (801810c <siprintf+0x3c>)
 80180e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80180ec:	9105      	str	r1, [sp, #20]
 80180ee:	6800      	ldr	r0, [r0, #0]
 80180f0:	9301      	str	r3, [sp, #4]
 80180f2:	a902      	add	r1, sp, #8
 80180f4:	f002 fd4a 	bl	801ab8c <_svfiprintf_r>
 80180f8:	9b02      	ldr	r3, [sp, #8]
 80180fa:	2200      	movs	r2, #0
 80180fc:	701a      	strb	r2, [r3, #0]
 80180fe:	b01c      	add	sp, #112	; 0x70
 8018100:	f85d eb04 	ldr.w	lr, [sp], #4
 8018104:	b003      	add	sp, #12
 8018106:	4770      	bx	lr
 8018108:	200001d4 	.word	0x200001d4
 801810c:	ffff0208 	.word	0xffff0208

08018110 <strcat>:
 8018110:	b510      	push	{r4, lr}
 8018112:	4603      	mov	r3, r0
 8018114:	781a      	ldrb	r2, [r3, #0]
 8018116:	1c5c      	adds	r4, r3, #1
 8018118:	b93a      	cbnz	r2, 801812a <strcat+0x1a>
 801811a:	3b01      	subs	r3, #1
 801811c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018120:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018124:	2a00      	cmp	r2, #0
 8018126:	d1f9      	bne.n	801811c <strcat+0xc>
 8018128:	bd10      	pop	{r4, pc}
 801812a:	4623      	mov	r3, r4
 801812c:	e7f2      	b.n	8018114 <strcat+0x4>

0801812e <strchr>:
 801812e:	b2c9      	uxtb	r1, r1
 8018130:	4603      	mov	r3, r0
 8018132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018136:	b11a      	cbz	r2, 8018140 <strchr+0x12>
 8018138:	428a      	cmp	r2, r1
 801813a:	d1f9      	bne.n	8018130 <strchr+0x2>
 801813c:	4618      	mov	r0, r3
 801813e:	4770      	bx	lr
 8018140:	2900      	cmp	r1, #0
 8018142:	bf18      	it	ne
 8018144:	2300      	movne	r3, #0
 8018146:	e7f9      	b.n	801813c <strchr+0xe>

08018148 <strcpy>:
 8018148:	4603      	mov	r3, r0
 801814a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801814e:	f803 2b01 	strb.w	r2, [r3], #1
 8018152:	2a00      	cmp	r2, #0
 8018154:	d1f9      	bne.n	801814a <strcpy+0x2>
 8018156:	4770      	bx	lr

08018158 <strncmp>:
 8018158:	b510      	push	{r4, lr}
 801815a:	b16a      	cbz	r2, 8018178 <strncmp+0x20>
 801815c:	3901      	subs	r1, #1
 801815e:	1884      	adds	r4, r0, r2
 8018160:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018164:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018168:	4293      	cmp	r3, r2
 801816a:	d103      	bne.n	8018174 <strncmp+0x1c>
 801816c:	42a0      	cmp	r0, r4
 801816e:	d001      	beq.n	8018174 <strncmp+0x1c>
 8018170:	2b00      	cmp	r3, #0
 8018172:	d1f5      	bne.n	8018160 <strncmp+0x8>
 8018174:	1a98      	subs	r0, r3, r2
 8018176:	bd10      	pop	{r4, pc}
 8018178:	4610      	mov	r0, r2
 801817a:	e7fc      	b.n	8018176 <strncmp+0x1e>

0801817c <strncpy>:
 801817c:	b570      	push	{r4, r5, r6, lr}
 801817e:	3901      	subs	r1, #1
 8018180:	4604      	mov	r4, r0
 8018182:	b902      	cbnz	r2, 8018186 <strncpy+0xa>
 8018184:	bd70      	pop	{r4, r5, r6, pc}
 8018186:	4623      	mov	r3, r4
 8018188:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801818c:	f803 5b01 	strb.w	r5, [r3], #1
 8018190:	1e56      	subs	r6, r2, #1
 8018192:	b92d      	cbnz	r5, 80181a0 <strncpy+0x24>
 8018194:	4414      	add	r4, r2
 8018196:	42a3      	cmp	r3, r4
 8018198:	d0f4      	beq.n	8018184 <strncpy+0x8>
 801819a:	f803 5b01 	strb.w	r5, [r3], #1
 801819e:	e7fa      	b.n	8018196 <strncpy+0x1a>
 80181a0:	461c      	mov	r4, r3
 80181a2:	4632      	mov	r2, r6
 80181a4:	e7ed      	b.n	8018182 <strncpy+0x6>

080181a6 <sulp>:
 80181a6:	b570      	push	{r4, r5, r6, lr}
 80181a8:	4604      	mov	r4, r0
 80181aa:	460d      	mov	r5, r1
 80181ac:	ec45 4b10 	vmov	d0, r4, r5
 80181b0:	4616      	mov	r6, r2
 80181b2:	f002 fb4f 	bl	801a854 <__ulp>
 80181b6:	ec51 0b10 	vmov	r0, r1, d0
 80181ba:	b17e      	cbz	r6, 80181dc <sulp+0x36>
 80181bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80181c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	dd09      	ble.n	80181dc <sulp+0x36>
 80181c8:	051b      	lsls	r3, r3, #20
 80181ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80181ce:	2400      	movs	r4, #0
 80181d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80181d4:	4622      	mov	r2, r4
 80181d6:	462b      	mov	r3, r5
 80181d8:	f7e8 fa1e 	bl	8000618 <__aeabi_dmul>
 80181dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080181e0 <_strtod_l>:
 80181e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181e4:	461f      	mov	r7, r3
 80181e6:	b0a1      	sub	sp, #132	; 0x84
 80181e8:	2300      	movs	r3, #0
 80181ea:	4681      	mov	r9, r0
 80181ec:	4638      	mov	r0, r7
 80181ee:	460e      	mov	r6, r1
 80181f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80181f2:	931c      	str	r3, [sp, #112]	; 0x70
 80181f4:	f002 f83d 	bl	801a272 <__localeconv_l>
 80181f8:	4680      	mov	r8, r0
 80181fa:	6800      	ldr	r0, [r0, #0]
 80181fc:	f7e7 fff2 	bl	80001e4 <strlen>
 8018200:	f04f 0a00 	mov.w	sl, #0
 8018204:	4604      	mov	r4, r0
 8018206:	f04f 0b00 	mov.w	fp, #0
 801820a:	961b      	str	r6, [sp, #108]	; 0x6c
 801820c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801820e:	781a      	ldrb	r2, [r3, #0]
 8018210:	2a0d      	cmp	r2, #13
 8018212:	d832      	bhi.n	801827a <_strtod_l+0x9a>
 8018214:	2a09      	cmp	r2, #9
 8018216:	d236      	bcs.n	8018286 <_strtod_l+0xa6>
 8018218:	2a00      	cmp	r2, #0
 801821a:	d03e      	beq.n	801829a <_strtod_l+0xba>
 801821c:	2300      	movs	r3, #0
 801821e:	930d      	str	r3, [sp, #52]	; 0x34
 8018220:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8018222:	782b      	ldrb	r3, [r5, #0]
 8018224:	2b30      	cmp	r3, #48	; 0x30
 8018226:	f040 80ac 	bne.w	8018382 <_strtod_l+0x1a2>
 801822a:	786b      	ldrb	r3, [r5, #1]
 801822c:	2b58      	cmp	r3, #88	; 0x58
 801822e:	d001      	beq.n	8018234 <_strtod_l+0x54>
 8018230:	2b78      	cmp	r3, #120	; 0x78
 8018232:	d167      	bne.n	8018304 <_strtod_l+0x124>
 8018234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018236:	9301      	str	r3, [sp, #4]
 8018238:	ab1c      	add	r3, sp, #112	; 0x70
 801823a:	9300      	str	r3, [sp, #0]
 801823c:	9702      	str	r7, [sp, #8]
 801823e:	ab1d      	add	r3, sp, #116	; 0x74
 8018240:	4a88      	ldr	r2, [pc, #544]	; (8018464 <_strtod_l+0x284>)
 8018242:	a91b      	add	r1, sp, #108	; 0x6c
 8018244:	4648      	mov	r0, r9
 8018246:	f001 fd3a 	bl	8019cbe <__gethex>
 801824a:	f010 0407 	ands.w	r4, r0, #7
 801824e:	4606      	mov	r6, r0
 8018250:	d005      	beq.n	801825e <_strtod_l+0x7e>
 8018252:	2c06      	cmp	r4, #6
 8018254:	d12b      	bne.n	80182ae <_strtod_l+0xce>
 8018256:	3501      	adds	r5, #1
 8018258:	2300      	movs	r3, #0
 801825a:	951b      	str	r5, [sp, #108]	; 0x6c
 801825c:	930d      	str	r3, [sp, #52]	; 0x34
 801825e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018260:	2b00      	cmp	r3, #0
 8018262:	f040 859a 	bne.w	8018d9a <_strtod_l+0xbba>
 8018266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018268:	b1e3      	cbz	r3, 80182a4 <_strtod_l+0xc4>
 801826a:	4652      	mov	r2, sl
 801826c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8018270:	ec43 2b10 	vmov	d0, r2, r3
 8018274:	b021      	add	sp, #132	; 0x84
 8018276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801827a:	2a2b      	cmp	r2, #43	; 0x2b
 801827c:	d015      	beq.n	80182aa <_strtod_l+0xca>
 801827e:	2a2d      	cmp	r2, #45	; 0x2d
 8018280:	d004      	beq.n	801828c <_strtod_l+0xac>
 8018282:	2a20      	cmp	r2, #32
 8018284:	d1ca      	bne.n	801821c <_strtod_l+0x3c>
 8018286:	3301      	adds	r3, #1
 8018288:	931b      	str	r3, [sp, #108]	; 0x6c
 801828a:	e7bf      	b.n	801820c <_strtod_l+0x2c>
 801828c:	2201      	movs	r2, #1
 801828e:	920d      	str	r2, [sp, #52]	; 0x34
 8018290:	1c5a      	adds	r2, r3, #1
 8018292:	921b      	str	r2, [sp, #108]	; 0x6c
 8018294:	785b      	ldrb	r3, [r3, #1]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d1c2      	bne.n	8018220 <_strtod_l+0x40>
 801829a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801829c:	961b      	str	r6, [sp, #108]	; 0x6c
 801829e:	2b00      	cmp	r3, #0
 80182a0:	f040 8579 	bne.w	8018d96 <_strtod_l+0xbb6>
 80182a4:	4652      	mov	r2, sl
 80182a6:	465b      	mov	r3, fp
 80182a8:	e7e2      	b.n	8018270 <_strtod_l+0x90>
 80182aa:	2200      	movs	r2, #0
 80182ac:	e7ef      	b.n	801828e <_strtod_l+0xae>
 80182ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80182b0:	b13a      	cbz	r2, 80182c2 <_strtod_l+0xe2>
 80182b2:	2135      	movs	r1, #53	; 0x35
 80182b4:	a81e      	add	r0, sp, #120	; 0x78
 80182b6:	f002 fbc5 	bl	801aa44 <__copybits>
 80182ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80182bc:	4648      	mov	r0, r9
 80182be:	f002 f831 	bl	801a324 <_Bfree>
 80182c2:	3c01      	subs	r4, #1
 80182c4:	2c04      	cmp	r4, #4
 80182c6:	d806      	bhi.n	80182d6 <_strtod_l+0xf6>
 80182c8:	e8df f004 	tbb	[pc, r4]
 80182cc:	1714030a 	.word	0x1714030a
 80182d0:	0a          	.byte	0x0a
 80182d1:	00          	.byte	0x00
 80182d2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80182d6:	0730      	lsls	r0, r6, #28
 80182d8:	d5c1      	bpl.n	801825e <_strtod_l+0x7e>
 80182da:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80182de:	e7be      	b.n	801825e <_strtod_l+0x7e>
 80182e0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80182e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80182e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80182ea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80182ee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80182f2:	e7f0      	b.n	80182d6 <_strtod_l+0xf6>
 80182f4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8018468 <_strtod_l+0x288>
 80182f8:	e7ed      	b.n	80182d6 <_strtod_l+0xf6>
 80182fa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80182fe:	f04f 3aff 	mov.w	sl, #4294967295
 8018302:	e7e8      	b.n	80182d6 <_strtod_l+0xf6>
 8018304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018306:	1c5a      	adds	r2, r3, #1
 8018308:	921b      	str	r2, [sp, #108]	; 0x6c
 801830a:	785b      	ldrb	r3, [r3, #1]
 801830c:	2b30      	cmp	r3, #48	; 0x30
 801830e:	d0f9      	beq.n	8018304 <_strtod_l+0x124>
 8018310:	2b00      	cmp	r3, #0
 8018312:	d0a4      	beq.n	801825e <_strtod_l+0x7e>
 8018314:	2301      	movs	r3, #1
 8018316:	2500      	movs	r5, #0
 8018318:	9306      	str	r3, [sp, #24]
 801831a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801831c:	9308      	str	r3, [sp, #32]
 801831e:	9507      	str	r5, [sp, #28]
 8018320:	9505      	str	r5, [sp, #20]
 8018322:	220a      	movs	r2, #10
 8018324:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8018326:	7807      	ldrb	r7, [r0, #0]
 8018328:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801832c:	b2d9      	uxtb	r1, r3
 801832e:	2909      	cmp	r1, #9
 8018330:	d929      	bls.n	8018386 <_strtod_l+0x1a6>
 8018332:	4622      	mov	r2, r4
 8018334:	f8d8 1000 	ldr.w	r1, [r8]
 8018338:	f7ff ff0e 	bl	8018158 <strncmp>
 801833c:	2800      	cmp	r0, #0
 801833e:	d031      	beq.n	80183a4 <_strtod_l+0x1c4>
 8018340:	2000      	movs	r0, #0
 8018342:	9c05      	ldr	r4, [sp, #20]
 8018344:	9004      	str	r0, [sp, #16]
 8018346:	463b      	mov	r3, r7
 8018348:	4602      	mov	r2, r0
 801834a:	2b65      	cmp	r3, #101	; 0x65
 801834c:	d001      	beq.n	8018352 <_strtod_l+0x172>
 801834e:	2b45      	cmp	r3, #69	; 0x45
 8018350:	d114      	bne.n	801837c <_strtod_l+0x19c>
 8018352:	b924      	cbnz	r4, 801835e <_strtod_l+0x17e>
 8018354:	b910      	cbnz	r0, 801835c <_strtod_l+0x17c>
 8018356:	9b06      	ldr	r3, [sp, #24]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d09e      	beq.n	801829a <_strtod_l+0xba>
 801835c:	2400      	movs	r4, #0
 801835e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8018360:	1c73      	adds	r3, r6, #1
 8018362:	931b      	str	r3, [sp, #108]	; 0x6c
 8018364:	7873      	ldrb	r3, [r6, #1]
 8018366:	2b2b      	cmp	r3, #43	; 0x2b
 8018368:	d078      	beq.n	801845c <_strtod_l+0x27c>
 801836a:	2b2d      	cmp	r3, #45	; 0x2d
 801836c:	d070      	beq.n	8018450 <_strtod_l+0x270>
 801836e:	f04f 0c00 	mov.w	ip, #0
 8018372:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8018376:	2f09      	cmp	r7, #9
 8018378:	d97c      	bls.n	8018474 <_strtod_l+0x294>
 801837a:	961b      	str	r6, [sp, #108]	; 0x6c
 801837c:	f04f 0e00 	mov.w	lr, #0
 8018380:	e09a      	b.n	80184b8 <_strtod_l+0x2d8>
 8018382:	2300      	movs	r3, #0
 8018384:	e7c7      	b.n	8018316 <_strtod_l+0x136>
 8018386:	9905      	ldr	r1, [sp, #20]
 8018388:	2908      	cmp	r1, #8
 801838a:	bfdd      	ittte	le
 801838c:	9907      	ldrle	r1, [sp, #28]
 801838e:	fb02 3301 	mlale	r3, r2, r1, r3
 8018392:	9307      	strle	r3, [sp, #28]
 8018394:	fb02 3505 	mlagt	r5, r2, r5, r3
 8018398:	9b05      	ldr	r3, [sp, #20]
 801839a:	3001      	adds	r0, #1
 801839c:	3301      	adds	r3, #1
 801839e:	9305      	str	r3, [sp, #20]
 80183a0:	901b      	str	r0, [sp, #108]	; 0x6c
 80183a2:	e7bf      	b.n	8018324 <_strtod_l+0x144>
 80183a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80183a6:	191a      	adds	r2, r3, r4
 80183a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80183aa:	9a05      	ldr	r2, [sp, #20]
 80183ac:	5d1b      	ldrb	r3, [r3, r4]
 80183ae:	2a00      	cmp	r2, #0
 80183b0:	d037      	beq.n	8018422 <_strtod_l+0x242>
 80183b2:	9c05      	ldr	r4, [sp, #20]
 80183b4:	4602      	mov	r2, r0
 80183b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80183ba:	2909      	cmp	r1, #9
 80183bc:	d913      	bls.n	80183e6 <_strtod_l+0x206>
 80183be:	2101      	movs	r1, #1
 80183c0:	9104      	str	r1, [sp, #16]
 80183c2:	e7c2      	b.n	801834a <_strtod_l+0x16a>
 80183c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80183c6:	1c5a      	adds	r2, r3, #1
 80183c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80183ca:	785b      	ldrb	r3, [r3, #1]
 80183cc:	3001      	adds	r0, #1
 80183ce:	2b30      	cmp	r3, #48	; 0x30
 80183d0:	d0f8      	beq.n	80183c4 <_strtod_l+0x1e4>
 80183d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80183d6:	2a08      	cmp	r2, #8
 80183d8:	f200 84e4 	bhi.w	8018da4 <_strtod_l+0xbc4>
 80183dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80183de:	9208      	str	r2, [sp, #32]
 80183e0:	4602      	mov	r2, r0
 80183e2:	2000      	movs	r0, #0
 80183e4:	4604      	mov	r4, r0
 80183e6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80183ea:	f100 0101 	add.w	r1, r0, #1
 80183ee:	d012      	beq.n	8018416 <_strtod_l+0x236>
 80183f0:	440a      	add	r2, r1
 80183f2:	eb00 0c04 	add.w	ip, r0, r4
 80183f6:	4621      	mov	r1, r4
 80183f8:	270a      	movs	r7, #10
 80183fa:	458c      	cmp	ip, r1
 80183fc:	d113      	bne.n	8018426 <_strtod_l+0x246>
 80183fe:	1821      	adds	r1, r4, r0
 8018400:	2908      	cmp	r1, #8
 8018402:	f104 0401 	add.w	r4, r4, #1
 8018406:	4404      	add	r4, r0
 8018408:	dc19      	bgt.n	801843e <_strtod_l+0x25e>
 801840a:	9b07      	ldr	r3, [sp, #28]
 801840c:	210a      	movs	r1, #10
 801840e:	fb01 e303 	mla	r3, r1, r3, lr
 8018412:	9307      	str	r3, [sp, #28]
 8018414:	2100      	movs	r1, #0
 8018416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018418:	1c58      	adds	r0, r3, #1
 801841a:	901b      	str	r0, [sp, #108]	; 0x6c
 801841c:	785b      	ldrb	r3, [r3, #1]
 801841e:	4608      	mov	r0, r1
 8018420:	e7c9      	b.n	80183b6 <_strtod_l+0x1d6>
 8018422:	9805      	ldr	r0, [sp, #20]
 8018424:	e7d3      	b.n	80183ce <_strtod_l+0x1ee>
 8018426:	2908      	cmp	r1, #8
 8018428:	f101 0101 	add.w	r1, r1, #1
 801842c:	dc03      	bgt.n	8018436 <_strtod_l+0x256>
 801842e:	9b07      	ldr	r3, [sp, #28]
 8018430:	437b      	muls	r3, r7
 8018432:	9307      	str	r3, [sp, #28]
 8018434:	e7e1      	b.n	80183fa <_strtod_l+0x21a>
 8018436:	2910      	cmp	r1, #16
 8018438:	bfd8      	it	le
 801843a:	437d      	mulle	r5, r7
 801843c:	e7dd      	b.n	80183fa <_strtod_l+0x21a>
 801843e:	2c10      	cmp	r4, #16
 8018440:	bfdc      	itt	le
 8018442:	210a      	movle	r1, #10
 8018444:	fb01 e505 	mlale	r5, r1, r5, lr
 8018448:	e7e4      	b.n	8018414 <_strtod_l+0x234>
 801844a:	2301      	movs	r3, #1
 801844c:	9304      	str	r3, [sp, #16]
 801844e:	e781      	b.n	8018354 <_strtod_l+0x174>
 8018450:	f04f 0c01 	mov.w	ip, #1
 8018454:	1cb3      	adds	r3, r6, #2
 8018456:	931b      	str	r3, [sp, #108]	; 0x6c
 8018458:	78b3      	ldrb	r3, [r6, #2]
 801845a:	e78a      	b.n	8018372 <_strtod_l+0x192>
 801845c:	f04f 0c00 	mov.w	ip, #0
 8018460:	e7f8      	b.n	8018454 <_strtod_l+0x274>
 8018462:	bf00      	nop
 8018464:	0801e46c 	.word	0x0801e46c
 8018468:	7ff00000 	.word	0x7ff00000
 801846c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801846e:	1c5f      	adds	r7, r3, #1
 8018470:	971b      	str	r7, [sp, #108]	; 0x6c
 8018472:	785b      	ldrb	r3, [r3, #1]
 8018474:	2b30      	cmp	r3, #48	; 0x30
 8018476:	d0f9      	beq.n	801846c <_strtod_l+0x28c>
 8018478:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801847c:	2f08      	cmp	r7, #8
 801847e:	f63f af7d 	bhi.w	801837c <_strtod_l+0x19c>
 8018482:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8018486:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018488:	930a      	str	r3, [sp, #40]	; 0x28
 801848a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801848c:	1c5f      	adds	r7, r3, #1
 801848e:	971b      	str	r7, [sp, #108]	; 0x6c
 8018490:	785b      	ldrb	r3, [r3, #1]
 8018492:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8018496:	f1b8 0f09 	cmp.w	r8, #9
 801849a:	d937      	bls.n	801850c <_strtod_l+0x32c>
 801849c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801849e:	1a7f      	subs	r7, r7, r1
 80184a0:	2f08      	cmp	r7, #8
 80184a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80184a6:	dc37      	bgt.n	8018518 <_strtod_l+0x338>
 80184a8:	45be      	cmp	lr, r7
 80184aa:	bfa8      	it	ge
 80184ac:	46be      	movge	lr, r7
 80184ae:	f1bc 0f00 	cmp.w	ip, #0
 80184b2:	d001      	beq.n	80184b8 <_strtod_l+0x2d8>
 80184b4:	f1ce 0e00 	rsb	lr, lr, #0
 80184b8:	2c00      	cmp	r4, #0
 80184ba:	d151      	bne.n	8018560 <_strtod_l+0x380>
 80184bc:	2800      	cmp	r0, #0
 80184be:	f47f aece 	bne.w	801825e <_strtod_l+0x7e>
 80184c2:	9a06      	ldr	r2, [sp, #24]
 80184c4:	2a00      	cmp	r2, #0
 80184c6:	f47f aeca 	bne.w	801825e <_strtod_l+0x7e>
 80184ca:	9a04      	ldr	r2, [sp, #16]
 80184cc:	2a00      	cmp	r2, #0
 80184ce:	f47f aee4 	bne.w	801829a <_strtod_l+0xba>
 80184d2:	2b4e      	cmp	r3, #78	; 0x4e
 80184d4:	d027      	beq.n	8018526 <_strtod_l+0x346>
 80184d6:	dc21      	bgt.n	801851c <_strtod_l+0x33c>
 80184d8:	2b49      	cmp	r3, #73	; 0x49
 80184da:	f47f aede 	bne.w	801829a <_strtod_l+0xba>
 80184de:	49a0      	ldr	r1, [pc, #640]	; (8018760 <_strtod_l+0x580>)
 80184e0:	a81b      	add	r0, sp, #108	; 0x6c
 80184e2:	f001 fe1f 	bl	801a124 <__match>
 80184e6:	2800      	cmp	r0, #0
 80184e8:	f43f aed7 	beq.w	801829a <_strtod_l+0xba>
 80184ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80184ee:	499d      	ldr	r1, [pc, #628]	; (8018764 <_strtod_l+0x584>)
 80184f0:	3b01      	subs	r3, #1
 80184f2:	a81b      	add	r0, sp, #108	; 0x6c
 80184f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80184f6:	f001 fe15 	bl	801a124 <__match>
 80184fa:	b910      	cbnz	r0, 8018502 <_strtod_l+0x322>
 80184fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80184fe:	3301      	adds	r3, #1
 8018500:	931b      	str	r3, [sp, #108]	; 0x6c
 8018502:	f8df b274 	ldr.w	fp, [pc, #628]	; 8018778 <_strtod_l+0x598>
 8018506:	f04f 0a00 	mov.w	sl, #0
 801850a:	e6a8      	b.n	801825e <_strtod_l+0x7e>
 801850c:	210a      	movs	r1, #10
 801850e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8018512:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8018516:	e7b8      	b.n	801848a <_strtod_l+0x2aa>
 8018518:	46be      	mov	lr, r7
 801851a:	e7c8      	b.n	80184ae <_strtod_l+0x2ce>
 801851c:	2b69      	cmp	r3, #105	; 0x69
 801851e:	d0de      	beq.n	80184de <_strtod_l+0x2fe>
 8018520:	2b6e      	cmp	r3, #110	; 0x6e
 8018522:	f47f aeba 	bne.w	801829a <_strtod_l+0xba>
 8018526:	4990      	ldr	r1, [pc, #576]	; (8018768 <_strtod_l+0x588>)
 8018528:	a81b      	add	r0, sp, #108	; 0x6c
 801852a:	f001 fdfb 	bl	801a124 <__match>
 801852e:	2800      	cmp	r0, #0
 8018530:	f43f aeb3 	beq.w	801829a <_strtod_l+0xba>
 8018534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018536:	781b      	ldrb	r3, [r3, #0]
 8018538:	2b28      	cmp	r3, #40	; 0x28
 801853a:	d10e      	bne.n	801855a <_strtod_l+0x37a>
 801853c:	aa1e      	add	r2, sp, #120	; 0x78
 801853e:	498b      	ldr	r1, [pc, #556]	; (801876c <_strtod_l+0x58c>)
 8018540:	a81b      	add	r0, sp, #108	; 0x6c
 8018542:	f001 fe03 	bl	801a14c <__hexnan>
 8018546:	2805      	cmp	r0, #5
 8018548:	d107      	bne.n	801855a <_strtod_l+0x37a>
 801854a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801854c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8018550:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8018554:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8018558:	e681      	b.n	801825e <_strtod_l+0x7e>
 801855a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8018780 <_strtod_l+0x5a0>
 801855e:	e7d2      	b.n	8018506 <_strtod_l+0x326>
 8018560:	ebae 0302 	sub.w	r3, lr, r2
 8018564:	9306      	str	r3, [sp, #24]
 8018566:	9b05      	ldr	r3, [sp, #20]
 8018568:	9807      	ldr	r0, [sp, #28]
 801856a:	2b00      	cmp	r3, #0
 801856c:	bf08      	it	eq
 801856e:	4623      	moveq	r3, r4
 8018570:	2c10      	cmp	r4, #16
 8018572:	9305      	str	r3, [sp, #20]
 8018574:	46a0      	mov	r8, r4
 8018576:	bfa8      	it	ge
 8018578:	f04f 0810 	movge.w	r8, #16
 801857c:	f7e7 ffd2 	bl	8000524 <__aeabi_ui2d>
 8018580:	2c09      	cmp	r4, #9
 8018582:	4682      	mov	sl, r0
 8018584:	468b      	mov	fp, r1
 8018586:	dc13      	bgt.n	80185b0 <_strtod_l+0x3d0>
 8018588:	9b06      	ldr	r3, [sp, #24]
 801858a:	2b00      	cmp	r3, #0
 801858c:	f43f ae67 	beq.w	801825e <_strtod_l+0x7e>
 8018590:	9b06      	ldr	r3, [sp, #24]
 8018592:	dd7a      	ble.n	801868a <_strtod_l+0x4aa>
 8018594:	2b16      	cmp	r3, #22
 8018596:	dc61      	bgt.n	801865c <_strtod_l+0x47c>
 8018598:	4a75      	ldr	r2, [pc, #468]	; (8018770 <_strtod_l+0x590>)
 801859a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801859e:	e9de 0100 	ldrd	r0, r1, [lr]
 80185a2:	4652      	mov	r2, sl
 80185a4:	465b      	mov	r3, fp
 80185a6:	f7e8 f837 	bl	8000618 <__aeabi_dmul>
 80185aa:	4682      	mov	sl, r0
 80185ac:	468b      	mov	fp, r1
 80185ae:	e656      	b.n	801825e <_strtod_l+0x7e>
 80185b0:	4b6f      	ldr	r3, [pc, #444]	; (8018770 <_strtod_l+0x590>)
 80185b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80185b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80185ba:	f7e8 f82d 	bl	8000618 <__aeabi_dmul>
 80185be:	4606      	mov	r6, r0
 80185c0:	4628      	mov	r0, r5
 80185c2:	460f      	mov	r7, r1
 80185c4:	f7e7 ffae 	bl	8000524 <__aeabi_ui2d>
 80185c8:	4602      	mov	r2, r0
 80185ca:	460b      	mov	r3, r1
 80185cc:	4630      	mov	r0, r6
 80185ce:	4639      	mov	r1, r7
 80185d0:	f7e7 fe6c 	bl	80002ac <__adddf3>
 80185d4:	2c0f      	cmp	r4, #15
 80185d6:	4682      	mov	sl, r0
 80185d8:	468b      	mov	fp, r1
 80185da:	ddd5      	ble.n	8018588 <_strtod_l+0x3a8>
 80185dc:	9b06      	ldr	r3, [sp, #24]
 80185de:	eba4 0808 	sub.w	r8, r4, r8
 80185e2:	4498      	add	r8, r3
 80185e4:	f1b8 0f00 	cmp.w	r8, #0
 80185e8:	f340 8096 	ble.w	8018718 <_strtod_l+0x538>
 80185ec:	f018 030f 	ands.w	r3, r8, #15
 80185f0:	d00a      	beq.n	8018608 <_strtod_l+0x428>
 80185f2:	495f      	ldr	r1, [pc, #380]	; (8018770 <_strtod_l+0x590>)
 80185f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80185f8:	4652      	mov	r2, sl
 80185fa:	465b      	mov	r3, fp
 80185fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018600:	f7e8 f80a 	bl	8000618 <__aeabi_dmul>
 8018604:	4682      	mov	sl, r0
 8018606:	468b      	mov	fp, r1
 8018608:	f038 080f 	bics.w	r8, r8, #15
 801860c:	d073      	beq.n	80186f6 <_strtod_l+0x516>
 801860e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8018612:	dd47      	ble.n	80186a4 <_strtod_l+0x4c4>
 8018614:	2400      	movs	r4, #0
 8018616:	46a0      	mov	r8, r4
 8018618:	9407      	str	r4, [sp, #28]
 801861a:	9405      	str	r4, [sp, #20]
 801861c:	2322      	movs	r3, #34	; 0x22
 801861e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8018778 <_strtod_l+0x598>
 8018622:	f8c9 3000 	str.w	r3, [r9]
 8018626:	f04f 0a00 	mov.w	sl, #0
 801862a:	9b07      	ldr	r3, [sp, #28]
 801862c:	2b00      	cmp	r3, #0
 801862e:	f43f ae16 	beq.w	801825e <_strtod_l+0x7e>
 8018632:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018634:	4648      	mov	r0, r9
 8018636:	f001 fe75 	bl	801a324 <_Bfree>
 801863a:	9905      	ldr	r1, [sp, #20]
 801863c:	4648      	mov	r0, r9
 801863e:	f001 fe71 	bl	801a324 <_Bfree>
 8018642:	4641      	mov	r1, r8
 8018644:	4648      	mov	r0, r9
 8018646:	f001 fe6d 	bl	801a324 <_Bfree>
 801864a:	9907      	ldr	r1, [sp, #28]
 801864c:	4648      	mov	r0, r9
 801864e:	f001 fe69 	bl	801a324 <_Bfree>
 8018652:	4621      	mov	r1, r4
 8018654:	4648      	mov	r0, r9
 8018656:	f001 fe65 	bl	801a324 <_Bfree>
 801865a:	e600      	b.n	801825e <_strtod_l+0x7e>
 801865c:	9a06      	ldr	r2, [sp, #24]
 801865e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8018662:	4293      	cmp	r3, r2
 8018664:	dbba      	blt.n	80185dc <_strtod_l+0x3fc>
 8018666:	4d42      	ldr	r5, [pc, #264]	; (8018770 <_strtod_l+0x590>)
 8018668:	f1c4 040f 	rsb	r4, r4, #15
 801866c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8018670:	4652      	mov	r2, sl
 8018672:	465b      	mov	r3, fp
 8018674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018678:	f7e7 ffce 	bl	8000618 <__aeabi_dmul>
 801867c:	9b06      	ldr	r3, [sp, #24]
 801867e:	1b1c      	subs	r4, r3, r4
 8018680:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8018684:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018688:	e78d      	b.n	80185a6 <_strtod_l+0x3c6>
 801868a:	f113 0f16 	cmn.w	r3, #22
 801868e:	dba5      	blt.n	80185dc <_strtod_l+0x3fc>
 8018690:	4a37      	ldr	r2, [pc, #220]	; (8018770 <_strtod_l+0x590>)
 8018692:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8018696:	e9d2 2300 	ldrd	r2, r3, [r2]
 801869a:	4650      	mov	r0, sl
 801869c:	4659      	mov	r1, fp
 801869e:	f7e8 f8e5 	bl	800086c <__aeabi_ddiv>
 80186a2:	e782      	b.n	80185aa <_strtod_l+0x3ca>
 80186a4:	2300      	movs	r3, #0
 80186a6:	4e33      	ldr	r6, [pc, #204]	; (8018774 <_strtod_l+0x594>)
 80186a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80186ac:	4650      	mov	r0, sl
 80186ae:	4659      	mov	r1, fp
 80186b0:	461d      	mov	r5, r3
 80186b2:	f1b8 0f01 	cmp.w	r8, #1
 80186b6:	dc21      	bgt.n	80186fc <_strtod_l+0x51c>
 80186b8:	b10b      	cbz	r3, 80186be <_strtod_l+0x4de>
 80186ba:	4682      	mov	sl, r0
 80186bc:	468b      	mov	fp, r1
 80186be:	4b2d      	ldr	r3, [pc, #180]	; (8018774 <_strtod_l+0x594>)
 80186c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80186c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80186c8:	4652      	mov	r2, sl
 80186ca:	465b      	mov	r3, fp
 80186cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80186d0:	f7e7 ffa2 	bl	8000618 <__aeabi_dmul>
 80186d4:	4b28      	ldr	r3, [pc, #160]	; (8018778 <_strtod_l+0x598>)
 80186d6:	460a      	mov	r2, r1
 80186d8:	400b      	ands	r3, r1
 80186da:	4928      	ldr	r1, [pc, #160]	; (801877c <_strtod_l+0x59c>)
 80186dc:	428b      	cmp	r3, r1
 80186de:	4682      	mov	sl, r0
 80186e0:	d898      	bhi.n	8018614 <_strtod_l+0x434>
 80186e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80186e6:	428b      	cmp	r3, r1
 80186e8:	bf86      	itte	hi
 80186ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8018784 <_strtod_l+0x5a4>
 80186ee:	f04f 3aff 	movhi.w	sl, #4294967295
 80186f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80186f6:	2300      	movs	r3, #0
 80186f8:	9304      	str	r3, [sp, #16]
 80186fa:	e077      	b.n	80187ec <_strtod_l+0x60c>
 80186fc:	f018 0f01 	tst.w	r8, #1
 8018700:	d006      	beq.n	8018710 <_strtod_l+0x530>
 8018702:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8018706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801870a:	f7e7 ff85 	bl	8000618 <__aeabi_dmul>
 801870e:	2301      	movs	r3, #1
 8018710:	3501      	adds	r5, #1
 8018712:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018716:	e7cc      	b.n	80186b2 <_strtod_l+0x4d2>
 8018718:	d0ed      	beq.n	80186f6 <_strtod_l+0x516>
 801871a:	f1c8 0800 	rsb	r8, r8, #0
 801871e:	f018 020f 	ands.w	r2, r8, #15
 8018722:	d00a      	beq.n	801873a <_strtod_l+0x55a>
 8018724:	4b12      	ldr	r3, [pc, #72]	; (8018770 <_strtod_l+0x590>)
 8018726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801872a:	4650      	mov	r0, sl
 801872c:	4659      	mov	r1, fp
 801872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018732:	f7e8 f89b 	bl	800086c <__aeabi_ddiv>
 8018736:	4682      	mov	sl, r0
 8018738:	468b      	mov	fp, r1
 801873a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801873e:	d0da      	beq.n	80186f6 <_strtod_l+0x516>
 8018740:	f1b8 0f1f 	cmp.w	r8, #31
 8018744:	dd20      	ble.n	8018788 <_strtod_l+0x5a8>
 8018746:	2400      	movs	r4, #0
 8018748:	46a0      	mov	r8, r4
 801874a:	9407      	str	r4, [sp, #28]
 801874c:	9405      	str	r4, [sp, #20]
 801874e:	2322      	movs	r3, #34	; 0x22
 8018750:	f04f 0a00 	mov.w	sl, #0
 8018754:	f04f 0b00 	mov.w	fp, #0
 8018758:	f8c9 3000 	str.w	r3, [r9]
 801875c:	e765      	b.n	801862a <_strtod_l+0x44a>
 801875e:	bf00      	nop
 8018760:	0801e435 	.word	0x0801e435
 8018764:	0801e4c3 	.word	0x0801e4c3
 8018768:	0801e43d 	.word	0x0801e43d
 801876c:	0801e480 	.word	0x0801e480
 8018770:	0801e500 	.word	0x0801e500
 8018774:	0801e4d8 	.word	0x0801e4d8
 8018778:	7ff00000 	.word	0x7ff00000
 801877c:	7ca00000 	.word	0x7ca00000
 8018780:	fff80000 	.word	0xfff80000
 8018784:	7fefffff 	.word	0x7fefffff
 8018788:	f018 0310 	ands.w	r3, r8, #16
 801878c:	bf18      	it	ne
 801878e:	236a      	movne	r3, #106	; 0x6a
 8018790:	4da0      	ldr	r5, [pc, #640]	; (8018a14 <_strtod_l+0x834>)
 8018792:	9304      	str	r3, [sp, #16]
 8018794:	4650      	mov	r0, sl
 8018796:	4659      	mov	r1, fp
 8018798:	2300      	movs	r3, #0
 801879a:	f1b8 0f00 	cmp.w	r8, #0
 801879e:	f300 810a 	bgt.w	80189b6 <_strtod_l+0x7d6>
 80187a2:	b10b      	cbz	r3, 80187a8 <_strtod_l+0x5c8>
 80187a4:	4682      	mov	sl, r0
 80187a6:	468b      	mov	fp, r1
 80187a8:	9b04      	ldr	r3, [sp, #16]
 80187aa:	b1bb      	cbz	r3, 80187dc <_strtod_l+0x5fc>
 80187ac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80187b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	4659      	mov	r1, fp
 80187b8:	dd10      	ble.n	80187dc <_strtod_l+0x5fc>
 80187ba:	2b1f      	cmp	r3, #31
 80187bc:	f340 8107 	ble.w	80189ce <_strtod_l+0x7ee>
 80187c0:	2b34      	cmp	r3, #52	; 0x34
 80187c2:	bfde      	ittt	le
 80187c4:	3b20      	suble	r3, #32
 80187c6:	f04f 32ff 	movle.w	r2, #4294967295
 80187ca:	fa02 f303 	lslle.w	r3, r2, r3
 80187ce:	f04f 0a00 	mov.w	sl, #0
 80187d2:	bfcc      	ite	gt
 80187d4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80187d8:	ea03 0b01 	andle.w	fp, r3, r1
 80187dc:	2200      	movs	r2, #0
 80187de:	2300      	movs	r3, #0
 80187e0:	4650      	mov	r0, sl
 80187e2:	4659      	mov	r1, fp
 80187e4:	f7e8 f980 	bl	8000ae8 <__aeabi_dcmpeq>
 80187e8:	2800      	cmp	r0, #0
 80187ea:	d1ac      	bne.n	8018746 <_strtod_l+0x566>
 80187ec:	9b07      	ldr	r3, [sp, #28]
 80187ee:	9300      	str	r3, [sp, #0]
 80187f0:	9a05      	ldr	r2, [sp, #20]
 80187f2:	9908      	ldr	r1, [sp, #32]
 80187f4:	4623      	mov	r3, r4
 80187f6:	4648      	mov	r0, r9
 80187f8:	f001 fde6 	bl	801a3c8 <__s2b>
 80187fc:	9007      	str	r0, [sp, #28]
 80187fe:	2800      	cmp	r0, #0
 8018800:	f43f af08 	beq.w	8018614 <_strtod_l+0x434>
 8018804:	9a06      	ldr	r2, [sp, #24]
 8018806:	9b06      	ldr	r3, [sp, #24]
 8018808:	2a00      	cmp	r2, #0
 801880a:	f1c3 0300 	rsb	r3, r3, #0
 801880e:	bfa8      	it	ge
 8018810:	2300      	movge	r3, #0
 8018812:	930e      	str	r3, [sp, #56]	; 0x38
 8018814:	2400      	movs	r4, #0
 8018816:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801881a:	9316      	str	r3, [sp, #88]	; 0x58
 801881c:	46a0      	mov	r8, r4
 801881e:	9b07      	ldr	r3, [sp, #28]
 8018820:	4648      	mov	r0, r9
 8018822:	6859      	ldr	r1, [r3, #4]
 8018824:	f001 fd4a 	bl	801a2bc <_Balloc>
 8018828:	9005      	str	r0, [sp, #20]
 801882a:	2800      	cmp	r0, #0
 801882c:	f43f aef6 	beq.w	801861c <_strtod_l+0x43c>
 8018830:	9b07      	ldr	r3, [sp, #28]
 8018832:	691a      	ldr	r2, [r3, #16]
 8018834:	3202      	adds	r2, #2
 8018836:	f103 010c 	add.w	r1, r3, #12
 801883a:	0092      	lsls	r2, r2, #2
 801883c:	300c      	adds	r0, #12
 801883e:	f7fe fd37 	bl	80172b0 <memcpy>
 8018842:	aa1e      	add	r2, sp, #120	; 0x78
 8018844:	a91d      	add	r1, sp, #116	; 0x74
 8018846:	ec4b ab10 	vmov	d0, sl, fp
 801884a:	4648      	mov	r0, r9
 801884c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8018850:	f002 f876 	bl	801a940 <__d2b>
 8018854:	901c      	str	r0, [sp, #112]	; 0x70
 8018856:	2800      	cmp	r0, #0
 8018858:	f43f aee0 	beq.w	801861c <_strtod_l+0x43c>
 801885c:	2101      	movs	r1, #1
 801885e:	4648      	mov	r0, r9
 8018860:	f001 fe3e 	bl	801a4e0 <__i2b>
 8018864:	4680      	mov	r8, r0
 8018866:	2800      	cmp	r0, #0
 8018868:	f43f aed8 	beq.w	801861c <_strtod_l+0x43c>
 801886c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801886e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018870:	2e00      	cmp	r6, #0
 8018872:	bfab      	itete	ge
 8018874:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8018876:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8018878:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801887a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801887c:	bfac      	ite	ge
 801887e:	18f7      	addge	r7, r6, r3
 8018880:	1b9d      	sublt	r5, r3, r6
 8018882:	9b04      	ldr	r3, [sp, #16]
 8018884:	1af6      	subs	r6, r6, r3
 8018886:	4416      	add	r6, r2
 8018888:	4b63      	ldr	r3, [pc, #396]	; (8018a18 <_strtod_l+0x838>)
 801888a:	3e01      	subs	r6, #1
 801888c:	429e      	cmp	r6, r3
 801888e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018892:	f280 80af 	bge.w	80189f4 <_strtod_l+0x814>
 8018896:	1b9b      	subs	r3, r3, r6
 8018898:	2b1f      	cmp	r3, #31
 801889a:	eba2 0203 	sub.w	r2, r2, r3
 801889e:	f04f 0101 	mov.w	r1, #1
 80188a2:	f300 809b 	bgt.w	80189dc <_strtod_l+0x7fc>
 80188a6:	fa01 f303 	lsl.w	r3, r1, r3
 80188aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80188ac:	2300      	movs	r3, #0
 80188ae:	930a      	str	r3, [sp, #40]	; 0x28
 80188b0:	18be      	adds	r6, r7, r2
 80188b2:	9b04      	ldr	r3, [sp, #16]
 80188b4:	42b7      	cmp	r7, r6
 80188b6:	4415      	add	r5, r2
 80188b8:	441d      	add	r5, r3
 80188ba:	463b      	mov	r3, r7
 80188bc:	bfa8      	it	ge
 80188be:	4633      	movge	r3, r6
 80188c0:	42ab      	cmp	r3, r5
 80188c2:	bfa8      	it	ge
 80188c4:	462b      	movge	r3, r5
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	bfc2      	ittt	gt
 80188ca:	1af6      	subgt	r6, r6, r3
 80188cc:	1aed      	subgt	r5, r5, r3
 80188ce:	1aff      	subgt	r7, r7, r3
 80188d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188d2:	b1bb      	cbz	r3, 8018904 <_strtod_l+0x724>
 80188d4:	4641      	mov	r1, r8
 80188d6:	461a      	mov	r2, r3
 80188d8:	4648      	mov	r0, r9
 80188da:	f001 fea1 	bl	801a620 <__pow5mult>
 80188de:	4680      	mov	r8, r0
 80188e0:	2800      	cmp	r0, #0
 80188e2:	f43f ae9b 	beq.w	801861c <_strtod_l+0x43c>
 80188e6:	4601      	mov	r1, r0
 80188e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80188ea:	4648      	mov	r0, r9
 80188ec:	f001 fe01 	bl	801a4f2 <__multiply>
 80188f0:	900c      	str	r0, [sp, #48]	; 0x30
 80188f2:	2800      	cmp	r0, #0
 80188f4:	f43f ae92 	beq.w	801861c <_strtod_l+0x43c>
 80188f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80188fa:	4648      	mov	r0, r9
 80188fc:	f001 fd12 	bl	801a324 <_Bfree>
 8018900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018902:	931c      	str	r3, [sp, #112]	; 0x70
 8018904:	2e00      	cmp	r6, #0
 8018906:	dc7a      	bgt.n	80189fe <_strtod_l+0x81e>
 8018908:	9b06      	ldr	r3, [sp, #24]
 801890a:	2b00      	cmp	r3, #0
 801890c:	dd08      	ble.n	8018920 <_strtod_l+0x740>
 801890e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018910:	9905      	ldr	r1, [sp, #20]
 8018912:	4648      	mov	r0, r9
 8018914:	f001 fe84 	bl	801a620 <__pow5mult>
 8018918:	9005      	str	r0, [sp, #20]
 801891a:	2800      	cmp	r0, #0
 801891c:	f43f ae7e 	beq.w	801861c <_strtod_l+0x43c>
 8018920:	2d00      	cmp	r5, #0
 8018922:	dd08      	ble.n	8018936 <_strtod_l+0x756>
 8018924:	462a      	mov	r2, r5
 8018926:	9905      	ldr	r1, [sp, #20]
 8018928:	4648      	mov	r0, r9
 801892a:	f001 fec7 	bl	801a6bc <__lshift>
 801892e:	9005      	str	r0, [sp, #20]
 8018930:	2800      	cmp	r0, #0
 8018932:	f43f ae73 	beq.w	801861c <_strtod_l+0x43c>
 8018936:	2f00      	cmp	r7, #0
 8018938:	dd08      	ble.n	801894c <_strtod_l+0x76c>
 801893a:	4641      	mov	r1, r8
 801893c:	463a      	mov	r2, r7
 801893e:	4648      	mov	r0, r9
 8018940:	f001 febc 	bl	801a6bc <__lshift>
 8018944:	4680      	mov	r8, r0
 8018946:	2800      	cmp	r0, #0
 8018948:	f43f ae68 	beq.w	801861c <_strtod_l+0x43c>
 801894c:	9a05      	ldr	r2, [sp, #20]
 801894e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018950:	4648      	mov	r0, r9
 8018952:	f001 ff21 	bl	801a798 <__mdiff>
 8018956:	4604      	mov	r4, r0
 8018958:	2800      	cmp	r0, #0
 801895a:	f43f ae5f 	beq.w	801861c <_strtod_l+0x43c>
 801895e:	68c3      	ldr	r3, [r0, #12]
 8018960:	930c      	str	r3, [sp, #48]	; 0x30
 8018962:	2300      	movs	r3, #0
 8018964:	60c3      	str	r3, [r0, #12]
 8018966:	4641      	mov	r1, r8
 8018968:	f001 fefc 	bl	801a764 <__mcmp>
 801896c:	2800      	cmp	r0, #0
 801896e:	da55      	bge.n	8018a1c <_strtod_l+0x83c>
 8018970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018972:	b9e3      	cbnz	r3, 80189ae <_strtod_l+0x7ce>
 8018974:	f1ba 0f00 	cmp.w	sl, #0
 8018978:	d119      	bne.n	80189ae <_strtod_l+0x7ce>
 801897a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801897e:	b9b3      	cbnz	r3, 80189ae <_strtod_l+0x7ce>
 8018980:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018984:	0d1b      	lsrs	r3, r3, #20
 8018986:	051b      	lsls	r3, r3, #20
 8018988:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801898c:	d90f      	bls.n	80189ae <_strtod_l+0x7ce>
 801898e:	6963      	ldr	r3, [r4, #20]
 8018990:	b913      	cbnz	r3, 8018998 <_strtod_l+0x7b8>
 8018992:	6923      	ldr	r3, [r4, #16]
 8018994:	2b01      	cmp	r3, #1
 8018996:	dd0a      	ble.n	80189ae <_strtod_l+0x7ce>
 8018998:	4621      	mov	r1, r4
 801899a:	2201      	movs	r2, #1
 801899c:	4648      	mov	r0, r9
 801899e:	f001 fe8d 	bl	801a6bc <__lshift>
 80189a2:	4641      	mov	r1, r8
 80189a4:	4604      	mov	r4, r0
 80189a6:	f001 fedd 	bl	801a764 <__mcmp>
 80189aa:	2800      	cmp	r0, #0
 80189ac:	dc67      	bgt.n	8018a7e <_strtod_l+0x89e>
 80189ae:	9b04      	ldr	r3, [sp, #16]
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d171      	bne.n	8018a98 <_strtod_l+0x8b8>
 80189b4:	e63d      	b.n	8018632 <_strtod_l+0x452>
 80189b6:	f018 0f01 	tst.w	r8, #1
 80189ba:	d004      	beq.n	80189c6 <_strtod_l+0x7e6>
 80189bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80189c0:	f7e7 fe2a 	bl	8000618 <__aeabi_dmul>
 80189c4:	2301      	movs	r3, #1
 80189c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80189ca:	3508      	adds	r5, #8
 80189cc:	e6e5      	b.n	801879a <_strtod_l+0x5ba>
 80189ce:	f04f 32ff 	mov.w	r2, #4294967295
 80189d2:	fa02 f303 	lsl.w	r3, r2, r3
 80189d6:	ea03 0a0a 	and.w	sl, r3, sl
 80189da:	e6ff      	b.n	80187dc <_strtod_l+0x5fc>
 80189dc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80189e0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80189e4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80189e8:	36e2      	adds	r6, #226	; 0xe2
 80189ea:	fa01 f306 	lsl.w	r3, r1, r6
 80189ee:	930a      	str	r3, [sp, #40]	; 0x28
 80189f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80189f2:	e75d      	b.n	80188b0 <_strtod_l+0x6d0>
 80189f4:	2300      	movs	r3, #0
 80189f6:	930a      	str	r3, [sp, #40]	; 0x28
 80189f8:	2301      	movs	r3, #1
 80189fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80189fc:	e758      	b.n	80188b0 <_strtod_l+0x6d0>
 80189fe:	4632      	mov	r2, r6
 8018a00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018a02:	4648      	mov	r0, r9
 8018a04:	f001 fe5a 	bl	801a6bc <__lshift>
 8018a08:	901c      	str	r0, [sp, #112]	; 0x70
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	f47f af7c 	bne.w	8018908 <_strtod_l+0x728>
 8018a10:	e604      	b.n	801861c <_strtod_l+0x43c>
 8018a12:	bf00      	nop
 8018a14:	0801e498 	.word	0x0801e498
 8018a18:	fffffc02 	.word	0xfffffc02
 8018a1c:	465d      	mov	r5, fp
 8018a1e:	f040 8086 	bne.w	8018b2e <_strtod_l+0x94e>
 8018a22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018a24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a28:	b32a      	cbz	r2, 8018a76 <_strtod_l+0x896>
 8018a2a:	4aaf      	ldr	r2, [pc, #700]	; (8018ce8 <_strtod_l+0xb08>)
 8018a2c:	4293      	cmp	r3, r2
 8018a2e:	d153      	bne.n	8018ad8 <_strtod_l+0x8f8>
 8018a30:	9b04      	ldr	r3, [sp, #16]
 8018a32:	4650      	mov	r0, sl
 8018a34:	b1d3      	cbz	r3, 8018a6c <_strtod_l+0x88c>
 8018a36:	4aad      	ldr	r2, [pc, #692]	; (8018cec <_strtod_l+0xb0c>)
 8018a38:	402a      	ands	r2, r5
 8018a3a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8018a3e:	f04f 31ff 	mov.w	r1, #4294967295
 8018a42:	d816      	bhi.n	8018a72 <_strtod_l+0x892>
 8018a44:	0d12      	lsrs	r2, r2, #20
 8018a46:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8018a4e:	4298      	cmp	r0, r3
 8018a50:	d142      	bne.n	8018ad8 <_strtod_l+0x8f8>
 8018a52:	4ba7      	ldr	r3, [pc, #668]	; (8018cf0 <_strtod_l+0xb10>)
 8018a54:	429d      	cmp	r5, r3
 8018a56:	d102      	bne.n	8018a5e <_strtod_l+0x87e>
 8018a58:	3001      	adds	r0, #1
 8018a5a:	f43f addf 	beq.w	801861c <_strtod_l+0x43c>
 8018a5e:	4ba3      	ldr	r3, [pc, #652]	; (8018cec <_strtod_l+0xb0c>)
 8018a60:	402b      	ands	r3, r5
 8018a62:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8018a66:	f04f 0a00 	mov.w	sl, #0
 8018a6a:	e7a0      	b.n	80189ae <_strtod_l+0x7ce>
 8018a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8018a70:	e7ed      	b.n	8018a4e <_strtod_l+0x86e>
 8018a72:	460b      	mov	r3, r1
 8018a74:	e7eb      	b.n	8018a4e <_strtod_l+0x86e>
 8018a76:	bb7b      	cbnz	r3, 8018ad8 <_strtod_l+0x8f8>
 8018a78:	f1ba 0f00 	cmp.w	sl, #0
 8018a7c:	d12c      	bne.n	8018ad8 <_strtod_l+0x8f8>
 8018a7e:	9904      	ldr	r1, [sp, #16]
 8018a80:	4a9a      	ldr	r2, [pc, #616]	; (8018cec <_strtod_l+0xb0c>)
 8018a82:	465b      	mov	r3, fp
 8018a84:	b1f1      	cbz	r1, 8018ac4 <_strtod_l+0x8e4>
 8018a86:	ea02 010b 	and.w	r1, r2, fp
 8018a8a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018a8e:	dc19      	bgt.n	8018ac4 <_strtod_l+0x8e4>
 8018a90:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018a94:	f77f ae5b 	ble.w	801874e <_strtod_l+0x56e>
 8018a98:	4a96      	ldr	r2, [pc, #600]	; (8018cf4 <_strtod_l+0xb14>)
 8018a9a:	2300      	movs	r3, #0
 8018a9c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8018aa0:	4650      	mov	r0, sl
 8018aa2:	4659      	mov	r1, fp
 8018aa4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018aa8:	f7e7 fdb6 	bl	8000618 <__aeabi_dmul>
 8018aac:	4682      	mov	sl, r0
 8018aae:	468b      	mov	fp, r1
 8018ab0:	2900      	cmp	r1, #0
 8018ab2:	f47f adbe 	bne.w	8018632 <_strtod_l+0x452>
 8018ab6:	2800      	cmp	r0, #0
 8018ab8:	f47f adbb 	bne.w	8018632 <_strtod_l+0x452>
 8018abc:	2322      	movs	r3, #34	; 0x22
 8018abe:	f8c9 3000 	str.w	r3, [r9]
 8018ac2:	e5b6      	b.n	8018632 <_strtod_l+0x452>
 8018ac4:	4013      	ands	r3, r2
 8018ac6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018aca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018ace:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018ad2:	f04f 3aff 	mov.w	sl, #4294967295
 8018ad6:	e76a      	b.n	80189ae <_strtod_l+0x7ce>
 8018ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ada:	b193      	cbz	r3, 8018b02 <_strtod_l+0x922>
 8018adc:	422b      	tst	r3, r5
 8018ade:	f43f af66 	beq.w	80189ae <_strtod_l+0x7ce>
 8018ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018ae4:	9a04      	ldr	r2, [sp, #16]
 8018ae6:	4650      	mov	r0, sl
 8018ae8:	4659      	mov	r1, fp
 8018aea:	b173      	cbz	r3, 8018b0a <_strtod_l+0x92a>
 8018aec:	f7ff fb5b 	bl	80181a6 <sulp>
 8018af0:	4602      	mov	r2, r0
 8018af2:	460b      	mov	r3, r1
 8018af4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018af8:	f7e7 fbd8 	bl	80002ac <__adddf3>
 8018afc:	4682      	mov	sl, r0
 8018afe:	468b      	mov	fp, r1
 8018b00:	e755      	b.n	80189ae <_strtod_l+0x7ce>
 8018b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b04:	ea13 0f0a 	tst.w	r3, sl
 8018b08:	e7e9      	b.n	8018ade <_strtod_l+0x8fe>
 8018b0a:	f7ff fb4c 	bl	80181a6 <sulp>
 8018b0e:	4602      	mov	r2, r0
 8018b10:	460b      	mov	r3, r1
 8018b12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018b16:	f7e7 fbc7 	bl	80002a8 <__aeabi_dsub>
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	4682      	mov	sl, r0
 8018b20:	468b      	mov	fp, r1
 8018b22:	f7e7 ffe1 	bl	8000ae8 <__aeabi_dcmpeq>
 8018b26:	2800      	cmp	r0, #0
 8018b28:	f47f ae11 	bne.w	801874e <_strtod_l+0x56e>
 8018b2c:	e73f      	b.n	80189ae <_strtod_l+0x7ce>
 8018b2e:	4641      	mov	r1, r8
 8018b30:	4620      	mov	r0, r4
 8018b32:	f001 ff54 	bl	801a9de <__ratio>
 8018b36:	ec57 6b10 	vmov	r6, r7, d0
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018b40:	ee10 0a10 	vmov	r0, s0
 8018b44:	4639      	mov	r1, r7
 8018b46:	f7e7 ffe3 	bl	8000b10 <__aeabi_dcmple>
 8018b4a:	2800      	cmp	r0, #0
 8018b4c:	d077      	beq.n	8018c3e <_strtod_l+0xa5e>
 8018b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d04a      	beq.n	8018bea <_strtod_l+0xa0a>
 8018b54:	4b68      	ldr	r3, [pc, #416]	; (8018cf8 <_strtod_l+0xb18>)
 8018b56:	2200      	movs	r2, #0
 8018b58:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018b5c:	4f66      	ldr	r7, [pc, #408]	; (8018cf8 <_strtod_l+0xb18>)
 8018b5e:	2600      	movs	r6, #0
 8018b60:	4b62      	ldr	r3, [pc, #392]	; (8018cec <_strtod_l+0xb0c>)
 8018b62:	402b      	ands	r3, r5
 8018b64:	930f      	str	r3, [sp, #60]	; 0x3c
 8018b66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018b68:	4b64      	ldr	r3, [pc, #400]	; (8018cfc <_strtod_l+0xb1c>)
 8018b6a:	429a      	cmp	r2, r3
 8018b6c:	f040 80ce 	bne.w	8018d0c <_strtod_l+0xb2c>
 8018b70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018b74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018b78:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8018b7c:	ec4b ab10 	vmov	d0, sl, fp
 8018b80:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8018b84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018b88:	f001 fe64 	bl	801a854 <__ulp>
 8018b8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018b90:	ec53 2b10 	vmov	r2, r3, d0
 8018b94:	f7e7 fd40 	bl	8000618 <__aeabi_dmul>
 8018b98:	4652      	mov	r2, sl
 8018b9a:	465b      	mov	r3, fp
 8018b9c:	f7e7 fb86 	bl	80002ac <__adddf3>
 8018ba0:	460b      	mov	r3, r1
 8018ba2:	4952      	ldr	r1, [pc, #328]	; (8018cec <_strtod_l+0xb0c>)
 8018ba4:	4a56      	ldr	r2, [pc, #344]	; (8018d00 <_strtod_l+0xb20>)
 8018ba6:	4019      	ands	r1, r3
 8018ba8:	4291      	cmp	r1, r2
 8018baa:	4682      	mov	sl, r0
 8018bac:	d95b      	bls.n	8018c66 <_strtod_l+0xa86>
 8018bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bb0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018bb4:	4293      	cmp	r3, r2
 8018bb6:	d103      	bne.n	8018bc0 <_strtod_l+0x9e0>
 8018bb8:	9b08      	ldr	r3, [sp, #32]
 8018bba:	3301      	adds	r3, #1
 8018bbc:	f43f ad2e 	beq.w	801861c <_strtod_l+0x43c>
 8018bc0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8018cf0 <_strtod_l+0xb10>
 8018bc4:	f04f 3aff 	mov.w	sl, #4294967295
 8018bc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018bca:	4648      	mov	r0, r9
 8018bcc:	f001 fbaa 	bl	801a324 <_Bfree>
 8018bd0:	9905      	ldr	r1, [sp, #20]
 8018bd2:	4648      	mov	r0, r9
 8018bd4:	f001 fba6 	bl	801a324 <_Bfree>
 8018bd8:	4641      	mov	r1, r8
 8018bda:	4648      	mov	r0, r9
 8018bdc:	f001 fba2 	bl	801a324 <_Bfree>
 8018be0:	4621      	mov	r1, r4
 8018be2:	4648      	mov	r0, r9
 8018be4:	f001 fb9e 	bl	801a324 <_Bfree>
 8018be8:	e619      	b.n	801881e <_strtod_l+0x63e>
 8018bea:	f1ba 0f00 	cmp.w	sl, #0
 8018bee:	d11a      	bne.n	8018c26 <_strtod_l+0xa46>
 8018bf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018bf4:	b9eb      	cbnz	r3, 8018c32 <_strtod_l+0xa52>
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	4b3f      	ldr	r3, [pc, #252]	; (8018cf8 <_strtod_l+0xb18>)
 8018bfa:	4630      	mov	r0, r6
 8018bfc:	4639      	mov	r1, r7
 8018bfe:	f7e7 ff7d 	bl	8000afc <__aeabi_dcmplt>
 8018c02:	b9c8      	cbnz	r0, 8018c38 <_strtod_l+0xa58>
 8018c04:	4630      	mov	r0, r6
 8018c06:	4639      	mov	r1, r7
 8018c08:	2200      	movs	r2, #0
 8018c0a:	4b3e      	ldr	r3, [pc, #248]	; (8018d04 <_strtod_l+0xb24>)
 8018c0c:	f7e7 fd04 	bl	8000618 <__aeabi_dmul>
 8018c10:	4606      	mov	r6, r0
 8018c12:	460f      	mov	r7, r1
 8018c14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8018c18:	9618      	str	r6, [sp, #96]	; 0x60
 8018c1a:	9319      	str	r3, [sp, #100]	; 0x64
 8018c1c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8018c20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018c24:	e79c      	b.n	8018b60 <_strtod_l+0x980>
 8018c26:	f1ba 0f01 	cmp.w	sl, #1
 8018c2a:	d102      	bne.n	8018c32 <_strtod_l+0xa52>
 8018c2c:	2d00      	cmp	r5, #0
 8018c2e:	f43f ad8e 	beq.w	801874e <_strtod_l+0x56e>
 8018c32:	2200      	movs	r2, #0
 8018c34:	4b34      	ldr	r3, [pc, #208]	; (8018d08 <_strtod_l+0xb28>)
 8018c36:	e78f      	b.n	8018b58 <_strtod_l+0x978>
 8018c38:	2600      	movs	r6, #0
 8018c3a:	4f32      	ldr	r7, [pc, #200]	; (8018d04 <_strtod_l+0xb24>)
 8018c3c:	e7ea      	b.n	8018c14 <_strtod_l+0xa34>
 8018c3e:	4b31      	ldr	r3, [pc, #196]	; (8018d04 <_strtod_l+0xb24>)
 8018c40:	4630      	mov	r0, r6
 8018c42:	4639      	mov	r1, r7
 8018c44:	2200      	movs	r2, #0
 8018c46:	f7e7 fce7 	bl	8000618 <__aeabi_dmul>
 8018c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018c4c:	4606      	mov	r6, r0
 8018c4e:	460f      	mov	r7, r1
 8018c50:	b933      	cbnz	r3, 8018c60 <_strtod_l+0xa80>
 8018c52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018c56:	9010      	str	r0, [sp, #64]	; 0x40
 8018c58:	9311      	str	r3, [sp, #68]	; 0x44
 8018c5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018c5e:	e7df      	b.n	8018c20 <_strtod_l+0xa40>
 8018c60:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8018c64:	e7f9      	b.n	8018c5a <_strtod_l+0xa7a>
 8018c66:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8018c6a:	9b04      	ldr	r3, [sp, #16]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d1ab      	bne.n	8018bc8 <_strtod_l+0x9e8>
 8018c70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018c74:	0d1b      	lsrs	r3, r3, #20
 8018c76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018c78:	051b      	lsls	r3, r3, #20
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	465d      	mov	r5, fp
 8018c7e:	d1a3      	bne.n	8018bc8 <_strtod_l+0x9e8>
 8018c80:	4639      	mov	r1, r7
 8018c82:	4630      	mov	r0, r6
 8018c84:	f7e7 ff78 	bl	8000b78 <__aeabi_d2iz>
 8018c88:	f7e7 fc5c 	bl	8000544 <__aeabi_i2d>
 8018c8c:	460b      	mov	r3, r1
 8018c8e:	4602      	mov	r2, r0
 8018c90:	4639      	mov	r1, r7
 8018c92:	4630      	mov	r0, r6
 8018c94:	f7e7 fb08 	bl	80002a8 <__aeabi_dsub>
 8018c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018c9a:	4606      	mov	r6, r0
 8018c9c:	460f      	mov	r7, r1
 8018c9e:	b933      	cbnz	r3, 8018cae <_strtod_l+0xace>
 8018ca0:	f1ba 0f00 	cmp.w	sl, #0
 8018ca4:	d103      	bne.n	8018cae <_strtod_l+0xace>
 8018ca6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8018caa:	2d00      	cmp	r5, #0
 8018cac:	d06d      	beq.n	8018d8a <_strtod_l+0xbaa>
 8018cae:	a30a      	add	r3, pc, #40	; (adr r3, 8018cd8 <_strtod_l+0xaf8>)
 8018cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cb4:	4630      	mov	r0, r6
 8018cb6:	4639      	mov	r1, r7
 8018cb8:	f7e7 ff20 	bl	8000afc <__aeabi_dcmplt>
 8018cbc:	2800      	cmp	r0, #0
 8018cbe:	f47f acb8 	bne.w	8018632 <_strtod_l+0x452>
 8018cc2:	a307      	add	r3, pc, #28	; (adr r3, 8018ce0 <_strtod_l+0xb00>)
 8018cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cc8:	4630      	mov	r0, r6
 8018cca:	4639      	mov	r1, r7
 8018ccc:	f7e7 ff34 	bl	8000b38 <__aeabi_dcmpgt>
 8018cd0:	2800      	cmp	r0, #0
 8018cd2:	f43f af79 	beq.w	8018bc8 <_strtod_l+0x9e8>
 8018cd6:	e4ac      	b.n	8018632 <_strtod_l+0x452>
 8018cd8:	94a03595 	.word	0x94a03595
 8018cdc:	3fdfffff 	.word	0x3fdfffff
 8018ce0:	35afe535 	.word	0x35afe535
 8018ce4:	3fe00000 	.word	0x3fe00000
 8018ce8:	000fffff 	.word	0x000fffff
 8018cec:	7ff00000 	.word	0x7ff00000
 8018cf0:	7fefffff 	.word	0x7fefffff
 8018cf4:	39500000 	.word	0x39500000
 8018cf8:	3ff00000 	.word	0x3ff00000
 8018cfc:	7fe00000 	.word	0x7fe00000
 8018d00:	7c9fffff 	.word	0x7c9fffff
 8018d04:	3fe00000 	.word	0x3fe00000
 8018d08:	bff00000 	.word	0xbff00000
 8018d0c:	9b04      	ldr	r3, [sp, #16]
 8018d0e:	b333      	cbz	r3, 8018d5e <_strtod_l+0xb7e>
 8018d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d12:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018d16:	d822      	bhi.n	8018d5e <_strtod_l+0xb7e>
 8018d18:	a327      	add	r3, pc, #156	; (adr r3, 8018db8 <_strtod_l+0xbd8>)
 8018d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d1e:	4630      	mov	r0, r6
 8018d20:	4639      	mov	r1, r7
 8018d22:	f7e7 fef5 	bl	8000b10 <__aeabi_dcmple>
 8018d26:	b1a0      	cbz	r0, 8018d52 <_strtod_l+0xb72>
 8018d28:	4639      	mov	r1, r7
 8018d2a:	4630      	mov	r0, r6
 8018d2c:	f7e7 ff4c 	bl	8000bc8 <__aeabi_d2uiz>
 8018d30:	2800      	cmp	r0, #0
 8018d32:	bf08      	it	eq
 8018d34:	2001      	moveq	r0, #1
 8018d36:	f7e7 fbf5 	bl	8000524 <__aeabi_ui2d>
 8018d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d3c:	4606      	mov	r6, r0
 8018d3e:	460f      	mov	r7, r1
 8018d40:	bb03      	cbnz	r3, 8018d84 <_strtod_l+0xba4>
 8018d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d46:	9012      	str	r0, [sp, #72]	; 0x48
 8018d48:	9313      	str	r3, [sp, #76]	; 0x4c
 8018d4a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8018d4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018d56:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018d5a:	1a9b      	subs	r3, r3, r2
 8018d5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d5e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8018d62:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8018d66:	f001 fd75 	bl	801a854 <__ulp>
 8018d6a:	4650      	mov	r0, sl
 8018d6c:	ec53 2b10 	vmov	r2, r3, d0
 8018d70:	4659      	mov	r1, fp
 8018d72:	f7e7 fc51 	bl	8000618 <__aeabi_dmul>
 8018d76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018d7a:	f7e7 fa97 	bl	80002ac <__adddf3>
 8018d7e:	4682      	mov	sl, r0
 8018d80:	468b      	mov	fp, r1
 8018d82:	e772      	b.n	8018c6a <_strtod_l+0xa8a>
 8018d84:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8018d88:	e7df      	b.n	8018d4a <_strtod_l+0xb6a>
 8018d8a:	a30d      	add	r3, pc, #52	; (adr r3, 8018dc0 <_strtod_l+0xbe0>)
 8018d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d90:	f7e7 feb4 	bl	8000afc <__aeabi_dcmplt>
 8018d94:	e79c      	b.n	8018cd0 <_strtod_l+0xaf0>
 8018d96:	2300      	movs	r3, #0
 8018d98:	930d      	str	r3, [sp, #52]	; 0x34
 8018d9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018d9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018d9e:	6013      	str	r3, [r2, #0]
 8018da0:	f7ff ba61 	b.w	8018266 <_strtod_l+0x86>
 8018da4:	2b65      	cmp	r3, #101	; 0x65
 8018da6:	f04f 0200 	mov.w	r2, #0
 8018daa:	f43f ab4e 	beq.w	801844a <_strtod_l+0x26a>
 8018dae:	2101      	movs	r1, #1
 8018db0:	4614      	mov	r4, r2
 8018db2:	9104      	str	r1, [sp, #16]
 8018db4:	f7ff bacb 	b.w	801834e <_strtod_l+0x16e>
 8018db8:	ffc00000 	.word	0xffc00000
 8018dbc:	41dfffff 	.word	0x41dfffff
 8018dc0:	94a03595 	.word	0x94a03595
 8018dc4:	3fcfffff 	.word	0x3fcfffff

08018dc8 <_strtod_r>:
 8018dc8:	4b05      	ldr	r3, [pc, #20]	; (8018de0 <_strtod_r+0x18>)
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	b410      	push	{r4}
 8018dce:	6a1b      	ldr	r3, [r3, #32]
 8018dd0:	4c04      	ldr	r4, [pc, #16]	; (8018de4 <_strtod_r+0x1c>)
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	bf08      	it	eq
 8018dd6:	4623      	moveq	r3, r4
 8018dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ddc:	f7ff ba00 	b.w	80181e0 <_strtod_l>
 8018de0:	200001d4 	.word	0x200001d4
 8018de4:	20000238 	.word	0x20000238

08018de8 <strtod>:
 8018de8:	4b07      	ldr	r3, [pc, #28]	; (8018e08 <strtod+0x20>)
 8018dea:	4a08      	ldr	r2, [pc, #32]	; (8018e0c <strtod+0x24>)
 8018dec:	b410      	push	{r4}
 8018dee:	681c      	ldr	r4, [r3, #0]
 8018df0:	6a23      	ldr	r3, [r4, #32]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	bf08      	it	eq
 8018df6:	4613      	moveq	r3, r2
 8018df8:	460a      	mov	r2, r1
 8018dfa:	4601      	mov	r1, r0
 8018dfc:	4620      	mov	r0, r4
 8018dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e02:	f7ff b9ed 	b.w	80181e0 <_strtod_l>
 8018e06:	bf00      	nop
 8018e08:	200001d4 	.word	0x200001d4
 8018e0c:	20000238 	.word	0x20000238

08018e10 <_strtol_l.isra.0>:
 8018e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e14:	4680      	mov	r8, r0
 8018e16:	4689      	mov	r9, r1
 8018e18:	4692      	mov	sl, r2
 8018e1a:	461e      	mov	r6, r3
 8018e1c:	460f      	mov	r7, r1
 8018e1e:	463d      	mov	r5, r7
 8018e20:	9808      	ldr	r0, [sp, #32]
 8018e22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018e26:	f001 fa21 	bl	801a26c <__locale_ctype_ptr_l>
 8018e2a:	4420      	add	r0, r4
 8018e2c:	7843      	ldrb	r3, [r0, #1]
 8018e2e:	f013 0308 	ands.w	r3, r3, #8
 8018e32:	d132      	bne.n	8018e9a <_strtol_l.isra.0+0x8a>
 8018e34:	2c2d      	cmp	r4, #45	; 0x2d
 8018e36:	d132      	bne.n	8018e9e <_strtol_l.isra.0+0x8e>
 8018e38:	787c      	ldrb	r4, [r7, #1]
 8018e3a:	1cbd      	adds	r5, r7, #2
 8018e3c:	2201      	movs	r2, #1
 8018e3e:	2e00      	cmp	r6, #0
 8018e40:	d05d      	beq.n	8018efe <_strtol_l.isra.0+0xee>
 8018e42:	2e10      	cmp	r6, #16
 8018e44:	d109      	bne.n	8018e5a <_strtol_l.isra.0+0x4a>
 8018e46:	2c30      	cmp	r4, #48	; 0x30
 8018e48:	d107      	bne.n	8018e5a <_strtol_l.isra.0+0x4a>
 8018e4a:	782b      	ldrb	r3, [r5, #0]
 8018e4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018e50:	2b58      	cmp	r3, #88	; 0x58
 8018e52:	d14f      	bne.n	8018ef4 <_strtol_l.isra.0+0xe4>
 8018e54:	786c      	ldrb	r4, [r5, #1]
 8018e56:	2610      	movs	r6, #16
 8018e58:	3502      	adds	r5, #2
 8018e5a:	2a00      	cmp	r2, #0
 8018e5c:	bf14      	ite	ne
 8018e5e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8018e62:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8018e66:	2700      	movs	r7, #0
 8018e68:	fbb1 fcf6 	udiv	ip, r1, r6
 8018e6c:	4638      	mov	r0, r7
 8018e6e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8018e72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018e76:	2b09      	cmp	r3, #9
 8018e78:	d817      	bhi.n	8018eaa <_strtol_l.isra.0+0x9a>
 8018e7a:	461c      	mov	r4, r3
 8018e7c:	42a6      	cmp	r6, r4
 8018e7e:	dd23      	ble.n	8018ec8 <_strtol_l.isra.0+0xb8>
 8018e80:	1c7b      	adds	r3, r7, #1
 8018e82:	d007      	beq.n	8018e94 <_strtol_l.isra.0+0x84>
 8018e84:	4584      	cmp	ip, r0
 8018e86:	d31c      	bcc.n	8018ec2 <_strtol_l.isra.0+0xb2>
 8018e88:	d101      	bne.n	8018e8e <_strtol_l.isra.0+0x7e>
 8018e8a:	45a6      	cmp	lr, r4
 8018e8c:	db19      	blt.n	8018ec2 <_strtol_l.isra.0+0xb2>
 8018e8e:	fb00 4006 	mla	r0, r0, r6, r4
 8018e92:	2701      	movs	r7, #1
 8018e94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018e98:	e7eb      	b.n	8018e72 <_strtol_l.isra.0+0x62>
 8018e9a:	462f      	mov	r7, r5
 8018e9c:	e7bf      	b.n	8018e1e <_strtol_l.isra.0+0xe>
 8018e9e:	2c2b      	cmp	r4, #43	; 0x2b
 8018ea0:	bf04      	itt	eq
 8018ea2:	1cbd      	addeq	r5, r7, #2
 8018ea4:	787c      	ldrbeq	r4, [r7, #1]
 8018ea6:	461a      	mov	r2, r3
 8018ea8:	e7c9      	b.n	8018e3e <_strtol_l.isra.0+0x2e>
 8018eaa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8018eae:	2b19      	cmp	r3, #25
 8018eb0:	d801      	bhi.n	8018eb6 <_strtol_l.isra.0+0xa6>
 8018eb2:	3c37      	subs	r4, #55	; 0x37
 8018eb4:	e7e2      	b.n	8018e7c <_strtol_l.isra.0+0x6c>
 8018eb6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8018eba:	2b19      	cmp	r3, #25
 8018ebc:	d804      	bhi.n	8018ec8 <_strtol_l.isra.0+0xb8>
 8018ebe:	3c57      	subs	r4, #87	; 0x57
 8018ec0:	e7dc      	b.n	8018e7c <_strtol_l.isra.0+0x6c>
 8018ec2:	f04f 37ff 	mov.w	r7, #4294967295
 8018ec6:	e7e5      	b.n	8018e94 <_strtol_l.isra.0+0x84>
 8018ec8:	1c7b      	adds	r3, r7, #1
 8018eca:	d108      	bne.n	8018ede <_strtol_l.isra.0+0xce>
 8018ecc:	2322      	movs	r3, #34	; 0x22
 8018ece:	f8c8 3000 	str.w	r3, [r8]
 8018ed2:	4608      	mov	r0, r1
 8018ed4:	f1ba 0f00 	cmp.w	sl, #0
 8018ed8:	d107      	bne.n	8018eea <_strtol_l.isra.0+0xda>
 8018eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ede:	b102      	cbz	r2, 8018ee2 <_strtol_l.isra.0+0xd2>
 8018ee0:	4240      	negs	r0, r0
 8018ee2:	f1ba 0f00 	cmp.w	sl, #0
 8018ee6:	d0f8      	beq.n	8018eda <_strtol_l.isra.0+0xca>
 8018ee8:	b10f      	cbz	r7, 8018eee <_strtol_l.isra.0+0xde>
 8018eea:	f105 39ff 	add.w	r9, r5, #4294967295
 8018eee:	f8ca 9000 	str.w	r9, [sl]
 8018ef2:	e7f2      	b.n	8018eda <_strtol_l.isra.0+0xca>
 8018ef4:	2430      	movs	r4, #48	; 0x30
 8018ef6:	2e00      	cmp	r6, #0
 8018ef8:	d1af      	bne.n	8018e5a <_strtol_l.isra.0+0x4a>
 8018efa:	2608      	movs	r6, #8
 8018efc:	e7ad      	b.n	8018e5a <_strtol_l.isra.0+0x4a>
 8018efe:	2c30      	cmp	r4, #48	; 0x30
 8018f00:	d0a3      	beq.n	8018e4a <_strtol_l.isra.0+0x3a>
 8018f02:	260a      	movs	r6, #10
 8018f04:	e7a9      	b.n	8018e5a <_strtol_l.isra.0+0x4a>
	...

08018f08 <_strtol_r>:
 8018f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f0a:	4c06      	ldr	r4, [pc, #24]	; (8018f24 <_strtol_r+0x1c>)
 8018f0c:	4d06      	ldr	r5, [pc, #24]	; (8018f28 <_strtol_r+0x20>)
 8018f0e:	6824      	ldr	r4, [r4, #0]
 8018f10:	6a24      	ldr	r4, [r4, #32]
 8018f12:	2c00      	cmp	r4, #0
 8018f14:	bf08      	it	eq
 8018f16:	462c      	moveq	r4, r5
 8018f18:	9400      	str	r4, [sp, #0]
 8018f1a:	f7ff ff79 	bl	8018e10 <_strtol_l.isra.0>
 8018f1e:	b003      	add	sp, #12
 8018f20:	bd30      	pop	{r4, r5, pc}
 8018f22:	bf00      	nop
 8018f24:	200001d4 	.word	0x200001d4
 8018f28:	20000238 	.word	0x20000238

08018f2c <strtol>:
 8018f2c:	4b08      	ldr	r3, [pc, #32]	; (8018f50 <strtol+0x24>)
 8018f2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f30:	681c      	ldr	r4, [r3, #0]
 8018f32:	4d08      	ldr	r5, [pc, #32]	; (8018f54 <strtol+0x28>)
 8018f34:	6a23      	ldr	r3, [r4, #32]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	bf08      	it	eq
 8018f3a:	462b      	moveq	r3, r5
 8018f3c:	9300      	str	r3, [sp, #0]
 8018f3e:	4613      	mov	r3, r2
 8018f40:	460a      	mov	r2, r1
 8018f42:	4601      	mov	r1, r0
 8018f44:	4620      	mov	r0, r4
 8018f46:	f7ff ff63 	bl	8018e10 <_strtol_l.isra.0>
 8018f4a:	b003      	add	sp, #12
 8018f4c:	bd30      	pop	{r4, r5, pc}
 8018f4e:	bf00      	nop
 8018f50:	200001d4 	.word	0x200001d4
 8018f54:	20000238 	.word	0x20000238

08018f58 <_vsiprintf_r>:
 8018f58:	b500      	push	{lr}
 8018f5a:	b09b      	sub	sp, #108	; 0x6c
 8018f5c:	9100      	str	r1, [sp, #0]
 8018f5e:	9104      	str	r1, [sp, #16]
 8018f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018f64:	9105      	str	r1, [sp, #20]
 8018f66:	9102      	str	r1, [sp, #8]
 8018f68:	4905      	ldr	r1, [pc, #20]	; (8018f80 <_vsiprintf_r+0x28>)
 8018f6a:	9103      	str	r1, [sp, #12]
 8018f6c:	4669      	mov	r1, sp
 8018f6e:	f001 fe0d 	bl	801ab8c <_svfiprintf_r>
 8018f72:	9b00      	ldr	r3, [sp, #0]
 8018f74:	2200      	movs	r2, #0
 8018f76:	701a      	strb	r2, [r3, #0]
 8018f78:	b01b      	add	sp, #108	; 0x6c
 8018f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f7e:	bf00      	nop
 8018f80:	ffff0208 	.word	0xffff0208

08018f84 <vsiprintf>:
 8018f84:	4613      	mov	r3, r2
 8018f86:	460a      	mov	r2, r1
 8018f88:	4601      	mov	r1, r0
 8018f8a:	4802      	ldr	r0, [pc, #8]	; (8018f94 <vsiprintf+0x10>)
 8018f8c:	6800      	ldr	r0, [r0, #0]
 8018f8e:	f7ff bfe3 	b.w	8018f58 <_vsiprintf_r>
 8018f92:	bf00      	nop
 8018f94:	200001d4 	.word	0x200001d4

08018f98 <quorem>:
 8018f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f9c:	6903      	ldr	r3, [r0, #16]
 8018f9e:	690c      	ldr	r4, [r1, #16]
 8018fa0:	42a3      	cmp	r3, r4
 8018fa2:	4680      	mov	r8, r0
 8018fa4:	f2c0 8082 	blt.w	80190ac <quorem+0x114>
 8018fa8:	3c01      	subs	r4, #1
 8018faa:	f101 0714 	add.w	r7, r1, #20
 8018fae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8018fb2:	f100 0614 	add.w	r6, r0, #20
 8018fb6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8018fba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8018fbe:	eb06 030c 	add.w	r3, r6, ip
 8018fc2:	3501      	adds	r5, #1
 8018fc4:	eb07 090c 	add.w	r9, r7, ip
 8018fc8:	9301      	str	r3, [sp, #4]
 8018fca:	fbb0 f5f5 	udiv	r5, r0, r5
 8018fce:	b395      	cbz	r5, 8019036 <quorem+0x9e>
 8018fd0:	f04f 0a00 	mov.w	sl, #0
 8018fd4:	4638      	mov	r0, r7
 8018fd6:	46b6      	mov	lr, r6
 8018fd8:	46d3      	mov	fp, sl
 8018fda:	f850 2b04 	ldr.w	r2, [r0], #4
 8018fde:	b293      	uxth	r3, r2
 8018fe0:	fb05 a303 	mla	r3, r5, r3, sl
 8018fe4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	ebab 0303 	sub.w	r3, fp, r3
 8018fee:	0c12      	lsrs	r2, r2, #16
 8018ff0:	f8de b000 	ldr.w	fp, [lr]
 8018ff4:	fb05 a202 	mla	r2, r5, r2, sl
 8018ff8:	fa13 f38b 	uxtah	r3, r3, fp
 8018ffc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8019000:	fa1f fb82 	uxth.w	fp, r2
 8019004:	f8de 2000 	ldr.w	r2, [lr]
 8019008:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801900c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019010:	b29b      	uxth	r3, r3
 8019012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019016:	4581      	cmp	r9, r0
 8019018:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801901c:	f84e 3b04 	str.w	r3, [lr], #4
 8019020:	d2db      	bcs.n	8018fda <quorem+0x42>
 8019022:	f856 300c 	ldr.w	r3, [r6, ip]
 8019026:	b933      	cbnz	r3, 8019036 <quorem+0x9e>
 8019028:	9b01      	ldr	r3, [sp, #4]
 801902a:	3b04      	subs	r3, #4
 801902c:	429e      	cmp	r6, r3
 801902e:	461a      	mov	r2, r3
 8019030:	d330      	bcc.n	8019094 <quorem+0xfc>
 8019032:	f8c8 4010 	str.w	r4, [r8, #16]
 8019036:	4640      	mov	r0, r8
 8019038:	f001 fb94 	bl	801a764 <__mcmp>
 801903c:	2800      	cmp	r0, #0
 801903e:	db25      	blt.n	801908c <quorem+0xf4>
 8019040:	3501      	adds	r5, #1
 8019042:	4630      	mov	r0, r6
 8019044:	f04f 0c00 	mov.w	ip, #0
 8019048:	f857 2b04 	ldr.w	r2, [r7], #4
 801904c:	f8d0 e000 	ldr.w	lr, [r0]
 8019050:	b293      	uxth	r3, r2
 8019052:	ebac 0303 	sub.w	r3, ip, r3
 8019056:	0c12      	lsrs	r2, r2, #16
 8019058:	fa13 f38e 	uxtah	r3, r3, lr
 801905c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8019060:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019064:	b29b      	uxth	r3, r3
 8019066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801906a:	45b9      	cmp	r9, r7
 801906c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019070:	f840 3b04 	str.w	r3, [r0], #4
 8019074:	d2e8      	bcs.n	8019048 <quorem+0xb0>
 8019076:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801907a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801907e:	b92a      	cbnz	r2, 801908c <quorem+0xf4>
 8019080:	3b04      	subs	r3, #4
 8019082:	429e      	cmp	r6, r3
 8019084:	461a      	mov	r2, r3
 8019086:	d30b      	bcc.n	80190a0 <quorem+0x108>
 8019088:	f8c8 4010 	str.w	r4, [r8, #16]
 801908c:	4628      	mov	r0, r5
 801908e:	b003      	add	sp, #12
 8019090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019094:	6812      	ldr	r2, [r2, #0]
 8019096:	3b04      	subs	r3, #4
 8019098:	2a00      	cmp	r2, #0
 801909a:	d1ca      	bne.n	8019032 <quorem+0x9a>
 801909c:	3c01      	subs	r4, #1
 801909e:	e7c5      	b.n	801902c <quorem+0x94>
 80190a0:	6812      	ldr	r2, [r2, #0]
 80190a2:	3b04      	subs	r3, #4
 80190a4:	2a00      	cmp	r2, #0
 80190a6:	d1ef      	bne.n	8019088 <quorem+0xf0>
 80190a8:	3c01      	subs	r4, #1
 80190aa:	e7ea      	b.n	8019082 <quorem+0xea>
 80190ac:	2000      	movs	r0, #0
 80190ae:	e7ee      	b.n	801908e <quorem+0xf6>

080190b0 <_dtoa_r>:
 80190b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190b4:	ec57 6b10 	vmov	r6, r7, d0
 80190b8:	b097      	sub	sp, #92	; 0x5c
 80190ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80190bc:	9106      	str	r1, [sp, #24]
 80190be:	4604      	mov	r4, r0
 80190c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80190c2:	9312      	str	r3, [sp, #72]	; 0x48
 80190c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80190c8:	e9cd 6700 	strd	r6, r7, [sp]
 80190cc:	b93d      	cbnz	r5, 80190de <_dtoa_r+0x2e>
 80190ce:	2010      	movs	r0, #16
 80190d0:	f7fe f8de 	bl	8017290 <malloc>
 80190d4:	6260      	str	r0, [r4, #36]	; 0x24
 80190d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80190da:	6005      	str	r5, [r0, #0]
 80190dc:	60c5      	str	r5, [r0, #12]
 80190de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80190e0:	6819      	ldr	r1, [r3, #0]
 80190e2:	b151      	cbz	r1, 80190fa <_dtoa_r+0x4a>
 80190e4:	685a      	ldr	r2, [r3, #4]
 80190e6:	604a      	str	r2, [r1, #4]
 80190e8:	2301      	movs	r3, #1
 80190ea:	4093      	lsls	r3, r2
 80190ec:	608b      	str	r3, [r1, #8]
 80190ee:	4620      	mov	r0, r4
 80190f0:	f001 f918 	bl	801a324 <_Bfree>
 80190f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80190f6:	2200      	movs	r2, #0
 80190f8:	601a      	str	r2, [r3, #0]
 80190fa:	1e3b      	subs	r3, r7, #0
 80190fc:	bfbb      	ittet	lt
 80190fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019102:	9301      	strlt	r3, [sp, #4]
 8019104:	2300      	movge	r3, #0
 8019106:	2201      	movlt	r2, #1
 8019108:	bfac      	ite	ge
 801910a:	f8c8 3000 	strge.w	r3, [r8]
 801910e:	f8c8 2000 	strlt.w	r2, [r8]
 8019112:	4baf      	ldr	r3, [pc, #700]	; (80193d0 <_dtoa_r+0x320>)
 8019114:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019118:	ea33 0308 	bics.w	r3, r3, r8
 801911c:	d114      	bne.n	8019148 <_dtoa_r+0x98>
 801911e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019120:	f242 730f 	movw	r3, #9999	; 0x270f
 8019124:	6013      	str	r3, [r2, #0]
 8019126:	9b00      	ldr	r3, [sp, #0]
 8019128:	b923      	cbnz	r3, 8019134 <_dtoa_r+0x84>
 801912a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801912e:	2800      	cmp	r0, #0
 8019130:	f000 8542 	beq.w	8019bb8 <_dtoa_r+0xb08>
 8019134:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019136:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80193e4 <_dtoa_r+0x334>
 801913a:	2b00      	cmp	r3, #0
 801913c:	f000 8544 	beq.w	8019bc8 <_dtoa_r+0xb18>
 8019140:	f10b 0303 	add.w	r3, fp, #3
 8019144:	f000 bd3e 	b.w	8019bc4 <_dtoa_r+0xb14>
 8019148:	e9dd 6700 	ldrd	r6, r7, [sp]
 801914c:	2200      	movs	r2, #0
 801914e:	2300      	movs	r3, #0
 8019150:	4630      	mov	r0, r6
 8019152:	4639      	mov	r1, r7
 8019154:	f7e7 fcc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8019158:	4681      	mov	r9, r0
 801915a:	b168      	cbz	r0, 8019178 <_dtoa_r+0xc8>
 801915c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801915e:	2301      	movs	r3, #1
 8019160:	6013      	str	r3, [r2, #0]
 8019162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019164:	2b00      	cmp	r3, #0
 8019166:	f000 8524 	beq.w	8019bb2 <_dtoa_r+0xb02>
 801916a:	4b9a      	ldr	r3, [pc, #616]	; (80193d4 <_dtoa_r+0x324>)
 801916c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801916e:	f103 3bff 	add.w	fp, r3, #4294967295
 8019172:	6013      	str	r3, [r2, #0]
 8019174:	f000 bd28 	b.w	8019bc8 <_dtoa_r+0xb18>
 8019178:	aa14      	add	r2, sp, #80	; 0x50
 801917a:	a915      	add	r1, sp, #84	; 0x54
 801917c:	ec47 6b10 	vmov	d0, r6, r7
 8019180:	4620      	mov	r0, r4
 8019182:	f001 fbdd 	bl	801a940 <__d2b>
 8019186:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801918a:	9004      	str	r0, [sp, #16]
 801918c:	2d00      	cmp	r5, #0
 801918e:	d07c      	beq.n	801928a <_dtoa_r+0x1da>
 8019190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019194:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8019198:	46b2      	mov	sl, r6
 801919a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801919e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80191a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80191a6:	2200      	movs	r2, #0
 80191a8:	4b8b      	ldr	r3, [pc, #556]	; (80193d8 <_dtoa_r+0x328>)
 80191aa:	4650      	mov	r0, sl
 80191ac:	4659      	mov	r1, fp
 80191ae:	f7e7 f87b 	bl	80002a8 <__aeabi_dsub>
 80191b2:	a381      	add	r3, pc, #516	; (adr r3, 80193b8 <_dtoa_r+0x308>)
 80191b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191b8:	f7e7 fa2e 	bl	8000618 <__aeabi_dmul>
 80191bc:	a380      	add	r3, pc, #512	; (adr r3, 80193c0 <_dtoa_r+0x310>)
 80191be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191c2:	f7e7 f873 	bl	80002ac <__adddf3>
 80191c6:	4606      	mov	r6, r0
 80191c8:	4628      	mov	r0, r5
 80191ca:	460f      	mov	r7, r1
 80191cc:	f7e7 f9ba 	bl	8000544 <__aeabi_i2d>
 80191d0:	a37d      	add	r3, pc, #500	; (adr r3, 80193c8 <_dtoa_r+0x318>)
 80191d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191d6:	f7e7 fa1f 	bl	8000618 <__aeabi_dmul>
 80191da:	4602      	mov	r2, r0
 80191dc:	460b      	mov	r3, r1
 80191de:	4630      	mov	r0, r6
 80191e0:	4639      	mov	r1, r7
 80191e2:	f7e7 f863 	bl	80002ac <__adddf3>
 80191e6:	4606      	mov	r6, r0
 80191e8:	460f      	mov	r7, r1
 80191ea:	f7e7 fcc5 	bl	8000b78 <__aeabi_d2iz>
 80191ee:	2200      	movs	r2, #0
 80191f0:	4682      	mov	sl, r0
 80191f2:	2300      	movs	r3, #0
 80191f4:	4630      	mov	r0, r6
 80191f6:	4639      	mov	r1, r7
 80191f8:	f7e7 fc80 	bl	8000afc <__aeabi_dcmplt>
 80191fc:	b148      	cbz	r0, 8019212 <_dtoa_r+0x162>
 80191fe:	4650      	mov	r0, sl
 8019200:	f7e7 f9a0 	bl	8000544 <__aeabi_i2d>
 8019204:	4632      	mov	r2, r6
 8019206:	463b      	mov	r3, r7
 8019208:	f7e7 fc6e 	bl	8000ae8 <__aeabi_dcmpeq>
 801920c:	b908      	cbnz	r0, 8019212 <_dtoa_r+0x162>
 801920e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019212:	f1ba 0f16 	cmp.w	sl, #22
 8019216:	d859      	bhi.n	80192cc <_dtoa_r+0x21c>
 8019218:	4970      	ldr	r1, [pc, #448]	; (80193dc <_dtoa_r+0x32c>)
 801921a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801921e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019226:	f7e7 fc87 	bl	8000b38 <__aeabi_dcmpgt>
 801922a:	2800      	cmp	r0, #0
 801922c:	d050      	beq.n	80192d0 <_dtoa_r+0x220>
 801922e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019232:	2300      	movs	r3, #0
 8019234:	930f      	str	r3, [sp, #60]	; 0x3c
 8019236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019238:	1b5d      	subs	r5, r3, r5
 801923a:	f1b5 0801 	subs.w	r8, r5, #1
 801923e:	bf49      	itett	mi
 8019240:	f1c5 0301 	rsbmi	r3, r5, #1
 8019244:	2300      	movpl	r3, #0
 8019246:	9305      	strmi	r3, [sp, #20]
 8019248:	f04f 0800 	movmi.w	r8, #0
 801924c:	bf58      	it	pl
 801924e:	9305      	strpl	r3, [sp, #20]
 8019250:	f1ba 0f00 	cmp.w	sl, #0
 8019254:	db3e      	blt.n	80192d4 <_dtoa_r+0x224>
 8019256:	2300      	movs	r3, #0
 8019258:	44d0      	add	r8, sl
 801925a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801925e:	9307      	str	r3, [sp, #28]
 8019260:	9b06      	ldr	r3, [sp, #24]
 8019262:	2b09      	cmp	r3, #9
 8019264:	f200 8090 	bhi.w	8019388 <_dtoa_r+0x2d8>
 8019268:	2b05      	cmp	r3, #5
 801926a:	bfc4      	itt	gt
 801926c:	3b04      	subgt	r3, #4
 801926e:	9306      	strgt	r3, [sp, #24]
 8019270:	9b06      	ldr	r3, [sp, #24]
 8019272:	f1a3 0302 	sub.w	r3, r3, #2
 8019276:	bfcc      	ite	gt
 8019278:	2500      	movgt	r5, #0
 801927a:	2501      	movle	r5, #1
 801927c:	2b03      	cmp	r3, #3
 801927e:	f200 808f 	bhi.w	80193a0 <_dtoa_r+0x2f0>
 8019282:	e8df f003 	tbb	[pc, r3]
 8019286:	7f7d      	.short	0x7f7d
 8019288:	7131      	.short	0x7131
 801928a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801928e:	441d      	add	r5, r3
 8019290:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8019294:	2820      	cmp	r0, #32
 8019296:	dd13      	ble.n	80192c0 <_dtoa_r+0x210>
 8019298:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801929c:	9b00      	ldr	r3, [sp, #0]
 801929e:	fa08 f800 	lsl.w	r8, r8, r0
 80192a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80192a6:	fa23 f000 	lsr.w	r0, r3, r0
 80192aa:	ea48 0000 	orr.w	r0, r8, r0
 80192ae:	f7e7 f939 	bl	8000524 <__aeabi_ui2d>
 80192b2:	2301      	movs	r3, #1
 80192b4:	4682      	mov	sl, r0
 80192b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80192ba:	3d01      	subs	r5, #1
 80192bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80192be:	e772      	b.n	80191a6 <_dtoa_r+0xf6>
 80192c0:	9b00      	ldr	r3, [sp, #0]
 80192c2:	f1c0 0020 	rsb	r0, r0, #32
 80192c6:	fa03 f000 	lsl.w	r0, r3, r0
 80192ca:	e7f0      	b.n	80192ae <_dtoa_r+0x1fe>
 80192cc:	2301      	movs	r3, #1
 80192ce:	e7b1      	b.n	8019234 <_dtoa_r+0x184>
 80192d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80192d2:	e7b0      	b.n	8019236 <_dtoa_r+0x186>
 80192d4:	9b05      	ldr	r3, [sp, #20]
 80192d6:	eba3 030a 	sub.w	r3, r3, sl
 80192da:	9305      	str	r3, [sp, #20]
 80192dc:	f1ca 0300 	rsb	r3, sl, #0
 80192e0:	9307      	str	r3, [sp, #28]
 80192e2:	2300      	movs	r3, #0
 80192e4:	930e      	str	r3, [sp, #56]	; 0x38
 80192e6:	e7bb      	b.n	8019260 <_dtoa_r+0x1b0>
 80192e8:	2301      	movs	r3, #1
 80192ea:	930a      	str	r3, [sp, #40]	; 0x28
 80192ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	dd59      	ble.n	80193a6 <_dtoa_r+0x2f6>
 80192f2:	9302      	str	r3, [sp, #8]
 80192f4:	4699      	mov	r9, r3
 80192f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80192f8:	2200      	movs	r2, #0
 80192fa:	6072      	str	r2, [r6, #4]
 80192fc:	2204      	movs	r2, #4
 80192fe:	f102 0014 	add.w	r0, r2, #20
 8019302:	4298      	cmp	r0, r3
 8019304:	6871      	ldr	r1, [r6, #4]
 8019306:	d953      	bls.n	80193b0 <_dtoa_r+0x300>
 8019308:	4620      	mov	r0, r4
 801930a:	f000 ffd7 	bl	801a2bc <_Balloc>
 801930e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019310:	6030      	str	r0, [r6, #0]
 8019312:	f1b9 0f0e 	cmp.w	r9, #14
 8019316:	f8d3 b000 	ldr.w	fp, [r3]
 801931a:	f200 80e6 	bhi.w	80194ea <_dtoa_r+0x43a>
 801931e:	2d00      	cmp	r5, #0
 8019320:	f000 80e3 	beq.w	80194ea <_dtoa_r+0x43a>
 8019324:	ed9d 7b00 	vldr	d7, [sp]
 8019328:	f1ba 0f00 	cmp.w	sl, #0
 801932c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8019330:	dd74      	ble.n	801941c <_dtoa_r+0x36c>
 8019332:	4a2a      	ldr	r2, [pc, #168]	; (80193dc <_dtoa_r+0x32c>)
 8019334:	f00a 030f 	and.w	r3, sl, #15
 8019338:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801933c:	ed93 7b00 	vldr	d7, [r3]
 8019340:	ea4f 162a 	mov.w	r6, sl, asr #4
 8019344:	06f0      	lsls	r0, r6, #27
 8019346:	ed8d 7b08 	vstr	d7, [sp, #32]
 801934a:	d565      	bpl.n	8019418 <_dtoa_r+0x368>
 801934c:	4b24      	ldr	r3, [pc, #144]	; (80193e0 <_dtoa_r+0x330>)
 801934e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019352:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019356:	f7e7 fa89 	bl	800086c <__aeabi_ddiv>
 801935a:	e9cd 0100 	strd	r0, r1, [sp]
 801935e:	f006 060f 	and.w	r6, r6, #15
 8019362:	2503      	movs	r5, #3
 8019364:	4f1e      	ldr	r7, [pc, #120]	; (80193e0 <_dtoa_r+0x330>)
 8019366:	e04c      	b.n	8019402 <_dtoa_r+0x352>
 8019368:	2301      	movs	r3, #1
 801936a:	930a      	str	r3, [sp, #40]	; 0x28
 801936c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801936e:	4453      	add	r3, sl
 8019370:	f103 0901 	add.w	r9, r3, #1
 8019374:	9302      	str	r3, [sp, #8]
 8019376:	464b      	mov	r3, r9
 8019378:	2b01      	cmp	r3, #1
 801937a:	bfb8      	it	lt
 801937c:	2301      	movlt	r3, #1
 801937e:	e7ba      	b.n	80192f6 <_dtoa_r+0x246>
 8019380:	2300      	movs	r3, #0
 8019382:	e7b2      	b.n	80192ea <_dtoa_r+0x23a>
 8019384:	2300      	movs	r3, #0
 8019386:	e7f0      	b.n	801936a <_dtoa_r+0x2ba>
 8019388:	2501      	movs	r5, #1
 801938a:	2300      	movs	r3, #0
 801938c:	9306      	str	r3, [sp, #24]
 801938e:	950a      	str	r5, [sp, #40]	; 0x28
 8019390:	f04f 33ff 	mov.w	r3, #4294967295
 8019394:	9302      	str	r3, [sp, #8]
 8019396:	4699      	mov	r9, r3
 8019398:	2200      	movs	r2, #0
 801939a:	2312      	movs	r3, #18
 801939c:	920b      	str	r2, [sp, #44]	; 0x2c
 801939e:	e7aa      	b.n	80192f6 <_dtoa_r+0x246>
 80193a0:	2301      	movs	r3, #1
 80193a2:	930a      	str	r3, [sp, #40]	; 0x28
 80193a4:	e7f4      	b.n	8019390 <_dtoa_r+0x2e0>
 80193a6:	2301      	movs	r3, #1
 80193a8:	9302      	str	r3, [sp, #8]
 80193aa:	4699      	mov	r9, r3
 80193ac:	461a      	mov	r2, r3
 80193ae:	e7f5      	b.n	801939c <_dtoa_r+0x2ec>
 80193b0:	3101      	adds	r1, #1
 80193b2:	6071      	str	r1, [r6, #4]
 80193b4:	0052      	lsls	r2, r2, #1
 80193b6:	e7a2      	b.n	80192fe <_dtoa_r+0x24e>
 80193b8:	636f4361 	.word	0x636f4361
 80193bc:	3fd287a7 	.word	0x3fd287a7
 80193c0:	8b60c8b3 	.word	0x8b60c8b3
 80193c4:	3fc68a28 	.word	0x3fc68a28
 80193c8:	509f79fb 	.word	0x509f79fb
 80193cc:	3fd34413 	.word	0x3fd34413
 80193d0:	7ff00000 	.word	0x7ff00000
 80193d4:	0801e441 	.word	0x0801e441
 80193d8:	3ff80000 	.word	0x3ff80000
 80193dc:	0801e500 	.word	0x0801e500
 80193e0:	0801e4d8 	.word	0x0801e4d8
 80193e4:	0801e4c9 	.word	0x0801e4c9
 80193e8:	07f1      	lsls	r1, r6, #31
 80193ea:	d508      	bpl.n	80193fe <_dtoa_r+0x34e>
 80193ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80193f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80193f4:	f7e7 f910 	bl	8000618 <__aeabi_dmul>
 80193f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80193fc:	3501      	adds	r5, #1
 80193fe:	1076      	asrs	r6, r6, #1
 8019400:	3708      	adds	r7, #8
 8019402:	2e00      	cmp	r6, #0
 8019404:	d1f0      	bne.n	80193e8 <_dtoa_r+0x338>
 8019406:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801940a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801940e:	f7e7 fa2d 	bl	800086c <__aeabi_ddiv>
 8019412:	e9cd 0100 	strd	r0, r1, [sp]
 8019416:	e01a      	b.n	801944e <_dtoa_r+0x39e>
 8019418:	2502      	movs	r5, #2
 801941a:	e7a3      	b.n	8019364 <_dtoa_r+0x2b4>
 801941c:	f000 80a0 	beq.w	8019560 <_dtoa_r+0x4b0>
 8019420:	f1ca 0600 	rsb	r6, sl, #0
 8019424:	4b9f      	ldr	r3, [pc, #636]	; (80196a4 <_dtoa_r+0x5f4>)
 8019426:	4fa0      	ldr	r7, [pc, #640]	; (80196a8 <_dtoa_r+0x5f8>)
 8019428:	f006 020f 	and.w	r2, r6, #15
 801942c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019434:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019438:	f7e7 f8ee 	bl	8000618 <__aeabi_dmul>
 801943c:	e9cd 0100 	strd	r0, r1, [sp]
 8019440:	1136      	asrs	r6, r6, #4
 8019442:	2300      	movs	r3, #0
 8019444:	2502      	movs	r5, #2
 8019446:	2e00      	cmp	r6, #0
 8019448:	d17f      	bne.n	801954a <_dtoa_r+0x49a>
 801944a:	2b00      	cmp	r3, #0
 801944c:	d1e1      	bne.n	8019412 <_dtoa_r+0x362>
 801944e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019450:	2b00      	cmp	r3, #0
 8019452:	f000 8087 	beq.w	8019564 <_dtoa_r+0x4b4>
 8019456:	e9dd 6700 	ldrd	r6, r7, [sp]
 801945a:	2200      	movs	r2, #0
 801945c:	4b93      	ldr	r3, [pc, #588]	; (80196ac <_dtoa_r+0x5fc>)
 801945e:	4630      	mov	r0, r6
 8019460:	4639      	mov	r1, r7
 8019462:	f7e7 fb4b 	bl	8000afc <__aeabi_dcmplt>
 8019466:	2800      	cmp	r0, #0
 8019468:	d07c      	beq.n	8019564 <_dtoa_r+0x4b4>
 801946a:	f1b9 0f00 	cmp.w	r9, #0
 801946e:	d079      	beq.n	8019564 <_dtoa_r+0x4b4>
 8019470:	9b02      	ldr	r3, [sp, #8]
 8019472:	2b00      	cmp	r3, #0
 8019474:	dd35      	ble.n	80194e2 <_dtoa_r+0x432>
 8019476:	f10a 33ff 	add.w	r3, sl, #4294967295
 801947a:	9308      	str	r3, [sp, #32]
 801947c:	4639      	mov	r1, r7
 801947e:	2200      	movs	r2, #0
 8019480:	4b8b      	ldr	r3, [pc, #556]	; (80196b0 <_dtoa_r+0x600>)
 8019482:	4630      	mov	r0, r6
 8019484:	f7e7 f8c8 	bl	8000618 <__aeabi_dmul>
 8019488:	e9cd 0100 	strd	r0, r1, [sp]
 801948c:	9f02      	ldr	r7, [sp, #8]
 801948e:	3501      	adds	r5, #1
 8019490:	4628      	mov	r0, r5
 8019492:	f7e7 f857 	bl	8000544 <__aeabi_i2d>
 8019496:	e9dd 2300 	ldrd	r2, r3, [sp]
 801949a:	f7e7 f8bd 	bl	8000618 <__aeabi_dmul>
 801949e:	2200      	movs	r2, #0
 80194a0:	4b84      	ldr	r3, [pc, #528]	; (80196b4 <_dtoa_r+0x604>)
 80194a2:	f7e6 ff03 	bl	80002ac <__adddf3>
 80194a6:	4605      	mov	r5, r0
 80194a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80194ac:	2f00      	cmp	r7, #0
 80194ae:	d15d      	bne.n	801956c <_dtoa_r+0x4bc>
 80194b0:	2200      	movs	r2, #0
 80194b2:	4b81      	ldr	r3, [pc, #516]	; (80196b8 <_dtoa_r+0x608>)
 80194b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80194b8:	f7e6 fef6 	bl	80002a8 <__aeabi_dsub>
 80194bc:	462a      	mov	r2, r5
 80194be:	4633      	mov	r3, r6
 80194c0:	e9cd 0100 	strd	r0, r1, [sp]
 80194c4:	f7e7 fb38 	bl	8000b38 <__aeabi_dcmpgt>
 80194c8:	2800      	cmp	r0, #0
 80194ca:	f040 8288 	bne.w	80199de <_dtoa_r+0x92e>
 80194ce:	462a      	mov	r2, r5
 80194d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80194d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80194d8:	f7e7 fb10 	bl	8000afc <__aeabi_dcmplt>
 80194dc:	2800      	cmp	r0, #0
 80194de:	f040 827c 	bne.w	80199da <_dtoa_r+0x92a>
 80194e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80194e6:	e9cd 2300 	strd	r2, r3, [sp]
 80194ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	f2c0 8150 	blt.w	8019792 <_dtoa_r+0x6e2>
 80194f2:	f1ba 0f0e 	cmp.w	sl, #14
 80194f6:	f300 814c 	bgt.w	8019792 <_dtoa_r+0x6e2>
 80194fa:	4b6a      	ldr	r3, [pc, #424]	; (80196a4 <_dtoa_r+0x5f4>)
 80194fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019500:	ed93 7b00 	vldr	d7, [r3]
 8019504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019506:	2b00      	cmp	r3, #0
 8019508:	ed8d 7b02 	vstr	d7, [sp, #8]
 801950c:	f280 80d8 	bge.w	80196c0 <_dtoa_r+0x610>
 8019510:	f1b9 0f00 	cmp.w	r9, #0
 8019514:	f300 80d4 	bgt.w	80196c0 <_dtoa_r+0x610>
 8019518:	f040 825e 	bne.w	80199d8 <_dtoa_r+0x928>
 801951c:	2200      	movs	r2, #0
 801951e:	4b66      	ldr	r3, [pc, #408]	; (80196b8 <_dtoa_r+0x608>)
 8019520:	ec51 0b17 	vmov	r0, r1, d7
 8019524:	f7e7 f878 	bl	8000618 <__aeabi_dmul>
 8019528:	e9dd 2300 	ldrd	r2, r3, [sp]
 801952c:	f7e7 fafa 	bl	8000b24 <__aeabi_dcmpge>
 8019530:	464f      	mov	r7, r9
 8019532:	464e      	mov	r6, r9
 8019534:	2800      	cmp	r0, #0
 8019536:	f040 8234 	bne.w	80199a2 <_dtoa_r+0x8f2>
 801953a:	2331      	movs	r3, #49	; 0x31
 801953c:	f10b 0501 	add.w	r5, fp, #1
 8019540:	f88b 3000 	strb.w	r3, [fp]
 8019544:	f10a 0a01 	add.w	sl, sl, #1
 8019548:	e22f      	b.n	80199aa <_dtoa_r+0x8fa>
 801954a:	07f2      	lsls	r2, r6, #31
 801954c:	d505      	bpl.n	801955a <_dtoa_r+0x4aa>
 801954e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019552:	f7e7 f861 	bl	8000618 <__aeabi_dmul>
 8019556:	3501      	adds	r5, #1
 8019558:	2301      	movs	r3, #1
 801955a:	1076      	asrs	r6, r6, #1
 801955c:	3708      	adds	r7, #8
 801955e:	e772      	b.n	8019446 <_dtoa_r+0x396>
 8019560:	2502      	movs	r5, #2
 8019562:	e774      	b.n	801944e <_dtoa_r+0x39e>
 8019564:	f8cd a020 	str.w	sl, [sp, #32]
 8019568:	464f      	mov	r7, r9
 801956a:	e791      	b.n	8019490 <_dtoa_r+0x3e0>
 801956c:	4b4d      	ldr	r3, [pc, #308]	; (80196a4 <_dtoa_r+0x5f4>)
 801956e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019572:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8019576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019578:	2b00      	cmp	r3, #0
 801957a:	d047      	beq.n	801960c <_dtoa_r+0x55c>
 801957c:	4602      	mov	r2, r0
 801957e:	460b      	mov	r3, r1
 8019580:	2000      	movs	r0, #0
 8019582:	494e      	ldr	r1, [pc, #312]	; (80196bc <_dtoa_r+0x60c>)
 8019584:	f7e7 f972 	bl	800086c <__aeabi_ddiv>
 8019588:	462a      	mov	r2, r5
 801958a:	4633      	mov	r3, r6
 801958c:	f7e6 fe8c 	bl	80002a8 <__aeabi_dsub>
 8019590:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019594:	465d      	mov	r5, fp
 8019596:	e9dd 0100 	ldrd	r0, r1, [sp]
 801959a:	f7e7 faed 	bl	8000b78 <__aeabi_d2iz>
 801959e:	4606      	mov	r6, r0
 80195a0:	f7e6 ffd0 	bl	8000544 <__aeabi_i2d>
 80195a4:	4602      	mov	r2, r0
 80195a6:	460b      	mov	r3, r1
 80195a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80195ac:	f7e6 fe7c 	bl	80002a8 <__aeabi_dsub>
 80195b0:	3630      	adds	r6, #48	; 0x30
 80195b2:	f805 6b01 	strb.w	r6, [r5], #1
 80195b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80195ba:	e9cd 0100 	strd	r0, r1, [sp]
 80195be:	f7e7 fa9d 	bl	8000afc <__aeabi_dcmplt>
 80195c2:	2800      	cmp	r0, #0
 80195c4:	d163      	bne.n	801968e <_dtoa_r+0x5de>
 80195c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80195ca:	2000      	movs	r0, #0
 80195cc:	4937      	ldr	r1, [pc, #220]	; (80196ac <_dtoa_r+0x5fc>)
 80195ce:	f7e6 fe6b 	bl	80002a8 <__aeabi_dsub>
 80195d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80195d6:	f7e7 fa91 	bl	8000afc <__aeabi_dcmplt>
 80195da:	2800      	cmp	r0, #0
 80195dc:	f040 80b7 	bne.w	801974e <_dtoa_r+0x69e>
 80195e0:	eba5 030b 	sub.w	r3, r5, fp
 80195e4:	429f      	cmp	r7, r3
 80195e6:	f77f af7c 	ble.w	80194e2 <_dtoa_r+0x432>
 80195ea:	2200      	movs	r2, #0
 80195ec:	4b30      	ldr	r3, [pc, #192]	; (80196b0 <_dtoa_r+0x600>)
 80195ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80195f2:	f7e7 f811 	bl	8000618 <__aeabi_dmul>
 80195f6:	2200      	movs	r2, #0
 80195f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80195fc:	4b2c      	ldr	r3, [pc, #176]	; (80196b0 <_dtoa_r+0x600>)
 80195fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019602:	f7e7 f809 	bl	8000618 <__aeabi_dmul>
 8019606:	e9cd 0100 	strd	r0, r1, [sp]
 801960a:	e7c4      	b.n	8019596 <_dtoa_r+0x4e6>
 801960c:	462a      	mov	r2, r5
 801960e:	4633      	mov	r3, r6
 8019610:	f7e7 f802 	bl	8000618 <__aeabi_dmul>
 8019614:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019618:	eb0b 0507 	add.w	r5, fp, r7
 801961c:	465e      	mov	r6, fp
 801961e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019622:	f7e7 faa9 	bl	8000b78 <__aeabi_d2iz>
 8019626:	4607      	mov	r7, r0
 8019628:	f7e6 ff8c 	bl	8000544 <__aeabi_i2d>
 801962c:	3730      	adds	r7, #48	; 0x30
 801962e:	4602      	mov	r2, r0
 8019630:	460b      	mov	r3, r1
 8019632:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019636:	f7e6 fe37 	bl	80002a8 <__aeabi_dsub>
 801963a:	f806 7b01 	strb.w	r7, [r6], #1
 801963e:	42ae      	cmp	r6, r5
 8019640:	e9cd 0100 	strd	r0, r1, [sp]
 8019644:	f04f 0200 	mov.w	r2, #0
 8019648:	d126      	bne.n	8019698 <_dtoa_r+0x5e8>
 801964a:	4b1c      	ldr	r3, [pc, #112]	; (80196bc <_dtoa_r+0x60c>)
 801964c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019650:	f7e6 fe2c 	bl	80002ac <__adddf3>
 8019654:	4602      	mov	r2, r0
 8019656:	460b      	mov	r3, r1
 8019658:	e9dd 0100 	ldrd	r0, r1, [sp]
 801965c:	f7e7 fa6c 	bl	8000b38 <__aeabi_dcmpgt>
 8019660:	2800      	cmp	r0, #0
 8019662:	d174      	bne.n	801974e <_dtoa_r+0x69e>
 8019664:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019668:	2000      	movs	r0, #0
 801966a:	4914      	ldr	r1, [pc, #80]	; (80196bc <_dtoa_r+0x60c>)
 801966c:	f7e6 fe1c 	bl	80002a8 <__aeabi_dsub>
 8019670:	4602      	mov	r2, r0
 8019672:	460b      	mov	r3, r1
 8019674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019678:	f7e7 fa40 	bl	8000afc <__aeabi_dcmplt>
 801967c:	2800      	cmp	r0, #0
 801967e:	f43f af30 	beq.w	80194e2 <_dtoa_r+0x432>
 8019682:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019686:	2b30      	cmp	r3, #48	; 0x30
 8019688:	f105 32ff 	add.w	r2, r5, #4294967295
 801968c:	d002      	beq.n	8019694 <_dtoa_r+0x5e4>
 801968e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019692:	e04a      	b.n	801972a <_dtoa_r+0x67a>
 8019694:	4615      	mov	r5, r2
 8019696:	e7f4      	b.n	8019682 <_dtoa_r+0x5d2>
 8019698:	4b05      	ldr	r3, [pc, #20]	; (80196b0 <_dtoa_r+0x600>)
 801969a:	f7e6 ffbd 	bl	8000618 <__aeabi_dmul>
 801969e:	e9cd 0100 	strd	r0, r1, [sp]
 80196a2:	e7bc      	b.n	801961e <_dtoa_r+0x56e>
 80196a4:	0801e500 	.word	0x0801e500
 80196a8:	0801e4d8 	.word	0x0801e4d8
 80196ac:	3ff00000 	.word	0x3ff00000
 80196b0:	40240000 	.word	0x40240000
 80196b4:	401c0000 	.word	0x401c0000
 80196b8:	40140000 	.word	0x40140000
 80196bc:	3fe00000 	.word	0x3fe00000
 80196c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80196c4:	465d      	mov	r5, fp
 80196c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80196ca:	4630      	mov	r0, r6
 80196cc:	4639      	mov	r1, r7
 80196ce:	f7e7 f8cd 	bl	800086c <__aeabi_ddiv>
 80196d2:	f7e7 fa51 	bl	8000b78 <__aeabi_d2iz>
 80196d6:	4680      	mov	r8, r0
 80196d8:	f7e6 ff34 	bl	8000544 <__aeabi_i2d>
 80196dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80196e0:	f7e6 ff9a 	bl	8000618 <__aeabi_dmul>
 80196e4:	4602      	mov	r2, r0
 80196e6:	460b      	mov	r3, r1
 80196e8:	4630      	mov	r0, r6
 80196ea:	4639      	mov	r1, r7
 80196ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80196f0:	f7e6 fdda 	bl	80002a8 <__aeabi_dsub>
 80196f4:	f805 6b01 	strb.w	r6, [r5], #1
 80196f8:	eba5 060b 	sub.w	r6, r5, fp
 80196fc:	45b1      	cmp	r9, r6
 80196fe:	4602      	mov	r2, r0
 8019700:	460b      	mov	r3, r1
 8019702:	d139      	bne.n	8019778 <_dtoa_r+0x6c8>
 8019704:	f7e6 fdd2 	bl	80002ac <__adddf3>
 8019708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801970c:	4606      	mov	r6, r0
 801970e:	460f      	mov	r7, r1
 8019710:	f7e7 fa12 	bl	8000b38 <__aeabi_dcmpgt>
 8019714:	b9c8      	cbnz	r0, 801974a <_dtoa_r+0x69a>
 8019716:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801971a:	4630      	mov	r0, r6
 801971c:	4639      	mov	r1, r7
 801971e:	f7e7 f9e3 	bl	8000ae8 <__aeabi_dcmpeq>
 8019722:	b110      	cbz	r0, 801972a <_dtoa_r+0x67a>
 8019724:	f018 0f01 	tst.w	r8, #1
 8019728:	d10f      	bne.n	801974a <_dtoa_r+0x69a>
 801972a:	9904      	ldr	r1, [sp, #16]
 801972c:	4620      	mov	r0, r4
 801972e:	f000 fdf9 	bl	801a324 <_Bfree>
 8019732:	2300      	movs	r3, #0
 8019734:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019736:	702b      	strb	r3, [r5, #0]
 8019738:	f10a 0301 	add.w	r3, sl, #1
 801973c:	6013      	str	r3, [r2, #0]
 801973e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019740:	2b00      	cmp	r3, #0
 8019742:	f000 8241 	beq.w	8019bc8 <_dtoa_r+0xb18>
 8019746:	601d      	str	r5, [r3, #0]
 8019748:	e23e      	b.n	8019bc8 <_dtoa_r+0xb18>
 801974a:	f8cd a020 	str.w	sl, [sp, #32]
 801974e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019752:	2a39      	cmp	r2, #57	; 0x39
 8019754:	f105 33ff 	add.w	r3, r5, #4294967295
 8019758:	d108      	bne.n	801976c <_dtoa_r+0x6bc>
 801975a:	459b      	cmp	fp, r3
 801975c:	d10a      	bne.n	8019774 <_dtoa_r+0x6c4>
 801975e:	9b08      	ldr	r3, [sp, #32]
 8019760:	3301      	adds	r3, #1
 8019762:	9308      	str	r3, [sp, #32]
 8019764:	2330      	movs	r3, #48	; 0x30
 8019766:	f88b 3000 	strb.w	r3, [fp]
 801976a:	465b      	mov	r3, fp
 801976c:	781a      	ldrb	r2, [r3, #0]
 801976e:	3201      	adds	r2, #1
 8019770:	701a      	strb	r2, [r3, #0]
 8019772:	e78c      	b.n	801968e <_dtoa_r+0x5de>
 8019774:	461d      	mov	r5, r3
 8019776:	e7ea      	b.n	801974e <_dtoa_r+0x69e>
 8019778:	2200      	movs	r2, #0
 801977a:	4b9b      	ldr	r3, [pc, #620]	; (80199e8 <_dtoa_r+0x938>)
 801977c:	f7e6 ff4c 	bl	8000618 <__aeabi_dmul>
 8019780:	2200      	movs	r2, #0
 8019782:	2300      	movs	r3, #0
 8019784:	4606      	mov	r6, r0
 8019786:	460f      	mov	r7, r1
 8019788:	f7e7 f9ae 	bl	8000ae8 <__aeabi_dcmpeq>
 801978c:	2800      	cmp	r0, #0
 801978e:	d09a      	beq.n	80196c6 <_dtoa_r+0x616>
 8019790:	e7cb      	b.n	801972a <_dtoa_r+0x67a>
 8019792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019794:	2a00      	cmp	r2, #0
 8019796:	f000 808b 	beq.w	80198b0 <_dtoa_r+0x800>
 801979a:	9a06      	ldr	r2, [sp, #24]
 801979c:	2a01      	cmp	r2, #1
 801979e:	dc6e      	bgt.n	801987e <_dtoa_r+0x7ce>
 80197a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80197a2:	2a00      	cmp	r2, #0
 80197a4:	d067      	beq.n	8019876 <_dtoa_r+0x7c6>
 80197a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80197aa:	9f07      	ldr	r7, [sp, #28]
 80197ac:	9d05      	ldr	r5, [sp, #20]
 80197ae:	9a05      	ldr	r2, [sp, #20]
 80197b0:	2101      	movs	r1, #1
 80197b2:	441a      	add	r2, r3
 80197b4:	4620      	mov	r0, r4
 80197b6:	9205      	str	r2, [sp, #20]
 80197b8:	4498      	add	r8, r3
 80197ba:	f000 fe91 	bl	801a4e0 <__i2b>
 80197be:	4606      	mov	r6, r0
 80197c0:	2d00      	cmp	r5, #0
 80197c2:	dd0c      	ble.n	80197de <_dtoa_r+0x72e>
 80197c4:	f1b8 0f00 	cmp.w	r8, #0
 80197c8:	dd09      	ble.n	80197de <_dtoa_r+0x72e>
 80197ca:	4545      	cmp	r5, r8
 80197cc:	9a05      	ldr	r2, [sp, #20]
 80197ce:	462b      	mov	r3, r5
 80197d0:	bfa8      	it	ge
 80197d2:	4643      	movge	r3, r8
 80197d4:	1ad2      	subs	r2, r2, r3
 80197d6:	9205      	str	r2, [sp, #20]
 80197d8:	1aed      	subs	r5, r5, r3
 80197da:	eba8 0803 	sub.w	r8, r8, r3
 80197de:	9b07      	ldr	r3, [sp, #28]
 80197e0:	b1eb      	cbz	r3, 801981e <_dtoa_r+0x76e>
 80197e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d067      	beq.n	80198b8 <_dtoa_r+0x808>
 80197e8:	b18f      	cbz	r7, 801980e <_dtoa_r+0x75e>
 80197ea:	4631      	mov	r1, r6
 80197ec:	463a      	mov	r2, r7
 80197ee:	4620      	mov	r0, r4
 80197f0:	f000 ff16 	bl	801a620 <__pow5mult>
 80197f4:	9a04      	ldr	r2, [sp, #16]
 80197f6:	4601      	mov	r1, r0
 80197f8:	4606      	mov	r6, r0
 80197fa:	4620      	mov	r0, r4
 80197fc:	f000 fe79 	bl	801a4f2 <__multiply>
 8019800:	9904      	ldr	r1, [sp, #16]
 8019802:	9008      	str	r0, [sp, #32]
 8019804:	4620      	mov	r0, r4
 8019806:	f000 fd8d 	bl	801a324 <_Bfree>
 801980a:	9b08      	ldr	r3, [sp, #32]
 801980c:	9304      	str	r3, [sp, #16]
 801980e:	9b07      	ldr	r3, [sp, #28]
 8019810:	1bda      	subs	r2, r3, r7
 8019812:	d004      	beq.n	801981e <_dtoa_r+0x76e>
 8019814:	9904      	ldr	r1, [sp, #16]
 8019816:	4620      	mov	r0, r4
 8019818:	f000 ff02 	bl	801a620 <__pow5mult>
 801981c:	9004      	str	r0, [sp, #16]
 801981e:	2101      	movs	r1, #1
 8019820:	4620      	mov	r0, r4
 8019822:	f000 fe5d 	bl	801a4e0 <__i2b>
 8019826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019828:	4607      	mov	r7, r0
 801982a:	2b00      	cmp	r3, #0
 801982c:	f000 81d0 	beq.w	8019bd0 <_dtoa_r+0xb20>
 8019830:	461a      	mov	r2, r3
 8019832:	4601      	mov	r1, r0
 8019834:	4620      	mov	r0, r4
 8019836:	f000 fef3 	bl	801a620 <__pow5mult>
 801983a:	9b06      	ldr	r3, [sp, #24]
 801983c:	2b01      	cmp	r3, #1
 801983e:	4607      	mov	r7, r0
 8019840:	dc40      	bgt.n	80198c4 <_dtoa_r+0x814>
 8019842:	9b00      	ldr	r3, [sp, #0]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d139      	bne.n	80198bc <_dtoa_r+0x80c>
 8019848:	9b01      	ldr	r3, [sp, #4]
 801984a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801984e:	2b00      	cmp	r3, #0
 8019850:	d136      	bne.n	80198c0 <_dtoa_r+0x810>
 8019852:	9b01      	ldr	r3, [sp, #4]
 8019854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019858:	0d1b      	lsrs	r3, r3, #20
 801985a:	051b      	lsls	r3, r3, #20
 801985c:	b12b      	cbz	r3, 801986a <_dtoa_r+0x7ba>
 801985e:	9b05      	ldr	r3, [sp, #20]
 8019860:	3301      	adds	r3, #1
 8019862:	9305      	str	r3, [sp, #20]
 8019864:	f108 0801 	add.w	r8, r8, #1
 8019868:	2301      	movs	r3, #1
 801986a:	9307      	str	r3, [sp, #28]
 801986c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801986e:	2b00      	cmp	r3, #0
 8019870:	d12a      	bne.n	80198c8 <_dtoa_r+0x818>
 8019872:	2001      	movs	r0, #1
 8019874:	e030      	b.n	80198d8 <_dtoa_r+0x828>
 8019876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019878:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801987c:	e795      	b.n	80197aa <_dtoa_r+0x6fa>
 801987e:	9b07      	ldr	r3, [sp, #28]
 8019880:	f109 37ff 	add.w	r7, r9, #4294967295
 8019884:	42bb      	cmp	r3, r7
 8019886:	bfbf      	itttt	lt
 8019888:	9b07      	ldrlt	r3, [sp, #28]
 801988a:	9707      	strlt	r7, [sp, #28]
 801988c:	1afa      	sublt	r2, r7, r3
 801988e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8019890:	bfbb      	ittet	lt
 8019892:	189b      	addlt	r3, r3, r2
 8019894:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019896:	1bdf      	subge	r7, r3, r7
 8019898:	2700      	movlt	r7, #0
 801989a:	f1b9 0f00 	cmp.w	r9, #0
 801989e:	bfb5      	itete	lt
 80198a0:	9b05      	ldrlt	r3, [sp, #20]
 80198a2:	9d05      	ldrge	r5, [sp, #20]
 80198a4:	eba3 0509 	sublt.w	r5, r3, r9
 80198a8:	464b      	movge	r3, r9
 80198aa:	bfb8      	it	lt
 80198ac:	2300      	movlt	r3, #0
 80198ae:	e77e      	b.n	80197ae <_dtoa_r+0x6fe>
 80198b0:	9f07      	ldr	r7, [sp, #28]
 80198b2:	9d05      	ldr	r5, [sp, #20]
 80198b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80198b6:	e783      	b.n	80197c0 <_dtoa_r+0x710>
 80198b8:	9a07      	ldr	r2, [sp, #28]
 80198ba:	e7ab      	b.n	8019814 <_dtoa_r+0x764>
 80198bc:	2300      	movs	r3, #0
 80198be:	e7d4      	b.n	801986a <_dtoa_r+0x7ba>
 80198c0:	9b00      	ldr	r3, [sp, #0]
 80198c2:	e7d2      	b.n	801986a <_dtoa_r+0x7ba>
 80198c4:	2300      	movs	r3, #0
 80198c6:	9307      	str	r3, [sp, #28]
 80198c8:	693b      	ldr	r3, [r7, #16]
 80198ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80198ce:	6918      	ldr	r0, [r3, #16]
 80198d0:	f000 fdb8 	bl	801a444 <__hi0bits>
 80198d4:	f1c0 0020 	rsb	r0, r0, #32
 80198d8:	4440      	add	r0, r8
 80198da:	f010 001f 	ands.w	r0, r0, #31
 80198de:	d047      	beq.n	8019970 <_dtoa_r+0x8c0>
 80198e0:	f1c0 0320 	rsb	r3, r0, #32
 80198e4:	2b04      	cmp	r3, #4
 80198e6:	dd3b      	ble.n	8019960 <_dtoa_r+0x8b0>
 80198e8:	9b05      	ldr	r3, [sp, #20]
 80198ea:	f1c0 001c 	rsb	r0, r0, #28
 80198ee:	4403      	add	r3, r0
 80198f0:	9305      	str	r3, [sp, #20]
 80198f2:	4405      	add	r5, r0
 80198f4:	4480      	add	r8, r0
 80198f6:	9b05      	ldr	r3, [sp, #20]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	dd05      	ble.n	8019908 <_dtoa_r+0x858>
 80198fc:	461a      	mov	r2, r3
 80198fe:	9904      	ldr	r1, [sp, #16]
 8019900:	4620      	mov	r0, r4
 8019902:	f000 fedb 	bl	801a6bc <__lshift>
 8019906:	9004      	str	r0, [sp, #16]
 8019908:	f1b8 0f00 	cmp.w	r8, #0
 801990c:	dd05      	ble.n	801991a <_dtoa_r+0x86a>
 801990e:	4639      	mov	r1, r7
 8019910:	4642      	mov	r2, r8
 8019912:	4620      	mov	r0, r4
 8019914:	f000 fed2 	bl	801a6bc <__lshift>
 8019918:	4607      	mov	r7, r0
 801991a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801991c:	b353      	cbz	r3, 8019974 <_dtoa_r+0x8c4>
 801991e:	4639      	mov	r1, r7
 8019920:	9804      	ldr	r0, [sp, #16]
 8019922:	f000 ff1f 	bl	801a764 <__mcmp>
 8019926:	2800      	cmp	r0, #0
 8019928:	da24      	bge.n	8019974 <_dtoa_r+0x8c4>
 801992a:	2300      	movs	r3, #0
 801992c:	220a      	movs	r2, #10
 801992e:	9904      	ldr	r1, [sp, #16]
 8019930:	4620      	mov	r0, r4
 8019932:	f000 fd0e 	bl	801a352 <__multadd>
 8019936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019938:	9004      	str	r0, [sp, #16]
 801993a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801993e:	2b00      	cmp	r3, #0
 8019940:	f000 814d 	beq.w	8019bde <_dtoa_r+0xb2e>
 8019944:	2300      	movs	r3, #0
 8019946:	4631      	mov	r1, r6
 8019948:	220a      	movs	r2, #10
 801994a:	4620      	mov	r0, r4
 801994c:	f000 fd01 	bl	801a352 <__multadd>
 8019950:	9b02      	ldr	r3, [sp, #8]
 8019952:	2b00      	cmp	r3, #0
 8019954:	4606      	mov	r6, r0
 8019956:	dc4f      	bgt.n	80199f8 <_dtoa_r+0x948>
 8019958:	9b06      	ldr	r3, [sp, #24]
 801995a:	2b02      	cmp	r3, #2
 801995c:	dd4c      	ble.n	80199f8 <_dtoa_r+0x948>
 801995e:	e011      	b.n	8019984 <_dtoa_r+0x8d4>
 8019960:	d0c9      	beq.n	80198f6 <_dtoa_r+0x846>
 8019962:	9a05      	ldr	r2, [sp, #20]
 8019964:	331c      	adds	r3, #28
 8019966:	441a      	add	r2, r3
 8019968:	9205      	str	r2, [sp, #20]
 801996a:	441d      	add	r5, r3
 801996c:	4498      	add	r8, r3
 801996e:	e7c2      	b.n	80198f6 <_dtoa_r+0x846>
 8019970:	4603      	mov	r3, r0
 8019972:	e7f6      	b.n	8019962 <_dtoa_r+0x8b2>
 8019974:	f1b9 0f00 	cmp.w	r9, #0
 8019978:	dc38      	bgt.n	80199ec <_dtoa_r+0x93c>
 801997a:	9b06      	ldr	r3, [sp, #24]
 801997c:	2b02      	cmp	r3, #2
 801997e:	dd35      	ble.n	80199ec <_dtoa_r+0x93c>
 8019980:	f8cd 9008 	str.w	r9, [sp, #8]
 8019984:	9b02      	ldr	r3, [sp, #8]
 8019986:	b963      	cbnz	r3, 80199a2 <_dtoa_r+0x8f2>
 8019988:	4639      	mov	r1, r7
 801998a:	2205      	movs	r2, #5
 801998c:	4620      	mov	r0, r4
 801998e:	f000 fce0 	bl	801a352 <__multadd>
 8019992:	4601      	mov	r1, r0
 8019994:	4607      	mov	r7, r0
 8019996:	9804      	ldr	r0, [sp, #16]
 8019998:	f000 fee4 	bl	801a764 <__mcmp>
 801999c:	2800      	cmp	r0, #0
 801999e:	f73f adcc 	bgt.w	801953a <_dtoa_r+0x48a>
 80199a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199a4:	465d      	mov	r5, fp
 80199a6:	ea6f 0a03 	mvn.w	sl, r3
 80199aa:	f04f 0900 	mov.w	r9, #0
 80199ae:	4639      	mov	r1, r7
 80199b0:	4620      	mov	r0, r4
 80199b2:	f000 fcb7 	bl	801a324 <_Bfree>
 80199b6:	2e00      	cmp	r6, #0
 80199b8:	f43f aeb7 	beq.w	801972a <_dtoa_r+0x67a>
 80199bc:	f1b9 0f00 	cmp.w	r9, #0
 80199c0:	d005      	beq.n	80199ce <_dtoa_r+0x91e>
 80199c2:	45b1      	cmp	r9, r6
 80199c4:	d003      	beq.n	80199ce <_dtoa_r+0x91e>
 80199c6:	4649      	mov	r1, r9
 80199c8:	4620      	mov	r0, r4
 80199ca:	f000 fcab 	bl	801a324 <_Bfree>
 80199ce:	4631      	mov	r1, r6
 80199d0:	4620      	mov	r0, r4
 80199d2:	f000 fca7 	bl	801a324 <_Bfree>
 80199d6:	e6a8      	b.n	801972a <_dtoa_r+0x67a>
 80199d8:	2700      	movs	r7, #0
 80199da:	463e      	mov	r6, r7
 80199dc:	e7e1      	b.n	80199a2 <_dtoa_r+0x8f2>
 80199de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80199e2:	463e      	mov	r6, r7
 80199e4:	e5a9      	b.n	801953a <_dtoa_r+0x48a>
 80199e6:	bf00      	nop
 80199e8:	40240000 	.word	0x40240000
 80199ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80199ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	f000 80fa 	beq.w	8019bec <_dtoa_r+0xb3c>
 80199f8:	2d00      	cmp	r5, #0
 80199fa:	dd05      	ble.n	8019a08 <_dtoa_r+0x958>
 80199fc:	4631      	mov	r1, r6
 80199fe:	462a      	mov	r2, r5
 8019a00:	4620      	mov	r0, r4
 8019a02:	f000 fe5b 	bl	801a6bc <__lshift>
 8019a06:	4606      	mov	r6, r0
 8019a08:	9b07      	ldr	r3, [sp, #28]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d04c      	beq.n	8019aa8 <_dtoa_r+0x9f8>
 8019a0e:	6871      	ldr	r1, [r6, #4]
 8019a10:	4620      	mov	r0, r4
 8019a12:	f000 fc53 	bl	801a2bc <_Balloc>
 8019a16:	6932      	ldr	r2, [r6, #16]
 8019a18:	3202      	adds	r2, #2
 8019a1a:	4605      	mov	r5, r0
 8019a1c:	0092      	lsls	r2, r2, #2
 8019a1e:	f106 010c 	add.w	r1, r6, #12
 8019a22:	300c      	adds	r0, #12
 8019a24:	f7fd fc44 	bl	80172b0 <memcpy>
 8019a28:	2201      	movs	r2, #1
 8019a2a:	4629      	mov	r1, r5
 8019a2c:	4620      	mov	r0, r4
 8019a2e:	f000 fe45 	bl	801a6bc <__lshift>
 8019a32:	9b00      	ldr	r3, [sp, #0]
 8019a34:	f8cd b014 	str.w	fp, [sp, #20]
 8019a38:	f003 0301 	and.w	r3, r3, #1
 8019a3c:	46b1      	mov	r9, r6
 8019a3e:	9307      	str	r3, [sp, #28]
 8019a40:	4606      	mov	r6, r0
 8019a42:	4639      	mov	r1, r7
 8019a44:	9804      	ldr	r0, [sp, #16]
 8019a46:	f7ff faa7 	bl	8018f98 <quorem>
 8019a4a:	4649      	mov	r1, r9
 8019a4c:	4605      	mov	r5, r0
 8019a4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8019a52:	9804      	ldr	r0, [sp, #16]
 8019a54:	f000 fe86 	bl	801a764 <__mcmp>
 8019a58:	4632      	mov	r2, r6
 8019a5a:	9000      	str	r0, [sp, #0]
 8019a5c:	4639      	mov	r1, r7
 8019a5e:	4620      	mov	r0, r4
 8019a60:	f000 fe9a 	bl	801a798 <__mdiff>
 8019a64:	68c3      	ldr	r3, [r0, #12]
 8019a66:	4602      	mov	r2, r0
 8019a68:	bb03      	cbnz	r3, 8019aac <_dtoa_r+0x9fc>
 8019a6a:	4601      	mov	r1, r0
 8019a6c:	9008      	str	r0, [sp, #32]
 8019a6e:	9804      	ldr	r0, [sp, #16]
 8019a70:	f000 fe78 	bl	801a764 <__mcmp>
 8019a74:	9a08      	ldr	r2, [sp, #32]
 8019a76:	4603      	mov	r3, r0
 8019a78:	4611      	mov	r1, r2
 8019a7a:	4620      	mov	r0, r4
 8019a7c:	9308      	str	r3, [sp, #32]
 8019a7e:	f000 fc51 	bl	801a324 <_Bfree>
 8019a82:	9b08      	ldr	r3, [sp, #32]
 8019a84:	b9a3      	cbnz	r3, 8019ab0 <_dtoa_r+0xa00>
 8019a86:	9a06      	ldr	r2, [sp, #24]
 8019a88:	b992      	cbnz	r2, 8019ab0 <_dtoa_r+0xa00>
 8019a8a:	9a07      	ldr	r2, [sp, #28]
 8019a8c:	b982      	cbnz	r2, 8019ab0 <_dtoa_r+0xa00>
 8019a8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019a92:	d029      	beq.n	8019ae8 <_dtoa_r+0xa38>
 8019a94:	9b00      	ldr	r3, [sp, #0]
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	dd01      	ble.n	8019a9e <_dtoa_r+0x9ee>
 8019a9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8019a9e:	9b05      	ldr	r3, [sp, #20]
 8019aa0:	1c5d      	adds	r5, r3, #1
 8019aa2:	f883 8000 	strb.w	r8, [r3]
 8019aa6:	e782      	b.n	80199ae <_dtoa_r+0x8fe>
 8019aa8:	4630      	mov	r0, r6
 8019aaa:	e7c2      	b.n	8019a32 <_dtoa_r+0x982>
 8019aac:	2301      	movs	r3, #1
 8019aae:	e7e3      	b.n	8019a78 <_dtoa_r+0x9c8>
 8019ab0:	9a00      	ldr	r2, [sp, #0]
 8019ab2:	2a00      	cmp	r2, #0
 8019ab4:	db04      	blt.n	8019ac0 <_dtoa_r+0xa10>
 8019ab6:	d125      	bne.n	8019b04 <_dtoa_r+0xa54>
 8019ab8:	9a06      	ldr	r2, [sp, #24]
 8019aba:	bb1a      	cbnz	r2, 8019b04 <_dtoa_r+0xa54>
 8019abc:	9a07      	ldr	r2, [sp, #28]
 8019abe:	bb0a      	cbnz	r2, 8019b04 <_dtoa_r+0xa54>
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	ddec      	ble.n	8019a9e <_dtoa_r+0x9ee>
 8019ac4:	2201      	movs	r2, #1
 8019ac6:	9904      	ldr	r1, [sp, #16]
 8019ac8:	4620      	mov	r0, r4
 8019aca:	f000 fdf7 	bl	801a6bc <__lshift>
 8019ace:	4639      	mov	r1, r7
 8019ad0:	9004      	str	r0, [sp, #16]
 8019ad2:	f000 fe47 	bl	801a764 <__mcmp>
 8019ad6:	2800      	cmp	r0, #0
 8019ad8:	dc03      	bgt.n	8019ae2 <_dtoa_r+0xa32>
 8019ada:	d1e0      	bne.n	8019a9e <_dtoa_r+0x9ee>
 8019adc:	f018 0f01 	tst.w	r8, #1
 8019ae0:	d0dd      	beq.n	8019a9e <_dtoa_r+0x9ee>
 8019ae2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019ae6:	d1d8      	bne.n	8019a9a <_dtoa_r+0x9ea>
 8019ae8:	9b05      	ldr	r3, [sp, #20]
 8019aea:	9a05      	ldr	r2, [sp, #20]
 8019aec:	1c5d      	adds	r5, r3, #1
 8019aee:	2339      	movs	r3, #57	; 0x39
 8019af0:	7013      	strb	r3, [r2, #0]
 8019af2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019af6:	2b39      	cmp	r3, #57	; 0x39
 8019af8:	f105 32ff 	add.w	r2, r5, #4294967295
 8019afc:	d04f      	beq.n	8019b9e <_dtoa_r+0xaee>
 8019afe:	3301      	adds	r3, #1
 8019b00:	7013      	strb	r3, [r2, #0]
 8019b02:	e754      	b.n	80199ae <_dtoa_r+0x8fe>
 8019b04:	9a05      	ldr	r2, [sp, #20]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	f102 0501 	add.w	r5, r2, #1
 8019b0c:	dd06      	ble.n	8019b1c <_dtoa_r+0xa6c>
 8019b0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019b12:	d0e9      	beq.n	8019ae8 <_dtoa_r+0xa38>
 8019b14:	f108 0801 	add.w	r8, r8, #1
 8019b18:	9b05      	ldr	r3, [sp, #20]
 8019b1a:	e7c2      	b.n	8019aa2 <_dtoa_r+0x9f2>
 8019b1c:	9a02      	ldr	r2, [sp, #8]
 8019b1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8019b22:	eba5 030b 	sub.w	r3, r5, fp
 8019b26:	4293      	cmp	r3, r2
 8019b28:	d021      	beq.n	8019b6e <_dtoa_r+0xabe>
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	220a      	movs	r2, #10
 8019b2e:	9904      	ldr	r1, [sp, #16]
 8019b30:	4620      	mov	r0, r4
 8019b32:	f000 fc0e 	bl	801a352 <__multadd>
 8019b36:	45b1      	cmp	r9, r6
 8019b38:	9004      	str	r0, [sp, #16]
 8019b3a:	f04f 0300 	mov.w	r3, #0
 8019b3e:	f04f 020a 	mov.w	r2, #10
 8019b42:	4649      	mov	r1, r9
 8019b44:	4620      	mov	r0, r4
 8019b46:	d105      	bne.n	8019b54 <_dtoa_r+0xaa4>
 8019b48:	f000 fc03 	bl	801a352 <__multadd>
 8019b4c:	4681      	mov	r9, r0
 8019b4e:	4606      	mov	r6, r0
 8019b50:	9505      	str	r5, [sp, #20]
 8019b52:	e776      	b.n	8019a42 <_dtoa_r+0x992>
 8019b54:	f000 fbfd 	bl	801a352 <__multadd>
 8019b58:	4631      	mov	r1, r6
 8019b5a:	4681      	mov	r9, r0
 8019b5c:	2300      	movs	r3, #0
 8019b5e:	220a      	movs	r2, #10
 8019b60:	4620      	mov	r0, r4
 8019b62:	f000 fbf6 	bl	801a352 <__multadd>
 8019b66:	4606      	mov	r6, r0
 8019b68:	e7f2      	b.n	8019b50 <_dtoa_r+0xaa0>
 8019b6a:	f04f 0900 	mov.w	r9, #0
 8019b6e:	2201      	movs	r2, #1
 8019b70:	9904      	ldr	r1, [sp, #16]
 8019b72:	4620      	mov	r0, r4
 8019b74:	f000 fda2 	bl	801a6bc <__lshift>
 8019b78:	4639      	mov	r1, r7
 8019b7a:	9004      	str	r0, [sp, #16]
 8019b7c:	f000 fdf2 	bl	801a764 <__mcmp>
 8019b80:	2800      	cmp	r0, #0
 8019b82:	dcb6      	bgt.n	8019af2 <_dtoa_r+0xa42>
 8019b84:	d102      	bne.n	8019b8c <_dtoa_r+0xadc>
 8019b86:	f018 0f01 	tst.w	r8, #1
 8019b8a:	d1b2      	bne.n	8019af2 <_dtoa_r+0xa42>
 8019b8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019b90:	2b30      	cmp	r3, #48	; 0x30
 8019b92:	f105 32ff 	add.w	r2, r5, #4294967295
 8019b96:	f47f af0a 	bne.w	80199ae <_dtoa_r+0x8fe>
 8019b9a:	4615      	mov	r5, r2
 8019b9c:	e7f6      	b.n	8019b8c <_dtoa_r+0xadc>
 8019b9e:	4593      	cmp	fp, r2
 8019ba0:	d105      	bne.n	8019bae <_dtoa_r+0xafe>
 8019ba2:	2331      	movs	r3, #49	; 0x31
 8019ba4:	f10a 0a01 	add.w	sl, sl, #1
 8019ba8:	f88b 3000 	strb.w	r3, [fp]
 8019bac:	e6ff      	b.n	80199ae <_dtoa_r+0x8fe>
 8019bae:	4615      	mov	r5, r2
 8019bb0:	e79f      	b.n	8019af2 <_dtoa_r+0xa42>
 8019bb2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8019c18 <_dtoa_r+0xb68>
 8019bb6:	e007      	b.n	8019bc8 <_dtoa_r+0xb18>
 8019bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019bba:	f8df b060 	ldr.w	fp, [pc, #96]	; 8019c1c <_dtoa_r+0xb6c>
 8019bbe:	b11b      	cbz	r3, 8019bc8 <_dtoa_r+0xb18>
 8019bc0:	f10b 0308 	add.w	r3, fp, #8
 8019bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019bc6:	6013      	str	r3, [r2, #0]
 8019bc8:	4658      	mov	r0, fp
 8019bca:	b017      	add	sp, #92	; 0x5c
 8019bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bd0:	9b06      	ldr	r3, [sp, #24]
 8019bd2:	2b01      	cmp	r3, #1
 8019bd4:	f77f ae35 	ble.w	8019842 <_dtoa_r+0x792>
 8019bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019bda:	9307      	str	r3, [sp, #28]
 8019bdc:	e649      	b.n	8019872 <_dtoa_r+0x7c2>
 8019bde:	9b02      	ldr	r3, [sp, #8]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	dc03      	bgt.n	8019bec <_dtoa_r+0xb3c>
 8019be4:	9b06      	ldr	r3, [sp, #24]
 8019be6:	2b02      	cmp	r3, #2
 8019be8:	f73f aecc 	bgt.w	8019984 <_dtoa_r+0x8d4>
 8019bec:	465d      	mov	r5, fp
 8019bee:	4639      	mov	r1, r7
 8019bf0:	9804      	ldr	r0, [sp, #16]
 8019bf2:	f7ff f9d1 	bl	8018f98 <quorem>
 8019bf6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8019bfa:	f805 8b01 	strb.w	r8, [r5], #1
 8019bfe:	9a02      	ldr	r2, [sp, #8]
 8019c00:	eba5 030b 	sub.w	r3, r5, fp
 8019c04:	429a      	cmp	r2, r3
 8019c06:	ddb0      	ble.n	8019b6a <_dtoa_r+0xaba>
 8019c08:	2300      	movs	r3, #0
 8019c0a:	220a      	movs	r2, #10
 8019c0c:	9904      	ldr	r1, [sp, #16]
 8019c0e:	4620      	mov	r0, r4
 8019c10:	f000 fb9f 	bl	801a352 <__multadd>
 8019c14:	9004      	str	r0, [sp, #16]
 8019c16:	e7ea      	b.n	8019bee <_dtoa_r+0xb3e>
 8019c18:	0801e440 	.word	0x0801e440
 8019c1c:	0801e4c0 	.word	0x0801e4c0

08019c20 <rshift>:
 8019c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c22:	6906      	ldr	r6, [r0, #16]
 8019c24:	114b      	asrs	r3, r1, #5
 8019c26:	429e      	cmp	r6, r3
 8019c28:	f100 0414 	add.w	r4, r0, #20
 8019c2c:	dd30      	ble.n	8019c90 <rshift+0x70>
 8019c2e:	f011 011f 	ands.w	r1, r1, #31
 8019c32:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8019c36:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8019c3a:	d108      	bne.n	8019c4e <rshift+0x2e>
 8019c3c:	4621      	mov	r1, r4
 8019c3e:	42b2      	cmp	r2, r6
 8019c40:	460b      	mov	r3, r1
 8019c42:	d211      	bcs.n	8019c68 <rshift+0x48>
 8019c44:	f852 3b04 	ldr.w	r3, [r2], #4
 8019c48:	f841 3b04 	str.w	r3, [r1], #4
 8019c4c:	e7f7      	b.n	8019c3e <rshift+0x1e>
 8019c4e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8019c52:	f1c1 0c20 	rsb	ip, r1, #32
 8019c56:	40cd      	lsrs	r5, r1
 8019c58:	3204      	adds	r2, #4
 8019c5a:	4623      	mov	r3, r4
 8019c5c:	42b2      	cmp	r2, r6
 8019c5e:	4617      	mov	r7, r2
 8019c60:	d30c      	bcc.n	8019c7c <rshift+0x5c>
 8019c62:	601d      	str	r5, [r3, #0]
 8019c64:	b105      	cbz	r5, 8019c68 <rshift+0x48>
 8019c66:	3304      	adds	r3, #4
 8019c68:	1b1a      	subs	r2, r3, r4
 8019c6a:	42a3      	cmp	r3, r4
 8019c6c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019c70:	bf08      	it	eq
 8019c72:	2300      	moveq	r3, #0
 8019c74:	6102      	str	r2, [r0, #16]
 8019c76:	bf08      	it	eq
 8019c78:	6143      	streq	r3, [r0, #20]
 8019c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c7c:	683f      	ldr	r7, [r7, #0]
 8019c7e:	fa07 f70c 	lsl.w	r7, r7, ip
 8019c82:	433d      	orrs	r5, r7
 8019c84:	f843 5b04 	str.w	r5, [r3], #4
 8019c88:	f852 5b04 	ldr.w	r5, [r2], #4
 8019c8c:	40cd      	lsrs	r5, r1
 8019c8e:	e7e5      	b.n	8019c5c <rshift+0x3c>
 8019c90:	4623      	mov	r3, r4
 8019c92:	e7e9      	b.n	8019c68 <rshift+0x48>

08019c94 <__hexdig_fun>:
 8019c94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019c98:	2b09      	cmp	r3, #9
 8019c9a:	d802      	bhi.n	8019ca2 <__hexdig_fun+0xe>
 8019c9c:	3820      	subs	r0, #32
 8019c9e:	b2c0      	uxtb	r0, r0
 8019ca0:	4770      	bx	lr
 8019ca2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019ca6:	2b05      	cmp	r3, #5
 8019ca8:	d801      	bhi.n	8019cae <__hexdig_fun+0x1a>
 8019caa:	3847      	subs	r0, #71	; 0x47
 8019cac:	e7f7      	b.n	8019c9e <__hexdig_fun+0xa>
 8019cae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019cb2:	2b05      	cmp	r3, #5
 8019cb4:	d801      	bhi.n	8019cba <__hexdig_fun+0x26>
 8019cb6:	3827      	subs	r0, #39	; 0x27
 8019cb8:	e7f1      	b.n	8019c9e <__hexdig_fun+0xa>
 8019cba:	2000      	movs	r0, #0
 8019cbc:	4770      	bx	lr

08019cbe <__gethex>:
 8019cbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc2:	b08b      	sub	sp, #44	; 0x2c
 8019cc4:	468a      	mov	sl, r1
 8019cc6:	9002      	str	r0, [sp, #8]
 8019cc8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019cca:	9306      	str	r3, [sp, #24]
 8019ccc:	4690      	mov	r8, r2
 8019cce:	f000 fad0 	bl	801a272 <__localeconv_l>
 8019cd2:	6803      	ldr	r3, [r0, #0]
 8019cd4:	9303      	str	r3, [sp, #12]
 8019cd6:	4618      	mov	r0, r3
 8019cd8:	f7e6 fa84 	bl	80001e4 <strlen>
 8019cdc:	9b03      	ldr	r3, [sp, #12]
 8019cde:	9001      	str	r0, [sp, #4]
 8019ce0:	4403      	add	r3, r0
 8019ce2:	f04f 0b00 	mov.w	fp, #0
 8019ce6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019cea:	9307      	str	r3, [sp, #28]
 8019cec:	f8da 3000 	ldr.w	r3, [sl]
 8019cf0:	3302      	adds	r3, #2
 8019cf2:	461f      	mov	r7, r3
 8019cf4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019cf8:	2830      	cmp	r0, #48	; 0x30
 8019cfa:	d06c      	beq.n	8019dd6 <__gethex+0x118>
 8019cfc:	f7ff ffca 	bl	8019c94 <__hexdig_fun>
 8019d00:	4604      	mov	r4, r0
 8019d02:	2800      	cmp	r0, #0
 8019d04:	d16a      	bne.n	8019ddc <__gethex+0x11e>
 8019d06:	9a01      	ldr	r2, [sp, #4]
 8019d08:	9903      	ldr	r1, [sp, #12]
 8019d0a:	4638      	mov	r0, r7
 8019d0c:	f7fe fa24 	bl	8018158 <strncmp>
 8019d10:	2800      	cmp	r0, #0
 8019d12:	d166      	bne.n	8019de2 <__gethex+0x124>
 8019d14:	9b01      	ldr	r3, [sp, #4]
 8019d16:	5cf8      	ldrb	r0, [r7, r3]
 8019d18:	18fe      	adds	r6, r7, r3
 8019d1a:	f7ff ffbb 	bl	8019c94 <__hexdig_fun>
 8019d1e:	2800      	cmp	r0, #0
 8019d20:	d062      	beq.n	8019de8 <__gethex+0x12a>
 8019d22:	4633      	mov	r3, r6
 8019d24:	7818      	ldrb	r0, [r3, #0]
 8019d26:	2830      	cmp	r0, #48	; 0x30
 8019d28:	461f      	mov	r7, r3
 8019d2a:	f103 0301 	add.w	r3, r3, #1
 8019d2e:	d0f9      	beq.n	8019d24 <__gethex+0x66>
 8019d30:	f7ff ffb0 	bl	8019c94 <__hexdig_fun>
 8019d34:	fab0 f580 	clz	r5, r0
 8019d38:	096d      	lsrs	r5, r5, #5
 8019d3a:	4634      	mov	r4, r6
 8019d3c:	f04f 0b01 	mov.w	fp, #1
 8019d40:	463a      	mov	r2, r7
 8019d42:	4616      	mov	r6, r2
 8019d44:	3201      	adds	r2, #1
 8019d46:	7830      	ldrb	r0, [r6, #0]
 8019d48:	f7ff ffa4 	bl	8019c94 <__hexdig_fun>
 8019d4c:	2800      	cmp	r0, #0
 8019d4e:	d1f8      	bne.n	8019d42 <__gethex+0x84>
 8019d50:	9a01      	ldr	r2, [sp, #4]
 8019d52:	9903      	ldr	r1, [sp, #12]
 8019d54:	4630      	mov	r0, r6
 8019d56:	f7fe f9ff 	bl	8018158 <strncmp>
 8019d5a:	b950      	cbnz	r0, 8019d72 <__gethex+0xb4>
 8019d5c:	b954      	cbnz	r4, 8019d74 <__gethex+0xb6>
 8019d5e:	9b01      	ldr	r3, [sp, #4]
 8019d60:	18f4      	adds	r4, r6, r3
 8019d62:	4622      	mov	r2, r4
 8019d64:	4616      	mov	r6, r2
 8019d66:	3201      	adds	r2, #1
 8019d68:	7830      	ldrb	r0, [r6, #0]
 8019d6a:	f7ff ff93 	bl	8019c94 <__hexdig_fun>
 8019d6e:	2800      	cmp	r0, #0
 8019d70:	d1f8      	bne.n	8019d64 <__gethex+0xa6>
 8019d72:	b10c      	cbz	r4, 8019d78 <__gethex+0xba>
 8019d74:	1ba4      	subs	r4, r4, r6
 8019d76:	00a4      	lsls	r4, r4, #2
 8019d78:	7833      	ldrb	r3, [r6, #0]
 8019d7a:	2b50      	cmp	r3, #80	; 0x50
 8019d7c:	d001      	beq.n	8019d82 <__gethex+0xc4>
 8019d7e:	2b70      	cmp	r3, #112	; 0x70
 8019d80:	d140      	bne.n	8019e04 <__gethex+0x146>
 8019d82:	7873      	ldrb	r3, [r6, #1]
 8019d84:	2b2b      	cmp	r3, #43	; 0x2b
 8019d86:	d031      	beq.n	8019dec <__gethex+0x12e>
 8019d88:	2b2d      	cmp	r3, #45	; 0x2d
 8019d8a:	d033      	beq.n	8019df4 <__gethex+0x136>
 8019d8c:	1c71      	adds	r1, r6, #1
 8019d8e:	f04f 0900 	mov.w	r9, #0
 8019d92:	7808      	ldrb	r0, [r1, #0]
 8019d94:	f7ff ff7e 	bl	8019c94 <__hexdig_fun>
 8019d98:	1e43      	subs	r3, r0, #1
 8019d9a:	b2db      	uxtb	r3, r3
 8019d9c:	2b18      	cmp	r3, #24
 8019d9e:	d831      	bhi.n	8019e04 <__gethex+0x146>
 8019da0:	f1a0 0210 	sub.w	r2, r0, #16
 8019da4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019da8:	f7ff ff74 	bl	8019c94 <__hexdig_fun>
 8019dac:	1e43      	subs	r3, r0, #1
 8019dae:	b2db      	uxtb	r3, r3
 8019db0:	2b18      	cmp	r3, #24
 8019db2:	d922      	bls.n	8019dfa <__gethex+0x13c>
 8019db4:	f1b9 0f00 	cmp.w	r9, #0
 8019db8:	d000      	beq.n	8019dbc <__gethex+0xfe>
 8019dba:	4252      	negs	r2, r2
 8019dbc:	4414      	add	r4, r2
 8019dbe:	f8ca 1000 	str.w	r1, [sl]
 8019dc2:	b30d      	cbz	r5, 8019e08 <__gethex+0x14a>
 8019dc4:	f1bb 0f00 	cmp.w	fp, #0
 8019dc8:	bf0c      	ite	eq
 8019dca:	2706      	moveq	r7, #6
 8019dcc:	2700      	movne	r7, #0
 8019dce:	4638      	mov	r0, r7
 8019dd0:	b00b      	add	sp, #44	; 0x2c
 8019dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dd6:	f10b 0b01 	add.w	fp, fp, #1
 8019dda:	e78a      	b.n	8019cf2 <__gethex+0x34>
 8019ddc:	2500      	movs	r5, #0
 8019dde:	462c      	mov	r4, r5
 8019de0:	e7ae      	b.n	8019d40 <__gethex+0x82>
 8019de2:	463e      	mov	r6, r7
 8019de4:	2501      	movs	r5, #1
 8019de6:	e7c7      	b.n	8019d78 <__gethex+0xba>
 8019de8:	4604      	mov	r4, r0
 8019dea:	e7fb      	b.n	8019de4 <__gethex+0x126>
 8019dec:	f04f 0900 	mov.w	r9, #0
 8019df0:	1cb1      	adds	r1, r6, #2
 8019df2:	e7ce      	b.n	8019d92 <__gethex+0xd4>
 8019df4:	f04f 0901 	mov.w	r9, #1
 8019df8:	e7fa      	b.n	8019df0 <__gethex+0x132>
 8019dfa:	230a      	movs	r3, #10
 8019dfc:	fb03 0202 	mla	r2, r3, r2, r0
 8019e00:	3a10      	subs	r2, #16
 8019e02:	e7cf      	b.n	8019da4 <__gethex+0xe6>
 8019e04:	4631      	mov	r1, r6
 8019e06:	e7da      	b.n	8019dbe <__gethex+0x100>
 8019e08:	1bf3      	subs	r3, r6, r7
 8019e0a:	3b01      	subs	r3, #1
 8019e0c:	4629      	mov	r1, r5
 8019e0e:	2b07      	cmp	r3, #7
 8019e10:	dc49      	bgt.n	8019ea6 <__gethex+0x1e8>
 8019e12:	9802      	ldr	r0, [sp, #8]
 8019e14:	f000 fa52 	bl	801a2bc <_Balloc>
 8019e18:	9b01      	ldr	r3, [sp, #4]
 8019e1a:	f100 0914 	add.w	r9, r0, #20
 8019e1e:	f04f 0b00 	mov.w	fp, #0
 8019e22:	f1c3 0301 	rsb	r3, r3, #1
 8019e26:	4605      	mov	r5, r0
 8019e28:	f8cd 9010 	str.w	r9, [sp, #16]
 8019e2c:	46da      	mov	sl, fp
 8019e2e:	9308      	str	r3, [sp, #32]
 8019e30:	42b7      	cmp	r7, r6
 8019e32:	d33b      	bcc.n	8019eac <__gethex+0x1ee>
 8019e34:	9804      	ldr	r0, [sp, #16]
 8019e36:	f840 ab04 	str.w	sl, [r0], #4
 8019e3a:	eba0 0009 	sub.w	r0, r0, r9
 8019e3e:	1080      	asrs	r0, r0, #2
 8019e40:	6128      	str	r0, [r5, #16]
 8019e42:	0147      	lsls	r7, r0, #5
 8019e44:	4650      	mov	r0, sl
 8019e46:	f000 fafd 	bl	801a444 <__hi0bits>
 8019e4a:	f8d8 6000 	ldr.w	r6, [r8]
 8019e4e:	1a3f      	subs	r7, r7, r0
 8019e50:	42b7      	cmp	r7, r6
 8019e52:	dd64      	ble.n	8019f1e <__gethex+0x260>
 8019e54:	1bbf      	subs	r7, r7, r6
 8019e56:	4639      	mov	r1, r7
 8019e58:	4628      	mov	r0, r5
 8019e5a:	f000 fe0d 	bl	801aa78 <__any_on>
 8019e5e:	4682      	mov	sl, r0
 8019e60:	b178      	cbz	r0, 8019e82 <__gethex+0x1c4>
 8019e62:	1e7b      	subs	r3, r7, #1
 8019e64:	1159      	asrs	r1, r3, #5
 8019e66:	f003 021f 	and.w	r2, r3, #31
 8019e6a:	f04f 0a01 	mov.w	sl, #1
 8019e6e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019e72:	fa0a f202 	lsl.w	r2, sl, r2
 8019e76:	420a      	tst	r2, r1
 8019e78:	d003      	beq.n	8019e82 <__gethex+0x1c4>
 8019e7a:	4553      	cmp	r3, sl
 8019e7c:	dc46      	bgt.n	8019f0c <__gethex+0x24e>
 8019e7e:	f04f 0a02 	mov.w	sl, #2
 8019e82:	4639      	mov	r1, r7
 8019e84:	4628      	mov	r0, r5
 8019e86:	f7ff fecb 	bl	8019c20 <rshift>
 8019e8a:	443c      	add	r4, r7
 8019e8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019e90:	42a3      	cmp	r3, r4
 8019e92:	da52      	bge.n	8019f3a <__gethex+0x27c>
 8019e94:	4629      	mov	r1, r5
 8019e96:	9802      	ldr	r0, [sp, #8]
 8019e98:	f000 fa44 	bl	801a324 <_Bfree>
 8019e9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	6013      	str	r3, [r2, #0]
 8019ea2:	27a3      	movs	r7, #163	; 0xa3
 8019ea4:	e793      	b.n	8019dce <__gethex+0x110>
 8019ea6:	3101      	adds	r1, #1
 8019ea8:	105b      	asrs	r3, r3, #1
 8019eaa:	e7b0      	b.n	8019e0e <__gethex+0x150>
 8019eac:	1e73      	subs	r3, r6, #1
 8019eae:	9305      	str	r3, [sp, #20]
 8019eb0:	9a07      	ldr	r2, [sp, #28]
 8019eb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019eb6:	4293      	cmp	r3, r2
 8019eb8:	d018      	beq.n	8019eec <__gethex+0x22e>
 8019eba:	f1bb 0f20 	cmp.w	fp, #32
 8019ebe:	d107      	bne.n	8019ed0 <__gethex+0x212>
 8019ec0:	9b04      	ldr	r3, [sp, #16]
 8019ec2:	f8c3 a000 	str.w	sl, [r3]
 8019ec6:	3304      	adds	r3, #4
 8019ec8:	f04f 0a00 	mov.w	sl, #0
 8019ecc:	9304      	str	r3, [sp, #16]
 8019ece:	46d3      	mov	fp, sl
 8019ed0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019ed4:	f7ff fede 	bl	8019c94 <__hexdig_fun>
 8019ed8:	f000 000f 	and.w	r0, r0, #15
 8019edc:	fa00 f00b 	lsl.w	r0, r0, fp
 8019ee0:	ea4a 0a00 	orr.w	sl, sl, r0
 8019ee4:	f10b 0b04 	add.w	fp, fp, #4
 8019ee8:	9b05      	ldr	r3, [sp, #20]
 8019eea:	e00d      	b.n	8019f08 <__gethex+0x24a>
 8019eec:	9b05      	ldr	r3, [sp, #20]
 8019eee:	9a08      	ldr	r2, [sp, #32]
 8019ef0:	4413      	add	r3, r2
 8019ef2:	42bb      	cmp	r3, r7
 8019ef4:	d3e1      	bcc.n	8019eba <__gethex+0x1fc>
 8019ef6:	4618      	mov	r0, r3
 8019ef8:	9a01      	ldr	r2, [sp, #4]
 8019efa:	9903      	ldr	r1, [sp, #12]
 8019efc:	9309      	str	r3, [sp, #36]	; 0x24
 8019efe:	f7fe f92b 	bl	8018158 <strncmp>
 8019f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f04:	2800      	cmp	r0, #0
 8019f06:	d1d8      	bne.n	8019eba <__gethex+0x1fc>
 8019f08:	461e      	mov	r6, r3
 8019f0a:	e791      	b.n	8019e30 <__gethex+0x172>
 8019f0c:	1eb9      	subs	r1, r7, #2
 8019f0e:	4628      	mov	r0, r5
 8019f10:	f000 fdb2 	bl	801aa78 <__any_on>
 8019f14:	2800      	cmp	r0, #0
 8019f16:	d0b2      	beq.n	8019e7e <__gethex+0x1c0>
 8019f18:	f04f 0a03 	mov.w	sl, #3
 8019f1c:	e7b1      	b.n	8019e82 <__gethex+0x1c4>
 8019f1e:	da09      	bge.n	8019f34 <__gethex+0x276>
 8019f20:	1bf7      	subs	r7, r6, r7
 8019f22:	4629      	mov	r1, r5
 8019f24:	463a      	mov	r2, r7
 8019f26:	9802      	ldr	r0, [sp, #8]
 8019f28:	f000 fbc8 	bl	801a6bc <__lshift>
 8019f2c:	1be4      	subs	r4, r4, r7
 8019f2e:	4605      	mov	r5, r0
 8019f30:	f100 0914 	add.w	r9, r0, #20
 8019f34:	f04f 0a00 	mov.w	sl, #0
 8019f38:	e7a8      	b.n	8019e8c <__gethex+0x1ce>
 8019f3a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019f3e:	42a0      	cmp	r0, r4
 8019f40:	dd6a      	ble.n	801a018 <__gethex+0x35a>
 8019f42:	1b04      	subs	r4, r0, r4
 8019f44:	42a6      	cmp	r6, r4
 8019f46:	dc2e      	bgt.n	8019fa6 <__gethex+0x2e8>
 8019f48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019f4c:	2b02      	cmp	r3, #2
 8019f4e:	d022      	beq.n	8019f96 <__gethex+0x2d8>
 8019f50:	2b03      	cmp	r3, #3
 8019f52:	d024      	beq.n	8019f9e <__gethex+0x2e0>
 8019f54:	2b01      	cmp	r3, #1
 8019f56:	d115      	bne.n	8019f84 <__gethex+0x2c6>
 8019f58:	42a6      	cmp	r6, r4
 8019f5a:	d113      	bne.n	8019f84 <__gethex+0x2c6>
 8019f5c:	2e01      	cmp	r6, #1
 8019f5e:	dc0b      	bgt.n	8019f78 <__gethex+0x2ba>
 8019f60:	9a06      	ldr	r2, [sp, #24]
 8019f62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019f66:	6013      	str	r3, [r2, #0]
 8019f68:	2301      	movs	r3, #1
 8019f6a:	612b      	str	r3, [r5, #16]
 8019f6c:	f8c9 3000 	str.w	r3, [r9]
 8019f70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f72:	2762      	movs	r7, #98	; 0x62
 8019f74:	601d      	str	r5, [r3, #0]
 8019f76:	e72a      	b.n	8019dce <__gethex+0x110>
 8019f78:	1e71      	subs	r1, r6, #1
 8019f7a:	4628      	mov	r0, r5
 8019f7c:	f000 fd7c 	bl	801aa78 <__any_on>
 8019f80:	2800      	cmp	r0, #0
 8019f82:	d1ed      	bne.n	8019f60 <__gethex+0x2a2>
 8019f84:	4629      	mov	r1, r5
 8019f86:	9802      	ldr	r0, [sp, #8]
 8019f88:	f000 f9cc 	bl	801a324 <_Bfree>
 8019f8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019f8e:	2300      	movs	r3, #0
 8019f90:	6013      	str	r3, [r2, #0]
 8019f92:	2750      	movs	r7, #80	; 0x50
 8019f94:	e71b      	b.n	8019dce <__gethex+0x110>
 8019f96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d0e1      	beq.n	8019f60 <__gethex+0x2a2>
 8019f9c:	e7f2      	b.n	8019f84 <__gethex+0x2c6>
 8019f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d1dd      	bne.n	8019f60 <__gethex+0x2a2>
 8019fa4:	e7ee      	b.n	8019f84 <__gethex+0x2c6>
 8019fa6:	1e67      	subs	r7, r4, #1
 8019fa8:	f1ba 0f00 	cmp.w	sl, #0
 8019fac:	d131      	bne.n	801a012 <__gethex+0x354>
 8019fae:	b127      	cbz	r7, 8019fba <__gethex+0x2fc>
 8019fb0:	4639      	mov	r1, r7
 8019fb2:	4628      	mov	r0, r5
 8019fb4:	f000 fd60 	bl	801aa78 <__any_on>
 8019fb8:	4682      	mov	sl, r0
 8019fba:	117a      	asrs	r2, r7, #5
 8019fbc:	2301      	movs	r3, #1
 8019fbe:	f007 071f 	and.w	r7, r7, #31
 8019fc2:	fa03 f707 	lsl.w	r7, r3, r7
 8019fc6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8019fca:	4621      	mov	r1, r4
 8019fcc:	421f      	tst	r7, r3
 8019fce:	4628      	mov	r0, r5
 8019fd0:	bf18      	it	ne
 8019fd2:	f04a 0a02 	orrne.w	sl, sl, #2
 8019fd6:	1b36      	subs	r6, r6, r4
 8019fd8:	f7ff fe22 	bl	8019c20 <rshift>
 8019fdc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019fe0:	2702      	movs	r7, #2
 8019fe2:	f1ba 0f00 	cmp.w	sl, #0
 8019fe6:	d048      	beq.n	801a07a <__gethex+0x3bc>
 8019fe8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019fec:	2b02      	cmp	r3, #2
 8019fee:	d015      	beq.n	801a01c <__gethex+0x35e>
 8019ff0:	2b03      	cmp	r3, #3
 8019ff2:	d017      	beq.n	801a024 <__gethex+0x366>
 8019ff4:	2b01      	cmp	r3, #1
 8019ff6:	d109      	bne.n	801a00c <__gethex+0x34e>
 8019ff8:	f01a 0f02 	tst.w	sl, #2
 8019ffc:	d006      	beq.n	801a00c <__gethex+0x34e>
 8019ffe:	f8d9 3000 	ldr.w	r3, [r9]
 801a002:	ea4a 0a03 	orr.w	sl, sl, r3
 801a006:	f01a 0f01 	tst.w	sl, #1
 801a00a:	d10e      	bne.n	801a02a <__gethex+0x36c>
 801a00c:	f047 0710 	orr.w	r7, r7, #16
 801a010:	e033      	b.n	801a07a <__gethex+0x3bc>
 801a012:	f04f 0a01 	mov.w	sl, #1
 801a016:	e7d0      	b.n	8019fba <__gethex+0x2fc>
 801a018:	2701      	movs	r7, #1
 801a01a:	e7e2      	b.n	8019fe2 <__gethex+0x324>
 801a01c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a01e:	f1c3 0301 	rsb	r3, r3, #1
 801a022:	9315      	str	r3, [sp, #84]	; 0x54
 801a024:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a026:	2b00      	cmp	r3, #0
 801a028:	d0f0      	beq.n	801a00c <__gethex+0x34e>
 801a02a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801a02e:	f105 0314 	add.w	r3, r5, #20
 801a032:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801a036:	eb03 010a 	add.w	r1, r3, sl
 801a03a:	f04f 0c00 	mov.w	ip, #0
 801a03e:	4618      	mov	r0, r3
 801a040:	f853 2b04 	ldr.w	r2, [r3], #4
 801a044:	f1b2 3fff 	cmp.w	r2, #4294967295
 801a048:	d01c      	beq.n	801a084 <__gethex+0x3c6>
 801a04a:	3201      	adds	r2, #1
 801a04c:	6002      	str	r2, [r0, #0]
 801a04e:	2f02      	cmp	r7, #2
 801a050:	f105 0314 	add.w	r3, r5, #20
 801a054:	d138      	bne.n	801a0c8 <__gethex+0x40a>
 801a056:	f8d8 2000 	ldr.w	r2, [r8]
 801a05a:	3a01      	subs	r2, #1
 801a05c:	42b2      	cmp	r2, r6
 801a05e:	d10a      	bne.n	801a076 <__gethex+0x3b8>
 801a060:	1171      	asrs	r1, r6, #5
 801a062:	2201      	movs	r2, #1
 801a064:	f006 061f 	and.w	r6, r6, #31
 801a068:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a06c:	fa02 f606 	lsl.w	r6, r2, r6
 801a070:	421e      	tst	r6, r3
 801a072:	bf18      	it	ne
 801a074:	4617      	movne	r7, r2
 801a076:	f047 0720 	orr.w	r7, r7, #32
 801a07a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a07c:	601d      	str	r5, [r3, #0]
 801a07e:	9b06      	ldr	r3, [sp, #24]
 801a080:	601c      	str	r4, [r3, #0]
 801a082:	e6a4      	b.n	8019dce <__gethex+0x110>
 801a084:	4299      	cmp	r1, r3
 801a086:	f843 cc04 	str.w	ip, [r3, #-4]
 801a08a:	d8d8      	bhi.n	801a03e <__gethex+0x380>
 801a08c:	68ab      	ldr	r3, [r5, #8]
 801a08e:	4599      	cmp	r9, r3
 801a090:	db12      	blt.n	801a0b8 <__gethex+0x3fa>
 801a092:	6869      	ldr	r1, [r5, #4]
 801a094:	9802      	ldr	r0, [sp, #8]
 801a096:	3101      	adds	r1, #1
 801a098:	f000 f910 	bl	801a2bc <_Balloc>
 801a09c:	692a      	ldr	r2, [r5, #16]
 801a09e:	3202      	adds	r2, #2
 801a0a0:	f105 010c 	add.w	r1, r5, #12
 801a0a4:	4683      	mov	fp, r0
 801a0a6:	0092      	lsls	r2, r2, #2
 801a0a8:	300c      	adds	r0, #12
 801a0aa:	f7fd f901 	bl	80172b0 <memcpy>
 801a0ae:	4629      	mov	r1, r5
 801a0b0:	9802      	ldr	r0, [sp, #8]
 801a0b2:	f000 f937 	bl	801a324 <_Bfree>
 801a0b6:	465d      	mov	r5, fp
 801a0b8:	692b      	ldr	r3, [r5, #16]
 801a0ba:	1c5a      	adds	r2, r3, #1
 801a0bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801a0c0:	612a      	str	r2, [r5, #16]
 801a0c2:	2201      	movs	r2, #1
 801a0c4:	615a      	str	r2, [r3, #20]
 801a0c6:	e7c2      	b.n	801a04e <__gethex+0x390>
 801a0c8:	692a      	ldr	r2, [r5, #16]
 801a0ca:	454a      	cmp	r2, r9
 801a0cc:	dd0b      	ble.n	801a0e6 <__gethex+0x428>
 801a0ce:	2101      	movs	r1, #1
 801a0d0:	4628      	mov	r0, r5
 801a0d2:	f7ff fda5 	bl	8019c20 <rshift>
 801a0d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a0da:	3401      	adds	r4, #1
 801a0dc:	42a3      	cmp	r3, r4
 801a0de:	f6ff aed9 	blt.w	8019e94 <__gethex+0x1d6>
 801a0e2:	2701      	movs	r7, #1
 801a0e4:	e7c7      	b.n	801a076 <__gethex+0x3b8>
 801a0e6:	f016 061f 	ands.w	r6, r6, #31
 801a0ea:	d0fa      	beq.n	801a0e2 <__gethex+0x424>
 801a0ec:	449a      	add	sl, r3
 801a0ee:	f1c6 0620 	rsb	r6, r6, #32
 801a0f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801a0f6:	f000 f9a5 	bl	801a444 <__hi0bits>
 801a0fa:	42b0      	cmp	r0, r6
 801a0fc:	dbe7      	blt.n	801a0ce <__gethex+0x410>
 801a0fe:	e7f0      	b.n	801a0e2 <__gethex+0x424>

0801a100 <L_shift>:
 801a100:	f1c2 0208 	rsb	r2, r2, #8
 801a104:	0092      	lsls	r2, r2, #2
 801a106:	b570      	push	{r4, r5, r6, lr}
 801a108:	f1c2 0620 	rsb	r6, r2, #32
 801a10c:	6843      	ldr	r3, [r0, #4]
 801a10e:	6804      	ldr	r4, [r0, #0]
 801a110:	fa03 f506 	lsl.w	r5, r3, r6
 801a114:	432c      	orrs	r4, r5
 801a116:	40d3      	lsrs	r3, r2
 801a118:	6004      	str	r4, [r0, #0]
 801a11a:	f840 3f04 	str.w	r3, [r0, #4]!
 801a11e:	4288      	cmp	r0, r1
 801a120:	d3f4      	bcc.n	801a10c <L_shift+0xc>
 801a122:	bd70      	pop	{r4, r5, r6, pc}

0801a124 <__match>:
 801a124:	b530      	push	{r4, r5, lr}
 801a126:	6803      	ldr	r3, [r0, #0]
 801a128:	3301      	adds	r3, #1
 801a12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a12e:	b914      	cbnz	r4, 801a136 <__match+0x12>
 801a130:	6003      	str	r3, [r0, #0]
 801a132:	2001      	movs	r0, #1
 801a134:	bd30      	pop	{r4, r5, pc}
 801a136:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a13a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801a13e:	2d19      	cmp	r5, #25
 801a140:	bf98      	it	ls
 801a142:	3220      	addls	r2, #32
 801a144:	42a2      	cmp	r2, r4
 801a146:	d0f0      	beq.n	801a12a <__match+0x6>
 801a148:	2000      	movs	r0, #0
 801a14a:	e7f3      	b.n	801a134 <__match+0x10>

0801a14c <__hexnan>:
 801a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a150:	680b      	ldr	r3, [r1, #0]
 801a152:	6801      	ldr	r1, [r0, #0]
 801a154:	115f      	asrs	r7, r3, #5
 801a156:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801a15a:	f013 031f 	ands.w	r3, r3, #31
 801a15e:	b087      	sub	sp, #28
 801a160:	bf18      	it	ne
 801a162:	3704      	addne	r7, #4
 801a164:	2500      	movs	r5, #0
 801a166:	1f3e      	subs	r6, r7, #4
 801a168:	4682      	mov	sl, r0
 801a16a:	4690      	mov	r8, r2
 801a16c:	9301      	str	r3, [sp, #4]
 801a16e:	f847 5c04 	str.w	r5, [r7, #-4]
 801a172:	46b1      	mov	r9, r6
 801a174:	4634      	mov	r4, r6
 801a176:	9502      	str	r5, [sp, #8]
 801a178:	46ab      	mov	fp, r5
 801a17a:	784a      	ldrb	r2, [r1, #1]
 801a17c:	1c4b      	adds	r3, r1, #1
 801a17e:	9303      	str	r3, [sp, #12]
 801a180:	b342      	cbz	r2, 801a1d4 <__hexnan+0x88>
 801a182:	4610      	mov	r0, r2
 801a184:	9105      	str	r1, [sp, #20]
 801a186:	9204      	str	r2, [sp, #16]
 801a188:	f7ff fd84 	bl	8019c94 <__hexdig_fun>
 801a18c:	2800      	cmp	r0, #0
 801a18e:	d143      	bne.n	801a218 <__hexnan+0xcc>
 801a190:	9a04      	ldr	r2, [sp, #16]
 801a192:	9905      	ldr	r1, [sp, #20]
 801a194:	2a20      	cmp	r2, #32
 801a196:	d818      	bhi.n	801a1ca <__hexnan+0x7e>
 801a198:	9b02      	ldr	r3, [sp, #8]
 801a19a:	459b      	cmp	fp, r3
 801a19c:	dd13      	ble.n	801a1c6 <__hexnan+0x7a>
 801a19e:	454c      	cmp	r4, r9
 801a1a0:	d206      	bcs.n	801a1b0 <__hexnan+0x64>
 801a1a2:	2d07      	cmp	r5, #7
 801a1a4:	dc04      	bgt.n	801a1b0 <__hexnan+0x64>
 801a1a6:	462a      	mov	r2, r5
 801a1a8:	4649      	mov	r1, r9
 801a1aa:	4620      	mov	r0, r4
 801a1ac:	f7ff ffa8 	bl	801a100 <L_shift>
 801a1b0:	4544      	cmp	r4, r8
 801a1b2:	d944      	bls.n	801a23e <__hexnan+0xf2>
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	f1a4 0904 	sub.w	r9, r4, #4
 801a1ba:	f844 3c04 	str.w	r3, [r4, #-4]
 801a1be:	f8cd b008 	str.w	fp, [sp, #8]
 801a1c2:	464c      	mov	r4, r9
 801a1c4:	461d      	mov	r5, r3
 801a1c6:	9903      	ldr	r1, [sp, #12]
 801a1c8:	e7d7      	b.n	801a17a <__hexnan+0x2e>
 801a1ca:	2a29      	cmp	r2, #41	; 0x29
 801a1cc:	d14a      	bne.n	801a264 <__hexnan+0x118>
 801a1ce:	3102      	adds	r1, #2
 801a1d0:	f8ca 1000 	str.w	r1, [sl]
 801a1d4:	f1bb 0f00 	cmp.w	fp, #0
 801a1d8:	d044      	beq.n	801a264 <__hexnan+0x118>
 801a1da:	454c      	cmp	r4, r9
 801a1dc:	d206      	bcs.n	801a1ec <__hexnan+0xa0>
 801a1de:	2d07      	cmp	r5, #7
 801a1e0:	dc04      	bgt.n	801a1ec <__hexnan+0xa0>
 801a1e2:	462a      	mov	r2, r5
 801a1e4:	4649      	mov	r1, r9
 801a1e6:	4620      	mov	r0, r4
 801a1e8:	f7ff ff8a 	bl	801a100 <L_shift>
 801a1ec:	4544      	cmp	r4, r8
 801a1ee:	d928      	bls.n	801a242 <__hexnan+0xf6>
 801a1f0:	4643      	mov	r3, r8
 801a1f2:	f854 2b04 	ldr.w	r2, [r4], #4
 801a1f6:	f843 2b04 	str.w	r2, [r3], #4
 801a1fa:	42a6      	cmp	r6, r4
 801a1fc:	d2f9      	bcs.n	801a1f2 <__hexnan+0xa6>
 801a1fe:	2200      	movs	r2, #0
 801a200:	f843 2b04 	str.w	r2, [r3], #4
 801a204:	429e      	cmp	r6, r3
 801a206:	d2fb      	bcs.n	801a200 <__hexnan+0xb4>
 801a208:	6833      	ldr	r3, [r6, #0]
 801a20a:	b91b      	cbnz	r3, 801a214 <__hexnan+0xc8>
 801a20c:	4546      	cmp	r6, r8
 801a20e:	d127      	bne.n	801a260 <__hexnan+0x114>
 801a210:	2301      	movs	r3, #1
 801a212:	6033      	str	r3, [r6, #0]
 801a214:	2005      	movs	r0, #5
 801a216:	e026      	b.n	801a266 <__hexnan+0x11a>
 801a218:	3501      	adds	r5, #1
 801a21a:	2d08      	cmp	r5, #8
 801a21c:	f10b 0b01 	add.w	fp, fp, #1
 801a220:	dd06      	ble.n	801a230 <__hexnan+0xe4>
 801a222:	4544      	cmp	r4, r8
 801a224:	d9cf      	bls.n	801a1c6 <__hexnan+0x7a>
 801a226:	2300      	movs	r3, #0
 801a228:	f844 3c04 	str.w	r3, [r4, #-4]
 801a22c:	2501      	movs	r5, #1
 801a22e:	3c04      	subs	r4, #4
 801a230:	6822      	ldr	r2, [r4, #0]
 801a232:	f000 000f 	and.w	r0, r0, #15
 801a236:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801a23a:	6020      	str	r0, [r4, #0]
 801a23c:	e7c3      	b.n	801a1c6 <__hexnan+0x7a>
 801a23e:	2508      	movs	r5, #8
 801a240:	e7c1      	b.n	801a1c6 <__hexnan+0x7a>
 801a242:	9b01      	ldr	r3, [sp, #4]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d0df      	beq.n	801a208 <__hexnan+0xbc>
 801a248:	f04f 32ff 	mov.w	r2, #4294967295
 801a24c:	f1c3 0320 	rsb	r3, r3, #32
 801a250:	fa22 f303 	lsr.w	r3, r2, r3
 801a254:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801a258:	401a      	ands	r2, r3
 801a25a:	f847 2c04 	str.w	r2, [r7, #-4]
 801a25e:	e7d3      	b.n	801a208 <__hexnan+0xbc>
 801a260:	3e04      	subs	r6, #4
 801a262:	e7d1      	b.n	801a208 <__hexnan+0xbc>
 801a264:	2004      	movs	r0, #4
 801a266:	b007      	add	sp, #28
 801a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a26c <__locale_ctype_ptr_l>:
 801a26c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801a270:	4770      	bx	lr

0801a272 <__localeconv_l>:
 801a272:	30f0      	adds	r0, #240	; 0xf0
 801a274:	4770      	bx	lr
	...

0801a278 <_localeconv_r>:
 801a278:	4b04      	ldr	r3, [pc, #16]	; (801a28c <_localeconv_r+0x14>)
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	6a18      	ldr	r0, [r3, #32]
 801a27e:	4b04      	ldr	r3, [pc, #16]	; (801a290 <_localeconv_r+0x18>)
 801a280:	2800      	cmp	r0, #0
 801a282:	bf08      	it	eq
 801a284:	4618      	moveq	r0, r3
 801a286:	30f0      	adds	r0, #240	; 0xf0
 801a288:	4770      	bx	lr
 801a28a:	bf00      	nop
 801a28c:	200001d4 	.word	0x200001d4
 801a290:	20000238 	.word	0x20000238

0801a294 <__ascii_mbtowc>:
 801a294:	b082      	sub	sp, #8
 801a296:	b901      	cbnz	r1, 801a29a <__ascii_mbtowc+0x6>
 801a298:	a901      	add	r1, sp, #4
 801a29a:	b142      	cbz	r2, 801a2ae <__ascii_mbtowc+0x1a>
 801a29c:	b14b      	cbz	r3, 801a2b2 <__ascii_mbtowc+0x1e>
 801a29e:	7813      	ldrb	r3, [r2, #0]
 801a2a0:	600b      	str	r3, [r1, #0]
 801a2a2:	7812      	ldrb	r2, [r2, #0]
 801a2a4:	1c10      	adds	r0, r2, #0
 801a2a6:	bf18      	it	ne
 801a2a8:	2001      	movne	r0, #1
 801a2aa:	b002      	add	sp, #8
 801a2ac:	4770      	bx	lr
 801a2ae:	4610      	mov	r0, r2
 801a2b0:	e7fb      	b.n	801a2aa <__ascii_mbtowc+0x16>
 801a2b2:	f06f 0001 	mvn.w	r0, #1
 801a2b6:	e7f8      	b.n	801a2aa <__ascii_mbtowc+0x16>

0801a2b8 <__malloc_lock>:
 801a2b8:	4770      	bx	lr

0801a2ba <__malloc_unlock>:
 801a2ba:	4770      	bx	lr

0801a2bc <_Balloc>:
 801a2bc:	b570      	push	{r4, r5, r6, lr}
 801a2be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a2c0:	4604      	mov	r4, r0
 801a2c2:	460e      	mov	r6, r1
 801a2c4:	b93d      	cbnz	r5, 801a2d6 <_Balloc+0x1a>
 801a2c6:	2010      	movs	r0, #16
 801a2c8:	f7fc ffe2 	bl	8017290 <malloc>
 801a2cc:	6260      	str	r0, [r4, #36]	; 0x24
 801a2ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a2d2:	6005      	str	r5, [r0, #0]
 801a2d4:	60c5      	str	r5, [r0, #12]
 801a2d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801a2d8:	68eb      	ldr	r3, [r5, #12]
 801a2da:	b183      	cbz	r3, 801a2fe <_Balloc+0x42>
 801a2dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a2de:	68db      	ldr	r3, [r3, #12]
 801a2e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a2e4:	b9b8      	cbnz	r0, 801a316 <_Balloc+0x5a>
 801a2e6:	2101      	movs	r1, #1
 801a2e8:	fa01 f506 	lsl.w	r5, r1, r6
 801a2ec:	1d6a      	adds	r2, r5, #5
 801a2ee:	0092      	lsls	r2, r2, #2
 801a2f0:	4620      	mov	r0, r4
 801a2f2:	f000 fbe2 	bl	801aaba <_calloc_r>
 801a2f6:	b160      	cbz	r0, 801a312 <_Balloc+0x56>
 801a2f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801a2fc:	e00e      	b.n	801a31c <_Balloc+0x60>
 801a2fe:	2221      	movs	r2, #33	; 0x21
 801a300:	2104      	movs	r1, #4
 801a302:	4620      	mov	r0, r4
 801a304:	f000 fbd9 	bl	801aaba <_calloc_r>
 801a308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a30a:	60e8      	str	r0, [r5, #12]
 801a30c:	68db      	ldr	r3, [r3, #12]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d1e4      	bne.n	801a2dc <_Balloc+0x20>
 801a312:	2000      	movs	r0, #0
 801a314:	bd70      	pop	{r4, r5, r6, pc}
 801a316:	6802      	ldr	r2, [r0, #0]
 801a318:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801a31c:	2300      	movs	r3, #0
 801a31e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a322:	e7f7      	b.n	801a314 <_Balloc+0x58>

0801a324 <_Bfree>:
 801a324:	b570      	push	{r4, r5, r6, lr}
 801a326:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801a328:	4606      	mov	r6, r0
 801a32a:	460d      	mov	r5, r1
 801a32c:	b93c      	cbnz	r4, 801a33e <_Bfree+0x1a>
 801a32e:	2010      	movs	r0, #16
 801a330:	f7fc ffae 	bl	8017290 <malloc>
 801a334:	6270      	str	r0, [r6, #36]	; 0x24
 801a336:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a33a:	6004      	str	r4, [r0, #0]
 801a33c:	60c4      	str	r4, [r0, #12]
 801a33e:	b13d      	cbz	r5, 801a350 <_Bfree+0x2c>
 801a340:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a342:	686a      	ldr	r2, [r5, #4]
 801a344:	68db      	ldr	r3, [r3, #12]
 801a346:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a34a:	6029      	str	r1, [r5, #0]
 801a34c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801a350:	bd70      	pop	{r4, r5, r6, pc}

0801a352 <__multadd>:
 801a352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a356:	690d      	ldr	r5, [r1, #16]
 801a358:	461f      	mov	r7, r3
 801a35a:	4606      	mov	r6, r0
 801a35c:	460c      	mov	r4, r1
 801a35e:	f101 0c14 	add.w	ip, r1, #20
 801a362:	2300      	movs	r3, #0
 801a364:	f8dc 0000 	ldr.w	r0, [ip]
 801a368:	b281      	uxth	r1, r0
 801a36a:	fb02 7101 	mla	r1, r2, r1, r7
 801a36e:	0c0f      	lsrs	r7, r1, #16
 801a370:	0c00      	lsrs	r0, r0, #16
 801a372:	fb02 7000 	mla	r0, r2, r0, r7
 801a376:	b289      	uxth	r1, r1
 801a378:	3301      	adds	r3, #1
 801a37a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801a37e:	429d      	cmp	r5, r3
 801a380:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801a384:	f84c 1b04 	str.w	r1, [ip], #4
 801a388:	dcec      	bgt.n	801a364 <__multadd+0x12>
 801a38a:	b1d7      	cbz	r7, 801a3c2 <__multadd+0x70>
 801a38c:	68a3      	ldr	r3, [r4, #8]
 801a38e:	42ab      	cmp	r3, r5
 801a390:	dc12      	bgt.n	801a3b8 <__multadd+0x66>
 801a392:	6861      	ldr	r1, [r4, #4]
 801a394:	4630      	mov	r0, r6
 801a396:	3101      	adds	r1, #1
 801a398:	f7ff ff90 	bl	801a2bc <_Balloc>
 801a39c:	6922      	ldr	r2, [r4, #16]
 801a39e:	3202      	adds	r2, #2
 801a3a0:	f104 010c 	add.w	r1, r4, #12
 801a3a4:	4680      	mov	r8, r0
 801a3a6:	0092      	lsls	r2, r2, #2
 801a3a8:	300c      	adds	r0, #12
 801a3aa:	f7fc ff81 	bl	80172b0 <memcpy>
 801a3ae:	4621      	mov	r1, r4
 801a3b0:	4630      	mov	r0, r6
 801a3b2:	f7ff ffb7 	bl	801a324 <_Bfree>
 801a3b6:	4644      	mov	r4, r8
 801a3b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a3bc:	3501      	adds	r5, #1
 801a3be:	615f      	str	r7, [r3, #20]
 801a3c0:	6125      	str	r5, [r4, #16]
 801a3c2:	4620      	mov	r0, r4
 801a3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a3c8 <__s2b>:
 801a3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3cc:	460c      	mov	r4, r1
 801a3ce:	4615      	mov	r5, r2
 801a3d0:	461f      	mov	r7, r3
 801a3d2:	2209      	movs	r2, #9
 801a3d4:	3308      	adds	r3, #8
 801a3d6:	4606      	mov	r6, r0
 801a3d8:	fb93 f3f2 	sdiv	r3, r3, r2
 801a3dc:	2100      	movs	r1, #0
 801a3de:	2201      	movs	r2, #1
 801a3e0:	429a      	cmp	r2, r3
 801a3e2:	db20      	blt.n	801a426 <__s2b+0x5e>
 801a3e4:	4630      	mov	r0, r6
 801a3e6:	f7ff ff69 	bl	801a2bc <_Balloc>
 801a3ea:	9b08      	ldr	r3, [sp, #32]
 801a3ec:	6143      	str	r3, [r0, #20]
 801a3ee:	2d09      	cmp	r5, #9
 801a3f0:	f04f 0301 	mov.w	r3, #1
 801a3f4:	6103      	str	r3, [r0, #16]
 801a3f6:	dd19      	ble.n	801a42c <__s2b+0x64>
 801a3f8:	f104 0809 	add.w	r8, r4, #9
 801a3fc:	46c1      	mov	r9, r8
 801a3fe:	442c      	add	r4, r5
 801a400:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a404:	4601      	mov	r1, r0
 801a406:	3b30      	subs	r3, #48	; 0x30
 801a408:	220a      	movs	r2, #10
 801a40a:	4630      	mov	r0, r6
 801a40c:	f7ff ffa1 	bl	801a352 <__multadd>
 801a410:	45a1      	cmp	r9, r4
 801a412:	d1f5      	bne.n	801a400 <__s2b+0x38>
 801a414:	eb08 0405 	add.w	r4, r8, r5
 801a418:	3c08      	subs	r4, #8
 801a41a:	1b2d      	subs	r5, r5, r4
 801a41c:	1963      	adds	r3, r4, r5
 801a41e:	42bb      	cmp	r3, r7
 801a420:	db07      	blt.n	801a432 <__s2b+0x6a>
 801a422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a426:	0052      	lsls	r2, r2, #1
 801a428:	3101      	adds	r1, #1
 801a42a:	e7d9      	b.n	801a3e0 <__s2b+0x18>
 801a42c:	340a      	adds	r4, #10
 801a42e:	2509      	movs	r5, #9
 801a430:	e7f3      	b.n	801a41a <__s2b+0x52>
 801a432:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a436:	4601      	mov	r1, r0
 801a438:	3b30      	subs	r3, #48	; 0x30
 801a43a:	220a      	movs	r2, #10
 801a43c:	4630      	mov	r0, r6
 801a43e:	f7ff ff88 	bl	801a352 <__multadd>
 801a442:	e7eb      	b.n	801a41c <__s2b+0x54>

0801a444 <__hi0bits>:
 801a444:	0c02      	lsrs	r2, r0, #16
 801a446:	0412      	lsls	r2, r2, #16
 801a448:	4603      	mov	r3, r0
 801a44a:	b9b2      	cbnz	r2, 801a47a <__hi0bits+0x36>
 801a44c:	0403      	lsls	r3, r0, #16
 801a44e:	2010      	movs	r0, #16
 801a450:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a454:	bf04      	itt	eq
 801a456:	021b      	lsleq	r3, r3, #8
 801a458:	3008      	addeq	r0, #8
 801a45a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a45e:	bf04      	itt	eq
 801a460:	011b      	lsleq	r3, r3, #4
 801a462:	3004      	addeq	r0, #4
 801a464:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a468:	bf04      	itt	eq
 801a46a:	009b      	lsleq	r3, r3, #2
 801a46c:	3002      	addeq	r0, #2
 801a46e:	2b00      	cmp	r3, #0
 801a470:	db06      	blt.n	801a480 <__hi0bits+0x3c>
 801a472:	005b      	lsls	r3, r3, #1
 801a474:	d503      	bpl.n	801a47e <__hi0bits+0x3a>
 801a476:	3001      	adds	r0, #1
 801a478:	4770      	bx	lr
 801a47a:	2000      	movs	r0, #0
 801a47c:	e7e8      	b.n	801a450 <__hi0bits+0xc>
 801a47e:	2020      	movs	r0, #32
 801a480:	4770      	bx	lr

0801a482 <__lo0bits>:
 801a482:	6803      	ldr	r3, [r0, #0]
 801a484:	f013 0207 	ands.w	r2, r3, #7
 801a488:	4601      	mov	r1, r0
 801a48a:	d00b      	beq.n	801a4a4 <__lo0bits+0x22>
 801a48c:	07da      	lsls	r2, r3, #31
 801a48e:	d423      	bmi.n	801a4d8 <__lo0bits+0x56>
 801a490:	0798      	lsls	r0, r3, #30
 801a492:	bf49      	itett	mi
 801a494:	085b      	lsrmi	r3, r3, #1
 801a496:	089b      	lsrpl	r3, r3, #2
 801a498:	2001      	movmi	r0, #1
 801a49a:	600b      	strmi	r3, [r1, #0]
 801a49c:	bf5c      	itt	pl
 801a49e:	600b      	strpl	r3, [r1, #0]
 801a4a0:	2002      	movpl	r0, #2
 801a4a2:	4770      	bx	lr
 801a4a4:	b298      	uxth	r0, r3
 801a4a6:	b9a8      	cbnz	r0, 801a4d4 <__lo0bits+0x52>
 801a4a8:	0c1b      	lsrs	r3, r3, #16
 801a4aa:	2010      	movs	r0, #16
 801a4ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a4b0:	bf04      	itt	eq
 801a4b2:	0a1b      	lsreq	r3, r3, #8
 801a4b4:	3008      	addeq	r0, #8
 801a4b6:	071a      	lsls	r2, r3, #28
 801a4b8:	bf04      	itt	eq
 801a4ba:	091b      	lsreq	r3, r3, #4
 801a4bc:	3004      	addeq	r0, #4
 801a4be:	079a      	lsls	r2, r3, #30
 801a4c0:	bf04      	itt	eq
 801a4c2:	089b      	lsreq	r3, r3, #2
 801a4c4:	3002      	addeq	r0, #2
 801a4c6:	07da      	lsls	r2, r3, #31
 801a4c8:	d402      	bmi.n	801a4d0 <__lo0bits+0x4e>
 801a4ca:	085b      	lsrs	r3, r3, #1
 801a4cc:	d006      	beq.n	801a4dc <__lo0bits+0x5a>
 801a4ce:	3001      	adds	r0, #1
 801a4d0:	600b      	str	r3, [r1, #0]
 801a4d2:	4770      	bx	lr
 801a4d4:	4610      	mov	r0, r2
 801a4d6:	e7e9      	b.n	801a4ac <__lo0bits+0x2a>
 801a4d8:	2000      	movs	r0, #0
 801a4da:	4770      	bx	lr
 801a4dc:	2020      	movs	r0, #32
 801a4de:	4770      	bx	lr

0801a4e0 <__i2b>:
 801a4e0:	b510      	push	{r4, lr}
 801a4e2:	460c      	mov	r4, r1
 801a4e4:	2101      	movs	r1, #1
 801a4e6:	f7ff fee9 	bl	801a2bc <_Balloc>
 801a4ea:	2201      	movs	r2, #1
 801a4ec:	6144      	str	r4, [r0, #20]
 801a4ee:	6102      	str	r2, [r0, #16]
 801a4f0:	bd10      	pop	{r4, pc}

0801a4f2 <__multiply>:
 801a4f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4f6:	4614      	mov	r4, r2
 801a4f8:	690a      	ldr	r2, [r1, #16]
 801a4fa:	6923      	ldr	r3, [r4, #16]
 801a4fc:	429a      	cmp	r2, r3
 801a4fe:	bfb8      	it	lt
 801a500:	460b      	movlt	r3, r1
 801a502:	4688      	mov	r8, r1
 801a504:	bfbc      	itt	lt
 801a506:	46a0      	movlt	r8, r4
 801a508:	461c      	movlt	r4, r3
 801a50a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a50e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a512:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a516:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a51a:	eb07 0609 	add.w	r6, r7, r9
 801a51e:	42b3      	cmp	r3, r6
 801a520:	bfb8      	it	lt
 801a522:	3101      	addlt	r1, #1
 801a524:	f7ff feca 	bl	801a2bc <_Balloc>
 801a528:	f100 0514 	add.w	r5, r0, #20
 801a52c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801a530:	462b      	mov	r3, r5
 801a532:	2200      	movs	r2, #0
 801a534:	4573      	cmp	r3, lr
 801a536:	d316      	bcc.n	801a566 <__multiply+0x74>
 801a538:	f104 0214 	add.w	r2, r4, #20
 801a53c:	f108 0114 	add.w	r1, r8, #20
 801a540:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801a544:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801a548:	9300      	str	r3, [sp, #0]
 801a54a:	9b00      	ldr	r3, [sp, #0]
 801a54c:	9201      	str	r2, [sp, #4]
 801a54e:	4293      	cmp	r3, r2
 801a550:	d80c      	bhi.n	801a56c <__multiply+0x7a>
 801a552:	2e00      	cmp	r6, #0
 801a554:	dd03      	ble.n	801a55e <__multiply+0x6c>
 801a556:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d05d      	beq.n	801a61a <__multiply+0x128>
 801a55e:	6106      	str	r6, [r0, #16]
 801a560:	b003      	add	sp, #12
 801a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a566:	f843 2b04 	str.w	r2, [r3], #4
 801a56a:	e7e3      	b.n	801a534 <__multiply+0x42>
 801a56c:	f8b2 b000 	ldrh.w	fp, [r2]
 801a570:	f1bb 0f00 	cmp.w	fp, #0
 801a574:	d023      	beq.n	801a5be <__multiply+0xcc>
 801a576:	4689      	mov	r9, r1
 801a578:	46ac      	mov	ip, r5
 801a57a:	f04f 0800 	mov.w	r8, #0
 801a57e:	f859 4b04 	ldr.w	r4, [r9], #4
 801a582:	f8dc a000 	ldr.w	sl, [ip]
 801a586:	b2a3      	uxth	r3, r4
 801a588:	fa1f fa8a 	uxth.w	sl, sl
 801a58c:	fb0b a303 	mla	r3, fp, r3, sl
 801a590:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a594:	f8dc 4000 	ldr.w	r4, [ip]
 801a598:	4443      	add	r3, r8
 801a59a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a59e:	fb0b 840a 	mla	r4, fp, sl, r8
 801a5a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801a5a6:	46e2      	mov	sl, ip
 801a5a8:	b29b      	uxth	r3, r3
 801a5aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a5ae:	454f      	cmp	r7, r9
 801a5b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a5b4:	f84a 3b04 	str.w	r3, [sl], #4
 801a5b8:	d82b      	bhi.n	801a612 <__multiply+0x120>
 801a5ba:	f8cc 8004 	str.w	r8, [ip, #4]
 801a5be:	9b01      	ldr	r3, [sp, #4]
 801a5c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801a5c4:	3204      	adds	r2, #4
 801a5c6:	f1ba 0f00 	cmp.w	sl, #0
 801a5ca:	d020      	beq.n	801a60e <__multiply+0x11c>
 801a5cc:	682b      	ldr	r3, [r5, #0]
 801a5ce:	4689      	mov	r9, r1
 801a5d0:	46a8      	mov	r8, r5
 801a5d2:	f04f 0b00 	mov.w	fp, #0
 801a5d6:	f8b9 c000 	ldrh.w	ip, [r9]
 801a5da:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801a5de:	fb0a 440c 	mla	r4, sl, ip, r4
 801a5e2:	445c      	add	r4, fp
 801a5e4:	46c4      	mov	ip, r8
 801a5e6:	b29b      	uxth	r3, r3
 801a5e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a5ec:	f84c 3b04 	str.w	r3, [ip], #4
 801a5f0:	f859 3b04 	ldr.w	r3, [r9], #4
 801a5f4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801a5f8:	0c1b      	lsrs	r3, r3, #16
 801a5fa:	fb0a b303 	mla	r3, sl, r3, fp
 801a5fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801a602:	454f      	cmp	r7, r9
 801a604:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801a608:	d805      	bhi.n	801a616 <__multiply+0x124>
 801a60a:	f8c8 3004 	str.w	r3, [r8, #4]
 801a60e:	3504      	adds	r5, #4
 801a610:	e79b      	b.n	801a54a <__multiply+0x58>
 801a612:	46d4      	mov	ip, sl
 801a614:	e7b3      	b.n	801a57e <__multiply+0x8c>
 801a616:	46e0      	mov	r8, ip
 801a618:	e7dd      	b.n	801a5d6 <__multiply+0xe4>
 801a61a:	3e01      	subs	r6, #1
 801a61c:	e799      	b.n	801a552 <__multiply+0x60>
	...

0801a620 <__pow5mult>:
 801a620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a624:	4615      	mov	r5, r2
 801a626:	f012 0203 	ands.w	r2, r2, #3
 801a62a:	4606      	mov	r6, r0
 801a62c:	460f      	mov	r7, r1
 801a62e:	d007      	beq.n	801a640 <__pow5mult+0x20>
 801a630:	3a01      	subs	r2, #1
 801a632:	4c21      	ldr	r4, [pc, #132]	; (801a6b8 <__pow5mult+0x98>)
 801a634:	2300      	movs	r3, #0
 801a636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a63a:	f7ff fe8a 	bl	801a352 <__multadd>
 801a63e:	4607      	mov	r7, r0
 801a640:	10ad      	asrs	r5, r5, #2
 801a642:	d035      	beq.n	801a6b0 <__pow5mult+0x90>
 801a644:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a646:	b93c      	cbnz	r4, 801a658 <__pow5mult+0x38>
 801a648:	2010      	movs	r0, #16
 801a64a:	f7fc fe21 	bl	8017290 <malloc>
 801a64e:	6270      	str	r0, [r6, #36]	; 0x24
 801a650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a654:	6004      	str	r4, [r0, #0]
 801a656:	60c4      	str	r4, [r0, #12]
 801a658:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a65c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a660:	b94c      	cbnz	r4, 801a676 <__pow5mult+0x56>
 801a662:	f240 2171 	movw	r1, #625	; 0x271
 801a666:	4630      	mov	r0, r6
 801a668:	f7ff ff3a 	bl	801a4e0 <__i2b>
 801a66c:	2300      	movs	r3, #0
 801a66e:	f8c8 0008 	str.w	r0, [r8, #8]
 801a672:	4604      	mov	r4, r0
 801a674:	6003      	str	r3, [r0, #0]
 801a676:	f04f 0800 	mov.w	r8, #0
 801a67a:	07eb      	lsls	r3, r5, #31
 801a67c:	d50a      	bpl.n	801a694 <__pow5mult+0x74>
 801a67e:	4639      	mov	r1, r7
 801a680:	4622      	mov	r2, r4
 801a682:	4630      	mov	r0, r6
 801a684:	f7ff ff35 	bl	801a4f2 <__multiply>
 801a688:	4639      	mov	r1, r7
 801a68a:	4681      	mov	r9, r0
 801a68c:	4630      	mov	r0, r6
 801a68e:	f7ff fe49 	bl	801a324 <_Bfree>
 801a692:	464f      	mov	r7, r9
 801a694:	106d      	asrs	r5, r5, #1
 801a696:	d00b      	beq.n	801a6b0 <__pow5mult+0x90>
 801a698:	6820      	ldr	r0, [r4, #0]
 801a69a:	b938      	cbnz	r0, 801a6ac <__pow5mult+0x8c>
 801a69c:	4622      	mov	r2, r4
 801a69e:	4621      	mov	r1, r4
 801a6a0:	4630      	mov	r0, r6
 801a6a2:	f7ff ff26 	bl	801a4f2 <__multiply>
 801a6a6:	6020      	str	r0, [r4, #0]
 801a6a8:	f8c0 8000 	str.w	r8, [r0]
 801a6ac:	4604      	mov	r4, r0
 801a6ae:	e7e4      	b.n	801a67a <__pow5mult+0x5a>
 801a6b0:	4638      	mov	r0, r7
 801a6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6b6:	bf00      	nop
 801a6b8:	0801e5c8 	.word	0x0801e5c8

0801a6bc <__lshift>:
 801a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6c0:	460c      	mov	r4, r1
 801a6c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a6c6:	6923      	ldr	r3, [r4, #16]
 801a6c8:	6849      	ldr	r1, [r1, #4]
 801a6ca:	eb0a 0903 	add.w	r9, sl, r3
 801a6ce:	68a3      	ldr	r3, [r4, #8]
 801a6d0:	4607      	mov	r7, r0
 801a6d2:	4616      	mov	r6, r2
 801a6d4:	f109 0501 	add.w	r5, r9, #1
 801a6d8:	42ab      	cmp	r3, r5
 801a6da:	db32      	blt.n	801a742 <__lshift+0x86>
 801a6dc:	4638      	mov	r0, r7
 801a6de:	f7ff fded 	bl	801a2bc <_Balloc>
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	4680      	mov	r8, r0
 801a6e6:	f100 0114 	add.w	r1, r0, #20
 801a6ea:	461a      	mov	r2, r3
 801a6ec:	4553      	cmp	r3, sl
 801a6ee:	db2b      	blt.n	801a748 <__lshift+0x8c>
 801a6f0:	6920      	ldr	r0, [r4, #16]
 801a6f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a6f6:	f104 0314 	add.w	r3, r4, #20
 801a6fa:	f016 021f 	ands.w	r2, r6, #31
 801a6fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a702:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a706:	d025      	beq.n	801a754 <__lshift+0x98>
 801a708:	f1c2 0e20 	rsb	lr, r2, #32
 801a70c:	2000      	movs	r0, #0
 801a70e:	681e      	ldr	r6, [r3, #0]
 801a710:	468a      	mov	sl, r1
 801a712:	4096      	lsls	r6, r2
 801a714:	4330      	orrs	r0, r6
 801a716:	f84a 0b04 	str.w	r0, [sl], #4
 801a71a:	f853 0b04 	ldr.w	r0, [r3], #4
 801a71e:	459c      	cmp	ip, r3
 801a720:	fa20 f00e 	lsr.w	r0, r0, lr
 801a724:	d814      	bhi.n	801a750 <__lshift+0x94>
 801a726:	6048      	str	r0, [r1, #4]
 801a728:	b108      	cbz	r0, 801a72e <__lshift+0x72>
 801a72a:	f109 0502 	add.w	r5, r9, #2
 801a72e:	3d01      	subs	r5, #1
 801a730:	4638      	mov	r0, r7
 801a732:	f8c8 5010 	str.w	r5, [r8, #16]
 801a736:	4621      	mov	r1, r4
 801a738:	f7ff fdf4 	bl	801a324 <_Bfree>
 801a73c:	4640      	mov	r0, r8
 801a73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a742:	3101      	adds	r1, #1
 801a744:	005b      	lsls	r3, r3, #1
 801a746:	e7c7      	b.n	801a6d8 <__lshift+0x1c>
 801a748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a74c:	3301      	adds	r3, #1
 801a74e:	e7cd      	b.n	801a6ec <__lshift+0x30>
 801a750:	4651      	mov	r1, sl
 801a752:	e7dc      	b.n	801a70e <__lshift+0x52>
 801a754:	3904      	subs	r1, #4
 801a756:	f853 2b04 	ldr.w	r2, [r3], #4
 801a75a:	f841 2f04 	str.w	r2, [r1, #4]!
 801a75e:	459c      	cmp	ip, r3
 801a760:	d8f9      	bhi.n	801a756 <__lshift+0x9a>
 801a762:	e7e4      	b.n	801a72e <__lshift+0x72>

0801a764 <__mcmp>:
 801a764:	6903      	ldr	r3, [r0, #16]
 801a766:	690a      	ldr	r2, [r1, #16]
 801a768:	1a9b      	subs	r3, r3, r2
 801a76a:	b530      	push	{r4, r5, lr}
 801a76c:	d10c      	bne.n	801a788 <__mcmp+0x24>
 801a76e:	0092      	lsls	r2, r2, #2
 801a770:	3014      	adds	r0, #20
 801a772:	3114      	adds	r1, #20
 801a774:	1884      	adds	r4, r0, r2
 801a776:	4411      	add	r1, r2
 801a778:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a77c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a780:	4295      	cmp	r5, r2
 801a782:	d003      	beq.n	801a78c <__mcmp+0x28>
 801a784:	d305      	bcc.n	801a792 <__mcmp+0x2e>
 801a786:	2301      	movs	r3, #1
 801a788:	4618      	mov	r0, r3
 801a78a:	bd30      	pop	{r4, r5, pc}
 801a78c:	42a0      	cmp	r0, r4
 801a78e:	d3f3      	bcc.n	801a778 <__mcmp+0x14>
 801a790:	e7fa      	b.n	801a788 <__mcmp+0x24>
 801a792:	f04f 33ff 	mov.w	r3, #4294967295
 801a796:	e7f7      	b.n	801a788 <__mcmp+0x24>

0801a798 <__mdiff>:
 801a798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a79c:	460d      	mov	r5, r1
 801a79e:	4607      	mov	r7, r0
 801a7a0:	4611      	mov	r1, r2
 801a7a2:	4628      	mov	r0, r5
 801a7a4:	4614      	mov	r4, r2
 801a7a6:	f7ff ffdd 	bl	801a764 <__mcmp>
 801a7aa:	1e06      	subs	r6, r0, #0
 801a7ac:	d108      	bne.n	801a7c0 <__mdiff+0x28>
 801a7ae:	4631      	mov	r1, r6
 801a7b0:	4638      	mov	r0, r7
 801a7b2:	f7ff fd83 	bl	801a2bc <_Balloc>
 801a7b6:	2301      	movs	r3, #1
 801a7b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801a7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7c0:	bfa4      	itt	ge
 801a7c2:	4623      	movge	r3, r4
 801a7c4:	462c      	movge	r4, r5
 801a7c6:	4638      	mov	r0, r7
 801a7c8:	6861      	ldr	r1, [r4, #4]
 801a7ca:	bfa6      	itte	ge
 801a7cc:	461d      	movge	r5, r3
 801a7ce:	2600      	movge	r6, #0
 801a7d0:	2601      	movlt	r6, #1
 801a7d2:	f7ff fd73 	bl	801a2bc <_Balloc>
 801a7d6:	692b      	ldr	r3, [r5, #16]
 801a7d8:	60c6      	str	r6, [r0, #12]
 801a7da:	6926      	ldr	r6, [r4, #16]
 801a7dc:	f105 0914 	add.w	r9, r5, #20
 801a7e0:	f104 0214 	add.w	r2, r4, #20
 801a7e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801a7e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801a7ec:	f100 0514 	add.w	r5, r0, #20
 801a7f0:	f04f 0e00 	mov.w	lr, #0
 801a7f4:	f852 ab04 	ldr.w	sl, [r2], #4
 801a7f8:	f859 4b04 	ldr.w	r4, [r9], #4
 801a7fc:	fa1e f18a 	uxtah	r1, lr, sl
 801a800:	b2a3      	uxth	r3, r4
 801a802:	1ac9      	subs	r1, r1, r3
 801a804:	0c23      	lsrs	r3, r4, #16
 801a806:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801a80a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a80e:	b289      	uxth	r1, r1
 801a810:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801a814:	45c8      	cmp	r8, r9
 801a816:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a81a:	4694      	mov	ip, r2
 801a81c:	f845 3b04 	str.w	r3, [r5], #4
 801a820:	d8e8      	bhi.n	801a7f4 <__mdiff+0x5c>
 801a822:	45bc      	cmp	ip, r7
 801a824:	d304      	bcc.n	801a830 <__mdiff+0x98>
 801a826:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a82a:	b183      	cbz	r3, 801a84e <__mdiff+0xb6>
 801a82c:	6106      	str	r6, [r0, #16]
 801a82e:	e7c5      	b.n	801a7bc <__mdiff+0x24>
 801a830:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a834:	fa1e f381 	uxtah	r3, lr, r1
 801a838:	141a      	asrs	r2, r3, #16
 801a83a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a83e:	b29b      	uxth	r3, r3
 801a840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a844:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801a848:	f845 3b04 	str.w	r3, [r5], #4
 801a84c:	e7e9      	b.n	801a822 <__mdiff+0x8a>
 801a84e:	3e01      	subs	r6, #1
 801a850:	e7e9      	b.n	801a826 <__mdiff+0x8e>
	...

0801a854 <__ulp>:
 801a854:	4b12      	ldr	r3, [pc, #72]	; (801a8a0 <__ulp+0x4c>)
 801a856:	ee10 2a90 	vmov	r2, s1
 801a85a:	401a      	ands	r2, r3
 801a85c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801a860:	2b00      	cmp	r3, #0
 801a862:	dd04      	ble.n	801a86e <__ulp+0x1a>
 801a864:	2000      	movs	r0, #0
 801a866:	4619      	mov	r1, r3
 801a868:	ec41 0b10 	vmov	d0, r0, r1
 801a86c:	4770      	bx	lr
 801a86e:	425b      	negs	r3, r3
 801a870:	151b      	asrs	r3, r3, #20
 801a872:	2b13      	cmp	r3, #19
 801a874:	f04f 0000 	mov.w	r0, #0
 801a878:	f04f 0100 	mov.w	r1, #0
 801a87c:	dc04      	bgt.n	801a888 <__ulp+0x34>
 801a87e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a882:	fa42 f103 	asr.w	r1, r2, r3
 801a886:	e7ef      	b.n	801a868 <__ulp+0x14>
 801a888:	3b14      	subs	r3, #20
 801a88a:	2b1e      	cmp	r3, #30
 801a88c:	f04f 0201 	mov.w	r2, #1
 801a890:	bfda      	itte	le
 801a892:	f1c3 031f 	rsble	r3, r3, #31
 801a896:	fa02 f303 	lslle.w	r3, r2, r3
 801a89a:	4613      	movgt	r3, r2
 801a89c:	4618      	mov	r0, r3
 801a89e:	e7e3      	b.n	801a868 <__ulp+0x14>
 801a8a0:	7ff00000 	.word	0x7ff00000

0801a8a4 <__b2d>:
 801a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8a6:	6905      	ldr	r5, [r0, #16]
 801a8a8:	f100 0714 	add.w	r7, r0, #20
 801a8ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a8b0:	1f2e      	subs	r6, r5, #4
 801a8b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a8b6:	4620      	mov	r0, r4
 801a8b8:	f7ff fdc4 	bl	801a444 <__hi0bits>
 801a8bc:	f1c0 0320 	rsb	r3, r0, #32
 801a8c0:	280a      	cmp	r0, #10
 801a8c2:	600b      	str	r3, [r1, #0]
 801a8c4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801a93c <__b2d+0x98>
 801a8c8:	dc14      	bgt.n	801a8f4 <__b2d+0x50>
 801a8ca:	f1c0 0e0b 	rsb	lr, r0, #11
 801a8ce:	fa24 f10e 	lsr.w	r1, r4, lr
 801a8d2:	42b7      	cmp	r7, r6
 801a8d4:	ea41 030c 	orr.w	r3, r1, ip
 801a8d8:	bf34      	ite	cc
 801a8da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a8de:	2100      	movcs	r1, #0
 801a8e0:	3015      	adds	r0, #21
 801a8e2:	fa04 f000 	lsl.w	r0, r4, r0
 801a8e6:	fa21 f10e 	lsr.w	r1, r1, lr
 801a8ea:	ea40 0201 	orr.w	r2, r0, r1
 801a8ee:	ec43 2b10 	vmov	d0, r2, r3
 801a8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8f4:	42b7      	cmp	r7, r6
 801a8f6:	bf3a      	itte	cc
 801a8f8:	f1a5 0608 	subcc.w	r6, r5, #8
 801a8fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a900:	2100      	movcs	r1, #0
 801a902:	380b      	subs	r0, #11
 801a904:	d015      	beq.n	801a932 <__b2d+0x8e>
 801a906:	4084      	lsls	r4, r0
 801a908:	f1c0 0520 	rsb	r5, r0, #32
 801a90c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801a910:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801a914:	42be      	cmp	r6, r7
 801a916:	fa21 fc05 	lsr.w	ip, r1, r5
 801a91a:	ea44 030c 	orr.w	r3, r4, ip
 801a91e:	bf8c      	ite	hi
 801a920:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a924:	2400      	movls	r4, #0
 801a926:	fa01 f000 	lsl.w	r0, r1, r0
 801a92a:	40ec      	lsrs	r4, r5
 801a92c:	ea40 0204 	orr.w	r2, r0, r4
 801a930:	e7dd      	b.n	801a8ee <__b2d+0x4a>
 801a932:	ea44 030c 	orr.w	r3, r4, ip
 801a936:	460a      	mov	r2, r1
 801a938:	e7d9      	b.n	801a8ee <__b2d+0x4a>
 801a93a:	bf00      	nop
 801a93c:	3ff00000 	.word	0x3ff00000

0801a940 <__d2b>:
 801a940:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a944:	460e      	mov	r6, r1
 801a946:	2101      	movs	r1, #1
 801a948:	ec59 8b10 	vmov	r8, r9, d0
 801a94c:	4615      	mov	r5, r2
 801a94e:	f7ff fcb5 	bl	801a2bc <_Balloc>
 801a952:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801a956:	4607      	mov	r7, r0
 801a958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a95c:	bb34      	cbnz	r4, 801a9ac <__d2b+0x6c>
 801a95e:	9301      	str	r3, [sp, #4]
 801a960:	f1b8 0300 	subs.w	r3, r8, #0
 801a964:	d027      	beq.n	801a9b6 <__d2b+0x76>
 801a966:	a802      	add	r0, sp, #8
 801a968:	f840 3d08 	str.w	r3, [r0, #-8]!
 801a96c:	f7ff fd89 	bl	801a482 <__lo0bits>
 801a970:	9900      	ldr	r1, [sp, #0]
 801a972:	b1f0      	cbz	r0, 801a9b2 <__d2b+0x72>
 801a974:	9a01      	ldr	r2, [sp, #4]
 801a976:	f1c0 0320 	rsb	r3, r0, #32
 801a97a:	fa02 f303 	lsl.w	r3, r2, r3
 801a97e:	430b      	orrs	r3, r1
 801a980:	40c2      	lsrs	r2, r0
 801a982:	617b      	str	r3, [r7, #20]
 801a984:	9201      	str	r2, [sp, #4]
 801a986:	9b01      	ldr	r3, [sp, #4]
 801a988:	61bb      	str	r3, [r7, #24]
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	bf14      	ite	ne
 801a98e:	2102      	movne	r1, #2
 801a990:	2101      	moveq	r1, #1
 801a992:	6139      	str	r1, [r7, #16]
 801a994:	b1c4      	cbz	r4, 801a9c8 <__d2b+0x88>
 801a996:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801a99a:	4404      	add	r4, r0
 801a99c:	6034      	str	r4, [r6, #0]
 801a99e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a9a2:	6028      	str	r0, [r5, #0]
 801a9a4:	4638      	mov	r0, r7
 801a9a6:	b003      	add	sp, #12
 801a9a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a9b0:	e7d5      	b.n	801a95e <__d2b+0x1e>
 801a9b2:	6179      	str	r1, [r7, #20]
 801a9b4:	e7e7      	b.n	801a986 <__d2b+0x46>
 801a9b6:	a801      	add	r0, sp, #4
 801a9b8:	f7ff fd63 	bl	801a482 <__lo0bits>
 801a9bc:	9b01      	ldr	r3, [sp, #4]
 801a9be:	617b      	str	r3, [r7, #20]
 801a9c0:	2101      	movs	r1, #1
 801a9c2:	6139      	str	r1, [r7, #16]
 801a9c4:	3020      	adds	r0, #32
 801a9c6:	e7e5      	b.n	801a994 <__d2b+0x54>
 801a9c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801a9cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a9d0:	6030      	str	r0, [r6, #0]
 801a9d2:	6918      	ldr	r0, [r3, #16]
 801a9d4:	f7ff fd36 	bl	801a444 <__hi0bits>
 801a9d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801a9dc:	e7e1      	b.n	801a9a2 <__d2b+0x62>

0801a9de <__ratio>:
 801a9de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9e2:	4688      	mov	r8, r1
 801a9e4:	4669      	mov	r1, sp
 801a9e6:	4681      	mov	r9, r0
 801a9e8:	f7ff ff5c 	bl	801a8a4 <__b2d>
 801a9ec:	a901      	add	r1, sp, #4
 801a9ee:	4640      	mov	r0, r8
 801a9f0:	ec57 6b10 	vmov	r6, r7, d0
 801a9f4:	f7ff ff56 	bl	801a8a4 <__b2d>
 801a9f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a9fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801aa00:	eba3 0c02 	sub.w	ip, r3, r2
 801aa04:	e9dd 3200 	ldrd	r3, r2, [sp]
 801aa08:	1a9b      	subs	r3, r3, r2
 801aa0a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801aa0e:	ec5b ab10 	vmov	sl, fp, d0
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	bfce      	itee	gt
 801aa16:	463a      	movgt	r2, r7
 801aa18:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801aa1c:	465a      	movle	r2, fp
 801aa1e:	4659      	mov	r1, fp
 801aa20:	463d      	mov	r5, r7
 801aa22:	bfd4      	ite	le
 801aa24:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801aa28:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801aa2c:	4630      	mov	r0, r6
 801aa2e:	ee10 2a10 	vmov	r2, s0
 801aa32:	460b      	mov	r3, r1
 801aa34:	4629      	mov	r1, r5
 801aa36:	f7e5 ff19 	bl	800086c <__aeabi_ddiv>
 801aa3a:	ec41 0b10 	vmov	d0, r0, r1
 801aa3e:	b003      	add	sp, #12
 801aa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa44 <__copybits>:
 801aa44:	3901      	subs	r1, #1
 801aa46:	b510      	push	{r4, lr}
 801aa48:	1149      	asrs	r1, r1, #5
 801aa4a:	6914      	ldr	r4, [r2, #16]
 801aa4c:	3101      	adds	r1, #1
 801aa4e:	f102 0314 	add.w	r3, r2, #20
 801aa52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801aa56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801aa5a:	42a3      	cmp	r3, r4
 801aa5c:	4602      	mov	r2, r0
 801aa5e:	d303      	bcc.n	801aa68 <__copybits+0x24>
 801aa60:	2300      	movs	r3, #0
 801aa62:	428a      	cmp	r2, r1
 801aa64:	d305      	bcc.n	801aa72 <__copybits+0x2e>
 801aa66:	bd10      	pop	{r4, pc}
 801aa68:	f853 2b04 	ldr.w	r2, [r3], #4
 801aa6c:	f840 2b04 	str.w	r2, [r0], #4
 801aa70:	e7f3      	b.n	801aa5a <__copybits+0x16>
 801aa72:	f842 3b04 	str.w	r3, [r2], #4
 801aa76:	e7f4      	b.n	801aa62 <__copybits+0x1e>

0801aa78 <__any_on>:
 801aa78:	f100 0214 	add.w	r2, r0, #20
 801aa7c:	6900      	ldr	r0, [r0, #16]
 801aa7e:	114b      	asrs	r3, r1, #5
 801aa80:	4298      	cmp	r0, r3
 801aa82:	b510      	push	{r4, lr}
 801aa84:	db11      	blt.n	801aaaa <__any_on+0x32>
 801aa86:	dd0a      	ble.n	801aa9e <__any_on+0x26>
 801aa88:	f011 011f 	ands.w	r1, r1, #31
 801aa8c:	d007      	beq.n	801aa9e <__any_on+0x26>
 801aa8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801aa92:	fa24 f001 	lsr.w	r0, r4, r1
 801aa96:	fa00 f101 	lsl.w	r1, r0, r1
 801aa9a:	428c      	cmp	r4, r1
 801aa9c:	d10b      	bne.n	801aab6 <__any_on+0x3e>
 801aa9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aaa2:	4293      	cmp	r3, r2
 801aaa4:	d803      	bhi.n	801aaae <__any_on+0x36>
 801aaa6:	2000      	movs	r0, #0
 801aaa8:	bd10      	pop	{r4, pc}
 801aaaa:	4603      	mov	r3, r0
 801aaac:	e7f7      	b.n	801aa9e <__any_on+0x26>
 801aaae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801aab2:	2900      	cmp	r1, #0
 801aab4:	d0f5      	beq.n	801aaa2 <__any_on+0x2a>
 801aab6:	2001      	movs	r0, #1
 801aab8:	e7f6      	b.n	801aaa8 <__any_on+0x30>

0801aaba <_calloc_r>:
 801aaba:	b538      	push	{r3, r4, r5, lr}
 801aabc:	fb02 f401 	mul.w	r4, r2, r1
 801aac0:	4621      	mov	r1, r4
 801aac2:	f7fc fc57 	bl	8017374 <_malloc_r>
 801aac6:	4605      	mov	r5, r0
 801aac8:	b118      	cbz	r0, 801aad2 <_calloc_r+0x18>
 801aaca:	4622      	mov	r2, r4
 801aacc:	2100      	movs	r1, #0
 801aace:	f7fc fbfa 	bl	80172c6 <memset>
 801aad2:	4628      	mov	r0, r5
 801aad4:	bd38      	pop	{r3, r4, r5, pc}

0801aad6 <__ssputs_r>:
 801aad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aada:	688e      	ldr	r6, [r1, #8]
 801aadc:	429e      	cmp	r6, r3
 801aade:	4682      	mov	sl, r0
 801aae0:	460c      	mov	r4, r1
 801aae2:	4690      	mov	r8, r2
 801aae4:	4699      	mov	r9, r3
 801aae6:	d837      	bhi.n	801ab58 <__ssputs_r+0x82>
 801aae8:	898a      	ldrh	r2, [r1, #12]
 801aaea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801aaee:	d031      	beq.n	801ab54 <__ssputs_r+0x7e>
 801aaf0:	6825      	ldr	r5, [r4, #0]
 801aaf2:	6909      	ldr	r1, [r1, #16]
 801aaf4:	1a6f      	subs	r7, r5, r1
 801aaf6:	6965      	ldr	r5, [r4, #20]
 801aaf8:	2302      	movs	r3, #2
 801aafa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aafe:	fb95 f5f3 	sdiv	r5, r5, r3
 801ab02:	f109 0301 	add.w	r3, r9, #1
 801ab06:	443b      	add	r3, r7
 801ab08:	429d      	cmp	r5, r3
 801ab0a:	bf38      	it	cc
 801ab0c:	461d      	movcc	r5, r3
 801ab0e:	0553      	lsls	r3, r2, #21
 801ab10:	d530      	bpl.n	801ab74 <__ssputs_r+0x9e>
 801ab12:	4629      	mov	r1, r5
 801ab14:	f7fc fc2e 	bl	8017374 <_malloc_r>
 801ab18:	4606      	mov	r6, r0
 801ab1a:	b950      	cbnz	r0, 801ab32 <__ssputs_r+0x5c>
 801ab1c:	230c      	movs	r3, #12
 801ab1e:	f8ca 3000 	str.w	r3, [sl]
 801ab22:	89a3      	ldrh	r3, [r4, #12]
 801ab24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ab28:	81a3      	strh	r3, [r4, #12]
 801ab2a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab32:	463a      	mov	r2, r7
 801ab34:	6921      	ldr	r1, [r4, #16]
 801ab36:	f7fc fbbb 	bl	80172b0 <memcpy>
 801ab3a:	89a3      	ldrh	r3, [r4, #12]
 801ab3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ab40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab44:	81a3      	strh	r3, [r4, #12]
 801ab46:	6126      	str	r6, [r4, #16]
 801ab48:	6165      	str	r5, [r4, #20]
 801ab4a:	443e      	add	r6, r7
 801ab4c:	1bed      	subs	r5, r5, r7
 801ab4e:	6026      	str	r6, [r4, #0]
 801ab50:	60a5      	str	r5, [r4, #8]
 801ab52:	464e      	mov	r6, r9
 801ab54:	454e      	cmp	r6, r9
 801ab56:	d900      	bls.n	801ab5a <__ssputs_r+0x84>
 801ab58:	464e      	mov	r6, r9
 801ab5a:	4632      	mov	r2, r6
 801ab5c:	4641      	mov	r1, r8
 801ab5e:	6820      	ldr	r0, [r4, #0]
 801ab60:	f000 f919 	bl	801ad96 <memmove>
 801ab64:	68a3      	ldr	r3, [r4, #8]
 801ab66:	1b9b      	subs	r3, r3, r6
 801ab68:	60a3      	str	r3, [r4, #8]
 801ab6a:	6823      	ldr	r3, [r4, #0]
 801ab6c:	441e      	add	r6, r3
 801ab6e:	6026      	str	r6, [r4, #0]
 801ab70:	2000      	movs	r0, #0
 801ab72:	e7dc      	b.n	801ab2e <__ssputs_r+0x58>
 801ab74:	462a      	mov	r2, r5
 801ab76:	f000 f927 	bl	801adc8 <_realloc_r>
 801ab7a:	4606      	mov	r6, r0
 801ab7c:	2800      	cmp	r0, #0
 801ab7e:	d1e2      	bne.n	801ab46 <__ssputs_r+0x70>
 801ab80:	6921      	ldr	r1, [r4, #16]
 801ab82:	4650      	mov	r0, sl
 801ab84:	f7fc fba8 	bl	80172d8 <_free_r>
 801ab88:	e7c8      	b.n	801ab1c <__ssputs_r+0x46>
	...

0801ab8c <_svfiprintf_r>:
 801ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab90:	461d      	mov	r5, r3
 801ab92:	898b      	ldrh	r3, [r1, #12]
 801ab94:	061f      	lsls	r7, r3, #24
 801ab96:	b09d      	sub	sp, #116	; 0x74
 801ab98:	4680      	mov	r8, r0
 801ab9a:	460c      	mov	r4, r1
 801ab9c:	4616      	mov	r6, r2
 801ab9e:	d50f      	bpl.n	801abc0 <_svfiprintf_r+0x34>
 801aba0:	690b      	ldr	r3, [r1, #16]
 801aba2:	b96b      	cbnz	r3, 801abc0 <_svfiprintf_r+0x34>
 801aba4:	2140      	movs	r1, #64	; 0x40
 801aba6:	f7fc fbe5 	bl	8017374 <_malloc_r>
 801abaa:	6020      	str	r0, [r4, #0]
 801abac:	6120      	str	r0, [r4, #16]
 801abae:	b928      	cbnz	r0, 801abbc <_svfiprintf_r+0x30>
 801abb0:	230c      	movs	r3, #12
 801abb2:	f8c8 3000 	str.w	r3, [r8]
 801abb6:	f04f 30ff 	mov.w	r0, #4294967295
 801abba:	e0c8      	b.n	801ad4e <_svfiprintf_r+0x1c2>
 801abbc:	2340      	movs	r3, #64	; 0x40
 801abbe:	6163      	str	r3, [r4, #20]
 801abc0:	2300      	movs	r3, #0
 801abc2:	9309      	str	r3, [sp, #36]	; 0x24
 801abc4:	2320      	movs	r3, #32
 801abc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801abca:	2330      	movs	r3, #48	; 0x30
 801abcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801abd0:	9503      	str	r5, [sp, #12]
 801abd2:	f04f 0b01 	mov.w	fp, #1
 801abd6:	4637      	mov	r7, r6
 801abd8:	463d      	mov	r5, r7
 801abda:	f815 3b01 	ldrb.w	r3, [r5], #1
 801abde:	b10b      	cbz	r3, 801abe4 <_svfiprintf_r+0x58>
 801abe0:	2b25      	cmp	r3, #37	; 0x25
 801abe2:	d13e      	bne.n	801ac62 <_svfiprintf_r+0xd6>
 801abe4:	ebb7 0a06 	subs.w	sl, r7, r6
 801abe8:	d00b      	beq.n	801ac02 <_svfiprintf_r+0x76>
 801abea:	4653      	mov	r3, sl
 801abec:	4632      	mov	r2, r6
 801abee:	4621      	mov	r1, r4
 801abf0:	4640      	mov	r0, r8
 801abf2:	f7ff ff70 	bl	801aad6 <__ssputs_r>
 801abf6:	3001      	adds	r0, #1
 801abf8:	f000 80a4 	beq.w	801ad44 <_svfiprintf_r+0x1b8>
 801abfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abfe:	4453      	add	r3, sl
 801ac00:	9309      	str	r3, [sp, #36]	; 0x24
 801ac02:	783b      	ldrb	r3, [r7, #0]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	f000 809d 	beq.w	801ad44 <_svfiprintf_r+0x1b8>
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	f04f 32ff 	mov.w	r2, #4294967295
 801ac10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac14:	9304      	str	r3, [sp, #16]
 801ac16:	9307      	str	r3, [sp, #28]
 801ac18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ac1c:	931a      	str	r3, [sp, #104]	; 0x68
 801ac1e:	462f      	mov	r7, r5
 801ac20:	2205      	movs	r2, #5
 801ac22:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ac26:	4850      	ldr	r0, [pc, #320]	; (801ad68 <_svfiprintf_r+0x1dc>)
 801ac28:	f7e5 faea 	bl	8000200 <memchr>
 801ac2c:	9b04      	ldr	r3, [sp, #16]
 801ac2e:	b9d0      	cbnz	r0, 801ac66 <_svfiprintf_r+0xda>
 801ac30:	06d9      	lsls	r1, r3, #27
 801ac32:	bf44      	itt	mi
 801ac34:	2220      	movmi	r2, #32
 801ac36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ac3a:	071a      	lsls	r2, r3, #28
 801ac3c:	bf44      	itt	mi
 801ac3e:	222b      	movmi	r2, #43	; 0x2b
 801ac40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ac44:	782a      	ldrb	r2, [r5, #0]
 801ac46:	2a2a      	cmp	r2, #42	; 0x2a
 801ac48:	d015      	beq.n	801ac76 <_svfiprintf_r+0xea>
 801ac4a:	9a07      	ldr	r2, [sp, #28]
 801ac4c:	462f      	mov	r7, r5
 801ac4e:	2000      	movs	r0, #0
 801ac50:	250a      	movs	r5, #10
 801ac52:	4639      	mov	r1, r7
 801ac54:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac58:	3b30      	subs	r3, #48	; 0x30
 801ac5a:	2b09      	cmp	r3, #9
 801ac5c:	d94d      	bls.n	801acfa <_svfiprintf_r+0x16e>
 801ac5e:	b1b8      	cbz	r0, 801ac90 <_svfiprintf_r+0x104>
 801ac60:	e00f      	b.n	801ac82 <_svfiprintf_r+0xf6>
 801ac62:	462f      	mov	r7, r5
 801ac64:	e7b8      	b.n	801abd8 <_svfiprintf_r+0x4c>
 801ac66:	4a40      	ldr	r2, [pc, #256]	; (801ad68 <_svfiprintf_r+0x1dc>)
 801ac68:	1a80      	subs	r0, r0, r2
 801ac6a:	fa0b f000 	lsl.w	r0, fp, r0
 801ac6e:	4318      	orrs	r0, r3
 801ac70:	9004      	str	r0, [sp, #16]
 801ac72:	463d      	mov	r5, r7
 801ac74:	e7d3      	b.n	801ac1e <_svfiprintf_r+0x92>
 801ac76:	9a03      	ldr	r2, [sp, #12]
 801ac78:	1d11      	adds	r1, r2, #4
 801ac7a:	6812      	ldr	r2, [r2, #0]
 801ac7c:	9103      	str	r1, [sp, #12]
 801ac7e:	2a00      	cmp	r2, #0
 801ac80:	db01      	blt.n	801ac86 <_svfiprintf_r+0xfa>
 801ac82:	9207      	str	r2, [sp, #28]
 801ac84:	e004      	b.n	801ac90 <_svfiprintf_r+0x104>
 801ac86:	4252      	negs	r2, r2
 801ac88:	f043 0302 	orr.w	r3, r3, #2
 801ac8c:	9207      	str	r2, [sp, #28]
 801ac8e:	9304      	str	r3, [sp, #16]
 801ac90:	783b      	ldrb	r3, [r7, #0]
 801ac92:	2b2e      	cmp	r3, #46	; 0x2e
 801ac94:	d10c      	bne.n	801acb0 <_svfiprintf_r+0x124>
 801ac96:	787b      	ldrb	r3, [r7, #1]
 801ac98:	2b2a      	cmp	r3, #42	; 0x2a
 801ac9a:	d133      	bne.n	801ad04 <_svfiprintf_r+0x178>
 801ac9c:	9b03      	ldr	r3, [sp, #12]
 801ac9e:	1d1a      	adds	r2, r3, #4
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	9203      	str	r2, [sp, #12]
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	bfb8      	it	lt
 801aca8:	f04f 33ff 	movlt.w	r3, #4294967295
 801acac:	3702      	adds	r7, #2
 801acae:	9305      	str	r3, [sp, #20]
 801acb0:	4d2e      	ldr	r5, [pc, #184]	; (801ad6c <_svfiprintf_r+0x1e0>)
 801acb2:	7839      	ldrb	r1, [r7, #0]
 801acb4:	2203      	movs	r2, #3
 801acb6:	4628      	mov	r0, r5
 801acb8:	f7e5 faa2 	bl	8000200 <memchr>
 801acbc:	b138      	cbz	r0, 801acce <_svfiprintf_r+0x142>
 801acbe:	2340      	movs	r3, #64	; 0x40
 801acc0:	1b40      	subs	r0, r0, r5
 801acc2:	fa03 f000 	lsl.w	r0, r3, r0
 801acc6:	9b04      	ldr	r3, [sp, #16]
 801acc8:	4303      	orrs	r3, r0
 801acca:	3701      	adds	r7, #1
 801accc:	9304      	str	r3, [sp, #16]
 801acce:	7839      	ldrb	r1, [r7, #0]
 801acd0:	4827      	ldr	r0, [pc, #156]	; (801ad70 <_svfiprintf_r+0x1e4>)
 801acd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801acd6:	2206      	movs	r2, #6
 801acd8:	1c7e      	adds	r6, r7, #1
 801acda:	f7e5 fa91 	bl	8000200 <memchr>
 801acde:	2800      	cmp	r0, #0
 801ace0:	d038      	beq.n	801ad54 <_svfiprintf_r+0x1c8>
 801ace2:	4b24      	ldr	r3, [pc, #144]	; (801ad74 <_svfiprintf_r+0x1e8>)
 801ace4:	bb13      	cbnz	r3, 801ad2c <_svfiprintf_r+0x1a0>
 801ace6:	9b03      	ldr	r3, [sp, #12]
 801ace8:	3307      	adds	r3, #7
 801acea:	f023 0307 	bic.w	r3, r3, #7
 801acee:	3308      	adds	r3, #8
 801acf0:	9303      	str	r3, [sp, #12]
 801acf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acf4:	444b      	add	r3, r9
 801acf6:	9309      	str	r3, [sp, #36]	; 0x24
 801acf8:	e76d      	b.n	801abd6 <_svfiprintf_r+0x4a>
 801acfa:	fb05 3202 	mla	r2, r5, r2, r3
 801acfe:	2001      	movs	r0, #1
 801ad00:	460f      	mov	r7, r1
 801ad02:	e7a6      	b.n	801ac52 <_svfiprintf_r+0xc6>
 801ad04:	2300      	movs	r3, #0
 801ad06:	3701      	adds	r7, #1
 801ad08:	9305      	str	r3, [sp, #20]
 801ad0a:	4619      	mov	r1, r3
 801ad0c:	250a      	movs	r5, #10
 801ad0e:	4638      	mov	r0, r7
 801ad10:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad14:	3a30      	subs	r2, #48	; 0x30
 801ad16:	2a09      	cmp	r2, #9
 801ad18:	d903      	bls.n	801ad22 <_svfiprintf_r+0x196>
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d0c8      	beq.n	801acb0 <_svfiprintf_r+0x124>
 801ad1e:	9105      	str	r1, [sp, #20]
 801ad20:	e7c6      	b.n	801acb0 <_svfiprintf_r+0x124>
 801ad22:	fb05 2101 	mla	r1, r5, r1, r2
 801ad26:	2301      	movs	r3, #1
 801ad28:	4607      	mov	r7, r0
 801ad2a:	e7f0      	b.n	801ad0e <_svfiprintf_r+0x182>
 801ad2c:	ab03      	add	r3, sp, #12
 801ad2e:	9300      	str	r3, [sp, #0]
 801ad30:	4622      	mov	r2, r4
 801ad32:	4b11      	ldr	r3, [pc, #68]	; (801ad78 <_svfiprintf_r+0x1ec>)
 801ad34:	a904      	add	r1, sp, #16
 801ad36:	4640      	mov	r0, r8
 801ad38:	f7fc fc0a 	bl	8017550 <_printf_float>
 801ad3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801ad40:	4681      	mov	r9, r0
 801ad42:	d1d6      	bne.n	801acf2 <_svfiprintf_r+0x166>
 801ad44:	89a3      	ldrh	r3, [r4, #12]
 801ad46:	065b      	lsls	r3, r3, #25
 801ad48:	f53f af35 	bmi.w	801abb6 <_svfiprintf_r+0x2a>
 801ad4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ad4e:	b01d      	add	sp, #116	; 0x74
 801ad50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad54:	ab03      	add	r3, sp, #12
 801ad56:	9300      	str	r3, [sp, #0]
 801ad58:	4622      	mov	r2, r4
 801ad5a:	4b07      	ldr	r3, [pc, #28]	; (801ad78 <_svfiprintf_r+0x1ec>)
 801ad5c:	a904      	add	r1, sp, #16
 801ad5e:	4640      	mov	r0, r8
 801ad60:	f7fc feac 	bl	8017abc <_printf_i>
 801ad64:	e7ea      	b.n	801ad3c <_svfiprintf_r+0x1b0>
 801ad66:	bf00      	nop
 801ad68:	0801e5d4 	.word	0x0801e5d4
 801ad6c:	0801e5da 	.word	0x0801e5da
 801ad70:	0801e5de 	.word	0x0801e5de
 801ad74:	08017551 	.word	0x08017551
 801ad78:	0801aad7 	.word	0x0801aad7

0801ad7c <__ascii_wctomb>:
 801ad7c:	b149      	cbz	r1, 801ad92 <__ascii_wctomb+0x16>
 801ad7e:	2aff      	cmp	r2, #255	; 0xff
 801ad80:	bf85      	ittet	hi
 801ad82:	238a      	movhi	r3, #138	; 0x8a
 801ad84:	6003      	strhi	r3, [r0, #0]
 801ad86:	700a      	strbls	r2, [r1, #0]
 801ad88:	f04f 30ff 	movhi.w	r0, #4294967295
 801ad8c:	bf98      	it	ls
 801ad8e:	2001      	movls	r0, #1
 801ad90:	4770      	bx	lr
 801ad92:	4608      	mov	r0, r1
 801ad94:	4770      	bx	lr

0801ad96 <memmove>:
 801ad96:	4288      	cmp	r0, r1
 801ad98:	b510      	push	{r4, lr}
 801ad9a:	eb01 0302 	add.w	r3, r1, r2
 801ad9e:	d807      	bhi.n	801adb0 <memmove+0x1a>
 801ada0:	1e42      	subs	r2, r0, #1
 801ada2:	4299      	cmp	r1, r3
 801ada4:	d00a      	beq.n	801adbc <memmove+0x26>
 801ada6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801adaa:	f802 4f01 	strb.w	r4, [r2, #1]!
 801adae:	e7f8      	b.n	801ada2 <memmove+0xc>
 801adb0:	4283      	cmp	r3, r0
 801adb2:	d9f5      	bls.n	801ada0 <memmove+0xa>
 801adb4:	1881      	adds	r1, r0, r2
 801adb6:	1ad2      	subs	r2, r2, r3
 801adb8:	42d3      	cmn	r3, r2
 801adba:	d100      	bne.n	801adbe <memmove+0x28>
 801adbc:	bd10      	pop	{r4, pc}
 801adbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801adc2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801adc6:	e7f7      	b.n	801adb8 <memmove+0x22>

0801adc8 <_realloc_r>:
 801adc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adca:	4607      	mov	r7, r0
 801adcc:	4614      	mov	r4, r2
 801adce:	460e      	mov	r6, r1
 801add0:	b921      	cbnz	r1, 801addc <_realloc_r+0x14>
 801add2:	4611      	mov	r1, r2
 801add4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801add8:	f7fc bacc 	b.w	8017374 <_malloc_r>
 801addc:	b922      	cbnz	r2, 801ade8 <_realloc_r+0x20>
 801adde:	f7fc fa7b 	bl	80172d8 <_free_r>
 801ade2:	4625      	mov	r5, r4
 801ade4:	4628      	mov	r0, r5
 801ade6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ade8:	f000 f814 	bl	801ae14 <_malloc_usable_size_r>
 801adec:	42a0      	cmp	r0, r4
 801adee:	d20f      	bcs.n	801ae10 <_realloc_r+0x48>
 801adf0:	4621      	mov	r1, r4
 801adf2:	4638      	mov	r0, r7
 801adf4:	f7fc fabe 	bl	8017374 <_malloc_r>
 801adf8:	4605      	mov	r5, r0
 801adfa:	2800      	cmp	r0, #0
 801adfc:	d0f2      	beq.n	801ade4 <_realloc_r+0x1c>
 801adfe:	4631      	mov	r1, r6
 801ae00:	4622      	mov	r2, r4
 801ae02:	f7fc fa55 	bl	80172b0 <memcpy>
 801ae06:	4631      	mov	r1, r6
 801ae08:	4638      	mov	r0, r7
 801ae0a:	f7fc fa65 	bl	80172d8 <_free_r>
 801ae0e:	e7e9      	b.n	801ade4 <_realloc_r+0x1c>
 801ae10:	4635      	mov	r5, r6
 801ae12:	e7e7      	b.n	801ade4 <_realloc_r+0x1c>

0801ae14 <_malloc_usable_size_r>:
 801ae14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae18:	1f18      	subs	r0, r3, #4
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	bfbc      	itt	lt
 801ae1e:	580b      	ldrlt	r3, [r1, r0]
 801ae20:	18c0      	addlt	r0, r0, r3
 801ae22:	4770      	bx	lr
 801ae24:	0000      	movs	r0, r0
	...

0801ae28 <cos>:
 801ae28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ae2a:	ec51 0b10 	vmov	r0, r1, d0
 801ae2e:	4a1e      	ldr	r2, [pc, #120]	; (801aea8 <cos+0x80>)
 801ae30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ae34:	4293      	cmp	r3, r2
 801ae36:	dc06      	bgt.n	801ae46 <cos+0x1e>
 801ae38:	ed9f 1b19 	vldr	d1, [pc, #100]	; 801aea0 <cos+0x78>
 801ae3c:	f001 feb8 	bl	801cbb0 <__kernel_cos>
 801ae40:	ec51 0b10 	vmov	r0, r1, d0
 801ae44:	e007      	b.n	801ae56 <cos+0x2e>
 801ae46:	4a19      	ldr	r2, [pc, #100]	; (801aeac <cos+0x84>)
 801ae48:	4293      	cmp	r3, r2
 801ae4a:	dd09      	ble.n	801ae60 <cos+0x38>
 801ae4c:	ee10 2a10 	vmov	r2, s0
 801ae50:	460b      	mov	r3, r1
 801ae52:	f7e5 fa29 	bl	80002a8 <__aeabi_dsub>
 801ae56:	ec41 0b10 	vmov	d0, r0, r1
 801ae5a:	b005      	add	sp, #20
 801ae5c:	f85d fb04 	ldr.w	pc, [sp], #4
 801ae60:	4668      	mov	r0, sp
 801ae62:	f001 fbfd 	bl	801c660 <__ieee754_rem_pio2>
 801ae66:	f000 0003 	and.w	r0, r0, #3
 801ae6a:	2801      	cmp	r0, #1
 801ae6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ae70:	ed9d 0b00 	vldr	d0, [sp]
 801ae74:	d007      	beq.n	801ae86 <cos+0x5e>
 801ae76:	2802      	cmp	r0, #2
 801ae78:	d00e      	beq.n	801ae98 <cos+0x70>
 801ae7a:	2800      	cmp	r0, #0
 801ae7c:	d0de      	beq.n	801ae3c <cos+0x14>
 801ae7e:	2001      	movs	r0, #1
 801ae80:	f002 fa9e 	bl	801d3c0 <__kernel_sin>
 801ae84:	e7dc      	b.n	801ae40 <cos+0x18>
 801ae86:	f002 fa9b 	bl	801d3c0 <__kernel_sin>
 801ae8a:	ec53 2b10 	vmov	r2, r3, d0
 801ae8e:	ee10 0a10 	vmov	r0, s0
 801ae92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ae96:	e7de      	b.n	801ae56 <cos+0x2e>
 801ae98:	f001 fe8a 	bl	801cbb0 <__kernel_cos>
 801ae9c:	e7f5      	b.n	801ae8a <cos+0x62>
 801ae9e:	bf00      	nop
	...
 801aea8:	3fe921fb 	.word	0x3fe921fb
 801aeac:	7fefffff 	.word	0x7fefffff

0801aeb0 <sin>:
 801aeb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801aeb2:	ec51 0b10 	vmov	r0, r1, d0
 801aeb6:	4a20      	ldr	r2, [pc, #128]	; (801af38 <sin+0x88>)
 801aeb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aebc:	4293      	cmp	r3, r2
 801aebe:	dc07      	bgt.n	801aed0 <sin+0x20>
 801aec0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 801af30 <sin+0x80>
 801aec4:	2000      	movs	r0, #0
 801aec6:	f002 fa7b 	bl	801d3c0 <__kernel_sin>
 801aeca:	ec51 0b10 	vmov	r0, r1, d0
 801aece:	e007      	b.n	801aee0 <sin+0x30>
 801aed0:	4a1a      	ldr	r2, [pc, #104]	; (801af3c <sin+0x8c>)
 801aed2:	4293      	cmp	r3, r2
 801aed4:	dd09      	ble.n	801aeea <sin+0x3a>
 801aed6:	ee10 2a10 	vmov	r2, s0
 801aeda:	460b      	mov	r3, r1
 801aedc:	f7e5 f9e4 	bl	80002a8 <__aeabi_dsub>
 801aee0:	ec41 0b10 	vmov	d0, r0, r1
 801aee4:	b005      	add	sp, #20
 801aee6:	f85d fb04 	ldr.w	pc, [sp], #4
 801aeea:	4668      	mov	r0, sp
 801aeec:	f001 fbb8 	bl	801c660 <__ieee754_rem_pio2>
 801aef0:	f000 0003 	and.w	r0, r0, #3
 801aef4:	2801      	cmp	r0, #1
 801aef6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801aefa:	ed9d 0b00 	vldr	d0, [sp]
 801aefe:	d004      	beq.n	801af0a <sin+0x5a>
 801af00:	2802      	cmp	r0, #2
 801af02:	d005      	beq.n	801af10 <sin+0x60>
 801af04:	b970      	cbnz	r0, 801af24 <sin+0x74>
 801af06:	2001      	movs	r0, #1
 801af08:	e7dd      	b.n	801aec6 <sin+0x16>
 801af0a:	f001 fe51 	bl	801cbb0 <__kernel_cos>
 801af0e:	e7dc      	b.n	801aeca <sin+0x1a>
 801af10:	2001      	movs	r0, #1
 801af12:	f002 fa55 	bl	801d3c0 <__kernel_sin>
 801af16:	ec53 2b10 	vmov	r2, r3, d0
 801af1a:	ee10 0a10 	vmov	r0, s0
 801af1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801af22:	e7dd      	b.n	801aee0 <sin+0x30>
 801af24:	f001 fe44 	bl	801cbb0 <__kernel_cos>
 801af28:	e7f5      	b.n	801af16 <sin+0x66>
 801af2a:	bf00      	nop
 801af2c:	f3af 8000 	nop.w
	...
 801af38:	3fe921fb 	.word	0x3fe921fb
 801af3c:	7fefffff 	.word	0x7fefffff

0801af40 <asin>:
 801af40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af42:	ed2d 8b02 	vpush	{d8}
 801af46:	4e26      	ldr	r6, [pc, #152]	; (801afe0 <asin+0xa0>)
 801af48:	b08b      	sub	sp, #44	; 0x2c
 801af4a:	ec55 4b10 	vmov	r4, r5, d0
 801af4e:	f000 fa77 	bl	801b440 <__ieee754_asin>
 801af52:	f996 3000 	ldrsb.w	r3, [r6]
 801af56:	eeb0 8a40 	vmov.f32	s16, s0
 801af5a:	eef0 8a60 	vmov.f32	s17, s1
 801af5e:	3301      	adds	r3, #1
 801af60:	d036      	beq.n	801afd0 <asin+0x90>
 801af62:	4622      	mov	r2, r4
 801af64:	462b      	mov	r3, r5
 801af66:	4620      	mov	r0, r4
 801af68:	4629      	mov	r1, r5
 801af6a:	f7e5 fdef 	bl	8000b4c <__aeabi_dcmpun>
 801af6e:	4607      	mov	r7, r0
 801af70:	bb70      	cbnz	r0, 801afd0 <asin+0x90>
 801af72:	ec45 4b10 	vmov	d0, r4, r5
 801af76:	f002 fc7f 	bl	801d878 <fabs>
 801af7a:	2200      	movs	r2, #0
 801af7c:	4b19      	ldr	r3, [pc, #100]	; (801afe4 <asin+0xa4>)
 801af7e:	ec51 0b10 	vmov	r0, r1, d0
 801af82:	f7e5 fdd9 	bl	8000b38 <__aeabi_dcmpgt>
 801af86:	b318      	cbz	r0, 801afd0 <asin+0x90>
 801af88:	2301      	movs	r3, #1
 801af8a:	9300      	str	r3, [sp, #0]
 801af8c:	4816      	ldr	r0, [pc, #88]	; (801afe8 <asin+0xa8>)
 801af8e:	4b17      	ldr	r3, [pc, #92]	; (801afec <asin+0xac>)
 801af90:	9301      	str	r3, [sp, #4]
 801af92:	9708      	str	r7, [sp, #32]
 801af94:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801af98:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801af9c:	f002 fd08 	bl	801d9b0 <nan>
 801afa0:	f996 3000 	ldrsb.w	r3, [r6]
 801afa4:	2b02      	cmp	r3, #2
 801afa6:	ed8d 0b06 	vstr	d0, [sp, #24]
 801afaa:	d104      	bne.n	801afb6 <asin+0x76>
 801afac:	f7fc f946 	bl	801723c <__errno>
 801afb0:	2321      	movs	r3, #33	; 0x21
 801afb2:	6003      	str	r3, [r0, #0]
 801afb4:	e004      	b.n	801afc0 <asin+0x80>
 801afb6:	4668      	mov	r0, sp
 801afb8:	f002 fcf6 	bl	801d9a8 <matherr>
 801afbc:	2800      	cmp	r0, #0
 801afbe:	d0f5      	beq.n	801afac <asin+0x6c>
 801afc0:	9b08      	ldr	r3, [sp, #32]
 801afc2:	b11b      	cbz	r3, 801afcc <asin+0x8c>
 801afc4:	f7fc f93a 	bl	801723c <__errno>
 801afc8:	9b08      	ldr	r3, [sp, #32]
 801afca:	6003      	str	r3, [r0, #0]
 801afcc:	ed9d 8b06 	vldr	d8, [sp, #24]
 801afd0:	eeb0 0a48 	vmov.f32	s0, s16
 801afd4:	eef0 0a68 	vmov.f32	s1, s17
 801afd8:	b00b      	add	sp, #44	; 0x2c
 801afda:	ecbd 8b02 	vpop	{d8}
 801afde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afe0:	200003a4 	.word	0x200003a4
 801afe4:	3ff00000 	.word	0x3ff00000
 801afe8:	0801e5d9 	.word	0x0801e5d9
 801afec:	0801e6e6 	.word	0x0801e6e6

0801aff0 <atan2>:
 801aff0:	f000 bc36 	b.w	801b860 <__ieee754_atan2>

0801aff4 <fmod>:
 801aff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aff8:	ed2d 8b02 	vpush	{d8}
 801affc:	b08b      	sub	sp, #44	; 0x2c
 801affe:	ec55 4b10 	vmov	r4, r5, d0
 801b002:	ec57 6b11 	vmov	r6, r7, d1
 801b006:	f000 fd09 	bl	801ba1c <__ieee754_fmod>
 801b00a:	4b2a      	ldr	r3, [pc, #168]	; (801b0b4 <fmod+0xc0>)
 801b00c:	eeb0 8a40 	vmov.f32	s16, s0
 801b010:	eef0 8a60 	vmov.f32	s17, s1
 801b014:	f993 8000 	ldrsb.w	r8, [r3]
 801b018:	f1b8 3fff 	cmp.w	r8, #4294967295
 801b01c:	d030      	beq.n	801b080 <fmod+0x8c>
 801b01e:	4632      	mov	r2, r6
 801b020:	463b      	mov	r3, r7
 801b022:	4630      	mov	r0, r6
 801b024:	4639      	mov	r1, r7
 801b026:	f7e5 fd91 	bl	8000b4c <__aeabi_dcmpun>
 801b02a:	bb48      	cbnz	r0, 801b080 <fmod+0x8c>
 801b02c:	4622      	mov	r2, r4
 801b02e:	462b      	mov	r3, r5
 801b030:	4620      	mov	r0, r4
 801b032:	4629      	mov	r1, r5
 801b034:	f7e5 fd8a 	bl	8000b4c <__aeabi_dcmpun>
 801b038:	4681      	mov	r9, r0
 801b03a:	bb08      	cbnz	r0, 801b080 <fmod+0x8c>
 801b03c:	2200      	movs	r2, #0
 801b03e:	2300      	movs	r3, #0
 801b040:	4630      	mov	r0, r6
 801b042:	4639      	mov	r1, r7
 801b044:	f7e5 fd50 	bl	8000ae8 <__aeabi_dcmpeq>
 801b048:	b1d0      	cbz	r0, 801b080 <fmod+0x8c>
 801b04a:	2301      	movs	r3, #1
 801b04c:	9300      	str	r3, [sp, #0]
 801b04e:	4b1a      	ldr	r3, [pc, #104]	; (801b0b8 <fmod+0xc4>)
 801b050:	9301      	str	r3, [sp, #4]
 801b052:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801b056:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b05a:	f8cd 9020 	str.w	r9, [sp, #32]
 801b05e:	f1b8 0f00 	cmp.w	r8, #0
 801b062:	d116      	bne.n	801b092 <fmod+0x9e>
 801b064:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b068:	4668      	mov	r0, sp
 801b06a:	f002 fc9d 	bl	801d9a8 <matherr>
 801b06e:	b1d8      	cbz	r0, 801b0a8 <fmod+0xb4>
 801b070:	9b08      	ldr	r3, [sp, #32]
 801b072:	b11b      	cbz	r3, 801b07c <fmod+0x88>
 801b074:	f7fc f8e2 	bl	801723c <__errno>
 801b078:	9b08      	ldr	r3, [sp, #32]
 801b07a:	6003      	str	r3, [r0, #0]
 801b07c:	ed9d 8b06 	vldr	d8, [sp, #24]
 801b080:	eeb0 0a48 	vmov.f32	s0, s16
 801b084:	eef0 0a68 	vmov.f32	s1, s17
 801b088:	b00b      	add	sp, #44	; 0x2c
 801b08a:	ecbd 8b02 	vpop	{d8}
 801b08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b092:	2200      	movs	r2, #0
 801b094:	2300      	movs	r3, #0
 801b096:	4610      	mov	r0, r2
 801b098:	4619      	mov	r1, r3
 801b09a:	f7e5 fbe7 	bl	800086c <__aeabi_ddiv>
 801b09e:	f1b8 0f02 	cmp.w	r8, #2
 801b0a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b0a6:	d1df      	bne.n	801b068 <fmod+0x74>
 801b0a8:	f7fc f8c8 	bl	801723c <__errno>
 801b0ac:	2321      	movs	r3, #33	; 0x21
 801b0ae:	6003      	str	r3, [r0, #0]
 801b0b0:	e7de      	b.n	801b070 <fmod+0x7c>
 801b0b2:	bf00      	nop
 801b0b4:	200003a4 	.word	0x200003a4
 801b0b8:	0801e6eb 	.word	0x0801e6eb

0801b0bc <pow>:
 801b0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0c0:	ed2d 8b04 	vpush	{d8-d9}
 801b0c4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801b398 <pow+0x2dc>
 801b0c8:	b08d      	sub	sp, #52	; 0x34
 801b0ca:	ec57 6b10 	vmov	r6, r7, d0
 801b0ce:	ec55 4b11 	vmov	r4, r5, d1
 801b0d2:	f000 fdb5 	bl	801bc40 <__ieee754_pow>
 801b0d6:	f999 3000 	ldrsb.w	r3, [r9]
 801b0da:	9300      	str	r3, [sp, #0]
 801b0dc:	3301      	adds	r3, #1
 801b0de:	eeb0 8a40 	vmov.f32	s16, s0
 801b0e2:	eef0 8a60 	vmov.f32	s17, s1
 801b0e6:	46c8      	mov	r8, r9
 801b0e8:	d05f      	beq.n	801b1aa <pow+0xee>
 801b0ea:	4622      	mov	r2, r4
 801b0ec:	462b      	mov	r3, r5
 801b0ee:	4620      	mov	r0, r4
 801b0f0:	4629      	mov	r1, r5
 801b0f2:	f7e5 fd2b 	bl	8000b4c <__aeabi_dcmpun>
 801b0f6:	4683      	mov	fp, r0
 801b0f8:	2800      	cmp	r0, #0
 801b0fa:	d156      	bne.n	801b1aa <pow+0xee>
 801b0fc:	4632      	mov	r2, r6
 801b0fe:	463b      	mov	r3, r7
 801b100:	4630      	mov	r0, r6
 801b102:	4639      	mov	r1, r7
 801b104:	f7e5 fd22 	bl	8000b4c <__aeabi_dcmpun>
 801b108:	9001      	str	r0, [sp, #4]
 801b10a:	b1e8      	cbz	r0, 801b148 <pow+0x8c>
 801b10c:	2200      	movs	r2, #0
 801b10e:	2300      	movs	r3, #0
 801b110:	4620      	mov	r0, r4
 801b112:	4629      	mov	r1, r5
 801b114:	f7e5 fce8 	bl	8000ae8 <__aeabi_dcmpeq>
 801b118:	2800      	cmp	r0, #0
 801b11a:	d046      	beq.n	801b1aa <pow+0xee>
 801b11c:	2301      	movs	r3, #1
 801b11e:	9302      	str	r3, [sp, #8]
 801b120:	4b96      	ldr	r3, [pc, #600]	; (801b37c <pow+0x2c0>)
 801b122:	9303      	str	r3, [sp, #12]
 801b124:	4b96      	ldr	r3, [pc, #600]	; (801b380 <pow+0x2c4>)
 801b126:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801b12a:	2200      	movs	r2, #0
 801b12c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b130:	9b00      	ldr	r3, [sp, #0]
 801b132:	2b02      	cmp	r3, #2
 801b134:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b138:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b13c:	d033      	beq.n	801b1a6 <pow+0xea>
 801b13e:	a802      	add	r0, sp, #8
 801b140:	f002 fc32 	bl	801d9a8 <matherr>
 801b144:	bb48      	cbnz	r0, 801b19a <pow+0xde>
 801b146:	e05d      	b.n	801b204 <pow+0x148>
 801b148:	f04f 0a00 	mov.w	sl, #0
 801b14c:	f04f 0b00 	mov.w	fp, #0
 801b150:	4652      	mov	r2, sl
 801b152:	465b      	mov	r3, fp
 801b154:	4630      	mov	r0, r6
 801b156:	4639      	mov	r1, r7
 801b158:	f7e5 fcc6 	bl	8000ae8 <__aeabi_dcmpeq>
 801b15c:	ec4b ab19 	vmov	d9, sl, fp
 801b160:	2800      	cmp	r0, #0
 801b162:	d054      	beq.n	801b20e <pow+0x152>
 801b164:	4652      	mov	r2, sl
 801b166:	465b      	mov	r3, fp
 801b168:	4620      	mov	r0, r4
 801b16a:	4629      	mov	r1, r5
 801b16c:	f7e5 fcbc 	bl	8000ae8 <__aeabi_dcmpeq>
 801b170:	4680      	mov	r8, r0
 801b172:	b318      	cbz	r0, 801b1bc <pow+0x100>
 801b174:	2301      	movs	r3, #1
 801b176:	9302      	str	r3, [sp, #8]
 801b178:	4b80      	ldr	r3, [pc, #512]	; (801b37c <pow+0x2c0>)
 801b17a:	9303      	str	r3, [sp, #12]
 801b17c:	9b01      	ldr	r3, [sp, #4]
 801b17e:	930a      	str	r3, [sp, #40]	; 0x28
 801b180:	9b00      	ldr	r3, [sp, #0]
 801b182:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b186:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b18a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d0d5      	beq.n	801b13e <pow+0x82>
 801b192:	4b7b      	ldr	r3, [pc, #492]	; (801b380 <pow+0x2c4>)
 801b194:	2200      	movs	r2, #0
 801b196:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b19c:	b11b      	cbz	r3, 801b1a6 <pow+0xea>
 801b19e:	f7fc f84d 	bl	801723c <__errno>
 801b1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1a4:	6003      	str	r3, [r0, #0]
 801b1a6:	ed9d 8b08 	vldr	d8, [sp, #32]
 801b1aa:	eeb0 0a48 	vmov.f32	s0, s16
 801b1ae:	eef0 0a68 	vmov.f32	s1, s17
 801b1b2:	b00d      	add	sp, #52	; 0x34
 801b1b4:	ecbd 8b04 	vpop	{d8-d9}
 801b1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1bc:	ec45 4b10 	vmov	d0, r4, r5
 801b1c0:	f002 fb63 	bl	801d88a <finite>
 801b1c4:	2800      	cmp	r0, #0
 801b1c6:	d0f0      	beq.n	801b1aa <pow+0xee>
 801b1c8:	4652      	mov	r2, sl
 801b1ca:	465b      	mov	r3, fp
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	4629      	mov	r1, r5
 801b1d0:	f7e5 fc94 	bl	8000afc <__aeabi_dcmplt>
 801b1d4:	2800      	cmp	r0, #0
 801b1d6:	d0e8      	beq.n	801b1aa <pow+0xee>
 801b1d8:	2301      	movs	r3, #1
 801b1da:	9302      	str	r3, [sp, #8]
 801b1dc:	4b67      	ldr	r3, [pc, #412]	; (801b37c <pow+0x2c0>)
 801b1de:	9303      	str	r3, [sp, #12]
 801b1e0:	f999 3000 	ldrsb.w	r3, [r9]
 801b1e4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801b1e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b1ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b1f0:	b913      	cbnz	r3, 801b1f8 <pow+0x13c>
 801b1f2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b1f6:	e7a2      	b.n	801b13e <pow+0x82>
 801b1f8:	4962      	ldr	r1, [pc, #392]	; (801b384 <pow+0x2c8>)
 801b1fa:	2000      	movs	r0, #0
 801b1fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b200:	2b02      	cmp	r3, #2
 801b202:	d19c      	bne.n	801b13e <pow+0x82>
 801b204:	f7fc f81a 	bl	801723c <__errno>
 801b208:	2321      	movs	r3, #33	; 0x21
 801b20a:	6003      	str	r3, [r0, #0]
 801b20c:	e7c5      	b.n	801b19a <pow+0xde>
 801b20e:	eeb0 0a48 	vmov.f32	s0, s16
 801b212:	eef0 0a68 	vmov.f32	s1, s17
 801b216:	f002 fb38 	bl	801d88a <finite>
 801b21a:	9000      	str	r0, [sp, #0]
 801b21c:	2800      	cmp	r0, #0
 801b21e:	f040 8081 	bne.w	801b324 <pow+0x268>
 801b222:	ec47 6b10 	vmov	d0, r6, r7
 801b226:	f002 fb30 	bl	801d88a <finite>
 801b22a:	2800      	cmp	r0, #0
 801b22c:	d07a      	beq.n	801b324 <pow+0x268>
 801b22e:	ec45 4b10 	vmov	d0, r4, r5
 801b232:	f002 fb2a 	bl	801d88a <finite>
 801b236:	2800      	cmp	r0, #0
 801b238:	d074      	beq.n	801b324 <pow+0x268>
 801b23a:	ec53 2b18 	vmov	r2, r3, d8
 801b23e:	ee18 0a10 	vmov	r0, s16
 801b242:	4619      	mov	r1, r3
 801b244:	f7e5 fc82 	bl	8000b4c <__aeabi_dcmpun>
 801b248:	f999 9000 	ldrsb.w	r9, [r9]
 801b24c:	4b4b      	ldr	r3, [pc, #300]	; (801b37c <pow+0x2c0>)
 801b24e:	b1b0      	cbz	r0, 801b27e <pow+0x1c2>
 801b250:	2201      	movs	r2, #1
 801b252:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b256:	9b00      	ldr	r3, [sp, #0]
 801b258:	930a      	str	r3, [sp, #40]	; 0x28
 801b25a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b25e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b262:	f1b9 0f00 	cmp.w	r9, #0
 801b266:	d0c4      	beq.n	801b1f2 <pow+0x136>
 801b268:	4652      	mov	r2, sl
 801b26a:	465b      	mov	r3, fp
 801b26c:	4650      	mov	r0, sl
 801b26e:	4659      	mov	r1, fp
 801b270:	f7e5 fafc 	bl	800086c <__aeabi_ddiv>
 801b274:	f1b9 0f02 	cmp.w	r9, #2
 801b278:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b27c:	e7c1      	b.n	801b202 <pow+0x146>
 801b27e:	2203      	movs	r2, #3
 801b280:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b284:	900a      	str	r0, [sp, #40]	; 0x28
 801b286:	4629      	mov	r1, r5
 801b288:	4620      	mov	r0, r4
 801b28a:	2200      	movs	r2, #0
 801b28c:	4b3e      	ldr	r3, [pc, #248]	; (801b388 <pow+0x2cc>)
 801b28e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b292:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b296:	f7e5 f9bf 	bl	8000618 <__aeabi_dmul>
 801b29a:	4604      	mov	r4, r0
 801b29c:	460d      	mov	r5, r1
 801b29e:	f1b9 0f00 	cmp.w	r9, #0
 801b2a2:	d124      	bne.n	801b2ee <pow+0x232>
 801b2a4:	4b39      	ldr	r3, [pc, #228]	; (801b38c <pow+0x2d0>)
 801b2a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b2aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b2ae:	4630      	mov	r0, r6
 801b2b0:	4652      	mov	r2, sl
 801b2b2:	465b      	mov	r3, fp
 801b2b4:	4639      	mov	r1, r7
 801b2b6:	f7e5 fc21 	bl	8000afc <__aeabi_dcmplt>
 801b2ba:	2800      	cmp	r0, #0
 801b2bc:	d056      	beq.n	801b36c <pow+0x2b0>
 801b2be:	ec45 4b10 	vmov	d0, r4, r5
 801b2c2:	f002 fb7d 	bl	801d9c0 <rint>
 801b2c6:	4622      	mov	r2, r4
 801b2c8:	462b      	mov	r3, r5
 801b2ca:	ec51 0b10 	vmov	r0, r1, d0
 801b2ce:	f7e5 fc0b 	bl	8000ae8 <__aeabi_dcmpeq>
 801b2d2:	b920      	cbnz	r0, 801b2de <pow+0x222>
 801b2d4:	4b2e      	ldr	r3, [pc, #184]	; (801b390 <pow+0x2d4>)
 801b2d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b2da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b2de:	f998 3000 	ldrsb.w	r3, [r8]
 801b2e2:	2b02      	cmp	r3, #2
 801b2e4:	d142      	bne.n	801b36c <pow+0x2b0>
 801b2e6:	f7fb ffa9 	bl	801723c <__errno>
 801b2ea:	2322      	movs	r3, #34	; 0x22
 801b2ec:	e78d      	b.n	801b20a <pow+0x14e>
 801b2ee:	4b29      	ldr	r3, [pc, #164]	; (801b394 <pow+0x2d8>)
 801b2f0:	2200      	movs	r2, #0
 801b2f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b2f6:	4630      	mov	r0, r6
 801b2f8:	4652      	mov	r2, sl
 801b2fa:	465b      	mov	r3, fp
 801b2fc:	4639      	mov	r1, r7
 801b2fe:	f7e5 fbfd 	bl	8000afc <__aeabi_dcmplt>
 801b302:	2800      	cmp	r0, #0
 801b304:	d0eb      	beq.n	801b2de <pow+0x222>
 801b306:	ec45 4b10 	vmov	d0, r4, r5
 801b30a:	f002 fb59 	bl	801d9c0 <rint>
 801b30e:	4622      	mov	r2, r4
 801b310:	462b      	mov	r3, r5
 801b312:	ec51 0b10 	vmov	r0, r1, d0
 801b316:	f7e5 fbe7 	bl	8000ae8 <__aeabi_dcmpeq>
 801b31a:	2800      	cmp	r0, #0
 801b31c:	d1df      	bne.n	801b2de <pow+0x222>
 801b31e:	2200      	movs	r2, #0
 801b320:	4b18      	ldr	r3, [pc, #96]	; (801b384 <pow+0x2c8>)
 801b322:	e7da      	b.n	801b2da <pow+0x21e>
 801b324:	2200      	movs	r2, #0
 801b326:	2300      	movs	r3, #0
 801b328:	ec51 0b18 	vmov	r0, r1, d8
 801b32c:	f7e5 fbdc 	bl	8000ae8 <__aeabi_dcmpeq>
 801b330:	2800      	cmp	r0, #0
 801b332:	f43f af3a 	beq.w	801b1aa <pow+0xee>
 801b336:	ec47 6b10 	vmov	d0, r6, r7
 801b33a:	f002 faa6 	bl	801d88a <finite>
 801b33e:	2800      	cmp	r0, #0
 801b340:	f43f af33 	beq.w	801b1aa <pow+0xee>
 801b344:	ec45 4b10 	vmov	d0, r4, r5
 801b348:	f002 fa9f 	bl	801d88a <finite>
 801b34c:	2800      	cmp	r0, #0
 801b34e:	f43f af2c 	beq.w	801b1aa <pow+0xee>
 801b352:	2304      	movs	r3, #4
 801b354:	9302      	str	r3, [sp, #8]
 801b356:	4b09      	ldr	r3, [pc, #36]	; (801b37c <pow+0x2c0>)
 801b358:	9303      	str	r3, [sp, #12]
 801b35a:	2300      	movs	r3, #0
 801b35c:	930a      	str	r3, [sp, #40]	; 0x28
 801b35e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b362:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b366:	ed8d 9b08 	vstr	d9, [sp, #32]
 801b36a:	e7b8      	b.n	801b2de <pow+0x222>
 801b36c:	a802      	add	r0, sp, #8
 801b36e:	f002 fb1b 	bl	801d9a8 <matherr>
 801b372:	2800      	cmp	r0, #0
 801b374:	f47f af11 	bne.w	801b19a <pow+0xde>
 801b378:	e7b5      	b.n	801b2e6 <pow+0x22a>
 801b37a:	bf00      	nop
 801b37c:	0801e6f0 	.word	0x0801e6f0
 801b380:	3ff00000 	.word	0x3ff00000
 801b384:	fff00000 	.word	0xfff00000
 801b388:	3fe00000 	.word	0x3fe00000
 801b38c:	47efffff 	.word	0x47efffff
 801b390:	c7efffff 	.word	0xc7efffff
 801b394:	7ff00000 	.word	0x7ff00000
 801b398:	200003a4 	.word	0x200003a4

0801b39c <sqrtf>:
 801b39c:	b510      	push	{r4, lr}
 801b39e:	ed2d 8b02 	vpush	{d8}
 801b3a2:	b08a      	sub	sp, #40	; 0x28
 801b3a4:	eeb0 8a40 	vmov.f32	s16, s0
 801b3a8:	f001 fbfc 	bl	801cba4 <__ieee754_sqrtf>
 801b3ac:	4b21      	ldr	r3, [pc, #132]	; (801b434 <sqrtf+0x98>)
 801b3ae:	f993 4000 	ldrsb.w	r4, [r3]
 801b3b2:	1c63      	adds	r3, r4, #1
 801b3b4:	d02c      	beq.n	801b410 <sqrtf+0x74>
 801b3b6:	eeb4 8a48 	vcmp.f32	s16, s16
 801b3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3be:	d627      	bvs.n	801b410 <sqrtf+0x74>
 801b3c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3c8:	d522      	bpl.n	801b410 <sqrtf+0x74>
 801b3ca:	2301      	movs	r3, #1
 801b3cc:	9300      	str	r3, [sp, #0]
 801b3ce:	4b1a      	ldr	r3, [pc, #104]	; (801b438 <sqrtf+0x9c>)
 801b3d0:	9301      	str	r3, [sp, #4]
 801b3d2:	ee18 0a10 	vmov	r0, s16
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	9308      	str	r3, [sp, #32]
 801b3da:	f7e5 f8c5 	bl	8000568 <__aeabi_f2d>
 801b3de:	2200      	movs	r2, #0
 801b3e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b3e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b3e8:	2300      	movs	r3, #0
 801b3ea:	b9ac      	cbnz	r4, 801b418 <sqrtf+0x7c>
 801b3ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b3f0:	4668      	mov	r0, sp
 801b3f2:	f002 fad9 	bl	801d9a8 <matherr>
 801b3f6:	b1b8      	cbz	r0, 801b428 <sqrtf+0x8c>
 801b3f8:	9b08      	ldr	r3, [sp, #32]
 801b3fa:	b11b      	cbz	r3, 801b404 <sqrtf+0x68>
 801b3fc:	f7fb ff1e 	bl	801723c <__errno>
 801b400:	9b08      	ldr	r3, [sp, #32]
 801b402:	6003      	str	r3, [r0, #0]
 801b404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b408:	f7e5 fbfe 	bl	8000c08 <__aeabi_d2f>
 801b40c:	ee00 0a10 	vmov	s0, r0
 801b410:	b00a      	add	sp, #40	; 0x28
 801b412:	ecbd 8b02 	vpop	{d8}
 801b416:	bd10      	pop	{r4, pc}
 801b418:	4610      	mov	r0, r2
 801b41a:	4619      	mov	r1, r3
 801b41c:	f7e5 fa26 	bl	800086c <__aeabi_ddiv>
 801b420:	2c02      	cmp	r4, #2
 801b422:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b426:	d1e3      	bne.n	801b3f0 <sqrtf+0x54>
 801b428:	f7fb ff08 	bl	801723c <__errno>
 801b42c:	2321      	movs	r3, #33	; 0x21
 801b42e:	6003      	str	r3, [r0, #0]
 801b430:	e7e2      	b.n	801b3f8 <sqrtf+0x5c>
 801b432:	bf00      	nop
 801b434:	200003a4 	.word	0x200003a4
 801b438:	0801e6f4 	.word	0x0801e6f4
 801b43c:	00000000 	.word	0x00000000

0801b440 <__ieee754_asin>:
 801b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b444:	ec55 4b10 	vmov	r4, r5, d0
 801b448:	4bcb      	ldr	r3, [pc, #812]	; (801b778 <__ieee754_asin+0x338>)
 801b44a:	b087      	sub	sp, #28
 801b44c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801b450:	429f      	cmp	r7, r3
 801b452:	9501      	str	r5, [sp, #4]
 801b454:	dd31      	ble.n	801b4ba <__ieee754_asin+0x7a>
 801b456:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801b45a:	ee10 3a10 	vmov	r3, s0
 801b45e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801b462:	433b      	orrs	r3, r7
 801b464:	d117      	bne.n	801b496 <__ieee754_asin+0x56>
 801b466:	a3aa      	add	r3, pc, #680	; (adr r3, 801b710 <__ieee754_asin+0x2d0>)
 801b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b46c:	ee10 0a10 	vmov	r0, s0
 801b470:	4629      	mov	r1, r5
 801b472:	f7e5 f8d1 	bl	8000618 <__aeabi_dmul>
 801b476:	a3a8      	add	r3, pc, #672	; (adr r3, 801b718 <__ieee754_asin+0x2d8>)
 801b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b47c:	4606      	mov	r6, r0
 801b47e:	460f      	mov	r7, r1
 801b480:	4620      	mov	r0, r4
 801b482:	4629      	mov	r1, r5
 801b484:	f7e5 f8c8 	bl	8000618 <__aeabi_dmul>
 801b488:	4602      	mov	r2, r0
 801b48a:	460b      	mov	r3, r1
 801b48c:	4630      	mov	r0, r6
 801b48e:	4639      	mov	r1, r7
 801b490:	f7e4 ff0c 	bl	80002ac <__adddf3>
 801b494:	e00a      	b.n	801b4ac <__ieee754_asin+0x6c>
 801b496:	ee10 2a10 	vmov	r2, s0
 801b49a:	462b      	mov	r3, r5
 801b49c:	4620      	mov	r0, r4
 801b49e:	4629      	mov	r1, r5
 801b4a0:	f7e4 ff02 	bl	80002a8 <__aeabi_dsub>
 801b4a4:	4602      	mov	r2, r0
 801b4a6:	460b      	mov	r3, r1
 801b4a8:	f7e5 f9e0 	bl	800086c <__aeabi_ddiv>
 801b4ac:	4604      	mov	r4, r0
 801b4ae:	460d      	mov	r5, r1
 801b4b0:	ec45 4b10 	vmov	d0, r4, r5
 801b4b4:	b007      	add	sp, #28
 801b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4ba:	4bb0      	ldr	r3, [pc, #704]	; (801b77c <__ieee754_asin+0x33c>)
 801b4bc:	429f      	cmp	r7, r3
 801b4be:	dc11      	bgt.n	801b4e4 <__ieee754_asin+0xa4>
 801b4c0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801b4c4:	f280 80ae 	bge.w	801b624 <__ieee754_asin+0x1e4>
 801b4c8:	a395      	add	r3, pc, #596	; (adr r3, 801b720 <__ieee754_asin+0x2e0>)
 801b4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ce:	ee10 0a10 	vmov	r0, s0
 801b4d2:	4629      	mov	r1, r5
 801b4d4:	f7e4 feea 	bl	80002ac <__adddf3>
 801b4d8:	2200      	movs	r2, #0
 801b4da:	4ba9      	ldr	r3, [pc, #676]	; (801b780 <__ieee754_asin+0x340>)
 801b4dc:	f7e5 fb2c 	bl	8000b38 <__aeabi_dcmpgt>
 801b4e0:	2800      	cmp	r0, #0
 801b4e2:	d1e5      	bne.n	801b4b0 <__ieee754_asin+0x70>
 801b4e4:	ec45 4b10 	vmov	d0, r4, r5
 801b4e8:	f002 f9c6 	bl	801d878 <fabs>
 801b4ec:	2000      	movs	r0, #0
 801b4ee:	ec53 2b10 	vmov	r2, r3, d0
 801b4f2:	49a3      	ldr	r1, [pc, #652]	; (801b780 <__ieee754_asin+0x340>)
 801b4f4:	f7e4 fed8 	bl	80002a8 <__aeabi_dsub>
 801b4f8:	2200      	movs	r2, #0
 801b4fa:	4ba2      	ldr	r3, [pc, #648]	; (801b784 <__ieee754_asin+0x344>)
 801b4fc:	f7e5 f88c 	bl	8000618 <__aeabi_dmul>
 801b500:	a389      	add	r3, pc, #548	; (adr r3, 801b728 <__ieee754_asin+0x2e8>)
 801b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b506:	4604      	mov	r4, r0
 801b508:	460d      	mov	r5, r1
 801b50a:	f7e5 f885 	bl	8000618 <__aeabi_dmul>
 801b50e:	a388      	add	r3, pc, #544	; (adr r3, 801b730 <__ieee754_asin+0x2f0>)
 801b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b514:	f7e4 feca 	bl	80002ac <__adddf3>
 801b518:	4622      	mov	r2, r4
 801b51a:	462b      	mov	r3, r5
 801b51c:	f7e5 f87c 	bl	8000618 <__aeabi_dmul>
 801b520:	a385      	add	r3, pc, #532	; (adr r3, 801b738 <__ieee754_asin+0x2f8>)
 801b522:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b526:	f7e4 febf 	bl	80002a8 <__aeabi_dsub>
 801b52a:	4622      	mov	r2, r4
 801b52c:	462b      	mov	r3, r5
 801b52e:	f7e5 f873 	bl	8000618 <__aeabi_dmul>
 801b532:	a383      	add	r3, pc, #524	; (adr r3, 801b740 <__ieee754_asin+0x300>)
 801b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b538:	f7e4 feb8 	bl	80002ac <__adddf3>
 801b53c:	4622      	mov	r2, r4
 801b53e:	462b      	mov	r3, r5
 801b540:	f7e5 f86a 	bl	8000618 <__aeabi_dmul>
 801b544:	a380      	add	r3, pc, #512	; (adr r3, 801b748 <__ieee754_asin+0x308>)
 801b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b54a:	f7e4 fead 	bl	80002a8 <__aeabi_dsub>
 801b54e:	4622      	mov	r2, r4
 801b550:	462b      	mov	r3, r5
 801b552:	f7e5 f861 	bl	8000618 <__aeabi_dmul>
 801b556:	a37e      	add	r3, pc, #504	; (adr r3, 801b750 <__ieee754_asin+0x310>)
 801b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55c:	f7e4 fea6 	bl	80002ac <__adddf3>
 801b560:	4622      	mov	r2, r4
 801b562:	462b      	mov	r3, r5
 801b564:	f7e5 f858 	bl	8000618 <__aeabi_dmul>
 801b568:	a37b      	add	r3, pc, #492	; (adr r3, 801b758 <__ieee754_asin+0x318>)
 801b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b56e:	4680      	mov	r8, r0
 801b570:	4689      	mov	r9, r1
 801b572:	4620      	mov	r0, r4
 801b574:	4629      	mov	r1, r5
 801b576:	f7e5 f84f 	bl	8000618 <__aeabi_dmul>
 801b57a:	a379      	add	r3, pc, #484	; (adr r3, 801b760 <__ieee754_asin+0x320>)
 801b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b580:	f7e4 fe92 	bl	80002a8 <__aeabi_dsub>
 801b584:	4622      	mov	r2, r4
 801b586:	462b      	mov	r3, r5
 801b588:	f7e5 f846 	bl	8000618 <__aeabi_dmul>
 801b58c:	a376      	add	r3, pc, #472	; (adr r3, 801b768 <__ieee754_asin+0x328>)
 801b58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b592:	f7e4 fe8b 	bl	80002ac <__adddf3>
 801b596:	4622      	mov	r2, r4
 801b598:	462b      	mov	r3, r5
 801b59a:	f7e5 f83d 	bl	8000618 <__aeabi_dmul>
 801b59e:	a374      	add	r3, pc, #464	; (adr r3, 801b770 <__ieee754_asin+0x330>)
 801b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5a4:	f7e4 fe80 	bl	80002a8 <__aeabi_dsub>
 801b5a8:	4622      	mov	r2, r4
 801b5aa:	462b      	mov	r3, r5
 801b5ac:	f7e5 f834 	bl	8000618 <__aeabi_dmul>
 801b5b0:	4b73      	ldr	r3, [pc, #460]	; (801b780 <__ieee754_asin+0x340>)
 801b5b2:	2200      	movs	r2, #0
 801b5b4:	f7e4 fe7a 	bl	80002ac <__adddf3>
 801b5b8:	ec45 4b10 	vmov	d0, r4, r5
 801b5bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b5c0:	f001 fa40 	bl	801ca44 <__ieee754_sqrt>
 801b5c4:	4b70      	ldr	r3, [pc, #448]	; (801b788 <__ieee754_asin+0x348>)
 801b5c6:	429f      	cmp	r7, r3
 801b5c8:	ec5b ab10 	vmov	sl, fp, d0
 801b5cc:	f340 80de 	ble.w	801b78c <__ieee754_asin+0x34c>
 801b5d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b5d4:	4640      	mov	r0, r8
 801b5d6:	4649      	mov	r1, r9
 801b5d8:	f7e5 f948 	bl	800086c <__aeabi_ddiv>
 801b5dc:	4652      	mov	r2, sl
 801b5de:	465b      	mov	r3, fp
 801b5e0:	f7e5 f81a 	bl	8000618 <__aeabi_dmul>
 801b5e4:	4652      	mov	r2, sl
 801b5e6:	465b      	mov	r3, fp
 801b5e8:	f7e4 fe60 	bl	80002ac <__adddf3>
 801b5ec:	4602      	mov	r2, r0
 801b5ee:	460b      	mov	r3, r1
 801b5f0:	f7e4 fe5c 	bl	80002ac <__adddf3>
 801b5f4:	a348      	add	r3, pc, #288	; (adr r3, 801b718 <__ieee754_asin+0x2d8>)
 801b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5fa:	f7e4 fe55 	bl	80002a8 <__aeabi_dsub>
 801b5fe:	4602      	mov	r2, r0
 801b600:	460b      	mov	r3, r1
 801b602:	a143      	add	r1, pc, #268	; (adr r1, 801b710 <__ieee754_asin+0x2d0>)
 801b604:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b608:	f7e4 fe4e 	bl	80002a8 <__aeabi_dsub>
 801b60c:	9b01      	ldr	r3, [sp, #4]
 801b60e:	2b00      	cmp	r3, #0
 801b610:	bfdc      	itt	le
 801b612:	4602      	movle	r2, r0
 801b614:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801b618:	4604      	mov	r4, r0
 801b61a:	460d      	mov	r5, r1
 801b61c:	bfdc      	itt	le
 801b61e:	4614      	movle	r4, r2
 801b620:	461d      	movle	r5, r3
 801b622:	e745      	b.n	801b4b0 <__ieee754_asin+0x70>
 801b624:	ee10 2a10 	vmov	r2, s0
 801b628:	ee10 0a10 	vmov	r0, s0
 801b62c:	462b      	mov	r3, r5
 801b62e:	4629      	mov	r1, r5
 801b630:	f7e4 fff2 	bl	8000618 <__aeabi_dmul>
 801b634:	a33c      	add	r3, pc, #240	; (adr r3, 801b728 <__ieee754_asin+0x2e8>)
 801b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b63a:	4606      	mov	r6, r0
 801b63c:	460f      	mov	r7, r1
 801b63e:	f7e4 ffeb 	bl	8000618 <__aeabi_dmul>
 801b642:	a33b      	add	r3, pc, #236	; (adr r3, 801b730 <__ieee754_asin+0x2f0>)
 801b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b648:	f7e4 fe30 	bl	80002ac <__adddf3>
 801b64c:	4632      	mov	r2, r6
 801b64e:	463b      	mov	r3, r7
 801b650:	f7e4 ffe2 	bl	8000618 <__aeabi_dmul>
 801b654:	a338      	add	r3, pc, #224	; (adr r3, 801b738 <__ieee754_asin+0x2f8>)
 801b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b65a:	f7e4 fe25 	bl	80002a8 <__aeabi_dsub>
 801b65e:	4632      	mov	r2, r6
 801b660:	463b      	mov	r3, r7
 801b662:	f7e4 ffd9 	bl	8000618 <__aeabi_dmul>
 801b666:	a336      	add	r3, pc, #216	; (adr r3, 801b740 <__ieee754_asin+0x300>)
 801b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b66c:	f7e4 fe1e 	bl	80002ac <__adddf3>
 801b670:	4632      	mov	r2, r6
 801b672:	463b      	mov	r3, r7
 801b674:	f7e4 ffd0 	bl	8000618 <__aeabi_dmul>
 801b678:	a333      	add	r3, pc, #204	; (adr r3, 801b748 <__ieee754_asin+0x308>)
 801b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b67e:	f7e4 fe13 	bl	80002a8 <__aeabi_dsub>
 801b682:	4632      	mov	r2, r6
 801b684:	463b      	mov	r3, r7
 801b686:	f7e4 ffc7 	bl	8000618 <__aeabi_dmul>
 801b68a:	a331      	add	r3, pc, #196	; (adr r3, 801b750 <__ieee754_asin+0x310>)
 801b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b690:	f7e4 fe0c 	bl	80002ac <__adddf3>
 801b694:	4632      	mov	r2, r6
 801b696:	463b      	mov	r3, r7
 801b698:	f7e4 ffbe 	bl	8000618 <__aeabi_dmul>
 801b69c:	a32e      	add	r3, pc, #184	; (adr r3, 801b758 <__ieee754_asin+0x318>)
 801b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6a2:	4680      	mov	r8, r0
 801b6a4:	4689      	mov	r9, r1
 801b6a6:	4630      	mov	r0, r6
 801b6a8:	4639      	mov	r1, r7
 801b6aa:	f7e4 ffb5 	bl	8000618 <__aeabi_dmul>
 801b6ae:	a32c      	add	r3, pc, #176	; (adr r3, 801b760 <__ieee754_asin+0x320>)
 801b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6b4:	f7e4 fdf8 	bl	80002a8 <__aeabi_dsub>
 801b6b8:	4632      	mov	r2, r6
 801b6ba:	463b      	mov	r3, r7
 801b6bc:	f7e4 ffac 	bl	8000618 <__aeabi_dmul>
 801b6c0:	a329      	add	r3, pc, #164	; (adr r3, 801b768 <__ieee754_asin+0x328>)
 801b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6c6:	f7e4 fdf1 	bl	80002ac <__adddf3>
 801b6ca:	4632      	mov	r2, r6
 801b6cc:	463b      	mov	r3, r7
 801b6ce:	f7e4 ffa3 	bl	8000618 <__aeabi_dmul>
 801b6d2:	a327      	add	r3, pc, #156	; (adr r3, 801b770 <__ieee754_asin+0x330>)
 801b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d8:	f7e4 fde6 	bl	80002a8 <__aeabi_dsub>
 801b6dc:	4632      	mov	r2, r6
 801b6de:	463b      	mov	r3, r7
 801b6e0:	f7e4 ff9a 	bl	8000618 <__aeabi_dmul>
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	4b26      	ldr	r3, [pc, #152]	; (801b780 <__ieee754_asin+0x340>)
 801b6e8:	f7e4 fde0 	bl	80002ac <__adddf3>
 801b6ec:	4602      	mov	r2, r0
 801b6ee:	460b      	mov	r3, r1
 801b6f0:	4640      	mov	r0, r8
 801b6f2:	4649      	mov	r1, r9
 801b6f4:	f7e5 f8ba 	bl	800086c <__aeabi_ddiv>
 801b6f8:	4622      	mov	r2, r4
 801b6fa:	462b      	mov	r3, r5
 801b6fc:	f7e4 ff8c 	bl	8000618 <__aeabi_dmul>
 801b700:	4602      	mov	r2, r0
 801b702:	460b      	mov	r3, r1
 801b704:	4620      	mov	r0, r4
 801b706:	4629      	mov	r1, r5
 801b708:	e6c2      	b.n	801b490 <__ieee754_asin+0x50>
 801b70a:	bf00      	nop
 801b70c:	f3af 8000 	nop.w
 801b710:	54442d18 	.word	0x54442d18
 801b714:	3ff921fb 	.word	0x3ff921fb
 801b718:	33145c07 	.word	0x33145c07
 801b71c:	3c91a626 	.word	0x3c91a626
 801b720:	8800759c 	.word	0x8800759c
 801b724:	7e37e43c 	.word	0x7e37e43c
 801b728:	0dfdf709 	.word	0x0dfdf709
 801b72c:	3f023de1 	.word	0x3f023de1
 801b730:	7501b288 	.word	0x7501b288
 801b734:	3f49efe0 	.word	0x3f49efe0
 801b738:	b5688f3b 	.word	0xb5688f3b
 801b73c:	3fa48228 	.word	0x3fa48228
 801b740:	0e884455 	.word	0x0e884455
 801b744:	3fc9c155 	.word	0x3fc9c155
 801b748:	03eb6f7d 	.word	0x03eb6f7d
 801b74c:	3fd4d612 	.word	0x3fd4d612
 801b750:	55555555 	.word	0x55555555
 801b754:	3fc55555 	.word	0x3fc55555
 801b758:	b12e9282 	.word	0xb12e9282
 801b75c:	3fb3b8c5 	.word	0x3fb3b8c5
 801b760:	1b8d0159 	.word	0x1b8d0159
 801b764:	3fe6066c 	.word	0x3fe6066c
 801b768:	9c598ac8 	.word	0x9c598ac8
 801b76c:	40002ae5 	.word	0x40002ae5
 801b770:	1c8a2d4b 	.word	0x1c8a2d4b
 801b774:	40033a27 	.word	0x40033a27
 801b778:	3fefffff 	.word	0x3fefffff
 801b77c:	3fdfffff 	.word	0x3fdfffff
 801b780:	3ff00000 	.word	0x3ff00000
 801b784:	3fe00000 	.word	0x3fe00000
 801b788:	3fef3332 	.word	0x3fef3332
 801b78c:	ee10 2a10 	vmov	r2, s0
 801b790:	ee10 0a10 	vmov	r0, s0
 801b794:	465b      	mov	r3, fp
 801b796:	4659      	mov	r1, fp
 801b798:	f7e4 fd88 	bl	80002ac <__adddf3>
 801b79c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b7a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b7a4:	4640      	mov	r0, r8
 801b7a6:	4649      	mov	r1, r9
 801b7a8:	f7e5 f860 	bl	800086c <__aeabi_ddiv>
 801b7ac:	4602      	mov	r2, r0
 801b7ae:	460b      	mov	r3, r1
 801b7b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b7b4:	f7e4 ff30 	bl	8000618 <__aeabi_dmul>
 801b7b8:	2600      	movs	r6, #0
 801b7ba:	4680      	mov	r8, r0
 801b7bc:	4689      	mov	r9, r1
 801b7be:	4632      	mov	r2, r6
 801b7c0:	465b      	mov	r3, fp
 801b7c2:	4630      	mov	r0, r6
 801b7c4:	4659      	mov	r1, fp
 801b7c6:	f7e4 ff27 	bl	8000618 <__aeabi_dmul>
 801b7ca:	4602      	mov	r2, r0
 801b7cc:	460b      	mov	r3, r1
 801b7ce:	4620      	mov	r0, r4
 801b7d0:	4629      	mov	r1, r5
 801b7d2:	f7e4 fd69 	bl	80002a8 <__aeabi_dsub>
 801b7d6:	4632      	mov	r2, r6
 801b7d8:	4604      	mov	r4, r0
 801b7da:	460d      	mov	r5, r1
 801b7dc:	465b      	mov	r3, fp
 801b7de:	4650      	mov	r0, sl
 801b7e0:	4659      	mov	r1, fp
 801b7e2:	f7e4 fd63 	bl	80002ac <__adddf3>
 801b7e6:	4602      	mov	r2, r0
 801b7e8:	460b      	mov	r3, r1
 801b7ea:	4620      	mov	r0, r4
 801b7ec:	4629      	mov	r1, r5
 801b7ee:	f7e5 f83d 	bl	800086c <__aeabi_ddiv>
 801b7f2:	4602      	mov	r2, r0
 801b7f4:	460b      	mov	r3, r1
 801b7f6:	f7e4 fd59 	bl	80002ac <__adddf3>
 801b7fa:	4602      	mov	r2, r0
 801b7fc:	460b      	mov	r3, r1
 801b7fe:	a114      	add	r1, pc, #80	; (adr r1, 801b850 <__ieee754_asin+0x410>)
 801b800:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b804:	f7e4 fd50 	bl	80002a8 <__aeabi_dsub>
 801b808:	4602      	mov	r2, r0
 801b80a:	460b      	mov	r3, r1
 801b80c:	4640      	mov	r0, r8
 801b80e:	4649      	mov	r1, r9
 801b810:	f7e4 fd4a 	bl	80002a8 <__aeabi_dsub>
 801b814:	465f      	mov	r7, fp
 801b816:	4604      	mov	r4, r0
 801b818:	460d      	mov	r5, r1
 801b81a:	4632      	mov	r2, r6
 801b81c:	465b      	mov	r3, fp
 801b81e:	4630      	mov	r0, r6
 801b820:	4639      	mov	r1, r7
 801b822:	f7e4 fd43 	bl	80002ac <__adddf3>
 801b826:	4602      	mov	r2, r0
 801b828:	460b      	mov	r3, r1
 801b82a:	a10b      	add	r1, pc, #44	; (adr r1, 801b858 <__ieee754_asin+0x418>)
 801b82c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b830:	f7e4 fd3a 	bl	80002a8 <__aeabi_dsub>
 801b834:	4602      	mov	r2, r0
 801b836:	460b      	mov	r3, r1
 801b838:	4620      	mov	r0, r4
 801b83a:	4629      	mov	r1, r5
 801b83c:	f7e4 fd34 	bl	80002a8 <__aeabi_dsub>
 801b840:	4602      	mov	r2, r0
 801b842:	460b      	mov	r3, r1
 801b844:	a104      	add	r1, pc, #16	; (adr r1, 801b858 <__ieee754_asin+0x418>)
 801b846:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b84a:	e6dd      	b.n	801b608 <__ieee754_asin+0x1c8>
 801b84c:	f3af 8000 	nop.w
 801b850:	33145c07 	.word	0x33145c07
 801b854:	3c91a626 	.word	0x3c91a626
 801b858:	54442d18 	.word	0x54442d18
 801b85c:	3fe921fb 	.word	0x3fe921fb

0801b860 <__ieee754_atan2>:
 801b860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b864:	ec57 6b11 	vmov	r6, r7, d1
 801b868:	4273      	negs	r3, r6
 801b86a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801b86e:	4333      	orrs	r3, r6
 801b870:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801ba18 <__ieee754_atan2+0x1b8>
 801b874:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801b878:	4573      	cmp	r3, lr
 801b87a:	ec51 0b10 	vmov	r0, r1, d0
 801b87e:	ee11 8a10 	vmov	r8, s2
 801b882:	d80a      	bhi.n	801b89a <__ieee754_atan2+0x3a>
 801b884:	4244      	negs	r4, r0
 801b886:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b88a:	4304      	orrs	r4, r0
 801b88c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801b890:	4574      	cmp	r4, lr
 801b892:	468c      	mov	ip, r1
 801b894:	ee10 9a10 	vmov	r9, s0
 801b898:	d907      	bls.n	801b8aa <__ieee754_atan2+0x4a>
 801b89a:	4632      	mov	r2, r6
 801b89c:	463b      	mov	r3, r7
 801b89e:	f7e4 fd05 	bl	80002ac <__adddf3>
 801b8a2:	ec41 0b10 	vmov	d0, r0, r1
 801b8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801b8ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b8b2:	4334      	orrs	r4, r6
 801b8b4:	d103      	bne.n	801b8be <__ieee754_atan2+0x5e>
 801b8b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8ba:	f001 be3d 	b.w	801d538 <atan>
 801b8be:	17bc      	asrs	r4, r7, #30
 801b8c0:	f004 0402 	and.w	r4, r4, #2
 801b8c4:	ea53 0909 	orrs.w	r9, r3, r9
 801b8c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801b8cc:	d107      	bne.n	801b8de <__ieee754_atan2+0x7e>
 801b8ce:	2c02      	cmp	r4, #2
 801b8d0:	d073      	beq.n	801b9ba <__ieee754_atan2+0x15a>
 801b8d2:	2c03      	cmp	r4, #3
 801b8d4:	d1e5      	bne.n	801b8a2 <__ieee754_atan2+0x42>
 801b8d6:	a13e      	add	r1, pc, #248	; (adr r1, 801b9d0 <__ieee754_atan2+0x170>)
 801b8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b8dc:	e7e1      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b8de:	ea52 0808 	orrs.w	r8, r2, r8
 801b8e2:	d106      	bne.n	801b8f2 <__ieee754_atan2+0x92>
 801b8e4:	f1bc 0f00 	cmp.w	ip, #0
 801b8e8:	da6b      	bge.n	801b9c2 <__ieee754_atan2+0x162>
 801b8ea:	a13b      	add	r1, pc, #236	; (adr r1, 801b9d8 <__ieee754_atan2+0x178>)
 801b8ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b8f0:	e7d7      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b8f2:	4572      	cmp	r2, lr
 801b8f4:	d120      	bne.n	801b938 <__ieee754_atan2+0xd8>
 801b8f6:	4293      	cmp	r3, r2
 801b8f8:	d111      	bne.n	801b91e <__ieee754_atan2+0xbe>
 801b8fa:	2c02      	cmp	r4, #2
 801b8fc:	d007      	beq.n	801b90e <__ieee754_atan2+0xae>
 801b8fe:	2c03      	cmp	r4, #3
 801b900:	d009      	beq.n	801b916 <__ieee754_atan2+0xb6>
 801b902:	2c01      	cmp	r4, #1
 801b904:	d155      	bne.n	801b9b2 <__ieee754_atan2+0x152>
 801b906:	a136      	add	r1, pc, #216	; (adr r1, 801b9e0 <__ieee754_atan2+0x180>)
 801b908:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b90c:	e7c9      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b90e:	a136      	add	r1, pc, #216	; (adr r1, 801b9e8 <__ieee754_atan2+0x188>)
 801b910:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b914:	e7c5      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b916:	a136      	add	r1, pc, #216	; (adr r1, 801b9f0 <__ieee754_atan2+0x190>)
 801b918:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b91c:	e7c1      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b91e:	2c02      	cmp	r4, #2
 801b920:	d04b      	beq.n	801b9ba <__ieee754_atan2+0x15a>
 801b922:	2c03      	cmp	r4, #3
 801b924:	d0d7      	beq.n	801b8d6 <__ieee754_atan2+0x76>
 801b926:	2c01      	cmp	r4, #1
 801b928:	f04f 0000 	mov.w	r0, #0
 801b92c:	d102      	bne.n	801b934 <__ieee754_atan2+0xd4>
 801b92e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801b932:	e7b6      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b934:	2100      	movs	r1, #0
 801b936:	e7b4      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b938:	4573      	cmp	r3, lr
 801b93a:	d0d3      	beq.n	801b8e4 <__ieee754_atan2+0x84>
 801b93c:	1a9b      	subs	r3, r3, r2
 801b93e:	151b      	asrs	r3, r3, #20
 801b940:	2b3c      	cmp	r3, #60	; 0x3c
 801b942:	dc1e      	bgt.n	801b982 <__ieee754_atan2+0x122>
 801b944:	2f00      	cmp	r7, #0
 801b946:	da01      	bge.n	801b94c <__ieee754_atan2+0xec>
 801b948:	333c      	adds	r3, #60	; 0x3c
 801b94a:	db1e      	blt.n	801b98a <__ieee754_atan2+0x12a>
 801b94c:	4632      	mov	r2, r6
 801b94e:	463b      	mov	r3, r7
 801b950:	f7e4 ff8c 	bl	800086c <__aeabi_ddiv>
 801b954:	ec41 0b10 	vmov	d0, r0, r1
 801b958:	f001 ff8e 	bl	801d878 <fabs>
 801b95c:	f001 fdec 	bl	801d538 <atan>
 801b960:	ec51 0b10 	vmov	r0, r1, d0
 801b964:	2c01      	cmp	r4, #1
 801b966:	d013      	beq.n	801b990 <__ieee754_atan2+0x130>
 801b968:	2c02      	cmp	r4, #2
 801b96a:	d015      	beq.n	801b998 <__ieee754_atan2+0x138>
 801b96c:	2c00      	cmp	r4, #0
 801b96e:	d098      	beq.n	801b8a2 <__ieee754_atan2+0x42>
 801b970:	a321      	add	r3, pc, #132	; (adr r3, 801b9f8 <__ieee754_atan2+0x198>)
 801b972:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b976:	f7e4 fc97 	bl	80002a8 <__aeabi_dsub>
 801b97a:	a321      	add	r3, pc, #132	; (adr r3, 801ba00 <__ieee754_atan2+0x1a0>)
 801b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b980:	e014      	b.n	801b9ac <__ieee754_atan2+0x14c>
 801b982:	a121      	add	r1, pc, #132	; (adr r1, 801ba08 <__ieee754_atan2+0x1a8>)
 801b984:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b988:	e7ec      	b.n	801b964 <__ieee754_atan2+0x104>
 801b98a:	2000      	movs	r0, #0
 801b98c:	2100      	movs	r1, #0
 801b98e:	e7e9      	b.n	801b964 <__ieee754_atan2+0x104>
 801b990:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b994:	4619      	mov	r1, r3
 801b996:	e784      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b998:	a317      	add	r3, pc, #92	; (adr r3, 801b9f8 <__ieee754_atan2+0x198>)
 801b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b99e:	f7e4 fc83 	bl	80002a8 <__aeabi_dsub>
 801b9a2:	4602      	mov	r2, r0
 801b9a4:	460b      	mov	r3, r1
 801b9a6:	a116      	add	r1, pc, #88	; (adr r1, 801ba00 <__ieee754_atan2+0x1a0>)
 801b9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9ac:	f7e4 fc7c 	bl	80002a8 <__aeabi_dsub>
 801b9b0:	e777      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b9b2:	a117      	add	r1, pc, #92	; (adr r1, 801ba10 <__ieee754_atan2+0x1b0>)
 801b9b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9b8:	e773      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b9ba:	a111      	add	r1, pc, #68	; (adr r1, 801ba00 <__ieee754_atan2+0x1a0>)
 801b9bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9c0:	e76f      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b9c2:	a111      	add	r1, pc, #68	; (adr r1, 801ba08 <__ieee754_atan2+0x1a8>)
 801b9c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9c8:	e76b      	b.n	801b8a2 <__ieee754_atan2+0x42>
 801b9ca:	bf00      	nop
 801b9cc:	f3af 8000 	nop.w
 801b9d0:	54442d18 	.word	0x54442d18
 801b9d4:	c00921fb 	.word	0xc00921fb
 801b9d8:	54442d18 	.word	0x54442d18
 801b9dc:	bff921fb 	.word	0xbff921fb
 801b9e0:	54442d18 	.word	0x54442d18
 801b9e4:	bfe921fb 	.word	0xbfe921fb
 801b9e8:	7f3321d2 	.word	0x7f3321d2
 801b9ec:	4002d97c 	.word	0x4002d97c
 801b9f0:	7f3321d2 	.word	0x7f3321d2
 801b9f4:	c002d97c 	.word	0xc002d97c
 801b9f8:	33145c07 	.word	0x33145c07
 801b9fc:	3ca1a626 	.word	0x3ca1a626
 801ba00:	54442d18 	.word	0x54442d18
 801ba04:	400921fb 	.word	0x400921fb
 801ba08:	54442d18 	.word	0x54442d18
 801ba0c:	3ff921fb 	.word	0x3ff921fb
 801ba10:	54442d18 	.word	0x54442d18
 801ba14:	3fe921fb 	.word	0x3fe921fb
 801ba18:	7ff00000 	.word	0x7ff00000

0801ba1c <__ieee754_fmod>:
 801ba1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba20:	ec53 2b11 	vmov	r2, r3, d1
 801ba24:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 801ba28:	ea5e 0402 	orrs.w	r4, lr, r2
 801ba2c:	ec51 0b10 	vmov	r0, r1, d0
 801ba30:	461e      	mov	r6, r3
 801ba32:	ee11 5a10 	vmov	r5, s2
 801ba36:	4694      	mov	ip, r2
 801ba38:	d00c      	beq.n	801ba54 <__ieee754_fmod+0x38>
 801ba3a:	4c7a      	ldr	r4, [pc, #488]	; (801bc24 <__ieee754_fmod+0x208>)
 801ba3c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801ba40:	45a0      	cmp	r8, r4
 801ba42:	4689      	mov	r9, r1
 801ba44:	dc06      	bgt.n	801ba54 <__ieee754_fmod+0x38>
 801ba46:	4254      	negs	r4, r2
 801ba48:	4314      	orrs	r4, r2
 801ba4a:	4f77      	ldr	r7, [pc, #476]	; (801bc28 <__ieee754_fmod+0x20c>)
 801ba4c:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 801ba50:	42bc      	cmp	r4, r7
 801ba52:	d909      	bls.n	801ba68 <__ieee754_fmod+0x4c>
 801ba54:	f7e4 fde0 	bl	8000618 <__aeabi_dmul>
 801ba58:	4602      	mov	r2, r0
 801ba5a:	460b      	mov	r3, r1
 801ba5c:	f7e4 ff06 	bl	800086c <__aeabi_ddiv>
 801ba60:	ec41 0b10 	vmov	d0, r0, r1
 801ba64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba68:	45f0      	cmp	r8, lr
 801ba6a:	ee10 2a10 	vmov	r2, s0
 801ba6e:	4607      	mov	r7, r0
 801ba70:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 801ba74:	dc0a      	bgt.n	801ba8c <__ieee754_fmod+0x70>
 801ba76:	dbf3      	blt.n	801ba60 <__ieee754_fmod+0x44>
 801ba78:	42a8      	cmp	r0, r5
 801ba7a:	d3f1      	bcc.n	801ba60 <__ieee754_fmod+0x44>
 801ba7c:	d106      	bne.n	801ba8c <__ieee754_fmod+0x70>
 801ba7e:	496b      	ldr	r1, [pc, #428]	; (801bc2c <__ieee754_fmod+0x210>)
 801ba80:	0fe4      	lsrs	r4, r4, #31
 801ba82:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801ba86:	e9d4 0100 	ldrd	r0, r1, [r4]
 801ba8a:	e7e9      	b.n	801ba60 <__ieee754_fmod+0x44>
 801ba8c:	4b68      	ldr	r3, [pc, #416]	; (801bc30 <__ieee754_fmod+0x214>)
 801ba8e:	4598      	cmp	r8, r3
 801ba90:	dc49      	bgt.n	801bb26 <__ieee754_fmod+0x10a>
 801ba92:	f1b8 0f00 	cmp.w	r8, #0
 801ba96:	d13d      	bne.n	801bb14 <__ieee754_fmod+0xf8>
 801ba98:	4866      	ldr	r0, [pc, #408]	; (801bc34 <__ieee754_fmod+0x218>)
 801ba9a:	4611      	mov	r1, r2
 801ba9c:	2900      	cmp	r1, #0
 801ba9e:	dc36      	bgt.n	801bb0e <__ieee754_fmod+0xf2>
 801baa0:	459e      	cmp	lr, r3
 801baa2:	dc51      	bgt.n	801bb48 <__ieee754_fmod+0x12c>
 801baa4:	f1be 0f00 	cmp.w	lr, #0
 801baa8:	d145      	bne.n	801bb36 <__ieee754_fmod+0x11a>
 801baaa:	4b62      	ldr	r3, [pc, #392]	; (801bc34 <__ieee754_fmod+0x218>)
 801baac:	4629      	mov	r1, r5
 801baae:	2900      	cmp	r1, #0
 801bab0:	dc3e      	bgt.n	801bb30 <__ieee754_fmod+0x114>
 801bab2:	4961      	ldr	r1, [pc, #388]	; (801bc38 <__ieee754_fmod+0x21c>)
 801bab4:	4288      	cmp	r0, r1
 801bab6:	db4c      	blt.n	801bb52 <__ieee754_fmod+0x136>
 801bab8:	f3c9 0113 	ubfx	r1, r9, #0, #20
 801babc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801bac0:	4a5d      	ldr	r2, [pc, #372]	; (801bc38 <__ieee754_fmod+0x21c>)
 801bac2:	4293      	cmp	r3, r2
 801bac4:	db59      	blt.n	801bb7a <__ieee754_fmod+0x15e>
 801bac6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801baca:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801bace:	1ac0      	subs	r0, r0, r3
 801bad0:	1b8a      	subs	r2, r1, r6
 801bad2:	eba7 050c 	sub.w	r5, r7, ip
 801bad6:	2800      	cmp	r0, #0
 801bad8:	d166      	bne.n	801bba8 <__ieee754_fmod+0x18c>
 801bada:	4567      	cmp	r7, ip
 801badc:	bf38      	it	cc
 801bade:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801bae2:	2a00      	cmp	r2, #0
 801bae4:	bfbc      	itt	lt
 801bae6:	463d      	movlt	r5, r7
 801bae8:	460a      	movlt	r2, r1
 801baea:	ea52 0105 	orrs.w	r1, r2, r5
 801baee:	d0c6      	beq.n	801ba7e <__ieee754_fmod+0x62>
 801baf0:	494f      	ldr	r1, [pc, #316]	; (801bc30 <__ieee754_fmod+0x214>)
 801baf2:	428a      	cmp	r2, r1
 801baf4:	dd6d      	ble.n	801bbd2 <__ieee754_fmod+0x1b6>
 801baf6:	4950      	ldr	r1, [pc, #320]	; (801bc38 <__ieee754_fmod+0x21c>)
 801baf8:	428b      	cmp	r3, r1
 801bafa:	db70      	blt.n	801bbde <__ieee754_fmod+0x1c2>
 801bafc:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 801bb00:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 801bb04:	4314      	orrs	r4, r2
 801bb06:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 801bb0a:	4628      	mov	r0, r5
 801bb0c:	e7a8      	b.n	801ba60 <__ieee754_fmod+0x44>
 801bb0e:	3801      	subs	r0, #1
 801bb10:	0049      	lsls	r1, r1, #1
 801bb12:	e7c3      	b.n	801ba9c <__ieee754_fmod+0x80>
 801bb14:	4848      	ldr	r0, [pc, #288]	; (801bc38 <__ieee754_fmod+0x21c>)
 801bb16:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 801bb1a:	0049      	lsls	r1, r1, #1
 801bb1c:	2900      	cmp	r1, #0
 801bb1e:	f100 30ff 	add.w	r0, r0, #4294967295
 801bb22:	dcfa      	bgt.n	801bb1a <__ieee754_fmod+0xfe>
 801bb24:	e7bc      	b.n	801baa0 <__ieee754_fmod+0x84>
 801bb26:	ea4f 5028 	mov.w	r0, r8, asr #20
 801bb2a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801bb2e:	e7b7      	b.n	801baa0 <__ieee754_fmod+0x84>
 801bb30:	3b01      	subs	r3, #1
 801bb32:	0049      	lsls	r1, r1, #1
 801bb34:	e7bb      	b.n	801baae <__ieee754_fmod+0x92>
 801bb36:	4b40      	ldr	r3, [pc, #256]	; (801bc38 <__ieee754_fmod+0x21c>)
 801bb38:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 801bb3c:	0049      	lsls	r1, r1, #1
 801bb3e:	2900      	cmp	r1, #0
 801bb40:	f103 33ff 	add.w	r3, r3, #4294967295
 801bb44:	dcfa      	bgt.n	801bb3c <__ieee754_fmod+0x120>
 801bb46:	e7b4      	b.n	801bab2 <__ieee754_fmod+0x96>
 801bb48:	ea4f 532e 	mov.w	r3, lr, asr #20
 801bb4c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801bb50:	e7af      	b.n	801bab2 <__ieee754_fmod+0x96>
 801bb52:	1a0f      	subs	r7, r1, r0
 801bb54:	2f1f      	cmp	r7, #31
 801bb56:	dc0a      	bgt.n	801bb6e <__ieee754_fmod+0x152>
 801bb58:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 801bb5c:	fa08 f807 	lsl.w	r8, r8, r7
 801bb60:	fa22 f101 	lsr.w	r1, r2, r1
 801bb64:	ea41 0108 	orr.w	r1, r1, r8
 801bb68:	fa02 f707 	lsl.w	r7, r2, r7
 801bb6c:	e7a8      	b.n	801bac0 <__ieee754_fmod+0xa4>
 801bb6e:	4933      	ldr	r1, [pc, #204]	; (801bc3c <__ieee754_fmod+0x220>)
 801bb70:	1a09      	subs	r1, r1, r0
 801bb72:	fa02 f101 	lsl.w	r1, r2, r1
 801bb76:	2700      	movs	r7, #0
 801bb78:	e7a2      	b.n	801bac0 <__ieee754_fmod+0xa4>
 801bb7a:	eba2 0c03 	sub.w	ip, r2, r3
 801bb7e:	f1bc 0f1f 	cmp.w	ip, #31
 801bb82:	dc0a      	bgt.n	801bb9a <__ieee754_fmod+0x17e>
 801bb84:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 801bb88:	fa0e fe0c 	lsl.w	lr, lr, ip
 801bb8c:	fa25 f606 	lsr.w	r6, r5, r6
 801bb90:	ea46 060e 	orr.w	r6, r6, lr
 801bb94:	fa05 fc0c 	lsl.w	ip, r5, ip
 801bb98:	e799      	b.n	801bace <__ieee754_fmod+0xb2>
 801bb9a:	4e28      	ldr	r6, [pc, #160]	; (801bc3c <__ieee754_fmod+0x220>)
 801bb9c:	1af6      	subs	r6, r6, r3
 801bb9e:	fa05 f606 	lsl.w	r6, r5, r6
 801bba2:	f04f 0c00 	mov.w	ip, #0
 801bba6:	e792      	b.n	801bace <__ieee754_fmod+0xb2>
 801bba8:	4567      	cmp	r7, ip
 801bbaa:	bf38      	it	cc
 801bbac:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801bbb0:	2a00      	cmp	r2, #0
 801bbb2:	da05      	bge.n	801bbc0 <__ieee754_fmod+0x1a4>
 801bbb4:	0ffa      	lsrs	r2, r7, #31
 801bbb6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801bbba:	007f      	lsls	r7, r7, #1
 801bbbc:	3801      	subs	r0, #1
 801bbbe:	e787      	b.n	801bad0 <__ieee754_fmod+0xb4>
 801bbc0:	ea52 0105 	orrs.w	r1, r2, r5
 801bbc4:	f43f af5b 	beq.w	801ba7e <__ieee754_fmod+0x62>
 801bbc8:	0fe9      	lsrs	r1, r5, #31
 801bbca:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801bbce:	006f      	lsls	r7, r5, #1
 801bbd0:	e7f4      	b.n	801bbbc <__ieee754_fmod+0x1a0>
 801bbd2:	0fe8      	lsrs	r0, r5, #31
 801bbd4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801bbd8:	006d      	lsls	r5, r5, #1
 801bbda:	3b01      	subs	r3, #1
 801bbdc:	e789      	b.n	801baf2 <__ieee754_fmod+0xd6>
 801bbde:	1ac9      	subs	r1, r1, r3
 801bbe0:	2914      	cmp	r1, #20
 801bbe2:	dc0a      	bgt.n	801bbfa <__ieee754_fmod+0x1de>
 801bbe4:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801bbe8:	fa02 f303 	lsl.w	r3, r2, r3
 801bbec:	40cd      	lsrs	r5, r1
 801bbee:	432b      	orrs	r3, r5
 801bbf0:	410a      	asrs	r2, r1
 801bbf2:	ea42 0104 	orr.w	r1, r2, r4
 801bbf6:	4618      	mov	r0, r3
 801bbf8:	e732      	b.n	801ba60 <__ieee754_fmod+0x44>
 801bbfa:	291f      	cmp	r1, #31
 801bbfc:	dc07      	bgt.n	801bc0e <__ieee754_fmod+0x1f2>
 801bbfe:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801bc02:	40cd      	lsrs	r5, r1
 801bc04:	fa02 f303 	lsl.w	r3, r2, r3
 801bc08:	432b      	orrs	r3, r5
 801bc0a:	4622      	mov	r2, r4
 801bc0c:	e7f1      	b.n	801bbf2 <__ieee754_fmod+0x1d6>
 801bc0e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801bc12:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801bc16:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801bc1a:	33e2      	adds	r3, #226	; 0xe2
 801bc1c:	fa42 f303 	asr.w	r3, r2, r3
 801bc20:	e7f3      	b.n	801bc0a <__ieee754_fmod+0x1ee>
 801bc22:	bf00      	nop
 801bc24:	7fefffff 	.word	0x7fefffff
 801bc28:	7ff00000 	.word	0x7ff00000
 801bc2c:	0801e700 	.word	0x0801e700
 801bc30:	000fffff 	.word	0x000fffff
 801bc34:	fffffbed 	.word	0xfffffbed
 801bc38:	fffffc02 	.word	0xfffffc02
 801bc3c:	fffffbe2 	.word	0xfffffbe2

0801bc40 <__ieee754_pow>:
 801bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc44:	b091      	sub	sp, #68	; 0x44
 801bc46:	ed8d 1b00 	vstr	d1, [sp]
 801bc4a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801bc4e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801bc52:	ea58 0302 	orrs.w	r3, r8, r2
 801bc56:	ec57 6b10 	vmov	r6, r7, d0
 801bc5a:	f000 84be 	beq.w	801c5da <__ieee754_pow+0x99a>
 801bc5e:	4b7a      	ldr	r3, [pc, #488]	; (801be48 <__ieee754_pow+0x208>)
 801bc60:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801bc64:	429c      	cmp	r4, r3
 801bc66:	463d      	mov	r5, r7
 801bc68:	ee10 aa10 	vmov	sl, s0
 801bc6c:	dc09      	bgt.n	801bc82 <__ieee754_pow+0x42>
 801bc6e:	d103      	bne.n	801bc78 <__ieee754_pow+0x38>
 801bc70:	b93e      	cbnz	r6, 801bc82 <__ieee754_pow+0x42>
 801bc72:	45a0      	cmp	r8, r4
 801bc74:	dc0d      	bgt.n	801bc92 <__ieee754_pow+0x52>
 801bc76:	e001      	b.n	801bc7c <__ieee754_pow+0x3c>
 801bc78:	4598      	cmp	r8, r3
 801bc7a:	dc02      	bgt.n	801bc82 <__ieee754_pow+0x42>
 801bc7c:	4598      	cmp	r8, r3
 801bc7e:	d10e      	bne.n	801bc9e <__ieee754_pow+0x5e>
 801bc80:	b16a      	cbz	r2, 801bc9e <__ieee754_pow+0x5e>
 801bc82:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801bc86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801bc8a:	ea54 030a 	orrs.w	r3, r4, sl
 801bc8e:	f000 84a4 	beq.w	801c5da <__ieee754_pow+0x99a>
 801bc92:	486e      	ldr	r0, [pc, #440]	; (801be4c <__ieee754_pow+0x20c>)
 801bc94:	b011      	add	sp, #68	; 0x44
 801bc96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc9a:	f001 be89 	b.w	801d9b0 <nan>
 801bc9e:	2d00      	cmp	r5, #0
 801bca0:	da53      	bge.n	801bd4a <__ieee754_pow+0x10a>
 801bca2:	4b6b      	ldr	r3, [pc, #428]	; (801be50 <__ieee754_pow+0x210>)
 801bca4:	4598      	cmp	r8, r3
 801bca6:	dc4d      	bgt.n	801bd44 <__ieee754_pow+0x104>
 801bca8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801bcac:	4598      	cmp	r8, r3
 801bcae:	dd4c      	ble.n	801bd4a <__ieee754_pow+0x10a>
 801bcb0:	ea4f 5328 	mov.w	r3, r8, asr #20
 801bcb4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801bcb8:	2b14      	cmp	r3, #20
 801bcba:	dd26      	ble.n	801bd0a <__ieee754_pow+0xca>
 801bcbc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801bcc0:	fa22 f103 	lsr.w	r1, r2, r3
 801bcc4:	fa01 f303 	lsl.w	r3, r1, r3
 801bcc8:	4293      	cmp	r3, r2
 801bcca:	d13e      	bne.n	801bd4a <__ieee754_pow+0x10a>
 801bccc:	f001 0101 	and.w	r1, r1, #1
 801bcd0:	f1c1 0b02 	rsb	fp, r1, #2
 801bcd4:	2a00      	cmp	r2, #0
 801bcd6:	d15b      	bne.n	801bd90 <__ieee754_pow+0x150>
 801bcd8:	4b5b      	ldr	r3, [pc, #364]	; (801be48 <__ieee754_pow+0x208>)
 801bcda:	4598      	cmp	r8, r3
 801bcdc:	d124      	bne.n	801bd28 <__ieee754_pow+0xe8>
 801bcde:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801bce2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801bce6:	ea53 030a 	orrs.w	r3, r3, sl
 801bcea:	f000 8476 	beq.w	801c5da <__ieee754_pow+0x99a>
 801bcee:	4b59      	ldr	r3, [pc, #356]	; (801be54 <__ieee754_pow+0x214>)
 801bcf0:	429c      	cmp	r4, r3
 801bcf2:	dd2d      	ble.n	801bd50 <__ieee754_pow+0x110>
 801bcf4:	f1b9 0f00 	cmp.w	r9, #0
 801bcf8:	f280 8473 	bge.w	801c5e2 <__ieee754_pow+0x9a2>
 801bcfc:	2000      	movs	r0, #0
 801bcfe:	2100      	movs	r1, #0
 801bd00:	ec41 0b10 	vmov	d0, r0, r1
 801bd04:	b011      	add	sp, #68	; 0x44
 801bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd0a:	2a00      	cmp	r2, #0
 801bd0c:	d13e      	bne.n	801bd8c <__ieee754_pow+0x14c>
 801bd0e:	f1c3 0314 	rsb	r3, r3, #20
 801bd12:	fa48 f103 	asr.w	r1, r8, r3
 801bd16:	fa01 f303 	lsl.w	r3, r1, r3
 801bd1a:	4543      	cmp	r3, r8
 801bd1c:	f040 8469 	bne.w	801c5f2 <__ieee754_pow+0x9b2>
 801bd20:	f001 0101 	and.w	r1, r1, #1
 801bd24:	f1c1 0b02 	rsb	fp, r1, #2
 801bd28:	4b4b      	ldr	r3, [pc, #300]	; (801be58 <__ieee754_pow+0x218>)
 801bd2a:	4598      	cmp	r8, r3
 801bd2c:	d118      	bne.n	801bd60 <__ieee754_pow+0x120>
 801bd2e:	f1b9 0f00 	cmp.w	r9, #0
 801bd32:	f280 845a 	bge.w	801c5ea <__ieee754_pow+0x9aa>
 801bd36:	4948      	ldr	r1, [pc, #288]	; (801be58 <__ieee754_pow+0x218>)
 801bd38:	4632      	mov	r2, r6
 801bd3a:	463b      	mov	r3, r7
 801bd3c:	2000      	movs	r0, #0
 801bd3e:	f7e4 fd95 	bl	800086c <__aeabi_ddiv>
 801bd42:	e7dd      	b.n	801bd00 <__ieee754_pow+0xc0>
 801bd44:	f04f 0b02 	mov.w	fp, #2
 801bd48:	e7c4      	b.n	801bcd4 <__ieee754_pow+0x94>
 801bd4a:	f04f 0b00 	mov.w	fp, #0
 801bd4e:	e7c1      	b.n	801bcd4 <__ieee754_pow+0x94>
 801bd50:	f1b9 0f00 	cmp.w	r9, #0
 801bd54:	dad2      	bge.n	801bcfc <__ieee754_pow+0xbc>
 801bd56:	e9dd 0300 	ldrd	r0, r3, [sp]
 801bd5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801bd5e:	e7cf      	b.n	801bd00 <__ieee754_pow+0xc0>
 801bd60:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801bd64:	d106      	bne.n	801bd74 <__ieee754_pow+0x134>
 801bd66:	4632      	mov	r2, r6
 801bd68:	463b      	mov	r3, r7
 801bd6a:	4610      	mov	r0, r2
 801bd6c:	4619      	mov	r1, r3
 801bd6e:	f7e4 fc53 	bl	8000618 <__aeabi_dmul>
 801bd72:	e7c5      	b.n	801bd00 <__ieee754_pow+0xc0>
 801bd74:	4b39      	ldr	r3, [pc, #228]	; (801be5c <__ieee754_pow+0x21c>)
 801bd76:	4599      	cmp	r9, r3
 801bd78:	d10a      	bne.n	801bd90 <__ieee754_pow+0x150>
 801bd7a:	2d00      	cmp	r5, #0
 801bd7c:	db08      	blt.n	801bd90 <__ieee754_pow+0x150>
 801bd7e:	ec47 6b10 	vmov	d0, r6, r7
 801bd82:	b011      	add	sp, #68	; 0x44
 801bd84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd88:	f000 be5c 	b.w	801ca44 <__ieee754_sqrt>
 801bd8c:	f04f 0b00 	mov.w	fp, #0
 801bd90:	ec47 6b10 	vmov	d0, r6, r7
 801bd94:	f001 fd70 	bl	801d878 <fabs>
 801bd98:	ec51 0b10 	vmov	r0, r1, d0
 801bd9c:	f1ba 0f00 	cmp.w	sl, #0
 801bda0:	d127      	bne.n	801bdf2 <__ieee754_pow+0x1b2>
 801bda2:	b124      	cbz	r4, 801bdae <__ieee754_pow+0x16e>
 801bda4:	4b2c      	ldr	r3, [pc, #176]	; (801be58 <__ieee754_pow+0x218>)
 801bda6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801bdaa:	429a      	cmp	r2, r3
 801bdac:	d121      	bne.n	801bdf2 <__ieee754_pow+0x1b2>
 801bdae:	f1b9 0f00 	cmp.w	r9, #0
 801bdb2:	da05      	bge.n	801bdc0 <__ieee754_pow+0x180>
 801bdb4:	4602      	mov	r2, r0
 801bdb6:	460b      	mov	r3, r1
 801bdb8:	2000      	movs	r0, #0
 801bdba:	4927      	ldr	r1, [pc, #156]	; (801be58 <__ieee754_pow+0x218>)
 801bdbc:	f7e4 fd56 	bl	800086c <__aeabi_ddiv>
 801bdc0:	2d00      	cmp	r5, #0
 801bdc2:	da9d      	bge.n	801bd00 <__ieee754_pow+0xc0>
 801bdc4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801bdc8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801bdcc:	ea54 030b 	orrs.w	r3, r4, fp
 801bdd0:	d108      	bne.n	801bde4 <__ieee754_pow+0x1a4>
 801bdd2:	4602      	mov	r2, r0
 801bdd4:	460b      	mov	r3, r1
 801bdd6:	4610      	mov	r0, r2
 801bdd8:	4619      	mov	r1, r3
 801bdda:	f7e4 fa65 	bl	80002a8 <__aeabi_dsub>
 801bdde:	4602      	mov	r2, r0
 801bde0:	460b      	mov	r3, r1
 801bde2:	e7ac      	b.n	801bd3e <__ieee754_pow+0xfe>
 801bde4:	f1bb 0f01 	cmp.w	fp, #1
 801bde8:	d18a      	bne.n	801bd00 <__ieee754_pow+0xc0>
 801bdea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bdee:	4619      	mov	r1, r3
 801bdf0:	e786      	b.n	801bd00 <__ieee754_pow+0xc0>
 801bdf2:	0fed      	lsrs	r5, r5, #31
 801bdf4:	1e6b      	subs	r3, r5, #1
 801bdf6:	930d      	str	r3, [sp, #52]	; 0x34
 801bdf8:	ea5b 0303 	orrs.w	r3, fp, r3
 801bdfc:	d102      	bne.n	801be04 <__ieee754_pow+0x1c4>
 801bdfe:	4632      	mov	r2, r6
 801be00:	463b      	mov	r3, r7
 801be02:	e7e8      	b.n	801bdd6 <__ieee754_pow+0x196>
 801be04:	4b16      	ldr	r3, [pc, #88]	; (801be60 <__ieee754_pow+0x220>)
 801be06:	4598      	cmp	r8, r3
 801be08:	f340 80fe 	ble.w	801c008 <__ieee754_pow+0x3c8>
 801be0c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801be10:	4598      	cmp	r8, r3
 801be12:	dd0a      	ble.n	801be2a <__ieee754_pow+0x1ea>
 801be14:	4b0f      	ldr	r3, [pc, #60]	; (801be54 <__ieee754_pow+0x214>)
 801be16:	429c      	cmp	r4, r3
 801be18:	dc0d      	bgt.n	801be36 <__ieee754_pow+0x1f6>
 801be1a:	f1b9 0f00 	cmp.w	r9, #0
 801be1e:	f6bf af6d 	bge.w	801bcfc <__ieee754_pow+0xbc>
 801be22:	a307      	add	r3, pc, #28	; (adr r3, 801be40 <__ieee754_pow+0x200>)
 801be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be28:	e79f      	b.n	801bd6a <__ieee754_pow+0x12a>
 801be2a:	4b0e      	ldr	r3, [pc, #56]	; (801be64 <__ieee754_pow+0x224>)
 801be2c:	429c      	cmp	r4, r3
 801be2e:	ddf4      	ble.n	801be1a <__ieee754_pow+0x1da>
 801be30:	4b09      	ldr	r3, [pc, #36]	; (801be58 <__ieee754_pow+0x218>)
 801be32:	429c      	cmp	r4, r3
 801be34:	dd18      	ble.n	801be68 <__ieee754_pow+0x228>
 801be36:	f1b9 0f00 	cmp.w	r9, #0
 801be3a:	dcf2      	bgt.n	801be22 <__ieee754_pow+0x1e2>
 801be3c:	e75e      	b.n	801bcfc <__ieee754_pow+0xbc>
 801be3e:	bf00      	nop
 801be40:	8800759c 	.word	0x8800759c
 801be44:	7e37e43c 	.word	0x7e37e43c
 801be48:	7ff00000 	.word	0x7ff00000
 801be4c:	0801e5d9 	.word	0x0801e5d9
 801be50:	433fffff 	.word	0x433fffff
 801be54:	3fefffff 	.word	0x3fefffff
 801be58:	3ff00000 	.word	0x3ff00000
 801be5c:	3fe00000 	.word	0x3fe00000
 801be60:	41e00000 	.word	0x41e00000
 801be64:	3feffffe 	.word	0x3feffffe
 801be68:	2200      	movs	r2, #0
 801be6a:	4b63      	ldr	r3, [pc, #396]	; (801bff8 <__ieee754_pow+0x3b8>)
 801be6c:	f7e4 fa1c 	bl	80002a8 <__aeabi_dsub>
 801be70:	a355      	add	r3, pc, #340	; (adr r3, 801bfc8 <__ieee754_pow+0x388>)
 801be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be76:	4604      	mov	r4, r0
 801be78:	460d      	mov	r5, r1
 801be7a:	f7e4 fbcd 	bl	8000618 <__aeabi_dmul>
 801be7e:	a354      	add	r3, pc, #336	; (adr r3, 801bfd0 <__ieee754_pow+0x390>)
 801be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be84:	4606      	mov	r6, r0
 801be86:	460f      	mov	r7, r1
 801be88:	4620      	mov	r0, r4
 801be8a:	4629      	mov	r1, r5
 801be8c:	f7e4 fbc4 	bl	8000618 <__aeabi_dmul>
 801be90:	2200      	movs	r2, #0
 801be92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be96:	4b59      	ldr	r3, [pc, #356]	; (801bffc <__ieee754_pow+0x3bc>)
 801be98:	4620      	mov	r0, r4
 801be9a:	4629      	mov	r1, r5
 801be9c:	f7e4 fbbc 	bl	8000618 <__aeabi_dmul>
 801bea0:	4602      	mov	r2, r0
 801bea2:	460b      	mov	r3, r1
 801bea4:	a14c      	add	r1, pc, #304	; (adr r1, 801bfd8 <__ieee754_pow+0x398>)
 801bea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801beaa:	f7e4 f9fd 	bl	80002a8 <__aeabi_dsub>
 801beae:	4622      	mov	r2, r4
 801beb0:	462b      	mov	r3, r5
 801beb2:	f7e4 fbb1 	bl	8000618 <__aeabi_dmul>
 801beb6:	4602      	mov	r2, r0
 801beb8:	460b      	mov	r3, r1
 801beba:	2000      	movs	r0, #0
 801bebc:	4950      	ldr	r1, [pc, #320]	; (801c000 <__ieee754_pow+0x3c0>)
 801bebe:	f7e4 f9f3 	bl	80002a8 <__aeabi_dsub>
 801bec2:	4622      	mov	r2, r4
 801bec4:	462b      	mov	r3, r5
 801bec6:	4680      	mov	r8, r0
 801bec8:	4689      	mov	r9, r1
 801beca:	4620      	mov	r0, r4
 801becc:	4629      	mov	r1, r5
 801bece:	f7e4 fba3 	bl	8000618 <__aeabi_dmul>
 801bed2:	4602      	mov	r2, r0
 801bed4:	460b      	mov	r3, r1
 801bed6:	4640      	mov	r0, r8
 801bed8:	4649      	mov	r1, r9
 801beda:	f7e4 fb9d 	bl	8000618 <__aeabi_dmul>
 801bede:	a340      	add	r3, pc, #256	; (adr r3, 801bfe0 <__ieee754_pow+0x3a0>)
 801bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bee4:	f7e4 fb98 	bl	8000618 <__aeabi_dmul>
 801bee8:	4602      	mov	r2, r0
 801beea:	460b      	mov	r3, r1
 801beec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bef0:	f7e4 f9da 	bl	80002a8 <__aeabi_dsub>
 801bef4:	4602      	mov	r2, r0
 801bef6:	460b      	mov	r3, r1
 801bef8:	4604      	mov	r4, r0
 801befa:	460d      	mov	r5, r1
 801befc:	4630      	mov	r0, r6
 801befe:	4639      	mov	r1, r7
 801bf00:	f7e4 f9d4 	bl	80002ac <__adddf3>
 801bf04:	2000      	movs	r0, #0
 801bf06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bf0a:	4632      	mov	r2, r6
 801bf0c:	463b      	mov	r3, r7
 801bf0e:	f7e4 f9cb 	bl	80002a8 <__aeabi_dsub>
 801bf12:	4602      	mov	r2, r0
 801bf14:	460b      	mov	r3, r1
 801bf16:	4620      	mov	r0, r4
 801bf18:	4629      	mov	r1, r5
 801bf1a:	f7e4 f9c5 	bl	80002a8 <__aeabi_dsub>
 801bf1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bf20:	f10b 33ff 	add.w	r3, fp, #4294967295
 801bf24:	4313      	orrs	r3, r2
 801bf26:	4606      	mov	r6, r0
 801bf28:	460f      	mov	r7, r1
 801bf2a:	f040 81eb 	bne.w	801c304 <__ieee754_pow+0x6c4>
 801bf2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801bfe8 <__ieee754_pow+0x3a8>
 801bf32:	e9dd 4500 	ldrd	r4, r5, [sp]
 801bf36:	2400      	movs	r4, #0
 801bf38:	4622      	mov	r2, r4
 801bf3a:	462b      	mov	r3, r5
 801bf3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf40:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bf44:	f7e4 f9b0 	bl	80002a8 <__aeabi_dsub>
 801bf48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bf4c:	f7e4 fb64 	bl	8000618 <__aeabi_dmul>
 801bf50:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bf54:	4680      	mov	r8, r0
 801bf56:	4689      	mov	r9, r1
 801bf58:	4630      	mov	r0, r6
 801bf5a:	4639      	mov	r1, r7
 801bf5c:	f7e4 fb5c 	bl	8000618 <__aeabi_dmul>
 801bf60:	4602      	mov	r2, r0
 801bf62:	460b      	mov	r3, r1
 801bf64:	4640      	mov	r0, r8
 801bf66:	4649      	mov	r1, r9
 801bf68:	f7e4 f9a0 	bl	80002ac <__adddf3>
 801bf6c:	4622      	mov	r2, r4
 801bf6e:	462b      	mov	r3, r5
 801bf70:	4680      	mov	r8, r0
 801bf72:	4689      	mov	r9, r1
 801bf74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bf78:	f7e4 fb4e 	bl	8000618 <__aeabi_dmul>
 801bf7c:	460b      	mov	r3, r1
 801bf7e:	4604      	mov	r4, r0
 801bf80:	460d      	mov	r5, r1
 801bf82:	4602      	mov	r2, r0
 801bf84:	4649      	mov	r1, r9
 801bf86:	4640      	mov	r0, r8
 801bf88:	e9cd 4500 	strd	r4, r5, [sp]
 801bf8c:	f7e4 f98e 	bl	80002ac <__adddf3>
 801bf90:	4b1c      	ldr	r3, [pc, #112]	; (801c004 <__ieee754_pow+0x3c4>)
 801bf92:	4299      	cmp	r1, r3
 801bf94:	4606      	mov	r6, r0
 801bf96:	460f      	mov	r7, r1
 801bf98:	468b      	mov	fp, r1
 801bf9a:	f340 82f7 	ble.w	801c58c <__ieee754_pow+0x94c>
 801bf9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801bfa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801bfa6:	4303      	orrs	r3, r0
 801bfa8:	f000 81ea 	beq.w	801c380 <__ieee754_pow+0x740>
 801bfac:	a310      	add	r3, pc, #64	; (adr r3, 801bff0 <__ieee754_pow+0x3b0>)
 801bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bfb6:	f7e4 fb2f 	bl	8000618 <__aeabi_dmul>
 801bfba:	a30d      	add	r3, pc, #52	; (adr r3, 801bff0 <__ieee754_pow+0x3b0>)
 801bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfc0:	e6d5      	b.n	801bd6e <__ieee754_pow+0x12e>
 801bfc2:	bf00      	nop
 801bfc4:	f3af 8000 	nop.w
 801bfc8:	60000000 	.word	0x60000000
 801bfcc:	3ff71547 	.word	0x3ff71547
 801bfd0:	f85ddf44 	.word	0xf85ddf44
 801bfd4:	3e54ae0b 	.word	0x3e54ae0b
 801bfd8:	55555555 	.word	0x55555555
 801bfdc:	3fd55555 	.word	0x3fd55555
 801bfe0:	652b82fe 	.word	0x652b82fe
 801bfe4:	3ff71547 	.word	0x3ff71547
 801bfe8:	00000000 	.word	0x00000000
 801bfec:	bff00000 	.word	0xbff00000
 801bff0:	8800759c 	.word	0x8800759c
 801bff4:	7e37e43c 	.word	0x7e37e43c
 801bff8:	3ff00000 	.word	0x3ff00000
 801bffc:	3fd00000 	.word	0x3fd00000
 801c000:	3fe00000 	.word	0x3fe00000
 801c004:	408fffff 	.word	0x408fffff
 801c008:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801c00c:	f04f 0200 	mov.w	r2, #0
 801c010:	da05      	bge.n	801c01e <__ieee754_pow+0x3de>
 801c012:	4bd3      	ldr	r3, [pc, #844]	; (801c360 <__ieee754_pow+0x720>)
 801c014:	f7e4 fb00 	bl	8000618 <__aeabi_dmul>
 801c018:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801c01c:	460c      	mov	r4, r1
 801c01e:	1523      	asrs	r3, r4, #20
 801c020:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c024:	4413      	add	r3, r2
 801c026:	9309      	str	r3, [sp, #36]	; 0x24
 801c028:	4bce      	ldr	r3, [pc, #824]	; (801c364 <__ieee754_pow+0x724>)
 801c02a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c02e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801c032:	429c      	cmp	r4, r3
 801c034:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801c038:	dd08      	ble.n	801c04c <__ieee754_pow+0x40c>
 801c03a:	4bcb      	ldr	r3, [pc, #812]	; (801c368 <__ieee754_pow+0x728>)
 801c03c:	429c      	cmp	r4, r3
 801c03e:	f340 815e 	ble.w	801c2fe <__ieee754_pow+0x6be>
 801c042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c044:	3301      	adds	r3, #1
 801c046:	9309      	str	r3, [sp, #36]	; 0x24
 801c048:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801c04c:	f04f 0a00 	mov.w	sl, #0
 801c050:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801c054:	930c      	str	r3, [sp, #48]	; 0x30
 801c056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c058:	4bc4      	ldr	r3, [pc, #784]	; (801c36c <__ieee754_pow+0x72c>)
 801c05a:	4413      	add	r3, r2
 801c05c:	ed93 7b00 	vldr	d7, [r3]
 801c060:	4629      	mov	r1, r5
 801c062:	ec53 2b17 	vmov	r2, r3, d7
 801c066:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c06a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c06e:	f7e4 f91b 	bl	80002a8 <__aeabi_dsub>
 801c072:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c076:	4606      	mov	r6, r0
 801c078:	460f      	mov	r7, r1
 801c07a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c07e:	f7e4 f915 	bl	80002ac <__adddf3>
 801c082:	4602      	mov	r2, r0
 801c084:	460b      	mov	r3, r1
 801c086:	2000      	movs	r0, #0
 801c088:	49b9      	ldr	r1, [pc, #740]	; (801c370 <__ieee754_pow+0x730>)
 801c08a:	f7e4 fbef 	bl	800086c <__aeabi_ddiv>
 801c08e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801c092:	4602      	mov	r2, r0
 801c094:	460b      	mov	r3, r1
 801c096:	4630      	mov	r0, r6
 801c098:	4639      	mov	r1, r7
 801c09a:	f7e4 fabd 	bl	8000618 <__aeabi_dmul>
 801c09e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c0a2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801c0a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	9302      	str	r3, [sp, #8]
 801c0ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c0b2:	106d      	asrs	r5, r5, #1
 801c0b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801c0b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801c0bc:	2200      	movs	r2, #0
 801c0be:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801c0c2:	4640      	mov	r0, r8
 801c0c4:	4649      	mov	r1, r9
 801c0c6:	4614      	mov	r4, r2
 801c0c8:	461d      	mov	r5, r3
 801c0ca:	f7e4 faa5 	bl	8000618 <__aeabi_dmul>
 801c0ce:	4602      	mov	r2, r0
 801c0d0:	460b      	mov	r3, r1
 801c0d2:	4630      	mov	r0, r6
 801c0d4:	4639      	mov	r1, r7
 801c0d6:	f7e4 f8e7 	bl	80002a8 <__aeabi_dsub>
 801c0da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c0de:	4606      	mov	r6, r0
 801c0e0:	460f      	mov	r7, r1
 801c0e2:	4620      	mov	r0, r4
 801c0e4:	4629      	mov	r1, r5
 801c0e6:	f7e4 f8df 	bl	80002a8 <__aeabi_dsub>
 801c0ea:	4602      	mov	r2, r0
 801c0ec:	460b      	mov	r3, r1
 801c0ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c0f2:	f7e4 f8d9 	bl	80002a8 <__aeabi_dsub>
 801c0f6:	4642      	mov	r2, r8
 801c0f8:	464b      	mov	r3, r9
 801c0fa:	f7e4 fa8d 	bl	8000618 <__aeabi_dmul>
 801c0fe:	4602      	mov	r2, r0
 801c100:	460b      	mov	r3, r1
 801c102:	4630      	mov	r0, r6
 801c104:	4639      	mov	r1, r7
 801c106:	f7e4 f8cf 	bl	80002a8 <__aeabi_dsub>
 801c10a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801c10e:	f7e4 fa83 	bl	8000618 <__aeabi_dmul>
 801c112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c116:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c11a:	4610      	mov	r0, r2
 801c11c:	4619      	mov	r1, r3
 801c11e:	f7e4 fa7b 	bl	8000618 <__aeabi_dmul>
 801c122:	a37b      	add	r3, pc, #492	; (adr r3, 801c310 <__ieee754_pow+0x6d0>)
 801c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c128:	4604      	mov	r4, r0
 801c12a:	460d      	mov	r5, r1
 801c12c:	f7e4 fa74 	bl	8000618 <__aeabi_dmul>
 801c130:	a379      	add	r3, pc, #484	; (adr r3, 801c318 <__ieee754_pow+0x6d8>)
 801c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c136:	f7e4 f8b9 	bl	80002ac <__adddf3>
 801c13a:	4622      	mov	r2, r4
 801c13c:	462b      	mov	r3, r5
 801c13e:	f7e4 fa6b 	bl	8000618 <__aeabi_dmul>
 801c142:	a377      	add	r3, pc, #476	; (adr r3, 801c320 <__ieee754_pow+0x6e0>)
 801c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c148:	f7e4 f8b0 	bl	80002ac <__adddf3>
 801c14c:	4622      	mov	r2, r4
 801c14e:	462b      	mov	r3, r5
 801c150:	f7e4 fa62 	bl	8000618 <__aeabi_dmul>
 801c154:	a374      	add	r3, pc, #464	; (adr r3, 801c328 <__ieee754_pow+0x6e8>)
 801c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c15a:	f7e4 f8a7 	bl	80002ac <__adddf3>
 801c15e:	4622      	mov	r2, r4
 801c160:	462b      	mov	r3, r5
 801c162:	f7e4 fa59 	bl	8000618 <__aeabi_dmul>
 801c166:	a372      	add	r3, pc, #456	; (adr r3, 801c330 <__ieee754_pow+0x6f0>)
 801c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c16c:	f7e4 f89e 	bl	80002ac <__adddf3>
 801c170:	4622      	mov	r2, r4
 801c172:	462b      	mov	r3, r5
 801c174:	f7e4 fa50 	bl	8000618 <__aeabi_dmul>
 801c178:	a36f      	add	r3, pc, #444	; (adr r3, 801c338 <__ieee754_pow+0x6f8>)
 801c17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c17e:	f7e4 f895 	bl	80002ac <__adddf3>
 801c182:	4622      	mov	r2, r4
 801c184:	4606      	mov	r6, r0
 801c186:	460f      	mov	r7, r1
 801c188:	462b      	mov	r3, r5
 801c18a:	4620      	mov	r0, r4
 801c18c:	4629      	mov	r1, r5
 801c18e:	f7e4 fa43 	bl	8000618 <__aeabi_dmul>
 801c192:	4602      	mov	r2, r0
 801c194:	460b      	mov	r3, r1
 801c196:	4630      	mov	r0, r6
 801c198:	4639      	mov	r1, r7
 801c19a:	f7e4 fa3d 	bl	8000618 <__aeabi_dmul>
 801c19e:	4642      	mov	r2, r8
 801c1a0:	4604      	mov	r4, r0
 801c1a2:	460d      	mov	r5, r1
 801c1a4:	464b      	mov	r3, r9
 801c1a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c1aa:	f7e4 f87f 	bl	80002ac <__adddf3>
 801c1ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c1b2:	f7e4 fa31 	bl	8000618 <__aeabi_dmul>
 801c1b6:	4622      	mov	r2, r4
 801c1b8:	462b      	mov	r3, r5
 801c1ba:	f7e4 f877 	bl	80002ac <__adddf3>
 801c1be:	4642      	mov	r2, r8
 801c1c0:	4606      	mov	r6, r0
 801c1c2:	460f      	mov	r7, r1
 801c1c4:	464b      	mov	r3, r9
 801c1c6:	4640      	mov	r0, r8
 801c1c8:	4649      	mov	r1, r9
 801c1ca:	f7e4 fa25 	bl	8000618 <__aeabi_dmul>
 801c1ce:	2200      	movs	r2, #0
 801c1d0:	4b68      	ldr	r3, [pc, #416]	; (801c374 <__ieee754_pow+0x734>)
 801c1d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c1d6:	f7e4 f869 	bl	80002ac <__adddf3>
 801c1da:	4632      	mov	r2, r6
 801c1dc:	463b      	mov	r3, r7
 801c1de:	f7e4 f865 	bl	80002ac <__adddf3>
 801c1e2:	9802      	ldr	r0, [sp, #8]
 801c1e4:	460d      	mov	r5, r1
 801c1e6:	4604      	mov	r4, r0
 801c1e8:	4602      	mov	r2, r0
 801c1ea:	460b      	mov	r3, r1
 801c1ec:	4640      	mov	r0, r8
 801c1ee:	4649      	mov	r1, r9
 801c1f0:	f7e4 fa12 	bl	8000618 <__aeabi_dmul>
 801c1f4:	2200      	movs	r2, #0
 801c1f6:	4680      	mov	r8, r0
 801c1f8:	4689      	mov	r9, r1
 801c1fa:	4b5e      	ldr	r3, [pc, #376]	; (801c374 <__ieee754_pow+0x734>)
 801c1fc:	4620      	mov	r0, r4
 801c1fe:	4629      	mov	r1, r5
 801c200:	f7e4 f852 	bl	80002a8 <__aeabi_dsub>
 801c204:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c208:	f7e4 f84e 	bl	80002a8 <__aeabi_dsub>
 801c20c:	4602      	mov	r2, r0
 801c20e:	460b      	mov	r3, r1
 801c210:	4630      	mov	r0, r6
 801c212:	4639      	mov	r1, r7
 801c214:	f7e4 f848 	bl	80002a8 <__aeabi_dsub>
 801c218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c21c:	f7e4 f9fc 	bl	8000618 <__aeabi_dmul>
 801c220:	4622      	mov	r2, r4
 801c222:	4606      	mov	r6, r0
 801c224:	460f      	mov	r7, r1
 801c226:	462b      	mov	r3, r5
 801c228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c22c:	f7e4 f9f4 	bl	8000618 <__aeabi_dmul>
 801c230:	4602      	mov	r2, r0
 801c232:	460b      	mov	r3, r1
 801c234:	4630      	mov	r0, r6
 801c236:	4639      	mov	r1, r7
 801c238:	f7e4 f838 	bl	80002ac <__adddf3>
 801c23c:	4606      	mov	r6, r0
 801c23e:	460f      	mov	r7, r1
 801c240:	4602      	mov	r2, r0
 801c242:	460b      	mov	r3, r1
 801c244:	4640      	mov	r0, r8
 801c246:	4649      	mov	r1, r9
 801c248:	f7e4 f830 	bl	80002ac <__adddf3>
 801c24c:	9802      	ldr	r0, [sp, #8]
 801c24e:	a33c      	add	r3, pc, #240	; (adr r3, 801c340 <__ieee754_pow+0x700>)
 801c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c254:	4604      	mov	r4, r0
 801c256:	460d      	mov	r5, r1
 801c258:	f7e4 f9de 	bl	8000618 <__aeabi_dmul>
 801c25c:	4642      	mov	r2, r8
 801c25e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c262:	464b      	mov	r3, r9
 801c264:	4620      	mov	r0, r4
 801c266:	4629      	mov	r1, r5
 801c268:	f7e4 f81e 	bl	80002a8 <__aeabi_dsub>
 801c26c:	4602      	mov	r2, r0
 801c26e:	460b      	mov	r3, r1
 801c270:	4630      	mov	r0, r6
 801c272:	4639      	mov	r1, r7
 801c274:	f7e4 f818 	bl	80002a8 <__aeabi_dsub>
 801c278:	a333      	add	r3, pc, #204	; (adr r3, 801c348 <__ieee754_pow+0x708>)
 801c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c27e:	f7e4 f9cb 	bl	8000618 <__aeabi_dmul>
 801c282:	a333      	add	r3, pc, #204	; (adr r3, 801c350 <__ieee754_pow+0x710>)
 801c284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c288:	4606      	mov	r6, r0
 801c28a:	460f      	mov	r7, r1
 801c28c:	4620      	mov	r0, r4
 801c28e:	4629      	mov	r1, r5
 801c290:	f7e4 f9c2 	bl	8000618 <__aeabi_dmul>
 801c294:	4602      	mov	r2, r0
 801c296:	460b      	mov	r3, r1
 801c298:	4630      	mov	r0, r6
 801c29a:	4639      	mov	r1, r7
 801c29c:	f7e4 f806 	bl	80002ac <__adddf3>
 801c2a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c2a2:	4b35      	ldr	r3, [pc, #212]	; (801c378 <__ieee754_pow+0x738>)
 801c2a4:	4413      	add	r3, r2
 801c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2aa:	f7e3 ffff 	bl	80002ac <__adddf3>
 801c2ae:	4604      	mov	r4, r0
 801c2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c2b2:	460d      	mov	r5, r1
 801c2b4:	f7e4 f946 	bl	8000544 <__aeabi_i2d>
 801c2b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c2ba:	4b30      	ldr	r3, [pc, #192]	; (801c37c <__ieee754_pow+0x73c>)
 801c2bc:	4413      	add	r3, r2
 801c2be:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c2c2:	4606      	mov	r6, r0
 801c2c4:	460f      	mov	r7, r1
 801c2c6:	4622      	mov	r2, r4
 801c2c8:	462b      	mov	r3, r5
 801c2ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c2ce:	f7e3 ffed 	bl	80002ac <__adddf3>
 801c2d2:	4642      	mov	r2, r8
 801c2d4:	464b      	mov	r3, r9
 801c2d6:	f7e3 ffe9 	bl	80002ac <__adddf3>
 801c2da:	4632      	mov	r2, r6
 801c2dc:	463b      	mov	r3, r7
 801c2de:	f7e3 ffe5 	bl	80002ac <__adddf3>
 801c2e2:	9802      	ldr	r0, [sp, #8]
 801c2e4:	4632      	mov	r2, r6
 801c2e6:	463b      	mov	r3, r7
 801c2e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c2ec:	f7e3 ffdc 	bl	80002a8 <__aeabi_dsub>
 801c2f0:	4642      	mov	r2, r8
 801c2f2:	464b      	mov	r3, r9
 801c2f4:	f7e3 ffd8 	bl	80002a8 <__aeabi_dsub>
 801c2f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c2fc:	e607      	b.n	801bf0e <__ieee754_pow+0x2ce>
 801c2fe:	f04f 0a01 	mov.w	sl, #1
 801c302:	e6a5      	b.n	801c050 <__ieee754_pow+0x410>
 801c304:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801c358 <__ieee754_pow+0x718>
 801c308:	e613      	b.n	801bf32 <__ieee754_pow+0x2f2>
 801c30a:	bf00      	nop
 801c30c:	f3af 8000 	nop.w
 801c310:	4a454eef 	.word	0x4a454eef
 801c314:	3fca7e28 	.word	0x3fca7e28
 801c318:	93c9db65 	.word	0x93c9db65
 801c31c:	3fcd864a 	.word	0x3fcd864a
 801c320:	a91d4101 	.word	0xa91d4101
 801c324:	3fd17460 	.word	0x3fd17460
 801c328:	518f264d 	.word	0x518f264d
 801c32c:	3fd55555 	.word	0x3fd55555
 801c330:	db6fabff 	.word	0xdb6fabff
 801c334:	3fdb6db6 	.word	0x3fdb6db6
 801c338:	33333303 	.word	0x33333303
 801c33c:	3fe33333 	.word	0x3fe33333
 801c340:	e0000000 	.word	0xe0000000
 801c344:	3feec709 	.word	0x3feec709
 801c348:	dc3a03fd 	.word	0xdc3a03fd
 801c34c:	3feec709 	.word	0x3feec709
 801c350:	145b01f5 	.word	0x145b01f5
 801c354:	be3e2fe0 	.word	0xbe3e2fe0
 801c358:	00000000 	.word	0x00000000
 801c35c:	3ff00000 	.word	0x3ff00000
 801c360:	43400000 	.word	0x43400000
 801c364:	0003988e 	.word	0x0003988e
 801c368:	000bb679 	.word	0x000bb679
 801c36c:	0801e710 	.word	0x0801e710
 801c370:	3ff00000 	.word	0x3ff00000
 801c374:	40080000 	.word	0x40080000
 801c378:	0801e730 	.word	0x0801e730
 801c37c:	0801e720 	.word	0x0801e720
 801c380:	a3b4      	add	r3, pc, #720	; (adr r3, 801c654 <__ieee754_pow+0xa14>)
 801c382:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c386:	4640      	mov	r0, r8
 801c388:	4649      	mov	r1, r9
 801c38a:	f7e3 ff8f 	bl	80002ac <__adddf3>
 801c38e:	4622      	mov	r2, r4
 801c390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c394:	462b      	mov	r3, r5
 801c396:	4630      	mov	r0, r6
 801c398:	4639      	mov	r1, r7
 801c39a:	f7e3 ff85 	bl	80002a8 <__aeabi_dsub>
 801c39e:	4602      	mov	r2, r0
 801c3a0:	460b      	mov	r3, r1
 801c3a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c3a6:	f7e4 fbc7 	bl	8000b38 <__aeabi_dcmpgt>
 801c3aa:	2800      	cmp	r0, #0
 801c3ac:	f47f adfe 	bne.w	801bfac <__ieee754_pow+0x36c>
 801c3b0:	4aa3      	ldr	r2, [pc, #652]	; (801c640 <__ieee754_pow+0xa00>)
 801c3b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c3b6:	4293      	cmp	r3, r2
 801c3b8:	f340 810a 	ble.w	801c5d0 <__ieee754_pow+0x990>
 801c3bc:	151b      	asrs	r3, r3, #20
 801c3be:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801c3c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801c3c6:	fa4a f303 	asr.w	r3, sl, r3
 801c3ca:	445b      	add	r3, fp
 801c3cc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801c3d0:	4e9c      	ldr	r6, [pc, #624]	; (801c644 <__ieee754_pow+0xa04>)
 801c3d2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801c3d6:	4116      	asrs	r6, r2
 801c3d8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801c3dc:	2000      	movs	r0, #0
 801c3de:	ea23 0106 	bic.w	r1, r3, r6
 801c3e2:	f1c2 0214 	rsb	r2, r2, #20
 801c3e6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801c3ea:	fa4a fa02 	asr.w	sl, sl, r2
 801c3ee:	f1bb 0f00 	cmp.w	fp, #0
 801c3f2:	4602      	mov	r2, r0
 801c3f4:	460b      	mov	r3, r1
 801c3f6:	4620      	mov	r0, r4
 801c3f8:	4629      	mov	r1, r5
 801c3fa:	bfb8      	it	lt
 801c3fc:	f1ca 0a00 	rsblt	sl, sl, #0
 801c400:	f7e3 ff52 	bl	80002a8 <__aeabi_dsub>
 801c404:	e9cd 0100 	strd	r0, r1, [sp]
 801c408:	4642      	mov	r2, r8
 801c40a:	464b      	mov	r3, r9
 801c40c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c410:	f7e3 ff4c 	bl	80002ac <__adddf3>
 801c414:	2000      	movs	r0, #0
 801c416:	a378      	add	r3, pc, #480	; (adr r3, 801c5f8 <__ieee754_pow+0x9b8>)
 801c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c41c:	4604      	mov	r4, r0
 801c41e:	460d      	mov	r5, r1
 801c420:	f7e4 f8fa 	bl	8000618 <__aeabi_dmul>
 801c424:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c428:	4606      	mov	r6, r0
 801c42a:	460f      	mov	r7, r1
 801c42c:	4620      	mov	r0, r4
 801c42e:	4629      	mov	r1, r5
 801c430:	f7e3 ff3a 	bl	80002a8 <__aeabi_dsub>
 801c434:	4602      	mov	r2, r0
 801c436:	460b      	mov	r3, r1
 801c438:	4640      	mov	r0, r8
 801c43a:	4649      	mov	r1, r9
 801c43c:	f7e3 ff34 	bl	80002a8 <__aeabi_dsub>
 801c440:	a36f      	add	r3, pc, #444	; (adr r3, 801c600 <__ieee754_pow+0x9c0>)
 801c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c446:	f7e4 f8e7 	bl	8000618 <__aeabi_dmul>
 801c44a:	a36f      	add	r3, pc, #444	; (adr r3, 801c608 <__ieee754_pow+0x9c8>)
 801c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c450:	4680      	mov	r8, r0
 801c452:	4689      	mov	r9, r1
 801c454:	4620      	mov	r0, r4
 801c456:	4629      	mov	r1, r5
 801c458:	f7e4 f8de 	bl	8000618 <__aeabi_dmul>
 801c45c:	4602      	mov	r2, r0
 801c45e:	460b      	mov	r3, r1
 801c460:	4640      	mov	r0, r8
 801c462:	4649      	mov	r1, r9
 801c464:	f7e3 ff22 	bl	80002ac <__adddf3>
 801c468:	4604      	mov	r4, r0
 801c46a:	460d      	mov	r5, r1
 801c46c:	4602      	mov	r2, r0
 801c46e:	460b      	mov	r3, r1
 801c470:	4630      	mov	r0, r6
 801c472:	4639      	mov	r1, r7
 801c474:	f7e3 ff1a 	bl	80002ac <__adddf3>
 801c478:	4632      	mov	r2, r6
 801c47a:	463b      	mov	r3, r7
 801c47c:	4680      	mov	r8, r0
 801c47e:	4689      	mov	r9, r1
 801c480:	f7e3 ff12 	bl	80002a8 <__aeabi_dsub>
 801c484:	4602      	mov	r2, r0
 801c486:	460b      	mov	r3, r1
 801c488:	4620      	mov	r0, r4
 801c48a:	4629      	mov	r1, r5
 801c48c:	f7e3 ff0c 	bl	80002a8 <__aeabi_dsub>
 801c490:	4642      	mov	r2, r8
 801c492:	4606      	mov	r6, r0
 801c494:	460f      	mov	r7, r1
 801c496:	464b      	mov	r3, r9
 801c498:	4640      	mov	r0, r8
 801c49a:	4649      	mov	r1, r9
 801c49c:	f7e4 f8bc 	bl	8000618 <__aeabi_dmul>
 801c4a0:	a35b      	add	r3, pc, #364	; (adr r3, 801c610 <__ieee754_pow+0x9d0>)
 801c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4a6:	4604      	mov	r4, r0
 801c4a8:	460d      	mov	r5, r1
 801c4aa:	f7e4 f8b5 	bl	8000618 <__aeabi_dmul>
 801c4ae:	a35a      	add	r3, pc, #360	; (adr r3, 801c618 <__ieee754_pow+0x9d8>)
 801c4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4b4:	f7e3 fef8 	bl	80002a8 <__aeabi_dsub>
 801c4b8:	4622      	mov	r2, r4
 801c4ba:	462b      	mov	r3, r5
 801c4bc:	f7e4 f8ac 	bl	8000618 <__aeabi_dmul>
 801c4c0:	a357      	add	r3, pc, #348	; (adr r3, 801c620 <__ieee754_pow+0x9e0>)
 801c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4c6:	f7e3 fef1 	bl	80002ac <__adddf3>
 801c4ca:	4622      	mov	r2, r4
 801c4cc:	462b      	mov	r3, r5
 801c4ce:	f7e4 f8a3 	bl	8000618 <__aeabi_dmul>
 801c4d2:	a355      	add	r3, pc, #340	; (adr r3, 801c628 <__ieee754_pow+0x9e8>)
 801c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4d8:	f7e3 fee6 	bl	80002a8 <__aeabi_dsub>
 801c4dc:	4622      	mov	r2, r4
 801c4de:	462b      	mov	r3, r5
 801c4e0:	f7e4 f89a 	bl	8000618 <__aeabi_dmul>
 801c4e4:	a352      	add	r3, pc, #328	; (adr r3, 801c630 <__ieee754_pow+0x9f0>)
 801c4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4ea:	f7e3 fedf 	bl	80002ac <__adddf3>
 801c4ee:	4622      	mov	r2, r4
 801c4f0:	462b      	mov	r3, r5
 801c4f2:	f7e4 f891 	bl	8000618 <__aeabi_dmul>
 801c4f6:	4602      	mov	r2, r0
 801c4f8:	460b      	mov	r3, r1
 801c4fa:	4640      	mov	r0, r8
 801c4fc:	4649      	mov	r1, r9
 801c4fe:	f7e3 fed3 	bl	80002a8 <__aeabi_dsub>
 801c502:	4604      	mov	r4, r0
 801c504:	460d      	mov	r5, r1
 801c506:	4602      	mov	r2, r0
 801c508:	460b      	mov	r3, r1
 801c50a:	4640      	mov	r0, r8
 801c50c:	4649      	mov	r1, r9
 801c50e:	f7e4 f883 	bl	8000618 <__aeabi_dmul>
 801c512:	2200      	movs	r2, #0
 801c514:	e9cd 0100 	strd	r0, r1, [sp]
 801c518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c51c:	4620      	mov	r0, r4
 801c51e:	4629      	mov	r1, r5
 801c520:	f7e3 fec2 	bl	80002a8 <__aeabi_dsub>
 801c524:	4602      	mov	r2, r0
 801c526:	460b      	mov	r3, r1
 801c528:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c52c:	f7e4 f99e 	bl	800086c <__aeabi_ddiv>
 801c530:	4632      	mov	r2, r6
 801c532:	4604      	mov	r4, r0
 801c534:	460d      	mov	r5, r1
 801c536:	463b      	mov	r3, r7
 801c538:	4640      	mov	r0, r8
 801c53a:	4649      	mov	r1, r9
 801c53c:	f7e4 f86c 	bl	8000618 <__aeabi_dmul>
 801c540:	4632      	mov	r2, r6
 801c542:	463b      	mov	r3, r7
 801c544:	f7e3 feb2 	bl	80002ac <__adddf3>
 801c548:	4602      	mov	r2, r0
 801c54a:	460b      	mov	r3, r1
 801c54c:	4620      	mov	r0, r4
 801c54e:	4629      	mov	r1, r5
 801c550:	f7e3 feaa 	bl	80002a8 <__aeabi_dsub>
 801c554:	4642      	mov	r2, r8
 801c556:	464b      	mov	r3, r9
 801c558:	f7e3 fea6 	bl	80002a8 <__aeabi_dsub>
 801c55c:	4602      	mov	r2, r0
 801c55e:	460b      	mov	r3, r1
 801c560:	2000      	movs	r0, #0
 801c562:	4939      	ldr	r1, [pc, #228]	; (801c648 <__ieee754_pow+0xa08>)
 801c564:	f7e3 fea0 	bl	80002a8 <__aeabi_dsub>
 801c568:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801c56c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801c570:	4602      	mov	r2, r0
 801c572:	460b      	mov	r3, r1
 801c574:	da2f      	bge.n	801c5d6 <__ieee754_pow+0x996>
 801c576:	4650      	mov	r0, sl
 801c578:	ec43 2b10 	vmov	d0, r2, r3
 801c57c:	f001 faa4 	bl	801dac8 <scalbn>
 801c580:	ec51 0b10 	vmov	r0, r1, d0
 801c584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c588:	f7ff bbf1 	b.w	801bd6e <__ieee754_pow+0x12e>
 801c58c:	4b2f      	ldr	r3, [pc, #188]	; (801c64c <__ieee754_pow+0xa0c>)
 801c58e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c592:	429e      	cmp	r6, r3
 801c594:	f77f af0c 	ble.w	801c3b0 <__ieee754_pow+0x770>
 801c598:	4b2d      	ldr	r3, [pc, #180]	; (801c650 <__ieee754_pow+0xa10>)
 801c59a:	440b      	add	r3, r1
 801c59c:	4303      	orrs	r3, r0
 801c59e:	d00b      	beq.n	801c5b8 <__ieee754_pow+0x978>
 801c5a0:	a325      	add	r3, pc, #148	; (adr r3, 801c638 <__ieee754_pow+0x9f8>)
 801c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c5aa:	f7e4 f835 	bl	8000618 <__aeabi_dmul>
 801c5ae:	a322      	add	r3, pc, #136	; (adr r3, 801c638 <__ieee754_pow+0x9f8>)
 801c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5b4:	f7ff bbdb 	b.w	801bd6e <__ieee754_pow+0x12e>
 801c5b8:	4622      	mov	r2, r4
 801c5ba:	462b      	mov	r3, r5
 801c5bc:	f7e3 fe74 	bl	80002a8 <__aeabi_dsub>
 801c5c0:	4642      	mov	r2, r8
 801c5c2:	464b      	mov	r3, r9
 801c5c4:	f7e4 faae 	bl	8000b24 <__aeabi_dcmpge>
 801c5c8:	2800      	cmp	r0, #0
 801c5ca:	f43f aef1 	beq.w	801c3b0 <__ieee754_pow+0x770>
 801c5ce:	e7e7      	b.n	801c5a0 <__ieee754_pow+0x960>
 801c5d0:	f04f 0a00 	mov.w	sl, #0
 801c5d4:	e718      	b.n	801c408 <__ieee754_pow+0x7c8>
 801c5d6:	4621      	mov	r1, r4
 801c5d8:	e7d4      	b.n	801c584 <__ieee754_pow+0x944>
 801c5da:	2000      	movs	r0, #0
 801c5dc:	491a      	ldr	r1, [pc, #104]	; (801c648 <__ieee754_pow+0xa08>)
 801c5de:	f7ff bb8f 	b.w	801bd00 <__ieee754_pow+0xc0>
 801c5e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c5e6:	f7ff bb8b 	b.w	801bd00 <__ieee754_pow+0xc0>
 801c5ea:	4630      	mov	r0, r6
 801c5ec:	4639      	mov	r1, r7
 801c5ee:	f7ff bb87 	b.w	801bd00 <__ieee754_pow+0xc0>
 801c5f2:	4693      	mov	fp, r2
 801c5f4:	f7ff bb98 	b.w	801bd28 <__ieee754_pow+0xe8>
 801c5f8:	00000000 	.word	0x00000000
 801c5fc:	3fe62e43 	.word	0x3fe62e43
 801c600:	fefa39ef 	.word	0xfefa39ef
 801c604:	3fe62e42 	.word	0x3fe62e42
 801c608:	0ca86c39 	.word	0x0ca86c39
 801c60c:	be205c61 	.word	0xbe205c61
 801c610:	72bea4d0 	.word	0x72bea4d0
 801c614:	3e663769 	.word	0x3e663769
 801c618:	c5d26bf1 	.word	0xc5d26bf1
 801c61c:	3ebbbd41 	.word	0x3ebbbd41
 801c620:	af25de2c 	.word	0xaf25de2c
 801c624:	3f11566a 	.word	0x3f11566a
 801c628:	16bebd93 	.word	0x16bebd93
 801c62c:	3f66c16c 	.word	0x3f66c16c
 801c630:	5555553e 	.word	0x5555553e
 801c634:	3fc55555 	.word	0x3fc55555
 801c638:	c2f8f359 	.word	0xc2f8f359
 801c63c:	01a56e1f 	.word	0x01a56e1f
 801c640:	3fe00000 	.word	0x3fe00000
 801c644:	000fffff 	.word	0x000fffff
 801c648:	3ff00000 	.word	0x3ff00000
 801c64c:	4090cbff 	.word	0x4090cbff
 801c650:	3f6f3400 	.word	0x3f6f3400
 801c654:	652b82fe 	.word	0x652b82fe
 801c658:	3c971547 	.word	0x3c971547
 801c65c:	00000000 	.word	0x00000000

0801c660 <__ieee754_rem_pio2>:
 801c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c664:	ec57 6b10 	vmov	r6, r7, d0
 801c668:	4bc3      	ldr	r3, [pc, #780]	; (801c978 <__ieee754_rem_pio2+0x318>)
 801c66a:	b08d      	sub	sp, #52	; 0x34
 801c66c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801c670:	4598      	cmp	r8, r3
 801c672:	4604      	mov	r4, r0
 801c674:	9704      	str	r7, [sp, #16]
 801c676:	dc07      	bgt.n	801c688 <__ieee754_rem_pio2+0x28>
 801c678:	2200      	movs	r2, #0
 801c67a:	2300      	movs	r3, #0
 801c67c:	ed84 0b00 	vstr	d0, [r4]
 801c680:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c684:	2500      	movs	r5, #0
 801c686:	e027      	b.n	801c6d8 <__ieee754_rem_pio2+0x78>
 801c688:	4bbc      	ldr	r3, [pc, #752]	; (801c97c <__ieee754_rem_pio2+0x31c>)
 801c68a:	4598      	cmp	r8, r3
 801c68c:	dc75      	bgt.n	801c77a <__ieee754_rem_pio2+0x11a>
 801c68e:	9b04      	ldr	r3, [sp, #16]
 801c690:	4dbb      	ldr	r5, [pc, #748]	; (801c980 <__ieee754_rem_pio2+0x320>)
 801c692:	2b00      	cmp	r3, #0
 801c694:	ee10 0a10 	vmov	r0, s0
 801c698:	a3a9      	add	r3, pc, #676	; (adr r3, 801c940 <__ieee754_rem_pio2+0x2e0>)
 801c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c69e:	4639      	mov	r1, r7
 801c6a0:	dd36      	ble.n	801c710 <__ieee754_rem_pio2+0xb0>
 801c6a2:	f7e3 fe01 	bl	80002a8 <__aeabi_dsub>
 801c6a6:	45a8      	cmp	r8, r5
 801c6a8:	4606      	mov	r6, r0
 801c6aa:	460f      	mov	r7, r1
 801c6ac:	d018      	beq.n	801c6e0 <__ieee754_rem_pio2+0x80>
 801c6ae:	a3a6      	add	r3, pc, #664	; (adr r3, 801c948 <__ieee754_rem_pio2+0x2e8>)
 801c6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6b4:	f7e3 fdf8 	bl	80002a8 <__aeabi_dsub>
 801c6b8:	4602      	mov	r2, r0
 801c6ba:	460b      	mov	r3, r1
 801c6bc:	e9c4 2300 	strd	r2, r3, [r4]
 801c6c0:	4630      	mov	r0, r6
 801c6c2:	4639      	mov	r1, r7
 801c6c4:	f7e3 fdf0 	bl	80002a8 <__aeabi_dsub>
 801c6c8:	a39f      	add	r3, pc, #636	; (adr r3, 801c948 <__ieee754_rem_pio2+0x2e8>)
 801c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6ce:	f7e3 fdeb 	bl	80002a8 <__aeabi_dsub>
 801c6d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c6d6:	2501      	movs	r5, #1
 801c6d8:	4628      	mov	r0, r5
 801c6da:	b00d      	add	sp, #52	; 0x34
 801c6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6e0:	a39b      	add	r3, pc, #620	; (adr r3, 801c950 <__ieee754_rem_pio2+0x2f0>)
 801c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6e6:	f7e3 fddf 	bl	80002a8 <__aeabi_dsub>
 801c6ea:	a39b      	add	r3, pc, #620	; (adr r3, 801c958 <__ieee754_rem_pio2+0x2f8>)
 801c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6f0:	4606      	mov	r6, r0
 801c6f2:	460f      	mov	r7, r1
 801c6f4:	f7e3 fdd8 	bl	80002a8 <__aeabi_dsub>
 801c6f8:	4602      	mov	r2, r0
 801c6fa:	460b      	mov	r3, r1
 801c6fc:	e9c4 2300 	strd	r2, r3, [r4]
 801c700:	4630      	mov	r0, r6
 801c702:	4639      	mov	r1, r7
 801c704:	f7e3 fdd0 	bl	80002a8 <__aeabi_dsub>
 801c708:	a393      	add	r3, pc, #588	; (adr r3, 801c958 <__ieee754_rem_pio2+0x2f8>)
 801c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c70e:	e7de      	b.n	801c6ce <__ieee754_rem_pio2+0x6e>
 801c710:	f7e3 fdcc 	bl	80002ac <__adddf3>
 801c714:	45a8      	cmp	r8, r5
 801c716:	4606      	mov	r6, r0
 801c718:	460f      	mov	r7, r1
 801c71a:	d016      	beq.n	801c74a <__ieee754_rem_pio2+0xea>
 801c71c:	a38a      	add	r3, pc, #552	; (adr r3, 801c948 <__ieee754_rem_pio2+0x2e8>)
 801c71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c722:	f7e3 fdc3 	bl	80002ac <__adddf3>
 801c726:	4602      	mov	r2, r0
 801c728:	460b      	mov	r3, r1
 801c72a:	e9c4 2300 	strd	r2, r3, [r4]
 801c72e:	4630      	mov	r0, r6
 801c730:	4639      	mov	r1, r7
 801c732:	f7e3 fdb9 	bl	80002a8 <__aeabi_dsub>
 801c736:	a384      	add	r3, pc, #528	; (adr r3, 801c948 <__ieee754_rem_pio2+0x2e8>)
 801c738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c73c:	f7e3 fdb6 	bl	80002ac <__adddf3>
 801c740:	f04f 35ff 	mov.w	r5, #4294967295
 801c744:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c748:	e7c6      	b.n	801c6d8 <__ieee754_rem_pio2+0x78>
 801c74a:	a381      	add	r3, pc, #516	; (adr r3, 801c950 <__ieee754_rem_pio2+0x2f0>)
 801c74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c750:	f7e3 fdac 	bl	80002ac <__adddf3>
 801c754:	a380      	add	r3, pc, #512	; (adr r3, 801c958 <__ieee754_rem_pio2+0x2f8>)
 801c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c75a:	4606      	mov	r6, r0
 801c75c:	460f      	mov	r7, r1
 801c75e:	f7e3 fda5 	bl	80002ac <__adddf3>
 801c762:	4602      	mov	r2, r0
 801c764:	460b      	mov	r3, r1
 801c766:	e9c4 2300 	strd	r2, r3, [r4]
 801c76a:	4630      	mov	r0, r6
 801c76c:	4639      	mov	r1, r7
 801c76e:	f7e3 fd9b 	bl	80002a8 <__aeabi_dsub>
 801c772:	a379      	add	r3, pc, #484	; (adr r3, 801c958 <__ieee754_rem_pio2+0x2f8>)
 801c774:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c778:	e7e0      	b.n	801c73c <__ieee754_rem_pio2+0xdc>
 801c77a:	4b82      	ldr	r3, [pc, #520]	; (801c984 <__ieee754_rem_pio2+0x324>)
 801c77c:	4598      	cmp	r8, r3
 801c77e:	f300 80d0 	bgt.w	801c922 <__ieee754_rem_pio2+0x2c2>
 801c782:	f001 f879 	bl	801d878 <fabs>
 801c786:	ec57 6b10 	vmov	r6, r7, d0
 801c78a:	ee10 0a10 	vmov	r0, s0
 801c78e:	a374      	add	r3, pc, #464	; (adr r3, 801c960 <__ieee754_rem_pio2+0x300>)
 801c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c794:	4639      	mov	r1, r7
 801c796:	f7e3 ff3f 	bl	8000618 <__aeabi_dmul>
 801c79a:	2200      	movs	r2, #0
 801c79c:	4b7a      	ldr	r3, [pc, #488]	; (801c988 <__ieee754_rem_pio2+0x328>)
 801c79e:	f7e3 fd85 	bl	80002ac <__adddf3>
 801c7a2:	f7e4 f9e9 	bl	8000b78 <__aeabi_d2iz>
 801c7a6:	4605      	mov	r5, r0
 801c7a8:	f7e3 fecc 	bl	8000544 <__aeabi_i2d>
 801c7ac:	a364      	add	r3, pc, #400	; (adr r3, 801c940 <__ieee754_rem_pio2+0x2e0>)
 801c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c7b6:	f7e3 ff2f 	bl	8000618 <__aeabi_dmul>
 801c7ba:	4602      	mov	r2, r0
 801c7bc:	460b      	mov	r3, r1
 801c7be:	4630      	mov	r0, r6
 801c7c0:	4639      	mov	r1, r7
 801c7c2:	f7e3 fd71 	bl	80002a8 <__aeabi_dsub>
 801c7c6:	a360      	add	r3, pc, #384	; (adr r3, 801c948 <__ieee754_rem_pio2+0x2e8>)
 801c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7cc:	4682      	mov	sl, r0
 801c7ce:	468b      	mov	fp, r1
 801c7d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c7d4:	f7e3 ff20 	bl	8000618 <__aeabi_dmul>
 801c7d8:	2d1f      	cmp	r5, #31
 801c7da:	4606      	mov	r6, r0
 801c7dc:	460f      	mov	r7, r1
 801c7de:	dc0c      	bgt.n	801c7fa <__ieee754_rem_pio2+0x19a>
 801c7e0:	1e6a      	subs	r2, r5, #1
 801c7e2:	4b6a      	ldr	r3, [pc, #424]	; (801c98c <__ieee754_rem_pio2+0x32c>)
 801c7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c7e8:	4543      	cmp	r3, r8
 801c7ea:	d006      	beq.n	801c7fa <__ieee754_rem_pio2+0x19a>
 801c7ec:	4632      	mov	r2, r6
 801c7ee:	463b      	mov	r3, r7
 801c7f0:	4650      	mov	r0, sl
 801c7f2:	4659      	mov	r1, fp
 801c7f4:	f7e3 fd58 	bl	80002a8 <__aeabi_dsub>
 801c7f8:	e00e      	b.n	801c818 <__ieee754_rem_pio2+0x1b8>
 801c7fa:	4632      	mov	r2, r6
 801c7fc:	463b      	mov	r3, r7
 801c7fe:	4650      	mov	r0, sl
 801c800:	4659      	mov	r1, fp
 801c802:	f7e3 fd51 	bl	80002a8 <__aeabi_dsub>
 801c806:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c80a:	9305      	str	r3, [sp, #20]
 801c80c:	9a05      	ldr	r2, [sp, #20]
 801c80e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c812:	1ad3      	subs	r3, r2, r3
 801c814:	2b10      	cmp	r3, #16
 801c816:	dc02      	bgt.n	801c81e <__ieee754_rem_pio2+0x1be>
 801c818:	e9c4 0100 	strd	r0, r1, [r4]
 801c81c:	e039      	b.n	801c892 <__ieee754_rem_pio2+0x232>
 801c81e:	a34c      	add	r3, pc, #304	; (adr r3, 801c950 <__ieee754_rem_pio2+0x2f0>)
 801c820:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c828:	f7e3 fef6 	bl	8000618 <__aeabi_dmul>
 801c82c:	4606      	mov	r6, r0
 801c82e:	460f      	mov	r7, r1
 801c830:	4602      	mov	r2, r0
 801c832:	460b      	mov	r3, r1
 801c834:	4650      	mov	r0, sl
 801c836:	4659      	mov	r1, fp
 801c838:	f7e3 fd36 	bl	80002a8 <__aeabi_dsub>
 801c83c:	4602      	mov	r2, r0
 801c83e:	460b      	mov	r3, r1
 801c840:	4680      	mov	r8, r0
 801c842:	4689      	mov	r9, r1
 801c844:	4650      	mov	r0, sl
 801c846:	4659      	mov	r1, fp
 801c848:	f7e3 fd2e 	bl	80002a8 <__aeabi_dsub>
 801c84c:	4632      	mov	r2, r6
 801c84e:	463b      	mov	r3, r7
 801c850:	f7e3 fd2a 	bl	80002a8 <__aeabi_dsub>
 801c854:	a340      	add	r3, pc, #256	; (adr r3, 801c958 <__ieee754_rem_pio2+0x2f8>)
 801c856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c85a:	4606      	mov	r6, r0
 801c85c:	460f      	mov	r7, r1
 801c85e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c862:	f7e3 fed9 	bl	8000618 <__aeabi_dmul>
 801c866:	4632      	mov	r2, r6
 801c868:	463b      	mov	r3, r7
 801c86a:	f7e3 fd1d 	bl	80002a8 <__aeabi_dsub>
 801c86e:	4602      	mov	r2, r0
 801c870:	460b      	mov	r3, r1
 801c872:	4606      	mov	r6, r0
 801c874:	460f      	mov	r7, r1
 801c876:	4640      	mov	r0, r8
 801c878:	4649      	mov	r1, r9
 801c87a:	f7e3 fd15 	bl	80002a8 <__aeabi_dsub>
 801c87e:	9a05      	ldr	r2, [sp, #20]
 801c880:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c884:	1ad3      	subs	r3, r2, r3
 801c886:	2b31      	cmp	r3, #49	; 0x31
 801c888:	dc20      	bgt.n	801c8cc <__ieee754_rem_pio2+0x26c>
 801c88a:	e9c4 0100 	strd	r0, r1, [r4]
 801c88e:	46c2      	mov	sl, r8
 801c890:	46cb      	mov	fp, r9
 801c892:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c896:	4650      	mov	r0, sl
 801c898:	4642      	mov	r2, r8
 801c89a:	464b      	mov	r3, r9
 801c89c:	4659      	mov	r1, fp
 801c89e:	f7e3 fd03 	bl	80002a8 <__aeabi_dsub>
 801c8a2:	463b      	mov	r3, r7
 801c8a4:	4632      	mov	r2, r6
 801c8a6:	f7e3 fcff 	bl	80002a8 <__aeabi_dsub>
 801c8aa:	9b04      	ldr	r3, [sp, #16]
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c8b2:	f6bf af11 	bge.w	801c6d8 <__ieee754_rem_pio2+0x78>
 801c8b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c8ba:	6063      	str	r3, [r4, #4]
 801c8bc:	f8c4 8000 	str.w	r8, [r4]
 801c8c0:	60a0      	str	r0, [r4, #8]
 801c8c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c8c6:	60e3      	str	r3, [r4, #12]
 801c8c8:	426d      	negs	r5, r5
 801c8ca:	e705      	b.n	801c6d8 <__ieee754_rem_pio2+0x78>
 801c8cc:	a326      	add	r3, pc, #152	; (adr r3, 801c968 <__ieee754_rem_pio2+0x308>)
 801c8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c8d6:	f7e3 fe9f 	bl	8000618 <__aeabi_dmul>
 801c8da:	4606      	mov	r6, r0
 801c8dc:	460f      	mov	r7, r1
 801c8de:	4602      	mov	r2, r0
 801c8e0:	460b      	mov	r3, r1
 801c8e2:	4640      	mov	r0, r8
 801c8e4:	4649      	mov	r1, r9
 801c8e6:	f7e3 fcdf 	bl	80002a8 <__aeabi_dsub>
 801c8ea:	4602      	mov	r2, r0
 801c8ec:	460b      	mov	r3, r1
 801c8ee:	4682      	mov	sl, r0
 801c8f0:	468b      	mov	fp, r1
 801c8f2:	4640      	mov	r0, r8
 801c8f4:	4649      	mov	r1, r9
 801c8f6:	f7e3 fcd7 	bl	80002a8 <__aeabi_dsub>
 801c8fa:	4632      	mov	r2, r6
 801c8fc:	463b      	mov	r3, r7
 801c8fe:	f7e3 fcd3 	bl	80002a8 <__aeabi_dsub>
 801c902:	a31b      	add	r3, pc, #108	; (adr r3, 801c970 <__ieee754_rem_pio2+0x310>)
 801c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c908:	4606      	mov	r6, r0
 801c90a:	460f      	mov	r7, r1
 801c90c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c910:	f7e3 fe82 	bl	8000618 <__aeabi_dmul>
 801c914:	4632      	mov	r2, r6
 801c916:	463b      	mov	r3, r7
 801c918:	f7e3 fcc6 	bl	80002a8 <__aeabi_dsub>
 801c91c:	4606      	mov	r6, r0
 801c91e:	460f      	mov	r7, r1
 801c920:	e764      	b.n	801c7ec <__ieee754_rem_pio2+0x18c>
 801c922:	4b1b      	ldr	r3, [pc, #108]	; (801c990 <__ieee754_rem_pio2+0x330>)
 801c924:	4598      	cmp	r8, r3
 801c926:	dd35      	ble.n	801c994 <__ieee754_rem_pio2+0x334>
 801c928:	ee10 2a10 	vmov	r2, s0
 801c92c:	463b      	mov	r3, r7
 801c92e:	4630      	mov	r0, r6
 801c930:	4639      	mov	r1, r7
 801c932:	f7e3 fcb9 	bl	80002a8 <__aeabi_dsub>
 801c936:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c93a:	e9c4 0100 	strd	r0, r1, [r4]
 801c93e:	e6a1      	b.n	801c684 <__ieee754_rem_pio2+0x24>
 801c940:	54400000 	.word	0x54400000
 801c944:	3ff921fb 	.word	0x3ff921fb
 801c948:	1a626331 	.word	0x1a626331
 801c94c:	3dd0b461 	.word	0x3dd0b461
 801c950:	1a600000 	.word	0x1a600000
 801c954:	3dd0b461 	.word	0x3dd0b461
 801c958:	2e037073 	.word	0x2e037073
 801c95c:	3ba3198a 	.word	0x3ba3198a
 801c960:	6dc9c883 	.word	0x6dc9c883
 801c964:	3fe45f30 	.word	0x3fe45f30
 801c968:	2e000000 	.word	0x2e000000
 801c96c:	3ba3198a 	.word	0x3ba3198a
 801c970:	252049c1 	.word	0x252049c1
 801c974:	397b839a 	.word	0x397b839a
 801c978:	3fe921fb 	.word	0x3fe921fb
 801c97c:	4002d97b 	.word	0x4002d97b
 801c980:	3ff921fb 	.word	0x3ff921fb
 801c984:	413921fb 	.word	0x413921fb
 801c988:	3fe00000 	.word	0x3fe00000
 801c98c:	0801e740 	.word	0x0801e740
 801c990:	7fefffff 	.word	0x7fefffff
 801c994:	ea4f 5528 	mov.w	r5, r8, asr #20
 801c998:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801c99c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801c9a0:	4630      	mov	r0, r6
 801c9a2:	460f      	mov	r7, r1
 801c9a4:	f7e4 f8e8 	bl	8000b78 <__aeabi_d2iz>
 801c9a8:	f7e3 fdcc 	bl	8000544 <__aeabi_i2d>
 801c9ac:	4602      	mov	r2, r0
 801c9ae:	460b      	mov	r3, r1
 801c9b0:	4630      	mov	r0, r6
 801c9b2:	4639      	mov	r1, r7
 801c9b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c9b8:	f7e3 fc76 	bl	80002a8 <__aeabi_dsub>
 801c9bc:	2200      	movs	r2, #0
 801c9be:	4b1f      	ldr	r3, [pc, #124]	; (801ca3c <__ieee754_rem_pio2+0x3dc>)
 801c9c0:	f7e3 fe2a 	bl	8000618 <__aeabi_dmul>
 801c9c4:	460f      	mov	r7, r1
 801c9c6:	4606      	mov	r6, r0
 801c9c8:	f7e4 f8d6 	bl	8000b78 <__aeabi_d2iz>
 801c9cc:	f7e3 fdba 	bl	8000544 <__aeabi_i2d>
 801c9d0:	4602      	mov	r2, r0
 801c9d2:	460b      	mov	r3, r1
 801c9d4:	4630      	mov	r0, r6
 801c9d6:	4639      	mov	r1, r7
 801c9d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c9dc:	f7e3 fc64 	bl	80002a8 <__aeabi_dsub>
 801c9e0:	2200      	movs	r2, #0
 801c9e2:	4b16      	ldr	r3, [pc, #88]	; (801ca3c <__ieee754_rem_pio2+0x3dc>)
 801c9e4:	f7e3 fe18 	bl	8000618 <__aeabi_dmul>
 801c9e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c9ec:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801c9f0:	f04f 0803 	mov.w	r8, #3
 801c9f4:	2600      	movs	r6, #0
 801c9f6:	2700      	movs	r7, #0
 801c9f8:	4632      	mov	r2, r6
 801c9fa:	463b      	mov	r3, r7
 801c9fc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801ca00:	f108 3aff 	add.w	sl, r8, #4294967295
 801ca04:	f7e4 f870 	bl	8000ae8 <__aeabi_dcmpeq>
 801ca08:	b9b0      	cbnz	r0, 801ca38 <__ieee754_rem_pio2+0x3d8>
 801ca0a:	4b0d      	ldr	r3, [pc, #52]	; (801ca40 <__ieee754_rem_pio2+0x3e0>)
 801ca0c:	9301      	str	r3, [sp, #4]
 801ca0e:	2302      	movs	r3, #2
 801ca10:	9300      	str	r3, [sp, #0]
 801ca12:	462a      	mov	r2, r5
 801ca14:	4643      	mov	r3, r8
 801ca16:	4621      	mov	r1, r4
 801ca18:	a806      	add	r0, sp, #24
 801ca1a:	f000 f991 	bl	801cd40 <__kernel_rem_pio2>
 801ca1e:	9b04      	ldr	r3, [sp, #16]
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	4605      	mov	r5, r0
 801ca24:	f6bf ae58 	bge.w	801c6d8 <__ieee754_rem_pio2+0x78>
 801ca28:	6863      	ldr	r3, [r4, #4]
 801ca2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ca2e:	6063      	str	r3, [r4, #4]
 801ca30:	68e3      	ldr	r3, [r4, #12]
 801ca32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ca36:	e746      	b.n	801c8c6 <__ieee754_rem_pio2+0x266>
 801ca38:	46d0      	mov	r8, sl
 801ca3a:	e7dd      	b.n	801c9f8 <__ieee754_rem_pio2+0x398>
 801ca3c:	41700000 	.word	0x41700000
 801ca40:	0801e7c0 	.word	0x0801e7c0

0801ca44 <__ieee754_sqrt>:
 801ca44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca48:	4955      	ldr	r1, [pc, #340]	; (801cba0 <__ieee754_sqrt+0x15c>)
 801ca4a:	ec55 4b10 	vmov	r4, r5, d0
 801ca4e:	43a9      	bics	r1, r5
 801ca50:	462b      	mov	r3, r5
 801ca52:	462a      	mov	r2, r5
 801ca54:	d112      	bne.n	801ca7c <__ieee754_sqrt+0x38>
 801ca56:	ee10 2a10 	vmov	r2, s0
 801ca5a:	ee10 0a10 	vmov	r0, s0
 801ca5e:	4629      	mov	r1, r5
 801ca60:	f7e3 fdda 	bl	8000618 <__aeabi_dmul>
 801ca64:	4602      	mov	r2, r0
 801ca66:	460b      	mov	r3, r1
 801ca68:	4620      	mov	r0, r4
 801ca6a:	4629      	mov	r1, r5
 801ca6c:	f7e3 fc1e 	bl	80002ac <__adddf3>
 801ca70:	4604      	mov	r4, r0
 801ca72:	460d      	mov	r5, r1
 801ca74:	ec45 4b10 	vmov	d0, r4, r5
 801ca78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca7c:	2d00      	cmp	r5, #0
 801ca7e:	ee10 0a10 	vmov	r0, s0
 801ca82:	4621      	mov	r1, r4
 801ca84:	dc0f      	bgt.n	801caa6 <__ieee754_sqrt+0x62>
 801ca86:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ca8a:	4330      	orrs	r0, r6
 801ca8c:	d0f2      	beq.n	801ca74 <__ieee754_sqrt+0x30>
 801ca8e:	b155      	cbz	r5, 801caa6 <__ieee754_sqrt+0x62>
 801ca90:	ee10 2a10 	vmov	r2, s0
 801ca94:	4620      	mov	r0, r4
 801ca96:	4629      	mov	r1, r5
 801ca98:	f7e3 fc06 	bl	80002a8 <__aeabi_dsub>
 801ca9c:	4602      	mov	r2, r0
 801ca9e:	460b      	mov	r3, r1
 801caa0:	f7e3 fee4 	bl	800086c <__aeabi_ddiv>
 801caa4:	e7e4      	b.n	801ca70 <__ieee754_sqrt+0x2c>
 801caa6:	151b      	asrs	r3, r3, #20
 801caa8:	d073      	beq.n	801cb92 <__ieee754_sqrt+0x14e>
 801caaa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801caae:	07dd      	lsls	r5, r3, #31
 801cab0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801cab4:	bf48      	it	mi
 801cab6:	0fc8      	lsrmi	r0, r1, #31
 801cab8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801cabc:	bf44      	itt	mi
 801cabe:	0049      	lslmi	r1, r1, #1
 801cac0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801cac4:	2500      	movs	r5, #0
 801cac6:	1058      	asrs	r0, r3, #1
 801cac8:	0fcb      	lsrs	r3, r1, #31
 801caca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801cace:	0049      	lsls	r1, r1, #1
 801cad0:	2316      	movs	r3, #22
 801cad2:	462c      	mov	r4, r5
 801cad4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801cad8:	19a7      	adds	r7, r4, r6
 801cada:	4297      	cmp	r7, r2
 801cadc:	bfde      	ittt	le
 801cade:	19bc      	addle	r4, r7, r6
 801cae0:	1bd2      	suble	r2, r2, r7
 801cae2:	19ad      	addle	r5, r5, r6
 801cae4:	0fcf      	lsrs	r7, r1, #31
 801cae6:	3b01      	subs	r3, #1
 801cae8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801caec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801caf0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801caf4:	d1f0      	bne.n	801cad8 <__ieee754_sqrt+0x94>
 801caf6:	f04f 0c20 	mov.w	ip, #32
 801cafa:	469e      	mov	lr, r3
 801cafc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801cb00:	42a2      	cmp	r2, r4
 801cb02:	eb06 070e 	add.w	r7, r6, lr
 801cb06:	dc02      	bgt.n	801cb0e <__ieee754_sqrt+0xca>
 801cb08:	d112      	bne.n	801cb30 <__ieee754_sqrt+0xec>
 801cb0a:	428f      	cmp	r7, r1
 801cb0c:	d810      	bhi.n	801cb30 <__ieee754_sqrt+0xec>
 801cb0e:	2f00      	cmp	r7, #0
 801cb10:	eb07 0e06 	add.w	lr, r7, r6
 801cb14:	da42      	bge.n	801cb9c <__ieee754_sqrt+0x158>
 801cb16:	f1be 0f00 	cmp.w	lr, #0
 801cb1a:	db3f      	blt.n	801cb9c <__ieee754_sqrt+0x158>
 801cb1c:	f104 0801 	add.w	r8, r4, #1
 801cb20:	1b12      	subs	r2, r2, r4
 801cb22:	428f      	cmp	r7, r1
 801cb24:	bf88      	it	hi
 801cb26:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801cb2a:	1bc9      	subs	r1, r1, r7
 801cb2c:	4433      	add	r3, r6
 801cb2e:	4644      	mov	r4, r8
 801cb30:	0052      	lsls	r2, r2, #1
 801cb32:	f1bc 0c01 	subs.w	ip, ip, #1
 801cb36:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801cb3a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801cb3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801cb42:	d1dd      	bne.n	801cb00 <__ieee754_sqrt+0xbc>
 801cb44:	430a      	orrs	r2, r1
 801cb46:	d006      	beq.n	801cb56 <__ieee754_sqrt+0x112>
 801cb48:	1c5c      	adds	r4, r3, #1
 801cb4a:	bf13      	iteet	ne
 801cb4c:	3301      	addne	r3, #1
 801cb4e:	3501      	addeq	r5, #1
 801cb50:	4663      	moveq	r3, ip
 801cb52:	f023 0301 	bicne.w	r3, r3, #1
 801cb56:	106a      	asrs	r2, r5, #1
 801cb58:	085b      	lsrs	r3, r3, #1
 801cb5a:	07e9      	lsls	r1, r5, #31
 801cb5c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801cb60:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801cb64:	bf48      	it	mi
 801cb66:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801cb6a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801cb6e:	461c      	mov	r4, r3
 801cb70:	e780      	b.n	801ca74 <__ieee754_sqrt+0x30>
 801cb72:	0aca      	lsrs	r2, r1, #11
 801cb74:	3815      	subs	r0, #21
 801cb76:	0549      	lsls	r1, r1, #21
 801cb78:	2a00      	cmp	r2, #0
 801cb7a:	d0fa      	beq.n	801cb72 <__ieee754_sqrt+0x12e>
 801cb7c:	02d6      	lsls	r6, r2, #11
 801cb7e:	d50a      	bpl.n	801cb96 <__ieee754_sqrt+0x152>
 801cb80:	f1c3 0420 	rsb	r4, r3, #32
 801cb84:	fa21 f404 	lsr.w	r4, r1, r4
 801cb88:	1e5d      	subs	r5, r3, #1
 801cb8a:	4099      	lsls	r1, r3
 801cb8c:	4322      	orrs	r2, r4
 801cb8e:	1b43      	subs	r3, r0, r5
 801cb90:	e78b      	b.n	801caaa <__ieee754_sqrt+0x66>
 801cb92:	4618      	mov	r0, r3
 801cb94:	e7f0      	b.n	801cb78 <__ieee754_sqrt+0x134>
 801cb96:	0052      	lsls	r2, r2, #1
 801cb98:	3301      	adds	r3, #1
 801cb9a:	e7ef      	b.n	801cb7c <__ieee754_sqrt+0x138>
 801cb9c:	46a0      	mov	r8, r4
 801cb9e:	e7bf      	b.n	801cb20 <__ieee754_sqrt+0xdc>
 801cba0:	7ff00000 	.word	0x7ff00000

0801cba4 <__ieee754_sqrtf>:
 801cba4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801cba8:	4770      	bx	lr
 801cbaa:	0000      	movs	r0, r0
 801cbac:	0000      	movs	r0, r0
	...

0801cbb0 <__kernel_cos>:
 801cbb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbb4:	ec59 8b10 	vmov	r8, r9, d0
 801cbb8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801cbbc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801cbc0:	ed2d 8b02 	vpush	{d8}
 801cbc4:	eeb0 8a41 	vmov.f32	s16, s2
 801cbc8:	eef0 8a61 	vmov.f32	s17, s3
 801cbcc:	da07      	bge.n	801cbde <__kernel_cos+0x2e>
 801cbce:	ee10 0a10 	vmov	r0, s0
 801cbd2:	4649      	mov	r1, r9
 801cbd4:	f7e3 ffd0 	bl	8000b78 <__aeabi_d2iz>
 801cbd8:	2800      	cmp	r0, #0
 801cbda:	f000 8089 	beq.w	801ccf0 <__kernel_cos+0x140>
 801cbde:	4642      	mov	r2, r8
 801cbe0:	464b      	mov	r3, r9
 801cbe2:	4640      	mov	r0, r8
 801cbe4:	4649      	mov	r1, r9
 801cbe6:	f7e3 fd17 	bl	8000618 <__aeabi_dmul>
 801cbea:	2200      	movs	r2, #0
 801cbec:	4b4e      	ldr	r3, [pc, #312]	; (801cd28 <__kernel_cos+0x178>)
 801cbee:	4604      	mov	r4, r0
 801cbf0:	460d      	mov	r5, r1
 801cbf2:	f7e3 fd11 	bl	8000618 <__aeabi_dmul>
 801cbf6:	a340      	add	r3, pc, #256	; (adr r3, 801ccf8 <__kernel_cos+0x148>)
 801cbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbfc:	4682      	mov	sl, r0
 801cbfe:	468b      	mov	fp, r1
 801cc00:	4620      	mov	r0, r4
 801cc02:	4629      	mov	r1, r5
 801cc04:	f7e3 fd08 	bl	8000618 <__aeabi_dmul>
 801cc08:	a33d      	add	r3, pc, #244	; (adr r3, 801cd00 <__kernel_cos+0x150>)
 801cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc0e:	f7e3 fb4d 	bl	80002ac <__adddf3>
 801cc12:	4622      	mov	r2, r4
 801cc14:	462b      	mov	r3, r5
 801cc16:	f7e3 fcff 	bl	8000618 <__aeabi_dmul>
 801cc1a:	a33b      	add	r3, pc, #236	; (adr r3, 801cd08 <__kernel_cos+0x158>)
 801cc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc20:	f7e3 fb42 	bl	80002a8 <__aeabi_dsub>
 801cc24:	4622      	mov	r2, r4
 801cc26:	462b      	mov	r3, r5
 801cc28:	f7e3 fcf6 	bl	8000618 <__aeabi_dmul>
 801cc2c:	a338      	add	r3, pc, #224	; (adr r3, 801cd10 <__kernel_cos+0x160>)
 801cc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc32:	f7e3 fb3b 	bl	80002ac <__adddf3>
 801cc36:	4622      	mov	r2, r4
 801cc38:	462b      	mov	r3, r5
 801cc3a:	f7e3 fced 	bl	8000618 <__aeabi_dmul>
 801cc3e:	a336      	add	r3, pc, #216	; (adr r3, 801cd18 <__kernel_cos+0x168>)
 801cc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc44:	f7e3 fb30 	bl	80002a8 <__aeabi_dsub>
 801cc48:	4622      	mov	r2, r4
 801cc4a:	462b      	mov	r3, r5
 801cc4c:	f7e3 fce4 	bl	8000618 <__aeabi_dmul>
 801cc50:	a333      	add	r3, pc, #204	; (adr r3, 801cd20 <__kernel_cos+0x170>)
 801cc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc56:	f7e3 fb29 	bl	80002ac <__adddf3>
 801cc5a:	4622      	mov	r2, r4
 801cc5c:	462b      	mov	r3, r5
 801cc5e:	f7e3 fcdb 	bl	8000618 <__aeabi_dmul>
 801cc62:	4622      	mov	r2, r4
 801cc64:	462b      	mov	r3, r5
 801cc66:	f7e3 fcd7 	bl	8000618 <__aeabi_dmul>
 801cc6a:	ec53 2b18 	vmov	r2, r3, d8
 801cc6e:	4604      	mov	r4, r0
 801cc70:	460d      	mov	r5, r1
 801cc72:	4640      	mov	r0, r8
 801cc74:	4649      	mov	r1, r9
 801cc76:	f7e3 fccf 	bl	8000618 <__aeabi_dmul>
 801cc7a:	460b      	mov	r3, r1
 801cc7c:	4602      	mov	r2, r0
 801cc7e:	4629      	mov	r1, r5
 801cc80:	4620      	mov	r0, r4
 801cc82:	f7e3 fb11 	bl	80002a8 <__aeabi_dsub>
 801cc86:	4b29      	ldr	r3, [pc, #164]	; (801cd2c <__kernel_cos+0x17c>)
 801cc88:	429e      	cmp	r6, r3
 801cc8a:	4680      	mov	r8, r0
 801cc8c:	4689      	mov	r9, r1
 801cc8e:	dc11      	bgt.n	801ccb4 <__kernel_cos+0x104>
 801cc90:	4602      	mov	r2, r0
 801cc92:	460b      	mov	r3, r1
 801cc94:	4650      	mov	r0, sl
 801cc96:	4659      	mov	r1, fp
 801cc98:	f7e3 fb06 	bl	80002a8 <__aeabi_dsub>
 801cc9c:	460b      	mov	r3, r1
 801cc9e:	4924      	ldr	r1, [pc, #144]	; (801cd30 <__kernel_cos+0x180>)
 801cca0:	4602      	mov	r2, r0
 801cca2:	2000      	movs	r0, #0
 801cca4:	f7e3 fb00 	bl	80002a8 <__aeabi_dsub>
 801cca8:	ecbd 8b02 	vpop	{d8}
 801ccac:	ec41 0b10 	vmov	d0, r0, r1
 801ccb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccb4:	4b1f      	ldr	r3, [pc, #124]	; (801cd34 <__kernel_cos+0x184>)
 801ccb6:	491e      	ldr	r1, [pc, #120]	; (801cd30 <__kernel_cos+0x180>)
 801ccb8:	429e      	cmp	r6, r3
 801ccba:	bfcc      	ite	gt
 801ccbc:	4d1e      	ldrgt	r5, [pc, #120]	; (801cd38 <__kernel_cos+0x188>)
 801ccbe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801ccc2:	2400      	movs	r4, #0
 801ccc4:	4622      	mov	r2, r4
 801ccc6:	462b      	mov	r3, r5
 801ccc8:	2000      	movs	r0, #0
 801ccca:	f7e3 faed 	bl	80002a8 <__aeabi_dsub>
 801ccce:	4622      	mov	r2, r4
 801ccd0:	4606      	mov	r6, r0
 801ccd2:	460f      	mov	r7, r1
 801ccd4:	462b      	mov	r3, r5
 801ccd6:	4650      	mov	r0, sl
 801ccd8:	4659      	mov	r1, fp
 801ccda:	f7e3 fae5 	bl	80002a8 <__aeabi_dsub>
 801ccde:	4642      	mov	r2, r8
 801cce0:	464b      	mov	r3, r9
 801cce2:	f7e3 fae1 	bl	80002a8 <__aeabi_dsub>
 801cce6:	4602      	mov	r2, r0
 801cce8:	460b      	mov	r3, r1
 801ccea:	4630      	mov	r0, r6
 801ccec:	4639      	mov	r1, r7
 801ccee:	e7d9      	b.n	801cca4 <__kernel_cos+0xf4>
 801ccf0:	2000      	movs	r0, #0
 801ccf2:	490f      	ldr	r1, [pc, #60]	; (801cd30 <__kernel_cos+0x180>)
 801ccf4:	e7d8      	b.n	801cca8 <__kernel_cos+0xf8>
 801ccf6:	bf00      	nop
 801ccf8:	be8838d4 	.word	0xbe8838d4
 801ccfc:	bda8fae9 	.word	0xbda8fae9
 801cd00:	bdb4b1c4 	.word	0xbdb4b1c4
 801cd04:	3e21ee9e 	.word	0x3e21ee9e
 801cd08:	809c52ad 	.word	0x809c52ad
 801cd0c:	3e927e4f 	.word	0x3e927e4f
 801cd10:	19cb1590 	.word	0x19cb1590
 801cd14:	3efa01a0 	.word	0x3efa01a0
 801cd18:	16c15177 	.word	0x16c15177
 801cd1c:	3f56c16c 	.word	0x3f56c16c
 801cd20:	5555554c 	.word	0x5555554c
 801cd24:	3fa55555 	.word	0x3fa55555
 801cd28:	3fe00000 	.word	0x3fe00000
 801cd2c:	3fd33332 	.word	0x3fd33332
 801cd30:	3ff00000 	.word	0x3ff00000
 801cd34:	3fe90000 	.word	0x3fe90000
 801cd38:	3fd20000 	.word	0x3fd20000
 801cd3c:	00000000 	.word	0x00000000

0801cd40 <__kernel_rem_pio2>:
 801cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd44:	ed2d 8b02 	vpush	{d8}
 801cd48:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801cd4c:	1ed4      	subs	r4, r2, #3
 801cd4e:	9308      	str	r3, [sp, #32]
 801cd50:	9101      	str	r1, [sp, #4]
 801cd52:	4bc5      	ldr	r3, [pc, #788]	; (801d068 <__kernel_rem_pio2+0x328>)
 801cd54:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801cd56:	9009      	str	r0, [sp, #36]	; 0x24
 801cd58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cd5c:	9304      	str	r3, [sp, #16]
 801cd5e:	9b08      	ldr	r3, [sp, #32]
 801cd60:	3b01      	subs	r3, #1
 801cd62:	9307      	str	r3, [sp, #28]
 801cd64:	2318      	movs	r3, #24
 801cd66:	fb94 f4f3 	sdiv	r4, r4, r3
 801cd6a:	f06f 0317 	mvn.w	r3, #23
 801cd6e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801cd72:	fb04 3303 	mla	r3, r4, r3, r3
 801cd76:	eb03 0a02 	add.w	sl, r3, r2
 801cd7a:	9b04      	ldr	r3, [sp, #16]
 801cd7c:	9a07      	ldr	r2, [sp, #28]
 801cd7e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801d058 <__kernel_rem_pio2+0x318>
 801cd82:	eb03 0802 	add.w	r8, r3, r2
 801cd86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801cd88:	1aa7      	subs	r7, r4, r2
 801cd8a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801cd8e:	ae22      	add	r6, sp, #136	; 0x88
 801cd90:	2500      	movs	r5, #0
 801cd92:	4545      	cmp	r5, r8
 801cd94:	dd13      	ble.n	801cdbe <__kernel_rem_pio2+0x7e>
 801cd96:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801d058 <__kernel_rem_pio2+0x318>
 801cd9a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801cd9e:	2600      	movs	r6, #0
 801cda0:	9b04      	ldr	r3, [sp, #16]
 801cda2:	429e      	cmp	r6, r3
 801cda4:	dc32      	bgt.n	801ce0c <__kernel_rem_pio2+0xcc>
 801cda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cda8:	9302      	str	r3, [sp, #8]
 801cdaa:	9b08      	ldr	r3, [sp, #32]
 801cdac:	199d      	adds	r5, r3, r6
 801cdae:	ab22      	add	r3, sp, #136	; 0x88
 801cdb0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801cdb4:	9306      	str	r3, [sp, #24]
 801cdb6:	ec59 8b18 	vmov	r8, r9, d8
 801cdba:	2700      	movs	r7, #0
 801cdbc:	e01f      	b.n	801cdfe <__kernel_rem_pio2+0xbe>
 801cdbe:	42ef      	cmn	r7, r5
 801cdc0:	d407      	bmi.n	801cdd2 <__kernel_rem_pio2+0x92>
 801cdc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801cdc6:	f7e3 fbbd 	bl	8000544 <__aeabi_i2d>
 801cdca:	e8e6 0102 	strd	r0, r1, [r6], #8
 801cdce:	3501      	adds	r5, #1
 801cdd0:	e7df      	b.n	801cd92 <__kernel_rem_pio2+0x52>
 801cdd2:	ec51 0b18 	vmov	r0, r1, d8
 801cdd6:	e7f8      	b.n	801cdca <__kernel_rem_pio2+0x8a>
 801cdd8:	9906      	ldr	r1, [sp, #24]
 801cdda:	9d02      	ldr	r5, [sp, #8]
 801cddc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801cde0:	9106      	str	r1, [sp, #24]
 801cde2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801cde6:	9502      	str	r5, [sp, #8]
 801cde8:	f7e3 fc16 	bl	8000618 <__aeabi_dmul>
 801cdec:	4602      	mov	r2, r0
 801cdee:	460b      	mov	r3, r1
 801cdf0:	4640      	mov	r0, r8
 801cdf2:	4649      	mov	r1, r9
 801cdf4:	f7e3 fa5a 	bl	80002ac <__adddf3>
 801cdf8:	3701      	adds	r7, #1
 801cdfa:	4680      	mov	r8, r0
 801cdfc:	4689      	mov	r9, r1
 801cdfe:	9b07      	ldr	r3, [sp, #28]
 801ce00:	429f      	cmp	r7, r3
 801ce02:	dde9      	ble.n	801cdd8 <__kernel_rem_pio2+0x98>
 801ce04:	e8eb 8902 	strd	r8, r9, [fp], #8
 801ce08:	3601      	adds	r6, #1
 801ce0a:	e7c9      	b.n	801cda0 <__kernel_rem_pio2+0x60>
 801ce0c:	9b04      	ldr	r3, [sp, #16]
 801ce0e:	aa0e      	add	r2, sp, #56	; 0x38
 801ce10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ce14:	930c      	str	r3, [sp, #48]	; 0x30
 801ce16:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801ce18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ce1c:	9c04      	ldr	r4, [sp, #16]
 801ce1e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ce20:	ab9a      	add	r3, sp, #616	; 0x268
 801ce22:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801ce26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ce2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ce2e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801ce32:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801ce36:	ab9a      	add	r3, sp, #616	; 0x268
 801ce38:	445b      	add	r3, fp
 801ce3a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801ce3e:	2500      	movs	r5, #0
 801ce40:	1b63      	subs	r3, r4, r5
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	dc78      	bgt.n	801cf38 <__kernel_rem_pio2+0x1f8>
 801ce46:	4650      	mov	r0, sl
 801ce48:	ec49 8b10 	vmov	d0, r8, r9
 801ce4c:	f000 fe3c 	bl	801dac8 <scalbn>
 801ce50:	ec57 6b10 	vmov	r6, r7, d0
 801ce54:	2200      	movs	r2, #0
 801ce56:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801ce5a:	ee10 0a10 	vmov	r0, s0
 801ce5e:	4639      	mov	r1, r7
 801ce60:	f7e3 fbda 	bl	8000618 <__aeabi_dmul>
 801ce64:	ec41 0b10 	vmov	d0, r0, r1
 801ce68:	f000 fd1a 	bl	801d8a0 <floor>
 801ce6c:	2200      	movs	r2, #0
 801ce6e:	ec51 0b10 	vmov	r0, r1, d0
 801ce72:	4b7e      	ldr	r3, [pc, #504]	; (801d06c <__kernel_rem_pio2+0x32c>)
 801ce74:	f7e3 fbd0 	bl	8000618 <__aeabi_dmul>
 801ce78:	4602      	mov	r2, r0
 801ce7a:	460b      	mov	r3, r1
 801ce7c:	4630      	mov	r0, r6
 801ce7e:	4639      	mov	r1, r7
 801ce80:	f7e3 fa12 	bl	80002a8 <__aeabi_dsub>
 801ce84:	460f      	mov	r7, r1
 801ce86:	4606      	mov	r6, r0
 801ce88:	f7e3 fe76 	bl	8000b78 <__aeabi_d2iz>
 801ce8c:	9006      	str	r0, [sp, #24]
 801ce8e:	f7e3 fb59 	bl	8000544 <__aeabi_i2d>
 801ce92:	4602      	mov	r2, r0
 801ce94:	460b      	mov	r3, r1
 801ce96:	4630      	mov	r0, r6
 801ce98:	4639      	mov	r1, r7
 801ce9a:	f7e3 fa05 	bl	80002a8 <__aeabi_dsub>
 801ce9e:	f1ba 0f00 	cmp.w	sl, #0
 801cea2:	4606      	mov	r6, r0
 801cea4:	460f      	mov	r7, r1
 801cea6:	dd6c      	ble.n	801cf82 <__kernel_rem_pio2+0x242>
 801cea8:	1e62      	subs	r2, r4, #1
 801ceaa:	ab0e      	add	r3, sp, #56	; 0x38
 801ceac:	f1ca 0118 	rsb	r1, sl, #24
 801ceb0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ceb4:	9d06      	ldr	r5, [sp, #24]
 801ceb6:	fa40 f301 	asr.w	r3, r0, r1
 801ceba:	441d      	add	r5, r3
 801cebc:	408b      	lsls	r3, r1
 801cebe:	1ac0      	subs	r0, r0, r3
 801cec0:	ab0e      	add	r3, sp, #56	; 0x38
 801cec2:	9506      	str	r5, [sp, #24]
 801cec4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801cec8:	f1ca 0317 	rsb	r3, sl, #23
 801cecc:	fa40 f303 	asr.w	r3, r0, r3
 801ced0:	9302      	str	r3, [sp, #8]
 801ced2:	9b02      	ldr	r3, [sp, #8]
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	dd62      	ble.n	801cf9e <__kernel_rem_pio2+0x25e>
 801ced8:	9b06      	ldr	r3, [sp, #24]
 801ceda:	2200      	movs	r2, #0
 801cedc:	3301      	adds	r3, #1
 801cede:	9306      	str	r3, [sp, #24]
 801cee0:	4615      	mov	r5, r2
 801cee2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801cee6:	4294      	cmp	r4, r2
 801cee8:	f300 8095 	bgt.w	801d016 <__kernel_rem_pio2+0x2d6>
 801ceec:	f1ba 0f00 	cmp.w	sl, #0
 801cef0:	dd07      	ble.n	801cf02 <__kernel_rem_pio2+0x1c2>
 801cef2:	f1ba 0f01 	cmp.w	sl, #1
 801cef6:	f000 80a2 	beq.w	801d03e <__kernel_rem_pio2+0x2fe>
 801cefa:	f1ba 0f02 	cmp.w	sl, #2
 801cefe:	f000 80c1 	beq.w	801d084 <__kernel_rem_pio2+0x344>
 801cf02:	9b02      	ldr	r3, [sp, #8]
 801cf04:	2b02      	cmp	r3, #2
 801cf06:	d14a      	bne.n	801cf9e <__kernel_rem_pio2+0x25e>
 801cf08:	4632      	mov	r2, r6
 801cf0a:	463b      	mov	r3, r7
 801cf0c:	2000      	movs	r0, #0
 801cf0e:	4958      	ldr	r1, [pc, #352]	; (801d070 <__kernel_rem_pio2+0x330>)
 801cf10:	f7e3 f9ca 	bl	80002a8 <__aeabi_dsub>
 801cf14:	4606      	mov	r6, r0
 801cf16:	460f      	mov	r7, r1
 801cf18:	2d00      	cmp	r5, #0
 801cf1a:	d040      	beq.n	801cf9e <__kernel_rem_pio2+0x25e>
 801cf1c:	4650      	mov	r0, sl
 801cf1e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801d060 <__kernel_rem_pio2+0x320>
 801cf22:	f000 fdd1 	bl	801dac8 <scalbn>
 801cf26:	4630      	mov	r0, r6
 801cf28:	4639      	mov	r1, r7
 801cf2a:	ec53 2b10 	vmov	r2, r3, d0
 801cf2e:	f7e3 f9bb 	bl	80002a8 <__aeabi_dsub>
 801cf32:	4606      	mov	r6, r0
 801cf34:	460f      	mov	r7, r1
 801cf36:	e032      	b.n	801cf9e <__kernel_rem_pio2+0x25e>
 801cf38:	2200      	movs	r2, #0
 801cf3a:	4b4e      	ldr	r3, [pc, #312]	; (801d074 <__kernel_rem_pio2+0x334>)
 801cf3c:	4640      	mov	r0, r8
 801cf3e:	4649      	mov	r1, r9
 801cf40:	f7e3 fb6a 	bl	8000618 <__aeabi_dmul>
 801cf44:	f7e3 fe18 	bl	8000b78 <__aeabi_d2iz>
 801cf48:	f7e3 fafc 	bl	8000544 <__aeabi_i2d>
 801cf4c:	2200      	movs	r2, #0
 801cf4e:	4b4a      	ldr	r3, [pc, #296]	; (801d078 <__kernel_rem_pio2+0x338>)
 801cf50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cf54:	f7e3 fb60 	bl	8000618 <__aeabi_dmul>
 801cf58:	4602      	mov	r2, r0
 801cf5a:	460b      	mov	r3, r1
 801cf5c:	4640      	mov	r0, r8
 801cf5e:	4649      	mov	r1, r9
 801cf60:	f7e3 f9a2 	bl	80002a8 <__aeabi_dsub>
 801cf64:	f7e3 fe08 	bl	8000b78 <__aeabi_d2iz>
 801cf68:	ab0e      	add	r3, sp, #56	; 0x38
 801cf6a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801cf6e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801cf72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cf76:	f7e3 f999 	bl	80002ac <__adddf3>
 801cf7a:	3501      	adds	r5, #1
 801cf7c:	4680      	mov	r8, r0
 801cf7e:	4689      	mov	r9, r1
 801cf80:	e75e      	b.n	801ce40 <__kernel_rem_pio2+0x100>
 801cf82:	d105      	bne.n	801cf90 <__kernel_rem_pio2+0x250>
 801cf84:	1e63      	subs	r3, r4, #1
 801cf86:	aa0e      	add	r2, sp, #56	; 0x38
 801cf88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cf8c:	15c3      	asrs	r3, r0, #23
 801cf8e:	e79f      	b.n	801ced0 <__kernel_rem_pio2+0x190>
 801cf90:	2200      	movs	r2, #0
 801cf92:	4b3a      	ldr	r3, [pc, #232]	; (801d07c <__kernel_rem_pio2+0x33c>)
 801cf94:	f7e3 fdc6 	bl	8000b24 <__aeabi_dcmpge>
 801cf98:	2800      	cmp	r0, #0
 801cf9a:	d139      	bne.n	801d010 <__kernel_rem_pio2+0x2d0>
 801cf9c:	9002      	str	r0, [sp, #8]
 801cf9e:	2200      	movs	r2, #0
 801cfa0:	2300      	movs	r3, #0
 801cfa2:	4630      	mov	r0, r6
 801cfa4:	4639      	mov	r1, r7
 801cfa6:	f7e3 fd9f 	bl	8000ae8 <__aeabi_dcmpeq>
 801cfaa:	2800      	cmp	r0, #0
 801cfac:	f000 80c7 	beq.w	801d13e <__kernel_rem_pio2+0x3fe>
 801cfb0:	1e65      	subs	r5, r4, #1
 801cfb2:	462b      	mov	r3, r5
 801cfb4:	2200      	movs	r2, #0
 801cfb6:	9904      	ldr	r1, [sp, #16]
 801cfb8:	428b      	cmp	r3, r1
 801cfba:	da6a      	bge.n	801d092 <__kernel_rem_pio2+0x352>
 801cfbc:	2a00      	cmp	r2, #0
 801cfbe:	f000 8088 	beq.w	801d0d2 <__kernel_rem_pio2+0x392>
 801cfc2:	ab0e      	add	r3, sp, #56	; 0x38
 801cfc4:	f1aa 0a18 	sub.w	sl, sl, #24
 801cfc8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	f000 80b4 	beq.w	801d13a <__kernel_rem_pio2+0x3fa>
 801cfd2:	4650      	mov	r0, sl
 801cfd4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801d060 <__kernel_rem_pio2+0x320>
 801cfd8:	f000 fd76 	bl	801dac8 <scalbn>
 801cfdc:	00ec      	lsls	r4, r5, #3
 801cfde:	ab72      	add	r3, sp, #456	; 0x1c8
 801cfe0:	191e      	adds	r6, r3, r4
 801cfe2:	ec59 8b10 	vmov	r8, r9, d0
 801cfe6:	f106 0a08 	add.w	sl, r6, #8
 801cfea:	462f      	mov	r7, r5
 801cfec:	2f00      	cmp	r7, #0
 801cfee:	f280 80df 	bge.w	801d1b0 <__kernel_rem_pio2+0x470>
 801cff2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801d058 <__kernel_rem_pio2+0x318>
 801cff6:	f04f 0a00 	mov.w	sl, #0
 801cffa:	eba5 030a 	sub.w	r3, r5, sl
 801cffe:	2b00      	cmp	r3, #0
 801d000:	f2c0 810a 	blt.w	801d218 <__kernel_rem_pio2+0x4d8>
 801d004:	f8df b078 	ldr.w	fp, [pc, #120]	; 801d080 <__kernel_rem_pio2+0x340>
 801d008:	ec59 8b18 	vmov	r8, r9, d8
 801d00c:	2700      	movs	r7, #0
 801d00e:	e0f5      	b.n	801d1fc <__kernel_rem_pio2+0x4bc>
 801d010:	2302      	movs	r3, #2
 801d012:	9302      	str	r3, [sp, #8]
 801d014:	e760      	b.n	801ced8 <__kernel_rem_pio2+0x198>
 801d016:	ab0e      	add	r3, sp, #56	; 0x38
 801d018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d01c:	b94d      	cbnz	r5, 801d032 <__kernel_rem_pio2+0x2f2>
 801d01e:	b12b      	cbz	r3, 801d02c <__kernel_rem_pio2+0x2ec>
 801d020:	a80e      	add	r0, sp, #56	; 0x38
 801d022:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801d026:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801d02a:	2301      	movs	r3, #1
 801d02c:	3201      	adds	r2, #1
 801d02e:	461d      	mov	r5, r3
 801d030:	e759      	b.n	801cee6 <__kernel_rem_pio2+0x1a6>
 801d032:	a80e      	add	r0, sp, #56	; 0x38
 801d034:	1acb      	subs	r3, r1, r3
 801d036:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801d03a:	462b      	mov	r3, r5
 801d03c:	e7f6      	b.n	801d02c <__kernel_rem_pio2+0x2ec>
 801d03e:	1e62      	subs	r2, r4, #1
 801d040:	ab0e      	add	r3, sp, #56	; 0x38
 801d042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d046:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801d04a:	a90e      	add	r1, sp, #56	; 0x38
 801d04c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801d050:	e757      	b.n	801cf02 <__kernel_rem_pio2+0x1c2>
 801d052:	bf00      	nop
 801d054:	f3af 8000 	nop.w
	...
 801d064:	3ff00000 	.word	0x3ff00000
 801d068:	0801e908 	.word	0x0801e908
 801d06c:	40200000 	.word	0x40200000
 801d070:	3ff00000 	.word	0x3ff00000
 801d074:	3e700000 	.word	0x3e700000
 801d078:	41700000 	.word	0x41700000
 801d07c:	3fe00000 	.word	0x3fe00000
 801d080:	0801e8c8 	.word	0x0801e8c8
 801d084:	1e62      	subs	r2, r4, #1
 801d086:	ab0e      	add	r3, sp, #56	; 0x38
 801d088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d08c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801d090:	e7db      	b.n	801d04a <__kernel_rem_pio2+0x30a>
 801d092:	a90e      	add	r1, sp, #56	; 0x38
 801d094:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801d098:	3b01      	subs	r3, #1
 801d09a:	430a      	orrs	r2, r1
 801d09c:	e78b      	b.n	801cfb6 <__kernel_rem_pio2+0x276>
 801d09e:	3301      	adds	r3, #1
 801d0a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801d0a4:	2900      	cmp	r1, #0
 801d0a6:	d0fa      	beq.n	801d09e <__kernel_rem_pio2+0x35e>
 801d0a8:	9a08      	ldr	r2, [sp, #32]
 801d0aa:	4422      	add	r2, r4
 801d0ac:	00d2      	lsls	r2, r2, #3
 801d0ae:	a922      	add	r1, sp, #136	; 0x88
 801d0b0:	18e3      	adds	r3, r4, r3
 801d0b2:	9206      	str	r2, [sp, #24]
 801d0b4:	440a      	add	r2, r1
 801d0b6:	9302      	str	r3, [sp, #8]
 801d0b8:	f10b 0108 	add.w	r1, fp, #8
 801d0bc:	f102 0308 	add.w	r3, r2, #8
 801d0c0:	1c66      	adds	r6, r4, #1
 801d0c2:	910a      	str	r1, [sp, #40]	; 0x28
 801d0c4:	2500      	movs	r5, #0
 801d0c6:	930d      	str	r3, [sp, #52]	; 0x34
 801d0c8:	9b02      	ldr	r3, [sp, #8]
 801d0ca:	42b3      	cmp	r3, r6
 801d0cc:	da04      	bge.n	801d0d8 <__kernel_rem_pio2+0x398>
 801d0ce:	461c      	mov	r4, r3
 801d0d0:	e6a6      	b.n	801ce20 <__kernel_rem_pio2+0xe0>
 801d0d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d0d4:	2301      	movs	r3, #1
 801d0d6:	e7e3      	b.n	801d0a0 <__kernel_rem_pio2+0x360>
 801d0d8:	9b06      	ldr	r3, [sp, #24]
 801d0da:	18ef      	adds	r7, r5, r3
 801d0dc:	ab22      	add	r3, sp, #136	; 0x88
 801d0de:	441f      	add	r7, r3
 801d0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801d0e6:	f7e3 fa2d 	bl	8000544 <__aeabi_i2d>
 801d0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0ec:	461c      	mov	r4, r3
 801d0ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d0f0:	e9c7 0100 	strd	r0, r1, [r7]
 801d0f4:	eb03 0b05 	add.w	fp, r3, r5
 801d0f8:	2700      	movs	r7, #0
 801d0fa:	f04f 0800 	mov.w	r8, #0
 801d0fe:	f04f 0900 	mov.w	r9, #0
 801d102:	9b07      	ldr	r3, [sp, #28]
 801d104:	429f      	cmp	r7, r3
 801d106:	dd08      	ble.n	801d11a <__kernel_rem_pio2+0x3da>
 801d108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d10a:	aa72      	add	r2, sp, #456	; 0x1c8
 801d10c:	18eb      	adds	r3, r5, r3
 801d10e:	4413      	add	r3, r2
 801d110:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801d114:	3601      	adds	r6, #1
 801d116:	3508      	adds	r5, #8
 801d118:	e7d6      	b.n	801d0c8 <__kernel_rem_pio2+0x388>
 801d11a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801d11e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801d122:	f7e3 fa79 	bl	8000618 <__aeabi_dmul>
 801d126:	4602      	mov	r2, r0
 801d128:	460b      	mov	r3, r1
 801d12a:	4640      	mov	r0, r8
 801d12c:	4649      	mov	r1, r9
 801d12e:	f7e3 f8bd 	bl	80002ac <__adddf3>
 801d132:	3701      	adds	r7, #1
 801d134:	4680      	mov	r8, r0
 801d136:	4689      	mov	r9, r1
 801d138:	e7e3      	b.n	801d102 <__kernel_rem_pio2+0x3c2>
 801d13a:	3d01      	subs	r5, #1
 801d13c:	e741      	b.n	801cfc2 <__kernel_rem_pio2+0x282>
 801d13e:	f1ca 0000 	rsb	r0, sl, #0
 801d142:	ec47 6b10 	vmov	d0, r6, r7
 801d146:	f000 fcbf 	bl	801dac8 <scalbn>
 801d14a:	ec57 6b10 	vmov	r6, r7, d0
 801d14e:	2200      	movs	r2, #0
 801d150:	4b99      	ldr	r3, [pc, #612]	; (801d3b8 <__kernel_rem_pio2+0x678>)
 801d152:	ee10 0a10 	vmov	r0, s0
 801d156:	4639      	mov	r1, r7
 801d158:	f7e3 fce4 	bl	8000b24 <__aeabi_dcmpge>
 801d15c:	b1f8      	cbz	r0, 801d19e <__kernel_rem_pio2+0x45e>
 801d15e:	2200      	movs	r2, #0
 801d160:	4b96      	ldr	r3, [pc, #600]	; (801d3bc <__kernel_rem_pio2+0x67c>)
 801d162:	4630      	mov	r0, r6
 801d164:	4639      	mov	r1, r7
 801d166:	f7e3 fa57 	bl	8000618 <__aeabi_dmul>
 801d16a:	f7e3 fd05 	bl	8000b78 <__aeabi_d2iz>
 801d16e:	4680      	mov	r8, r0
 801d170:	f7e3 f9e8 	bl	8000544 <__aeabi_i2d>
 801d174:	2200      	movs	r2, #0
 801d176:	4b90      	ldr	r3, [pc, #576]	; (801d3b8 <__kernel_rem_pio2+0x678>)
 801d178:	f7e3 fa4e 	bl	8000618 <__aeabi_dmul>
 801d17c:	460b      	mov	r3, r1
 801d17e:	4602      	mov	r2, r0
 801d180:	4639      	mov	r1, r7
 801d182:	4630      	mov	r0, r6
 801d184:	f7e3 f890 	bl	80002a8 <__aeabi_dsub>
 801d188:	f7e3 fcf6 	bl	8000b78 <__aeabi_d2iz>
 801d18c:	1c65      	adds	r5, r4, #1
 801d18e:	ab0e      	add	r3, sp, #56	; 0x38
 801d190:	f10a 0a18 	add.w	sl, sl, #24
 801d194:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801d198:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801d19c:	e719      	b.n	801cfd2 <__kernel_rem_pio2+0x292>
 801d19e:	4630      	mov	r0, r6
 801d1a0:	4639      	mov	r1, r7
 801d1a2:	f7e3 fce9 	bl	8000b78 <__aeabi_d2iz>
 801d1a6:	ab0e      	add	r3, sp, #56	; 0x38
 801d1a8:	4625      	mov	r5, r4
 801d1aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801d1ae:	e710      	b.n	801cfd2 <__kernel_rem_pio2+0x292>
 801d1b0:	ab0e      	add	r3, sp, #56	; 0x38
 801d1b2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801d1b6:	f7e3 f9c5 	bl	8000544 <__aeabi_i2d>
 801d1ba:	4642      	mov	r2, r8
 801d1bc:	464b      	mov	r3, r9
 801d1be:	f7e3 fa2b 	bl	8000618 <__aeabi_dmul>
 801d1c2:	2200      	movs	r2, #0
 801d1c4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801d1c8:	4b7c      	ldr	r3, [pc, #496]	; (801d3bc <__kernel_rem_pio2+0x67c>)
 801d1ca:	4640      	mov	r0, r8
 801d1cc:	4649      	mov	r1, r9
 801d1ce:	f7e3 fa23 	bl	8000618 <__aeabi_dmul>
 801d1d2:	3f01      	subs	r7, #1
 801d1d4:	4680      	mov	r8, r0
 801d1d6:	4689      	mov	r9, r1
 801d1d8:	e708      	b.n	801cfec <__kernel_rem_pio2+0x2ac>
 801d1da:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801d1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1e2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801d1e6:	f7e3 fa17 	bl	8000618 <__aeabi_dmul>
 801d1ea:	4602      	mov	r2, r0
 801d1ec:	460b      	mov	r3, r1
 801d1ee:	4640      	mov	r0, r8
 801d1f0:	4649      	mov	r1, r9
 801d1f2:	f7e3 f85b 	bl	80002ac <__adddf3>
 801d1f6:	3701      	adds	r7, #1
 801d1f8:	4680      	mov	r8, r0
 801d1fa:	4689      	mov	r9, r1
 801d1fc:	9b04      	ldr	r3, [sp, #16]
 801d1fe:	429f      	cmp	r7, r3
 801d200:	dc01      	bgt.n	801d206 <__kernel_rem_pio2+0x4c6>
 801d202:	45ba      	cmp	sl, r7
 801d204:	dae9      	bge.n	801d1da <__kernel_rem_pio2+0x49a>
 801d206:	ab4a      	add	r3, sp, #296	; 0x128
 801d208:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d20c:	e9c3 8900 	strd	r8, r9, [r3]
 801d210:	f10a 0a01 	add.w	sl, sl, #1
 801d214:	3e08      	subs	r6, #8
 801d216:	e6f0      	b.n	801cffa <__kernel_rem_pio2+0x2ba>
 801d218:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801d21a:	2b03      	cmp	r3, #3
 801d21c:	d85b      	bhi.n	801d2d6 <__kernel_rem_pio2+0x596>
 801d21e:	e8df f003 	tbb	[pc, r3]
 801d222:	264a      	.short	0x264a
 801d224:	0226      	.short	0x0226
 801d226:	ab9a      	add	r3, sp, #616	; 0x268
 801d228:	441c      	add	r4, r3
 801d22a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801d22e:	46a2      	mov	sl, r4
 801d230:	46ab      	mov	fp, r5
 801d232:	f1bb 0f00 	cmp.w	fp, #0
 801d236:	dc6c      	bgt.n	801d312 <__kernel_rem_pio2+0x5d2>
 801d238:	46a2      	mov	sl, r4
 801d23a:	46ab      	mov	fp, r5
 801d23c:	f1bb 0f01 	cmp.w	fp, #1
 801d240:	f300 8086 	bgt.w	801d350 <__kernel_rem_pio2+0x610>
 801d244:	2000      	movs	r0, #0
 801d246:	2100      	movs	r1, #0
 801d248:	2d01      	cmp	r5, #1
 801d24a:	f300 80a0 	bgt.w	801d38e <__kernel_rem_pio2+0x64e>
 801d24e:	9b02      	ldr	r3, [sp, #8]
 801d250:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801d254:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801d258:	2b00      	cmp	r3, #0
 801d25a:	f040 809e 	bne.w	801d39a <__kernel_rem_pio2+0x65a>
 801d25e:	9b01      	ldr	r3, [sp, #4]
 801d260:	e9c3 7800 	strd	r7, r8, [r3]
 801d264:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801d268:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801d26c:	e033      	b.n	801d2d6 <__kernel_rem_pio2+0x596>
 801d26e:	3408      	adds	r4, #8
 801d270:	ab4a      	add	r3, sp, #296	; 0x128
 801d272:	441c      	add	r4, r3
 801d274:	462e      	mov	r6, r5
 801d276:	2000      	movs	r0, #0
 801d278:	2100      	movs	r1, #0
 801d27a:	2e00      	cmp	r6, #0
 801d27c:	da3a      	bge.n	801d2f4 <__kernel_rem_pio2+0x5b4>
 801d27e:	9b02      	ldr	r3, [sp, #8]
 801d280:	2b00      	cmp	r3, #0
 801d282:	d03d      	beq.n	801d300 <__kernel_rem_pio2+0x5c0>
 801d284:	4602      	mov	r2, r0
 801d286:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d28a:	9c01      	ldr	r4, [sp, #4]
 801d28c:	e9c4 2300 	strd	r2, r3, [r4]
 801d290:	4602      	mov	r2, r0
 801d292:	460b      	mov	r3, r1
 801d294:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801d298:	f7e3 f806 	bl	80002a8 <__aeabi_dsub>
 801d29c:	ae4c      	add	r6, sp, #304	; 0x130
 801d29e:	2401      	movs	r4, #1
 801d2a0:	42a5      	cmp	r5, r4
 801d2a2:	da30      	bge.n	801d306 <__kernel_rem_pio2+0x5c6>
 801d2a4:	9b02      	ldr	r3, [sp, #8]
 801d2a6:	b113      	cbz	r3, 801d2ae <__kernel_rem_pio2+0x56e>
 801d2a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d2ac:	4619      	mov	r1, r3
 801d2ae:	9b01      	ldr	r3, [sp, #4]
 801d2b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801d2b4:	e00f      	b.n	801d2d6 <__kernel_rem_pio2+0x596>
 801d2b6:	ab9a      	add	r3, sp, #616	; 0x268
 801d2b8:	441c      	add	r4, r3
 801d2ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801d2be:	2000      	movs	r0, #0
 801d2c0:	2100      	movs	r1, #0
 801d2c2:	2d00      	cmp	r5, #0
 801d2c4:	da10      	bge.n	801d2e8 <__kernel_rem_pio2+0x5a8>
 801d2c6:	9b02      	ldr	r3, [sp, #8]
 801d2c8:	b113      	cbz	r3, 801d2d0 <__kernel_rem_pio2+0x590>
 801d2ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d2ce:	4619      	mov	r1, r3
 801d2d0:	9b01      	ldr	r3, [sp, #4]
 801d2d2:	e9c3 0100 	strd	r0, r1, [r3]
 801d2d6:	9b06      	ldr	r3, [sp, #24]
 801d2d8:	f003 0007 	and.w	r0, r3, #7
 801d2dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801d2e0:	ecbd 8b02 	vpop	{d8}
 801d2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d2ec:	f7e2 ffde 	bl	80002ac <__adddf3>
 801d2f0:	3d01      	subs	r5, #1
 801d2f2:	e7e6      	b.n	801d2c2 <__kernel_rem_pio2+0x582>
 801d2f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d2f8:	f7e2 ffd8 	bl	80002ac <__adddf3>
 801d2fc:	3e01      	subs	r6, #1
 801d2fe:	e7bc      	b.n	801d27a <__kernel_rem_pio2+0x53a>
 801d300:	4602      	mov	r2, r0
 801d302:	460b      	mov	r3, r1
 801d304:	e7c1      	b.n	801d28a <__kernel_rem_pio2+0x54a>
 801d306:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801d30a:	f7e2 ffcf 	bl	80002ac <__adddf3>
 801d30e:	3401      	adds	r4, #1
 801d310:	e7c6      	b.n	801d2a0 <__kernel_rem_pio2+0x560>
 801d312:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801d316:	ed3a 7b02 	vldmdb	sl!, {d7}
 801d31a:	4640      	mov	r0, r8
 801d31c:	ec53 2b17 	vmov	r2, r3, d7
 801d320:	4649      	mov	r1, r9
 801d322:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d326:	f7e2 ffc1 	bl	80002ac <__adddf3>
 801d32a:	4602      	mov	r2, r0
 801d32c:	460b      	mov	r3, r1
 801d32e:	4606      	mov	r6, r0
 801d330:	460f      	mov	r7, r1
 801d332:	4640      	mov	r0, r8
 801d334:	4649      	mov	r1, r9
 801d336:	f7e2 ffb7 	bl	80002a8 <__aeabi_dsub>
 801d33a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d33e:	f7e2 ffb5 	bl	80002ac <__adddf3>
 801d342:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d346:	e9ca 0100 	strd	r0, r1, [sl]
 801d34a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801d34e:	e770      	b.n	801d232 <__kernel_rem_pio2+0x4f2>
 801d350:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801d354:	ed3a 7b02 	vldmdb	sl!, {d7}
 801d358:	4630      	mov	r0, r6
 801d35a:	ec53 2b17 	vmov	r2, r3, d7
 801d35e:	4639      	mov	r1, r7
 801d360:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d364:	f7e2 ffa2 	bl	80002ac <__adddf3>
 801d368:	4602      	mov	r2, r0
 801d36a:	460b      	mov	r3, r1
 801d36c:	4680      	mov	r8, r0
 801d36e:	4689      	mov	r9, r1
 801d370:	4630      	mov	r0, r6
 801d372:	4639      	mov	r1, r7
 801d374:	f7e2 ff98 	bl	80002a8 <__aeabi_dsub>
 801d378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d37c:	f7e2 ff96 	bl	80002ac <__adddf3>
 801d380:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d384:	e9ca 0100 	strd	r0, r1, [sl]
 801d388:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801d38c:	e756      	b.n	801d23c <__kernel_rem_pio2+0x4fc>
 801d38e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d392:	f7e2 ff8b 	bl	80002ac <__adddf3>
 801d396:	3d01      	subs	r5, #1
 801d398:	e756      	b.n	801d248 <__kernel_rem_pio2+0x508>
 801d39a:	9b01      	ldr	r3, [sp, #4]
 801d39c:	9a01      	ldr	r2, [sp, #4]
 801d39e:	601f      	str	r7, [r3, #0]
 801d3a0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801d3a4:	605c      	str	r4, [r3, #4]
 801d3a6:	609d      	str	r5, [r3, #8]
 801d3a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801d3ac:	60d3      	str	r3, [r2, #12]
 801d3ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d3b2:	6110      	str	r0, [r2, #16]
 801d3b4:	6153      	str	r3, [r2, #20]
 801d3b6:	e78e      	b.n	801d2d6 <__kernel_rem_pio2+0x596>
 801d3b8:	41700000 	.word	0x41700000
 801d3bc:	3e700000 	.word	0x3e700000

0801d3c0 <__kernel_sin>:
 801d3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3c4:	ec55 4b10 	vmov	r4, r5, d0
 801d3c8:	b085      	sub	sp, #20
 801d3ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d3ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801d3d2:	ed8d 1b00 	vstr	d1, [sp]
 801d3d6:	9002      	str	r0, [sp, #8]
 801d3d8:	da06      	bge.n	801d3e8 <__kernel_sin+0x28>
 801d3da:	ee10 0a10 	vmov	r0, s0
 801d3de:	4629      	mov	r1, r5
 801d3e0:	f7e3 fbca 	bl	8000b78 <__aeabi_d2iz>
 801d3e4:	2800      	cmp	r0, #0
 801d3e6:	d051      	beq.n	801d48c <__kernel_sin+0xcc>
 801d3e8:	4622      	mov	r2, r4
 801d3ea:	462b      	mov	r3, r5
 801d3ec:	4620      	mov	r0, r4
 801d3ee:	4629      	mov	r1, r5
 801d3f0:	f7e3 f912 	bl	8000618 <__aeabi_dmul>
 801d3f4:	4682      	mov	sl, r0
 801d3f6:	468b      	mov	fp, r1
 801d3f8:	4602      	mov	r2, r0
 801d3fa:	460b      	mov	r3, r1
 801d3fc:	4620      	mov	r0, r4
 801d3fe:	4629      	mov	r1, r5
 801d400:	f7e3 f90a 	bl	8000618 <__aeabi_dmul>
 801d404:	a341      	add	r3, pc, #260	; (adr r3, 801d50c <__kernel_sin+0x14c>)
 801d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d40a:	4680      	mov	r8, r0
 801d40c:	4689      	mov	r9, r1
 801d40e:	4650      	mov	r0, sl
 801d410:	4659      	mov	r1, fp
 801d412:	f7e3 f901 	bl	8000618 <__aeabi_dmul>
 801d416:	a33f      	add	r3, pc, #252	; (adr r3, 801d514 <__kernel_sin+0x154>)
 801d418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d41c:	f7e2 ff44 	bl	80002a8 <__aeabi_dsub>
 801d420:	4652      	mov	r2, sl
 801d422:	465b      	mov	r3, fp
 801d424:	f7e3 f8f8 	bl	8000618 <__aeabi_dmul>
 801d428:	a33c      	add	r3, pc, #240	; (adr r3, 801d51c <__kernel_sin+0x15c>)
 801d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d42e:	f7e2 ff3d 	bl	80002ac <__adddf3>
 801d432:	4652      	mov	r2, sl
 801d434:	465b      	mov	r3, fp
 801d436:	f7e3 f8ef 	bl	8000618 <__aeabi_dmul>
 801d43a:	a33a      	add	r3, pc, #232	; (adr r3, 801d524 <__kernel_sin+0x164>)
 801d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d440:	f7e2 ff32 	bl	80002a8 <__aeabi_dsub>
 801d444:	4652      	mov	r2, sl
 801d446:	465b      	mov	r3, fp
 801d448:	f7e3 f8e6 	bl	8000618 <__aeabi_dmul>
 801d44c:	a337      	add	r3, pc, #220	; (adr r3, 801d52c <__kernel_sin+0x16c>)
 801d44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d452:	f7e2 ff2b 	bl	80002ac <__adddf3>
 801d456:	9b02      	ldr	r3, [sp, #8]
 801d458:	4606      	mov	r6, r0
 801d45a:	460f      	mov	r7, r1
 801d45c:	b9db      	cbnz	r3, 801d496 <__kernel_sin+0xd6>
 801d45e:	4602      	mov	r2, r0
 801d460:	460b      	mov	r3, r1
 801d462:	4650      	mov	r0, sl
 801d464:	4659      	mov	r1, fp
 801d466:	f7e3 f8d7 	bl	8000618 <__aeabi_dmul>
 801d46a:	a325      	add	r3, pc, #148	; (adr r3, 801d500 <__kernel_sin+0x140>)
 801d46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d470:	f7e2 ff1a 	bl	80002a8 <__aeabi_dsub>
 801d474:	4642      	mov	r2, r8
 801d476:	464b      	mov	r3, r9
 801d478:	f7e3 f8ce 	bl	8000618 <__aeabi_dmul>
 801d47c:	4602      	mov	r2, r0
 801d47e:	460b      	mov	r3, r1
 801d480:	4620      	mov	r0, r4
 801d482:	4629      	mov	r1, r5
 801d484:	f7e2 ff12 	bl	80002ac <__adddf3>
 801d488:	4604      	mov	r4, r0
 801d48a:	460d      	mov	r5, r1
 801d48c:	ec45 4b10 	vmov	d0, r4, r5
 801d490:	b005      	add	sp, #20
 801d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d496:	2200      	movs	r2, #0
 801d498:	4b1b      	ldr	r3, [pc, #108]	; (801d508 <__kernel_sin+0x148>)
 801d49a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d49e:	f7e3 f8bb 	bl	8000618 <__aeabi_dmul>
 801d4a2:	4632      	mov	r2, r6
 801d4a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d4a8:	463b      	mov	r3, r7
 801d4aa:	4640      	mov	r0, r8
 801d4ac:	4649      	mov	r1, r9
 801d4ae:	f7e3 f8b3 	bl	8000618 <__aeabi_dmul>
 801d4b2:	4602      	mov	r2, r0
 801d4b4:	460b      	mov	r3, r1
 801d4b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d4ba:	f7e2 fef5 	bl	80002a8 <__aeabi_dsub>
 801d4be:	4652      	mov	r2, sl
 801d4c0:	465b      	mov	r3, fp
 801d4c2:	f7e3 f8a9 	bl	8000618 <__aeabi_dmul>
 801d4c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d4ca:	f7e2 feed 	bl	80002a8 <__aeabi_dsub>
 801d4ce:	a30c      	add	r3, pc, #48	; (adr r3, 801d500 <__kernel_sin+0x140>)
 801d4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4d4:	4606      	mov	r6, r0
 801d4d6:	460f      	mov	r7, r1
 801d4d8:	4640      	mov	r0, r8
 801d4da:	4649      	mov	r1, r9
 801d4dc:	f7e3 f89c 	bl	8000618 <__aeabi_dmul>
 801d4e0:	4602      	mov	r2, r0
 801d4e2:	460b      	mov	r3, r1
 801d4e4:	4630      	mov	r0, r6
 801d4e6:	4639      	mov	r1, r7
 801d4e8:	f7e2 fee0 	bl	80002ac <__adddf3>
 801d4ec:	4602      	mov	r2, r0
 801d4ee:	460b      	mov	r3, r1
 801d4f0:	4620      	mov	r0, r4
 801d4f2:	4629      	mov	r1, r5
 801d4f4:	f7e2 fed8 	bl	80002a8 <__aeabi_dsub>
 801d4f8:	e7c6      	b.n	801d488 <__kernel_sin+0xc8>
 801d4fa:	bf00      	nop
 801d4fc:	f3af 8000 	nop.w
 801d500:	55555549 	.word	0x55555549
 801d504:	3fc55555 	.word	0x3fc55555
 801d508:	3fe00000 	.word	0x3fe00000
 801d50c:	5acfd57c 	.word	0x5acfd57c
 801d510:	3de5d93a 	.word	0x3de5d93a
 801d514:	8a2b9ceb 	.word	0x8a2b9ceb
 801d518:	3e5ae5e6 	.word	0x3e5ae5e6
 801d51c:	57b1fe7d 	.word	0x57b1fe7d
 801d520:	3ec71de3 	.word	0x3ec71de3
 801d524:	19c161d5 	.word	0x19c161d5
 801d528:	3f2a01a0 	.word	0x3f2a01a0
 801d52c:	1110f8a6 	.word	0x1110f8a6
 801d530:	3f811111 	.word	0x3f811111
 801d534:	00000000 	.word	0x00000000

0801d538 <atan>:
 801d538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d53c:	ec55 4b10 	vmov	r4, r5, d0
 801d540:	4bc3      	ldr	r3, [pc, #780]	; (801d850 <atan+0x318>)
 801d542:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d546:	429e      	cmp	r6, r3
 801d548:	46ab      	mov	fp, r5
 801d54a:	dd18      	ble.n	801d57e <atan+0x46>
 801d54c:	4bc1      	ldr	r3, [pc, #772]	; (801d854 <atan+0x31c>)
 801d54e:	429e      	cmp	r6, r3
 801d550:	dc01      	bgt.n	801d556 <atan+0x1e>
 801d552:	d109      	bne.n	801d568 <atan+0x30>
 801d554:	b144      	cbz	r4, 801d568 <atan+0x30>
 801d556:	4622      	mov	r2, r4
 801d558:	462b      	mov	r3, r5
 801d55a:	4620      	mov	r0, r4
 801d55c:	4629      	mov	r1, r5
 801d55e:	f7e2 fea5 	bl	80002ac <__adddf3>
 801d562:	4604      	mov	r4, r0
 801d564:	460d      	mov	r5, r1
 801d566:	e006      	b.n	801d576 <atan+0x3e>
 801d568:	f1bb 0f00 	cmp.w	fp, #0
 801d56c:	f340 8131 	ble.w	801d7d2 <atan+0x29a>
 801d570:	a59b      	add	r5, pc, #620	; (adr r5, 801d7e0 <atan+0x2a8>)
 801d572:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d576:	ec45 4b10 	vmov	d0, r4, r5
 801d57a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d57e:	4bb6      	ldr	r3, [pc, #728]	; (801d858 <atan+0x320>)
 801d580:	429e      	cmp	r6, r3
 801d582:	dc14      	bgt.n	801d5ae <atan+0x76>
 801d584:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801d588:	429e      	cmp	r6, r3
 801d58a:	dc0d      	bgt.n	801d5a8 <atan+0x70>
 801d58c:	a396      	add	r3, pc, #600	; (adr r3, 801d7e8 <atan+0x2b0>)
 801d58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d592:	ee10 0a10 	vmov	r0, s0
 801d596:	4629      	mov	r1, r5
 801d598:	f7e2 fe88 	bl	80002ac <__adddf3>
 801d59c:	2200      	movs	r2, #0
 801d59e:	4baf      	ldr	r3, [pc, #700]	; (801d85c <atan+0x324>)
 801d5a0:	f7e3 faca 	bl	8000b38 <__aeabi_dcmpgt>
 801d5a4:	2800      	cmp	r0, #0
 801d5a6:	d1e6      	bne.n	801d576 <atan+0x3e>
 801d5a8:	f04f 3aff 	mov.w	sl, #4294967295
 801d5ac:	e02b      	b.n	801d606 <atan+0xce>
 801d5ae:	f000 f963 	bl	801d878 <fabs>
 801d5b2:	4bab      	ldr	r3, [pc, #684]	; (801d860 <atan+0x328>)
 801d5b4:	429e      	cmp	r6, r3
 801d5b6:	ec55 4b10 	vmov	r4, r5, d0
 801d5ba:	f300 80bf 	bgt.w	801d73c <atan+0x204>
 801d5be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801d5c2:	429e      	cmp	r6, r3
 801d5c4:	f300 80a0 	bgt.w	801d708 <atan+0x1d0>
 801d5c8:	ee10 2a10 	vmov	r2, s0
 801d5cc:	ee10 0a10 	vmov	r0, s0
 801d5d0:	462b      	mov	r3, r5
 801d5d2:	4629      	mov	r1, r5
 801d5d4:	f7e2 fe6a 	bl	80002ac <__adddf3>
 801d5d8:	2200      	movs	r2, #0
 801d5da:	4ba0      	ldr	r3, [pc, #640]	; (801d85c <atan+0x324>)
 801d5dc:	f7e2 fe64 	bl	80002a8 <__aeabi_dsub>
 801d5e0:	2200      	movs	r2, #0
 801d5e2:	4606      	mov	r6, r0
 801d5e4:	460f      	mov	r7, r1
 801d5e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d5ea:	4620      	mov	r0, r4
 801d5ec:	4629      	mov	r1, r5
 801d5ee:	f7e2 fe5d 	bl	80002ac <__adddf3>
 801d5f2:	4602      	mov	r2, r0
 801d5f4:	460b      	mov	r3, r1
 801d5f6:	4630      	mov	r0, r6
 801d5f8:	4639      	mov	r1, r7
 801d5fa:	f7e3 f937 	bl	800086c <__aeabi_ddiv>
 801d5fe:	f04f 0a00 	mov.w	sl, #0
 801d602:	4604      	mov	r4, r0
 801d604:	460d      	mov	r5, r1
 801d606:	4622      	mov	r2, r4
 801d608:	462b      	mov	r3, r5
 801d60a:	4620      	mov	r0, r4
 801d60c:	4629      	mov	r1, r5
 801d60e:	f7e3 f803 	bl	8000618 <__aeabi_dmul>
 801d612:	4602      	mov	r2, r0
 801d614:	460b      	mov	r3, r1
 801d616:	4680      	mov	r8, r0
 801d618:	4689      	mov	r9, r1
 801d61a:	f7e2 fffd 	bl	8000618 <__aeabi_dmul>
 801d61e:	a374      	add	r3, pc, #464	; (adr r3, 801d7f0 <atan+0x2b8>)
 801d620:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d624:	4606      	mov	r6, r0
 801d626:	460f      	mov	r7, r1
 801d628:	f7e2 fff6 	bl	8000618 <__aeabi_dmul>
 801d62c:	a372      	add	r3, pc, #456	; (adr r3, 801d7f8 <atan+0x2c0>)
 801d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d632:	f7e2 fe3b 	bl	80002ac <__adddf3>
 801d636:	4632      	mov	r2, r6
 801d638:	463b      	mov	r3, r7
 801d63a:	f7e2 ffed 	bl	8000618 <__aeabi_dmul>
 801d63e:	a370      	add	r3, pc, #448	; (adr r3, 801d800 <atan+0x2c8>)
 801d640:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d644:	f7e2 fe32 	bl	80002ac <__adddf3>
 801d648:	4632      	mov	r2, r6
 801d64a:	463b      	mov	r3, r7
 801d64c:	f7e2 ffe4 	bl	8000618 <__aeabi_dmul>
 801d650:	a36d      	add	r3, pc, #436	; (adr r3, 801d808 <atan+0x2d0>)
 801d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d656:	f7e2 fe29 	bl	80002ac <__adddf3>
 801d65a:	4632      	mov	r2, r6
 801d65c:	463b      	mov	r3, r7
 801d65e:	f7e2 ffdb 	bl	8000618 <__aeabi_dmul>
 801d662:	a36b      	add	r3, pc, #428	; (adr r3, 801d810 <atan+0x2d8>)
 801d664:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d668:	f7e2 fe20 	bl	80002ac <__adddf3>
 801d66c:	4632      	mov	r2, r6
 801d66e:	463b      	mov	r3, r7
 801d670:	f7e2 ffd2 	bl	8000618 <__aeabi_dmul>
 801d674:	a368      	add	r3, pc, #416	; (adr r3, 801d818 <atan+0x2e0>)
 801d676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d67a:	f7e2 fe17 	bl	80002ac <__adddf3>
 801d67e:	4642      	mov	r2, r8
 801d680:	464b      	mov	r3, r9
 801d682:	f7e2 ffc9 	bl	8000618 <__aeabi_dmul>
 801d686:	a366      	add	r3, pc, #408	; (adr r3, 801d820 <atan+0x2e8>)
 801d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d68c:	4680      	mov	r8, r0
 801d68e:	4689      	mov	r9, r1
 801d690:	4630      	mov	r0, r6
 801d692:	4639      	mov	r1, r7
 801d694:	f7e2 ffc0 	bl	8000618 <__aeabi_dmul>
 801d698:	a363      	add	r3, pc, #396	; (adr r3, 801d828 <atan+0x2f0>)
 801d69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d69e:	f7e2 fe03 	bl	80002a8 <__aeabi_dsub>
 801d6a2:	4632      	mov	r2, r6
 801d6a4:	463b      	mov	r3, r7
 801d6a6:	f7e2 ffb7 	bl	8000618 <__aeabi_dmul>
 801d6aa:	a361      	add	r3, pc, #388	; (adr r3, 801d830 <atan+0x2f8>)
 801d6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6b0:	f7e2 fdfa 	bl	80002a8 <__aeabi_dsub>
 801d6b4:	4632      	mov	r2, r6
 801d6b6:	463b      	mov	r3, r7
 801d6b8:	f7e2 ffae 	bl	8000618 <__aeabi_dmul>
 801d6bc:	a35e      	add	r3, pc, #376	; (adr r3, 801d838 <atan+0x300>)
 801d6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6c2:	f7e2 fdf1 	bl	80002a8 <__aeabi_dsub>
 801d6c6:	4632      	mov	r2, r6
 801d6c8:	463b      	mov	r3, r7
 801d6ca:	f7e2 ffa5 	bl	8000618 <__aeabi_dmul>
 801d6ce:	a35c      	add	r3, pc, #368	; (adr r3, 801d840 <atan+0x308>)
 801d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6d4:	f7e2 fde8 	bl	80002a8 <__aeabi_dsub>
 801d6d8:	4632      	mov	r2, r6
 801d6da:	463b      	mov	r3, r7
 801d6dc:	f7e2 ff9c 	bl	8000618 <__aeabi_dmul>
 801d6e0:	4602      	mov	r2, r0
 801d6e2:	460b      	mov	r3, r1
 801d6e4:	4640      	mov	r0, r8
 801d6e6:	4649      	mov	r1, r9
 801d6e8:	f7e2 fde0 	bl	80002ac <__adddf3>
 801d6ec:	4622      	mov	r2, r4
 801d6ee:	462b      	mov	r3, r5
 801d6f0:	f7e2 ff92 	bl	8000618 <__aeabi_dmul>
 801d6f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 801d6f8:	4602      	mov	r2, r0
 801d6fa:	460b      	mov	r3, r1
 801d6fc:	d14b      	bne.n	801d796 <atan+0x25e>
 801d6fe:	4620      	mov	r0, r4
 801d700:	4629      	mov	r1, r5
 801d702:	f7e2 fdd1 	bl	80002a8 <__aeabi_dsub>
 801d706:	e72c      	b.n	801d562 <atan+0x2a>
 801d708:	ee10 0a10 	vmov	r0, s0
 801d70c:	2200      	movs	r2, #0
 801d70e:	4b53      	ldr	r3, [pc, #332]	; (801d85c <atan+0x324>)
 801d710:	4629      	mov	r1, r5
 801d712:	f7e2 fdc9 	bl	80002a8 <__aeabi_dsub>
 801d716:	2200      	movs	r2, #0
 801d718:	4606      	mov	r6, r0
 801d71a:	460f      	mov	r7, r1
 801d71c:	4b4f      	ldr	r3, [pc, #316]	; (801d85c <atan+0x324>)
 801d71e:	4620      	mov	r0, r4
 801d720:	4629      	mov	r1, r5
 801d722:	f7e2 fdc3 	bl	80002ac <__adddf3>
 801d726:	4602      	mov	r2, r0
 801d728:	460b      	mov	r3, r1
 801d72a:	4630      	mov	r0, r6
 801d72c:	4639      	mov	r1, r7
 801d72e:	f7e3 f89d 	bl	800086c <__aeabi_ddiv>
 801d732:	f04f 0a01 	mov.w	sl, #1
 801d736:	4604      	mov	r4, r0
 801d738:	460d      	mov	r5, r1
 801d73a:	e764      	b.n	801d606 <atan+0xce>
 801d73c:	4b49      	ldr	r3, [pc, #292]	; (801d864 <atan+0x32c>)
 801d73e:	429e      	cmp	r6, r3
 801d740:	dc1d      	bgt.n	801d77e <atan+0x246>
 801d742:	ee10 0a10 	vmov	r0, s0
 801d746:	2200      	movs	r2, #0
 801d748:	4b47      	ldr	r3, [pc, #284]	; (801d868 <atan+0x330>)
 801d74a:	4629      	mov	r1, r5
 801d74c:	f7e2 fdac 	bl	80002a8 <__aeabi_dsub>
 801d750:	2200      	movs	r2, #0
 801d752:	4606      	mov	r6, r0
 801d754:	460f      	mov	r7, r1
 801d756:	4b44      	ldr	r3, [pc, #272]	; (801d868 <atan+0x330>)
 801d758:	4620      	mov	r0, r4
 801d75a:	4629      	mov	r1, r5
 801d75c:	f7e2 ff5c 	bl	8000618 <__aeabi_dmul>
 801d760:	2200      	movs	r2, #0
 801d762:	4b3e      	ldr	r3, [pc, #248]	; (801d85c <atan+0x324>)
 801d764:	f7e2 fda2 	bl	80002ac <__adddf3>
 801d768:	4602      	mov	r2, r0
 801d76a:	460b      	mov	r3, r1
 801d76c:	4630      	mov	r0, r6
 801d76e:	4639      	mov	r1, r7
 801d770:	f7e3 f87c 	bl	800086c <__aeabi_ddiv>
 801d774:	f04f 0a02 	mov.w	sl, #2
 801d778:	4604      	mov	r4, r0
 801d77a:	460d      	mov	r5, r1
 801d77c:	e743      	b.n	801d606 <atan+0xce>
 801d77e:	462b      	mov	r3, r5
 801d780:	ee10 2a10 	vmov	r2, s0
 801d784:	2000      	movs	r0, #0
 801d786:	4939      	ldr	r1, [pc, #228]	; (801d86c <atan+0x334>)
 801d788:	f7e3 f870 	bl	800086c <__aeabi_ddiv>
 801d78c:	f04f 0a03 	mov.w	sl, #3
 801d790:	4604      	mov	r4, r0
 801d792:	460d      	mov	r5, r1
 801d794:	e737      	b.n	801d606 <atan+0xce>
 801d796:	4b36      	ldr	r3, [pc, #216]	; (801d870 <atan+0x338>)
 801d798:	4e36      	ldr	r6, [pc, #216]	; (801d874 <atan+0x33c>)
 801d79a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801d79e:	4456      	add	r6, sl
 801d7a0:	449a      	add	sl, r3
 801d7a2:	e9da 2300 	ldrd	r2, r3, [sl]
 801d7a6:	f7e2 fd7f 	bl	80002a8 <__aeabi_dsub>
 801d7aa:	4622      	mov	r2, r4
 801d7ac:	462b      	mov	r3, r5
 801d7ae:	f7e2 fd7b 	bl	80002a8 <__aeabi_dsub>
 801d7b2:	4602      	mov	r2, r0
 801d7b4:	460b      	mov	r3, r1
 801d7b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d7ba:	f7e2 fd75 	bl	80002a8 <__aeabi_dsub>
 801d7be:	f1bb 0f00 	cmp.w	fp, #0
 801d7c2:	4604      	mov	r4, r0
 801d7c4:	460d      	mov	r5, r1
 801d7c6:	f6bf aed6 	bge.w	801d576 <atan+0x3e>
 801d7ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d7ce:	461d      	mov	r5, r3
 801d7d0:	e6d1      	b.n	801d576 <atan+0x3e>
 801d7d2:	a51d      	add	r5, pc, #116	; (adr r5, 801d848 <atan+0x310>)
 801d7d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d7d8:	e6cd      	b.n	801d576 <atan+0x3e>
 801d7da:	bf00      	nop
 801d7dc:	f3af 8000 	nop.w
 801d7e0:	54442d18 	.word	0x54442d18
 801d7e4:	3ff921fb 	.word	0x3ff921fb
 801d7e8:	8800759c 	.word	0x8800759c
 801d7ec:	7e37e43c 	.word	0x7e37e43c
 801d7f0:	e322da11 	.word	0xe322da11
 801d7f4:	3f90ad3a 	.word	0x3f90ad3a
 801d7f8:	24760deb 	.word	0x24760deb
 801d7fc:	3fa97b4b 	.word	0x3fa97b4b
 801d800:	a0d03d51 	.word	0xa0d03d51
 801d804:	3fb10d66 	.word	0x3fb10d66
 801d808:	c54c206e 	.word	0xc54c206e
 801d80c:	3fb745cd 	.word	0x3fb745cd
 801d810:	920083ff 	.word	0x920083ff
 801d814:	3fc24924 	.word	0x3fc24924
 801d818:	5555550d 	.word	0x5555550d
 801d81c:	3fd55555 	.word	0x3fd55555
 801d820:	2c6a6c2f 	.word	0x2c6a6c2f
 801d824:	bfa2b444 	.word	0xbfa2b444
 801d828:	52defd9a 	.word	0x52defd9a
 801d82c:	3fadde2d 	.word	0x3fadde2d
 801d830:	af749a6d 	.word	0xaf749a6d
 801d834:	3fb3b0f2 	.word	0x3fb3b0f2
 801d838:	fe231671 	.word	0xfe231671
 801d83c:	3fbc71c6 	.word	0x3fbc71c6
 801d840:	9998ebc4 	.word	0x9998ebc4
 801d844:	3fc99999 	.word	0x3fc99999
 801d848:	54442d18 	.word	0x54442d18
 801d84c:	bff921fb 	.word	0xbff921fb
 801d850:	440fffff 	.word	0x440fffff
 801d854:	7ff00000 	.word	0x7ff00000
 801d858:	3fdbffff 	.word	0x3fdbffff
 801d85c:	3ff00000 	.word	0x3ff00000
 801d860:	3ff2ffff 	.word	0x3ff2ffff
 801d864:	40037fff 	.word	0x40037fff
 801d868:	3ff80000 	.word	0x3ff80000
 801d86c:	bff00000 	.word	0xbff00000
 801d870:	0801e938 	.word	0x0801e938
 801d874:	0801e918 	.word	0x0801e918

0801d878 <fabs>:
 801d878:	ec51 0b10 	vmov	r0, r1, d0
 801d87c:	ee10 2a10 	vmov	r2, s0
 801d880:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d884:	ec43 2b10 	vmov	d0, r2, r3
 801d888:	4770      	bx	lr

0801d88a <finite>:
 801d88a:	ee10 3a90 	vmov	r3, s1
 801d88e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801d892:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d896:	0fc0      	lsrs	r0, r0, #31
 801d898:	4770      	bx	lr
 801d89a:	0000      	movs	r0, r0
 801d89c:	0000      	movs	r0, r0
	...

0801d8a0 <floor>:
 801d8a0:	ec51 0b10 	vmov	r0, r1, d0
 801d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801d8ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801d8b0:	2e13      	cmp	r6, #19
 801d8b2:	460c      	mov	r4, r1
 801d8b4:	ee10 5a10 	vmov	r5, s0
 801d8b8:	4680      	mov	r8, r0
 801d8ba:	dc34      	bgt.n	801d926 <floor+0x86>
 801d8bc:	2e00      	cmp	r6, #0
 801d8be:	da16      	bge.n	801d8ee <floor+0x4e>
 801d8c0:	a335      	add	r3, pc, #212	; (adr r3, 801d998 <floor+0xf8>)
 801d8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8c6:	f7e2 fcf1 	bl	80002ac <__adddf3>
 801d8ca:	2200      	movs	r2, #0
 801d8cc:	2300      	movs	r3, #0
 801d8ce:	f7e3 f933 	bl	8000b38 <__aeabi_dcmpgt>
 801d8d2:	b148      	cbz	r0, 801d8e8 <floor+0x48>
 801d8d4:	2c00      	cmp	r4, #0
 801d8d6:	da59      	bge.n	801d98c <floor+0xec>
 801d8d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d8dc:	4a30      	ldr	r2, [pc, #192]	; (801d9a0 <floor+0x100>)
 801d8de:	432b      	orrs	r3, r5
 801d8e0:	2500      	movs	r5, #0
 801d8e2:	42ab      	cmp	r3, r5
 801d8e4:	bf18      	it	ne
 801d8e6:	4614      	movne	r4, r2
 801d8e8:	4621      	mov	r1, r4
 801d8ea:	4628      	mov	r0, r5
 801d8ec:	e025      	b.n	801d93a <floor+0x9a>
 801d8ee:	4f2d      	ldr	r7, [pc, #180]	; (801d9a4 <floor+0x104>)
 801d8f0:	4137      	asrs	r7, r6
 801d8f2:	ea01 0307 	and.w	r3, r1, r7
 801d8f6:	4303      	orrs	r3, r0
 801d8f8:	d01f      	beq.n	801d93a <floor+0x9a>
 801d8fa:	a327      	add	r3, pc, #156	; (adr r3, 801d998 <floor+0xf8>)
 801d8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d900:	f7e2 fcd4 	bl	80002ac <__adddf3>
 801d904:	2200      	movs	r2, #0
 801d906:	2300      	movs	r3, #0
 801d908:	f7e3 f916 	bl	8000b38 <__aeabi_dcmpgt>
 801d90c:	2800      	cmp	r0, #0
 801d90e:	d0eb      	beq.n	801d8e8 <floor+0x48>
 801d910:	2c00      	cmp	r4, #0
 801d912:	bfbe      	ittt	lt
 801d914:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d918:	fa43 f606 	asrlt.w	r6, r3, r6
 801d91c:	19a4      	addlt	r4, r4, r6
 801d91e:	ea24 0407 	bic.w	r4, r4, r7
 801d922:	2500      	movs	r5, #0
 801d924:	e7e0      	b.n	801d8e8 <floor+0x48>
 801d926:	2e33      	cmp	r6, #51	; 0x33
 801d928:	dd0b      	ble.n	801d942 <floor+0xa2>
 801d92a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d92e:	d104      	bne.n	801d93a <floor+0x9a>
 801d930:	ee10 2a10 	vmov	r2, s0
 801d934:	460b      	mov	r3, r1
 801d936:	f7e2 fcb9 	bl	80002ac <__adddf3>
 801d93a:	ec41 0b10 	vmov	d0, r0, r1
 801d93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d942:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801d946:	f04f 33ff 	mov.w	r3, #4294967295
 801d94a:	fa23 f707 	lsr.w	r7, r3, r7
 801d94e:	4207      	tst	r7, r0
 801d950:	d0f3      	beq.n	801d93a <floor+0x9a>
 801d952:	a311      	add	r3, pc, #68	; (adr r3, 801d998 <floor+0xf8>)
 801d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d958:	f7e2 fca8 	bl	80002ac <__adddf3>
 801d95c:	2200      	movs	r2, #0
 801d95e:	2300      	movs	r3, #0
 801d960:	f7e3 f8ea 	bl	8000b38 <__aeabi_dcmpgt>
 801d964:	2800      	cmp	r0, #0
 801d966:	d0bf      	beq.n	801d8e8 <floor+0x48>
 801d968:	2c00      	cmp	r4, #0
 801d96a:	da02      	bge.n	801d972 <floor+0xd2>
 801d96c:	2e14      	cmp	r6, #20
 801d96e:	d103      	bne.n	801d978 <floor+0xd8>
 801d970:	3401      	adds	r4, #1
 801d972:	ea25 0507 	bic.w	r5, r5, r7
 801d976:	e7b7      	b.n	801d8e8 <floor+0x48>
 801d978:	2301      	movs	r3, #1
 801d97a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d97e:	fa03 f606 	lsl.w	r6, r3, r6
 801d982:	4435      	add	r5, r6
 801d984:	4545      	cmp	r5, r8
 801d986:	bf38      	it	cc
 801d988:	18e4      	addcc	r4, r4, r3
 801d98a:	e7f2      	b.n	801d972 <floor+0xd2>
 801d98c:	2500      	movs	r5, #0
 801d98e:	462c      	mov	r4, r5
 801d990:	e7aa      	b.n	801d8e8 <floor+0x48>
 801d992:	bf00      	nop
 801d994:	f3af 8000 	nop.w
 801d998:	8800759c 	.word	0x8800759c
 801d99c:	7e37e43c 	.word	0x7e37e43c
 801d9a0:	bff00000 	.word	0xbff00000
 801d9a4:	000fffff 	.word	0x000fffff

0801d9a8 <matherr>:
 801d9a8:	2000      	movs	r0, #0
 801d9aa:	4770      	bx	lr
 801d9ac:	0000      	movs	r0, r0
	...

0801d9b0 <nan>:
 801d9b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d9b8 <nan+0x8>
 801d9b4:	4770      	bx	lr
 801d9b6:	bf00      	nop
 801d9b8:	00000000 	.word	0x00000000
 801d9bc:	7ff80000 	.word	0x7ff80000

0801d9c0 <rint>:
 801d9c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d9c2:	ec51 0b10 	vmov	r0, r1, d0
 801d9c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d9ca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801d9ce:	2e13      	cmp	r6, #19
 801d9d0:	460b      	mov	r3, r1
 801d9d2:	ee10 4a10 	vmov	r4, s0
 801d9d6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801d9da:	dc56      	bgt.n	801da8a <rint+0xca>
 801d9dc:	2e00      	cmp	r6, #0
 801d9de:	da2b      	bge.n	801da38 <rint+0x78>
 801d9e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801d9e4:	4302      	orrs	r2, r0
 801d9e6:	d023      	beq.n	801da30 <rint+0x70>
 801d9e8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801d9ec:	4302      	orrs	r2, r0
 801d9ee:	4254      	negs	r4, r2
 801d9f0:	4314      	orrs	r4, r2
 801d9f2:	0c4b      	lsrs	r3, r1, #17
 801d9f4:	0b24      	lsrs	r4, r4, #12
 801d9f6:	045b      	lsls	r3, r3, #17
 801d9f8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801d9fc:	ea44 0103 	orr.w	r1, r4, r3
 801da00:	460b      	mov	r3, r1
 801da02:	492f      	ldr	r1, [pc, #188]	; (801dac0 <rint+0x100>)
 801da04:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801da08:	e9d1 6700 	ldrd	r6, r7, [r1]
 801da0c:	4602      	mov	r2, r0
 801da0e:	4639      	mov	r1, r7
 801da10:	4630      	mov	r0, r6
 801da12:	f7e2 fc4b 	bl	80002ac <__adddf3>
 801da16:	e9cd 0100 	strd	r0, r1, [sp]
 801da1a:	463b      	mov	r3, r7
 801da1c:	4632      	mov	r2, r6
 801da1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801da22:	f7e2 fc41 	bl	80002a8 <__aeabi_dsub>
 801da26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801da2a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801da2e:	4639      	mov	r1, r7
 801da30:	ec41 0b10 	vmov	d0, r0, r1
 801da34:	b003      	add	sp, #12
 801da36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da38:	4a22      	ldr	r2, [pc, #136]	; (801dac4 <rint+0x104>)
 801da3a:	4132      	asrs	r2, r6
 801da3c:	ea01 0702 	and.w	r7, r1, r2
 801da40:	4307      	orrs	r7, r0
 801da42:	d0f5      	beq.n	801da30 <rint+0x70>
 801da44:	0852      	lsrs	r2, r2, #1
 801da46:	4011      	ands	r1, r2
 801da48:	430c      	orrs	r4, r1
 801da4a:	d00b      	beq.n	801da64 <rint+0xa4>
 801da4c:	ea23 0202 	bic.w	r2, r3, r2
 801da50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801da54:	2e13      	cmp	r6, #19
 801da56:	fa43 f306 	asr.w	r3, r3, r6
 801da5a:	bf0c      	ite	eq
 801da5c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801da60:	2400      	movne	r4, #0
 801da62:	4313      	orrs	r3, r2
 801da64:	4916      	ldr	r1, [pc, #88]	; (801dac0 <rint+0x100>)
 801da66:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801da6a:	4622      	mov	r2, r4
 801da6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801da70:	4620      	mov	r0, r4
 801da72:	4629      	mov	r1, r5
 801da74:	f7e2 fc1a 	bl	80002ac <__adddf3>
 801da78:	e9cd 0100 	strd	r0, r1, [sp]
 801da7c:	4622      	mov	r2, r4
 801da7e:	462b      	mov	r3, r5
 801da80:	e9dd 0100 	ldrd	r0, r1, [sp]
 801da84:	f7e2 fc10 	bl	80002a8 <__aeabi_dsub>
 801da88:	e7d2      	b.n	801da30 <rint+0x70>
 801da8a:	2e33      	cmp	r6, #51	; 0x33
 801da8c:	dd07      	ble.n	801da9e <rint+0xde>
 801da8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801da92:	d1cd      	bne.n	801da30 <rint+0x70>
 801da94:	ee10 2a10 	vmov	r2, s0
 801da98:	f7e2 fc08 	bl	80002ac <__adddf3>
 801da9c:	e7c8      	b.n	801da30 <rint+0x70>
 801da9e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801daa2:	f04f 32ff 	mov.w	r2, #4294967295
 801daa6:	40f2      	lsrs	r2, r6
 801daa8:	4210      	tst	r0, r2
 801daaa:	d0c1      	beq.n	801da30 <rint+0x70>
 801daac:	0852      	lsrs	r2, r2, #1
 801daae:	4210      	tst	r0, r2
 801dab0:	bf1f      	itttt	ne
 801dab2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801dab6:	ea20 0202 	bicne.w	r2, r0, r2
 801daba:	4134      	asrne	r4, r6
 801dabc:	4314      	orrne	r4, r2
 801dabe:	e7d1      	b.n	801da64 <rint+0xa4>
 801dac0:	0801e958 	.word	0x0801e958
 801dac4:	000fffff 	.word	0x000fffff

0801dac8 <scalbn>:
 801dac8:	b570      	push	{r4, r5, r6, lr}
 801daca:	ec55 4b10 	vmov	r4, r5, d0
 801dace:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801dad2:	4606      	mov	r6, r0
 801dad4:	462b      	mov	r3, r5
 801dad6:	b9aa      	cbnz	r2, 801db04 <scalbn+0x3c>
 801dad8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801dadc:	4323      	orrs	r3, r4
 801dade:	d03b      	beq.n	801db58 <scalbn+0x90>
 801dae0:	4b31      	ldr	r3, [pc, #196]	; (801dba8 <scalbn+0xe0>)
 801dae2:	4629      	mov	r1, r5
 801dae4:	2200      	movs	r2, #0
 801dae6:	ee10 0a10 	vmov	r0, s0
 801daea:	f7e2 fd95 	bl	8000618 <__aeabi_dmul>
 801daee:	4b2f      	ldr	r3, [pc, #188]	; (801dbac <scalbn+0xe4>)
 801daf0:	429e      	cmp	r6, r3
 801daf2:	4604      	mov	r4, r0
 801daf4:	460d      	mov	r5, r1
 801daf6:	da12      	bge.n	801db1e <scalbn+0x56>
 801daf8:	a327      	add	r3, pc, #156	; (adr r3, 801db98 <scalbn+0xd0>)
 801dafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dafe:	f7e2 fd8b 	bl	8000618 <__aeabi_dmul>
 801db02:	e009      	b.n	801db18 <scalbn+0x50>
 801db04:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801db08:	428a      	cmp	r2, r1
 801db0a:	d10c      	bne.n	801db26 <scalbn+0x5e>
 801db0c:	ee10 2a10 	vmov	r2, s0
 801db10:	4620      	mov	r0, r4
 801db12:	4629      	mov	r1, r5
 801db14:	f7e2 fbca 	bl	80002ac <__adddf3>
 801db18:	4604      	mov	r4, r0
 801db1a:	460d      	mov	r5, r1
 801db1c:	e01c      	b.n	801db58 <scalbn+0x90>
 801db1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801db22:	460b      	mov	r3, r1
 801db24:	3a36      	subs	r2, #54	; 0x36
 801db26:	4432      	add	r2, r6
 801db28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801db2c:	428a      	cmp	r2, r1
 801db2e:	dd0b      	ble.n	801db48 <scalbn+0x80>
 801db30:	ec45 4b11 	vmov	d1, r4, r5
 801db34:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801dba0 <scalbn+0xd8>
 801db38:	f000 f83c 	bl	801dbb4 <copysign>
 801db3c:	a318      	add	r3, pc, #96	; (adr r3, 801dba0 <scalbn+0xd8>)
 801db3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db42:	ec51 0b10 	vmov	r0, r1, d0
 801db46:	e7da      	b.n	801dafe <scalbn+0x36>
 801db48:	2a00      	cmp	r2, #0
 801db4a:	dd08      	ble.n	801db5e <scalbn+0x96>
 801db4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801db50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801db54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801db58:	ec45 4b10 	vmov	d0, r4, r5
 801db5c:	bd70      	pop	{r4, r5, r6, pc}
 801db5e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801db62:	da0d      	bge.n	801db80 <scalbn+0xb8>
 801db64:	f24c 3350 	movw	r3, #50000	; 0xc350
 801db68:	429e      	cmp	r6, r3
 801db6a:	ec45 4b11 	vmov	d1, r4, r5
 801db6e:	dce1      	bgt.n	801db34 <scalbn+0x6c>
 801db70:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801db98 <scalbn+0xd0>
 801db74:	f000 f81e 	bl	801dbb4 <copysign>
 801db78:	a307      	add	r3, pc, #28	; (adr r3, 801db98 <scalbn+0xd0>)
 801db7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db7e:	e7e0      	b.n	801db42 <scalbn+0x7a>
 801db80:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801db84:	3236      	adds	r2, #54	; 0x36
 801db86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801db8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801db8e:	4620      	mov	r0, r4
 801db90:	4629      	mov	r1, r5
 801db92:	2200      	movs	r2, #0
 801db94:	4b06      	ldr	r3, [pc, #24]	; (801dbb0 <scalbn+0xe8>)
 801db96:	e7b2      	b.n	801dafe <scalbn+0x36>
 801db98:	c2f8f359 	.word	0xc2f8f359
 801db9c:	01a56e1f 	.word	0x01a56e1f
 801dba0:	8800759c 	.word	0x8800759c
 801dba4:	7e37e43c 	.word	0x7e37e43c
 801dba8:	43500000 	.word	0x43500000
 801dbac:	ffff3cb0 	.word	0xffff3cb0
 801dbb0:	3c900000 	.word	0x3c900000

0801dbb4 <copysign>:
 801dbb4:	ec51 0b10 	vmov	r0, r1, d0
 801dbb8:	ee11 0a90 	vmov	r0, s3
 801dbbc:	ee10 2a10 	vmov	r2, s0
 801dbc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801dbc4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801dbc8:	ea41 0300 	orr.w	r3, r1, r0
 801dbcc:	ec43 2b10 	vmov	d0, r2, r3
 801dbd0:	4770      	bx	lr
	...

0801dbd4 <_init>:
 801dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbd6:	bf00      	nop
 801dbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dbda:	bc08      	pop	{r3}
 801dbdc:	469e      	mov	lr, r3
 801dbde:	4770      	bx	lr

0801dbe0 <_fini>:
 801dbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbe2:	bf00      	nop
 801dbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dbe6:	bc08      	pop	{r3}
 801dbe8:	469e      	mov	lr, r3
 801dbea:	4770      	bx	lr
