
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e67c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800e80c  0800e80c  0001e80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed80  0800ed80  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed80  0800ed80  0001ed80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed88  0800ed88  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed88  0800ed88  0001ed88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed8c  0800ed8c  0001ed8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ed90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004298  200001e0  0800ef70  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004478  0800ef70  00024478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029d22  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005338  00000000  00000000  00049f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002080  00000000  00000000  0004f270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e38  00000000  00000000  000512f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008acc  00000000  00000000  00053128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e516  00000000  00000000  0005bbf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4e78  00000000  00000000  0007a10a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014ef82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c60  00000000  00000000  0014f000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e7f4 	.word	0x0800e7f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800e7f4 	.word	0x0800e7f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <println>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
};
static inline void println(char* str)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2140      	movs	r1, #64	; 0x40
 800058c:	4820      	ldr	r0, [pc, #128]	; (8000610 <println+0x90>)
 800058e:	f001 f8c3 	bl	8001718 <HAL_GPIO_WritePin>

	printLen = strlen(str);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff fe1c 	bl	80001d0 <strlen>
 8000598:	4602      	mov	r2, r0
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <println+0x94>)
 800059c:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 800059e:	2300      	movs	r3, #0
 80005a0:	73fb      	strb	r3, [r7, #15]
 80005a2:	e009      	b.n	80005b8 <println+0x38>
	{
		printBuffer[i] = str[i];
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	441a      	add	r2, r3
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	7811      	ldrb	r1, [r2, #0]
 80005ae:	4a1a      	ldr	r2, [pc, #104]	; (8000618 <println+0x98>)
 80005b0:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3301      	adds	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	7bfa      	ldrb	r2, [r7, #15]
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <println+0x94>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d3f0      	bcc.n	80005a4 <println+0x24>
	}
	printBuffer[printLen] = '\n';
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <println+0x94>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a14      	ldr	r2, [pc, #80]	; (8000618 <println+0x98>)
 80005c8:	210a      	movs	r1, #10
 80005ca:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <println+0x94>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a11      	ldr	r2, [pc, #68]	; (8000618 <println+0x98>)
 80005d4:	210d      	movs	r1, #13
 80005d6:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <println+0x94>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3302      	adds	r3, #2
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <println+0x98>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 80005e4:	bf00      	nop
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <println+0x94>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	3303      	adds	r3, #3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	4809      	ldr	r0, [pc, #36]	; (8000618 <println+0x98>)
 80005f4:	f00d f856 	bl	800d6a4 <CDC_Transmit_FS>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d0f3      	beq.n	80005e6 <println+0x66>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <println+0x90>)
 8000604:	f001 f888 	bl	8001718 <HAL_GPIO_WritePin>
	#endif
};
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40020800 	.word	0x40020800
 8000614:	200001fc 	.word	0x200001fc
 8000618:	20000200 	.word	0x20000200

0800061c <millis>:
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
 8000620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <millis+0x1c>)
 8000628:	fba2 2303 	umull	r2, r3, r2, r3
 800062c:	099b      	lsrs	r3, r3, #6
 800062e:	4618      	mov	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	10624dd3 	.word	0x10624dd3

0800063c <getTime>:
	rtc_date.Date = dateTime->dayM;
	if (HAL_RTC_SetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN) != HAL_OK) return false;
}

static inline DateTime getTime(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8000664:	f00c f976 	bl	800c954 <Get_RTC_Instance>
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	2200      	movs	r2, #0
 800066e:	4619      	mov	r1, r3
 8000670:	f003 f89b 	bl	80037aa <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8000674:	f00c f96e 	bl	800c954 <Get_RTC_Instance>
 8000678:	f107 0318 	add.w	r3, r7, #24
 800067c:	2200      	movs	r2, #0
 800067e:	4619      	mov	r1, r3
 8000680:	f003 f8f1 	bl	8003866 <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8000684:	7efb      	ldrb	r3, [r7, #27]
 8000686:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8000688:	7e7b      	ldrb	r3, [r7, #25]
 800068a:	737b      	strb	r3, [r7, #13]
	//toReturn.dayY = rtc_date.
	toReturn.dayM = rtc_date.Date;
 800068c:	7ebb      	ldrb	r3, [r7, #26]
 800068e:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8000690:	7e3b      	ldrb	r3, [r7, #24]
 8000692:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8000694:	7f3b      	ldrb	r3, [r7, #28]
 8000696:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8000698:	7f7b      	ldrb	r3, [r7, #29]
 800069a:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 800069c:	7fbb      	ldrb	r3, [r7, #30]
 800069e:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 80006a0:	f7ff ffbc 	bl	800061c <millis>
 80006a4:	4602      	mov	r2, r0
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <getTime+0x9c>)
 80006a8:	fba3 1302 	umull	r1, r3, r3, r2
 80006ac:	099b      	lsrs	r3, r3, #6
 80006ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006b2:	fb01 f303 	mul.w	r3, r1, r3
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	461a      	mov	r2, r3
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	cb03      	ldmia	r3!, {r0, r1}
 80006c6:	6010      	str	r0, [r2, #0]
 80006c8:	6051      	str	r1, [r2, #4]
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	8113      	strh	r3, [r2, #8]
}
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	3730      	adds	r7, #48	; 0x30
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	10624dd3 	.word	0x10624dd3

080006dc <SD_setFileTime>:
#include "stm32f4xx_hal.h"
#include "clock.h"
#include "run.h"

static FRESULT SD_setFileTime(char* path, DateTime* dateTime)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
    FILINFO info;

    // fatfs counts date from 1980, +20 to year needed
    info.fdate = (WORD)(((dateTime->year + 20) << 9) | (dateTime->month << 5) | (dateTime->dayM));
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	3314      	adds	r3, #20
 80006ec:	025b      	lsls	r3, r3, #9
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	015b      	lsls	r3, r3, #5
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b21a      	sxth	r2, r3
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	789b      	ldrb	r3, [r3, #2]
 8000700:	b21b      	sxth	r3, r3
 8000702:	4313      	orrs	r3, r2
 8000704:	b21b      	sxth	r3, r3
 8000706:	b29b      	uxth	r3, r3
 8000708:	81bb      	strh	r3, [r7, #12]
    // fatfs stores seconds as 0:30, /2 division needed
    info.ftime = (WORD)((dateTime->hour << 11) | (dateTime->minute << 5) | (dateTime->second / 2));
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	02db      	lsls	r3, r3, #11
 8000710:	b21a      	sxth	r2, r3
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	795b      	ldrb	r3, [r3, #5]
 8000716:	015b      	lsls	r3, r3, #5
 8000718:	b21b      	sxth	r3, r3
 800071a:	4313      	orrs	r3, r2
 800071c:	b21a      	sxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	799b      	ldrb	r3, [r3, #6]
 8000722:	085b      	lsrs	r3, r3, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	b21b      	sxth	r3, r3
 8000728:	4313      	orrs	r3, r2
 800072a:	b21b      	sxth	r3, r3
 800072c:	b29b      	uxth	r3, r3
 800072e:	81fb      	strh	r3, [r7, #14]

    //return f_utime(path, &info);
    return FR_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	; 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <SD_init>:


FRESULT SD_init()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 800074a:	f00b fa67 	bl	800bc1c <BSP_SD_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SD_init+0x18>
 8000754:	2303      	movs	r3, #3
 8000756:	e036      	b.n	80007c6 <SD_init+0x86>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 8000758:	481e      	ldr	r0, [pc, #120]	; (80007d4 <SD_init+0x94>)
 800075a:	f00b fa51 	bl	800bc00 <FATFS_UnLinkDriver>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SD_init+0x28>
 8000764:	2303      	movs	r3, #3
 8000766:	e02e      	b.n	80007c6 <SD_init+0x86>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 8000768:	491a      	ldr	r1, [pc, #104]	; (80007d4 <SD_init+0x94>)
 800076a:	481b      	ldr	r0, [pc, #108]	; (80007d8 <SD_init+0x98>)
 800076c:	f00b fa00 	bl	800bb70 <FATFS_LinkDriver>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SD_init+0x3a>
 8000776:	2303      	movs	r3, #3
 8000778:	e025      	b.n	80007c6 <SD_init+0x86>

	f_mount(0, SDPath, 1);
 800077a:	2201      	movs	r2, #1
 800077c:	4915      	ldr	r1, [pc, #84]	; (80007d4 <SD_init+0x94>)
 800077e:	2000      	movs	r0, #0
 8000780:	f00a fd5c 	bl	800b23c <f_mount>
	FATFS fs;
	FRESULT mountStatus = f_mount(&fs, SDPath, 1);
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	3b18      	subs	r3, #24
 800078a:	2201      	movs	r2, #1
 800078c:	4911      	ldr	r1, [pc, #68]	; (80007d4 <SD_init+0x94>)
 800078e:	4618      	mov	r0, r3
 8000790:	f00a fd54 	bl	800b23c <f_mount>
 8000794:	4603      	mov	r3, r0
 8000796:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800079a:	f102 0217 	add.w	r2, r2, #23
 800079e:	7013      	strb	r3, [r2, #0]
	if (mountStatus != FR_OK)
 80007a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80007a4:	f103 0317 	add.w	r3, r3, #23
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00a      	beq.n	80007c4 <SD_init+0x84>
	{
		f_mount(0, SDPath, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	4908      	ldr	r1, [pc, #32]	; (80007d4 <SD_init+0x94>)
 80007b2:	2000      	movs	r0, #0
 80007b4:	f00a fd42 	bl	800b23c <f_mount>
		return mountStatus;
 80007b8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80007bc:	f103 0317 	add.w	r3, r3, #23
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	e000      	b.n	80007c6 <SD_init+0x86>
	}

	return FR_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000858 	.word	0x20000858
 80007d8:	0800ed20 	.word	0x0800ed20

080007dc <SD_newFile>:

	return FR_OK;
}

FRESULT SD_newFile(char* path)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	3b04      	subs	r3, #4
 80007ec:	6018      	str	r0, [r3, #0]
	FIL file;
	FRESULT status;
	println("[SD] Before open.");
 80007ee:	4822      	ldr	r0, [pc, #136]	; (8000878 <SD_newFile+0x9c>)
 80007f0:	f7ff fec6 	bl	8000580 <println>
	status = f_open(&file, path, FA_WRITE | FA_CREATE_NEW);
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	3b04      	subs	r3, #4
 80007fa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80007fe:	3814      	subs	r0, #20
 8000800:	2206      	movs	r2, #6
 8000802:	6819      	ldr	r1, [r3, #0]
 8000804:	f00a fd60 	bl	800b2c8 <f_open>
 8000808:	4603      	mov	r3, r0
 800080a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800080e:	f102 0207 	add.w	r2, r2, #7
 8000812:	7013      	strb	r3, [r2, #0]
	if (status != FR_OK)
 8000814:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000818:	f103 0307 	add.w	r3, r3, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d005      	beq.n	800082e <SD_newFile+0x52>
	{
		//f_mount(0, SDPath, 0);
		return status;
 8000822:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000826:	f103 0307 	add.w	r3, r3, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	e01e      	b.n	800086c <SD_newFile+0x90>
	}

	DateTime now = getTime();
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff02 	bl	800063c <getTime>
	println("[SD] Time get!");
 8000838:	4810      	ldr	r0, [pc, #64]	; (800087c <SD_newFile+0xa0>)
 800083a:	f7ff fea1 	bl	8000580 <println>
	SD_setFileTime(path, &now);
 800083e:	f107 0208 	add.w	r2, r7, #8
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	3b04      	subs	r3, #4
 8000848:	4611      	mov	r1, r2
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	f7ff ff46 	bl	80006dc <SD_setFileTime>
	println("[SD] Time set!");
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <SD_newFile+0xa4>)
 8000852:	f7ff fe95 	bl	8000580 <println>
	f_close(&file);
 8000856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085a:	3b14      	subs	r3, #20
 800085c:	4618      	mov	r0, r3
 800085e:	f00b f911 	bl	800ba84 <f_close>
	return status;
 8000862:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000866:	f103 0307 	add.w	r3, r3, #7
 800086a:	781b      	ldrb	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	0800e80c 	.word	0x0800e80c
 800087c:	0800e820 	.word	0x0800e820
 8000880:	0800e830 	.word	0x0800e830

08000884 <SD_writeToFile>:
	return f_unlink(path);
}


FRESULT SD_writeToFile(char* path, char* content)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800088a:	af00      	add	r7, sp, #0
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	3b1c      	subs	r3, #28
 8000892:	6018      	str	r0, [r3, #0]
 8000894:	463b      	mov	r3, r7
 8000896:	6019      	str	r1, [r3, #0]
	FIL file;
	FRESULT status;
	status = f_open(&file, path, FA_OPEN_EXISTING | FA_READ);
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	3b1c      	subs	r3, #28
 800089e:	f107 0020 	add.w	r0, r7, #32
 80008a2:	3814      	subs	r0, #20
 80008a4:	2201      	movs	r2, #1
 80008a6:	6819      	ldr	r1, [r3, #0]
 80008a8:	f00a fd0e 	bl	800b2c8 <f_open>
 80008ac:	4603      	mov	r3, r0
 80008ae:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80008b2:	f102 021f 	add.w	r2, r2, #31
 80008b6:	7013      	strb	r3, [r2, #0]
	if (status != FR_OK) return status;
 80008b8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80008bc:	f103 031f 	add.w	r3, r3, #31
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d005      	beq.n	80008d2 <SD_writeToFile+0x4e>
 80008c6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80008ca:	f103 031f 	add.w	r3, r3, #31
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	e02d      	b.n	800092e <SD_writeToFile+0xaa>

	UINT testByte = 0x00;
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	3b18      	subs	r3, #24
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
	status = f_write(&file, content, strlen(content), &testByte);
 80008dc:	463b      	mov	r3, r7
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	f7ff fc76 	bl	80001d0 <strlen>
 80008e4:	4602      	mov	r2, r0
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	3b18      	subs	r3, #24
 80008ec:	4639      	mov	r1, r7
 80008ee:	f107 0020 	add.w	r0, r7, #32
 80008f2:	3814      	subs	r0, #20
 80008f4:	6809      	ldr	r1, [r1, #0]
 80008f6:	f00a feb3 	bl	800b660 <f_write>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000900:	f102 021f 	add.w	r2, r2, #31
 8000904:	7013      	strb	r3, [r2, #0]
	if (status != FR_OK) return status;
 8000906:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800090a:	f103 031f 	add.w	r3, r3, #31
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d005      	beq.n	8000920 <SD_writeToFile+0x9c>
 8000914:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000918:	f103 031f 	add.w	r3, r3, #31
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	e006      	b.n	800092e <SD_writeToFile+0xaa>

	return f_close(&file);
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	3b14      	subs	r3, #20
 8000926:	4618      	mov	r0, r3
 8000928:	f00b f8ac 	bl	800ba84 <f_close>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <HAL_Init+0x40>)
 8000942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_Init+0x40>)
 800094e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <HAL_Init+0x40>)
 800095a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 f94d 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	2000      	movs	r0, #0
 8000968:	f000 f808 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f00c fa28 	bl	800cdc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023c00 	.word	0x40023c00

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_InitTick+0x54>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_InitTick+0x58>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f965 	bl	8000c6a <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00e      	b.n	80009c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d80a      	bhi.n	80009c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f000 f92d 	bl	8000c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009bc:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <HAL_InitTick+0x5c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000118 	.word	0x20000118
 80009d4:	20000004 	.word	0x20000004
 80009d8:	20000000 	.word	0x20000000

080009dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000004 	.word	0x20000004
 8000a00:	20000850 	.word	0x20000850

08000a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000850 	.word	0x20000850

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff ffee 	bl	8000a04 <HAL_GetTick>
 8000a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_Delay+0x40>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a42:	bf00      	nop
 8000a44:	f7ff ffde 	bl	8000a04 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000004 	.word	0x20000004

08000a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db0b      	blt.n	8000aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 021f 	and.w	r2, r3, #31
 8000adc:	4907      	ldr	r1, [pc, #28]	; (8000afc <__NVIC_EnableIRQ+0x38>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	095b      	lsrs	r3, r3, #5
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f7ff ff8e 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff29 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff3e 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff8e 	bl	8000b54 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5d 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff31 	bl	8000ac4 <__NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffa2 	bl	8000bbc <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff feb8 	bl	8000a04 <HAL_GetTick>
 8000c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e099      	b.n	8000dd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2202      	movs	r2, #2
 8000cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cc0:	e00f      	b.n	8000ce2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cc2:	f7ff fe9f 	bl	8000a04 <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2b05      	cmp	r3, #5
 8000cce:	d908      	bls.n	8000ce2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2203      	movs	r2, #3
 8000cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e078      	b.n	8000dd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1e8      	bne.n	8000cc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <HAL_DMA_Init+0x158>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d107      	bne.n	8000d4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4313      	orrs	r3, r2
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f023 0307 	bic.w	r3, r3, #7
 8000d62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d117      	bne.n	8000da6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d00e      	beq.n	8000da6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 fa99 	bl	80012c0 <DMA_CheckFifoParam>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d008      	beq.n	8000da6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2240      	movs	r2, #64	; 0x40
 8000d98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000da2:	2301      	movs	r3, #1
 8000da4:	e016      	b.n	8000dd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 fa50 	bl	8001254 <DMA_CalcBaseAndBitshift>
 8000db4:	4603      	mov	r3, r0
 8000db6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dbc:	223f      	movs	r2, #63	; 0x3f
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	f010803f 	.word	0xf010803f

08000de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d101      	bne.n	8000e06 <HAL_DMA_Start_IT+0x26>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e048      	b.n	8000e98 <HAL_DMA_Start_IT+0xb8>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d137      	bne.n	8000e8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2200      	movs	r2, #0
 8000e26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f000 f9e2 	bl	80011f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e38:	223f      	movs	r2, #63	; 0x3f
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0216 	orr.w	r2, r2, #22
 8000e4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	695a      	ldr	r2, [r3, #20]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e5e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d007      	beq.n	8000e78 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0208 	orr.w	r2, r2, #8
 8000e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f042 0201 	orr.w	r2, r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	e005      	b.n	8000e96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000e92:	2302      	movs	r3, #2
 8000e94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d004      	beq.n	8000ebe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00c      	b.n	8000ed8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2205      	movs	r2, #5
 8000ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0201 	bic.w	r2, r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ef0:	4b92      	ldr	r3, [pc, #584]	; (800113c <HAL_DMA_IRQHandler+0x258>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a92      	ldr	r2, [pc, #584]	; (8001140 <HAL_DMA_IRQHandler+0x25c>)
 8000ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8000efa:	0a9b      	lsrs	r3, r3, #10
 8000efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f0e:	2208      	movs	r2, #8
 8000f10:	409a      	lsls	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d01a      	beq.n	8000f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d013      	beq.n	8000f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0204 	bic.w	r2, r2, #4
 8000f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f48:	f043 0201 	orr.w	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f54:	2201      	movs	r2, #1
 8000f56:	409a      	lsls	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d012      	beq.n	8000f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00b      	beq.n	8000f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f72:	2201      	movs	r2, #1
 8000f74:	409a      	lsls	r2, r3
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7e:	f043 0202 	orr.w	r2, r3, #2
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d012      	beq.n	8000fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00b      	beq.n	8000fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa8:	2204      	movs	r2, #4
 8000faa:	409a      	lsls	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb4:	f043 0204 	orr.w	r2, r3, #4
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d043      	beq.n	8001054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d03c      	beq.n	8001054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fde:	2210      	movs	r2, #16
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d018      	beq.n	8001026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d108      	bne.n	8001014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	2b00      	cmp	r3, #0
 8001008:	d024      	beq.n	8001054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	4798      	blx	r3
 8001012:	e01f      	b.n	8001054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001018:	2b00      	cmp	r3, #0
 800101a:	d01b      	beq.n	8001054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	4798      	blx	r3
 8001024:	e016      	b.n	8001054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001030:	2b00      	cmp	r3, #0
 8001032:	d107      	bne.n	8001044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0208 	bic.w	r2, r2, #8
 8001042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001058:	2220      	movs	r2, #32
 800105a:	409a      	lsls	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 808e 	beq.w	8001182 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 8086 	beq.w	8001182 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107a:	2220      	movs	r2, #32
 800107c:	409a      	lsls	r2, r3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b05      	cmp	r3, #5
 800108c:	d136      	bne.n	80010fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0216 	bic.w	r2, r2, #22
 800109c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d103      	bne.n	80010be <HAL_DMA_IRQHandler+0x1da>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0208 	bic.w	r2, r2, #8
 80010cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d2:	223f      	movs	r2, #63	; 0x3f
 80010d4:	409a      	lsls	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d07d      	beq.n	80011ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	4798      	blx	r3
        }
        return;
 80010fa:	e078      	b.n	80011ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d01c      	beq.n	8001144 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d108      	bne.n	800112a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	2b00      	cmp	r3, #0
 800111e:	d030      	beq.n	8001182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	4798      	blx	r3
 8001128:	e02b      	b.n	8001182 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112e:	2b00      	cmp	r3, #0
 8001130:	d027      	beq.n	8001182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	4798      	blx	r3
 800113a:	e022      	b.n	8001182 <HAL_DMA_IRQHandler+0x29e>
 800113c:	20000118 	.word	0x20000118
 8001140:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10f      	bne.n	8001172 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0210 	bic.w	r2, r2, #16
 8001160:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001186:	2b00      	cmp	r3, #0
 8001188:	d032      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d022      	beq.n	80011dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2205      	movs	r2, #5
 800119a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3301      	adds	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d307      	bcc.n	80011ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f2      	bne.n	80011ae <HAL_DMA_IRQHandler+0x2ca>
 80011c8:	e000      	b.n	80011cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80011ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	4798      	blx	r3
 80011ec:	e000      	b.n	80011f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80011ee:	bf00      	nop
    }
  }
}
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop

080011f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001214:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b40      	cmp	r3, #64	; 0x40
 8001224:	d108      	bne.n	8001238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001236:	e007      	b.n	8001248 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	60da      	str	r2, [r3, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	3b10      	subs	r3, #16
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	091b      	lsrs	r3, r3, #4
 800126c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <DMA_CalcBaseAndBitshift+0x68>)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b03      	cmp	r3, #3
 8001280:	d909      	bls.n	8001296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800128a:	f023 0303 	bic.w	r3, r3, #3
 800128e:	1d1a      	adds	r2, r3, #4
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	659a      	str	r2, [r3, #88]	; 0x58
 8001294:	e007      	b.n	80012a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800129e:	f023 0303 	bic.w	r3, r3, #3
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	aaaaaaab 	.word	0xaaaaaaab
 80012bc:	0800ec98 	.word	0x0800ec98

080012c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d11f      	bne.n	800131a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d855      	bhi.n	800138c <DMA_CheckFifoParam+0xcc>
 80012e0:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <DMA_CheckFifoParam+0x28>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	0800130b 	.word	0x0800130b
 80012f0:	080012f9 	.word	0x080012f9
 80012f4:	0800138d 	.word	0x0800138d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d045      	beq.n	8001390 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001308:	e042      	b.n	8001390 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001312:	d13f      	bne.n	8001394 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001318:	e03c      	b.n	8001394 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001322:	d121      	bne.n	8001368 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d836      	bhi.n	8001398 <DMA_CheckFifoParam+0xd8>
 800132a:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <DMA_CheckFifoParam+0x70>)
 800132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001330:	08001341 	.word	0x08001341
 8001334:	08001347 	.word	0x08001347
 8001338:	08001341 	.word	0x08001341
 800133c:	08001359 	.word	0x08001359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
      break;
 8001344:	e02f      	b.n	80013a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d024      	beq.n	800139c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001356:	e021      	b.n	800139c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001360:	d11e      	bne.n	80013a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001366:	e01b      	b.n	80013a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d902      	bls.n	8001374 <DMA_CheckFifoParam+0xb4>
 800136e:	2b03      	cmp	r3, #3
 8001370:	d003      	beq.n	800137a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001372:	e018      	b.n	80013a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
      break;
 8001378:	e015      	b.n	80013a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00e      	beq.n	80013a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
      break;
 800138a:	e00b      	b.n	80013a4 <DMA_CheckFifoParam+0xe4>
      break;
 800138c:	bf00      	nop
 800138e:	e00a      	b.n	80013a6 <DMA_CheckFifoParam+0xe6>
      break;
 8001390:	bf00      	nop
 8001392:	e008      	b.n	80013a6 <DMA_CheckFifoParam+0xe6>
      break;
 8001394:	bf00      	nop
 8001396:	e006      	b.n	80013a6 <DMA_CheckFifoParam+0xe6>
      break;
 8001398:	bf00      	nop
 800139a:	e004      	b.n	80013a6 <DMA_CheckFifoParam+0xe6>
      break;
 800139c:	bf00      	nop
 800139e:	e002      	b.n	80013a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80013a0:	bf00      	nop
 80013a2:	e000      	b.n	80013a6 <DMA_CheckFifoParam+0xe6>
      break;
 80013a4:	bf00      	nop
    }
  } 
  
  return status; 
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	e16b      	b.n	80016a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 815a 	bne.w	80016a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x4a>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b12      	cmp	r3, #18
 80013fc:	d123      	bne.n	8001446 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	08da      	lsrs	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3208      	adds	r2, #8
 8001406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	220f      	movs	r2, #15
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	08da      	lsrs	r2, r3, #3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3208      	adds	r2, #8
 8001440:	69b9      	ldr	r1, [r7, #24]
 8001442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0203 	and.w	r2, r3, #3
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d00b      	beq.n	800149a <HAL_GPIO_Init+0xe6>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800148e:	2b11      	cmp	r3, #17
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b12      	cmp	r3, #18
 8001498:	d130      	bne.n	80014fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d0:	2201      	movs	r2, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 0201 	and.w	r2, r3, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80b4 	beq.w	80016a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b5f      	ldr	r3, [pc, #380]	; (80016bc <HAL_GPIO_Init+0x308>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a5e      	ldr	r2, [pc, #376]	; (80016bc <HAL_GPIO_Init+0x308>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <HAL_GPIO_Init+0x308>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001556:	4a5a      	ldr	r2, [pc, #360]	; (80016c0 <HAL_GPIO_Init+0x30c>)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a51      	ldr	r2, [pc, #324]	; (80016c4 <HAL_GPIO_Init+0x310>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d02b      	beq.n	80015da <HAL_GPIO_Init+0x226>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a50      	ldr	r2, [pc, #320]	; (80016c8 <HAL_GPIO_Init+0x314>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d025      	beq.n	80015d6 <HAL_GPIO_Init+0x222>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4f      	ldr	r2, [pc, #316]	; (80016cc <HAL_GPIO_Init+0x318>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d01f      	beq.n	80015d2 <HAL_GPIO_Init+0x21e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4e      	ldr	r2, [pc, #312]	; (80016d0 <HAL_GPIO_Init+0x31c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d019      	beq.n	80015ce <HAL_GPIO_Init+0x21a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4d      	ldr	r2, [pc, #308]	; (80016d4 <HAL_GPIO_Init+0x320>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x216>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4c      	ldr	r2, [pc, #304]	; (80016d8 <HAL_GPIO_Init+0x324>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00d      	beq.n	80015c6 <HAL_GPIO_Init+0x212>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <HAL_GPIO_Init+0x328>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <HAL_GPIO_Init+0x32c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_GPIO_Init+0x20a>
 80015ba:	2307      	movs	r3, #7
 80015bc:	e00e      	b.n	80015dc <HAL_GPIO_Init+0x228>
 80015be:	2308      	movs	r3, #8
 80015c0:	e00c      	b.n	80015dc <HAL_GPIO_Init+0x228>
 80015c2:	2306      	movs	r3, #6
 80015c4:	e00a      	b.n	80015dc <HAL_GPIO_Init+0x228>
 80015c6:	2305      	movs	r3, #5
 80015c8:	e008      	b.n	80015dc <HAL_GPIO_Init+0x228>
 80015ca:	2304      	movs	r3, #4
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x228>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e004      	b.n	80015dc <HAL_GPIO_Init+0x228>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e002      	b.n	80015dc <HAL_GPIO_Init+0x228>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_GPIO_Init+0x228>
 80015da:	2300      	movs	r3, #0
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	f002 0203 	and.w	r2, r2, #3
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	4093      	lsls	r3, r2
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ec:	4934      	ldr	r1, [pc, #208]	; (80016c0 <HAL_GPIO_Init+0x30c>)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015fa:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <HAL_GPIO_Init+0x330>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800161e:	4a31      	ldr	r2, [pc, #196]	; (80016e4 <HAL_GPIO_Init+0x330>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_GPIO_Init+0x330>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001648:	4a26      	ldr	r2, [pc, #152]	; (80016e4 <HAL_GPIO_Init+0x330>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_GPIO_Init+0x330>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HAL_GPIO_Init+0x330>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_GPIO_Init+0x330>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800169c:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_GPIO_Init+0x330>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	f67f ae90 	bls.w	80013d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b0:	bf00      	nop
 80016b2:	3724      	adds	r7, #36	; 0x24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40013800 	.word	0x40013800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40020c00 	.word	0x40020c00
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40021400 	.word	0x40021400
 80016dc:	40021800 	.word	0x40021800
 80016e0:	40021c00 	.word	0x40021c00
 80016e4:	40013c00 	.word	0x40013c00

080016e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e001      	b.n	800170a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001734:	e003      	b.n	800173e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	041a      	lsls	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	619a      	str	r2, [r3, #24]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e10f      	b.n	800197e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f00b fb4c 	bl	800ce10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2224      	movs	r2, #36	; 0x24
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001790:	f001 fe70 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8001794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a7b      	ldr	r2, [pc, #492]	; (8001988 <HAL_I2C_Init+0x23c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d807      	bhi.n	80017b0 <HAL_I2C_Init+0x64>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4a7a      	ldr	r2, [pc, #488]	; (800198c <HAL_I2C_Init+0x240>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	bf94      	ite	ls
 80017a8:	2301      	movls	r3, #1
 80017aa:	2300      	movhi	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	e006      	b.n	80017be <HAL_I2C_Init+0x72>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4a77      	ldr	r2, [pc, #476]	; (8001990 <HAL_I2C_Init+0x244>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	bf94      	ite	ls
 80017b8:	2301      	movls	r3, #1
 80017ba:	2300      	movhi	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0db      	b.n	800197e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4a72      	ldr	r2, [pc, #456]	; (8001994 <HAL_I2C_Init+0x248>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0c9b      	lsrs	r3, r3, #18
 80017d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4a64      	ldr	r2, [pc, #400]	; (8001988 <HAL_I2C_Init+0x23c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d802      	bhi.n	8001800 <HAL_I2C_Init+0xb4>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3301      	adds	r3, #1
 80017fe:	e009      	b.n	8001814 <HAL_I2C_Init+0xc8>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	4a63      	ldr	r2, [pc, #396]	; (8001998 <HAL_I2C_Init+0x24c>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	3301      	adds	r3, #1
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	430b      	orrs	r3, r1
 800181a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001826:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4956      	ldr	r1, [pc, #344]	; (8001988 <HAL_I2C_Init+0x23c>)
 8001830:	428b      	cmp	r3, r1
 8001832:	d80d      	bhi.n	8001850 <HAL_I2C_Init+0x104>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1e59      	subs	r1, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001842:	3301      	adds	r3, #1
 8001844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001848:	2b04      	cmp	r3, #4
 800184a:	bf38      	it	cc
 800184c:	2304      	movcc	r3, #4
 800184e:	e04f      	b.n	80018f0 <HAL_I2C_Init+0x1a4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d111      	bne.n	800187c <HAL_I2C_Init+0x130>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1e58      	subs	r0, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	440b      	add	r3, r1
 8001866:	fbb0 f3f3 	udiv	r3, r0, r3
 800186a:	3301      	adds	r3, #1
 800186c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	e012      	b.n	80018a2 <HAL_I2C_Init+0x156>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1e58      	subs	r0, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6859      	ldr	r1, [r3, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	0099      	lsls	r1, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001892:	3301      	adds	r3, #1
 8001894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf0c      	ite	eq
 800189c:	2301      	moveq	r3, #1
 800189e:	2300      	movne	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_I2C_Init+0x15e>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e022      	b.n	80018f0 <HAL_I2C_Init+0x1a4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10e      	bne.n	80018d0 <HAL_I2C_Init+0x184>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1e58      	subs	r0, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6859      	ldr	r1, [r3, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	440b      	add	r3, r1
 80018c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ce:	e00f      	b.n	80018f0 <HAL_I2C_Init+0x1a4>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1e58      	subs	r0, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	0099      	lsls	r1, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	6809      	ldr	r1, [r1, #0]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69da      	ldr	r2, [r3, #28]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800191e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6911      	ldr	r1, [r2, #16]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68d2      	ldr	r2, [r2, #12]
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	430b      	orrs	r3, r1
 8001932:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	000186a0 	.word	0x000186a0
 800198c:	001e847f 	.word	0x001e847f
 8001990:	003d08ff 	.word	0x003d08ff
 8001994:	431bde83 	.word	0x431bde83
 8001998:	10624dd3 	.word	0x10624dd3

0800199c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199e:	b08f      	sub	sp, #60	; 0x3c
 80019a0:	af0a      	add	r7, sp, #40	; 0x28
 80019a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e10f      	b.n	8001bce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d106      	bne.n	80019ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f00b fe91 	bl	800d6f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2203      	movs	r2, #3
 80019d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f005 f93c 	bl	8006c6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	687e      	ldr	r6, [r7, #4]
 80019fa:	466d      	mov	r5, sp
 80019fc:	f106 0410 	add.w	r4, r6, #16
 8001a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a10:	1d33      	adds	r3, r6, #4
 8001a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a14:	6838      	ldr	r0, [r7, #0]
 8001a16:	f005 f813 	bl	8006a40 <USB_CoreInit>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0d0      	b.n	8001bce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 f92a 	bl	8006c8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e04a      	b.n	8001ad4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	333d      	adds	r3, #61	; 0x3d
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	333c      	adds	r3, #60	; 0x3c
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	b298      	uxth	r0, r3
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	3342      	adds	r3, #66	; 0x42
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	333f      	adds	r3, #63	; 0x3f
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3344      	adds	r3, #68	; 0x44
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3348      	adds	r3, #72	; 0x48
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3350      	adds	r3, #80	; 0x50
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d3af      	bcc.n	8001a3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
 8001ae2:	e044      	b.n	8001b6e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	1a9b      	subs	r3, r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	73fb      	strb	r3, [r7, #15]
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3b5      	bcc.n	8001ae4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	687e      	ldr	r6, [r7, #4]
 8001b80:	466d      	mov	r5, sp
 8001b82:	f106 0410 	add.w	r4, r6, #16
 8001b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b92:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b96:	1d33      	adds	r3, r6, #4
 8001b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9a:	6838      	ldr	r0, [r7, #0]
 8001b9c:	f005 f8a0 	bl	8006ce0 <USB_DevInit>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00d      	b.n	8001bce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f006 f895 	bl	8007cf6 <USB_DevDisconnect>

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_PCD_Start+0x1c>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e020      	b.n	8001c34 <HAL_PCD_Start+0x5e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d109      	bne.n	8001c16 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d005      	beq.n	8001c16 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f006 f853 	bl	8007cc6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f005 f80f 	bl	8006c48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b08d      	sub	sp, #52	; 0x34
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f006 f8fa 	bl	8007e4c <USB_GetMode>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 838e 	bne.w	800237c <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f006 f85e 	bl	8007d26 <USB_ReadInterrupts>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8384 	beq.w	800237a <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f006 f855 	bl	8007d26 <USB_ReadInterrupts>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d107      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f002 0202 	and.w	r2, r2, #2
 8001c94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f006 f843 	bl	8007d26 <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001caa:	d17b      	bne.n	8001da4 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f006 f849 	bl	8007d4c <USB_ReadDevAllOutEpInterrupt>
 8001cba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001cbc:	e06f      	b.n	8001d9e <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d064      	beq.n	8001d92 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f006 f86e 	bl	8007db4 <USB_ReadDevOutEPInterrupt>
 8001cd8:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00c      	beq.n	8001cfe <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fe0d 	bl	8002918 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00c      	beq.n	8001d22 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 ff0c 	bl	8002b28 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2308      	movs	r3, #8
 8001d20:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	015a      	lsls	r2, r3, #5
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d38:	461a      	mov	r2, r3
 8001d3a:	2310      	movs	r3, #16
 8001d3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d015      	beq.n	8001d74 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d108      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	f006 f8b9 	bl	8007ed4 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2320      	movs	r3, #32
 8001d72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	3301      	adds	r3, #1
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d18c      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f005 ffbc 	bl	8007d26 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001db8:	f040 80c4 	bne.w	8001f44 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f005 ffdd 	bl	8007d80 <USB_ReadDevAllInEpInterrupt>
 8001dc6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001dcc:	e0b6      	b.n	8001f3c <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80ab 	beq.w	8001f30 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f006 f803 	bl	8007df0 <USB_ReadDevInEPInterrupt>
 8001dea:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d05b      	beq.n	8001eae <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69f9      	ldr	r1, [r7, #28]
 8001e12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e16:	4013      	ands	r3, r2
 8001e18:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e26:	461a      	mov	r2, r3
 8001e28:	2301      	movs	r3, #1
 8001e2a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d11b      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	3348      	adds	r3, #72	; 0x48
 8001e44:	6819      	ldr	r1, [r3, #0]
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4403      	add	r3, r0
 8001e54:	3344      	adds	r3, #68	; 0x44
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4419      	add	r1, r3
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4403      	add	r3, r0
 8001e68:	3348      	adds	r3, #72	; 0x48
 8001e6a:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f00b fcbd 	bl	800d7f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d116      	bne.n	8001eae <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d113      	bne.n	8001eae <HAL_PCD_IRQHandler+0x272>
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	3350      	adds	r3, #80	; 0x50
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d108      	bne.n	8001eae <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	f006 f813 	bl	8007ed4 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001efc:	461a      	mov	r2, r3
 8001efe:	2340      	movs	r3, #64	; 0x40
 8001f00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fc67 	bl	80027fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	3301      	adds	r3, #1
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f47f af45 	bne.w	8001dce <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f005 feec 	bl	8007d26 <USB_ReadInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f58:	d122      	bne.n	8001fa0 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d108      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f80:	2100      	movs	r1, #0
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fe88 	bl	8002c98 <HAL_PCDEx_LPM_Callback>
 8001f88:	e002      	b.n	8001f90 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f00b fca8 	bl	800d8e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f005 febe 	bl	8007d26 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb4:	d112      	bne.n	8001fdc <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f00b fc64 	bl	800d894 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fda:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f005 fea0 	bl	8007d26 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff0:	f040 80a7 	bne.w	8002142 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2110      	movs	r1, #16
 800200e:	4618      	mov	r0, r3
 8002010:	f004 ffd8 	bl	8006fc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002018:	e036      	b.n	8002088 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002026:	461a      	mov	r2, r3
 8002028:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800202c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800203e:	0151      	lsls	r1, r2, #5
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	440a      	add	r2, r1
 8002044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002048:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800204c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205a:	461a      	mov	r2, r3
 800205c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002060:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002072:	0151      	lsls	r1, r2, #5
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	440a      	add	r2, r1
 8002078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800207c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002080:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	3301      	adds	r3, #1
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800208e:	429a      	cmp	r2, r3
 8002090:	d3c3      	bcc.n	800201a <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d016      	beq.n	80020dc <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020be:	f043 030b 	orr.w	r3, r3, #11
 80020c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d4:	f043 030b 	orr.w	r3, r3, #11
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	e015      	b.n	8002108 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002102:	f043 030b 	orr.w	r3, r3, #11
 8002106:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002116:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800211a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800212c:	461a      	mov	r2, r3
 800212e:	f005 fed1 	bl	8007ed4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f005 fded 	bl	8007d26 <USB_ReadInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002156:	d124      	bne.n	80021a2 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f005 fe83 	bl	8007e68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f004 ff8d 	bl	8007086 <USB_GetDevSpeed>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	f001 f970 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800217c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	4620      	mov	r0, r4
 8002188:	f004 fcbc 	bl	8006b04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f00b fb58 	bl	800d842 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f005 fdbd 	bl	8007d26 <USB_ReadInterrupts>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d161      	bne.n	800227a <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0210 	bic.w	r2, r2, #16
 80021c4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f003 020f 	and.w	r2, r3, #15
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	3304      	adds	r3, #4
 80021e4:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	0c5b      	lsrs	r3, r3, #17
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d124      	bne.n	800223c <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d035      	beq.n	800226a <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800220c:	b29b      	uxth	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	6a38      	ldr	r0, [r7, #32]
 8002212:	f005 fc35 	bl	8007a80 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002222:	441a      	add	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	699a      	ldr	r2, [r3, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002234:	441a      	add	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	619a      	str	r2, [r3, #24]
 800223a:	e016      	b.n	800226a <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	0c5b      	lsrs	r3, r3, #17
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	2b06      	cmp	r3, #6
 8002246:	d110      	bne.n	800226a <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800224e:	2208      	movs	r2, #8
 8002250:	4619      	mov	r1, r3
 8002252:	6a38      	ldr	r0, [r7, #32]
 8002254:	f005 fc14 	bl	8007a80 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	699a      	ldr	r2, [r3, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002264:	441a      	add	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0210 	orr.w	r2, r2, #16
 8002278:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f005 fd51 	bl	8007d26 <USB_ReadInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b08      	cmp	r3, #8
 800228c:	d10a      	bne.n	80022a4 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f00b fac9 	bl	800d826 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f002 0208 	and.w	r2, r2, #8
 80022a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f005 fd3c 	bl	8007d26 <USB_ReadInterrupts>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b8:	d10f      	bne.n	80022da <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f00b fb2b 	bl	800d920 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f005 fd21 	bl	8007d26 <USB_ReadInterrupts>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ee:	d10f      	bne.n	8002310 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4619      	mov	r1, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f00b fafe 	bl	800d8fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800230e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f005 fd06 	bl	8007d26 <USB_ReadInterrupts>
 800231a:	4603      	mov	r3, r0
 800231c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002324:	d10a      	bne.n	800233c <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f00b fb0c 	bl	800d944 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800233a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f005 fcf0 	bl	8007d26 <USB_ReadInterrupts>
 8002346:	4603      	mov	r3, r0
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d115      	bne.n	800237c <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f00b fafc 	bl	800d960 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6859      	ldr	r1, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	430a      	orrs	r2, r1
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	e000      	b.n	800237c <HAL_PCD_IRQHandler+0x740>
      return;
 800237a:	bf00      	nop
    }
  }
}
 800237c:	3734      	adds	r7, #52	; 0x34
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}

08002382 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_PCD_SetAddress+0x1a>
 8002398:	2302      	movs	r3, #2
 800239a:	e013      	b.n	80023c4 <HAL_PCD_SetAddress+0x42>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f005 fc60 	bl	8007c7a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	70fb      	strb	r3, [r7, #3]
 80023de:	460b      	mov	r3, r1
 80023e0:	803b      	strh	r3, [r7, #0]
 80023e2:	4613      	mov	r3, r2
 80023e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	da0f      	bge.n	8002412 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	f003 020f 	and.w	r2, r3, #15
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	3338      	adds	r3, #56	; 0x38
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	3304      	adds	r3, #4
 8002408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	705a      	strb	r2, [r3, #1]
 8002410:	e00f      	b.n	8002432 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	f003 020f 	and.w	r2, r3, #15
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	3304      	adds	r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	b2da      	uxtb	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800243e:	883a      	ldrh	r2, [r7, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	78ba      	ldrb	r2, [r7, #2]
 8002448:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	785b      	ldrb	r3, [r3, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800245c:	78bb      	ldrb	r3, [r7, #2]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d102      	bne.n	8002468 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_PCD_EP_Open+0xaa>
 8002472:	2302      	movs	r3, #2
 8002474:	e00e      	b.n	8002494 <HAL_PCD_EP_Open+0xc8>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68f9      	ldr	r1, [r7, #12]
 8002484:	4618      	mov	r0, r3
 8002486:	f004 fe23 	bl	80070d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002492:	7afb      	ldrb	r3, [r7, #11]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	da0f      	bge.n	80024d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	f003 020f 	and.w	r2, r3, #15
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	3338      	adds	r3, #56	; 0x38
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	3304      	adds	r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	705a      	strb	r2, [r3, #1]
 80024ce:	e00f      	b.n	80024f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	f003 020f 	and.w	r2, r3, #15
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	3304      	adds	r3, #4
 80024e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_PCD_EP_Close+0x6e>
 8002506:	2302      	movs	r3, #2
 8002508:	e00e      	b.n	8002528 <HAL_PCD_EP_Close+0x8c>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	4618      	mov	r0, r3
 800251a:	f004 fe61 	bl	80071e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	460b      	mov	r3, r1
 800253e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	f003 020f 	and.w	r2, r3, #15
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4413      	add	r3, r2
 8002556:	3304      	adds	r3, #4
 8002558:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2200      	movs	r2, #0
 8002570:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	b2da      	uxtb	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d102      	bne.n	800258c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800258c:	7afb      	ldrb	r3, [r7, #11]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	6979      	ldr	r1, [r7, #20]
 80025a4:	f005 f8e4 	bl	8007770 <USB_EP0StartXfer>
 80025a8:	e008      	b.n	80025bc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	6979      	ldr	r1, [r7, #20]
 80025b8:	f004 fe96 	bl	80072e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f003 020f 	and.w	r2, r3, #15
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025e8:	681b      	ldr	r3, [r3, #0]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	460b      	mov	r3, r1
 8002604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002606:	7afb      	ldrb	r3, [r7, #11]
 8002608:	f003 020f 	and.w	r2, r3, #15
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	3338      	adds	r3, #56	; 0x38
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4413      	add	r3, r2
 800261a:	3304      	adds	r3, #4
 800261c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2201      	movs	r2, #1
 8002634:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002636:	7afb      	ldrb	r3, [r7, #11]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	b2da      	uxtb	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002650:	7afb      	ldrb	r3, [r7, #11]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	6979      	ldr	r1, [r7, #20]
 8002668:	f005 f882 	bl	8007770 <USB_EP0StartXfer>
 800266c:	e008      	b.n	8002680 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	6979      	ldr	r1, [r7, #20]
 800267c:	f004 fe34 	bl	80072e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	f003 020f 	and.w	r2, r3, #15
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d901      	bls.n	80026a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e050      	b.n	800274a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	da0f      	bge.n	80026d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	f003 020f 	and.w	r2, r3, #15
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	3338      	adds	r3, #56	; 0x38
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	3304      	adds	r3, #4
 80026c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	705a      	strb	r2, [r3, #1]
 80026ce:	e00d      	b.n	80026ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	3304      	adds	r3, #4
 80026e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_PCD_EP_SetStall+0x82>
 8002708:	2302      	movs	r3, #2
 800270a:	e01e      	b.n	800274a <HAL_PCD_EP_SetStall+0xc0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68f9      	ldr	r1, [r7, #12]
 800271a:	4618      	mov	r0, r3
 800271c:	f005 f9d9 	bl	8007ad2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	b2d9      	uxtb	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800273a:	461a      	mov	r2, r3
 800273c:	f005 fbca 	bl	8007ed4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	d901      	bls.n	8002770 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e042      	b.n	80027f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da0f      	bge.n	8002798 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	f003 020f 	and.w	r2, r3, #15
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	3338      	adds	r3, #56	; 0x38
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	705a      	strb	r2, [r3, #1]
 8002796:	e00f      	b.n	80027b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	f003 020f 	and.w	r2, r3, #15
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_PCD_EP_ClrStall+0x86>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e00e      	b.n	80027f6 <HAL_PCD_EP_ClrStall+0xa4>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68f9      	ldr	r1, [r7, #12]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f005 f9e1 	bl	8007bae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b08a      	sub	sp, #40	; 0x28
 8002802:	af02      	add	r7, sp, #8
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	3338      	adds	r3, #56	; 0x38
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	3304      	adds	r3, #4
 8002824:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	429a      	cmp	r2, r3
 8002830:	d901      	bls.n	8002836 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06c      	b.n	8002910 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	429a      	cmp	r2, r3
 800284a:	d902      	bls.n	8002852 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3303      	adds	r3, #3
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800285a:	e02b      	b.n	80028b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	429a      	cmp	r2, r3
 8002870:	d902      	bls.n	8002878 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	3303      	adds	r3, #3
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68d9      	ldr	r1, [r3, #12]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002890:	b2db      	uxtb	r3, r3
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	4603      	mov	r3, r0
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f005 f8bd 	bl	8007a16 <USB_WritePacket>

    ep->xfer_buff  += len;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	441a      	add	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	441a      	add	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d809      	bhi.n	80028de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d203      	bcs.n	80028de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1be      	bne.n	800285c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d811      	bhi.n	800290e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	2201      	movs	r2, #1
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	43db      	mvns	r3, r3
 8002904:	6939      	ldr	r1, [r7, #16]
 8002906:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800290a:	4013      	ands	r3, r2
 800290c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	333c      	adds	r3, #60	; 0x3c
 8002930:	3304      	adds	r3, #4
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b01      	cmp	r3, #1
 800294c:	f040 80b3 	bne.w	8002ab6 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d028      	beq.n	80029ac <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a70      	ldr	r2, [pc, #448]	; (8002b20 <PCD_EP_OutXfrComplete_int+0x208>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d90e      	bls.n	8002980 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002968:	2b00      	cmp	r3, #0
 800296a:	d009      	beq.n	8002980 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002978:	461a      	mov	r2, r3
 800297a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297e:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f00a ff09 	bl	800d798 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002990:	461a      	mov	r2, r3
 8002992:	2101      	movs	r1, #1
 8002994:	f005 fa9e 	bl	8007ed4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a4:	461a      	mov	r2, r3
 80029a6:	2308      	movs	r3, #8
 80029a8:	6093      	str	r3, [r2, #8]
 80029aa:	e0b3      	b.n	8002b14 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c2:	461a      	mov	r2, r3
 80029c4:	2320      	movs	r3, #32
 80029c6:	6093      	str	r3, [r2, #8]
 80029c8:	e0a4      	b.n	8002b14 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 809f 	bne.w	8002b14 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <PCD_EP_OutXfrComplete_int+0x208>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d90f      	bls.n	80029fe <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f4:	461a      	mov	r2, r3
 80029f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029fa:	6093      	str	r3, [r2, #8]
 80029fc:	e08a      	b.n	8002b14 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a10:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	0159      	lsls	r1, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	440b      	add	r3, r1
 8002a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002a24:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4403      	add	r3, r0
 8002a34:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a38:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4403      	add	r3, r0
 8002a5c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4419      	add	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4403      	add	r3, r0
 8002a72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a76:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f00a fe9c 	bl	800d7bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d144      	bne.n	8002b14 <PCD_EP_OutXfrComplete_int+0x1fc>
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d138      	bne.n	8002b14 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aac:	461a      	mov	r2, r3
 8002aae:	2101      	movs	r1, #1
 8002ab0:	f005 fa10 	bl	8007ed4 <USB_EP0_OutStart>
 8002ab4:	e02e      	b.n	8002b14 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <PCD_EP_OutXfrComplete_int+0x20c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d124      	bne.n	8002b08 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ada:	6093      	str	r3, [r2, #8]
 8002adc:	e01a      	b.n	8002b14 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af4:	461a      	mov	r2, r3
 8002af6:	2320      	movs	r3, #32
 8002af8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4619      	mov	r1, r3
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f00a fe5b 	bl	800d7bc <HAL_PCD_DataOutStageCallback>
 8002b06:	e005      	b.n	8002b14 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f00a fe54 	bl	800d7bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	4f54300a 	.word	0x4f54300a
 8002b24:	4f54310a 	.word	0x4f54310a

08002b28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	333c      	adds	r3, #60	; 0x3c
 8002b40:	3304      	adds	r3, #4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d113      	bne.n	8002b86 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d922      	bls.n	8002bac <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01d      	beq.n	8002bac <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b82:	6093      	str	r3, [r2, #8]
 8002b84:	e012      	b.n	8002bac <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <PCD_EP_OutSetupPacket_int+0xbc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10e      	bne.n	8002bac <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002baa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f00a fdf3 	bl	800d798 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d90c      	bls.n	8002bd4 <PCD_EP_OutSetupPacket_int+0xac>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d108      	bne.n	8002bd4 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2101      	movs	r1, #1
 8002bd0:	f005 f980 	bl	8007ed4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	4f54300a 	.word	0x4f54300a
 8002be4:	4f54310a 	.word	0x4f54310a

08002be8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c06:	883b      	ldrh	r3, [r7, #0]
 8002c08:	0419      	lsls	r1, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
 8002c14:	e028      	b.n	8002c68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4413      	add	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e00d      	b.n	8002c46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	3340      	adds	r3, #64	; 0x40
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	3301      	adds	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d3ec      	bcc.n	8002c2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c50:	883b      	ldrh	r3, [r7, #0]
 8002c52:	0418      	lsls	r0, r3, #16
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	4302      	orrs	r2, r0
 8002c60:	3340      	adds	r3, #64	; 0x40
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e22d      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d075      	beq.n	8002dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cce:	4ba3      	ldr	r3, [pc, #652]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cda:	4ba0      	ldr	r3, [pc, #640]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d112      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4b9d      	ldr	r3, [pc, #628]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf2:	d10b      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	4b99      	ldr	r3, [pc, #612]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d05b      	beq.n	8002db8 <HAL_RCC_OscConfig+0x108>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d157      	bne.n	8002db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e208      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d14:	d106      	bne.n	8002d24 <HAL_RCC_OscConfig+0x74>
 8002d16:	4b91      	ldr	r3, [pc, #580]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a90      	ldr	r2, [pc, #576]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e01d      	b.n	8002d60 <HAL_RCC_OscConfig+0xb0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x98>
 8002d2e:	4b8b      	ldr	r3, [pc, #556]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a8a      	ldr	r2, [pc, #552]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b88      	ldr	r3, [pc, #544]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a87      	ldr	r2, [pc, #540]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0xb0>
 8002d48:	4b84      	ldr	r3, [pc, #528]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a83      	ldr	r2, [pc, #524]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b81      	ldr	r3, [pc, #516]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a80      	ldr	r2, [pc, #512]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fd fe4c 	bl	8000a04 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d70:	f7fd fe48 	bl	8000a04 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e1cd      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b76      	ldr	r3, [pc, #472]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0xc0>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fd fe38 	bl	8000a04 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d98:	f7fd fe34 	bl	8000a04 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e1b9      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	4b6c      	ldr	r3, [pc, #432]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0xe8>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d063      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc6:	4b65      	ldr	r3, [pc, #404]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b62      	ldr	r3, [pc, #392]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d11c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	4b5c      	ldr	r3, [pc, #368]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x152>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e18d      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e02:	4b56      	ldr	r3, [pc, #344]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4952      	ldr	r1, [pc, #328]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	e03a      	b.n	8002e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e20:	4b4f      	ldr	r3, [pc, #316]	; (8002f60 <HAL_RCC_OscConfig+0x2b0>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fd fded 	bl	8000a04 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2e:	f7fd fde9 	bl	8000a04 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e16e      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	4b43      	ldr	r3, [pc, #268]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4940      	ldr	r1, [pc, #256]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e62:	4b3f      	ldr	r3, [pc, #252]	; (8002f60 <HAL_RCC_OscConfig+0x2b0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fd fdcc 	bl	8000a04 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e70:	f7fd fdc8 	bl	8000a04 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e14d      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d030      	beq.n	8002efc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	4b30      	ldr	r3, [pc, #192]	; (8002f64 <HAL_RCC_OscConfig+0x2b4>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fd fdac 	bl	8000a04 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7fd fda8 	bl	8000a04 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e12d      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x200>
 8002ece:	e015      	b.n	8002efc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCC_OscConfig+0x2b4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed6:	f7fd fd95 	bl	8000a04 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ede:	f7fd fd91 	bl	8000a04 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e116      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f0      	bne.n	8002ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a0 	beq.w	800304a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_OscConfig+0x2b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d121      	bne.n	8002f8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <HAL_RCC_OscConfig+0x2b8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <HAL_RCC_OscConfig+0x2b8>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fd fd57 	bl	8000a04 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e011      	b.n	8002f7e <HAL_RCC_OscConfig+0x2ce>
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	42470000 	.word	0x42470000
 8002f64:	42470e80 	.word	0x42470e80
 8002f68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6c:	f7fd fd4a 	bl	8000a04 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e0cf      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7e:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <HAL_RCC_OscConfig+0x478>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
 8002f92:	4b66      	ldr	r3, [pc, #408]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a65      	ldr	r2, [pc, #404]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9e:	e01c      	b.n	8002fda <HAL_RCC_OscConfig+0x32a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x312>
 8002fa8:	4b60      	ldr	r3, [pc, #384]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a5f      	ldr	r2, [pc, #380]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	4b5d      	ldr	r3, [pc, #372]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a5c      	ldr	r2, [pc, #368]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	e00b      	b.n	8002fda <HAL_RCC_OscConfig+0x32a>
 8002fc2:	4b5a      	ldr	r3, [pc, #360]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a59      	ldr	r2, [pc, #356]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fce:	4b57      	ldr	r3, [pc, #348]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a56      	ldr	r2, [pc, #344]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8002fd4:	f023 0304 	bic.w	r3, r3, #4
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d015      	beq.n	800300e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe2:	f7fd fd0f 	bl	8000a04 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fd fd0b 	bl	8000a04 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e08e      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	4b4a      	ldr	r3, [pc, #296]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ee      	beq.n	8002fea <HAL_RCC_OscConfig+0x33a>
 800300c:	e014      	b.n	8003038 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300e:	f7fd fcf9 	bl	8000a04 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003014:	e00a      	b.n	800302c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fd fcf5 	bl	8000a04 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e078      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302c:	4b3f      	ldr	r3, [pc, #252]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ee      	bne.n	8003016 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303e:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4a3a      	ldr	r2, [pc, #232]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8003044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003048:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d064      	beq.n	800311c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003052:	4b36      	ldr	r3, [pc, #216]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b08      	cmp	r3, #8
 800305c:	d05c      	beq.n	8003118 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d141      	bne.n	80030ea <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b32      	ldr	r3, [pc, #200]	; (8003130 <HAL_RCC_OscConfig+0x480>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fd fcca 	bl	8000a04 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003074:	f7fd fcc6 	bl	8000a04 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e04b      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	4b29      	ldr	r3, [pc, #164]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	019b      	lsls	r3, r3, #6
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	3b01      	subs	r3, #1
 80030ac:	041b      	lsls	r3, r3, #16
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	491d      	ldr	r1, [pc, #116]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <HAL_RCC_OscConfig+0x480>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fd fc9f 	bl	8000a04 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fd fc9b 	bl	8000a04 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e020      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x41a>
 80030e8:	e018      	b.n	800311c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_RCC_OscConfig+0x480>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fd fc88 	bl	8000a04 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fd fc84 	bl	8000a04 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e009      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_RCC_OscConfig+0x47c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x448>
 8003116:	e001      	b.n	800311c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40007000 	.word	0x40007000
 800312c:	40023800 	.word	0x40023800
 8003130:	42470060 	.word	0x42470060

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0ca      	b.n	80032de <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d90c      	bls.n	8003170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b64      	ldr	r3, [pc, #400]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b62      	ldr	r3, [pc, #392]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0b6      	b.n	80032de <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003188:	4b58      	ldr	r3, [pc, #352]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a57      	ldr	r2, [pc, #348]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a0:	4b52      	ldr	r3, [pc, #328]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a51      	ldr	r2, [pc, #324]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ac:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	494c      	ldr	r1, [pc, #304]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d044      	beq.n	8003254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b46      	ldr	r3, [pc, #280]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d119      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e07d      	b.n	80032de <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f2:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06d      	b.n	80032de <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	4b3a      	ldr	r3, [pc, #232]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e065      	b.n	80032de <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003212:	4b36      	ldr	r3, [pc, #216]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 0203 	bic.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4933      	ldr	r1, [pc, #204]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	4313      	orrs	r3, r2
 8003222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003224:	f7fd fbee 	bl	8000a04 <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	e00a      	b.n	8003242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322c:	f7fd fbea 	bl	8000a04 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e04d      	b.n	80032de <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 020c 	and.w	r2, r3, #12
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	429a      	cmp	r2, r3
 8003252:	d1eb      	bne.n	800322c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d20c      	bcs.n	800327c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e030      	b.n	80032de <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003288:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4915      	ldr	r1, [pc, #84]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	490d      	ldr	r1, [pc, #52]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ba:	f000 f81d 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032be:	4601      	mov	r1, r0
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	fa21 f303 	lsr.w	r3, r1, r3
 80032d2:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7fd fb50 	bl	800097c <HAL_InitTick>

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023c00 	.word	0x40023c00
 80032ec:	40023800 	.word	0x40023800
 80032f0:	0800ed34 	.word	0x0800ed34
 80032f4:	20000118 	.word	0x20000118

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	2300      	movs	r3, #0
 8003308:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800330e:	4b50      	ldr	r3, [pc, #320]	; (8003450 <HAL_RCC_GetSysClockFreq+0x158>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b04      	cmp	r3, #4
 8003318:	d007      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0x32>
 800331a:	2b08      	cmp	r3, #8
 800331c:	d008      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x38>
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 808d 	bne.w	800343e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003324:	4b4b      	ldr	r3, [pc, #300]	; (8003454 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003326:	60bb      	str	r3, [r7, #8]
       break;
 8003328:	e08c      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800332a:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <HAL_RCC_GetSysClockFreq+0x160>)
 800332c:	60bb      	str	r3, [r7, #8]
      break;
 800332e:	e089      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003330:	4b47      	ldr	r3, [pc, #284]	; (8003450 <HAL_RCC_GetSysClockFreq+0x158>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003338:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800333a:	4b45      	ldr	r3, [pc, #276]	; (8003450 <HAL_RCC_GetSysClockFreq+0x158>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d023      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003346:	4b42      	ldr	r3, [pc, #264]	; (8003450 <HAL_RCC_GetSysClockFreq+0x158>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	099b      	lsrs	r3, r3, #6
 800334c:	f04f 0400 	mov.w	r4, #0
 8003350:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	ea03 0501 	and.w	r5, r3, r1
 800335c:	ea04 0602 	and.w	r6, r4, r2
 8003360:	4a3d      	ldr	r2, [pc, #244]	; (8003458 <HAL_RCC_GetSysClockFreq+0x160>)
 8003362:	fb02 f106 	mul.w	r1, r2, r6
 8003366:	2200      	movs	r2, #0
 8003368:	fb02 f205 	mul.w	r2, r2, r5
 800336c:	440a      	add	r2, r1
 800336e:	493a      	ldr	r1, [pc, #232]	; (8003458 <HAL_RCC_GetSysClockFreq+0x160>)
 8003370:	fba5 0101 	umull	r0, r1, r5, r1
 8003374:	1853      	adds	r3, r2, r1
 8003376:	4619      	mov	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f04f 0400 	mov.w	r4, #0
 800337e:	461a      	mov	r2, r3
 8003380:	4623      	mov	r3, r4
 8003382:	f7fc ff7d 	bl	8000280 <__aeabi_uldivmod>
 8003386:	4603      	mov	r3, r0
 8003388:	460c      	mov	r4, r1
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e049      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338e:	4b30      	ldr	r3, [pc, #192]	; (8003450 <HAL_RCC_GetSysClockFreq+0x158>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	f04f 0400 	mov.w	r4, #0
 8003398:	f240 11ff 	movw	r1, #511	; 0x1ff
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	ea03 0501 	and.w	r5, r3, r1
 80033a4:	ea04 0602 	and.w	r6, r4, r2
 80033a8:	4629      	mov	r1, r5
 80033aa:	4632      	mov	r2, r6
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	f04f 0400 	mov.w	r4, #0
 80033b4:	0154      	lsls	r4, r2, #5
 80033b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033ba:	014b      	lsls	r3, r1, #5
 80033bc:	4619      	mov	r1, r3
 80033be:	4622      	mov	r2, r4
 80033c0:	1b49      	subs	r1, r1, r5
 80033c2:	eb62 0206 	sbc.w	r2, r2, r6
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	f04f 0400 	mov.w	r4, #0
 80033ce:	0194      	lsls	r4, r2, #6
 80033d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033d4:	018b      	lsls	r3, r1, #6
 80033d6:	1a5b      	subs	r3, r3, r1
 80033d8:	eb64 0402 	sbc.w	r4, r4, r2
 80033dc:	f04f 0100 	mov.w	r1, #0
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	00e2      	lsls	r2, r4, #3
 80033e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033ea:	00d9      	lsls	r1, r3, #3
 80033ec:	460b      	mov	r3, r1
 80033ee:	4614      	mov	r4, r2
 80033f0:	195b      	adds	r3, r3, r5
 80033f2:	eb44 0406 	adc.w	r4, r4, r6
 80033f6:	f04f 0100 	mov.w	r1, #0
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	02a2      	lsls	r2, r4, #10
 8003400:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003404:	0299      	lsls	r1, r3, #10
 8003406:	460b      	mov	r3, r1
 8003408:	4614      	mov	r4, r2
 800340a:	4618      	mov	r0, r3
 800340c:	4621      	mov	r1, r4
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f04f 0400 	mov.w	r4, #0
 8003414:	461a      	mov	r2, r3
 8003416:	4623      	mov	r3, r4
 8003418:	f7fc ff32 	bl	8000280 <__aeabi_uldivmod>
 800341c:	4603      	mov	r3, r0
 800341e:	460c      	mov	r4, r1
 8003420:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_GetSysClockFreq+0x158>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	3301      	adds	r3, #1
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	60bb      	str	r3, [r7, #8]
      break;
 800343c:	e002      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003440:	60bb      	str	r3, [r7, #8]
      break;
 8003442:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003444:	68bb      	ldr	r3, [r7, #8]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	00f42400 	.word	0x00f42400
 8003458:	00b71b00 	.word	0x00b71b00

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <HAL_RCC_GetHCLKFreq+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000118 	.word	0x20000118

08003474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003478:	f7ff fff0 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800347c:	4601      	mov	r1, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0a9b      	lsrs	r3, r3, #10
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4a03      	ldr	r2, [pc, #12]	; (8003498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	0800ed44 	.word	0x0800ed44

0800349c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034a0:	f7ff ffdc 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a4:	4601      	mov	r1, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0b5b      	lsrs	r3, r3, #13
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4a03      	ldr	r2, [pc, #12]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	0800ed44 	.word	0x0800ed44

080034c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d035      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034ec:	4b62      	ldr	r3, [pc, #392]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034f2:	f7fd fa87 	bl	8000a04 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034fa:	f7fd fa83 	bl	8000a04 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0b0      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800350c:	4b5b      	ldr	r3, [pc, #364]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	019a      	lsls	r2, r3, #6
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	071b      	lsls	r3, r3, #28
 8003524:	4955      	ldr	r1, [pc, #340]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800352c:	4b52      	ldr	r3, [pc, #328]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003532:	f7fd fa67 	bl	8000a04 <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800353a:	f7fd fa63 	bl	8000a04 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e090      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800354c:	4b4b      	ldr	r3, [pc, #300]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8083 	beq.w	800366c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	4b44      	ldr	r3, [pc, #272]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a43      	ldr	r2, [pc, #268]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	6413      	str	r3, [r2, #64]	; 0x40
 8003576:	4b41      	ldr	r3, [pc, #260]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003582:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a3e      	ldr	r2, [pc, #248]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800358e:	f7fd fa39 	bl	8000a04 <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003596:	f7fd fa35 	bl	8000a04 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e062      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035a8:	4b35      	ldr	r3, [pc, #212]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035b4:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d02f      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d028      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035d2:	4b2a      	ldr	r3, [pc, #168]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035dc:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035e2:	4b28      	ldr	r3, [pc, #160]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80035e8:	4a24      	ldr	r2, [pc, #144]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035ee:	4b23      	ldr	r3, [pc, #140]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d114      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fd fa03 	bl	8000a04 <HAL_GetTick>
 80035fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fd f9ff 	bl	8000a04 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e02a      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	4b18      	ldr	r3, [pc, #96]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ee      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003630:	d10d      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003646:	490d      	ldr	r1, [pc, #52]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]
 800364c:	e005      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	4a0a      	ldr	r2, [pc, #40]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003654:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003658:	6093      	str	r3, [r2, #8]
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800365c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003666:	4905      	ldr	r1, [pc, #20]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003668:	4313      	orrs	r3, r2
 800366a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	42470068 	.word	0x42470068
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000
 8003684:	42470e40 	.word	0x42470e40

08003688 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e083      	b.n	80037a2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	7f5b      	ldrb	r3, [r3, #29]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f009 fbf8 	bl	800cea0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	22ca      	movs	r2, #202	; 0xca
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2253      	movs	r2, #83	; 0x53
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f944 	bl	8003954 <RTC_EnterInitMode>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	22ff      	movs	r2, #255	; 0xff
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2204      	movs	r2, #4
 80036de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e05e      	b.n	80037a2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80036f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6899      	ldr	r1, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68d2      	ldr	r2, [r2, #12]
 800371e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6919      	ldr	r1, [r3, #16]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	041a      	lsls	r2, r3, #16
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003742:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10e      	bne.n	8003770 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8d6 	bl	8003904 <HAL_RTC_WaitForSynchro>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	22ff      	movs	r2, #255	; 0xff
 8003764:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2204      	movs	r2, #4
 800376a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e018      	b.n	80037a2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	22ff      	movs	r2, #255	; 0xff
 8003798:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037e0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380a:	b2da      	uxtb	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	0c1b      	lsrs	r3, r3, #16
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	b2da      	uxtb	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11a      	bne.n	800385c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f8be 	bl	80039ac <RTC_Bcd2ToByte>
 8003830:	4603      	mov	r3, r0
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 f8b5 	bl	80039ac <RTC_Bcd2ToByte>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	789b      	ldrb	r3, [r3, #2]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 f8ac 	bl	80039ac <RTC_Bcd2ToByte>
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003880:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003884:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	b2da      	uxtb	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	b2da      	uxtb	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	0b5b      	lsrs	r3, r3, #13
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d11a      	bne.n	80038fa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	78db      	ldrb	r3, [r3, #3]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f86f 	bl	80039ac <RTC_Bcd2ToByte>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	785b      	ldrb	r3, [r3, #1]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f866 	bl	80039ac <RTC_Bcd2ToByte>
 80038e0:	4603      	mov	r3, r0
 80038e2:	461a      	mov	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	789b      	ldrb	r3, [r3, #2]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 f85d 	bl	80039ac <RTC_Bcd2ToByte>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800391e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003920:	f7fd f870 	bl	8000a04 <HAL_GetTick>
 8003924:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003926:	e009      	b.n	800393c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003928:	f7fd f86c 	bl	8000a04 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003936:	d901      	bls.n	800393c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e007      	b.n	800394c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0ee      	beq.n	8003928 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d119      	bne.n	80039a2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f04f 32ff 	mov.w	r2, #4294967295
 8003976:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003978:	f7fd f844 	bl	8000a04 <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800397e:	e009      	b.n	8003994 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003980:	f7fd f840 	bl	8000a04 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800398e:	d901      	bls.n	8003994 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e007      	b.n	80039a4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ee      	beq.n	8003980 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	4413      	add	r3, r2
 80039da:	b2db      	uxtb	r3, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e01d      	b.n	8003a36 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d105      	bne.n	8003a12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f009 fa5d 	bl	800cecc <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2203      	movs	r2, #3
 8003a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f810 	bl	8003a40 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a40:	b5b0      	push	{r4, r5, r7, lr}
 8003a42:	b08e      	sub	sp, #56	; 0x38
 8003a44:	af04      	add	r7, sp, #16
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003a60:	2376      	movs	r3, #118	; 0x76
 8003a62:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681d      	ldr	r5, [r3, #0]
 8003a68:	466c      	mov	r4, sp
 8003a6a:	f107 0318 	add.w	r3, r7, #24
 8003a6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a76:	f107 030c 	add.w	r3, r7, #12
 8003a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f002 fa7f 	bl	8005f80 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8003a82:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_SD_InitCard+0xb4>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f002 fac0 	bl	8006012 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003a92:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <HAL_SD_InitCard+0xb4>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8003a98:	2002      	movs	r0, #2
 8003a9a:	f7fc ffbf 	bl	8000a1c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fffe 	bl	8004aa0 <SD_PowerON>
 8003aa4:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e013      	b.n	8003aec <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 ff22 	bl	800490e <SD_InitCard>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3728      	adds	r7, #40	; 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bdb0      	pop	{r4, r5, r7, pc}
 8003af4:	422580a0 	.word	0x422580a0

08003af8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	; 0x30
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0ad      	b.n	8003c7c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	f040 80a6 	bne.w	8003c7a <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	441a      	add	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d907      	bls.n	8003b52 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e094      	b.n	8003c7c <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2203      	movs	r2, #3
 8003b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	4a42      	ldr	r2, [pc, #264]	; (8003c84 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003b7c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	4a41      	ldr	r2, [pc, #260]	; (8003c88 <HAL_SD_ReadBlocks_DMA+0x190>)
 8003b84:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3380      	adds	r3, #128	; 0x80
 8003b98:	4619      	mov	r1, r3
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	025b      	lsls	r3, r3, #9
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	f7fd f91d 	bl	8000de0 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <HAL_SD_ReadBlocks_DMA+0x194>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d002      	beq.n	8003bba <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	025b      	lsls	r3, r3, #9
 8003bb8:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbe:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	025b      	lsls	r3, r3, #9
 8003bc4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003bc6:	2390      	movs	r3, #144	; 0x90
 8003bc8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f107 0214 	add.w	r2, r7, #20
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f002 fa7e 	bl	80060e2 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f002 faa3 	bl	800613a <SDMMC_CmdBlockLength>
 8003bf4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d010      	beq.n	8003c1e <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e02e      	b.n	8003c7c <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d90a      	bls.n	8003c3a <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2282      	movs	r2, #130	; 0x82
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f002 faca 	bl	80061ca <SDMMC_CmdReadMultiBlock>
 8003c36:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003c38:	e009      	b.n	8003c4e <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2281      	movs	r2, #129	; 0x81
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f002 fa9b 	bl	8006182 <SDMMC_CmdReadSingleBlock>
 8003c4c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d010      	beq.n	8003c76 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	431a      	orrs	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e002      	b.n	8003c7c <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e000      	b.n	8003c7c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8003c7a:	2302      	movs	r3, #2
  }
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3730      	adds	r7, #48	; 0x30
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	0800471f 	.word	0x0800471f
 8003c88:	0800478d 	.word	0x0800478d
 8003c8c:	4225858c 	.word	0x4225858c

08003c90 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08c      	sub	sp, #48	; 0x30
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d107      	bne.n	8003cb8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0ad      	b.n	8003e14 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f040 80a6 	bne.w	8003e12 <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	441a      	add	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d907      	bls.n	8003cea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e094      	b.n	8003e14 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2203      	movs	r2, #3
 8003cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	4a42      	ldr	r2, [pc, #264]	; (8003e1c <HAL_SD_WriteBlocks_DMA+0x18c>)
 8003d14:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	4a41      	ldr	r2, [pc, #260]	; (8003e20 <HAL_SD_WriteBlocks_DMA+0x190>)
 8003d1c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	2200      	movs	r2, #0
 8003d24:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d002      	beq.n	8003d34 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	025b      	lsls	r3, r3, #9
 8003d32:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f002 f9fc 	bl	800613a <SDMMC_CmdBlockLength>
 8003d42:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d010      	beq.n	8003d6c <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e053      	b.n	8003e14 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d90a      	bls.n	8003d88 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	22a0      	movs	r2, #160	; 0xa0
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 fa6b 	bl	800625a <SDMMC_CmdWriteMultiBlock>
 8003d84:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003d86:	e009      	b.n	8003d9c <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2290      	movs	r2, #144	; 0x90
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f002 fa3c 	bl	8006212 <SDMMC_CmdWriteSingleBlock>
 8003d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db2:	431a      	orrs	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e027      	b.n	8003e14 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003dc4:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3380      	adds	r3, #128	; 0x80
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	025b      	lsls	r3, r3, #9
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	f7fc ffff 	bl	8000de0 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	025b      	lsls	r3, r3, #9
 8003dec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003dee:	2390      	movs	r3, #144	; 0x90
 8003df0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003df2:	2300      	movs	r3, #0
 8003df4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f107 0214 	add.w	r2, r7, #20
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f002 f96a 	bl	80060e2 <SDIO_ConfigData>
    
    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3730      	adds	r7, #48	; 0x30
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	080046f5 	.word	0x080046f5
 8003e20:	0800478d 	.word	0x0800478d
 8003e24:	4225858c 	.word	0x4225858c

08003e28 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 808d 	beq.w	8003f5e <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003e5c:	f023 0302 	bic.w	r3, r3, #2
 8003e60:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d03a      	beq.n	8003ee4 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d105      	bne.n	8003e86 <HAL_SD_IRQHandler+0x5e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d011      	beq.n	8003eaa <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f002 fa0a 	bl	80062a4 <SDMMC_CmdStopTransfer>
 8003e90:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f925 	bl	80040f4 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_SD_IRQHandler+0xac>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f007 ff2d 	bl	800bd34 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8003eda:	e103      	b.n	80040e4 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f007 ff1f 	bl	800bd20 <HAL_SD_TxCpltCallback>
}
 8003ee2:	e0ff      	b.n	80040e4 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80f9 	beq.w	80040e4 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d011      	beq.n	8003f22 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f002 f9ce 	bl	80062a4 <SDMMC_CmdStopTransfer>
 8003f08:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f8e9 	bl	80040f4 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f040 80da 	bne.w	80040e4 <HAL_SD_IRQHandler+0x2bc>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f040 80d3 	bne.w	80040e4 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0208 	bic.w	r2, r2, #8
 8003f4c:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f007 fee2 	bl	800bd20 <HAL_SD_TxCpltCallback>
}
 8003f5c:	e0c2      	b.n	80040e4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 ffef 	bl	8004f5a <SD_Write_IT>
}
 8003f7c:	e0b2      	b.n	80040e4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f94:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 ffb7 	bl	8004f0a <SD_Read_IT>
}
 8003f9c:	e0a2      	b.n	80040e4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa4:	f240 233a 	movw	r3, #570	; 0x23a
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 809a 	beq.w	80040e4 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	f043 0202 	orr.w	r2, r3, #2
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	f043 0208 	orr.w	r2, r3, #8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	f043 0220 	orr.w	r2, r3, #32
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	f043 0210 	orr.w	r2, r3, #16
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	f043 0208 	orr.w	r2, r3, #8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800404a:	f023 0302 	bic.w	r3, r3, #2
 800404e:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d036      	beq.n	80040ca <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	2b00      	cmp	r3, #0
 8004062:	d011      	beq.n	8004088 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	4a20      	ldr	r2, [pc, #128]	; (80040ec <HAL_SD_IRQHandler+0x2c4>)
 800406a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	4618      	mov	r0, r3
 8004072:	f7fc ff15 	bl	8000ea0 <HAL_DMA_Abort_IT>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d033      	beq.n	80040e4 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fbc8 	bl	8004816 <SD_DMATxAbort>
}
 8004086:	e02d      	b.n	80040e4 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d011      	beq.n	80040b4 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <HAL_SD_IRQHandler+0x2c8>)
 8004096:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	4618      	mov	r0, r3
 800409e:	f7fc feff 	bl	8000ea0 <HAL_DMA_Abort_IT>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01d      	beq.n	80040e4 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fbf0 	bl	8004892 <SD_DMARxAbort>
}
 80040b2:	e017      	b.n	80040e4 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f007 fe22 	bl	800bd0c <HAL_SD_AbortCallback>
}
 80040c8:	e00c      	b.n	80040e4 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d006      	beq.n	80040e4 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f808 	bl	80040f4 <HAL_SD_ErrorCallback>
}
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	08004817 	.word	0x08004817
 80040f0:	08004893 	.word	0x08004893

080040f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411a:	0e1b      	lsrs	r3, r3, #24
 800411c:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	099b      	lsrs	r3, r3, #6
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	b2da      	uxtb	r2, r3
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	b2da      	uxtb	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	b2da      	uxtb	r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	b2db      	uxtb	r3, r3
 8004154:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	b2db      	uxtb	r3, r3
 8004166:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004174:	b2db      	uxtb	r3, r3
 8004176:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004184:	0e1b      	lsrs	r3, r3, #24
 8004186:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	b29b      	uxth	r3, r3
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	b29a      	uxth	r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	b2db      	uxtb	r3, r3
 800419c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	88db      	ldrh	r3, [r3, #6]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	09db      	lsrs	r3, r3, #7
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	099b      	lsrs	r3, r3, #6
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 8087 	bne.w	800432e <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	029b      	lsls	r3, r3, #10
 8004224:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004230:	b2db      	uxtb	r3, r3
 8004232:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	431a      	orrs	r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004246:	0e1b      	lsrs	r3, r3, #24
 8004248:	b2db      	uxtb	r3, r3
 800424a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	431a      	orrs	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	b2da      	uxtb	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	b2da      	uxtb	r2, r3
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004280:	0c1b      	lsrs	r3, r3, #16
 8004282:	b2db      	uxtb	r3, r3
 8004284:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	b2da      	uxtb	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	b2db      	uxtb	r3, r3
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f003 0306 	and.w	r3, r3, #6
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	7e1b      	ldrb	r3, [r3, #24]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	09db      	lsrs	r3, r3, #7
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	4313      	orrs	r3, r2
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	7e1b      	ldrb	r3, [r3, #24]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	3302      	adds	r3, #2
 80042ee:	2201      	movs	r2, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042f8:	fb02 f203 	mul.w	r2, r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	7a1b      	ldrb	r3, [r3, #8]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	2301      	movs	r3, #1
 800430a:	fa03 f202 	lsl.w	r2, r3, r2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800431a:	0a52      	lsrs	r2, r2, #9
 800431c:	fb02 f203 	mul.w	r2, r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800432a:	661a      	str	r2, [r3, #96]	; 0x60
 800432c:	e04d      	b.n	80043ca <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	2b01      	cmp	r3, #1
 8004334:	d138      	bne.n	80043a8 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800433a:	b2db      	uxtb	r3, r3
 800433c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434e:	0e1b      	lsrs	r3, r3, #24
 8004350:	b2db      	uxtb	r3, r3
 8004352:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	431a      	orrs	r2, r3
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004366:	0c1b      	lsrs	r3, r3, #16
 8004368:	b2db      	uxtb	r3, r3
 800436a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	431a      	orrs	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437c:	0a1b      	lsrs	r3, r3, #8
 800437e:	b2db      	uxtb	r3, r3
 8004380:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	3301      	adds	r3, #1
 8004388:	029a      	lsls	r2, r3, #10
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	655a      	str	r2, [r3, #84]	; 0x54
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800439c:	659a      	str	r2, [r3, #88]	; 0x58
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	661a      	str	r2, [r3, #96]	; 0x60
 80043a6:	e010      	b.n	80043ca <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e0c1      	b.n	800454e <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	099b      	lsrs	r3, r3, #6
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	7e9b      	ldrb	r3, [r3, #26]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	09db      	lsrs	r3, r3, #7
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	b2db      	uxtb	r3, r3
 8004406:	4313      	orrs	r3, r2
 8004408:	b2da      	uxtb	r2, r3
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004416:	b2da      	uxtb	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	0e1b      	lsrs	r3, r3, #24
 8004422:	b2db      	uxtb	r3, r3
 8004424:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	09db      	lsrs	r3, r3, #7
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	b2da      	uxtb	r2, r3
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	b2da      	uxtb	r2, r3
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	089b      	lsrs	r3, r3, #2
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	b2da      	uxtb	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	b2db      	uxtb	r3, r3
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	b2da      	uxtb	r2, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	b2db      	uxtb	r3, r3
 8004470:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	7fdb      	ldrb	r3, [r3, #31]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	099b      	lsrs	r3, r3, #6
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	4313      	orrs	r3, r2
 8004486:	b2da      	uxtb	r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	b2db      	uxtb	r3, r3
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	b2da      	uxtb	r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	09db      	lsrs	r3, r3, #7
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	099b      	lsrs	r3, r3, #6
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	091b      	lsrs	r3, r3, #4
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	b2da      	uxtb	r2, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	089b      	lsrs	r3, r3, #2
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	b2da      	uxtb	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	b2da      	uxtb	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	b2db      	uxtb	r3, r3
 8004530:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453c:	b2da      	uxtb	r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80045b2:	b5b0      	push	{r4, r5, r7, lr}
 80045b4:	b08e      	sub	sp, #56	; 0x38
 80045b6:	af04      	add	r7, sp, #16
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2203      	movs	r2, #3
 80045c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d02e      	beq.n	800462e <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d6:	d106      	bne.n	80045e6 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
 80045e4:	e029      	b.n	800463a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ec:	d10a      	bne.n	8004604 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fb28 	bl	8004c44 <SD_WideBus_Enable>
 80045f4:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
 8004602:	e01a      	b.n	800463a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fb67 	bl	8004cde <SD_WideBus_Disable>
 8004610:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
 800461e:	e00c      	b.n	800463a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
 800462c:	e005      	b.n	800463a <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e024      	b.n	80046a2 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681d      	ldr	r5, [r3, #0]
 800467e:	466c      	mov	r4, sp
 8004680:	f107 0318 	add.w	r3, r7, #24
 8004684:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800468c:	f107 030c 	add.w	r3, r7, #12
 8004690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004692:	4628      	mov	r0, r5
 8004694:	f001 fc74 	bl	8005f80 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3728      	adds	r7, #40	; 0x28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bdb0      	pop	{r4, r5, r7, pc}

080046aa <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80046b2:	2304      	movs	r3, #4
 80046b4:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80046be:	f107 030c 	add.w	r3, r7, #12
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fa93 	bl	8004bf0 <SD_SendStatus>
 80046ca:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	0a5b      	lsrs	r3, r3, #9
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004710:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800472c:	2300      	movs	r3, #0
 800472e:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	2b82      	cmp	r3, #130	; 0x82
 8004736:	d111      	bne.n	800475c <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f001 fdb1 	bl	80062a4 <SDMMC_CmdStopTransfer>
 8004742:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	431a      	orrs	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7ff fccc 	bl	80040f4 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0208 	bic.w	r2, r2, #8
 800476a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004774:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f007 fad8 	bl	800bd34 <HAL_SD_RxCpltCallback>
#endif
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d004      	beq.n	80047ae <SD_DMAError+0x22>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d12c      	bne.n	8004808 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80047c6:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff ff68 	bl	80046aa <HAL_SD_GetCardState>
 80047da:	4603      	mov	r3, r0
 80047dc:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80047de:	7afb      	ldrb	r3, [r7, #11]
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d002      	beq.n	80047ea <SD_DMAError+0x5e>
 80047e4:	7afb      	ldrb	r3, [r7, #11]
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	d10a      	bne.n	8004800 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 fd58 	bl	80062a4 <SDMMC_CmdStopTransfer>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	431a      	orrs	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7ff fc73 	bl	80040f4 <HAL_SD_ErrorCallback>
#endif
}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d127      	bne.n	800488a <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff ff35 	bl	80046aa <HAL_SD_GetCardState>
 8004840:	4603      	mov	r3, r0
 8004842:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004852:	7afb      	ldrb	r3, [r7, #11]
 8004854:	2b06      	cmp	r3, #6
 8004856:	d002      	beq.n	800485e <SD_DMATxAbort+0x48>
 8004858:	7afb      	ldrb	r3, [r7, #11]
 800485a:	2b05      	cmp	r3, #5
 800485c:	d115      	bne.n	800488a <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f001 fd1e 	bl	80062a4 <SDMMC_CmdStopTransfer>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	431a      	orrs	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f007 fa45 	bl	800bd0c <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8004882:	e002      	b.n	800488a <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff fc35 	bl	80040f4 <HAL_SD_ErrorCallback>
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d127      	bne.n	8004906 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff fef7 	bl	80046aa <HAL_SD_GetCardState>
 80048bc:	4603      	mov	r3, r0
 80048be:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80048ce:	7afb      	ldrb	r3, [r7, #11]
 80048d0:	2b06      	cmp	r3, #6
 80048d2:	d002      	beq.n	80048da <SD_DMARxAbort+0x48>
 80048d4:	7afb      	ldrb	r3, [r7, #11]
 80048d6:	2b05      	cmp	r3, #5
 80048d8:	d115      	bne.n	8004906 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 fce0 	bl	80062a4 <SDMMC_CmdStopTransfer>
 80048e4:	4602      	mov	r2, r0
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	431a      	orrs	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f007 fa07 	bl	800bd0c <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 80048fe:	e002      	b.n	8004906 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7ff fbf7 	bl	80040f4 <HAL_SD_ErrorCallback>
}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800490e:	b5b0      	push	{r4, r5, r7, lr}
 8004910:	b094      	sub	sp, #80	; 0x50
 8004912:	af04      	add	r7, sp, #16
 8004914:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004916:	2300      	movs	r3, #0
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800491a:	2301      	movs	r3, #1
 800491c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f001 fb83 	bl	800602e <SDIO_GetPowerState>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d102      	bne.n	8004934 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800492e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004932:	e0b1      	b.n	8004a98 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004938:	2b03      	cmp	r3, #3
 800493a:	d02f      	beq.n	800499c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f001 fdc9 	bl	80064d8 <SDMMC_CmdSendCID>
 8004946:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <SD_InitCard+0x44>
    {
      return errorstate;
 800494e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004950:	e0a2      	b.n	8004a98 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f001 fbad 	bl	80060b8 <SDIO_GetResponse>
 800495e:	4602      	mov	r2, r0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2104      	movs	r1, #4
 800496a:	4618      	mov	r0, r3
 800496c:	f001 fba4 	bl	80060b8 <SDIO_GetResponse>
 8004970:	4602      	mov	r2, r0
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2108      	movs	r1, #8
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fb9b 	bl	80060b8 <SDIO_GetResponse>
 8004982:	4602      	mov	r2, r0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	210c      	movs	r1, #12
 800498e:	4618      	mov	r0, r3
 8004990:	f001 fb92 	bl	80060b8 <SDIO_GetResponse>
 8004994:	4602      	mov	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d00d      	beq.n	80049c0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f107 020e 	add.w	r2, r7, #14
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f001 fdd3 	bl	800655a <SDMMC_CmdSetRelAdd>
 80049b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <SD_InitCard+0xb2>
    {
      return errorstate;
 80049bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049be:	e06b      	b.n	8004a98 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d036      	beq.n	8004a36 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80049c8:	89fb      	ldrh	r3, [r7, #14]
 80049ca:	461a      	mov	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	4619      	mov	r1, r3
 80049dc:	4610      	mov	r0, r2
 80049de:	f001 fd9b 	bl	8006518 <SDMMC_CmdSendCSD>
 80049e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <SD_InitCard+0xe0>
    {
      return errorstate;
 80049ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ec:	e054      	b.n	8004a98 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 fb5f 	bl	80060b8 <SDIO_GetResponse>
 80049fa:	4602      	mov	r2, r0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2104      	movs	r1, #4
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 fb56 	bl	80060b8 <SDIO_GetResponse>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2108      	movs	r1, #8
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 fb4d 	bl	80060b8 <SDIO_GetResponse>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	210c      	movs	r1, #12
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 fb44 	bl	80060b8 <SDIO_GetResponse>
 8004a30:	4602      	mov	r2, r0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2104      	movs	r1, #4
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 fb3b 	bl	80060b8 <SDIO_GetResponse>
 8004a42:	4603      	mov	r3, r0
 8004a44:	0d1a      	lsrs	r2, r3, #20
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004a4a:	f107 0310 	add.w	r3, r7, #16
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff fb59 	bl	8004108 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6819      	ldr	r1, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	f04f 0400 	mov.w	r4, #0
 8004a64:	461a      	mov	r2, r3
 8004a66:	4623      	mov	r3, r4
 8004a68:	4608      	mov	r0, r1
 8004a6a:	f001 fc3f 	bl	80062ec <SDMMC_CmdSelDesel>
 8004a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <SD_InitCard+0x16c>
  {
    return errorstate;
 8004a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a78:	e00e      	b.n	8004a98 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681d      	ldr	r5, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	466c      	mov	r4, sp
 8004a82:	f103 0210 	add.w	r2, r3, #16
 8004a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a90:	4628      	mov	r0, r5
 8004a92:	f001 fa75 	bl	8005f80 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3740      	adds	r7, #64	; 0x40
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bdb0      	pop	{r4, r5, r7, pc}

08004aa0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 fc3a 	bl	8006336 <SDMMC_CmdGoIdleState>
 8004ac2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <SD_PowerON+0x2e>
  {
    return errorstate;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	e08c      	b.n	8004be8 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 fc4f 	bl	8006376 <SDMMC_CmdOperCond>
 8004ad8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d03d      	beq.n	8004b5c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8004ae6:	e032      	b.n	8004b4e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	60ba      	str	r2, [r7, #8]
 8004aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d102      	bne.n	8004afc <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004afa:	e075      	b.n	8004be8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 fc58 	bl	80063b8 <SDMMC_CmdAppCommand>
 8004b08:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b14:	e068      	b.n	8004be8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 fc6f 	bl	8006400 <SDMMC_CmdAppOperCommand>
 8004b22:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b2e:	e05b      	b.n	8004be8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 fabe 	bl	80060b8 <SDIO_GetResponse>
 8004b3c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	0fdb      	lsrs	r3, r3, #31
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <SD_PowerON+0xaa>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <SD_PowerON+0xac>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0c9      	beq.n	8004ae8 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	645a      	str	r2, [r3, #68]	; 0x44
 8004b5a:	e044      	b.n	8004be6 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8004b62:	e031      	b.n	8004bc8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	60ba      	str	r2, [r7, #8]
 8004b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d102      	bne.n	8004b78 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b76:	e037      	b.n	8004be8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 fc1a 	bl	80063b8 <SDMMC_CmdAppCommand>
 8004b84:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <SD_PowerON+0xf0>
      {
        return errorstate;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	e02b      	b.n	8004be8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 fc31 	bl	8006400 <SDMMC_CmdAppOperCommand>
 8004b9e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <SD_PowerON+0x10a>
      {
        return errorstate;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	e01e      	b.n	8004be8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 fa81 	bl	80060b8 <SDIO_GetResponse>
 8004bb6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	0fdb      	lsrs	r3, r3, #31
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <SD_PowerON+0x124>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <SD_PowerON+0x126>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0ca      	beq.n	8004b64 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
 8004bde:	e002      	b.n	8004be6 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8004c04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c08:	e018      	b.n	8004c3c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	041b      	lsls	r3, r3, #16
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f001 fcc2 	bl	80065a0 <SDMMC_CmdSendStatus>
 8004c1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <SD_SendStatus+0x38>
  {
    return errorstate;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	e009      	b.n	8004c3c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 fa42 	bl	80060b8 <SDIO_GetResponse>
 8004c34:	4602      	mov	r2, r0
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	2300      	movs	r3, #0
 8004c52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 fa2a 	bl	80060b8 <SDIO_GetResponse>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c6e:	d102      	bne.n	8004c76 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c74:	e02f      	b.n	8004cd6 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c76:	f107 030c 	add.w	r3, r7, #12
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f87b 	bl	8004d78 <SD_FindSCR>
 8004c82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	e023      	b.n	8004cd6 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01c      	beq.n	8004cd2 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f001 fb87 	bl	80063b8 <SDMMC_CmdAppCommand>
 8004caa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	e00f      	b.n	8004cd6 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2102      	movs	r1, #2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 fbc4 	bl	800644a <SDMMC_CmdBusWidth>
 8004cc2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	e003      	b.n	8004cd6 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e001      	b.n	8004cd6 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 f9dd 	bl	80060b8 <SDIO_GetResponse>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d08:	d102      	bne.n	8004d10 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d0e:	e02f      	b.n	8004d70 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004d10:	f107 030c 	add.w	r3, r7, #12
 8004d14:	4619      	mov	r1, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f82e 	bl	8004d78 <SD_FindSCR>
 8004d1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	e023      	b.n	8004d70 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01c      	beq.n	8004d6c <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f001 fb3a 	bl	80063b8 <SDMMC_CmdAppCommand>
 8004d44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	e00f      	b.n	8004d70 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 fb77 	bl	800644a <SDMMC_CmdBusWidth>
 8004d5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	e003      	b.n	8004d70 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e001      	b.n	8004d70 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b08f      	sub	sp, #60	; 0x3c
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004d86:	f7fb fe3d 	bl	8000a04 <HAL_GetTick>
 8004d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2108      	movs	r1, #8
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 f9cb 	bl	800613a <SDMMC_CmdBlockLength>
 8004da4:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	e0a8      	b.n	8004f02 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f001 fafb 	bl	80063b8 <SDMMC_CmdAppCommand>
 8004dc2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <SD_FindSCR+0x56>
  {
    return errorstate;
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	e099      	b.n	8004f02 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004dd8:	2330      	movs	r3, #48	; 0x30
 8004dda:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f107 0214 	add.w	r2, r7, #20
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f001 f975 	bl	80060e2 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 fb48 	bl	8006492 <SDMMC_CmdSendSCR>
 8004e02:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d022      	beq.n	8004e50 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	e079      	b.n	8004f02 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00e      	beq.n	8004e3a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6819      	ldr	r1, [r3, #0]
 8004e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	f107 020c 	add.w	r2, r7, #12
 8004e28:	18d4      	adds	r4, r2, r3
 8004e2a:	4608      	mov	r0, r1
 8004e2c:	f001 f8d3 	bl	8005fd6 <SDIO_ReadFIFO>
 8004e30:	4603      	mov	r3, r0
 8004e32:	6023      	str	r3, [r4, #0]
      index++;
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	3301      	adds	r3, #1
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004e3a:	f7fb fde3 	bl	8000a04 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d102      	bne.n	8004e50 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004e4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e4e:	e058      	b.n	8004f02 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e56:	f240 432a 	movw	r3, #1066	; 0x42a
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0d6      	beq.n	8004e0e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2208      	movs	r2, #8
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004e76:	2308      	movs	r3, #8
 8004e78:	e043      	b.n	8004f02 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e90:	2302      	movs	r3, #2
 8004e92:	e036      	b.n	8004f02 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8004eaa:	2320      	movs	r3, #32
 8004eac:	e029      	b.n	8004f02 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	061a      	lsls	r2, r3, #24
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ec4:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004ece:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8004eda:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004edc:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	061a      	lsls	r2, r3, #24
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004eea:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8004ef4:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	0e1b      	lsrs	r3, r3, #24
 8004efa:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	373c      	adds	r7, #60	; 0x3c
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd90      	pop	{r4, r7, pc}

08004f0a <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004f0a:	b590      	push	{r4, r7, lr}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	e00d      	b.n	8004f3e <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6819      	ldr	r1, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	18d4      	adds	r4, r2, r3
 8004f2e:	4608      	mov	r0, r1
 8004f30:	f001 f851 	bl	8005fd6 <SDIO_ReadFIFO>
 8004f34:	4603      	mov	r3, r0
 8004f36:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b07      	cmp	r3, #7
 8004f42:	d9ee      	bls.n	8004f22 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	f103 0220 	add.w	r2, r3, #32
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd90      	pop	{r4, r7, pc}

08004f5a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e00b      	b.n	8004f8a <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	f001 f836 	bl	8005ff0 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b07      	cmp	r3, #7
 8004f8e:	d9f0      	bls.n	8004f72 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f103 0220 	add.w	r2, r3, #32
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e056      	b.n	8005066 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f008 f87a 	bl	800d0cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	ea42 0103 	orr.w	r1, r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	0c1b      	lsrs	r3, r3, #16
 8005036:	f003 0104 	and.w	r1, r3, #4
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005054:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e01d      	b.n	80050bc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f008 f861 	bl	800d15c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f000 f9e1 	bl	8005474 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b06      	cmp	r3, #6
 80050e4:	d007      	beq.n	80050f6 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e01d      	b.n	800515a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f815 	bl	8005162 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f000 f992 	bl	8005474 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800518e:	2302      	movs	r3, #2
 8005190:	e0b4      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x184>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2202      	movs	r2, #2
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b0c      	cmp	r3, #12
 80051a6:	f200 809f 	bhi.w	80052e8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051e5 	.word	0x080051e5
 80051b4:	080052e9 	.word	0x080052e9
 80051b8:	080052e9 	.word	0x080052e9
 80051bc:	080052e9 	.word	0x080052e9
 80051c0:	08005225 	.word	0x08005225
 80051c4:	080052e9 	.word	0x080052e9
 80051c8:	080052e9 	.word	0x080052e9
 80051cc:	080052e9 	.word	0x080052e9
 80051d0:	08005267 	.word	0x08005267
 80051d4:	080052e9 	.word	0x080052e9
 80051d8:	080052e9 	.word	0x080052e9
 80051dc:	080052e9 	.word	0x080052e9
 80051e0:	080052a7 	.word	0x080052a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 f9e2 	bl	80055b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0208 	orr.w	r2, r2, #8
 80051fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0204 	bic.w	r2, r2, #4
 800520e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6999      	ldr	r1, [r3, #24]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	619a      	str	r2, [r3, #24]
      break;
 8005222:	e062      	b.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fa32 	bl	8005694 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6999      	ldr	r1, [r3, #24]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	021a      	lsls	r2, r3, #8
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	619a      	str	r2, [r3, #24]
      break;
 8005264:	e041      	b.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fa87 	bl	8005780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0208 	orr.w	r2, r2, #8
 8005280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0204 	bic.w	r2, r2, #4
 8005290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69d9      	ldr	r1, [r3, #28]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	61da      	str	r2, [r3, #28]
      break;
 80052a4:	e021      	b.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fadb 	bl	8005868 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69d9      	ldr	r1, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	021a      	lsls	r2, r3, #8
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	61da      	str	r2, [r3, #28]
      break;
 80052e6:	e000      	b.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80052e8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_TIM_ConfigClockSource+0x18>
 8005318:	2302      	movs	r3, #2
 800531a:	e0a6      	b.n	800546a <HAL_TIM_ConfigClockSource+0x166>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800533a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005342:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b40      	cmp	r3, #64	; 0x40
 8005352:	d067      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0x120>
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d80b      	bhi.n	8005370 <HAL_TIM_ConfigClockSource+0x6c>
 8005358:	2b10      	cmp	r3, #16
 800535a:	d073      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x140>
 800535c:	2b10      	cmp	r3, #16
 800535e:	d802      	bhi.n	8005366 <HAL_TIM_ConfigClockSource+0x62>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d06f      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005364:	e078      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005366:	2b20      	cmp	r3, #32
 8005368:	d06c      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x140>
 800536a:	2b30      	cmp	r3, #48	; 0x30
 800536c:	d06a      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800536e:	e073      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005370:	2b70      	cmp	r3, #112	; 0x70
 8005372:	d00d      	beq.n	8005390 <HAL_TIM_ConfigClockSource+0x8c>
 8005374:	2b70      	cmp	r3, #112	; 0x70
 8005376:	d804      	bhi.n	8005382 <HAL_TIM_ConfigClockSource+0x7e>
 8005378:	2b50      	cmp	r3, #80	; 0x50
 800537a:	d033      	beq.n	80053e4 <HAL_TIM_ConfigClockSource+0xe0>
 800537c:	2b60      	cmp	r3, #96	; 0x60
 800537e:	d041      	beq.n	8005404 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005380:	e06a      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005386:	d066      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x152>
 8005388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538c:	d017      	beq.n	80053be <HAL_TIM_ConfigClockSource+0xba>
      break;
 800538e:	e063      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	6899      	ldr	r1, [r3, #8]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f000 fb32 	bl	8005a08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	609a      	str	r2, [r3, #8]
      break;
 80053bc:	e04c      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6899      	ldr	r1, [r3, #8]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f000 fb1b 	bl	8005a08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e0:	609a      	str	r2, [r3, #8]
      break;
 80053e2:	e039      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	6859      	ldr	r1, [r3, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	461a      	mov	r2, r3
 80053f2:	f000 fa8f 	bl	8005914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2150      	movs	r1, #80	; 0x50
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fae8 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 8005402:	e029      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	6859      	ldr	r1, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	461a      	mov	r2, r3
 8005412:	f000 faae 	bl	8005972 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2160      	movs	r1, #96	; 0x60
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fad8 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 8005422:	e019      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	461a      	mov	r2, r3
 8005432:	f000 fa6f 	bl	8005914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2140      	movs	r1, #64	; 0x40
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fac8 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 8005442:	e009      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f000 fabf 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 8005454:	e000      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a40      	ldr	r2, [pc, #256]	; (8005588 <TIM_Base_SetConfig+0x114>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d013      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005492:	d00f      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a3d      	ldr	r2, [pc, #244]	; (800558c <TIM_Base_SetConfig+0x118>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00b      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a3c      	ldr	r2, [pc, #240]	; (8005590 <TIM_Base_SetConfig+0x11c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a3b      	ldr	r2, [pc, #236]	; (8005594 <TIM_Base_SetConfig+0x120>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a3a      	ldr	r2, [pc, #232]	; (8005598 <TIM_Base_SetConfig+0x124>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d108      	bne.n	80054c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2f      	ldr	r2, [pc, #188]	; (8005588 <TIM_Base_SetConfig+0x114>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d02b      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d4:	d027      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2c      	ldr	r2, [pc, #176]	; (800558c <TIM_Base_SetConfig+0x118>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d023      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2b      	ldr	r2, [pc, #172]	; (8005590 <TIM_Base_SetConfig+0x11c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01f      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a2a      	ldr	r2, [pc, #168]	; (8005594 <TIM_Base_SetConfig+0x120>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01b      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a29      	ldr	r2, [pc, #164]	; (8005598 <TIM_Base_SetConfig+0x124>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d017      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a28      	ldr	r2, [pc, #160]	; (800559c <TIM_Base_SetConfig+0x128>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a27      	ldr	r2, [pc, #156]	; (80055a0 <TIM_Base_SetConfig+0x12c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00f      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a26      	ldr	r2, [pc, #152]	; (80055a4 <TIM_Base_SetConfig+0x130>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00b      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a25      	ldr	r2, [pc, #148]	; (80055a8 <TIM_Base_SetConfig+0x134>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d007      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a24      	ldr	r2, [pc, #144]	; (80055ac <TIM_Base_SetConfig+0x138>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a23      	ldr	r2, [pc, #140]	; (80055b0 <TIM_Base_SetConfig+0x13c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d108      	bne.n	8005538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <TIM_Base_SetConfig+0x114>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_Base_SetConfig+0xf8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a0c      	ldr	r2, [pc, #48]	; (8005598 <TIM_Base_SetConfig+0x124>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d103      	bne.n	8005574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	615a      	str	r2, [r3, #20]
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40010000 	.word	0x40010000
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40000c00 	.word	0x40000c00
 8005598:	40010400 	.word	0x40010400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800
 80055a8:	40001800 	.word	0x40001800
 80055ac:	40001c00 	.word	0x40001c00
 80055b0:	40002000 	.word	0x40002000

080055b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0303 	bic.w	r3, r3, #3
 80055ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f023 0302 	bic.w	r3, r3, #2
 80055fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a20      	ldr	r2, [pc, #128]	; (800568c <TIM_OC1_SetConfig+0xd8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_OC1_SetConfig+0x64>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <TIM_OC1_SetConfig+0xdc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d10c      	bne.n	8005632 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 0308 	bic.w	r3, r3, #8
 800561e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f023 0304 	bic.w	r3, r3, #4
 8005630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a15      	ldr	r2, [pc, #84]	; (800568c <TIM_OC1_SetConfig+0xd8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <TIM_OC1_SetConfig+0x8e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a14      	ldr	r2, [pc, #80]	; (8005690 <TIM_OC1_SetConfig+0xdc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d111      	bne.n	8005666 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	621a      	str	r2, [r3, #32]
}
 8005680:	bf00      	nop
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	40010000 	.word	0x40010000
 8005690:	40010400 	.word	0x40010400

08005694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f023 0210 	bic.w	r2, r3, #16
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	021b      	lsls	r3, r3, #8
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f023 0320 	bic.w	r3, r3, #32
 80056de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a22      	ldr	r2, [pc, #136]	; (8005778 <TIM_OC2_SetConfig+0xe4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d003      	beq.n	80056fc <TIM_OC2_SetConfig+0x68>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a21      	ldr	r2, [pc, #132]	; (800577c <TIM_OC2_SetConfig+0xe8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d10d      	bne.n	8005718 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005716:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a17      	ldr	r2, [pc, #92]	; (8005778 <TIM_OC2_SetConfig+0xe4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_OC2_SetConfig+0x94>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a16      	ldr	r2, [pc, #88]	; (800577c <TIM_OC2_SetConfig+0xe8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d113      	bne.n	8005750 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800572e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005736:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40010400 	.word	0x40010400

08005780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0303 	bic.w	r3, r3, #3
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a21      	ldr	r2, [pc, #132]	; (8005860 <TIM_OC3_SetConfig+0xe0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_OC3_SetConfig+0x66>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a20      	ldr	r2, [pc, #128]	; (8005864 <TIM_OC3_SetConfig+0xe4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10d      	bne.n	8005802 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a16      	ldr	r2, [pc, #88]	; (8005860 <TIM_OC3_SetConfig+0xe0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_OC3_SetConfig+0x92>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a15      	ldr	r2, [pc, #84]	; (8005864 <TIM_OC3_SetConfig+0xe4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d113      	bne.n	800583a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	621a      	str	r2, [r3, #32]
}
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	40010000 	.word	0x40010000
 8005864:	40010400 	.word	0x40010400

08005868 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	031b      	lsls	r3, r3, #12
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a12      	ldr	r2, [pc, #72]	; (800590c <TIM_OC4_SetConfig+0xa4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_OC4_SetConfig+0x68>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a11      	ldr	r2, [pc, #68]	; (8005910 <TIM_OC4_SetConfig+0xa8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d109      	bne.n	80058e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	019b      	lsls	r3, r3, #6
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000
 8005910:	40010400 	.word	0x40010400

08005914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f023 0201 	bic.w	r2, r3, #1
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800593e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f023 030a 	bic.w	r3, r3, #10
 8005950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4313      	orrs	r3, r2
 8005958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005972:	b480      	push	{r7}
 8005974:	b087      	sub	sp, #28
 8005976:	af00      	add	r7, sp, #0
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	f023 0210 	bic.w	r2, r3, #16
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800599c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	031b      	lsls	r3, r3, #12
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f043 0307 	orr.w	r3, r3, #7
 80059f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	609a      	str	r2, [r3, #8]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	021a      	lsls	r2, r3, #8
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e032      	b.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a98:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e03f      	b.n	8005b64 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d106      	bne.n	8005afe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f007 fbdd 	bl	800d2b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2224      	movs	r2, #36	; 0x24
 8005b02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b14:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f828 	bl	8005b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b3a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b4a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b6c:	b5b0      	push	{r4, r5, r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005bac:	f023 030c 	bic.w	r3, r3, #12
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	68f9      	ldr	r1, [r7, #12]
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699a      	ldr	r2, [r3, #24]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd8:	f040 80e4 	bne.w	8005da4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4aab      	ldr	r2, [pc, #684]	; (8005e90 <UART_SetConfig+0x324>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <UART_SetConfig+0x84>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4aaa      	ldr	r2, [pc, #680]	; (8005e94 <UART_SetConfig+0x328>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d16c      	bne.n	8005cca <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005bf0:	f7fd fc54 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009a      	lsls	r2, r3, #2
 8005bfe:	441a      	add	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0a:	4aa3      	ldr	r2, [pc, #652]	; (8005e98 <UART_SetConfig+0x32c>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	011c      	lsls	r4, r3, #4
 8005c14:	f7fd fc42 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009a      	lsls	r2, r3, #2
 8005c22:	441a      	add	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c2e:	f7fd fc35 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8005c32:	4602      	mov	r2, r0
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	009a      	lsls	r2, r3, #2
 8005c3c:	441a      	add	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c48:	4a93      	ldr	r2, [pc, #588]	; (8005e98 <UART_SetConfig+0x32c>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	2264      	movs	r2, #100	; 0x64
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	1aeb      	subs	r3, r5, r3
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	3332      	adds	r3, #50	; 0x32
 8005c5c:	4a8e      	ldr	r2, [pc, #568]	; (8005e98 <UART_SetConfig+0x32c>)
 8005c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c6a:	441c      	add	r4, r3
 8005c6c:	f7fd fc16 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8005c70:	4602      	mov	r2, r0
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	009a      	lsls	r2, r3, #2
 8005c7a:	441a      	add	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c86:	f7fd fc09 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	009a      	lsls	r2, r3, #2
 8005c94:	441a      	add	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	4a7d      	ldr	r2, [pc, #500]	; (8005e98 <UART_SetConfig+0x32c>)
 8005ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	2264      	movs	r2, #100	; 0x64
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
 8005cae:	1aeb      	subs	r3, r5, r3
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	3332      	adds	r3, #50	; 0x32
 8005cb4:	4a78      	ldr	r2, [pc, #480]	; (8005e98 <UART_SetConfig+0x32c>)
 8005cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	f003 0207 	and.w	r2, r3, #7
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4422      	add	r2, r4
 8005cc6:	609a      	str	r2, [r3, #8]
 8005cc8:	e154      	b.n	8005f74 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005cca:	f7fd fbd3 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009a      	lsls	r2, r3, #2
 8005cd8:	441a      	add	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce4:	4a6c      	ldr	r2, [pc, #432]	; (8005e98 <UART_SetConfig+0x32c>)
 8005ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	011c      	lsls	r4, r3, #4
 8005cee:	f7fd fbc1 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009a      	lsls	r2, r3, #2
 8005cfc:	441a      	add	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	fbb2 f5f3 	udiv	r5, r2, r3
 8005d08:	f7fd fbb4 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009a      	lsls	r2, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	4a5d      	ldr	r2, [pc, #372]	; (8005e98 <UART_SetConfig+0x32c>)
 8005d24:	fba2 2303 	umull	r2, r3, r2, r3
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	2264      	movs	r2, #100	; 0x64
 8005d2c:	fb02 f303 	mul.w	r3, r2, r3
 8005d30:	1aeb      	subs	r3, r5, r3
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	3332      	adds	r3, #50	; 0x32
 8005d36:	4a58      	ldr	r2, [pc, #352]	; (8005e98 <UART_SetConfig+0x32c>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d44:	441c      	add	r4, r3
 8005d46:	f7fd fb95 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	009a      	lsls	r2, r3, #2
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005d60:	f7fd fb88 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8005d64:	4602      	mov	r2, r0
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009a      	lsls	r2, r3, #2
 8005d6e:	441a      	add	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7a:	4a47      	ldr	r2, [pc, #284]	; (8005e98 <UART_SetConfig+0x32c>)
 8005d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	2264      	movs	r2, #100	; 0x64
 8005d84:	fb02 f303 	mul.w	r3, r2, r3
 8005d88:	1aeb      	subs	r3, r5, r3
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	3332      	adds	r3, #50	; 0x32
 8005d8e:	4a42      	ldr	r2, [pc, #264]	; (8005e98 <UART_SetConfig+0x32c>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f003 0207 	and.w	r2, r3, #7
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4422      	add	r2, r4
 8005da0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005da2:	e0e7      	b.n	8005f74 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a39      	ldr	r2, [pc, #228]	; (8005e90 <UART_SetConfig+0x324>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <UART_SetConfig+0x24c>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a38      	ldr	r2, [pc, #224]	; (8005e94 <UART_SetConfig+0x328>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d171      	bne.n	8005e9c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005db8:	f7fd fb70 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009a      	lsls	r2, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd2:	4a31      	ldr	r2, [pc, #196]	; (8005e98 <UART_SetConfig+0x32c>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	011c      	lsls	r4, r3, #4
 8005ddc:	f7fd fb5e 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009a      	lsls	r2, r3, #2
 8005dea:	441a      	add	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	fbb2 f5f3 	udiv	r5, r2, r3
 8005df6:	f7fd fb51 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009a      	lsls	r2, r3, #2
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e10:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <UART_SetConfig+0x32c>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	2264      	movs	r2, #100	; 0x64
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	1aeb      	subs	r3, r5, r3
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	3332      	adds	r3, #50	; 0x32
 8005e24:	4a1c      	ldr	r2, [pc, #112]	; (8005e98 <UART_SetConfig+0x32c>)
 8005e26:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e30:	441c      	add	r4, r3
 8005e32:	f7fd fb33 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8005e36:	4602      	mov	r2, r0
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009a      	lsls	r2, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	fbb2 f5f3 	udiv	r5, r2, r3
 8005e4c:	f7fd fb26 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8005e50:	4602      	mov	r2, r0
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	009a      	lsls	r2, r3, #2
 8005e5a:	441a      	add	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	4a0c      	ldr	r2, [pc, #48]	; (8005e98 <UART_SetConfig+0x32c>)
 8005e68:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	2264      	movs	r2, #100	; 0x64
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
 8005e74:	1aeb      	subs	r3, r5, r3
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	3332      	adds	r3, #50	; 0x32
 8005e7a:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <UART_SetConfig+0x32c>)
 8005e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	f003 020f 	and.w	r2, r3, #15
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4422      	add	r2, r4
 8005e8c:	609a      	str	r2, [r3, #8]
 8005e8e:	e071      	b.n	8005f74 <UART_SetConfig+0x408>
 8005e90:	40011000 	.word	0x40011000
 8005e94:	40011400 	.word	0x40011400
 8005e98:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005e9c:	f7fd faea 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009a      	lsls	r2, r3, #2
 8005eaa:	441a      	add	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb6:	4a31      	ldr	r2, [pc, #196]	; (8005f7c <UART_SetConfig+0x410>)
 8005eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	011c      	lsls	r4, r3, #4
 8005ec0:	f7fd fad8 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009a      	lsls	r2, r3, #2
 8005ece:	441a      	add	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	fbb2 f5f3 	udiv	r5, r2, r3
 8005eda:	f7fd facb 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009a      	lsls	r2, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef4:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <UART_SetConfig+0x410>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	2264      	movs	r2, #100	; 0x64
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
 8005f02:	1aeb      	subs	r3, r5, r3
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	3332      	adds	r3, #50	; 0x32
 8005f08:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <UART_SetConfig+0x410>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f14:	441c      	add	r4, r3
 8005f16:	f7fd faad 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009a      	lsls	r2, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005f30:	f7fd faa0 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009a      	lsls	r2, r3, #2
 8005f3e:	441a      	add	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4a:	4a0c      	ldr	r2, [pc, #48]	; (8005f7c <UART_SetConfig+0x410>)
 8005f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	2264      	movs	r2, #100	; 0x64
 8005f54:	fb02 f303 	mul.w	r3, r2, r3
 8005f58:	1aeb      	subs	r3, r5, r3
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	3332      	adds	r3, #50	; 0x32
 8005f5e:	4a07      	ldr	r2, [pc, #28]	; (8005f7c <UART_SetConfig+0x410>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	f003 020f 	and.w	r2, r3, #15
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4422      	add	r2, r4
 8005f70:	609a      	str	r2, [r3, #8]
}
 8005f72:	e7ff      	b.n	8005f74 <UART_SetConfig+0x408>
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f7c:	51eb851f 	.word	0x51eb851f

08005f80 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005f80:	b084      	sub	sp, #16
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	f107 001c 	add.w	r0, r7, #28
 8005f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005f96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005f98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005f9a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005f9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005fa2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005fa6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005faa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005fba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	b004      	add	sp, #16
 8005fd4:	4770      	bx	lr

08005fd6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2203      	movs	r2, #3
 800601e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0303 	and.w	r3, r3, #3
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006068:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800606e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006074:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006084:	f023 030f 	bic.w	r3, r3, #15
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	b2db      	uxtb	r3, r3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3314      	adds	r3, #20
 80060ca:	461a      	mov	r2, r3
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	4413      	add	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
}  
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006108:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800610e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006114:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4313      	orrs	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800612c:	2300      	movs	r3, #0

}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b088      	sub	sp, #32
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800614c:	2310      	movs	r3, #16
 800614e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006150:	2340      	movs	r3, #64	; 0x40
 8006152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800615c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800615e:	f107 0308 	add.w	r3, r7, #8
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff ff70 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800616a:	f241 3288 	movw	r2, #5000	; 0x1388
 800616e:	2110      	movs	r1, #16
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fa63 	bl	800663c <SDMMC_GetCmdResp1>
 8006176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006178:	69fb      	ldr	r3, [r7, #28]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3720      	adds	r7, #32
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b088      	sub	sp, #32
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800618c:	2300      	movs	r3, #0
 800618e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006194:	2311      	movs	r3, #17
 8006196:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006198:	2340      	movs	r3, #64	; 0x40
 800619a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061a4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061a6:	f107 0308 	add.w	r3, r7, #8
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff ff4c 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80061b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b6:	2111      	movs	r1, #17
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fa3f 	bl	800663c <SDMMC_GetCmdResp1>
 80061be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061c0:	69fb      	ldr	r3, [r7, #28]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3720      	adds	r7, #32
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b088      	sub	sp, #32
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80061dc:	2312      	movs	r3, #18
 80061de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061e0:	2340      	movs	r3, #64	; 0x40
 80061e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ec:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061ee:	f107 0308 	add.w	r3, r7, #8
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff ff28 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80061fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80061fe:	2112      	movs	r1, #18
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fa1b 	bl	800663c <SDMMC_GetCmdResp1>
 8006206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006208:	69fb      	ldr	r3, [r7, #28]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b088      	sub	sp, #32
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800621c:	2300      	movs	r3, #0
 800621e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006224:	2318      	movs	r3, #24
 8006226:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006228:	2340      	movs	r3, #64	; 0x40
 800622a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800622c:	2300      	movs	r3, #0
 800622e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006234:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006236:	f107 0308 	add.w	r3, r7, #8
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff ff04 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006242:	f241 3288 	movw	r2, #5000	; 0x1388
 8006246:	2118      	movs	r1, #24
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f9f7 	bl	800663c <SDMMC_GetCmdResp1>
 800624e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006250:	69fb      	ldr	r3, [r7, #28]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b088      	sub	sp, #32
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006264:	2300      	movs	r3, #0
 8006266:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800626c:	2319      	movs	r3, #25
 800626e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006270:	2340      	movs	r3, #64	; 0x40
 8006272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800627c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800627e:	f107 0308 	add.w	r3, r7, #8
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff fee0 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800628a:	f241 3288 	movw	r2, #5000	; 0x1388
 800628e:	2119      	movs	r1, #25
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f9d3 	bl	800663c <SDMMC_GetCmdResp1>
 8006296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006298:	69fb      	ldr	r3, [r7, #28]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80062ac:	2300      	movs	r3, #0
 80062ae:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80062b4:	230c      	movs	r3, #12
 80062b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062b8:	2340      	movs	r3, #64	; 0x40
 80062ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062c6:	f107 0308 	add.w	r3, r7, #8
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff febc 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 80062d2:	4a05      	ldr	r2, [pc, #20]	; (80062e8 <SDMMC_CmdStopTransfer+0x44>)
 80062d4:	210c      	movs	r1, #12
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f9b0 	bl	800663c <SDMMC_GetCmdResp1>
 80062dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062de:	69fb      	ldr	r3, [r7, #28]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3720      	adds	r7, #32
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	05f5e100 	.word	0x05f5e100

080062ec <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	; 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006300:	2307      	movs	r3, #7
 8006302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006304:	2340      	movs	r3, #64	; 0x40
 8006306:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800630c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006310:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006312:	f107 0310 	add.w	r3, r7, #16
 8006316:	4619      	mov	r1, r3
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f7ff fe96 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800631e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006322:	2107      	movs	r1, #7
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f989 	bl	800663c <SDMMC_GetCmdResp1>
 800632a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800632e:	4618      	mov	r0, r3
 8006330:	3728      	adds	r7, #40	; 0x28
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b088      	sub	sp, #32
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800634a:	2300      	movs	r3, #0
 800634c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006356:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006358:	f107 0308 	add.w	r3, r7, #8
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fe73 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f93f 	bl	80065e8 <SDMMC_GetCmdError>
 800636a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800636c:	69fb      	ldr	r3, [r7, #28]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b088      	sub	sp, #32
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800637e:	2300      	movs	r3, #0
 8006380:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006382:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006388:	2308      	movs	r3, #8
 800638a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800638c:	2340      	movs	r3, #64	; 0x40
 800638e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006398:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800639a:	f107 0308 	add.w	r3, r7, #8
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fe52 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fb10 	bl	80069cc <SDMMC_GetCmdResp7>
 80063ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063ae:	69fb      	ldr	r3, [r7, #28]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80063ca:	2337      	movs	r3, #55	; 0x37
 80063cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063ce:	2340      	movs	r3, #64	; 0x40
 80063d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063d2:	2300      	movs	r3, #0
 80063d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063da:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063dc:	f107 0308 	add.w	r3, r7, #8
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff fe31 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80063e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ec:	2137      	movs	r1, #55	; 0x37
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f924 	bl	800663c <SDMMC_GetCmdResp1>
 80063f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063f6:	69fb      	ldr	r3, [r7, #28]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3720      	adds	r7, #32
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800641a:	2329      	movs	r3, #41	; 0x29
 800641c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800641e:	2340      	movs	r3, #64	; 0x40
 8006420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800642a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800642c:	f107 0308 	add.w	r3, r7, #8
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff fe09 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fa25 	bl	8006888 <SDMMC_GetCmdResp3>
 800643e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006440:	69fb      	ldr	r3, [r7, #28]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3720      	adds	r7, #32
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b088      	sub	sp, #32
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006454:	2300      	movs	r3, #0
 8006456:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800645c:	2306      	movs	r3, #6
 800645e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006460:	2340      	movs	r3, #64	; 0x40
 8006462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800646c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800646e:	f107 0308 	add.w	r3, r7, #8
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fde8 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800647a:	f241 3288 	movw	r2, #5000	; 0x1388
 800647e:	2106      	movs	r1, #6
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f8db 	bl	800663c <SDMMC_GetCmdResp1>
 8006486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006488:	69fb      	ldr	r3, [r7, #28]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b088      	sub	sp, #32
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800649a:	2300      	movs	r3, #0
 800649c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80064a2:	2333      	movs	r3, #51	; 0x33
 80064a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064a6:	2340      	movs	r3, #64	; 0x40
 80064a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064b4:	f107 0308 	add.w	r3, r7, #8
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fdc5 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80064c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c4:	2133      	movs	r1, #51	; 0x33
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8b8 	bl	800663c <SDMMC_GetCmdResp1>
 80064cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064ce:	69fb      	ldr	r3, [r7, #28]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80064e8:	2302      	movs	r3, #2
 80064ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80064ec:	23c0      	movs	r3, #192	; 0xc0
 80064ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064f8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064fa:	f107 0308 	add.w	r3, r7, #8
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff fda2 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f97e 	bl	8006808 <SDMMC_GetCmdResp2>
 800650c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800650e:	69fb      	ldr	r3, [r7, #28]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3720      	adds	r7, #32
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006522:	2300      	movs	r3, #0
 8006524:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800652a:	2309      	movs	r3, #9
 800652c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800652e:	23c0      	movs	r3, #192	; 0xc0
 8006530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800653a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800653c:	f107 0308 	add.w	r3, r7, #8
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff fd81 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f95d 	bl	8006808 <SDMMC_GetCmdResp2>
 800654e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006550:	69fb      	ldr	r3, [r7, #28]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b088      	sub	sp, #32
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006564:	2300      	movs	r3, #0
 8006566:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800656c:	2303      	movs	r3, #3
 800656e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006570:	2340      	movs	r3, #64	; 0x40
 8006572:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800657c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800657e:	f107 0308 	add.w	r3, r7, #8
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff fd60 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	2103      	movs	r1, #3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9ae 	bl	80068f0 <SDMMC_GetCmdResp6>
 8006594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006596:	69fb      	ldr	r3, [r7, #28]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3720      	adds	r7, #32
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80065b2:	230d      	movs	r3, #13
 80065b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065b6:	2340      	movs	r3, #64	; 0x40
 80065b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065ba:	2300      	movs	r3, #0
 80065bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065c4:	f107 0308 	add.w	r3, r7, #8
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff fd3d 	bl	800604a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80065d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d4:	210d      	movs	r1, #13
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f830 	bl	800663c <SDMMC_GetCmdResp1>
 80065dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065de:	69fb      	ldr	r3, [r7, #28]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3720      	adds	r7, #32
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80065e8:	b490      	push	{r4, r7}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065f0:	4b10      	ldr	r3, [pc, #64]	; (8006634 <SDMMC_GetCmdError+0x4c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a10      	ldr	r2, [pc, #64]	; (8006638 <SDMMC_GetCmdError+0x50>)
 80065f6:	fba2 2303 	umull	r2, r3, r2, r3
 80065fa:	0a5b      	lsrs	r3, r3, #9
 80065fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006600:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006604:	4623      	mov	r3, r4
 8006606:	1e5c      	subs	r4, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d102      	bne.n	8006612 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800660c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006610:	e00a      	b.n	8006628 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f2      	beq.n	8006604 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bc90      	pop	{r4, r7}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20000118 	.word	0x20000118
 8006638:	10624dd3 	.word	0x10624dd3

0800663c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	460b      	mov	r3, r1
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800664a:	4b6c      	ldr	r3, [pc, #432]	; (80067fc <SDMMC_GetCmdResp1+0x1c0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a6c      	ldr	r2, [pc, #432]	; (8006800 <SDMMC_GetCmdResp1+0x1c4>)
 8006650:	fba2 2303 	umull	r2, r3, r2, r3
 8006654:	0a5b      	lsrs	r3, r3, #9
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800665c:	4623      	mov	r3, r4
 800665e:	1e5c      	subs	r4, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d102      	bne.n	800666a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006664:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006668:	e0c3      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0f2      	beq.n	800665c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2204      	movs	r2, #4
 8006686:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006688:	2304      	movs	r3, #4
 800668a:	e0b2      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800669e:	2301      	movs	r3, #1
 80066a0:	e0a7      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff fcfb 	bl	800609e <SDIO_GetCommandResponse>
 80066a8:	4603      	mov	r3, r0
 80066aa:	461a      	mov	r2, r3
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d001      	beq.n	80066b6 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e09d      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80066be:	2100      	movs	r1, #0
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff fcf9 	bl	80060b8 <SDIO_GetResponse>
 80066c6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4b4e      	ldr	r3, [pc, #312]	; (8006804 <SDMMC_GetCmdResp1+0x1c8>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e08d      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	da02      	bge.n	80066e2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80066dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066e0:	e087      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80066ec:	2340      	movs	r3, #64	; 0x40
 80066ee:	e080      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80066fa:	2380      	movs	r3, #128	; 0x80
 80066fc:	e079      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800670c:	e071      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800671c:	e069      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800672c:	e061      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006738:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800673c:	e059      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800674c:	e051      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800675c:	e049      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006768:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800676c:	e041      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8006778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677c:	e039      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800678c:	e031      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006798:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800679c:	e029      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80067a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80067ac:	e021      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80067b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067bc:	e019      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80067c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80067cc:	e011      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80067d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067dc:	e009      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80067e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80067ec:	e001      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd90      	pop	{r4, r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000118 	.word	0x20000118
 8006800:	10624dd3 	.word	0x10624dd3
 8006804:	fdffe008 	.word	0xfdffe008

08006808 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006808:	b490      	push	{r4, r7}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006810:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <SDMMC_GetCmdResp2+0x78>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1b      	ldr	r2, [pc, #108]	; (8006884 <SDMMC_GetCmdResp2+0x7c>)
 8006816:	fba2 2303 	umull	r2, r3, r2, r3
 800681a:	0a5b      	lsrs	r3, r3, #9
 800681c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006820:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006824:	4623      	mov	r3, r4
 8006826:	1e5c      	subs	r4, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800682c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006830:	e020      	b.n	8006874 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006836:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f2      	beq.n	8006824 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d004      	beq.n	8006854 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2204      	movs	r2, #4
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006850:	2304      	movs	r3, #4
 8006852:	e00f      	b.n	8006874 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006866:	2301      	movs	r3, #1
 8006868:	e004      	b.n	8006874 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bc90      	pop	{r4, r7}
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	20000118 	.word	0x20000118
 8006884:	10624dd3 	.word	0x10624dd3

08006888 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006888:	b490      	push	{r4, r7}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006890:	4b15      	ldr	r3, [pc, #84]	; (80068e8 <SDMMC_GetCmdResp3+0x60>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a15      	ldr	r2, [pc, #84]	; (80068ec <SDMMC_GetCmdResp3+0x64>)
 8006896:	fba2 2303 	umull	r2, r3, r2, r3
 800689a:	0a5b      	lsrs	r3, r3, #9
 800689c:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80068a4:	4623      	mov	r3, r4
 80068a6:	1e5c      	subs	r4, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d102      	bne.n	80068b2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068b0:	e015      	b.n	80068de <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0f2      	beq.n	80068a4 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d004      	beq.n	80068d4 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2204      	movs	r2, #4
 80068ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068d0:	2304      	movs	r3, #4
 80068d2:	e004      	b.n	80068de <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80068da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc90      	pop	{r4, r7}
 80068e6:	4770      	bx	lr
 80068e8:	20000118 	.word	0x20000118
 80068ec:	10624dd3 	.word	0x10624dd3

080068f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	460b      	mov	r3, r1
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <SDMMC_GetCmdResp6+0xd4>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a31      	ldr	r2, [pc, #196]	; (80069c8 <SDMMC_GetCmdResp6+0xd8>)
 8006904:	fba2 2303 	umull	r2, r3, r2, r3
 8006908:	0a5b      	lsrs	r3, r3, #9
 800690a:	f241 3288 	movw	r2, #5000	; 0x1388
 800690e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006912:	4623      	mov	r3, r4
 8006914:	1e5c      	subs	r4, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d102      	bne.n	8006920 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800691a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800691e:	e04c      	b.n	80069ba <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006924:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0f2      	beq.n	8006912 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2204      	movs	r2, #4
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800693e:	2304      	movs	r3, #4
 8006940:	e03b      	b.n	80069ba <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006954:	2301      	movs	r3, #1
 8006956:	e030      	b.n	80069ba <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7ff fba0 	bl	800609e <SDIO_GetCommandResponse>
 800695e:	4603      	mov	r3, r0
 8006960:	461a      	mov	r2, r3
 8006962:	7afb      	ldrb	r3, [r7, #11]
 8006964:	4293      	cmp	r3, r2
 8006966:	d001      	beq.n	800696c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006968:	2301      	movs	r3, #1
 800696a:	e026      	b.n	80069ba <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006972:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006974:	2100      	movs	r1, #0
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff fb9e 	bl	80060b8 <SDIO_GetResponse>
 800697c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	0c1b      	lsrs	r3, r3, #16
 800698c:	b29a      	uxth	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006992:	2300      	movs	r3, #0
 8006994:	e011      	b.n	80069ba <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80069a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069a4:	e009      	b.n	80069ba <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80069b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069b4:	e001      	b.n	80069ba <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80069b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd90      	pop	{r4, r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000118 	.word	0x20000118
 80069c8:	10624dd3 	.word	0x10624dd3

080069cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80069cc:	b490      	push	{r4, r7}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80069d4:	4b18      	ldr	r3, [pc, #96]	; (8006a38 <SDMMC_GetCmdResp7+0x6c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <SDMMC_GetCmdResp7+0x70>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	0a5b      	lsrs	r3, r3, #9
 80069e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80069e8:	4623      	mov	r3, r4
 80069ea:	1e5c      	subs	r4, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d102      	bne.n	80069f6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80069f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80069f4:	e01a      	b.n	8006a2c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f2      	beq.n	80069e8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d004      	beq.n	8006a18 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2240      	movs	r2, #64	; 0x40
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a14:	2304      	movs	r3, #4
 8006a16:	e009      	b.n	8006a2c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2240      	movs	r2, #64	; 0x40
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006a2a:	2300      	movs	r3, #0
  
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc90      	pop	{r4, r7}
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	20000118 	.word	0x20000118
 8006a3c:	10624dd3 	.word	0x10624dd3

08006a40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a40:	b084      	sub	sp, #16
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	f107 001c 	add.w	r0, r7, #28
 8006a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d122      	bne.n	8006a9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d105      	bne.n	8006a92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fa7c 	bl	8007f90 <USB_CoreReset>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]
 8006a9c:	e01a      	b.n	8006ad4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 fa70 	bl	8007f90 <USB_CoreReset>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	639a      	str	r2, [r3, #56]	; 0x38
 8006ac6:	e005      	b.n	8006ad4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006acc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d10b      	bne.n	8006af2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f043 0206 	orr.w	r2, r3, #6
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f043 0220 	orr.w	r2, r3, #32
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006afe:	b004      	add	sp, #16
 8006b00:	4770      	bx	lr
	...

08006b04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d165      	bne.n	8006be4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4a41      	ldr	r2, [pc, #260]	; (8006c20 <USB_SetTurnaroundTime+0x11c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d906      	bls.n	8006b2e <USB_SetTurnaroundTime+0x2a>
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4a40      	ldr	r2, [pc, #256]	; (8006c24 <USB_SetTurnaroundTime+0x120>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d802      	bhi.n	8006b2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b28:	230f      	movs	r3, #15
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e062      	b.n	8006bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4a3c      	ldr	r2, [pc, #240]	; (8006c24 <USB_SetTurnaroundTime+0x120>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d906      	bls.n	8006b44 <USB_SetTurnaroundTime+0x40>
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	4a3b      	ldr	r2, [pc, #236]	; (8006c28 <USB_SetTurnaroundTime+0x124>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d802      	bhi.n	8006b44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b3e:	230e      	movs	r3, #14
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	e057      	b.n	8006bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4a38      	ldr	r2, [pc, #224]	; (8006c28 <USB_SetTurnaroundTime+0x124>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d906      	bls.n	8006b5a <USB_SetTurnaroundTime+0x56>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4a37      	ldr	r2, [pc, #220]	; (8006c2c <USB_SetTurnaroundTime+0x128>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d802      	bhi.n	8006b5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b54:	230d      	movs	r3, #13
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e04c      	b.n	8006bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4a33      	ldr	r2, [pc, #204]	; (8006c2c <USB_SetTurnaroundTime+0x128>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d906      	bls.n	8006b70 <USB_SetTurnaroundTime+0x6c>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	4a32      	ldr	r2, [pc, #200]	; (8006c30 <USB_SetTurnaroundTime+0x12c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d802      	bhi.n	8006b70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	e041      	b.n	8006bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4a2f      	ldr	r2, [pc, #188]	; (8006c30 <USB_SetTurnaroundTime+0x12c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d906      	bls.n	8006b86 <USB_SetTurnaroundTime+0x82>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4a2e      	ldr	r2, [pc, #184]	; (8006c34 <USB_SetTurnaroundTime+0x130>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d802      	bhi.n	8006b86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b80:	230b      	movs	r3, #11
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e036      	b.n	8006bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	4a2a      	ldr	r2, [pc, #168]	; (8006c34 <USB_SetTurnaroundTime+0x130>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d906      	bls.n	8006b9c <USB_SetTurnaroundTime+0x98>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	4a29      	ldr	r2, [pc, #164]	; (8006c38 <USB_SetTurnaroundTime+0x134>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d802      	bhi.n	8006b9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b96:	230a      	movs	r3, #10
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	e02b      	b.n	8006bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4a26      	ldr	r2, [pc, #152]	; (8006c38 <USB_SetTurnaroundTime+0x134>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d906      	bls.n	8006bb2 <USB_SetTurnaroundTime+0xae>
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4a25      	ldr	r2, [pc, #148]	; (8006c3c <USB_SetTurnaroundTime+0x138>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d802      	bhi.n	8006bb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006bac:	2309      	movs	r3, #9
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e020      	b.n	8006bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	4a21      	ldr	r2, [pc, #132]	; (8006c3c <USB_SetTurnaroundTime+0x138>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d906      	bls.n	8006bc8 <USB_SetTurnaroundTime+0xc4>
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	4a20      	ldr	r2, [pc, #128]	; (8006c40 <USB_SetTurnaroundTime+0x13c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d802      	bhi.n	8006bc8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	e015      	b.n	8006bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <USB_SetTurnaroundTime+0x13c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d906      	bls.n	8006bde <USB_SetTurnaroundTime+0xda>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4a1c      	ldr	r2, [pc, #112]	; (8006c44 <USB_SetTurnaroundTime+0x140>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d802      	bhi.n	8006bde <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006bd8:	2307      	movs	r3, #7
 8006bda:	617b      	str	r3, [r7, #20]
 8006bdc:	e00a      	b.n	8006bf4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006bde:	2306      	movs	r3, #6
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	e007      	b.n	8006bf4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d102      	bne.n	8006bf0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006bea:	2309      	movs	r3, #9
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e001      	b.n	8006bf4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006bf0:	2309      	movs	r3, #9
 8006bf2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	029b      	lsls	r3, r3, #10
 8006c08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	371c      	adds	r7, #28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	00d8acbf 	.word	0x00d8acbf
 8006c24:	00e4e1bf 	.word	0x00e4e1bf
 8006c28:	00f423ff 	.word	0x00f423ff
 8006c2c:	0106737f 	.word	0x0106737f
 8006c30:	011a499f 	.word	0x011a499f
 8006c34:	01312cff 	.word	0x01312cff
 8006c38:	014ca43f 	.word	0x014ca43f
 8006c3c:	016e35ff 	.word	0x016e35ff
 8006c40:	01a6ab1f 	.word	0x01a6ab1f
 8006c44:	01e847ff 	.word	0x01e847ff

08006c48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f043 0201 	orr.w	r2, r3, #1
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f023 0201 	bic.w	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d106      	bne.n	8006cb8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60da      	str	r2, [r3, #12]
 8006cb6:	e00b      	b.n	8006cd0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60da      	str	r2, [r3, #12]
 8006cca:	e001      	b.n	8006cd0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e003      	b.n	8006cd8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006cd0:	2032      	movs	r0, #50	; 0x32
 8006cd2:	f7f9 fea3 	bl	8000a1c <HAL_Delay>

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b086      	sub	sp, #24
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	e009      	b.n	8006d14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	3340      	adds	r3, #64	; 0x40
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	3301      	adds	r3, #1
 8006d12:	613b      	str	r3, [r7, #16]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2b0e      	cmp	r3, #14
 8006d18:	d9f2      	bls.n	8006d00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d112      	bne.n	8006d46 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	639a      	str	r2, [r3, #56]	; 0x38
 8006d44:	e00b      	b.n	8006d5e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d64:	461a      	mov	r2, r3
 8006d66:	2300      	movs	r3, #0
 8006d68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d70:	4619      	mov	r1, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d78:	461a      	mov	r2, r3
 8006d7a:	680b      	ldr	r3, [r1, #0]
 8006d7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d10c      	bne.n	8006d9e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d104      	bne.n	8006d94 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f961 	bl	8007054 <USB_SetDevSpeed>
 8006d92:	e008      	b.n	8006da6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d94:	2101      	movs	r1, #1
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f95c 	bl	8007054 <USB_SetDevSpeed>
 8006d9c:	e003      	b.n	8006da6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d9e:	2103      	movs	r1, #3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f957 	bl	8007054 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006da6:	2110      	movs	r1, #16
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f90b 	bl	8006fc4 <USB_FlushTxFifo>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f929 	bl	8007010 <USB_FlushRxFifo>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dce:	461a      	mov	r2, r3
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dda:	461a      	mov	r2, r3
 8006ddc:	2300      	movs	r3, #0
 8006dde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de6:	461a      	mov	r2, r3
 8006de8:	2300      	movs	r3, #0
 8006dea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dec:	2300      	movs	r3, #0
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	e043      	b.n	8006e7a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e08:	d118      	bne.n	8006e3c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	e013      	b.n	8006e4e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e32:	461a      	mov	r2, r3
 8006e34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	e008      	b.n	8006e4e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e48:	461a      	mov	r2, r3
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3301      	adds	r3, #1
 8006e78:	613b      	str	r3, [r7, #16]
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d3b7      	bcc.n	8006df2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e82:	2300      	movs	r3, #0
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	e043      	b.n	8006f10 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e9e:	d118      	bne.n	8006ed2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	e013      	b.n	8006ee4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	e008      	b.n	8006ee4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ede:	461a      	mov	r2, r3
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	461a      	mov	r2, r3
 8006f04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3b7      	bcc.n	8006e88 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f2a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d111      	bne.n	8006f56 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4b20      	ldr	r3, [pc, #128]	; (8006fbc <USB_DevInit+0x2dc>)
 8006f3c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f50:	f043 0303 	orr.w	r3, r3, #3
 8006f54:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f62:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f043 0210 	orr.w	r2, r3, #16
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	4b11      	ldr	r3, [pc, #68]	; (8006fc0 <USB_DevInit+0x2e0>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	f043 0208 	orr.w	r2, r3, #8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d107      	bne.n	8006faa <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fa2:	f043 0304 	orr.w	r3, r3, #4
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fb6:	b004      	add	sp, #16
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	00800100 	.word	0x00800100
 8006fc0:	803c3800 	.word	0x803c3800

08006fc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	019b      	lsls	r3, r3, #6
 8006fd6:	f043 0220 	orr.w	r2, r3, #32
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <USB_FlushTxFifo+0x48>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d901      	bls.n	8006ff0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e006      	b.n	8006ffe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f003 0320 	and.w	r3, r3, #32
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d0f0      	beq.n	8006fde <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	00030d40 	.word	0x00030d40

08007010 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2210      	movs	r2, #16
 8007020:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3301      	adds	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4a09      	ldr	r2, [pc, #36]	; (8007050 <USB_FlushRxFifo+0x40>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d901      	bls.n	8007034 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e006      	b.n	8007042 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f003 0310 	and.w	r3, r3, #16
 800703c:	2b10      	cmp	r3, #16
 800703e:	d0f0      	beq.n	8007022 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	00030d40 	.word	0x00030d40

08007054 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	68f9      	ldr	r1, [r7, #12]
 8007070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007074:	4313      	orrs	r3, r2
 8007076:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007086:	b480      	push	{r7}
 8007088:	b087      	sub	sp, #28
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0306 	and.w	r3, r3, #6
 800709e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d102      	bne.n	80070ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80070a6:	2300      	movs	r3, #0
 80070a8:	75fb      	strb	r3, [r7, #23]
 80070aa:	e00a      	b.n	80070c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d002      	beq.n	80070b8 <USB_GetDevSpeed+0x32>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b06      	cmp	r3, #6
 80070b6:	d102      	bne.n	80070be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80070b8:	2302      	movs	r3, #2
 80070ba:	75fb      	strb	r3, [r7, #23]
 80070bc:	e001      	b.n	80070c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80070be:	230f      	movs	r3, #15
 80070c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	785b      	ldrb	r3, [r3, #1]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d13a      	bne.n	8007162 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	2101      	movs	r1, #1
 80070fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007102:	b29b      	uxth	r3, r3
 8007104:	68f9      	ldr	r1, [r7, #12]
 8007106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800710a:	4313      	orrs	r3, r2
 800710c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d155      	bne.n	80071d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	78db      	ldrb	r3, [r3, #3]
 800713e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007140:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	059b      	lsls	r3, r3, #22
 8007146:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007148:	4313      	orrs	r3, r2
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	0151      	lsls	r1, r2, #5
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	440a      	add	r2, r1
 8007152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800715a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e036      	b.n	80071d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007168:	69da      	ldr	r2, [r3, #28]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	2101      	movs	r1, #1
 8007174:	fa01 f303 	lsl.w	r3, r1, r3
 8007178:	041b      	lsls	r3, r3, #16
 800717a:	68f9      	ldr	r1, [r7, #12]
 800717c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007180:	4313      	orrs	r3, r2
 8007182:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d11a      	bne.n	80071d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	78db      	ldrb	r3, [r3, #3]
 80071b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071b6:	430b      	orrs	r3, r1
 80071b8:	4313      	orrs	r3, r2
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
	...

080071e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d135      	bne.n	8007268 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	2101      	movs	r1, #1
 800720e:	fa01 f303 	lsl.w	r3, r1, r3
 8007212:	b29b      	uxth	r3, r3
 8007214:	43db      	mvns	r3, r3
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800721c:	4013      	ands	r3, r2
 800721e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007226:	69da      	ldr	r2, [r3, #28]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	f003 030f 	and.w	r3, r3, #15
 8007230:	2101      	movs	r1, #1
 8007232:	fa01 f303 	lsl.w	r3, r1, r3
 8007236:	b29b      	uxth	r3, r3
 8007238:	43db      	mvns	r3, r3
 800723a:	68f9      	ldr	r1, [r7, #12]
 800723c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007240:	4013      	ands	r3, r2
 8007242:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	0159      	lsls	r1, r3, #5
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	440b      	add	r3, r1
 800725a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725e:	4619      	mov	r1, r3
 8007260:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <USB_DeactivateEndpoint+0x100>)
 8007262:	4013      	ands	r3, r2
 8007264:	600b      	str	r3, [r1, #0]
 8007266:	e034      	b.n	80072d2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	2101      	movs	r1, #1
 800727a:	fa01 f303 	lsl.w	r3, r1, r3
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	43db      	mvns	r3, r3
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007288:	4013      	ands	r3, r2
 800728a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	2101      	movs	r1, #1
 800729e:	fa01 f303 	lsl.w	r3, r1, r3
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	43db      	mvns	r3, r3
 80072a6:	68f9      	ldr	r1, [r7, #12]
 80072a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ac:	4013      	ands	r3, r2
 80072ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	0159      	lsls	r1, r3, #5
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	440b      	add	r3, r1
 80072c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ca:	4619      	mov	r1, r3
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <USB_DeactivateEndpoint+0x104>)
 80072ce:	4013      	ands	r3, r2
 80072d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	ec337800 	.word	0xec337800
 80072e4:	eff37800 	.word	0xeff37800

080072e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	; 0x28
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	4613      	mov	r3, r2
 80072f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	785b      	ldrb	r3, [r3, #1]
 8007304:	2b01      	cmp	r3, #1
 8007306:	f040 815c 	bne.w	80075c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d132      	bne.n	8007378 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	0151      	lsls	r1, r2, #5
 8007324:	69fa      	ldr	r2, [r7, #28]
 8007326:	440a      	add	r2, r1
 8007328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007330:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007334:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	0151      	lsls	r1, r2, #5
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	440a      	add	r2, r1
 800736c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007370:	0cdb      	lsrs	r3, r3, #19
 8007372:	04db      	lsls	r3, r3, #19
 8007374:	6113      	str	r3, [r2, #16]
 8007376:	e074      	b.n	8007462 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	0151      	lsls	r1, r2, #5
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	440a      	add	r2, r1
 800738e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007392:	0cdb      	lsrs	r3, r3, #19
 8007394:	04db      	lsls	r3, r3, #19
 8007396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	0151      	lsls	r1, r2, #5
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	440a      	add	r2, r1
 80073ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c8:	691a      	ldr	r2, [r3, #16]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6959      	ldr	r1, [r3, #20]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	440b      	add	r3, r1
 80073d4:	1e59      	subs	r1, r3, #1
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	fbb1 f3f3 	udiv	r3, r1, r3
 80073de:	04d9      	lsls	r1, r3, #19
 80073e0:	4b9d      	ldr	r3, [pc, #628]	; (8007658 <USB_EPStartXfer+0x370>)
 80073e2:	400b      	ands	r3, r1
 80073e4:	69b9      	ldr	r1, [r7, #24]
 80073e6:	0148      	lsls	r0, r1, #5
 80073e8:	69f9      	ldr	r1, [r7, #28]
 80073ea:	4401      	add	r1, r0
 80073ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073f0:	4313      	orrs	r3, r2
 80073f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800740a:	69b9      	ldr	r1, [r7, #24]
 800740c:	0148      	lsls	r0, r1, #5
 800740e:	69f9      	ldr	r1, [r7, #28]
 8007410:	4401      	add	r1, r0
 8007412:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007416:	4313      	orrs	r3, r2
 8007418:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	78db      	ldrb	r3, [r3, #3]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d11f      	bne.n	8007462 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	0151      	lsls	r1, r2, #5
 8007434:	69fa      	ldr	r2, [r7, #28]
 8007436:	440a      	add	r2, r1
 8007438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007440:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	440a      	add	r2, r1
 8007458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007460:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d14b      	bne.n	8007500 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	461a      	mov	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	78db      	ldrb	r3, [r3, #3]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d128      	bne.n	80074de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007498:	2b00      	cmp	r3, #0
 800749a:	d110      	bne.n	80074be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	0151      	lsls	r1, r2, #5
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	440a      	add	r2, r1
 80074b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	e00f      	b.n	80074de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	0151      	lsls	r1, r2, #5
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	440a      	add	r2, r1
 80074f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	e12f      	b.n	8007760 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	440a      	add	r2, r1
 8007516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800751e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	78db      	ldrb	r3, [r3, #3]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d015      	beq.n	8007554 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 8117 	beq.w	8007760 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	2101      	movs	r1, #1
 8007544:	fa01 f303 	lsl.w	r3, r1, r3
 8007548:	69f9      	ldr	r1, [r7, #28]
 800754a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800754e:	4313      	orrs	r3, r2
 8007550:	634b      	str	r3, [r1, #52]	; 0x34
 8007552:	e105      	b.n	8007760 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d110      	bne.n	8007586 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	440a      	add	r2, r1
 800757a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800757e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e00f      	b.n	80075a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	440a      	add	r2, r1
 800759c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	68d9      	ldr	r1, [r3, #12]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	b298      	uxth	r0, r3
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	4603      	mov	r3, r0
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 fa2b 	bl	8007a16 <USB_WritePacket>
 80075c0:	e0ce      	b.n	8007760 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075dc:	0cdb      	lsrs	r3, r3, #19
 80075de:	04db      	lsls	r3, r3, #19
 80075e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	0151      	lsls	r1, r2, #5
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	440a      	add	r2, r1
 80075f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007600:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007604:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d126      	bne.n	800765c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007624:	69b9      	ldr	r1, [r7, #24]
 8007626:	0148      	lsls	r0, r1, #5
 8007628:	69f9      	ldr	r1, [r7, #28]
 800762a:	4401      	add	r1, r0
 800762c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007630:	4313      	orrs	r3, r2
 8007632:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	440a      	add	r2, r1
 800764a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800764e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007652:	6113      	str	r3, [r2, #16]
 8007654:	e036      	b.n	80076c4 <USB_EPStartXfer+0x3dc>
 8007656:	bf00      	nop
 8007658:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	695a      	ldr	r2, [r3, #20]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	4413      	add	r3, r2
 8007666:	1e5a      	subs	r2, r3, #1
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007670:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767e:	691a      	ldr	r2, [r3, #16]
 8007680:	8afb      	ldrh	r3, [r7, #22]
 8007682:	04d9      	lsls	r1, r3, #19
 8007684:	4b39      	ldr	r3, [pc, #228]	; (800776c <USB_EPStartXfer+0x484>)
 8007686:	400b      	ands	r3, r1
 8007688:	69b9      	ldr	r1, [r7, #24]
 800768a:	0148      	lsls	r0, r1, #5
 800768c:	69f9      	ldr	r1, [r7, #28]
 800768e:	4401      	add	r1, r0
 8007690:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007694:	4313      	orrs	r3, r2
 8007696:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	8af9      	ldrh	r1, [r7, #22]
 80076ac:	fb01 f303 	mul.w	r3, r1, r3
 80076b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076b4:	69b9      	ldr	r1, [r7, #24]
 80076b6:	0148      	lsls	r0, r1, #5
 80076b8:	69f9      	ldr	r1, [r7, #28]
 80076ba:	4401      	add	r1, r0
 80076bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076c0:	4313      	orrs	r3, r2
 80076c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d10d      	bne.n	80076e6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d009      	beq.n	80076e6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	68d9      	ldr	r1, [r3, #12]
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e2:	460a      	mov	r2, r1
 80076e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	78db      	ldrb	r3, [r3, #3]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d128      	bne.n	8007740 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d110      	bne.n	8007720 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	440a      	add	r2, r1
 8007714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	e00f      	b.n	8007740 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	440a      	add	r2, r1
 8007736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800773e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800775e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	1ff80000 	.word	0x1ff80000

08007770 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	4613      	mov	r3, r2
 800777c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	785b      	ldrb	r3, [r3, #1]
 800778c:	2b01      	cmp	r3, #1
 800778e:	f040 80cd 	bne.w	800792c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d132      	bne.n	8007800 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	0151      	lsls	r1, r2, #5
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	440a      	add	r2, r1
 80077b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	0151      	lsls	r1, r2, #5
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	440a      	add	r2, r1
 80077f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f8:	0cdb      	lsrs	r3, r3, #19
 80077fa:	04db      	lsls	r3, r3, #19
 80077fc:	6113      	str	r3, [r2, #16]
 80077fe:	e04e      	b.n	800789e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	0151      	lsls	r1, r2, #5
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	440a      	add	r2, r1
 8007816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800781a:	0cdb      	lsrs	r3, r3, #19
 800781c:	04db      	lsls	r3, r3, #19
 800781e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	0151      	lsls	r1, r2, #5
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	440a      	add	r2, r1
 8007836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800783a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800783e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007842:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	695a      	ldr	r2, [r3, #20]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	429a      	cmp	r2, r3
 800784e:	d903      	bls.n	8007858 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	0151      	lsls	r1, r2, #5
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	440a      	add	r2, r1
 800786e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007872:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007884:	691a      	ldr	r2, [r3, #16]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800788e:	6939      	ldr	r1, [r7, #16]
 8007890:	0148      	lsls	r0, r1, #5
 8007892:	6979      	ldr	r1, [r7, #20]
 8007894:	4401      	add	r1, r0
 8007896:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800789a:	4313      	orrs	r3, r2
 800789c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800789e:	79fb      	ldrb	r3, [r7, #7]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d11e      	bne.n	80078e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d009      	beq.n	80078c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	461a      	mov	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	0151      	lsls	r1, r2, #5
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	440a      	add	r2, r1
 80078d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	e092      	b.n	8007a08 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	0151      	lsls	r1, r2, #5
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	440a      	add	r2, r1
 80078f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007900:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d07e      	beq.n	8007a08 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	2101      	movs	r1, #1
 800791c:	fa01 f303 	lsl.w	r3, r1, r3
 8007920:	6979      	ldr	r1, [r7, #20]
 8007922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007926:	4313      	orrs	r3, r2
 8007928:	634b      	str	r3, [r1, #52]	; 0x34
 800792a:	e06d      	b.n	8007a08 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	0151      	lsls	r1, r2, #5
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	440a      	add	r2, r1
 8007942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007946:	0cdb      	lsrs	r3, r3, #19
 8007948:	04db      	lsls	r3, r3, #19
 800794a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	0151      	lsls	r1, r2, #5
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	440a      	add	r2, r1
 8007962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007966:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800796a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800796e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	440a      	add	r2, r1
 8007996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800799a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800799e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ac:	691a      	ldr	r2, [r3, #16]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079b6:	6939      	ldr	r1, [r7, #16]
 80079b8:	0148      	lsls	r0, r1, #5
 80079ba:	6979      	ldr	r1, [r7, #20]
 80079bc:	4401      	add	r1, r0
 80079be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079c2:	4313      	orrs	r3, r2
 80079c4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d10d      	bne.n	80079e8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	68d9      	ldr	r1, [r3, #12]
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e4:	460a      	mov	r2, r1
 80079e6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	0151      	lsls	r1, r2, #5
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	440a      	add	r2, r1
 80079fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b089      	sub	sp, #36	; 0x24
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	4611      	mov	r1, r2
 8007a22:	461a      	mov	r2, r3
 8007a24:	460b      	mov	r3, r1
 8007a26:	71fb      	strb	r3, [r7, #7]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007a34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d11a      	bne.n	8007a72 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a3c:	88bb      	ldrh	r3, [r7, #4]
 8007a3e:	3303      	adds	r3, #3
 8007a40:	089b      	lsrs	r3, r3, #2
 8007a42:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a44:	2300      	movs	r3, #0
 8007a46:	61bb      	str	r3, [r7, #24]
 8007a48:	e00f      	b.n	8007a6a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	031a      	lsls	r2, r3, #12
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a56:	461a      	mov	r2, r3
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	3304      	adds	r3, #4
 8007a62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	3301      	adds	r3, #1
 8007a68:	61bb      	str	r3, [r7, #24]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d3eb      	bcc.n	8007a4a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3724      	adds	r7, #36	; 0x24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b089      	sub	sp, #36	; 0x24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007a96:	88fb      	ldrh	r3, [r7, #6]
 8007a98:	3303      	adds	r3, #3
 8007a9a:	089b      	lsrs	r3, r3, #2
 8007a9c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	61bb      	str	r3, [r7, #24]
 8007aa2:	e00b      	b.n	8007abc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	61bb      	str	r3, [r7, #24]
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d3ef      	bcc.n	8007aa4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007ac4:	69fb      	ldr	r3, [r7, #28]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3724      	adds	r7, #36	; 0x24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d12c      	bne.n	8007b48 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	db12      	blt.n	8007b26 <USB_EPSetStall+0x54>
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00f      	beq.n	8007b26 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b24:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	0151      	lsls	r1, r2, #5
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	440a      	add	r2, r1
 8007b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	e02b      	b.n	8007ba0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	db12      	blt.n	8007b80 <USB_EPSetStall+0xae>
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00f      	beq.n	8007b80 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	0151      	lsls	r1, r2, #5
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	440a      	add	r2, r1
 8007b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b7e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d128      	bne.n	8007c1c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007be8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	78db      	ldrb	r3, [r3, #3]
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d003      	beq.n	8007bfa <USB_EPClearStall+0x4c>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	78db      	ldrb	r3, [r3, #3]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d138      	bne.n	8007c6c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	0151      	lsls	r1, r2, #5
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	440a      	add	r2, r1
 8007c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e027      	b.n	8007c6c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	0151      	lsls	r1, r2, #5
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	440a      	add	r2, r1
 8007c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	78db      	ldrb	r3, [r3, #3]
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d003      	beq.n	8007c4c <USB_EPClearStall+0x9e>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	78db      	ldrb	r3, [r3, #3]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d10f      	bne.n	8007c6c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	0151      	lsls	r1, r2, #5
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	440a      	add	r2, r1
 8007c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c6a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c98:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c9c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	011b      	lsls	r3, r3, #4
 8007caa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ce0:	f023 0302 	bic.w	r3, r3, #2
 8007ce4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007ce6:	2003      	movs	r0, #3
 8007ce8:	f7f8 fe98 	bl	8000a1c <HAL_Delay>

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d10:	f043 0302 	orr.w	r3, r3, #2
 8007d14:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007d16:	2003      	movs	r0, #3
 8007d18:	f7f8 fe80 	bl	8000a1c <HAL_Delay>

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	0c1b      	lsrs	r3, r3, #16
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	4013      	ands	r3, r2
 8007da2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	b29b      	uxth	r3, r3
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	4013      	ands	r3, r2
 8007de0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007de2:	68bb      	ldr	r3, [r7, #8]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e12:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e14:	78fb      	ldrb	r3, [r7, #3]
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e20:	01db      	lsls	r3, r3, #7
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	f003 0301 	and.w	r3, r3, #1
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e86:	f023 0307 	bic.w	r3, r3, #7
 8007e8a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0306 	and.w	r3, r3, #6
 8007e98:	2b04      	cmp	r3, #4
 8007e9a:	d109      	bne.n	8007eb0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eaa:	f043 0303 	orr.w	r3, r3, #3
 8007eae:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ec2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
	...

08007ed4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	460b      	mov	r3, r1
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	333c      	adds	r3, #60	; 0x3c
 8007eea:	3304      	adds	r3, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4a26      	ldr	r2, [pc, #152]	; (8007f8c <USB_EP0_OutStart+0xb8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d90a      	bls.n	8007f0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f08:	d101      	bne.n	8007f0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e037      	b.n	8007f7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f14:	461a      	mov	r2, r3
 8007f16:	2300      	movs	r3, #0
 8007f18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f3c:	f043 0318 	orr.w	r3, r3, #24
 8007f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d10f      	bne.n	8007f7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f62:	461a      	mov	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	4f54300a 	.word	0x4f54300a

08007f90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4a13      	ldr	r2, [pc, #76]	; (8007ff4 <USB_CoreReset+0x64>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d901      	bls.n	8007fae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e01b      	b.n	8007fe6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	daf2      	bge.n	8007f9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f043 0201 	orr.w	r2, r3, #1
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4a09      	ldr	r2, [pc, #36]	; (8007ff4 <USB_CoreReset+0x64>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d901      	bls.n	8007fd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e006      	b.n	8007fe6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d0f0      	beq.n	8007fc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	00030d40 	.word	0x00030d40

08007ff8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7c1b      	ldrb	r3, [r3, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d115      	bne.n	800803c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008014:	2202      	movs	r2, #2
 8008016:	2181      	movs	r1, #129	; 0x81
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f005 fd16 	bl	800da4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008028:	2202      	movs	r2, #2
 800802a:	2101      	movs	r1, #1
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f005 fd0c 	bl	800da4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800803a:	e012      	b.n	8008062 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	2202      	movs	r2, #2
 8008040:	2181      	movs	r1, #129	; 0x81
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f005 fd01 	bl	800da4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800804e:	2340      	movs	r3, #64	; 0x40
 8008050:	2202      	movs	r2, #2
 8008052:	2101      	movs	r1, #1
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f005 fcf8 	bl	800da4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008062:	2308      	movs	r3, #8
 8008064:	2203      	movs	r2, #3
 8008066:	2182      	movs	r1, #130	; 0x82
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f005 fcee 	bl	800da4a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008074:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008078:	f005 ff9c 	bl	800dfb4 <malloc>
 800807c:	4603      	mov	r3, r0
 800807e:	461a      	mov	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800808c:	2b00      	cmp	r3, #0
 800808e:	d102      	bne.n	8008096 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
 8008094:	e026      	b.n	80080e4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800809c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	7c1b      	ldrb	r3, [r3, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d109      	bne.n	80080d4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ca:	2101      	movs	r1, #1
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f005 fdad 	bl	800dc2c <USBD_LL_PrepareReceive>
 80080d2:	e007      	b.n	80080e4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080da:	2340      	movs	r3, #64	; 0x40
 80080dc:	2101      	movs	r1, #1
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f005 fda4 	bl	800dc2c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	460b      	mov	r3, r1
 80080f8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80080fe:	2181      	movs	r1, #129	; 0x81
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f005 fcc8 	bl	800da96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800810c:	2101      	movs	r1, #1
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f005 fcc1 	bl	800da96 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800811c:	2182      	movs	r1, #130	; 0x82
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f005 fcb9 	bl	800da96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00e      	beq.n	8008152 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008144:	4618      	mov	r0, r3
 8008146:	f005 ff3d 	bl	800dfc4 <free>
    pdev->pClassData = NULL;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8008152:	7bfb      	ldrb	r3, [r7, #15]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800816c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008182:	2b00      	cmp	r3, #0
 8008184:	d039      	beq.n	80081fa <USBD_CDC_Setup+0x9e>
 8008186:	2b20      	cmp	r3, #32
 8008188:	d17c      	bne.n	8008284 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	88db      	ldrh	r3, [r3, #6]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d029      	beq.n	80081e6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	b25b      	sxtb	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	da11      	bge.n	80081c0 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80081a8:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	88d2      	ldrh	r2, [r2, #6]
 80081ae:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80081b0:	6939      	ldr	r1, [r7, #16]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	88db      	ldrh	r3, [r3, #6]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 f9c9 	bl	8009550 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80081be:	e068      	b.n	8008292 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	785a      	ldrb	r2, [r3, #1]
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	88db      	ldrh	r3, [r3, #6]
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80081d6:	6939      	ldr	r1, [r7, #16]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	88db      	ldrh	r3, [r3, #6]
 80081dc:	461a      	mov	r2, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 f9e4 	bl	80095ac <USBD_CtlPrepareRx>
    break;
 80081e4:	e055      	b.n	8008292 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	7850      	ldrb	r0, [r2, #1]
 80081f2:	2200      	movs	r2, #0
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	4798      	blx	r3
    break;
 80081f8:	e04b      	b.n	8008292 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	2b0a      	cmp	r3, #10
 8008200:	d017      	beq.n	8008232 <USBD_CDC_Setup+0xd6>
 8008202:	2b0b      	cmp	r3, #11
 8008204:	d029      	beq.n	800825a <USBD_CDC_Setup+0xfe>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d133      	bne.n	8008272 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008210:	2b03      	cmp	r3, #3
 8008212:	d107      	bne.n	8008224 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008214:	f107 030c 	add.w	r3, r7, #12
 8008218:	2202      	movs	r2, #2
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 f997 	bl	8009550 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008222:	e02e      	b.n	8008282 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 f927 	bl	800947a <USBD_CtlError>
			  ret = USBD_FAIL;
 800822c:	2302      	movs	r3, #2
 800822e:	75fb      	strb	r3, [r7, #23]
      break;
 8008230:	e027      	b.n	8008282 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008238:	2b03      	cmp	r3, #3
 800823a:	d107      	bne.n	800824c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800823c:	f107 030f 	add.w	r3, r7, #15
 8008240:	2201      	movs	r2, #1
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 f983 	bl	8009550 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800824a:	e01a      	b.n	8008282 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 f913 	bl	800947a <USBD_CtlError>
			  ret = USBD_FAIL;
 8008254:	2302      	movs	r3, #2
 8008256:	75fb      	strb	r3, [r7, #23]
      break;
 8008258:	e013      	b.n	8008282 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008260:	2b03      	cmp	r3, #3
 8008262:	d00d      	beq.n	8008280 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 f907 	bl	800947a <USBD_CtlError>
			  ret = USBD_FAIL;
 800826c:	2302      	movs	r3, #2
 800826e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008270:	e006      	b.n	8008280 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f900 	bl	800947a <USBD_CtlError>
      ret = USBD_FAIL;
 800827a:	2302      	movs	r3, #2
 800827c:	75fb      	strb	r3, [r7, #23]
      break;
 800827e:	e000      	b.n	8008282 <USBD_CDC_Setup+0x126>
      break;
 8008280:	bf00      	nop
    }
    break;
 8008282:	e006      	b.n	8008292 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 f8f7 	bl	800947a <USBD_CtlError>
    ret = USBD_FAIL;
 800828c:	2302      	movs	r3, #2
 800828e:	75fb      	strb	r3, [r7, #23]
    break;
 8008290:	bf00      	nop
  }

  return ret;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80082ae:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80082b6:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d03a      	beq.n	8008338 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	440b      	add	r3, r1
 80082d0:	331c      	adds	r3, #28
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d029      	beq.n	800832c <USBD_CDC_DataIn+0x90>
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	440b      	add	r3, r1
 80082e6:	331c      	adds	r3, #28
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	78f9      	ldrb	r1, [r7, #3]
 80082ec:	68b8      	ldr	r0, [r7, #8]
 80082ee:	460b      	mov	r3, r1
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	1a5b      	subs	r3, r3, r1
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4403      	add	r3, r0
 80082f8:	3344      	adds	r3, #68	; 0x44
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008300:	fb03 f301 	mul.w	r3, r3, r1
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d110      	bne.n	800832c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800830a:	78fa      	ldrb	r2, [r7, #3]
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	440b      	add	r3, r1
 8008318:	331c      	adds	r3, #28
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800831e:	78f9      	ldrb	r1, [r7, #3]
 8008320:	2300      	movs	r3, #0
 8008322:	2200      	movs	r2, #0
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f005 fc5e 	bl	800dbe6 <USBD_LL_Transmit>
 800832a:	e003      	b.n	8008334 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	e000      	b.n	800833a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008338:	2302      	movs	r3, #2
  }
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	460b      	mov	r3, r1
 800834c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008354:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f005 fc89 	bl	800dc72 <USBD_LL_GetRxDataSize>
 8008360:	4602      	mov	r2, r0
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00d      	beq.n	800838e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008386:	4611      	mov	r1, r2
 8008388:	4798      	blx	r3

    return USBD_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	e000      	b.n	8008390 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800838e:	2302      	movs	r3, #2
  }
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80083a6:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d015      	beq.n	80083de <USBD_CDC_EP0_RxReady+0x46>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80083b8:	2bff      	cmp	r3, #255	; 0xff
 80083ba:	d010      	beq.n	80083de <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80083ca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80083d2:	b292      	uxth	r2, r2
 80083d4:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	22ff      	movs	r2, #255	; 0xff
 80083da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2243      	movs	r2, #67	; 0x43
 80083f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80083f6:	4b03      	ldr	r3, [pc, #12]	; (8008404 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	20000090 	.word	0x20000090

08008408 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2243      	movs	r2, #67	; 0x43
 8008414:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008416:	4b03      	ldr	r3, [pc, #12]	; (8008424 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	2000004c 	.word	0x2000004c

08008428 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2243      	movs	r2, #67	; 0x43
 8008434:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008436:	4b03      	ldr	r3, [pc, #12]	; (8008444 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008438:	4618      	mov	r0, r3
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	200000d4 	.word	0x200000d4

08008448 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	220a      	movs	r2, #10
 8008454:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008456:	4b03      	ldr	r3, [pc, #12]	; (8008464 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	20000008 	.word	0x20000008

08008468 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008472:	2302      	movs	r3, #2
 8008474:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008496:	b480      	push	{r7}
 8008498:	b087      	sub	sp, #28
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	4613      	mov	r3, r2
 80084a2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084aa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80084b4:	88fa      	ldrh	r2, [r7, #6]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008500:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01c      	beq.n	8008546 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008512:	2b00      	cmp	r3, #0
 8008514:	d115      	bne.n	8008542 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008534:	b29b      	uxth	r3, r3
 8008536:	2181      	movs	r1, #129	; 0x81
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f005 fb54 	bl	800dbe6 <USBD_LL_Transmit>

      return USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	e002      	b.n	8008548 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008546:	2302      	movs	r3, #2
  }
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800855e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008566:	2b00      	cmp	r3, #0
 8008568:	d017      	beq.n	800859a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7c1b      	ldrb	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800857c:	2101      	movs	r1, #1
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f005 fb54 	bl	800dc2c <USBD_LL_PrepareReceive>
 8008584:	e007      	b.n	8008596 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800858c:	2340      	movs	r3, #64	; 0x40
 800858e:	2101      	movs	r1, #1
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f005 fb4b 	bl	800dc2c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	e000      	b.n	800859c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800859a:	2302      	movs	r3, #2
  }
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	4613      	mov	r3, r2
 80085b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085b8:	2302      	movs	r3, #2
 80085ba:	e01a      	b.n	80085f2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	79fa      	ldrb	r2, [r7, #7]
 80085e8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f005 f9c6 	bl	800d97c <USBD_LL_Init>

  return USBD_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b085      	sub	sp, #20
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d006      	beq.n	800861c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
 800861a:	e001      	b.n	8008620 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800861c:	2302      	movs	r3, #2
 800861e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f005 f9ec 	bl	800da14 <USBD_LL_Start>

  return USBD_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008668:	2302      	movs	r3, #2
 800866a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00c      	beq.n	8008690 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	4611      	mov	r1, r2
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	4798      	blx	r3
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	460b      	mov	r3, r1
 80086a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	78fa      	ldrb	r2, [r7, #3]
 80086b0:	4611      	mov	r1, r2
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	4798      	blx	r3
  return USBD_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 fe94 	bl	8009400 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80086e6:	461a      	mov	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80086f4:	f003 031f 	and.w	r3, r3, #31
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d00c      	beq.n	8008716 <USBD_LL_SetupStage+0x56>
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d302      	bcc.n	8008706 <USBD_LL_SetupStage+0x46>
 8008700:	2b02      	cmp	r3, #2
 8008702:	d010      	beq.n	8008726 <USBD_LL_SetupStage+0x66>
 8008704:	e017      	b.n	8008736 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa04 	bl	8008b1c <USBD_StdDevReq>
    break;
 8008714:	e01a      	b.n	800874c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa66 	bl	8008bf0 <USBD_StdItfReq>
    break;
 8008724:	e012      	b.n	800874c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 faa4 	bl	8008c7c <USBD_StdEPReq>
    break;
 8008734:	e00a      	b.n	800874c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800873c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008740:	b2db      	uxtb	r3, r3
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f005 f9c5 	bl	800dad4 <USBD_LL_StallEP>
    break;
 800874a:	bf00      	nop
  }

  return USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b086      	sub	sp, #24
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	460b      	mov	r3, r1
 8008760:	607a      	str	r2, [r7, #4]
 8008762:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008764:	7afb      	ldrb	r3, [r7, #11]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d14b      	bne.n	8008802 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008770:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008778:	2b03      	cmp	r3, #3
 800877a:	d134      	bne.n	80087e6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	429a      	cmp	r2, r3
 8008786:	d919      	bls.n	80087bc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	1ad2      	subs	r2, r2, r3
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800879e:	429a      	cmp	r2, r3
 80087a0:	d203      	bcs.n	80087aa <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	e002      	b.n	80087b0 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 ff17 	bl	80095e8 <USBD_CtlContinueRx>
 80087ba:	e038      	b.n	800882e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00a      	beq.n	80087de <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d105      	bne.n	80087de <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 ff14 	bl	800960c <USBD_CtlSendStatus>
 80087e4:	e023      	b.n	800882e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80087ec:	2b05      	cmp	r3, #5
 80087ee:	d11e      	bne.n	800882e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f005 f96a 	bl	800dad4 <USBD_LL_StallEP>
 8008800:	e015      	b.n	800882e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00d      	beq.n	800882a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008814:	2b03      	cmp	r3, #3
 8008816:	d108      	bne.n	800882a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	7afa      	ldrb	r2, [r7, #11]
 8008822:	4611      	mov	r1, r2
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	4798      	blx	r3
 8008828:	e001      	b.n	800882e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800882a:	2302      	movs	r3, #2
 800882c:	e000      	b.n	8008830 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	460b      	mov	r3, r1
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008846:	7afb      	ldrb	r3, [r7, #11]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d17f      	bne.n	800894c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3314      	adds	r3, #20
 8008850:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008858:	2b02      	cmp	r3, #2
 800885a:	d15c      	bne.n	8008916 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	429a      	cmp	r2, r3
 8008866:	d915      	bls.n	8008894 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	1ad2      	subs	r2, r2, r3
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	b29b      	uxth	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fe81 	bl	8009588 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008886:	2300      	movs	r3, #0
 8008888:	2200      	movs	r2, #0
 800888a:	2100      	movs	r1, #0
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f005 f9cd 	bl	800dc2c <USBD_LL_PrepareReceive>
 8008892:	e04e      	b.n	8008932 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	6912      	ldr	r2, [r2, #16]
 800889c:	fbb3 f1f2 	udiv	r1, r3, r2
 80088a0:	fb02 f201 	mul.w	r2, r2, r1
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d11c      	bne.n	80088e4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d316      	bcc.n	80088e4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d20f      	bcs.n	80088e4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088c4:	2200      	movs	r2, #0
 80088c6:	2100      	movs	r1, #0
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 fe5d 	bl	8009588 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80088d6:	2300      	movs	r3, #0
 80088d8:	2200      	movs	r2, #0
 80088da:	2100      	movs	r1, #0
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f005 f9a5 	bl	800dc2c <USBD_LL_PrepareReceive>
 80088e2:	e026      	b.n	8008932 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d105      	bne.n	8008906 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008906:	2180      	movs	r1, #128	; 0x80
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f005 f8e3 	bl	800dad4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 fe8f 	bl	8009632 <USBD_CtlReceiveStatus>
 8008914:	e00d      	b.n	8008932 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800891c:	2b04      	cmp	r3, #4
 800891e:	d004      	beq.n	800892a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008926:	2b00      	cmp	r3, #0
 8008928:	d103      	bne.n	8008932 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800892a:	2180      	movs	r1, #128	; 0x80
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f005 f8d1 	bl	800dad4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008938:	2b01      	cmp	r3, #1
 800893a:	d11d      	bne.n	8008978 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7ff fe82 	bl	8008646 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800894a:	e015      	b.n	8008978 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00d      	beq.n	8008974 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800895e:	2b03      	cmp	r3, #3
 8008960:	d108      	bne.n	8008974 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	7afa      	ldrb	r2, [r7, #11]
 800896c:	4611      	mov	r1, r2
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	4798      	blx	r3
 8008972:	e001      	b.n	8008978 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008974:	2302      	movs	r3, #2
 8008976:	e000      	b.n	800897a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800898a:	2340      	movs	r3, #64	; 0x40
 800898c:	2200      	movs	r2, #0
 800898e:	2100      	movs	r1, #0
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f005 f85a 	bl	800da4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2240      	movs	r2, #64	; 0x40
 80089a2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089a6:	2340      	movs	r3, #64	; 0x40
 80089a8:	2200      	movs	r2, #0
 80089aa:	2180      	movs	r1, #128	; 0x80
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f005 f84c 	bl	800da4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2240      	movs	r2, #64	; 0x40
 80089bc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d009      	beq.n	80089fa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6852      	ldr	r2, [r2, #4]
 80089f2:	b2d2      	uxtb	r2, r2
 80089f4:	4611      	mov	r1, r2
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	4798      	blx	r3
  }

  return USBD_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	78fa      	ldrb	r2, [r7, #3]
 8008a14:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2204      	movs	r2, #4
 8008a3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d10b      	bne.n	8008a9a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d005      	beq.n	8008a9a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b083      	sub	sp, #12
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6852      	ldr	r2, [r2, #4]
 8008b0a:	b2d2      	uxtb	r2, r2
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	4798      	blx	r3

  return USBD_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b32:	2b20      	cmp	r3, #32
 8008b34:	d004      	beq.n	8008b40 <USBD_StdDevReq+0x24>
 8008b36:	2b40      	cmp	r3, #64	; 0x40
 8008b38:	d002      	beq.n	8008b40 <USBD_StdDevReq+0x24>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d008      	beq.n	8008b50 <USBD_StdDevReq+0x34>
 8008b3e:	e04c      	b.n	8008bda <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
    break;
 8008b4e:	e049      	b.n	8008be4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	785b      	ldrb	r3, [r3, #1]
 8008b54:	2b09      	cmp	r3, #9
 8008b56:	d83a      	bhi.n	8008bce <USBD_StdDevReq+0xb2>
 8008b58:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <USBD_StdDevReq+0x44>)
 8008b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5e:	bf00      	nop
 8008b60:	08008bb1 	.word	0x08008bb1
 8008b64:	08008bc5 	.word	0x08008bc5
 8008b68:	08008bcf 	.word	0x08008bcf
 8008b6c:	08008bbb 	.word	0x08008bbb
 8008b70:	08008bcf 	.word	0x08008bcf
 8008b74:	08008b93 	.word	0x08008b93
 8008b78:	08008b89 	.word	0x08008b89
 8008b7c:	08008bcf 	.word	0x08008bcf
 8008b80:	08008ba7 	.word	0x08008ba7
 8008b84:	08008b9d 	.word	0x08008b9d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f9d2 	bl	8008f34 <USBD_GetDescriptor>
      break;
 8008b90:	e022      	b.n	8008bd8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fac7 	bl	8009128 <USBD_SetAddress>
      break;
 8008b9a:	e01d      	b.n	8008bd8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fb04 	bl	80091ac <USBD_SetConfig>
      break;
 8008ba4:	e018      	b.n	8008bd8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fb8d 	bl	80092c8 <USBD_GetConfig>
      break;
 8008bae:	e013      	b.n	8008bd8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fbbc 	bl	8009330 <USBD_GetStatus>
      break;
 8008bb8:	e00e      	b.n	8008bd8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fbea 	bl	8009396 <USBD_SetFeature>
      break;
 8008bc2:	e009      	b.n	8008bd8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fbf9 	bl	80093be <USBD_ClrFeature>
      break;
 8008bcc:	e004      	b.n	8008bd8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fc52 	bl	800947a <USBD_CtlError>
      break;
 8008bd6:	bf00      	nop
    }
    break;
 8008bd8:	e004      	b.n	8008be4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fc4c 	bl	800947a <USBD_CtlError>
    break;
 8008be2:	bf00      	nop
  }

  return ret;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop

08008bf0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	d003      	beq.n	8008c12 <USBD_StdItfReq+0x22>
 8008c0a:	2b40      	cmp	r3, #64	; 0x40
 8008c0c:	d001      	beq.n	8008c12 <USBD_StdItfReq+0x22>
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d12a      	bne.n	8008c68 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d81d      	bhi.n	8008c5a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	889b      	ldrh	r3, [r3, #4]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d813      	bhi.n	8008c50 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	4798      	blx	r3
 8008c36:	4603      	mov	r3, r0
 8008c38:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	88db      	ldrh	r3, [r3, #6]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d110      	bne.n	8008c64 <USBD_StdItfReq+0x74>
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10d      	bne.n	8008c64 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fcdf 	bl	800960c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008c4e:	e009      	b.n	8008c64 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fc11 	bl	800947a <USBD_CtlError>
      break;
 8008c58:	e004      	b.n	8008c64 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fc0c 	bl	800947a <USBD_CtlError>
      break;
 8008c62:	e000      	b.n	8008c66 <USBD_StdItfReq+0x76>
      break;
 8008c64:	bf00      	nop
    }
    break;
 8008c66:	e004      	b.n	8008c72 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fc05 	bl	800947a <USBD_CtlError>
    break;
 8008c70:	bf00      	nop
  }

  return USBD_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	889b      	ldrh	r3, [r3, #4]
 8008c8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d004      	beq.n	8008ca6 <USBD_StdEPReq+0x2a>
 8008c9c:	2b40      	cmp	r3, #64	; 0x40
 8008c9e:	d002      	beq.n	8008ca6 <USBD_StdEPReq+0x2a>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d008      	beq.n	8008cb6 <USBD_StdEPReq+0x3a>
 8008ca4:	e13b      	b.n	8008f1e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	4798      	blx	r3
    break;
 8008cb4:	e138      	b.n	8008f28 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cbe:	2b20      	cmp	r3, #32
 8008cc0:	d10a      	bne.n	8008cd8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	4798      	blx	r3
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	e128      	b.n	8008f2a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	785b      	ldrb	r3, [r3, #1]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d03e      	beq.n	8008d5e <USBD_StdEPReq+0xe2>
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d002      	beq.n	8008cea <USBD_StdEPReq+0x6e>
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d070      	beq.n	8008dca <USBD_StdEPReq+0x14e>
 8008ce8:	e113      	b.n	8008f12 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d002      	beq.n	8008cfa <USBD_StdEPReq+0x7e>
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d015      	beq.n	8008d24 <USBD_StdEPReq+0xa8>
 8008cf8:	e02b      	b.n	8008d52 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00c      	beq.n	8008d1a <USBD_StdEPReq+0x9e>
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	2b80      	cmp	r3, #128	; 0x80
 8008d04:	d009      	beq.n	8008d1a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f004 fee2 	bl	800dad4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008d10:	2180      	movs	r1, #128	; 0x80
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f004 fede 	bl	800dad4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008d18:	e020      	b.n	8008d5c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fbac 	bl	800947a <USBD_CtlError>
        break;
 8008d22:	e01b      	b.n	8008d5c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	885b      	ldrh	r3, [r3, #2]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10e      	bne.n	8008d4a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00b      	beq.n	8008d4a <USBD_StdEPReq+0xce>
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b80      	cmp	r3, #128	; 0x80
 8008d36:	d008      	beq.n	8008d4a <USBD_StdEPReq+0xce>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	88db      	ldrh	r3, [r3, #6]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f004 fec5 	bl	800dad4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fc5e 	bl	800960c <USBD_CtlSendStatus>

        break;
 8008d50:	e004      	b.n	8008d5c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fb90 	bl	800947a <USBD_CtlError>
        break;
 8008d5a:	bf00      	nop
      }
      break;
 8008d5c:	e0de      	b.n	8008f1c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d002      	beq.n	8008d6e <USBD_StdEPReq+0xf2>
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d015      	beq.n	8008d98 <USBD_StdEPReq+0x11c>
 8008d6c:	e026      	b.n	8008dbc <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00c      	beq.n	8008d8e <USBD_StdEPReq+0x112>
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	2b80      	cmp	r3, #128	; 0x80
 8008d78:	d009      	beq.n	8008d8e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f004 fea8 	bl	800dad4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008d84:	2180      	movs	r1, #128	; 0x80
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f004 fea4 	bl	800dad4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008d8c:	e01c      	b.n	8008dc8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fb72 	bl	800947a <USBD_CtlError>
        break;
 8008d96:	e017      	b.n	8008dc8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	885b      	ldrh	r3, [r3, #2]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d112      	bne.n	8008dc6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f004 feaf 	bl	800db12 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fc29 	bl	800960c <USBD_CtlSendStatus>
        }
        break;
 8008dba:	e004      	b.n	8008dc6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fb5b 	bl	800947a <USBD_CtlError>
        break;
 8008dc4:	e000      	b.n	8008dc8 <USBD_StdEPReq+0x14c>
        break;
 8008dc6:	bf00      	nop
      }
      break;
 8008dc8:	e0a8      	b.n	8008f1c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d002      	beq.n	8008dda <USBD_StdEPReq+0x15e>
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d031      	beq.n	8008e3c <USBD_StdEPReq+0x1c0>
 8008dd8:	e095      	b.n	8008f06 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d007      	beq.n	8008df0 <USBD_StdEPReq+0x174>
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	2b80      	cmp	r3, #128	; 0x80
 8008de4:	d004      	beq.n	8008df0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fb46 	bl	800947a <USBD_CtlError>
          break;
 8008dee:	e08f      	b.n	8008f10 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008df0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	da0b      	bge.n	8008e10 <USBD_StdEPReq+0x194>
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	3310      	adds	r3, #16
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	e00a      	b.n	8008e26 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	4413      	add	r3, r2
 8008e26:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2202      	movs	r2, #2
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fb8b 	bl	8009550 <USBD_CtlSendData>
          break;
 8008e3a:	e069      	b.n	8008f10 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008e3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	da11      	bge.n	8008e68 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
 8008e46:	f003 020f 	and.w	r2, r3, #15
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	3318      	adds	r3, #24
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d117      	bne.n	8008e8e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fb0a 	bl	800947a <USBD_CtlError>
            break;
 8008e66:	e053      	b.n	8008f10 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	f003 020f 	and.w	r2, r3, #15
 8008e6e:	6879      	ldr	r1, [r7, #4]
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	440b      	add	r3, r1
 8008e7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d104      	bne.n	8008e8e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 faf7 	bl	800947a <USBD_CtlError>
            break;
 8008e8c:	e040      	b.n	8008f10 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008e8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	da0b      	bge.n	8008eae <USBD_StdEPReq+0x232>
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	3310      	adds	r3, #16
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	3304      	adds	r3, #4
 8008eac:	e00a      	b.n	8008ec4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <USBD_StdEPReq+0x256>
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2b80      	cmp	r3, #128	; 0x80
 8008ed0:	d103      	bne.n	8008eda <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	e00e      	b.n	8008ef8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f004 fe36 	bl	800db50 <USBD_LL_IsStallEP>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2201      	movs	r2, #1
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	e002      	b.n	8008ef8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2202      	movs	r2, #2
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fb26 	bl	8009550 <USBD_CtlSendData>
          break;
 8008f04:	e004      	b.n	8008f10 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fab6 	bl	800947a <USBD_CtlError>
        break;
 8008f0e:	bf00      	nop
      }
      break;
 8008f10:	e004      	b.n	8008f1c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fab0 	bl	800947a <USBD_CtlError>
      break;
 8008f1a:	bf00      	nop
    }
    break;
 8008f1c:	e004      	b.n	8008f28 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 faaa 	bl	800947a <USBD_CtlError>
    break;
 8008f26:	bf00      	nop
  }

  return ret;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	885b      	ldrh	r3, [r3, #2]
 8008f42:	0a1b      	lsrs	r3, r3, #8
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	3b01      	subs	r3, #1
 8008f48:	2b06      	cmp	r3, #6
 8008f4a:	f200 80c9 	bhi.w	80090e0 <USBD_GetDescriptor+0x1ac>
 8008f4e:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <USBD_GetDescriptor+0x20>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008f71 	.word	0x08008f71
 8008f58:	08008f89 	.word	0x08008f89
 8008f5c:	08008fc9 	.word	0x08008fc9
 8008f60:	080090e1 	.word	0x080090e1
 8008f64:	080090e1 	.word	0x080090e1
 8008f68:	0800908d 	.word	0x0800908d
 8008f6c:	080090b3 	.word	0x080090b3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	7c12      	ldrb	r2, [r2, #16]
 8008f7c:	f107 010a 	add.w	r1, r7, #10
 8008f80:	4610      	mov	r0, r2
 8008f82:	4798      	blx	r3
 8008f84:	60f8      	str	r0, [r7, #12]
    break;
 8008f86:	e0b0      	b.n	80090ea <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	7c1b      	ldrb	r3, [r3, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10d      	bne.n	8008fac <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f98:	f107 020a 	add.w	r2, r7, #10
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4798      	blx	r3
 8008fa0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008faa:	e09e      	b.n	80090ea <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb4:	f107 020a 	add.w	r2, r7, #10
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4798      	blx	r3
 8008fbc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	701a      	strb	r2, [r3, #0]
    break;
 8008fc6:	e090      	b.n	80090ea <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	885b      	ldrh	r3, [r3, #2]
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b05      	cmp	r3, #5
 8008fd0:	d856      	bhi.n	8009080 <USBD_GetDescriptor+0x14c>
 8008fd2:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <USBD_GetDescriptor+0xa4>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08008ff1 	.word	0x08008ff1
 8008fdc:	08009009 	.word	0x08009009
 8008fe0:	08009021 	.word	0x08009021
 8008fe4:	08009039 	.word	0x08009039
 8008fe8:	08009051 	.word	0x08009051
 8008fec:	08009069 	.word	0x08009069
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	7c12      	ldrb	r2, [r2, #16]
 8008ffc:	f107 010a 	add.w	r1, r7, #10
 8009000:	4610      	mov	r0, r2
 8009002:	4798      	blx	r3
 8009004:	60f8      	str	r0, [r7, #12]
      break;
 8009006:	e040      	b.n	800908a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	7c12      	ldrb	r2, [r2, #16]
 8009014:	f107 010a 	add.w	r1, r7, #10
 8009018:	4610      	mov	r0, r2
 800901a:	4798      	blx	r3
 800901c:	60f8      	str	r0, [r7, #12]
      break;
 800901e:	e034      	b.n	800908a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	7c12      	ldrb	r2, [r2, #16]
 800902c:	f107 010a 	add.w	r1, r7, #10
 8009030:	4610      	mov	r0, r2
 8009032:	4798      	blx	r3
 8009034:	60f8      	str	r0, [r7, #12]
      break;
 8009036:	e028      	b.n	800908a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7c12      	ldrb	r2, [r2, #16]
 8009044:	f107 010a 	add.w	r1, r7, #10
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
      break;
 800904e:	e01c      	b.n	800908a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	7c12      	ldrb	r2, [r2, #16]
 800905c:	f107 010a 	add.w	r1, r7, #10
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
 8009064:	60f8      	str	r0, [r7, #12]
      break;
 8009066:	e010      	b.n	800908a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	7c12      	ldrb	r2, [r2, #16]
 8009074:	f107 010a 	add.w	r1, r7, #10
 8009078:	4610      	mov	r0, r2
 800907a:	4798      	blx	r3
 800907c:	60f8      	str	r0, [r7, #12]
      break;
 800907e:	e004      	b.n	800908a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f9f9 	bl	800947a <USBD_CtlError>
      return;
 8009088:	e04b      	b.n	8009122 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800908a:	e02e      	b.n	80090ea <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	7c1b      	ldrb	r3, [r3, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d109      	bne.n	80090a8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800909a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909c:	f107 020a 	add.w	r2, r7, #10
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	60f8      	str	r0, [r7, #12]
      break;
 80090a6:	e020      	b.n	80090ea <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f9e5 	bl	800947a <USBD_CtlError>
      return;
 80090b0:	e037      	b.n	8009122 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	7c1b      	ldrb	r3, [r3, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10d      	bne.n	80090d6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	f107 020a 	add.w	r2, r7, #10
 80090c6:	4610      	mov	r0, r2
 80090c8:	4798      	blx	r3
 80090ca:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	2207      	movs	r2, #7
 80090d2:	701a      	strb	r2, [r3, #0]
      break;
 80090d4:	e009      	b.n	80090ea <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f9ce 	bl	800947a <USBD_CtlError>
      return;
 80090de:	e020      	b.n	8009122 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f9c9 	bl	800947a <USBD_CtlError>
    return;
 80090e8:	e01b      	b.n	8009122 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80090ea:	897b      	ldrh	r3, [r7, #10]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d011      	beq.n	8009114 <USBD_GetDescriptor+0x1e0>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	88db      	ldrh	r3, [r3, #6]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00d      	beq.n	8009114 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	88da      	ldrh	r2, [r3, #6]
 80090fc:	897b      	ldrh	r3, [r7, #10]
 80090fe:	4293      	cmp	r3, r2
 8009100:	bf28      	it	cs
 8009102:	4613      	movcs	r3, r2
 8009104:	b29b      	uxth	r3, r3
 8009106:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009108:	897b      	ldrh	r3, [r7, #10]
 800910a:	461a      	mov	r2, r3
 800910c:	68f9      	ldr	r1, [r7, #12]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fa1e 	bl	8009550 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	88db      	ldrh	r3, [r3, #6]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fa75 	bl	800960c <USBD_CtlSendStatus>
  }
}
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	889b      	ldrh	r3, [r3, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d130      	bne.n	800919c <USBD_SetAddress+0x74>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	88db      	ldrh	r3, [r3, #6]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d12c      	bne.n	800919c <USBD_SetAddress+0x74>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	885b      	ldrh	r3, [r3, #2]
 8009146:	2b7f      	cmp	r3, #127	; 0x7f
 8009148:	d828      	bhi.n	800919c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	885b      	ldrh	r3, [r3, #2]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009154:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800915c:	2b03      	cmp	r3, #3
 800915e:	d104      	bne.n	800916a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f989 	bl	800947a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009168:	e01c      	b.n	80091a4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	7bfa      	ldrb	r2, [r7, #15]
 800916e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f004 fd16 	bl	800dba8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fa45 	bl	800960c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009190:	e008      	b.n	80091a4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919a:	e003      	b.n	80091a4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f96b 	bl	800947a <USBD_CtlError>
  }
}
 80091a4:	bf00      	nop
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	885b      	ldrh	r3, [r3, #2]
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	4b41      	ldr	r3, [pc, #260]	; (80092c4 <USBD_SetConfig+0x118>)
 80091be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091c0:	4b40      	ldr	r3, [pc, #256]	; (80092c4 <USBD_SetConfig+0x118>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d904      	bls.n	80091d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f955 	bl	800947a <USBD_CtlError>
 80091d0:	e075      	b.n	80092be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d002      	beq.n	80091e2 <USBD_SetConfig+0x36>
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d023      	beq.n	8009228 <USBD_SetConfig+0x7c>
 80091e0:	e062      	b.n	80092a8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80091e2:	4b38      	ldr	r3, [pc, #224]	; (80092c4 <USBD_SetConfig+0x118>)
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d01a      	beq.n	8009220 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80091ea:	4b36      	ldr	r3, [pc, #216]	; (80092c4 <USBD_SetConfig+0x118>)
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2203      	movs	r2, #3
 80091f8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091fc:	4b31      	ldr	r3, [pc, #196]	; (80092c4 <USBD_SetConfig+0x118>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff fa2a 	bl	800865c <USBD_SetClassConfig>
 8009208:	4603      	mov	r3, r0
 800920a:	2b02      	cmp	r3, #2
 800920c:	d104      	bne.n	8009218 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f932 	bl	800947a <USBD_CtlError>
          return;
 8009216:	e052      	b.n	80092be <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f9f7 	bl	800960c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800921e:	e04e      	b.n	80092be <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f9f3 	bl	800960c <USBD_CtlSendStatus>
      break;
 8009226:	e04a      	b.n	80092be <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009228:	4b26      	ldr	r3, [pc, #152]	; (80092c4 <USBD_SetConfig+0x118>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d112      	bne.n	8009256 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2202      	movs	r2, #2
 8009234:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009238:	4b22      	ldr	r3, [pc, #136]	; (80092c4 <USBD_SetConfig+0x118>)
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	461a      	mov	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009242:	4b20      	ldr	r3, [pc, #128]	; (80092c4 <USBD_SetConfig+0x118>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff fa26 	bl	800869a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f9dc 	bl	800960c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009254:	e033      	b.n	80092be <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009256:	4b1b      	ldr	r3, [pc, #108]	; (80092c4 <USBD_SetConfig+0x118>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	429a      	cmp	r2, r3
 8009262:	d01d      	beq.n	80092a0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	b2db      	uxtb	r3, r3
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff fa14 	bl	800869a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009272:	4b14      	ldr	r3, [pc, #80]	; (80092c4 <USBD_SetConfig+0x118>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800927c:	4b11      	ldr	r3, [pc, #68]	; (80092c4 <USBD_SetConfig+0x118>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7ff f9ea 	bl	800865c <USBD_SetClassConfig>
 8009288:	4603      	mov	r3, r0
 800928a:	2b02      	cmp	r3, #2
 800928c:	d104      	bne.n	8009298 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f8f2 	bl	800947a <USBD_CtlError>
          return;
 8009296:	e012      	b.n	80092be <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f9b7 	bl	800960c <USBD_CtlSendStatus>
      break;
 800929e:	e00e      	b.n	80092be <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f9b3 	bl	800960c <USBD_CtlSendStatus>
      break;
 80092a6:	e00a      	b.n	80092be <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f8e5 	bl	800947a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80092b0:	4b04      	ldr	r3, [pc, #16]	; (80092c4 <USBD_SetConfig+0x118>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff f9ef 	bl	800869a <USBD_ClrClassConfig>
      break;
 80092bc:	bf00      	nop
    }
  }
}
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	20000400 	.word	0x20000400

080092c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	88db      	ldrh	r3, [r3, #6]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d004      	beq.n	80092e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f8cc 	bl	800947a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80092e2:	e021      	b.n	8009328 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	db17      	blt.n	800931e <USBD_GetConfig+0x56>
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	dd02      	ble.n	80092f8 <USBD_GetConfig+0x30>
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d00b      	beq.n	800930e <USBD_GetConfig+0x46>
 80092f6:	e012      	b.n	800931e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	3308      	adds	r3, #8
 8009302:	2201      	movs	r2, #1
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f922 	bl	8009550 <USBD_CtlSendData>
      break;
 800930c:	e00c      	b.n	8009328 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3304      	adds	r3, #4
 8009312:	2201      	movs	r2, #1
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f91a 	bl	8009550 <USBD_CtlSendData>
      break;
 800931c:	e004      	b.n	8009328 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f8aa 	bl	800947a <USBD_CtlError>
      break;
 8009326:	bf00      	nop
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009340:	3b01      	subs	r3, #1
 8009342:	2b02      	cmp	r3, #2
 8009344:	d81e      	bhi.n	8009384 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	88db      	ldrh	r3, [r3, #6]
 800934a:	2b02      	cmp	r3, #2
 800934c:	d004      	beq.n	8009358 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f892 	bl	800947a <USBD_CtlError>
      break;
 8009356:	e01a      	b.n	800938e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	f043 0202 	orr.w	r2, r3, #2
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	330c      	adds	r3, #12
 8009378:	2202      	movs	r2, #2
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f8e7 	bl	8009550 <USBD_CtlSendData>
    break;
 8009382:	e004      	b.n	800938e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f877 	bl	800947a <USBD_CtlError>
    break;
 800938c:	bf00      	nop
  }
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b082      	sub	sp, #8
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	885b      	ldrh	r3, [r3, #2]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d106      	bne.n	80093b6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f92b 	bl	800960c <USBD_CtlSendStatus>
  }

}
 80093b6:	bf00      	nop
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80093ce:	3b01      	subs	r3, #1
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d80b      	bhi.n	80093ec <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	885b      	ldrh	r3, [r3, #2]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d10c      	bne.n	80093f6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f911 	bl	800960c <USBD_CtlSendStatus>
    }
    break;
 80093ea:	e004      	b.n	80093f6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f843 	bl	800947a <USBD_CtlError>
    break;
 80093f4:	e000      	b.n	80093f8 <USBD_ClrFeature+0x3a>
    break;
 80093f6:	bf00      	nop
  }
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781a      	ldrb	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	785a      	ldrb	r2, [r3, #1]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	3302      	adds	r3, #2
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	b29a      	uxth	r2, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	3303      	adds	r3, #3
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	b29b      	uxth	r3, r3
 800942a:	021b      	lsls	r3, r3, #8
 800942c:	b29b      	uxth	r3, r3
 800942e:	4413      	add	r3, r2
 8009430:	b29a      	uxth	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	3304      	adds	r3, #4
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	b29a      	uxth	r2, r3
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	3305      	adds	r3, #5
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	b29b      	uxth	r3, r3
 8009446:	021b      	lsls	r3, r3, #8
 8009448:	b29b      	uxth	r3, r3
 800944a:	4413      	add	r3, r2
 800944c:	b29a      	uxth	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	3306      	adds	r3, #6
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	b29a      	uxth	r2, r3
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	3307      	adds	r3, #7
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	b29b      	uxth	r3, r3
 8009462:	021b      	lsls	r3, r3, #8
 8009464:	b29b      	uxth	r3, r3
 8009466:	4413      	add	r3, r2
 8009468:	b29a      	uxth	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	80da      	strh	r2, [r3, #6]

}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009484:	2180      	movs	r1, #128	; 0x80
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f004 fb24 	bl	800dad4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800948c:	2100      	movs	r1, #0
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f004 fb20 	bl	800dad4 <USBD_LL_StallEP>
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d032      	beq.n	8009518 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 f834 	bl	8009520 <USBD_GetLen>
 80094b8:	4603      	mov	r3, r0
 80094ba:	3301      	adds	r3, #1
 80094bc:	b29b      	uxth	r3, r3
 80094be:	005b      	lsls	r3, r3, #1
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	75fa      	strb	r2, [r7, #23]
 80094cc:	461a      	mov	r2, r3
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	4413      	add	r3, r2
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	7812      	ldrb	r2, [r2, #0]
 80094d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	75fa      	strb	r2, [r7, #23]
 80094de:	461a      	mov	r2, r3
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4413      	add	r3, r2
 80094e4:	2203      	movs	r2, #3
 80094e6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80094e8:	e012      	b.n	8009510 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	60fa      	str	r2, [r7, #12]
 80094f0:	7dfa      	ldrb	r2, [r7, #23]
 80094f2:	1c51      	adds	r1, r2, #1
 80094f4:	75f9      	strb	r1, [r7, #23]
 80094f6:	4611      	mov	r1, r2
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	440a      	add	r2, r1
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009500:	7dfb      	ldrb	r3, [r7, #23]
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	75fa      	strb	r2, [r7, #23]
 8009506:	461a      	mov	r2, r3
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	4413      	add	r3, r2
 800950c:	2200      	movs	r2, #0
 800950e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e8      	bne.n	80094ea <USBD_GetString+0x4e>
    }
  }
}
 8009518:	bf00      	nop
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800952c:	e005      	b.n	800953a <USBD_GetLen+0x1a>
    {
        len++;
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	3301      	adds	r3, #1
 8009532:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3301      	adds	r3, #1
 8009538:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1f5      	bne.n	800952e <USBD_GetLen+0xe>
    }

    return len;
 8009542:	7bfb      	ldrb	r3, [r7, #15]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2202      	movs	r2, #2
 8009562:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009566:	88fa      	ldrh	r2, [r7, #6]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800956c:	88fa      	ldrh	r2, [r7, #6]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009572:	88fb      	ldrh	r3, [r7, #6]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	2100      	movs	r1, #0
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f004 fb34 	bl	800dbe6 <USBD_LL_Transmit>

  return USBD_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	2100      	movs	r1, #0
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f004 fb22 	bl	800dbe6 <USBD_LL_Transmit>

  return USBD_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	4613      	mov	r3, r2
 80095b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2203      	movs	r2, #3
 80095be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80095c2:	88fa      	ldrh	r2, [r7, #6]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80095ca:	88fa      	ldrh	r2, [r7, #6]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	2100      	movs	r1, #0
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f004 fb27 	bl	800dc2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095f6:	88fb      	ldrh	r3, [r7, #6]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	2100      	movs	r1, #0
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f004 fb15 	bl	800dc2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2204      	movs	r2, #4
 8009618:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800961c:	2300      	movs	r3, #0
 800961e:	2200      	movs	r2, #0
 8009620:	2100      	movs	r1, #0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f004 fadf 	bl	800dbe6 <USBD_LL_Transmit>

  return USBD_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2205      	movs	r2, #5
 800963e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009642:	2300      	movs	r3, #0
 8009644:	2200      	movs	r2, #0
 8009646:	2100      	movs	r1, #0
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f004 faef 	bl	800dc2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009662:	79fb      	ldrb	r3, [r7, #7]
 8009664:	4a08      	ldr	r2, [pc, #32]	; (8009688 <disk_status+0x30>)
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	79fa      	ldrb	r2, [r7, #7]
 8009670:	4905      	ldr	r1, [pc, #20]	; (8009688 <disk_status+0x30>)
 8009672:	440a      	add	r2, r1
 8009674:	7a12      	ldrb	r2, [r2, #8]
 8009676:	4610      	mov	r0, r2
 8009678:	4798      	blx	r3
 800967a:	4603      	mov	r3, r0
 800967c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800967e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	2000042c 	.word	0x2000042c

0800968c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800969a:	79fb      	ldrb	r3, [r7, #7]
 800969c:	4a0d      	ldr	r2, [pc, #52]	; (80096d4 <disk_initialize+0x48>)
 800969e:	5cd3      	ldrb	r3, [r2, r3]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d111      	bne.n	80096c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	4a0b      	ldr	r2, [pc, #44]	; (80096d4 <disk_initialize+0x48>)
 80096a8:	2101      	movs	r1, #1
 80096aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	4a09      	ldr	r2, [pc, #36]	; (80096d4 <disk_initialize+0x48>)
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	79fa      	ldrb	r2, [r7, #7]
 80096ba:	4906      	ldr	r1, [pc, #24]	; (80096d4 <disk_initialize+0x48>)
 80096bc:	440a      	add	r2, r1
 80096be:	7a12      	ldrb	r2, [r2, #8]
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	4603      	mov	r3, r0
 80096c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	2000042c 	.word	0x2000042c

080096d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80096d8:	b590      	push	{r4, r7, lr}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	607a      	str	r2, [r7, #4]
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	4603      	mov	r3, r0
 80096e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	4a0a      	ldr	r2, [pc, #40]	; (8009714 <disk_read+0x3c>)
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	689c      	ldr	r4, [r3, #8]
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	4a07      	ldr	r2, [pc, #28]	; (8009714 <disk_read+0x3c>)
 80096f8:	4413      	add	r3, r2
 80096fa:	7a18      	ldrb	r0, [r3, #8]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	47a0      	blx	r4
 8009704:	4603      	mov	r3, r0
 8009706:	75fb      	strb	r3, [r7, #23]
  return res;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
}
 800970a:	4618      	mov	r0, r3
 800970c:	371c      	adds	r7, #28
 800970e:	46bd      	mov	sp, r7
 8009710:	bd90      	pop	{r4, r7, pc}
 8009712:	bf00      	nop
 8009714:	2000042c 	.word	0x2000042c

08009718 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009718:	b590      	push	{r4, r7, lr}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	60b9      	str	r1, [r7, #8]
 8009720:	607a      	str	r2, [r7, #4]
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	4603      	mov	r3, r0
 8009726:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	4a0a      	ldr	r2, [pc, #40]	; (8009754 <disk_write+0x3c>)
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	68dc      	ldr	r4, [r3, #12]
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	4a07      	ldr	r2, [pc, #28]	; (8009754 <disk_write+0x3c>)
 8009738:	4413      	add	r3, r2
 800973a:	7a18      	ldrb	r0, [r3, #8]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	68b9      	ldr	r1, [r7, #8]
 8009742:	47a0      	blx	r4
 8009744:	4603      	mov	r3, r0
 8009746:	75fb      	strb	r3, [r7, #23]
  return res;
 8009748:	7dfb      	ldrb	r3, [r7, #23]
}
 800974a:	4618      	mov	r0, r3
 800974c:	371c      	adds	r7, #28
 800974e:	46bd      	mov	sp, r7
 8009750:	bd90      	pop	{r4, r7, pc}
 8009752:	bf00      	nop
 8009754:	2000042c 	.word	0x2000042c

08009758 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	603a      	str	r2, [r7, #0]
 8009762:	71fb      	strb	r3, [r7, #7]
 8009764:	460b      	mov	r3, r1
 8009766:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	4a09      	ldr	r2, [pc, #36]	; (8009790 <disk_ioctl+0x38>)
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	79fa      	ldrb	r2, [r7, #7]
 8009776:	4906      	ldr	r1, [pc, #24]	; (8009790 <disk_ioctl+0x38>)
 8009778:	440a      	add	r2, r1
 800977a:	7a10      	ldrb	r0, [r2, #8]
 800977c:	79b9      	ldrb	r1, [r7, #6]
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	4798      	blx	r3
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]
  return res;
 8009786:	7bfb      	ldrb	r3, [r7, #15]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	2000042c 	.word	0x2000042c

08009794 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3301      	adds	r3, #1
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80097a4:	89fb      	ldrh	r3, [r7, #14]
 80097a6:	021b      	lsls	r3, r3, #8
 80097a8:	b21a      	sxth	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	b21b      	sxth	r3, r3
 80097b0:	4313      	orrs	r3, r2
 80097b2:	b21b      	sxth	r3, r3
 80097b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80097b6:	89fb      	ldrh	r3, [r7, #14]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3303      	adds	r3, #3
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	021b      	lsls	r3, r3, #8
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	3202      	adds	r2, #2
 80097dc:	7812      	ldrb	r2, [r2, #0]
 80097de:	4313      	orrs	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	021b      	lsls	r3, r3, #8
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	3201      	adds	r2, #1
 80097ea:	7812      	ldrb	r2, [r2, #0]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	021b      	lsls	r3, r3, #8
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	7812      	ldrb	r2, [r2, #0]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80097fc:	68fb      	ldr	r3, [r7, #12]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	607a      	str	r2, [r7, #4]
 800981c:	887a      	ldrh	r2, [r7, #2]
 800981e:	b2d2      	uxtb	r2, r2
 8009820:	701a      	strb	r2, [r3, #0]
 8009822:	887b      	ldrh	r3, [r7, #2]
 8009824:	0a1b      	lsrs	r3, r3, #8
 8009826:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	607a      	str	r2, [r7, #4]
 800982e:	887a      	ldrh	r2, [r7, #2]
 8009830:	b2d2      	uxtb	r2, r2
 8009832:	701a      	strb	r2, [r3, #0]
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	b2d2      	uxtb	r2, r2
 8009854:	701a      	strb	r2, [r3, #0]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	0a1b      	lsrs	r3, r3, #8
 800985a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	1c5a      	adds	r2, r3, #1
 8009860:	607a      	str	r2, [r7, #4]
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	b2d2      	uxtb	r2, r2
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	0a1b      	lsrs	r3, r3, #8
 800986c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	1c5a      	adds	r2, r3, #1
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	b2d2      	uxtb	r2, r2
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	0a1b      	lsrs	r3, r3, #8
 800987e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	607a      	str	r2, [r7, #4]
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	b2d2      	uxtb	r2, r2
 800988a:	701a      	strb	r2, [r3, #0]
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00d      	beq.n	80098ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	1c53      	adds	r3, r2, #1
 80098b6:	613b      	str	r3, [r7, #16]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	1c59      	adds	r1, r3, #1
 80098bc:	6179      	str	r1, [r7, #20]
 80098be:	7812      	ldrb	r2, [r2, #0]
 80098c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	607b      	str	r3, [r7, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1f1      	bne.n	80098b2 <mem_cpy+0x1a>
	}
}
 80098ce:	bf00      	nop
 80098d0:	371c      	adds	r7, #28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80098da:	b480      	push	{r7}
 80098dc:	b087      	sub	sp, #28
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	617a      	str	r2, [r7, #20]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	b2d2      	uxtb	r2, r2
 80098f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	607b      	str	r3, [r7, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1f3      	bne.n	80098ea <mem_set+0x10>
}
 8009902:	bf00      	nop
 8009904:	371c      	adds	r7, #28
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800990e:	b480      	push	{r7}
 8009910:	b089      	sub	sp, #36	; 0x24
 8009912:	af00      	add	r7, sp, #0
 8009914:	60f8      	str	r0, [r7, #12]
 8009916:	60b9      	str	r1, [r7, #8]
 8009918:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	61fb      	str	r3, [r7, #28]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	1c5a      	adds	r2, r3, #1
 800992a:	61fa      	str	r2, [r7, #28]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	4619      	mov	r1, r3
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	61ba      	str	r2, [r7, #24]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	1acb      	subs	r3, r1, r3
 800993a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3b01      	subs	r3, #1
 8009940:	607b      	str	r3, [r7, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <mem_cmp+0x40>
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0eb      	beq.n	8009926 <mem_cmp+0x18>

	return r;
 800994e:	697b      	ldr	r3, [r7, #20]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3724      	adds	r7, #36	; 0x24
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009966:	e002      	b.n	800996e <chk_chr+0x12>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3301      	adds	r3, #1
 800996c:	607b      	str	r3, [r7, #4]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d005      	beq.n	8009982 <chk_chr+0x26>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	4293      	cmp	r3, r2
 8009980:	d1f2      	bne.n	8009968 <chk_chr+0xc>
	return *str;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	781b      	ldrb	r3, [r3, #0]
}
 8009986:	4618      	mov	r0, r3
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
	...

08009994 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800999e:	2300      	movs	r3, #0
 80099a0:	60bb      	str	r3, [r7, #8]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	60fb      	str	r3, [r7, #12]
 80099a6:	e029      	b.n	80099fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80099a8:	4a27      	ldr	r2, [pc, #156]	; (8009a48 <chk_lock+0xb4>)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	011b      	lsls	r3, r3, #4
 80099ae:	4413      	add	r3, r2
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d01d      	beq.n	80099f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80099b6:	4a24      	ldr	r2, [pc, #144]	; (8009a48 <chk_lock+0xb4>)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	4413      	add	r3, r2
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d116      	bne.n	80099f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80099c8:	4a1f      	ldr	r2, [pc, #124]	; (8009a48 <chk_lock+0xb4>)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	4413      	add	r3, r2
 80099d0:	3304      	adds	r3, #4
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80099d8:	429a      	cmp	r2, r3
 80099da:	d10c      	bne.n	80099f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80099dc:	4a1a      	ldr	r2, [pc, #104]	; (8009a48 <chk_lock+0xb4>)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	011b      	lsls	r3, r3, #4
 80099e2:	4413      	add	r3, r2
 80099e4:	3308      	adds	r3, #8
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d102      	bne.n	80099f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80099f0:	e007      	b.n	8009a02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80099f2:	2301      	movs	r3, #1
 80099f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3301      	adds	r3, #1
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d9d2      	bls.n	80099a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d109      	bne.n	8009a1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <chk_lock+0x80>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d101      	bne.n	8009a18 <chk_lock+0x84>
 8009a14:	2300      	movs	r3, #0
 8009a16:	e010      	b.n	8009a3a <chk_lock+0xa6>
 8009a18:	2312      	movs	r3, #18
 8009a1a:	e00e      	b.n	8009a3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d108      	bne.n	8009a34 <chk_lock+0xa0>
 8009a22:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <chk_lock+0xb4>)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	011b      	lsls	r3, r3, #4
 8009a28:	4413      	add	r3, r2
 8009a2a:	330c      	adds	r3, #12
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a32:	d101      	bne.n	8009a38 <chk_lock+0xa4>
 8009a34:	2310      	movs	r3, #16
 8009a36:	e000      	b.n	8009a3a <chk_lock+0xa6>
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	2000040c 	.word	0x2000040c

08009a4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a52:	2300      	movs	r3, #0
 8009a54:	607b      	str	r3, [r7, #4]
 8009a56:	e002      	b.n	8009a5e <enq_lock+0x12>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	607b      	str	r3, [r7, #4]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d806      	bhi.n	8009a72 <enq_lock+0x26>
 8009a64:	4a09      	ldr	r2, [pc, #36]	; (8009a8c <enq_lock+0x40>)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	011b      	lsls	r3, r3, #4
 8009a6a:	4413      	add	r3, r2
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1f2      	bne.n	8009a58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	bf14      	ite	ne
 8009a78:	2301      	movne	r3, #1
 8009a7a:	2300      	moveq	r3, #0
 8009a7c:	b2db      	uxtb	r3, r3
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	370c      	adds	r7, #12
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	2000040c 	.word	0x2000040c

08009a90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	e01f      	b.n	8009ae0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009aa0:	4a41      	ldr	r2, [pc, #260]	; (8009ba8 <inc_lock+0x118>)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	011b      	lsls	r3, r3, #4
 8009aa6:	4413      	add	r3, r2
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d113      	bne.n	8009ada <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009ab2:	4a3d      	ldr	r2, [pc, #244]	; (8009ba8 <inc_lock+0x118>)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	011b      	lsls	r3, r3, #4
 8009ab8:	4413      	add	r3, r2
 8009aba:	3304      	adds	r3, #4
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d109      	bne.n	8009ada <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009ac6:	4a38      	ldr	r2, [pc, #224]	; (8009ba8 <inc_lock+0x118>)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	011b      	lsls	r3, r3, #4
 8009acc:	4413      	add	r3, r2
 8009ace:	3308      	adds	r3, #8
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d006      	beq.n	8009ae8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	3301      	adds	r3, #1
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d9dc      	bls.n	8009aa0 <inc_lock+0x10>
 8009ae6:	e000      	b.n	8009aea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009ae8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d132      	bne.n	8009b56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	e002      	b.n	8009afc <inc_lock+0x6c>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3301      	adds	r3, #1
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d806      	bhi.n	8009b10 <inc_lock+0x80>
 8009b02:	4a29      	ldr	r2, [pc, #164]	; (8009ba8 <inc_lock+0x118>)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	011b      	lsls	r3, r3, #4
 8009b08:	4413      	add	r3, r2
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1f2      	bne.n	8009af6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d101      	bne.n	8009b1a <inc_lock+0x8a>
 8009b16:	2300      	movs	r3, #0
 8009b18:	e040      	b.n	8009b9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	4922      	ldr	r1, [pc, #136]	; (8009ba8 <inc_lock+0x118>)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	011b      	lsls	r3, r3, #4
 8009b24:	440b      	add	r3, r1
 8009b26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689a      	ldr	r2, [r3, #8]
 8009b2c:	491e      	ldr	r1, [pc, #120]	; (8009ba8 <inc_lock+0x118>)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	011b      	lsls	r3, r3, #4
 8009b32:	440b      	add	r3, r1
 8009b34:	3304      	adds	r3, #4
 8009b36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	695a      	ldr	r2, [r3, #20]
 8009b3c:	491a      	ldr	r1, [pc, #104]	; (8009ba8 <inc_lock+0x118>)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	011b      	lsls	r3, r3, #4
 8009b42:	440b      	add	r3, r1
 8009b44:	3308      	adds	r3, #8
 8009b46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b48:	4a17      	ldr	r2, [pc, #92]	; (8009ba8 <inc_lock+0x118>)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	011b      	lsls	r3, r3, #4
 8009b4e:	4413      	add	r3, r2
 8009b50:	330c      	adds	r3, #12
 8009b52:	2200      	movs	r2, #0
 8009b54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d009      	beq.n	8009b70 <inc_lock+0xe0>
 8009b5c:	4a12      	ldr	r2, [pc, #72]	; (8009ba8 <inc_lock+0x118>)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	011b      	lsls	r3, r3, #4
 8009b62:	4413      	add	r3, r2
 8009b64:	330c      	adds	r3, #12
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <inc_lock+0xe0>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e015      	b.n	8009b9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d108      	bne.n	8009b88 <inc_lock+0xf8>
 8009b76:	4a0c      	ldr	r2, [pc, #48]	; (8009ba8 <inc_lock+0x118>)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	011b      	lsls	r3, r3, #4
 8009b7c:	4413      	add	r3, r2
 8009b7e:	330c      	adds	r3, #12
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	3301      	adds	r3, #1
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	e001      	b.n	8009b8c <inc_lock+0xfc>
 8009b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b8c:	4906      	ldr	r1, [pc, #24]	; (8009ba8 <inc_lock+0x118>)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	011b      	lsls	r3, r3, #4
 8009b92:	440b      	add	r3, r1
 8009b94:	330c      	adds	r3, #12
 8009b96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3301      	adds	r3, #1
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	2000040c 	.word	0x2000040c

08009bac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	607b      	str	r3, [r7, #4]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d825      	bhi.n	8009c0c <dec_lock+0x60>
		n = Files[i].ctr;
 8009bc0:	4a17      	ldr	r2, [pc, #92]	; (8009c20 <dec_lock+0x74>)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	011b      	lsls	r3, r3, #4
 8009bc6:	4413      	add	r3, r2
 8009bc8:	330c      	adds	r3, #12
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009bce:	89fb      	ldrh	r3, [r7, #14]
 8009bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bd4:	d101      	bne.n	8009bda <dec_lock+0x2e>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009bda:	89fb      	ldrh	r3, [r7, #14]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <dec_lock+0x3a>
 8009be0:	89fb      	ldrh	r3, [r7, #14]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009be6:	4a0e      	ldr	r2, [pc, #56]	; (8009c20 <dec_lock+0x74>)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	011b      	lsls	r3, r3, #4
 8009bec:	4413      	add	r3, r2
 8009bee:	330c      	adds	r3, #12
 8009bf0:	89fa      	ldrh	r2, [r7, #14]
 8009bf2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009bf4:	89fb      	ldrh	r3, [r7, #14]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d105      	bne.n	8009c06 <dec_lock+0x5a>
 8009bfa:	4a09      	ldr	r2, [pc, #36]	; (8009c20 <dec_lock+0x74>)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	011b      	lsls	r3, r3, #4
 8009c00:	4413      	add	r3, r2
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	737b      	strb	r3, [r7, #13]
 8009c0a:	e001      	b.n	8009c10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c10:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	2000040c 	.word	0x2000040c

08009c24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	e010      	b.n	8009c54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c32:	4a0d      	ldr	r2, [pc, #52]	; (8009c68 <clear_lock+0x44>)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	011b      	lsls	r3, r3, #4
 8009c38:	4413      	add	r3, r2
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d105      	bne.n	8009c4e <clear_lock+0x2a>
 8009c42:	4a09      	ldr	r2, [pc, #36]	; (8009c68 <clear_lock+0x44>)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	011b      	lsls	r3, r3, #4
 8009c48:	4413      	add	r3, r2
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3301      	adds	r3, #1
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d9eb      	bls.n	8009c32 <clear_lock+0xe>
	}
}
 8009c5a:	bf00      	nop
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	2000040c 	.word	0x2000040c

08009c6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	78db      	ldrb	r3, [r3, #3]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d034      	beq.n	8009cea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	7858      	ldrb	r0, [r3, #1]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009c90:	2301      	movs	r3, #1
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	f7ff fd40 	bl	8009718 <disk_write>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d002      	beq.n	8009ca4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	73fb      	strb	r3, [r7, #15]
 8009ca2:	e022      	b.n	8009cea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	1ad2      	subs	r2, r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d217      	bcs.n	8009cea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	789b      	ldrb	r3, [r3, #2]
 8009cbe:	613b      	str	r3, [r7, #16]
 8009cc0:	e010      	b.n	8009ce4 <sync_window+0x78>
					wsect += fs->fsize;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	4413      	add	r3, r2
 8009cca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7858      	ldrb	r0, [r3, #1]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	f7ff fd1d 	bl	8009718 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	613b      	str	r3, [r7, #16]
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d8eb      	bhi.n	8009cc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d01b      	beq.n	8009d44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7ff ffad 	bl	8009c6c <sync_window>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d113      	bne.n	8009d44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7858      	ldrb	r0, [r3, #1]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009d26:	2301      	movs	r3, #1
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	f7ff fcd5 	bl	80096d8 <disk_read>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d004      	beq.n	8009d3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d34:	f04f 33ff 	mov.w	r3, #4294967295
 8009d38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff ff87 	bl	8009c6c <sync_window>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d159      	bne.n	8009e1c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b03      	cmp	r3, #3
 8009d6e:	d149      	bne.n	8009e04 <sync_fs+0xb4>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	791b      	ldrb	r3, [r3, #4]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d145      	bne.n	8009e04 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	899b      	ldrh	r3, [r3, #12]
 8009d82:	461a      	mov	r2, r3
 8009d84:	2100      	movs	r1, #0
 8009d86:	f7ff fda8 	bl	80098da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3334      	adds	r3, #52	; 0x34
 8009d8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d92:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff fd37 	bl	800980a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3334      	adds	r3, #52	; 0x34
 8009da0:	4921      	ldr	r1, [pc, #132]	; (8009e28 <sync_fs+0xd8>)
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff fd4c 	bl	8009840 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3334      	adds	r3, #52	; 0x34
 8009dac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009db0:	491e      	ldr	r1, [pc, #120]	; (8009e2c <sync_fs+0xdc>)
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff fd44 	bl	8009840 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3334      	adds	r3, #52	; 0x34
 8009dbc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	f7ff fd3a 	bl	8009840 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	3334      	adds	r3, #52	; 0x34
 8009dd0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4610      	mov	r0, r2
 8009ddc:	f7ff fd30 	bl	8009840 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	7858      	ldrb	r0, [r3, #1]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f7ff fc8d 	bl	8009718 <disk_write>
			fs->fsi_flag = 0;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	785b      	ldrb	r3, [r3, #1]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7ff fca3 	bl	8009758 <disk_ioctl>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <sync_fs+0xcc>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	41615252 	.word	0x41615252
 8009e2c:	61417272 	.word	0x61417272

08009e30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	3b02      	subs	r3, #2
 8009e3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	3b02      	subs	r3, #2
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d301      	bcc.n	8009e50 <clust2sect+0x20>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e008      	b.n	8009e62 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	895b      	ldrh	r3, [r3, #10]
 8009e54:	461a      	mov	r2, r3
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	fb03 f202 	mul.w	r2, r3, r2
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e60:	4413      	add	r3, r2
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b086      	sub	sp, #24
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d904      	bls.n	8009e8e <get_fat+0x20>
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d302      	bcc.n	8009e94 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009e8e:	2301      	movs	r3, #1
 8009e90:	617b      	str	r3, [r7, #20]
 8009e92:	e0b7      	b.n	800a004 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009e94:	f04f 33ff 	mov.w	r3, #4294967295
 8009e98:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d05a      	beq.n	8009f58 <get_fat+0xea>
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d07d      	beq.n	8009fa2 <get_fat+0x134>
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	f040 80a2 	bne.w	8009ff0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	085b      	lsrs	r3, r3, #1
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	899b      	ldrh	r3, [r3, #12]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009eca:	4413      	add	r3, r2
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6938      	ldr	r0, [r7, #16]
 8009ed0:	f7ff ff10 	bl	8009cf4 <move_window>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f040 808d 	bne.w	8009ff6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	1c5a      	adds	r2, r3, #1
 8009ee0:	60fa      	str	r2, [r7, #12]
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	8992      	ldrh	r2, [r2, #12]
 8009ee6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009eea:	fb02 f201 	mul.w	r2, r2, r1
 8009eee:	1a9b      	subs	r3, r3, r2
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ef8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	899b      	ldrh	r3, [r3, #12]
 8009f02:	4619      	mov	r1, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f0a:	4413      	add	r3, r2
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6938      	ldr	r0, [r7, #16]
 8009f10:	f7ff fef0 	bl	8009cf4 <move_window>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d16f      	bne.n	8009ffa <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	899b      	ldrh	r3, [r3, #12]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f26:	fb02 f201 	mul.w	r2, r2, r1
 8009f2a:	1a9b      	subs	r3, r3, r2
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f34:	021b      	lsls	r3, r3, #8
 8009f36:	461a      	mov	r2, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <get_fat+0xe0>
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	091b      	lsrs	r3, r3, #4
 8009f4c:	e002      	b.n	8009f54 <get_fat+0xe6>
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f54:	617b      	str	r3, [r7, #20]
			break;
 8009f56:	e055      	b.n	800a004 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	899b      	ldrh	r3, [r3, #12]
 8009f60:	085b      	lsrs	r3, r3, #1
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	4619      	mov	r1, r3
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f6c:	4413      	add	r3, r2
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6938      	ldr	r0, [r7, #16]
 8009f72:	f7ff febf 	bl	8009cf4 <move_window>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d140      	bne.n	8009ffe <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	005b      	lsls	r3, r3, #1
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	8992      	ldrh	r2, [r2, #12]
 8009f8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f8e:	fb02 f200 	mul.w	r2, r2, r0
 8009f92:	1a9b      	subs	r3, r3, r2
 8009f94:	440b      	add	r3, r1
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7ff fbfc 	bl	8009794 <ld_word>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	617b      	str	r3, [r7, #20]
			break;
 8009fa0:	e030      	b.n	800a004 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	899b      	ldrh	r3, [r3, #12]
 8009faa:	089b      	lsrs	r3, r3, #2
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	4619      	mov	r1, r3
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fb6:	4413      	add	r3, r2
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6938      	ldr	r0, [r7, #16]
 8009fbc:	f7ff fe9a 	bl	8009cf4 <move_window>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d11d      	bne.n	800a002 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	8992      	ldrh	r2, [r2, #12]
 8009fd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fd8:	fb02 f200 	mul.w	r2, r2, r0
 8009fdc:	1a9b      	subs	r3, r3, r2
 8009fde:	440b      	add	r3, r1
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff fbef 	bl	80097c4 <ld_dword>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009fec:	617b      	str	r3, [r7, #20]
			break;
 8009fee:	e009      	b.n	800a004 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	617b      	str	r3, [r7, #20]
 8009ff4:	e006      	b.n	800a004 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ff6:	bf00      	nop
 8009ff8:	e004      	b.n	800a004 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ffa:	bf00      	nop
 8009ffc:	e002      	b.n	800a004 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009ffe:	bf00      	nop
 800a000:	e000      	b.n	800a004 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a002:	bf00      	nop
		}
	}

	return val;
 800a004:	697b      	ldr	r3, [r7, #20]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a00e:	b590      	push	{r4, r7, lr}
 800a010:	b089      	sub	sp, #36	; 0x24
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a01a:	2302      	movs	r3, #2
 800a01c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b01      	cmp	r3, #1
 800a022:	f240 8106 	bls.w	800a232 <put_fat+0x224>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	f080 8100 	bcs.w	800a232 <put_fat+0x224>
		switch (fs->fs_type) {
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b02      	cmp	r3, #2
 800a038:	f000 8088 	beq.w	800a14c <put_fat+0x13e>
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	f000 80b0 	beq.w	800a1a2 <put_fat+0x194>
 800a042:	2b01      	cmp	r3, #1
 800a044:	f040 80f5 	bne.w	800a232 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	61bb      	str	r3, [r7, #24]
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	69ba      	ldr	r2, [r7, #24]
 800a052:	4413      	add	r3, r2
 800a054:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	899b      	ldrh	r3, [r3, #12]
 800a05e:	4619      	mov	r1, r3
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	fbb3 f3f1 	udiv	r3, r3, r1
 800a066:	4413      	add	r3, r2
 800a068:	4619      	mov	r1, r3
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f7ff fe42 	bl	8009cf4 <move_window>
 800a070:	4603      	mov	r3, r0
 800a072:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a074:	7ffb      	ldrb	r3, [r7, #31]
 800a076:	2b00      	cmp	r3, #0
 800a078:	f040 80d4 	bne.w	800a224 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	1c5a      	adds	r2, r3, #1
 800a086:	61ba      	str	r2, [r7, #24]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	8992      	ldrh	r2, [r2, #12]
 800a08c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a090:	fb02 f200 	mul.w	r2, r2, r0
 800a094:	1a9b      	subs	r3, r3, r2
 800a096:	440b      	add	r3, r1
 800a098:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	f003 0301 	and.w	r3, r3, #1
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00d      	beq.n	800a0c0 <put_fat+0xb2>
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	b25b      	sxtb	r3, r3
 800a0aa:	f003 030f 	and.w	r3, r3, #15
 800a0ae:	b25a      	sxtb	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	011b      	lsls	r3, r3, #4
 800a0b6:	b25b      	sxtb	r3, r3
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	b25b      	sxtb	r3, r3
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	e001      	b.n	800a0c4 <put_fat+0xb6>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	899b      	ldrh	r3, [r3, #12]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0de:	4413      	add	r3, r2
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f7ff fe06 	bl	8009cf4 <move_window>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0ec:	7ffb      	ldrb	r3, [r7, #31]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f040 809a 	bne.w	800a228 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	899b      	ldrh	r3, [r3, #12]
 800a0fe:	461a      	mov	r2, r3
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	fbb3 f0f2 	udiv	r0, r3, r2
 800a106:	fb02 f200 	mul.w	r2, r2, r0
 800a10a:	1a9b      	subs	r3, r3, r2
 800a10c:	440b      	add	r3, r1
 800a10e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <put_fat+0x114>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	091b      	lsrs	r3, r3, #4
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	e00e      	b.n	800a140 <put_fat+0x132>
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	b25b      	sxtb	r3, r3
 800a128:	f023 030f 	bic.w	r3, r3, #15
 800a12c:	b25a      	sxtb	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	0a1b      	lsrs	r3, r3, #8
 800a132:	b25b      	sxtb	r3, r3
 800a134:	f003 030f 	and.w	r3, r3, #15
 800a138:	b25b      	sxtb	r3, r3
 800a13a:	4313      	orrs	r3, r2
 800a13c:	b25b      	sxtb	r3, r3
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2201      	movs	r2, #1
 800a148:	70da      	strb	r2, [r3, #3]
			break;
 800a14a:	e072      	b.n	800a232 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	899b      	ldrh	r3, [r3, #12]
 800a154:	085b      	lsrs	r3, r3, #1
 800a156:	b29b      	uxth	r3, r3
 800a158:	4619      	mov	r1, r3
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a160:	4413      	add	r3, r2
 800a162:	4619      	mov	r1, r3
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7ff fdc5 	bl	8009cf4 <move_window>
 800a16a:	4603      	mov	r3, r0
 800a16c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a16e:	7ffb      	ldrb	r3, [r7, #31]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d15b      	bne.n	800a22c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	8992      	ldrh	r2, [r2, #12]
 800a182:	fbb3 f0f2 	udiv	r0, r3, r2
 800a186:	fb02 f200 	mul.w	r2, r2, r0
 800a18a:	1a9b      	subs	r3, r3, r2
 800a18c:	440b      	add	r3, r1
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	b292      	uxth	r2, r2
 800a192:	4611      	mov	r1, r2
 800a194:	4618      	mov	r0, r3
 800a196:	f7ff fb38 	bl	800980a <st_word>
			fs->wflag = 1;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2201      	movs	r2, #1
 800a19e:	70da      	strb	r2, [r3, #3]
			break;
 800a1a0:	e047      	b.n	800a232 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	899b      	ldrh	r3, [r3, #12]
 800a1aa:	089b      	lsrs	r3, r3, #2
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1b6:	4413      	add	r3, r2
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7ff fd9a 	bl	8009cf4 <move_window>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1c4:	7ffb      	ldrb	r3, [r7, #31]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d132      	bne.n	800a230 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	8992      	ldrh	r2, [r2, #12]
 800a1de:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1e2:	fb02 f200 	mul.w	r2, r2, r0
 800a1e6:	1a9b      	subs	r3, r3, r2
 800a1e8:	440b      	add	r3, r1
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff faea 	bl	80097c4 <ld_dword>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a1f6:	4323      	orrs	r3, r4
 800a1f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	8992      	ldrh	r2, [r2, #12]
 800a208:	fbb3 f0f2 	udiv	r0, r3, r2
 800a20c:	fb02 f200 	mul.w	r2, r2, r0
 800a210:	1a9b      	subs	r3, r3, r2
 800a212:	440b      	add	r3, r1
 800a214:	6879      	ldr	r1, [r7, #4]
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff fb12 	bl	8009840 <st_dword>
			fs->wflag = 1;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2201      	movs	r2, #1
 800a220:	70da      	strb	r2, [r3, #3]
			break;
 800a222:	e006      	b.n	800a232 <put_fat+0x224>
			if (res != FR_OK) break;
 800a224:	bf00      	nop
 800a226:	e004      	b.n	800a232 <put_fat+0x224>
			if (res != FR_OK) break;
 800a228:	bf00      	nop
 800a22a:	e002      	b.n	800a232 <put_fat+0x224>
			if (res != FR_OK) break;
 800a22c:	bf00      	nop
 800a22e:	e000      	b.n	800a232 <put_fat+0x224>
			if (res != FR_OK) break;
 800a230:	bf00      	nop
		}
	}
	return res;
 800a232:	7ffb      	ldrb	r3, [r7, #31]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3724      	adds	r7, #36	; 0x24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd90      	pop	{r4, r7, pc}

0800a23c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d904      	bls.n	800a262 <remove_chain+0x26>
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d301      	bcc.n	800a266 <remove_chain+0x2a>
 800a262:	2302      	movs	r3, #2
 800a264:	e04b      	b.n	800a2fe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00c      	beq.n	800a286 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a26c:	f04f 32ff 	mov.w	r2, #4294967295
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	69b8      	ldr	r0, [r7, #24]
 800a274:	f7ff fecb 	bl	800a00e <put_fat>
 800a278:	4603      	mov	r3, r0
 800a27a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a27c:	7ffb      	ldrb	r3, [r7, #31]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <remove_chain+0x4a>
 800a282:	7ffb      	ldrb	r3, [r7, #31]
 800a284:	e03b      	b.n	800a2fe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f7ff fdf0 	bl	8009e6e <get_fat>
 800a28e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d031      	beq.n	800a2fa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d101      	bne.n	800a2a0 <remove_chain+0x64>
 800a29c:	2302      	movs	r3, #2
 800a29e:	e02e      	b.n	800a2fe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a6:	d101      	bne.n	800a2ac <remove_chain+0x70>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e028      	b.n	800a2fe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	68b9      	ldr	r1, [r7, #8]
 800a2b0:	69b8      	ldr	r0, [r7, #24]
 800a2b2:	f7ff feac 	bl	800a00e <put_fat>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a2ba:	7ffb      	ldrb	r3, [r7, #31]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <remove_chain+0x88>
 800a2c0:	7ffb      	ldrb	r3, [r7, #31]
 800a2c2:	e01c      	b.n	800a2fe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	695a      	ldr	r2, [r3, #20]
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	3b02      	subs	r3, #2
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d20b      	bcs.n	800a2ea <remove_chain+0xae>
			fs->free_clst++;
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	791b      	ldrb	r3, [r3, #4]
 800a2e0:	f043 0301 	orr.w	r3, r3, #1
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d3c6      	bcc.n	800a286 <remove_chain+0x4a>
 800a2f8:	e000      	b.n	800a2fc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a2fa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3720      	adds	r7, #32
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b088      	sub	sp, #32
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10d      	bne.n	800a338 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d004      	beq.n	800a332 <create_chain+0x2c>
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	699b      	ldr	r3, [r3, #24]
 800a32c:	69ba      	ldr	r2, [r7, #24]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d31b      	bcc.n	800a36a <create_chain+0x64>
 800a332:	2301      	movs	r3, #1
 800a334:	61bb      	str	r3, [r7, #24]
 800a336:	e018      	b.n	800a36a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7ff fd97 	bl	8009e6e <get_fat>
 800a340:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d801      	bhi.n	800a34c <create_chain+0x46>
 800a348:	2301      	movs	r3, #1
 800a34a:	e070      	b.n	800a42e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a352:	d101      	bne.n	800a358 <create_chain+0x52>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	e06a      	b.n	800a42e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d201      	bcs.n	800a366 <create_chain+0x60>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	e063      	b.n	800a42e <create_chain+0x128>
		scl = clst;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	3301      	adds	r3, #1
 800a372:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	69fa      	ldr	r2, [r7, #28]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d307      	bcc.n	800a38e <create_chain+0x88>
				ncl = 2;
 800a37e:	2302      	movs	r3, #2
 800a380:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a382:	69fa      	ldr	r2, [r7, #28]
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	429a      	cmp	r2, r3
 800a388:	d901      	bls.n	800a38e <create_chain+0x88>
 800a38a:	2300      	movs	r3, #0
 800a38c:	e04f      	b.n	800a42e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a38e:	69f9      	ldr	r1, [r7, #28]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f7ff fd6c 	bl	8009e6e <get_fat>
 800a396:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00e      	beq.n	800a3bc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d003      	beq.n	800a3ac <create_chain+0xa6>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3aa:	d101      	bne.n	800a3b0 <create_chain+0xaa>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	e03e      	b.n	800a42e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a3b0:	69fa      	ldr	r2, [r7, #28]
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d1da      	bne.n	800a36e <create_chain+0x68>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	e038      	b.n	800a42e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a3bc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a3be:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c2:	69f9      	ldr	r1, [r7, #28]
 800a3c4:	6938      	ldr	r0, [r7, #16]
 800a3c6:	f7ff fe22 	bl	800a00e <put_fat>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d109      	bne.n	800a3e8 <create_chain+0xe2>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d006      	beq.n	800a3e8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a3da:	69fa      	ldr	r2, [r7, #28]
 800a3dc:	6839      	ldr	r1, [r7, #0]
 800a3de:	6938      	ldr	r0, [r7, #16]
 800a3e0:	f7ff fe15 	bl	800a00e <put_fat>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d116      	bne.n	800a41c <create_chain+0x116>
		fs->last_clst = ncl;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	69fa      	ldr	r2, [r7, #28]
 800a3f2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	695a      	ldr	r2, [r3, #20]
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	3b02      	subs	r3, #2
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d804      	bhi.n	800a40c <create_chain+0x106>
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	1e5a      	subs	r2, r3, #1
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	791b      	ldrb	r3, [r3, #4]
 800a410:	f043 0301 	orr.w	r3, r3, #1
 800a414:	b2da      	uxtb	r2, r3
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	711a      	strb	r2, [r3, #4]
 800a41a:	e007      	b.n	800a42c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d102      	bne.n	800a428 <create_chain+0x122>
 800a422:	f04f 33ff 	mov.w	r3, #4294967295
 800a426:	e000      	b.n	800a42a <create_chain+0x124>
 800a428:	2301      	movs	r3, #1
 800a42a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a42c:	69fb      	ldr	r3, [r7, #28]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3720      	adds	r7, #32
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a436:	b480      	push	{r7}
 800a438:	b087      	sub	sp, #28
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44a:	3304      	adds	r3, #4
 800a44c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	899b      	ldrh	r3, [r3, #12]
 800a452:	461a      	mov	r2, r3
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	fbb3 f3f2 	udiv	r3, r3, r2
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	8952      	ldrh	r2, [r2, #10]
 800a45e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a462:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	1d1a      	adds	r2, r3, #4
 800a468:	613a      	str	r2, [r7, #16]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d101      	bne.n	800a478 <clmt_clust+0x42>
 800a474:	2300      	movs	r3, #0
 800a476:	e010      	b.n	800a49a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d307      	bcc.n	800a490 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	617b      	str	r3, [r7, #20]
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	3304      	adds	r3, #4
 800a48c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a48e:	e7e9      	b.n	800a464 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a490:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	4413      	add	r3, r2
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b086      	sub	sp, #24
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4bc:	d204      	bcs.n	800a4c8 <dir_sdi+0x22>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	f003 031f 	and.w	r3, r3, #31
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <dir_sdi+0x26>
		return FR_INT_ERR;
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	e071      	b.n	800a5b0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d106      	bne.n	800a4ec <dir_sdi+0x46>
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d902      	bls.n	800a4ec <dir_sdi+0x46>
		clst = fs->dirbase;
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10c      	bne.n	800a50c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	095b      	lsrs	r3, r3, #5
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	8912      	ldrh	r2, [r2, #8]
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d301      	bcc.n	800a502 <dir_sdi+0x5c>
 800a4fe:	2302      	movs	r3, #2
 800a500:	e056      	b.n	800a5b0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	61da      	str	r2, [r3, #28]
 800a50a:	e02d      	b.n	800a568 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	895b      	ldrh	r3, [r3, #10]
 800a510:	461a      	mov	r2, r3
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	899b      	ldrh	r3, [r3, #12]
 800a516:	fb03 f302 	mul.w	r3, r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a51c:	e019      	b.n	800a552 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6979      	ldr	r1, [r7, #20]
 800a522:	4618      	mov	r0, r3
 800a524:	f7ff fca3 	bl	8009e6e <get_fat>
 800a528:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a530:	d101      	bne.n	800a536 <dir_sdi+0x90>
 800a532:	2301      	movs	r3, #1
 800a534:	e03c      	b.n	800a5b0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d904      	bls.n	800a546 <dir_sdi+0xa0>
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	429a      	cmp	r2, r3
 800a544:	d301      	bcc.n	800a54a <dir_sdi+0xa4>
 800a546:	2302      	movs	r3, #2
 800a548:	e032      	b.n	800a5b0 <dir_sdi+0x10a>
			ofs -= csz;
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a552:	683a      	ldr	r2, [r7, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	429a      	cmp	r2, r3
 800a558:	d2e1      	bcs.n	800a51e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a55a:	6979      	ldr	r1, [r7, #20]
 800a55c:	6938      	ldr	r0, [r7, #16]
 800a55e:	f7ff fc67 	bl	8009e30 <clust2sect>
 800a562:	4602      	mov	r2, r0
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	69db      	ldr	r3, [r3, #28]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <dir_sdi+0xd4>
 800a576:	2302      	movs	r3, #2
 800a578:	e01a      	b.n	800a5b0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	69da      	ldr	r2, [r3, #28]
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	899b      	ldrh	r3, [r3, #12]
 800a582:	4619      	mov	r1, r3
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	fbb3 f3f1 	udiv	r3, r3, r1
 800a58a:	441a      	add	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	899b      	ldrh	r3, [r3, #12]
 800a59a:	461a      	mov	r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5a2:	fb02 f200 	mul.w	r2, r2, r0
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	18ca      	adds	r2, r1, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	695b      	ldr	r3, [r3, #20]
 800a5cc:	3320      	adds	r3, #32
 800a5ce:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d003      	beq.n	800a5e0 <dir_next+0x28>
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5de:	d301      	bcc.n	800a5e4 <dir_next+0x2c>
 800a5e0:	2304      	movs	r3, #4
 800a5e2:	e0bb      	b.n	800a75c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	899b      	ldrh	r3, [r3, #12]
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5f0:	fb02 f201 	mul.w	r2, r2, r1
 800a5f4:	1a9b      	subs	r3, r3, r2
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f040 809d 	bne.w	800a736 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	69db      	ldr	r3, [r3, #28]
 800a600:	1c5a      	adds	r2, r3, #1
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10b      	bne.n	800a626 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	095b      	lsrs	r3, r3, #5
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	8912      	ldrh	r2, [r2, #8]
 800a616:	4293      	cmp	r3, r2
 800a618:	f0c0 808d 	bcc.w	800a736 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	61da      	str	r2, [r3, #28]
 800a622:	2304      	movs	r3, #4
 800a624:	e09a      	b.n	800a75c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	899b      	ldrh	r3, [r3, #12]
 800a62a:	461a      	mov	r2, r3
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	8952      	ldrh	r2, [r2, #10]
 800a636:	3a01      	subs	r2, #1
 800a638:	4013      	ands	r3, r2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d17b      	bne.n	800a736 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	4619      	mov	r1, r3
 800a646:	4610      	mov	r0, r2
 800a648:	f7ff fc11 	bl	8009e6e <get_fat>
 800a64c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d801      	bhi.n	800a658 <dir_next+0xa0>
 800a654:	2302      	movs	r3, #2
 800a656:	e081      	b.n	800a75c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65e:	d101      	bne.n	800a664 <dir_next+0xac>
 800a660:	2301      	movs	r3, #1
 800a662:	e07b      	b.n	800a75c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d359      	bcc.n	800a722 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d104      	bne.n	800a67e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	61da      	str	r2, [r3, #28]
 800a67a:	2304      	movs	r3, #4
 800a67c:	e06e      	b.n	800a75c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	4619      	mov	r1, r3
 800a686:	4610      	mov	r0, r2
 800a688:	f7ff fe3d 	bl	800a306 <create_chain>
 800a68c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <dir_next+0xe0>
 800a694:	2307      	movs	r3, #7
 800a696:	e061      	b.n	800a75c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d101      	bne.n	800a6a2 <dir_next+0xea>
 800a69e:	2302      	movs	r3, #2
 800a6a0:	e05c      	b.n	800a75c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d101      	bne.n	800a6ae <dir_next+0xf6>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e056      	b.n	800a75c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff fadc 	bl	8009c6c <sync_window>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <dir_next+0x106>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e04e      	b.n	800a75c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	899b      	ldrh	r3, [r3, #12]
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	f7ff f905 	bl	80098da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	613b      	str	r3, [r7, #16]
 800a6d4:	6979      	ldr	r1, [r7, #20]
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff fbaa 	bl	8009e30 <clust2sect>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	631a      	str	r2, [r3, #48]	; 0x30
 800a6e2:	e012      	b.n	800a70a <dir_next+0x152>
						fs->wflag = 1;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f7ff fabe 	bl	8009c6c <sync_window>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <dir_next+0x142>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e030      	b.n	800a75c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	613b      	str	r3, [r7, #16]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a704:	1c5a      	adds	r2, r3, #1
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	631a      	str	r2, [r3, #48]	; 0x30
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	895b      	ldrh	r3, [r3, #10]
 800a70e:	461a      	mov	r2, r3
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	4293      	cmp	r3, r2
 800a714:	d3e6      	bcc.n	800a6e4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	1ad2      	subs	r2, r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a728:	6979      	ldr	r1, [r7, #20]
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f7ff fb80 	bl	8009e30 <clust2sect>
 800a730:	4602      	mov	r2, r0
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	899b      	ldrh	r3, [r3, #12]
 800a746:	461a      	mov	r2, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a74e:	fb02 f200 	mul.w	r2, r2, r0
 800a752:	1a9b      	subs	r3, r3, r2
 800a754:	18ca      	adds	r2, r1, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a774:	2100      	movs	r1, #0
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff fe95 	bl	800a4a6 <dir_sdi>
 800a77c:	4603      	mov	r3, r0
 800a77e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a780:	7dfb      	ldrb	r3, [r7, #23]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d12b      	bne.n	800a7de <dir_alloc+0x7a>
		n = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	69db      	ldr	r3, [r3, #28]
 800a78e:	4619      	mov	r1, r3
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f7ff faaf 	bl	8009cf4 <move_window>
 800a796:	4603      	mov	r3, r0
 800a798:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a79a:	7dfb      	ldrb	r3, [r7, #23]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d11d      	bne.n	800a7dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a1b      	ldr	r3, [r3, #32]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	2be5      	cmp	r3, #229	; 0xe5
 800a7a8:	d004      	beq.n	800a7b4 <dir_alloc+0x50>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d107      	bne.n	800a7c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	613b      	str	r3, [r7, #16]
 800a7ba:	693a      	ldr	r2, [r7, #16]
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d102      	bne.n	800a7c8 <dir_alloc+0x64>
 800a7c2:	e00c      	b.n	800a7de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a7c8:	2101      	movs	r1, #1
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7ff fef4 	bl	800a5b8 <dir_next>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0d7      	beq.n	800a78a <dir_alloc+0x26>
 800a7da:	e000      	b.n	800a7de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a7dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	2b04      	cmp	r3, #4
 800a7e2:	d101      	bne.n	800a7e8 <dir_alloc+0x84>
 800a7e4:	2307      	movs	r3, #7
 800a7e6:	75fb      	strb	r3, [r7, #23]
	return res;
 800a7e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b084      	sub	sp, #16
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
 800a7fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	331a      	adds	r3, #26
 800a800:	4618      	mov	r0, r3
 800a802:	f7fe ffc7 	bl	8009794 <ld_word>
 800a806:	4603      	mov	r3, r0
 800a808:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d109      	bne.n	800a826 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	3314      	adds	r3, #20
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe ffbc 	bl	8009794 <ld_word>
 800a81c:	4603      	mov	r3, r0
 800a81e:	041b      	lsls	r3, r3, #16
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	4313      	orrs	r3, r2
 800a824:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a826:	68fb      	ldr	r3, [r7, #12]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	331a      	adds	r3, #26
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	b292      	uxth	r2, r2
 800a844:	4611      	mov	r1, r2
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe ffdf 	bl	800980a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	2b03      	cmp	r3, #3
 800a852:	d109      	bne.n	800a868 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	f103 0214 	add.w	r2, r3, #20
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	0c1b      	lsrs	r3, r3, #16
 800a85e:	b29b      	uxth	r3, r3
 800a860:	4619      	mov	r1, r3
 800a862:	4610      	mov	r0, r2
 800a864:	f7fe ffd1 	bl	800980a <st_word>
	}
}
 800a868:	bf00      	nop
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a87e:	2100      	movs	r1, #0
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7ff fe10 	bl	800a4a6 <dir_sdi>
 800a886:	4603      	mov	r3, r0
 800a888:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a88a:	7dfb      	ldrb	r3, [r7, #23]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <dir_find+0x24>
 800a890:	7dfb      	ldrb	r3, [r7, #23]
 800a892:	e03e      	b.n	800a912 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	4619      	mov	r1, r3
 800a89a:	6938      	ldr	r0, [r7, #16]
 800a89c:	f7ff fa2a 	bl	8009cf4 <move_window>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a8a4:	7dfb      	ldrb	r3, [r7, #23]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d12f      	bne.n	800a90a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a8b2:	7bfb      	ldrb	r3, [r7, #15]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d102      	bne.n	800a8be <dir_find+0x4e>
 800a8b8:	2304      	movs	r3, #4
 800a8ba:	75fb      	strb	r3, [r7, #23]
 800a8bc:	e028      	b.n	800a910 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	330b      	adds	r3, #11
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a1b      	ldr	r3, [r3, #32]
 800a8d4:	330b      	adds	r3, #11
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	f003 0308 	and.w	r3, r3, #8
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <dir_find+0x86>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a18      	ldr	r0, [r3, #32]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3324      	adds	r3, #36	; 0x24
 800a8e8:	220b      	movs	r2, #11
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	f7ff f80f 	bl	800990e <mem_cmp>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00b      	beq.n	800a90e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff fe5d 	bl	800a5b8 <dir_next>
 800a8fe:	4603      	mov	r3, r0
 800a900:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a902:	7dfb      	ldrb	r3, [r7, #23]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0c5      	beq.n	800a894 <dir_find+0x24>
 800a908:	e002      	b.n	800a910 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a90a:	bf00      	nop
 800a90c:	e000      	b.n	800a910 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a90e:	bf00      	nop

	return res;
 800a910:	7dfb      	ldrb	r3, [r7, #23]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a928:	2101      	movs	r1, #1
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff ff1a 	bl	800a764 <dir_alloc>
 800a930:	4603      	mov	r3, r0
 800a932:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a934:	7bfb      	ldrb	r3, [r7, #15]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d11c      	bne.n	800a974 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	4619      	mov	r1, r3
 800a940:	68b8      	ldr	r0, [r7, #8]
 800a942:	f7ff f9d7 	bl	8009cf4 <move_window>
 800a946:	4603      	mov	r3, r0
 800a948:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d111      	bne.n	800a974 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	2220      	movs	r2, #32
 800a956:	2100      	movs	r1, #0
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fe ffbe 	bl	80098da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a18      	ldr	r0, [r3, #32]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	3324      	adds	r3, #36	; 0x24
 800a966:	220b      	movs	r2, #11
 800a968:	4619      	mov	r1, r3
 800a96a:	f7fe ff95 	bl	8009898 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2201      	movs	r2, #1
 800a972:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a974:	7bfb      	ldrb	r3, [r7, #15]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
	...

0800a980 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b088      	sub	sp, #32
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	3324      	adds	r3, #36	; 0x24
 800a994:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a996:	220b      	movs	r2, #11
 800a998:	2120      	movs	r1, #32
 800a99a:	68b8      	ldr	r0, [r7, #8]
 800a99c:	f7fe ff9d 	bl	80098da <mem_set>
	si = i = 0; ni = 8;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	613b      	str	r3, [r7, #16]
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	617b      	str	r3, [r7, #20]
 800a9a8:	2308      	movs	r3, #8
 800a9aa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	617a      	str	r2, [r7, #20]
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a9ba:	7ffb      	ldrb	r3, [r7, #31]
 800a9bc:	2b20      	cmp	r3, #32
 800a9be:	d94e      	bls.n	800aa5e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a9c0:	7ffb      	ldrb	r3, [r7, #31]
 800a9c2:	2b2f      	cmp	r3, #47	; 0x2f
 800a9c4:	d006      	beq.n	800a9d4 <create_name+0x54>
 800a9c6:	7ffb      	ldrb	r3, [r7, #31]
 800a9c8:	2b5c      	cmp	r3, #92	; 0x5c
 800a9ca:	d110      	bne.n	800a9ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a9cc:	e002      	b.n	800a9d4 <create_name+0x54>
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	617b      	str	r3, [r7, #20]
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	4413      	add	r3, r2
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b2f      	cmp	r3, #47	; 0x2f
 800a9de:	d0f6      	beq.n	800a9ce <create_name+0x4e>
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	2b5c      	cmp	r3, #92	; 0x5c
 800a9ea:	d0f0      	beq.n	800a9ce <create_name+0x4e>
			break;
 800a9ec:	e038      	b.n	800aa60 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a9ee:	7ffb      	ldrb	r3, [r7, #31]
 800a9f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a9f2:	d003      	beq.n	800a9fc <create_name+0x7c>
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d30c      	bcc.n	800aa16 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	2b0b      	cmp	r3, #11
 800aa00:	d002      	beq.n	800aa08 <create_name+0x88>
 800aa02:	7ffb      	ldrb	r3, [r7, #31]
 800aa04:	2b2e      	cmp	r3, #46	; 0x2e
 800aa06:	d001      	beq.n	800aa0c <create_name+0x8c>
 800aa08:	2306      	movs	r3, #6
 800aa0a:	e044      	b.n	800aa96 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800aa0c:	2308      	movs	r3, #8
 800aa0e:	613b      	str	r3, [r7, #16]
 800aa10:	230b      	movs	r3, #11
 800aa12:	61bb      	str	r3, [r7, #24]
			continue;
 800aa14:	e022      	b.n	800aa5c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800aa16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	da04      	bge.n	800aa28 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800aa1e:	7ffb      	ldrb	r3, [r7, #31]
 800aa20:	3b80      	subs	r3, #128	; 0x80
 800aa22:	4a1f      	ldr	r2, [pc, #124]	; (800aaa0 <create_name+0x120>)
 800aa24:	5cd3      	ldrb	r3, [r2, r3]
 800aa26:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800aa28:	7ffb      	ldrb	r3, [r7, #31]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	481d      	ldr	r0, [pc, #116]	; (800aaa4 <create_name+0x124>)
 800aa2e:	f7fe ff95 	bl	800995c <chk_chr>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d001      	beq.n	800aa3c <create_name+0xbc>
 800aa38:	2306      	movs	r3, #6
 800aa3a:	e02c      	b.n	800aa96 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800aa3c:	7ffb      	ldrb	r3, [r7, #31]
 800aa3e:	2b60      	cmp	r3, #96	; 0x60
 800aa40:	d905      	bls.n	800aa4e <create_name+0xce>
 800aa42:	7ffb      	ldrb	r3, [r7, #31]
 800aa44:	2b7a      	cmp	r3, #122	; 0x7a
 800aa46:	d802      	bhi.n	800aa4e <create_name+0xce>
 800aa48:	7ffb      	ldrb	r3, [r7, #31]
 800aa4a:	3b20      	subs	r3, #32
 800aa4c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	1c5a      	adds	r2, r3, #1
 800aa52:	613a      	str	r2, [r7, #16]
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	4413      	add	r3, r2
 800aa58:	7ffa      	ldrb	r2, [r7, #31]
 800aa5a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800aa5c:	e7a6      	b.n	800a9ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aa5e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	441a      	add	r2, r3
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d101      	bne.n	800aa74 <create_name+0xf4>
 800aa70:	2306      	movs	r3, #6
 800aa72:	e010      	b.n	800aa96 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	2be5      	cmp	r3, #229	; 0xe5
 800aa7a:	d102      	bne.n	800aa82 <create_name+0x102>
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2205      	movs	r2, #5
 800aa80:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aa82:	7ffb      	ldrb	r3, [r7, #31]
 800aa84:	2b20      	cmp	r3, #32
 800aa86:	d801      	bhi.n	800aa8c <create_name+0x10c>
 800aa88:	2204      	movs	r2, #4
 800aa8a:	e000      	b.n	800aa8e <create_name+0x10e>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	330b      	adds	r3, #11
 800aa92:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800aa94:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3720      	adds	r7, #32
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800eca0 	.word	0x0800eca0
 800aaa4:	0800e840 	.word	0x0800e840

0800aaa8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aabc:	e002      	b.n	800aac4 <follow_path+0x1c>
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	3301      	adds	r3, #1
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	2b2f      	cmp	r3, #47	; 0x2f
 800aaca:	d0f8      	beq.n	800aabe <follow_path+0x16>
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2b5c      	cmp	r3, #92	; 0x5c
 800aad2:	d0f4      	beq.n	800aabe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	2200      	movs	r2, #0
 800aad8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b1f      	cmp	r3, #31
 800aae0:	d80a      	bhi.n	800aaf8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2280      	movs	r2, #128	; 0x80
 800aae6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800aaea:	2100      	movs	r1, #0
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff fcda 	bl	800a4a6 <dir_sdi>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	75fb      	strb	r3, [r7, #23]
 800aaf6:	e048      	b.n	800ab8a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aaf8:	463b      	mov	r3, r7
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff ff3f 	bl	800a980 <create_name>
 800ab02:	4603      	mov	r3, r0
 800ab04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d139      	bne.n	800ab80 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7ff feaf 	bl	800a870 <dir_find>
 800ab12:	4603      	mov	r3, r0
 800ab14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ab1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00a      	beq.n	800ab3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
 800ab26:	2b04      	cmp	r3, #4
 800ab28:	d12c      	bne.n	800ab84 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ab2a:	7afb      	ldrb	r3, [r7, #11]
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d127      	bne.n	800ab84 <follow_path+0xdc>
 800ab34:	2305      	movs	r3, #5
 800ab36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ab38:	e024      	b.n	800ab84 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab3a:	7afb      	ldrb	r3, [r7, #11]
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d121      	bne.n	800ab88 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	799b      	ldrb	r3, [r3, #6]
 800ab48:	f003 0310 	and.w	r3, r3, #16
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d102      	bne.n	800ab56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ab50:	2305      	movs	r3, #5
 800ab52:	75fb      	strb	r3, [r7, #23]
 800ab54:	e019      	b.n	800ab8a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	8992      	ldrh	r2, [r2, #12]
 800ab64:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab68:	fb02 f200 	mul.w	r2, r2, r0
 800ab6c:	1a9b      	subs	r3, r3, r2
 800ab6e:	440b      	add	r3, r1
 800ab70:	4619      	mov	r1, r3
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f7ff fe3d 	bl	800a7f2 <ld_clust>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab7e:	e7bb      	b.n	800aaf8 <follow_path+0x50>
			if (res != FR_OK) break;
 800ab80:	bf00      	nop
 800ab82:	e002      	b.n	800ab8a <follow_path+0xe2>
				break;
 800ab84:	bf00      	nop
 800ab86:	e000      	b.n	800ab8a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab88:	bf00      	nop
			}
		}
	}

	return res;
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ab9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aba0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d031      	beq.n	800ac0e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	617b      	str	r3, [r7, #20]
 800abb0:	e002      	b.n	800abb8 <get_ldnumber+0x24>
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	3301      	adds	r3, #1
 800abb6:	617b      	str	r3, [r7, #20]
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	2b20      	cmp	r3, #32
 800abbe:	d903      	bls.n	800abc8 <get_ldnumber+0x34>
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b3a      	cmp	r3, #58	; 0x3a
 800abc6:	d1f4      	bne.n	800abb2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b3a      	cmp	r3, #58	; 0x3a
 800abce:	d11c      	bne.n	800ac0a <get_ldnumber+0x76>
			tp = *path;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	1c5a      	adds	r2, r3, #1
 800abda:	60fa      	str	r2, [r7, #12]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	3b30      	subs	r3, #48	; 0x30
 800abe0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b09      	cmp	r3, #9
 800abe6:	d80e      	bhi.n	800ac06 <get_ldnumber+0x72>
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	429a      	cmp	r2, r3
 800abee:	d10a      	bne.n	800ac06 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d107      	bne.n	800ac06 <get_ldnumber+0x72>
					vol = (int)i;
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	3301      	adds	r3, #1
 800abfe:	617b      	str	r3, [r7, #20]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	e002      	b.n	800ac10 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ac0e:	693b      	ldr	r3, [r7, #16]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	371c      	adds	r7, #28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	70da      	strb	r2, [r3, #3]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac32:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff f85c 	bl	8009cf4 <move_window>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <check_fs+0x2a>
 800ac42:	2304      	movs	r3, #4
 800ac44:	e038      	b.n	800acb8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	3334      	adds	r3, #52	; 0x34
 800ac4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fe fda0 	bl	8009794 <ld_word>
 800ac54:	4603      	mov	r3, r0
 800ac56:	461a      	mov	r2, r3
 800ac58:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d001      	beq.n	800ac64 <check_fs+0x48>
 800ac60:	2303      	movs	r3, #3
 800ac62:	e029      	b.n	800acb8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac6a:	2be9      	cmp	r3, #233	; 0xe9
 800ac6c:	d009      	beq.n	800ac82 <check_fs+0x66>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac74:	2beb      	cmp	r3, #235	; 0xeb
 800ac76:	d11e      	bne.n	800acb6 <check_fs+0x9a>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ac7e:	2b90      	cmp	r3, #144	; 0x90
 800ac80:	d119      	bne.n	800acb6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	3334      	adds	r3, #52	; 0x34
 800ac86:	3336      	adds	r3, #54	; 0x36
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fe fd9b 	bl	80097c4 <ld_dword>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac94:	4a0a      	ldr	r2, [pc, #40]	; (800acc0 <check_fs+0xa4>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d101      	bne.n	800ac9e <check_fs+0x82>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e00c      	b.n	800acb8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	3334      	adds	r3, #52	; 0x34
 800aca2:	3352      	adds	r3, #82	; 0x52
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fe fd8d 	bl	80097c4 <ld_dword>
 800acaa:	4602      	mov	r2, r0
 800acac:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <check_fs+0xa8>)
 800acae:	429a      	cmp	r2, r3
 800acb0:	d101      	bne.n	800acb6 <check_fs+0x9a>
 800acb2:	2300      	movs	r3, #0
 800acb4:	e000      	b.n	800acb8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800acb6:	2302      	movs	r3, #2
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	00544146 	.word	0x00544146
 800acc4:	33544146 	.word	0x33544146

0800acc8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b096      	sub	sp, #88	; 0x58
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	4613      	mov	r3, r2
 800acd4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f7ff ff59 	bl	800ab94 <get_ldnumber>
 800ace2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ace4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	da01      	bge.n	800acee <find_volume+0x26>
 800acea:	230b      	movs	r3, #11
 800acec:	e265      	b.n	800b1ba <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800acee:	4ab0      	ldr	r2, [pc, #704]	; (800afb0 <find_volume+0x2e8>)
 800acf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acf6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800acf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d101      	bne.n	800ad02 <find_volume+0x3a>
 800acfe:	230c      	movs	r3, #12
 800ad00:	e25b      	b.n	800b1ba <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	f023 0301 	bic.w	r3, r3, #1
 800ad0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ad10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d01a      	beq.n	800ad4e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	785b      	ldrb	r3, [r3, #1]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fe fc9b 	bl	8009658 <disk_status>
 800ad22:	4603      	mov	r3, r0
 800ad24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ad28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10c      	bne.n	800ad4e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ad34:	79fb      	ldrb	r3, [r7, #7]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d007      	beq.n	800ad4a <find_volume+0x82>
 800ad3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad3e:	f003 0304 	and.w	r3, r3, #4
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ad46:	230a      	movs	r3, #10
 800ad48:	e237      	b.n	800b1ba <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	e235      	b.n	800b1ba <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	2200      	movs	r2, #0
 800ad52:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ad54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5e:	785b      	ldrb	r3, [r3, #1]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fe fc93 	bl	800968c <disk_initialize>
 800ad66:	4603      	mov	r3, r0
 800ad68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ad6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad70:	f003 0301 	and.w	r3, r3, #1
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ad78:	2303      	movs	r3, #3
 800ad7a:	e21e      	b.n	800b1ba <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d007      	beq.n	800ad92 <find_volume+0xca>
 800ad82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad86:	f003 0304 	and.w	r3, r3, #4
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ad8e:	230a      	movs	r3, #10
 800ad90:	e213      	b.n	800b1ba <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ad92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad94:	7858      	ldrb	r0, [r3, #1]
 800ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad98:	330c      	adds	r3, #12
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	2102      	movs	r1, #2
 800ad9e:	f7fe fcdb 	bl	8009758 <disk_ioctl>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <find_volume+0xe4>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e206      	b.n	800b1ba <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	899b      	ldrh	r3, [r3, #12]
 800adb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adb4:	d80d      	bhi.n	800add2 <find_volume+0x10a>
 800adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb8:	899b      	ldrh	r3, [r3, #12]
 800adba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adbe:	d308      	bcc.n	800add2 <find_volume+0x10a>
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	899b      	ldrh	r3, [r3, #12]
 800adc4:	461a      	mov	r2, r3
 800adc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc8:	899b      	ldrh	r3, [r3, #12]
 800adca:	3b01      	subs	r3, #1
 800adcc:	4013      	ands	r3, r2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <find_volume+0x10e>
 800add2:	2301      	movs	r3, #1
 800add4:	e1f1      	b.n	800b1ba <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800add6:	2300      	movs	r3, #0
 800add8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800adda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800addc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800adde:	f7ff ff1d 	bl	800ac1c <check_fs>
 800ade2:	4603      	mov	r3, r0
 800ade4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ade8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adec:	2b02      	cmp	r3, #2
 800adee:	d14b      	bne.n	800ae88 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800adf0:	2300      	movs	r3, #0
 800adf2:	643b      	str	r3, [r7, #64]	; 0x40
 800adf4:	e01f      	b.n	800ae36 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800adf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800adfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adfe:	011b      	lsls	r3, r3, #4
 800ae00:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ae04:	4413      	add	r3, r2
 800ae06:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d006      	beq.n	800ae20 <find_volume+0x158>
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	3308      	adds	r3, #8
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fe fcd4 	bl	80097c4 <ld_dword>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	e000      	b.n	800ae22 <find_volume+0x15a>
 800ae20:	2200      	movs	r2, #0
 800ae22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ae2a:	440b      	add	r3, r1
 800ae2c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae32:	3301      	adds	r3, #1
 800ae34:	643b      	str	r3, [r7, #64]	; 0x40
 800ae36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d9dc      	bls.n	800adf6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ae40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <find_volume+0x184>
 800ae46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ae4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ae54:	4413      	add	r3, r2
 800ae56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ae5a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ae5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d005      	beq.n	800ae6e <find_volume+0x1a6>
 800ae62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae66:	f7ff fed9 	bl	800ac1c <check_fs>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	e000      	b.n	800ae70 <find_volume+0x1a8>
 800ae6e:	2303      	movs	r3, #3
 800ae70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ae74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d905      	bls.n	800ae88 <find_volume+0x1c0>
 800ae7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae7e:	3301      	adds	r3, #1
 800ae80:	643b      	str	r3, [r7, #64]	; 0x40
 800ae82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae84:	2b03      	cmp	r3, #3
 800ae86:	d9e1      	bls.n	800ae4c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ae88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae8c:	2b04      	cmp	r3, #4
 800ae8e:	d101      	bne.n	800ae94 <find_volume+0x1cc>
 800ae90:	2301      	movs	r3, #1
 800ae92:	e192      	b.n	800b1ba <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ae94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d901      	bls.n	800aea0 <find_volume+0x1d8>
 800ae9c:	230d      	movs	r3, #13
 800ae9e:	e18c      	b.n	800b1ba <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800aea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea2:	3334      	adds	r3, #52	; 0x34
 800aea4:	330b      	adds	r3, #11
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe fc74 	bl	8009794 <ld_word>
 800aeac:	4603      	mov	r3, r0
 800aeae:	461a      	mov	r2, r3
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb2:	899b      	ldrh	r3, [r3, #12]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d001      	beq.n	800aebc <find_volume+0x1f4>
 800aeb8:	230d      	movs	r3, #13
 800aeba:	e17e      	b.n	800b1ba <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	3334      	adds	r3, #52	; 0x34
 800aec0:	3316      	adds	r3, #22
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe fc66 	bl	8009794 <ld_word>
 800aec8:	4603      	mov	r3, r0
 800aeca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800aecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d106      	bne.n	800aee0 <find_volume+0x218>
 800aed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed4:	3334      	adds	r3, #52	; 0x34
 800aed6:	3324      	adds	r3, #36	; 0x24
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fe fc73 	bl	80097c4 <ld_dword>
 800aede:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800aee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aee4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800aee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800aeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800aef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef2:	789b      	ldrb	r3, [r3, #2]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d005      	beq.n	800af04 <find_volume+0x23c>
 800aef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefa:	789b      	ldrb	r3, [r3, #2]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d001      	beq.n	800af04 <find_volume+0x23c>
 800af00:	230d      	movs	r3, #13
 800af02:	e15a      	b.n	800b1ba <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800af04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af06:	789b      	ldrb	r3, [r3, #2]
 800af08:	461a      	mov	r2, r3
 800af0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af0c:	fb02 f303 	mul.w	r3, r2, r3
 800af10:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800af12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af18:	b29a      	uxth	r2, r3
 800af1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800af1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af20:	895b      	ldrh	r3, [r3, #10]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d008      	beq.n	800af38 <find_volume+0x270>
 800af26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af28:	895b      	ldrh	r3, [r3, #10]
 800af2a:	461a      	mov	r2, r3
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	895b      	ldrh	r3, [r3, #10]
 800af30:	3b01      	subs	r3, #1
 800af32:	4013      	ands	r3, r2
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <find_volume+0x274>
 800af38:	230d      	movs	r3, #13
 800af3a:	e13e      	b.n	800b1ba <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800af3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3e:	3334      	adds	r3, #52	; 0x34
 800af40:	3311      	adds	r3, #17
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe fc26 	bl	8009794 <ld_word>
 800af48:	4603      	mov	r3, r0
 800af4a:	461a      	mov	r2, r3
 800af4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800af50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af52:	891b      	ldrh	r3, [r3, #8]
 800af54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af56:	8992      	ldrh	r2, [r2, #12]
 800af58:	0952      	lsrs	r2, r2, #5
 800af5a:	b292      	uxth	r2, r2
 800af5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800af60:	fb02 f201 	mul.w	r2, r2, r1
 800af64:	1a9b      	subs	r3, r3, r2
 800af66:	b29b      	uxth	r3, r3
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <find_volume+0x2a8>
 800af6c:	230d      	movs	r3, #13
 800af6e:	e124      	b.n	800b1ba <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800af70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af72:	3334      	adds	r3, #52	; 0x34
 800af74:	3313      	adds	r3, #19
 800af76:	4618      	mov	r0, r3
 800af78:	f7fe fc0c 	bl	8009794 <ld_word>
 800af7c:	4603      	mov	r3, r0
 800af7e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800af80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af82:	2b00      	cmp	r3, #0
 800af84:	d106      	bne.n	800af94 <find_volume+0x2cc>
 800af86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af88:	3334      	adds	r3, #52	; 0x34
 800af8a:	3320      	adds	r3, #32
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fe fc19 	bl	80097c4 <ld_dword>
 800af92:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800af94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af96:	3334      	adds	r3, #52	; 0x34
 800af98:	330e      	adds	r3, #14
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fe fbfa 	bl	8009794 <ld_word>
 800afa0:	4603      	mov	r3, r0
 800afa2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800afa4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d104      	bne.n	800afb4 <find_volume+0x2ec>
 800afaa:	230d      	movs	r3, #13
 800afac:	e105      	b.n	800b1ba <find_volume+0x4f2>
 800afae:	bf00      	nop
 800afb0:	20000404 	.word	0x20000404

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800afb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800afb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afb8:	4413      	add	r3, r2
 800afba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afbc:	8911      	ldrh	r1, [r2, #8]
 800afbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afc0:	8992      	ldrh	r2, [r2, #12]
 800afc2:	0952      	lsrs	r2, r2, #5
 800afc4:	b292      	uxth	r2, r2
 800afc6:	fbb1 f2f2 	udiv	r2, r1, r2
 800afca:	b292      	uxth	r2, r2
 800afcc:	4413      	add	r3, r2
 800afce:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800afd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d201      	bcs.n	800afdc <find_volume+0x314>
 800afd8:	230d      	movs	r3, #13
 800afda:	e0ee      	b.n	800b1ba <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800afdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afe4:	8952      	ldrh	r2, [r2, #10]
 800afe6:	fbb3 f3f2 	udiv	r3, r3, r2
 800afea:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d101      	bne.n	800aff6 <find_volume+0x32e>
 800aff2:	230d      	movs	r3, #13
 800aff4:	e0e1      	b.n	800b1ba <find_volume+0x4f2>
		fmt = FS_FAT32;
 800aff6:	2303      	movs	r3, #3
 800aff8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b002:	4293      	cmp	r3, r2
 800b004:	d802      	bhi.n	800b00c <find_volume+0x344>
 800b006:	2302      	movs	r3, #2
 800b008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b012:	4293      	cmp	r3, r2
 800b014:	d802      	bhi.n	800b01c <find_volume+0x354>
 800b016:	2301      	movs	r3, #1
 800b018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	1c9a      	adds	r2, r3, #2
 800b020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b022:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b026:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b028:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b02a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b02e:	441a      	add	r2, r3
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b034:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b038:	441a      	add	r2, r3
 800b03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b03e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b042:	2b03      	cmp	r3, #3
 800b044:	d11e      	bne.n	800b084 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b048:	3334      	adds	r3, #52	; 0x34
 800b04a:	332a      	adds	r3, #42	; 0x2a
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fe fba1 	bl	8009794 <ld_word>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <find_volume+0x394>
 800b058:	230d      	movs	r3, #13
 800b05a:	e0ae      	b.n	800b1ba <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	891b      	ldrh	r3, [r3, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <find_volume+0x3a0>
 800b064:	230d      	movs	r3, #13
 800b066:	e0a8      	b.n	800b1ba <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	3334      	adds	r3, #52	; 0x34
 800b06c:	332c      	adds	r3, #44	; 0x2c
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe fba8 	bl	80097c4 <ld_dword>
 800b074:	4602      	mov	r2, r0
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	647b      	str	r3, [r7, #68]	; 0x44
 800b082:	e01f      	b.n	800b0c4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	891b      	ldrh	r3, [r3, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <find_volume+0x3c8>
 800b08c:	230d      	movs	r3, #13
 800b08e:	e094      	b.n	800b1ba <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b096:	441a      	add	r2, r3
 800b098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b09c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d103      	bne.n	800b0ac <find_volume+0x3e4>
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	005b      	lsls	r3, r3, #1
 800b0aa:	e00a      	b.n	800b0c2 <find_volume+0x3fa>
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ae:	699a      	ldr	r2, [r3, #24]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	4413      	add	r3, r2
 800b0b6:	085a      	lsrs	r2, r3, #1
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	f003 0301 	and.w	r3, r3, #1
 800b0c0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b0c2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c6:	69da      	ldr	r2, [r3, #28]
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ca:	899b      	ldrh	r3, [r3, #12]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0d0:	440b      	add	r3, r1
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b0d6:	8989      	ldrh	r1, [r1, #12]
 800b0d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d201      	bcs.n	800b0e4 <find_volume+0x41c>
 800b0e0:	230d      	movs	r3, #13
 800b0e2:	e06a      	b.n	800b1ba <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ea:	615a      	str	r2, [r3, #20]
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	695a      	ldr	r2, [r3, #20]
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f6:	2280      	movs	r2, #128	; 0x80
 800b0f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b0fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	d149      	bne.n	800b196 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b104:	3334      	adds	r3, #52	; 0x34
 800b106:	3330      	adds	r3, #48	; 0x30
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fe fb43 	bl	8009794 <ld_word>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b01      	cmp	r3, #1
 800b112:	d140      	bne.n	800b196 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b116:	3301      	adds	r3, #1
 800b118:	4619      	mov	r1, r3
 800b11a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b11c:	f7fe fdea 	bl	8009cf4 <move_window>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d137      	bne.n	800b196 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	2200      	movs	r2, #0
 800b12a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12e:	3334      	adds	r3, #52	; 0x34
 800b130:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b134:	4618      	mov	r0, r3
 800b136:	f7fe fb2d 	bl	8009794 <ld_word>
 800b13a:	4603      	mov	r3, r0
 800b13c:	461a      	mov	r2, r3
 800b13e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b142:	429a      	cmp	r2, r3
 800b144:	d127      	bne.n	800b196 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b148:	3334      	adds	r3, #52	; 0x34
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fe fb3a 	bl	80097c4 <ld_dword>
 800b150:	4602      	mov	r2, r0
 800b152:	4b1c      	ldr	r3, [pc, #112]	; (800b1c4 <find_volume+0x4fc>)
 800b154:	429a      	cmp	r2, r3
 800b156:	d11e      	bne.n	800b196 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15a:	3334      	adds	r3, #52	; 0x34
 800b15c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b160:	4618      	mov	r0, r3
 800b162:	f7fe fb2f 	bl	80097c4 <ld_dword>
 800b166:	4602      	mov	r2, r0
 800b168:	4b17      	ldr	r3, [pc, #92]	; (800b1c8 <find_volume+0x500>)
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d113      	bne.n	800b196 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	3334      	adds	r3, #52	; 0x34
 800b172:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b176:	4618      	mov	r0, r3
 800b178:	f7fe fb24 	bl	80097c4 <ld_dword>
 800b17c:	4602      	mov	r2, r0
 800b17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b180:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b184:	3334      	adds	r3, #52	; 0x34
 800b186:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe fb1a 	bl	80097c4 <ld_dword>
 800b190:	4602      	mov	r2, r0
 800b192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b194:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b198:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b19c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b19e:	4b0b      	ldr	r3, [pc, #44]	; (800b1cc <find_volume+0x504>)
 800b1a0:	881b      	ldrh	r3, [r3, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <find_volume+0x504>)
 800b1a8:	801a      	strh	r2, [r3, #0]
 800b1aa:	4b08      	ldr	r3, [pc, #32]	; (800b1cc <find_volume+0x504>)
 800b1ac:	881a      	ldrh	r2, [r3, #0]
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b1b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b1b4:	f7fe fd36 	bl	8009c24 <clear_lock>
#endif
	return FR_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3758      	adds	r7, #88	; 0x58
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	41615252 	.word	0x41615252
 800b1c8:	61417272 	.word	0x61417272
 800b1cc:	20000408 	.word	0x20000408

0800b1d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b1da:	2309      	movs	r3, #9
 800b1dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01c      	beq.n	800b21e <validate+0x4e>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d018      	beq.n	800b21e <validate+0x4e>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d013      	beq.n	800b21e <validate+0x4e>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	889a      	ldrh	r2, [r3, #4]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	88db      	ldrh	r3, [r3, #6]
 800b200:	429a      	cmp	r2, r3
 800b202:	d10c      	bne.n	800b21e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	785b      	ldrb	r3, [r3, #1]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fe fa24 	bl	8009658 <disk_status>
 800b210:	4603      	mov	r3, r0
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b00      	cmp	r3, #0
 800b218:	d101      	bne.n	800b21e <validate+0x4e>
			res = FR_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d102      	bne.n	800b22a <validate+0x5a>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	e000      	b.n	800b22c <validate+0x5c>
 800b22a:	2300      	movs	r3, #0
 800b22c:	683a      	ldr	r2, [r7, #0]
 800b22e:	6013      	str	r3, [r2, #0]
	return res;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b24e:	f107 0310 	add.w	r3, r7, #16
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff fc9e 	bl	800ab94 <get_ldnumber>
 800b258:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	da01      	bge.n	800b264 <f_mount+0x28>
 800b260:	230b      	movs	r3, #11
 800b262:	e02b      	b.n	800b2bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b264:	4a17      	ldr	r2, [pc, #92]	; (800b2c4 <f_mount+0x88>)
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b26c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d005      	beq.n	800b280 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b274:	69b8      	ldr	r0, [r7, #24]
 800b276:	f7fe fcd5 	bl	8009c24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	2200      	movs	r2, #0
 800b27e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	490d      	ldr	r1, [pc, #52]	; (800b2c4 <f_mount+0x88>)
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <f_mount+0x66>
 800b29c:	79fb      	ldrb	r3, [r7, #7]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d001      	beq.n	800b2a6 <f_mount+0x6a>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	e00a      	b.n	800b2bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b2a6:	f107 010c 	add.w	r1, r7, #12
 800b2aa:	f107 0308 	add.w	r3, r7, #8
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7ff fd09 	bl	800acc8 <find_volume>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3720      	adds	r7, #32
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	20000404 	.word	0x20000404

0800b2c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b098      	sub	sp, #96	; 0x60
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d101      	bne.n	800b2e0 <f_open+0x18>
 800b2dc:	2309      	movs	r3, #9
 800b2de:	e1bb      	b.n	800b658 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b2e0:	79fb      	ldrb	r3, [r7, #7]
 800b2e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b2e8:	79fa      	ldrb	r2, [r7, #7]
 800b2ea:	f107 0110 	add.w	r1, r7, #16
 800b2ee:	f107 0308 	add.w	r3, r7, #8
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff fce8 	bl	800acc8 <find_volume>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b2fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b302:	2b00      	cmp	r3, #0
 800b304:	f040 819f 	bne.w	800b646 <f_open+0x37e>
		dj.obj.fs = fs;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	f107 0314 	add.w	r3, r7, #20
 800b312:	4611      	mov	r1, r2
 800b314:	4618      	mov	r0, r3
 800b316:	f7ff fbc7 	bl	800aaa8 <follow_path>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b320:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b324:	2b00      	cmp	r3, #0
 800b326:	d11a      	bne.n	800b35e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b328:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b32c:	b25b      	sxtb	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	da03      	bge.n	800b33a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b332:	2306      	movs	r3, #6
 800b334:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b338:	e011      	b.n	800b35e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b33a:	79fb      	ldrb	r3, [r7, #7]
 800b33c:	f023 0301 	bic.w	r3, r3, #1
 800b340:	2b00      	cmp	r3, #0
 800b342:	bf14      	ite	ne
 800b344:	2301      	movne	r3, #1
 800b346:	2300      	moveq	r3, #0
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	461a      	mov	r2, r3
 800b34c:	f107 0314 	add.w	r3, r7, #20
 800b350:	4611      	mov	r1, r2
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe fb1e 	bl	8009994 <chk_lock>
 800b358:	4603      	mov	r3, r0
 800b35a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b35e:	79fb      	ldrb	r3, [r7, #7]
 800b360:	f003 031c 	and.w	r3, r3, #28
 800b364:	2b00      	cmp	r3, #0
 800b366:	d07f      	beq.n	800b468 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b368:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d017      	beq.n	800b3a0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b370:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b374:	2b04      	cmp	r3, #4
 800b376:	d10e      	bne.n	800b396 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b378:	f7fe fb68 	bl	8009a4c <enq_lock>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d006      	beq.n	800b390 <f_open+0xc8>
 800b382:	f107 0314 	add.w	r3, r7, #20
 800b386:	4618      	mov	r0, r3
 800b388:	f7ff fac7 	bl	800a91a <dir_register>
 800b38c:	4603      	mov	r3, r0
 800b38e:	e000      	b.n	800b392 <f_open+0xca>
 800b390:	2312      	movs	r3, #18
 800b392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b396:	79fb      	ldrb	r3, [r7, #7]
 800b398:	f043 0308 	orr.w	r3, r3, #8
 800b39c:	71fb      	strb	r3, [r7, #7]
 800b39e:	e010      	b.n	800b3c2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b3a0:	7ebb      	ldrb	r3, [r7, #26]
 800b3a2:	f003 0311 	and.w	r3, r3, #17
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d003      	beq.n	800b3b2 <f_open+0xea>
					res = FR_DENIED;
 800b3aa:	2307      	movs	r3, #7
 800b3ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b3b0:	e007      	b.n	800b3c2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b3b2:	79fb      	ldrb	r3, [r7, #7]
 800b3b4:	f003 0304 	and.w	r3, r3, #4
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <f_open+0xfa>
 800b3bc:	2308      	movs	r3, #8
 800b3be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b3c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d168      	bne.n	800b49c <f_open+0x1d4>
 800b3ca:	79fb      	ldrb	r3, [r7, #7]
 800b3cc:	f003 0308 	and.w	r3, r3, #8
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d063      	beq.n	800b49c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b3d4:	f000 fce4 	bl	800bda0 <get_fattime>
 800b3d8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3dc:	330e      	adds	r3, #14
 800b3de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fe fa2d 	bl	8009840 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e8:	3316      	adds	r3, #22
 800b3ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fe fa27 	bl	8009840 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f4:	330b      	adds	r3, #11
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3fe:	4611      	mov	r1, r2
 800b400:	4618      	mov	r0, r3
 800b402:	f7ff f9f6 	bl	800a7f2 <ld_clust>
 800b406:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b40c:	2200      	movs	r2, #0
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff fa0e 	bl	800a830 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b416:	331c      	adds	r3, #28
 800b418:	2100      	movs	r1, #0
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fe fa10 	bl	8009840 <st_dword>
					fs->wflag = 1;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	2201      	movs	r2, #1
 800b424:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d037      	beq.n	800b49c <f_open+0x1d4>
						dw = fs->winsect;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b430:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b432:	f107 0314 	add.w	r3, r7, #20
 800b436:	2200      	movs	r2, #0
 800b438:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe fefe 	bl	800a23c <remove_chain>
 800b440:	4603      	mov	r3, r0
 800b442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d126      	bne.n	800b49c <f_open+0x1d4>
							res = move_window(fs, dw);
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fc4e 	bl	8009cf4 <move_window>
 800b458:	4603      	mov	r3, r0
 800b45a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b462:	3a01      	subs	r2, #1
 800b464:	611a      	str	r2, [r3, #16]
 800b466:	e019      	b.n	800b49c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d115      	bne.n	800b49c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b470:	7ebb      	ldrb	r3, [r7, #26]
 800b472:	f003 0310 	and.w	r3, r3, #16
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b47a:	2304      	movs	r3, #4
 800b47c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b480:	e00c      	b.n	800b49c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b482:	79fb      	ldrb	r3, [r7, #7]
 800b484:	f003 0302 	and.w	r3, r3, #2
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d007      	beq.n	800b49c <f_open+0x1d4>
 800b48c:	7ebb      	ldrb	r3, [r7, #26]
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <f_open+0x1d4>
						res = FR_DENIED;
 800b496:	2307      	movs	r3, #7
 800b498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b49c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d128      	bne.n	800b4f6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	f003 0308 	and.w	r3, r3, #8
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b4ae:	79fb      	ldrb	r3, [r7, #7]
 800b4b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b4be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b4c4:	79fb      	ldrb	r3, [r7, #7]
 800b4c6:	f023 0301 	bic.w	r3, r3, #1
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	bf14      	ite	ne
 800b4ce:	2301      	movne	r3, #1
 800b4d0:	2300      	moveq	r3, #0
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	f107 0314 	add.w	r3, r7, #20
 800b4da:	4611      	mov	r1, r2
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fe fad7 	bl	8009a90 <inc_lock>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d102      	bne.n	800b4f6 <f_open+0x22e>
 800b4f0:	2302      	movs	r3, #2
 800b4f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b4f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f040 80a3 	bne.w	800b646 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b504:	4611      	mov	r1, r2
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff f973 	bl	800a7f2 <ld_clust>
 800b50c:	4602      	mov	r2, r0
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b514:	331c      	adds	r3, #28
 800b516:	4618      	mov	r0, r3
 800b518:	f7fe f954 	bl	80097c4 <ld_dword>
 800b51c:	4602      	mov	r2, r0
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	88da      	ldrh	r2, [r3, #6]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	79fa      	ldrb	r2, [r7, #7]
 800b53a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	3330      	adds	r3, #48	; 0x30
 800b552:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b556:	2100      	movs	r1, #0
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe f9be 	bl	80098da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b55e:	79fb      	ldrb	r3, [r7, #7]
 800b560:	f003 0320 	and.w	r3, r3, #32
 800b564:	2b00      	cmp	r3, #0
 800b566:	d06e      	beq.n	800b646 <f_open+0x37e>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d06a      	beq.n	800b646 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	68da      	ldr	r2, [r3, #12]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	895b      	ldrh	r3, [r3, #10]
 800b57c:	461a      	mov	r2, r3
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	899b      	ldrh	r3, [r3, #12]
 800b582:	fb03 f302 	mul.w	r3, r3, r2
 800b586:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	657b      	str	r3, [r7, #84]	; 0x54
 800b594:	e016      	b.n	800b5c4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe fc67 	bl	8009e6e <get_fat>
 800b5a0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b5a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d802      	bhi.n	800b5ae <f_open+0x2e6>
 800b5a8:	2302      	movs	r3, #2
 800b5aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b5ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b4:	d102      	bne.n	800b5bc <f_open+0x2f4>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b5bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	657b      	str	r3, [r7, #84]	; 0x54
 800b5c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d103      	bne.n	800b5d4 <f_open+0x30c>
 800b5cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d8e0      	bhi.n	800b596 <f_open+0x2ce>
				}
				fp->clust = clst;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b5da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d131      	bne.n	800b646 <f_open+0x37e>
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	899b      	ldrh	r3, [r3, #12]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5ee:	fb02 f201 	mul.w	r2, r2, r1
 800b5f2:	1a9b      	subs	r3, r3, r2
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d026      	beq.n	800b646 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe fc17 	bl	8009e30 <clust2sect>
 800b602:	6478      	str	r0, [r7, #68]	; 0x44
 800b604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b606:	2b00      	cmp	r3, #0
 800b608:	d103      	bne.n	800b612 <f_open+0x34a>
						res = FR_INT_ERR;
 800b60a:	2302      	movs	r3, #2
 800b60c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b610:	e019      	b.n	800b646 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	899b      	ldrh	r3, [r3, #12]
 800b616:	461a      	mov	r2, r3
 800b618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b61a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b61e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b620:	441a      	add	r2, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	7858      	ldrb	r0, [r3, #1]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6a1a      	ldr	r2, [r3, #32]
 800b634:	2301      	movs	r3, #1
 800b636:	f7fe f84f 	bl	80096d8 <disk_read>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <f_open+0x37e>
 800b640:	2301      	movs	r3, #1
 800b642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <f_open+0x38c>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b654:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3760      	adds	r7, #96	; 0x60
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b08c      	sub	sp, #48	; 0x30
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
 800b66c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	2200      	movs	r2, #0
 800b676:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f107 0210 	add.w	r2, r7, #16
 800b67e:	4611      	mov	r1, r2
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff fda5 	bl	800b1d0 <validate>
 800b686:	4603      	mov	r3, r0
 800b688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b68c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b690:	2b00      	cmp	r3, #0
 800b692:	d107      	bne.n	800b6a4 <f_write+0x44>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	7d5b      	ldrb	r3, [r3, #21]
 800b698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b69c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <f_write+0x4a>
 800b6a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6a8:	e16a      	b.n	800b980 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	7d1b      	ldrb	r3, [r3, #20]
 800b6ae:	f003 0302 	and.w	r3, r3, #2
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <f_write+0x5a>
 800b6b6:	2307      	movs	r3, #7
 800b6b8:	e162      	b.n	800b980 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	699a      	ldr	r2, [r3, #24]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	441a      	add	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	699b      	ldr	r3, [r3, #24]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	f080 814c 	bcs.w	800b964 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	43db      	mvns	r3, r3
 800b6d2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b6d4:	e146      	b.n	800b964 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	8992      	ldrh	r2, [r2, #12]
 800b6de:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6e2:	fb02 f201 	mul.w	r2, r2, r1
 800b6e6:	1a9b      	subs	r3, r3, r2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	f040 80f1 	bne.w	800b8d0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	699b      	ldr	r3, [r3, #24]
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	8992      	ldrh	r2, [r2, #12]
 800b6f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	8952      	ldrh	r2, [r2, #10]
 800b6fe:	3a01      	subs	r2, #1
 800b700:	4013      	ands	r3, r2
 800b702:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d143      	bne.n	800b792 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10c      	bne.n	800b72c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d11a      	bne.n	800b754 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2100      	movs	r1, #0
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe fdef 	bl	800a306 <create_chain>
 800b728:	62b8      	str	r0, [r7, #40]	; 0x28
 800b72a:	e013      	b.n	800b754 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b730:	2b00      	cmp	r3, #0
 800b732:	d007      	beq.n	800b744 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	4619      	mov	r1, r3
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f7fe fe7b 	bl	800a436 <clmt_clust>
 800b740:	62b8      	str	r0, [r7, #40]	; 0x28
 800b742:	e007      	b.n	800b754 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	69db      	ldr	r3, [r3, #28]
 800b74a:	4619      	mov	r1, r3
 800b74c:	4610      	mov	r0, r2
 800b74e:	f7fe fdda 	bl	800a306 <create_chain>
 800b752:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b756:	2b00      	cmp	r3, #0
 800b758:	f000 8109 	beq.w	800b96e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d104      	bne.n	800b76c <f_write+0x10c>
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2202      	movs	r2, #2
 800b766:	755a      	strb	r2, [r3, #21]
 800b768:	2302      	movs	r3, #2
 800b76a:	e109      	b.n	800b980 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b772:	d104      	bne.n	800b77e <f_write+0x11e>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2201      	movs	r2, #1
 800b778:	755a      	strb	r2, [r3, #21]
 800b77a:	2301      	movs	r3, #1
 800b77c:	e100      	b.n	800b980 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b782:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d102      	bne.n	800b792 <f_write+0x132>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b790:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	7d1b      	ldrb	r3, [r3, #20]
 800b796:	b25b      	sxtb	r3, r3
 800b798:	2b00      	cmp	r3, #0
 800b79a:	da18      	bge.n	800b7ce <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	7858      	ldrb	r0, [r3, #1]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6a1a      	ldr	r2, [r3, #32]
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	f7fd ffb4 	bl	8009718 <disk_write>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d004      	beq.n	800b7c0 <f_write+0x160>
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	755a      	strb	r2, [r3, #21]
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e0df      	b.n	800b980 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	7d1b      	ldrb	r3, [r3, #20]
 800b7c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	69db      	ldr	r3, [r3, #28]
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f7fe fb2a 	bl	8009e30 <clust2sect>
 800b7dc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d104      	bne.n	800b7ee <f_write+0x18e>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	755a      	strb	r2, [r3, #21]
 800b7ea:	2302      	movs	r3, #2
 800b7ec:	e0c8      	b.n	800b980 <f_write+0x320>
			sect += csect;
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	899b      	ldrh	r3, [r3, #12]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800b802:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d043      	beq.n	800b892 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b80a:	69ba      	ldr	r2, [r7, #24]
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	4413      	add	r3, r2
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	8952      	ldrh	r2, [r2, #10]
 800b814:	4293      	cmp	r3, r2
 800b816:	d905      	bls.n	800b824 <f_write+0x1c4>
					cc = fs->csize - csect;
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	895b      	ldrh	r3, [r3, #10]
 800b81c:	461a      	mov	r2, r3
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	7858      	ldrb	r0, [r3, #1]
 800b828:	6a3b      	ldr	r3, [r7, #32]
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	69f9      	ldr	r1, [r7, #28]
 800b82e:	f7fd ff73 	bl	8009718 <disk_write>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d004      	beq.n	800b842 <f_write+0x1e2>
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2201      	movs	r2, #1
 800b83c:	755a      	strb	r2, [r3, #21]
 800b83e:	2301      	movs	r3, #1
 800b840:	e09e      	b.n	800b980 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6a1a      	ldr	r2, [r3, #32]
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	6a3a      	ldr	r2, [r7, #32]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d918      	bls.n	800b882 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6a1a      	ldr	r2, [r3, #32]
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	8992      	ldrh	r2, [r2, #12]
 800b862:	fb02 f303 	mul.w	r3, r2, r3
 800b866:	69fa      	ldr	r2, [r7, #28]
 800b868:	18d1      	adds	r1, r2, r3
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	899b      	ldrh	r3, [r3, #12]
 800b86e:	461a      	mov	r2, r3
 800b870:	f7fe f812 	bl	8009898 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	7d1b      	ldrb	r3, [r3, #20]
 800b878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	899b      	ldrh	r3, [r3, #12]
 800b886:	461a      	mov	r2, r3
 800b888:	6a3b      	ldr	r3, [r7, #32]
 800b88a:	fb02 f303 	mul.w	r3, r2, r3
 800b88e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b890:	e04b      	b.n	800b92a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6a1b      	ldr	r3, [r3, #32]
 800b896:	697a      	ldr	r2, [r7, #20]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d016      	beq.n	800b8ca <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	699a      	ldr	r2, [r3, #24]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d210      	bcs.n	800b8ca <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	7858      	ldrb	r0, [r3, #1]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	f7fd ff0f 	bl	80096d8 <disk_read>
 800b8ba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d004      	beq.n	800b8ca <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	755a      	strb	r2, [r3, #21]
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e05a      	b.n	800b980 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	697a      	ldr	r2, [r7, #20]
 800b8ce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	899b      	ldrh	r3, [r3, #12]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	699b      	ldr	r3, [r3, #24]
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	8992      	ldrh	r2, [r2, #12]
 800b8de:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8e2:	fb02 f201 	mul.w	r2, r2, r1
 800b8e6:	1a9b      	subs	r3, r3, r2
 800b8e8:	1ac3      	subs	r3, r0, r3
 800b8ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d901      	bls.n	800b8f8 <f_write+0x298>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	699b      	ldr	r3, [r3, #24]
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	8992      	ldrh	r2, [r2, #12]
 800b906:	fbb3 f0f2 	udiv	r0, r3, r2
 800b90a:	fb02 f200 	mul.w	r2, r2, r0
 800b90e:	1a9b      	subs	r3, r3, r2
 800b910:	440b      	add	r3, r1
 800b912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b914:	69f9      	ldr	r1, [r7, #28]
 800b916:	4618      	mov	r0, r3
 800b918:	f7fd ffbe 	bl	8009898 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	7d1b      	ldrb	r3, [r3, #20]
 800b920:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b924:	b2da      	uxtb	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b92a:	69fa      	ldr	r2, [r7, #28]
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	4413      	add	r3, r2
 800b930:	61fb      	str	r3, [r7, #28]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	699a      	ldr	r2, [r3, #24]
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	441a      	add	r2, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	619a      	str	r2, [r3, #24]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	699b      	ldr	r3, [r3, #24]
 800b946:	429a      	cmp	r2, r3
 800b948:	bf38      	it	cc
 800b94a:	461a      	movcc	r2, r3
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	60da      	str	r2, [r3, #12]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	441a      	add	r2, r3
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	f47f aeb5 	bne.w	800b6d6 <f_write+0x76>
 800b96c:	e000      	b.n	800b970 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b96e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	7d1b      	ldrb	r3, [r3, #20]
 800b974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3730      	adds	r7, #48	; 0x30
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f107 0208 	add.w	r2, r7, #8
 800b996:	4611      	mov	r1, r2
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff fc19 	bl	800b1d0 <validate>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b9a2:	7dfb      	ldrb	r3, [r7, #23]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d168      	bne.n	800ba7a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	7d1b      	ldrb	r3, [r3, #20]
 800b9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d062      	beq.n	800ba7a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	7d1b      	ldrb	r3, [r3, #20]
 800b9b8:	b25b      	sxtb	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	da15      	bge.n	800b9ea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	7858      	ldrb	r0, [r3, #1]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a1a      	ldr	r2, [r3, #32]
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	f7fd fea3 	bl	8009718 <disk_write>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <f_sync+0x54>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e04f      	b.n	800ba7c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	7d1b      	ldrb	r3, [r3, #20]
 800b9e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e4:	b2da      	uxtb	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b9ea:	f000 f9d9 	bl	800bda0 <get_fattime>
 800b9ee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	f7fe f97b 	bl	8009cf4 <move_window>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ba02:	7dfb      	ldrb	r3, [r7, #23]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d138      	bne.n	800ba7a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	330b      	adds	r3, #11
 800ba12:	781a      	ldrb	r2, [r3, #0]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	330b      	adds	r3, #11
 800ba18:	f042 0220 	orr.w	r2, r2, #32
 800ba1c:	b2d2      	uxtb	r2, r2
 800ba1e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6818      	ldr	r0, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	68f9      	ldr	r1, [r7, #12]
 800ba2c:	f7fe ff00 	bl	800a830 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f103 021c 	add.w	r2, r3, #28
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	f7fd feff 	bl	8009840 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3316      	adds	r3, #22
 800ba46:	6939      	ldr	r1, [r7, #16]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fd fef9 	bl	8009840 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3312      	adds	r3, #18
 800ba52:	2100      	movs	r1, #0
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fd fed8 	bl	800980a <st_word>
					fs->wflag = 1;
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fe f974 	bl	8009d50 <sync_fs>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	7d1b      	ldrb	r3, [r3, #20]
 800ba70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7ff ff7b 	bl	800b988 <f_sync>
 800ba92:	4603      	mov	r3, r0
 800ba94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d118      	bne.n	800bace <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f107 0208 	add.w	r2, r7, #8
 800baa2:	4611      	mov	r1, r2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7ff fb93 	bl	800b1d0 <validate>
 800baaa:	4603      	mov	r3, r0
 800baac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800baae:	7bfb      	ldrb	r3, [r7, #15]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10c      	bne.n	800bace <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	691b      	ldr	r3, [r3, #16]
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fe f877 	bl	8009bac <dec_lock>
 800babe:	4603      	mov	r3, r0
 800bac0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d102      	bne.n	800bace <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bace:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bad8:	b480      	push	{r7}
 800bada:	b087      	sub	sp, #28
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	4613      	mov	r3, r2
 800bae4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bae6:	2301      	movs	r3, #1
 800bae8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800baee:	4b1f      	ldr	r3, [pc, #124]	; (800bb6c <FATFS_LinkDriverEx+0x94>)
 800baf0:	7a5b      	ldrb	r3, [r3, #9]
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d131      	bne.n	800bb5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800baf8:	4b1c      	ldr	r3, [pc, #112]	; (800bb6c <FATFS_LinkDriverEx+0x94>)
 800bafa:	7a5b      	ldrb	r3, [r3, #9]
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	461a      	mov	r2, r3
 800bb00:	4b1a      	ldr	r3, [pc, #104]	; (800bb6c <FATFS_LinkDriverEx+0x94>)
 800bb02:	2100      	movs	r1, #0
 800bb04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bb06:	4b19      	ldr	r3, [pc, #100]	; (800bb6c <FATFS_LinkDriverEx+0x94>)
 800bb08:	7a5b      	ldrb	r3, [r3, #9]
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	4a17      	ldr	r2, [pc, #92]	; (800bb6c <FATFS_LinkDriverEx+0x94>)
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4413      	add	r3, r2
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb16:	4b15      	ldr	r3, [pc, #84]	; (800bb6c <FATFS_LinkDriverEx+0x94>)
 800bb18:	7a5b      	ldrb	r3, [r3, #9]
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	4b13      	ldr	r3, [pc, #76]	; (800bb6c <FATFS_LinkDriverEx+0x94>)
 800bb20:	4413      	add	r3, r2
 800bb22:	79fa      	ldrb	r2, [r7, #7]
 800bb24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bb26:	4b11      	ldr	r3, [pc, #68]	; (800bb6c <FATFS_LinkDriverEx+0x94>)
 800bb28:	7a5b      	ldrb	r3, [r3, #9]
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	1c5a      	adds	r2, r3, #1
 800bb2e:	b2d1      	uxtb	r1, r2
 800bb30:	4a0e      	ldr	r2, [pc, #56]	; (800bb6c <FATFS_LinkDriverEx+0x94>)
 800bb32:	7251      	strb	r1, [r2, #9]
 800bb34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb36:	7dbb      	ldrb	r3, [r7, #22]
 800bb38:	3330      	adds	r3, #48	; 0x30
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	3301      	adds	r3, #1
 800bb44:	223a      	movs	r2, #58	; 0x3a
 800bb46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	3302      	adds	r3, #2
 800bb4c:	222f      	movs	r2, #47	; 0x2f
 800bb4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	3303      	adds	r3, #3
 800bb54:	2200      	movs	r2, #0
 800bb56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	371c      	adds	r7, #28
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	2000042c 	.word	0x2000042c

0800bb70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	6839      	ldr	r1, [r7, #0]
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff ffaa 	bl	800bad8 <FATFS_LinkDriverEx>
 800bb84:	4603      	mov	r3, r0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
	...

0800bb90 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800bba0:	2301      	movs	r3, #1
 800bba2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800bba4:	4b15      	ldr	r3, [pc, #84]	; (800bbfc <FATFS_UnLinkDriverEx+0x6c>)
 800bba6:	7a5b      	ldrb	r3, [r3, #9]
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d01e      	beq.n	800bbec <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	3b30      	subs	r3, #48	; 0x30
 800bbb4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800bbb6:	7bbb      	ldrb	r3, [r7, #14]
 800bbb8:	4a10      	ldr	r2, [pc, #64]	; (800bbfc <FATFS_UnLinkDriverEx+0x6c>)
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d013      	beq.n	800bbec <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
 800bbc6:	4a0d      	ldr	r2, [pc, #52]	; (800bbfc <FATFS_UnLinkDriverEx+0x6c>)
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4413      	add	r3, r2
 800bbcc:	2200      	movs	r2, #0
 800bbce:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
 800bbd2:	4a0a      	ldr	r2, [pc, #40]	; (800bbfc <FATFS_UnLinkDriverEx+0x6c>)
 800bbd4:	4413      	add	r3, r2
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800bbda:	4b08      	ldr	r3, [pc, #32]	; (800bbfc <FATFS_UnLinkDriverEx+0x6c>)
 800bbdc:	7a5b      	ldrb	r3, [r3, #9]
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	b2da      	uxtb	r2, r3
 800bbe4:	4b05      	ldr	r3, [pc, #20]	; (800bbfc <FATFS_UnLinkDriverEx+0x6c>)
 800bbe6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop
 800bbfc:	2000042c 	.word	0x2000042c

0800bc00 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800bc08:	2100      	movs	r1, #0
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7ff ffc0 	bl	800bb90 <FATFS_UnLinkDriverEx>
 800bc10:	4603      	mov	r3, r0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bc26:	f000 f896 	bl	800bd56 <BSP_SD_IsDetected>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d001      	beq.n	800bc34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e012      	b.n	800bc5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bc34:	480b      	ldr	r0, [pc, #44]	; (800bc64 <BSP_SD_Init+0x48>)
 800bc36:	f7f7 fed7 	bl	80039e8 <HAL_SD_Init>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bc3e:	79fb      	ldrb	r3, [r7, #7]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d109      	bne.n	800bc58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800bc44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bc48:	4806      	ldr	r0, [pc, #24]	; (800bc64 <BSP_SD_Init+0x48>)
 800bc4a:	f7f8 fcb2 	bl	80045b2 <HAL_SD_ConfigWideBusOperation>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d001      	beq.n	800bc58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bc58:	79fb      	ldrb	r3, [r7, #7]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20002ab4 	.word	0x20002ab4

0800bc68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	68f9      	ldr	r1, [r7, #12]
 800bc7e:	4806      	ldr	r0, [pc, #24]	; (800bc98 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bc80:	f7f7 ff3a 	bl	8003af8 <HAL_SD_ReadBlocks_DMA>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bc8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3718      	adds	r7, #24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	20002ab4 	.word	0x20002ab4

0800bc9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	68ba      	ldr	r2, [r7, #8]
 800bcb0:	68f9      	ldr	r1, [r7, #12]
 800bcb2:	4806      	ldr	r0, [pc, #24]	; (800bccc <BSP_SD_WriteBlocks_DMA+0x30>)
 800bcb4:	f7f7 ffec 	bl	8003c90 <HAL_SD_WriteBlocks_DMA>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d001      	beq.n	800bcc2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bcc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3718      	adds	r7, #24
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	20002ab4 	.word	0x20002ab4

0800bcd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bcd4:	4805      	ldr	r0, [pc, #20]	; (800bcec <BSP_SD_GetCardState+0x1c>)
 800bcd6:	f7f8 fce8 	bl	80046aa <HAL_SD_GetCardState>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b04      	cmp	r3, #4
 800bcde:	bf14      	ite	ne
 800bce0:	2301      	movne	r3, #1
 800bce2:	2300      	moveq	r3, #0
 800bce4:	b2db      	uxtb	r3, r3
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20002ab4 	.word	0x20002ab4

0800bcf0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bcf8:	6879      	ldr	r1, [r7, #4]
 800bcfa:	4803      	ldr	r0, [pc, #12]	; (800bd08 <BSP_SD_GetCardInfo+0x18>)
 800bcfc:	f7f8 fc2d 	bl	800455a <HAL_SD_GetCardInfo>
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	20002ab4 	.word	0x20002ab4

0800bd0c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800bd14:	f000 f818 	bl	800bd48 <BSP_SD_AbortCallback>
}
 800bd18:	bf00      	nop
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bd28:	f001 f832 	bl	800cd90 <BSP_SD_WriteCpltCallback>
}
 800bd2c:	bf00      	nop
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bd3c:	f001 f834 	bl	800cda8 <BSP_SD_ReadCpltCallback>
}
 800bd40:	bf00      	nop
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	af00      	add	r7, sp, #0

}
 800bd4c:	bf00      	nop
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b082      	sub	sp, #8
 800bd5a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800bd60:	f000 f826 	bl	800bdb0 <BSP_PlatformIsDetected>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	b2db      	uxtb	r3, r3
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
	...

0800bd7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bd80:	4904      	ldr	r1, [pc, #16]	; (800bd94 <MX_FATFS_Init+0x18>)
 800bd82:	4805      	ldr	r0, [pc, #20]	; (800bd98 <MX_FATFS_Init+0x1c>)
 800bd84:	f7ff fef4 	bl	800bb70 <FATFS_LinkDriver>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	4b03      	ldr	r3, [pc, #12]	; (800bd9c <MX_FATFS_Init+0x20>)
 800bd8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bd90:	bf00      	nop
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	20000858 	.word	0x20000858
 800bd98:	0800ed20 	.word	0x0800ed20
 800bd9c:	20000854 	.word	0x20000854

0800bda0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bda4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bdba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bdbe:	4806      	ldr	r0, [pc, #24]	; (800bdd8 <BSP_PlatformIsDetected+0x28>)
 800bdc0:	f7f5 fc92 	bl	80016e8 <HAL_GPIO_ReadPin>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d001      	beq.n	800bdce <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800bdce:	79fb      	ldrb	r3, [r7, #7]
}  
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	40020000 	.word	0x40020000

0800bddc <print>:
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800bde4:	2201      	movs	r2, #1
 800bde6:	2140      	movs	r1, #64	; 0x40
 800bde8:	480c      	ldr	r0, [pc, #48]	; (800be1c <print+0x40>)
 800bdea:	f7f5 fc95 	bl	8001718 <HAL_GPIO_WritePin>
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 800bdee:	bf00      	nop
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7f4 f9ed 	bl	80001d0 <strlen>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f001 fc51 	bl	800d6a4 <CDC_Transmit_FS>
 800be02:	4603      	mov	r3, r0
 800be04:	2b01      	cmp	r3, #1
 800be06:	d0f3      	beq.n	800bdf0 <print+0x14>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800be08:	2200      	movs	r2, #0
 800be0a:	2140      	movs	r1, #64	; 0x40
 800be0c:	4803      	ldr	r0, [pc, #12]	; (800be1c <print+0x40>)
 800be0e:	f7f5 fc83 	bl	8001718 <HAL_GPIO_WritePin>
};
 800be12:	bf00      	nop
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	40020800 	.word	0x40020800

0800be20 <println>:
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800be28:	2201      	movs	r2, #1
 800be2a:	2140      	movs	r1, #64	; 0x40
 800be2c:	4820      	ldr	r0, [pc, #128]	; (800beb0 <println+0x90>)
 800be2e:	f7f5 fc73 	bl	8001718 <HAL_GPIO_WritePin>
	printLen = strlen(str);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7f4 f9cc 	bl	80001d0 <strlen>
 800be38:	4602      	mov	r2, r0
 800be3a:	4b1e      	ldr	r3, [pc, #120]	; (800beb4 <println+0x94>)
 800be3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < printLen; i++)
 800be3e:	2300      	movs	r3, #0
 800be40:	73fb      	strb	r3, [r7, #15]
 800be42:	e009      	b.n	800be58 <println+0x38>
		printBuffer[i] = str[i];
 800be44:	7bfb      	ldrb	r3, [r7, #15]
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	441a      	add	r2, r3
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	7811      	ldrb	r1, [r2, #0]
 800be4e:	4a1a      	ldr	r2, [pc, #104]	; (800beb8 <println+0x98>)
 800be50:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	3301      	adds	r3, #1
 800be56:	73fb      	strb	r3, [r7, #15]
 800be58:	7bfa      	ldrb	r2, [r7, #15]
 800be5a:	4b16      	ldr	r3, [pc, #88]	; (800beb4 <println+0x94>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d3f0      	bcc.n	800be44 <println+0x24>
	printBuffer[printLen] = '\n';
 800be62:	4b14      	ldr	r3, [pc, #80]	; (800beb4 <println+0x94>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a14      	ldr	r2, [pc, #80]	; (800beb8 <println+0x98>)
 800be68:	210a      	movs	r1, #10
 800be6a:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 800be6c:	4b11      	ldr	r3, [pc, #68]	; (800beb4 <println+0x94>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	3301      	adds	r3, #1
 800be72:	4a11      	ldr	r2, [pc, #68]	; (800beb8 <println+0x98>)
 800be74:	210d      	movs	r1, #13
 800be76:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 800be78:	4b0e      	ldr	r3, [pc, #56]	; (800beb4 <println+0x94>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	3302      	adds	r3, #2
 800be7e:	4a0e      	ldr	r2, [pc, #56]	; (800beb8 <println+0x98>)
 800be80:	2100      	movs	r1, #0
 800be82:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 800be84:	bf00      	nop
 800be86:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <println+0x94>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	3303      	adds	r3, #3
 800be8e:	b29b      	uxth	r3, r3
 800be90:	4619      	mov	r1, r3
 800be92:	4809      	ldr	r0, [pc, #36]	; (800beb8 <println+0x98>)
 800be94:	f001 fc06 	bl	800d6a4 <CDC_Transmit_FS>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d0f3      	beq.n	800be86 <println+0x66>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800be9e:	2200      	movs	r2, #0
 800bea0:	2140      	movs	r1, #64	; 0x40
 800bea2:	4803      	ldr	r0, [pc, #12]	; (800beb0 <println+0x90>)
 800bea4:	f7f5 fc38 	bl	8001718 <HAL_GPIO_WritePin>
};
 800bea8:	bf00      	nop
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	40020800 	.word	0x40020800
 800beb4:	20000438 	.word	0x20000438
 800beb8:	2000043c 	.word	0x2000043c

0800bebc <millis>:
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 800bebc:	b480      	push	{r7}
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	4a04      	ldr	r2, [pc, #16]	; (800bed8 <millis+0x1c>)
 800bec8:	fba2 2303 	umull	r2, r3, r2, r3
 800becc:	099b      	lsrs	r3, r3, #6
 800bece:	4618      	mov	r0, r3
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	10624dd3 	.word	0x10624dd3

0800bedc <getTime>:
	rtc_date.Date = dateTime->dayM;
	if (HAL_RTC_SetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN) != HAL_OK) return false;
}

static inline DateTime getTime(void)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b08c      	sub	sp, #48	; 0x30
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 800bee4:	f107 031c 	add.w	r3, r7, #28
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	605a      	str	r2, [r3, #4]
 800beee:	609a      	str	r2, [r3, #8]
 800bef0:	60da      	str	r2, [r3, #12]
 800bef2:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 800bef4:	2300      	movs	r3, #0
 800bef6:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 800bef8:	f107 030c 	add.w	r3, r7, #12
 800befc:	2200      	movs	r2, #0
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	605a      	str	r2, [r3, #4]
 800bf02:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 800bf04:	f000 fd26 	bl	800c954 <Get_RTC_Instance>
 800bf08:	f107 031c 	add.w	r3, r7, #28
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	4619      	mov	r1, r3
 800bf10:	f7f7 fc4b 	bl	80037aa <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 800bf14:	f000 fd1e 	bl	800c954 <Get_RTC_Instance>
 800bf18:	f107 0318 	add.w	r3, r7, #24
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	4619      	mov	r1, r3
 800bf20:	f7f7 fca1 	bl	8003866 <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 800bf24:	7efb      	ldrb	r3, [r7, #27]
 800bf26:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 800bf28:	7e7b      	ldrb	r3, [r7, #25]
 800bf2a:	737b      	strb	r3, [r7, #13]
	//toReturn.dayY = rtc_date.
	toReturn.dayM = rtc_date.Date;
 800bf2c:	7ebb      	ldrb	r3, [r7, #26]
 800bf2e:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 800bf30:	7e3b      	ldrb	r3, [r7, #24]
 800bf32:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 800bf34:	7f3b      	ldrb	r3, [r7, #28]
 800bf36:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 800bf38:	7f7b      	ldrb	r3, [r7, #29]
 800bf3a:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 800bf3c:	7fbb      	ldrb	r3, [r7, #30]
 800bf3e:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 800bf40:	f7ff ffbc 	bl	800bebc <millis>
 800bf44:	4602      	mov	r2, r0
 800bf46:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <getTime+0x9c>)
 800bf48:	fba3 1302 	umull	r1, r3, r3, r2
 800bf4c:	099b      	lsrs	r3, r3, #6
 800bf4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bf52:	fb01 f303 	mul.w	r3, r1, r3
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	f107 030c 	add.w	r3, r7, #12
 800bf64:	cb03      	ldmia	r3!, {r0, r1}
 800bf66:	6010      	str	r0, [r2, #0]
 800bf68:	6051      	str	r1, [r2, #4]
 800bf6a:	881b      	ldrh	r3, [r3, #0]
 800bf6c:	8113      	strh	r3, [r2, #8]
}
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	3730      	adds	r7, #48	; 0x30
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	10624dd3 	.word	0x10624dd3

0800bf7c <sdTest_begin>:
#include "fatfs.h"
#include "clock.h"
#include "sd.h"

static bool sdTest_begin(void)
{
 800bf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf7e:	b091      	sub	sp, #68	; 0x44
 800bf80:	af06      	add	r7, sp, #24
	//HAL_Delay(1000);
	println("[SD] Starting...");
 800bf82:	4842      	ldr	r0, [pc, #264]	; (800c08c <sdTest_begin+0x110>)
 800bf84:	f7ff ff4c 	bl	800be20 <println>
	//HAL_Delay(1000);
	if (SD_init() == FR_OK)
 800bf88:	f7f4 fbda 	bl	8000740 <SD_init>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d171      	bne.n	800c076 <sdTest_begin+0xfa>
	{
		println("[SD] Detected");
 800bf92:	483f      	ldr	r0, [pc, #252]	; (800c090 <sdTest_begin+0x114>)
 800bf94:	f7ff ff44 	bl	800be20 <println>
		print("[SD] Creating test file...");
 800bf98:	483e      	ldr	r0, [pc, #248]	; (800c094 <sdTest_begin+0x118>)
 800bf9a:	f7ff ff1f 	bl	800bddc <print>
		if (SD_newFile("/TEST.TXT") == FR_OK)
 800bf9e:	483e      	ldr	r0, [pc, #248]	; (800c098 <sdTest_begin+0x11c>)
 800bfa0:	f7f4 fc1c 	bl	80007dc <SD_newFile>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d161      	bne.n	800c06e <sdTest_begin+0xf2>
		{
			println("successful.");
 800bfaa:	483c      	ldr	r0, [pc, #240]	; (800c09c <sdTest_begin+0x120>)
 800bfac:	f7ff ff38 	bl	800be20 <println>
			bool status = true;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status |= (SD_writeToFile("/TEST.TXT", "Created on: ") == FR_OK);
 800bfb6:	493a      	ldr	r1, [pc, #232]	; (800c0a0 <sdTest_begin+0x124>)
 800bfb8:	4837      	ldr	r0, [pc, #220]	; (800c098 <sdTest_begin+0x11c>)
 800bfba:	f7f4 fc63 	bl	8000884 <SD_writeToFile>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	bf0c      	ite	eq
 800bfc4:	2301      	moveq	r3, #1
 800bfc6:	2300      	movne	r3, #0
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	461a      	mov	r2, r3
 800bfcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	bf14      	ite	ne
 800bfd6:	2301      	movne	r3, #1
 800bfd8:	2300      	moveq	r3, #0
 800bfda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			DateTime fileCreated = getTime();
 800bfde:	f107 031c 	add.w	r3, r7, #28
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7ff ff7a 	bl	800bedc <getTime>
			char dateStr[26] = {0};
 800bfe8:	463b      	mov	r3, r7
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
 800bfee:	605a      	str	r2, [r3, #4]
 800bff0:	609a      	str	r2, [r3, #8]
 800bff2:	60da      	str	r2, [r3, #12]
 800bff4:	611a      	str	r2, [r3, #16]
 800bff6:	615a      	str	r2, [r3, #20]
 800bff8:	831a      	strh	r2, [r3, #24]
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 800bffa:	7fbb      	ldrb	r3, [r7, #30]
 800bffc:	461e      	mov	r6, r3
 800bffe:	7f7b      	ldrb	r3, [r7, #29]
 800c000:	469c      	mov	ip, r3
 800c002:	7f3b      	ldrb	r3, [r7, #28]
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 800c004:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c008:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800c00c:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 800c010:	4604      	mov	r4, r0
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 800c012:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 800c014:	4605      	mov	r5, r0
 800c016:	4638      	mov	r0, r7
 800c018:	9504      	str	r5, [sp, #16]
 800c01a:	9403      	str	r4, [sp, #12]
 800c01c:	9102      	str	r1, [sp, #8]
 800c01e:	9201      	str	r2, [sp, #4]
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	4663      	mov	r3, ip
 800c024:	4632      	mov	r2, r6
 800c026:	491f      	ldr	r1, [pc, #124]	; (800c0a4 <sdTest_begin+0x128>)
 800c028:	f002 f8a0 	bl	800e16c <siprintf>

			status |= (SD_writeToFile("text.txt", dateStr) == FR_OK);
 800c02c:	463b      	mov	r3, r7
 800c02e:	4619      	mov	r1, r3
 800c030:	481d      	ldr	r0, [pc, #116]	; (800c0a8 <sdTest_begin+0x12c>)
 800c032:	f7f4 fc27 	bl	8000884 <SD_writeToFile>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	bf0c      	ite	eq
 800c03c:	2301      	moveq	r3, #1
 800c03e:	2300      	movne	r3, #0
 800c040:	b2db      	uxtb	r3, r3
 800c042:	461a      	mov	r2, r3
 800c044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c048:	4313      	orrs	r3, r2
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	bf14      	ite	ne
 800c04e:	2301      	movne	r3, #1
 800c050:	2300      	moveq	r3, #0
 800c052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (status) println("[SD] Content writing successful!");
 800c056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <sdTest_begin+0xea>
 800c05e:	4813      	ldr	r0, [pc, #76]	; (800c0ac <sdTest_begin+0x130>)
 800c060:	f7ff fede 	bl	800be20 <println>
 800c064:	e00c      	b.n	800c080 <sdTest_begin+0x104>
			else println("[SD] Content writing unsuccessful!");
 800c066:	4812      	ldr	r0, [pc, #72]	; (800c0b0 <sdTest_begin+0x134>)
 800c068:	f7ff feda 	bl	800be20 <println>
 800c06c:	e008      	b.n	800c080 <sdTest_begin+0x104>
		}
		else println("unsuccessful :(");
 800c06e:	4811      	ldr	r0, [pc, #68]	; (800c0b4 <sdTest_begin+0x138>)
 800c070:	f7ff fed6 	bl	800be20 <println>
 800c074:	e004      	b.n	800c080 <sdTest_begin+0x104>
	}
	else
	{
		println("[SD] Init fail!");
 800c076:	4810      	ldr	r0, [pc, #64]	; (800c0b8 <sdTest_begin+0x13c>)
 800c078:	f7ff fed2 	bl	800be20 <println>
		return false;
 800c07c:	2300      	movs	r3, #0
 800c07e:	e000      	b.n	800c082 <sdTest_begin+0x106>
	}

	return true;
 800c080:	2301      	movs	r3, #1
}
 800c082:	4618      	mov	r0, r3
 800c084:	372c      	adds	r7, #44	; 0x2c
 800c086:	46bd      	mov	sp, r7
 800c088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c08a:	bf00      	nop
 800c08c:	0800eb3c 	.word	0x0800eb3c
 800c090:	0800eb50 	.word	0x0800eb50
 800c094:	0800eb60 	.word	0x0800eb60
 800c098:	0800eb7c 	.word	0x0800eb7c
 800c09c:	0800eb88 	.word	0x0800eb88
 800c0a0:	0800eb94 	.word	0x0800eb94
 800c0a4:	0800eba4 	.word	0x0800eba4
 800c0a8:	0800ebbc 	.word	0x0800ebbc
 800c0ac:	0800ebc8 	.word	0x0800ebc8
 800c0b0:	0800ebec 	.word	0x0800ebec
 800c0b4:	0800ec10 	.word	0x0800ec10
 800c0b8:	0800ec20 	.word	0x0800ec20

0800c0bc <setup>:
#include "Peripherials/sdTest.c"

uint32_t lastMotUpdate;

static void setup(void)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	af00      	add	r7, sp, #0
	// wait for USR button press
	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);
 800c0c0:	bf00      	nop
 800c0c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c0c6:	4810      	ldr	r0, [pc, #64]	; (800c108 <setup+0x4c>)
 800c0c8:	f7f5 fb0e 	bl	80016e8 <HAL_GPIO_ReadPin>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d0f7      	beq.n	800c0c2 <setup+0x6>
	// begin the program
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	2140      	movs	r1, #64	; 0x40
 800c0d6:	480d      	ldr	r0, [pc, #52]	; (800c10c <setup+0x50>)
 800c0d8:	f7f5 fb1e 	bl	8001718 <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 800c0dc:	480c      	ldr	r0, [pc, #48]	; (800c110 <setup+0x54>)
 800c0de:	f7ff fe9f 	bl	800be20 <println>
 800c0e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c0e6:	f7f4 fc99 	bl	8000a1c <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	2140      	movs	r1, #64	; 0x40
 800c0ee:	4807      	ldr	r0, [pc, #28]	; (800c10c <setup+0x50>)
 800c0f0:	f7f5 fb12 	bl	8001718 <HAL_GPIO_WritePin>

	if (sdTest_begin()) println("[SD] MicroSD is working!");
 800c0f4:	f7ff ff42 	bl	800bf7c <sdTest_begin>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d002      	beq.n	800c104 <setup+0x48>
 800c0fe:	4805      	ldr	r0, [pc, #20]	; (800c114 <setup+0x58>)
 800c100:	f7ff fe8e 	bl	800be20 <println>

	//if (imuTest_begin()) println("[IMU] Init successful!");

	//enableMotors(); println("[MOT] Motors enabled!");
	//lastMotUpdate = millis();
}
 800c104:	bf00      	nop
 800c106:	bd80      	pop	{r7, pc}
 800c108:	40020000 	.word	0x40020000
 800c10c:	40020800 	.word	0x40020800
 800c110:	0800ec30 	.word	0x0800ec30
 800c114:	0800ec40 	.word	0x0800ec40

0800c118 <loop>:

static void loop(void)
{
 800c118:	b480      	push	{r7}
 800c11a:	af00      	add	r7, sp, #0
		imuTest_getEuler();
		algoGalgo(yaw);
		lastMotUpdate = millis();
	}
	*/
}
 800c11c:	bf00      	nop
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
	...

0800c128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c12c:	f7f4 fc04 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c130:	f000 f862 	bl	800c1f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c134:	f000 fb30 	bl	800c798 <MX_GPIO_Init>
  MX_DMA_Init();
 800c138:	f000 fb06 	bl	800c748 <MX_DMA_Init>
  MX_I2C1_Init();
 800c13c:	f000 f8de 	bl	800c2fc <MX_I2C1_Init>
  MX_RTC_Init();
 800c140:	f000 f90a 	bl	800c358 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800c144:	f000 f92e 	bl	800c3a4 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800c148:	f000 f94c 	bl	800c3e4 <MX_SPI1_Init>
  MX_TIM2_Init();
 800c14c:	f000 f980 	bl	800c450 <MX_TIM2_Init>
  MX_TIM3_Init();
 800c150:	f000 f9cc 	bl	800c4ec <MX_TIM3_Init>
  MX_TIM5_Init();
 800c154:	f000 fa4c 	bl	800c5f0 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 800c158:	f000 facc 	bl	800c6f4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800c15c:	f7ff fe0e 	bl	800bd7c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800c160:	f001 f9aa 	bl	800d4b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 800c164:	4820      	ldr	r0, [pc, #128]	; (800c1e8 <main+0xc0>)
 800c166:	f7f8 ffad 	bl	80050c4 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 800c16a:	2200      	movs	r2, #0
 800c16c:	2180      	movs	r1, #128	; 0x80
 800c16e:	481f      	ldr	r0, [pc, #124]	; (800c1ec <main+0xc4>)
 800c170:	f7f5 fad2 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800c174:	2200      	movs	r2, #0
 800c176:	2140      	movs	r1, #64	; 0x40
 800c178:	481c      	ldr	r0, [pc, #112]	; (800c1ec <main+0xc4>)
 800c17a:	f7f5 facd 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 800c17e:	2200      	movs	r2, #0
 800c180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c184:	481a      	ldr	r0, [pc, #104]	; (800c1f0 <main+0xc8>)
 800c186:	f7f5 fac7 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 800c18a:	2200      	movs	r2, #0
 800c18c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c190:	4817      	ldr	r0, [pc, #92]	; (800c1f0 <main+0xc8>)
 800c192:	f7f5 fac1 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 800c196:	2200      	movs	r2, #0
 800c198:	2101      	movs	r1, #1
 800c19a:	4816      	ldr	r0, [pc, #88]	; (800c1f4 <main+0xcc>)
 800c19c:	f7f5 fabc 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	2104      	movs	r1, #4
 800c1a4:	4813      	ldr	r0, [pc, #76]	; (800c1f4 <main+0xcc>)
 800c1a6:	f7f5 fab7 	bl	8001718 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	2101      	movs	r1, #1
 800c1ae:	480f      	ldr	r0, [pc, #60]	; (800c1ec <main+0xc4>)
 800c1b0:	f7f5 fab2 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	2104      	movs	r1, #4
 800c1b8:	480c      	ldr	r0, [pc, #48]	; (800c1ec <main+0xc4>)
 800c1ba:	f7f5 faad 	bl	8001718 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 800c1be:	2200      	movs	r2, #0
 800c1c0:	2102      	movs	r1, #2
 800c1c2:	480a      	ldr	r0, [pc, #40]	; (800c1ec <main+0xc4>)
 800c1c4:	f7f5 faa8 	bl	8001718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	2108      	movs	r1, #8
 800c1cc:	4807      	ldr	r0, [pc, #28]	; (800c1ec <main+0xc4>)
 800c1ce:	f7f5 faa3 	bl	8001718 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2110      	movs	r1, #16
 800c1d6:	4807      	ldr	r0, [pc, #28]	; (800c1f4 <main+0xcc>)
 800c1d8:	f7f5 fa9e 	bl	8001718 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 800c1dc:	f7ff ff6e 	bl	800c0bc <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 800c1e0:	f7ff ff9a 	bl	800c118 <loop>
 800c1e4:	e7fc      	b.n	800c1e0 <main+0xb8>
 800c1e6:	bf00      	nop
 800c1e8:	20002b90 	.word	0x20002b90
 800c1ec:	40020800 	.word	0x40020800
 800c1f0:	40020400 	.word	0x40020400
 800c1f4:	40020000 	.word	0x40020000

0800c1f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b098      	sub	sp, #96	; 0x60
 800c1fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c1fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c202:	2230      	movs	r2, #48	; 0x30
 800c204:	2100      	movs	r1, #0
 800c206:	4618      	mov	r0, r3
 800c208:	f001 feef 	bl	800dfea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c20c:	f107 031c 	add.w	r3, r7, #28
 800c210:	2200      	movs	r2, #0
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	605a      	str	r2, [r3, #4]
 800c216:	609a      	str	r2, [r3, #8]
 800c218:	60da      	str	r2, [r3, #12]
 800c21a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c21c:	f107 030c 	add.w	r3, r7, #12
 800c220:	2200      	movs	r2, #0
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	605a      	str	r2, [r3, #4]
 800c226:	609a      	str	r2, [r3, #8]
 800c228:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c22a:	2300      	movs	r3, #0
 800c22c:	60bb      	str	r3, [r7, #8]
 800c22e:	4b31      	ldr	r3, [pc, #196]	; (800c2f4 <SystemClock_Config+0xfc>)
 800c230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c232:	4a30      	ldr	r2, [pc, #192]	; (800c2f4 <SystemClock_Config+0xfc>)
 800c234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c238:	6413      	str	r3, [r2, #64]	; 0x40
 800c23a:	4b2e      	ldr	r3, [pc, #184]	; (800c2f4 <SystemClock_Config+0xfc>)
 800c23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c242:	60bb      	str	r3, [r7, #8]
 800c244:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c246:	2300      	movs	r3, #0
 800c248:	607b      	str	r3, [r7, #4]
 800c24a:	4b2b      	ldr	r3, [pc, #172]	; (800c2f8 <SystemClock_Config+0x100>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a2a      	ldr	r2, [pc, #168]	; (800c2f8 <SystemClock_Config+0x100>)
 800c250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c254:	6013      	str	r3, [r2, #0]
 800c256:	4b28      	ldr	r3, [pc, #160]	; (800c2f8 <SystemClock_Config+0x100>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c25e:	607b      	str	r3, [r7, #4]
 800c260:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800c262:	2309      	movs	r3, #9
 800c264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c26a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800c26c:	2301      	movs	r3, #1
 800c26e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c270:	2302      	movs	r3, #2
 800c272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c274:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c278:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800c27a:	2306      	movs	r3, #6
 800c27c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c27e:	23a8      	movs	r3, #168	; 0xa8
 800c280:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c282:	2302      	movs	r3, #2
 800c284:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800c286:	2307      	movs	r3, #7
 800c288:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c28a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c28e:	4618      	mov	r0, r3
 800c290:	f7f6 fd0e 	bl	8002cb0 <HAL_RCC_OscConfig>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d001      	beq.n	800c29e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800c29a:	f000 fb65 	bl	800c968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c29e:	230f      	movs	r3, #15
 800c2a0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c2aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c2ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c2b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c2b6:	f107 031c 	add.w	r3, r7, #28
 800c2ba:	2105      	movs	r1, #5
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7f6 ff39 	bl	8003134 <HAL_RCC_ClockConfig>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d001      	beq.n	800c2cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800c2c8:	f000 fb4e 	bl	800c968 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800c2d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2d4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c2d6:	f107 030c 	add.w	r3, r7, #12
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7f7 f8f2 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d001      	beq.n	800c2ea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800c2e6:	f000 fb3f 	bl	800c968 <Error_Handler>
  }
}
 800c2ea:	bf00      	nop
 800c2ec:	3760      	adds	r7, #96	; 0x60
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	40023800 	.word	0x40023800
 800c2f8:	40007000 	.word	0x40007000

0800c2fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c300:	4b12      	ldr	r3, [pc, #72]	; (800c34c <MX_I2C1_Init+0x50>)
 800c302:	4a13      	ldr	r2, [pc, #76]	; (800c350 <MX_I2C1_Init+0x54>)
 800c304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800c306:	4b11      	ldr	r3, [pc, #68]	; (800c34c <MX_I2C1_Init+0x50>)
 800c308:	4a12      	ldr	r2, [pc, #72]	; (800c354 <MX_I2C1_Init+0x58>)
 800c30a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800c30c:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <MX_I2C1_Init+0x50>)
 800c30e:	2200      	movs	r2, #0
 800c310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800c312:	4b0e      	ldr	r3, [pc, #56]	; (800c34c <MX_I2C1_Init+0x50>)
 800c314:	2200      	movs	r2, #0
 800c316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c318:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <MX_I2C1_Init+0x50>)
 800c31a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c31e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c320:	4b0a      	ldr	r3, [pc, #40]	; (800c34c <MX_I2C1_Init+0x50>)
 800c322:	2200      	movs	r2, #0
 800c324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800c326:	4b09      	ldr	r3, [pc, #36]	; (800c34c <MX_I2C1_Init+0x50>)
 800c328:	2200      	movs	r2, #0
 800c32a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c32c:	4b07      	ldr	r3, [pc, #28]	; (800c34c <MX_I2C1_Init+0x50>)
 800c32e:	2200      	movs	r2, #0
 800c330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c332:	4b06      	ldr	r3, [pc, #24]	; (800c34c <MX_I2C1_Init+0x50>)
 800c334:	2200      	movs	r2, #0
 800c336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c338:	4804      	ldr	r0, [pc, #16]	; (800c34c <MX_I2C1_Init+0x50>)
 800c33a:	f7f5 fa07 	bl	800174c <HAL_I2C_Init>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d001      	beq.n	800c348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800c344:	f000 fb10 	bl	800c968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c348:	bf00      	nop
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	20002960 	.word	0x20002960
 800c350:	40005400 	.word	0x40005400
 800c354:	00061a80 	.word	0x00061a80

0800c358 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800c35c:	4b0f      	ldr	r3, [pc, #60]	; (800c39c <MX_RTC_Init+0x44>)
 800c35e:	4a10      	ldr	r2, [pc, #64]	; (800c3a0 <MX_RTC_Init+0x48>)
 800c360:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c362:	4b0e      	ldr	r3, [pc, #56]	; (800c39c <MX_RTC_Init+0x44>)
 800c364:	2200      	movs	r2, #0
 800c366:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c368:	4b0c      	ldr	r3, [pc, #48]	; (800c39c <MX_RTC_Init+0x44>)
 800c36a:	227f      	movs	r2, #127	; 0x7f
 800c36c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c36e:	4b0b      	ldr	r3, [pc, #44]	; (800c39c <MX_RTC_Init+0x44>)
 800c370:	22ff      	movs	r2, #255	; 0xff
 800c372:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c374:	4b09      	ldr	r3, [pc, #36]	; (800c39c <MX_RTC_Init+0x44>)
 800c376:	2200      	movs	r2, #0
 800c378:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c37a:	4b08      	ldr	r3, [pc, #32]	; (800c39c <MX_RTC_Init+0x44>)
 800c37c:	2200      	movs	r2, #0
 800c37e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c380:	4b06      	ldr	r3, [pc, #24]	; (800c39c <MX_RTC_Init+0x44>)
 800c382:	2200      	movs	r2, #0
 800c384:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c386:	4805      	ldr	r0, [pc, #20]	; (800c39c <MX_RTC_Init+0x44>)
 800c388:	f7f7 f97e 	bl	8003688 <HAL_RTC_Init>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800c392:	f000 fae9 	bl	800c968 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800c396:	bf00      	nop
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20002a34 	.word	0x20002a34
 800c3a0:	40002800 	.word	0x40002800

0800c3a4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800c3a8:	4b0c      	ldr	r3, [pc, #48]	; (800c3dc <MX_SDIO_SD_Init+0x38>)
 800c3aa:	4a0d      	ldr	r2, [pc, #52]	; (800c3e0 <MX_SDIO_SD_Init+0x3c>)
 800c3ac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800c3ae:	4b0b      	ldr	r3, [pc, #44]	; (800c3dc <MX_SDIO_SD_Init+0x38>)
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800c3b4:	4b09      	ldr	r3, [pc, #36]	; (800c3dc <MX_SDIO_SD_Init+0x38>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c3ba:	4b08      	ldr	r3, [pc, #32]	; (800c3dc <MX_SDIO_SD_Init+0x38>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800c3c0:	4b06      	ldr	r3, [pc, #24]	; (800c3dc <MX_SDIO_SD_Init+0x38>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c3c6:	4b05      	ldr	r3, [pc, #20]	; (800c3dc <MX_SDIO_SD_Init+0x38>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800c3cc:	4b03      	ldr	r3, [pc, #12]	; (800c3dc <MX_SDIO_SD_Init+0x38>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800c3d2:	bf00      	nop
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	20002ab4 	.word	0x20002ab4
 800c3e0:	40012c00 	.word	0x40012c00

0800c3e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c3e8:	4b17      	ldr	r3, [pc, #92]	; (800c448 <MX_SPI1_Init+0x64>)
 800c3ea:	4a18      	ldr	r2, [pc, #96]	; (800c44c <MX_SPI1_Init+0x68>)
 800c3ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c3ee:	4b16      	ldr	r3, [pc, #88]	; (800c448 <MX_SPI1_Init+0x64>)
 800c3f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c3f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c3f6:	4b14      	ldr	r3, [pc, #80]	; (800c448 <MX_SPI1_Init+0x64>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c3fc:	4b12      	ldr	r3, [pc, #72]	; (800c448 <MX_SPI1_Init+0x64>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c402:	4b11      	ldr	r3, [pc, #68]	; (800c448 <MX_SPI1_Init+0x64>)
 800c404:	2200      	movs	r2, #0
 800c406:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c408:	4b0f      	ldr	r3, [pc, #60]	; (800c448 <MX_SPI1_Init+0x64>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c40e:	4b0e      	ldr	r3, [pc, #56]	; (800c448 <MX_SPI1_Init+0x64>)
 800c410:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c414:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800c416:	4b0c      	ldr	r3, [pc, #48]	; (800c448 <MX_SPI1_Init+0x64>)
 800c418:	2218      	movs	r2, #24
 800c41a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c41c:	4b0a      	ldr	r3, [pc, #40]	; (800c448 <MX_SPI1_Init+0x64>)
 800c41e:	2200      	movs	r2, #0
 800c420:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c422:	4b09      	ldr	r3, [pc, #36]	; (800c448 <MX_SPI1_Init+0x64>)
 800c424:	2200      	movs	r2, #0
 800c426:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c428:	4b07      	ldr	r3, [pc, #28]	; (800c448 <MX_SPI1_Init+0x64>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c42e:	4b06      	ldr	r3, [pc, #24]	; (800c448 <MX_SPI1_Init+0x64>)
 800c430:	220a      	movs	r2, #10
 800c432:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c434:	4804      	ldr	r0, [pc, #16]	; (800c448 <MX_SPI1_Init+0x64>)
 800c436:	f7f8 fdb6 	bl	8004fa6 <HAL_SPI_Init>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d001      	beq.n	800c444 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800c440:	f000 fa92 	bl	800c968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c444:	bf00      	nop
 800c446:	bd80      	pop	{r7, pc}
 800c448:	20002b38 	.word	0x20002b38
 800c44c:	40013000 	.word	0x40013000

0800c450 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c456:	f107 0308 	add.w	r3, r7, #8
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	605a      	str	r2, [r3, #4]
 800c460:	609a      	str	r2, [r3, #8]
 800c462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c464:	463b      	mov	r3, r7
 800c466:	2200      	movs	r2, #0
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c46c:	4b1d      	ldr	r3, [pc, #116]	; (800c4e4 <MX_TIM2_Init+0x94>)
 800c46e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c472:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800c474:	4b1b      	ldr	r3, [pc, #108]	; (800c4e4 <MX_TIM2_Init+0x94>)
 800c476:	2253      	movs	r2, #83	; 0x53
 800c478:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c47a:	4b1a      	ldr	r3, [pc, #104]	; (800c4e4 <MX_TIM2_Init+0x94>)
 800c47c:	2200      	movs	r2, #0
 800c47e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 800c480:	4b18      	ldr	r3, [pc, #96]	; (800c4e4 <MX_TIM2_Init+0x94>)
 800c482:	4a19      	ldr	r2, [pc, #100]	; (800c4e8 <MX_TIM2_Init+0x98>)
 800c484:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c486:	4b17      	ldr	r3, [pc, #92]	; (800c4e4 <MX_TIM2_Init+0x94>)
 800c488:	2200      	movs	r2, #0
 800c48a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c48c:	4b15      	ldr	r3, [pc, #84]	; (800c4e4 <MX_TIM2_Init+0x94>)
 800c48e:	2200      	movs	r2, #0
 800c490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c492:	4814      	ldr	r0, [pc, #80]	; (800c4e4 <MX_TIM2_Init+0x94>)
 800c494:	f7f8 fdeb 	bl	800506e <HAL_TIM_Base_Init>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d001      	beq.n	800c4a2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800c49e:	f000 fa63 	bl	800c968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c4a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c4a8:	f107 0308 	add.w	r3, r7, #8
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	480d      	ldr	r0, [pc, #52]	; (800c4e4 <MX_TIM2_Init+0x94>)
 800c4b0:	f7f8 ff28 	bl	8005304 <HAL_TIM_ConfigClockSource>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800c4ba:	f000 fa55 	bl	800c968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c4c6:	463b      	mov	r3, r7
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4806      	ldr	r0, [pc, #24]	; (800c4e4 <MX_TIM2_Init+0x94>)
 800c4cc:	f7f9 fabc 	bl	8005a48 <HAL_TIMEx_MasterConfigSynchronization>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800c4d6:	f000 fa47 	bl	800c968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800c4da:	bf00      	nop
 800c4dc:	3718      	adds	r7, #24
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	20002b90 	.word	0x20002b90
 800c4e8:	fa56ea00 	.word	0xfa56ea00

0800c4ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b08e      	sub	sp, #56	; 0x38
 800c4f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c4f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	601a      	str	r2, [r3, #0]
 800c4fa:	605a      	str	r2, [r3, #4]
 800c4fc:	609a      	str	r2, [r3, #8]
 800c4fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c500:	f107 0320 	add.w	r3, r7, #32
 800c504:	2200      	movs	r2, #0
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c50a:	1d3b      	adds	r3, r7, #4
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]
 800c510:	605a      	str	r2, [r3, #4]
 800c512:	609a      	str	r2, [r3, #8]
 800c514:	60da      	str	r2, [r3, #12]
 800c516:	611a      	str	r2, [r3, #16]
 800c518:	615a      	str	r2, [r3, #20]
 800c51a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800c51c:	4b32      	ldr	r3, [pc, #200]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c51e:	4a33      	ldr	r2, [pc, #204]	; (800c5ec <MX_TIM3_Init+0x100>)
 800c520:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800c522:	4b31      	ldr	r3, [pc, #196]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c524:	22a7      	movs	r2, #167	; 0xa7
 800c526:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c528:	4b2f      	ldr	r3, [pc, #188]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800c52e:	4b2e      	ldr	r3, [pc, #184]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c530:	f242 7210 	movw	r2, #10000	; 0x2710
 800c534:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c536:	4b2c      	ldr	r3, [pc, #176]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c538:	2200      	movs	r2, #0
 800c53a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c53c:	4b2a      	ldr	r3, [pc, #168]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c53e:	2200      	movs	r2, #0
 800c540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800c542:	4829      	ldr	r0, [pc, #164]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c544:	f7f8 fd93 	bl	800506e <HAL_TIM_Base_Init>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800c54e:	f000 fa0b 	bl	800c968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c556:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800c558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c55c:	4619      	mov	r1, r3
 800c55e:	4822      	ldr	r0, [pc, #136]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c560:	f7f8 fed0 	bl	8005304 <HAL_TIM_ConfigClockSource>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d001      	beq.n	800c56e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800c56a:	f000 f9fd 	bl	800c968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800c56e:	481e      	ldr	r0, [pc, #120]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c570:	f7f8 fdcc 	bl	800510c <HAL_TIM_PWM_Init>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800c57a:	f000 f9f5 	bl	800c968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c57e:	2300      	movs	r3, #0
 800c580:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c582:	2300      	movs	r3, #0
 800c584:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c586:	f107 0320 	add.w	r3, r7, #32
 800c58a:	4619      	mov	r1, r3
 800c58c:	4816      	ldr	r0, [pc, #88]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c58e:	f7f9 fa5b 	bl	8005a48 <HAL_TIMEx_MasterConfigSynchronization>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d001      	beq.n	800c59c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800c598:	f000 f9e6 	bl	800c968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c59c:	2360      	movs	r3, #96	; 0x60
 800c59e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800c5a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c5a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800c5ae:	1d3b      	adds	r3, r7, #4
 800c5b0:	2208      	movs	r2, #8
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	480c      	ldr	r0, [pc, #48]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c5b6:	f7f8 fddf 	bl	8005178 <HAL_TIM_PWM_ConfigChannel>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800c5c0:	f000 f9d2 	bl	800c968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c5c4:	1d3b      	adds	r3, r7, #4
 800c5c6:	220c      	movs	r2, #12
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4807      	ldr	r0, [pc, #28]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c5cc:	f7f8 fdd4 	bl	8005178 <HAL_TIM_PWM_ConfigChannel>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800c5d6:	f000 f9c7 	bl	800c968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800c5da:	4803      	ldr	r0, [pc, #12]	; (800c5e8 <MX_TIM3_Init+0xfc>)
 800c5dc:	f000 fe0a 	bl	800d1f4 <HAL_TIM_MspPostInit>

}
 800c5e0:	bf00      	nop
 800c5e2:	3738      	adds	r7, #56	; 0x38
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	200029f4 	.word	0x200029f4
 800c5ec:	40000400 	.word	0x40000400

0800c5f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b08e      	sub	sp, #56	; 0x38
 800c5f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c5f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	601a      	str	r2, [r3, #0]
 800c5fe:	605a      	str	r2, [r3, #4]
 800c600:	609a      	str	r2, [r3, #8]
 800c602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c604:	f107 0320 	add.w	r3, r7, #32
 800c608:	2200      	movs	r2, #0
 800c60a:	601a      	str	r2, [r3, #0]
 800c60c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c60e:	1d3b      	adds	r3, r7, #4
 800c610:	2200      	movs	r2, #0
 800c612:	601a      	str	r2, [r3, #0]
 800c614:	605a      	str	r2, [r3, #4]
 800c616:	609a      	str	r2, [r3, #8]
 800c618:	60da      	str	r2, [r3, #12]
 800c61a:	611a      	str	r2, [r3, #16]
 800c61c:	615a      	str	r2, [r3, #20]
 800c61e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800c620:	4b32      	ldr	r3, [pc, #200]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c622:	4a33      	ldr	r2, [pc, #204]	; (800c6f0 <MX_TIM5_Init+0x100>)
 800c624:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800c626:	4b31      	ldr	r3, [pc, #196]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c628:	2200      	movs	r2, #0
 800c62a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800c62c:	4b2f      	ldr	r3, [pc, #188]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c62e:	2240      	movs	r2, #64	; 0x40
 800c630:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 800c632:	4b2e      	ldr	r3, [pc, #184]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c638:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c63a:	4b2c      	ldr	r3, [pc, #176]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c63c:	2200      	movs	r2, #0
 800c63e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c640:	4b2a      	ldr	r3, [pc, #168]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c642:	2200      	movs	r2, #0
 800c644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c646:	4829      	ldr	r0, [pc, #164]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c648:	f7f8 fd11 	bl	800506e <HAL_TIM_Base_Init>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800c652:	f000 f989 	bl	800c968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c65a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c65c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c660:	4619      	mov	r1, r3
 800c662:	4822      	ldr	r0, [pc, #136]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c664:	f7f8 fe4e 	bl	8005304 <HAL_TIM_ConfigClockSource>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d001      	beq.n	800c672 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800c66e:	f000 f97b 	bl	800c968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800c672:	481e      	ldr	r0, [pc, #120]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c674:	f7f8 fd4a 	bl	800510c <HAL_TIM_PWM_Init>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d001      	beq.n	800c682 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800c67e:	f000 f973 	bl	800c968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c682:	2300      	movs	r3, #0
 800c684:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c686:	2300      	movs	r3, #0
 800c688:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c68a:	f107 0320 	add.w	r3, r7, #32
 800c68e:	4619      	mov	r1, r3
 800c690:	4816      	ldr	r0, [pc, #88]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c692:	f7f9 f9d9 	bl	8005a48 <HAL_TIMEx_MasterConfigSynchronization>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800c69c:	f000 f964 	bl	800c968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800c6a0:	2370      	movs	r3, #112	; 0x70
 800c6a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c6b0:	1d3b      	adds	r3, r7, #4
 800c6b2:	2204      	movs	r2, #4
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	480d      	ldr	r0, [pc, #52]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c6b8:	f7f8 fd5e 	bl	8005178 <HAL_TIM_PWM_ConfigChannel>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d001      	beq.n	800c6c6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800c6c2:	f000 f951 	bl	800c968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c6c6:	1d3b      	adds	r3, r7, #4
 800c6c8:	220c      	movs	r2, #12
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	4807      	ldr	r0, [pc, #28]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c6ce:	f7f8 fd53 	bl	8005178 <HAL_TIM_PWM_ConfigChannel>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d001      	beq.n	800c6dc <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 800c6d8:	f000 f946 	bl	800c968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800c6dc:	4803      	ldr	r0, [pc, #12]	; (800c6ec <MX_TIM5_Init+0xfc>)
 800c6de:	f000 fd89 	bl	800d1f4 <HAL_TIM_MspPostInit>

}
 800c6e2:	bf00      	nop
 800c6e4:	3738      	adds	r7, #56	; 0x38
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	200029b4 	.word	0x200029b4
 800c6f0:	40000c00 	.word	0x40000c00

0800c6f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800c6f8:	4b11      	ldr	r3, [pc, #68]	; (800c740 <MX_USART3_UART_Init+0x4c>)
 800c6fa:	4a12      	ldr	r2, [pc, #72]	; (800c744 <MX_USART3_UART_Init+0x50>)
 800c6fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800c6fe:	4b10      	ldr	r3, [pc, #64]	; (800c740 <MX_USART3_UART_Init+0x4c>)
 800c700:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c706:	4b0e      	ldr	r3, [pc, #56]	; (800c740 <MX_USART3_UART_Init+0x4c>)
 800c708:	2200      	movs	r2, #0
 800c70a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c70c:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <MX_USART3_UART_Init+0x4c>)
 800c70e:	2200      	movs	r2, #0
 800c710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c712:	4b0b      	ldr	r3, [pc, #44]	; (800c740 <MX_USART3_UART_Init+0x4c>)
 800c714:	2200      	movs	r2, #0
 800c716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c718:	4b09      	ldr	r3, [pc, #36]	; (800c740 <MX_USART3_UART_Init+0x4c>)
 800c71a:	220c      	movs	r2, #12
 800c71c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c71e:	4b08      	ldr	r3, [pc, #32]	; (800c740 <MX_USART3_UART_Init+0x4c>)
 800c720:	2200      	movs	r2, #0
 800c722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c724:	4b06      	ldr	r3, [pc, #24]	; (800c740 <MX_USART3_UART_Init+0x4c>)
 800c726:	2200      	movs	r2, #0
 800c728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c72a:	4805      	ldr	r0, [pc, #20]	; (800c740 <MX_USART3_UART_Init+0x4c>)
 800c72c:	f7f9 f9d1 	bl	8005ad2 <HAL_UART_Init>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800c736:	f000 f917 	bl	800c968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800c73a:	bf00      	nop
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	20002920 	.word	0x20002920
 800c744:	40004800 	.word	0x40004800

0800c748 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c74e:	2300      	movs	r3, #0
 800c750:	607b      	str	r3, [r7, #4]
 800c752:	4b10      	ldr	r3, [pc, #64]	; (800c794 <MX_DMA_Init+0x4c>)
 800c754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c756:	4a0f      	ldr	r2, [pc, #60]	; (800c794 <MX_DMA_Init+0x4c>)
 800c758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c75c:	6313      	str	r3, [r2, #48]	; 0x30
 800c75e:	4b0d      	ldr	r3, [pc, #52]	; (800c794 <MX_DMA_Init+0x4c>)
 800c760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c766:	607b      	str	r3, [r7, #4]
 800c768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800c76a:	2200      	movs	r2, #0
 800c76c:	2100      	movs	r1, #0
 800c76e:	203b      	movs	r0, #59	; 0x3b
 800c770:	f7f4 fa51 	bl	8000c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800c774:	203b      	movs	r0, #59	; 0x3b
 800c776:	f7f4 fa6a 	bl	8000c4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800c77a:	2200      	movs	r2, #0
 800c77c:	2100      	movs	r1, #0
 800c77e:	2045      	movs	r0, #69	; 0x45
 800c780:	f7f4 fa49 	bl	8000c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800c784:	2045      	movs	r0, #69	; 0x45
 800c786:	f7f4 fa62 	bl	8000c4e <HAL_NVIC_EnableIRQ>

}
 800c78a:	bf00      	nop
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	40023800 	.word	0x40023800

0800c798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b08a      	sub	sp, #40	; 0x28
 800c79c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c79e:	f107 0314 	add.w	r3, r7, #20
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	601a      	str	r2, [r3, #0]
 800c7a6:	605a      	str	r2, [r3, #4]
 800c7a8:	609a      	str	r2, [r3, #8]
 800c7aa:	60da      	str	r2, [r3, #12]
 800c7ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	613b      	str	r3, [r7, #16]
 800c7b2:	4b63      	ldr	r3, [pc, #396]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b6:	4a62      	ldr	r2, [pc, #392]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c7b8:	f043 0304 	orr.w	r3, r3, #4
 800c7bc:	6313      	str	r3, [r2, #48]	; 0x30
 800c7be:	4b60      	ldr	r3, [pc, #384]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c2:	f003 0304 	and.w	r3, r3, #4
 800c7c6:	613b      	str	r3, [r7, #16]
 800c7c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	60fb      	str	r3, [r7, #12]
 800c7ce:	4b5c      	ldr	r3, [pc, #368]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d2:	4a5b      	ldr	r2, [pc, #364]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7d8:	6313      	str	r3, [r2, #48]	; 0x30
 800c7da:	4b59      	ldr	r3, [pc, #356]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	60bb      	str	r3, [r7, #8]
 800c7ea:	4b55      	ldr	r3, [pc, #340]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ee:	4a54      	ldr	r2, [pc, #336]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c7f0:	f043 0301 	orr.w	r3, r3, #1
 800c7f4:	6313      	str	r3, [r2, #48]	; 0x30
 800c7f6:	4b52      	ldr	r3, [pc, #328]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7fa:	f003 0301 	and.w	r3, r3, #1
 800c7fe:	60bb      	str	r3, [r7, #8]
 800c800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c802:	2300      	movs	r3, #0
 800c804:	607b      	str	r3, [r7, #4]
 800c806:	4b4e      	ldr	r3, [pc, #312]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80a:	4a4d      	ldr	r2, [pc, #308]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c80c:	f043 0302 	orr.w	r3, r3, #2
 800c810:	6313      	str	r3, [r2, #48]	; 0x30
 800c812:	4b4b      	ldr	r3, [pc, #300]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c816:	f003 0302 	and.w	r3, r3, #2
 800c81a:	607b      	str	r3, [r7, #4]
 800c81c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c81e:	2300      	movs	r3, #0
 800c820:	603b      	str	r3, [r7, #0]
 800c822:	4b47      	ldr	r3, [pc, #284]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c826:	4a46      	ldr	r2, [pc, #280]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c828:	f043 0308 	orr.w	r3, r3, #8
 800c82c:	6313      	str	r3, [r2, #48]	; 0x30
 800c82e:	4b44      	ldr	r3, [pc, #272]	; (800c940 <MX_GPIO_Init+0x1a8>)
 800c830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c832:	f003 0308 	and.w	r3, r3, #8
 800c836:	603b      	str	r3, [r7, #0]
 800c838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800c83a:	2200      	movs	r2, #0
 800c83c:	21ef      	movs	r1, #239	; 0xef
 800c83e:	4841      	ldr	r0, [pc, #260]	; (800c944 <MX_GPIO_Init+0x1ac>)
 800c840:	f7f4 ff6a 	bl	8001718 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 800c844:	2200      	movs	r2, #0
 800c846:	2115      	movs	r1, #21
 800c848:	483f      	ldr	r0, [pc, #252]	; (800c948 <MX_GPIO_Init+0x1b0>)
 800c84a:	f7f4 ff65 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 800c84e:	2200      	movs	r2, #0
 800c850:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 800c854:	483d      	ldr	r0, [pc, #244]	; (800c94c <MX_GPIO_Init+0x1b4>)
 800c856:	f7f4 ff5f 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800c85a:	23cf      	movs	r3, #207	; 0xcf
 800c85c:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c85e:	2301      	movs	r3, #1
 800c860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c862:	2300      	movs	r3, #0
 800c864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c866:	2300      	movs	r3, #0
 800c868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c86a:	f107 0314 	add.w	r3, r7, #20
 800c86e:	4619      	mov	r1, r3
 800c870:	4834      	ldr	r0, [pc, #208]	; (800c944 <MX_GPIO_Init+0x1ac>)
 800c872:	f7f4 fd9f 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 800c876:	2305      	movs	r3, #5
 800c878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c87a:	2301      	movs	r3, #1
 800c87c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c87e:	2302      	movs	r3, #2
 800c880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c882:	2300      	movs	r3, #0
 800c884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c886:	f107 0314 	add.w	r3, r7, #20
 800c88a:	4619      	mov	r1, r3
 800c88c:	482e      	ldr	r0, [pc, #184]	; (800c948 <MX_GPIO_Init+0x1b0>)
 800c88e:	f7f4 fd91 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 800c892:	2310      	movs	r3, #16
 800c894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c896:	2301      	movs	r3, #1
 800c898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c89a:	2300      	movs	r3, #0
 800c89c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 800c8a2:	f107 0314 	add.w	r3, r7, #20
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	4827      	ldr	r0, [pc, #156]	; (800c948 <MX_GPIO_Init+0x1b0>)
 800c8aa:	f7f4 fd83 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 800c8ae:	23c0      	movs	r3, #192	; 0xc0
 800c8b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c8b2:	4b27      	ldr	r3, [pc, #156]	; (800c950 <MX_GPIO_Init+0x1b8>)
 800c8b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8ba:	f107 0314 	add.w	r3, r7, #20
 800c8be:	4619      	mov	r1, r3
 800c8c0:	4821      	ldr	r0, [pc, #132]	; (800c948 <MX_GPIO_Init+0x1b0>)
 800c8c2:	f7f4 fd77 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 800c8c6:	2320      	movs	r3, #32
 800c8c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c8ce:	2302      	movs	r3, #2
 800c8d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 800c8d6:	f107 0314 	add.w	r3, r7, #20
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4819      	ldr	r0, [pc, #100]	; (800c944 <MX_GPIO_Init+0x1ac>)
 800c8de:	f7f4 fd69 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 800c8e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c8e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8f4:	f107 0314 	add.w	r3, r7, #20
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	4814      	ldr	r0, [pc, #80]	; (800c94c <MX_GPIO_Init+0x1b4>)
 800c8fc:	f7f4 fd5a 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 800c900:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800c904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c906:	2300      	movs	r3, #0
 800c908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c90a:	2301      	movs	r3, #1
 800c90c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c90e:	f107 0314 	add.w	r3, r7, #20
 800c912:	4619      	mov	r1, r3
 800c914:	480c      	ldr	r0, [pc, #48]	; (800c948 <MX_GPIO_Init+0x1b0>)
 800c916:	f7f4 fd4d 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 800c91a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c91e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c920:	2301      	movs	r3, #1
 800c922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c924:	2302      	movs	r3, #2
 800c926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c928:	2300      	movs	r3, #0
 800c92a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 800c92c:	f107 0314 	add.w	r3, r7, #20
 800c930:	4619      	mov	r1, r3
 800c932:	4806      	ldr	r0, [pc, #24]	; (800c94c <MX_GPIO_Init+0x1b4>)
 800c934:	f7f4 fd3e 	bl	80013b4 <HAL_GPIO_Init>

}
 800c938:	bf00      	nop
 800c93a:	3728      	adds	r7, #40	; 0x28
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	40023800 	.word	0x40023800
 800c944:	40020800 	.word	0x40020800
 800c948:	40020000 	.word	0x40020000
 800c94c:	40020400 	.word	0x40020400
 800c950:	10110000 	.word	0x10110000

0800c954 <Get_RTC_Instance>:
/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
 800c954:	b480      	push	{r7}
 800c956:	af00      	add	r7, sp, #0
 800c958:	4b02      	ldr	r3, [pc, #8]	; (800c964 <Get_RTC_Instance+0x10>)
 800c95a:	4618      	mov	r0, r3
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr
 800c964:	20002a34 	.word	0x20002a34

0800c968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c968:	b480      	push	{r7}
 800c96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c96c:	bf00      	nop
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c97e:	f7f4 f841 	bl	8000a04 <HAL_GetTick>
 800c982:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c984:	e006      	b.n	800c994 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c986:	f7ff f9a3 	bl	800bcd0 <BSP_SD_GetCardState>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d101      	bne.n	800c994 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c990:	2300      	movs	r3, #0
 800c992:	e009      	b.n	800c9a8 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c994:	f7f4 f836 	bl	8000a04 <HAL_GetTick>
 800c998:	4602      	mov	r2, r0
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	1ad3      	subs	r3, r2, r3
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d8f0      	bhi.n	800c986 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c9a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c9ba:	4b0b      	ldr	r3, [pc, #44]	; (800c9e8 <SD_CheckStatus+0x38>)
 800c9bc:	2201      	movs	r2, #1
 800c9be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c9c0:	f7ff f986 	bl	800bcd0 <BSP_SD_GetCardState>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d107      	bne.n	800c9da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c9ca:	4b07      	ldr	r3, [pc, #28]	; (800c9e8 <SD_CheckStatus+0x38>)
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	f023 0301 	bic.w	r3, r3, #1
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	4b04      	ldr	r3, [pc, #16]	; (800c9e8 <SD_CheckStatus+0x38>)
 800c9d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c9da:	4b03      	ldr	r3, [pc, #12]	; (800c9e8 <SD_CheckStatus+0x38>)
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	b2db      	uxtb	r3, r3
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	20000117 	.word	0x20000117

0800c9ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c9f6:	f7ff f911 	bl	800bc1c <BSP_SD_Init>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d107      	bne.n	800ca10 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ca00:	79fb      	ldrb	r3, [r7, #7]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff ffd4 	bl	800c9b0 <SD_CheckStatus>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	4b04      	ldr	r3, [pc, #16]	; (800ca20 <SD_initialize+0x34>)
 800ca0e:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800ca10:	4b03      	ldr	r3, [pc, #12]	; (800ca20 <SD_initialize+0x34>)
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	b2db      	uxtb	r3, r3
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20000117 	.word	0x20000117

0800ca24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ca2e:	79fb      	ldrb	r3, [r7, #7]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7ff ffbd 	bl	800c9b0 <SD_CheckStatus>
 800ca36:	4603      	mov	r3, r0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b088      	sub	sp, #32
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60b9      	str	r1, [r7, #8]
 800ca48:	607a      	str	r2, [r7, #4]
 800ca4a:	603b      	str	r3, [r7, #0]
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ca54:	f247 5030 	movw	r0, #30000	; 0x7530
 800ca58:	f7ff ff8d 	bl	800c976 <SD_CheckStatusWithTimeout>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	da01      	bge.n	800ca66 <SD_read+0x26>
  {
    return res;
 800ca62:	7ffb      	ldrb	r3, [r7, #31]
 800ca64:	e08b      	b.n	800cb7e <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	f003 0303 	and.w	r3, r3, #3
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f040 8085 	bne.w	800cb7c <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	6879      	ldr	r1, [r7, #4]
 800ca76:	68b8      	ldr	r0, [r7, #8]
 800ca78:	f7ff f8f6 	bl	800bc68 <BSP_SD_ReadBlocks_DMA>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d133      	bne.n	800caea <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ca82:	4b41      	ldr	r3, [pc, #260]	; (800cb88 <SD_read+0x148>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ca88:	f7f3 ffbc 	bl	8000a04 <HAL_GetTick>
 800ca8c:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ca8e:	bf00      	nop
 800ca90:	4b3d      	ldr	r3, [pc, #244]	; (800cb88 <SD_read+0x148>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d108      	bne.n	800caaa <SD_read+0x6a>
 800ca98:	f7f3 ffb4 	bl	8000a04 <HAL_GetTick>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	f247 522f 	movw	r2, #29999	; 0x752f
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d9f2      	bls.n	800ca90 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800caaa:	4b37      	ldr	r3, [pc, #220]	; (800cb88 <SD_read+0x148>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d102      	bne.n	800cab8 <SD_read+0x78>
      {
        res = RES_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	77fb      	strb	r3, [r7, #31]
 800cab6:	e061      	b.n	800cb7c <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800cab8:	4b33      	ldr	r3, [pc, #204]	; (800cb88 <SD_read+0x148>)
 800caba:	2200      	movs	r2, #0
 800cabc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cabe:	f7f3 ffa1 	bl	8000a04 <HAL_GetTick>
 800cac2:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cac4:	e007      	b.n	800cad6 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cac6:	f7ff f903 	bl	800bcd0 <BSP_SD_GetCardState>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d102      	bne.n	800cad6 <SD_read+0x96>
          {
            res = RES_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800cad4:	e052      	b.n	800cb7c <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cad6:	f7f3 ff95 	bl	8000a04 <HAL_GetTick>
 800cada:	4602      	mov	r2, r0
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	f247 522f 	movw	r2, #29999	; 0x752f
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d9ee      	bls.n	800cac6 <SD_read+0x86>
 800cae8:	e048      	b.n	800cb7c <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800caea:	2300      	movs	r3, #0
 800caec:	61bb      	str	r3, [r7, #24]
 800caee:	e034      	b.n	800cb5a <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	1c5a      	adds	r2, r3, #1
 800caf4:	607a      	str	r2, [r7, #4]
 800caf6:	2201      	movs	r2, #1
 800caf8:	4619      	mov	r1, r3
 800cafa:	4824      	ldr	r0, [pc, #144]	; (800cb8c <SD_read+0x14c>)
 800cafc:	f7ff f8b4 	bl	800bc68 <BSP_SD_ReadBlocks_DMA>
 800cb00:	4603      	mov	r3, r0
 800cb02:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800cb04:	7fbb      	ldrb	r3, [r7, #30]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d12c      	bne.n	800cb64 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800cb0a:	4b1f      	ldr	r3, [pc, #124]	; (800cb88 <SD_read+0x148>)
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800cb10:	f7f3 ff78 	bl	8000a04 <HAL_GetTick>
 800cb14:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cb16:	bf00      	nop
 800cb18:	4b1b      	ldr	r3, [pc, #108]	; (800cb88 <SD_read+0x148>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d108      	bne.n	800cb32 <SD_read+0xf2>
 800cb20:	f7f3 ff70 	bl	8000a04 <HAL_GetTick>
 800cb24:	4602      	mov	r2, r0
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	f247 522f 	movw	r2, #29999	; 0x752f
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d9f2      	bls.n	800cb18 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <SD_read+0x148>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d016      	beq.n	800cb68 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	4a13      	ldr	r2, [pc, #76]	; (800cb8c <SD_read+0x14c>)
 800cb3e:	4618      	mov	r0, r3
 800cb40:	4611      	mov	r1, r2
 800cb42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb46:	461a      	mov	r2, r3
 800cb48:	f001 fa44 	bl	800dfd4 <memcpy>
          buff += BLOCKSIZE;
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cb52:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	3301      	adds	r3, #1
 800cb58:	61bb      	str	r3, [r7, #24]
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d8c6      	bhi.n	800caf0 <SD_read+0xb0>
 800cb62:	e002      	b.n	800cb6a <SD_read+0x12a>
        }
        else
        {
          break;
 800cb64:	bf00      	nop
 800cb66:	e000      	b.n	800cb6a <SD_read+0x12a>
            break;
 800cb68:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	683a      	ldr	r2, [r7, #0]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d104      	bne.n	800cb7c <SD_read+0x13c>
 800cb72:	7fbb      	ldrb	r3, [r7, #30]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d101      	bne.n	800cb7c <SD_read+0x13c>
        res = RES_OK;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800cb7c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3720      	adds	r7, #32
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	20000840 	.word	0x20000840
 800cb8c:	2000063c 	.word	0x2000063c

0800cb90 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b088      	sub	sp, #32
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	607a      	str	r2, [r7, #4]
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cba0:	2301      	movs	r3, #1
 800cba2:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800cba4:	4b4c      	ldr	r3, [pc, #304]	; (800ccd8 <SD_write+0x148>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cbaa:	f247 5030 	movw	r0, #30000	; 0x7530
 800cbae:	f7ff fee2 	bl	800c976 <SD_CheckStatusWithTimeout>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	da01      	bge.n	800cbbc <SD_write+0x2c>
  {
    return res;
 800cbb8:	7ffb      	ldrb	r3, [r7, #31]
 800cbba:	e088      	b.n	800ccce <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	f003 0303 	and.w	r3, r3, #3
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	f040 8082 	bne.w	800cccc <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	6879      	ldr	r1, [r7, #4]
 800cbcc:	68b8      	ldr	r0, [r7, #8]
 800cbce:	f7ff f865 	bl	800bc9c <BSP_SD_WriteBlocks_DMA>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d130      	bne.n	800cc3a <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800cbd8:	f7f3 ff14 	bl	8000a04 <HAL_GetTick>
 800cbdc:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cbde:	bf00      	nop
 800cbe0:	4b3d      	ldr	r3, [pc, #244]	; (800ccd8 <SD_write+0x148>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d108      	bne.n	800cbfa <SD_write+0x6a>
 800cbe8:	f7f3 ff0c 	bl	8000a04 <HAL_GetTick>
 800cbec:	4602      	mov	r2, r0
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	f247 522f 	movw	r2, #29999	; 0x752f
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d9f2      	bls.n	800cbe0 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800cbfa:	4b37      	ldr	r3, [pc, #220]	; (800ccd8 <SD_write+0x148>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d102      	bne.n	800cc08 <SD_write+0x78>
      {
        res = RES_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	77fb      	strb	r3, [r7, #31]
 800cc06:	e061      	b.n	800cccc <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800cc08:	4b33      	ldr	r3, [pc, #204]	; (800ccd8 <SD_write+0x148>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cc0e:	f7f3 fef9 	bl	8000a04 <HAL_GetTick>
 800cc12:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cc14:	e007      	b.n	800cc26 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cc16:	f7ff f85b 	bl	800bcd0 <BSP_SD_GetCardState>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d102      	bne.n	800cc26 <SD_write+0x96>
          {
            res = RES_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	77fb      	strb	r3, [r7, #31]
            break;
 800cc24:	e052      	b.n	800cccc <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cc26:	f7f3 feed 	bl	8000a04 <HAL_GetTick>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	f247 522f 	movw	r2, #29999	; 0x752f
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d9ee      	bls.n	800cc16 <SD_write+0x86>
 800cc38:	e048      	b.n	800cccc <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	61bb      	str	r3, [r7, #24]
 800cc3e:	e034      	b.n	800ccaa <SD_write+0x11a>
      {
        WriteStatus = 0;
 800cc40:	4b25      	ldr	r3, [pc, #148]	; (800ccd8 <SD_write+0x148>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	607a      	str	r2, [r7, #4]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4822      	ldr	r0, [pc, #136]	; (800ccdc <SD_write+0x14c>)
 800cc52:	f7ff f823 	bl	800bc9c <BSP_SD_WriteBlocks_DMA>
 800cc56:	4603      	mov	r3, r0
 800cc58:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800cc5a:	7fbb      	ldrb	r3, [r7, #30]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d129      	bne.n	800ccb4 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800cc60:	f7f3 fed0 	bl	8000a04 <HAL_GetTick>
 800cc64:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cc66:	bf00      	nop
 800cc68:	4b1b      	ldr	r3, [pc, #108]	; (800ccd8 <SD_write+0x148>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d108      	bne.n	800cc82 <SD_write+0xf2>
 800cc70:	f7f3 fec8 	bl	8000a04 <HAL_GetTick>
 800cc74:	4602      	mov	r2, r0
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	f247 522f 	movw	r2, #29999	; 0x752f
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d9f2      	bls.n	800cc68 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800cc82:	4b15      	ldr	r3, [pc, #84]	; (800ccd8 <SD_write+0x148>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d016      	beq.n	800ccb8 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	4a13      	ldr	r2, [pc, #76]	; (800ccdc <SD_write+0x14c>)
 800cc8e:	4618      	mov	r0, r3
 800cc90:	4611      	mov	r1, r2
 800cc92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc96:	461a      	mov	r2, r3
 800cc98:	f001 f99c 	bl	800dfd4 <memcpy>
          buff += BLOCKSIZE;
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cca2:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	3301      	adds	r3, #1
 800cca8:	61bb      	str	r3, [r7, #24]
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d8c6      	bhi.n	800cc40 <SD_write+0xb0>
 800ccb2:	e002      	b.n	800ccba <SD_write+0x12a>
        }
        else
        {
          break;
 800ccb4:	bf00      	nop
 800ccb6:	e000      	b.n	800ccba <SD_write+0x12a>
            break;
 800ccb8:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d104      	bne.n	800cccc <SD_write+0x13c>
 800ccc2:	7fbb      	ldrb	r3, [r7, #30]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d101      	bne.n	800cccc <SD_write+0x13c>
        res = RES_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800cccc:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3720      	adds	r7, #32
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	2000083c 	.word	0x2000083c
 800ccdc:	2000063c 	.word	0x2000063c

0800cce0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b08c      	sub	sp, #48	; 0x30
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	4603      	mov	r3, r0
 800cce8:	603a      	str	r2, [r7, #0]
 800ccea:	71fb      	strb	r3, [r7, #7]
 800ccec:	460b      	mov	r3, r1
 800ccee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ccf6:	4b25      	ldr	r3, [pc, #148]	; (800cd8c <SD_ioctl+0xac>)
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	f003 0301 	and.w	r3, r3, #1
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d001      	beq.n	800cd08 <SD_ioctl+0x28>
 800cd04:	2303      	movs	r3, #3
 800cd06:	e03c      	b.n	800cd82 <SD_ioctl+0xa2>

  switch (cmd)
 800cd08:	79bb      	ldrb	r3, [r7, #6]
 800cd0a:	2b03      	cmp	r3, #3
 800cd0c:	d834      	bhi.n	800cd78 <SD_ioctl+0x98>
 800cd0e:	a201      	add	r2, pc, #4	; (adr r2, 800cd14 <SD_ioctl+0x34>)
 800cd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd14:	0800cd25 	.word	0x0800cd25
 800cd18:	0800cd2d 	.word	0x0800cd2d
 800cd1c:	0800cd45 	.word	0x0800cd45
 800cd20:	0800cd5f 	.word	0x0800cd5f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd2a:	e028      	b.n	800cd7e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd2c:	f107 030c 	add.w	r3, r7, #12
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fe ffdd 	bl	800bcf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cd36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd42:	e01c      	b.n	800cd7e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd44:	f107 030c 	add.w	r3, r7, #12
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7fe ffd1 	bl	800bcf0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd5c:	e00f      	b.n	800cd7e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd5e:	f107 030c 	add.w	r3, r7, #12
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fe ffc4 	bl	800bcf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6a:	0a5a      	lsrs	r2, r3, #9
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd76:	e002      	b.n	800cd7e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cd78:	2304      	movs	r3, #4
 800cd7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cd7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3730      	adds	r7, #48	; 0x30
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	20000117 	.word	0x20000117

0800cd90 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cd90:	b480      	push	{r7}
 800cd92:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 800cd94:	4b03      	ldr	r3, [pc, #12]	; (800cda4 <BSP_SD_WriteCpltCallback+0x14>)
 800cd96:	2201      	movs	r2, #1
 800cd98:	601a      	str	r2, [r3, #0]
}
 800cd9a:	bf00      	nop
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	2000083c 	.word	0x2000083c

0800cda8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800cdac:	4b03      	ldr	r3, [pc, #12]	; (800cdbc <BSP_SD_ReadCpltCallback+0x14>)
 800cdae:	2201      	movs	r2, #1
 800cdb0:	601a      	str	r2, [r3, #0]
}
 800cdb2:	bf00      	nop
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	20000840 	.word	0x20000840

0800cdc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	607b      	str	r3, [r7, #4]
 800cdca:	4b10      	ldr	r3, [pc, #64]	; (800ce0c <HAL_MspInit+0x4c>)
 800cdcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdce:	4a0f      	ldr	r2, [pc, #60]	; (800ce0c <HAL_MspInit+0x4c>)
 800cdd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cdd4:	6453      	str	r3, [r2, #68]	; 0x44
 800cdd6:	4b0d      	ldr	r3, [pc, #52]	; (800ce0c <HAL_MspInit+0x4c>)
 800cdd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdde:	607b      	str	r3, [r7, #4]
 800cde0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cde2:	2300      	movs	r3, #0
 800cde4:	603b      	str	r3, [r7, #0]
 800cde6:	4b09      	ldr	r3, [pc, #36]	; (800ce0c <HAL_MspInit+0x4c>)
 800cde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdea:	4a08      	ldr	r2, [pc, #32]	; (800ce0c <HAL_MspInit+0x4c>)
 800cdec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdf0:	6413      	str	r3, [r2, #64]	; 0x40
 800cdf2:	4b06      	ldr	r3, [pc, #24]	; (800ce0c <HAL_MspInit+0x4c>)
 800cdf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdfa:	603b      	str	r3, [r7, #0]
 800cdfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cdfe:	bf00      	nop
 800ce00:	370c      	adds	r7, #12
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	40023800 	.word	0x40023800

0800ce10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08a      	sub	sp, #40	; 0x28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce18:	f107 0314 	add.w	r3, r7, #20
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	605a      	str	r2, [r3, #4]
 800ce22:	609a      	str	r2, [r3, #8]
 800ce24:	60da      	str	r2, [r3, #12]
 800ce26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a19      	ldr	r2, [pc, #100]	; (800ce94 <HAL_I2C_MspInit+0x84>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d12b      	bne.n	800ce8a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce32:	2300      	movs	r3, #0
 800ce34:	613b      	str	r3, [r7, #16]
 800ce36:	4b18      	ldr	r3, [pc, #96]	; (800ce98 <HAL_I2C_MspInit+0x88>)
 800ce38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce3a:	4a17      	ldr	r2, [pc, #92]	; (800ce98 <HAL_I2C_MspInit+0x88>)
 800ce3c:	f043 0302 	orr.w	r3, r3, #2
 800ce40:	6313      	str	r3, [r2, #48]	; 0x30
 800ce42:	4b15      	ldr	r3, [pc, #84]	; (800ce98 <HAL_I2C_MspInit+0x88>)
 800ce44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce46:	f003 0302 	and.w	r3, r3, #2
 800ce4a:	613b      	str	r3, [r7, #16]
 800ce4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800ce4e:	23c0      	movs	r3, #192	; 0xc0
 800ce50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ce52:	2312      	movs	r3, #18
 800ce54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ce56:	2301      	movs	r3, #1
 800ce58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce5a:	2303      	movs	r3, #3
 800ce5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ce5e:	2304      	movs	r3, #4
 800ce60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce62:	f107 0314 	add.w	r3, r7, #20
 800ce66:	4619      	mov	r1, r3
 800ce68:	480c      	ldr	r0, [pc, #48]	; (800ce9c <HAL_I2C_MspInit+0x8c>)
 800ce6a:	f7f4 faa3 	bl	80013b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60fb      	str	r3, [r7, #12]
 800ce72:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <HAL_I2C_MspInit+0x88>)
 800ce74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce76:	4a08      	ldr	r2, [pc, #32]	; (800ce98 <HAL_I2C_MspInit+0x88>)
 800ce78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce7c:	6413      	str	r3, [r2, #64]	; 0x40
 800ce7e:	4b06      	ldr	r3, [pc, #24]	; (800ce98 <HAL_I2C_MspInit+0x88>)
 800ce80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce86:	60fb      	str	r3, [r7, #12]
 800ce88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800ce8a:	bf00      	nop
 800ce8c:	3728      	adds	r7, #40	; 0x28
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	40005400 	.word	0x40005400
 800ce98:	40023800 	.word	0x40023800
 800ce9c:	40020400 	.word	0x40020400

0800cea0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a05      	ldr	r2, [pc, #20]	; (800cec4 <HAL_RTC_MspInit+0x24>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d102      	bne.n	800ceb8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ceb2:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <HAL_RTC_MspInit+0x28>)
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ceb8:	bf00      	nop
 800ceba:	370c      	adds	r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr
 800cec4:	40002800 	.word	0x40002800
 800cec8:	42470e3c 	.word	0x42470e3c

0800cecc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b08a      	sub	sp, #40	; 0x28
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ced4:	f107 0314 	add.w	r3, r7, #20
 800ced8:	2200      	movs	r2, #0
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	605a      	str	r2, [r3, #4]
 800cede:	609a      	str	r2, [r3, #8]
 800cee0:	60da      	str	r2, [r3, #12]
 800cee2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a70      	ldr	r2, [pc, #448]	; (800d0ac <HAL_SD_MspInit+0x1e0>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	f040 80da 	bne.w	800d0a4 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800cef0:	2300      	movs	r3, #0
 800cef2:	613b      	str	r3, [r7, #16]
 800cef4:	4b6e      	ldr	r3, [pc, #440]	; (800d0b0 <HAL_SD_MspInit+0x1e4>)
 800cef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cef8:	4a6d      	ldr	r2, [pc, #436]	; (800d0b0 <HAL_SD_MspInit+0x1e4>)
 800cefa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cefe:	6453      	str	r3, [r2, #68]	; 0x44
 800cf00:	4b6b      	ldr	r3, [pc, #428]	; (800d0b0 <HAL_SD_MspInit+0x1e4>)
 800cf02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf08:	613b      	str	r3, [r7, #16]
 800cf0a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	60fb      	str	r3, [r7, #12]
 800cf10:	4b67      	ldr	r3, [pc, #412]	; (800d0b0 <HAL_SD_MspInit+0x1e4>)
 800cf12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf14:	4a66      	ldr	r2, [pc, #408]	; (800d0b0 <HAL_SD_MspInit+0x1e4>)
 800cf16:	f043 0304 	orr.w	r3, r3, #4
 800cf1a:	6313      	str	r3, [r2, #48]	; 0x30
 800cf1c:	4b64      	ldr	r3, [pc, #400]	; (800d0b0 <HAL_SD_MspInit+0x1e4>)
 800cf1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf20:	f003 0304 	and.w	r3, r3, #4
 800cf24:	60fb      	str	r3, [r7, #12]
 800cf26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cf28:	2300      	movs	r3, #0
 800cf2a:	60bb      	str	r3, [r7, #8]
 800cf2c:	4b60      	ldr	r3, [pc, #384]	; (800d0b0 <HAL_SD_MspInit+0x1e4>)
 800cf2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf30:	4a5f      	ldr	r2, [pc, #380]	; (800d0b0 <HAL_SD_MspInit+0x1e4>)
 800cf32:	f043 0308 	orr.w	r3, r3, #8
 800cf36:	6313      	str	r3, [r2, #48]	; 0x30
 800cf38:	4b5d      	ldr	r3, [pc, #372]	; (800d0b0 <HAL_SD_MspInit+0x1e4>)
 800cf3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf3c:	f003 0308 	and.w	r3, r3, #8
 800cf40:	60bb      	str	r3, [r7, #8]
 800cf42:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800cf44:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800cf48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf4a:	2302      	movs	r3, #2
 800cf4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf52:	2303      	movs	r3, #3
 800cf54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800cf56:	230c      	movs	r3, #12
 800cf58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf5a:	f107 0314 	add.w	r3, r7, #20
 800cf5e:	4619      	mov	r1, r3
 800cf60:	4854      	ldr	r0, [pc, #336]	; (800d0b4 <HAL_SD_MspInit+0x1e8>)
 800cf62:	f7f4 fa27 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cf66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cf6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf74:	2303      	movs	r3, #3
 800cf76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800cf78:	230c      	movs	r3, #12
 800cf7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf7c:	f107 0314 	add.w	r3, r7, #20
 800cf80:	4619      	mov	r1, r3
 800cf82:	484c      	ldr	r0, [pc, #304]	; (800d0b4 <HAL_SD_MspInit+0x1e8>)
 800cf84:	f7f4 fa16 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cf88:	2304      	movs	r3, #4
 800cf8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf8c:	2302      	movs	r3, #2
 800cf8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf90:	2301      	movs	r3, #1
 800cf92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf94:	2303      	movs	r3, #3
 800cf96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800cf98:	230c      	movs	r3, #12
 800cf9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cf9c:	f107 0314 	add.w	r3, r7, #20
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	4845      	ldr	r0, [pc, #276]	; (800d0b8 <HAL_SD_MspInit+0x1ec>)
 800cfa4:	f7f4 fa06 	bl	80013b4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800cfa8:	4b44      	ldr	r3, [pc, #272]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cfaa:	4a45      	ldr	r2, [pc, #276]	; (800d0c0 <HAL_SD_MspInit+0x1f4>)
 800cfac:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800cfae:	4b43      	ldr	r3, [pc, #268]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cfb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cfb4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cfb6:	4b41      	ldr	r3, [pc, #260]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cfbc:	4b3f      	ldr	r3, [pc, #252]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cfc2:	4b3e      	ldr	r3, [pc, #248]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cfc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cfc8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800cfca:	4b3c      	ldr	r3, [pc, #240]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cfcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cfd0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cfd2:	4b3a      	ldr	r3, [pc, #232]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cfd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cfd8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800cfda:	4b38      	ldr	r3, [pc, #224]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cfdc:	2220      	movs	r2, #32
 800cfde:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800cfe0:	4b36      	ldr	r3, [pc, #216]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800cfe6:	4b35      	ldr	r3, [pc, #212]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cfe8:	2204      	movs	r2, #4
 800cfea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800cfec:	4b33      	ldr	r3, [pc, #204]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cfee:	2203      	movs	r2, #3
 800cff0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800cff2:	4b32      	ldr	r3, [pc, #200]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cff4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800cff8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800cffa:	4b30      	ldr	r3, [pc, #192]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800cffc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d000:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800d002:	482e      	ldr	r0, [pc, #184]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800d004:	f7f3 fe3e 	bl	8000c84 <HAL_DMA_Init>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d001      	beq.n	800d012 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800d00e:	f7ff fcab 	bl	800c968 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4a29      	ldr	r2, [pc, #164]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800d016:	63da      	str	r2, [r3, #60]	; 0x3c
 800d018:	4a28      	ldr	r2, [pc, #160]	; (800d0bc <HAL_SD_MspInit+0x1f0>)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800d01e:	4b29      	ldr	r3, [pc, #164]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d020:	4a29      	ldr	r2, [pc, #164]	; (800d0c8 <HAL_SD_MspInit+0x1fc>)
 800d022:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800d024:	4b27      	ldr	r3, [pc, #156]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d02a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d02c:	4b25      	ldr	r3, [pc, #148]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d02e:	2240      	movs	r2, #64	; 0x40
 800d030:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d032:	4b24      	ldr	r3, [pc, #144]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d034:	2200      	movs	r2, #0
 800d036:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d038:	4b22      	ldr	r3, [pc, #136]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d03a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d03e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d040:	4b20      	ldr	r3, [pc, #128]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d042:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d046:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d048:	4b1e      	ldr	r3, [pc, #120]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d04a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d04e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800d050:	4b1c      	ldr	r3, [pc, #112]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d052:	2220      	movs	r2, #32
 800d054:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d056:	4b1b      	ldr	r3, [pc, #108]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d058:	2200      	movs	r2, #0
 800d05a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d05c:	4b19      	ldr	r3, [pc, #100]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d05e:	2204      	movs	r2, #4
 800d060:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800d062:	4b18      	ldr	r3, [pc, #96]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d064:	2203      	movs	r2, #3
 800d066:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800d068:	4b16      	ldr	r3, [pc, #88]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d06a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800d06e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800d070:	4b14      	ldr	r3, [pc, #80]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d072:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d076:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800d078:	4812      	ldr	r0, [pc, #72]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d07a:	f7f3 fe03 	bl	8000c84 <HAL_DMA_Init>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800d084:	f7ff fc70 	bl	800c968 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a0e      	ldr	r2, [pc, #56]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d08c:	641a      	str	r2, [r3, #64]	; 0x40
 800d08e:	4a0d      	ldr	r2, [pc, #52]	; (800d0c4 <HAL_SD_MspInit+0x1f8>)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800d094:	2200      	movs	r2, #0
 800d096:	2100      	movs	r1, #0
 800d098:	2031      	movs	r0, #49	; 0x31
 800d09a:	f7f3 fdbc 	bl	8000c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800d09e:	2031      	movs	r0, #49	; 0x31
 800d0a0:	f7f3 fdd5 	bl	8000c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800d0a4:	bf00      	nop
 800d0a6:	3728      	adds	r7, #40	; 0x28
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	40012c00 	.word	0x40012c00
 800d0b0:	40023800 	.word	0x40023800
 800d0b4:	40020800 	.word	0x40020800
 800d0b8:	40020c00 	.word	0x40020c00
 800d0bc:	200028c0 	.word	0x200028c0
 800d0c0:	40026458 	.word	0x40026458
 800d0c4:	20002a54 	.word	0x20002a54
 800d0c8:	400264a0 	.word	0x400264a0

0800d0cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b08a      	sub	sp, #40	; 0x28
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0d4:	f107 0314 	add.w	r3, r7, #20
 800d0d8:	2200      	movs	r2, #0
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	605a      	str	r2, [r3, #4]
 800d0de:	609a      	str	r2, [r3, #8]
 800d0e0:	60da      	str	r2, [r3, #12]
 800d0e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a19      	ldr	r2, [pc, #100]	; (800d150 <HAL_SPI_MspInit+0x84>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d12b      	bne.n	800d146 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	613b      	str	r3, [r7, #16]
 800d0f2:	4b18      	ldr	r3, [pc, #96]	; (800d154 <HAL_SPI_MspInit+0x88>)
 800d0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f6:	4a17      	ldr	r2, [pc, #92]	; (800d154 <HAL_SPI_MspInit+0x88>)
 800d0f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d0fc:	6453      	str	r3, [r2, #68]	; 0x44
 800d0fe:	4b15      	ldr	r3, [pc, #84]	; (800d154 <HAL_SPI_MspInit+0x88>)
 800d100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d106:	613b      	str	r3, [r7, #16]
 800d108:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d10a:	2300      	movs	r3, #0
 800d10c:	60fb      	str	r3, [r7, #12]
 800d10e:	4b11      	ldr	r3, [pc, #68]	; (800d154 <HAL_SPI_MspInit+0x88>)
 800d110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d112:	4a10      	ldr	r2, [pc, #64]	; (800d154 <HAL_SPI_MspInit+0x88>)
 800d114:	f043 0302 	orr.w	r3, r3, #2
 800d118:	6313      	str	r3, [r2, #48]	; 0x30
 800d11a:	4b0e      	ldr	r3, [pc, #56]	; (800d154 <HAL_SPI_MspInit+0x88>)
 800d11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d11e:	f003 0302 	and.w	r3, r3, #2
 800d122:	60fb      	str	r3, [r7, #12]
 800d124:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 800d126:	2338      	movs	r3, #56	; 0x38
 800d128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d12a:	2302      	movs	r3, #2
 800d12c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d132:	2303      	movs	r3, #3
 800d134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d136:	2305      	movs	r3, #5
 800d138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d13a:	f107 0314 	add.w	r3, r7, #20
 800d13e:	4619      	mov	r1, r3
 800d140:	4805      	ldr	r0, [pc, #20]	; (800d158 <HAL_SPI_MspInit+0x8c>)
 800d142:	f7f4 f937 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800d146:	bf00      	nop
 800d148:	3728      	adds	r7, #40	; 0x28
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	40013000 	.word	0x40013000
 800d154:	40023800 	.word	0x40023800
 800d158:	40020400 	.word	0x40020400

0800d15c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b087      	sub	sp, #28
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d16c:	d10e      	bne.n	800d18c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d16e:	2300      	movs	r3, #0
 800d170:	617b      	str	r3, [r7, #20]
 800d172:	4b1d      	ldr	r3, [pc, #116]	; (800d1e8 <HAL_TIM_Base_MspInit+0x8c>)
 800d174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d176:	4a1c      	ldr	r2, [pc, #112]	; (800d1e8 <HAL_TIM_Base_MspInit+0x8c>)
 800d178:	f043 0301 	orr.w	r3, r3, #1
 800d17c:	6413      	str	r3, [r2, #64]	; 0x40
 800d17e:	4b1a      	ldr	r3, [pc, #104]	; (800d1e8 <HAL_TIM_Base_MspInit+0x8c>)
 800d180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d182:	f003 0301 	and.w	r3, r3, #1
 800d186:	617b      	str	r3, [r7, #20]
 800d188:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800d18a:	e026      	b.n	800d1da <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a16      	ldr	r2, [pc, #88]	; (800d1ec <HAL_TIM_Base_MspInit+0x90>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d10e      	bne.n	800d1b4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d196:	2300      	movs	r3, #0
 800d198:	613b      	str	r3, [r7, #16]
 800d19a:	4b13      	ldr	r3, [pc, #76]	; (800d1e8 <HAL_TIM_Base_MspInit+0x8c>)
 800d19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d19e:	4a12      	ldr	r2, [pc, #72]	; (800d1e8 <HAL_TIM_Base_MspInit+0x8c>)
 800d1a0:	f043 0302 	orr.w	r3, r3, #2
 800d1a4:	6413      	str	r3, [r2, #64]	; 0x40
 800d1a6:	4b10      	ldr	r3, [pc, #64]	; (800d1e8 <HAL_TIM_Base_MspInit+0x8c>)
 800d1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1aa:	f003 0302 	and.w	r3, r3, #2
 800d1ae:	613b      	str	r3, [r7, #16]
 800d1b0:	693b      	ldr	r3, [r7, #16]
}
 800d1b2:	e012      	b.n	800d1da <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a0d      	ldr	r2, [pc, #52]	; (800d1f0 <HAL_TIM_Base_MspInit+0x94>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d10d      	bne.n	800d1da <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800d1be:	2300      	movs	r3, #0
 800d1c0:	60fb      	str	r3, [r7, #12]
 800d1c2:	4b09      	ldr	r3, [pc, #36]	; (800d1e8 <HAL_TIM_Base_MspInit+0x8c>)
 800d1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1c6:	4a08      	ldr	r2, [pc, #32]	; (800d1e8 <HAL_TIM_Base_MspInit+0x8c>)
 800d1c8:	f043 0308 	orr.w	r3, r3, #8
 800d1cc:	6413      	str	r3, [r2, #64]	; 0x40
 800d1ce:	4b06      	ldr	r3, [pc, #24]	; (800d1e8 <HAL_TIM_Base_MspInit+0x8c>)
 800d1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d2:	f003 0308 	and.w	r3, r3, #8
 800d1d6:	60fb      	str	r3, [r7, #12]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
}
 800d1da:	bf00      	nop
 800d1dc:	371c      	adds	r7, #28
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr
 800d1e6:	bf00      	nop
 800d1e8:	40023800 	.word	0x40023800
 800d1ec:	40000400 	.word	0x40000400
 800d1f0:	40000c00 	.word	0x40000c00

0800d1f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08a      	sub	sp, #40	; 0x28
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1fc:	f107 0314 	add.w	r3, r7, #20
 800d200:	2200      	movs	r2, #0
 800d202:	601a      	str	r2, [r3, #0]
 800d204:	605a      	str	r2, [r3, #4]
 800d206:	609a      	str	r2, [r3, #8]
 800d208:	60da      	str	r2, [r3, #12]
 800d20a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a24      	ldr	r2, [pc, #144]	; (800d2a4 <HAL_TIM_MspPostInit+0xb0>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d11e      	bne.n	800d254 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d216:	2300      	movs	r3, #0
 800d218:	613b      	str	r3, [r7, #16]
 800d21a:	4b23      	ldr	r3, [pc, #140]	; (800d2a8 <HAL_TIM_MspPostInit+0xb4>)
 800d21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d21e:	4a22      	ldr	r2, [pc, #136]	; (800d2a8 <HAL_TIM_MspPostInit+0xb4>)
 800d220:	f043 0302 	orr.w	r3, r3, #2
 800d224:	6313      	str	r3, [r2, #48]	; 0x30
 800d226:	4b20      	ldr	r3, [pc, #128]	; (800d2a8 <HAL_TIM_MspPostInit+0xb4>)
 800d228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d22a:	f003 0302 	and.w	r3, r3, #2
 800d22e:	613b      	str	r3, [r7, #16]
 800d230:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P7B1_Pin;
 800d232:	2303      	movs	r3, #3
 800d234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d236:	2302      	movs	r3, #2
 800d238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d23e:	2300      	movs	r3, #0
 800d240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d242:	2302      	movs	r3, #2
 800d244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d246:	f107 0314 	add.w	r3, r7, #20
 800d24a:	4619      	mov	r1, r3
 800d24c:	4817      	ldr	r0, [pc, #92]	; (800d2ac <HAL_TIM_MspPostInit+0xb8>)
 800d24e:	f7f4 f8b1 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800d252:	e022      	b.n	800d29a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a15      	ldr	r2, [pc, #84]	; (800d2b0 <HAL_TIM_MspPostInit+0xbc>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d11d      	bne.n	800d29a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d25e:	2300      	movs	r3, #0
 800d260:	60fb      	str	r3, [r7, #12]
 800d262:	4b11      	ldr	r3, [pc, #68]	; (800d2a8 <HAL_TIM_MspPostInit+0xb4>)
 800d264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d266:	4a10      	ldr	r2, [pc, #64]	; (800d2a8 <HAL_TIM_MspPostInit+0xb4>)
 800d268:	f043 0301 	orr.w	r3, r3, #1
 800d26c:	6313      	str	r3, [r2, #48]	; 0x30
 800d26e:	4b0e      	ldr	r3, [pc, #56]	; (800d2a8 <HAL_TIM_MspPostInit+0xb4>)
 800d270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d272:	f003 0301 	and.w	r3, r3, #1
 800d276:	60fb      	str	r3, [r7, #12]
 800d278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 800d27a:	230a      	movs	r3, #10
 800d27c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d27e:	2302      	movs	r3, #2
 800d280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d282:	2300      	movs	r3, #0
 800d284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d286:	2300      	movs	r3, #0
 800d288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800d28a:	2302      	movs	r3, #2
 800d28c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d28e:	f107 0314 	add.w	r3, r7, #20
 800d292:	4619      	mov	r1, r3
 800d294:	4807      	ldr	r0, [pc, #28]	; (800d2b4 <HAL_TIM_MspPostInit+0xc0>)
 800d296:	f7f4 f88d 	bl	80013b4 <HAL_GPIO_Init>
}
 800d29a:	bf00      	nop
 800d29c:	3728      	adds	r7, #40	; 0x28
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	40000400 	.word	0x40000400
 800d2a8:	40023800 	.word	0x40023800
 800d2ac:	40020400 	.word	0x40020400
 800d2b0:	40000c00 	.word	0x40000c00
 800d2b4:	40020000 	.word	0x40020000

0800d2b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b08a      	sub	sp, #40	; 0x28
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2c0:	f107 0314 	add.w	r3, r7, #20
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	601a      	str	r2, [r3, #0]
 800d2c8:	605a      	str	r2, [r3, #4]
 800d2ca:	609a      	str	r2, [r3, #8]
 800d2cc:	60da      	str	r2, [r3, #12]
 800d2ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a19      	ldr	r2, [pc, #100]	; (800d33c <HAL_UART_MspInit+0x84>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d12c      	bne.n	800d334 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800d2da:	2300      	movs	r3, #0
 800d2dc:	613b      	str	r3, [r7, #16]
 800d2de:	4b18      	ldr	r3, [pc, #96]	; (800d340 <HAL_UART_MspInit+0x88>)
 800d2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e2:	4a17      	ldr	r2, [pc, #92]	; (800d340 <HAL_UART_MspInit+0x88>)
 800d2e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d2e8:	6413      	str	r3, [r2, #64]	; 0x40
 800d2ea:	4b15      	ldr	r3, [pc, #84]	; (800d340 <HAL_UART_MspInit+0x88>)
 800d2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d2f2:	613b      	str	r3, [r7, #16]
 800d2f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60fb      	str	r3, [r7, #12]
 800d2fa:	4b11      	ldr	r3, [pc, #68]	; (800d340 <HAL_UART_MspInit+0x88>)
 800d2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2fe:	4a10      	ldr	r2, [pc, #64]	; (800d340 <HAL_UART_MspInit+0x88>)
 800d300:	f043 0302 	orr.w	r3, r3, #2
 800d304:	6313      	str	r3, [r2, #48]	; 0x30
 800d306:	4b0e      	ldr	r3, [pc, #56]	; (800d340 <HAL_UART_MspInit+0x88>)
 800d308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d30a:	f003 0302 	and.w	r3, r3, #2
 800d30e:	60fb      	str	r3, [r7, #12]
 800d310:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800d312:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d318:	2302      	movs	r3, #2
 800d31a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d31c:	2301      	movs	r3, #1
 800d31e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d320:	2303      	movs	r3, #3
 800d322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d324:	2307      	movs	r3, #7
 800d326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d328:	f107 0314 	add.w	r3, r7, #20
 800d32c:	4619      	mov	r1, r3
 800d32e:	4805      	ldr	r0, [pc, #20]	; (800d344 <HAL_UART_MspInit+0x8c>)
 800d330:	f7f4 f840 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d334:	bf00      	nop
 800d336:	3728      	adds	r7, #40	; 0x28
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	40004800 	.word	0x40004800
 800d340:	40023800 	.word	0x40023800
 800d344:	40020400 	.word	0x40020400

0800d348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d348:	b480      	push	{r7}
 800d34a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d34c:	bf00      	nop
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d356:	b480      	push	{r7}
 800d358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d35a:	e7fe      	b.n	800d35a <HardFault_Handler+0x4>

0800d35c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d35c:	b480      	push	{r7}
 800d35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d360:	e7fe      	b.n	800d360 <MemManage_Handler+0x4>

0800d362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d362:	b480      	push	{r7}
 800d364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d366:	e7fe      	b.n	800d366 <BusFault_Handler+0x4>

0800d368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d368:	b480      	push	{r7}
 800d36a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d36c:	e7fe      	b.n	800d36c <UsageFault_Handler+0x4>

0800d36e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d36e:	b480      	push	{r7}
 800d370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d372:	bf00      	nop
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d37c:	b480      	push	{r7}
 800d37e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d380:	bf00      	nop
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d38a:	b480      	push	{r7}
 800d38c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d38e:	bf00      	nop
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d39c:	f7f3 fb1e 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d3a0:	bf00      	nop
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800d3a8:	4802      	ldr	r0, [pc, #8]	; (800d3b4 <SDIO_IRQHandler+0x10>)
 800d3aa:	f7f6 fd3d 	bl	8003e28 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800d3ae:	bf00      	nop
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20002ab4 	.word	0x20002ab4

0800d3b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800d3bc:	4802      	ldr	r0, [pc, #8]	; (800d3c8 <DMA2_Stream3_IRQHandler+0x10>)
 800d3be:	f7f3 fd91 	bl	8000ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800d3c2:	bf00      	nop
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	200028c0 	.word	0x200028c0

0800d3cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800d3d0:	4802      	ldr	r0, [pc, #8]	; (800d3dc <OTG_FS_IRQHandler+0x10>)
 800d3d2:	f7f4 fc33 	bl	8001c3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800d3d6:	bf00      	nop
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	20003e6c 	.word	0x20003e6c

0800d3e0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800d3e4:	4802      	ldr	r0, [pc, #8]	; (800d3f0 <DMA2_Stream6_IRQHandler+0x10>)
 800d3e6:	f7f3 fd7d 	bl	8000ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800d3ea:	bf00      	nop
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20002a54 	.word	0x20002a54

0800d3f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d3fc:	4b11      	ldr	r3, [pc, #68]	; (800d444 <_sbrk+0x50>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d102      	bne.n	800d40a <_sbrk+0x16>
		heap_end = &end;
 800d404:	4b0f      	ldr	r3, [pc, #60]	; (800d444 <_sbrk+0x50>)
 800d406:	4a10      	ldr	r2, [pc, #64]	; (800d448 <_sbrk+0x54>)
 800d408:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d40a:	4b0e      	ldr	r3, [pc, #56]	; (800d444 <_sbrk+0x50>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d410:	4b0c      	ldr	r3, [pc, #48]	; (800d444 <_sbrk+0x50>)
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4413      	add	r3, r2
 800d418:	466a      	mov	r2, sp
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d907      	bls.n	800d42e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d41e:	f000 fd9f 	bl	800df60 <__errno>
 800d422:	4602      	mov	r2, r0
 800d424:	230c      	movs	r3, #12
 800d426:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d428:	f04f 33ff 	mov.w	r3, #4294967295
 800d42c:	e006      	b.n	800d43c <_sbrk+0x48>
	}

	heap_end += incr;
 800d42e:	4b05      	ldr	r3, [pc, #20]	; (800d444 <_sbrk+0x50>)
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4413      	add	r3, r2
 800d436:	4a03      	ldr	r2, [pc, #12]	; (800d444 <_sbrk+0x50>)
 800d438:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d43a:	68fb      	ldr	r3, [r7, #12]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	20000844 	.word	0x20000844
 800d448:	20004478 	.word	0x20004478

0800d44c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d44c:	b480      	push	{r7}
 800d44e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d450:	4b16      	ldr	r3, [pc, #88]	; (800d4ac <SystemInit+0x60>)
 800d452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d456:	4a15      	ldr	r2, [pc, #84]	; (800d4ac <SystemInit+0x60>)
 800d458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d45c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d460:	4b13      	ldr	r3, [pc, #76]	; (800d4b0 <SystemInit+0x64>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a12      	ldr	r2, [pc, #72]	; (800d4b0 <SystemInit+0x64>)
 800d466:	f043 0301 	orr.w	r3, r3, #1
 800d46a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d46c:	4b10      	ldr	r3, [pc, #64]	; (800d4b0 <SystemInit+0x64>)
 800d46e:	2200      	movs	r2, #0
 800d470:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d472:	4b0f      	ldr	r3, [pc, #60]	; (800d4b0 <SystemInit+0x64>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a0e      	ldr	r2, [pc, #56]	; (800d4b0 <SystemInit+0x64>)
 800d478:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800d47c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d480:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d482:	4b0b      	ldr	r3, [pc, #44]	; (800d4b0 <SystemInit+0x64>)
 800d484:	4a0b      	ldr	r2, [pc, #44]	; (800d4b4 <SystemInit+0x68>)
 800d486:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d488:	4b09      	ldr	r3, [pc, #36]	; (800d4b0 <SystemInit+0x64>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a08      	ldr	r2, [pc, #32]	; (800d4b0 <SystemInit+0x64>)
 800d48e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d492:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d494:	4b06      	ldr	r3, [pc, #24]	; (800d4b0 <SystemInit+0x64>)
 800d496:	2200      	movs	r2, #0
 800d498:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d49a:	4b04      	ldr	r3, [pc, #16]	; (800d4ac <SystemInit+0x60>)
 800d49c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d4a0:	609a      	str	r2, [r3, #8]
#endif
}
 800d4a2:	bf00      	nop
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	e000ed00 	.word	0xe000ed00
 800d4b0:	40023800 	.word	0x40023800
 800d4b4:	24003010 	.word	0x24003010

0800d4b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d4bc:	2200      	movs	r2, #0
 800d4be:	4912      	ldr	r1, [pc, #72]	; (800d508 <MX_USB_DEVICE_Init+0x50>)
 800d4c0:	4812      	ldr	r0, [pc, #72]	; (800d50c <MX_USB_DEVICE_Init+0x54>)
 800d4c2:	f7fb f86f 	bl	80085a4 <USBD_Init>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d4cc:	f7ff fa4c 	bl	800c968 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d4d0:	490f      	ldr	r1, [pc, #60]	; (800d510 <MX_USB_DEVICE_Init+0x58>)
 800d4d2:	480e      	ldr	r0, [pc, #56]	; (800d50c <MX_USB_DEVICE_Init+0x54>)
 800d4d4:	f7fb f891 	bl	80085fa <USBD_RegisterClass>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d001      	beq.n	800d4e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d4de:	f7ff fa43 	bl	800c968 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d4e2:	490c      	ldr	r1, [pc, #48]	; (800d514 <MX_USB_DEVICE_Init+0x5c>)
 800d4e4:	4809      	ldr	r0, [pc, #36]	; (800d50c <MX_USB_DEVICE_Init+0x54>)
 800d4e6:	f7fa ffbf 	bl	8008468 <USBD_CDC_RegisterInterface>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d001      	beq.n	800d4f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d4f0:	f7ff fa3a 	bl	800c968 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d4f4:	4805      	ldr	r0, [pc, #20]	; (800d50c <MX_USB_DEVICE_Init+0x54>)
 800d4f6:	f7fb f89a 	bl	800862e <USBD_Start>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d001      	beq.n	800d504 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d500:	f7ff fa32 	bl	800c968 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d504:	bf00      	nop
 800d506:	bd80      	pop	{r7, pc}
 800d508:	2000012c 	.word	0x2000012c
 800d50c:	20002bd0 	.word	0x20002bd0
 800d510:	20000014 	.word	0x20000014
 800d514:	2000011c 	.word	0x2000011c

0800d518 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d51c:	2200      	movs	r2, #0
 800d51e:	4905      	ldr	r1, [pc, #20]	; (800d534 <CDC_Init_FS+0x1c>)
 800d520:	4805      	ldr	r0, [pc, #20]	; (800d538 <CDC_Init_FS+0x20>)
 800d522:	f7fa ffb8 	bl	8008496 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d526:	4905      	ldr	r1, [pc, #20]	; (800d53c <CDC_Init_FS+0x24>)
 800d528:	4803      	ldr	r0, [pc, #12]	; (800d538 <CDC_Init_FS+0x20>)
 800d52a:	f7fa ffce 	bl	80084ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d52e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d530:	4618      	mov	r0, r3
 800d532:	bd80      	pop	{r7, pc}
 800d534:	2000366c 	.word	0x2000366c
 800d538:	20002bd0 	.word	0x20002bd0
 800d53c:	20002e6c 	.word	0x20002e6c

0800d540 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d540:	b480      	push	{r7}
 800d542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d544:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d546:	4618      	mov	r0, r3
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	4603      	mov	r3, r0
 800d558:	6039      	str	r1, [r7, #0]
 800d55a:	71fb      	strb	r3, [r7, #7]
 800d55c:	4613      	mov	r3, r2
 800d55e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800d560:	f107 0308 	add.w	r3, r7, #8
 800d564:	2200      	movs	r2, #0
 800d566:	601a      	str	r2, [r3, #0]
 800d568:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800d56c:	79fb      	ldrb	r3, [r7, #7]
 800d56e:	2b23      	cmp	r3, #35	; 0x23
 800d570:	d87c      	bhi.n	800d66c <CDC_Control_FS+0x11c>
 800d572:	a201      	add	r2, pc, #4	; (adr r2, 800d578 <CDC_Control_FS+0x28>)
 800d574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d578:	0800d66d 	.word	0x0800d66d
 800d57c:	0800d66d 	.word	0x0800d66d
 800d580:	0800d66d 	.word	0x0800d66d
 800d584:	0800d66d 	.word	0x0800d66d
 800d588:	0800d66d 	.word	0x0800d66d
 800d58c:	0800d66d 	.word	0x0800d66d
 800d590:	0800d66d 	.word	0x0800d66d
 800d594:	0800d66d 	.word	0x0800d66d
 800d598:	0800d66d 	.word	0x0800d66d
 800d59c:	0800d66d 	.word	0x0800d66d
 800d5a0:	0800d66d 	.word	0x0800d66d
 800d5a4:	0800d66d 	.word	0x0800d66d
 800d5a8:	0800d66d 	.word	0x0800d66d
 800d5ac:	0800d66d 	.word	0x0800d66d
 800d5b0:	0800d66d 	.word	0x0800d66d
 800d5b4:	0800d66d 	.word	0x0800d66d
 800d5b8:	0800d66d 	.word	0x0800d66d
 800d5bc:	0800d66d 	.word	0x0800d66d
 800d5c0:	0800d66d 	.word	0x0800d66d
 800d5c4:	0800d66d 	.word	0x0800d66d
 800d5c8:	0800d66d 	.word	0x0800d66d
 800d5cc:	0800d66d 	.word	0x0800d66d
 800d5d0:	0800d66d 	.word	0x0800d66d
 800d5d4:	0800d66d 	.word	0x0800d66d
 800d5d8:	0800d66d 	.word	0x0800d66d
 800d5dc:	0800d66d 	.word	0x0800d66d
 800d5e0:	0800d66d 	.word	0x0800d66d
 800d5e4:	0800d66d 	.word	0x0800d66d
 800d5e8:	0800d66d 	.word	0x0800d66d
 800d5ec:	0800d66d 	.word	0x0800d66d
 800d5f0:	0800d66d 	.word	0x0800d66d
 800d5f4:	0800d66d 	.word	0x0800d66d
 800d5f8:	0800d609 	.word	0x0800d609
 800d5fc:	0800d635 	.word	0x0800d635
 800d600:	0800d66d 	.word	0x0800d66d
 800d604:	0800d66d 	.word	0x0800d66d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	785b      	ldrb	r3, [r3, #1]
 800d612:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	789b      	ldrb	r3, [r3, #2]
 800d618:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	78db      	ldrb	r3, [r3, #3]
 800d61e:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	791b      	ldrb	r3, [r3, #4]
 800d624:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	795b      	ldrb	r3, [r3, #5]
 800d62a:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	799b      	ldrb	r3, [r3, #6]
 800d630:	73bb      	strb	r3, [r7, #14]
        	break;
 800d632:	e01c      	b.n	800d66e <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 800d634:	7a3a      	ldrb	r2, [r7, #8]
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	3301      	adds	r3, #1
 800d63e:	7a7a      	ldrb	r2, [r7, #9]
 800d640:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	3302      	adds	r3, #2
 800d646:	7aba      	ldrb	r2, [r7, #10]
 800d648:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	3303      	adds	r3, #3
 800d64e:	7afa      	ldrb	r2, [r7, #11]
 800d650:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	3304      	adds	r3, #4
 800d656:	7b3a      	ldrb	r2, [r7, #12]
 800d658:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	3305      	adds	r3, #5
 800d65e:	7b7a      	ldrb	r2, [r7, #13]
 800d660:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	3306      	adds	r3, #6
 800d666:	7bba      	ldrb	r2, [r7, #14]
 800d668:	701a      	strb	r2, [r3, #0]
        	break;
 800d66a:	e000      	b.n	800d66e <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d66c:	bf00      	nop
  }

  return (USBD_OK);
 800d66e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d670:	4618      	mov	r0, r3
 800d672:	3714      	adds	r7, #20
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d686:	6879      	ldr	r1, [r7, #4]
 800d688:	4805      	ldr	r0, [pc, #20]	; (800d6a0 <CDC_Receive_FS+0x24>)
 800d68a:	f7fa ff1e 	bl	80084ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d68e:	4804      	ldr	r0, [pc, #16]	; (800d6a0 <CDC_Receive_FS+0x24>)
 800d690:	f7fa ff5e 	bl	8008550 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d694:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d696:	4618      	mov	r0, r3
 800d698:	3708      	adds	r7, #8
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	20002bd0 	.word	0x20002bd0

0800d6a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d6b4:	4b0d      	ldr	r3, [pc, #52]	; (800d6ec <CDC_Transmit_FS+0x48>)
 800d6b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d6ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d001      	beq.n	800d6ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e00b      	b.n	800d6e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d6ca:	887b      	ldrh	r3, [r7, #2]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	6879      	ldr	r1, [r7, #4]
 800d6d0:	4806      	ldr	r0, [pc, #24]	; (800d6ec <CDC_Transmit_FS+0x48>)
 800d6d2:	f7fa fee0 	bl	8008496 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d6d6:	4805      	ldr	r0, [pc, #20]	; (800d6ec <CDC_Transmit_FS+0x48>)
 800d6d8:	f7fa ff0b 	bl	80084f2 <USBD_CDC_TransmitPacket>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3710      	adds	r7, #16
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20002bd0 	.word	0x20002bd0

0800d6f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08a      	sub	sp, #40	; 0x28
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6f8:	f107 0314 	add.w	r3, r7, #20
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	605a      	str	r2, [r3, #4]
 800d702:	609a      	str	r2, [r3, #8]
 800d704:	60da      	str	r2, [r3, #12]
 800d706:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d710:	d13a      	bne.n	800d788 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d712:	2300      	movs	r3, #0
 800d714:	613b      	str	r3, [r7, #16]
 800d716:	4b1e      	ldr	r3, [pc, #120]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d71a:	4a1d      	ldr	r2, [pc, #116]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d71c:	f043 0301 	orr.w	r3, r3, #1
 800d720:	6313      	str	r3, [r2, #48]	; 0x30
 800d722:	4b1b      	ldr	r3, [pc, #108]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	613b      	str	r3, [r7, #16]
 800d72c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800d72e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d734:	2302      	movs	r3, #2
 800d736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d738:	2300      	movs	r3, #0
 800d73a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d73c:	2303      	movs	r3, #3
 800d73e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d740:	230a      	movs	r3, #10
 800d742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d744:	f107 0314 	add.w	r3, r7, #20
 800d748:	4619      	mov	r1, r3
 800d74a:	4812      	ldr	r0, [pc, #72]	; (800d794 <HAL_PCD_MspInit+0xa4>)
 800d74c:	f7f3 fe32 	bl	80013b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d750:	4b0f      	ldr	r3, [pc, #60]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d754:	4a0e      	ldr	r2, [pc, #56]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d75a:	6353      	str	r3, [r2, #52]	; 0x34
 800d75c:	2300      	movs	r3, #0
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	4b0b      	ldr	r3, [pc, #44]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d764:	4a0a      	ldr	r2, [pc, #40]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d76a:	6453      	str	r3, [r2, #68]	; 0x44
 800d76c:	4b08      	ldr	r3, [pc, #32]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d774:	60fb      	str	r3, [r7, #12]
 800d776:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d778:	2200      	movs	r2, #0
 800d77a:	2100      	movs	r1, #0
 800d77c:	2043      	movs	r0, #67	; 0x43
 800d77e:	f7f3 fa4a 	bl	8000c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d782:	2043      	movs	r0, #67	; 0x43
 800d784:	f7f3 fa63 	bl	8000c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d788:	bf00      	nop
 800d78a:	3728      	adds	r7, #40	; 0x28
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	40023800 	.word	0x40023800
 800d794:	40020000 	.word	0x40020000

0800d798 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	f7fa ff86 	bl	80086c0 <USBD_LL_SetupStage>
}
 800d7b4:	bf00      	nop
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d7ce:	78fa      	ldrb	r2, [r7, #3]
 800d7d0:	6879      	ldr	r1, [r7, #4]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	00db      	lsls	r3, r3, #3
 800d7d6:	1a9b      	subs	r3, r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	440b      	add	r3, r1
 800d7dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	78fb      	ldrb	r3, [r7, #3]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	f7fa ffb6 	bl	8008756 <USBD_LL_DataOutStage>
}
 800d7ea:	bf00      	nop
 800d7ec:	3708      	adds	r7, #8
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b082      	sub	sp, #8
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d804:	78fa      	ldrb	r2, [r7, #3]
 800d806:	6879      	ldr	r1, [r7, #4]
 800d808:	4613      	mov	r3, r2
 800d80a:	00db      	lsls	r3, r3, #3
 800d80c:	1a9b      	subs	r3, r3, r2
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	440b      	add	r3, r1
 800d812:	3348      	adds	r3, #72	; 0x48
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	78fb      	ldrb	r3, [r7, #3]
 800d818:	4619      	mov	r1, r3
 800d81a:	f7fb f80d 	bl	8008838 <USBD_LL_DataInStage>
}
 800d81e:	bf00      	nop
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b082      	sub	sp, #8
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d834:	4618      	mov	r0, r3
 800d836:	f7fb f91b 	bl	8008a70 <USBD_LL_SOF>
}
 800d83a:	bf00      	nop
 800d83c:	3708      	adds	r7, #8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d842:	b580      	push	{r7, lr}
 800d844:	b084      	sub	sp, #16
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d84a:	2301      	movs	r3, #1
 800d84c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d102      	bne.n	800d85c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d856:	2300      	movs	r3, #0
 800d858:	73fb      	strb	r3, [r7, #15]
 800d85a:	e008      	b.n	800d86e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	2b02      	cmp	r3, #2
 800d862:	d102      	bne.n	800d86a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d864:	2301      	movs	r3, #1
 800d866:	73fb      	strb	r3, [r7, #15]
 800d868:	e001      	b.n	800d86e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d86a:	f7ff f87d 	bl	800c968 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d874:	7bfa      	ldrb	r2, [r7, #15]
 800d876:	4611      	mov	r1, r2
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fb f8c3 	bl	8008a04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d884:	4618      	mov	r0, r3
 800d886:	f7fb f87c 	bl	8008982 <USBD_LL_Reset>
}
 800d88a:	bf00      	nop
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
	...

0800d894 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fb f8be 	bl	8008a24 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	6812      	ldr	r2, [r2, #0]
 800d8b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d8ba:	f043 0301 	orr.w	r3, r3, #1
 800d8be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6a1b      	ldr	r3, [r3, #32]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d005      	beq.n	800d8d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8c8:	4b04      	ldr	r3, [pc, #16]	; (800d8dc <HAL_PCD_SuspendCallback+0x48>)
 800d8ca:	691b      	ldr	r3, [r3, #16]
 800d8cc:	4a03      	ldr	r2, [pc, #12]	; (800d8dc <HAL_PCD_SuspendCallback+0x48>)
 800d8ce:	f043 0306 	orr.w	r3, r3, #6
 800d8d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d8d4:	bf00      	nop
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	e000ed00 	.word	0xe000ed00

0800d8e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fb f8ad 	bl	8008a4e <USBD_LL_Resume>
}
 800d8f4:	bf00      	nop
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	460b      	mov	r3, r1
 800d906:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d90e:	78fa      	ldrb	r2, [r7, #3]
 800d910:	4611      	mov	r1, r2
 800d912:	4618      	mov	r0, r3
 800d914:	f7fb f8d3 	bl	8008abe <USBD_LL_IsoOUTIncomplete>
}
 800d918:	bf00      	nop
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d932:	78fa      	ldrb	r2, [r7, #3]
 800d934:	4611      	mov	r1, r2
 800d936:	4618      	mov	r0, r3
 800d938:	f7fb f8b4 	bl	8008aa4 <USBD_LL_IsoINIncomplete>
}
 800d93c:	bf00      	nop
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d952:	4618      	mov	r0, r3
 800d954:	f7fb f8c0 	bl	8008ad8 <USBD_LL_DevConnected>
}
 800d958:	bf00      	nop
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fb f8bd 	bl	8008aee <USBD_LL_DevDisconnected>
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d13c      	bne.n	800da06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d98c:	4a20      	ldr	r2, [pc, #128]	; (800da10 <USBD_LL_Init+0x94>)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4a1e      	ldr	r2, [pc, #120]	; (800da10 <USBD_LL_Init+0x94>)
 800d998:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d99c:	4b1c      	ldr	r3, [pc, #112]	; (800da10 <USBD_LL_Init+0x94>)
 800d99e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d9a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d9a4:	4b1a      	ldr	r3, [pc, #104]	; (800da10 <USBD_LL_Init+0x94>)
 800d9a6:	2204      	movs	r2, #4
 800d9a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d9aa:	4b19      	ldr	r3, [pc, #100]	; (800da10 <USBD_LL_Init+0x94>)
 800d9ac:	2202      	movs	r2, #2
 800d9ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d9b0:	4b17      	ldr	r3, [pc, #92]	; (800da10 <USBD_LL_Init+0x94>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d9b6:	4b16      	ldr	r3, [pc, #88]	; (800da10 <USBD_LL_Init+0x94>)
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d9bc:	4b14      	ldr	r3, [pc, #80]	; (800da10 <USBD_LL_Init+0x94>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d9c2:	4b13      	ldr	r3, [pc, #76]	; (800da10 <USBD_LL_Init+0x94>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d9c8:	4b11      	ldr	r3, [pc, #68]	; (800da10 <USBD_LL_Init+0x94>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d9ce:	4b10      	ldr	r3, [pc, #64]	; (800da10 <USBD_LL_Init+0x94>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d9d4:	4b0e      	ldr	r3, [pc, #56]	; (800da10 <USBD_LL_Init+0x94>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d9da:	480d      	ldr	r0, [pc, #52]	; (800da10 <USBD_LL_Init+0x94>)
 800d9dc:	f7f3 ffde 	bl	800199c <HAL_PCD_Init>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d001      	beq.n	800d9ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d9e6:	f7fe ffbf 	bl	800c968 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d9ea:	2180      	movs	r1, #128	; 0x80
 800d9ec:	4808      	ldr	r0, [pc, #32]	; (800da10 <USBD_LL_Init+0x94>)
 800d9ee:	f7f5 f942 	bl	8002c76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d9f2:	2240      	movs	r2, #64	; 0x40
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	4806      	ldr	r0, [pc, #24]	; (800da10 <USBD_LL_Init+0x94>)
 800d9f8:	f7f5 f8f6 	bl	8002be8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d9fc:	2280      	movs	r2, #128	; 0x80
 800d9fe:	2101      	movs	r1, #1
 800da00:	4803      	ldr	r0, [pc, #12]	; (800da10 <USBD_LL_Init+0x94>)
 800da02:	f7f5 f8f1 	bl	8002be8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	20003e6c 	.word	0x20003e6c

0800da14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da20:	2300      	movs	r3, #0
 800da22:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7f4 f8d3 	bl	8001bd6 <HAL_PCD_Start>
 800da30:	4603      	mov	r3, r0
 800da32:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800da34:	7bfb      	ldrb	r3, [r7, #15]
 800da36:	4618      	mov	r0, r3
 800da38:	f000 f92e 	bl	800dc98 <USBD_Get_USB_Status>
 800da3c:	4603      	mov	r3, r0
 800da3e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800da40:	7bbb      	ldrb	r3, [r7, #14]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b084      	sub	sp, #16
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
 800da52:	4608      	mov	r0, r1
 800da54:	4611      	mov	r1, r2
 800da56:	461a      	mov	r2, r3
 800da58:	4603      	mov	r3, r0
 800da5a:	70fb      	strb	r3, [r7, #3]
 800da5c:	460b      	mov	r3, r1
 800da5e:	70bb      	strb	r3, [r7, #2]
 800da60:	4613      	mov	r3, r2
 800da62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da64:	2300      	movs	r3, #0
 800da66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800da72:	78bb      	ldrb	r3, [r7, #2]
 800da74:	883a      	ldrh	r2, [r7, #0]
 800da76:	78f9      	ldrb	r1, [r7, #3]
 800da78:	f7f4 fca8 	bl	80023cc <HAL_PCD_EP_Open>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da80:	7bfb      	ldrb	r3, [r7, #15]
 800da82:	4618      	mov	r0, r3
 800da84:	f000 f908 	bl	800dc98 <USBD_Get_USB_Status>
 800da88:	4603      	mov	r3, r0
 800da8a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800da8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b084      	sub	sp, #16
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	460b      	mov	r3, r1
 800daa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daa2:	2300      	movs	r3, #0
 800daa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daa6:	2300      	movs	r3, #0
 800daa8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dab0:	78fa      	ldrb	r2, [r7, #3]
 800dab2:	4611      	mov	r1, r2
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7f4 fcf1 	bl	800249c <HAL_PCD_EP_Close>
 800daba:	4603      	mov	r3, r0
 800dabc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800dabe:	7bfb      	ldrb	r3, [r7, #15]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f000 f8e9 	bl	800dc98 <USBD_Get_USB_Status>
 800dac6:	4603      	mov	r3, r0
 800dac8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800daca:	7bbb      	ldrb	r3, [r7, #14]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	460b      	mov	r3, r1
 800dade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dae0:	2300      	movs	r3, #0
 800dae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800daee:	78fa      	ldrb	r2, [r7, #3]
 800daf0:	4611      	mov	r1, r2
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7f4 fdc9 	bl	800268a <HAL_PCD_EP_SetStall>
 800daf8:	4603      	mov	r3, r0
 800dafa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dafc:	7bfb      	ldrb	r3, [r7, #15]
 800dafe:	4618      	mov	r0, r3
 800db00:	f000 f8ca 	bl	800dc98 <USBD_Get_USB_Status>
 800db04:	4603      	mov	r3, r0
 800db06:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800db08:	7bbb      	ldrb	r3, [r7, #14]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b084      	sub	sp, #16
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	460b      	mov	r3, r1
 800db1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db1e:	2300      	movs	r3, #0
 800db20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800db2c:	78fa      	ldrb	r2, [r7, #3]
 800db2e:	4611      	mov	r1, r2
 800db30:	4618      	mov	r0, r3
 800db32:	f7f4 fe0e 	bl	8002752 <HAL_PCD_EP_ClrStall>
 800db36:	4603      	mov	r3, r0
 800db38:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800db3a:	7bfb      	ldrb	r3, [r7, #15]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f000 f8ab 	bl	800dc98 <USBD_Get_USB_Status>
 800db42:	4603      	mov	r3, r0
 800db44:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800db46:	7bbb      	ldrb	r3, [r7, #14]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db50:	b480      	push	{r7}
 800db52:	b085      	sub	sp, #20
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	460b      	mov	r3, r1
 800db5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800db62:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800db64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	da0b      	bge.n	800db84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800db6c:	78fb      	ldrb	r3, [r7, #3]
 800db6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db72:	68f9      	ldr	r1, [r7, #12]
 800db74:	4613      	mov	r3, r2
 800db76:	00db      	lsls	r3, r3, #3
 800db78:	1a9b      	subs	r3, r3, r2
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	440b      	add	r3, r1
 800db7e:	333e      	adds	r3, #62	; 0x3e
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	e00b      	b.n	800db9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800db84:	78fb      	ldrb	r3, [r7, #3]
 800db86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db8a:	68f9      	ldr	r1, [r7, #12]
 800db8c:	4613      	mov	r3, r2
 800db8e:	00db      	lsls	r3, r3, #3
 800db90:	1a9b      	subs	r3, r3, r2
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	440b      	add	r3, r1
 800db96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3714      	adds	r7, #20
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dbc2:	78fa      	ldrb	r2, [r7, #3]
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7f4 fbdb 	bl	8002382 <HAL_PCD_SetAddress>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 f860 	bl	800dc98 <USBD_Get_USB_Status>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800dbdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b086      	sub	sp, #24
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	60f8      	str	r0, [r7, #12]
 800dbee:	607a      	str	r2, [r7, #4]
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	72fb      	strb	r3, [r7, #11]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dc08:	893b      	ldrh	r3, [r7, #8]
 800dc0a:	7af9      	ldrb	r1, [r7, #11]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	f7f4 fcf2 	bl	80025f6 <HAL_PCD_EP_Transmit>
 800dc12:	4603      	mov	r3, r0
 800dc14:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800dc16:	7dfb      	ldrb	r3, [r7, #23]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 f83d 	bl	800dc98 <USBD_Get_USB_Status>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800dc22:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3718      	adds	r7, #24
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b086      	sub	sp, #24
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	607a      	str	r2, [r7, #4]
 800dc36:	461a      	mov	r2, r3
 800dc38:	460b      	mov	r3, r1
 800dc3a:	72fb      	strb	r3, [r7, #11]
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc40:	2300      	movs	r3, #0
 800dc42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc44:	2300      	movs	r3, #0
 800dc46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dc4e:	893b      	ldrh	r3, [r7, #8]
 800dc50:	7af9      	ldrb	r1, [r7, #11]
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	f7f4 fc6c 	bl	8002530 <HAL_PCD_EP_Receive>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800dc5c:	7dfb      	ldrb	r3, [r7, #23]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f000 f81a 	bl	800dc98 <USBD_Get_USB_Status>
 800dc64:	4603      	mov	r3, r0
 800dc66:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800dc68:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3718      	adds	r7, #24
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b082      	sub	sp, #8
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dc84:	78fa      	ldrb	r2, [r7, #3]
 800dc86:	4611      	mov	r1, r2
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7f4 fc9c 	bl	80025c6 <HAL_PCD_EP_GetRxCount>
 800dc8e:	4603      	mov	r3, r0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3708      	adds	r7, #8
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	4603      	mov	r3, r0
 800dca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dca2:	2300      	movs	r3, #0
 800dca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dca6:	79fb      	ldrb	r3, [r7, #7]
 800dca8:	2b03      	cmp	r3, #3
 800dcaa:	d817      	bhi.n	800dcdc <USBD_Get_USB_Status+0x44>
 800dcac:	a201      	add	r2, pc, #4	; (adr r2, 800dcb4 <USBD_Get_USB_Status+0x1c>)
 800dcae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb2:	bf00      	nop
 800dcb4:	0800dcc5 	.word	0x0800dcc5
 800dcb8:	0800dccb 	.word	0x0800dccb
 800dcbc:	0800dcd1 	.word	0x0800dcd1
 800dcc0:	0800dcd7 	.word	0x0800dcd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	73fb      	strb	r3, [r7, #15]
    break;
 800dcc8:	e00b      	b.n	800dce2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dcca:	2302      	movs	r3, #2
 800dccc:	73fb      	strb	r3, [r7, #15]
    break;
 800dcce:	e008      	b.n	800dce2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	73fb      	strb	r3, [r7, #15]
    break;
 800dcd4:	e005      	b.n	800dce2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcd6:	2302      	movs	r3, #2
 800dcd8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcda:	e002      	b.n	800dce2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dcdc:	2302      	movs	r3, #2
 800dcde:	73fb      	strb	r3, [r7, #15]
    break;
 800dce0:	bf00      	nop
  }
  return usb_status;
 800dce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3714      	adds	r7, #20
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	6039      	str	r1, [r7, #0]
 800dcfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	2212      	movs	r2, #18
 800dd00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd02:	4b03      	ldr	r3, [pc, #12]	; (800dd10 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	370c      	adds	r7, #12
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	20000148 	.word	0x20000148

0800dd14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	6039      	str	r1, [r7, #0]
 800dd1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	2204      	movs	r2, #4
 800dd24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd26:	4b03      	ldr	r3, [pc, #12]	; (800dd34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	370c      	adds	r7, #12
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	2000015c 	.word	0x2000015c

0800dd38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	6039      	str	r1, [r7, #0]
 800dd42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd44:	79fb      	ldrb	r3, [r7, #7]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d105      	bne.n	800dd56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	4907      	ldr	r1, [pc, #28]	; (800dd6c <USBD_FS_ProductStrDescriptor+0x34>)
 800dd4e:	4808      	ldr	r0, [pc, #32]	; (800dd70 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd50:	f7fb fba4 	bl	800949c <USBD_GetString>
 800dd54:	e004      	b.n	800dd60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd56:	683a      	ldr	r2, [r7, #0]
 800dd58:	4904      	ldr	r1, [pc, #16]	; (800dd6c <USBD_FS_ProductStrDescriptor+0x34>)
 800dd5a:	4805      	ldr	r0, [pc, #20]	; (800dd70 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd5c:	f7fb fb9e 	bl	800949c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd60:	4b02      	ldr	r3, [pc, #8]	; (800dd6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3708      	adds	r7, #8
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20004274 	.word	0x20004274
 800dd70:	0800ec5c 	.word	0x0800ec5c

0800dd74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	6039      	str	r1, [r7, #0]
 800dd7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd80:	683a      	ldr	r2, [r7, #0]
 800dd82:	4904      	ldr	r1, [pc, #16]	; (800dd94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd84:	4804      	ldr	r0, [pc, #16]	; (800dd98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd86:	f7fb fb89 	bl	800949c <USBD_GetString>
  return USBD_StrDesc;
 800dd8a:	4b02      	ldr	r3, [pc, #8]	; (800dd94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20004274 	.word	0x20004274
 800dd98:	0800ec68 	.word	0x0800ec68

0800dd9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	4603      	mov	r3, r0
 800dda4:	6039      	str	r1, [r7, #0]
 800dda6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	221a      	movs	r2, #26
 800ddac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ddae:	f000 f843 	bl	800de38 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800ddb2:	4b02      	ldr	r3, [pc, #8]	; (800ddbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	20000160 	.word	0x20000160

0800ddc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	6039      	str	r1, [r7, #0]
 800ddca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddcc:	79fb      	ldrb	r3, [r7, #7]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d105      	bne.n	800ddde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddd2:	683a      	ldr	r2, [r7, #0]
 800ddd4:	4907      	ldr	r1, [pc, #28]	; (800ddf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddd6:	4808      	ldr	r0, [pc, #32]	; (800ddf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddd8:	f7fb fb60 	bl	800949c <USBD_GetString>
 800dddc:	e004      	b.n	800dde8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	4904      	ldr	r1, [pc, #16]	; (800ddf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dde2:	4805      	ldr	r0, [pc, #20]	; (800ddf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dde4:	f7fb fb5a 	bl	800949c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dde8:	4b02      	ldr	r3, [pc, #8]	; (800ddf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3708      	adds	r7, #8
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	20004274 	.word	0x20004274
 800ddf8:	0800ec7c 	.word	0x0800ec7c

0800ddfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	4603      	mov	r3, r0
 800de04:	6039      	str	r1, [r7, #0]
 800de06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de08:	79fb      	ldrb	r3, [r7, #7]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d105      	bne.n	800de1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	4907      	ldr	r1, [pc, #28]	; (800de30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de12:	4808      	ldr	r0, [pc, #32]	; (800de34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de14:	f7fb fb42 	bl	800949c <USBD_GetString>
 800de18:	e004      	b.n	800de24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de1a:	683a      	ldr	r2, [r7, #0]
 800de1c:	4904      	ldr	r1, [pc, #16]	; (800de30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de1e:	4805      	ldr	r0, [pc, #20]	; (800de34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de20:	f7fb fb3c 	bl	800949c <USBD_GetString>
  }
  return USBD_StrDesc;
 800de24:	4b02      	ldr	r3, [pc, #8]	; (800de30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de26:	4618      	mov	r0, r3
 800de28:	3708      	adds	r7, #8
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	20004274 	.word	0x20004274
 800de34:	0800ec88 	.word	0x0800ec88

0800de38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de3e:	4b0f      	ldr	r3, [pc, #60]	; (800de7c <Get_SerialNum+0x44>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de44:	4b0e      	ldr	r3, [pc, #56]	; (800de80 <Get_SerialNum+0x48>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de4a:	4b0e      	ldr	r3, [pc, #56]	; (800de84 <Get_SerialNum+0x4c>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4413      	add	r3, r2
 800de56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d009      	beq.n	800de72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de5e:	2208      	movs	r2, #8
 800de60:	4909      	ldr	r1, [pc, #36]	; (800de88 <Get_SerialNum+0x50>)
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f000 f814 	bl	800de90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de68:	2204      	movs	r2, #4
 800de6a:	4908      	ldr	r1, [pc, #32]	; (800de8c <Get_SerialNum+0x54>)
 800de6c:	68b8      	ldr	r0, [r7, #8]
 800de6e:	f000 f80f 	bl	800de90 <IntToUnicode>
  }
}
 800de72:	bf00      	nop
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	1fff7a10 	.word	0x1fff7a10
 800de80:	1fff7a14 	.word	0x1fff7a14
 800de84:	1fff7a18 	.word	0x1fff7a18
 800de88:	20000162 	.word	0x20000162
 800de8c:	20000172 	.word	0x20000172

0800de90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de90:	b480      	push	{r7}
 800de92:	b087      	sub	sp, #28
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	4613      	mov	r3, r2
 800de9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de9e:	2300      	movs	r3, #0
 800dea0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dea2:	2300      	movs	r3, #0
 800dea4:	75fb      	strb	r3, [r7, #23]
 800dea6:	e027      	b.n	800def8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	0f1b      	lsrs	r3, r3, #28
 800deac:	2b09      	cmp	r3, #9
 800deae:	d80b      	bhi.n	800dec8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	0f1b      	lsrs	r3, r3, #28
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	7dfb      	ldrb	r3, [r7, #23]
 800deb8:	005b      	lsls	r3, r3, #1
 800deba:	4619      	mov	r1, r3
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	440b      	add	r3, r1
 800dec0:	3230      	adds	r2, #48	; 0x30
 800dec2:	b2d2      	uxtb	r2, r2
 800dec4:	701a      	strb	r2, [r3, #0]
 800dec6:	e00a      	b.n	800dede <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	0f1b      	lsrs	r3, r3, #28
 800decc:	b2da      	uxtb	r2, r3
 800dece:	7dfb      	ldrb	r3, [r7, #23]
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4619      	mov	r1, r3
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	440b      	add	r3, r1
 800ded8:	3237      	adds	r2, #55	; 0x37
 800deda:	b2d2      	uxtb	r2, r2
 800dedc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	011b      	lsls	r3, r3, #4
 800dee2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dee4:	7dfb      	ldrb	r3, [r7, #23]
 800dee6:	005b      	lsls	r3, r3, #1
 800dee8:	3301      	adds	r3, #1
 800deea:	68ba      	ldr	r2, [r7, #8]
 800deec:	4413      	add	r3, r2
 800deee:	2200      	movs	r2, #0
 800def0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800def2:	7dfb      	ldrb	r3, [r7, #23]
 800def4:	3301      	adds	r3, #1
 800def6:	75fb      	strb	r3, [r7, #23]
 800def8:	7dfa      	ldrb	r2, [r7, #23]
 800defa:	79fb      	ldrb	r3, [r7, #7]
 800defc:	429a      	cmp	r2, r3
 800defe:	d3d3      	bcc.n	800dea8 <IntToUnicode+0x18>
  }
}
 800df00:	bf00      	nop
 800df02:	371c      	adds	r7, #28
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800df0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800df44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800df10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800df12:	e003      	b.n	800df1c <LoopCopyDataInit>

0800df14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800df14:	4b0c      	ldr	r3, [pc, #48]	; (800df48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800df16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800df18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800df1a:	3104      	adds	r1, #4

0800df1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800df1c:	480b      	ldr	r0, [pc, #44]	; (800df4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800df1e:	4b0c      	ldr	r3, [pc, #48]	; (800df50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800df20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800df22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800df24:	d3f6      	bcc.n	800df14 <CopyDataInit>
  ldr  r2, =_sbss
 800df26:	4a0b      	ldr	r2, [pc, #44]	; (800df54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800df28:	e002      	b.n	800df30 <LoopFillZerobss>

0800df2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800df2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800df2c:	f842 3b04 	str.w	r3, [r2], #4

0800df30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800df30:	4b09      	ldr	r3, [pc, #36]	; (800df58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800df32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800df34:	d3f9      	bcc.n	800df2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800df36:	f7ff fa89 	bl	800d44c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800df3a:	f000 f817 	bl	800df6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800df3e:	f7fe f8f3 	bl	800c128 <main>
  bx  lr    
 800df42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800df44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800df48:	0800ed90 	.word	0x0800ed90
  ldr  r0, =_sdata
 800df4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800df50:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800df54:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800df58:	20004478 	.word	0x20004478

0800df5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800df5c:	e7fe      	b.n	800df5c <ADC_IRQHandler>
	...

0800df60 <__errno>:
 800df60:	4b01      	ldr	r3, [pc, #4]	; (800df68 <__errno+0x8>)
 800df62:	6818      	ldr	r0, [r3, #0]
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop
 800df68:	2000017c 	.word	0x2000017c

0800df6c <__libc_init_array>:
 800df6c:	b570      	push	{r4, r5, r6, lr}
 800df6e:	4e0d      	ldr	r6, [pc, #52]	; (800dfa4 <__libc_init_array+0x38>)
 800df70:	4c0d      	ldr	r4, [pc, #52]	; (800dfa8 <__libc_init_array+0x3c>)
 800df72:	1ba4      	subs	r4, r4, r6
 800df74:	10a4      	asrs	r4, r4, #2
 800df76:	2500      	movs	r5, #0
 800df78:	42a5      	cmp	r5, r4
 800df7a:	d109      	bne.n	800df90 <__libc_init_array+0x24>
 800df7c:	4e0b      	ldr	r6, [pc, #44]	; (800dfac <__libc_init_array+0x40>)
 800df7e:	4c0c      	ldr	r4, [pc, #48]	; (800dfb0 <__libc_init_array+0x44>)
 800df80:	f000 fc38 	bl	800e7f4 <_init>
 800df84:	1ba4      	subs	r4, r4, r6
 800df86:	10a4      	asrs	r4, r4, #2
 800df88:	2500      	movs	r5, #0
 800df8a:	42a5      	cmp	r5, r4
 800df8c:	d105      	bne.n	800df9a <__libc_init_array+0x2e>
 800df8e:	bd70      	pop	{r4, r5, r6, pc}
 800df90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800df94:	4798      	blx	r3
 800df96:	3501      	adds	r5, #1
 800df98:	e7ee      	b.n	800df78 <__libc_init_array+0xc>
 800df9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800df9e:	4798      	blx	r3
 800dfa0:	3501      	adds	r5, #1
 800dfa2:	e7f2      	b.n	800df8a <__libc_init_array+0x1e>
 800dfa4:	0800ed88 	.word	0x0800ed88
 800dfa8:	0800ed88 	.word	0x0800ed88
 800dfac:	0800ed88 	.word	0x0800ed88
 800dfb0:	0800ed8c 	.word	0x0800ed8c

0800dfb4 <malloc>:
 800dfb4:	4b02      	ldr	r3, [pc, #8]	; (800dfc0 <malloc+0xc>)
 800dfb6:	4601      	mov	r1, r0
 800dfb8:	6818      	ldr	r0, [r3, #0]
 800dfba:	f000 b86d 	b.w	800e098 <_malloc_r>
 800dfbe:	bf00      	nop
 800dfc0:	2000017c 	.word	0x2000017c

0800dfc4 <free>:
 800dfc4:	4b02      	ldr	r3, [pc, #8]	; (800dfd0 <free+0xc>)
 800dfc6:	4601      	mov	r1, r0
 800dfc8:	6818      	ldr	r0, [r3, #0]
 800dfca:	f000 b817 	b.w	800dffc <_free_r>
 800dfce:	bf00      	nop
 800dfd0:	2000017c 	.word	0x2000017c

0800dfd4 <memcpy>:
 800dfd4:	b510      	push	{r4, lr}
 800dfd6:	1e43      	subs	r3, r0, #1
 800dfd8:	440a      	add	r2, r1
 800dfda:	4291      	cmp	r1, r2
 800dfdc:	d100      	bne.n	800dfe0 <memcpy+0xc>
 800dfde:	bd10      	pop	{r4, pc}
 800dfe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfe8:	e7f7      	b.n	800dfda <memcpy+0x6>

0800dfea <memset>:
 800dfea:	4402      	add	r2, r0
 800dfec:	4603      	mov	r3, r0
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d100      	bne.n	800dff4 <memset+0xa>
 800dff2:	4770      	bx	lr
 800dff4:	f803 1b01 	strb.w	r1, [r3], #1
 800dff8:	e7f9      	b.n	800dfee <memset+0x4>
	...

0800dffc <_free_r>:
 800dffc:	b538      	push	{r3, r4, r5, lr}
 800dffe:	4605      	mov	r5, r0
 800e000:	2900      	cmp	r1, #0
 800e002:	d045      	beq.n	800e090 <_free_r+0x94>
 800e004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e008:	1f0c      	subs	r4, r1, #4
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	bfb8      	it	lt
 800e00e:	18e4      	addlt	r4, r4, r3
 800e010:	f000 f8cc 	bl	800e1ac <__malloc_lock>
 800e014:	4a1f      	ldr	r2, [pc, #124]	; (800e094 <_free_r+0x98>)
 800e016:	6813      	ldr	r3, [r2, #0]
 800e018:	4610      	mov	r0, r2
 800e01a:	b933      	cbnz	r3, 800e02a <_free_r+0x2e>
 800e01c:	6063      	str	r3, [r4, #4]
 800e01e:	6014      	str	r4, [r2, #0]
 800e020:	4628      	mov	r0, r5
 800e022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e026:	f000 b8c2 	b.w	800e1ae <__malloc_unlock>
 800e02a:	42a3      	cmp	r3, r4
 800e02c:	d90c      	bls.n	800e048 <_free_r+0x4c>
 800e02e:	6821      	ldr	r1, [r4, #0]
 800e030:	1862      	adds	r2, r4, r1
 800e032:	4293      	cmp	r3, r2
 800e034:	bf04      	itt	eq
 800e036:	681a      	ldreq	r2, [r3, #0]
 800e038:	685b      	ldreq	r3, [r3, #4]
 800e03a:	6063      	str	r3, [r4, #4]
 800e03c:	bf04      	itt	eq
 800e03e:	1852      	addeq	r2, r2, r1
 800e040:	6022      	streq	r2, [r4, #0]
 800e042:	6004      	str	r4, [r0, #0]
 800e044:	e7ec      	b.n	800e020 <_free_r+0x24>
 800e046:	4613      	mov	r3, r2
 800e048:	685a      	ldr	r2, [r3, #4]
 800e04a:	b10a      	cbz	r2, 800e050 <_free_r+0x54>
 800e04c:	42a2      	cmp	r2, r4
 800e04e:	d9fa      	bls.n	800e046 <_free_r+0x4a>
 800e050:	6819      	ldr	r1, [r3, #0]
 800e052:	1858      	adds	r0, r3, r1
 800e054:	42a0      	cmp	r0, r4
 800e056:	d10b      	bne.n	800e070 <_free_r+0x74>
 800e058:	6820      	ldr	r0, [r4, #0]
 800e05a:	4401      	add	r1, r0
 800e05c:	1858      	adds	r0, r3, r1
 800e05e:	4282      	cmp	r2, r0
 800e060:	6019      	str	r1, [r3, #0]
 800e062:	d1dd      	bne.n	800e020 <_free_r+0x24>
 800e064:	6810      	ldr	r0, [r2, #0]
 800e066:	6852      	ldr	r2, [r2, #4]
 800e068:	605a      	str	r2, [r3, #4]
 800e06a:	4401      	add	r1, r0
 800e06c:	6019      	str	r1, [r3, #0]
 800e06e:	e7d7      	b.n	800e020 <_free_r+0x24>
 800e070:	d902      	bls.n	800e078 <_free_r+0x7c>
 800e072:	230c      	movs	r3, #12
 800e074:	602b      	str	r3, [r5, #0]
 800e076:	e7d3      	b.n	800e020 <_free_r+0x24>
 800e078:	6820      	ldr	r0, [r4, #0]
 800e07a:	1821      	adds	r1, r4, r0
 800e07c:	428a      	cmp	r2, r1
 800e07e:	bf04      	itt	eq
 800e080:	6811      	ldreq	r1, [r2, #0]
 800e082:	6852      	ldreq	r2, [r2, #4]
 800e084:	6062      	str	r2, [r4, #4]
 800e086:	bf04      	itt	eq
 800e088:	1809      	addeq	r1, r1, r0
 800e08a:	6021      	streq	r1, [r4, #0]
 800e08c:	605c      	str	r4, [r3, #4]
 800e08e:	e7c7      	b.n	800e020 <_free_r+0x24>
 800e090:	bd38      	pop	{r3, r4, r5, pc}
 800e092:	bf00      	nop
 800e094:	20000848 	.word	0x20000848

0800e098 <_malloc_r>:
 800e098:	b570      	push	{r4, r5, r6, lr}
 800e09a:	1ccd      	adds	r5, r1, #3
 800e09c:	f025 0503 	bic.w	r5, r5, #3
 800e0a0:	3508      	adds	r5, #8
 800e0a2:	2d0c      	cmp	r5, #12
 800e0a4:	bf38      	it	cc
 800e0a6:	250c      	movcc	r5, #12
 800e0a8:	2d00      	cmp	r5, #0
 800e0aa:	4606      	mov	r6, r0
 800e0ac:	db01      	blt.n	800e0b2 <_malloc_r+0x1a>
 800e0ae:	42a9      	cmp	r1, r5
 800e0b0:	d903      	bls.n	800e0ba <_malloc_r+0x22>
 800e0b2:	230c      	movs	r3, #12
 800e0b4:	6033      	str	r3, [r6, #0]
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ba:	f000 f877 	bl	800e1ac <__malloc_lock>
 800e0be:	4a21      	ldr	r2, [pc, #132]	; (800e144 <_malloc_r+0xac>)
 800e0c0:	6814      	ldr	r4, [r2, #0]
 800e0c2:	4621      	mov	r1, r4
 800e0c4:	b991      	cbnz	r1, 800e0ec <_malloc_r+0x54>
 800e0c6:	4c20      	ldr	r4, [pc, #128]	; (800e148 <_malloc_r+0xb0>)
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	b91b      	cbnz	r3, 800e0d4 <_malloc_r+0x3c>
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	f000 f83d 	bl	800e14c <_sbrk_r>
 800e0d2:	6020      	str	r0, [r4, #0]
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	f000 f838 	bl	800e14c <_sbrk_r>
 800e0dc:	1c43      	adds	r3, r0, #1
 800e0de:	d124      	bne.n	800e12a <_malloc_r+0x92>
 800e0e0:	230c      	movs	r3, #12
 800e0e2:	6033      	str	r3, [r6, #0]
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	f000 f862 	bl	800e1ae <__malloc_unlock>
 800e0ea:	e7e4      	b.n	800e0b6 <_malloc_r+0x1e>
 800e0ec:	680b      	ldr	r3, [r1, #0]
 800e0ee:	1b5b      	subs	r3, r3, r5
 800e0f0:	d418      	bmi.n	800e124 <_malloc_r+0x8c>
 800e0f2:	2b0b      	cmp	r3, #11
 800e0f4:	d90f      	bls.n	800e116 <_malloc_r+0x7e>
 800e0f6:	600b      	str	r3, [r1, #0]
 800e0f8:	50cd      	str	r5, [r1, r3]
 800e0fa:	18cc      	adds	r4, r1, r3
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	f000 f856 	bl	800e1ae <__malloc_unlock>
 800e102:	f104 000b 	add.w	r0, r4, #11
 800e106:	1d23      	adds	r3, r4, #4
 800e108:	f020 0007 	bic.w	r0, r0, #7
 800e10c:	1ac3      	subs	r3, r0, r3
 800e10e:	d0d3      	beq.n	800e0b8 <_malloc_r+0x20>
 800e110:	425a      	negs	r2, r3
 800e112:	50e2      	str	r2, [r4, r3]
 800e114:	e7d0      	b.n	800e0b8 <_malloc_r+0x20>
 800e116:	428c      	cmp	r4, r1
 800e118:	684b      	ldr	r3, [r1, #4]
 800e11a:	bf16      	itet	ne
 800e11c:	6063      	strne	r3, [r4, #4]
 800e11e:	6013      	streq	r3, [r2, #0]
 800e120:	460c      	movne	r4, r1
 800e122:	e7eb      	b.n	800e0fc <_malloc_r+0x64>
 800e124:	460c      	mov	r4, r1
 800e126:	6849      	ldr	r1, [r1, #4]
 800e128:	e7cc      	b.n	800e0c4 <_malloc_r+0x2c>
 800e12a:	1cc4      	adds	r4, r0, #3
 800e12c:	f024 0403 	bic.w	r4, r4, #3
 800e130:	42a0      	cmp	r0, r4
 800e132:	d005      	beq.n	800e140 <_malloc_r+0xa8>
 800e134:	1a21      	subs	r1, r4, r0
 800e136:	4630      	mov	r0, r6
 800e138:	f000 f808 	bl	800e14c <_sbrk_r>
 800e13c:	3001      	adds	r0, #1
 800e13e:	d0cf      	beq.n	800e0e0 <_malloc_r+0x48>
 800e140:	6025      	str	r5, [r4, #0]
 800e142:	e7db      	b.n	800e0fc <_malloc_r+0x64>
 800e144:	20000848 	.word	0x20000848
 800e148:	2000084c 	.word	0x2000084c

0800e14c <_sbrk_r>:
 800e14c:	b538      	push	{r3, r4, r5, lr}
 800e14e:	4c06      	ldr	r4, [pc, #24]	; (800e168 <_sbrk_r+0x1c>)
 800e150:	2300      	movs	r3, #0
 800e152:	4605      	mov	r5, r0
 800e154:	4608      	mov	r0, r1
 800e156:	6023      	str	r3, [r4, #0]
 800e158:	f7ff f94c 	bl	800d3f4 <_sbrk>
 800e15c:	1c43      	adds	r3, r0, #1
 800e15e:	d102      	bne.n	800e166 <_sbrk_r+0x1a>
 800e160:	6823      	ldr	r3, [r4, #0]
 800e162:	b103      	cbz	r3, 800e166 <_sbrk_r+0x1a>
 800e164:	602b      	str	r3, [r5, #0]
 800e166:	bd38      	pop	{r3, r4, r5, pc}
 800e168:	20004474 	.word	0x20004474

0800e16c <siprintf>:
 800e16c:	b40e      	push	{r1, r2, r3}
 800e16e:	b500      	push	{lr}
 800e170:	b09c      	sub	sp, #112	; 0x70
 800e172:	ab1d      	add	r3, sp, #116	; 0x74
 800e174:	9002      	str	r0, [sp, #8]
 800e176:	9006      	str	r0, [sp, #24]
 800e178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e17c:	4809      	ldr	r0, [pc, #36]	; (800e1a4 <siprintf+0x38>)
 800e17e:	9107      	str	r1, [sp, #28]
 800e180:	9104      	str	r1, [sp, #16]
 800e182:	4909      	ldr	r1, [pc, #36]	; (800e1a8 <siprintf+0x3c>)
 800e184:	f853 2b04 	ldr.w	r2, [r3], #4
 800e188:	9105      	str	r1, [sp, #20]
 800e18a:	6800      	ldr	r0, [r0, #0]
 800e18c:	9301      	str	r3, [sp, #4]
 800e18e:	a902      	add	r1, sp, #8
 800e190:	f000 f868 	bl	800e264 <_svfiprintf_r>
 800e194:	9b02      	ldr	r3, [sp, #8]
 800e196:	2200      	movs	r2, #0
 800e198:	701a      	strb	r2, [r3, #0]
 800e19a:	b01c      	add	sp, #112	; 0x70
 800e19c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1a0:	b003      	add	sp, #12
 800e1a2:	4770      	bx	lr
 800e1a4:	2000017c 	.word	0x2000017c
 800e1a8:	ffff0208 	.word	0xffff0208

0800e1ac <__malloc_lock>:
 800e1ac:	4770      	bx	lr

0800e1ae <__malloc_unlock>:
 800e1ae:	4770      	bx	lr

0800e1b0 <__ssputs_r>:
 800e1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1b4:	688e      	ldr	r6, [r1, #8]
 800e1b6:	429e      	cmp	r6, r3
 800e1b8:	4682      	mov	sl, r0
 800e1ba:	460c      	mov	r4, r1
 800e1bc:	4690      	mov	r8, r2
 800e1be:	4699      	mov	r9, r3
 800e1c0:	d837      	bhi.n	800e232 <__ssputs_r+0x82>
 800e1c2:	898a      	ldrh	r2, [r1, #12]
 800e1c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1c8:	d031      	beq.n	800e22e <__ssputs_r+0x7e>
 800e1ca:	6825      	ldr	r5, [r4, #0]
 800e1cc:	6909      	ldr	r1, [r1, #16]
 800e1ce:	1a6f      	subs	r7, r5, r1
 800e1d0:	6965      	ldr	r5, [r4, #20]
 800e1d2:	2302      	movs	r3, #2
 800e1d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1d8:	fb95 f5f3 	sdiv	r5, r5, r3
 800e1dc:	f109 0301 	add.w	r3, r9, #1
 800e1e0:	443b      	add	r3, r7
 800e1e2:	429d      	cmp	r5, r3
 800e1e4:	bf38      	it	cc
 800e1e6:	461d      	movcc	r5, r3
 800e1e8:	0553      	lsls	r3, r2, #21
 800e1ea:	d530      	bpl.n	800e24e <__ssputs_r+0x9e>
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	f7ff ff53 	bl	800e098 <_malloc_r>
 800e1f2:	4606      	mov	r6, r0
 800e1f4:	b950      	cbnz	r0, 800e20c <__ssputs_r+0x5c>
 800e1f6:	230c      	movs	r3, #12
 800e1f8:	f8ca 3000 	str.w	r3, [sl]
 800e1fc:	89a3      	ldrh	r3, [r4, #12]
 800e1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e202:	81a3      	strh	r3, [r4, #12]
 800e204:	f04f 30ff 	mov.w	r0, #4294967295
 800e208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e20c:	463a      	mov	r2, r7
 800e20e:	6921      	ldr	r1, [r4, #16]
 800e210:	f7ff fee0 	bl	800dfd4 <memcpy>
 800e214:	89a3      	ldrh	r3, [r4, #12]
 800e216:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e21a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e21e:	81a3      	strh	r3, [r4, #12]
 800e220:	6126      	str	r6, [r4, #16]
 800e222:	6165      	str	r5, [r4, #20]
 800e224:	443e      	add	r6, r7
 800e226:	1bed      	subs	r5, r5, r7
 800e228:	6026      	str	r6, [r4, #0]
 800e22a:	60a5      	str	r5, [r4, #8]
 800e22c:	464e      	mov	r6, r9
 800e22e:	454e      	cmp	r6, r9
 800e230:	d900      	bls.n	800e234 <__ssputs_r+0x84>
 800e232:	464e      	mov	r6, r9
 800e234:	4632      	mov	r2, r6
 800e236:	4641      	mov	r1, r8
 800e238:	6820      	ldr	r0, [r4, #0]
 800e23a:	f000 fa93 	bl	800e764 <memmove>
 800e23e:	68a3      	ldr	r3, [r4, #8]
 800e240:	1b9b      	subs	r3, r3, r6
 800e242:	60a3      	str	r3, [r4, #8]
 800e244:	6823      	ldr	r3, [r4, #0]
 800e246:	441e      	add	r6, r3
 800e248:	6026      	str	r6, [r4, #0]
 800e24a:	2000      	movs	r0, #0
 800e24c:	e7dc      	b.n	800e208 <__ssputs_r+0x58>
 800e24e:	462a      	mov	r2, r5
 800e250:	f000 faa1 	bl	800e796 <_realloc_r>
 800e254:	4606      	mov	r6, r0
 800e256:	2800      	cmp	r0, #0
 800e258:	d1e2      	bne.n	800e220 <__ssputs_r+0x70>
 800e25a:	6921      	ldr	r1, [r4, #16]
 800e25c:	4650      	mov	r0, sl
 800e25e:	f7ff fecd 	bl	800dffc <_free_r>
 800e262:	e7c8      	b.n	800e1f6 <__ssputs_r+0x46>

0800e264 <_svfiprintf_r>:
 800e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e268:	461d      	mov	r5, r3
 800e26a:	898b      	ldrh	r3, [r1, #12]
 800e26c:	061f      	lsls	r7, r3, #24
 800e26e:	b09d      	sub	sp, #116	; 0x74
 800e270:	4680      	mov	r8, r0
 800e272:	460c      	mov	r4, r1
 800e274:	4616      	mov	r6, r2
 800e276:	d50f      	bpl.n	800e298 <_svfiprintf_r+0x34>
 800e278:	690b      	ldr	r3, [r1, #16]
 800e27a:	b96b      	cbnz	r3, 800e298 <_svfiprintf_r+0x34>
 800e27c:	2140      	movs	r1, #64	; 0x40
 800e27e:	f7ff ff0b 	bl	800e098 <_malloc_r>
 800e282:	6020      	str	r0, [r4, #0]
 800e284:	6120      	str	r0, [r4, #16]
 800e286:	b928      	cbnz	r0, 800e294 <_svfiprintf_r+0x30>
 800e288:	230c      	movs	r3, #12
 800e28a:	f8c8 3000 	str.w	r3, [r8]
 800e28e:	f04f 30ff 	mov.w	r0, #4294967295
 800e292:	e0c8      	b.n	800e426 <_svfiprintf_r+0x1c2>
 800e294:	2340      	movs	r3, #64	; 0x40
 800e296:	6163      	str	r3, [r4, #20]
 800e298:	2300      	movs	r3, #0
 800e29a:	9309      	str	r3, [sp, #36]	; 0x24
 800e29c:	2320      	movs	r3, #32
 800e29e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2a2:	2330      	movs	r3, #48	; 0x30
 800e2a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2a8:	9503      	str	r5, [sp, #12]
 800e2aa:	f04f 0b01 	mov.w	fp, #1
 800e2ae:	4637      	mov	r7, r6
 800e2b0:	463d      	mov	r5, r7
 800e2b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e2b6:	b10b      	cbz	r3, 800e2bc <_svfiprintf_r+0x58>
 800e2b8:	2b25      	cmp	r3, #37	; 0x25
 800e2ba:	d13e      	bne.n	800e33a <_svfiprintf_r+0xd6>
 800e2bc:	ebb7 0a06 	subs.w	sl, r7, r6
 800e2c0:	d00b      	beq.n	800e2da <_svfiprintf_r+0x76>
 800e2c2:	4653      	mov	r3, sl
 800e2c4:	4632      	mov	r2, r6
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	4640      	mov	r0, r8
 800e2ca:	f7ff ff71 	bl	800e1b0 <__ssputs_r>
 800e2ce:	3001      	adds	r0, #1
 800e2d0:	f000 80a4 	beq.w	800e41c <_svfiprintf_r+0x1b8>
 800e2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2d6:	4453      	add	r3, sl
 800e2d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2da:	783b      	ldrb	r3, [r7, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f000 809d 	beq.w	800e41c <_svfiprintf_r+0x1b8>
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2ec:	9304      	str	r3, [sp, #16]
 800e2ee:	9307      	str	r3, [sp, #28]
 800e2f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2f4:	931a      	str	r3, [sp, #104]	; 0x68
 800e2f6:	462f      	mov	r7, r5
 800e2f8:	2205      	movs	r2, #5
 800e2fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e2fe:	4850      	ldr	r0, [pc, #320]	; (800e440 <_svfiprintf_r+0x1dc>)
 800e300:	f7f1 ff6e 	bl	80001e0 <memchr>
 800e304:	9b04      	ldr	r3, [sp, #16]
 800e306:	b9d0      	cbnz	r0, 800e33e <_svfiprintf_r+0xda>
 800e308:	06d9      	lsls	r1, r3, #27
 800e30a:	bf44      	itt	mi
 800e30c:	2220      	movmi	r2, #32
 800e30e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e312:	071a      	lsls	r2, r3, #28
 800e314:	bf44      	itt	mi
 800e316:	222b      	movmi	r2, #43	; 0x2b
 800e318:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e31c:	782a      	ldrb	r2, [r5, #0]
 800e31e:	2a2a      	cmp	r2, #42	; 0x2a
 800e320:	d015      	beq.n	800e34e <_svfiprintf_r+0xea>
 800e322:	9a07      	ldr	r2, [sp, #28]
 800e324:	462f      	mov	r7, r5
 800e326:	2000      	movs	r0, #0
 800e328:	250a      	movs	r5, #10
 800e32a:	4639      	mov	r1, r7
 800e32c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e330:	3b30      	subs	r3, #48	; 0x30
 800e332:	2b09      	cmp	r3, #9
 800e334:	d94d      	bls.n	800e3d2 <_svfiprintf_r+0x16e>
 800e336:	b1b8      	cbz	r0, 800e368 <_svfiprintf_r+0x104>
 800e338:	e00f      	b.n	800e35a <_svfiprintf_r+0xf6>
 800e33a:	462f      	mov	r7, r5
 800e33c:	e7b8      	b.n	800e2b0 <_svfiprintf_r+0x4c>
 800e33e:	4a40      	ldr	r2, [pc, #256]	; (800e440 <_svfiprintf_r+0x1dc>)
 800e340:	1a80      	subs	r0, r0, r2
 800e342:	fa0b f000 	lsl.w	r0, fp, r0
 800e346:	4318      	orrs	r0, r3
 800e348:	9004      	str	r0, [sp, #16]
 800e34a:	463d      	mov	r5, r7
 800e34c:	e7d3      	b.n	800e2f6 <_svfiprintf_r+0x92>
 800e34e:	9a03      	ldr	r2, [sp, #12]
 800e350:	1d11      	adds	r1, r2, #4
 800e352:	6812      	ldr	r2, [r2, #0]
 800e354:	9103      	str	r1, [sp, #12]
 800e356:	2a00      	cmp	r2, #0
 800e358:	db01      	blt.n	800e35e <_svfiprintf_r+0xfa>
 800e35a:	9207      	str	r2, [sp, #28]
 800e35c:	e004      	b.n	800e368 <_svfiprintf_r+0x104>
 800e35e:	4252      	negs	r2, r2
 800e360:	f043 0302 	orr.w	r3, r3, #2
 800e364:	9207      	str	r2, [sp, #28]
 800e366:	9304      	str	r3, [sp, #16]
 800e368:	783b      	ldrb	r3, [r7, #0]
 800e36a:	2b2e      	cmp	r3, #46	; 0x2e
 800e36c:	d10c      	bne.n	800e388 <_svfiprintf_r+0x124>
 800e36e:	787b      	ldrb	r3, [r7, #1]
 800e370:	2b2a      	cmp	r3, #42	; 0x2a
 800e372:	d133      	bne.n	800e3dc <_svfiprintf_r+0x178>
 800e374:	9b03      	ldr	r3, [sp, #12]
 800e376:	1d1a      	adds	r2, r3, #4
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	9203      	str	r2, [sp, #12]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	bfb8      	it	lt
 800e380:	f04f 33ff 	movlt.w	r3, #4294967295
 800e384:	3702      	adds	r7, #2
 800e386:	9305      	str	r3, [sp, #20]
 800e388:	4d2e      	ldr	r5, [pc, #184]	; (800e444 <_svfiprintf_r+0x1e0>)
 800e38a:	7839      	ldrb	r1, [r7, #0]
 800e38c:	2203      	movs	r2, #3
 800e38e:	4628      	mov	r0, r5
 800e390:	f7f1 ff26 	bl	80001e0 <memchr>
 800e394:	b138      	cbz	r0, 800e3a6 <_svfiprintf_r+0x142>
 800e396:	2340      	movs	r3, #64	; 0x40
 800e398:	1b40      	subs	r0, r0, r5
 800e39a:	fa03 f000 	lsl.w	r0, r3, r0
 800e39e:	9b04      	ldr	r3, [sp, #16]
 800e3a0:	4303      	orrs	r3, r0
 800e3a2:	3701      	adds	r7, #1
 800e3a4:	9304      	str	r3, [sp, #16]
 800e3a6:	7839      	ldrb	r1, [r7, #0]
 800e3a8:	4827      	ldr	r0, [pc, #156]	; (800e448 <_svfiprintf_r+0x1e4>)
 800e3aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3ae:	2206      	movs	r2, #6
 800e3b0:	1c7e      	adds	r6, r7, #1
 800e3b2:	f7f1 ff15 	bl	80001e0 <memchr>
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	d038      	beq.n	800e42c <_svfiprintf_r+0x1c8>
 800e3ba:	4b24      	ldr	r3, [pc, #144]	; (800e44c <_svfiprintf_r+0x1e8>)
 800e3bc:	bb13      	cbnz	r3, 800e404 <_svfiprintf_r+0x1a0>
 800e3be:	9b03      	ldr	r3, [sp, #12]
 800e3c0:	3307      	adds	r3, #7
 800e3c2:	f023 0307 	bic.w	r3, r3, #7
 800e3c6:	3308      	adds	r3, #8
 800e3c8:	9303      	str	r3, [sp, #12]
 800e3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3cc:	444b      	add	r3, r9
 800e3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e3d0:	e76d      	b.n	800e2ae <_svfiprintf_r+0x4a>
 800e3d2:	fb05 3202 	mla	r2, r5, r2, r3
 800e3d6:	2001      	movs	r0, #1
 800e3d8:	460f      	mov	r7, r1
 800e3da:	e7a6      	b.n	800e32a <_svfiprintf_r+0xc6>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	3701      	adds	r7, #1
 800e3e0:	9305      	str	r3, [sp, #20]
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	250a      	movs	r5, #10
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3ec:	3a30      	subs	r2, #48	; 0x30
 800e3ee:	2a09      	cmp	r2, #9
 800e3f0:	d903      	bls.n	800e3fa <_svfiprintf_r+0x196>
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d0c8      	beq.n	800e388 <_svfiprintf_r+0x124>
 800e3f6:	9105      	str	r1, [sp, #20]
 800e3f8:	e7c6      	b.n	800e388 <_svfiprintf_r+0x124>
 800e3fa:	fb05 2101 	mla	r1, r5, r1, r2
 800e3fe:	2301      	movs	r3, #1
 800e400:	4607      	mov	r7, r0
 800e402:	e7f0      	b.n	800e3e6 <_svfiprintf_r+0x182>
 800e404:	ab03      	add	r3, sp, #12
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	4622      	mov	r2, r4
 800e40a:	4b11      	ldr	r3, [pc, #68]	; (800e450 <_svfiprintf_r+0x1ec>)
 800e40c:	a904      	add	r1, sp, #16
 800e40e:	4640      	mov	r0, r8
 800e410:	f3af 8000 	nop.w
 800e414:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e418:	4681      	mov	r9, r0
 800e41a:	d1d6      	bne.n	800e3ca <_svfiprintf_r+0x166>
 800e41c:	89a3      	ldrh	r3, [r4, #12]
 800e41e:	065b      	lsls	r3, r3, #25
 800e420:	f53f af35 	bmi.w	800e28e <_svfiprintf_r+0x2a>
 800e424:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e426:	b01d      	add	sp, #116	; 0x74
 800e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42c:	ab03      	add	r3, sp, #12
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	4622      	mov	r2, r4
 800e432:	4b07      	ldr	r3, [pc, #28]	; (800e450 <_svfiprintf_r+0x1ec>)
 800e434:	a904      	add	r1, sp, #16
 800e436:	4640      	mov	r0, r8
 800e438:	f000 f882 	bl	800e540 <_printf_i>
 800e43c:	e7ea      	b.n	800e414 <_svfiprintf_r+0x1b0>
 800e43e:	bf00      	nop
 800e440:	0800ed4c 	.word	0x0800ed4c
 800e444:	0800ed52 	.word	0x0800ed52
 800e448:	0800ed56 	.word	0x0800ed56
 800e44c:	00000000 	.word	0x00000000
 800e450:	0800e1b1 	.word	0x0800e1b1

0800e454 <_printf_common>:
 800e454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e458:	4691      	mov	r9, r2
 800e45a:	461f      	mov	r7, r3
 800e45c:	688a      	ldr	r2, [r1, #8]
 800e45e:	690b      	ldr	r3, [r1, #16]
 800e460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e464:	4293      	cmp	r3, r2
 800e466:	bfb8      	it	lt
 800e468:	4613      	movlt	r3, r2
 800e46a:	f8c9 3000 	str.w	r3, [r9]
 800e46e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e472:	4606      	mov	r6, r0
 800e474:	460c      	mov	r4, r1
 800e476:	b112      	cbz	r2, 800e47e <_printf_common+0x2a>
 800e478:	3301      	adds	r3, #1
 800e47a:	f8c9 3000 	str.w	r3, [r9]
 800e47e:	6823      	ldr	r3, [r4, #0]
 800e480:	0699      	lsls	r1, r3, #26
 800e482:	bf42      	ittt	mi
 800e484:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e488:	3302      	addmi	r3, #2
 800e48a:	f8c9 3000 	strmi.w	r3, [r9]
 800e48e:	6825      	ldr	r5, [r4, #0]
 800e490:	f015 0506 	ands.w	r5, r5, #6
 800e494:	d107      	bne.n	800e4a6 <_printf_common+0x52>
 800e496:	f104 0a19 	add.w	sl, r4, #25
 800e49a:	68e3      	ldr	r3, [r4, #12]
 800e49c:	f8d9 2000 	ldr.w	r2, [r9]
 800e4a0:	1a9b      	subs	r3, r3, r2
 800e4a2:	42ab      	cmp	r3, r5
 800e4a4:	dc28      	bgt.n	800e4f8 <_printf_common+0xa4>
 800e4a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e4aa:	6822      	ldr	r2, [r4, #0]
 800e4ac:	3300      	adds	r3, #0
 800e4ae:	bf18      	it	ne
 800e4b0:	2301      	movne	r3, #1
 800e4b2:	0692      	lsls	r2, r2, #26
 800e4b4:	d42d      	bmi.n	800e512 <_printf_common+0xbe>
 800e4b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	4630      	mov	r0, r6
 800e4be:	47c0      	blx	r8
 800e4c0:	3001      	adds	r0, #1
 800e4c2:	d020      	beq.n	800e506 <_printf_common+0xb2>
 800e4c4:	6823      	ldr	r3, [r4, #0]
 800e4c6:	68e5      	ldr	r5, [r4, #12]
 800e4c8:	f8d9 2000 	ldr.w	r2, [r9]
 800e4cc:	f003 0306 	and.w	r3, r3, #6
 800e4d0:	2b04      	cmp	r3, #4
 800e4d2:	bf08      	it	eq
 800e4d4:	1aad      	subeq	r5, r5, r2
 800e4d6:	68a3      	ldr	r3, [r4, #8]
 800e4d8:	6922      	ldr	r2, [r4, #16]
 800e4da:	bf0c      	ite	eq
 800e4dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4e0:	2500      	movne	r5, #0
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	bfc4      	itt	gt
 800e4e6:	1a9b      	subgt	r3, r3, r2
 800e4e8:	18ed      	addgt	r5, r5, r3
 800e4ea:	f04f 0900 	mov.w	r9, #0
 800e4ee:	341a      	adds	r4, #26
 800e4f0:	454d      	cmp	r5, r9
 800e4f2:	d11a      	bne.n	800e52a <_printf_common+0xd6>
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	e008      	b.n	800e50a <_printf_common+0xb6>
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	4652      	mov	r2, sl
 800e4fc:	4639      	mov	r1, r7
 800e4fe:	4630      	mov	r0, r6
 800e500:	47c0      	blx	r8
 800e502:	3001      	adds	r0, #1
 800e504:	d103      	bne.n	800e50e <_printf_common+0xba>
 800e506:	f04f 30ff 	mov.w	r0, #4294967295
 800e50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e50e:	3501      	adds	r5, #1
 800e510:	e7c3      	b.n	800e49a <_printf_common+0x46>
 800e512:	18e1      	adds	r1, r4, r3
 800e514:	1c5a      	adds	r2, r3, #1
 800e516:	2030      	movs	r0, #48	; 0x30
 800e518:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e51c:	4422      	add	r2, r4
 800e51e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e522:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e526:	3302      	adds	r3, #2
 800e528:	e7c5      	b.n	800e4b6 <_printf_common+0x62>
 800e52a:	2301      	movs	r3, #1
 800e52c:	4622      	mov	r2, r4
 800e52e:	4639      	mov	r1, r7
 800e530:	4630      	mov	r0, r6
 800e532:	47c0      	blx	r8
 800e534:	3001      	adds	r0, #1
 800e536:	d0e6      	beq.n	800e506 <_printf_common+0xb2>
 800e538:	f109 0901 	add.w	r9, r9, #1
 800e53c:	e7d8      	b.n	800e4f0 <_printf_common+0x9c>
	...

0800e540 <_printf_i>:
 800e540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e544:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e548:	460c      	mov	r4, r1
 800e54a:	7e09      	ldrb	r1, [r1, #24]
 800e54c:	b085      	sub	sp, #20
 800e54e:	296e      	cmp	r1, #110	; 0x6e
 800e550:	4617      	mov	r7, r2
 800e552:	4606      	mov	r6, r0
 800e554:	4698      	mov	r8, r3
 800e556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e558:	f000 80b3 	beq.w	800e6c2 <_printf_i+0x182>
 800e55c:	d822      	bhi.n	800e5a4 <_printf_i+0x64>
 800e55e:	2963      	cmp	r1, #99	; 0x63
 800e560:	d036      	beq.n	800e5d0 <_printf_i+0x90>
 800e562:	d80a      	bhi.n	800e57a <_printf_i+0x3a>
 800e564:	2900      	cmp	r1, #0
 800e566:	f000 80b9 	beq.w	800e6dc <_printf_i+0x19c>
 800e56a:	2958      	cmp	r1, #88	; 0x58
 800e56c:	f000 8083 	beq.w	800e676 <_printf_i+0x136>
 800e570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e574:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e578:	e032      	b.n	800e5e0 <_printf_i+0xa0>
 800e57a:	2964      	cmp	r1, #100	; 0x64
 800e57c:	d001      	beq.n	800e582 <_printf_i+0x42>
 800e57e:	2969      	cmp	r1, #105	; 0x69
 800e580:	d1f6      	bne.n	800e570 <_printf_i+0x30>
 800e582:	6820      	ldr	r0, [r4, #0]
 800e584:	6813      	ldr	r3, [r2, #0]
 800e586:	0605      	lsls	r5, r0, #24
 800e588:	f103 0104 	add.w	r1, r3, #4
 800e58c:	d52a      	bpl.n	800e5e4 <_printf_i+0xa4>
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6011      	str	r1, [r2, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	da03      	bge.n	800e59e <_printf_i+0x5e>
 800e596:	222d      	movs	r2, #45	; 0x2d
 800e598:	425b      	negs	r3, r3
 800e59a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e59e:	486f      	ldr	r0, [pc, #444]	; (800e75c <_printf_i+0x21c>)
 800e5a0:	220a      	movs	r2, #10
 800e5a2:	e039      	b.n	800e618 <_printf_i+0xd8>
 800e5a4:	2973      	cmp	r1, #115	; 0x73
 800e5a6:	f000 809d 	beq.w	800e6e4 <_printf_i+0x1a4>
 800e5aa:	d808      	bhi.n	800e5be <_printf_i+0x7e>
 800e5ac:	296f      	cmp	r1, #111	; 0x6f
 800e5ae:	d020      	beq.n	800e5f2 <_printf_i+0xb2>
 800e5b0:	2970      	cmp	r1, #112	; 0x70
 800e5b2:	d1dd      	bne.n	800e570 <_printf_i+0x30>
 800e5b4:	6823      	ldr	r3, [r4, #0]
 800e5b6:	f043 0320 	orr.w	r3, r3, #32
 800e5ba:	6023      	str	r3, [r4, #0]
 800e5bc:	e003      	b.n	800e5c6 <_printf_i+0x86>
 800e5be:	2975      	cmp	r1, #117	; 0x75
 800e5c0:	d017      	beq.n	800e5f2 <_printf_i+0xb2>
 800e5c2:	2978      	cmp	r1, #120	; 0x78
 800e5c4:	d1d4      	bne.n	800e570 <_printf_i+0x30>
 800e5c6:	2378      	movs	r3, #120	; 0x78
 800e5c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e5cc:	4864      	ldr	r0, [pc, #400]	; (800e760 <_printf_i+0x220>)
 800e5ce:	e055      	b.n	800e67c <_printf_i+0x13c>
 800e5d0:	6813      	ldr	r3, [r2, #0]
 800e5d2:	1d19      	adds	r1, r3, #4
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	6011      	str	r1, [r2, #0]
 800e5d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	e08c      	b.n	800e6fe <_printf_i+0x1be>
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	6011      	str	r1, [r2, #0]
 800e5e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5ec:	bf18      	it	ne
 800e5ee:	b21b      	sxthne	r3, r3
 800e5f0:	e7cf      	b.n	800e592 <_printf_i+0x52>
 800e5f2:	6813      	ldr	r3, [r2, #0]
 800e5f4:	6825      	ldr	r5, [r4, #0]
 800e5f6:	1d18      	adds	r0, r3, #4
 800e5f8:	6010      	str	r0, [r2, #0]
 800e5fa:	0628      	lsls	r0, r5, #24
 800e5fc:	d501      	bpl.n	800e602 <_printf_i+0xc2>
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	e002      	b.n	800e608 <_printf_i+0xc8>
 800e602:	0668      	lsls	r0, r5, #25
 800e604:	d5fb      	bpl.n	800e5fe <_printf_i+0xbe>
 800e606:	881b      	ldrh	r3, [r3, #0]
 800e608:	4854      	ldr	r0, [pc, #336]	; (800e75c <_printf_i+0x21c>)
 800e60a:	296f      	cmp	r1, #111	; 0x6f
 800e60c:	bf14      	ite	ne
 800e60e:	220a      	movne	r2, #10
 800e610:	2208      	moveq	r2, #8
 800e612:	2100      	movs	r1, #0
 800e614:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e618:	6865      	ldr	r5, [r4, #4]
 800e61a:	60a5      	str	r5, [r4, #8]
 800e61c:	2d00      	cmp	r5, #0
 800e61e:	f2c0 8095 	blt.w	800e74c <_printf_i+0x20c>
 800e622:	6821      	ldr	r1, [r4, #0]
 800e624:	f021 0104 	bic.w	r1, r1, #4
 800e628:	6021      	str	r1, [r4, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d13d      	bne.n	800e6aa <_printf_i+0x16a>
 800e62e:	2d00      	cmp	r5, #0
 800e630:	f040 808e 	bne.w	800e750 <_printf_i+0x210>
 800e634:	4665      	mov	r5, ip
 800e636:	2a08      	cmp	r2, #8
 800e638:	d10b      	bne.n	800e652 <_printf_i+0x112>
 800e63a:	6823      	ldr	r3, [r4, #0]
 800e63c:	07db      	lsls	r3, r3, #31
 800e63e:	d508      	bpl.n	800e652 <_printf_i+0x112>
 800e640:	6923      	ldr	r3, [r4, #16]
 800e642:	6862      	ldr	r2, [r4, #4]
 800e644:	429a      	cmp	r2, r3
 800e646:	bfde      	ittt	le
 800e648:	2330      	movle	r3, #48	; 0x30
 800e64a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e64e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e652:	ebac 0305 	sub.w	r3, ip, r5
 800e656:	6123      	str	r3, [r4, #16]
 800e658:	f8cd 8000 	str.w	r8, [sp]
 800e65c:	463b      	mov	r3, r7
 800e65e:	aa03      	add	r2, sp, #12
 800e660:	4621      	mov	r1, r4
 800e662:	4630      	mov	r0, r6
 800e664:	f7ff fef6 	bl	800e454 <_printf_common>
 800e668:	3001      	adds	r0, #1
 800e66a:	d14d      	bne.n	800e708 <_printf_i+0x1c8>
 800e66c:	f04f 30ff 	mov.w	r0, #4294967295
 800e670:	b005      	add	sp, #20
 800e672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e676:	4839      	ldr	r0, [pc, #228]	; (800e75c <_printf_i+0x21c>)
 800e678:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e67c:	6813      	ldr	r3, [r2, #0]
 800e67e:	6821      	ldr	r1, [r4, #0]
 800e680:	1d1d      	adds	r5, r3, #4
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	6015      	str	r5, [r2, #0]
 800e686:	060a      	lsls	r2, r1, #24
 800e688:	d50b      	bpl.n	800e6a2 <_printf_i+0x162>
 800e68a:	07ca      	lsls	r2, r1, #31
 800e68c:	bf44      	itt	mi
 800e68e:	f041 0120 	orrmi.w	r1, r1, #32
 800e692:	6021      	strmi	r1, [r4, #0]
 800e694:	b91b      	cbnz	r3, 800e69e <_printf_i+0x15e>
 800e696:	6822      	ldr	r2, [r4, #0]
 800e698:	f022 0220 	bic.w	r2, r2, #32
 800e69c:	6022      	str	r2, [r4, #0]
 800e69e:	2210      	movs	r2, #16
 800e6a0:	e7b7      	b.n	800e612 <_printf_i+0xd2>
 800e6a2:	064d      	lsls	r5, r1, #25
 800e6a4:	bf48      	it	mi
 800e6a6:	b29b      	uxthmi	r3, r3
 800e6a8:	e7ef      	b.n	800e68a <_printf_i+0x14a>
 800e6aa:	4665      	mov	r5, ip
 800e6ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6b0:	fb02 3311 	mls	r3, r2, r1, r3
 800e6b4:	5cc3      	ldrb	r3, [r0, r3]
 800e6b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	2900      	cmp	r1, #0
 800e6be:	d1f5      	bne.n	800e6ac <_printf_i+0x16c>
 800e6c0:	e7b9      	b.n	800e636 <_printf_i+0xf6>
 800e6c2:	6813      	ldr	r3, [r2, #0]
 800e6c4:	6825      	ldr	r5, [r4, #0]
 800e6c6:	6961      	ldr	r1, [r4, #20]
 800e6c8:	1d18      	adds	r0, r3, #4
 800e6ca:	6010      	str	r0, [r2, #0]
 800e6cc:	0628      	lsls	r0, r5, #24
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	d501      	bpl.n	800e6d6 <_printf_i+0x196>
 800e6d2:	6019      	str	r1, [r3, #0]
 800e6d4:	e002      	b.n	800e6dc <_printf_i+0x19c>
 800e6d6:	066a      	lsls	r2, r5, #25
 800e6d8:	d5fb      	bpl.n	800e6d2 <_printf_i+0x192>
 800e6da:	8019      	strh	r1, [r3, #0]
 800e6dc:	2300      	movs	r3, #0
 800e6de:	6123      	str	r3, [r4, #16]
 800e6e0:	4665      	mov	r5, ip
 800e6e2:	e7b9      	b.n	800e658 <_printf_i+0x118>
 800e6e4:	6813      	ldr	r3, [r2, #0]
 800e6e6:	1d19      	adds	r1, r3, #4
 800e6e8:	6011      	str	r1, [r2, #0]
 800e6ea:	681d      	ldr	r5, [r3, #0]
 800e6ec:	6862      	ldr	r2, [r4, #4]
 800e6ee:	2100      	movs	r1, #0
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	f7f1 fd75 	bl	80001e0 <memchr>
 800e6f6:	b108      	cbz	r0, 800e6fc <_printf_i+0x1bc>
 800e6f8:	1b40      	subs	r0, r0, r5
 800e6fa:	6060      	str	r0, [r4, #4]
 800e6fc:	6863      	ldr	r3, [r4, #4]
 800e6fe:	6123      	str	r3, [r4, #16]
 800e700:	2300      	movs	r3, #0
 800e702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e706:	e7a7      	b.n	800e658 <_printf_i+0x118>
 800e708:	6923      	ldr	r3, [r4, #16]
 800e70a:	462a      	mov	r2, r5
 800e70c:	4639      	mov	r1, r7
 800e70e:	4630      	mov	r0, r6
 800e710:	47c0      	blx	r8
 800e712:	3001      	adds	r0, #1
 800e714:	d0aa      	beq.n	800e66c <_printf_i+0x12c>
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	079b      	lsls	r3, r3, #30
 800e71a:	d413      	bmi.n	800e744 <_printf_i+0x204>
 800e71c:	68e0      	ldr	r0, [r4, #12]
 800e71e:	9b03      	ldr	r3, [sp, #12]
 800e720:	4298      	cmp	r0, r3
 800e722:	bfb8      	it	lt
 800e724:	4618      	movlt	r0, r3
 800e726:	e7a3      	b.n	800e670 <_printf_i+0x130>
 800e728:	2301      	movs	r3, #1
 800e72a:	464a      	mov	r2, r9
 800e72c:	4639      	mov	r1, r7
 800e72e:	4630      	mov	r0, r6
 800e730:	47c0      	blx	r8
 800e732:	3001      	adds	r0, #1
 800e734:	d09a      	beq.n	800e66c <_printf_i+0x12c>
 800e736:	3501      	adds	r5, #1
 800e738:	68e3      	ldr	r3, [r4, #12]
 800e73a:	9a03      	ldr	r2, [sp, #12]
 800e73c:	1a9b      	subs	r3, r3, r2
 800e73e:	42ab      	cmp	r3, r5
 800e740:	dcf2      	bgt.n	800e728 <_printf_i+0x1e8>
 800e742:	e7eb      	b.n	800e71c <_printf_i+0x1dc>
 800e744:	2500      	movs	r5, #0
 800e746:	f104 0919 	add.w	r9, r4, #25
 800e74a:	e7f5      	b.n	800e738 <_printf_i+0x1f8>
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d1ac      	bne.n	800e6aa <_printf_i+0x16a>
 800e750:	7803      	ldrb	r3, [r0, #0]
 800e752:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e756:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e75a:	e76c      	b.n	800e636 <_printf_i+0xf6>
 800e75c:	0800ed5d 	.word	0x0800ed5d
 800e760:	0800ed6e 	.word	0x0800ed6e

0800e764 <memmove>:
 800e764:	4288      	cmp	r0, r1
 800e766:	b510      	push	{r4, lr}
 800e768:	eb01 0302 	add.w	r3, r1, r2
 800e76c:	d807      	bhi.n	800e77e <memmove+0x1a>
 800e76e:	1e42      	subs	r2, r0, #1
 800e770:	4299      	cmp	r1, r3
 800e772:	d00a      	beq.n	800e78a <memmove+0x26>
 800e774:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e778:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e77c:	e7f8      	b.n	800e770 <memmove+0xc>
 800e77e:	4283      	cmp	r3, r0
 800e780:	d9f5      	bls.n	800e76e <memmove+0xa>
 800e782:	1881      	adds	r1, r0, r2
 800e784:	1ad2      	subs	r2, r2, r3
 800e786:	42d3      	cmn	r3, r2
 800e788:	d100      	bne.n	800e78c <memmove+0x28>
 800e78a:	bd10      	pop	{r4, pc}
 800e78c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e790:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e794:	e7f7      	b.n	800e786 <memmove+0x22>

0800e796 <_realloc_r>:
 800e796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e798:	4607      	mov	r7, r0
 800e79a:	4614      	mov	r4, r2
 800e79c:	460e      	mov	r6, r1
 800e79e:	b921      	cbnz	r1, 800e7aa <_realloc_r+0x14>
 800e7a0:	4611      	mov	r1, r2
 800e7a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e7a6:	f7ff bc77 	b.w	800e098 <_malloc_r>
 800e7aa:	b922      	cbnz	r2, 800e7b6 <_realloc_r+0x20>
 800e7ac:	f7ff fc26 	bl	800dffc <_free_r>
 800e7b0:	4625      	mov	r5, r4
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7b6:	f000 f814 	bl	800e7e2 <_malloc_usable_size_r>
 800e7ba:	42a0      	cmp	r0, r4
 800e7bc:	d20f      	bcs.n	800e7de <_realloc_r+0x48>
 800e7be:	4621      	mov	r1, r4
 800e7c0:	4638      	mov	r0, r7
 800e7c2:	f7ff fc69 	bl	800e098 <_malloc_r>
 800e7c6:	4605      	mov	r5, r0
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d0f2      	beq.n	800e7b2 <_realloc_r+0x1c>
 800e7cc:	4631      	mov	r1, r6
 800e7ce:	4622      	mov	r2, r4
 800e7d0:	f7ff fc00 	bl	800dfd4 <memcpy>
 800e7d4:	4631      	mov	r1, r6
 800e7d6:	4638      	mov	r0, r7
 800e7d8:	f7ff fc10 	bl	800dffc <_free_r>
 800e7dc:	e7e9      	b.n	800e7b2 <_realloc_r+0x1c>
 800e7de:	4635      	mov	r5, r6
 800e7e0:	e7e7      	b.n	800e7b2 <_realloc_r+0x1c>

0800e7e2 <_malloc_usable_size_r>:
 800e7e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7e6:	1f18      	subs	r0, r3, #4
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	bfbc      	itt	lt
 800e7ec:	580b      	ldrlt	r3, [r1, r0]
 800e7ee:	18c0      	addlt	r0, r0, r3
 800e7f0:	4770      	bx	lr
	...

0800e7f4 <_init>:
 800e7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7f6:	bf00      	nop
 800e7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7fa:	bc08      	pop	{r3}
 800e7fc:	469e      	mov	lr, r3
 800e7fe:	4770      	bx	lr

0800e800 <_fini>:
 800e800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e802:	bf00      	nop
 800e804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e806:	bc08      	pop	{r3}
 800e808:	469e      	mov	lr, r3
 800e80a:	4770      	bx	lr
